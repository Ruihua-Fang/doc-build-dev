import{S as $3t,i as I3t,s as q3t,e as a,k as l,w as f,t as o,M as N3t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as j3t}from"../../chunks/vendor-6b77c823.js";import{T as WPr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function D3t(qf){let ee,io,ce,Ce,lo,he,Me,Xo,Ni,Nf,fa,ji,Di,x5,jf,xe,co,Gi,On,k5,Vn,Xn,S5,Oi,zn,R5,Vi,Df,Da;return{c(){ee=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ni=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),x5=o(")."),jf=l(),xe=a("p"),co=o("Likewise, if your "),Gi=a("code"),On=o("NewModel"),k5=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),S5=o(`, make sure its
`),Oi=a("code"),zn=o("config_class"),R5=o(` attribute is set to the same class you use when registering the model (here
`),Vi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){ee=n(fo,"P",{});var ue=s(ee);io=r(ue,"If your "),ce=n(ue,"CODE",{});var M7=s(ce);Ce=r(M7,"NewModelConfig"),M7.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Xi=s(he);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Xo=r(ue,`, make sure its
`),Ni=n(ue,"CODE",{});var E7=s(Ni);Nf=r(E7,"model_type"),E7.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),ji=n(ue,"CODE",{});var C7=s(ji);Di=r(C7,'"new-model"'),C7.forEach(t),x5=r(ue,")."),ue.forEach(t),jf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Gi=n(zo,"CODE",{});var Ga=s(Gi);On=r(Ga,"NewModel"),Ga.forEach(t),k5=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var w7=s(Vn);Xn=r(w7,"PreTrainedModel"),w7.forEach(t),S5=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Gf=s(Oi);zn=r(Gf,"config_class"),Gf.forEach(t),R5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Vi=n(zo,"CODE",{});var A7=s(Vi);Df=r(A7,"NewModelConfig"),A7.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,ee,ue),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo),e(ee,he),e(he,Me),e(ee,Xo),e(ee,Ni),e(Ni,Nf),e(ee,fa),e(ee,ji),e(ji,Di),e(ee,x5),b(fo,jf,ue),b(fo,xe,ue),e(xe,co),e(xe,Gi),e(Gi,On),e(xe,k5),e(xe,Vn),e(Vn,Xn),e(xe,S5),e(xe,Oi),e(Oi,zn),e(xe,R5),e(xe,Vi),e(Vi,Df),e(xe,Da)},d(fo){fo&&t(ee),fo&&t(jf),fo&&t(xe)}}}function G3t(qf){let ee,io,ce,Ce,lo;return{c(){ee=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo)},d(he){he&&t(ee)}}}function O3t(qf){let ee,io,ce,Ce,lo;return{c(){ee=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){ee=n(he,"P",{});var Me=s(ee);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,ee,Me),e(ee,io),e(ee,ce),e(ce,Ce),e(ee,lo)},d(he){he&&t(ee)}}}function V3t(qf){let ee,io,ce,Ce,lo,he,Me,Xo,Ni,Nf,fa,ji,Di,x5,jf,xe,co,Gi,On,k5,Vn,Xn,S5,Oi,zn,R5,Vi,Df,Da,fo,ue,M7,Xi,E7,C7,zo,Ga,w7,Gf,A7,UIe,IRe,zi,Of,gY,B5,JIe,hY,YIe,qRe,Qn,KIe,pY,ZIe,eqe,_Y,oqe,rqe,NRe,P5,jRe,y7,tqe,DRe,Vf,GRe,Qi,Xf,uY,$5,aqe,bY,nqe,ORe,Qo,I5,sqe,q5,lqe,L7,iqe,dqe,cqe,N5,fqe,vY,mqe,gqe,hqe,mo,j5,pqe,FY,_qe,uqe,Wi,bqe,TY,vqe,Fqe,MY,Tqe,Mqe,Eqe,v,zf,EY,Cqe,wqe,x7,Aqe,yqe,Lqe,Qf,CY,xqe,kqe,k7,Sqe,Rqe,Bqe,Wf,wY,Pqe,$qe,S7,Iqe,qqe,Nqe,Hf,AY,jqe,Dqe,R7,Gqe,Oqe,Vqe,Uf,yY,Xqe,zqe,B7,Qqe,Wqe,Hqe,Jf,LY,Uqe,Jqe,P7,Yqe,Kqe,Zqe,Yf,xY,eNe,oNe,$7,rNe,tNe,aNe,Kf,kY,nNe,sNe,I7,lNe,iNe,dNe,Zf,SY,cNe,fNe,q7,mNe,gNe,hNe,em,RY,pNe,_Ne,N7,uNe,bNe,vNe,om,BY,FNe,TNe,j7,MNe,ENe,CNe,rm,PY,wNe,ANe,D7,yNe,LNe,xNe,tm,$Y,kNe,SNe,G7,RNe,BNe,PNe,am,IY,$Ne,INe,O7,qNe,NNe,jNe,nm,qY,DNe,GNe,V7,ONe,VNe,XNe,sm,NY,zNe,QNe,X7,WNe,HNe,UNe,lm,jY,JNe,YNe,z7,KNe,ZNe,eje,im,DY,oje,rje,Q7,tje,aje,nje,dm,GY,sje,lje,W7,ije,dje,cje,cm,OY,fje,mje,H7,gje,hje,pje,fm,VY,_je,uje,U7,bje,vje,Fje,mm,XY,Tje,Mje,J7,Eje,Cje,wje,gm,zY,Aje,yje,Y7,Lje,xje,kje,hm,QY,Sje,Rje,K7,Bje,Pje,$je,pm,WY,Ije,qje,Z7,Nje,jje,Dje,_m,HY,Gje,Oje,ex,Vje,Xje,zje,um,UY,Qje,Wje,ox,Hje,Uje,Jje,bm,JY,Yje,Kje,rx,Zje,eDe,oDe,vm,YY,rDe,tDe,tx,aDe,nDe,sDe,Fm,KY,lDe,iDe,ax,dDe,cDe,fDe,Tm,ZY,mDe,gDe,nx,hDe,pDe,_De,Mm,eK,uDe,bDe,sx,vDe,FDe,TDe,Em,oK,MDe,EDe,lx,CDe,wDe,ADe,Cm,rK,yDe,LDe,ix,xDe,kDe,SDe,wm,tK,RDe,BDe,dx,PDe,$De,IDe,Am,aK,qDe,NDe,cx,jDe,DDe,GDe,ym,nK,ODe,VDe,fx,XDe,zDe,QDe,Lm,sK,WDe,HDe,mx,UDe,JDe,YDe,xm,lK,KDe,ZDe,gx,eGe,oGe,rGe,km,iK,tGe,aGe,hx,nGe,sGe,lGe,Sm,dK,iGe,dGe,px,cGe,fGe,mGe,Rm,cK,gGe,hGe,_x,pGe,_Ge,uGe,Bm,fK,bGe,vGe,ux,FGe,TGe,MGe,Pm,mK,EGe,CGe,bx,wGe,AGe,yGe,$m,gK,LGe,xGe,vx,kGe,SGe,RGe,Im,hK,BGe,PGe,Fx,$Ge,IGe,qGe,qm,pK,NGe,jGe,Tx,DGe,GGe,OGe,Nm,_K,VGe,XGe,Mx,zGe,QGe,WGe,jm,uK,HGe,UGe,Ex,JGe,YGe,KGe,Dm,bK,ZGe,eOe,Cx,oOe,rOe,tOe,Gm,vK,aOe,nOe,wx,sOe,lOe,iOe,Om,FK,dOe,cOe,Ax,fOe,mOe,gOe,Vm,TK,hOe,pOe,yx,_Oe,uOe,bOe,Xm,MK,vOe,FOe,Lx,TOe,MOe,EOe,zm,EK,COe,wOe,xx,AOe,yOe,LOe,Qm,CK,xOe,kOe,kx,SOe,ROe,BOe,Wm,wK,POe,$Oe,Sx,IOe,qOe,NOe,Hm,AK,jOe,DOe,Rx,GOe,OOe,VOe,Um,yK,XOe,zOe,Bx,QOe,WOe,HOe,Jm,LK,UOe,JOe,Px,YOe,KOe,ZOe,Ym,xK,eVe,oVe,$x,rVe,tVe,aVe,Km,kK,nVe,sVe,Ix,lVe,iVe,dVe,Zm,SK,cVe,fVe,qx,mVe,gVe,hVe,eg,RK,pVe,_Ve,Nx,uVe,bVe,vVe,og,BK,FVe,TVe,jx,MVe,EVe,CVe,rg,PK,wVe,AVe,Dx,yVe,LVe,xVe,tg,$K,kVe,SVe,Gx,RVe,BVe,PVe,ag,IK,$Ve,IVe,Ox,qVe,NVe,jVe,ng,qK,DVe,GVe,Vx,OVe,VVe,XVe,sg,NK,zVe,QVe,Xx,WVe,HVe,UVe,lg,jK,JVe,YVe,zx,KVe,ZVe,eXe,ig,DK,oXe,rXe,Qx,tXe,aXe,nXe,dg,GK,sXe,lXe,Wx,iXe,dXe,cXe,cg,OK,fXe,mXe,Hx,gXe,hXe,pXe,fg,VK,_Xe,uXe,Ux,bXe,vXe,FXe,mg,XK,TXe,MXe,Jx,EXe,CXe,wXe,gg,zK,AXe,yXe,Yx,LXe,xXe,kXe,hg,QK,SXe,RXe,Kx,BXe,PXe,$Xe,pg,WK,IXe,qXe,Zx,NXe,jXe,DXe,_g,HK,GXe,OXe,ek,VXe,XXe,zXe,ug,UK,QXe,WXe,ok,HXe,UXe,JXe,bg,JK,YXe,KXe,rk,ZXe,eze,oze,vg,YK,rze,tze,tk,aze,nze,sze,Fg,KK,lze,ize,ak,dze,cze,fze,Tg,ZK,mze,gze,nk,hze,pze,_ze,Mg,eZ,uze,bze,sk,vze,Fze,Tze,Eg,oZ,Mze,Eze,lk,Cze,wze,Aze,Cg,rZ,yze,Lze,ik,xze,kze,Sze,wg,tZ,Rze,Bze,dk,Pze,$ze,Ize,Ag,aZ,qze,Nze,ck,jze,Dze,Gze,yg,nZ,Oze,Vze,fk,Xze,zze,Qze,Lg,sZ,Wze,Hze,mk,Uze,Jze,Yze,xg,lZ,Kze,Zze,gk,eQe,oQe,rQe,kg,iZ,tQe,aQe,hk,nQe,sQe,lQe,Sg,dZ,iQe,dQe,pk,cQe,fQe,mQe,Rg,cZ,gQe,hQe,_k,pQe,_Qe,uQe,Bg,fZ,bQe,vQe,uk,FQe,TQe,MQe,Pg,mZ,EQe,CQe,bk,wQe,AQe,yQe,$g,gZ,LQe,xQe,vk,kQe,SQe,RQe,Ig,hZ,BQe,PQe,Fk,$Qe,IQe,qQe,qg,pZ,NQe,jQe,Tk,DQe,GQe,OQe,Ng,_Z,VQe,XQe,Mk,zQe,QQe,WQe,uZ,HQe,UQe,D5,JQe,jg,G5,YQe,bZ,KQe,VRe,Hi,Dg,vZ,O5,ZQe,FZ,eWe,XRe,Wo,V5,oWe,X5,rWe,Ek,tWe,aWe,nWe,z5,sWe,TZ,lWe,iWe,dWe,go,Q5,cWe,MZ,fWe,mWe,Oa,gWe,EZ,hWe,pWe,CZ,_We,uWe,wZ,bWe,vWe,FWe,E,Wn,AZ,TWe,MWe,Ck,EWe,CWe,wk,wWe,AWe,yWe,Hn,yZ,LWe,xWe,Ak,kWe,SWe,yk,RWe,BWe,PWe,Un,LZ,$We,IWe,Lk,qWe,NWe,xk,jWe,DWe,GWe,Gg,xZ,OWe,VWe,kk,XWe,zWe,QWe,Jn,kZ,WWe,HWe,Sk,UWe,JWe,Rk,YWe,KWe,ZWe,Og,SZ,eHe,oHe,Bk,rHe,tHe,aHe,Vg,RZ,nHe,sHe,Pk,lHe,iHe,dHe,Xg,BZ,cHe,fHe,$k,mHe,gHe,hHe,Yn,PZ,pHe,_He,Ik,uHe,bHe,qk,vHe,FHe,THe,Kn,$Z,MHe,EHe,Nk,CHe,wHe,jk,AHe,yHe,LHe,Zn,IZ,xHe,kHe,Dk,SHe,RHe,Gk,BHe,PHe,$He,zg,qZ,IHe,qHe,Ok,NHe,jHe,DHe,Qg,NZ,GHe,OHe,Vk,VHe,XHe,zHe,es,jZ,QHe,WHe,Xk,HHe,UHe,zk,JHe,YHe,KHe,Wg,DZ,ZHe,eUe,Qk,oUe,rUe,tUe,os,GZ,aUe,nUe,Wk,sUe,lUe,Hk,iUe,dUe,cUe,rs,OZ,fUe,mUe,Uk,gUe,hUe,Jk,pUe,_Ue,uUe,ts,VZ,bUe,vUe,Yk,FUe,TUe,XZ,MUe,EUe,CUe,Hg,zZ,wUe,AUe,Kk,yUe,LUe,xUe,as,QZ,kUe,SUe,Zk,RUe,BUe,eS,PUe,$Ue,IUe,ns,WZ,qUe,NUe,oS,jUe,DUe,rS,GUe,OUe,VUe,ss,HZ,XUe,zUe,tS,QUe,WUe,aS,HUe,UUe,JUe,ls,UZ,YUe,KUe,nS,ZUe,eJe,sS,oJe,rJe,tJe,is,JZ,aJe,nJe,lS,sJe,lJe,iS,iJe,dJe,cJe,Ug,YZ,fJe,mJe,dS,gJe,hJe,pJe,ds,KZ,_Je,uJe,cS,bJe,vJe,fS,FJe,TJe,MJe,Jg,ZZ,EJe,CJe,mS,wJe,AJe,yJe,cs,eee,LJe,xJe,gS,kJe,SJe,hS,RJe,BJe,PJe,fs,oee,$Je,IJe,pS,qJe,NJe,_S,jJe,DJe,GJe,ms,ree,OJe,VJe,uS,XJe,zJe,bS,QJe,WJe,HJe,gs,tee,UJe,JJe,vS,YJe,KJe,FS,ZJe,eYe,oYe,Yg,aee,rYe,tYe,TS,aYe,nYe,sYe,hs,nee,lYe,iYe,MS,dYe,cYe,ES,fYe,mYe,gYe,ps,see,hYe,pYe,CS,_Ye,uYe,wS,bYe,vYe,FYe,_s,lee,TYe,MYe,AS,EYe,CYe,yS,wYe,AYe,yYe,us,iee,LYe,xYe,LS,kYe,SYe,xS,RYe,BYe,PYe,bs,dee,$Ye,IYe,kS,qYe,NYe,SS,jYe,DYe,GYe,vs,cee,OYe,VYe,RS,XYe,zYe,BS,QYe,WYe,HYe,Kg,fee,UYe,JYe,PS,YYe,KYe,ZYe,Fs,mee,eKe,oKe,$S,rKe,tKe,IS,aKe,nKe,sKe,Zg,gee,lKe,iKe,qS,dKe,cKe,fKe,eh,hee,mKe,gKe,NS,hKe,pKe,_Ke,Ts,pee,uKe,bKe,jS,vKe,FKe,DS,TKe,MKe,EKe,Ms,_ee,CKe,wKe,GS,AKe,yKe,OS,LKe,xKe,kKe,oh,uee,SKe,RKe,VS,BKe,PKe,$Ke,Es,bee,IKe,qKe,XS,NKe,jKe,zS,DKe,GKe,OKe,Cs,vee,VKe,XKe,QS,zKe,QKe,WS,WKe,HKe,UKe,ws,Fee,JKe,YKe,HS,KKe,ZKe,US,eZe,oZe,rZe,As,Tee,tZe,aZe,JS,nZe,sZe,YS,lZe,iZe,dZe,ys,Mee,cZe,fZe,KS,mZe,gZe,ZS,hZe,pZe,_Ze,rh,Eee,uZe,bZe,eR,vZe,FZe,TZe,th,Cee,MZe,EZe,oR,CZe,wZe,AZe,ah,wee,yZe,LZe,rR,xZe,kZe,SZe,nh,Aee,RZe,BZe,tR,PZe,$Ze,IZe,Ls,yee,qZe,NZe,aR,jZe,DZe,nR,GZe,OZe,VZe,sh,Lee,XZe,zZe,sR,QZe,WZe,HZe,xs,xee,UZe,JZe,lR,YZe,KZe,iR,ZZe,eeo,oeo,ks,kee,reo,teo,dR,aeo,neo,cR,seo,leo,ieo,Ss,See,deo,ceo,fR,feo,meo,mR,geo,heo,peo,Rs,Ree,_eo,ueo,gR,beo,veo,hR,Feo,Teo,Meo,Bs,Bee,Eeo,Ceo,pR,weo,Aeo,_R,yeo,Leo,xeo,Ps,Pee,keo,Seo,uR,Reo,Beo,bR,Peo,$eo,Ieo,lh,$ee,qeo,Neo,vR,jeo,Deo,Geo,ih,Iee,Oeo,Veo,FR,Xeo,zeo,Qeo,$s,qee,Weo,Heo,TR,Ueo,Jeo,MR,Yeo,Keo,Zeo,Is,Nee,eoo,ooo,ER,roo,too,CR,aoo,noo,soo,qs,jee,loo,ioo,wR,doo,coo,AR,foo,moo,goo,dh,Dee,hoo,poo,yR,_oo,uoo,boo,ch,Gee,voo,Foo,LR,Too,Moo,Eoo,fh,Oee,Coo,woo,xR,Aoo,yoo,Loo,mh,Vee,xoo,koo,kR,Soo,Roo,Boo,gh,Xee,Poo,$oo,SR,Ioo,qoo,Noo,Ns,zee,joo,Doo,RR,Goo,Ooo,BR,Voo,Xoo,zoo,hh,Qee,Qoo,Woo,PR,Hoo,Uoo,Joo,ph,Wee,Yoo,Koo,$R,Zoo,ero,oro,js,Hee,rro,tro,IR,aro,nro,qR,sro,lro,iro,Ds,Uee,dro,cro,NR,fro,mro,jR,gro,hro,pro,Jee,_ro,uro,W5,bro,_h,H5,vro,Yee,Fro,zRe,Ui,uh,Kee,U5,Tro,Zee,Mro,QRe,Ho,J5,Ero,Y5,Cro,DR,wro,Aro,yro,K5,Lro,eoe,xro,kro,Sro,$e,Z5,Rro,ooe,Bro,Pro,Va,$ro,roe,Iro,qro,toe,Nro,jro,aoe,Dro,Gro,Oro,J,bh,noe,Vro,Xro,GR,zro,Qro,Wro,vh,soe,Hro,Uro,OR,Jro,Yro,Kro,Fh,loe,Zro,eto,VR,oto,rto,tto,Th,ioe,ato,nto,XR,sto,lto,ito,Mh,doe,dto,cto,zR,fto,mto,gto,Eh,coe,hto,pto,QR,_to,uto,bto,Ch,foe,vto,Fto,WR,Tto,Mto,Eto,wh,moe,Cto,wto,HR,Ato,yto,Lto,Ah,goe,xto,kto,UR,Sto,Rto,Bto,yh,hoe,Pto,$to,JR,Ito,qto,Nto,Lh,poe,jto,Dto,YR,Gto,Oto,Vto,xh,_oe,Xto,zto,KR,Qto,Wto,Hto,kh,uoe,Uto,Jto,ZR,Yto,Kto,Zto,Sh,boe,eao,oao,eB,rao,tao,aao,Rh,voe,nao,sao,oB,lao,iao,dao,Bh,Foe,cao,fao,rB,mao,gao,hao,Ph,Toe,pao,_ao,tB,uao,bao,vao,$h,Moe,Fao,Tao,aB,Mao,Eao,Cao,Ih,Eoe,wao,Aao,nB,yao,Lao,xao,qh,Coe,kao,Sao,sB,Rao,Bao,Pao,Nh,$ao,woe,Iao,qao,e3,Nao,jh,o3,jao,Aoe,Dao,WRe,Ji,Dh,yoe,r3,Gao,Loe,Oao,HRe,Uo,t3,Vao,a3,Xao,lB,zao,Qao,Wao,n3,Hao,xoe,Uao,Jao,Yao,Ie,s3,Kao,koe,Zao,eno,Yi,ono,Soe,rno,tno,Roe,ano,nno,sno,ke,Gh,Boe,lno,ino,iB,dno,cno,fno,Oh,Poe,mno,gno,dB,hno,pno,_no,Vh,$oe,uno,bno,cB,vno,Fno,Tno,Xh,Ioe,Mno,Eno,fB,Cno,wno,Ano,zh,qoe,yno,Lno,mB,xno,kno,Sno,Qh,Noe,Rno,Bno,gB,Pno,$no,Ino,Wh,joe,qno,Nno,hB,jno,Dno,Gno,Hh,Doe,Ono,Vno,pB,Xno,zno,Qno,Uh,Wno,Goe,Hno,Uno,l3,Jno,Jh,i3,Yno,Ooe,Kno,URe,Ki,Yh,Voe,d3,Zno,Xoe,eso,JRe,Jo,c3,oso,Zi,rso,_B,tso,aso,uB,nso,sso,lso,f3,iso,zoe,dso,cso,fso,Xr,m3,mso,Qoe,gso,hso,ed,pso,Woe,_so,uso,bB,bso,vso,Fso,Hoe,Tso,Mso,g3,Eso,qe,h3,Cso,Uoe,wso,Aso,Xa,yso,Joe,Lso,xso,Yoe,kso,Sso,Koe,Rso,Bso,Pso,T,Kh,Zoe,$so,Iso,vB,qso,Nso,jso,Zh,ere,Dso,Gso,FB,Oso,Vso,Xso,ep,ore,zso,Qso,TB,Wso,Hso,Uso,op,rre,Jso,Yso,MB,Kso,Zso,elo,rp,tre,olo,rlo,EB,tlo,alo,nlo,tp,are,slo,llo,CB,ilo,dlo,clo,ap,nre,flo,mlo,wB,glo,hlo,plo,np,sre,_lo,ulo,AB,blo,vlo,Flo,sp,lre,Tlo,Mlo,yB,Elo,Clo,wlo,lp,ire,Alo,ylo,LB,Llo,xlo,klo,ip,dre,Slo,Rlo,xB,Blo,Plo,$lo,dp,cre,Ilo,qlo,kB,Nlo,jlo,Dlo,cp,fre,Glo,Olo,SB,Vlo,Xlo,zlo,fp,mre,Qlo,Wlo,RB,Hlo,Ulo,Jlo,mp,gre,Ylo,Klo,BB,Zlo,eio,oio,gp,hre,rio,tio,PB,aio,nio,sio,hp,pre,lio,iio,$B,dio,cio,fio,pp,_re,mio,gio,IB,hio,pio,_io,_p,ure,uio,bio,qB,vio,Fio,Tio,up,bre,Mio,Eio,NB,Cio,wio,Aio,bp,vre,yio,Lio,jB,xio,kio,Sio,vp,Fre,Rio,Bio,DB,Pio,$io,Iio,Fp,Tre,qio,Nio,GB,jio,Dio,Gio,Tp,Mre,Oio,Vio,OB,Xio,zio,Qio,Mp,Ere,Wio,Hio,VB,Uio,Jio,Yio,Ep,Cre,Kio,Zio,XB,edo,odo,rdo,Cp,wre,tdo,ado,zB,ndo,sdo,ldo,wp,Are,ido,ddo,QB,cdo,fdo,mdo,Ap,yre,gdo,hdo,WB,pdo,_do,udo,yp,Lre,bdo,vdo,HB,Fdo,Tdo,Mdo,Gs,xre,Edo,Cdo,UB,wdo,Ado,JB,ydo,Ldo,xdo,Lp,kre,kdo,Sdo,YB,Rdo,Bdo,Pdo,xp,Sre,$do,Ido,KB,qdo,Ndo,jdo,kp,Rre,Ddo,Gdo,ZB,Odo,Vdo,Xdo,Sp,Bre,zdo,Qdo,eP,Wdo,Hdo,Udo,Rp,Pre,Jdo,Ydo,oP,Kdo,Zdo,eco,Bp,$re,oco,rco,rP,tco,aco,nco,Pp,Ire,sco,lco,tP,ico,dco,cco,$p,qre,fco,mco,aP,gco,hco,pco,Ip,Nre,_co,uco,nP,bco,vco,Fco,qp,jre,Tco,Mco,sP,Eco,Cco,wco,Np,Dre,Aco,yco,lP,Lco,xco,kco,jp,Gre,Sco,Rco,iP,Bco,Pco,$co,Dp,Ore,Ico,qco,dP,Nco,jco,Dco,Gp,Vre,Gco,Oco,cP,Vco,Xco,zco,Op,Xre,Qco,Wco,fP,Hco,Uco,Jco,Vp,zre,Yco,Kco,mP,Zco,efo,ofo,Xp,Qre,rfo,tfo,gP,afo,nfo,sfo,zp,Wre,lfo,ifo,hP,dfo,cfo,ffo,Qp,Hre,mfo,gfo,pP,hfo,pfo,_fo,Wp,Ure,ufo,bfo,_P,vfo,Ffo,Tfo,Hp,Jre,Mfo,Efo,uP,Cfo,wfo,Afo,Up,Yre,yfo,Lfo,bP,xfo,kfo,Sfo,Jp,Kre,Rfo,Bfo,vP,Pfo,$fo,Ifo,Yp,Zre,qfo,Nfo,FP,jfo,Dfo,Gfo,Kp,ete,Ofo,Vfo,TP,Xfo,zfo,Qfo,Zp,ote,Wfo,Hfo,MP,Ufo,Jfo,Yfo,e_,rte,Kfo,Zfo,EP,emo,omo,rmo,o_,tte,tmo,amo,CP,nmo,smo,lmo,r_,ate,imo,dmo,wP,cmo,fmo,mmo,t_,nte,gmo,hmo,AP,pmo,_mo,umo,a_,ste,bmo,vmo,yP,Fmo,Tmo,Mmo,n_,lte,Emo,Cmo,LP,wmo,Amo,ymo,s_,ite,Lmo,xmo,xP,kmo,Smo,Rmo,l_,dte,Bmo,Pmo,kP,$mo,Imo,qmo,i_,cte,Nmo,jmo,SP,Dmo,Gmo,Omo,d_,fte,Vmo,Xmo,RP,zmo,Qmo,Wmo,c_,mte,Hmo,Umo,BP,Jmo,Ymo,Kmo,f_,gte,Zmo,ego,PP,ogo,rgo,tgo,m_,hte,ago,ngo,$P,sgo,lgo,igo,g_,pte,dgo,cgo,IP,fgo,mgo,ggo,h_,_te,hgo,pgo,qP,_go,ugo,bgo,p_,ute,vgo,Fgo,NP,Tgo,Mgo,Ego,__,bte,Cgo,wgo,jP,Ago,ygo,Lgo,u_,vte,xgo,kgo,DP,Sgo,Rgo,Bgo,b_,Fte,Pgo,$go,GP,Igo,qgo,Ngo,v_,Tte,jgo,Dgo,OP,Ggo,Ogo,Vgo,F_,Mte,Xgo,zgo,VP,Qgo,Wgo,Hgo,T_,Ete,Ugo,Jgo,XP,Ygo,Kgo,Zgo,M_,Cte,eho,oho,zP,rho,tho,aho,E_,wte,nho,sho,QP,lho,iho,dho,C_,Ate,cho,fho,WP,mho,gho,hho,w_,yte,pho,_ho,HP,uho,bho,vho,A_,Lte,Fho,Tho,UP,Mho,Eho,Cho,y_,xte,who,Aho,JP,yho,Lho,xho,L_,kte,kho,Sho,YP,Rho,Bho,Pho,x_,Ste,$ho,Iho,KP,qho,Nho,jho,k_,Rte,Dho,Gho,ZP,Oho,Vho,Xho,S_,Bte,zho,Qho,e$,Who,Hho,Uho,R_,Pte,Jho,Yho,o$,Kho,Zho,epo,B_,$te,opo,rpo,r$,tpo,apo,npo,P_,Ite,spo,lpo,t$,ipo,dpo,cpo,$_,qte,fpo,mpo,a$,gpo,hpo,ppo,I_,Nte,_po,upo,n$,bpo,vpo,Fpo,q_,Tpo,jte,Mpo,Epo,Dte,Cpo,wpo,Gte,Apo,ypo,p3,YRe,od,N_,Ote,_3,Lpo,Vte,xpo,KRe,Yo,u3,kpo,rd,Spo,s$,Rpo,Bpo,l$,Ppo,$po,Ipo,b3,qpo,Xte,Npo,jpo,Dpo,zr,v3,Gpo,zte,Opo,Vpo,td,Xpo,Qte,zpo,Qpo,i$,Wpo,Hpo,Upo,Wte,Jpo,Ypo,F3,Kpo,Ne,T3,Zpo,Hte,e_o,o_o,za,r_o,Ute,t_o,a_o,Jte,n_o,s_o,Yte,l_o,i_o,d_o,S,j_,Kte,c_o,f_o,d$,m_o,g_o,h_o,D_,Zte,p_o,__o,c$,u_o,b_o,v_o,G_,eae,F_o,T_o,f$,M_o,E_o,C_o,O_,oae,w_o,A_o,m$,y_o,L_o,x_o,V_,rae,k_o,S_o,g$,R_o,B_o,P_o,X_,tae,$_o,I_o,h$,q_o,N_o,j_o,z_,aae,D_o,G_o,p$,O_o,V_o,X_o,Q_,nae,z_o,Q_o,_$,W_o,H_o,U_o,W_,sae,J_o,Y_o,u$,K_o,Z_o,euo,H_,lae,ouo,ruo,b$,tuo,auo,nuo,U_,iae,suo,luo,v$,iuo,duo,cuo,J_,dae,fuo,muo,F$,guo,huo,puo,Y_,cae,_uo,uuo,T$,buo,vuo,Fuo,K_,fae,Tuo,Muo,M$,Euo,Cuo,wuo,Z_,mae,Auo,yuo,E$,Luo,xuo,kuo,eu,gae,Suo,Ruo,C$,Buo,Puo,$uo,ou,hae,Iuo,quo,w$,Nuo,juo,Duo,ru,pae,Guo,Ouo,A$,Vuo,Xuo,zuo,tu,_ae,Quo,Wuo,y$,Huo,Uuo,Juo,au,uae,Yuo,Kuo,L$,Zuo,e6o,o6o,nu,bae,r6o,t6o,x$,a6o,n6o,s6o,su,vae,l6o,i6o,k$,d6o,c6o,f6o,lu,Fae,m6o,g6o,S$,h6o,p6o,_6o,iu,Tae,u6o,b6o,R$,v6o,F6o,T6o,du,Mae,M6o,E6o,B$,C6o,w6o,A6o,cu,Eae,y6o,L6o,P$,x6o,k6o,S6o,fu,Cae,R6o,B6o,$$,P6o,$6o,I6o,mu,wae,q6o,N6o,I$,j6o,D6o,G6o,gu,Aae,O6o,V6o,q$,X6o,z6o,Q6o,hu,yae,W6o,H6o,N$,U6o,J6o,Y6o,pu,Lae,K6o,Z6o,j$,e1o,o1o,r1o,_u,xae,t1o,a1o,D$,n1o,s1o,l1o,uu,kae,i1o,d1o,G$,c1o,f1o,m1o,bu,Sae,g1o,h1o,O$,p1o,_1o,u1o,vu,Rae,b1o,v1o,V$,F1o,T1o,M1o,Fu,Bae,E1o,C1o,X$,w1o,A1o,y1o,Tu,Pae,L1o,x1o,z$,k1o,S1o,R1o,Mu,$ae,B1o,P1o,Q$,$1o,I1o,q1o,Eu,Iae,N1o,j1o,W$,D1o,G1o,O1o,Cu,V1o,qae,X1o,z1o,Nae,Q1o,W1o,jae,H1o,U1o,M3,ZRe,ad,wu,Dae,E3,J1o,Gae,Y1o,eBe,Ko,C3,K1o,nd,Z1o,H$,ebo,obo,U$,rbo,tbo,abo,w3,nbo,Oae,sbo,lbo,ibo,Qr,A3,dbo,Vae,cbo,fbo,sd,mbo,Xae,gbo,hbo,J$,pbo,_bo,ubo,zae,bbo,vbo,y3,Fbo,je,L3,Tbo,Qae,Mbo,Ebo,Qa,Cbo,Wae,wbo,Abo,Hae,ybo,Lbo,Uae,xbo,kbo,Sbo,$,Au,Jae,Rbo,Bbo,Y$,Pbo,$bo,Ibo,yu,Yae,qbo,Nbo,K$,jbo,Dbo,Gbo,Lu,Kae,Obo,Vbo,Z$,Xbo,zbo,Qbo,xu,Zae,Wbo,Hbo,eI,Ubo,Jbo,Ybo,ku,ene,Kbo,Zbo,oI,e2o,o2o,r2o,Su,one,t2o,a2o,rI,n2o,s2o,l2o,Ru,rne,i2o,d2o,tI,c2o,f2o,m2o,Bu,tne,g2o,h2o,aI,p2o,_2o,u2o,Pu,ane,b2o,v2o,nI,F2o,T2o,M2o,$u,nne,E2o,C2o,sI,w2o,A2o,y2o,Iu,sne,L2o,x2o,lI,k2o,S2o,R2o,qu,lne,B2o,P2o,iI,$2o,I2o,q2o,Nu,ine,N2o,j2o,dI,D2o,G2o,O2o,ju,dne,V2o,X2o,cI,z2o,Q2o,W2o,Du,cne,H2o,U2o,fI,J2o,Y2o,K2o,Gu,fne,Z2o,evo,mI,ovo,rvo,tvo,Ou,mne,avo,nvo,gI,svo,lvo,ivo,Vu,gne,dvo,cvo,hI,fvo,mvo,gvo,Xu,hne,hvo,pvo,pI,_vo,uvo,bvo,zu,pne,vvo,Fvo,_I,Tvo,Mvo,Evo,Qu,_ne,Cvo,wvo,uI,Avo,yvo,Lvo,Wu,une,xvo,kvo,bI,Svo,Rvo,Bvo,Hu,bne,Pvo,$vo,vI,Ivo,qvo,Nvo,Uu,vne,jvo,Dvo,FI,Gvo,Ovo,Vvo,Ju,Fne,Xvo,zvo,TI,Qvo,Wvo,Hvo,Yu,Tne,Uvo,Jvo,MI,Yvo,Kvo,Zvo,Ku,Mne,eFo,oFo,EI,rFo,tFo,aFo,Zu,Ene,nFo,sFo,CI,lFo,iFo,dFo,e6,Cne,cFo,fFo,wI,mFo,gFo,hFo,o6,wne,pFo,_Fo,AI,uFo,bFo,vFo,r6,Ane,FFo,TFo,yI,MFo,EFo,CFo,t6,yne,wFo,AFo,LI,yFo,LFo,xFo,a6,Lne,kFo,SFo,xI,RFo,BFo,PFo,n6,xne,$Fo,IFo,kI,qFo,NFo,jFo,s6,kne,DFo,GFo,SI,OFo,VFo,XFo,l6,zFo,Sne,QFo,WFo,Rne,HFo,UFo,Bne,JFo,YFo,x3,oBe,ld,i6,Pne,k3,KFo,$ne,ZFo,rBe,Zo,S3,eTo,id,oTo,RI,rTo,tTo,BI,aTo,nTo,sTo,R3,lTo,Ine,iTo,dTo,cTo,Wr,B3,fTo,qne,mTo,gTo,dd,hTo,Nne,pTo,_To,PI,uTo,bTo,vTo,jne,FTo,TTo,P3,MTo,De,$3,ETo,Dne,CTo,wTo,Wa,ATo,Gne,yTo,LTo,One,xTo,kTo,Vne,STo,RTo,BTo,I,d6,Xne,PTo,$To,$I,ITo,qTo,NTo,c6,zne,jTo,DTo,II,GTo,OTo,VTo,f6,Qne,XTo,zTo,qI,QTo,WTo,HTo,m6,Wne,UTo,JTo,NI,YTo,KTo,ZTo,g6,Hne,e8o,o8o,jI,r8o,t8o,a8o,h6,Une,n8o,s8o,DI,l8o,i8o,d8o,p6,Jne,c8o,f8o,GI,m8o,g8o,h8o,_6,Yne,p8o,_8o,OI,u8o,b8o,v8o,u6,Kne,F8o,T8o,VI,M8o,E8o,C8o,b6,Zne,w8o,A8o,XI,y8o,L8o,x8o,v6,ese,k8o,S8o,zI,R8o,B8o,P8o,F6,ose,$8o,I8o,QI,q8o,N8o,j8o,T6,rse,D8o,G8o,WI,O8o,V8o,X8o,M6,tse,z8o,Q8o,HI,W8o,H8o,U8o,E6,ase,J8o,Y8o,UI,K8o,Z8o,e9o,C6,nse,o9o,r9o,JI,t9o,a9o,n9o,w6,sse,s9o,l9o,YI,i9o,d9o,c9o,A6,lse,f9o,m9o,KI,g9o,h9o,p9o,y6,ise,_9o,u9o,ZI,b9o,v9o,F9o,L6,dse,T9o,M9o,eq,E9o,C9o,w9o,x6,cse,A9o,y9o,oq,L9o,x9o,k9o,k6,fse,S9o,R9o,rq,B9o,P9o,$9o,S6,mse,I9o,q9o,tq,N9o,j9o,D9o,R6,gse,G9o,O9o,aq,V9o,X9o,z9o,B6,hse,Q9o,W9o,nq,H9o,U9o,J9o,P6,pse,Y9o,K9o,sq,Z9o,eMo,oMo,$6,_se,rMo,tMo,lq,aMo,nMo,sMo,I6,use,lMo,iMo,iq,dMo,cMo,fMo,q6,bse,mMo,gMo,dq,hMo,pMo,_Mo,N6,vse,uMo,bMo,cq,vMo,FMo,TMo,j6,Fse,MMo,EMo,Tse,CMo,wMo,AMo,D6,Mse,yMo,LMo,fq,xMo,kMo,SMo,G6,Ese,RMo,BMo,mq,PMo,$Mo,IMo,O6,Cse,qMo,NMo,gq,jMo,DMo,GMo,V6,wse,OMo,VMo,hq,XMo,zMo,QMo,X6,WMo,Ase,HMo,UMo,yse,JMo,YMo,Lse,KMo,ZMo,I3,tBe,cd,z6,xse,q3,e4o,kse,o4o,aBe,er,N3,r4o,fd,t4o,pq,a4o,n4o,_q,s4o,l4o,i4o,j3,d4o,Sse,c4o,f4o,m4o,Hr,D3,g4o,Rse,h4o,p4o,md,_4o,Bse,u4o,b4o,uq,v4o,F4o,T4o,Pse,M4o,E4o,G3,C4o,Ge,O3,w4o,$se,A4o,y4o,Ha,L4o,Ise,x4o,k4o,qse,S4o,R4o,Nse,B4o,P4o,$4o,ne,Q6,jse,I4o,q4o,bq,N4o,j4o,D4o,W6,Dse,G4o,O4o,vq,V4o,X4o,z4o,H6,Gse,Q4o,W4o,Fq,H4o,U4o,J4o,U6,Ose,Y4o,K4o,Tq,Z4o,eEo,oEo,J6,Vse,rEo,tEo,Mq,aEo,nEo,sEo,Y6,Xse,lEo,iEo,Eq,dEo,cEo,fEo,K6,zse,mEo,gEo,Cq,hEo,pEo,_Eo,Z6,Qse,uEo,bEo,wq,vEo,FEo,TEo,e1,Wse,MEo,EEo,Aq,CEo,wEo,AEo,o1,Hse,yEo,LEo,yq,xEo,kEo,SEo,r1,Use,REo,BEo,Lq,PEo,$Eo,IEo,t1,Jse,qEo,NEo,xq,jEo,DEo,GEo,a1,Yse,OEo,VEo,kq,XEo,zEo,QEo,n1,Kse,WEo,HEo,Sq,UEo,JEo,YEo,s1,Zse,KEo,ZEo,Rq,e5o,o5o,r5o,l1,ele,t5o,a5o,Bq,n5o,s5o,l5o,i1,ole,i5o,d5o,Pq,c5o,f5o,m5o,d1,g5o,rle,h5o,p5o,tle,_5o,u5o,ale,b5o,v5o,V3,nBe,gd,c1,nle,X3,F5o,sle,T5o,sBe,or,z3,M5o,hd,E5o,$q,C5o,w5o,Iq,A5o,y5o,L5o,Q3,x5o,lle,k5o,S5o,R5o,Ur,W3,B5o,ile,P5o,$5o,pd,I5o,dle,q5o,N5o,qq,j5o,D5o,G5o,cle,O5o,V5o,H3,X5o,Oe,U3,z5o,fle,Q5o,W5o,Ua,H5o,mle,U5o,J5o,gle,Y5o,K5o,hle,Z5o,e3o,o3o,y,f1,ple,r3o,t3o,Nq,a3o,n3o,s3o,m1,_le,l3o,i3o,jq,d3o,c3o,f3o,g1,ule,m3o,g3o,Dq,h3o,p3o,_3o,h1,ble,u3o,b3o,Gq,v3o,F3o,T3o,p1,vle,M3o,E3o,Oq,C3o,w3o,A3o,_1,Fle,y3o,L3o,Vq,x3o,k3o,S3o,u1,Tle,R3o,B3o,Xq,P3o,$3o,I3o,b1,Mle,q3o,N3o,zq,j3o,D3o,G3o,v1,Ele,O3o,V3o,Qq,X3o,z3o,Q3o,F1,Cle,W3o,H3o,Wq,U3o,J3o,Y3o,T1,wle,K3o,Z3o,Hq,eCo,oCo,rCo,M1,Ale,tCo,aCo,Uq,nCo,sCo,lCo,E1,yle,iCo,dCo,Jq,cCo,fCo,mCo,C1,Lle,gCo,hCo,Yq,pCo,_Co,uCo,w1,xle,bCo,vCo,Kq,FCo,TCo,MCo,A1,kle,ECo,CCo,Zq,wCo,ACo,yCo,y1,Sle,LCo,xCo,eN,kCo,SCo,RCo,L1,Rle,BCo,PCo,oN,$Co,ICo,qCo,x1,Ble,NCo,jCo,rN,DCo,GCo,OCo,k1,Ple,VCo,XCo,tN,zCo,QCo,WCo,S1,$le,HCo,UCo,aN,JCo,YCo,KCo,R1,Ile,ZCo,ewo,nN,owo,rwo,two,B1,qle,awo,nwo,sN,swo,lwo,iwo,P1,Nle,dwo,cwo,lN,fwo,mwo,gwo,$1,jle,hwo,pwo,iN,_wo,uwo,bwo,I1,Dle,vwo,Fwo,dN,Two,Mwo,Ewo,q1,Gle,Cwo,wwo,cN,Awo,ywo,Lwo,N1,Ole,xwo,kwo,fN,Swo,Rwo,Bwo,j1,Vle,Pwo,$wo,mN,Iwo,qwo,Nwo,D1,Xle,jwo,Dwo,gN,Gwo,Owo,Vwo,G1,zle,Xwo,zwo,hN,Qwo,Wwo,Hwo,O1,Qle,Uwo,Jwo,pN,Ywo,Kwo,Zwo,V1,Wle,eAo,oAo,_N,rAo,tAo,aAo,X1,Hle,nAo,sAo,uN,lAo,iAo,dAo,z1,Ule,cAo,fAo,bN,mAo,gAo,hAo,Q1,Jle,pAo,_Ao,vN,uAo,bAo,vAo,W1,Yle,FAo,TAo,FN,MAo,EAo,CAo,H1,Kle,wAo,AAo,TN,yAo,LAo,xAo,U1,Zle,kAo,SAo,MN,RAo,BAo,PAo,J1,eie,$Ao,IAo,EN,qAo,NAo,jAo,Y1,oie,DAo,GAo,CN,OAo,VAo,XAo,K1,rie,zAo,QAo,wN,WAo,HAo,UAo,Z1,tie,JAo,YAo,AN,KAo,ZAo,e0o,eb,aie,o0o,r0o,yN,t0o,a0o,n0o,ob,nie,s0o,l0o,LN,i0o,d0o,c0o,rb,sie,f0o,m0o,xN,g0o,h0o,p0o,tb,lie,_0o,u0o,kN,b0o,v0o,F0o,ab,T0o,iie,M0o,E0o,die,C0o,w0o,cie,A0o,y0o,J3,lBe,_d,nb,fie,Y3,L0o,mie,x0o,iBe,rr,K3,k0o,ud,S0o,SN,R0o,B0o,RN,P0o,$0o,I0o,Z3,q0o,gie,N0o,j0o,D0o,Jr,eC,G0o,hie,O0o,V0o,bd,X0o,pie,z0o,Q0o,BN,W0o,H0o,U0o,_ie,J0o,Y0o,oC,K0o,Ve,rC,Z0o,uie,eyo,oyo,Ja,ryo,bie,tyo,ayo,vie,nyo,syo,Fie,lyo,iyo,dyo,G,sb,Tie,cyo,fyo,PN,myo,gyo,hyo,lb,Mie,pyo,_yo,$N,uyo,byo,vyo,ib,Eie,Fyo,Tyo,IN,Myo,Eyo,Cyo,db,Cie,wyo,Ayo,qN,yyo,Lyo,xyo,cb,wie,kyo,Syo,NN,Ryo,Byo,Pyo,fb,Aie,$yo,Iyo,jN,qyo,Nyo,jyo,mb,yie,Dyo,Gyo,DN,Oyo,Vyo,Xyo,gb,Lie,zyo,Qyo,GN,Wyo,Hyo,Uyo,hb,xie,Jyo,Yyo,ON,Kyo,Zyo,eLo,pb,kie,oLo,rLo,VN,tLo,aLo,nLo,_b,Sie,sLo,lLo,XN,iLo,dLo,cLo,ub,Rie,fLo,mLo,zN,gLo,hLo,pLo,bb,Bie,_Lo,uLo,QN,bLo,vLo,FLo,vb,Pie,TLo,MLo,WN,ELo,CLo,wLo,Fb,$ie,ALo,yLo,HN,LLo,xLo,kLo,Tb,Iie,SLo,RLo,UN,BLo,PLo,$Lo,Mb,qie,ILo,qLo,JN,NLo,jLo,DLo,Eb,Nie,GLo,OLo,YN,VLo,XLo,zLo,Cb,jie,QLo,WLo,KN,HLo,ULo,JLo,wb,Die,YLo,KLo,ZN,ZLo,e7o,o7o,Ab,Gie,r7o,t7o,ej,a7o,n7o,s7o,yb,Oie,l7o,i7o,oj,d7o,c7o,f7o,Lb,Vie,m7o,g7o,rj,h7o,p7o,_7o,xb,Xie,u7o,b7o,tj,v7o,F7o,T7o,kb,zie,M7o,E7o,aj,C7o,w7o,A7o,Sb,Qie,y7o,L7o,nj,x7o,k7o,S7o,Rb,Wie,R7o,B7o,sj,P7o,$7o,I7o,Bb,Hie,q7o,N7o,lj,j7o,D7o,G7o,Pb,O7o,Uie,V7o,X7o,Jie,z7o,Q7o,Yie,W7o,H7o,tC,dBe,vd,$b,Kie,aC,U7o,Zie,J7o,cBe,tr,nC,Y7o,Fd,K7o,ij,Z7o,exo,dj,oxo,rxo,txo,sC,axo,ede,nxo,sxo,lxo,Yr,lC,ixo,ode,dxo,cxo,Td,fxo,rde,mxo,gxo,cj,hxo,pxo,_xo,tde,uxo,bxo,iC,vxo,Xe,dC,Fxo,ade,Txo,Mxo,Ya,Exo,nde,Cxo,wxo,sde,Axo,yxo,lde,Lxo,xxo,kxo,da,Ib,ide,Sxo,Rxo,fj,Bxo,Pxo,$xo,qb,dde,Ixo,qxo,mj,Nxo,jxo,Dxo,Nb,cde,Gxo,Oxo,gj,Vxo,Xxo,zxo,jb,fde,Qxo,Wxo,hj,Hxo,Uxo,Jxo,Db,mde,Yxo,Kxo,pj,Zxo,eko,oko,Gb,rko,gde,tko,ako,hde,nko,sko,pde,lko,iko,cC,fBe,Md,Ob,_de,fC,dko,ude,cko,mBe,ar,mC,fko,Ed,mko,_j,gko,hko,uj,pko,_ko,uko,gC,bko,bde,vko,Fko,Tko,Kr,hC,Mko,vde,Eko,Cko,Cd,wko,Fde,Ako,yko,bj,Lko,xko,kko,Tde,Sko,Rko,pC,Bko,ze,_C,Pko,Mde,$ko,Iko,Ka,qko,Ede,Nko,jko,Cde,Dko,Gko,wde,Oko,Vko,Xko,j,Vb,Ade,zko,Qko,vj,Wko,Hko,Uko,Xb,yde,Jko,Yko,Fj,Kko,Zko,eSo,zb,Lde,oSo,rSo,Tj,tSo,aSo,nSo,Qb,xde,sSo,lSo,Mj,iSo,dSo,cSo,Wb,kde,fSo,mSo,Ej,gSo,hSo,pSo,Hb,Sde,_So,uSo,Cj,bSo,vSo,FSo,Ub,Rde,TSo,MSo,wj,ESo,CSo,wSo,Jb,Bde,ASo,ySo,Aj,LSo,xSo,kSo,Yb,Pde,SSo,RSo,yj,BSo,PSo,$So,Kb,$de,ISo,qSo,Lj,NSo,jSo,DSo,Zb,Ide,GSo,OSo,xj,VSo,XSo,zSo,e2,qde,QSo,WSo,kj,HSo,USo,JSo,o2,Nde,YSo,KSo,Sj,ZSo,eRo,oRo,r2,jde,rRo,tRo,Rj,aRo,nRo,sRo,t2,Dde,lRo,iRo,Bj,dRo,cRo,fRo,a2,Gde,mRo,gRo,Pj,hRo,pRo,_Ro,n2,Ode,uRo,bRo,$j,vRo,FRo,TRo,s2,Vde,MRo,ERo,Ij,CRo,wRo,ARo,l2,Xde,yRo,LRo,qj,xRo,kRo,SRo,i2,zde,RRo,BRo,Nj,PRo,$Ro,IRo,d2,Qde,qRo,NRo,jj,jRo,DRo,GRo,c2,Wde,ORo,VRo,Dj,XRo,zRo,QRo,f2,Hde,WRo,HRo,Gj,URo,JRo,YRo,m2,Ude,KRo,ZRo,Oj,eBo,oBo,rBo,g2,Jde,tBo,aBo,Vj,nBo,sBo,lBo,h2,Yde,iBo,dBo,Xj,cBo,fBo,mBo,p2,Kde,gBo,hBo,zj,pBo,_Bo,uBo,_2,Zde,bBo,vBo,Qj,FBo,TBo,MBo,u2,ece,EBo,CBo,Wj,wBo,ABo,yBo,b2,oce,LBo,xBo,Hj,kBo,SBo,RBo,v2,rce,BBo,PBo,Uj,$Bo,IBo,qBo,F2,tce,NBo,jBo,Jj,DBo,GBo,OBo,T2,ace,VBo,XBo,Yj,zBo,QBo,WBo,M2,HBo,nce,UBo,JBo,sce,YBo,KBo,lce,ZBo,ePo,uC,gBe,wd,E2,ice,bC,oPo,dce,rPo,hBe,nr,vC,tPo,Ad,aPo,Kj,nPo,sPo,Zj,lPo,iPo,dPo,FC,cPo,cce,fPo,mPo,gPo,Zr,TC,hPo,fce,pPo,_Po,yd,uPo,mce,bPo,vPo,eD,FPo,TPo,MPo,gce,EPo,CPo,MC,wPo,Qe,EC,APo,hce,yPo,LPo,Za,xPo,pce,kPo,SPo,_ce,RPo,BPo,uce,PPo,$Po,IPo,R,C2,bce,qPo,NPo,oD,jPo,DPo,GPo,w2,vce,OPo,VPo,rD,XPo,zPo,QPo,A2,Fce,WPo,HPo,tD,UPo,JPo,YPo,y2,Tce,KPo,ZPo,aD,e$o,o$o,r$o,L2,Mce,t$o,a$o,nD,n$o,s$o,l$o,x2,Ece,i$o,d$o,sD,c$o,f$o,m$o,k2,Cce,g$o,h$o,lD,p$o,_$o,u$o,S2,wce,b$o,v$o,iD,F$o,T$o,M$o,R2,Ace,E$o,C$o,dD,w$o,A$o,y$o,B2,yce,L$o,x$o,cD,k$o,S$o,R$o,P2,Lce,B$o,P$o,fD,$$o,I$o,q$o,$2,xce,N$o,j$o,mD,D$o,G$o,O$o,I2,kce,V$o,X$o,gD,z$o,Q$o,W$o,q2,Sce,H$o,U$o,hD,J$o,Y$o,K$o,N2,Rce,Z$o,eIo,pD,oIo,rIo,tIo,j2,Bce,aIo,nIo,_D,sIo,lIo,iIo,D2,Pce,dIo,cIo,uD,fIo,mIo,gIo,G2,$ce,hIo,pIo,bD,_Io,uIo,bIo,O2,Ice,vIo,FIo,vD,TIo,MIo,EIo,V2,qce,CIo,wIo,FD,AIo,yIo,LIo,X2,Nce,xIo,kIo,TD,SIo,RIo,BIo,z2,jce,PIo,$Io,MD,IIo,qIo,NIo,Q2,Dce,jIo,DIo,ED,GIo,OIo,VIo,W2,Gce,XIo,zIo,CD,QIo,WIo,HIo,H2,Oce,UIo,JIo,wD,YIo,KIo,ZIo,U2,Vce,eqo,oqo,AD,rqo,tqo,aqo,J2,Xce,nqo,sqo,yD,lqo,iqo,dqo,Y2,zce,cqo,fqo,LD,mqo,gqo,hqo,K2,Qce,pqo,_qo,xD,uqo,bqo,vqo,Z2,Wce,Fqo,Tqo,kD,Mqo,Eqo,Cqo,ev,Hce,wqo,Aqo,SD,yqo,Lqo,xqo,ov,Uce,kqo,Sqo,RD,Rqo,Bqo,Pqo,rv,Jce,$qo,Iqo,BD,qqo,Nqo,jqo,tv,Yce,Dqo,Gqo,PD,Oqo,Vqo,Xqo,av,Kce,zqo,Qqo,$D,Wqo,Hqo,Uqo,nv,Zce,Jqo,Yqo,ID,Kqo,Zqo,eNo,sv,efe,oNo,rNo,qD,tNo,aNo,nNo,lv,ofe,sNo,lNo,ND,iNo,dNo,cNo,iv,rfe,fNo,mNo,jD,gNo,hNo,pNo,dv,_No,tfe,uNo,bNo,afe,vNo,FNo,nfe,TNo,MNo,CC,pBe,Ld,cv,sfe,wC,ENo,lfe,CNo,_Be,sr,AC,wNo,xd,ANo,DD,yNo,LNo,GD,xNo,kNo,SNo,yC,RNo,ife,BNo,PNo,$No,et,LC,INo,dfe,qNo,NNo,kd,jNo,cfe,DNo,GNo,OD,ONo,VNo,XNo,ffe,zNo,QNo,xC,WNo,We,kC,HNo,mfe,UNo,JNo,en,YNo,gfe,KNo,ZNo,hfe,ejo,ojo,pfe,rjo,tjo,ajo,_fe,fv,ufe,njo,sjo,VD,ljo,ijo,djo,mv,cjo,bfe,fjo,mjo,vfe,gjo,hjo,Ffe,pjo,_jo,SC,uBe,Sd,gv,Tfe,RC,ujo,Mfe,bjo,bBe,lr,BC,vjo,Rd,Fjo,XD,Tjo,Mjo,zD,Ejo,Cjo,wjo,PC,Ajo,Efe,yjo,Ljo,xjo,ot,$C,kjo,Cfe,Sjo,Rjo,Bd,Bjo,wfe,Pjo,$jo,QD,Ijo,qjo,Njo,Afe,jjo,Djo,IC,Gjo,He,qC,Ojo,yfe,Vjo,Xjo,on,zjo,Lfe,Qjo,Wjo,xfe,Hjo,Ujo,kfe,Jjo,Yjo,Kjo,de,hv,Sfe,Zjo,eDo,WD,oDo,rDo,tDo,pv,Rfe,aDo,nDo,HD,sDo,lDo,iDo,_v,Bfe,dDo,cDo,UD,fDo,mDo,gDo,Os,Pfe,hDo,pDo,JD,_Do,uDo,YD,bDo,vDo,FDo,uv,$fe,TDo,MDo,KD,EDo,CDo,wDo,ma,Ife,ADo,yDo,ZD,LDo,xDo,eG,kDo,SDo,oG,RDo,BDo,PDo,bv,qfe,$Do,IDo,rG,qDo,NDo,jDo,vv,Nfe,DDo,GDo,tG,ODo,VDo,XDo,Fv,jfe,zDo,QDo,aG,WDo,HDo,UDo,Tv,Dfe,JDo,YDo,nG,KDo,ZDo,eGo,Mv,Gfe,oGo,rGo,sG,tGo,aGo,nGo,Ev,Ofe,sGo,lGo,lG,iGo,dGo,cGo,Cv,Vfe,fGo,mGo,iG,gGo,hGo,pGo,wv,_Go,Xfe,uGo,bGo,zfe,vGo,FGo,Qfe,TGo,MGo,NC,vBe,Pd,Av,Wfe,jC,EGo,Hfe,CGo,FBe,ir,DC,wGo,$d,AGo,dG,yGo,LGo,cG,xGo,kGo,SGo,GC,RGo,Ufe,BGo,PGo,$Go,rt,OC,IGo,Jfe,qGo,NGo,Id,jGo,Yfe,DGo,GGo,fG,OGo,VGo,XGo,Kfe,zGo,QGo,VC,WGo,Ue,XC,HGo,Zfe,UGo,JGo,rn,YGo,eme,KGo,ZGo,ome,eOo,oOo,rme,rOo,tOo,aOo,tme,yv,ame,nOo,sOo,mG,lOo,iOo,dOo,Lv,cOo,nme,fOo,mOo,sme,gOo,hOo,lme,pOo,_Oo,zC,TBe,qd,xv,ime,QC,uOo,dme,bOo,MBe,dr,WC,vOo,Nd,FOo,gG,TOo,MOo,hG,EOo,COo,wOo,HC,AOo,cme,yOo,LOo,xOo,tt,UC,kOo,fme,SOo,ROo,jd,BOo,mme,POo,$Oo,pG,IOo,qOo,NOo,gme,jOo,DOo,JC,GOo,Je,YC,OOo,hme,VOo,XOo,tn,zOo,pme,QOo,WOo,_me,HOo,UOo,ume,JOo,YOo,KOo,Se,kv,bme,ZOo,eVo,_G,oVo,rVo,tVo,Sv,vme,aVo,nVo,uG,sVo,lVo,iVo,Rv,Fme,dVo,cVo,bG,fVo,mVo,gVo,Bv,Tme,hVo,pVo,vG,_Vo,uVo,bVo,Pv,Mme,vVo,FVo,FG,TVo,MVo,EVo,$v,Eme,CVo,wVo,TG,AVo,yVo,LVo,Iv,Cme,xVo,kVo,MG,SVo,RVo,BVo,qv,wme,PVo,$Vo,EG,IVo,qVo,NVo,Nv,jVo,Ame,DVo,GVo,yme,OVo,VVo,Lme,XVo,zVo,KC,EBe,Dd,jv,xme,ZC,QVo,kme,WVo,CBe,cr,ew,HVo,Gd,UVo,CG,JVo,YVo,wG,KVo,ZVo,eXo,ow,oXo,Sme,rXo,tXo,aXo,at,rw,nXo,Rme,sXo,lXo,Od,iXo,Bme,dXo,cXo,AG,fXo,mXo,gXo,Pme,hXo,pXo,tw,_Xo,Ye,aw,uXo,$me,bXo,vXo,an,FXo,Ime,TXo,MXo,qme,EXo,CXo,Nme,wXo,AXo,yXo,nn,Dv,jme,LXo,xXo,yG,kXo,SXo,RXo,Gv,Dme,BXo,PXo,LG,$Xo,IXo,qXo,Ov,Gme,NXo,jXo,xG,DXo,GXo,OXo,Vv,Ome,VXo,XXo,kG,zXo,QXo,WXo,Xv,HXo,Vme,UXo,JXo,Xme,YXo,KXo,zme,ZXo,ezo,nw,wBe,Vd,zv,Qme,sw,ozo,Wme,rzo,ABe,fr,lw,tzo,Xd,azo,SG,nzo,szo,RG,lzo,izo,dzo,iw,czo,Hme,fzo,mzo,gzo,nt,dw,hzo,Ume,pzo,_zo,zd,uzo,Jme,bzo,vzo,BG,Fzo,Tzo,Mzo,Yme,Ezo,Czo,cw,wzo,Ke,fw,Azo,Kme,yzo,Lzo,sn,xzo,Zme,kzo,Szo,ege,Rzo,Bzo,oge,Pzo,$zo,Izo,Re,Qv,rge,qzo,Nzo,PG,jzo,Dzo,Gzo,Wv,tge,Ozo,Vzo,$G,Xzo,zzo,Qzo,Hv,age,Wzo,Hzo,IG,Uzo,Jzo,Yzo,Uv,nge,Kzo,Zzo,qG,eQo,oQo,rQo,Jv,sge,tQo,aQo,NG,nQo,sQo,lQo,Yv,lge,iQo,dQo,jG,cQo,fQo,mQo,Kv,ige,gQo,hQo,DG,pQo,_Qo,uQo,Zv,dge,bQo,vQo,GG,FQo,TQo,MQo,eF,EQo,cge,CQo,wQo,fge,AQo,yQo,mge,LQo,xQo,mw,yBe,Qd,oF,gge,gw,kQo,hge,SQo,LBe,mr,hw,RQo,Wd,BQo,OG,PQo,$Qo,VG,IQo,qQo,NQo,pw,jQo,pge,DQo,GQo,OQo,st,_w,VQo,_ge,XQo,zQo,Hd,QQo,uge,WQo,HQo,XG,UQo,JQo,YQo,bge,KQo,ZQo,uw,eWo,Ze,bw,oWo,vge,rWo,tWo,ln,aWo,Fge,nWo,sWo,Tge,lWo,iWo,Mge,dWo,cWo,fWo,vw,rF,Ege,mWo,gWo,zG,hWo,pWo,_Wo,tF,Cge,uWo,bWo,QG,vWo,FWo,TWo,aF,MWo,wge,EWo,CWo,Age,wWo,AWo,yge,yWo,LWo,Fw,xBe,Ud,nF,Lge,Tw,xWo,xge,kWo,kBe,gr,Mw,SWo,Jd,RWo,WG,BWo,PWo,HG,$Wo,IWo,qWo,Ew,NWo,kge,jWo,DWo,GWo,lt,Cw,OWo,Sge,VWo,XWo,Yd,zWo,Rge,QWo,WWo,UG,HWo,UWo,JWo,Bge,YWo,KWo,ww,ZWo,eo,Aw,eHo,Pge,oHo,rHo,dn,tHo,$ge,aHo,nHo,Ige,sHo,lHo,qge,iHo,dHo,cHo,cn,sF,Nge,fHo,mHo,JG,gHo,hHo,pHo,lF,jge,_Ho,uHo,YG,bHo,vHo,FHo,iF,Dge,THo,MHo,KG,EHo,CHo,wHo,dF,Gge,AHo,yHo,ZG,LHo,xHo,kHo,cF,SHo,Oge,RHo,BHo,Vge,PHo,$Ho,Xge,IHo,qHo,yw,SBe,Kd,fF,zge,Lw,NHo,Qge,jHo,RBe,hr,xw,DHo,Zd,GHo,eO,OHo,VHo,oO,XHo,zHo,QHo,kw,WHo,Wge,HHo,UHo,JHo,it,Sw,YHo,Hge,KHo,ZHo,ec,eUo,Uge,oUo,rUo,rO,tUo,aUo,nUo,Jge,sUo,lUo,Rw,iUo,oo,Bw,dUo,Yge,cUo,fUo,fn,mUo,Kge,gUo,hUo,Zge,pUo,_Uo,ehe,uUo,bUo,vUo,oc,mF,ohe,FUo,TUo,tO,MUo,EUo,CUo,gF,rhe,wUo,AUo,aO,yUo,LUo,xUo,hF,the,kUo,SUo,nO,RUo,BUo,PUo,pF,$Uo,ahe,IUo,qUo,nhe,NUo,jUo,she,DUo,GUo,Pw,BBe,rc,_F,lhe,$w,OUo,ihe,VUo,PBe,pr,Iw,XUo,tc,zUo,sO,QUo,WUo,lO,HUo,UUo,JUo,qw,YUo,dhe,KUo,ZUo,eJo,dt,Nw,oJo,che,rJo,tJo,ac,aJo,fhe,nJo,sJo,iO,lJo,iJo,dJo,mhe,cJo,fJo,jw,mJo,ro,Dw,gJo,ghe,hJo,pJo,mn,_Jo,hhe,uJo,bJo,phe,vJo,FJo,_he,TJo,MJo,EJo,uhe,uF,bhe,CJo,wJo,dO,AJo,yJo,LJo,bF,xJo,vhe,kJo,SJo,Fhe,RJo,BJo,The,PJo,$Jo,Gw,$Be,nc,vF,Mhe,Ow,IJo,Ehe,qJo,IBe,_r,Vw,NJo,sc,jJo,cO,DJo,GJo,fO,OJo,VJo,XJo,Xw,zJo,Che,QJo,WJo,HJo,ct,zw,UJo,whe,JJo,YJo,lc,KJo,Ahe,ZJo,eYo,mO,oYo,rYo,tYo,yhe,aYo,nYo,Qw,sYo,to,Ww,lYo,Lhe,iYo,dYo,gn,cYo,xhe,fYo,mYo,khe,gYo,hYo,She,pYo,_Yo,uYo,Rhe,FF,Bhe,bYo,vYo,gO,FYo,TYo,MYo,TF,EYo,Phe,CYo,wYo,$he,AYo,yYo,Ihe,LYo,xYo,Hw,qBe,ic,MF,qhe,Uw,kYo,Nhe,SYo,NBe,ur,Jw,RYo,dc,BYo,hO,PYo,$Yo,pO,IYo,qYo,NYo,Yw,jYo,jhe,DYo,GYo,OYo,ft,Kw,VYo,Dhe,XYo,zYo,cc,QYo,Ghe,WYo,HYo,_O,UYo,JYo,YYo,Ohe,KYo,ZYo,Zw,eKo,ao,eA,oKo,Vhe,rKo,tKo,hn,aKo,Xhe,nKo,sKo,zhe,lKo,iKo,Qhe,dKo,cKo,fKo,pn,EF,Whe,mKo,gKo,uO,hKo,pKo,_Ko,CF,Hhe,uKo,bKo,bO,vKo,FKo,TKo,wF,Uhe,MKo,EKo,vO,CKo,wKo,AKo,AF,Jhe,yKo,LKo,FO,xKo,kKo,SKo,yF,RKo,Yhe,BKo,PKo,Khe,$Ko,IKo,Zhe,qKo,NKo,oA,jBe,fc,LF,epe,rA,jKo,ope,DKo,DBe,br,tA,GKo,mc,OKo,TO,VKo,XKo,MO,zKo,QKo,WKo,aA,HKo,rpe,UKo,JKo,YKo,mt,nA,KKo,tpe,ZKo,eZo,gc,oZo,ape,rZo,tZo,EO,aZo,nZo,sZo,npe,lZo,iZo,sA,dZo,no,lA,cZo,spe,fZo,mZo,_n,gZo,lpe,hZo,pZo,ipe,_Zo,uZo,dpe,bZo,vZo,FZo,cpe,xF,fpe,TZo,MZo,CO,EZo,CZo,wZo,kF,AZo,mpe,yZo,LZo,gpe,xZo,kZo,hpe,SZo,RZo,iA,GBe,hc,SF,ppe,dA,BZo,_pe,PZo,OBe,vr,cA,$Zo,pc,IZo,wO,qZo,NZo,AO,jZo,DZo,GZo,fA,OZo,upe,VZo,XZo,zZo,gt,mA,QZo,bpe,WZo,HZo,_c,UZo,vpe,JZo,YZo,yO,KZo,ZZo,eer,Fpe,oer,rer,gA,ter,ho,hA,aer,Tpe,ner,ser,un,ler,Mpe,ier,der,Epe,cer,fer,Cpe,mer,ger,her,x,RF,wpe,per,_er,LO,uer,ber,ver,BF,Ape,Fer,Ter,xO,Mer,Eer,Cer,PF,ype,wer,Aer,kO,yer,Ler,xer,$F,Lpe,ker,Ser,SO,Rer,Ber,Per,IF,xpe,$er,Ier,RO,qer,Ner,jer,qF,kpe,Der,Ger,BO,Oer,Ver,Xer,NF,Spe,zer,Qer,PO,Wer,Her,Uer,jF,Rpe,Jer,Yer,$O,Ker,Zer,eor,DF,Bpe,oor,ror,IO,tor,aor,nor,GF,Ppe,sor,lor,qO,ior,dor,cor,OF,$pe,mor,gor,NO,hor,por,_or,VF,Ipe,uor,bor,jO,vor,For,Tor,XF,qpe,Mor,Eor,DO,Cor,wor,Aor,zF,Npe,yor,Lor,GO,xor,kor,Sor,QF,jpe,Ror,Bor,OO,Por,$or,Ior,WF,Dpe,qor,Nor,VO,jor,Dor,Gor,Vs,Gpe,Oor,Vor,XO,Xor,zor,zO,Qor,Wor,Hor,HF,Ope,Uor,Jor,QO,Yor,Kor,Zor,UF,Vpe,err,orr,WO,rrr,trr,arr,JF,Xpe,nrr,srr,HO,lrr,irr,drr,YF,zpe,crr,frr,UO,mrr,grr,hrr,KF,Qpe,prr,_rr,JO,urr,brr,vrr,ZF,Wpe,Frr,Trr,YO,Mrr,Err,Crr,eT,Hpe,wrr,Arr,KO,yrr,Lrr,xrr,oT,Upe,krr,Srr,ZO,Rrr,Brr,Prr,rT,Jpe,$rr,Irr,eV,qrr,Nrr,jrr,tT,Ype,Drr,Grr,oV,Orr,Vrr,Xrr,aT,Kpe,zrr,Qrr,rV,Wrr,Hrr,Urr,nT,Zpe,Jrr,Yrr,tV,Krr,Zrr,etr,sT,e_e,otr,rtr,aV,ttr,atr,ntr,lT,o_e,str,ltr,nV,itr,dtr,ctr,iT,r_e,ftr,mtr,sV,gtr,htr,ptr,dT,t_e,_tr,utr,lV,btr,vtr,Ftr,cT,a_e,Ttr,Mtr,iV,Etr,Ctr,wtr,fT,n_e,Atr,ytr,dV,Ltr,xtr,ktr,mT,s_e,Str,Rtr,cV,Btr,Ptr,$tr,gT,l_e,Itr,qtr,fV,Ntr,jtr,Dtr,hT,i_e,Gtr,Otr,mV,Vtr,Xtr,ztr,pT,d_e,Qtr,Wtr,gV,Htr,Utr,Jtr,_T,c_e,Ytr,Ktr,hV,Ztr,ear,oar,uT,f_e,rar,tar,pV,aar,nar,sar,bT,m_e,lar,iar,_V,dar,car,far,vT,g_e,mar,gar,uV,har,par,_ar,FT,h_e,uar,bar,bV,Far,Tar,Mar,p_e,Ear,Car,pA,VBe,uc,TT,__e,_A,war,u_e,Aar,XBe,Fr,uA,yar,bc,Lar,vV,xar,kar,FV,Sar,Rar,Bar,bA,Par,b_e,$ar,Iar,qar,ht,vA,Nar,v_e,jar,Dar,vc,Gar,F_e,Oar,Var,TV,Xar,zar,Qar,T_e,War,Har,FA,Uar,po,TA,Jar,M_e,Yar,Kar,bn,Zar,E_e,enr,onr,C_e,rnr,tnr,w_e,anr,nnr,snr,H,MT,A_e,lnr,inr,MV,dnr,cnr,fnr,ET,y_e,mnr,gnr,EV,hnr,pnr,_nr,CT,L_e,unr,bnr,CV,vnr,Fnr,Tnr,wT,x_e,Mnr,Enr,wV,Cnr,wnr,Anr,AT,k_e,ynr,Lnr,AV,xnr,knr,Snr,yT,S_e,Rnr,Bnr,yV,Pnr,$nr,Inr,LT,R_e,qnr,Nnr,LV,jnr,Dnr,Gnr,xT,B_e,Onr,Vnr,xV,Xnr,znr,Qnr,kT,P_e,Wnr,Hnr,kV,Unr,Jnr,Ynr,ST,$_e,Knr,Znr,SV,esr,osr,rsr,RT,I_e,tsr,asr,RV,nsr,ssr,lsr,BT,q_e,isr,dsr,BV,csr,fsr,msr,PT,N_e,gsr,hsr,PV,psr,_sr,usr,$T,j_e,bsr,vsr,$V,Fsr,Tsr,Msr,IT,D_e,Esr,Csr,IV,wsr,Asr,ysr,qT,G_e,Lsr,xsr,qV,ksr,Ssr,Rsr,NT,O_e,Bsr,Psr,NV,$sr,Isr,qsr,jT,V_e,Nsr,jsr,jV,Dsr,Gsr,Osr,DT,X_e,Vsr,Xsr,DV,zsr,Qsr,Wsr,GT,z_e,Hsr,Usr,GV,Jsr,Ysr,Ksr,OT,Q_e,Zsr,elr,OV,olr,rlr,tlr,VT,W_e,alr,nlr,VV,slr,llr,ilr,XT,H_e,dlr,clr,XV,flr,mlr,glr,U_e,hlr,plr,MA,zBe,Fc,zT,J_e,EA,_lr,Y_e,ulr,QBe,Tr,CA,blr,Tc,vlr,zV,Flr,Tlr,QV,Mlr,Elr,Clr,wA,wlr,K_e,Alr,ylr,Llr,pt,AA,xlr,Z_e,klr,Slr,Mc,Rlr,eue,Blr,Plr,WV,$lr,Ilr,qlr,oue,Nlr,jlr,yA,Dlr,_o,LA,Glr,rue,Olr,Vlr,vn,Xlr,tue,zlr,Qlr,aue,Wlr,Hlr,nue,Ulr,Jlr,Ylr,fe,QT,sue,Klr,Zlr,HV,eir,oir,rir,WT,lue,tir,air,UV,nir,sir,lir,HT,iue,iir,dir,JV,cir,fir,mir,UT,due,gir,hir,YV,pir,_ir,uir,JT,cue,bir,vir,KV,Fir,Tir,Mir,YT,fue,Eir,Cir,ZV,wir,Air,yir,KT,mue,Lir,xir,eX,kir,Sir,Rir,ZT,gue,Bir,Pir,oX,$ir,Iir,qir,e8,hue,Nir,jir,rX,Dir,Gir,Oir,o8,pue,Vir,Xir,tX,zir,Qir,Wir,r8,_ue,Hir,Uir,aX,Jir,Yir,Kir,t8,uue,Zir,edr,nX,odr,rdr,tdr,bue,adr,ndr,xA,WBe,Ec,a8,vue,kA,sdr,Fue,ldr,HBe,Mr,SA,idr,Cc,ddr,sX,cdr,fdr,lX,mdr,gdr,hdr,RA,pdr,Tue,_dr,udr,bdr,_t,BA,vdr,Mue,Fdr,Tdr,wc,Mdr,Eue,Edr,Cdr,iX,wdr,Adr,ydr,Cue,Ldr,xdr,PA,kdr,uo,$A,Sdr,wue,Rdr,Bdr,Fn,Pdr,Aue,$dr,Idr,yue,qdr,Ndr,Lue,jdr,Ddr,Gdr,IA,n8,xue,Odr,Vdr,dX,Xdr,zdr,Qdr,s8,kue,Wdr,Hdr,cX,Udr,Jdr,Ydr,Sue,Kdr,Zdr,qA,UBe,Ac,l8,Rue,NA,ecr,Bue,ocr,JBe,Er,jA,rcr,yc,tcr,fX,acr,ncr,mX,scr,lcr,icr,DA,dcr,Pue,ccr,fcr,mcr,ut,GA,gcr,$ue,hcr,pcr,Lc,_cr,Iue,ucr,bcr,gX,vcr,Fcr,Tcr,que,Mcr,Ecr,OA,Ccr,bo,VA,wcr,Nue,Acr,ycr,Tn,Lcr,jue,xcr,kcr,Due,Scr,Rcr,Gue,Bcr,Pcr,$cr,Y,i8,Oue,Icr,qcr,hX,Ncr,jcr,Dcr,d8,Vue,Gcr,Ocr,pX,Vcr,Xcr,zcr,c8,Xue,Qcr,Wcr,_X,Hcr,Ucr,Jcr,f8,zue,Ycr,Kcr,uX,Zcr,efr,ofr,m8,Que,rfr,tfr,bX,afr,nfr,sfr,g8,Wue,lfr,ifr,vX,dfr,cfr,ffr,h8,Hue,mfr,gfr,FX,hfr,pfr,_fr,p8,Uue,ufr,bfr,TX,vfr,Ffr,Tfr,_8,Jue,Mfr,Efr,MX,Cfr,wfr,Afr,u8,Yue,yfr,Lfr,EX,xfr,kfr,Sfr,b8,Kue,Rfr,Bfr,CX,Pfr,$fr,Ifr,v8,Zue,qfr,Nfr,wX,jfr,Dfr,Gfr,F8,e6e,Ofr,Vfr,AX,Xfr,zfr,Qfr,T8,o6e,Wfr,Hfr,yX,Ufr,Jfr,Yfr,M8,r6e,Kfr,Zfr,LX,emr,omr,rmr,E8,t6e,tmr,amr,xX,nmr,smr,lmr,C8,a6e,imr,dmr,kX,cmr,fmr,mmr,w8,n6e,gmr,hmr,SX,pmr,_mr,umr,A8,s6e,bmr,vmr,RX,Fmr,Tmr,Mmr,y8,l6e,Emr,Cmr,BX,wmr,Amr,ymr,i6e,Lmr,xmr,XA,YBe,xc,L8,d6e,zA,kmr,c6e,Smr,KBe,Cr,QA,Rmr,kc,Bmr,PX,Pmr,$mr,$X,Imr,qmr,Nmr,WA,jmr,f6e,Dmr,Gmr,Omr,bt,HA,Vmr,m6e,Xmr,zmr,Sc,Qmr,g6e,Wmr,Hmr,IX,Umr,Jmr,Ymr,h6e,Kmr,Zmr,UA,egr,vo,JA,ogr,p6e,rgr,tgr,Mn,agr,_6e,ngr,sgr,u6e,lgr,igr,b6e,dgr,cgr,fgr,be,x8,v6e,mgr,ggr,qX,hgr,pgr,_gr,k8,F6e,ugr,bgr,NX,vgr,Fgr,Tgr,S8,T6e,Mgr,Egr,jX,Cgr,wgr,Agr,R8,M6e,ygr,Lgr,DX,xgr,kgr,Sgr,B8,E6e,Rgr,Bgr,GX,Pgr,$gr,Igr,P8,C6e,qgr,Ngr,OX,jgr,Dgr,Ggr,$8,w6e,Ogr,Vgr,VX,Xgr,zgr,Qgr,I8,A6e,Wgr,Hgr,XX,Ugr,Jgr,Ygr,q8,y6e,Kgr,Zgr,zX,ehr,ohr,rhr,N8,L6e,thr,ahr,QX,nhr,shr,lhr,x6e,ihr,dhr,YA,ZBe,Rc,j8,k6e,KA,chr,S6e,fhr,ePe,wr,ZA,mhr,Bc,ghr,WX,hhr,phr,HX,_hr,uhr,bhr,e0,vhr,R6e,Fhr,Thr,Mhr,vt,o0,Ehr,B6e,Chr,whr,Pc,Ahr,P6e,yhr,Lhr,UX,xhr,khr,Shr,$6e,Rhr,Bhr,r0,Phr,Fo,t0,$hr,I6e,Ihr,qhr,En,Nhr,q6e,jhr,Dhr,N6e,Ghr,Ohr,j6e,Vhr,Xhr,zhr,V,D8,D6e,Qhr,Whr,JX,Hhr,Uhr,Jhr,G8,G6e,Yhr,Khr,YX,Zhr,epr,opr,O8,O6e,rpr,tpr,KX,apr,npr,spr,V8,V6e,lpr,ipr,ZX,dpr,cpr,fpr,X8,X6e,mpr,gpr,ez,hpr,ppr,_pr,z8,z6e,upr,bpr,oz,vpr,Fpr,Tpr,Q8,Q6e,Mpr,Epr,rz,Cpr,wpr,Apr,W8,W6e,ypr,Lpr,tz,xpr,kpr,Spr,H8,H6e,Rpr,Bpr,az,Ppr,$pr,Ipr,U8,U6e,qpr,Npr,nz,jpr,Dpr,Gpr,J8,J6e,Opr,Vpr,sz,Xpr,zpr,Qpr,Y8,Y6e,Wpr,Hpr,lz,Upr,Jpr,Ypr,K8,K6e,Kpr,Zpr,iz,e_r,o_r,r_r,Z8,Z6e,t_r,a_r,dz,n_r,s_r,l_r,e9,e1e,i_r,d_r,cz,c_r,f_r,m_r,o9,o1e,g_r,h_r,fz,p_r,__r,u_r,r9,r1e,b_r,v_r,mz,F_r,T_r,M_r,t9,t1e,E_r,C_r,gz,w_r,A_r,y_r,a9,a1e,L_r,x_r,hz,k_r,S_r,R_r,n9,n1e,B_r,P_r,pz,$_r,I_r,q_r,s9,s1e,N_r,j_r,_z,D_r,G_r,O_r,l9,l1e,V_r,X_r,uz,z_r,Q_r,W_r,i9,i1e,H_r,U_r,bz,J_r,Y_r,K_r,d9,d1e,Z_r,eur,vz,our,rur,tur,c9,c1e,aur,nur,Fz,sur,lur,iur,f9,f1e,dur,cur,Tz,fur,mur,gur,m1e,hur,pur,a0,oPe,$c,m9,g1e,n0,_ur,h1e,uur,rPe,Ar,s0,bur,Ic,vur,Mz,Fur,Tur,Ez,Mur,Eur,Cur,l0,wur,p1e,Aur,yur,Lur,Ft,i0,xur,_1e,kur,Sur,qc,Rur,u1e,Bur,Pur,Cz,$ur,Iur,qur,b1e,Nur,jur,d0,Dur,To,c0,Gur,v1e,Our,Vur,Cn,Xur,F1e,zur,Qur,T1e,Wur,Hur,M1e,Uur,Jur,Yur,se,g9,E1e,Kur,Zur,wz,e6r,o6r,r6r,h9,C1e,t6r,a6r,Az,n6r,s6r,l6r,p9,w1e,i6r,d6r,yz,c6r,f6r,m6r,_9,A1e,g6r,h6r,Lz,p6r,_6r,u6r,u9,y1e,b6r,v6r,xz,F6r,T6r,M6r,b9,L1e,E6r,C6r,kz,w6r,A6r,y6r,v9,x1e,L6r,x6r,Sz,k6r,S6r,R6r,F9,k1e,B6r,P6r,Rz,$6r,I6r,q6r,T9,S1e,N6r,j6r,Bz,D6r,G6r,O6r,M9,R1e,V6r,X6r,Pz,z6r,Q6r,W6r,E9,B1e,H6r,U6r,$z,J6r,Y6r,K6r,C9,P1e,Z6r,e1r,Iz,o1r,r1r,t1r,w9,$1e,a1r,n1r,qz,s1r,l1r,i1r,A9,I1e,d1r,c1r,Nz,f1r,m1r,g1r,y9,q1e,h1r,p1r,jz,_1r,u1r,b1r,L9,N1e,v1r,F1r,Dz,T1r,M1r,E1r,x9,j1e,C1r,w1r,Gz,A1r,y1r,L1r,D1e,x1r,k1r,f0,tPe,Nc,k9,G1e,m0,S1r,O1e,R1r,aPe,yr,g0,B1r,jc,P1r,Oz,$1r,I1r,Vz,q1r,N1r,j1r,h0,D1r,V1e,G1r,O1r,V1r,Tt,p0,X1r,X1e,z1r,Q1r,Dc,W1r,z1e,H1r,U1r,Xz,J1r,Y1r,K1r,Q1e,Z1r,ebr,_0,obr,Mo,u0,rbr,W1e,tbr,abr,wn,nbr,H1e,sbr,lbr,U1e,ibr,dbr,J1e,cbr,fbr,mbr,Y1e,S9,K1e,gbr,hbr,zz,pbr,_br,ubr,Z1e,bbr,vbr,b0,nPe,Gc,R9,ebe,v0,Fbr,obe,Tbr,sPe,Lr,F0,Mbr,Oc,Ebr,Qz,Cbr,wbr,Wz,Abr,ybr,Lbr,T0,xbr,rbe,kbr,Sbr,Rbr,Mt,M0,Bbr,tbe,Pbr,$br,Vc,Ibr,abe,qbr,Nbr,Hz,jbr,Dbr,Gbr,nbe,Obr,Vbr,E0,Xbr,Eo,C0,zbr,sbe,Qbr,Wbr,An,Hbr,lbe,Ubr,Jbr,ibe,Ybr,Kbr,dbe,Zbr,e2r,o2r,K,B9,cbe,r2r,t2r,Uz,a2r,n2r,s2r,P9,fbe,l2r,i2r,Jz,d2r,c2r,f2r,$9,mbe,m2r,g2r,Yz,h2r,p2r,_2r,I9,gbe,u2r,b2r,Kz,v2r,F2r,T2r,q9,hbe,M2r,E2r,Zz,C2r,w2r,A2r,N9,pbe,y2r,L2r,eQ,x2r,k2r,S2r,j9,_be,R2r,B2r,oQ,P2r,$2r,I2r,D9,ube,q2r,N2r,rQ,j2r,D2r,G2r,G9,bbe,O2r,V2r,tQ,X2r,z2r,Q2r,O9,vbe,W2r,H2r,aQ,U2r,J2r,Y2r,V9,Fbe,K2r,Z2r,nQ,evr,ovr,rvr,X9,Tbe,tvr,avr,sQ,nvr,svr,lvr,z9,Mbe,ivr,dvr,lQ,cvr,fvr,mvr,Q9,Ebe,gvr,hvr,iQ,pvr,_vr,uvr,W9,Cbe,bvr,vvr,dQ,Fvr,Tvr,Mvr,H9,wbe,Evr,Cvr,cQ,wvr,Avr,yvr,U9,Abe,Lvr,xvr,fQ,kvr,Svr,Rvr,J9,ybe,Bvr,Pvr,mQ,$vr,Ivr,qvr,Y9,Lbe,Nvr,jvr,gQ,Dvr,Gvr,Ovr,K9,xbe,Vvr,Xvr,hQ,zvr,Qvr,Wvr,kbe,Hvr,Uvr,w0,lPe,Xc,Z9,Sbe,A0,Jvr,Rbe,Yvr,iPe,xr,y0,Kvr,zc,Zvr,pQ,eFr,oFr,_Q,rFr,tFr,aFr,L0,nFr,Bbe,sFr,lFr,iFr,Et,x0,dFr,Pbe,cFr,fFr,Qc,mFr,$be,gFr,hFr,uQ,pFr,_Fr,uFr,Ibe,bFr,vFr,k0,FFr,Co,S0,TFr,qbe,MFr,EFr,yn,CFr,Nbe,wFr,AFr,jbe,yFr,LFr,Dbe,xFr,kFr,SFr,Z,eM,Gbe,RFr,BFr,bQ,PFr,$Fr,IFr,oM,Obe,qFr,NFr,vQ,jFr,DFr,GFr,rM,Vbe,OFr,VFr,FQ,XFr,zFr,QFr,tM,Xbe,WFr,HFr,TQ,UFr,JFr,YFr,aM,zbe,KFr,ZFr,MQ,eTr,oTr,rTr,nM,Qbe,tTr,aTr,EQ,nTr,sTr,lTr,sM,Wbe,iTr,dTr,CQ,cTr,fTr,mTr,lM,Hbe,gTr,hTr,wQ,pTr,_Tr,uTr,iM,Ube,bTr,vTr,AQ,FTr,TTr,MTr,dM,Jbe,ETr,CTr,yQ,wTr,ATr,yTr,cM,Ybe,LTr,xTr,LQ,kTr,STr,RTr,fM,Kbe,BTr,PTr,xQ,$Tr,ITr,qTr,mM,Zbe,NTr,jTr,kQ,DTr,GTr,OTr,gM,e2e,VTr,XTr,SQ,zTr,QTr,WTr,hM,o2e,HTr,UTr,RQ,JTr,YTr,KTr,pM,r2e,ZTr,e8r,BQ,o8r,r8r,t8r,_M,t2e,a8r,n8r,PQ,s8r,l8r,i8r,uM,a2e,d8r,c8r,$Q,f8r,m8r,g8r,bM,n2e,h8r,p8r,IQ,_8r,u8r,b8r,vM,s2e,v8r,F8r,qQ,T8r,M8r,E8r,l2e,C8r,w8r,R0,dPe,Wc,FM,i2e,B0,A8r,d2e,y8r,cPe,kr,P0,L8r,Hc,x8r,NQ,k8r,S8r,jQ,R8r,B8r,P8r,$0,$8r,c2e,I8r,q8r,N8r,Ct,I0,j8r,f2e,D8r,G8r,Uc,O8r,m2e,V8r,X8r,DQ,z8r,Q8r,W8r,g2e,H8r,U8r,q0,J8r,wo,N0,Y8r,h2e,K8r,Z8r,Ln,e9r,p2e,o9r,r9r,_2e,t9r,a9r,u2e,n9r,s9r,l9r,b2e,TM,v2e,i9r,d9r,GQ,c9r,f9r,m9r,F2e,g9r,h9r,j0,fPe,Jc,MM,T2e,D0,p9r,M2e,_9r,mPe,Sr,G0,u9r,Yc,b9r,OQ,v9r,F9r,VQ,T9r,M9r,E9r,O0,C9r,E2e,w9r,A9r,y9r,wt,V0,L9r,C2e,x9r,k9r,Kc,S9r,w2e,R9r,B9r,XQ,P9r,$9r,I9r,A2e,q9r,N9r,X0,j9r,Ao,z0,D9r,y2e,G9r,O9r,xn,V9r,L2e,X9r,z9r,x2e,Q9r,W9r,k2e,H9r,U9r,J9r,S2e,EM,R2e,Y9r,K9r,zQ,Z9r,eMr,oMr,B2e,rMr,tMr,Q0,gPe,Zc,CM,P2e,W0,aMr,$2e,nMr,hPe,Rr,H0,sMr,ef,lMr,QQ,iMr,dMr,WQ,cMr,fMr,mMr,U0,gMr,I2e,hMr,pMr,_Mr,At,J0,uMr,q2e,bMr,vMr,of,FMr,N2e,TMr,MMr,HQ,EMr,CMr,wMr,j2e,AMr,yMr,Y0,LMr,yo,K0,xMr,D2e,kMr,SMr,kn,RMr,G2e,BMr,PMr,O2e,$Mr,IMr,V2e,qMr,NMr,jMr,z,wM,X2e,DMr,GMr,UQ,OMr,VMr,XMr,AM,z2e,zMr,QMr,JQ,WMr,HMr,UMr,yM,Q2e,JMr,YMr,YQ,KMr,ZMr,e4r,LM,W2e,o4r,r4r,KQ,t4r,a4r,n4r,xM,H2e,s4r,l4r,ZQ,i4r,d4r,c4r,kM,U2e,f4r,m4r,eW,g4r,h4r,p4r,SM,J2e,_4r,u4r,oW,b4r,v4r,F4r,RM,Y2e,T4r,M4r,rW,E4r,C4r,w4r,BM,K2e,A4r,y4r,tW,L4r,x4r,k4r,PM,Z2e,S4r,R4r,aW,B4r,P4r,$4r,$M,eve,I4r,q4r,nW,N4r,j4r,D4r,IM,ove,G4r,O4r,sW,V4r,X4r,z4r,qM,rve,Q4r,W4r,lW,H4r,U4r,J4r,NM,tve,Y4r,K4r,iW,Z4r,eEr,oEr,jM,ave,rEr,tEr,dW,aEr,nEr,sEr,DM,nve,lEr,iEr,cW,dEr,cEr,fEr,GM,sve,mEr,gEr,fW,hEr,pEr,_Er,OM,lve,uEr,bEr,mW,vEr,FEr,TEr,VM,ive,MEr,EEr,gW,CEr,wEr,AEr,XM,dve,yEr,LEr,hW,xEr,kEr,SEr,zM,cve,REr,BEr,pW,PEr,$Er,IEr,QM,fve,qEr,NEr,_W,jEr,DEr,GEr,WM,mve,OEr,VEr,uW,XEr,zEr,QEr,HM,gve,WEr,HEr,bW,UEr,JEr,YEr,UM,hve,KEr,ZEr,vW,e5r,o5r,r5r,pve,t5r,a5r,Z0,pPe,rf,JM,_ve,ey,n5r,uve,s5r,_Pe,Br,oy,l5r,tf,i5r,FW,d5r,c5r,TW,f5r,m5r,g5r,ry,h5r,bve,p5r,_5r,u5r,yt,ty,b5r,vve,v5r,F5r,af,T5r,Fve,M5r,E5r,MW,C5r,w5r,A5r,Tve,y5r,L5r,ay,x5r,Lo,ny,k5r,Mve,S5r,R5r,Sn,B5r,Eve,P5r,$5r,Cve,I5r,q5r,wve,N5r,j5r,D5r,ca,YM,Ave,G5r,O5r,EW,V5r,X5r,z5r,KM,yve,Q5r,W5r,CW,H5r,U5r,J5r,ZM,Lve,Y5r,K5r,wW,Z5r,e3r,o3r,e4,xve,r3r,t3r,AW,a3r,n3r,s3r,o4,kve,l3r,i3r,yW,d3r,c3r,f3r,Sve,m3r,g3r,sy,uPe,nf,r4,Rve,ly,h3r,Bve,p3r,bPe,Pr,iy,_3r,sf,u3r,LW,b3r,v3r,xW,F3r,T3r,M3r,dy,E3r,Pve,C3r,w3r,A3r,Lt,cy,y3r,$ve,L3r,x3r,lf,k3r,Ive,S3r,R3r,kW,B3r,P3r,$3r,qve,I3r,q3r,fy,N3r,xo,my,j3r,Nve,D3r,G3r,Rn,O3r,jve,V3r,X3r,Dve,z3r,Q3r,Gve,W3r,H3r,U3r,me,t4,Ove,J3r,Y3r,SW,K3r,Z3r,eCr,a4,Vve,oCr,rCr,RW,tCr,aCr,nCr,n4,Xve,sCr,lCr,BW,iCr,dCr,cCr,s4,zve,fCr,mCr,PW,gCr,hCr,pCr,l4,Qve,_Cr,uCr,$W,bCr,vCr,FCr,i4,Wve,TCr,MCr,IW,ECr,CCr,wCr,d4,Hve,ACr,yCr,qW,LCr,xCr,kCr,c4,Uve,SCr,RCr,NW,BCr,PCr,$Cr,f4,Jve,ICr,qCr,jW,NCr,jCr,DCr,m4,Yve,GCr,OCr,DW,VCr,XCr,zCr,g4,Kve,QCr,WCr,GW,HCr,UCr,JCr,h4,Zve,YCr,KCr,OW,ZCr,ewr,owr,eFe,rwr,twr,gy,vPe,df,p4,oFe,hy,awr,rFe,nwr,FPe,$r,py,swr,cf,lwr,VW,iwr,dwr,XW,cwr,fwr,mwr,_y,gwr,tFe,hwr,pwr,_wr,xt,uy,uwr,aFe,bwr,vwr,ff,Fwr,nFe,Twr,Mwr,zW,Ewr,Cwr,wwr,sFe,Awr,ywr,by,Lwr,ko,vy,xwr,lFe,kwr,Swr,Bn,Rwr,iFe,Bwr,Pwr,dFe,$wr,Iwr,cFe,qwr,Nwr,jwr,ve,_4,fFe,Dwr,Gwr,QW,Owr,Vwr,Xwr,u4,mFe,zwr,Qwr,WW,Wwr,Hwr,Uwr,b4,gFe,Jwr,Ywr,HW,Kwr,Zwr,eAr,v4,hFe,oAr,rAr,UW,tAr,aAr,nAr,F4,pFe,sAr,lAr,JW,iAr,dAr,cAr,T4,_Fe,fAr,mAr,YW,gAr,hAr,pAr,M4,uFe,_Ar,uAr,KW,bAr,vAr,FAr,E4,bFe,TAr,MAr,ZW,EAr,CAr,wAr,C4,vFe,AAr,yAr,eH,LAr,xAr,kAr,w4,FFe,SAr,RAr,oH,BAr,PAr,$Ar,TFe,IAr,qAr,Fy,TPe,mf,A4,MFe,Ty,NAr,EFe,jAr,MPe,Ir,My,DAr,gf,GAr,rH,OAr,VAr,tH,XAr,zAr,QAr,Ey,WAr,CFe,HAr,UAr,JAr,kt,Cy,YAr,wFe,KAr,ZAr,hf,e0r,AFe,o0r,r0r,aH,t0r,a0r,n0r,yFe,s0r,l0r,wy,i0r,So,Ay,d0r,LFe,c0r,f0r,Pn,m0r,xFe,g0r,h0r,kFe,p0r,_0r,SFe,u0r,b0r,v0r,Ee,y4,RFe,F0r,T0r,nH,M0r,E0r,C0r,L4,BFe,w0r,A0r,sH,y0r,L0r,x0r,x4,PFe,k0r,S0r,lH,R0r,B0r,P0r,k4,$Fe,$0r,I0r,iH,q0r,N0r,j0r,S4,IFe,D0r,G0r,dH,O0r,V0r,X0r,R4,qFe,z0r,Q0r,cH,W0r,H0r,U0r,B4,NFe,J0r,Y0r,fH,K0r,Z0r,eyr,P4,jFe,oyr,ryr,mH,tyr,ayr,nyr,$4,DFe,syr,lyr,gH,iyr,dyr,cyr,GFe,fyr,myr,yy,EPe,pf,I4,OFe,Ly,gyr,VFe,hyr,CPe,qr,xy,pyr,_f,_yr,hH,uyr,byr,pH,vyr,Fyr,Tyr,ky,Myr,XFe,Eyr,Cyr,wyr,St,Sy,Ayr,zFe,yyr,Lyr,uf,xyr,QFe,kyr,Syr,_H,Ryr,Byr,Pyr,WFe,$yr,Iyr,Ry,qyr,Ro,By,Nyr,HFe,jyr,Dyr,$n,Gyr,UFe,Oyr,Vyr,JFe,Xyr,zyr,YFe,Qyr,Wyr,Hyr,Fe,q4,KFe,Uyr,Jyr,uH,Yyr,Kyr,Zyr,N4,ZFe,eLr,oLr,bH,rLr,tLr,aLr,j4,eTe,nLr,sLr,vH,lLr,iLr,dLr,D4,oTe,cLr,fLr,FH,mLr,gLr,hLr,G4,rTe,pLr,_Lr,TH,uLr,bLr,vLr,O4,tTe,FLr,TLr,MH,MLr,ELr,CLr,V4,aTe,wLr,ALr,EH,yLr,LLr,xLr,X4,nTe,kLr,SLr,CH,RLr,BLr,PLr,z4,sTe,$Lr,ILr,wH,qLr,NLr,jLr,Q4,lTe,DLr,GLr,AH,OLr,VLr,XLr,iTe,zLr,QLr,Py,wPe,bf,W4,dTe,$y,WLr,cTe,HLr,APe,Nr,Iy,ULr,vf,JLr,yH,YLr,KLr,LH,ZLr,e7r,o7r,qy,r7r,fTe,t7r,a7r,n7r,Rt,Ny,s7r,mTe,l7r,i7r,Ff,d7r,gTe,c7r,f7r,xH,m7r,g7r,h7r,hTe,p7r,_7r,jy,u7r,Bo,Dy,b7r,pTe,v7r,F7r,In,T7r,_Te,M7r,E7r,uTe,C7r,w7r,bTe,A7r,y7r,L7r,Te,H4,vTe,x7r,k7r,kH,S7r,R7r,B7r,U4,FTe,P7r,$7r,SH,I7r,q7r,N7r,J4,TTe,j7r,D7r,RH,G7r,O7r,V7r,Y4,MTe,X7r,z7r,BH,Q7r,W7r,H7r,K4,ETe,U7r,J7r,PH,Y7r,K7r,Z7r,Z4,CTe,exr,oxr,$H,rxr,txr,axr,eE,wTe,nxr,sxr,IH,lxr,ixr,dxr,oE,ATe,cxr,fxr,qH,mxr,gxr,hxr,rE,yTe,pxr,_xr,NH,uxr,bxr,vxr,tE,LTe,Fxr,Txr,jH,Mxr,Exr,Cxr,xTe,wxr,Axr,Gy,yPe,Tf,aE,kTe,Oy,yxr,STe,Lxr,LPe,jr,Vy,xxr,Mf,kxr,DH,Sxr,Rxr,GH,Bxr,Pxr,$xr,Xy,Ixr,RTe,qxr,Nxr,jxr,Bt,zy,Dxr,BTe,Gxr,Oxr,Ef,Vxr,PTe,Xxr,zxr,OH,Qxr,Wxr,Hxr,$Te,Uxr,Jxr,Qy,Yxr,Po,Wy,Kxr,ITe,Zxr,ekr,qn,okr,qTe,rkr,tkr,NTe,akr,nkr,jTe,skr,lkr,ikr,Be,nE,DTe,dkr,ckr,VH,fkr,mkr,gkr,sE,GTe,hkr,pkr,XH,_kr,ukr,bkr,lE,OTe,vkr,Fkr,zH,Tkr,Mkr,Ekr,iE,VTe,Ckr,wkr,QH,Akr,ykr,Lkr,dE,XTe,xkr,kkr,WH,Skr,Rkr,Bkr,cE,zTe,Pkr,$kr,HH,Ikr,qkr,Nkr,fE,QTe,jkr,Dkr,UH,Gkr,Okr,Vkr,mE,WTe,Xkr,zkr,JH,Qkr,Wkr,Hkr,HTe,Ukr,Jkr,Hy,xPe,Cf,gE,UTe,Uy,Ykr,JTe,Kkr,kPe,Dr,Jy,Zkr,wf,eSr,YH,oSr,rSr,KH,tSr,aSr,nSr,Yy,sSr,YTe,lSr,iSr,dSr,Pt,Ky,cSr,KTe,fSr,mSr,Af,gSr,ZTe,hSr,pSr,ZH,_Sr,uSr,bSr,e8e,vSr,FSr,Zy,TSr,$o,eL,MSr,o8e,ESr,CSr,Nn,wSr,r8e,ASr,ySr,t8e,LSr,xSr,a8e,kSr,SSr,RSr,Pe,hE,n8e,BSr,PSr,eU,$Sr,ISr,qSr,pE,s8e,NSr,jSr,oU,DSr,GSr,OSr,_E,l8e,VSr,XSr,rU,zSr,QSr,WSr,uE,i8e,HSr,USr,tU,JSr,YSr,KSr,bE,d8e,ZSr,eRr,aU,oRr,rRr,tRr,vE,c8e,aRr,nRr,nU,sRr,lRr,iRr,FE,f8e,dRr,cRr,sU,fRr,mRr,gRr,TE,m8e,hRr,pRr,lU,_Rr,uRr,bRr,g8e,vRr,FRr,oL,SPe,yf,ME,h8e,rL,TRr,p8e,MRr,RPe,Gr,tL,ERr,Lf,CRr,iU,wRr,ARr,dU,yRr,LRr,xRr,aL,kRr,_8e,SRr,RRr,BRr,$t,nL,PRr,u8e,$Rr,IRr,xf,qRr,b8e,NRr,jRr,cU,DRr,GRr,ORr,v8e,VRr,XRr,sL,zRr,Io,lL,QRr,F8e,WRr,HRr,jn,URr,T8e,JRr,YRr,M8e,KRr,ZRr,E8e,eBr,oBr,rBr,C8e,EE,w8e,tBr,aBr,fU,nBr,sBr,lBr,A8e,iBr,dBr,iL,BPe,kf,CE,y8e,dL,cBr,L8e,fBr,PPe,Or,cL,mBr,Sf,gBr,mU,hBr,pBr,gU,_Br,uBr,bBr,fL,vBr,x8e,FBr,TBr,MBr,It,mL,EBr,k8e,CBr,wBr,Rf,ABr,S8e,yBr,LBr,hU,xBr,kBr,SBr,R8e,RBr,BBr,gL,PBr,qo,hL,$Br,B8e,IBr,qBr,Dn,NBr,P8e,jBr,DBr,$8e,GBr,OBr,I8e,VBr,XBr,zBr,pL,wE,q8e,QBr,WBr,pU,HBr,UBr,JBr,AE,N8e,YBr,KBr,_U,ZBr,ePr,oPr,j8e,rPr,tPr,_L,$Pe,Bf,yE,D8e,uL,aPr,G8e,nPr,IPe,Vr,bL,sPr,Pf,lPr,uU,iPr,dPr,bU,cPr,fPr,mPr,vL,gPr,O8e,hPr,pPr,_Pr,qt,FL,uPr,V8e,bPr,vPr,$f,FPr,X8e,TPr,MPr,vU,EPr,CPr,wPr,z8e,APr,yPr,TL,LPr,No,ML,xPr,Q8e,kPr,SPr,Gn,RPr,W8e,BPr,PPr,H8e,$Pr,IPr,U8e,qPr,NPr,jPr,J8e,LE,Y8e,DPr,GPr,FU,OPr,VPr,XPr,K8e,zPr,QPr,EL,qPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),B5=new X({}),P5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new WPr({props:{warning:!0,$$slots:{default:[D3t]},$$scope:{ctx:qf}}}),$5=new X({}),I5=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/configuration_auto.py#L560"}}),j5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/configuration_auto.py#L583"}}),D5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),G5=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/configuration_auto.py#L705"}}),O5=new X({}),V5=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/tokenization_auto.py#L358"}}),Q5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16869/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/tokenization_auto.py#L372"}}),W5=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),H5=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/tokenization_auto.py#L568"}}),U5=new X({}),J5=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/feature_extraction_auto.py#L173"}}),Z5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16869/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),Nh=new WPr({props:{$$slots:{default:[G3t]},$$scope:{ctx:qf}}}),e3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),o3=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/feature_extraction_auto.py#L314"}}),r3=new X({}),t3=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/processing_auto.py#L70"}}),s3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/processing_auto.py#L84"}}),Uh=new WPr({props:{$$slots:{default:[O3t]},$$scope:{ctx:qf}}}),l3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),i3=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/processing_auto.py#L237"}}),d3=new X({}),c3=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L714"}}),m3=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),h3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_3=new X({}),u3=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L721"}}),v3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),T3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new X({}),C3=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L736"}}),A3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),L3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new X({}),S3=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L743"}}),B3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),$3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new X({}),N3=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L750"}}),D3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),O3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new X({}),z3=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L759"}}),W3=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),U3=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new X({}),K3=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L793"}}),eC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),rC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aC=new X({}),nC=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L800"}}),lC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),dC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fC=new X({}),mC=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L786"}}),hC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),_C=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bC=new X({}),vC=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L768"}}),TC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),EC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wC=new X({}),AC=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L775"}}),LC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),kC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RC=new X({}),BC=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L809"}}),$C=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),qC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jC=new X({}),DC=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L848"}}),OC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),XC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QC=new X({}),WC=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L855"}}),UC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),YC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZC=new X({}),ew=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L878"}}),rw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),aw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L862"}}),dw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),fw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L869"}}),_w=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),bw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Mw=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L887"}}),Cw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Aw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),xw=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L894"}}),Sw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Bw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L841"}}),Nw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Dw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Vw=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L816"}}),zw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Ww=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L823"}}),Kw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),eA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_auto.py#L832"}}),nA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),lA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),mA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),hA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),vA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),FA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),TA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new X({}),CA=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),AA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),LA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),SA=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),BA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),$A=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),jA=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),GA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),VA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),QA=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),HA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),JA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),o0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),t0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),i0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),c0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new X({}),g0=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),p0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),u0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v0=new X({}),F0=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),M0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),C0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),y0=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),x0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),S0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new X({}),P0=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),I0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),N0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),G0=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),V0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),z0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),H0=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),J0=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),K0=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),ty=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ny=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new X({}),iy=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),cy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),my=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new X({}),py=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),uy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),vy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),My=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),Cy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Ay=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),xy=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Sy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),By=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new X({}),Iy=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Ny=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Dy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Vy=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),zy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Wy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Ky=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),eL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new X({}),tL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),nL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),lL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new X({}),cL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),mL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),hL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),FL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L389"}}),TL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),ML=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16869/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16869/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16869/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){ee=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),Ni=o("Auto Classes"),Nf=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),x5=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Gi=o("Instantiating one of "),On=a("a"),k5=o("AutoConfig"),Vn=o(", "),Xn=a("a"),S5=o("AutoModel"),Oi=o(`, and
`),zn=a("a"),R5=o("AutoTokenizer"),Vi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),M7=o("will create a model that is an instance of "),Xi=a("a"),E7=o("BertModel"),C7=o("."),zo=l(),Ga=a("p"),w7=o("There is one class of "),Gf=a("code"),A7=o("AutoModel"),UIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),IRe=l(),zi=a("h2"),Of=a("a"),gY=a("span"),f(B5.$$.fragment),JIe=l(),hY=a("span"),YIe=o("Extending the Auto Classes"),qRe=l(),Qn=a("p"),KIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pY=a("code"),ZIe=o("NewModel"),eqe=o(", make sure you have a "),_Y=a("code"),oqe=o("NewModelConfig"),rqe=o(` then you can add those to the auto
classes like this:`),NRe=l(),f(P5.$$.fragment),jRe=l(),y7=a("p"),tqe=o("You will then be able to use the auto classes like you would usually do!"),DRe=l(),f(Vf.$$.fragment),GRe=l(),Qi=a("h2"),Xf=a("a"),uY=a("span"),f($5.$$.fragment),aqe=l(),bY=a("span"),nqe=o("AutoConfig"),ORe=l(),Qo=a("div"),f(I5.$$.fragment),sqe=l(),q5=a("p"),lqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),L7=a("a"),iqe=o("from_pretrained()"),dqe=o(" class method."),cqe=l(),N5=a("p"),fqe=o("This class cannot be instantiated directly using "),vY=a("code"),mqe=o("__init__()"),gqe=o(" (throws an error)."),hqe=l(),mo=a("div"),f(j5.$$.fragment),pqe=l(),FY=a("p"),_qe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),uqe=l(),Wi=a("p"),bqe=o("The configuration class to instantiate is selected based on the "),TY=a("code"),vqe=o("model_type"),Fqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MY=a("code"),Tqe=o("pretrained_model_name_or_path"),Mqe=o(":"),Eqe=l(),v=a("ul"),zf=a("li"),EY=a("strong"),Cqe=o("albert"),wqe=o(" \u2014 "),x7=a("a"),Aqe=o("AlbertConfig"),yqe=o(" (ALBERT model)"),Lqe=l(),Qf=a("li"),CY=a("strong"),xqe=o("bart"),kqe=o(" \u2014 "),k7=a("a"),Sqe=o("BartConfig"),Rqe=o(" (BART model)"),Bqe=l(),Wf=a("li"),wY=a("strong"),Pqe=o("beit"),$qe=o(" \u2014 "),S7=a("a"),Iqe=o("BeitConfig"),qqe=o(" (BEiT model)"),Nqe=l(),Hf=a("li"),AY=a("strong"),jqe=o("bert"),Dqe=o(" \u2014 "),R7=a("a"),Gqe=o("BertConfig"),Oqe=o(" (BERT model)"),Vqe=l(),Uf=a("li"),yY=a("strong"),Xqe=o("bert-generation"),zqe=o(" \u2014 "),B7=a("a"),Qqe=o("BertGenerationConfig"),Wqe=o(" (Bert Generation model)"),Hqe=l(),Jf=a("li"),LY=a("strong"),Uqe=o("big_bird"),Jqe=o(" \u2014 "),P7=a("a"),Yqe=o("BigBirdConfig"),Kqe=o(" (BigBird model)"),Zqe=l(),Yf=a("li"),xY=a("strong"),eNe=o("bigbird_pegasus"),oNe=o(" \u2014 "),$7=a("a"),rNe=o("BigBirdPegasusConfig"),tNe=o(" (BigBirdPegasus model)"),aNe=l(),Kf=a("li"),kY=a("strong"),nNe=o("blenderbot"),sNe=o(" \u2014 "),I7=a("a"),lNe=o("BlenderbotConfig"),iNe=o(" (Blenderbot model)"),dNe=l(),Zf=a("li"),SY=a("strong"),cNe=o("blenderbot-small"),fNe=o(" \u2014 "),q7=a("a"),mNe=o("BlenderbotSmallConfig"),gNe=o(" (BlenderbotSmall model)"),hNe=l(),em=a("li"),RY=a("strong"),pNe=o("camembert"),_Ne=o(" \u2014 "),N7=a("a"),uNe=o("CamembertConfig"),bNe=o(" (CamemBERT model)"),vNe=l(),om=a("li"),BY=a("strong"),FNe=o("canine"),TNe=o(" \u2014 "),j7=a("a"),MNe=o("CanineConfig"),ENe=o(" (Canine model)"),CNe=l(),rm=a("li"),PY=a("strong"),wNe=o("clip"),ANe=o(" \u2014 "),D7=a("a"),yNe=o("CLIPConfig"),LNe=o(" (CLIP model)"),xNe=l(),tm=a("li"),$Y=a("strong"),kNe=o("convbert"),SNe=o(" \u2014 "),G7=a("a"),RNe=o("ConvBertConfig"),BNe=o(" (ConvBERT model)"),PNe=l(),am=a("li"),IY=a("strong"),$Ne=o("convnext"),INe=o(" \u2014 "),O7=a("a"),qNe=o("ConvNextConfig"),NNe=o(" (ConvNext model)"),jNe=l(),nm=a("li"),qY=a("strong"),DNe=o("ctrl"),GNe=o(" \u2014 "),V7=a("a"),ONe=o("CTRLConfig"),VNe=o(" (CTRL model)"),XNe=l(),sm=a("li"),NY=a("strong"),zNe=o("data2vec-audio"),QNe=o(" \u2014 "),X7=a("a"),WNe=o("Data2VecAudioConfig"),HNe=o(" (Data2VecAudio model)"),UNe=l(),lm=a("li"),jY=a("strong"),JNe=o("data2vec-text"),YNe=o(" \u2014 "),z7=a("a"),KNe=o("Data2VecTextConfig"),ZNe=o(" (Data2VecText model)"),eje=l(),im=a("li"),DY=a("strong"),oje=o("data2vec-vision"),rje=o(" \u2014 "),Q7=a("a"),tje=o("Data2VecVisionConfig"),aje=o(" (Data2VecVision model)"),nje=l(),dm=a("li"),GY=a("strong"),sje=o("deberta"),lje=o(" \u2014 "),W7=a("a"),ije=o("DebertaConfig"),dje=o(" (DeBERTa model)"),cje=l(),cm=a("li"),OY=a("strong"),fje=o("deberta-v2"),mje=o(" \u2014 "),H7=a("a"),gje=o("DebertaV2Config"),hje=o(" (DeBERTa-v2 model)"),pje=l(),fm=a("li"),VY=a("strong"),_je=o("decision_transformer"),uje=o(" \u2014 "),U7=a("a"),bje=o("DecisionTransformerConfig"),vje=o(" (Decision Transformer model)"),Fje=l(),mm=a("li"),XY=a("strong"),Tje=o("deit"),Mje=o(" \u2014 "),J7=a("a"),Eje=o("DeiTConfig"),Cje=o(" (DeiT model)"),wje=l(),gm=a("li"),zY=a("strong"),Aje=o("detr"),yje=o(" \u2014 "),Y7=a("a"),Lje=o("DetrConfig"),xje=o(" (DETR model)"),kje=l(),hm=a("li"),QY=a("strong"),Sje=o("distilbert"),Rje=o(" \u2014 "),K7=a("a"),Bje=o("DistilBertConfig"),Pje=o(" (DistilBERT model)"),$je=l(),pm=a("li"),WY=a("strong"),Ije=o("dpr"),qje=o(" \u2014 "),Z7=a("a"),Nje=o("DPRConfig"),jje=o(" (DPR model)"),Dje=l(),_m=a("li"),HY=a("strong"),Gje=o("dpt"),Oje=o(" \u2014 "),ex=a("a"),Vje=o("DPTConfig"),Xje=o(" (DPT model)"),zje=l(),um=a("li"),UY=a("strong"),Qje=o("electra"),Wje=o(" \u2014 "),ox=a("a"),Hje=o("ElectraConfig"),Uje=o(" (ELECTRA model)"),Jje=l(),bm=a("li"),JY=a("strong"),Yje=o("encoder-decoder"),Kje=o(" \u2014 "),rx=a("a"),Zje=o("EncoderDecoderConfig"),eDe=o(" (Encoder decoder model)"),oDe=l(),vm=a("li"),YY=a("strong"),rDe=o("flaubert"),tDe=o(" \u2014 "),tx=a("a"),aDe=o("FlaubertConfig"),nDe=o(" (FlauBERT model)"),sDe=l(),Fm=a("li"),KY=a("strong"),lDe=o("fnet"),iDe=o(" \u2014 "),ax=a("a"),dDe=o("FNetConfig"),cDe=o(" (FNet model)"),fDe=l(),Tm=a("li"),ZY=a("strong"),mDe=o("fsmt"),gDe=o(" \u2014 "),nx=a("a"),hDe=o("FSMTConfig"),pDe=o(" (FairSeq Machine-Translation model)"),_De=l(),Mm=a("li"),eK=a("strong"),uDe=o("funnel"),bDe=o(" \u2014 "),sx=a("a"),vDe=o("FunnelConfig"),FDe=o(" (Funnel Transformer model)"),TDe=l(),Em=a("li"),oK=a("strong"),MDe=o("glpn"),EDe=o(" \u2014 "),lx=a("a"),CDe=o("GLPNConfig"),wDe=o(" (GLPN model)"),ADe=l(),Cm=a("li"),rK=a("strong"),yDe=o("gpt2"),LDe=o(" \u2014 "),ix=a("a"),xDe=o("GPT2Config"),kDe=o(" (OpenAI GPT-2 model)"),SDe=l(),wm=a("li"),tK=a("strong"),RDe=o("gpt_neo"),BDe=o(" \u2014 "),dx=a("a"),PDe=o("GPTNeoConfig"),$De=o(" (GPT Neo model)"),IDe=l(),Am=a("li"),aK=a("strong"),qDe=o("gptj"),NDe=o(" \u2014 "),cx=a("a"),jDe=o("GPTJConfig"),DDe=o(" (GPT-J model)"),GDe=l(),ym=a("li"),nK=a("strong"),ODe=o("hubert"),VDe=o(" \u2014 "),fx=a("a"),XDe=o("HubertConfig"),zDe=o(" (Hubert model)"),QDe=l(),Lm=a("li"),sK=a("strong"),WDe=o("ibert"),HDe=o(" \u2014 "),mx=a("a"),UDe=o("IBertConfig"),JDe=o(" (I-BERT model)"),YDe=l(),xm=a("li"),lK=a("strong"),KDe=o("imagegpt"),ZDe=o(" \u2014 "),gx=a("a"),eGe=o("ImageGPTConfig"),oGe=o(" (ImageGPT model)"),rGe=l(),km=a("li"),iK=a("strong"),tGe=o("layoutlm"),aGe=o(" \u2014 "),hx=a("a"),nGe=o("LayoutLMConfig"),sGe=o(" (LayoutLM model)"),lGe=l(),Sm=a("li"),dK=a("strong"),iGe=o("layoutlmv2"),dGe=o(" \u2014 "),px=a("a"),cGe=o("LayoutLMv2Config"),fGe=o(" (LayoutLMv2 model)"),mGe=l(),Rm=a("li"),cK=a("strong"),gGe=o("led"),hGe=o(" \u2014 "),_x=a("a"),pGe=o("LEDConfig"),_Ge=o(" (LED model)"),uGe=l(),Bm=a("li"),fK=a("strong"),bGe=o("longformer"),vGe=o(" \u2014 "),ux=a("a"),FGe=o("LongformerConfig"),TGe=o(" (Longformer model)"),MGe=l(),Pm=a("li"),mK=a("strong"),EGe=o("luke"),CGe=o(" \u2014 "),bx=a("a"),wGe=o("LukeConfig"),AGe=o(" (LUKE model)"),yGe=l(),$m=a("li"),gK=a("strong"),LGe=o("lxmert"),xGe=o(" \u2014 "),vx=a("a"),kGe=o("LxmertConfig"),SGe=o(" (LXMERT model)"),RGe=l(),Im=a("li"),hK=a("strong"),BGe=o("m2m_100"),PGe=o(" \u2014 "),Fx=a("a"),$Ge=o("M2M100Config"),IGe=o(" (M2M100 model)"),qGe=l(),qm=a("li"),pK=a("strong"),NGe=o("marian"),jGe=o(" \u2014 "),Tx=a("a"),DGe=o("MarianConfig"),GGe=o(" (Marian model)"),OGe=l(),Nm=a("li"),_K=a("strong"),VGe=o("maskformer"),XGe=o(" \u2014 "),Mx=a("a"),zGe=o("MaskFormerConfig"),QGe=o(" (MaskFormer model)"),WGe=l(),jm=a("li"),uK=a("strong"),HGe=o("mbart"),UGe=o(" \u2014 "),Ex=a("a"),JGe=o("MBartConfig"),YGe=o(" (mBART model)"),KGe=l(),Dm=a("li"),bK=a("strong"),ZGe=o("megatron-bert"),eOe=o(" \u2014 "),Cx=a("a"),oOe=o("MegatronBertConfig"),rOe=o(" (MegatronBert model)"),tOe=l(),Gm=a("li"),vK=a("strong"),aOe=o("mobilebert"),nOe=o(" \u2014 "),wx=a("a"),sOe=o("MobileBertConfig"),lOe=o(" (MobileBERT model)"),iOe=l(),Om=a("li"),FK=a("strong"),dOe=o("mpnet"),cOe=o(" \u2014 "),Ax=a("a"),fOe=o("MPNetConfig"),mOe=o(" (MPNet model)"),gOe=l(),Vm=a("li"),TK=a("strong"),hOe=o("mt5"),pOe=o(" \u2014 "),yx=a("a"),_Oe=o("MT5Config"),uOe=o(" (mT5 model)"),bOe=l(),Xm=a("li"),MK=a("strong"),vOe=o("nystromformer"),FOe=o(" \u2014 "),Lx=a("a"),TOe=o("NystromformerConfig"),MOe=o(" (Nystromformer model)"),EOe=l(),zm=a("li"),EK=a("strong"),COe=o("openai-gpt"),wOe=o(" \u2014 "),xx=a("a"),AOe=o("OpenAIGPTConfig"),yOe=o(" (OpenAI GPT model)"),LOe=l(),Qm=a("li"),CK=a("strong"),xOe=o("pegasus"),kOe=o(" \u2014 "),kx=a("a"),SOe=o("PegasusConfig"),ROe=o(" (Pegasus model)"),BOe=l(),Wm=a("li"),wK=a("strong"),POe=o("perceiver"),$Oe=o(" \u2014 "),Sx=a("a"),IOe=o("PerceiverConfig"),qOe=o(" (Perceiver model)"),NOe=l(),Hm=a("li"),AK=a("strong"),jOe=o("plbart"),DOe=o(" \u2014 "),Rx=a("a"),GOe=o("PLBartConfig"),OOe=o(" (PLBart model)"),VOe=l(),Um=a("li"),yK=a("strong"),XOe=o("poolformer"),zOe=o(" \u2014 "),Bx=a("a"),QOe=o("PoolFormerConfig"),WOe=o(" (PoolFormer model)"),HOe=l(),Jm=a("li"),LK=a("strong"),UOe=o("prophetnet"),JOe=o(" \u2014 "),Px=a("a"),YOe=o("ProphetNetConfig"),KOe=o(" (ProphetNet model)"),ZOe=l(),Ym=a("li"),xK=a("strong"),eVe=o("qdqbert"),oVe=o(" \u2014 "),$x=a("a"),rVe=o("QDQBertConfig"),tVe=o(" (QDQBert model)"),aVe=l(),Km=a("li"),kK=a("strong"),nVe=o("rag"),sVe=o(" \u2014 "),Ix=a("a"),lVe=o("RagConfig"),iVe=o(" (RAG model)"),dVe=l(),Zm=a("li"),SK=a("strong"),cVe=o("realm"),fVe=o(" \u2014 "),qx=a("a"),mVe=o("RealmConfig"),gVe=o(" (Realm model)"),hVe=l(),eg=a("li"),RK=a("strong"),pVe=o("reformer"),_Ve=o(" \u2014 "),Nx=a("a"),uVe=o("ReformerConfig"),bVe=o(" (Reformer model)"),vVe=l(),og=a("li"),BK=a("strong"),FVe=o("regnet"),TVe=o(" \u2014 "),jx=a("a"),MVe=o("RegNetConfig"),EVe=o(" (RegNet model)"),CVe=l(),rg=a("li"),PK=a("strong"),wVe=o("rembert"),AVe=o(" \u2014 "),Dx=a("a"),yVe=o("RemBertConfig"),LVe=o(" (RemBERT model)"),xVe=l(),tg=a("li"),$K=a("strong"),kVe=o("resnet"),SVe=o(" \u2014 "),Gx=a("a"),RVe=o("ResNetConfig"),BVe=o(" (ResNet model)"),PVe=l(),ag=a("li"),IK=a("strong"),$Ve=o("retribert"),IVe=o(" \u2014 "),Ox=a("a"),qVe=o("RetriBertConfig"),NVe=o(" (RetriBERT model)"),jVe=l(),ng=a("li"),qK=a("strong"),DVe=o("roberta"),GVe=o(" \u2014 "),Vx=a("a"),OVe=o("RobertaConfig"),VVe=o(" (RoBERTa model)"),XVe=l(),sg=a("li"),NK=a("strong"),zVe=o("roformer"),QVe=o(" \u2014 "),Xx=a("a"),WVe=o("RoFormerConfig"),HVe=o(" (RoFormer model)"),UVe=l(),lg=a("li"),jK=a("strong"),JVe=o("segformer"),YVe=o(" \u2014 "),zx=a("a"),KVe=o("SegformerConfig"),ZVe=o(" (SegFormer model)"),eXe=l(),ig=a("li"),DK=a("strong"),oXe=o("sew"),rXe=o(" \u2014 "),Qx=a("a"),tXe=o("SEWConfig"),aXe=o(" (SEW model)"),nXe=l(),dg=a("li"),GK=a("strong"),sXe=o("sew-d"),lXe=o(" \u2014 "),Wx=a("a"),iXe=o("SEWDConfig"),dXe=o(" (SEW-D model)"),cXe=l(),cg=a("li"),OK=a("strong"),fXe=o("speech-encoder-decoder"),mXe=o(" \u2014 "),Hx=a("a"),gXe=o("SpeechEncoderDecoderConfig"),hXe=o(" (Speech Encoder decoder model)"),pXe=l(),fg=a("li"),VK=a("strong"),_Xe=o("speech_to_text"),uXe=o(" \u2014 "),Ux=a("a"),bXe=o("Speech2TextConfig"),vXe=o(" (Speech2Text model)"),FXe=l(),mg=a("li"),XK=a("strong"),TXe=o("speech_to_text_2"),MXe=o(" \u2014 "),Jx=a("a"),EXe=o("Speech2Text2Config"),CXe=o(" (Speech2Text2 model)"),wXe=l(),gg=a("li"),zK=a("strong"),AXe=o("splinter"),yXe=o(" \u2014 "),Yx=a("a"),LXe=o("SplinterConfig"),xXe=o(" (Splinter model)"),kXe=l(),hg=a("li"),QK=a("strong"),SXe=o("squeezebert"),RXe=o(" \u2014 "),Kx=a("a"),BXe=o("SqueezeBertConfig"),PXe=o(" (SqueezeBERT model)"),$Xe=l(),pg=a("li"),WK=a("strong"),IXe=o("swin"),qXe=o(" \u2014 "),Zx=a("a"),NXe=o("SwinConfig"),jXe=o(" (Swin model)"),DXe=l(),_g=a("li"),HK=a("strong"),GXe=o("t5"),OXe=o(" \u2014 "),ek=a("a"),VXe=o("T5Config"),XXe=o(" (T5 model)"),zXe=l(),ug=a("li"),UK=a("strong"),QXe=o("tapas"),WXe=o(" \u2014 "),ok=a("a"),HXe=o("TapasConfig"),UXe=o(" (TAPAS model)"),JXe=l(),bg=a("li"),JK=a("strong"),YXe=o("tapex"),KXe=o(" \u2014 "),rk=a("a"),ZXe=o("BartConfig"),eze=o(" (TAPEX model)"),oze=l(),vg=a("li"),YK=a("strong"),rze=o("transfo-xl"),tze=o(" \u2014 "),tk=a("a"),aze=o("TransfoXLConfig"),nze=o(" (Transformer-XL model)"),sze=l(),Fg=a("li"),KK=a("strong"),lze=o("trocr"),ize=o(" \u2014 "),ak=a("a"),dze=o("TrOCRConfig"),cze=o(" (TrOCR model)"),fze=l(),Tg=a("li"),ZK=a("strong"),mze=o("unispeech"),gze=o(" \u2014 "),nk=a("a"),hze=o("UniSpeechConfig"),pze=o(" (UniSpeech model)"),_ze=l(),Mg=a("li"),eZ=a("strong"),uze=o("unispeech-sat"),bze=o(" \u2014 "),sk=a("a"),vze=o("UniSpeechSatConfig"),Fze=o(" (UniSpeechSat model)"),Tze=l(),Eg=a("li"),oZ=a("strong"),Mze=o("van"),Eze=o(" \u2014 "),lk=a("a"),Cze=o("VanConfig"),wze=o(" (VAN model)"),Aze=l(),Cg=a("li"),rZ=a("strong"),yze=o("vilt"),Lze=o(" \u2014 "),ik=a("a"),xze=o("ViltConfig"),kze=o(" (ViLT model)"),Sze=l(),wg=a("li"),tZ=a("strong"),Rze=o("vision-encoder-decoder"),Bze=o(" \u2014 "),dk=a("a"),Pze=o("VisionEncoderDecoderConfig"),$ze=o(" (Vision Encoder decoder model)"),Ize=l(),Ag=a("li"),aZ=a("strong"),qze=o("vision-text-dual-encoder"),Nze=o(" \u2014 "),ck=a("a"),jze=o("VisionTextDualEncoderConfig"),Dze=o(" (VisionTextDualEncoder model)"),Gze=l(),yg=a("li"),nZ=a("strong"),Oze=o("visual_bert"),Vze=o(" \u2014 "),fk=a("a"),Xze=o("VisualBertConfig"),zze=o(" (VisualBert model)"),Qze=l(),Lg=a("li"),sZ=a("strong"),Wze=o("vit"),Hze=o(" \u2014 "),mk=a("a"),Uze=o("ViTConfig"),Jze=o(" (ViT model)"),Yze=l(),xg=a("li"),lZ=a("strong"),Kze=o("vit_mae"),Zze=o(" \u2014 "),gk=a("a"),eQe=o("ViTMAEConfig"),oQe=o(" (ViTMAE model)"),rQe=l(),kg=a("li"),iZ=a("strong"),tQe=o("wav2vec2"),aQe=o(" \u2014 "),hk=a("a"),nQe=o("Wav2Vec2Config"),sQe=o(" (Wav2Vec2 model)"),lQe=l(),Sg=a("li"),dZ=a("strong"),iQe=o("wavlm"),dQe=o(" \u2014 "),pk=a("a"),cQe=o("WavLMConfig"),fQe=o(" (WavLM model)"),mQe=l(),Rg=a("li"),cZ=a("strong"),gQe=o("xglm"),hQe=o(" \u2014 "),_k=a("a"),pQe=o("XGLMConfig"),_Qe=o(" (XGLM model)"),uQe=l(),Bg=a("li"),fZ=a("strong"),bQe=o("xlm"),vQe=o(" \u2014 "),uk=a("a"),FQe=o("XLMConfig"),TQe=o(" (XLM model)"),MQe=l(),Pg=a("li"),mZ=a("strong"),EQe=o("xlm-prophetnet"),CQe=o(" \u2014 "),bk=a("a"),wQe=o("XLMProphetNetConfig"),AQe=o(" (XLMProphetNet model)"),yQe=l(),$g=a("li"),gZ=a("strong"),LQe=o("xlm-roberta"),xQe=o(" \u2014 "),vk=a("a"),kQe=o("XLMRobertaConfig"),SQe=o(" (XLM-RoBERTa model)"),RQe=l(),Ig=a("li"),hZ=a("strong"),BQe=o("xlm-roberta-xl"),PQe=o(" \u2014 "),Fk=a("a"),$Qe=o("XLMRobertaXLConfig"),IQe=o(" (XLM-RoBERTa-XL model)"),qQe=l(),qg=a("li"),pZ=a("strong"),NQe=o("xlnet"),jQe=o(" \u2014 "),Tk=a("a"),DQe=o("XLNetConfig"),GQe=o(" (XLNet model)"),OQe=l(),Ng=a("li"),_Z=a("strong"),VQe=o("yoso"),XQe=o(" \u2014 "),Mk=a("a"),zQe=o("YosoConfig"),QQe=o(" (YOSO model)"),WQe=l(),uZ=a("p"),HQe=o("Examples:"),UQe=l(),f(D5.$$.fragment),JQe=l(),jg=a("div"),f(G5.$$.fragment),YQe=l(),bZ=a("p"),KQe=o("Register a new configuration for this class."),VRe=l(),Hi=a("h2"),Dg=a("a"),vZ=a("span"),f(O5.$$.fragment),ZQe=l(),FZ=a("span"),eWe=o("AutoTokenizer"),XRe=l(),Wo=a("div"),f(V5.$$.fragment),oWe=l(),X5=a("p"),rWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ek=a("a"),tWe=o("AutoTokenizer.from_pretrained()"),aWe=o(" class method."),nWe=l(),z5=a("p"),sWe=o("This class cannot be instantiated directly using "),TZ=a("code"),lWe=o("__init__()"),iWe=o(" (throws an error)."),dWe=l(),go=a("div"),f(Q5.$$.fragment),cWe=l(),MZ=a("p"),fWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mWe=l(),Oa=a("p"),gWe=o("The tokenizer class to instantiate is selected based on the "),EZ=a("code"),hWe=o("model_type"),pWe=o(` property of the config object (either
passed as an argument or loaded from `),CZ=a("code"),_We=o("pretrained_model_name_or_path"),uWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wZ=a("code"),bWe=o("pretrained_model_name_or_path"),vWe=o(":"),FWe=l(),E=a("ul"),Wn=a("li"),AZ=a("strong"),TWe=o("albert"),MWe=o(" \u2014 "),Ck=a("a"),EWe=o("AlbertTokenizer"),CWe=o(" or "),wk=a("a"),wWe=o("AlbertTokenizerFast"),AWe=o(" (ALBERT model)"),yWe=l(),Hn=a("li"),yZ=a("strong"),LWe=o("bart"),xWe=o(" \u2014 "),Ak=a("a"),kWe=o("BartTokenizer"),SWe=o(" or "),yk=a("a"),RWe=o("BartTokenizerFast"),BWe=o(" (BART model)"),PWe=l(),Un=a("li"),LZ=a("strong"),$We=o("barthez"),IWe=o(" \u2014 "),Lk=a("a"),qWe=o("BarthezTokenizer"),NWe=o(" or "),xk=a("a"),jWe=o("BarthezTokenizerFast"),DWe=o(" (BARThez model)"),GWe=l(),Gg=a("li"),xZ=a("strong"),OWe=o("bartpho"),VWe=o(" \u2014 "),kk=a("a"),XWe=o("BartphoTokenizer"),zWe=o(" (BARTpho model)"),QWe=l(),Jn=a("li"),kZ=a("strong"),WWe=o("bert"),HWe=o(" \u2014 "),Sk=a("a"),UWe=o("BertTokenizer"),JWe=o(" or "),Rk=a("a"),YWe=o("BertTokenizerFast"),KWe=o(" (BERT model)"),ZWe=l(),Og=a("li"),SZ=a("strong"),eHe=o("bert-generation"),oHe=o(" \u2014 "),Bk=a("a"),rHe=o("BertGenerationTokenizer"),tHe=o(" (Bert Generation model)"),aHe=l(),Vg=a("li"),RZ=a("strong"),nHe=o("bert-japanese"),sHe=o(" \u2014 "),Pk=a("a"),lHe=o("BertJapaneseTokenizer"),iHe=o(" (BertJapanese model)"),dHe=l(),Xg=a("li"),BZ=a("strong"),cHe=o("bertweet"),fHe=o(" \u2014 "),$k=a("a"),mHe=o("BertweetTokenizer"),gHe=o(" (Bertweet model)"),hHe=l(),Yn=a("li"),PZ=a("strong"),pHe=o("big_bird"),_He=o(" \u2014 "),Ik=a("a"),uHe=o("BigBirdTokenizer"),bHe=o(" or "),qk=a("a"),vHe=o("BigBirdTokenizerFast"),FHe=o(" (BigBird model)"),THe=l(),Kn=a("li"),$Z=a("strong"),MHe=o("bigbird_pegasus"),EHe=o(" \u2014 "),Nk=a("a"),CHe=o("PegasusTokenizer"),wHe=o(" or "),jk=a("a"),AHe=o("PegasusTokenizerFast"),yHe=o(" (BigBirdPegasus model)"),LHe=l(),Zn=a("li"),IZ=a("strong"),xHe=o("blenderbot"),kHe=o(" \u2014 "),Dk=a("a"),SHe=o("BlenderbotTokenizer"),RHe=o(" or "),Gk=a("a"),BHe=o("BlenderbotTokenizerFast"),PHe=o(" (Blenderbot model)"),$He=l(),zg=a("li"),qZ=a("strong"),IHe=o("blenderbot-small"),qHe=o(" \u2014 "),Ok=a("a"),NHe=o("BlenderbotSmallTokenizer"),jHe=o(" (BlenderbotSmall model)"),DHe=l(),Qg=a("li"),NZ=a("strong"),GHe=o("byt5"),OHe=o(" \u2014 "),Vk=a("a"),VHe=o("ByT5Tokenizer"),XHe=o(" (ByT5 model)"),zHe=l(),es=a("li"),jZ=a("strong"),QHe=o("camembert"),WHe=o(" \u2014 "),Xk=a("a"),HHe=o("CamembertTokenizer"),UHe=o(" or "),zk=a("a"),JHe=o("CamembertTokenizerFast"),YHe=o(" (CamemBERT model)"),KHe=l(),Wg=a("li"),DZ=a("strong"),ZHe=o("canine"),eUe=o(" \u2014 "),Qk=a("a"),oUe=o("CanineTokenizer"),rUe=o(" (Canine model)"),tUe=l(),os=a("li"),GZ=a("strong"),aUe=o("clip"),nUe=o(" \u2014 "),Wk=a("a"),sUe=o("CLIPTokenizer"),lUe=o(" or "),Hk=a("a"),iUe=o("CLIPTokenizerFast"),dUe=o(" (CLIP model)"),cUe=l(),rs=a("li"),OZ=a("strong"),fUe=o("convbert"),mUe=o(" \u2014 "),Uk=a("a"),gUe=o("ConvBertTokenizer"),hUe=o(" or "),Jk=a("a"),pUe=o("ConvBertTokenizerFast"),_Ue=o(" (ConvBERT model)"),uUe=l(),ts=a("li"),VZ=a("strong"),bUe=o("cpm"),vUe=o(" \u2014 "),Yk=a("a"),FUe=o("CpmTokenizer"),TUe=o(" or "),XZ=a("code"),MUe=o("CpmTokenizerFast"),EUe=o(" (CPM model)"),CUe=l(),Hg=a("li"),zZ=a("strong"),wUe=o("ctrl"),AUe=o(" \u2014 "),Kk=a("a"),yUe=o("CTRLTokenizer"),LUe=o(" (CTRL model)"),xUe=l(),as=a("li"),QZ=a("strong"),kUe=o("deberta"),SUe=o(" \u2014 "),Zk=a("a"),RUe=o("DebertaTokenizer"),BUe=o(" or "),eS=a("a"),PUe=o("DebertaTokenizerFast"),$Ue=o(" (DeBERTa model)"),IUe=l(),ns=a("li"),WZ=a("strong"),qUe=o("deberta-v2"),NUe=o(" \u2014 "),oS=a("a"),jUe=o("DebertaV2Tokenizer"),DUe=o(" or "),rS=a("a"),GUe=o("DebertaV2TokenizerFast"),OUe=o(" (DeBERTa-v2 model)"),VUe=l(),ss=a("li"),HZ=a("strong"),XUe=o("distilbert"),zUe=o(" \u2014 "),tS=a("a"),QUe=o("DistilBertTokenizer"),WUe=o(" or "),aS=a("a"),HUe=o("DistilBertTokenizerFast"),UUe=o(" (DistilBERT model)"),JUe=l(),ls=a("li"),UZ=a("strong"),YUe=o("dpr"),KUe=o(" \u2014 "),nS=a("a"),ZUe=o("DPRQuestionEncoderTokenizer"),eJe=o(" or "),sS=a("a"),oJe=o("DPRQuestionEncoderTokenizerFast"),rJe=o(" (DPR model)"),tJe=l(),is=a("li"),JZ=a("strong"),aJe=o("electra"),nJe=o(" \u2014 "),lS=a("a"),sJe=o("ElectraTokenizer"),lJe=o(" or "),iS=a("a"),iJe=o("ElectraTokenizerFast"),dJe=o(" (ELECTRA model)"),cJe=l(),Ug=a("li"),YZ=a("strong"),fJe=o("flaubert"),mJe=o(" \u2014 "),dS=a("a"),gJe=o("FlaubertTokenizer"),hJe=o(" (FlauBERT model)"),pJe=l(),ds=a("li"),KZ=a("strong"),_Je=o("fnet"),uJe=o(" \u2014 "),cS=a("a"),bJe=o("FNetTokenizer"),vJe=o(" or "),fS=a("a"),FJe=o("FNetTokenizerFast"),TJe=o(" (FNet model)"),MJe=l(),Jg=a("li"),ZZ=a("strong"),EJe=o("fsmt"),CJe=o(" \u2014 "),mS=a("a"),wJe=o("FSMTTokenizer"),AJe=o(" (FairSeq Machine-Translation model)"),yJe=l(),cs=a("li"),eee=a("strong"),LJe=o("funnel"),xJe=o(" \u2014 "),gS=a("a"),kJe=o("FunnelTokenizer"),SJe=o(" or "),hS=a("a"),RJe=o("FunnelTokenizerFast"),BJe=o(" (Funnel Transformer model)"),PJe=l(),fs=a("li"),oee=a("strong"),$Je=o("gpt2"),IJe=o(" \u2014 "),pS=a("a"),qJe=o("GPT2Tokenizer"),NJe=o(" or "),_S=a("a"),jJe=o("GPT2TokenizerFast"),DJe=o(" (OpenAI GPT-2 model)"),GJe=l(),ms=a("li"),ree=a("strong"),OJe=o("gpt_neo"),VJe=o(" \u2014 "),uS=a("a"),XJe=o("GPT2Tokenizer"),zJe=o(" or "),bS=a("a"),QJe=o("GPT2TokenizerFast"),WJe=o(" (GPT Neo model)"),HJe=l(),gs=a("li"),tee=a("strong"),UJe=o("herbert"),JJe=o(" \u2014 "),vS=a("a"),YJe=o("HerbertTokenizer"),KJe=o(" or "),FS=a("a"),ZJe=o("HerbertTokenizerFast"),eYe=o(" (HerBERT model)"),oYe=l(),Yg=a("li"),aee=a("strong"),rYe=o("hubert"),tYe=o(" \u2014 "),TS=a("a"),aYe=o("Wav2Vec2CTCTokenizer"),nYe=o(" (Hubert model)"),sYe=l(),hs=a("li"),nee=a("strong"),lYe=o("ibert"),iYe=o(" \u2014 "),MS=a("a"),dYe=o("RobertaTokenizer"),cYe=o(" or "),ES=a("a"),fYe=o("RobertaTokenizerFast"),mYe=o(" (I-BERT model)"),gYe=l(),ps=a("li"),see=a("strong"),hYe=o("layoutlm"),pYe=o(" \u2014 "),CS=a("a"),_Ye=o("LayoutLMTokenizer"),uYe=o(" or "),wS=a("a"),bYe=o("LayoutLMTokenizerFast"),vYe=o(" (LayoutLM model)"),FYe=l(),_s=a("li"),lee=a("strong"),TYe=o("layoutlmv2"),MYe=o(" \u2014 "),AS=a("a"),EYe=o("LayoutLMv2Tokenizer"),CYe=o(" or "),yS=a("a"),wYe=o("LayoutLMv2TokenizerFast"),AYe=o(" (LayoutLMv2 model)"),yYe=l(),us=a("li"),iee=a("strong"),LYe=o("layoutxlm"),xYe=o(" \u2014 "),LS=a("a"),kYe=o("LayoutXLMTokenizer"),SYe=o(" or "),xS=a("a"),RYe=o("LayoutXLMTokenizerFast"),BYe=o(" (LayoutXLM model)"),PYe=l(),bs=a("li"),dee=a("strong"),$Ye=o("led"),IYe=o(" \u2014 "),kS=a("a"),qYe=o("LEDTokenizer"),NYe=o(" or "),SS=a("a"),jYe=o("LEDTokenizerFast"),DYe=o(" (LED model)"),GYe=l(),vs=a("li"),cee=a("strong"),OYe=o("longformer"),VYe=o(" \u2014 "),RS=a("a"),XYe=o("LongformerTokenizer"),zYe=o(" or "),BS=a("a"),QYe=o("LongformerTokenizerFast"),WYe=o(" (Longformer model)"),HYe=l(),Kg=a("li"),fee=a("strong"),UYe=o("luke"),JYe=o(" \u2014 "),PS=a("a"),YYe=o("LukeTokenizer"),KYe=o(" (LUKE model)"),ZYe=l(),Fs=a("li"),mee=a("strong"),eKe=o("lxmert"),oKe=o(" \u2014 "),$S=a("a"),rKe=o("LxmertTokenizer"),tKe=o(" or "),IS=a("a"),aKe=o("LxmertTokenizerFast"),nKe=o(" (LXMERT model)"),sKe=l(),Zg=a("li"),gee=a("strong"),lKe=o("m2m_100"),iKe=o(" \u2014 "),qS=a("a"),dKe=o("M2M100Tokenizer"),cKe=o(" (M2M100 model)"),fKe=l(),eh=a("li"),hee=a("strong"),mKe=o("marian"),gKe=o(" \u2014 "),NS=a("a"),hKe=o("MarianTokenizer"),pKe=o(" (Marian model)"),_Ke=l(),Ts=a("li"),pee=a("strong"),uKe=o("mbart"),bKe=o(" \u2014 "),jS=a("a"),vKe=o("MBartTokenizer"),FKe=o(" or "),DS=a("a"),TKe=o("MBartTokenizerFast"),MKe=o(" (mBART model)"),EKe=l(),Ms=a("li"),_ee=a("strong"),CKe=o("mbart50"),wKe=o(" \u2014 "),GS=a("a"),AKe=o("MBart50Tokenizer"),yKe=o(" or "),OS=a("a"),LKe=o("MBart50TokenizerFast"),xKe=o(" (mBART-50 model)"),kKe=l(),oh=a("li"),uee=a("strong"),SKe=o("mluke"),RKe=o(" \u2014 "),VS=a("a"),BKe=o("MLukeTokenizer"),PKe=o(" (mLUKE model)"),$Ke=l(),Es=a("li"),bee=a("strong"),IKe=o("mobilebert"),qKe=o(" \u2014 "),XS=a("a"),NKe=o("MobileBertTokenizer"),jKe=o(" or "),zS=a("a"),DKe=o("MobileBertTokenizerFast"),GKe=o(" (MobileBERT model)"),OKe=l(),Cs=a("li"),vee=a("strong"),VKe=o("mpnet"),XKe=o(" \u2014 "),QS=a("a"),zKe=o("MPNetTokenizer"),QKe=o(" or "),WS=a("a"),WKe=o("MPNetTokenizerFast"),HKe=o(" (MPNet model)"),UKe=l(),ws=a("li"),Fee=a("strong"),JKe=o("mt5"),YKe=o(" \u2014 "),HS=a("a"),KKe=o("MT5Tokenizer"),ZKe=o(" or "),US=a("a"),eZe=o("MT5TokenizerFast"),oZe=o(" (mT5 model)"),rZe=l(),As=a("li"),Tee=a("strong"),tZe=o("openai-gpt"),aZe=o(" \u2014 "),JS=a("a"),nZe=o("OpenAIGPTTokenizer"),sZe=o(" or "),YS=a("a"),lZe=o("OpenAIGPTTokenizerFast"),iZe=o(" (OpenAI GPT model)"),dZe=l(),ys=a("li"),Mee=a("strong"),cZe=o("pegasus"),fZe=o(" \u2014 "),KS=a("a"),mZe=o("PegasusTokenizer"),gZe=o(" or "),ZS=a("a"),hZe=o("PegasusTokenizerFast"),pZe=o(" (Pegasus model)"),_Ze=l(),rh=a("li"),Eee=a("strong"),uZe=o("perceiver"),bZe=o(" \u2014 "),eR=a("a"),vZe=o("PerceiverTokenizer"),FZe=o(" (Perceiver model)"),TZe=l(),th=a("li"),Cee=a("strong"),MZe=o("phobert"),EZe=o(" \u2014 "),oR=a("a"),CZe=o("PhobertTokenizer"),wZe=o(" (PhoBERT model)"),AZe=l(),ah=a("li"),wee=a("strong"),yZe=o("plbart"),LZe=o(" \u2014 "),rR=a("a"),xZe=o("PLBartTokenizer"),kZe=o(" (PLBart model)"),SZe=l(),nh=a("li"),Aee=a("strong"),RZe=o("prophetnet"),BZe=o(" \u2014 "),tR=a("a"),PZe=o("ProphetNetTokenizer"),$Ze=o(" (ProphetNet model)"),IZe=l(),Ls=a("li"),yee=a("strong"),qZe=o("qdqbert"),NZe=o(" \u2014 "),aR=a("a"),jZe=o("BertTokenizer"),DZe=o(" or "),nR=a("a"),GZe=o("BertTokenizerFast"),OZe=o(" (QDQBert model)"),VZe=l(),sh=a("li"),Lee=a("strong"),XZe=o("rag"),zZe=o(" \u2014 "),sR=a("a"),QZe=o("RagTokenizer"),WZe=o(" (RAG model)"),HZe=l(),xs=a("li"),xee=a("strong"),UZe=o("realm"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("RealmTokenizer"),KZe=o(" or "),iR=a("a"),ZZe=o("RealmTokenizerFast"),eeo=o(" (Realm model)"),oeo=l(),ks=a("li"),kee=a("strong"),reo=o("reformer"),teo=o(" \u2014 "),dR=a("a"),aeo=o("ReformerTokenizer"),neo=o(" or "),cR=a("a"),seo=o("ReformerTokenizerFast"),leo=o(" (Reformer model)"),ieo=l(),Ss=a("li"),See=a("strong"),deo=o("rembert"),ceo=o(" \u2014 "),fR=a("a"),feo=o("RemBertTokenizer"),meo=o(" or "),mR=a("a"),geo=o("RemBertTokenizerFast"),heo=o(" (RemBERT model)"),peo=l(),Rs=a("li"),Ree=a("strong"),_eo=o("retribert"),ueo=o(" \u2014 "),gR=a("a"),beo=o("RetriBertTokenizer"),veo=o(" or "),hR=a("a"),Feo=o("RetriBertTokenizerFast"),Teo=o(" (RetriBERT model)"),Meo=l(),Bs=a("li"),Bee=a("strong"),Eeo=o("roberta"),Ceo=o(" \u2014 "),pR=a("a"),weo=o("RobertaTokenizer"),Aeo=o(" or "),_R=a("a"),yeo=o("RobertaTokenizerFast"),Leo=o(" (RoBERTa model)"),xeo=l(),Ps=a("li"),Pee=a("strong"),keo=o("roformer"),Seo=o(" \u2014 "),uR=a("a"),Reo=o("RoFormerTokenizer"),Beo=o(" or "),bR=a("a"),Peo=o("RoFormerTokenizerFast"),$eo=o(" (RoFormer model)"),Ieo=l(),lh=a("li"),$ee=a("strong"),qeo=o("speech_to_text"),Neo=o(" \u2014 "),vR=a("a"),jeo=o("Speech2TextTokenizer"),Deo=o(" (Speech2Text model)"),Geo=l(),ih=a("li"),Iee=a("strong"),Oeo=o("speech_to_text_2"),Veo=o(" \u2014 "),FR=a("a"),Xeo=o("Speech2Text2Tokenizer"),zeo=o(" (Speech2Text2 model)"),Qeo=l(),$s=a("li"),qee=a("strong"),Weo=o("splinter"),Heo=o(" \u2014 "),TR=a("a"),Ueo=o("SplinterTokenizer"),Jeo=o(" or "),MR=a("a"),Yeo=o("SplinterTokenizerFast"),Keo=o(" (Splinter model)"),Zeo=l(),Is=a("li"),Nee=a("strong"),eoo=o("squeezebert"),ooo=o(" \u2014 "),ER=a("a"),roo=o("SqueezeBertTokenizer"),too=o(" or "),CR=a("a"),aoo=o("SqueezeBertTokenizerFast"),noo=o(" (SqueezeBERT model)"),soo=l(),qs=a("li"),jee=a("strong"),loo=o("t5"),ioo=o(" \u2014 "),wR=a("a"),doo=o("T5Tokenizer"),coo=o(" or "),AR=a("a"),foo=o("T5TokenizerFast"),moo=o(" (T5 model)"),goo=l(),dh=a("li"),Dee=a("strong"),hoo=o("tapas"),poo=o(" \u2014 "),yR=a("a"),_oo=o("TapasTokenizer"),uoo=o(" (TAPAS model)"),boo=l(),ch=a("li"),Gee=a("strong"),voo=o("tapex"),Foo=o(" \u2014 "),LR=a("a"),Too=o("TapexTokenizer"),Moo=o(" (TAPEX model)"),Eoo=l(),fh=a("li"),Oee=a("strong"),Coo=o("transfo-xl"),woo=o(" \u2014 "),xR=a("a"),Aoo=o("TransfoXLTokenizer"),yoo=o(" (Transformer-XL model)"),Loo=l(),mh=a("li"),Vee=a("strong"),xoo=o("wav2vec2"),koo=o(" \u2014 "),kR=a("a"),Soo=o("Wav2Vec2CTCTokenizer"),Roo=o(" (Wav2Vec2 model)"),Boo=l(),gh=a("li"),Xee=a("strong"),Poo=o("wav2vec2_phoneme"),$oo=o(" \u2014 "),SR=a("a"),Ioo=o("Wav2Vec2PhonemeCTCTokenizer"),qoo=o(" (Wav2Vec2Phoneme model)"),Noo=l(),Ns=a("li"),zee=a("strong"),joo=o("xglm"),Doo=o(" \u2014 "),RR=a("a"),Goo=o("XGLMTokenizer"),Ooo=o(" or "),BR=a("a"),Voo=o("XGLMTokenizerFast"),Xoo=o(" (XGLM model)"),zoo=l(),hh=a("li"),Qee=a("strong"),Qoo=o("xlm"),Woo=o(" \u2014 "),PR=a("a"),Hoo=o("XLMTokenizer"),Uoo=o(" (XLM model)"),Joo=l(),ph=a("li"),Wee=a("strong"),Yoo=o("xlm-prophetnet"),Koo=o(" \u2014 "),$R=a("a"),Zoo=o("XLMProphetNetTokenizer"),ero=o(" (XLMProphetNet model)"),oro=l(),js=a("li"),Hee=a("strong"),rro=o("xlm-roberta"),tro=o(" \u2014 "),IR=a("a"),aro=o("XLMRobertaTokenizer"),nro=o(" or "),qR=a("a"),sro=o("XLMRobertaTokenizerFast"),lro=o(" (XLM-RoBERTa model)"),iro=l(),Ds=a("li"),Uee=a("strong"),dro=o("xlnet"),cro=o(" \u2014 "),NR=a("a"),fro=o("XLNetTokenizer"),mro=o(" or "),jR=a("a"),gro=o("XLNetTokenizerFast"),hro=o(" (XLNet model)"),pro=l(),Jee=a("p"),_ro=o("Examples:"),uro=l(),f(W5.$$.fragment),bro=l(),_h=a("div"),f(H5.$$.fragment),vro=l(),Yee=a("p"),Fro=o("Register a new tokenizer in this mapping."),zRe=l(),Ui=a("h2"),uh=a("a"),Kee=a("span"),f(U5.$$.fragment),Tro=l(),Zee=a("span"),Mro=o("AutoFeatureExtractor"),QRe=l(),Ho=a("div"),f(J5.$$.fragment),Ero=l(),Y5=a("p"),Cro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DR=a("a"),wro=o("AutoFeatureExtractor.from_pretrained()"),Aro=o(" class method."),yro=l(),K5=a("p"),Lro=o("This class cannot be instantiated directly using "),eoe=a("code"),xro=o("__init__()"),kro=o(" (throws an error)."),Sro=l(),$e=a("div"),f(Z5.$$.fragment),Rro=l(),ooe=a("p"),Bro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Pro=l(),Va=a("p"),$ro=o("The feature extractor class to instantiate is selected based on the "),roe=a("code"),Iro=o("model_type"),qro=o(` property of the config object
(either passed as an argument or loaded from `),toe=a("code"),Nro=o("pretrained_model_name_or_path"),jro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),aoe=a("code"),Dro=o("pretrained_model_name_or_path"),Gro=o(":"),Oro=l(),J=a("ul"),bh=a("li"),noe=a("strong"),Vro=o("beit"),Xro=o(" \u2014 "),GR=a("a"),zro=o("BeitFeatureExtractor"),Qro=o(" (BEiT model)"),Wro=l(),vh=a("li"),soe=a("strong"),Hro=o("clip"),Uro=o(" \u2014 "),OR=a("a"),Jro=o("CLIPFeatureExtractor"),Yro=o(" (CLIP model)"),Kro=l(),Fh=a("li"),loe=a("strong"),Zro=o("convnext"),eto=o(" \u2014 "),VR=a("a"),oto=o("ConvNextFeatureExtractor"),rto=o(" (ConvNext model)"),tto=l(),Th=a("li"),ioe=a("strong"),ato=o("deit"),nto=o(" \u2014 "),XR=a("a"),sto=o("DeiTFeatureExtractor"),lto=o(" (DeiT model)"),ito=l(),Mh=a("li"),doe=a("strong"),dto=o("detr"),cto=o(" \u2014 "),zR=a("a"),fto=o("DetrFeatureExtractor"),mto=o(" (DETR model)"),gto=l(),Eh=a("li"),coe=a("strong"),hto=o("hubert"),pto=o(" \u2014 "),QR=a("a"),_to=o("Wav2Vec2FeatureExtractor"),uto=o(" (Hubert model)"),bto=l(),Ch=a("li"),foe=a("strong"),vto=o("imagegpt"),Fto=o(" \u2014 "),WR=a("a"),Tto=o("ImageGPTFeatureExtractor"),Mto=o(" (ImageGPT model)"),Eto=l(),wh=a("li"),moe=a("strong"),Cto=o("layoutlmv2"),wto=o(" \u2014 "),HR=a("a"),Ato=o("LayoutLMv2FeatureExtractor"),yto=o(" (LayoutLMv2 model)"),Lto=l(),Ah=a("li"),goe=a("strong"),xto=o("maskformer"),kto=o(" \u2014 "),UR=a("a"),Sto=o("MaskFormerFeatureExtractor"),Rto=o(" (MaskFormer model)"),Bto=l(),yh=a("li"),hoe=a("strong"),Pto=o("perceiver"),$to=o(" \u2014 "),JR=a("a"),Ito=o("PerceiverFeatureExtractor"),qto=o(" (Perceiver model)"),Nto=l(),Lh=a("li"),poe=a("strong"),jto=o("poolformer"),Dto=o(" \u2014 "),YR=a("a"),Gto=o("PoolFormerFeatureExtractor"),Oto=o(" (PoolFormer model)"),Vto=l(),xh=a("li"),_oe=a("strong"),Xto=o("regnet"),zto=o(" \u2014 "),KR=a("a"),Qto=o("ConvNextFeatureExtractor"),Wto=o(" (RegNet model)"),Hto=l(),kh=a("li"),uoe=a("strong"),Uto=o("resnet"),Jto=o(" \u2014 "),ZR=a("a"),Yto=o("ConvNextFeatureExtractor"),Kto=o(" (ResNet model)"),Zto=l(),Sh=a("li"),boe=a("strong"),eao=o("segformer"),oao=o(" \u2014 "),eB=a("a"),rao=o("SegformerFeatureExtractor"),tao=o(" (SegFormer model)"),aao=l(),Rh=a("li"),voe=a("strong"),nao=o("speech_to_text"),sao=o(" \u2014 "),oB=a("a"),lao=o("Speech2TextFeatureExtractor"),iao=o(" (Speech2Text model)"),dao=l(),Bh=a("li"),Foe=a("strong"),cao=o("swin"),fao=o(" \u2014 "),rB=a("a"),mao=o("ViTFeatureExtractor"),gao=o(" (Swin model)"),hao=l(),Ph=a("li"),Toe=a("strong"),pao=o("van"),_ao=o(" \u2014 "),tB=a("a"),uao=o("ConvNextFeatureExtractor"),bao=o(" (VAN model)"),vao=l(),$h=a("li"),Moe=a("strong"),Fao=o("vit"),Tao=o(" \u2014 "),aB=a("a"),Mao=o("ViTFeatureExtractor"),Eao=o(" (ViT model)"),Cao=l(),Ih=a("li"),Eoe=a("strong"),wao=o("vit_mae"),Aao=o(" \u2014 "),nB=a("a"),yao=o("ViTFeatureExtractor"),Lao=o(" (ViTMAE model)"),xao=l(),qh=a("li"),Coe=a("strong"),kao=o("wav2vec2"),Sao=o(" \u2014 "),sB=a("a"),Rao=o("Wav2Vec2FeatureExtractor"),Bao=o(" (Wav2Vec2 model)"),Pao=l(),f(Nh.$$.fragment),$ao=l(),woe=a("p"),Iao=o("Examples:"),qao=l(),f(e3.$$.fragment),Nao=l(),jh=a("div"),f(o3.$$.fragment),jao=l(),Aoe=a("p"),Dao=o("Register a new feature extractor for this class."),WRe=l(),Ji=a("h2"),Dh=a("a"),yoe=a("span"),f(r3.$$.fragment),Gao=l(),Loe=a("span"),Oao=o("AutoProcessor"),HRe=l(),Uo=a("div"),f(t3.$$.fragment),Vao=l(),a3=a("p"),Xao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lB=a("a"),zao=o("AutoProcessor.from_pretrained()"),Qao=o(" class method."),Wao=l(),n3=a("p"),Hao=o("This class cannot be instantiated directly using "),xoe=a("code"),Uao=o("__init__()"),Jao=o(" (throws an error)."),Yao=l(),Ie=a("div"),f(s3.$$.fragment),Kao=l(),koe=a("p"),Zao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),eno=l(),Yi=a("p"),ono=o("The processor class to instantiate is selected based on the "),Soe=a("code"),rno=o("model_type"),tno=o(` property of the config object (either
passed as an argument or loaded from `),Roe=a("code"),ano=o("pretrained_model_name_or_path"),nno=o(" if possible):"),sno=l(),ke=a("ul"),Gh=a("li"),Boe=a("strong"),lno=o("clip"),ino=o(" \u2014 "),iB=a("a"),dno=o("CLIPProcessor"),cno=o(" (CLIP model)"),fno=l(),Oh=a("li"),Poe=a("strong"),mno=o("layoutlmv2"),gno=o(" \u2014 "),dB=a("a"),hno=o("LayoutLMv2Processor"),pno=o(" (LayoutLMv2 model)"),_no=l(),Vh=a("li"),$oe=a("strong"),uno=o("layoutxlm"),bno=o(" \u2014 "),cB=a("a"),vno=o("LayoutXLMProcessor"),Fno=o(" (LayoutXLM model)"),Tno=l(),Xh=a("li"),Ioe=a("strong"),Mno=o("speech_to_text"),Eno=o(" \u2014 "),fB=a("a"),Cno=o("Speech2TextProcessor"),wno=o(" (Speech2Text model)"),Ano=l(),zh=a("li"),qoe=a("strong"),yno=o("speech_to_text_2"),Lno=o(" \u2014 "),mB=a("a"),xno=o("Speech2Text2Processor"),kno=o(" (Speech2Text2 model)"),Sno=l(),Qh=a("li"),Noe=a("strong"),Rno=o("trocr"),Bno=o(" \u2014 "),gB=a("a"),Pno=o("TrOCRProcessor"),$no=o(" (TrOCR model)"),Ino=l(),Wh=a("li"),joe=a("strong"),qno=o("vision-text-dual-encoder"),Nno=o(" \u2014 "),hB=a("a"),jno=o("VisionTextDualEncoderProcessor"),Dno=o(" (VisionTextDualEncoder model)"),Gno=l(),Hh=a("li"),Doe=a("strong"),Ono=o("wav2vec2"),Vno=o(" \u2014 "),pB=a("a"),Xno=o("Wav2Vec2Processor"),zno=o(" (Wav2Vec2 model)"),Qno=l(),f(Uh.$$.fragment),Wno=l(),Goe=a("p"),Hno=o("Examples:"),Uno=l(),f(l3.$$.fragment),Jno=l(),Jh=a("div"),f(i3.$$.fragment),Yno=l(),Ooe=a("p"),Kno=o("Register a new processor for this class."),URe=l(),Ki=a("h2"),Yh=a("a"),Voe=a("span"),f(d3.$$.fragment),Zno=l(),Xoe=a("span"),eso=o("AutoModel"),JRe=l(),Jo=a("div"),f(c3.$$.fragment),oso=l(),Zi=a("p"),rso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_B=a("a"),tso=o("from_pretrained()"),aso=o(" class method or the "),uB=a("a"),nso=o("from_config()"),sso=o(` class
method.`),lso=l(),f3=a("p"),iso=o("This class cannot be instantiated directly using "),zoe=a("code"),dso=o("__init__()"),cso=o(" (throws an error)."),fso=l(),Xr=a("div"),f(m3.$$.fragment),mso=l(),Qoe=a("p"),gso=o("Instantiates one of the base model classes of the library from a configuration."),hso=l(),ed=a("p"),pso=o(`Note:
Loading a model from its configuration file does `),Woe=a("strong"),_so=o("not"),uso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bB=a("a"),bso=o("from_pretrained()"),vso=o(" to load the model weights."),Fso=l(),Hoe=a("p"),Tso=o("Examples:"),Mso=l(),f(g3.$$.fragment),Eso=l(),qe=a("div"),f(h3.$$.fragment),Cso=l(),Uoe=a("p"),wso=o("Instantiate one of the base model classes of the library from a pretrained model."),Aso=l(),Xa=a("p"),yso=o("The model class to instantiate is selected based on the "),Joe=a("code"),Lso=o("model_type"),xso=o(` property of the config object (either
passed as an argument or loaded from `),Yoe=a("code"),kso=o("pretrained_model_name_or_path"),Sso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Koe=a("code"),Rso=o("pretrained_model_name_or_path"),Bso=o(":"),Pso=l(),T=a("ul"),Kh=a("li"),Zoe=a("strong"),$so=o("albert"),Iso=o(" \u2014 "),vB=a("a"),qso=o("AlbertModel"),Nso=o(" (ALBERT model)"),jso=l(),Zh=a("li"),ere=a("strong"),Dso=o("bart"),Gso=o(" \u2014 "),FB=a("a"),Oso=o("BartModel"),Vso=o(" (BART model)"),Xso=l(),ep=a("li"),ore=a("strong"),zso=o("beit"),Qso=o(" \u2014 "),TB=a("a"),Wso=o("BeitModel"),Hso=o(" (BEiT model)"),Uso=l(),op=a("li"),rre=a("strong"),Jso=o("bert"),Yso=o(" \u2014 "),MB=a("a"),Kso=o("BertModel"),Zso=o(" (BERT model)"),elo=l(),rp=a("li"),tre=a("strong"),olo=o("bert-generation"),rlo=o(" \u2014 "),EB=a("a"),tlo=o("BertGenerationEncoder"),alo=o(" (Bert Generation model)"),nlo=l(),tp=a("li"),are=a("strong"),slo=o("big_bird"),llo=o(" \u2014 "),CB=a("a"),ilo=o("BigBirdModel"),dlo=o(" (BigBird model)"),clo=l(),ap=a("li"),nre=a("strong"),flo=o("bigbird_pegasus"),mlo=o(" \u2014 "),wB=a("a"),glo=o("BigBirdPegasusModel"),hlo=o(" (BigBirdPegasus model)"),plo=l(),np=a("li"),sre=a("strong"),_lo=o("blenderbot"),ulo=o(" \u2014 "),AB=a("a"),blo=o("BlenderbotModel"),vlo=o(" (Blenderbot model)"),Flo=l(),sp=a("li"),lre=a("strong"),Tlo=o("blenderbot-small"),Mlo=o(" \u2014 "),yB=a("a"),Elo=o("BlenderbotSmallModel"),Clo=o(" (BlenderbotSmall model)"),wlo=l(),lp=a("li"),ire=a("strong"),Alo=o("camembert"),ylo=o(" \u2014 "),LB=a("a"),Llo=o("CamembertModel"),xlo=o(" (CamemBERT model)"),klo=l(),ip=a("li"),dre=a("strong"),Slo=o("canine"),Rlo=o(" \u2014 "),xB=a("a"),Blo=o("CanineModel"),Plo=o(" (Canine model)"),$lo=l(),dp=a("li"),cre=a("strong"),Ilo=o("clip"),qlo=o(" \u2014 "),kB=a("a"),Nlo=o("CLIPModel"),jlo=o(" (CLIP model)"),Dlo=l(),cp=a("li"),fre=a("strong"),Glo=o("convbert"),Olo=o(" \u2014 "),SB=a("a"),Vlo=o("ConvBertModel"),Xlo=o(" (ConvBERT model)"),zlo=l(),fp=a("li"),mre=a("strong"),Qlo=o("convnext"),Wlo=o(" \u2014 "),RB=a("a"),Hlo=o("ConvNextModel"),Ulo=o(" (ConvNext model)"),Jlo=l(),mp=a("li"),gre=a("strong"),Ylo=o("ctrl"),Klo=o(" \u2014 "),BB=a("a"),Zlo=o("CTRLModel"),eio=o(" (CTRL model)"),oio=l(),gp=a("li"),hre=a("strong"),rio=o("data2vec-audio"),tio=o(" \u2014 "),PB=a("a"),aio=o("Data2VecAudioModel"),nio=o(" (Data2VecAudio model)"),sio=l(),hp=a("li"),pre=a("strong"),lio=o("data2vec-text"),iio=o(" \u2014 "),$B=a("a"),dio=o("Data2VecTextModel"),cio=o(" (Data2VecText model)"),fio=l(),pp=a("li"),_re=a("strong"),mio=o("data2vec-vision"),gio=o(" \u2014 "),IB=a("a"),hio=o("Data2VecVisionModel"),pio=o(" (Data2VecVision model)"),_io=l(),_p=a("li"),ure=a("strong"),uio=o("deberta"),bio=o(" \u2014 "),qB=a("a"),vio=o("DebertaModel"),Fio=o(" (DeBERTa model)"),Tio=l(),up=a("li"),bre=a("strong"),Mio=o("deberta-v2"),Eio=o(" \u2014 "),NB=a("a"),Cio=o("DebertaV2Model"),wio=o(" (DeBERTa-v2 model)"),Aio=l(),bp=a("li"),vre=a("strong"),yio=o("decision_transformer"),Lio=o(" \u2014 "),jB=a("a"),xio=o("DecisionTransformerModel"),kio=o(" (Decision Transformer model)"),Sio=l(),vp=a("li"),Fre=a("strong"),Rio=o("deit"),Bio=o(" \u2014 "),DB=a("a"),Pio=o("DeiTModel"),$io=o(" (DeiT model)"),Iio=l(),Fp=a("li"),Tre=a("strong"),qio=o("detr"),Nio=o(" \u2014 "),GB=a("a"),jio=o("DetrModel"),Dio=o(" (DETR model)"),Gio=l(),Tp=a("li"),Mre=a("strong"),Oio=o("distilbert"),Vio=o(" \u2014 "),OB=a("a"),Xio=o("DistilBertModel"),zio=o(" (DistilBERT model)"),Qio=l(),Mp=a("li"),Ere=a("strong"),Wio=o("dpr"),Hio=o(" \u2014 "),VB=a("a"),Uio=o("DPRQuestionEncoder"),Jio=o(" (DPR model)"),Yio=l(),Ep=a("li"),Cre=a("strong"),Kio=o("dpt"),Zio=o(" \u2014 "),XB=a("a"),edo=o("DPTModel"),odo=o(" (DPT model)"),rdo=l(),Cp=a("li"),wre=a("strong"),tdo=o("electra"),ado=o(" \u2014 "),zB=a("a"),ndo=o("ElectraModel"),sdo=o(" (ELECTRA model)"),ldo=l(),wp=a("li"),Are=a("strong"),ido=o("flaubert"),ddo=o(" \u2014 "),QB=a("a"),cdo=o("FlaubertModel"),fdo=o(" (FlauBERT model)"),mdo=l(),Ap=a("li"),yre=a("strong"),gdo=o("fnet"),hdo=o(" \u2014 "),WB=a("a"),pdo=o("FNetModel"),_do=o(" (FNet model)"),udo=l(),yp=a("li"),Lre=a("strong"),bdo=o("fsmt"),vdo=o(" \u2014 "),HB=a("a"),Fdo=o("FSMTModel"),Tdo=o(" (FairSeq Machine-Translation model)"),Mdo=l(),Gs=a("li"),xre=a("strong"),Edo=o("funnel"),Cdo=o(" \u2014 "),UB=a("a"),wdo=o("FunnelModel"),Ado=o(" or "),JB=a("a"),ydo=o("FunnelBaseModel"),Ldo=o(" (Funnel Transformer model)"),xdo=l(),Lp=a("li"),kre=a("strong"),kdo=o("glpn"),Sdo=o(" \u2014 "),YB=a("a"),Rdo=o("GLPNModel"),Bdo=o(" (GLPN model)"),Pdo=l(),xp=a("li"),Sre=a("strong"),$do=o("gpt2"),Ido=o(" \u2014 "),KB=a("a"),qdo=o("GPT2Model"),Ndo=o(" (OpenAI GPT-2 model)"),jdo=l(),kp=a("li"),Rre=a("strong"),Ddo=o("gpt_neo"),Gdo=o(" \u2014 "),ZB=a("a"),Odo=o("GPTNeoModel"),Vdo=o(" (GPT Neo model)"),Xdo=l(),Sp=a("li"),Bre=a("strong"),zdo=o("gptj"),Qdo=o(" \u2014 "),eP=a("a"),Wdo=o("GPTJModel"),Hdo=o(" (GPT-J model)"),Udo=l(),Rp=a("li"),Pre=a("strong"),Jdo=o("hubert"),Ydo=o(" \u2014 "),oP=a("a"),Kdo=o("HubertModel"),Zdo=o(" (Hubert model)"),eco=l(),Bp=a("li"),$re=a("strong"),oco=o("ibert"),rco=o(" \u2014 "),rP=a("a"),tco=o("IBertModel"),aco=o(" (I-BERT model)"),nco=l(),Pp=a("li"),Ire=a("strong"),sco=o("imagegpt"),lco=o(" \u2014 "),tP=a("a"),ico=o("ImageGPTModel"),dco=o(" (ImageGPT model)"),cco=l(),$p=a("li"),qre=a("strong"),fco=o("layoutlm"),mco=o(" \u2014 "),aP=a("a"),gco=o("LayoutLMModel"),hco=o(" (LayoutLM model)"),pco=l(),Ip=a("li"),Nre=a("strong"),_co=o("layoutlmv2"),uco=o(" \u2014 "),nP=a("a"),bco=o("LayoutLMv2Model"),vco=o(" (LayoutLMv2 model)"),Fco=l(),qp=a("li"),jre=a("strong"),Tco=o("led"),Mco=o(" \u2014 "),sP=a("a"),Eco=o("LEDModel"),Cco=o(" (LED model)"),wco=l(),Np=a("li"),Dre=a("strong"),Aco=o("longformer"),yco=o(" \u2014 "),lP=a("a"),Lco=o("LongformerModel"),xco=o(" (Longformer model)"),kco=l(),jp=a("li"),Gre=a("strong"),Sco=o("luke"),Rco=o(" \u2014 "),iP=a("a"),Bco=o("LukeModel"),Pco=o(" (LUKE model)"),$co=l(),Dp=a("li"),Ore=a("strong"),Ico=o("lxmert"),qco=o(" \u2014 "),dP=a("a"),Nco=o("LxmertModel"),jco=o(" (LXMERT model)"),Dco=l(),Gp=a("li"),Vre=a("strong"),Gco=o("m2m_100"),Oco=o(" \u2014 "),cP=a("a"),Vco=o("M2M100Model"),Xco=o(" (M2M100 model)"),zco=l(),Op=a("li"),Xre=a("strong"),Qco=o("marian"),Wco=o(" \u2014 "),fP=a("a"),Hco=o("MarianModel"),Uco=o(" (Marian model)"),Jco=l(),Vp=a("li"),zre=a("strong"),Yco=o("maskformer"),Kco=o(" \u2014 "),mP=a("a"),Zco=o("MaskFormerModel"),efo=o(" (MaskFormer model)"),ofo=l(),Xp=a("li"),Qre=a("strong"),rfo=o("mbart"),tfo=o(" \u2014 "),gP=a("a"),afo=o("MBartModel"),nfo=o(" (mBART model)"),sfo=l(),zp=a("li"),Wre=a("strong"),lfo=o("megatron-bert"),ifo=o(" \u2014 "),hP=a("a"),dfo=o("MegatronBertModel"),cfo=o(" (MegatronBert model)"),ffo=l(),Qp=a("li"),Hre=a("strong"),mfo=o("mobilebert"),gfo=o(" \u2014 "),pP=a("a"),hfo=o("MobileBertModel"),pfo=o(" (MobileBERT model)"),_fo=l(),Wp=a("li"),Ure=a("strong"),ufo=o("mpnet"),bfo=o(" \u2014 "),_P=a("a"),vfo=o("MPNetModel"),Ffo=o(" (MPNet model)"),Tfo=l(),Hp=a("li"),Jre=a("strong"),Mfo=o("mt5"),Efo=o(" \u2014 "),uP=a("a"),Cfo=o("MT5Model"),wfo=o(" (mT5 model)"),Afo=l(),Up=a("li"),Yre=a("strong"),yfo=o("nystromformer"),Lfo=o(" \u2014 "),bP=a("a"),xfo=o("NystromformerModel"),kfo=o(" (Nystromformer model)"),Sfo=l(),Jp=a("li"),Kre=a("strong"),Rfo=o("openai-gpt"),Bfo=o(" \u2014 "),vP=a("a"),Pfo=o("OpenAIGPTModel"),$fo=o(" (OpenAI GPT model)"),Ifo=l(),Yp=a("li"),Zre=a("strong"),qfo=o("pegasus"),Nfo=o(" \u2014 "),FP=a("a"),jfo=o("PegasusModel"),Dfo=o(" (Pegasus model)"),Gfo=l(),Kp=a("li"),ete=a("strong"),Ofo=o("perceiver"),Vfo=o(" \u2014 "),TP=a("a"),Xfo=o("PerceiverModel"),zfo=o(" (Perceiver model)"),Qfo=l(),Zp=a("li"),ote=a("strong"),Wfo=o("plbart"),Hfo=o(" \u2014 "),MP=a("a"),Ufo=o("PLBartModel"),Jfo=o(" (PLBart model)"),Yfo=l(),e_=a("li"),rte=a("strong"),Kfo=o("poolformer"),Zfo=o(" \u2014 "),EP=a("a"),emo=o("PoolFormerModel"),omo=o(" (PoolFormer model)"),rmo=l(),o_=a("li"),tte=a("strong"),tmo=o("prophetnet"),amo=o(" \u2014 "),CP=a("a"),nmo=o("ProphetNetModel"),smo=o(" (ProphetNet model)"),lmo=l(),r_=a("li"),ate=a("strong"),imo=o("qdqbert"),dmo=o(" \u2014 "),wP=a("a"),cmo=o("QDQBertModel"),fmo=o(" (QDQBert model)"),mmo=l(),t_=a("li"),nte=a("strong"),gmo=o("reformer"),hmo=o(" \u2014 "),AP=a("a"),pmo=o("ReformerModel"),_mo=o(" (Reformer model)"),umo=l(),a_=a("li"),ste=a("strong"),bmo=o("regnet"),vmo=o(" \u2014 "),yP=a("a"),Fmo=o("RegNetModel"),Tmo=o(" (RegNet model)"),Mmo=l(),n_=a("li"),lte=a("strong"),Emo=o("rembert"),Cmo=o(" \u2014 "),LP=a("a"),wmo=o("RemBertModel"),Amo=o(" (RemBERT model)"),ymo=l(),s_=a("li"),ite=a("strong"),Lmo=o("resnet"),xmo=o(" \u2014 "),xP=a("a"),kmo=o("ResNetModel"),Smo=o(" (ResNet model)"),Rmo=l(),l_=a("li"),dte=a("strong"),Bmo=o("retribert"),Pmo=o(" \u2014 "),kP=a("a"),$mo=o("RetriBertModel"),Imo=o(" (RetriBERT model)"),qmo=l(),i_=a("li"),cte=a("strong"),Nmo=o("roberta"),jmo=o(" \u2014 "),SP=a("a"),Dmo=o("RobertaModel"),Gmo=o(" (RoBERTa model)"),Omo=l(),d_=a("li"),fte=a("strong"),Vmo=o("roformer"),Xmo=o(" \u2014 "),RP=a("a"),zmo=o("RoFormerModel"),Qmo=o(" (RoFormer model)"),Wmo=l(),c_=a("li"),mte=a("strong"),Hmo=o("segformer"),Umo=o(" \u2014 "),BP=a("a"),Jmo=o("SegformerModel"),Ymo=o(" (SegFormer model)"),Kmo=l(),f_=a("li"),gte=a("strong"),Zmo=o("sew"),ego=o(" \u2014 "),PP=a("a"),ogo=o("SEWModel"),rgo=o(" (SEW model)"),tgo=l(),m_=a("li"),hte=a("strong"),ago=o("sew-d"),ngo=o(" \u2014 "),$P=a("a"),sgo=o("SEWDModel"),lgo=o(" (SEW-D model)"),igo=l(),g_=a("li"),pte=a("strong"),dgo=o("speech_to_text"),cgo=o(" \u2014 "),IP=a("a"),fgo=o("Speech2TextModel"),mgo=o(" (Speech2Text model)"),ggo=l(),h_=a("li"),_te=a("strong"),hgo=o("splinter"),pgo=o(" \u2014 "),qP=a("a"),_go=o("SplinterModel"),ugo=o(" (Splinter model)"),bgo=l(),p_=a("li"),ute=a("strong"),vgo=o("squeezebert"),Fgo=o(" \u2014 "),NP=a("a"),Tgo=o("SqueezeBertModel"),Mgo=o(" (SqueezeBERT model)"),Ego=l(),__=a("li"),bte=a("strong"),Cgo=o("swin"),wgo=o(" \u2014 "),jP=a("a"),Ago=o("SwinModel"),ygo=o(" (Swin model)"),Lgo=l(),u_=a("li"),vte=a("strong"),xgo=o("t5"),kgo=o(" \u2014 "),DP=a("a"),Sgo=o("T5Model"),Rgo=o(" (T5 model)"),Bgo=l(),b_=a("li"),Fte=a("strong"),Pgo=o("tapas"),$go=o(" \u2014 "),GP=a("a"),Igo=o("TapasModel"),qgo=o(" (TAPAS model)"),Ngo=l(),v_=a("li"),Tte=a("strong"),jgo=o("transfo-xl"),Dgo=o(" \u2014 "),OP=a("a"),Ggo=o("TransfoXLModel"),Ogo=o(" (Transformer-XL model)"),Vgo=l(),F_=a("li"),Mte=a("strong"),Xgo=o("unispeech"),zgo=o(" \u2014 "),VP=a("a"),Qgo=o("UniSpeechModel"),Wgo=o(" (UniSpeech model)"),Hgo=l(),T_=a("li"),Ete=a("strong"),Ugo=o("unispeech-sat"),Jgo=o(" \u2014 "),XP=a("a"),Ygo=o("UniSpeechSatModel"),Kgo=o(" (UniSpeechSat model)"),Zgo=l(),M_=a("li"),Cte=a("strong"),eho=o("van"),oho=o(" \u2014 "),zP=a("a"),rho=o("VanModel"),tho=o(" (VAN model)"),aho=l(),E_=a("li"),wte=a("strong"),nho=o("vilt"),sho=o(" \u2014 "),QP=a("a"),lho=o("ViltModel"),iho=o(" (ViLT model)"),dho=l(),C_=a("li"),Ate=a("strong"),cho=o("vision-text-dual-encoder"),fho=o(" \u2014 "),WP=a("a"),mho=o("VisionTextDualEncoderModel"),gho=o(" (VisionTextDualEncoder model)"),hho=l(),w_=a("li"),yte=a("strong"),pho=o("visual_bert"),_ho=o(" \u2014 "),HP=a("a"),uho=o("VisualBertModel"),bho=o(" (VisualBert model)"),vho=l(),A_=a("li"),Lte=a("strong"),Fho=o("vit"),Tho=o(" \u2014 "),UP=a("a"),Mho=o("ViTModel"),Eho=o(" (ViT model)"),Cho=l(),y_=a("li"),xte=a("strong"),who=o("vit_mae"),Aho=o(" \u2014 "),JP=a("a"),yho=o("ViTMAEModel"),Lho=o(" (ViTMAE model)"),xho=l(),L_=a("li"),kte=a("strong"),kho=o("wav2vec2"),Sho=o(" \u2014 "),YP=a("a"),Rho=o("Wav2Vec2Model"),Bho=o(" (Wav2Vec2 model)"),Pho=l(),x_=a("li"),Ste=a("strong"),$ho=o("wavlm"),Iho=o(" \u2014 "),KP=a("a"),qho=o("WavLMModel"),Nho=o(" (WavLM model)"),jho=l(),k_=a("li"),Rte=a("strong"),Dho=o("xglm"),Gho=o(" \u2014 "),ZP=a("a"),Oho=o("XGLMModel"),Vho=o(" (XGLM model)"),Xho=l(),S_=a("li"),Bte=a("strong"),zho=o("xlm"),Qho=o(" \u2014 "),e$=a("a"),Who=o("XLMModel"),Hho=o(" (XLM model)"),Uho=l(),R_=a("li"),Pte=a("strong"),Jho=o("xlm-prophetnet"),Yho=o(" \u2014 "),o$=a("a"),Kho=o("XLMProphetNetModel"),Zho=o(" (XLMProphetNet model)"),epo=l(),B_=a("li"),$te=a("strong"),opo=o("xlm-roberta"),rpo=o(" \u2014 "),r$=a("a"),tpo=o("XLMRobertaModel"),apo=o(" (XLM-RoBERTa model)"),npo=l(),P_=a("li"),Ite=a("strong"),spo=o("xlm-roberta-xl"),lpo=o(" \u2014 "),t$=a("a"),ipo=o("XLMRobertaXLModel"),dpo=o(" (XLM-RoBERTa-XL model)"),cpo=l(),$_=a("li"),qte=a("strong"),fpo=o("xlnet"),mpo=o(" \u2014 "),a$=a("a"),gpo=o("XLNetModel"),hpo=o(" (XLNet model)"),ppo=l(),I_=a("li"),Nte=a("strong"),_po=o("yoso"),upo=o(" \u2014 "),n$=a("a"),bpo=o("YosoModel"),vpo=o(" (YOSO model)"),Fpo=l(),q_=a("p"),Tpo=o("The model is set in evaluation mode by default using "),jte=a("code"),Mpo=o("model.eval()"),Epo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dte=a("code"),Cpo=o("model.train()"),wpo=l(),Gte=a("p"),Apo=o("Examples:"),ypo=l(),f(p3.$$.fragment),YRe=l(),od=a("h2"),N_=a("a"),Ote=a("span"),f(_3.$$.fragment),Lpo=l(),Vte=a("span"),xpo=o("AutoModelForPreTraining"),KRe=l(),Yo=a("div"),f(u3.$$.fragment),kpo=l(),rd=a("p"),Spo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),s$=a("a"),Rpo=o("from_pretrained()"),Bpo=o(" class method or the "),l$=a("a"),Ppo=o("from_config()"),$po=o(` class
method.`),Ipo=l(),b3=a("p"),qpo=o("This class cannot be instantiated directly using "),Xte=a("code"),Npo=o("__init__()"),jpo=o(" (throws an error)."),Dpo=l(),zr=a("div"),f(v3.$$.fragment),Gpo=l(),zte=a("p"),Opo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Vpo=l(),td=a("p"),Xpo=o(`Note:
Loading a model from its configuration file does `),Qte=a("strong"),zpo=o("not"),Qpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),i$=a("a"),Wpo=o("from_pretrained()"),Hpo=o(" to load the model weights."),Upo=l(),Wte=a("p"),Jpo=o("Examples:"),Ypo=l(),f(F3.$$.fragment),Kpo=l(),Ne=a("div"),f(T3.$$.fragment),Zpo=l(),Hte=a("p"),e_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),o_o=l(),za=a("p"),r_o=o("The model class to instantiate is selected based on the "),Ute=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Jte=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=a("code"),l_o=o("pretrained_model_name_or_path"),i_o=o(":"),d_o=l(),S=a("ul"),j_=a("li"),Kte=a("strong"),c_o=o("albert"),f_o=o(" \u2014 "),d$=a("a"),m_o=o("AlbertForPreTraining"),g_o=o(" (ALBERT model)"),h_o=l(),D_=a("li"),Zte=a("strong"),p_o=o("bart"),__o=o(" \u2014 "),c$=a("a"),u_o=o("BartForConditionalGeneration"),b_o=o(" (BART model)"),v_o=l(),G_=a("li"),eae=a("strong"),F_o=o("bert"),T_o=o(" \u2014 "),f$=a("a"),M_o=o("BertForPreTraining"),E_o=o(" (BERT model)"),C_o=l(),O_=a("li"),oae=a("strong"),w_o=o("big_bird"),A_o=o(" \u2014 "),m$=a("a"),y_o=o("BigBirdForPreTraining"),L_o=o(" (BigBird model)"),x_o=l(),V_=a("li"),rae=a("strong"),k_o=o("camembert"),S_o=o(" \u2014 "),g$=a("a"),R_o=o("CamembertForMaskedLM"),B_o=o(" (CamemBERT model)"),P_o=l(),X_=a("li"),tae=a("strong"),$_o=o("ctrl"),I_o=o(" \u2014 "),h$=a("a"),q_o=o("CTRLLMHeadModel"),N_o=o(" (CTRL model)"),j_o=l(),z_=a("li"),aae=a("strong"),D_o=o("data2vec-text"),G_o=o(" \u2014 "),p$=a("a"),O_o=o("Data2VecTextForMaskedLM"),V_o=o(" (Data2VecText model)"),X_o=l(),Q_=a("li"),nae=a("strong"),z_o=o("deberta"),Q_o=o(" \u2014 "),_$=a("a"),W_o=o("DebertaForMaskedLM"),H_o=o(" (DeBERTa model)"),U_o=l(),W_=a("li"),sae=a("strong"),J_o=o("deberta-v2"),Y_o=o(" \u2014 "),u$=a("a"),K_o=o("DebertaV2ForMaskedLM"),Z_o=o(" (DeBERTa-v2 model)"),euo=l(),H_=a("li"),lae=a("strong"),ouo=o("distilbert"),ruo=o(" \u2014 "),b$=a("a"),tuo=o("DistilBertForMaskedLM"),auo=o(" (DistilBERT model)"),nuo=l(),U_=a("li"),iae=a("strong"),suo=o("electra"),luo=o(" \u2014 "),v$=a("a"),iuo=o("ElectraForPreTraining"),duo=o(" (ELECTRA model)"),cuo=l(),J_=a("li"),dae=a("strong"),fuo=o("flaubert"),muo=o(" \u2014 "),F$=a("a"),guo=o("FlaubertWithLMHeadModel"),huo=o(" (FlauBERT model)"),puo=l(),Y_=a("li"),cae=a("strong"),_uo=o("fnet"),uuo=o(" \u2014 "),T$=a("a"),buo=o("FNetForPreTraining"),vuo=o(" (FNet model)"),Fuo=l(),K_=a("li"),fae=a("strong"),Tuo=o("fsmt"),Muo=o(" \u2014 "),M$=a("a"),Euo=o("FSMTForConditionalGeneration"),Cuo=o(" (FairSeq Machine-Translation model)"),wuo=l(),Z_=a("li"),mae=a("strong"),Auo=o("funnel"),yuo=o(" \u2014 "),E$=a("a"),Luo=o("FunnelForPreTraining"),xuo=o(" (Funnel Transformer model)"),kuo=l(),eu=a("li"),gae=a("strong"),Suo=o("gpt2"),Ruo=o(" \u2014 "),C$=a("a"),Buo=o("GPT2LMHeadModel"),Puo=o(" (OpenAI GPT-2 model)"),$uo=l(),ou=a("li"),hae=a("strong"),Iuo=o("ibert"),quo=o(" \u2014 "),w$=a("a"),Nuo=o("IBertForMaskedLM"),juo=o(" (I-BERT model)"),Duo=l(),ru=a("li"),pae=a("strong"),Guo=o("layoutlm"),Ouo=o(" \u2014 "),A$=a("a"),Vuo=o("LayoutLMForMaskedLM"),Xuo=o(" (LayoutLM model)"),zuo=l(),tu=a("li"),_ae=a("strong"),Quo=o("longformer"),Wuo=o(" \u2014 "),y$=a("a"),Huo=o("LongformerForMaskedLM"),Uuo=o(" (Longformer model)"),Juo=l(),au=a("li"),uae=a("strong"),Yuo=o("lxmert"),Kuo=o(" \u2014 "),L$=a("a"),Zuo=o("LxmertForPreTraining"),e6o=o(" (LXMERT model)"),o6o=l(),nu=a("li"),bae=a("strong"),r6o=o("megatron-bert"),t6o=o(" \u2014 "),x$=a("a"),a6o=o("MegatronBertForPreTraining"),n6o=o(" (MegatronBert model)"),s6o=l(),su=a("li"),vae=a("strong"),l6o=o("mobilebert"),i6o=o(" \u2014 "),k$=a("a"),d6o=o("MobileBertForPreTraining"),c6o=o(" (MobileBERT model)"),f6o=l(),lu=a("li"),Fae=a("strong"),m6o=o("mpnet"),g6o=o(" \u2014 "),S$=a("a"),h6o=o("MPNetForMaskedLM"),p6o=o(" (MPNet model)"),_6o=l(),iu=a("li"),Tae=a("strong"),u6o=o("openai-gpt"),b6o=o(" \u2014 "),R$=a("a"),v6o=o("OpenAIGPTLMHeadModel"),F6o=o(" (OpenAI GPT model)"),T6o=l(),du=a("li"),Mae=a("strong"),M6o=o("retribert"),E6o=o(" \u2014 "),B$=a("a"),C6o=o("RetriBertModel"),w6o=o(" (RetriBERT model)"),A6o=l(),cu=a("li"),Eae=a("strong"),y6o=o("roberta"),L6o=o(" \u2014 "),P$=a("a"),x6o=o("RobertaForMaskedLM"),k6o=o(" (RoBERTa model)"),S6o=l(),fu=a("li"),Cae=a("strong"),R6o=o("squeezebert"),B6o=o(" \u2014 "),$$=a("a"),P6o=o("SqueezeBertForMaskedLM"),$6o=o(" (SqueezeBERT model)"),I6o=l(),mu=a("li"),wae=a("strong"),q6o=o("t5"),N6o=o(" \u2014 "),I$=a("a"),j6o=o("T5ForConditionalGeneration"),D6o=o(" (T5 model)"),G6o=l(),gu=a("li"),Aae=a("strong"),O6o=o("tapas"),V6o=o(" \u2014 "),q$=a("a"),X6o=o("TapasForMaskedLM"),z6o=o(" (TAPAS model)"),Q6o=l(),hu=a("li"),yae=a("strong"),W6o=o("transfo-xl"),H6o=o(" \u2014 "),N$=a("a"),U6o=o("TransfoXLLMHeadModel"),J6o=o(" (Transformer-XL model)"),Y6o=l(),pu=a("li"),Lae=a("strong"),K6o=o("unispeech"),Z6o=o(" \u2014 "),j$=a("a"),e1o=o("UniSpeechForPreTraining"),o1o=o(" (UniSpeech model)"),r1o=l(),_u=a("li"),xae=a("strong"),t1o=o("unispeech-sat"),a1o=o(" \u2014 "),D$=a("a"),n1o=o("UniSpeechSatForPreTraining"),s1o=o(" (UniSpeechSat model)"),l1o=l(),uu=a("li"),kae=a("strong"),i1o=o("visual_bert"),d1o=o(" \u2014 "),G$=a("a"),c1o=o("VisualBertForPreTraining"),f1o=o(" (VisualBert model)"),m1o=l(),bu=a("li"),Sae=a("strong"),g1o=o("vit_mae"),h1o=o(" \u2014 "),O$=a("a"),p1o=o("ViTMAEForPreTraining"),_1o=o(" (ViTMAE model)"),u1o=l(),vu=a("li"),Rae=a("strong"),b1o=o("wav2vec2"),v1o=o(" \u2014 "),V$=a("a"),F1o=o("Wav2Vec2ForPreTraining"),T1o=o(" (Wav2Vec2 model)"),M1o=l(),Fu=a("li"),Bae=a("strong"),E1o=o("xlm"),C1o=o(" \u2014 "),X$=a("a"),w1o=o("XLMWithLMHeadModel"),A1o=o(" (XLM model)"),y1o=l(),Tu=a("li"),Pae=a("strong"),L1o=o("xlm-roberta"),x1o=o(" \u2014 "),z$=a("a"),k1o=o("XLMRobertaForMaskedLM"),S1o=o(" (XLM-RoBERTa model)"),R1o=l(),Mu=a("li"),$ae=a("strong"),B1o=o("xlm-roberta-xl"),P1o=o(" \u2014 "),Q$=a("a"),$1o=o("XLMRobertaXLForMaskedLM"),I1o=o(" (XLM-RoBERTa-XL model)"),q1o=l(),Eu=a("li"),Iae=a("strong"),N1o=o("xlnet"),j1o=o(" \u2014 "),W$=a("a"),D1o=o("XLNetLMHeadModel"),G1o=o(" (XLNet model)"),O1o=l(),Cu=a("p"),V1o=o("The model is set in evaluation mode by default using "),qae=a("code"),X1o=o("model.eval()"),z1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nae=a("code"),Q1o=o("model.train()"),W1o=l(),jae=a("p"),H1o=o("Examples:"),U1o=l(),f(M3.$$.fragment),ZRe=l(),ad=a("h2"),wu=a("a"),Dae=a("span"),f(E3.$$.fragment),J1o=l(),Gae=a("span"),Y1o=o("AutoModelForCausalLM"),eBe=l(),Ko=a("div"),f(C3.$$.fragment),K1o=l(),nd=a("p"),Z1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),H$=a("a"),ebo=o("from_pretrained()"),obo=o(" class method or the "),U$=a("a"),rbo=o("from_config()"),tbo=o(` class
method.`),abo=l(),w3=a("p"),nbo=o("This class cannot be instantiated directly using "),Oae=a("code"),sbo=o("__init__()"),lbo=o(" (throws an error)."),ibo=l(),Qr=a("div"),f(A3.$$.fragment),dbo=l(),Vae=a("p"),cbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fbo=l(),sd=a("p"),mbo=o(`Note:
Loading a model from its configuration file does `),Xae=a("strong"),gbo=o("not"),hbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),J$=a("a"),pbo=o("from_pretrained()"),_bo=o(" to load the model weights."),ubo=l(),zae=a("p"),bbo=o("Examples:"),vbo=l(),f(y3.$$.fragment),Fbo=l(),je=a("div"),f(L3.$$.fragment),Tbo=l(),Qae=a("p"),Mbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ebo=l(),Qa=a("p"),Cbo=o("The model class to instantiate is selected based on the "),Wae=a("code"),wbo=o("model_type"),Abo=o(` property of the config object (either
passed as an argument or loaded from `),Hae=a("code"),ybo=o("pretrained_model_name_or_path"),Lbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uae=a("code"),xbo=o("pretrained_model_name_or_path"),kbo=o(":"),Sbo=l(),$=a("ul"),Au=a("li"),Jae=a("strong"),Rbo=o("bart"),Bbo=o(" \u2014 "),Y$=a("a"),Pbo=o("BartForCausalLM"),$bo=o(" (BART model)"),Ibo=l(),yu=a("li"),Yae=a("strong"),qbo=o("bert"),Nbo=o(" \u2014 "),K$=a("a"),jbo=o("BertLMHeadModel"),Dbo=o(" (BERT model)"),Gbo=l(),Lu=a("li"),Kae=a("strong"),Obo=o("bert-generation"),Vbo=o(" \u2014 "),Z$=a("a"),Xbo=o("BertGenerationDecoder"),zbo=o(" (Bert Generation model)"),Qbo=l(),xu=a("li"),Zae=a("strong"),Wbo=o("big_bird"),Hbo=o(" \u2014 "),eI=a("a"),Ubo=o("BigBirdForCausalLM"),Jbo=o(" (BigBird model)"),Ybo=l(),ku=a("li"),ene=a("strong"),Kbo=o("bigbird_pegasus"),Zbo=o(" \u2014 "),oI=a("a"),e2o=o("BigBirdPegasusForCausalLM"),o2o=o(" (BigBirdPegasus model)"),r2o=l(),Su=a("li"),one=a("strong"),t2o=o("blenderbot"),a2o=o(" \u2014 "),rI=a("a"),n2o=o("BlenderbotForCausalLM"),s2o=o(" (Blenderbot model)"),l2o=l(),Ru=a("li"),rne=a("strong"),i2o=o("blenderbot-small"),d2o=o(" \u2014 "),tI=a("a"),c2o=o("BlenderbotSmallForCausalLM"),f2o=o(" (BlenderbotSmall model)"),m2o=l(),Bu=a("li"),tne=a("strong"),g2o=o("camembert"),h2o=o(" \u2014 "),aI=a("a"),p2o=o("CamembertForCausalLM"),_2o=o(" (CamemBERT model)"),u2o=l(),Pu=a("li"),ane=a("strong"),b2o=o("ctrl"),v2o=o(" \u2014 "),nI=a("a"),F2o=o("CTRLLMHeadModel"),T2o=o(" (CTRL model)"),M2o=l(),$u=a("li"),nne=a("strong"),E2o=o("data2vec-text"),C2o=o(" \u2014 "),sI=a("a"),w2o=o("Data2VecTextForCausalLM"),A2o=o(" (Data2VecText model)"),y2o=l(),Iu=a("li"),sne=a("strong"),L2o=o("electra"),x2o=o(" \u2014 "),lI=a("a"),k2o=o("ElectraForCausalLM"),S2o=o(" (ELECTRA model)"),R2o=l(),qu=a("li"),lne=a("strong"),B2o=o("gpt2"),P2o=o(" \u2014 "),iI=a("a"),$2o=o("GPT2LMHeadModel"),I2o=o(" (OpenAI GPT-2 model)"),q2o=l(),Nu=a("li"),ine=a("strong"),N2o=o("gpt_neo"),j2o=o(" \u2014 "),dI=a("a"),D2o=o("GPTNeoForCausalLM"),G2o=o(" (GPT Neo model)"),O2o=l(),ju=a("li"),dne=a("strong"),V2o=o("gptj"),X2o=o(" \u2014 "),cI=a("a"),z2o=o("GPTJForCausalLM"),Q2o=o(" (GPT-J model)"),W2o=l(),Du=a("li"),cne=a("strong"),H2o=o("marian"),U2o=o(" \u2014 "),fI=a("a"),J2o=o("MarianForCausalLM"),Y2o=o(" (Marian model)"),K2o=l(),Gu=a("li"),fne=a("strong"),Z2o=o("mbart"),evo=o(" \u2014 "),mI=a("a"),ovo=o("MBartForCausalLM"),rvo=o(" (mBART model)"),tvo=l(),Ou=a("li"),mne=a("strong"),avo=o("megatron-bert"),nvo=o(" \u2014 "),gI=a("a"),svo=o("MegatronBertForCausalLM"),lvo=o(" (MegatronBert model)"),ivo=l(),Vu=a("li"),gne=a("strong"),dvo=o("openai-gpt"),cvo=o(" \u2014 "),hI=a("a"),fvo=o("OpenAIGPTLMHeadModel"),mvo=o(" (OpenAI GPT model)"),gvo=l(),Xu=a("li"),hne=a("strong"),hvo=o("pegasus"),pvo=o(" \u2014 "),pI=a("a"),_vo=o("PegasusForCausalLM"),uvo=o(" (Pegasus model)"),bvo=l(),zu=a("li"),pne=a("strong"),vvo=o("plbart"),Fvo=o(" \u2014 "),_I=a("a"),Tvo=o("PLBartForCausalLM"),Mvo=o(" (PLBart model)"),Evo=l(),Qu=a("li"),_ne=a("strong"),Cvo=o("prophetnet"),wvo=o(" \u2014 "),uI=a("a"),Avo=o("ProphetNetForCausalLM"),yvo=o(" (ProphetNet model)"),Lvo=l(),Wu=a("li"),une=a("strong"),xvo=o("qdqbert"),kvo=o(" \u2014 "),bI=a("a"),Svo=o("QDQBertLMHeadModel"),Rvo=o(" (QDQBert model)"),Bvo=l(),Hu=a("li"),bne=a("strong"),Pvo=o("reformer"),$vo=o(" \u2014 "),vI=a("a"),Ivo=o("ReformerModelWithLMHead"),qvo=o(" (Reformer model)"),Nvo=l(),Uu=a("li"),vne=a("strong"),jvo=o("rembert"),Dvo=o(" \u2014 "),FI=a("a"),Gvo=o("RemBertForCausalLM"),Ovo=o(" (RemBERT model)"),Vvo=l(),Ju=a("li"),Fne=a("strong"),Xvo=o("roberta"),zvo=o(" \u2014 "),TI=a("a"),Qvo=o("RobertaForCausalLM"),Wvo=o(" (RoBERTa model)"),Hvo=l(),Yu=a("li"),Tne=a("strong"),Uvo=o("roformer"),Jvo=o(" \u2014 "),MI=a("a"),Yvo=o("RoFormerForCausalLM"),Kvo=o(" (RoFormer model)"),Zvo=l(),Ku=a("li"),Mne=a("strong"),eFo=o("speech_to_text_2"),oFo=o(" \u2014 "),EI=a("a"),rFo=o("Speech2Text2ForCausalLM"),tFo=o(" (Speech2Text2 model)"),aFo=l(),Zu=a("li"),Ene=a("strong"),nFo=o("transfo-xl"),sFo=o(" \u2014 "),CI=a("a"),lFo=o("TransfoXLLMHeadModel"),iFo=o(" (Transformer-XL model)"),dFo=l(),e6=a("li"),Cne=a("strong"),cFo=o("trocr"),fFo=o(" \u2014 "),wI=a("a"),mFo=o("TrOCRForCausalLM"),gFo=o(" (TrOCR model)"),hFo=l(),o6=a("li"),wne=a("strong"),pFo=o("xglm"),_Fo=o(" \u2014 "),AI=a("a"),uFo=o("XGLMForCausalLM"),bFo=o(" (XGLM model)"),vFo=l(),r6=a("li"),Ane=a("strong"),FFo=o("xlm"),TFo=o(" \u2014 "),yI=a("a"),MFo=o("XLMWithLMHeadModel"),EFo=o(" (XLM model)"),CFo=l(),t6=a("li"),yne=a("strong"),wFo=o("xlm-prophetnet"),AFo=o(" \u2014 "),LI=a("a"),yFo=o("XLMProphetNetForCausalLM"),LFo=o(" (XLMProphetNet model)"),xFo=l(),a6=a("li"),Lne=a("strong"),kFo=o("xlm-roberta"),SFo=o(" \u2014 "),xI=a("a"),RFo=o("XLMRobertaForCausalLM"),BFo=o(" (XLM-RoBERTa model)"),PFo=l(),n6=a("li"),xne=a("strong"),$Fo=o("xlm-roberta-xl"),IFo=o(" \u2014 "),kI=a("a"),qFo=o("XLMRobertaXLForCausalLM"),NFo=o(" (XLM-RoBERTa-XL model)"),jFo=l(),s6=a("li"),kne=a("strong"),DFo=o("xlnet"),GFo=o(" \u2014 "),SI=a("a"),OFo=o("XLNetLMHeadModel"),VFo=o(" (XLNet model)"),XFo=l(),l6=a("p"),zFo=o("The model is set in evaluation mode by default using "),Sne=a("code"),QFo=o("model.eval()"),WFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rne=a("code"),HFo=o("model.train()"),UFo=l(),Bne=a("p"),JFo=o("Examples:"),YFo=l(),f(x3.$$.fragment),oBe=l(),ld=a("h2"),i6=a("a"),Pne=a("span"),f(k3.$$.fragment),KFo=l(),$ne=a("span"),ZFo=o("AutoModelForMaskedLM"),rBe=l(),Zo=a("div"),f(S3.$$.fragment),eTo=l(),id=a("p"),oTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RI=a("a"),rTo=o("from_pretrained()"),tTo=o(" class method or the "),BI=a("a"),aTo=o("from_config()"),nTo=o(` class
method.`),sTo=l(),R3=a("p"),lTo=o("This class cannot be instantiated directly using "),Ine=a("code"),iTo=o("__init__()"),dTo=o(" (throws an error)."),cTo=l(),Wr=a("div"),f(B3.$$.fragment),fTo=l(),qne=a("p"),mTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gTo=l(),dd=a("p"),hTo=o(`Note:
Loading a model from its configuration file does `),Nne=a("strong"),pTo=o("not"),_To=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=a("a"),uTo=o("from_pretrained()"),bTo=o(" to load the model weights."),vTo=l(),jne=a("p"),FTo=o("Examples:"),TTo=l(),f(P3.$$.fragment),MTo=l(),De=a("div"),f($3.$$.fragment),ETo=l(),Dne=a("p"),CTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wTo=l(),Wa=a("p"),ATo=o("The model class to instantiate is selected based on the "),Gne=a("code"),yTo=o("model_type"),LTo=o(` property of the config object (either
passed as an argument or loaded from `),One=a("code"),xTo=o("pretrained_model_name_or_path"),kTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=a("code"),STo=o("pretrained_model_name_or_path"),RTo=o(":"),BTo=l(),I=a("ul"),d6=a("li"),Xne=a("strong"),PTo=o("albert"),$To=o(" \u2014 "),$I=a("a"),ITo=o("AlbertForMaskedLM"),qTo=o(" (ALBERT model)"),NTo=l(),c6=a("li"),zne=a("strong"),jTo=o("bart"),DTo=o(" \u2014 "),II=a("a"),GTo=o("BartForConditionalGeneration"),OTo=o(" (BART model)"),VTo=l(),f6=a("li"),Qne=a("strong"),XTo=o("bert"),zTo=o(" \u2014 "),qI=a("a"),QTo=o("BertForMaskedLM"),WTo=o(" (BERT model)"),HTo=l(),m6=a("li"),Wne=a("strong"),UTo=o("big_bird"),JTo=o(" \u2014 "),NI=a("a"),YTo=o("BigBirdForMaskedLM"),KTo=o(" (BigBird model)"),ZTo=l(),g6=a("li"),Hne=a("strong"),e8o=o("camembert"),o8o=o(" \u2014 "),jI=a("a"),r8o=o("CamembertForMaskedLM"),t8o=o(" (CamemBERT model)"),a8o=l(),h6=a("li"),Une=a("strong"),n8o=o("convbert"),s8o=o(" \u2014 "),DI=a("a"),l8o=o("ConvBertForMaskedLM"),i8o=o(" (ConvBERT model)"),d8o=l(),p6=a("li"),Jne=a("strong"),c8o=o("data2vec-text"),f8o=o(" \u2014 "),GI=a("a"),m8o=o("Data2VecTextForMaskedLM"),g8o=o(" (Data2VecText model)"),h8o=l(),_6=a("li"),Yne=a("strong"),p8o=o("deberta"),_8o=o(" \u2014 "),OI=a("a"),u8o=o("DebertaForMaskedLM"),b8o=o(" (DeBERTa model)"),v8o=l(),u6=a("li"),Kne=a("strong"),F8o=o("deberta-v2"),T8o=o(" \u2014 "),VI=a("a"),M8o=o("DebertaV2ForMaskedLM"),E8o=o(" (DeBERTa-v2 model)"),C8o=l(),b6=a("li"),Zne=a("strong"),w8o=o("distilbert"),A8o=o(" \u2014 "),XI=a("a"),y8o=o("DistilBertForMaskedLM"),L8o=o(" (DistilBERT model)"),x8o=l(),v6=a("li"),ese=a("strong"),k8o=o("electra"),S8o=o(" \u2014 "),zI=a("a"),R8o=o("ElectraForMaskedLM"),B8o=o(" (ELECTRA model)"),P8o=l(),F6=a("li"),ose=a("strong"),$8o=o("flaubert"),I8o=o(" \u2014 "),QI=a("a"),q8o=o("FlaubertWithLMHeadModel"),N8o=o(" (FlauBERT model)"),j8o=l(),T6=a("li"),rse=a("strong"),D8o=o("fnet"),G8o=o(" \u2014 "),WI=a("a"),O8o=o("FNetForMaskedLM"),V8o=o(" (FNet model)"),X8o=l(),M6=a("li"),tse=a("strong"),z8o=o("funnel"),Q8o=o(" \u2014 "),HI=a("a"),W8o=o("FunnelForMaskedLM"),H8o=o(" (Funnel Transformer model)"),U8o=l(),E6=a("li"),ase=a("strong"),J8o=o("ibert"),Y8o=o(" \u2014 "),UI=a("a"),K8o=o("IBertForMaskedLM"),Z8o=o(" (I-BERT model)"),e9o=l(),C6=a("li"),nse=a("strong"),o9o=o("layoutlm"),r9o=o(" \u2014 "),JI=a("a"),t9o=o("LayoutLMForMaskedLM"),a9o=o(" (LayoutLM model)"),n9o=l(),w6=a("li"),sse=a("strong"),s9o=o("longformer"),l9o=o(" \u2014 "),YI=a("a"),i9o=o("LongformerForMaskedLM"),d9o=o(" (Longformer model)"),c9o=l(),A6=a("li"),lse=a("strong"),f9o=o("mbart"),m9o=o(" \u2014 "),KI=a("a"),g9o=o("MBartForConditionalGeneration"),h9o=o(" (mBART model)"),p9o=l(),y6=a("li"),ise=a("strong"),_9o=o("megatron-bert"),u9o=o(" \u2014 "),ZI=a("a"),b9o=o("MegatronBertForMaskedLM"),v9o=o(" (MegatronBert model)"),F9o=l(),L6=a("li"),dse=a("strong"),T9o=o("mobilebert"),M9o=o(" \u2014 "),eq=a("a"),E9o=o("MobileBertForMaskedLM"),C9o=o(" (MobileBERT model)"),w9o=l(),x6=a("li"),cse=a("strong"),A9o=o("mpnet"),y9o=o(" \u2014 "),oq=a("a"),L9o=o("MPNetForMaskedLM"),x9o=o(" (MPNet model)"),k9o=l(),k6=a("li"),fse=a("strong"),S9o=o("nystromformer"),R9o=o(" \u2014 "),rq=a("a"),B9o=o("NystromformerForMaskedLM"),P9o=o(" (Nystromformer model)"),$9o=l(),S6=a("li"),mse=a("strong"),I9o=o("perceiver"),q9o=o(" \u2014 "),tq=a("a"),N9o=o("PerceiverForMaskedLM"),j9o=o(" (Perceiver model)"),D9o=l(),R6=a("li"),gse=a("strong"),G9o=o("qdqbert"),O9o=o(" \u2014 "),aq=a("a"),V9o=o("QDQBertForMaskedLM"),X9o=o(" (QDQBert model)"),z9o=l(),B6=a("li"),hse=a("strong"),Q9o=o("reformer"),W9o=o(" \u2014 "),nq=a("a"),H9o=o("ReformerForMaskedLM"),U9o=o(" (Reformer model)"),J9o=l(),P6=a("li"),pse=a("strong"),Y9o=o("rembert"),K9o=o(" \u2014 "),sq=a("a"),Z9o=o("RemBertForMaskedLM"),eMo=o(" (RemBERT model)"),oMo=l(),$6=a("li"),_se=a("strong"),rMo=o("roberta"),tMo=o(" \u2014 "),lq=a("a"),aMo=o("RobertaForMaskedLM"),nMo=o(" (RoBERTa model)"),sMo=l(),I6=a("li"),use=a("strong"),lMo=o("roformer"),iMo=o(" \u2014 "),iq=a("a"),dMo=o("RoFormerForMaskedLM"),cMo=o(" (RoFormer model)"),fMo=l(),q6=a("li"),bse=a("strong"),mMo=o("squeezebert"),gMo=o(" \u2014 "),dq=a("a"),hMo=o("SqueezeBertForMaskedLM"),pMo=o(" (SqueezeBERT model)"),_Mo=l(),N6=a("li"),vse=a("strong"),uMo=o("tapas"),bMo=o(" \u2014 "),cq=a("a"),vMo=o("TapasForMaskedLM"),FMo=o(" (TAPAS model)"),TMo=l(),j6=a("li"),Fse=a("strong"),MMo=o("wav2vec2"),EMo=o(" \u2014 "),Tse=a("code"),CMo=o("Wav2Vec2ForMaskedLM"),wMo=o(" (Wav2Vec2 model)"),AMo=l(),D6=a("li"),Mse=a("strong"),yMo=o("xlm"),LMo=o(" \u2014 "),fq=a("a"),xMo=o("XLMWithLMHeadModel"),kMo=o(" (XLM model)"),SMo=l(),G6=a("li"),Ese=a("strong"),RMo=o("xlm-roberta"),BMo=o(" \u2014 "),mq=a("a"),PMo=o("XLMRobertaForMaskedLM"),$Mo=o(" (XLM-RoBERTa model)"),IMo=l(),O6=a("li"),Cse=a("strong"),qMo=o("xlm-roberta-xl"),NMo=o(" \u2014 "),gq=a("a"),jMo=o("XLMRobertaXLForMaskedLM"),DMo=o(" (XLM-RoBERTa-XL model)"),GMo=l(),V6=a("li"),wse=a("strong"),OMo=o("yoso"),VMo=o(" \u2014 "),hq=a("a"),XMo=o("YosoForMaskedLM"),zMo=o(" (YOSO model)"),QMo=l(),X6=a("p"),WMo=o("The model is set in evaluation mode by default using "),Ase=a("code"),HMo=o("model.eval()"),UMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=a("code"),JMo=o("model.train()"),YMo=l(),Lse=a("p"),KMo=o("Examples:"),ZMo=l(),f(I3.$$.fragment),tBe=l(),cd=a("h2"),z6=a("a"),xse=a("span"),f(q3.$$.fragment),e4o=l(),kse=a("span"),o4o=o("AutoModelForSeq2SeqLM"),aBe=l(),er=a("div"),f(N3.$$.fragment),r4o=l(),fd=a("p"),t4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pq=a("a"),a4o=o("from_pretrained()"),n4o=o(" class method or the "),_q=a("a"),s4o=o("from_config()"),l4o=o(` class
method.`),i4o=l(),j3=a("p"),d4o=o("This class cannot be instantiated directly using "),Sse=a("code"),c4o=o("__init__()"),f4o=o(" (throws an error)."),m4o=l(),Hr=a("div"),f(D3.$$.fragment),g4o=l(),Rse=a("p"),h4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p4o=l(),md=a("p"),_4o=o(`Note:
Loading a model from its configuration file does `),Bse=a("strong"),u4o=o("not"),b4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=a("a"),v4o=o("from_pretrained()"),F4o=o(" to load the model weights."),T4o=l(),Pse=a("p"),M4o=o("Examples:"),E4o=l(),f(G3.$$.fragment),C4o=l(),Ge=a("div"),f(O3.$$.fragment),w4o=l(),$se=a("p"),A4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y4o=l(),Ha=a("p"),L4o=o("The model class to instantiate is selected based on the "),Ise=a("code"),x4o=o("model_type"),k4o=o(` property of the config object (either
passed as an argument or loaded from `),qse=a("code"),S4o=o("pretrained_model_name_or_path"),R4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=a("code"),B4o=o("pretrained_model_name_or_path"),P4o=o(":"),$4o=l(),ne=a("ul"),Q6=a("li"),jse=a("strong"),I4o=o("bart"),q4o=o(" \u2014 "),bq=a("a"),N4o=o("BartForConditionalGeneration"),j4o=o(" (BART model)"),D4o=l(),W6=a("li"),Dse=a("strong"),G4o=o("bigbird_pegasus"),O4o=o(" \u2014 "),vq=a("a"),V4o=o("BigBirdPegasusForConditionalGeneration"),X4o=o(" (BigBirdPegasus model)"),z4o=l(),H6=a("li"),Gse=a("strong"),Q4o=o("blenderbot"),W4o=o(" \u2014 "),Fq=a("a"),H4o=o("BlenderbotForConditionalGeneration"),U4o=o(" (Blenderbot model)"),J4o=l(),U6=a("li"),Ose=a("strong"),Y4o=o("blenderbot-small"),K4o=o(" \u2014 "),Tq=a("a"),Z4o=o("BlenderbotSmallForConditionalGeneration"),eEo=o(" (BlenderbotSmall model)"),oEo=l(),J6=a("li"),Vse=a("strong"),rEo=o("encoder-decoder"),tEo=o(" \u2014 "),Mq=a("a"),aEo=o("EncoderDecoderModel"),nEo=o(" (Encoder decoder model)"),sEo=l(),Y6=a("li"),Xse=a("strong"),lEo=o("fsmt"),iEo=o(" \u2014 "),Eq=a("a"),dEo=o("FSMTForConditionalGeneration"),cEo=o(" (FairSeq Machine-Translation model)"),fEo=l(),K6=a("li"),zse=a("strong"),mEo=o("led"),gEo=o(" \u2014 "),Cq=a("a"),hEo=o("LEDForConditionalGeneration"),pEo=o(" (LED model)"),_Eo=l(),Z6=a("li"),Qse=a("strong"),uEo=o("m2m_100"),bEo=o(" \u2014 "),wq=a("a"),vEo=o("M2M100ForConditionalGeneration"),FEo=o(" (M2M100 model)"),TEo=l(),e1=a("li"),Wse=a("strong"),MEo=o("marian"),EEo=o(" \u2014 "),Aq=a("a"),CEo=o("MarianMTModel"),wEo=o(" (Marian model)"),AEo=l(),o1=a("li"),Hse=a("strong"),yEo=o("mbart"),LEo=o(" \u2014 "),yq=a("a"),xEo=o("MBartForConditionalGeneration"),kEo=o(" (mBART model)"),SEo=l(),r1=a("li"),Use=a("strong"),REo=o("mt5"),BEo=o(" \u2014 "),Lq=a("a"),PEo=o("MT5ForConditionalGeneration"),$Eo=o(" (mT5 model)"),IEo=l(),t1=a("li"),Jse=a("strong"),qEo=o("pegasus"),NEo=o(" \u2014 "),xq=a("a"),jEo=o("PegasusForConditionalGeneration"),DEo=o(" (Pegasus model)"),GEo=l(),a1=a("li"),Yse=a("strong"),OEo=o("plbart"),VEo=o(" \u2014 "),kq=a("a"),XEo=o("PLBartForConditionalGeneration"),zEo=o(" (PLBart model)"),QEo=l(),n1=a("li"),Kse=a("strong"),WEo=o("prophetnet"),HEo=o(" \u2014 "),Sq=a("a"),UEo=o("ProphetNetForConditionalGeneration"),JEo=o(" (ProphetNet model)"),YEo=l(),s1=a("li"),Zse=a("strong"),KEo=o("t5"),ZEo=o(" \u2014 "),Rq=a("a"),e5o=o("T5ForConditionalGeneration"),o5o=o(" (T5 model)"),r5o=l(),l1=a("li"),ele=a("strong"),t5o=o("tapex"),a5o=o(" \u2014 "),Bq=a("a"),n5o=o("BartForConditionalGeneration"),s5o=o(" (TAPEX model)"),l5o=l(),i1=a("li"),ole=a("strong"),i5o=o("xlm-prophetnet"),d5o=o(" \u2014 "),Pq=a("a"),c5o=o("XLMProphetNetForConditionalGeneration"),f5o=o(" (XLMProphetNet model)"),m5o=l(),d1=a("p"),g5o=o("The model is set in evaluation mode by default using "),rle=a("code"),h5o=o("model.eval()"),p5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=a("code"),_5o=o("model.train()"),u5o=l(),ale=a("p"),b5o=o("Examples:"),v5o=l(),f(V3.$$.fragment),nBe=l(),gd=a("h2"),c1=a("a"),nle=a("span"),f(X3.$$.fragment),F5o=l(),sle=a("span"),T5o=o("AutoModelForSequenceClassification"),sBe=l(),or=a("div"),f(z3.$$.fragment),M5o=l(),hd=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$q=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),Iq=a("a"),A5o=o("from_config()"),y5o=o(` class
method.`),L5o=l(),Q3=a("p"),x5o=o("This class cannot be instantiated directly using "),lle=a("code"),k5o=o("__init__()"),S5o=o(" (throws an error)."),R5o=l(),Ur=a("div"),f(W3.$$.fragment),B5o=l(),ile=a("p"),P5o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$5o=l(),pd=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),dle=a("strong"),q5o=o("not"),N5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),cle=a("p"),O5o=o("Examples:"),V5o=l(),f(H3.$$.fragment),X5o=l(),Oe=a("div"),f(U3.$$.fragment),z5o=l(),fle=a("p"),Q5o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W5o=l(),Ua=a("p"),H5o=o("The model class to instantiate is selected based on the "),mle=a("code"),U5o=o("model_type"),J5o=o(` property of the config object (either
passed as an argument or loaded from `),gle=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=a("code"),Z5o=o("pretrained_model_name_or_path"),e3o=o(":"),o3o=l(),y=a("ul"),f1=a("li"),ple=a("strong"),r3o=o("albert"),t3o=o(" \u2014 "),Nq=a("a"),a3o=o("AlbertForSequenceClassification"),n3o=o(" (ALBERT model)"),s3o=l(),m1=a("li"),_le=a("strong"),l3o=o("bart"),i3o=o(" \u2014 "),jq=a("a"),d3o=o("BartForSequenceClassification"),c3o=o(" (BART model)"),f3o=l(),g1=a("li"),ule=a("strong"),m3o=o("bert"),g3o=o(" \u2014 "),Dq=a("a"),h3o=o("BertForSequenceClassification"),p3o=o(" (BERT model)"),_3o=l(),h1=a("li"),ble=a("strong"),u3o=o("big_bird"),b3o=o(" \u2014 "),Gq=a("a"),v3o=o("BigBirdForSequenceClassification"),F3o=o(" (BigBird model)"),T3o=l(),p1=a("li"),vle=a("strong"),M3o=o("bigbird_pegasus"),E3o=o(" \u2014 "),Oq=a("a"),C3o=o("BigBirdPegasusForSequenceClassification"),w3o=o(" (BigBirdPegasus model)"),A3o=l(),_1=a("li"),Fle=a("strong"),y3o=o("camembert"),L3o=o(" \u2014 "),Vq=a("a"),x3o=o("CamembertForSequenceClassification"),k3o=o(" (CamemBERT model)"),S3o=l(),u1=a("li"),Tle=a("strong"),R3o=o("canine"),B3o=o(" \u2014 "),Xq=a("a"),P3o=o("CanineForSequenceClassification"),$3o=o(" (Canine model)"),I3o=l(),b1=a("li"),Mle=a("strong"),q3o=o("convbert"),N3o=o(" \u2014 "),zq=a("a"),j3o=o("ConvBertForSequenceClassification"),D3o=o(" (ConvBERT model)"),G3o=l(),v1=a("li"),Ele=a("strong"),O3o=o("ctrl"),V3o=o(" \u2014 "),Qq=a("a"),X3o=o("CTRLForSequenceClassification"),z3o=o(" (CTRL model)"),Q3o=l(),F1=a("li"),Cle=a("strong"),W3o=o("data2vec-text"),H3o=o(" \u2014 "),Wq=a("a"),U3o=o("Data2VecTextForSequenceClassification"),J3o=o(" (Data2VecText model)"),Y3o=l(),T1=a("li"),wle=a("strong"),K3o=o("deberta"),Z3o=o(" \u2014 "),Hq=a("a"),eCo=o("DebertaForSequenceClassification"),oCo=o(" (DeBERTa model)"),rCo=l(),M1=a("li"),Ale=a("strong"),tCo=o("deberta-v2"),aCo=o(" \u2014 "),Uq=a("a"),nCo=o("DebertaV2ForSequenceClassification"),sCo=o(" (DeBERTa-v2 model)"),lCo=l(),E1=a("li"),yle=a("strong"),iCo=o("distilbert"),dCo=o(" \u2014 "),Jq=a("a"),cCo=o("DistilBertForSequenceClassification"),fCo=o(" (DistilBERT model)"),mCo=l(),C1=a("li"),Lle=a("strong"),gCo=o("electra"),hCo=o(" \u2014 "),Yq=a("a"),pCo=o("ElectraForSequenceClassification"),_Co=o(" (ELECTRA model)"),uCo=l(),w1=a("li"),xle=a("strong"),bCo=o("flaubert"),vCo=o(" \u2014 "),Kq=a("a"),FCo=o("FlaubertForSequenceClassification"),TCo=o(" (FlauBERT model)"),MCo=l(),A1=a("li"),kle=a("strong"),ECo=o("fnet"),CCo=o(" \u2014 "),Zq=a("a"),wCo=o("FNetForSequenceClassification"),ACo=o(" (FNet model)"),yCo=l(),y1=a("li"),Sle=a("strong"),LCo=o("funnel"),xCo=o(" \u2014 "),eN=a("a"),kCo=o("FunnelForSequenceClassification"),SCo=o(" (Funnel Transformer model)"),RCo=l(),L1=a("li"),Rle=a("strong"),BCo=o("gpt2"),PCo=o(" \u2014 "),oN=a("a"),$Co=o("GPT2ForSequenceClassification"),ICo=o(" (OpenAI GPT-2 model)"),qCo=l(),x1=a("li"),Ble=a("strong"),NCo=o("gpt_neo"),jCo=o(" \u2014 "),rN=a("a"),DCo=o("GPTNeoForSequenceClassification"),GCo=o(" (GPT Neo model)"),OCo=l(),k1=a("li"),Ple=a("strong"),VCo=o("gptj"),XCo=o(" \u2014 "),tN=a("a"),zCo=o("GPTJForSequenceClassification"),QCo=o(" (GPT-J model)"),WCo=l(),S1=a("li"),$le=a("strong"),HCo=o("ibert"),UCo=o(" \u2014 "),aN=a("a"),JCo=o("IBertForSequenceClassification"),YCo=o(" (I-BERT model)"),KCo=l(),R1=a("li"),Ile=a("strong"),ZCo=o("layoutlm"),ewo=o(" \u2014 "),nN=a("a"),owo=o("LayoutLMForSequenceClassification"),rwo=o(" (LayoutLM model)"),two=l(),B1=a("li"),qle=a("strong"),awo=o("layoutlmv2"),nwo=o(" \u2014 "),sN=a("a"),swo=o("LayoutLMv2ForSequenceClassification"),lwo=o(" (LayoutLMv2 model)"),iwo=l(),P1=a("li"),Nle=a("strong"),dwo=o("led"),cwo=o(" \u2014 "),lN=a("a"),fwo=o("LEDForSequenceClassification"),mwo=o(" (LED model)"),gwo=l(),$1=a("li"),jle=a("strong"),hwo=o("longformer"),pwo=o(" \u2014 "),iN=a("a"),_wo=o("LongformerForSequenceClassification"),uwo=o(" (Longformer model)"),bwo=l(),I1=a("li"),Dle=a("strong"),vwo=o("mbart"),Fwo=o(" \u2014 "),dN=a("a"),Two=o("MBartForSequenceClassification"),Mwo=o(" (mBART model)"),Ewo=l(),q1=a("li"),Gle=a("strong"),Cwo=o("megatron-bert"),wwo=o(" \u2014 "),cN=a("a"),Awo=o("MegatronBertForSequenceClassification"),ywo=o(" (MegatronBert model)"),Lwo=l(),N1=a("li"),Ole=a("strong"),xwo=o("mobilebert"),kwo=o(" \u2014 "),fN=a("a"),Swo=o("MobileBertForSequenceClassification"),Rwo=o(" (MobileBERT model)"),Bwo=l(),j1=a("li"),Vle=a("strong"),Pwo=o("mpnet"),$wo=o(" \u2014 "),mN=a("a"),Iwo=o("MPNetForSequenceClassification"),qwo=o(" (MPNet model)"),Nwo=l(),D1=a("li"),Xle=a("strong"),jwo=o("nystromformer"),Dwo=o(" \u2014 "),gN=a("a"),Gwo=o("NystromformerForSequenceClassification"),Owo=o(" (Nystromformer model)"),Vwo=l(),G1=a("li"),zle=a("strong"),Xwo=o("openai-gpt"),zwo=o(" \u2014 "),hN=a("a"),Qwo=o("OpenAIGPTForSequenceClassification"),Wwo=o(" (OpenAI GPT model)"),Hwo=l(),O1=a("li"),Qle=a("strong"),Uwo=o("perceiver"),Jwo=o(" \u2014 "),pN=a("a"),Ywo=o("PerceiverForSequenceClassification"),Kwo=o(" (Perceiver model)"),Zwo=l(),V1=a("li"),Wle=a("strong"),eAo=o("plbart"),oAo=o(" \u2014 "),_N=a("a"),rAo=o("PLBartForSequenceClassification"),tAo=o(" (PLBart model)"),aAo=l(),X1=a("li"),Hle=a("strong"),nAo=o("qdqbert"),sAo=o(" \u2014 "),uN=a("a"),lAo=o("QDQBertForSequenceClassification"),iAo=o(" (QDQBert model)"),dAo=l(),z1=a("li"),Ule=a("strong"),cAo=o("reformer"),fAo=o(" \u2014 "),bN=a("a"),mAo=o("ReformerForSequenceClassification"),gAo=o(" (Reformer model)"),hAo=l(),Q1=a("li"),Jle=a("strong"),pAo=o("rembert"),_Ao=o(" \u2014 "),vN=a("a"),uAo=o("RemBertForSequenceClassification"),bAo=o(" (RemBERT model)"),vAo=l(),W1=a("li"),Yle=a("strong"),FAo=o("roberta"),TAo=o(" \u2014 "),FN=a("a"),MAo=o("RobertaForSequenceClassification"),EAo=o(" (RoBERTa model)"),CAo=l(),H1=a("li"),Kle=a("strong"),wAo=o("roformer"),AAo=o(" \u2014 "),TN=a("a"),yAo=o("RoFormerForSequenceClassification"),LAo=o(" (RoFormer model)"),xAo=l(),U1=a("li"),Zle=a("strong"),kAo=o("squeezebert"),SAo=o(" \u2014 "),MN=a("a"),RAo=o("SqueezeBertForSequenceClassification"),BAo=o(" (SqueezeBERT model)"),PAo=l(),J1=a("li"),eie=a("strong"),$Ao=o("tapas"),IAo=o(" \u2014 "),EN=a("a"),qAo=o("TapasForSequenceClassification"),NAo=o(" (TAPAS model)"),jAo=l(),Y1=a("li"),oie=a("strong"),DAo=o("tapex"),GAo=o(" \u2014 "),CN=a("a"),OAo=o("BartForSequenceClassification"),VAo=o(" (TAPEX model)"),XAo=l(),K1=a("li"),rie=a("strong"),zAo=o("transfo-xl"),QAo=o(" \u2014 "),wN=a("a"),WAo=o("TransfoXLForSequenceClassification"),HAo=o(" (Transformer-XL model)"),UAo=l(),Z1=a("li"),tie=a("strong"),JAo=o("xlm"),YAo=o(" \u2014 "),AN=a("a"),KAo=o("XLMForSequenceClassification"),ZAo=o(" (XLM model)"),e0o=l(),eb=a("li"),aie=a("strong"),o0o=o("xlm-roberta"),r0o=o(" \u2014 "),yN=a("a"),t0o=o("XLMRobertaForSequenceClassification"),a0o=o(" (XLM-RoBERTa model)"),n0o=l(),ob=a("li"),nie=a("strong"),s0o=o("xlm-roberta-xl"),l0o=o(" \u2014 "),LN=a("a"),i0o=o("XLMRobertaXLForSequenceClassification"),d0o=o(" (XLM-RoBERTa-XL model)"),c0o=l(),rb=a("li"),sie=a("strong"),f0o=o("xlnet"),m0o=o(" \u2014 "),xN=a("a"),g0o=o("XLNetForSequenceClassification"),h0o=o(" (XLNet model)"),p0o=l(),tb=a("li"),lie=a("strong"),_0o=o("yoso"),u0o=o(" \u2014 "),kN=a("a"),b0o=o("YosoForSequenceClassification"),v0o=o(" (YOSO model)"),F0o=l(),ab=a("p"),T0o=o("The model is set in evaluation mode by default using "),iie=a("code"),M0o=o("model.eval()"),E0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=a("code"),C0o=o("model.train()"),w0o=l(),cie=a("p"),A0o=o("Examples:"),y0o=l(),f(J3.$$.fragment),lBe=l(),_d=a("h2"),nb=a("a"),fie=a("span"),f(Y3.$$.fragment),L0o=l(),mie=a("span"),x0o=o("AutoModelForMultipleChoice"),iBe=l(),rr=a("div"),f(K3.$$.fragment),k0o=l(),ud=a("p"),S0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SN=a("a"),R0o=o("from_pretrained()"),B0o=o(" class method or the "),RN=a("a"),P0o=o("from_config()"),$0o=o(` class
method.`),I0o=l(),Z3=a("p"),q0o=o("This class cannot be instantiated directly using "),gie=a("code"),N0o=o("__init__()"),j0o=o(" (throws an error)."),D0o=l(),Jr=a("div"),f(eC.$$.fragment),G0o=l(),hie=a("p"),O0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V0o=l(),bd=a("p"),X0o=o(`Note:
Loading a model from its configuration file does `),pie=a("strong"),z0o=o("not"),Q0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BN=a("a"),W0o=o("from_pretrained()"),H0o=o(" to load the model weights."),U0o=l(),_ie=a("p"),J0o=o("Examples:"),Y0o=l(),f(oC.$$.fragment),K0o=l(),Ve=a("div"),f(rC.$$.fragment),Z0o=l(),uie=a("p"),eyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),oyo=l(),Ja=a("p"),ryo=o("The model class to instantiate is selected based on the "),bie=a("code"),tyo=o("model_type"),ayo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),nyo=o("pretrained_model_name_or_path"),syo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),lyo=o("pretrained_model_name_or_path"),iyo=o(":"),dyo=l(),G=a("ul"),sb=a("li"),Tie=a("strong"),cyo=o("albert"),fyo=o(" \u2014 "),PN=a("a"),myo=o("AlbertForMultipleChoice"),gyo=o(" (ALBERT model)"),hyo=l(),lb=a("li"),Mie=a("strong"),pyo=o("bert"),_yo=o(" \u2014 "),$N=a("a"),uyo=o("BertForMultipleChoice"),byo=o(" (BERT model)"),vyo=l(),ib=a("li"),Eie=a("strong"),Fyo=o("big_bird"),Tyo=o(" \u2014 "),IN=a("a"),Myo=o("BigBirdForMultipleChoice"),Eyo=o(" (BigBird model)"),Cyo=l(),db=a("li"),Cie=a("strong"),wyo=o("camembert"),Ayo=o(" \u2014 "),qN=a("a"),yyo=o("CamembertForMultipleChoice"),Lyo=o(" (CamemBERT model)"),xyo=l(),cb=a("li"),wie=a("strong"),kyo=o("canine"),Syo=o(" \u2014 "),NN=a("a"),Ryo=o("CanineForMultipleChoice"),Byo=o(" (Canine model)"),Pyo=l(),fb=a("li"),Aie=a("strong"),$yo=o("convbert"),Iyo=o(" \u2014 "),jN=a("a"),qyo=o("ConvBertForMultipleChoice"),Nyo=o(" (ConvBERT model)"),jyo=l(),mb=a("li"),yie=a("strong"),Dyo=o("data2vec-text"),Gyo=o(" \u2014 "),DN=a("a"),Oyo=o("Data2VecTextForMultipleChoice"),Vyo=o(" (Data2VecText model)"),Xyo=l(),gb=a("li"),Lie=a("strong"),zyo=o("distilbert"),Qyo=o(" \u2014 "),GN=a("a"),Wyo=o("DistilBertForMultipleChoice"),Hyo=o(" (DistilBERT model)"),Uyo=l(),hb=a("li"),xie=a("strong"),Jyo=o("electra"),Yyo=o(" \u2014 "),ON=a("a"),Kyo=o("ElectraForMultipleChoice"),Zyo=o(" (ELECTRA model)"),eLo=l(),pb=a("li"),kie=a("strong"),oLo=o("flaubert"),rLo=o(" \u2014 "),VN=a("a"),tLo=o("FlaubertForMultipleChoice"),aLo=o(" (FlauBERT model)"),nLo=l(),_b=a("li"),Sie=a("strong"),sLo=o("fnet"),lLo=o(" \u2014 "),XN=a("a"),iLo=o("FNetForMultipleChoice"),dLo=o(" (FNet model)"),cLo=l(),ub=a("li"),Rie=a("strong"),fLo=o("funnel"),mLo=o(" \u2014 "),zN=a("a"),gLo=o("FunnelForMultipleChoice"),hLo=o(" (Funnel Transformer model)"),pLo=l(),bb=a("li"),Bie=a("strong"),_Lo=o("ibert"),uLo=o(" \u2014 "),QN=a("a"),bLo=o("IBertForMultipleChoice"),vLo=o(" (I-BERT model)"),FLo=l(),vb=a("li"),Pie=a("strong"),TLo=o("longformer"),MLo=o(" \u2014 "),WN=a("a"),ELo=o("LongformerForMultipleChoice"),CLo=o(" (Longformer model)"),wLo=l(),Fb=a("li"),$ie=a("strong"),ALo=o("megatron-bert"),yLo=o(" \u2014 "),HN=a("a"),LLo=o("MegatronBertForMultipleChoice"),xLo=o(" (MegatronBert model)"),kLo=l(),Tb=a("li"),Iie=a("strong"),SLo=o("mobilebert"),RLo=o(" \u2014 "),UN=a("a"),BLo=o("MobileBertForMultipleChoice"),PLo=o(" (MobileBERT model)"),$Lo=l(),Mb=a("li"),qie=a("strong"),ILo=o("mpnet"),qLo=o(" \u2014 "),JN=a("a"),NLo=o("MPNetForMultipleChoice"),jLo=o(" (MPNet model)"),DLo=l(),Eb=a("li"),Nie=a("strong"),GLo=o("nystromformer"),OLo=o(" \u2014 "),YN=a("a"),VLo=o("NystromformerForMultipleChoice"),XLo=o(" (Nystromformer model)"),zLo=l(),Cb=a("li"),jie=a("strong"),QLo=o("qdqbert"),WLo=o(" \u2014 "),KN=a("a"),HLo=o("QDQBertForMultipleChoice"),ULo=o(" (QDQBert model)"),JLo=l(),wb=a("li"),Die=a("strong"),YLo=o("rembert"),KLo=o(" \u2014 "),ZN=a("a"),ZLo=o("RemBertForMultipleChoice"),e7o=o(" (RemBERT model)"),o7o=l(),Ab=a("li"),Gie=a("strong"),r7o=o("roberta"),t7o=o(" \u2014 "),ej=a("a"),a7o=o("RobertaForMultipleChoice"),n7o=o(" (RoBERTa model)"),s7o=l(),yb=a("li"),Oie=a("strong"),l7o=o("roformer"),i7o=o(" \u2014 "),oj=a("a"),d7o=o("RoFormerForMultipleChoice"),c7o=o(" (RoFormer model)"),f7o=l(),Lb=a("li"),Vie=a("strong"),m7o=o("squeezebert"),g7o=o(" \u2014 "),rj=a("a"),h7o=o("SqueezeBertForMultipleChoice"),p7o=o(" (SqueezeBERT model)"),_7o=l(),xb=a("li"),Xie=a("strong"),u7o=o("xlm"),b7o=o(" \u2014 "),tj=a("a"),v7o=o("XLMForMultipleChoice"),F7o=o(" (XLM model)"),T7o=l(),kb=a("li"),zie=a("strong"),M7o=o("xlm-roberta"),E7o=o(" \u2014 "),aj=a("a"),C7o=o("XLMRobertaForMultipleChoice"),w7o=o(" (XLM-RoBERTa model)"),A7o=l(),Sb=a("li"),Qie=a("strong"),y7o=o("xlm-roberta-xl"),L7o=o(" \u2014 "),nj=a("a"),x7o=o("XLMRobertaXLForMultipleChoice"),k7o=o(" (XLM-RoBERTa-XL model)"),S7o=l(),Rb=a("li"),Wie=a("strong"),R7o=o("xlnet"),B7o=o(" \u2014 "),sj=a("a"),P7o=o("XLNetForMultipleChoice"),$7o=o(" (XLNet model)"),I7o=l(),Bb=a("li"),Hie=a("strong"),q7o=o("yoso"),N7o=o(" \u2014 "),lj=a("a"),j7o=o("YosoForMultipleChoice"),D7o=o(" (YOSO model)"),G7o=l(),Pb=a("p"),O7o=o("The model is set in evaluation mode by default using "),Uie=a("code"),V7o=o("model.eval()"),X7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),z7o=o("model.train()"),Q7o=l(),Yie=a("p"),W7o=o("Examples:"),H7o=l(),f(tC.$$.fragment),dBe=l(),vd=a("h2"),$b=a("a"),Kie=a("span"),f(aC.$$.fragment),U7o=l(),Zie=a("span"),J7o=o("AutoModelForNextSentencePrediction"),cBe=l(),tr=a("div"),f(nC.$$.fragment),Y7o=l(),Fd=a("p"),K7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ij=a("a"),Z7o=o("from_pretrained()"),exo=o(" class method or the "),dj=a("a"),oxo=o("from_config()"),rxo=o(` class
method.`),txo=l(),sC=a("p"),axo=o("This class cannot be instantiated directly using "),ede=a("code"),nxo=o("__init__()"),sxo=o(" (throws an error)."),lxo=l(),Yr=a("div"),f(lC.$$.fragment),ixo=l(),ode=a("p"),dxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cxo=l(),Td=a("p"),fxo=o(`Note:
Loading a model from its configuration file does `),rde=a("strong"),mxo=o("not"),gxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),hxo=o("from_pretrained()"),pxo=o(" to load the model weights."),_xo=l(),tde=a("p"),uxo=o("Examples:"),bxo=l(),f(iC.$$.fragment),vxo=l(),Xe=a("div"),f(dC.$$.fragment),Fxo=l(),ade=a("p"),Txo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mxo=l(),Ya=a("p"),Exo=o("The model class to instantiate is selected based on the "),nde=a("code"),Cxo=o("model_type"),wxo=o(` property of the config object (either
passed as an argument or loaded from `),sde=a("code"),Axo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=a("code"),Lxo=o("pretrained_model_name_or_path"),xxo=o(":"),kxo=l(),da=a("ul"),Ib=a("li"),ide=a("strong"),Sxo=o("bert"),Rxo=o(" \u2014 "),fj=a("a"),Bxo=o("BertForNextSentencePrediction"),Pxo=o(" (BERT model)"),$xo=l(),qb=a("li"),dde=a("strong"),Ixo=o("fnet"),qxo=o(" \u2014 "),mj=a("a"),Nxo=o("FNetForNextSentencePrediction"),jxo=o(" (FNet model)"),Dxo=l(),Nb=a("li"),cde=a("strong"),Gxo=o("megatron-bert"),Oxo=o(" \u2014 "),gj=a("a"),Vxo=o("MegatronBertForNextSentencePrediction"),Xxo=o(" (MegatronBert model)"),zxo=l(),jb=a("li"),fde=a("strong"),Qxo=o("mobilebert"),Wxo=o(" \u2014 "),hj=a("a"),Hxo=o("MobileBertForNextSentencePrediction"),Uxo=o(" (MobileBERT model)"),Jxo=l(),Db=a("li"),mde=a("strong"),Yxo=o("qdqbert"),Kxo=o(" \u2014 "),pj=a("a"),Zxo=o("QDQBertForNextSentencePrediction"),eko=o(" (QDQBert model)"),oko=l(),Gb=a("p"),rko=o("The model is set in evaluation mode by default using "),gde=a("code"),tko=o("model.eval()"),ako=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=a("code"),nko=o("model.train()"),sko=l(),pde=a("p"),lko=o("Examples:"),iko=l(),f(cC.$$.fragment),fBe=l(),Md=a("h2"),Ob=a("a"),_de=a("span"),f(fC.$$.fragment),dko=l(),ude=a("span"),cko=o("AutoModelForTokenClassification"),mBe=l(),ar=a("div"),f(mC.$$.fragment),fko=l(),Ed=a("p"),mko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_j=a("a"),gko=o("from_pretrained()"),hko=o(" class method or the "),uj=a("a"),pko=o("from_config()"),_ko=o(` class
method.`),uko=l(),gC=a("p"),bko=o("This class cannot be instantiated directly using "),bde=a("code"),vko=o("__init__()"),Fko=o(" (throws an error)."),Tko=l(),Kr=a("div"),f(hC.$$.fragment),Mko=l(),vde=a("p"),Eko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Cko=l(),Cd=a("p"),wko=o(`Note:
Loading a model from its configuration file does `),Fde=a("strong"),Ako=o("not"),yko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=a("a"),Lko=o("from_pretrained()"),xko=o(" to load the model weights."),kko=l(),Tde=a("p"),Sko=o("Examples:"),Rko=l(),f(pC.$$.fragment),Bko=l(),ze=a("div"),f(_C.$$.fragment),Pko=l(),Mde=a("p"),$ko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Iko=l(),Ka=a("p"),qko=o("The model class to instantiate is selected based on the "),Ede=a("code"),Nko=o("model_type"),jko=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),Dko=o("pretrained_model_name_or_path"),Gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),Oko=o("pretrained_model_name_or_path"),Vko=o(":"),Xko=l(),j=a("ul"),Vb=a("li"),Ade=a("strong"),zko=o("albert"),Qko=o(" \u2014 "),vj=a("a"),Wko=o("AlbertForTokenClassification"),Hko=o(" (ALBERT model)"),Uko=l(),Xb=a("li"),yde=a("strong"),Jko=o("bert"),Yko=o(" \u2014 "),Fj=a("a"),Kko=o("BertForTokenClassification"),Zko=o(" (BERT model)"),eSo=l(),zb=a("li"),Lde=a("strong"),oSo=o("big_bird"),rSo=o(" \u2014 "),Tj=a("a"),tSo=o("BigBirdForTokenClassification"),aSo=o(" (BigBird model)"),nSo=l(),Qb=a("li"),xde=a("strong"),sSo=o("camembert"),lSo=o(" \u2014 "),Mj=a("a"),iSo=o("CamembertForTokenClassification"),dSo=o(" (CamemBERT model)"),cSo=l(),Wb=a("li"),kde=a("strong"),fSo=o("canine"),mSo=o(" \u2014 "),Ej=a("a"),gSo=o("CanineForTokenClassification"),hSo=o(" (Canine model)"),pSo=l(),Hb=a("li"),Sde=a("strong"),_So=o("convbert"),uSo=o(" \u2014 "),Cj=a("a"),bSo=o("ConvBertForTokenClassification"),vSo=o(" (ConvBERT model)"),FSo=l(),Ub=a("li"),Rde=a("strong"),TSo=o("data2vec-text"),MSo=o(" \u2014 "),wj=a("a"),ESo=o("Data2VecTextForTokenClassification"),CSo=o(" (Data2VecText model)"),wSo=l(),Jb=a("li"),Bde=a("strong"),ASo=o("deberta"),ySo=o(" \u2014 "),Aj=a("a"),LSo=o("DebertaForTokenClassification"),xSo=o(" (DeBERTa model)"),kSo=l(),Yb=a("li"),Pde=a("strong"),SSo=o("deberta-v2"),RSo=o(" \u2014 "),yj=a("a"),BSo=o("DebertaV2ForTokenClassification"),PSo=o(" (DeBERTa-v2 model)"),$So=l(),Kb=a("li"),$de=a("strong"),ISo=o("distilbert"),qSo=o(" \u2014 "),Lj=a("a"),NSo=o("DistilBertForTokenClassification"),jSo=o(" (DistilBERT model)"),DSo=l(),Zb=a("li"),Ide=a("strong"),GSo=o("electra"),OSo=o(" \u2014 "),xj=a("a"),VSo=o("ElectraForTokenClassification"),XSo=o(" (ELECTRA model)"),zSo=l(),e2=a("li"),qde=a("strong"),QSo=o("flaubert"),WSo=o(" \u2014 "),kj=a("a"),HSo=o("FlaubertForTokenClassification"),USo=o(" (FlauBERT model)"),JSo=l(),o2=a("li"),Nde=a("strong"),YSo=o("fnet"),KSo=o(" \u2014 "),Sj=a("a"),ZSo=o("FNetForTokenClassification"),eRo=o(" (FNet model)"),oRo=l(),r2=a("li"),jde=a("strong"),rRo=o("funnel"),tRo=o(" \u2014 "),Rj=a("a"),aRo=o("FunnelForTokenClassification"),nRo=o(" (Funnel Transformer model)"),sRo=l(),t2=a("li"),Dde=a("strong"),lRo=o("gpt2"),iRo=o(" \u2014 "),Bj=a("a"),dRo=o("GPT2ForTokenClassification"),cRo=o(" (OpenAI GPT-2 model)"),fRo=l(),a2=a("li"),Gde=a("strong"),mRo=o("ibert"),gRo=o(" \u2014 "),Pj=a("a"),hRo=o("IBertForTokenClassification"),pRo=o(" (I-BERT model)"),_Ro=l(),n2=a("li"),Ode=a("strong"),uRo=o("layoutlm"),bRo=o(" \u2014 "),$j=a("a"),vRo=o("LayoutLMForTokenClassification"),FRo=o(" (LayoutLM model)"),TRo=l(),s2=a("li"),Vde=a("strong"),MRo=o("layoutlmv2"),ERo=o(" \u2014 "),Ij=a("a"),CRo=o("LayoutLMv2ForTokenClassification"),wRo=o(" (LayoutLMv2 model)"),ARo=l(),l2=a("li"),Xde=a("strong"),yRo=o("longformer"),LRo=o(" \u2014 "),qj=a("a"),xRo=o("LongformerForTokenClassification"),kRo=o(" (Longformer model)"),SRo=l(),i2=a("li"),zde=a("strong"),RRo=o("megatron-bert"),BRo=o(" \u2014 "),Nj=a("a"),PRo=o("MegatronBertForTokenClassification"),$Ro=o(" (MegatronBert model)"),IRo=l(),d2=a("li"),Qde=a("strong"),qRo=o("mobilebert"),NRo=o(" \u2014 "),jj=a("a"),jRo=o("MobileBertForTokenClassification"),DRo=o(" (MobileBERT model)"),GRo=l(),c2=a("li"),Wde=a("strong"),ORo=o("mpnet"),VRo=o(" \u2014 "),Dj=a("a"),XRo=o("MPNetForTokenClassification"),zRo=o(" (MPNet model)"),QRo=l(),f2=a("li"),Hde=a("strong"),WRo=o("nystromformer"),HRo=o(" \u2014 "),Gj=a("a"),URo=o("NystromformerForTokenClassification"),JRo=o(" (Nystromformer model)"),YRo=l(),m2=a("li"),Ude=a("strong"),KRo=o("qdqbert"),ZRo=o(" \u2014 "),Oj=a("a"),eBo=o("QDQBertForTokenClassification"),oBo=o(" (QDQBert model)"),rBo=l(),g2=a("li"),Jde=a("strong"),tBo=o("rembert"),aBo=o(" \u2014 "),Vj=a("a"),nBo=o("RemBertForTokenClassification"),sBo=o(" (RemBERT model)"),lBo=l(),h2=a("li"),Yde=a("strong"),iBo=o("roberta"),dBo=o(" \u2014 "),Xj=a("a"),cBo=o("RobertaForTokenClassification"),fBo=o(" (RoBERTa model)"),mBo=l(),p2=a("li"),Kde=a("strong"),gBo=o("roformer"),hBo=o(" \u2014 "),zj=a("a"),pBo=o("RoFormerForTokenClassification"),_Bo=o(" (RoFormer model)"),uBo=l(),_2=a("li"),Zde=a("strong"),bBo=o("squeezebert"),vBo=o(" \u2014 "),Qj=a("a"),FBo=o("SqueezeBertForTokenClassification"),TBo=o(" (SqueezeBERT model)"),MBo=l(),u2=a("li"),ece=a("strong"),EBo=o("xlm"),CBo=o(" \u2014 "),Wj=a("a"),wBo=o("XLMForTokenClassification"),ABo=o(" (XLM model)"),yBo=l(),b2=a("li"),oce=a("strong"),LBo=o("xlm-roberta"),xBo=o(" \u2014 "),Hj=a("a"),kBo=o("XLMRobertaForTokenClassification"),SBo=o(" (XLM-RoBERTa model)"),RBo=l(),v2=a("li"),rce=a("strong"),BBo=o("xlm-roberta-xl"),PBo=o(" \u2014 "),Uj=a("a"),$Bo=o("XLMRobertaXLForTokenClassification"),IBo=o(" (XLM-RoBERTa-XL model)"),qBo=l(),F2=a("li"),tce=a("strong"),NBo=o("xlnet"),jBo=o(" \u2014 "),Jj=a("a"),DBo=o("XLNetForTokenClassification"),GBo=o(" (XLNet model)"),OBo=l(),T2=a("li"),ace=a("strong"),VBo=o("yoso"),XBo=o(" \u2014 "),Yj=a("a"),zBo=o("YosoForTokenClassification"),QBo=o(" (YOSO model)"),WBo=l(),M2=a("p"),HBo=o("The model is set in evaluation mode by default using "),nce=a("code"),UBo=o("model.eval()"),JBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=a("code"),YBo=o("model.train()"),KBo=l(),lce=a("p"),ZBo=o("Examples:"),ePo=l(),f(uC.$$.fragment),gBe=l(),wd=a("h2"),E2=a("a"),ice=a("span"),f(bC.$$.fragment),oPo=l(),dce=a("span"),rPo=o("AutoModelForQuestionAnswering"),hBe=l(),nr=a("div"),f(vC.$$.fragment),tPo=l(),Ad=a("p"),aPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Kj=a("a"),nPo=o("from_pretrained()"),sPo=o(" class method or the "),Zj=a("a"),lPo=o("from_config()"),iPo=o(` class
method.`),dPo=l(),FC=a("p"),cPo=o("This class cannot be instantiated directly using "),cce=a("code"),fPo=o("__init__()"),mPo=o(" (throws an error)."),gPo=l(),Zr=a("div"),f(TC.$$.fragment),hPo=l(),fce=a("p"),pPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Po=l(),yd=a("p"),uPo=o(`Note:
Loading a model from its configuration file does `),mce=a("strong"),bPo=o("not"),vPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=a("a"),FPo=o("from_pretrained()"),TPo=o(" to load the model weights."),MPo=l(),gce=a("p"),EPo=o("Examples:"),CPo=l(),f(MC.$$.fragment),wPo=l(),Qe=a("div"),f(EC.$$.fragment),APo=l(),hce=a("p"),yPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LPo=l(),Za=a("p"),xPo=o("The model class to instantiate is selected based on the "),pce=a("code"),kPo=o("model_type"),SPo=o(` property of the config object (either
passed as an argument or loaded from `),_ce=a("code"),RPo=o("pretrained_model_name_or_path"),BPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=a("code"),PPo=o("pretrained_model_name_or_path"),$Po=o(":"),IPo=l(),R=a("ul"),C2=a("li"),bce=a("strong"),qPo=o("albert"),NPo=o(" \u2014 "),oD=a("a"),jPo=o("AlbertForQuestionAnswering"),DPo=o(" (ALBERT model)"),GPo=l(),w2=a("li"),vce=a("strong"),OPo=o("bart"),VPo=o(" \u2014 "),rD=a("a"),XPo=o("BartForQuestionAnswering"),zPo=o(" (BART model)"),QPo=l(),A2=a("li"),Fce=a("strong"),WPo=o("bert"),HPo=o(" \u2014 "),tD=a("a"),UPo=o("BertForQuestionAnswering"),JPo=o(" (BERT model)"),YPo=l(),y2=a("li"),Tce=a("strong"),KPo=o("big_bird"),ZPo=o(" \u2014 "),aD=a("a"),e$o=o("BigBirdForQuestionAnswering"),o$o=o(" (BigBird model)"),r$o=l(),L2=a("li"),Mce=a("strong"),t$o=o("bigbird_pegasus"),a$o=o(" \u2014 "),nD=a("a"),n$o=o("BigBirdPegasusForQuestionAnswering"),s$o=o(" (BigBirdPegasus model)"),l$o=l(),x2=a("li"),Ece=a("strong"),i$o=o("camembert"),d$o=o(" \u2014 "),sD=a("a"),c$o=o("CamembertForQuestionAnswering"),f$o=o(" (CamemBERT model)"),m$o=l(),k2=a("li"),Cce=a("strong"),g$o=o("canine"),h$o=o(" \u2014 "),lD=a("a"),p$o=o("CanineForQuestionAnswering"),_$o=o(" (Canine model)"),u$o=l(),S2=a("li"),wce=a("strong"),b$o=o("convbert"),v$o=o(" \u2014 "),iD=a("a"),F$o=o("ConvBertForQuestionAnswering"),T$o=o(" (ConvBERT model)"),M$o=l(),R2=a("li"),Ace=a("strong"),E$o=o("data2vec-text"),C$o=o(" \u2014 "),dD=a("a"),w$o=o("Data2VecTextForQuestionAnswering"),A$o=o(" (Data2VecText model)"),y$o=l(),B2=a("li"),yce=a("strong"),L$o=o("deberta"),x$o=o(" \u2014 "),cD=a("a"),k$o=o("DebertaForQuestionAnswering"),S$o=o(" (DeBERTa model)"),R$o=l(),P2=a("li"),Lce=a("strong"),B$o=o("deberta-v2"),P$o=o(" \u2014 "),fD=a("a"),$$o=o("DebertaV2ForQuestionAnswering"),I$o=o(" (DeBERTa-v2 model)"),q$o=l(),$2=a("li"),xce=a("strong"),N$o=o("distilbert"),j$o=o(" \u2014 "),mD=a("a"),D$o=o("DistilBertForQuestionAnswering"),G$o=o(" (DistilBERT model)"),O$o=l(),I2=a("li"),kce=a("strong"),V$o=o("electra"),X$o=o(" \u2014 "),gD=a("a"),z$o=o("ElectraForQuestionAnswering"),Q$o=o(" (ELECTRA model)"),W$o=l(),q2=a("li"),Sce=a("strong"),H$o=o("flaubert"),U$o=o(" \u2014 "),hD=a("a"),J$o=o("FlaubertForQuestionAnsweringSimple"),Y$o=o(" (FlauBERT model)"),K$o=l(),N2=a("li"),Rce=a("strong"),Z$o=o("fnet"),eIo=o(" \u2014 "),pD=a("a"),oIo=o("FNetForQuestionAnswering"),rIo=o(" (FNet model)"),tIo=l(),j2=a("li"),Bce=a("strong"),aIo=o("funnel"),nIo=o(" \u2014 "),_D=a("a"),sIo=o("FunnelForQuestionAnswering"),lIo=o(" (Funnel Transformer model)"),iIo=l(),D2=a("li"),Pce=a("strong"),dIo=o("gptj"),cIo=o(" \u2014 "),uD=a("a"),fIo=o("GPTJForQuestionAnswering"),mIo=o(" (GPT-J model)"),gIo=l(),G2=a("li"),$ce=a("strong"),hIo=o("ibert"),pIo=o(" \u2014 "),bD=a("a"),_Io=o("IBertForQuestionAnswering"),uIo=o(" (I-BERT model)"),bIo=l(),O2=a("li"),Ice=a("strong"),vIo=o("layoutlmv2"),FIo=o(" \u2014 "),vD=a("a"),TIo=o("LayoutLMv2ForQuestionAnswering"),MIo=o(" (LayoutLMv2 model)"),EIo=l(),V2=a("li"),qce=a("strong"),CIo=o("led"),wIo=o(" \u2014 "),FD=a("a"),AIo=o("LEDForQuestionAnswering"),yIo=o(" (LED model)"),LIo=l(),X2=a("li"),Nce=a("strong"),xIo=o("longformer"),kIo=o(" \u2014 "),TD=a("a"),SIo=o("LongformerForQuestionAnswering"),RIo=o(" (Longformer model)"),BIo=l(),z2=a("li"),jce=a("strong"),PIo=o("lxmert"),$Io=o(" \u2014 "),MD=a("a"),IIo=o("LxmertForQuestionAnswering"),qIo=o(" (LXMERT model)"),NIo=l(),Q2=a("li"),Dce=a("strong"),jIo=o("mbart"),DIo=o(" \u2014 "),ED=a("a"),GIo=o("MBartForQuestionAnswering"),OIo=o(" (mBART model)"),VIo=l(),W2=a("li"),Gce=a("strong"),XIo=o("megatron-bert"),zIo=o(" \u2014 "),CD=a("a"),QIo=o("MegatronBertForQuestionAnswering"),WIo=o(" (MegatronBert model)"),HIo=l(),H2=a("li"),Oce=a("strong"),UIo=o("mobilebert"),JIo=o(" \u2014 "),wD=a("a"),YIo=o("MobileBertForQuestionAnswering"),KIo=o(" (MobileBERT model)"),ZIo=l(),U2=a("li"),Vce=a("strong"),eqo=o("mpnet"),oqo=o(" \u2014 "),AD=a("a"),rqo=o("MPNetForQuestionAnswering"),tqo=o(" (MPNet model)"),aqo=l(),J2=a("li"),Xce=a("strong"),nqo=o("nystromformer"),sqo=o(" \u2014 "),yD=a("a"),lqo=o("NystromformerForQuestionAnswering"),iqo=o(" (Nystromformer model)"),dqo=l(),Y2=a("li"),zce=a("strong"),cqo=o("qdqbert"),fqo=o(" \u2014 "),LD=a("a"),mqo=o("QDQBertForQuestionAnswering"),gqo=o(" (QDQBert model)"),hqo=l(),K2=a("li"),Qce=a("strong"),pqo=o("reformer"),_qo=o(" \u2014 "),xD=a("a"),uqo=o("ReformerForQuestionAnswering"),bqo=o(" (Reformer model)"),vqo=l(),Z2=a("li"),Wce=a("strong"),Fqo=o("rembert"),Tqo=o(" \u2014 "),kD=a("a"),Mqo=o("RemBertForQuestionAnswering"),Eqo=o(" (RemBERT model)"),Cqo=l(),ev=a("li"),Hce=a("strong"),wqo=o("roberta"),Aqo=o(" \u2014 "),SD=a("a"),yqo=o("RobertaForQuestionAnswering"),Lqo=o(" (RoBERTa model)"),xqo=l(),ov=a("li"),Uce=a("strong"),kqo=o("roformer"),Sqo=o(" \u2014 "),RD=a("a"),Rqo=o("RoFormerForQuestionAnswering"),Bqo=o(" (RoFormer model)"),Pqo=l(),rv=a("li"),Jce=a("strong"),$qo=o("splinter"),Iqo=o(" \u2014 "),BD=a("a"),qqo=o("SplinterForQuestionAnswering"),Nqo=o(" (Splinter model)"),jqo=l(),tv=a("li"),Yce=a("strong"),Dqo=o("squeezebert"),Gqo=o(" \u2014 "),PD=a("a"),Oqo=o("SqueezeBertForQuestionAnswering"),Vqo=o(" (SqueezeBERT model)"),Xqo=l(),av=a("li"),Kce=a("strong"),zqo=o("xlm"),Qqo=o(" \u2014 "),$D=a("a"),Wqo=o("XLMForQuestionAnsweringSimple"),Hqo=o(" (XLM model)"),Uqo=l(),nv=a("li"),Zce=a("strong"),Jqo=o("xlm-roberta"),Yqo=o(" \u2014 "),ID=a("a"),Kqo=o("XLMRobertaForQuestionAnswering"),Zqo=o(" (XLM-RoBERTa model)"),eNo=l(),sv=a("li"),efe=a("strong"),oNo=o("xlm-roberta-xl"),rNo=o(" \u2014 "),qD=a("a"),tNo=o("XLMRobertaXLForQuestionAnswering"),aNo=o(" (XLM-RoBERTa-XL model)"),nNo=l(),lv=a("li"),ofe=a("strong"),sNo=o("xlnet"),lNo=o(" \u2014 "),ND=a("a"),iNo=o("XLNetForQuestionAnsweringSimple"),dNo=o(" (XLNet model)"),cNo=l(),iv=a("li"),rfe=a("strong"),fNo=o("yoso"),mNo=o(" \u2014 "),jD=a("a"),gNo=o("YosoForQuestionAnswering"),hNo=o(" (YOSO model)"),pNo=l(),dv=a("p"),_No=o("The model is set in evaluation mode by default using "),tfe=a("code"),uNo=o("model.eval()"),bNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=a("code"),vNo=o("model.train()"),FNo=l(),nfe=a("p"),TNo=o("Examples:"),MNo=l(),f(CC.$$.fragment),pBe=l(),Ld=a("h2"),cv=a("a"),sfe=a("span"),f(wC.$$.fragment),ENo=l(),lfe=a("span"),CNo=o("AutoModelForTableQuestionAnswering"),_Be=l(),sr=a("div"),f(AC.$$.fragment),wNo=l(),xd=a("p"),ANo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DD=a("a"),yNo=o("from_pretrained()"),LNo=o(" class method or the "),GD=a("a"),xNo=o("from_config()"),kNo=o(` class
method.`),SNo=l(),yC=a("p"),RNo=o("This class cannot be instantiated directly using "),ife=a("code"),BNo=o("__init__()"),PNo=o(" (throws an error)."),$No=l(),et=a("div"),f(LC.$$.fragment),INo=l(),dfe=a("p"),qNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),NNo=l(),kd=a("p"),jNo=o(`Note:
Loading a model from its configuration file does `),cfe=a("strong"),DNo=o("not"),GNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),ONo=o("from_pretrained()"),VNo=o(" to load the model weights."),XNo=l(),ffe=a("p"),zNo=o("Examples:"),QNo=l(),f(xC.$$.fragment),WNo=l(),We=a("div"),f(kC.$$.fragment),HNo=l(),mfe=a("p"),UNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),JNo=l(),en=a("p"),YNo=o("The model class to instantiate is selected based on the "),gfe=a("code"),KNo=o("model_type"),ZNo=o(` property of the config object (either
passed as an argument or loaded from `),hfe=a("code"),ejo=o("pretrained_model_name_or_path"),ojo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),rjo=o("pretrained_model_name_or_path"),tjo=o(":"),ajo=l(),_fe=a("ul"),fv=a("li"),ufe=a("strong"),njo=o("tapas"),sjo=o(" \u2014 "),VD=a("a"),ljo=o("TapasForQuestionAnswering"),ijo=o(" (TAPAS model)"),djo=l(),mv=a("p"),cjo=o("The model is set in evaluation mode by default using "),bfe=a("code"),fjo=o("model.eval()"),mjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),gjo=o("model.train()"),hjo=l(),Ffe=a("p"),pjo=o("Examples:"),_jo=l(),f(SC.$$.fragment),uBe=l(),Sd=a("h2"),gv=a("a"),Tfe=a("span"),f(RC.$$.fragment),ujo=l(),Mfe=a("span"),bjo=o("AutoModelForImageClassification"),bBe=l(),lr=a("div"),f(BC.$$.fragment),vjo=l(),Rd=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XD=a("a"),Tjo=o("from_pretrained()"),Mjo=o(" class method or the "),zD=a("a"),Ejo=o("from_config()"),Cjo=o(` class
method.`),wjo=l(),PC=a("p"),Ajo=o("This class cannot be instantiated directly using "),Efe=a("code"),yjo=o("__init__()"),Ljo=o(" (throws an error)."),xjo=l(),ot=a("div"),f($C.$$.fragment),kjo=l(),Cfe=a("p"),Sjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Rjo=l(),Bd=a("p"),Bjo=o(`Note:
Loading a model from its configuration file does `),wfe=a("strong"),Pjo=o("not"),$jo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),Ijo=o("from_pretrained()"),qjo=o(" to load the model weights."),Njo=l(),Afe=a("p"),jjo=o("Examples:"),Djo=l(),f(IC.$$.fragment),Gjo=l(),He=a("div"),f(qC.$$.fragment),Ojo=l(),yfe=a("p"),Vjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Xjo=l(),on=a("p"),zjo=o("The model class to instantiate is selected based on the "),Lfe=a("code"),Qjo=o("model_type"),Wjo=o(` property of the config object (either
passed as an argument or loaded from `),xfe=a("code"),Hjo=o("pretrained_model_name_or_path"),Ujo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(":"),Kjo=l(),de=a("ul"),hv=a("li"),Sfe=a("strong"),Zjo=o("beit"),eDo=o(" \u2014 "),WD=a("a"),oDo=o("BeitForImageClassification"),rDo=o(" (BEiT model)"),tDo=l(),pv=a("li"),Rfe=a("strong"),aDo=o("convnext"),nDo=o(" \u2014 "),HD=a("a"),sDo=o("ConvNextForImageClassification"),lDo=o(" (ConvNext model)"),iDo=l(),_v=a("li"),Bfe=a("strong"),dDo=o("data2vec-vision"),cDo=o(" \u2014 "),UD=a("a"),fDo=o("Data2VecVisionForImageClassification"),mDo=o(" (Data2VecVision model)"),gDo=l(),Os=a("li"),Pfe=a("strong"),hDo=o("deit"),pDo=o(" \u2014 "),JD=a("a"),_Do=o("DeiTForImageClassification"),uDo=o(" or "),YD=a("a"),bDo=o("DeiTForImageClassificationWithTeacher"),vDo=o(" (DeiT model)"),FDo=l(),uv=a("li"),$fe=a("strong"),TDo=o("imagegpt"),MDo=o(" \u2014 "),KD=a("a"),EDo=o("ImageGPTForImageClassification"),CDo=o(" (ImageGPT model)"),wDo=l(),ma=a("li"),Ife=a("strong"),ADo=o("perceiver"),yDo=o(" \u2014 "),ZD=a("a"),LDo=o("PerceiverForImageClassificationLearned"),xDo=o(" or "),eG=a("a"),kDo=o("PerceiverForImageClassificationFourier"),SDo=o(" or "),oG=a("a"),RDo=o("PerceiverForImageClassificationConvProcessing"),BDo=o(" (Perceiver model)"),PDo=l(),bv=a("li"),qfe=a("strong"),$Do=o("poolformer"),IDo=o(" \u2014 "),rG=a("a"),qDo=o("PoolFormerForImageClassification"),NDo=o(" (PoolFormer model)"),jDo=l(),vv=a("li"),Nfe=a("strong"),DDo=o("regnet"),GDo=o(" \u2014 "),tG=a("a"),ODo=o("RegNetForImageClassification"),VDo=o(" (RegNet model)"),XDo=l(),Fv=a("li"),jfe=a("strong"),zDo=o("resnet"),QDo=o(" \u2014 "),aG=a("a"),WDo=o("ResNetForImageClassification"),HDo=o(" (ResNet model)"),UDo=l(),Tv=a("li"),Dfe=a("strong"),JDo=o("segformer"),YDo=o(" \u2014 "),nG=a("a"),KDo=o("SegformerForImageClassification"),ZDo=o(" (SegFormer model)"),eGo=l(),Mv=a("li"),Gfe=a("strong"),oGo=o("swin"),rGo=o(" \u2014 "),sG=a("a"),tGo=o("SwinForImageClassification"),aGo=o(" (Swin model)"),nGo=l(),Ev=a("li"),Ofe=a("strong"),sGo=o("van"),lGo=o(" \u2014 "),lG=a("a"),iGo=o("VanForImageClassification"),dGo=o(" (VAN model)"),cGo=l(),Cv=a("li"),Vfe=a("strong"),fGo=o("vit"),mGo=o(" \u2014 "),iG=a("a"),gGo=o("ViTForImageClassification"),hGo=o(" (ViT model)"),pGo=l(),wv=a("p"),_Go=o("The model is set in evaluation mode by default using "),Xfe=a("code"),uGo=o("model.eval()"),bGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=a("code"),vGo=o("model.train()"),FGo=l(),Qfe=a("p"),TGo=o("Examples:"),MGo=l(),f(NC.$$.fragment),vBe=l(),Pd=a("h2"),Av=a("a"),Wfe=a("span"),f(jC.$$.fragment),EGo=l(),Hfe=a("span"),CGo=o("AutoModelForVision2Seq"),FBe=l(),ir=a("div"),f(DC.$$.fragment),wGo=l(),$d=a("p"),AGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dG=a("a"),yGo=o("from_pretrained()"),LGo=o(" class method or the "),cG=a("a"),xGo=o("from_config()"),kGo=o(` class
method.`),SGo=l(),GC=a("p"),RGo=o("This class cannot be instantiated directly using "),Ufe=a("code"),BGo=o("__init__()"),PGo=o(" (throws an error)."),$Go=l(),rt=a("div"),f(OC.$$.fragment),IGo=l(),Jfe=a("p"),qGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NGo=l(),Id=a("p"),jGo=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),DGo=o("not"),GGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),OGo=o("from_pretrained()"),VGo=o(" to load the model weights."),XGo=l(),Kfe=a("p"),zGo=o("Examples:"),QGo=l(),f(VC.$$.fragment),WGo=l(),Ue=a("div"),f(XC.$$.fragment),HGo=l(),Zfe=a("p"),UGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JGo=l(),rn=a("p"),YGo=o("The model class to instantiate is selected based on the "),eme=a("code"),KGo=o("model_type"),ZGo=o(` property of the config object (either
passed as an argument or loaded from `),ome=a("code"),eOo=o("pretrained_model_name_or_path"),oOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=a("code"),rOo=o("pretrained_model_name_or_path"),tOo=o(":"),aOo=l(),tme=a("ul"),yv=a("li"),ame=a("strong"),nOo=o("vision-encoder-decoder"),sOo=o(" \u2014 "),mG=a("a"),lOo=o("VisionEncoderDecoderModel"),iOo=o(" (Vision Encoder decoder model)"),dOo=l(),Lv=a("p"),cOo=o("The model is set in evaluation mode by default using "),nme=a("code"),fOo=o("model.eval()"),mOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),gOo=o("model.train()"),hOo=l(),lme=a("p"),pOo=o("Examples:"),_Oo=l(),f(zC.$$.fragment),TBe=l(),qd=a("h2"),xv=a("a"),ime=a("span"),f(QC.$$.fragment),uOo=l(),dme=a("span"),bOo=o("AutoModelForAudioClassification"),MBe=l(),dr=a("div"),f(WC.$$.fragment),vOo=l(),Nd=a("p"),FOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gG=a("a"),TOo=o("from_pretrained()"),MOo=o(" class method or the "),hG=a("a"),EOo=o("from_config()"),COo=o(` class
method.`),wOo=l(),HC=a("p"),AOo=o("This class cannot be instantiated directly using "),cme=a("code"),yOo=o("__init__()"),LOo=o(" (throws an error)."),xOo=l(),tt=a("div"),f(UC.$$.fragment),kOo=l(),fme=a("p"),SOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ROo=l(),jd=a("p"),BOo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),POo=o("not"),$Oo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=a("a"),IOo=o("from_pretrained()"),qOo=o(" to load the model weights."),NOo=l(),gme=a("p"),jOo=o("Examples:"),DOo=l(),f(JC.$$.fragment),GOo=l(),Je=a("div"),f(YC.$$.fragment),OOo=l(),hme=a("p"),VOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XOo=l(),tn=a("p"),zOo=o("The model class to instantiate is selected based on the "),pme=a("code"),QOo=o("model_type"),WOo=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),HOo=o("pretrained_model_name_or_path"),UOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),JOo=o("pretrained_model_name_or_path"),YOo=o(":"),KOo=l(),Se=a("ul"),kv=a("li"),bme=a("strong"),ZOo=o("data2vec-audio"),eVo=o(" \u2014 "),_G=a("a"),oVo=o("Data2VecAudioForSequenceClassification"),rVo=o(" (Data2VecAudio model)"),tVo=l(),Sv=a("li"),vme=a("strong"),aVo=o("hubert"),nVo=o(" \u2014 "),uG=a("a"),sVo=o("HubertForSequenceClassification"),lVo=o(" (Hubert model)"),iVo=l(),Rv=a("li"),Fme=a("strong"),dVo=o("sew"),cVo=o(" \u2014 "),bG=a("a"),fVo=o("SEWForSequenceClassification"),mVo=o(" (SEW model)"),gVo=l(),Bv=a("li"),Tme=a("strong"),hVo=o("sew-d"),pVo=o(" \u2014 "),vG=a("a"),_Vo=o("SEWDForSequenceClassification"),uVo=o(" (SEW-D model)"),bVo=l(),Pv=a("li"),Mme=a("strong"),vVo=o("unispeech"),FVo=o(" \u2014 "),FG=a("a"),TVo=o("UniSpeechForSequenceClassification"),MVo=o(" (UniSpeech model)"),EVo=l(),$v=a("li"),Eme=a("strong"),CVo=o("unispeech-sat"),wVo=o(" \u2014 "),TG=a("a"),AVo=o("UniSpeechSatForSequenceClassification"),yVo=o(" (UniSpeechSat model)"),LVo=l(),Iv=a("li"),Cme=a("strong"),xVo=o("wav2vec2"),kVo=o(" \u2014 "),MG=a("a"),SVo=o("Wav2Vec2ForSequenceClassification"),RVo=o(" (Wav2Vec2 model)"),BVo=l(),qv=a("li"),wme=a("strong"),PVo=o("wavlm"),$Vo=o(" \u2014 "),EG=a("a"),IVo=o("WavLMForSequenceClassification"),qVo=o(" (WavLM model)"),NVo=l(),Nv=a("p"),jVo=o("The model is set in evaluation mode by default using "),Ame=a("code"),DVo=o("model.eval()"),GVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),OVo=o("model.train()"),VVo=l(),Lme=a("p"),XVo=o("Examples:"),zVo=l(),f(KC.$$.fragment),EBe=l(),Dd=a("h2"),jv=a("a"),xme=a("span"),f(ZC.$$.fragment),QVo=l(),kme=a("span"),WVo=o("AutoModelForAudioFrameClassification"),CBe=l(),cr=a("div"),f(ew.$$.fragment),HVo=l(),Gd=a("p"),UVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CG=a("a"),JVo=o("from_pretrained()"),YVo=o(" class method or the "),wG=a("a"),KVo=o("from_config()"),ZVo=o(` class
method.`),eXo=l(),ow=a("p"),oXo=o("This class cannot be instantiated directly using "),Sme=a("code"),rXo=o("__init__()"),tXo=o(" (throws an error)."),aXo=l(),at=a("div"),f(rw.$$.fragment),nXo=l(),Rme=a("p"),sXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),lXo=l(),Od=a("p"),iXo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),dXo=o("not"),cXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=a("a"),fXo=o("from_pretrained()"),mXo=o(" to load the model weights."),gXo=l(),Pme=a("p"),hXo=o("Examples:"),pXo=l(),f(tw.$$.fragment),_Xo=l(),Ye=a("div"),f(aw.$$.fragment),uXo=l(),$me=a("p"),bXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),vXo=l(),an=a("p"),FXo=o("The model class to instantiate is selected based on the "),Ime=a("code"),TXo=o("model_type"),MXo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),EXo=o("pretrained_model_name_or_path"),CXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),wXo=o("pretrained_model_name_or_path"),AXo=o(":"),yXo=l(),nn=a("ul"),Dv=a("li"),jme=a("strong"),LXo=o("data2vec-audio"),xXo=o(" \u2014 "),yG=a("a"),kXo=o("Data2VecAudioForAudioFrameClassification"),SXo=o(" (Data2VecAudio model)"),RXo=l(),Gv=a("li"),Dme=a("strong"),BXo=o("unispeech-sat"),PXo=o(" \u2014 "),LG=a("a"),$Xo=o("UniSpeechSatForAudioFrameClassification"),IXo=o(" (UniSpeechSat model)"),qXo=l(),Ov=a("li"),Gme=a("strong"),NXo=o("wav2vec2"),jXo=o(" \u2014 "),xG=a("a"),DXo=o("Wav2Vec2ForAudioFrameClassification"),GXo=o(" (Wav2Vec2 model)"),OXo=l(),Vv=a("li"),Ome=a("strong"),VXo=o("wavlm"),XXo=o(" \u2014 "),kG=a("a"),zXo=o("WavLMForAudioFrameClassification"),QXo=o(" (WavLM model)"),WXo=l(),Xv=a("p"),HXo=o("The model is set in evaluation mode by default using "),Vme=a("code"),UXo=o("model.eval()"),JXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),YXo=o("model.train()"),KXo=l(),zme=a("p"),ZXo=o("Examples:"),ezo=l(),f(nw.$$.fragment),wBe=l(),Vd=a("h2"),zv=a("a"),Qme=a("span"),f(sw.$$.fragment),ozo=l(),Wme=a("span"),rzo=o("AutoModelForCTC"),ABe=l(),fr=a("div"),f(lw.$$.fragment),tzo=l(),Xd=a("p"),azo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SG=a("a"),nzo=o("from_pretrained()"),szo=o(" class method or the "),RG=a("a"),lzo=o("from_config()"),izo=o(` class
method.`),dzo=l(),iw=a("p"),czo=o("This class cannot be instantiated directly using "),Hme=a("code"),fzo=o("__init__()"),mzo=o(" (throws an error)."),gzo=l(),nt=a("div"),f(dw.$$.fragment),hzo=l(),Ume=a("p"),pzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_zo=l(),zd=a("p"),uzo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),bzo=o("not"),vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" to load the model weights."),Mzo=l(),Yme=a("p"),Ezo=o("Examples:"),Czo=l(),f(cw.$$.fragment),wzo=l(),Ke=a("div"),f(fw.$$.fragment),Azo=l(),Kme=a("p"),yzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Lzo=l(),sn=a("p"),xzo=o("The model class to instantiate is selected based on the "),Zme=a("code"),kzo=o("model_type"),Szo=o(` property of the config object (either
passed as an argument or loaded from `),ege=a("code"),Rzo=o("pretrained_model_name_or_path"),Bzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=a("code"),Pzo=o("pretrained_model_name_or_path"),$zo=o(":"),Izo=l(),Re=a("ul"),Qv=a("li"),rge=a("strong"),qzo=o("data2vec-audio"),Nzo=o(" \u2014 "),PG=a("a"),jzo=o("Data2VecAudioForCTC"),Dzo=o(" (Data2VecAudio model)"),Gzo=l(),Wv=a("li"),tge=a("strong"),Ozo=o("hubert"),Vzo=o(" \u2014 "),$G=a("a"),Xzo=o("HubertForCTC"),zzo=o(" (Hubert model)"),Qzo=l(),Hv=a("li"),age=a("strong"),Wzo=o("sew"),Hzo=o(" \u2014 "),IG=a("a"),Uzo=o("SEWForCTC"),Jzo=o(" (SEW model)"),Yzo=l(),Uv=a("li"),nge=a("strong"),Kzo=o("sew-d"),Zzo=o(" \u2014 "),qG=a("a"),eQo=o("SEWDForCTC"),oQo=o(" (SEW-D model)"),rQo=l(),Jv=a("li"),sge=a("strong"),tQo=o("unispeech"),aQo=o(" \u2014 "),NG=a("a"),nQo=o("UniSpeechForCTC"),sQo=o(" (UniSpeech model)"),lQo=l(),Yv=a("li"),lge=a("strong"),iQo=o("unispeech-sat"),dQo=o(" \u2014 "),jG=a("a"),cQo=o("UniSpeechSatForCTC"),fQo=o(" (UniSpeechSat model)"),mQo=l(),Kv=a("li"),ige=a("strong"),gQo=o("wav2vec2"),hQo=o(" \u2014 "),DG=a("a"),pQo=o("Wav2Vec2ForCTC"),_Qo=o(" (Wav2Vec2 model)"),uQo=l(),Zv=a("li"),dge=a("strong"),bQo=o("wavlm"),vQo=o(" \u2014 "),GG=a("a"),FQo=o("WavLMForCTC"),TQo=o(" (WavLM model)"),MQo=l(),eF=a("p"),EQo=o("The model is set in evaluation mode by default using "),cge=a("code"),CQo=o("model.eval()"),wQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=a("code"),AQo=o("model.train()"),yQo=l(),mge=a("p"),LQo=o("Examples:"),xQo=l(),f(mw.$$.fragment),yBe=l(),Qd=a("h2"),oF=a("a"),gge=a("span"),f(gw.$$.fragment),kQo=l(),hge=a("span"),SQo=o("AutoModelForSpeechSeq2Seq"),LBe=l(),mr=a("div"),f(hw.$$.fragment),RQo=l(),Wd=a("p"),BQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OG=a("a"),PQo=o("from_pretrained()"),$Qo=o(" class method or the "),VG=a("a"),IQo=o("from_config()"),qQo=o(` class
method.`),NQo=l(),pw=a("p"),jQo=o("This class cannot be instantiated directly using "),pge=a("code"),DQo=o("__init__()"),GQo=o(" (throws an error)."),OQo=l(),st=a("div"),f(_w.$$.fragment),VQo=l(),_ge=a("p"),XQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zQo=l(),Hd=a("p"),QQo=o(`Note:
Loading a model from its configuration file does `),uge=a("strong"),WQo=o("not"),HQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),UQo=o("from_pretrained()"),JQo=o(" to load the model weights."),YQo=l(),bge=a("p"),KQo=o("Examples:"),ZQo=l(),f(uw.$$.fragment),eWo=l(),Ze=a("div"),f(bw.$$.fragment),oWo=l(),vge=a("p"),rWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tWo=l(),ln=a("p"),aWo=o("The model class to instantiate is selected based on the "),Fge=a("code"),nWo=o("model_type"),sWo=o(` property of the config object (either
passed as an argument or loaded from `),Tge=a("code"),lWo=o("pretrained_model_name_or_path"),iWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=a("code"),dWo=o("pretrained_model_name_or_path"),cWo=o(":"),fWo=l(),vw=a("ul"),rF=a("li"),Ege=a("strong"),mWo=o("speech-encoder-decoder"),gWo=o(" \u2014 "),zG=a("a"),hWo=o("SpeechEncoderDecoderModel"),pWo=o(" (Speech Encoder decoder model)"),_Wo=l(),tF=a("li"),Cge=a("strong"),uWo=o("speech_to_text"),bWo=o(" \u2014 "),QG=a("a"),vWo=o("Speech2TextForConditionalGeneration"),FWo=o(" (Speech2Text model)"),TWo=l(),aF=a("p"),MWo=o("The model is set in evaluation mode by default using "),wge=a("code"),EWo=o("model.eval()"),CWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=a("code"),wWo=o("model.train()"),AWo=l(),yge=a("p"),yWo=o("Examples:"),LWo=l(),f(Fw.$$.fragment),xBe=l(),Ud=a("h2"),nF=a("a"),Lge=a("span"),f(Tw.$$.fragment),xWo=l(),xge=a("span"),kWo=o("AutoModelForAudioXVector"),kBe=l(),gr=a("div"),f(Mw.$$.fragment),SWo=l(),Jd=a("p"),RWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WG=a("a"),BWo=o("from_pretrained()"),PWo=o(" class method or the "),HG=a("a"),$Wo=o("from_config()"),IWo=o(` class
method.`),qWo=l(),Ew=a("p"),NWo=o("This class cannot be instantiated directly using "),kge=a("code"),jWo=o("__init__()"),DWo=o(" (throws an error)."),GWo=l(),lt=a("div"),f(Cw.$$.fragment),OWo=l(),Sge=a("p"),VWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),XWo=l(),Yd=a("p"),zWo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),QWo=o("not"),WWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),HWo=o("from_pretrained()"),UWo=o(" to load the model weights."),JWo=l(),Bge=a("p"),YWo=o("Examples:"),KWo=l(),f(ww.$$.fragment),ZWo=l(),eo=a("div"),f(Aw.$$.fragment),eHo=l(),Pge=a("p"),oHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rHo=l(),dn=a("p"),tHo=o("The model class to instantiate is selected based on the "),$ge=a("code"),aHo=o("model_type"),nHo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),iHo=o("pretrained_model_name_or_path"),dHo=o(":"),cHo=l(),cn=a("ul"),sF=a("li"),Nge=a("strong"),fHo=o("data2vec-audio"),mHo=o(" \u2014 "),JG=a("a"),gHo=o("Data2VecAudioForXVector"),hHo=o(" (Data2VecAudio model)"),pHo=l(),lF=a("li"),jge=a("strong"),_Ho=o("unispeech-sat"),uHo=o(" \u2014 "),YG=a("a"),bHo=o("UniSpeechSatForXVector"),vHo=o(" (UniSpeechSat model)"),FHo=l(),iF=a("li"),Dge=a("strong"),THo=o("wav2vec2"),MHo=o(" \u2014 "),KG=a("a"),EHo=o("Wav2Vec2ForXVector"),CHo=o(" (Wav2Vec2 model)"),wHo=l(),dF=a("li"),Gge=a("strong"),AHo=o("wavlm"),yHo=o(" \u2014 "),ZG=a("a"),LHo=o("WavLMForXVector"),xHo=o(" (WavLM model)"),kHo=l(),cF=a("p"),SHo=o("The model is set in evaluation mode by default using "),Oge=a("code"),RHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),PHo=o("model.train()"),$Ho=l(),Xge=a("p"),IHo=o("Examples:"),qHo=l(),f(yw.$$.fragment),SBe=l(),Kd=a("h2"),fF=a("a"),zge=a("span"),f(Lw.$$.fragment),NHo=l(),Qge=a("span"),jHo=o("AutoModelForMaskedImageModeling"),RBe=l(),hr=a("div"),f(xw.$$.fragment),DHo=l(),Zd=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eO=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),oO=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),kw=a("p"),WHo=o("This class cannot be instantiated directly using "),Wge=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),it=a("div"),f(Sw.$$.fragment),YHo=l(),Hge=a("p"),KHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ZHo=l(),ec=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),Jge=a("p"),sUo=o("Examples:"),lUo=l(),f(Rw.$$.fragment),iUo=l(),oo=a("div"),f(Bw.$$.fragment),dUo=l(),Yge=a("p"),cUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),fUo=l(),fn=a("p"),mUo=o("The model class to instantiate is selected based on the "),Kge=a("code"),gUo=o("model_type"),hUo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(":"),vUo=l(),oc=a("ul"),mF=a("li"),ohe=a("strong"),FUo=o("deit"),TUo=o(" \u2014 "),tO=a("a"),MUo=o("DeiTForMaskedImageModeling"),EUo=o(" (DeiT model)"),CUo=l(),gF=a("li"),rhe=a("strong"),wUo=o("swin"),AUo=o(" \u2014 "),aO=a("a"),yUo=o("SwinForMaskedImageModeling"),LUo=o(" (Swin model)"),xUo=l(),hF=a("li"),the=a("strong"),kUo=o("vit"),SUo=o(" \u2014 "),nO=a("a"),RUo=o("ViTForMaskedImageModeling"),BUo=o(" (ViT model)"),PUo=l(),pF=a("p"),$Uo=o("The model is set in evaluation mode by default using "),ahe=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=a("code"),NUo=o("model.train()"),jUo=l(),she=a("p"),DUo=o("Examples:"),GUo=l(),f(Pw.$$.fragment),BBe=l(),rc=a("h2"),_F=a("a"),lhe=a("span"),f($w.$$.fragment),OUo=l(),ihe=a("span"),VUo=o("AutoModelForObjectDetection"),PBe=l(),pr=a("div"),f(Iw.$$.fragment),XUo=l(),tc=a("p"),zUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sO=a("a"),QUo=o("from_pretrained()"),WUo=o(" class method or the "),lO=a("a"),HUo=o("from_config()"),UUo=o(` class
method.`),JUo=l(),qw=a("p"),YUo=o("This class cannot be instantiated directly using "),dhe=a("code"),KUo=o("__init__()"),ZUo=o(" (throws an error)."),eJo=l(),dt=a("div"),f(Nw.$$.fragment),oJo=l(),che=a("p"),rJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tJo=l(),ac=a("p"),aJo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),nJo=o("not"),sJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),lJo=o("from_pretrained()"),iJo=o(" to load the model weights."),dJo=l(),mhe=a("p"),cJo=o("Examples:"),fJo=l(),f(jw.$$.fragment),mJo=l(),ro=a("div"),f(Dw.$$.fragment),gJo=l(),ghe=a("p"),hJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pJo=l(),mn=a("p"),_Jo=o("The model class to instantiate is selected based on the "),hhe=a("code"),uJo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),uhe=a("ul"),uF=a("li"),bhe=a("strong"),CJo=o("detr"),wJo=o(" \u2014 "),dO=a("a"),AJo=o("DetrForObjectDetection"),yJo=o(" (DETR model)"),LJo=l(),bF=a("p"),xJo=o("The model is set in evaluation mode by default using "),vhe=a("code"),kJo=o("model.eval()"),SJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),RJo=o("model.train()"),BJo=l(),The=a("p"),PJo=o("Examples:"),$Jo=l(),f(Gw.$$.fragment),$Be=l(),nc=a("h2"),vF=a("a"),Mhe=a("span"),f(Ow.$$.fragment),IJo=l(),Ehe=a("span"),qJo=o("AutoModelForImageSegmentation"),IBe=l(),_r=a("div"),f(Vw.$$.fragment),NJo=l(),sc=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cO=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),fO=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),Xw=a("p"),zJo=o("This class cannot be instantiated directly using "),Che=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),ct=a("div"),f(zw.$$.fragment),UJo=l(),whe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YJo=l(),lc=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),yhe=a("p"),aYo=o("Examples:"),nYo=l(),f(Qw.$$.fragment),sYo=l(),to=a("div"),f(Ww.$$.fragment),lYo=l(),Lhe=a("p"),iYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),dYo=l(),gn=a("p"),cYo=o("The model class to instantiate is selected based on the "),xhe=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(":"),uYo=l(),Rhe=a("ul"),FF=a("li"),Bhe=a("strong"),bYo=o("detr"),vYo=o(" \u2014 "),gO=a("a"),FYo=o("DetrForSegmentation"),TYo=o(" (DETR model)"),MYo=l(),TF=a("p"),EYo=o("The model is set in evaluation mode by default using "),Phe=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),AYo=o("model.train()"),yYo=l(),Ihe=a("p"),LYo=o("Examples:"),xYo=l(),f(Hw.$$.fragment),qBe=l(),ic=a("h2"),MF=a("a"),qhe=a("span"),f(Uw.$$.fragment),kYo=l(),Nhe=a("span"),SYo=o("AutoModelForSemanticSegmentation"),NBe=l(),ur=a("div"),f(Jw.$$.fragment),RYo=l(),dc=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hO=a("a"),PYo=o("from_pretrained()"),$Yo=o(" class method or the "),pO=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),Yw=a("p"),jYo=o("This class cannot be instantiated directly using "),jhe=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),ft=a("div"),f(Kw.$$.fragment),VYo=l(),Dhe=a("p"),XYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zYo=l(),cc=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),Ohe=a("p"),KYo=o("Examples:"),ZYo=l(),f(Zw.$$.fragment),eKo=l(),ao=a("div"),f(eA.$$.fragment),oKo=l(),Vhe=a("p"),rKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),tKo=l(),hn=a("p"),aKo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),pn=a("ul"),EF=a("li"),Whe=a("strong"),mKo=o("beit"),gKo=o(" \u2014 "),uO=a("a"),hKo=o("BeitForSemanticSegmentation"),pKo=o(" (BEiT model)"),_Ko=l(),CF=a("li"),Hhe=a("strong"),uKo=o("data2vec-vision"),bKo=o(" \u2014 "),bO=a("a"),vKo=o("Data2VecVisionForSemanticSegmentation"),FKo=o(" (Data2VecVision model)"),TKo=l(),wF=a("li"),Uhe=a("strong"),MKo=o("dpt"),EKo=o(" \u2014 "),vO=a("a"),CKo=o("DPTForSemanticSegmentation"),wKo=o(" (DPT model)"),AKo=l(),AF=a("li"),Jhe=a("strong"),yKo=o("segformer"),LKo=o(" \u2014 "),FO=a("a"),xKo=o("SegformerForSemanticSegmentation"),kKo=o(" (SegFormer model)"),SKo=l(),yF=a("p"),RKo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),BKo=o("model.eval()"),PKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),$Ko=o("model.train()"),IKo=l(),Zhe=a("p"),qKo=o("Examples:"),NKo=l(),f(oA.$$.fragment),jBe=l(),fc=a("h2"),LF=a("a"),epe=a("span"),f(rA.$$.fragment),jKo=l(),ope=a("span"),DKo=o("AutoModelForInstanceSegmentation"),DBe=l(),br=a("div"),f(tA.$$.fragment),GKo=l(),mc=a("p"),OKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),TO=a("a"),VKo=o("from_pretrained()"),XKo=o(" class method or the "),MO=a("a"),zKo=o("from_config()"),QKo=o(` class
method.`),WKo=l(),aA=a("p"),HKo=o("This class cannot be instantiated directly using "),rpe=a("code"),UKo=o("__init__()"),JKo=o(" (throws an error)."),YKo=l(),mt=a("div"),f(nA.$$.fragment),KKo=l(),tpe=a("p"),ZKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),eZo=l(),gc=a("p"),oZo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),rZo=o("not"),tZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=a("a"),aZo=o("from_pretrained()"),nZo=o(" to load the model weights."),sZo=l(),npe=a("p"),lZo=o("Examples:"),iZo=l(),f(sA.$$.fragment),dZo=l(),no=a("div"),f(lA.$$.fragment),cZo=l(),spe=a("p"),fZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mZo=l(),_n=a("p"),gZo=o("The model class to instantiate is selected based on the "),lpe=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),_Zo=o("pretrained_model_name_or_path"),uZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),cpe=a("ul"),xF=a("li"),fpe=a("strong"),TZo=o("maskformer"),MZo=o(" \u2014 "),CO=a("a"),EZo=o("MaskFormerForInstanceSegmentation"),CZo=o(" (MaskFormer model)"),wZo=l(),kF=a("p"),AZo=o("The model is set in evaluation mode by default using "),mpe=a("code"),yZo=o("model.eval()"),LZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=a("code"),xZo=o("model.train()"),kZo=l(),hpe=a("p"),SZo=o("Examples:"),RZo=l(),f(iA.$$.fragment),GBe=l(),hc=a("h2"),SF=a("a"),ppe=a("span"),f(dA.$$.fragment),BZo=l(),_pe=a("span"),PZo=o("TFAutoModel"),OBe=l(),vr=a("div"),f(cA.$$.fragment),$Zo=l(),pc=a("p"),IZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wO=a("a"),qZo=o("from_pretrained()"),NZo=o(" class method or the "),AO=a("a"),jZo=o("from_config()"),DZo=o(` class
method.`),GZo=l(),fA=a("p"),OZo=o("This class cannot be instantiated directly using "),upe=a("code"),VZo=o("__init__()"),XZo=o(" (throws an error)."),zZo=l(),gt=a("div"),f(mA.$$.fragment),QZo=l(),bpe=a("p"),WZo=o("Instantiates one of the base model classes of the library from a configuration."),HZo=l(),_c=a("p"),UZo=o(`Note:
Loading a model from its configuration file does `),vpe=a("strong"),JZo=o("not"),YZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),KZo=o("from_pretrained()"),ZZo=o(" to load the model weights."),eer=l(),Fpe=a("p"),oer=o("Examples:"),rer=l(),f(gA.$$.fragment),ter=l(),ho=a("div"),f(hA.$$.fragment),aer=l(),Tpe=a("p"),ner=o("Instantiate one of the base model classes of the library from a pretrained model."),ser=l(),un=a("p"),ler=o("The model class to instantiate is selected based on the "),Mpe=a("code"),ier=o("model_type"),der=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),cer=o("pretrained_model_name_or_path"),fer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),mer=o("pretrained_model_name_or_path"),ger=o(":"),her=l(),x=a("ul"),RF=a("li"),wpe=a("strong"),per=o("albert"),_er=o(" \u2014 "),LO=a("a"),uer=o("TFAlbertModel"),ber=o(" (ALBERT model)"),ver=l(),BF=a("li"),Ape=a("strong"),Fer=o("bart"),Ter=o(" \u2014 "),xO=a("a"),Mer=o("TFBartModel"),Eer=o(" (BART model)"),Cer=l(),PF=a("li"),ype=a("strong"),wer=o("bert"),Aer=o(" \u2014 "),kO=a("a"),yer=o("TFBertModel"),Ler=o(" (BERT model)"),xer=l(),$F=a("li"),Lpe=a("strong"),ker=o("blenderbot"),Ser=o(" \u2014 "),SO=a("a"),Rer=o("TFBlenderbotModel"),Ber=o(" (Blenderbot model)"),Per=l(),IF=a("li"),xpe=a("strong"),$er=o("blenderbot-small"),Ier=o(" \u2014 "),RO=a("a"),qer=o("TFBlenderbotSmallModel"),Ner=o(" (BlenderbotSmall model)"),jer=l(),qF=a("li"),kpe=a("strong"),Der=o("camembert"),Ger=o(" \u2014 "),BO=a("a"),Oer=o("TFCamembertModel"),Ver=o(" (CamemBERT model)"),Xer=l(),NF=a("li"),Spe=a("strong"),zer=o("clip"),Qer=o(" \u2014 "),PO=a("a"),Wer=o("TFCLIPModel"),Her=o(" (CLIP model)"),Uer=l(),jF=a("li"),Rpe=a("strong"),Jer=o("convbert"),Yer=o(" \u2014 "),$O=a("a"),Ker=o("TFConvBertModel"),Zer=o(" (ConvBERT model)"),eor=l(),DF=a("li"),Bpe=a("strong"),oor=o("convnext"),ror=o(" \u2014 "),IO=a("a"),tor=o("TFConvNextModel"),aor=o(" (ConvNext model)"),nor=l(),GF=a("li"),Ppe=a("strong"),sor=o("ctrl"),lor=o(" \u2014 "),qO=a("a"),ior=o("TFCTRLModel"),dor=o(" (CTRL model)"),cor=l(),OF=a("li"),$pe=a("strong"),mor=o("deberta"),gor=o(" \u2014 "),NO=a("a"),hor=o("TFDebertaModel"),por=o(" (DeBERTa model)"),_or=l(),VF=a("li"),Ipe=a("strong"),uor=o("deberta-v2"),bor=o(" \u2014 "),jO=a("a"),vor=o("TFDebertaV2Model"),For=o(" (DeBERTa-v2 model)"),Tor=l(),XF=a("li"),qpe=a("strong"),Mor=o("distilbert"),Eor=o(" \u2014 "),DO=a("a"),Cor=o("TFDistilBertModel"),wor=o(" (DistilBERT model)"),Aor=l(),zF=a("li"),Npe=a("strong"),yor=o("dpr"),Lor=o(" \u2014 "),GO=a("a"),xor=o("TFDPRQuestionEncoder"),kor=o(" (DPR model)"),Sor=l(),QF=a("li"),jpe=a("strong"),Ror=o("electra"),Bor=o(" \u2014 "),OO=a("a"),Por=o("TFElectraModel"),$or=o(" (ELECTRA model)"),Ior=l(),WF=a("li"),Dpe=a("strong"),qor=o("flaubert"),Nor=o(" \u2014 "),VO=a("a"),jor=o("TFFlaubertModel"),Dor=o(" (FlauBERT model)"),Gor=l(),Vs=a("li"),Gpe=a("strong"),Oor=o("funnel"),Vor=o(" \u2014 "),XO=a("a"),Xor=o("TFFunnelModel"),zor=o(" or "),zO=a("a"),Qor=o("TFFunnelBaseModel"),Wor=o(" (Funnel Transformer model)"),Hor=l(),HF=a("li"),Ope=a("strong"),Uor=o("gpt2"),Jor=o(" \u2014 "),QO=a("a"),Yor=o("TFGPT2Model"),Kor=o(" (OpenAI GPT-2 model)"),Zor=l(),UF=a("li"),Vpe=a("strong"),err=o("gptj"),orr=o(" \u2014 "),WO=a("a"),rrr=o("TFGPTJModel"),trr=o(" (GPT-J model)"),arr=l(),JF=a("li"),Xpe=a("strong"),nrr=o("hubert"),srr=o(" \u2014 "),HO=a("a"),lrr=o("TFHubertModel"),irr=o(" (Hubert model)"),drr=l(),YF=a("li"),zpe=a("strong"),crr=o("layoutlm"),frr=o(" \u2014 "),UO=a("a"),mrr=o("TFLayoutLMModel"),grr=o(" (LayoutLM model)"),hrr=l(),KF=a("li"),Qpe=a("strong"),prr=o("led"),_rr=o(" \u2014 "),JO=a("a"),urr=o("TFLEDModel"),brr=o(" (LED model)"),vrr=l(),ZF=a("li"),Wpe=a("strong"),Frr=o("longformer"),Trr=o(" \u2014 "),YO=a("a"),Mrr=o("TFLongformerModel"),Err=o(" (Longformer model)"),Crr=l(),eT=a("li"),Hpe=a("strong"),wrr=o("lxmert"),Arr=o(" \u2014 "),KO=a("a"),yrr=o("TFLxmertModel"),Lrr=o(" (LXMERT model)"),xrr=l(),oT=a("li"),Upe=a("strong"),krr=o("marian"),Srr=o(" \u2014 "),ZO=a("a"),Rrr=o("TFMarianModel"),Brr=o(" (Marian model)"),Prr=l(),rT=a("li"),Jpe=a("strong"),$rr=o("mbart"),Irr=o(" \u2014 "),eV=a("a"),qrr=o("TFMBartModel"),Nrr=o(" (mBART model)"),jrr=l(),tT=a("li"),Ype=a("strong"),Drr=o("mobilebert"),Grr=o(" \u2014 "),oV=a("a"),Orr=o("TFMobileBertModel"),Vrr=o(" (MobileBERT model)"),Xrr=l(),aT=a("li"),Kpe=a("strong"),zrr=o("mpnet"),Qrr=o(" \u2014 "),rV=a("a"),Wrr=o("TFMPNetModel"),Hrr=o(" (MPNet model)"),Urr=l(),nT=a("li"),Zpe=a("strong"),Jrr=o("mt5"),Yrr=o(" \u2014 "),tV=a("a"),Krr=o("TFMT5Model"),Zrr=o(" (mT5 model)"),etr=l(),sT=a("li"),e_e=a("strong"),otr=o("openai-gpt"),rtr=o(" \u2014 "),aV=a("a"),ttr=o("TFOpenAIGPTModel"),atr=o(" (OpenAI GPT model)"),ntr=l(),lT=a("li"),o_e=a("strong"),str=o("pegasus"),ltr=o(" \u2014 "),nV=a("a"),itr=o("TFPegasusModel"),dtr=o(" (Pegasus model)"),ctr=l(),iT=a("li"),r_e=a("strong"),ftr=o("rembert"),mtr=o(" \u2014 "),sV=a("a"),gtr=o("TFRemBertModel"),htr=o(" (RemBERT model)"),ptr=l(),dT=a("li"),t_e=a("strong"),_tr=o("roberta"),utr=o(" \u2014 "),lV=a("a"),btr=o("TFRobertaModel"),vtr=o(" (RoBERTa model)"),Ftr=l(),cT=a("li"),a_e=a("strong"),Ttr=o("roformer"),Mtr=o(" \u2014 "),iV=a("a"),Etr=o("TFRoFormerModel"),Ctr=o(" (RoFormer model)"),wtr=l(),fT=a("li"),n_e=a("strong"),Atr=o("speech_to_text"),ytr=o(" \u2014 "),dV=a("a"),Ltr=o("TFSpeech2TextModel"),xtr=o(" (Speech2Text model)"),ktr=l(),mT=a("li"),s_e=a("strong"),Str=o("t5"),Rtr=o(" \u2014 "),cV=a("a"),Btr=o("TFT5Model"),Ptr=o(" (T5 model)"),$tr=l(),gT=a("li"),l_e=a("strong"),Itr=o("tapas"),qtr=o(" \u2014 "),fV=a("a"),Ntr=o("TFTapasModel"),jtr=o(" (TAPAS model)"),Dtr=l(),hT=a("li"),i_e=a("strong"),Gtr=o("transfo-xl"),Otr=o(" \u2014 "),mV=a("a"),Vtr=o("TFTransfoXLModel"),Xtr=o(" (Transformer-XL model)"),ztr=l(),pT=a("li"),d_e=a("strong"),Qtr=o("vit"),Wtr=o(" \u2014 "),gV=a("a"),Htr=o("TFViTModel"),Utr=o(" (ViT model)"),Jtr=l(),_T=a("li"),c_e=a("strong"),Ytr=o("vit_mae"),Ktr=o(" \u2014 "),hV=a("a"),Ztr=o("TFViTMAEModel"),ear=o(" (ViTMAE model)"),oar=l(),uT=a("li"),f_e=a("strong"),rar=o("wav2vec2"),tar=o(" \u2014 "),pV=a("a"),aar=o("TFWav2Vec2Model"),nar=o(" (Wav2Vec2 model)"),sar=l(),bT=a("li"),m_e=a("strong"),lar=o("xlm"),iar=o(" \u2014 "),_V=a("a"),dar=o("TFXLMModel"),car=o(" (XLM model)"),far=l(),vT=a("li"),g_e=a("strong"),mar=o("xlm-roberta"),gar=o(" \u2014 "),uV=a("a"),har=o("TFXLMRobertaModel"),par=o(" (XLM-RoBERTa model)"),_ar=l(),FT=a("li"),h_e=a("strong"),uar=o("xlnet"),bar=o(" \u2014 "),bV=a("a"),Far=o("TFXLNetModel"),Tar=o(" (XLNet model)"),Mar=l(),p_e=a("p"),Ear=o("Examples:"),Car=l(),f(pA.$$.fragment),VBe=l(),uc=a("h2"),TT=a("a"),__e=a("span"),f(_A.$$.fragment),war=l(),u_e=a("span"),Aar=o("TFAutoModelForPreTraining"),XBe=l(),Fr=a("div"),f(uA.$$.fragment),yar=l(),bc=a("p"),Lar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vV=a("a"),xar=o("from_pretrained()"),kar=o(" class method or the "),FV=a("a"),Sar=o("from_config()"),Rar=o(` class
method.`),Bar=l(),bA=a("p"),Par=o("This class cannot be instantiated directly using "),b_e=a("code"),$ar=o("__init__()"),Iar=o(" (throws an error)."),qar=l(),ht=a("div"),f(vA.$$.fragment),Nar=l(),v_e=a("p"),jar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dar=l(),vc=a("p"),Gar=o(`Note:
Loading a model from its configuration file does `),F_e=a("strong"),Oar=o("not"),Var=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),Xar=o("from_pretrained()"),zar=o(" to load the model weights."),Qar=l(),T_e=a("p"),War=o("Examples:"),Har=l(),f(FA.$$.fragment),Uar=l(),po=a("div"),f(TA.$$.fragment),Jar=l(),M_e=a("p"),Yar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kar=l(),bn=a("p"),Zar=o("The model class to instantiate is selected based on the "),E_e=a("code"),enr=o("model_type"),onr=o(` property of the config object (either
passed as an argument or loaded from `),C_e=a("code"),rnr=o("pretrained_model_name_or_path"),tnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=a("code"),anr=o("pretrained_model_name_or_path"),nnr=o(":"),snr=l(),H=a("ul"),MT=a("li"),A_e=a("strong"),lnr=o("albert"),inr=o(" \u2014 "),MV=a("a"),dnr=o("TFAlbertForPreTraining"),cnr=o(" (ALBERT model)"),fnr=l(),ET=a("li"),y_e=a("strong"),mnr=o("bart"),gnr=o(" \u2014 "),EV=a("a"),hnr=o("TFBartForConditionalGeneration"),pnr=o(" (BART model)"),_nr=l(),CT=a("li"),L_e=a("strong"),unr=o("bert"),bnr=o(" \u2014 "),CV=a("a"),vnr=o("TFBertForPreTraining"),Fnr=o(" (BERT model)"),Tnr=l(),wT=a("li"),x_e=a("strong"),Mnr=o("camembert"),Enr=o(" \u2014 "),wV=a("a"),Cnr=o("TFCamembertForMaskedLM"),wnr=o(" (CamemBERT model)"),Anr=l(),AT=a("li"),k_e=a("strong"),ynr=o("ctrl"),Lnr=o(" \u2014 "),AV=a("a"),xnr=o("TFCTRLLMHeadModel"),knr=o(" (CTRL model)"),Snr=l(),yT=a("li"),S_e=a("strong"),Rnr=o("distilbert"),Bnr=o(" \u2014 "),yV=a("a"),Pnr=o("TFDistilBertForMaskedLM"),$nr=o(" (DistilBERT model)"),Inr=l(),LT=a("li"),R_e=a("strong"),qnr=o("electra"),Nnr=o(" \u2014 "),LV=a("a"),jnr=o("TFElectraForPreTraining"),Dnr=o(" (ELECTRA model)"),Gnr=l(),xT=a("li"),B_e=a("strong"),Onr=o("flaubert"),Vnr=o(" \u2014 "),xV=a("a"),Xnr=o("TFFlaubertWithLMHeadModel"),znr=o(" (FlauBERT model)"),Qnr=l(),kT=a("li"),P_e=a("strong"),Wnr=o("funnel"),Hnr=o(" \u2014 "),kV=a("a"),Unr=o("TFFunnelForPreTraining"),Jnr=o(" (Funnel Transformer model)"),Ynr=l(),ST=a("li"),$_e=a("strong"),Knr=o("gpt2"),Znr=o(" \u2014 "),SV=a("a"),esr=o("TFGPT2LMHeadModel"),osr=o(" (OpenAI GPT-2 model)"),rsr=l(),RT=a("li"),I_e=a("strong"),tsr=o("layoutlm"),asr=o(" \u2014 "),RV=a("a"),nsr=o("TFLayoutLMForMaskedLM"),ssr=o(" (LayoutLM model)"),lsr=l(),BT=a("li"),q_e=a("strong"),isr=o("lxmert"),dsr=o(" \u2014 "),BV=a("a"),csr=o("TFLxmertForPreTraining"),fsr=o(" (LXMERT model)"),msr=l(),PT=a("li"),N_e=a("strong"),gsr=o("mobilebert"),hsr=o(" \u2014 "),PV=a("a"),psr=o("TFMobileBertForPreTraining"),_sr=o(" (MobileBERT model)"),usr=l(),$T=a("li"),j_e=a("strong"),bsr=o("mpnet"),vsr=o(" \u2014 "),$V=a("a"),Fsr=o("TFMPNetForMaskedLM"),Tsr=o(" (MPNet model)"),Msr=l(),IT=a("li"),D_e=a("strong"),Esr=o("openai-gpt"),Csr=o(" \u2014 "),IV=a("a"),wsr=o("TFOpenAIGPTLMHeadModel"),Asr=o(" (OpenAI GPT model)"),ysr=l(),qT=a("li"),G_e=a("strong"),Lsr=o("roberta"),xsr=o(" \u2014 "),qV=a("a"),ksr=o("TFRobertaForMaskedLM"),Ssr=o(" (RoBERTa model)"),Rsr=l(),NT=a("li"),O_e=a("strong"),Bsr=o("t5"),Psr=o(" \u2014 "),NV=a("a"),$sr=o("TFT5ForConditionalGeneration"),Isr=o(" (T5 model)"),qsr=l(),jT=a("li"),V_e=a("strong"),Nsr=o("tapas"),jsr=o(" \u2014 "),jV=a("a"),Dsr=o("TFTapasForMaskedLM"),Gsr=o(" (TAPAS model)"),Osr=l(),DT=a("li"),X_e=a("strong"),Vsr=o("transfo-xl"),Xsr=o(" \u2014 "),DV=a("a"),zsr=o("TFTransfoXLLMHeadModel"),Qsr=o(" (Transformer-XL model)"),Wsr=l(),GT=a("li"),z_e=a("strong"),Hsr=o("vit_mae"),Usr=o(" \u2014 "),GV=a("a"),Jsr=o("TFViTMAEForPreTraining"),Ysr=o(" (ViTMAE model)"),Ksr=l(),OT=a("li"),Q_e=a("strong"),Zsr=o("xlm"),elr=o(" \u2014 "),OV=a("a"),olr=o("TFXLMWithLMHeadModel"),rlr=o(" (XLM model)"),tlr=l(),VT=a("li"),W_e=a("strong"),alr=o("xlm-roberta"),nlr=o(" \u2014 "),VV=a("a"),slr=o("TFXLMRobertaForMaskedLM"),llr=o(" (XLM-RoBERTa model)"),ilr=l(),XT=a("li"),H_e=a("strong"),dlr=o("xlnet"),clr=o(" \u2014 "),XV=a("a"),flr=o("TFXLNetLMHeadModel"),mlr=o(" (XLNet model)"),glr=l(),U_e=a("p"),hlr=o("Examples:"),plr=l(),f(MA.$$.fragment),zBe=l(),Fc=a("h2"),zT=a("a"),J_e=a("span"),f(EA.$$.fragment),_lr=l(),Y_e=a("span"),ulr=o("TFAutoModelForCausalLM"),QBe=l(),Tr=a("div"),f(CA.$$.fragment),blr=l(),Tc=a("p"),vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zV=a("a"),Flr=o("from_pretrained()"),Tlr=o(" class method or the "),QV=a("a"),Mlr=o("from_config()"),Elr=o(` class
method.`),Clr=l(),wA=a("p"),wlr=o("This class cannot be instantiated directly using "),K_e=a("code"),Alr=o("__init__()"),ylr=o(" (throws an error)."),Llr=l(),pt=a("div"),f(AA.$$.fragment),xlr=l(),Z_e=a("p"),klr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Slr=l(),Mc=a("p"),Rlr=o(`Note:
Loading a model from its configuration file does `),eue=a("strong"),Blr=o("not"),Plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),$lr=o("from_pretrained()"),Ilr=o(" to load the model weights."),qlr=l(),oue=a("p"),Nlr=o("Examples:"),jlr=l(),f(yA.$$.fragment),Dlr=l(),_o=a("div"),f(LA.$$.fragment),Glr=l(),rue=a("p"),Olr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Vlr=l(),vn=a("p"),Xlr=o("The model class to instantiate is selected based on the "),tue=a("code"),zlr=o("model_type"),Qlr=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),Wlr=o("pretrained_model_name_or_path"),Hlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),Ulr=o("pretrained_model_name_or_path"),Jlr=o(":"),Ylr=l(),fe=a("ul"),QT=a("li"),sue=a("strong"),Klr=o("bert"),Zlr=o(" \u2014 "),HV=a("a"),eir=o("TFBertLMHeadModel"),oir=o(" (BERT model)"),rir=l(),WT=a("li"),lue=a("strong"),tir=o("camembert"),air=o(" \u2014 "),UV=a("a"),nir=o("TFCamembertForCausalLM"),sir=o(" (CamemBERT model)"),lir=l(),HT=a("li"),iue=a("strong"),iir=o("ctrl"),dir=o(" \u2014 "),JV=a("a"),cir=o("TFCTRLLMHeadModel"),fir=o(" (CTRL model)"),mir=l(),UT=a("li"),due=a("strong"),gir=o("gpt2"),hir=o(" \u2014 "),YV=a("a"),pir=o("TFGPT2LMHeadModel"),_ir=o(" (OpenAI GPT-2 model)"),uir=l(),JT=a("li"),cue=a("strong"),bir=o("gptj"),vir=o(" \u2014 "),KV=a("a"),Fir=o("TFGPTJForCausalLM"),Tir=o(" (GPT-J model)"),Mir=l(),YT=a("li"),fue=a("strong"),Eir=o("openai-gpt"),Cir=o(" \u2014 "),ZV=a("a"),wir=o("TFOpenAIGPTLMHeadModel"),Air=o(" (OpenAI GPT model)"),yir=l(),KT=a("li"),mue=a("strong"),Lir=o("rembert"),xir=o(" \u2014 "),eX=a("a"),kir=o("TFRemBertForCausalLM"),Sir=o(" (RemBERT model)"),Rir=l(),ZT=a("li"),gue=a("strong"),Bir=o("roberta"),Pir=o(" \u2014 "),oX=a("a"),$ir=o("TFRobertaForCausalLM"),Iir=o(" (RoBERTa model)"),qir=l(),e8=a("li"),hue=a("strong"),Nir=o("roformer"),jir=o(" \u2014 "),rX=a("a"),Dir=o("TFRoFormerForCausalLM"),Gir=o(" (RoFormer model)"),Oir=l(),o8=a("li"),pue=a("strong"),Vir=o("transfo-xl"),Xir=o(" \u2014 "),tX=a("a"),zir=o("TFTransfoXLLMHeadModel"),Qir=o(" (Transformer-XL model)"),Wir=l(),r8=a("li"),_ue=a("strong"),Hir=o("xlm"),Uir=o(" \u2014 "),aX=a("a"),Jir=o("TFXLMWithLMHeadModel"),Yir=o(" (XLM model)"),Kir=l(),t8=a("li"),uue=a("strong"),Zir=o("xlnet"),edr=o(" \u2014 "),nX=a("a"),odr=o("TFXLNetLMHeadModel"),rdr=o(" (XLNet model)"),tdr=l(),bue=a("p"),adr=o("Examples:"),ndr=l(),f(xA.$$.fragment),WBe=l(),Ec=a("h2"),a8=a("a"),vue=a("span"),f(kA.$$.fragment),sdr=l(),Fue=a("span"),ldr=o("TFAutoModelForImageClassification"),HBe=l(),Mr=a("div"),f(SA.$$.fragment),idr=l(),Cc=a("p"),ddr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sX=a("a"),cdr=o("from_pretrained()"),fdr=o(" class method or the "),lX=a("a"),mdr=o("from_config()"),gdr=o(` class
method.`),hdr=l(),RA=a("p"),pdr=o("This class cannot be instantiated directly using "),Tue=a("code"),_dr=o("__init__()"),udr=o(" (throws an error)."),bdr=l(),_t=a("div"),f(BA.$$.fragment),vdr=l(),Mue=a("p"),Fdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tdr=l(),wc=a("p"),Mdr=o(`Note:
Loading a model from its configuration file does `),Eue=a("strong"),Edr=o("not"),Cdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),wdr=o("from_pretrained()"),Adr=o(" to load the model weights."),ydr=l(),Cue=a("p"),Ldr=o("Examples:"),xdr=l(),f(PA.$$.fragment),kdr=l(),uo=a("div"),f($A.$$.fragment),Sdr=l(),wue=a("p"),Rdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bdr=l(),Fn=a("p"),Pdr=o("The model class to instantiate is selected based on the "),Aue=a("code"),$dr=o("model_type"),Idr=o(` property of the config object (either
passed as an argument or loaded from `),yue=a("code"),qdr=o("pretrained_model_name_or_path"),Ndr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(":"),Gdr=l(),IA=a("ul"),n8=a("li"),xue=a("strong"),Odr=o("convnext"),Vdr=o(" \u2014 "),dX=a("a"),Xdr=o("TFConvNextForImageClassification"),zdr=o(" (ConvNext model)"),Qdr=l(),s8=a("li"),kue=a("strong"),Wdr=o("vit"),Hdr=o(" \u2014 "),cX=a("a"),Udr=o("TFViTForImageClassification"),Jdr=o(" (ViT model)"),Ydr=l(),Sue=a("p"),Kdr=o("Examples:"),Zdr=l(),f(qA.$$.fragment),UBe=l(),Ac=a("h2"),l8=a("a"),Rue=a("span"),f(NA.$$.fragment),ecr=l(),Bue=a("span"),ocr=o("TFAutoModelForMaskedLM"),JBe=l(),Er=a("div"),f(jA.$$.fragment),rcr=l(),yc=a("p"),tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fX=a("a"),acr=o("from_pretrained()"),ncr=o(" class method or the "),mX=a("a"),scr=o("from_config()"),lcr=o(` class
method.`),icr=l(),DA=a("p"),dcr=o("This class cannot be instantiated directly using "),Pue=a("code"),ccr=o("__init__()"),fcr=o(" (throws an error)."),mcr=l(),ut=a("div"),f(GA.$$.fragment),gcr=l(),$ue=a("p"),hcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),pcr=l(),Lc=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),Iue=a("strong"),ucr=o("not"),bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),vcr=o("from_pretrained()"),Fcr=o(" to load the model weights."),Tcr=l(),que=a("p"),Mcr=o("Examples:"),Ecr=l(),f(OA.$$.fragment),Ccr=l(),bo=a("div"),f(VA.$$.fragment),wcr=l(),Nue=a("p"),Acr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ycr=l(),Tn=a("p"),Lcr=o("The model class to instantiate is selected based on the "),jue=a("code"),xcr=o("model_type"),kcr=o(` property of the config object (either
passed as an argument or loaded from `),Due=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=a("code"),Bcr=o("pretrained_model_name_or_path"),Pcr=o(":"),$cr=l(),Y=a("ul"),i8=a("li"),Oue=a("strong"),Icr=o("albert"),qcr=o(" \u2014 "),hX=a("a"),Ncr=o("TFAlbertForMaskedLM"),jcr=o(" (ALBERT model)"),Dcr=l(),d8=a("li"),Vue=a("strong"),Gcr=o("bert"),Ocr=o(" \u2014 "),pX=a("a"),Vcr=o("TFBertForMaskedLM"),Xcr=o(" (BERT model)"),zcr=l(),c8=a("li"),Xue=a("strong"),Qcr=o("camembert"),Wcr=o(" \u2014 "),_X=a("a"),Hcr=o("TFCamembertForMaskedLM"),Ucr=o(" (CamemBERT model)"),Jcr=l(),f8=a("li"),zue=a("strong"),Ycr=o("convbert"),Kcr=o(" \u2014 "),uX=a("a"),Zcr=o("TFConvBertForMaskedLM"),efr=o(" (ConvBERT model)"),ofr=l(),m8=a("li"),Que=a("strong"),rfr=o("deberta"),tfr=o(" \u2014 "),bX=a("a"),afr=o("TFDebertaForMaskedLM"),nfr=o(" (DeBERTa model)"),sfr=l(),g8=a("li"),Wue=a("strong"),lfr=o("deberta-v2"),ifr=o(" \u2014 "),vX=a("a"),dfr=o("TFDebertaV2ForMaskedLM"),cfr=o(" (DeBERTa-v2 model)"),ffr=l(),h8=a("li"),Hue=a("strong"),mfr=o("distilbert"),gfr=o(" \u2014 "),FX=a("a"),hfr=o("TFDistilBertForMaskedLM"),pfr=o(" (DistilBERT model)"),_fr=l(),p8=a("li"),Uue=a("strong"),ufr=o("electra"),bfr=o(" \u2014 "),TX=a("a"),vfr=o("TFElectraForMaskedLM"),Ffr=o(" (ELECTRA model)"),Tfr=l(),_8=a("li"),Jue=a("strong"),Mfr=o("flaubert"),Efr=o(" \u2014 "),MX=a("a"),Cfr=o("TFFlaubertWithLMHeadModel"),wfr=o(" (FlauBERT model)"),Afr=l(),u8=a("li"),Yue=a("strong"),yfr=o("funnel"),Lfr=o(" \u2014 "),EX=a("a"),xfr=o("TFFunnelForMaskedLM"),kfr=o(" (Funnel Transformer model)"),Sfr=l(),b8=a("li"),Kue=a("strong"),Rfr=o("layoutlm"),Bfr=o(" \u2014 "),CX=a("a"),Pfr=o("TFLayoutLMForMaskedLM"),$fr=o(" (LayoutLM model)"),Ifr=l(),v8=a("li"),Zue=a("strong"),qfr=o("longformer"),Nfr=o(" \u2014 "),wX=a("a"),jfr=o("TFLongformerForMaskedLM"),Dfr=o(" (Longformer model)"),Gfr=l(),F8=a("li"),e6e=a("strong"),Ofr=o("mobilebert"),Vfr=o(" \u2014 "),AX=a("a"),Xfr=o("TFMobileBertForMaskedLM"),zfr=o(" (MobileBERT model)"),Qfr=l(),T8=a("li"),o6e=a("strong"),Wfr=o("mpnet"),Hfr=o(" \u2014 "),yX=a("a"),Ufr=o("TFMPNetForMaskedLM"),Jfr=o(" (MPNet model)"),Yfr=l(),M8=a("li"),r6e=a("strong"),Kfr=o("rembert"),Zfr=o(" \u2014 "),LX=a("a"),emr=o("TFRemBertForMaskedLM"),omr=o(" (RemBERT model)"),rmr=l(),E8=a("li"),t6e=a("strong"),tmr=o("roberta"),amr=o(" \u2014 "),xX=a("a"),nmr=o("TFRobertaForMaskedLM"),smr=o(" (RoBERTa model)"),lmr=l(),C8=a("li"),a6e=a("strong"),imr=o("roformer"),dmr=o(" \u2014 "),kX=a("a"),cmr=o("TFRoFormerForMaskedLM"),fmr=o(" (RoFormer model)"),mmr=l(),w8=a("li"),n6e=a("strong"),gmr=o("tapas"),hmr=o(" \u2014 "),SX=a("a"),pmr=o("TFTapasForMaskedLM"),_mr=o(" (TAPAS model)"),umr=l(),A8=a("li"),s6e=a("strong"),bmr=o("xlm"),vmr=o(" \u2014 "),RX=a("a"),Fmr=o("TFXLMWithLMHeadModel"),Tmr=o(" (XLM model)"),Mmr=l(),y8=a("li"),l6e=a("strong"),Emr=o("xlm-roberta"),Cmr=o(" \u2014 "),BX=a("a"),wmr=o("TFXLMRobertaForMaskedLM"),Amr=o(" (XLM-RoBERTa model)"),ymr=l(),i6e=a("p"),Lmr=o("Examples:"),xmr=l(),f(XA.$$.fragment),YBe=l(),xc=a("h2"),L8=a("a"),d6e=a("span"),f(zA.$$.fragment),kmr=l(),c6e=a("span"),Smr=o("TFAutoModelForSeq2SeqLM"),KBe=l(),Cr=a("div"),f(QA.$$.fragment),Rmr=l(),kc=a("p"),Bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PX=a("a"),Pmr=o("from_pretrained()"),$mr=o(" class method or the "),$X=a("a"),Imr=o("from_config()"),qmr=o(` class
method.`),Nmr=l(),WA=a("p"),jmr=o("This class cannot be instantiated directly using "),f6e=a("code"),Dmr=o("__init__()"),Gmr=o(" (throws an error)."),Omr=l(),bt=a("div"),f(HA.$$.fragment),Vmr=l(),m6e=a("p"),Xmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zmr=l(),Sc=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),Wmr=o("not"),Hmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),Umr=o("from_pretrained()"),Jmr=o(" to load the model weights."),Ymr=l(),h6e=a("p"),Kmr=o("Examples:"),Zmr=l(),f(UA.$$.fragment),egr=l(),vo=a("div"),f(JA.$$.fragment),ogr=l(),p6e=a("p"),rgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),tgr=l(),Mn=a("p"),agr=o("The model class to instantiate is selected based on the "),_6e=a("code"),ngr=o("model_type"),sgr=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),lgr=o("pretrained_model_name_or_path"),igr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=a("code"),dgr=o("pretrained_model_name_or_path"),cgr=o(":"),fgr=l(),be=a("ul"),x8=a("li"),v6e=a("strong"),mgr=o("bart"),ggr=o(" \u2014 "),qX=a("a"),hgr=o("TFBartForConditionalGeneration"),pgr=o(" (BART model)"),_gr=l(),k8=a("li"),F6e=a("strong"),ugr=o("blenderbot"),bgr=o(" \u2014 "),NX=a("a"),vgr=o("TFBlenderbotForConditionalGeneration"),Fgr=o(" (Blenderbot model)"),Tgr=l(),S8=a("li"),T6e=a("strong"),Mgr=o("blenderbot-small"),Egr=o(" \u2014 "),jX=a("a"),Cgr=o("TFBlenderbotSmallForConditionalGeneration"),wgr=o(" (BlenderbotSmall model)"),Agr=l(),R8=a("li"),M6e=a("strong"),ygr=o("encoder-decoder"),Lgr=o(" \u2014 "),DX=a("a"),xgr=o("TFEncoderDecoderModel"),kgr=o(" (Encoder decoder model)"),Sgr=l(),B8=a("li"),E6e=a("strong"),Rgr=o("led"),Bgr=o(" \u2014 "),GX=a("a"),Pgr=o("TFLEDForConditionalGeneration"),$gr=o(" (LED model)"),Igr=l(),P8=a("li"),C6e=a("strong"),qgr=o("marian"),Ngr=o(" \u2014 "),OX=a("a"),jgr=o("TFMarianMTModel"),Dgr=o(" (Marian model)"),Ggr=l(),$8=a("li"),w6e=a("strong"),Ogr=o("mbart"),Vgr=o(" \u2014 "),VX=a("a"),Xgr=o("TFMBartForConditionalGeneration"),zgr=o(" (mBART model)"),Qgr=l(),I8=a("li"),A6e=a("strong"),Wgr=o("mt5"),Hgr=o(" \u2014 "),XX=a("a"),Ugr=o("TFMT5ForConditionalGeneration"),Jgr=o(" (mT5 model)"),Ygr=l(),q8=a("li"),y6e=a("strong"),Kgr=o("pegasus"),Zgr=o(" \u2014 "),zX=a("a"),ehr=o("TFPegasusForConditionalGeneration"),ohr=o(" (Pegasus model)"),rhr=l(),N8=a("li"),L6e=a("strong"),thr=o("t5"),ahr=o(" \u2014 "),QX=a("a"),nhr=o("TFT5ForConditionalGeneration"),shr=o(" (T5 model)"),lhr=l(),x6e=a("p"),ihr=o("Examples:"),dhr=l(),f(YA.$$.fragment),ZBe=l(),Rc=a("h2"),j8=a("a"),k6e=a("span"),f(KA.$$.fragment),chr=l(),S6e=a("span"),fhr=o("TFAutoModelForSequenceClassification"),ePe=l(),wr=a("div"),f(ZA.$$.fragment),mhr=l(),Bc=a("p"),ghr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WX=a("a"),hhr=o("from_pretrained()"),phr=o(" class method or the "),HX=a("a"),_hr=o("from_config()"),uhr=o(` class
method.`),bhr=l(),e0=a("p"),vhr=o("This class cannot be instantiated directly using "),R6e=a("code"),Fhr=o("__init__()"),Thr=o(" (throws an error)."),Mhr=l(),vt=a("div"),f(o0.$$.fragment),Ehr=l(),B6e=a("p"),Chr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),whr=l(),Pc=a("p"),Ahr=o(`Note:
Loading a model from its configuration file does `),P6e=a("strong"),yhr=o("not"),Lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),xhr=o("from_pretrained()"),khr=o(" to load the model weights."),Shr=l(),$6e=a("p"),Rhr=o("Examples:"),Bhr=l(),f(r0.$$.fragment),Phr=l(),Fo=a("div"),f(t0.$$.fragment),$hr=l(),I6e=a("p"),Ihr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qhr=l(),En=a("p"),Nhr=o("The model class to instantiate is selected based on the "),q6e=a("code"),jhr=o("model_type"),Dhr=o(` property of the config object (either
passed as an argument or loaded from `),N6e=a("code"),Ghr=o("pretrained_model_name_or_path"),Ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=a("code"),Vhr=o("pretrained_model_name_or_path"),Xhr=o(":"),zhr=l(),V=a("ul"),D8=a("li"),D6e=a("strong"),Qhr=o("albert"),Whr=o(" \u2014 "),JX=a("a"),Hhr=o("TFAlbertForSequenceClassification"),Uhr=o(" (ALBERT model)"),Jhr=l(),G8=a("li"),G6e=a("strong"),Yhr=o("bert"),Khr=o(" \u2014 "),YX=a("a"),Zhr=o("TFBertForSequenceClassification"),epr=o(" (BERT model)"),opr=l(),O8=a("li"),O6e=a("strong"),rpr=o("camembert"),tpr=o(" \u2014 "),KX=a("a"),apr=o("TFCamembertForSequenceClassification"),npr=o(" (CamemBERT model)"),spr=l(),V8=a("li"),V6e=a("strong"),lpr=o("convbert"),ipr=o(" \u2014 "),ZX=a("a"),dpr=o("TFConvBertForSequenceClassification"),cpr=o(" (ConvBERT model)"),fpr=l(),X8=a("li"),X6e=a("strong"),mpr=o("ctrl"),gpr=o(" \u2014 "),ez=a("a"),hpr=o("TFCTRLForSequenceClassification"),ppr=o(" (CTRL model)"),_pr=l(),z8=a("li"),z6e=a("strong"),upr=o("deberta"),bpr=o(" \u2014 "),oz=a("a"),vpr=o("TFDebertaForSequenceClassification"),Fpr=o(" (DeBERTa model)"),Tpr=l(),Q8=a("li"),Q6e=a("strong"),Mpr=o("deberta-v2"),Epr=o(" \u2014 "),rz=a("a"),Cpr=o("TFDebertaV2ForSequenceClassification"),wpr=o(" (DeBERTa-v2 model)"),Apr=l(),W8=a("li"),W6e=a("strong"),ypr=o("distilbert"),Lpr=o(" \u2014 "),tz=a("a"),xpr=o("TFDistilBertForSequenceClassification"),kpr=o(" (DistilBERT model)"),Spr=l(),H8=a("li"),H6e=a("strong"),Rpr=o("electra"),Bpr=o(" \u2014 "),az=a("a"),Ppr=o("TFElectraForSequenceClassification"),$pr=o(" (ELECTRA model)"),Ipr=l(),U8=a("li"),U6e=a("strong"),qpr=o("flaubert"),Npr=o(" \u2014 "),nz=a("a"),jpr=o("TFFlaubertForSequenceClassification"),Dpr=o(" (FlauBERT model)"),Gpr=l(),J8=a("li"),J6e=a("strong"),Opr=o("funnel"),Vpr=o(" \u2014 "),sz=a("a"),Xpr=o("TFFunnelForSequenceClassification"),zpr=o(" (Funnel Transformer model)"),Qpr=l(),Y8=a("li"),Y6e=a("strong"),Wpr=o("gpt2"),Hpr=o(" \u2014 "),lz=a("a"),Upr=o("TFGPT2ForSequenceClassification"),Jpr=o(" (OpenAI GPT-2 model)"),Ypr=l(),K8=a("li"),K6e=a("strong"),Kpr=o("gptj"),Zpr=o(" \u2014 "),iz=a("a"),e_r=o("TFGPTJForSequenceClassification"),o_r=o(" (GPT-J model)"),r_r=l(),Z8=a("li"),Z6e=a("strong"),t_r=o("layoutlm"),a_r=o(" \u2014 "),dz=a("a"),n_r=o("TFLayoutLMForSequenceClassification"),s_r=o(" (LayoutLM model)"),l_r=l(),e9=a("li"),e1e=a("strong"),i_r=o("longformer"),d_r=o(" \u2014 "),cz=a("a"),c_r=o("TFLongformerForSequenceClassification"),f_r=o(" (Longformer model)"),m_r=l(),o9=a("li"),o1e=a("strong"),g_r=o("mobilebert"),h_r=o(" \u2014 "),fz=a("a"),p_r=o("TFMobileBertForSequenceClassification"),__r=o(" (MobileBERT model)"),u_r=l(),r9=a("li"),r1e=a("strong"),b_r=o("mpnet"),v_r=o(" \u2014 "),mz=a("a"),F_r=o("TFMPNetForSequenceClassification"),T_r=o(" (MPNet model)"),M_r=l(),t9=a("li"),t1e=a("strong"),E_r=o("openai-gpt"),C_r=o(" \u2014 "),gz=a("a"),w_r=o("TFOpenAIGPTForSequenceClassification"),A_r=o(" (OpenAI GPT model)"),y_r=l(),a9=a("li"),a1e=a("strong"),L_r=o("rembert"),x_r=o(" \u2014 "),hz=a("a"),k_r=o("TFRemBertForSequenceClassification"),S_r=o(" (RemBERT model)"),R_r=l(),n9=a("li"),n1e=a("strong"),B_r=o("roberta"),P_r=o(" \u2014 "),pz=a("a"),$_r=o("TFRobertaForSequenceClassification"),I_r=o(" (RoBERTa model)"),q_r=l(),s9=a("li"),s1e=a("strong"),N_r=o("roformer"),j_r=o(" \u2014 "),_z=a("a"),D_r=o("TFRoFormerForSequenceClassification"),G_r=o(" (RoFormer model)"),O_r=l(),l9=a("li"),l1e=a("strong"),V_r=o("tapas"),X_r=o(" \u2014 "),uz=a("a"),z_r=o("TFTapasForSequenceClassification"),Q_r=o(" (TAPAS model)"),W_r=l(),i9=a("li"),i1e=a("strong"),H_r=o("transfo-xl"),U_r=o(" \u2014 "),bz=a("a"),J_r=o("TFTransfoXLForSequenceClassification"),Y_r=o(" (Transformer-XL model)"),K_r=l(),d9=a("li"),d1e=a("strong"),Z_r=o("xlm"),eur=o(" \u2014 "),vz=a("a"),our=o("TFXLMForSequenceClassification"),rur=o(" (XLM model)"),tur=l(),c9=a("li"),c1e=a("strong"),aur=o("xlm-roberta"),nur=o(" \u2014 "),Fz=a("a"),sur=o("TFXLMRobertaForSequenceClassification"),lur=o(" (XLM-RoBERTa model)"),iur=l(),f9=a("li"),f1e=a("strong"),dur=o("xlnet"),cur=o(" \u2014 "),Tz=a("a"),fur=o("TFXLNetForSequenceClassification"),mur=o(" (XLNet model)"),gur=l(),m1e=a("p"),hur=o("Examples:"),pur=l(),f(a0.$$.fragment),oPe=l(),$c=a("h2"),m9=a("a"),g1e=a("span"),f(n0.$$.fragment),_ur=l(),h1e=a("span"),uur=o("TFAutoModelForMultipleChoice"),rPe=l(),Ar=a("div"),f(s0.$$.fragment),bur=l(),Ic=a("p"),vur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mz=a("a"),Fur=o("from_pretrained()"),Tur=o(" class method or the "),Ez=a("a"),Mur=o("from_config()"),Eur=o(` class
method.`),Cur=l(),l0=a("p"),wur=o("This class cannot be instantiated directly using "),p1e=a("code"),Aur=o("__init__()"),yur=o(" (throws an error)."),Lur=l(),Ft=a("div"),f(i0.$$.fragment),xur=l(),_1e=a("p"),kur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sur=l(),qc=a("p"),Rur=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),Bur=o("not"),Pur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),$ur=o("from_pretrained()"),Iur=o(" to load the model weights."),qur=l(),b1e=a("p"),Nur=o("Examples:"),jur=l(),f(d0.$$.fragment),Dur=l(),To=a("div"),f(c0.$$.fragment),Gur=l(),v1e=a("p"),Our=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vur=l(),Cn=a("p"),Xur=o("The model class to instantiate is selected based on the "),F1e=a("code"),zur=o("model_type"),Qur=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Wur=o("pretrained_model_name_or_path"),Hur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Uur=o("pretrained_model_name_or_path"),Jur=o(":"),Yur=l(),se=a("ul"),g9=a("li"),E1e=a("strong"),Kur=o("albert"),Zur=o(" \u2014 "),wz=a("a"),e6r=o("TFAlbertForMultipleChoice"),o6r=o(" (ALBERT model)"),r6r=l(),h9=a("li"),C1e=a("strong"),t6r=o("bert"),a6r=o(" \u2014 "),Az=a("a"),n6r=o("TFBertForMultipleChoice"),s6r=o(" (BERT model)"),l6r=l(),p9=a("li"),w1e=a("strong"),i6r=o("camembert"),d6r=o(" \u2014 "),yz=a("a"),c6r=o("TFCamembertForMultipleChoice"),f6r=o(" (CamemBERT model)"),m6r=l(),_9=a("li"),A1e=a("strong"),g6r=o("convbert"),h6r=o(" \u2014 "),Lz=a("a"),p6r=o("TFConvBertForMultipleChoice"),_6r=o(" (ConvBERT model)"),u6r=l(),u9=a("li"),y1e=a("strong"),b6r=o("distilbert"),v6r=o(" \u2014 "),xz=a("a"),F6r=o("TFDistilBertForMultipleChoice"),T6r=o(" (DistilBERT model)"),M6r=l(),b9=a("li"),L1e=a("strong"),E6r=o("electra"),C6r=o(" \u2014 "),kz=a("a"),w6r=o("TFElectraForMultipleChoice"),A6r=o(" (ELECTRA model)"),y6r=l(),v9=a("li"),x1e=a("strong"),L6r=o("flaubert"),x6r=o(" \u2014 "),Sz=a("a"),k6r=o("TFFlaubertForMultipleChoice"),S6r=o(" (FlauBERT model)"),R6r=l(),F9=a("li"),k1e=a("strong"),B6r=o("funnel"),P6r=o(" \u2014 "),Rz=a("a"),$6r=o("TFFunnelForMultipleChoice"),I6r=o(" (Funnel Transformer model)"),q6r=l(),T9=a("li"),S1e=a("strong"),N6r=o("longformer"),j6r=o(" \u2014 "),Bz=a("a"),D6r=o("TFLongformerForMultipleChoice"),G6r=o(" (Longformer model)"),O6r=l(),M9=a("li"),R1e=a("strong"),V6r=o("mobilebert"),X6r=o(" \u2014 "),Pz=a("a"),z6r=o("TFMobileBertForMultipleChoice"),Q6r=o(" (MobileBERT model)"),W6r=l(),E9=a("li"),B1e=a("strong"),H6r=o("mpnet"),U6r=o(" \u2014 "),$z=a("a"),J6r=o("TFMPNetForMultipleChoice"),Y6r=o(" (MPNet model)"),K6r=l(),C9=a("li"),P1e=a("strong"),Z6r=o("rembert"),e1r=o(" \u2014 "),Iz=a("a"),o1r=o("TFRemBertForMultipleChoice"),r1r=o(" (RemBERT model)"),t1r=l(),w9=a("li"),$1e=a("strong"),a1r=o("roberta"),n1r=o(" \u2014 "),qz=a("a"),s1r=o("TFRobertaForMultipleChoice"),l1r=o(" (RoBERTa model)"),i1r=l(),A9=a("li"),I1e=a("strong"),d1r=o("roformer"),c1r=o(" \u2014 "),Nz=a("a"),f1r=o("TFRoFormerForMultipleChoice"),m1r=o(" (RoFormer model)"),g1r=l(),y9=a("li"),q1e=a("strong"),h1r=o("xlm"),p1r=o(" \u2014 "),jz=a("a"),_1r=o("TFXLMForMultipleChoice"),u1r=o(" (XLM model)"),b1r=l(),L9=a("li"),N1e=a("strong"),v1r=o("xlm-roberta"),F1r=o(" \u2014 "),Dz=a("a"),T1r=o("TFXLMRobertaForMultipleChoice"),M1r=o(" (XLM-RoBERTa model)"),E1r=l(),x9=a("li"),j1e=a("strong"),C1r=o("xlnet"),w1r=o(" \u2014 "),Gz=a("a"),A1r=o("TFXLNetForMultipleChoice"),y1r=o(" (XLNet model)"),L1r=l(),D1e=a("p"),x1r=o("Examples:"),k1r=l(),f(f0.$$.fragment),tPe=l(),Nc=a("h2"),k9=a("a"),G1e=a("span"),f(m0.$$.fragment),S1r=l(),O1e=a("span"),R1r=o("TFAutoModelForTableQuestionAnswering"),aPe=l(),yr=a("div"),f(g0.$$.fragment),B1r=l(),jc=a("p"),P1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Oz=a("a"),$1r=o("from_pretrained()"),I1r=o(" class method or the "),Vz=a("a"),q1r=o("from_config()"),N1r=o(` class
method.`),j1r=l(),h0=a("p"),D1r=o("This class cannot be instantiated directly using "),V1e=a("code"),G1r=o("__init__()"),O1r=o(" (throws an error)."),V1r=l(),Tt=a("div"),f(p0.$$.fragment),X1r=l(),X1e=a("p"),z1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Q1r=l(),Dc=a("p"),W1r=o(`Note:
Loading a model from its configuration file does `),z1e=a("strong"),H1r=o("not"),U1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),J1r=o("from_pretrained()"),Y1r=o(" to load the model weights."),K1r=l(),Q1e=a("p"),Z1r=o("Examples:"),ebr=l(),f(_0.$$.fragment),obr=l(),Mo=a("div"),f(u0.$$.fragment),rbr=l(),W1e=a("p"),tbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),abr=l(),wn=a("p"),nbr=o("The model class to instantiate is selected based on the "),H1e=a("code"),sbr=o("model_type"),lbr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),cbr=o("pretrained_model_name_or_path"),fbr=o(":"),mbr=l(),Y1e=a("ul"),S9=a("li"),K1e=a("strong"),gbr=o("tapas"),hbr=o(" \u2014 "),zz=a("a"),pbr=o("TFTapasForQuestionAnswering"),_br=o(" (TAPAS model)"),ubr=l(),Z1e=a("p"),bbr=o("Examples:"),vbr=l(),f(b0.$$.fragment),nPe=l(),Gc=a("h2"),R9=a("a"),ebe=a("span"),f(v0.$$.fragment),Fbr=l(),obe=a("span"),Tbr=o("TFAutoModelForTokenClassification"),sPe=l(),Lr=a("div"),f(F0.$$.fragment),Mbr=l(),Oc=a("p"),Ebr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qz=a("a"),Cbr=o("from_pretrained()"),wbr=o(" class method or the "),Wz=a("a"),Abr=o("from_config()"),ybr=o(` class
method.`),Lbr=l(),T0=a("p"),xbr=o("This class cannot be instantiated directly using "),rbe=a("code"),kbr=o("__init__()"),Sbr=o(" (throws an error)."),Rbr=l(),Mt=a("div"),f(M0.$$.fragment),Bbr=l(),tbe=a("p"),Pbr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$br=l(),Vc=a("p"),Ibr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),qbr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),jbr=o("from_pretrained()"),Dbr=o(" to load the model weights."),Gbr=l(),nbe=a("p"),Obr=o("Examples:"),Vbr=l(),f(E0.$$.fragment),Xbr=l(),Eo=a("div"),f(C0.$$.fragment),zbr=l(),sbe=a("p"),Qbr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wbr=l(),An=a("p"),Hbr=o("The model class to instantiate is selected based on the "),lbe=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),Zbr=o("pretrained_model_name_or_path"),e2r=o(":"),o2r=l(),K=a("ul"),B9=a("li"),cbe=a("strong"),r2r=o("albert"),t2r=o(" \u2014 "),Uz=a("a"),a2r=o("TFAlbertForTokenClassification"),n2r=o(" (ALBERT model)"),s2r=l(),P9=a("li"),fbe=a("strong"),l2r=o("bert"),i2r=o(" \u2014 "),Jz=a("a"),d2r=o("TFBertForTokenClassification"),c2r=o(" (BERT model)"),f2r=l(),$9=a("li"),mbe=a("strong"),m2r=o("camembert"),g2r=o(" \u2014 "),Yz=a("a"),h2r=o("TFCamembertForTokenClassification"),p2r=o(" (CamemBERT model)"),_2r=l(),I9=a("li"),gbe=a("strong"),u2r=o("convbert"),b2r=o(" \u2014 "),Kz=a("a"),v2r=o("TFConvBertForTokenClassification"),F2r=o(" (ConvBERT model)"),T2r=l(),q9=a("li"),hbe=a("strong"),M2r=o("deberta"),E2r=o(" \u2014 "),Zz=a("a"),C2r=o("TFDebertaForTokenClassification"),w2r=o(" (DeBERTa model)"),A2r=l(),N9=a("li"),pbe=a("strong"),y2r=o("deberta-v2"),L2r=o(" \u2014 "),eQ=a("a"),x2r=o("TFDebertaV2ForTokenClassification"),k2r=o(" (DeBERTa-v2 model)"),S2r=l(),j9=a("li"),_be=a("strong"),R2r=o("distilbert"),B2r=o(" \u2014 "),oQ=a("a"),P2r=o("TFDistilBertForTokenClassification"),$2r=o(" (DistilBERT model)"),I2r=l(),D9=a("li"),ube=a("strong"),q2r=o("electra"),N2r=o(" \u2014 "),rQ=a("a"),j2r=o("TFElectraForTokenClassification"),D2r=o(" (ELECTRA model)"),G2r=l(),G9=a("li"),bbe=a("strong"),O2r=o("flaubert"),V2r=o(" \u2014 "),tQ=a("a"),X2r=o("TFFlaubertForTokenClassification"),z2r=o(" (FlauBERT model)"),Q2r=l(),O9=a("li"),vbe=a("strong"),W2r=o("funnel"),H2r=o(" \u2014 "),aQ=a("a"),U2r=o("TFFunnelForTokenClassification"),J2r=o(" (Funnel Transformer model)"),Y2r=l(),V9=a("li"),Fbe=a("strong"),K2r=o("layoutlm"),Z2r=o(" \u2014 "),nQ=a("a"),evr=o("TFLayoutLMForTokenClassification"),ovr=o(" (LayoutLM model)"),rvr=l(),X9=a("li"),Tbe=a("strong"),tvr=o("longformer"),avr=o(" \u2014 "),sQ=a("a"),nvr=o("TFLongformerForTokenClassification"),svr=o(" (Longformer model)"),lvr=l(),z9=a("li"),Mbe=a("strong"),ivr=o("mobilebert"),dvr=o(" \u2014 "),lQ=a("a"),cvr=o("TFMobileBertForTokenClassification"),fvr=o(" (MobileBERT model)"),mvr=l(),Q9=a("li"),Ebe=a("strong"),gvr=o("mpnet"),hvr=o(" \u2014 "),iQ=a("a"),pvr=o("TFMPNetForTokenClassification"),_vr=o(" (MPNet model)"),uvr=l(),W9=a("li"),Cbe=a("strong"),bvr=o("rembert"),vvr=o(" \u2014 "),dQ=a("a"),Fvr=o("TFRemBertForTokenClassification"),Tvr=o(" (RemBERT model)"),Mvr=l(),H9=a("li"),wbe=a("strong"),Evr=o("roberta"),Cvr=o(" \u2014 "),cQ=a("a"),wvr=o("TFRobertaForTokenClassification"),Avr=o(" (RoBERTa model)"),yvr=l(),U9=a("li"),Abe=a("strong"),Lvr=o("roformer"),xvr=o(" \u2014 "),fQ=a("a"),kvr=o("TFRoFormerForTokenClassification"),Svr=o(" (RoFormer model)"),Rvr=l(),J9=a("li"),ybe=a("strong"),Bvr=o("xlm"),Pvr=o(" \u2014 "),mQ=a("a"),$vr=o("TFXLMForTokenClassification"),Ivr=o(" (XLM model)"),qvr=l(),Y9=a("li"),Lbe=a("strong"),Nvr=o("xlm-roberta"),jvr=o(" \u2014 "),gQ=a("a"),Dvr=o("TFXLMRobertaForTokenClassification"),Gvr=o(" (XLM-RoBERTa model)"),Ovr=l(),K9=a("li"),xbe=a("strong"),Vvr=o("xlnet"),Xvr=o(" \u2014 "),hQ=a("a"),zvr=o("TFXLNetForTokenClassification"),Qvr=o(" (XLNet model)"),Wvr=l(),kbe=a("p"),Hvr=o("Examples:"),Uvr=l(),f(w0.$$.fragment),lPe=l(),Xc=a("h2"),Z9=a("a"),Sbe=a("span"),f(A0.$$.fragment),Jvr=l(),Rbe=a("span"),Yvr=o("TFAutoModelForQuestionAnswering"),iPe=l(),xr=a("div"),f(y0.$$.fragment),Kvr=l(),zc=a("p"),Zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=a("a"),eFr=o("from_pretrained()"),oFr=o(" class method or the "),_Q=a("a"),rFr=o("from_config()"),tFr=o(` class
method.`),aFr=l(),L0=a("p"),nFr=o("This class cannot be instantiated directly using "),Bbe=a("code"),sFr=o("__init__()"),lFr=o(" (throws an error)."),iFr=l(),Et=a("div"),f(x0.$$.fragment),dFr=l(),Pbe=a("p"),cFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fFr=l(),Qc=a("p"),mFr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),gFr=o("not"),hFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),pFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),uFr=l(),Ibe=a("p"),bFr=o("Examples:"),vFr=l(),f(k0.$$.fragment),FFr=l(),Co=a("div"),f(S0.$$.fragment),TFr=l(),qbe=a("p"),MFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EFr=l(),yn=a("p"),CFr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),wFr=o("model_type"),AFr=o(` property of the config object (either
passed as an argument or loaded from `),jbe=a("code"),yFr=o("pretrained_model_name_or_path"),LFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=a("code"),xFr=o("pretrained_model_name_or_path"),kFr=o(":"),SFr=l(),Z=a("ul"),eM=a("li"),Gbe=a("strong"),RFr=o("albert"),BFr=o(" \u2014 "),bQ=a("a"),PFr=o("TFAlbertForQuestionAnswering"),$Fr=o(" (ALBERT model)"),IFr=l(),oM=a("li"),Obe=a("strong"),qFr=o("bert"),NFr=o(" \u2014 "),vQ=a("a"),jFr=o("TFBertForQuestionAnswering"),DFr=o(" (BERT model)"),GFr=l(),rM=a("li"),Vbe=a("strong"),OFr=o("camembert"),VFr=o(" \u2014 "),FQ=a("a"),XFr=o("TFCamembertForQuestionAnswering"),zFr=o(" (CamemBERT model)"),QFr=l(),tM=a("li"),Xbe=a("strong"),WFr=o("convbert"),HFr=o(" \u2014 "),TQ=a("a"),UFr=o("TFConvBertForQuestionAnswering"),JFr=o(" (ConvBERT model)"),YFr=l(),aM=a("li"),zbe=a("strong"),KFr=o("deberta"),ZFr=o(" \u2014 "),MQ=a("a"),eTr=o("TFDebertaForQuestionAnswering"),oTr=o(" (DeBERTa model)"),rTr=l(),nM=a("li"),Qbe=a("strong"),tTr=o("deberta-v2"),aTr=o(" \u2014 "),EQ=a("a"),nTr=o("TFDebertaV2ForQuestionAnswering"),sTr=o(" (DeBERTa-v2 model)"),lTr=l(),sM=a("li"),Wbe=a("strong"),iTr=o("distilbert"),dTr=o(" \u2014 "),CQ=a("a"),cTr=o("TFDistilBertForQuestionAnswering"),fTr=o(" (DistilBERT model)"),mTr=l(),lM=a("li"),Hbe=a("strong"),gTr=o("electra"),hTr=o(" \u2014 "),wQ=a("a"),pTr=o("TFElectraForQuestionAnswering"),_Tr=o(" (ELECTRA model)"),uTr=l(),iM=a("li"),Ube=a("strong"),bTr=o("flaubert"),vTr=o(" \u2014 "),AQ=a("a"),FTr=o("TFFlaubertForQuestionAnsweringSimple"),TTr=o(" (FlauBERT model)"),MTr=l(),dM=a("li"),Jbe=a("strong"),ETr=o("funnel"),CTr=o(" \u2014 "),yQ=a("a"),wTr=o("TFFunnelForQuestionAnswering"),ATr=o(" (Funnel Transformer model)"),yTr=l(),cM=a("li"),Ybe=a("strong"),LTr=o("gptj"),xTr=o(" \u2014 "),LQ=a("a"),kTr=o("TFGPTJForQuestionAnswering"),STr=o(" (GPT-J model)"),RTr=l(),fM=a("li"),Kbe=a("strong"),BTr=o("longformer"),PTr=o(" \u2014 "),xQ=a("a"),$Tr=o("TFLongformerForQuestionAnswering"),ITr=o(" (Longformer model)"),qTr=l(),mM=a("li"),Zbe=a("strong"),NTr=o("mobilebert"),jTr=o(" \u2014 "),kQ=a("a"),DTr=o("TFMobileBertForQuestionAnswering"),GTr=o(" (MobileBERT model)"),OTr=l(),gM=a("li"),e2e=a("strong"),VTr=o("mpnet"),XTr=o(" \u2014 "),SQ=a("a"),zTr=o("TFMPNetForQuestionAnswering"),QTr=o(" (MPNet model)"),WTr=l(),hM=a("li"),o2e=a("strong"),HTr=o("rembert"),UTr=o(" \u2014 "),RQ=a("a"),JTr=o("TFRemBertForQuestionAnswering"),YTr=o(" (RemBERT model)"),KTr=l(),pM=a("li"),r2e=a("strong"),ZTr=o("roberta"),e8r=o(" \u2014 "),BQ=a("a"),o8r=o("TFRobertaForQuestionAnswering"),r8r=o(" (RoBERTa model)"),t8r=l(),_M=a("li"),t2e=a("strong"),a8r=o("roformer"),n8r=o(" \u2014 "),PQ=a("a"),s8r=o("TFRoFormerForQuestionAnswering"),l8r=o(" (RoFormer model)"),i8r=l(),uM=a("li"),a2e=a("strong"),d8r=o("xlm"),c8r=o(" \u2014 "),$Q=a("a"),f8r=o("TFXLMForQuestionAnsweringSimple"),m8r=o(" (XLM model)"),g8r=l(),bM=a("li"),n2e=a("strong"),h8r=o("xlm-roberta"),p8r=o(" \u2014 "),IQ=a("a"),_8r=o("TFXLMRobertaForQuestionAnswering"),u8r=o(" (XLM-RoBERTa model)"),b8r=l(),vM=a("li"),s2e=a("strong"),v8r=o("xlnet"),F8r=o(" \u2014 "),qQ=a("a"),T8r=o("TFXLNetForQuestionAnsweringSimple"),M8r=o(" (XLNet model)"),E8r=l(),l2e=a("p"),C8r=o("Examples:"),w8r=l(),f(R0.$$.fragment),dPe=l(),Wc=a("h2"),FM=a("a"),i2e=a("span"),f(B0.$$.fragment),A8r=l(),d2e=a("span"),y8r=o("TFAutoModelForVision2Seq"),cPe=l(),kr=a("div"),f(P0.$$.fragment),L8r=l(),Hc=a("p"),x8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NQ=a("a"),k8r=o("from_pretrained()"),S8r=o(" class method or the "),jQ=a("a"),R8r=o("from_config()"),B8r=o(` class
method.`),P8r=l(),$0=a("p"),$8r=o("This class cannot be instantiated directly using "),c2e=a("code"),I8r=o("__init__()"),q8r=o(" (throws an error)."),N8r=l(),Ct=a("div"),f(I0.$$.fragment),j8r=l(),f2e=a("p"),D8r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G8r=l(),Uc=a("p"),O8r=o(`Note:
Loading a model from its configuration file does `),m2e=a("strong"),V8r=o("not"),X8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),z8r=o("from_pretrained()"),Q8r=o(" to load the model weights."),W8r=l(),g2e=a("p"),H8r=o("Examples:"),U8r=l(),f(q0.$$.fragment),J8r=l(),wo=a("div"),f(N0.$$.fragment),Y8r=l(),h2e=a("p"),K8r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z8r=l(),Ln=a("p"),e9r=o("The model class to instantiate is selected based on the "),p2e=a("code"),o9r=o("model_type"),r9r=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=a("code"),n9r=o("pretrained_model_name_or_path"),s9r=o(":"),l9r=l(),b2e=a("ul"),TM=a("li"),v2e=a("strong"),i9r=o("vision-encoder-decoder"),d9r=o(" \u2014 "),GQ=a("a"),c9r=o("TFVisionEncoderDecoderModel"),f9r=o(" (Vision Encoder decoder model)"),m9r=l(),F2e=a("p"),g9r=o("Examples:"),h9r=l(),f(j0.$$.fragment),fPe=l(),Jc=a("h2"),MM=a("a"),T2e=a("span"),f(D0.$$.fragment),p9r=l(),M2e=a("span"),_9r=o("TFAutoModelForSpeechSeq2Seq"),mPe=l(),Sr=a("div"),f(G0.$$.fragment),u9r=l(),Yc=a("p"),b9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OQ=a("a"),v9r=o("from_pretrained()"),F9r=o(" class method or the "),VQ=a("a"),T9r=o("from_config()"),M9r=o(` class
method.`),E9r=l(),O0=a("p"),C9r=o("This class cannot be instantiated directly using "),E2e=a("code"),w9r=o("__init__()"),A9r=o(" (throws an error)."),y9r=l(),wt=a("div"),f(V0.$$.fragment),L9r=l(),C2e=a("p"),x9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),k9r=l(),Kc=a("p"),S9r=o(`Note:
Loading a model from its configuration file does `),w2e=a("strong"),R9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),P9r=o("from_pretrained()"),$9r=o(" to load the model weights."),I9r=l(),A2e=a("p"),q9r=o("Examples:"),N9r=l(),f(X0.$$.fragment),j9r=l(),Ao=a("div"),f(z0.$$.fragment),D9r=l(),y2e=a("p"),G9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),O9r=l(),xn=a("p"),V9r=o("The model class to instantiate is selected based on the "),L2e=a("code"),X9r=o("model_type"),z9r=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Q9r=o("pretrained_model_name_or_path"),W9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=a("code"),H9r=o("pretrained_model_name_or_path"),U9r=o(":"),J9r=l(),S2e=a("ul"),EM=a("li"),R2e=a("strong"),Y9r=o("speech_to_text"),K9r=o(" \u2014 "),zQ=a("a"),Z9r=o("TFSpeech2TextForConditionalGeneration"),eMr=o(" (Speech2Text model)"),oMr=l(),B2e=a("p"),rMr=o("Examples:"),tMr=l(),f(Q0.$$.fragment),gPe=l(),Zc=a("h2"),CM=a("a"),P2e=a("span"),f(W0.$$.fragment),aMr=l(),$2e=a("span"),nMr=o("FlaxAutoModel"),hPe=l(),Rr=a("div"),f(H0.$$.fragment),sMr=l(),ef=a("p"),lMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QQ=a("a"),iMr=o("from_pretrained()"),dMr=o(" class method or the "),WQ=a("a"),cMr=o("from_config()"),fMr=o(` class
method.`),mMr=l(),U0=a("p"),gMr=o("This class cannot be instantiated directly using "),I2e=a("code"),hMr=o("__init__()"),pMr=o(" (throws an error)."),_Mr=l(),At=a("div"),f(J0.$$.fragment),uMr=l(),q2e=a("p"),bMr=o("Instantiates one of the base model classes of the library from a configuration."),vMr=l(),of=a("p"),FMr=o(`Note:
Loading a model from its configuration file does `),N2e=a("strong"),TMr=o("not"),MMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),EMr=o("from_pretrained()"),CMr=o(" to load the model weights."),wMr=l(),j2e=a("p"),AMr=o("Examples:"),yMr=l(),f(Y0.$$.fragment),LMr=l(),yo=a("div"),f(K0.$$.fragment),xMr=l(),D2e=a("p"),kMr=o("Instantiate one of the base model classes of the library from a pretrained model."),SMr=l(),kn=a("p"),RMr=o("The model class to instantiate is selected based on the "),G2e=a("code"),BMr=o("model_type"),PMr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),$Mr=o("pretrained_model_name_or_path"),IMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),qMr=o("pretrained_model_name_or_path"),NMr=o(":"),jMr=l(),z=a("ul"),wM=a("li"),X2e=a("strong"),DMr=o("albert"),GMr=o(" \u2014 "),UQ=a("a"),OMr=o("FlaxAlbertModel"),VMr=o(" (ALBERT model)"),XMr=l(),AM=a("li"),z2e=a("strong"),zMr=o("bart"),QMr=o(" \u2014 "),JQ=a("a"),WMr=o("FlaxBartModel"),HMr=o(" (BART model)"),UMr=l(),yM=a("li"),Q2e=a("strong"),JMr=o("beit"),YMr=o(" \u2014 "),YQ=a("a"),KMr=o("FlaxBeitModel"),ZMr=o(" (BEiT model)"),e4r=l(),LM=a("li"),W2e=a("strong"),o4r=o("bert"),r4r=o(" \u2014 "),KQ=a("a"),t4r=o("FlaxBertModel"),a4r=o(" (BERT model)"),n4r=l(),xM=a("li"),H2e=a("strong"),s4r=o("big_bird"),l4r=o(" \u2014 "),ZQ=a("a"),i4r=o("FlaxBigBirdModel"),d4r=o(" (BigBird model)"),c4r=l(),kM=a("li"),U2e=a("strong"),f4r=o("blenderbot"),m4r=o(" \u2014 "),eW=a("a"),g4r=o("FlaxBlenderbotModel"),h4r=o(" (Blenderbot model)"),p4r=l(),SM=a("li"),J2e=a("strong"),_4r=o("blenderbot-small"),u4r=o(" \u2014 "),oW=a("a"),b4r=o("FlaxBlenderbotSmallModel"),v4r=o(" (BlenderbotSmall model)"),F4r=l(),RM=a("li"),Y2e=a("strong"),T4r=o("clip"),M4r=o(" \u2014 "),rW=a("a"),E4r=o("FlaxCLIPModel"),C4r=o(" (CLIP model)"),w4r=l(),BM=a("li"),K2e=a("strong"),A4r=o("distilbert"),y4r=o(" \u2014 "),tW=a("a"),L4r=o("FlaxDistilBertModel"),x4r=o(" (DistilBERT model)"),k4r=l(),PM=a("li"),Z2e=a("strong"),S4r=o("electra"),R4r=o(" \u2014 "),aW=a("a"),B4r=o("FlaxElectraModel"),P4r=o(" (ELECTRA model)"),$4r=l(),$M=a("li"),eve=a("strong"),I4r=o("gpt2"),q4r=o(" \u2014 "),nW=a("a"),N4r=o("FlaxGPT2Model"),j4r=o(" (OpenAI GPT-2 model)"),D4r=l(),IM=a("li"),ove=a("strong"),G4r=o("gpt_neo"),O4r=o(" \u2014 "),sW=a("a"),V4r=o("FlaxGPTNeoModel"),X4r=o(" (GPT Neo model)"),z4r=l(),qM=a("li"),rve=a("strong"),Q4r=o("gptj"),W4r=o(" \u2014 "),lW=a("a"),H4r=o("FlaxGPTJModel"),U4r=o(" (GPT-J model)"),J4r=l(),NM=a("li"),tve=a("strong"),Y4r=o("marian"),K4r=o(" \u2014 "),iW=a("a"),Z4r=o("FlaxMarianModel"),eEr=o(" (Marian model)"),oEr=l(),jM=a("li"),ave=a("strong"),rEr=o("mbart"),tEr=o(" \u2014 "),dW=a("a"),aEr=o("FlaxMBartModel"),nEr=o(" (mBART model)"),sEr=l(),DM=a("li"),nve=a("strong"),lEr=o("mt5"),iEr=o(" \u2014 "),cW=a("a"),dEr=o("FlaxMT5Model"),cEr=o(" (mT5 model)"),fEr=l(),GM=a("li"),sve=a("strong"),mEr=o("pegasus"),gEr=o(" \u2014 "),fW=a("a"),hEr=o("FlaxPegasusModel"),pEr=o(" (Pegasus model)"),_Er=l(),OM=a("li"),lve=a("strong"),uEr=o("roberta"),bEr=o(" \u2014 "),mW=a("a"),vEr=o("FlaxRobertaModel"),FEr=o(" (RoBERTa model)"),TEr=l(),VM=a("li"),ive=a("strong"),MEr=o("roformer"),EEr=o(" \u2014 "),gW=a("a"),CEr=o("FlaxRoFormerModel"),wEr=o(" (RoFormer model)"),AEr=l(),XM=a("li"),dve=a("strong"),yEr=o("t5"),LEr=o(" \u2014 "),hW=a("a"),xEr=o("FlaxT5Model"),kEr=o(" (T5 model)"),SEr=l(),zM=a("li"),cve=a("strong"),REr=o("vision-text-dual-encoder"),BEr=o(" \u2014 "),pW=a("a"),PEr=o("FlaxVisionTextDualEncoderModel"),$Er=o(" (VisionTextDualEncoder model)"),IEr=l(),QM=a("li"),fve=a("strong"),qEr=o("vit"),NEr=o(" \u2014 "),_W=a("a"),jEr=o("FlaxViTModel"),DEr=o(" (ViT model)"),GEr=l(),WM=a("li"),mve=a("strong"),OEr=o("wav2vec2"),VEr=o(" \u2014 "),uW=a("a"),XEr=o("FlaxWav2Vec2Model"),zEr=o(" (Wav2Vec2 model)"),QEr=l(),HM=a("li"),gve=a("strong"),WEr=o("xglm"),HEr=o(" \u2014 "),bW=a("a"),UEr=o("FlaxXGLMModel"),JEr=o(" (XGLM model)"),YEr=l(),UM=a("li"),hve=a("strong"),KEr=o("xlm-roberta"),ZEr=o(" \u2014 "),vW=a("a"),e5r=o("FlaxXLMRobertaModel"),o5r=o(" (XLM-RoBERTa model)"),r5r=l(),pve=a("p"),t5r=o("Examples:"),a5r=l(),f(Z0.$$.fragment),pPe=l(),rf=a("h2"),JM=a("a"),_ve=a("span"),f(ey.$$.fragment),n5r=l(),uve=a("span"),s5r=o("FlaxAutoModelForCausalLM"),_Pe=l(),Br=a("div"),f(oy.$$.fragment),l5r=l(),tf=a("p"),i5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FW=a("a"),d5r=o("from_pretrained()"),c5r=o(" class method or the "),TW=a("a"),f5r=o("from_config()"),m5r=o(` class
method.`),g5r=l(),ry=a("p"),h5r=o("This class cannot be instantiated directly using "),bve=a("code"),p5r=o("__init__()"),_5r=o(" (throws an error)."),u5r=l(),yt=a("div"),f(ty.$$.fragment),b5r=l(),vve=a("p"),v5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),F5r=l(),af=a("p"),T5r=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),M5r=o("not"),E5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),C5r=o("from_pretrained()"),w5r=o(" to load the model weights."),A5r=l(),Tve=a("p"),y5r=o("Examples:"),L5r=l(),f(ay.$$.fragment),x5r=l(),Lo=a("div"),f(ny.$$.fragment),k5r=l(),Mve=a("p"),S5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R5r=l(),Sn=a("p"),B5r=o("The model class to instantiate is selected based on the "),Eve=a("code"),P5r=o("model_type"),$5r=o(` property of the config object (either
passed as an argument or loaded from `),Cve=a("code"),I5r=o("pretrained_model_name_or_path"),q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=a("code"),N5r=o("pretrained_model_name_or_path"),j5r=o(":"),D5r=l(),ca=a("ul"),YM=a("li"),Ave=a("strong"),G5r=o("bart"),O5r=o(" \u2014 "),EW=a("a"),V5r=o("FlaxBartForCausalLM"),X5r=o(" (BART model)"),z5r=l(),KM=a("li"),yve=a("strong"),Q5r=o("gpt2"),W5r=o(" \u2014 "),CW=a("a"),H5r=o("FlaxGPT2LMHeadModel"),U5r=o(" (OpenAI GPT-2 model)"),J5r=l(),ZM=a("li"),Lve=a("strong"),Y5r=o("gpt_neo"),K5r=o(" \u2014 "),wW=a("a"),Z5r=o("FlaxGPTNeoForCausalLM"),e3r=o(" (GPT Neo model)"),o3r=l(),e4=a("li"),xve=a("strong"),r3r=o("gptj"),t3r=o(" \u2014 "),AW=a("a"),a3r=o("FlaxGPTJForCausalLM"),n3r=o(" (GPT-J model)"),s3r=l(),o4=a("li"),kve=a("strong"),l3r=o("xglm"),i3r=o(" \u2014 "),yW=a("a"),d3r=o("FlaxXGLMForCausalLM"),c3r=o(" (XGLM model)"),f3r=l(),Sve=a("p"),m3r=o("Examples:"),g3r=l(),f(sy.$$.fragment),uPe=l(),nf=a("h2"),r4=a("a"),Rve=a("span"),f(ly.$$.fragment),h3r=l(),Bve=a("span"),p3r=o("FlaxAutoModelForPreTraining"),bPe=l(),Pr=a("div"),f(iy.$$.fragment),_3r=l(),sf=a("p"),u3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LW=a("a"),b3r=o("from_pretrained()"),v3r=o(" class method or the "),xW=a("a"),F3r=o("from_config()"),T3r=o(` class
method.`),M3r=l(),dy=a("p"),E3r=o("This class cannot be instantiated directly using "),Pve=a("code"),C3r=o("__init__()"),w3r=o(" (throws an error)."),A3r=l(),Lt=a("div"),f(cy.$$.fragment),y3r=l(),$ve=a("p"),L3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),x3r=l(),lf=a("p"),k3r=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),S3r=o("not"),R3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),B3r=o("from_pretrained()"),P3r=o(" to load the model weights."),$3r=l(),qve=a("p"),I3r=o("Examples:"),q3r=l(),f(fy.$$.fragment),N3r=l(),xo=a("div"),f(my.$$.fragment),j3r=l(),Nve=a("p"),D3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G3r=l(),Rn=a("p"),O3r=o("The model class to instantiate is selected based on the "),jve=a("code"),V3r=o("model_type"),X3r=o(` property of the config object (either
passed as an argument or loaded from `),Dve=a("code"),z3r=o("pretrained_model_name_or_path"),Q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=a("code"),W3r=o("pretrained_model_name_or_path"),H3r=o(":"),U3r=l(),me=a("ul"),t4=a("li"),Ove=a("strong"),J3r=o("albert"),Y3r=o(" \u2014 "),SW=a("a"),K3r=o("FlaxAlbertForPreTraining"),Z3r=o(" (ALBERT model)"),eCr=l(),a4=a("li"),Vve=a("strong"),oCr=o("bart"),rCr=o(" \u2014 "),RW=a("a"),tCr=o("FlaxBartForConditionalGeneration"),aCr=o(" (BART model)"),nCr=l(),n4=a("li"),Xve=a("strong"),sCr=o("bert"),lCr=o(" \u2014 "),BW=a("a"),iCr=o("FlaxBertForPreTraining"),dCr=o(" (BERT model)"),cCr=l(),s4=a("li"),zve=a("strong"),fCr=o("big_bird"),mCr=o(" \u2014 "),PW=a("a"),gCr=o("FlaxBigBirdForPreTraining"),hCr=o(" (BigBird model)"),pCr=l(),l4=a("li"),Qve=a("strong"),_Cr=o("electra"),uCr=o(" \u2014 "),$W=a("a"),bCr=o("FlaxElectraForPreTraining"),vCr=o(" (ELECTRA model)"),FCr=l(),i4=a("li"),Wve=a("strong"),TCr=o("mbart"),MCr=o(" \u2014 "),IW=a("a"),ECr=o("FlaxMBartForConditionalGeneration"),CCr=o(" (mBART model)"),wCr=l(),d4=a("li"),Hve=a("strong"),ACr=o("mt5"),yCr=o(" \u2014 "),qW=a("a"),LCr=o("FlaxMT5ForConditionalGeneration"),xCr=o(" (mT5 model)"),kCr=l(),c4=a("li"),Uve=a("strong"),SCr=o("roberta"),RCr=o(" \u2014 "),NW=a("a"),BCr=o("FlaxRobertaForMaskedLM"),PCr=o(" (RoBERTa model)"),$Cr=l(),f4=a("li"),Jve=a("strong"),ICr=o("roformer"),qCr=o(" \u2014 "),jW=a("a"),NCr=o("FlaxRoFormerForMaskedLM"),jCr=o(" (RoFormer model)"),DCr=l(),m4=a("li"),Yve=a("strong"),GCr=o("t5"),OCr=o(" \u2014 "),DW=a("a"),VCr=o("FlaxT5ForConditionalGeneration"),XCr=o(" (T5 model)"),zCr=l(),g4=a("li"),Kve=a("strong"),QCr=o("wav2vec2"),WCr=o(" \u2014 "),GW=a("a"),HCr=o("FlaxWav2Vec2ForPreTraining"),UCr=o(" (Wav2Vec2 model)"),JCr=l(),h4=a("li"),Zve=a("strong"),YCr=o("xlm-roberta"),KCr=o(" \u2014 "),OW=a("a"),ZCr=o("FlaxXLMRobertaForMaskedLM"),ewr=o(" (XLM-RoBERTa model)"),owr=l(),eFe=a("p"),rwr=o("Examples:"),twr=l(),f(gy.$$.fragment),vPe=l(),df=a("h2"),p4=a("a"),oFe=a("span"),f(hy.$$.fragment),awr=l(),rFe=a("span"),nwr=o("FlaxAutoModelForMaskedLM"),FPe=l(),$r=a("div"),f(py.$$.fragment),swr=l(),cf=a("p"),lwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VW=a("a"),iwr=o("from_pretrained()"),dwr=o(" class method or the "),XW=a("a"),cwr=o("from_config()"),fwr=o(` class
method.`),mwr=l(),_y=a("p"),gwr=o("This class cannot be instantiated directly using "),tFe=a("code"),hwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),xt=a("div"),f(uy.$$.fragment),uwr=l(),aFe=a("p"),bwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vwr=l(),ff=a("p"),Fwr=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),Twr=o("not"),Mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" to load the model weights."),wwr=l(),sFe=a("p"),Awr=o("Examples:"),ywr=l(),f(by.$$.fragment),Lwr=l(),ko=a("div"),f(vy.$$.fragment),xwr=l(),lFe=a("p"),kwr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Swr=l(),Bn=a("p"),Rwr=o("The model class to instantiate is selected based on the "),iFe=a("code"),Bwr=o("model_type"),Pwr=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),$wr=o("pretrained_model_name_or_path"),Iwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),qwr=o("pretrained_model_name_or_path"),Nwr=o(":"),jwr=l(),ve=a("ul"),_4=a("li"),fFe=a("strong"),Dwr=o("albert"),Gwr=o(" \u2014 "),QW=a("a"),Owr=o("FlaxAlbertForMaskedLM"),Vwr=o(" (ALBERT model)"),Xwr=l(),u4=a("li"),mFe=a("strong"),zwr=o("bart"),Qwr=o(" \u2014 "),WW=a("a"),Wwr=o("FlaxBartForConditionalGeneration"),Hwr=o(" (BART model)"),Uwr=l(),b4=a("li"),gFe=a("strong"),Jwr=o("bert"),Ywr=o(" \u2014 "),HW=a("a"),Kwr=o("FlaxBertForMaskedLM"),Zwr=o(" (BERT model)"),eAr=l(),v4=a("li"),hFe=a("strong"),oAr=o("big_bird"),rAr=o(" \u2014 "),UW=a("a"),tAr=o("FlaxBigBirdForMaskedLM"),aAr=o(" (BigBird model)"),nAr=l(),F4=a("li"),pFe=a("strong"),sAr=o("distilbert"),lAr=o(" \u2014 "),JW=a("a"),iAr=o("FlaxDistilBertForMaskedLM"),dAr=o(" (DistilBERT model)"),cAr=l(),T4=a("li"),_Fe=a("strong"),fAr=o("electra"),mAr=o(" \u2014 "),YW=a("a"),gAr=o("FlaxElectraForMaskedLM"),hAr=o(" (ELECTRA model)"),pAr=l(),M4=a("li"),uFe=a("strong"),_Ar=o("mbart"),uAr=o(" \u2014 "),KW=a("a"),bAr=o("FlaxMBartForConditionalGeneration"),vAr=o(" (mBART model)"),FAr=l(),E4=a("li"),bFe=a("strong"),TAr=o("roberta"),MAr=o(" \u2014 "),ZW=a("a"),EAr=o("FlaxRobertaForMaskedLM"),CAr=o(" (RoBERTa model)"),wAr=l(),C4=a("li"),vFe=a("strong"),AAr=o("roformer"),yAr=o(" \u2014 "),eH=a("a"),LAr=o("FlaxRoFormerForMaskedLM"),xAr=o(" (RoFormer model)"),kAr=l(),w4=a("li"),FFe=a("strong"),SAr=o("xlm-roberta"),RAr=o(" \u2014 "),oH=a("a"),BAr=o("FlaxXLMRobertaForMaskedLM"),PAr=o(" (XLM-RoBERTa model)"),$Ar=l(),TFe=a("p"),IAr=o("Examples:"),qAr=l(),f(Fy.$$.fragment),TPe=l(),mf=a("h2"),A4=a("a"),MFe=a("span"),f(Ty.$$.fragment),NAr=l(),EFe=a("span"),jAr=o("FlaxAutoModelForSeq2SeqLM"),MPe=l(),Ir=a("div"),f(My.$$.fragment),DAr=l(),gf=a("p"),GAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rH=a("a"),OAr=o("from_pretrained()"),VAr=o(" class method or the "),tH=a("a"),XAr=o("from_config()"),zAr=o(` class
method.`),QAr=l(),Ey=a("p"),WAr=o("This class cannot be instantiated directly using "),CFe=a("code"),HAr=o("__init__()"),UAr=o(" (throws an error)."),JAr=l(),kt=a("div"),f(Cy.$$.fragment),YAr=l(),wFe=a("p"),KAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZAr=l(),hf=a("p"),e0r=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),o0r=o("not"),r0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),t0r=o("from_pretrained()"),a0r=o(" to load the model weights."),n0r=l(),yFe=a("p"),s0r=o("Examples:"),l0r=l(),f(wy.$$.fragment),i0r=l(),So=a("div"),f(Ay.$$.fragment),d0r=l(),LFe=a("p"),c0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f0r=l(),Pn=a("p"),m0r=o("The model class to instantiate is selected based on the "),xFe=a("code"),g0r=o("model_type"),h0r=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),p0r=o("pretrained_model_name_or_path"),_0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),u0r=o("pretrained_model_name_or_path"),b0r=o(":"),v0r=l(),Ee=a("ul"),y4=a("li"),RFe=a("strong"),F0r=o("bart"),T0r=o(" \u2014 "),nH=a("a"),M0r=o("FlaxBartForConditionalGeneration"),E0r=o(" (BART model)"),C0r=l(),L4=a("li"),BFe=a("strong"),w0r=o("blenderbot"),A0r=o(" \u2014 "),sH=a("a"),y0r=o("FlaxBlenderbotForConditionalGeneration"),L0r=o(" (Blenderbot model)"),x0r=l(),x4=a("li"),PFe=a("strong"),k0r=o("blenderbot-small"),S0r=o(" \u2014 "),lH=a("a"),R0r=o("FlaxBlenderbotSmallForConditionalGeneration"),B0r=o(" (BlenderbotSmall model)"),P0r=l(),k4=a("li"),$Fe=a("strong"),$0r=o("encoder-decoder"),I0r=o(" \u2014 "),iH=a("a"),q0r=o("FlaxEncoderDecoderModel"),N0r=o(" (Encoder decoder model)"),j0r=l(),S4=a("li"),IFe=a("strong"),D0r=o("marian"),G0r=o(" \u2014 "),dH=a("a"),O0r=o("FlaxMarianMTModel"),V0r=o(" (Marian model)"),X0r=l(),R4=a("li"),qFe=a("strong"),z0r=o("mbart"),Q0r=o(" \u2014 "),cH=a("a"),W0r=o("FlaxMBartForConditionalGeneration"),H0r=o(" (mBART model)"),U0r=l(),B4=a("li"),NFe=a("strong"),J0r=o("mt5"),Y0r=o(" \u2014 "),fH=a("a"),K0r=o("FlaxMT5ForConditionalGeneration"),Z0r=o(" (mT5 model)"),eyr=l(),P4=a("li"),jFe=a("strong"),oyr=o("pegasus"),ryr=o(" \u2014 "),mH=a("a"),tyr=o("FlaxPegasusForConditionalGeneration"),ayr=o(" (Pegasus model)"),nyr=l(),$4=a("li"),DFe=a("strong"),syr=o("t5"),lyr=o(" \u2014 "),gH=a("a"),iyr=o("FlaxT5ForConditionalGeneration"),dyr=o(" (T5 model)"),cyr=l(),GFe=a("p"),fyr=o("Examples:"),myr=l(),f(yy.$$.fragment),EPe=l(),pf=a("h2"),I4=a("a"),OFe=a("span"),f(Ly.$$.fragment),gyr=l(),VFe=a("span"),hyr=o("FlaxAutoModelForSequenceClassification"),CPe=l(),qr=a("div"),f(xy.$$.fragment),pyr=l(),_f=a("p"),_yr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hH=a("a"),uyr=o("from_pretrained()"),byr=o(" class method or the "),pH=a("a"),vyr=o("from_config()"),Fyr=o(` class
method.`),Tyr=l(),ky=a("p"),Myr=o("This class cannot be instantiated directly using "),XFe=a("code"),Eyr=o("__init__()"),Cyr=o(" (throws an error)."),wyr=l(),St=a("div"),f(Sy.$$.fragment),Ayr=l(),zFe=a("p"),yyr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lyr=l(),uf=a("p"),xyr=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),kyr=o("not"),Syr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Ryr=o("from_pretrained()"),Byr=o(" to load the model weights."),Pyr=l(),WFe=a("p"),$yr=o("Examples:"),Iyr=l(),f(Ry.$$.fragment),qyr=l(),Ro=a("div"),f(By.$$.fragment),Nyr=l(),HFe=a("p"),jyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dyr=l(),$n=a("p"),Gyr=o("The model class to instantiate is selected based on the "),UFe=a("code"),Oyr=o("model_type"),Vyr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),Xyr=o("pretrained_model_name_or_path"),zyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),Qyr=o("pretrained_model_name_or_path"),Wyr=o(":"),Hyr=l(),Fe=a("ul"),q4=a("li"),KFe=a("strong"),Uyr=o("albert"),Jyr=o(" \u2014 "),uH=a("a"),Yyr=o("FlaxAlbertForSequenceClassification"),Kyr=o(" (ALBERT model)"),Zyr=l(),N4=a("li"),ZFe=a("strong"),eLr=o("bart"),oLr=o(" \u2014 "),bH=a("a"),rLr=o("FlaxBartForSequenceClassification"),tLr=o(" (BART model)"),aLr=l(),j4=a("li"),eTe=a("strong"),nLr=o("bert"),sLr=o(" \u2014 "),vH=a("a"),lLr=o("FlaxBertForSequenceClassification"),iLr=o(" (BERT model)"),dLr=l(),D4=a("li"),oTe=a("strong"),cLr=o("big_bird"),fLr=o(" \u2014 "),FH=a("a"),mLr=o("FlaxBigBirdForSequenceClassification"),gLr=o(" (BigBird model)"),hLr=l(),G4=a("li"),rTe=a("strong"),pLr=o("distilbert"),_Lr=o(" \u2014 "),TH=a("a"),uLr=o("FlaxDistilBertForSequenceClassification"),bLr=o(" (DistilBERT model)"),vLr=l(),O4=a("li"),tTe=a("strong"),FLr=o("electra"),TLr=o(" \u2014 "),MH=a("a"),MLr=o("FlaxElectraForSequenceClassification"),ELr=o(" (ELECTRA model)"),CLr=l(),V4=a("li"),aTe=a("strong"),wLr=o("mbart"),ALr=o(" \u2014 "),EH=a("a"),yLr=o("FlaxMBartForSequenceClassification"),LLr=o(" (mBART model)"),xLr=l(),X4=a("li"),nTe=a("strong"),kLr=o("roberta"),SLr=o(" \u2014 "),CH=a("a"),RLr=o("FlaxRobertaForSequenceClassification"),BLr=o(" (RoBERTa model)"),PLr=l(),z4=a("li"),sTe=a("strong"),$Lr=o("roformer"),ILr=o(" \u2014 "),wH=a("a"),qLr=o("FlaxRoFormerForSequenceClassification"),NLr=o(" (RoFormer model)"),jLr=l(),Q4=a("li"),lTe=a("strong"),DLr=o("xlm-roberta"),GLr=o(" \u2014 "),AH=a("a"),OLr=o("FlaxXLMRobertaForSequenceClassification"),VLr=o(" (XLM-RoBERTa model)"),XLr=l(),iTe=a("p"),zLr=o("Examples:"),QLr=l(),f(Py.$$.fragment),wPe=l(),bf=a("h2"),W4=a("a"),dTe=a("span"),f($y.$$.fragment),WLr=l(),cTe=a("span"),HLr=o("FlaxAutoModelForQuestionAnswering"),APe=l(),Nr=a("div"),f(Iy.$$.fragment),ULr=l(),vf=a("p"),JLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yH=a("a"),YLr=o("from_pretrained()"),KLr=o(" class method or the "),LH=a("a"),ZLr=o("from_config()"),e7r=o(` class
method.`),o7r=l(),qy=a("p"),r7r=o("This class cannot be instantiated directly using "),fTe=a("code"),t7r=o("__init__()"),a7r=o(" (throws an error)."),n7r=l(),Rt=a("div"),f(Ny.$$.fragment),s7r=l(),mTe=a("p"),l7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),i7r=l(),Ff=a("p"),d7r=o(`Note:
Loading a model from its configuration file does `),gTe=a("strong"),c7r=o("not"),f7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),m7r=o("from_pretrained()"),g7r=o(" to load the model weights."),h7r=l(),hTe=a("p"),p7r=o("Examples:"),_7r=l(),f(jy.$$.fragment),u7r=l(),Bo=a("div"),f(Dy.$$.fragment),b7r=l(),pTe=a("p"),v7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),F7r=l(),In=a("p"),T7r=o("The model class to instantiate is selected based on the "),_Te=a("code"),M7r=o("model_type"),E7r=o(` property of the config object (either
passed as an argument or loaded from `),uTe=a("code"),C7r=o("pretrained_model_name_or_path"),w7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=a("code"),A7r=o("pretrained_model_name_or_path"),y7r=o(":"),L7r=l(),Te=a("ul"),H4=a("li"),vTe=a("strong"),x7r=o("albert"),k7r=o(" \u2014 "),kH=a("a"),S7r=o("FlaxAlbertForQuestionAnswering"),R7r=o(" (ALBERT model)"),B7r=l(),U4=a("li"),FTe=a("strong"),P7r=o("bart"),$7r=o(" \u2014 "),SH=a("a"),I7r=o("FlaxBartForQuestionAnswering"),q7r=o(" (BART model)"),N7r=l(),J4=a("li"),TTe=a("strong"),j7r=o("bert"),D7r=o(" \u2014 "),RH=a("a"),G7r=o("FlaxBertForQuestionAnswering"),O7r=o(" (BERT model)"),V7r=l(),Y4=a("li"),MTe=a("strong"),X7r=o("big_bird"),z7r=o(" \u2014 "),BH=a("a"),Q7r=o("FlaxBigBirdForQuestionAnswering"),W7r=o(" (BigBird model)"),H7r=l(),K4=a("li"),ETe=a("strong"),U7r=o("distilbert"),J7r=o(" \u2014 "),PH=a("a"),Y7r=o("FlaxDistilBertForQuestionAnswering"),K7r=o(" (DistilBERT model)"),Z7r=l(),Z4=a("li"),CTe=a("strong"),exr=o("electra"),oxr=o(" \u2014 "),$H=a("a"),rxr=o("FlaxElectraForQuestionAnswering"),txr=o(" (ELECTRA model)"),axr=l(),eE=a("li"),wTe=a("strong"),nxr=o("mbart"),sxr=o(" \u2014 "),IH=a("a"),lxr=o("FlaxMBartForQuestionAnswering"),ixr=o(" (mBART model)"),dxr=l(),oE=a("li"),ATe=a("strong"),cxr=o("roberta"),fxr=o(" \u2014 "),qH=a("a"),mxr=o("FlaxRobertaForQuestionAnswering"),gxr=o(" (RoBERTa model)"),hxr=l(),rE=a("li"),yTe=a("strong"),pxr=o("roformer"),_xr=o(" \u2014 "),NH=a("a"),uxr=o("FlaxRoFormerForQuestionAnswering"),bxr=o(" (RoFormer model)"),vxr=l(),tE=a("li"),LTe=a("strong"),Fxr=o("xlm-roberta"),Txr=o(" \u2014 "),jH=a("a"),Mxr=o("FlaxXLMRobertaForQuestionAnswering"),Exr=o(" (XLM-RoBERTa model)"),Cxr=l(),xTe=a("p"),wxr=o("Examples:"),Axr=l(),f(Gy.$$.fragment),yPe=l(),Tf=a("h2"),aE=a("a"),kTe=a("span"),f(Oy.$$.fragment),yxr=l(),STe=a("span"),Lxr=o("FlaxAutoModelForTokenClassification"),LPe=l(),jr=a("div"),f(Vy.$$.fragment),xxr=l(),Mf=a("p"),kxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DH=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" class method or the "),GH=a("a"),Bxr=o("from_config()"),Pxr=o(` class
method.`),$xr=l(),Xy=a("p"),Ixr=o("This class cannot be instantiated directly using "),RTe=a("code"),qxr=o("__init__()"),Nxr=o(" (throws an error)."),jxr=l(),Bt=a("div"),f(zy.$$.fragment),Dxr=l(),BTe=a("p"),Gxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Oxr=l(),Ef=a("p"),Vxr=o(`Note:
Loading a model from its configuration file does `),PTe=a("strong"),Xxr=o("not"),zxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),Qxr=o("from_pretrained()"),Wxr=o(" to load the model weights."),Hxr=l(),$Te=a("p"),Uxr=o("Examples:"),Jxr=l(),f(Qy.$$.fragment),Yxr=l(),Po=a("div"),f(Wy.$$.fragment),Kxr=l(),ITe=a("p"),Zxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ekr=l(),qn=a("p"),okr=o("The model class to instantiate is selected based on the "),qTe=a("code"),rkr=o("model_type"),tkr=o(` property of the config object (either
passed as an argument or loaded from `),NTe=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=a("code"),skr=o("pretrained_model_name_or_path"),lkr=o(":"),ikr=l(),Be=a("ul"),nE=a("li"),DTe=a("strong"),dkr=o("albert"),ckr=o(" \u2014 "),VH=a("a"),fkr=o("FlaxAlbertForTokenClassification"),mkr=o(" (ALBERT model)"),gkr=l(),sE=a("li"),GTe=a("strong"),hkr=o("bert"),pkr=o(" \u2014 "),XH=a("a"),_kr=o("FlaxBertForTokenClassification"),ukr=o(" (BERT model)"),bkr=l(),lE=a("li"),OTe=a("strong"),vkr=o("big_bird"),Fkr=o(" \u2014 "),zH=a("a"),Tkr=o("FlaxBigBirdForTokenClassification"),Mkr=o(" (BigBird model)"),Ekr=l(),iE=a("li"),VTe=a("strong"),Ckr=o("distilbert"),wkr=o(" \u2014 "),QH=a("a"),Akr=o("FlaxDistilBertForTokenClassification"),ykr=o(" (DistilBERT model)"),Lkr=l(),dE=a("li"),XTe=a("strong"),xkr=o("electra"),kkr=o(" \u2014 "),WH=a("a"),Skr=o("FlaxElectraForTokenClassification"),Rkr=o(" (ELECTRA model)"),Bkr=l(),cE=a("li"),zTe=a("strong"),Pkr=o("roberta"),$kr=o(" \u2014 "),HH=a("a"),Ikr=o("FlaxRobertaForTokenClassification"),qkr=o(" (RoBERTa model)"),Nkr=l(),fE=a("li"),QTe=a("strong"),jkr=o("roformer"),Dkr=o(" \u2014 "),UH=a("a"),Gkr=o("FlaxRoFormerForTokenClassification"),Okr=o(" (RoFormer model)"),Vkr=l(),mE=a("li"),WTe=a("strong"),Xkr=o("xlm-roberta"),zkr=o(" \u2014 "),JH=a("a"),Qkr=o("FlaxXLMRobertaForTokenClassification"),Wkr=o(" (XLM-RoBERTa model)"),Hkr=l(),HTe=a("p"),Ukr=o("Examples:"),Jkr=l(),f(Hy.$$.fragment),xPe=l(),Cf=a("h2"),gE=a("a"),UTe=a("span"),f(Uy.$$.fragment),Ykr=l(),JTe=a("span"),Kkr=o("FlaxAutoModelForMultipleChoice"),kPe=l(),Dr=a("div"),f(Jy.$$.fragment),Zkr=l(),wf=a("p"),eSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YH=a("a"),oSr=o("from_pretrained()"),rSr=o(" class method or the "),KH=a("a"),tSr=o("from_config()"),aSr=o(` class
method.`),nSr=l(),Yy=a("p"),sSr=o("This class cannot be instantiated directly using "),YTe=a("code"),lSr=o("__init__()"),iSr=o(" (throws an error)."),dSr=l(),Pt=a("div"),f(Ky.$$.fragment),cSr=l(),KTe=a("p"),fSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mSr=l(),Af=a("p"),gSr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),hSr=o("not"),pSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=a("a"),_Sr=o("from_pretrained()"),uSr=o(" to load the model weights."),bSr=l(),e8e=a("p"),vSr=o("Examples:"),FSr=l(),f(Zy.$$.fragment),TSr=l(),$o=a("div"),f(eL.$$.fragment),MSr=l(),o8e=a("p"),ESr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CSr=l(),Nn=a("p"),wSr=o("The model class to instantiate is selected based on the "),r8e=a("code"),ASr=o("model_type"),ySr=o(` property of the config object (either
passed as an argument or loaded from `),t8e=a("code"),LSr=o("pretrained_model_name_or_path"),xSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a8e=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),Pe=a("ul"),hE=a("li"),n8e=a("strong"),BSr=o("albert"),PSr=o(" \u2014 "),eU=a("a"),$Sr=o("FlaxAlbertForMultipleChoice"),ISr=o(" (ALBERT model)"),qSr=l(),pE=a("li"),s8e=a("strong"),NSr=o("bert"),jSr=o(" \u2014 "),oU=a("a"),DSr=o("FlaxBertForMultipleChoice"),GSr=o(" (BERT model)"),OSr=l(),_E=a("li"),l8e=a("strong"),VSr=o("big_bird"),XSr=o(" \u2014 "),rU=a("a"),zSr=o("FlaxBigBirdForMultipleChoice"),QSr=o(" (BigBird model)"),WSr=l(),uE=a("li"),i8e=a("strong"),HSr=o("distilbert"),USr=o(" \u2014 "),tU=a("a"),JSr=o("FlaxDistilBertForMultipleChoice"),YSr=o(" (DistilBERT model)"),KSr=l(),bE=a("li"),d8e=a("strong"),ZSr=o("electra"),eRr=o(" \u2014 "),aU=a("a"),oRr=o("FlaxElectraForMultipleChoice"),rRr=o(" (ELECTRA model)"),tRr=l(),vE=a("li"),c8e=a("strong"),aRr=o("roberta"),nRr=o(" \u2014 "),nU=a("a"),sRr=o("FlaxRobertaForMultipleChoice"),lRr=o(" (RoBERTa model)"),iRr=l(),FE=a("li"),f8e=a("strong"),dRr=o("roformer"),cRr=o(" \u2014 "),sU=a("a"),fRr=o("FlaxRoFormerForMultipleChoice"),mRr=o(" (RoFormer model)"),gRr=l(),TE=a("li"),m8e=a("strong"),hRr=o("xlm-roberta"),pRr=o(" \u2014 "),lU=a("a"),_Rr=o("FlaxXLMRobertaForMultipleChoice"),uRr=o(" (XLM-RoBERTa model)"),bRr=l(),g8e=a("p"),vRr=o("Examples:"),FRr=l(),f(oL.$$.fragment),SPe=l(),yf=a("h2"),ME=a("a"),h8e=a("span"),f(rL.$$.fragment),TRr=l(),p8e=a("span"),MRr=o("FlaxAutoModelForNextSentencePrediction"),RPe=l(),Gr=a("div"),f(tL.$$.fragment),ERr=l(),Lf=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),dU=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),aL=a("p"),kRr=o("This class cannot be instantiated directly using "),_8e=a("code"),SRr=o("__init__()"),RRr=o(" (throws an error)."),BRr=l(),$t=a("div"),f(nL.$$.fragment),PRr=l(),u8e=a("p"),$Rr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IRr=l(),xf=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),b8e=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),v8e=a("p"),VRr=o("Examples:"),XRr=l(),f(sL.$$.fragment),zRr=l(),Io=a("div"),f(lL.$$.fragment),QRr=l(),F8e=a("p"),WRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HRr=l(),jn=a("p"),URr=o("The model class to instantiate is selected based on the "),T8e=a("code"),JRr=o("model_type"),YRr=o(` property of the config object (either
passed as an argument or loaded from `),M8e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=a("code"),eBr=o("pretrained_model_name_or_path"),oBr=o(":"),rBr=l(),C8e=a("ul"),EE=a("li"),w8e=a("strong"),tBr=o("bert"),aBr=o(" \u2014 "),fU=a("a"),nBr=o("FlaxBertForNextSentencePrediction"),sBr=o(" (BERT model)"),lBr=l(),A8e=a("p"),iBr=o("Examples:"),dBr=l(),f(iL.$$.fragment),BPe=l(),kf=a("h2"),CE=a("a"),y8e=a("span"),f(dL.$$.fragment),cBr=l(),L8e=a("span"),fBr=o("FlaxAutoModelForImageClassification"),PPe=l(),Or=a("div"),f(cL.$$.fragment),mBr=l(),Sf=a("p"),gBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mU=a("a"),hBr=o("from_pretrained()"),pBr=o(" class method or the "),gU=a("a"),_Br=o("from_config()"),uBr=o(` class
method.`),bBr=l(),fL=a("p"),vBr=o("This class cannot be instantiated directly using "),x8e=a("code"),FBr=o("__init__()"),TBr=o(" (throws an error)."),MBr=l(),It=a("div"),f(mL.$$.fragment),EBr=l(),k8e=a("p"),CBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wBr=l(),Rf=a("p"),ABr=o(`Note:
Loading a model from its configuration file does `),S8e=a("strong"),yBr=o("not"),LBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=a("a"),xBr=o("from_pretrained()"),kBr=o(" to load the model weights."),SBr=l(),R8e=a("p"),RBr=o("Examples:"),BBr=l(),f(gL.$$.fragment),PBr=l(),qo=a("div"),f(hL.$$.fragment),$Br=l(),B8e=a("p"),IBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qBr=l(),Dn=a("p"),NBr=o("The model class to instantiate is selected based on the "),P8e=a("code"),jBr=o("model_type"),DBr=o(` property of the config object (either
passed as an argument or loaded from `),$8e=a("code"),GBr=o("pretrained_model_name_or_path"),OBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=a("code"),VBr=o("pretrained_model_name_or_path"),XBr=o(":"),zBr=l(),pL=a("ul"),wE=a("li"),q8e=a("strong"),QBr=o("beit"),WBr=o(" \u2014 "),pU=a("a"),HBr=o("FlaxBeitForImageClassification"),UBr=o(" (BEiT model)"),JBr=l(),AE=a("li"),N8e=a("strong"),YBr=o("vit"),KBr=o(" \u2014 "),_U=a("a"),ZBr=o("FlaxViTForImageClassification"),ePr=o(" (ViT model)"),oPr=l(),j8e=a("p"),rPr=o("Examples:"),tPr=l(),f(_L.$$.fragment),$Pe=l(),Bf=a("h2"),yE=a("a"),D8e=a("span"),f(uL.$$.fragment),aPr=l(),G8e=a("span"),nPr=o("FlaxAutoModelForVision2Seq"),IPe=l(),Vr=a("div"),f(bL.$$.fragment),sPr=l(),Pf=a("p"),lPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uU=a("a"),iPr=o("from_pretrained()"),dPr=o(" class method or the "),bU=a("a"),cPr=o("from_config()"),fPr=o(` class
method.`),mPr=l(),vL=a("p"),gPr=o("This class cannot be instantiated directly using "),O8e=a("code"),hPr=o("__init__()"),pPr=o(" (throws an error)."),_Pr=l(),qt=a("div"),f(FL.$$.fragment),uPr=l(),V8e=a("p"),bPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vPr=l(),$f=a("p"),FPr=o(`Note:
Loading a model from its configuration file does `),X8e=a("strong"),TPr=o("not"),MPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),EPr=o("from_pretrained()"),CPr=o(" to load the model weights."),wPr=l(),z8e=a("p"),APr=o("Examples:"),yPr=l(),f(TL.$$.fragment),LPr=l(),No=a("div"),f(ML.$$.fragment),xPr=l(),Q8e=a("p"),kPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),SPr=l(),Gn=a("p"),RPr=o("The model class to instantiate is selected based on the "),W8e=a("code"),BPr=o("model_type"),PPr=o(` property of the config object (either
passed as an argument or loaded from `),H8e=a("code"),$Pr=o("pretrained_model_name_or_path"),IPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(":"),jPr=l(),J8e=a("ul"),LE=a("li"),Y8e=a("strong"),DPr=o("vision-encoder-decoder"),GPr=o(" \u2014 "),FU=a("a"),OPr=o("FlaxVisionEncoderDecoderModel"),VPr=o(" (Vision Encoder decoder model)"),XPr=l(),K8e=a("p"),zPr=o("Examples:"),QPr=l(),f(EL.$$.fragment),this.h()},l(c){const u=N3t('[data-svelte="svelte-1phssyn"]',document.head);ee=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var CL=s(ce);Ce=n(CL,"A",{id:!0,class:!0,href:!0});var Z8e=s(Ce);lo=n(Z8e,"SPAN",{});var e9e=s(lo);m(he.$$.fragment,e9e),e9e.forEach(t),Z8e.forEach(t),Me=i(CL),Xo=n(CL,"SPAN",{});var HPr=s(Xo);Ni=r(HPr,"Auto Classes"),HPr.forEach(t),CL.forEach(t),Nf=i(c),fa=n(c,"P",{});var NPe=s(fa);ji=r(NPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(NPe,"CODE",{});var UPr=s(Di);x5=r(UPr,"from_pretrained()"),UPr.forEach(t),jf=r(NPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),NPe.forEach(t),xe=i(c),co=n(c,"P",{});var xE=s(co);Gi=r(xE,"Instantiating one of "),On=n(xE,"A",{href:!0});var JPr=s(On);k5=r(JPr,"AutoConfig"),JPr.forEach(t),Vn=r(xE,", "),Xn=n(xE,"A",{href:!0});var YPr=s(Xn);S5=r(YPr,"AutoModel"),YPr.forEach(t),Oi=r(xE,`, and
`),zn=n(xE,"A",{href:!0});var KPr=s(zn);R5=r(KPr,"AutoTokenizer"),KPr.forEach(t),Vi=r(xE," will directly create a class of the relevant architecture. For instance"),xE.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var jPe=s(ue);M7=r(jPe,"will create a model that is an instance of "),Xi=n(jPe,"A",{href:!0});var ZPr=s(Xi);E7=r(ZPr,"BertModel"),ZPr.forEach(t),C7=r(jPe,"."),jPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var DPe=s(Ga);w7=r(DPe,"There is one class of "),Gf=n(DPe,"CODE",{});var e$r=s(Gf);A7=r(e$r,"AutoModel"),e$r.forEach(t),UIe=r(DPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),DPe.forEach(t),IRe=i(c),zi=n(c,"H2",{class:!0});var GPe=s(zi);Of=n(GPe,"A",{id:!0,class:!0,href:!0});var o$r=s(Of);gY=n(o$r,"SPAN",{});var r$r=s(gY);m(B5.$$.fragment,r$r),r$r.forEach(t),o$r.forEach(t),JIe=i(GPe),hY=n(GPe,"SPAN",{});var t$r=s(hY);YIe=r(t$r,"Extending the Auto Classes"),t$r.forEach(t),GPe.forEach(t),qRe=i(c),Qn=n(c,"P",{});var TU=s(Qn);KIe=r(TU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),pY=n(TU,"CODE",{});var a$r=s(pY);ZIe=r(a$r,"NewModel"),a$r.forEach(t),eqe=r(TU,", make sure you have a "),_Y=n(TU,"CODE",{});var n$r=s(_Y);oqe=r(n$r,"NewModelConfig"),n$r.forEach(t),rqe=r(TU,` then you can add those to the auto
classes like this:`),TU.forEach(t),NRe=i(c),m(P5.$$.fragment,c),jRe=i(c),y7=n(c,"P",{});var s$r=s(y7);tqe=r(s$r,"You will then be able to use the auto classes like you would usually do!"),s$r.forEach(t),DRe=i(c),m(Vf.$$.fragment,c),GRe=i(c),Qi=n(c,"H2",{class:!0});var OPe=s(Qi);Xf=n(OPe,"A",{id:!0,class:!0,href:!0});var l$r=s(Xf);uY=n(l$r,"SPAN",{});var i$r=s(uY);m($5.$$.fragment,i$r),i$r.forEach(t),l$r.forEach(t),aqe=i(OPe),bY=n(OPe,"SPAN",{});var d$r=s(bY);nqe=r(d$r,"AutoConfig"),d$r.forEach(t),OPe.forEach(t),ORe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(I5.$$.fragment,Xs),sqe=i(Xs),q5=n(Xs,"P",{});var VPe=s(q5);lqe=r(VPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),L7=n(VPe,"A",{href:!0});var c$r=s(L7);iqe=r(c$r,"from_pretrained()"),c$r.forEach(t),dqe=r(VPe," class method."),VPe.forEach(t),cqe=i(Xs),N5=n(Xs,"P",{});var XPe=s(N5);fqe=r(XPe,"This class cannot be instantiated directly using "),vY=n(XPe,"CODE",{});var f$r=s(vY);mqe=r(f$r,"__init__()"),f$r.forEach(t),gqe=r(XPe," (throws an error)."),XPe.forEach(t),hqe=i(Xs),mo=n(Xs,"DIV",{class:!0});var ga=s(mo);m(j5.$$.fragment,ga),pqe=i(ga),FY=n(ga,"P",{});var m$r=s(FY);_qe=r(m$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m$r.forEach(t),uqe=i(ga),Wi=n(ga,"P",{});var MU=s(Wi);bqe=r(MU,"The configuration class to instantiate is selected based on the "),TY=n(MU,"CODE",{});var g$r=s(TY);vqe=r(g$r,"model_type"),g$r.forEach(t),Fqe=r(MU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),MY=n(MU,"CODE",{});var h$r=s(MY);Tqe=r(h$r,"pretrained_model_name_or_path"),h$r.forEach(t),Mqe=r(MU,":"),MU.forEach(t),Eqe=i(ga),v=n(ga,"UL",{});var F=s(v);zf=n(F,"LI",{});var o9e=s(zf);EY=n(o9e,"STRONG",{});var p$r=s(EY);Cqe=r(p$r,"albert"),p$r.forEach(t),wqe=r(o9e," \u2014 "),x7=n(o9e,"A",{href:!0});var _$r=s(x7);Aqe=r(_$r,"AlbertConfig"),_$r.forEach(t),yqe=r(o9e," (ALBERT model)"),o9e.forEach(t),Lqe=i(F),Qf=n(F,"LI",{});var r9e=s(Qf);CY=n(r9e,"STRONG",{});var u$r=s(CY);xqe=r(u$r,"bart"),u$r.forEach(t),kqe=r(r9e," \u2014 "),k7=n(r9e,"A",{href:!0});var b$r=s(k7);Sqe=r(b$r,"BartConfig"),b$r.forEach(t),Rqe=r(r9e," (BART model)"),r9e.forEach(t),Bqe=i(F),Wf=n(F,"LI",{});var t9e=s(Wf);wY=n(t9e,"STRONG",{});var v$r=s(wY);Pqe=r(v$r,"beit"),v$r.forEach(t),$qe=r(t9e," \u2014 "),S7=n(t9e,"A",{href:!0});var F$r=s(S7);Iqe=r(F$r,"BeitConfig"),F$r.forEach(t),qqe=r(t9e," (BEiT model)"),t9e.forEach(t),Nqe=i(F),Hf=n(F,"LI",{});var a9e=s(Hf);AY=n(a9e,"STRONG",{});var T$r=s(AY);jqe=r(T$r,"bert"),T$r.forEach(t),Dqe=r(a9e," \u2014 "),R7=n(a9e,"A",{href:!0});var M$r=s(R7);Gqe=r(M$r,"BertConfig"),M$r.forEach(t),Oqe=r(a9e," (BERT model)"),a9e.forEach(t),Vqe=i(F),Uf=n(F,"LI",{});var n9e=s(Uf);yY=n(n9e,"STRONG",{});var E$r=s(yY);Xqe=r(E$r,"bert-generation"),E$r.forEach(t),zqe=r(n9e," \u2014 "),B7=n(n9e,"A",{href:!0});var C$r=s(B7);Qqe=r(C$r,"BertGenerationConfig"),C$r.forEach(t),Wqe=r(n9e," (Bert Generation model)"),n9e.forEach(t),Hqe=i(F),Jf=n(F,"LI",{});var s9e=s(Jf);LY=n(s9e,"STRONG",{});var w$r=s(LY);Uqe=r(w$r,"big_bird"),w$r.forEach(t),Jqe=r(s9e," \u2014 "),P7=n(s9e,"A",{href:!0});var A$r=s(P7);Yqe=r(A$r,"BigBirdConfig"),A$r.forEach(t),Kqe=r(s9e," (BigBird model)"),s9e.forEach(t),Zqe=i(F),Yf=n(F,"LI",{});var l9e=s(Yf);xY=n(l9e,"STRONG",{});var y$r=s(xY);eNe=r(y$r,"bigbird_pegasus"),y$r.forEach(t),oNe=r(l9e," \u2014 "),$7=n(l9e,"A",{href:!0});var L$r=s($7);rNe=r(L$r,"BigBirdPegasusConfig"),L$r.forEach(t),tNe=r(l9e," (BigBirdPegasus model)"),l9e.forEach(t),aNe=i(F),Kf=n(F,"LI",{});var i9e=s(Kf);kY=n(i9e,"STRONG",{});var x$r=s(kY);nNe=r(x$r,"blenderbot"),x$r.forEach(t),sNe=r(i9e," \u2014 "),I7=n(i9e,"A",{href:!0});var k$r=s(I7);lNe=r(k$r,"BlenderbotConfig"),k$r.forEach(t),iNe=r(i9e," (Blenderbot model)"),i9e.forEach(t),dNe=i(F),Zf=n(F,"LI",{});var d9e=s(Zf);SY=n(d9e,"STRONG",{});var S$r=s(SY);cNe=r(S$r,"blenderbot-small"),S$r.forEach(t),fNe=r(d9e," \u2014 "),q7=n(d9e,"A",{href:!0});var R$r=s(q7);mNe=r(R$r,"BlenderbotSmallConfig"),R$r.forEach(t),gNe=r(d9e," (BlenderbotSmall model)"),d9e.forEach(t),hNe=i(F),em=n(F,"LI",{});var c9e=s(em);RY=n(c9e,"STRONG",{});var B$r=s(RY);pNe=r(B$r,"camembert"),B$r.forEach(t),_Ne=r(c9e," \u2014 "),N7=n(c9e,"A",{href:!0});var P$r=s(N7);uNe=r(P$r,"CamembertConfig"),P$r.forEach(t),bNe=r(c9e," (CamemBERT model)"),c9e.forEach(t),vNe=i(F),om=n(F,"LI",{});var f9e=s(om);BY=n(f9e,"STRONG",{});var $$r=s(BY);FNe=r($$r,"canine"),$$r.forEach(t),TNe=r(f9e," \u2014 "),j7=n(f9e,"A",{href:!0});var I$r=s(j7);MNe=r(I$r,"CanineConfig"),I$r.forEach(t),ENe=r(f9e," (Canine model)"),f9e.forEach(t),CNe=i(F),rm=n(F,"LI",{});var m9e=s(rm);PY=n(m9e,"STRONG",{});var q$r=s(PY);wNe=r(q$r,"clip"),q$r.forEach(t),ANe=r(m9e," \u2014 "),D7=n(m9e,"A",{href:!0});var N$r=s(D7);yNe=r(N$r,"CLIPConfig"),N$r.forEach(t),LNe=r(m9e," (CLIP model)"),m9e.forEach(t),xNe=i(F),tm=n(F,"LI",{});var g9e=s(tm);$Y=n(g9e,"STRONG",{});var j$r=s($Y);kNe=r(j$r,"convbert"),j$r.forEach(t),SNe=r(g9e," \u2014 "),G7=n(g9e,"A",{href:!0});var D$r=s(G7);RNe=r(D$r,"ConvBertConfig"),D$r.forEach(t),BNe=r(g9e," (ConvBERT model)"),g9e.forEach(t),PNe=i(F),am=n(F,"LI",{});var h9e=s(am);IY=n(h9e,"STRONG",{});var G$r=s(IY);$Ne=r(G$r,"convnext"),G$r.forEach(t),INe=r(h9e," \u2014 "),O7=n(h9e,"A",{href:!0});var O$r=s(O7);qNe=r(O$r,"ConvNextConfig"),O$r.forEach(t),NNe=r(h9e," (ConvNext model)"),h9e.forEach(t),jNe=i(F),nm=n(F,"LI",{});var p9e=s(nm);qY=n(p9e,"STRONG",{});var V$r=s(qY);DNe=r(V$r,"ctrl"),V$r.forEach(t),GNe=r(p9e," \u2014 "),V7=n(p9e,"A",{href:!0});var X$r=s(V7);ONe=r(X$r,"CTRLConfig"),X$r.forEach(t),VNe=r(p9e," (CTRL model)"),p9e.forEach(t),XNe=i(F),sm=n(F,"LI",{});var _9e=s(sm);NY=n(_9e,"STRONG",{});var z$r=s(NY);zNe=r(z$r,"data2vec-audio"),z$r.forEach(t),QNe=r(_9e," \u2014 "),X7=n(_9e,"A",{href:!0});var Q$r=s(X7);WNe=r(Q$r,"Data2VecAudioConfig"),Q$r.forEach(t),HNe=r(_9e," (Data2VecAudio model)"),_9e.forEach(t),UNe=i(F),lm=n(F,"LI",{});var u9e=s(lm);jY=n(u9e,"STRONG",{});var W$r=s(jY);JNe=r(W$r,"data2vec-text"),W$r.forEach(t),YNe=r(u9e," \u2014 "),z7=n(u9e,"A",{href:!0});var H$r=s(z7);KNe=r(H$r,"Data2VecTextConfig"),H$r.forEach(t),ZNe=r(u9e," (Data2VecText model)"),u9e.forEach(t),eje=i(F),im=n(F,"LI",{});var b9e=s(im);DY=n(b9e,"STRONG",{});var U$r=s(DY);oje=r(U$r,"data2vec-vision"),U$r.forEach(t),rje=r(b9e," \u2014 "),Q7=n(b9e,"A",{href:!0});var J$r=s(Q7);tje=r(J$r,"Data2VecVisionConfig"),J$r.forEach(t),aje=r(b9e," (Data2VecVision model)"),b9e.forEach(t),nje=i(F),dm=n(F,"LI",{});var v9e=s(dm);GY=n(v9e,"STRONG",{});var Y$r=s(GY);sje=r(Y$r,"deberta"),Y$r.forEach(t),lje=r(v9e," \u2014 "),W7=n(v9e,"A",{href:!0});var K$r=s(W7);ije=r(K$r,"DebertaConfig"),K$r.forEach(t),dje=r(v9e," (DeBERTa model)"),v9e.forEach(t),cje=i(F),cm=n(F,"LI",{});var F9e=s(cm);OY=n(F9e,"STRONG",{});var Z$r=s(OY);fje=r(Z$r,"deberta-v2"),Z$r.forEach(t),mje=r(F9e," \u2014 "),H7=n(F9e,"A",{href:!0});var eIr=s(H7);gje=r(eIr,"DebertaV2Config"),eIr.forEach(t),hje=r(F9e," (DeBERTa-v2 model)"),F9e.forEach(t),pje=i(F),fm=n(F,"LI",{});var T9e=s(fm);VY=n(T9e,"STRONG",{});var oIr=s(VY);_je=r(oIr,"decision_transformer"),oIr.forEach(t),uje=r(T9e," \u2014 "),U7=n(T9e,"A",{href:!0});var rIr=s(U7);bje=r(rIr,"DecisionTransformerConfig"),rIr.forEach(t),vje=r(T9e," (Decision Transformer model)"),T9e.forEach(t),Fje=i(F),mm=n(F,"LI",{});var M9e=s(mm);XY=n(M9e,"STRONG",{});var tIr=s(XY);Tje=r(tIr,"deit"),tIr.forEach(t),Mje=r(M9e," \u2014 "),J7=n(M9e,"A",{href:!0});var aIr=s(J7);Eje=r(aIr,"DeiTConfig"),aIr.forEach(t),Cje=r(M9e," (DeiT model)"),M9e.forEach(t),wje=i(F),gm=n(F,"LI",{});var E9e=s(gm);zY=n(E9e,"STRONG",{});var nIr=s(zY);Aje=r(nIr,"detr"),nIr.forEach(t),yje=r(E9e," \u2014 "),Y7=n(E9e,"A",{href:!0});var sIr=s(Y7);Lje=r(sIr,"DetrConfig"),sIr.forEach(t),xje=r(E9e," (DETR model)"),E9e.forEach(t),kje=i(F),hm=n(F,"LI",{});var C9e=s(hm);QY=n(C9e,"STRONG",{});var lIr=s(QY);Sje=r(lIr,"distilbert"),lIr.forEach(t),Rje=r(C9e," \u2014 "),K7=n(C9e,"A",{href:!0});var iIr=s(K7);Bje=r(iIr,"DistilBertConfig"),iIr.forEach(t),Pje=r(C9e," (DistilBERT model)"),C9e.forEach(t),$je=i(F),pm=n(F,"LI",{});var w9e=s(pm);WY=n(w9e,"STRONG",{});var dIr=s(WY);Ije=r(dIr,"dpr"),dIr.forEach(t),qje=r(w9e," \u2014 "),Z7=n(w9e,"A",{href:!0});var cIr=s(Z7);Nje=r(cIr,"DPRConfig"),cIr.forEach(t),jje=r(w9e," (DPR model)"),w9e.forEach(t),Dje=i(F),_m=n(F,"LI",{});var A9e=s(_m);HY=n(A9e,"STRONG",{});var fIr=s(HY);Gje=r(fIr,"dpt"),fIr.forEach(t),Oje=r(A9e," \u2014 "),ex=n(A9e,"A",{href:!0});var mIr=s(ex);Vje=r(mIr,"DPTConfig"),mIr.forEach(t),Xje=r(A9e," (DPT model)"),A9e.forEach(t),zje=i(F),um=n(F,"LI",{});var y9e=s(um);UY=n(y9e,"STRONG",{});var gIr=s(UY);Qje=r(gIr,"electra"),gIr.forEach(t),Wje=r(y9e," \u2014 "),ox=n(y9e,"A",{href:!0});var hIr=s(ox);Hje=r(hIr,"ElectraConfig"),hIr.forEach(t),Uje=r(y9e," (ELECTRA model)"),y9e.forEach(t),Jje=i(F),bm=n(F,"LI",{});var L9e=s(bm);JY=n(L9e,"STRONG",{});var pIr=s(JY);Yje=r(pIr,"encoder-decoder"),pIr.forEach(t),Kje=r(L9e," \u2014 "),rx=n(L9e,"A",{href:!0});var _Ir=s(rx);Zje=r(_Ir,"EncoderDecoderConfig"),_Ir.forEach(t),eDe=r(L9e," (Encoder decoder model)"),L9e.forEach(t),oDe=i(F),vm=n(F,"LI",{});var x9e=s(vm);YY=n(x9e,"STRONG",{});var uIr=s(YY);rDe=r(uIr,"flaubert"),uIr.forEach(t),tDe=r(x9e," \u2014 "),tx=n(x9e,"A",{href:!0});var bIr=s(tx);aDe=r(bIr,"FlaubertConfig"),bIr.forEach(t),nDe=r(x9e," (FlauBERT model)"),x9e.forEach(t),sDe=i(F),Fm=n(F,"LI",{});var k9e=s(Fm);KY=n(k9e,"STRONG",{});var vIr=s(KY);lDe=r(vIr,"fnet"),vIr.forEach(t),iDe=r(k9e," \u2014 "),ax=n(k9e,"A",{href:!0});var FIr=s(ax);dDe=r(FIr,"FNetConfig"),FIr.forEach(t),cDe=r(k9e," (FNet model)"),k9e.forEach(t),fDe=i(F),Tm=n(F,"LI",{});var S9e=s(Tm);ZY=n(S9e,"STRONG",{});var TIr=s(ZY);mDe=r(TIr,"fsmt"),TIr.forEach(t),gDe=r(S9e," \u2014 "),nx=n(S9e,"A",{href:!0});var MIr=s(nx);hDe=r(MIr,"FSMTConfig"),MIr.forEach(t),pDe=r(S9e," (FairSeq Machine-Translation model)"),S9e.forEach(t),_De=i(F),Mm=n(F,"LI",{});var R9e=s(Mm);eK=n(R9e,"STRONG",{});var EIr=s(eK);uDe=r(EIr,"funnel"),EIr.forEach(t),bDe=r(R9e," \u2014 "),sx=n(R9e,"A",{href:!0});var CIr=s(sx);vDe=r(CIr,"FunnelConfig"),CIr.forEach(t),FDe=r(R9e," (Funnel Transformer model)"),R9e.forEach(t),TDe=i(F),Em=n(F,"LI",{});var B9e=s(Em);oK=n(B9e,"STRONG",{});var wIr=s(oK);MDe=r(wIr,"glpn"),wIr.forEach(t),EDe=r(B9e," \u2014 "),lx=n(B9e,"A",{href:!0});var AIr=s(lx);CDe=r(AIr,"GLPNConfig"),AIr.forEach(t),wDe=r(B9e," (GLPN model)"),B9e.forEach(t),ADe=i(F),Cm=n(F,"LI",{});var P9e=s(Cm);rK=n(P9e,"STRONG",{});var yIr=s(rK);yDe=r(yIr,"gpt2"),yIr.forEach(t),LDe=r(P9e," \u2014 "),ix=n(P9e,"A",{href:!0});var LIr=s(ix);xDe=r(LIr,"GPT2Config"),LIr.forEach(t),kDe=r(P9e," (OpenAI GPT-2 model)"),P9e.forEach(t),SDe=i(F),wm=n(F,"LI",{});var $9e=s(wm);tK=n($9e,"STRONG",{});var xIr=s(tK);RDe=r(xIr,"gpt_neo"),xIr.forEach(t),BDe=r($9e," \u2014 "),dx=n($9e,"A",{href:!0});var kIr=s(dx);PDe=r(kIr,"GPTNeoConfig"),kIr.forEach(t),$De=r($9e," (GPT Neo model)"),$9e.forEach(t),IDe=i(F),Am=n(F,"LI",{});var I9e=s(Am);aK=n(I9e,"STRONG",{});var SIr=s(aK);qDe=r(SIr,"gptj"),SIr.forEach(t),NDe=r(I9e," \u2014 "),cx=n(I9e,"A",{href:!0});var RIr=s(cx);jDe=r(RIr,"GPTJConfig"),RIr.forEach(t),DDe=r(I9e," (GPT-J model)"),I9e.forEach(t),GDe=i(F),ym=n(F,"LI",{});var q9e=s(ym);nK=n(q9e,"STRONG",{});var BIr=s(nK);ODe=r(BIr,"hubert"),BIr.forEach(t),VDe=r(q9e," \u2014 "),fx=n(q9e,"A",{href:!0});var PIr=s(fx);XDe=r(PIr,"HubertConfig"),PIr.forEach(t),zDe=r(q9e," (Hubert model)"),q9e.forEach(t),QDe=i(F),Lm=n(F,"LI",{});var N9e=s(Lm);sK=n(N9e,"STRONG",{});var $Ir=s(sK);WDe=r($Ir,"ibert"),$Ir.forEach(t),HDe=r(N9e," \u2014 "),mx=n(N9e,"A",{href:!0});var IIr=s(mx);UDe=r(IIr,"IBertConfig"),IIr.forEach(t),JDe=r(N9e," (I-BERT model)"),N9e.forEach(t),YDe=i(F),xm=n(F,"LI",{});var j9e=s(xm);lK=n(j9e,"STRONG",{});var qIr=s(lK);KDe=r(qIr,"imagegpt"),qIr.forEach(t),ZDe=r(j9e," \u2014 "),gx=n(j9e,"A",{href:!0});var NIr=s(gx);eGe=r(NIr,"ImageGPTConfig"),NIr.forEach(t),oGe=r(j9e," (ImageGPT model)"),j9e.forEach(t),rGe=i(F),km=n(F,"LI",{});var D9e=s(km);iK=n(D9e,"STRONG",{});var jIr=s(iK);tGe=r(jIr,"layoutlm"),jIr.forEach(t),aGe=r(D9e," \u2014 "),hx=n(D9e,"A",{href:!0});var DIr=s(hx);nGe=r(DIr,"LayoutLMConfig"),DIr.forEach(t),sGe=r(D9e," (LayoutLM model)"),D9e.forEach(t),lGe=i(F),Sm=n(F,"LI",{});var G9e=s(Sm);dK=n(G9e,"STRONG",{});var GIr=s(dK);iGe=r(GIr,"layoutlmv2"),GIr.forEach(t),dGe=r(G9e," \u2014 "),px=n(G9e,"A",{href:!0});var OIr=s(px);cGe=r(OIr,"LayoutLMv2Config"),OIr.forEach(t),fGe=r(G9e," (LayoutLMv2 model)"),G9e.forEach(t),mGe=i(F),Rm=n(F,"LI",{});var O9e=s(Rm);cK=n(O9e,"STRONG",{});var VIr=s(cK);gGe=r(VIr,"led"),VIr.forEach(t),hGe=r(O9e," \u2014 "),_x=n(O9e,"A",{href:!0});var XIr=s(_x);pGe=r(XIr,"LEDConfig"),XIr.forEach(t),_Ge=r(O9e," (LED model)"),O9e.forEach(t),uGe=i(F),Bm=n(F,"LI",{});var V9e=s(Bm);fK=n(V9e,"STRONG",{});var zIr=s(fK);bGe=r(zIr,"longformer"),zIr.forEach(t),vGe=r(V9e," \u2014 "),ux=n(V9e,"A",{href:!0});var QIr=s(ux);FGe=r(QIr,"LongformerConfig"),QIr.forEach(t),TGe=r(V9e," (Longformer model)"),V9e.forEach(t),MGe=i(F),Pm=n(F,"LI",{});var X9e=s(Pm);mK=n(X9e,"STRONG",{});var WIr=s(mK);EGe=r(WIr,"luke"),WIr.forEach(t),CGe=r(X9e," \u2014 "),bx=n(X9e,"A",{href:!0});var HIr=s(bx);wGe=r(HIr,"LukeConfig"),HIr.forEach(t),AGe=r(X9e," (LUKE model)"),X9e.forEach(t),yGe=i(F),$m=n(F,"LI",{});var z9e=s($m);gK=n(z9e,"STRONG",{});var UIr=s(gK);LGe=r(UIr,"lxmert"),UIr.forEach(t),xGe=r(z9e," \u2014 "),vx=n(z9e,"A",{href:!0});var JIr=s(vx);kGe=r(JIr,"LxmertConfig"),JIr.forEach(t),SGe=r(z9e," (LXMERT model)"),z9e.forEach(t),RGe=i(F),Im=n(F,"LI",{});var Q9e=s(Im);hK=n(Q9e,"STRONG",{});var YIr=s(hK);BGe=r(YIr,"m2m_100"),YIr.forEach(t),PGe=r(Q9e," \u2014 "),Fx=n(Q9e,"A",{href:!0});var KIr=s(Fx);$Ge=r(KIr,"M2M100Config"),KIr.forEach(t),IGe=r(Q9e," (M2M100 model)"),Q9e.forEach(t),qGe=i(F),qm=n(F,"LI",{});var W9e=s(qm);pK=n(W9e,"STRONG",{});var ZIr=s(pK);NGe=r(ZIr,"marian"),ZIr.forEach(t),jGe=r(W9e," \u2014 "),Tx=n(W9e,"A",{href:!0});var eqr=s(Tx);DGe=r(eqr,"MarianConfig"),eqr.forEach(t),GGe=r(W9e," (Marian model)"),W9e.forEach(t),OGe=i(F),Nm=n(F,"LI",{});var H9e=s(Nm);_K=n(H9e,"STRONG",{});var oqr=s(_K);VGe=r(oqr,"maskformer"),oqr.forEach(t),XGe=r(H9e," \u2014 "),Mx=n(H9e,"A",{href:!0});var rqr=s(Mx);zGe=r(rqr,"MaskFormerConfig"),rqr.forEach(t),QGe=r(H9e," (MaskFormer model)"),H9e.forEach(t),WGe=i(F),jm=n(F,"LI",{});var U9e=s(jm);uK=n(U9e,"STRONG",{});var tqr=s(uK);HGe=r(tqr,"mbart"),tqr.forEach(t),UGe=r(U9e," \u2014 "),Ex=n(U9e,"A",{href:!0});var aqr=s(Ex);JGe=r(aqr,"MBartConfig"),aqr.forEach(t),YGe=r(U9e," (mBART model)"),U9e.forEach(t),KGe=i(F),Dm=n(F,"LI",{});var J9e=s(Dm);bK=n(J9e,"STRONG",{});var nqr=s(bK);ZGe=r(nqr,"megatron-bert"),nqr.forEach(t),eOe=r(J9e," \u2014 "),Cx=n(J9e,"A",{href:!0});var sqr=s(Cx);oOe=r(sqr,"MegatronBertConfig"),sqr.forEach(t),rOe=r(J9e," (MegatronBert model)"),J9e.forEach(t),tOe=i(F),Gm=n(F,"LI",{});var Y9e=s(Gm);vK=n(Y9e,"STRONG",{});var lqr=s(vK);aOe=r(lqr,"mobilebert"),lqr.forEach(t),nOe=r(Y9e," \u2014 "),wx=n(Y9e,"A",{href:!0});var iqr=s(wx);sOe=r(iqr,"MobileBertConfig"),iqr.forEach(t),lOe=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),iOe=i(F),Om=n(F,"LI",{});var K9e=s(Om);FK=n(K9e,"STRONG",{});var dqr=s(FK);dOe=r(dqr,"mpnet"),dqr.forEach(t),cOe=r(K9e," \u2014 "),Ax=n(K9e,"A",{href:!0});var cqr=s(Ax);fOe=r(cqr,"MPNetConfig"),cqr.forEach(t),mOe=r(K9e," (MPNet model)"),K9e.forEach(t),gOe=i(F),Vm=n(F,"LI",{});var Z9e=s(Vm);TK=n(Z9e,"STRONG",{});var fqr=s(TK);hOe=r(fqr,"mt5"),fqr.forEach(t),pOe=r(Z9e," \u2014 "),yx=n(Z9e,"A",{href:!0});var mqr=s(yx);_Oe=r(mqr,"MT5Config"),mqr.forEach(t),uOe=r(Z9e," (mT5 model)"),Z9e.forEach(t),bOe=i(F),Xm=n(F,"LI",{});var eMe=s(Xm);MK=n(eMe,"STRONG",{});var gqr=s(MK);vOe=r(gqr,"nystromformer"),gqr.forEach(t),FOe=r(eMe," \u2014 "),Lx=n(eMe,"A",{href:!0});var hqr=s(Lx);TOe=r(hqr,"NystromformerConfig"),hqr.forEach(t),MOe=r(eMe," (Nystromformer model)"),eMe.forEach(t),EOe=i(F),zm=n(F,"LI",{});var oMe=s(zm);EK=n(oMe,"STRONG",{});var pqr=s(EK);COe=r(pqr,"openai-gpt"),pqr.forEach(t),wOe=r(oMe," \u2014 "),xx=n(oMe,"A",{href:!0});var _qr=s(xx);AOe=r(_qr,"OpenAIGPTConfig"),_qr.forEach(t),yOe=r(oMe," (OpenAI GPT model)"),oMe.forEach(t),LOe=i(F),Qm=n(F,"LI",{});var rMe=s(Qm);CK=n(rMe,"STRONG",{});var uqr=s(CK);xOe=r(uqr,"pegasus"),uqr.forEach(t),kOe=r(rMe," \u2014 "),kx=n(rMe,"A",{href:!0});var bqr=s(kx);SOe=r(bqr,"PegasusConfig"),bqr.forEach(t),ROe=r(rMe," (Pegasus model)"),rMe.forEach(t),BOe=i(F),Wm=n(F,"LI",{});var tMe=s(Wm);wK=n(tMe,"STRONG",{});var vqr=s(wK);POe=r(vqr,"perceiver"),vqr.forEach(t),$Oe=r(tMe," \u2014 "),Sx=n(tMe,"A",{href:!0});var Fqr=s(Sx);IOe=r(Fqr,"PerceiverConfig"),Fqr.forEach(t),qOe=r(tMe," (Perceiver model)"),tMe.forEach(t),NOe=i(F),Hm=n(F,"LI",{});var aMe=s(Hm);AK=n(aMe,"STRONG",{});var Tqr=s(AK);jOe=r(Tqr,"plbart"),Tqr.forEach(t),DOe=r(aMe," \u2014 "),Rx=n(aMe,"A",{href:!0});var Mqr=s(Rx);GOe=r(Mqr,"PLBartConfig"),Mqr.forEach(t),OOe=r(aMe," (PLBart model)"),aMe.forEach(t),VOe=i(F),Um=n(F,"LI",{});var nMe=s(Um);yK=n(nMe,"STRONG",{});var Eqr=s(yK);XOe=r(Eqr,"poolformer"),Eqr.forEach(t),zOe=r(nMe," \u2014 "),Bx=n(nMe,"A",{href:!0});var Cqr=s(Bx);QOe=r(Cqr,"PoolFormerConfig"),Cqr.forEach(t),WOe=r(nMe," (PoolFormer model)"),nMe.forEach(t),HOe=i(F),Jm=n(F,"LI",{});var sMe=s(Jm);LK=n(sMe,"STRONG",{});var wqr=s(LK);UOe=r(wqr,"prophetnet"),wqr.forEach(t),JOe=r(sMe," \u2014 "),Px=n(sMe,"A",{href:!0});var Aqr=s(Px);YOe=r(Aqr,"ProphetNetConfig"),Aqr.forEach(t),KOe=r(sMe," (ProphetNet model)"),sMe.forEach(t),ZOe=i(F),Ym=n(F,"LI",{});var lMe=s(Ym);xK=n(lMe,"STRONG",{});var yqr=s(xK);eVe=r(yqr,"qdqbert"),yqr.forEach(t),oVe=r(lMe," \u2014 "),$x=n(lMe,"A",{href:!0});var Lqr=s($x);rVe=r(Lqr,"QDQBertConfig"),Lqr.forEach(t),tVe=r(lMe," (QDQBert model)"),lMe.forEach(t),aVe=i(F),Km=n(F,"LI",{});var iMe=s(Km);kK=n(iMe,"STRONG",{});var xqr=s(kK);nVe=r(xqr,"rag"),xqr.forEach(t),sVe=r(iMe," \u2014 "),Ix=n(iMe,"A",{href:!0});var kqr=s(Ix);lVe=r(kqr,"RagConfig"),kqr.forEach(t),iVe=r(iMe," (RAG model)"),iMe.forEach(t),dVe=i(F),Zm=n(F,"LI",{});var dMe=s(Zm);SK=n(dMe,"STRONG",{});var Sqr=s(SK);cVe=r(Sqr,"realm"),Sqr.forEach(t),fVe=r(dMe," \u2014 "),qx=n(dMe,"A",{href:!0});var Rqr=s(qx);mVe=r(Rqr,"RealmConfig"),Rqr.forEach(t),gVe=r(dMe," (Realm model)"),dMe.forEach(t),hVe=i(F),eg=n(F,"LI",{});var cMe=s(eg);RK=n(cMe,"STRONG",{});var Bqr=s(RK);pVe=r(Bqr,"reformer"),Bqr.forEach(t),_Ve=r(cMe," \u2014 "),Nx=n(cMe,"A",{href:!0});var Pqr=s(Nx);uVe=r(Pqr,"ReformerConfig"),Pqr.forEach(t),bVe=r(cMe," (Reformer model)"),cMe.forEach(t),vVe=i(F),og=n(F,"LI",{});var fMe=s(og);BK=n(fMe,"STRONG",{});var $qr=s(BK);FVe=r($qr,"regnet"),$qr.forEach(t),TVe=r(fMe," \u2014 "),jx=n(fMe,"A",{href:!0});var Iqr=s(jx);MVe=r(Iqr,"RegNetConfig"),Iqr.forEach(t),EVe=r(fMe," (RegNet model)"),fMe.forEach(t),CVe=i(F),rg=n(F,"LI",{});var mMe=s(rg);PK=n(mMe,"STRONG",{});var qqr=s(PK);wVe=r(qqr,"rembert"),qqr.forEach(t),AVe=r(mMe," \u2014 "),Dx=n(mMe,"A",{href:!0});var Nqr=s(Dx);yVe=r(Nqr,"RemBertConfig"),Nqr.forEach(t),LVe=r(mMe," (RemBERT model)"),mMe.forEach(t),xVe=i(F),tg=n(F,"LI",{});var gMe=s(tg);$K=n(gMe,"STRONG",{});var jqr=s($K);kVe=r(jqr,"resnet"),jqr.forEach(t),SVe=r(gMe," \u2014 "),Gx=n(gMe,"A",{href:!0});var Dqr=s(Gx);RVe=r(Dqr,"ResNetConfig"),Dqr.forEach(t),BVe=r(gMe," (ResNet model)"),gMe.forEach(t),PVe=i(F),ag=n(F,"LI",{});var hMe=s(ag);IK=n(hMe,"STRONG",{});var Gqr=s(IK);$Ve=r(Gqr,"retribert"),Gqr.forEach(t),IVe=r(hMe," \u2014 "),Ox=n(hMe,"A",{href:!0});var Oqr=s(Ox);qVe=r(Oqr,"RetriBertConfig"),Oqr.forEach(t),NVe=r(hMe," (RetriBERT model)"),hMe.forEach(t),jVe=i(F),ng=n(F,"LI",{});var pMe=s(ng);qK=n(pMe,"STRONG",{});var Vqr=s(qK);DVe=r(Vqr,"roberta"),Vqr.forEach(t),GVe=r(pMe," \u2014 "),Vx=n(pMe,"A",{href:!0});var Xqr=s(Vx);OVe=r(Xqr,"RobertaConfig"),Xqr.forEach(t),VVe=r(pMe," (RoBERTa model)"),pMe.forEach(t),XVe=i(F),sg=n(F,"LI",{});var _Me=s(sg);NK=n(_Me,"STRONG",{});var zqr=s(NK);zVe=r(zqr,"roformer"),zqr.forEach(t),QVe=r(_Me," \u2014 "),Xx=n(_Me,"A",{href:!0});var Qqr=s(Xx);WVe=r(Qqr,"RoFormerConfig"),Qqr.forEach(t),HVe=r(_Me," (RoFormer model)"),_Me.forEach(t),UVe=i(F),lg=n(F,"LI",{});var uMe=s(lg);jK=n(uMe,"STRONG",{});var Wqr=s(jK);JVe=r(Wqr,"segformer"),Wqr.forEach(t),YVe=r(uMe," \u2014 "),zx=n(uMe,"A",{href:!0});var Hqr=s(zx);KVe=r(Hqr,"SegformerConfig"),Hqr.forEach(t),ZVe=r(uMe," (SegFormer model)"),uMe.forEach(t),eXe=i(F),ig=n(F,"LI",{});var bMe=s(ig);DK=n(bMe,"STRONG",{});var Uqr=s(DK);oXe=r(Uqr,"sew"),Uqr.forEach(t),rXe=r(bMe," \u2014 "),Qx=n(bMe,"A",{href:!0});var Jqr=s(Qx);tXe=r(Jqr,"SEWConfig"),Jqr.forEach(t),aXe=r(bMe," (SEW model)"),bMe.forEach(t),nXe=i(F),dg=n(F,"LI",{});var vMe=s(dg);GK=n(vMe,"STRONG",{});var Yqr=s(GK);sXe=r(Yqr,"sew-d"),Yqr.forEach(t),lXe=r(vMe," \u2014 "),Wx=n(vMe,"A",{href:!0});var Kqr=s(Wx);iXe=r(Kqr,"SEWDConfig"),Kqr.forEach(t),dXe=r(vMe," (SEW-D model)"),vMe.forEach(t),cXe=i(F),cg=n(F,"LI",{});var FMe=s(cg);OK=n(FMe,"STRONG",{});var Zqr=s(OK);fXe=r(Zqr,"speech-encoder-decoder"),Zqr.forEach(t),mXe=r(FMe," \u2014 "),Hx=n(FMe,"A",{href:!0});var eNr=s(Hx);gXe=r(eNr,"SpeechEncoderDecoderConfig"),eNr.forEach(t),hXe=r(FMe," (Speech Encoder decoder model)"),FMe.forEach(t),pXe=i(F),fg=n(F,"LI",{});var TMe=s(fg);VK=n(TMe,"STRONG",{});var oNr=s(VK);_Xe=r(oNr,"speech_to_text"),oNr.forEach(t),uXe=r(TMe," \u2014 "),Ux=n(TMe,"A",{href:!0});var rNr=s(Ux);bXe=r(rNr,"Speech2TextConfig"),rNr.forEach(t),vXe=r(TMe," (Speech2Text model)"),TMe.forEach(t),FXe=i(F),mg=n(F,"LI",{});var MMe=s(mg);XK=n(MMe,"STRONG",{});var tNr=s(XK);TXe=r(tNr,"speech_to_text_2"),tNr.forEach(t),MXe=r(MMe," \u2014 "),Jx=n(MMe,"A",{href:!0});var aNr=s(Jx);EXe=r(aNr,"Speech2Text2Config"),aNr.forEach(t),CXe=r(MMe," (Speech2Text2 model)"),MMe.forEach(t),wXe=i(F),gg=n(F,"LI",{});var EMe=s(gg);zK=n(EMe,"STRONG",{});var nNr=s(zK);AXe=r(nNr,"splinter"),nNr.forEach(t),yXe=r(EMe," \u2014 "),Yx=n(EMe,"A",{href:!0});var sNr=s(Yx);LXe=r(sNr,"SplinterConfig"),sNr.forEach(t),xXe=r(EMe," (Splinter model)"),EMe.forEach(t),kXe=i(F),hg=n(F,"LI",{});var CMe=s(hg);QK=n(CMe,"STRONG",{});var lNr=s(QK);SXe=r(lNr,"squeezebert"),lNr.forEach(t),RXe=r(CMe," \u2014 "),Kx=n(CMe,"A",{href:!0});var iNr=s(Kx);BXe=r(iNr,"SqueezeBertConfig"),iNr.forEach(t),PXe=r(CMe," (SqueezeBERT model)"),CMe.forEach(t),$Xe=i(F),pg=n(F,"LI",{});var wMe=s(pg);WK=n(wMe,"STRONG",{});var dNr=s(WK);IXe=r(dNr,"swin"),dNr.forEach(t),qXe=r(wMe," \u2014 "),Zx=n(wMe,"A",{href:!0});var cNr=s(Zx);NXe=r(cNr,"SwinConfig"),cNr.forEach(t),jXe=r(wMe," (Swin model)"),wMe.forEach(t),DXe=i(F),_g=n(F,"LI",{});var AMe=s(_g);HK=n(AMe,"STRONG",{});var fNr=s(HK);GXe=r(fNr,"t5"),fNr.forEach(t),OXe=r(AMe," \u2014 "),ek=n(AMe,"A",{href:!0});var mNr=s(ek);VXe=r(mNr,"T5Config"),mNr.forEach(t),XXe=r(AMe," (T5 model)"),AMe.forEach(t),zXe=i(F),ug=n(F,"LI",{});var yMe=s(ug);UK=n(yMe,"STRONG",{});var gNr=s(UK);QXe=r(gNr,"tapas"),gNr.forEach(t),WXe=r(yMe," \u2014 "),ok=n(yMe,"A",{href:!0});var hNr=s(ok);HXe=r(hNr,"TapasConfig"),hNr.forEach(t),UXe=r(yMe," (TAPAS model)"),yMe.forEach(t),JXe=i(F),bg=n(F,"LI",{});var LMe=s(bg);JK=n(LMe,"STRONG",{});var pNr=s(JK);YXe=r(pNr,"tapex"),pNr.forEach(t),KXe=r(LMe," \u2014 "),rk=n(LMe,"A",{href:!0});var _Nr=s(rk);ZXe=r(_Nr,"BartConfig"),_Nr.forEach(t),eze=r(LMe," (TAPEX model)"),LMe.forEach(t),oze=i(F),vg=n(F,"LI",{});var xMe=s(vg);YK=n(xMe,"STRONG",{});var uNr=s(YK);rze=r(uNr,"transfo-xl"),uNr.forEach(t),tze=r(xMe," \u2014 "),tk=n(xMe,"A",{href:!0});var bNr=s(tk);aze=r(bNr,"TransfoXLConfig"),bNr.forEach(t),nze=r(xMe," (Transformer-XL model)"),xMe.forEach(t),sze=i(F),Fg=n(F,"LI",{});var kMe=s(Fg);KK=n(kMe,"STRONG",{});var vNr=s(KK);lze=r(vNr,"trocr"),vNr.forEach(t),ize=r(kMe," \u2014 "),ak=n(kMe,"A",{href:!0});var FNr=s(ak);dze=r(FNr,"TrOCRConfig"),FNr.forEach(t),cze=r(kMe," (TrOCR model)"),kMe.forEach(t),fze=i(F),Tg=n(F,"LI",{});var SMe=s(Tg);ZK=n(SMe,"STRONG",{});var TNr=s(ZK);mze=r(TNr,"unispeech"),TNr.forEach(t),gze=r(SMe," \u2014 "),nk=n(SMe,"A",{href:!0});var MNr=s(nk);hze=r(MNr,"UniSpeechConfig"),MNr.forEach(t),pze=r(SMe," (UniSpeech model)"),SMe.forEach(t),_ze=i(F),Mg=n(F,"LI",{});var RMe=s(Mg);eZ=n(RMe,"STRONG",{});var ENr=s(eZ);uze=r(ENr,"unispeech-sat"),ENr.forEach(t),bze=r(RMe," \u2014 "),sk=n(RMe,"A",{href:!0});var CNr=s(sk);vze=r(CNr,"UniSpeechSatConfig"),CNr.forEach(t),Fze=r(RMe," (UniSpeechSat model)"),RMe.forEach(t),Tze=i(F),Eg=n(F,"LI",{});var BMe=s(Eg);oZ=n(BMe,"STRONG",{});var wNr=s(oZ);Mze=r(wNr,"van"),wNr.forEach(t),Eze=r(BMe," \u2014 "),lk=n(BMe,"A",{href:!0});var ANr=s(lk);Cze=r(ANr,"VanConfig"),ANr.forEach(t),wze=r(BMe," (VAN model)"),BMe.forEach(t),Aze=i(F),Cg=n(F,"LI",{});var PMe=s(Cg);rZ=n(PMe,"STRONG",{});var yNr=s(rZ);yze=r(yNr,"vilt"),yNr.forEach(t),Lze=r(PMe," \u2014 "),ik=n(PMe,"A",{href:!0});var LNr=s(ik);xze=r(LNr,"ViltConfig"),LNr.forEach(t),kze=r(PMe," (ViLT model)"),PMe.forEach(t),Sze=i(F),wg=n(F,"LI",{});var $Me=s(wg);tZ=n($Me,"STRONG",{});var xNr=s(tZ);Rze=r(xNr,"vision-encoder-decoder"),xNr.forEach(t),Bze=r($Me," \u2014 "),dk=n($Me,"A",{href:!0});var kNr=s(dk);Pze=r(kNr,"VisionEncoderDecoderConfig"),kNr.forEach(t),$ze=r($Me," (Vision Encoder decoder model)"),$Me.forEach(t),Ize=i(F),Ag=n(F,"LI",{});var IMe=s(Ag);aZ=n(IMe,"STRONG",{});var SNr=s(aZ);qze=r(SNr,"vision-text-dual-encoder"),SNr.forEach(t),Nze=r(IMe," \u2014 "),ck=n(IMe,"A",{href:!0});var RNr=s(ck);jze=r(RNr,"VisionTextDualEncoderConfig"),RNr.forEach(t),Dze=r(IMe," (VisionTextDualEncoder model)"),IMe.forEach(t),Gze=i(F),yg=n(F,"LI",{});var qMe=s(yg);nZ=n(qMe,"STRONG",{});var BNr=s(nZ);Oze=r(BNr,"visual_bert"),BNr.forEach(t),Vze=r(qMe," \u2014 "),fk=n(qMe,"A",{href:!0});var PNr=s(fk);Xze=r(PNr,"VisualBertConfig"),PNr.forEach(t),zze=r(qMe," (VisualBert model)"),qMe.forEach(t),Qze=i(F),Lg=n(F,"LI",{});var NMe=s(Lg);sZ=n(NMe,"STRONG",{});var $Nr=s(sZ);Wze=r($Nr,"vit"),$Nr.forEach(t),Hze=r(NMe," \u2014 "),mk=n(NMe,"A",{href:!0});var INr=s(mk);Uze=r(INr,"ViTConfig"),INr.forEach(t),Jze=r(NMe," (ViT model)"),NMe.forEach(t),Yze=i(F),xg=n(F,"LI",{});var jMe=s(xg);lZ=n(jMe,"STRONG",{});var qNr=s(lZ);Kze=r(qNr,"vit_mae"),qNr.forEach(t),Zze=r(jMe," \u2014 "),gk=n(jMe,"A",{href:!0});var NNr=s(gk);eQe=r(NNr,"ViTMAEConfig"),NNr.forEach(t),oQe=r(jMe," (ViTMAE model)"),jMe.forEach(t),rQe=i(F),kg=n(F,"LI",{});var DMe=s(kg);iZ=n(DMe,"STRONG",{});var jNr=s(iZ);tQe=r(jNr,"wav2vec2"),jNr.forEach(t),aQe=r(DMe," \u2014 "),hk=n(DMe,"A",{href:!0});var DNr=s(hk);nQe=r(DNr,"Wav2Vec2Config"),DNr.forEach(t),sQe=r(DMe," (Wav2Vec2 model)"),DMe.forEach(t),lQe=i(F),Sg=n(F,"LI",{});var GMe=s(Sg);dZ=n(GMe,"STRONG",{});var GNr=s(dZ);iQe=r(GNr,"wavlm"),GNr.forEach(t),dQe=r(GMe," \u2014 "),pk=n(GMe,"A",{href:!0});var ONr=s(pk);cQe=r(ONr,"WavLMConfig"),ONr.forEach(t),fQe=r(GMe," (WavLM model)"),GMe.forEach(t),mQe=i(F),Rg=n(F,"LI",{});var OMe=s(Rg);cZ=n(OMe,"STRONG",{});var VNr=s(cZ);gQe=r(VNr,"xglm"),VNr.forEach(t),hQe=r(OMe," \u2014 "),_k=n(OMe,"A",{href:!0});var XNr=s(_k);pQe=r(XNr,"XGLMConfig"),XNr.forEach(t),_Qe=r(OMe," (XGLM model)"),OMe.forEach(t),uQe=i(F),Bg=n(F,"LI",{});var VMe=s(Bg);fZ=n(VMe,"STRONG",{});var zNr=s(fZ);bQe=r(zNr,"xlm"),zNr.forEach(t),vQe=r(VMe," \u2014 "),uk=n(VMe,"A",{href:!0});var QNr=s(uk);FQe=r(QNr,"XLMConfig"),QNr.forEach(t),TQe=r(VMe," (XLM model)"),VMe.forEach(t),MQe=i(F),Pg=n(F,"LI",{});var XMe=s(Pg);mZ=n(XMe,"STRONG",{});var WNr=s(mZ);EQe=r(WNr,"xlm-prophetnet"),WNr.forEach(t),CQe=r(XMe," \u2014 "),bk=n(XMe,"A",{href:!0});var HNr=s(bk);wQe=r(HNr,"XLMProphetNetConfig"),HNr.forEach(t),AQe=r(XMe," (XLMProphetNet model)"),XMe.forEach(t),yQe=i(F),$g=n(F,"LI",{});var zMe=s($g);gZ=n(zMe,"STRONG",{});var UNr=s(gZ);LQe=r(UNr,"xlm-roberta"),UNr.forEach(t),xQe=r(zMe," \u2014 "),vk=n(zMe,"A",{href:!0});var JNr=s(vk);kQe=r(JNr,"XLMRobertaConfig"),JNr.forEach(t),SQe=r(zMe," (XLM-RoBERTa model)"),zMe.forEach(t),RQe=i(F),Ig=n(F,"LI",{});var QMe=s(Ig);hZ=n(QMe,"STRONG",{});var YNr=s(hZ);BQe=r(YNr,"xlm-roberta-xl"),YNr.forEach(t),PQe=r(QMe," \u2014 "),Fk=n(QMe,"A",{href:!0});var KNr=s(Fk);$Qe=r(KNr,"XLMRobertaXLConfig"),KNr.forEach(t),IQe=r(QMe," (XLM-RoBERTa-XL model)"),QMe.forEach(t),qQe=i(F),qg=n(F,"LI",{});var WMe=s(qg);pZ=n(WMe,"STRONG",{});var ZNr=s(pZ);NQe=r(ZNr,"xlnet"),ZNr.forEach(t),jQe=r(WMe," \u2014 "),Tk=n(WMe,"A",{href:!0});var ejr=s(Tk);DQe=r(ejr,"XLNetConfig"),ejr.forEach(t),GQe=r(WMe," (XLNet model)"),WMe.forEach(t),OQe=i(F),Ng=n(F,"LI",{});var HMe=s(Ng);_Z=n(HMe,"STRONG",{});var ojr=s(_Z);VQe=r(ojr,"yoso"),ojr.forEach(t),XQe=r(HMe," \u2014 "),Mk=n(HMe,"A",{href:!0});var rjr=s(Mk);zQe=r(rjr,"YosoConfig"),rjr.forEach(t),QQe=r(HMe," (YOSO model)"),HMe.forEach(t),F.forEach(t),WQe=i(ga),uZ=n(ga,"P",{});var tjr=s(uZ);HQe=r(tjr,"Examples:"),tjr.forEach(t),UQe=i(ga),m(D5.$$.fragment,ga),ga.forEach(t),JQe=i(Xs),jg=n(Xs,"DIV",{class:!0});var zPe=s(jg);m(G5.$$.fragment,zPe),YQe=i(zPe),bZ=n(zPe,"P",{});var ajr=s(bZ);KQe=r(ajr,"Register a new configuration for this class."),ajr.forEach(t),zPe.forEach(t),Xs.forEach(t),VRe=i(c),Hi=n(c,"H2",{class:!0});var QPe=s(Hi);Dg=n(QPe,"A",{id:!0,class:!0,href:!0});var njr=s(Dg);vZ=n(njr,"SPAN",{});var sjr=s(vZ);m(O5.$$.fragment,sjr),sjr.forEach(t),njr.forEach(t),ZQe=i(QPe),FZ=n(QPe,"SPAN",{});var ljr=s(FZ);eWe=r(ljr,"AutoTokenizer"),ljr.forEach(t),QPe.forEach(t),XRe=i(c),Wo=n(c,"DIV",{class:!0});var zs=s(Wo);m(V5.$$.fragment,zs),oWe=i(zs),X5=n(zs,"P",{});var WPe=s(X5);rWe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Ek=n(WPe,"A",{href:!0});var ijr=s(Ek);tWe=r(ijr,"AutoTokenizer.from_pretrained()"),ijr.forEach(t),aWe=r(WPe," class method."),WPe.forEach(t),nWe=i(zs),z5=n(zs,"P",{});var HPe=s(z5);sWe=r(HPe,"This class cannot be instantiated directly using "),TZ=n(HPe,"CODE",{});var djr=s(TZ);lWe=r(djr,"__init__()"),djr.forEach(t),iWe=r(HPe," (throws an error)."),HPe.forEach(t),dWe=i(zs),go=n(zs,"DIV",{class:!0});var ha=s(go);m(Q5.$$.fragment,ha),cWe=i(ha),MZ=n(ha,"P",{});var cjr=s(MZ);fWe=r(cjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cjr.forEach(t),mWe=i(ha),Oa=n(ha,"P",{});var kE=s(Oa);gWe=r(kE,"The tokenizer class to instantiate is selected based on the "),EZ=n(kE,"CODE",{});var fjr=s(EZ);hWe=r(fjr,"model_type"),fjr.forEach(t),pWe=r(kE,` property of the config object (either
passed as an argument or loaded from `),CZ=n(kE,"CODE",{});var mjr=s(CZ);_We=r(mjr,"pretrained_model_name_or_path"),mjr.forEach(t),uWe=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wZ=n(kE,"CODE",{});var gjr=s(wZ);bWe=r(gjr,"pretrained_model_name_or_path"),gjr.forEach(t),vWe=r(kE,":"),kE.forEach(t),FWe=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var wL=s(Wn);AZ=n(wL,"STRONG",{});var hjr=s(AZ);TWe=r(hjr,"albert"),hjr.forEach(t),MWe=r(wL," \u2014 "),Ck=n(wL,"A",{href:!0});var pjr=s(Ck);EWe=r(pjr,"AlbertTokenizer"),pjr.forEach(t),CWe=r(wL," or "),wk=n(wL,"A",{href:!0});var _jr=s(wk);wWe=r(_jr,"AlbertTokenizerFast"),_jr.forEach(t),AWe=r(wL," (ALBERT model)"),wL.forEach(t),yWe=i(w),Hn=n(w,"LI",{});var AL=s(Hn);yZ=n(AL,"STRONG",{});var ujr=s(yZ);LWe=r(ujr,"bart"),ujr.forEach(t),xWe=r(AL," \u2014 "),Ak=n(AL,"A",{href:!0});var bjr=s(Ak);kWe=r(bjr,"BartTokenizer"),bjr.forEach(t),SWe=r(AL," or "),yk=n(AL,"A",{href:!0});var vjr=s(yk);RWe=r(vjr,"BartTokenizerFast"),vjr.forEach(t),BWe=r(AL," (BART model)"),AL.forEach(t),PWe=i(w),Un=n(w,"LI",{});var yL=s(Un);LZ=n(yL,"STRONG",{});var Fjr=s(LZ);$We=r(Fjr,"barthez"),Fjr.forEach(t),IWe=r(yL," \u2014 "),Lk=n(yL,"A",{href:!0});var Tjr=s(Lk);qWe=r(Tjr,"BarthezTokenizer"),Tjr.forEach(t),NWe=r(yL," or "),xk=n(yL,"A",{href:!0});var Mjr=s(xk);jWe=r(Mjr,"BarthezTokenizerFast"),Mjr.forEach(t),DWe=r(yL," (BARThez model)"),yL.forEach(t),GWe=i(w),Gg=n(w,"LI",{});var UMe=s(Gg);xZ=n(UMe,"STRONG",{});var Ejr=s(xZ);OWe=r(Ejr,"bartpho"),Ejr.forEach(t),VWe=r(UMe," \u2014 "),kk=n(UMe,"A",{href:!0});var Cjr=s(kk);XWe=r(Cjr,"BartphoTokenizer"),Cjr.forEach(t),zWe=r(UMe," (BARTpho model)"),UMe.forEach(t),QWe=i(w),Jn=n(w,"LI",{});var LL=s(Jn);kZ=n(LL,"STRONG",{});var wjr=s(kZ);WWe=r(wjr,"bert"),wjr.forEach(t),HWe=r(LL," \u2014 "),Sk=n(LL,"A",{href:!0});var Ajr=s(Sk);UWe=r(Ajr,"BertTokenizer"),Ajr.forEach(t),JWe=r(LL," or "),Rk=n(LL,"A",{href:!0});var yjr=s(Rk);YWe=r(yjr,"BertTokenizerFast"),yjr.forEach(t),KWe=r(LL," (BERT model)"),LL.forEach(t),ZWe=i(w),Og=n(w,"LI",{});var JMe=s(Og);SZ=n(JMe,"STRONG",{});var Ljr=s(SZ);eHe=r(Ljr,"bert-generation"),Ljr.forEach(t),oHe=r(JMe," \u2014 "),Bk=n(JMe,"A",{href:!0});var xjr=s(Bk);rHe=r(xjr,"BertGenerationTokenizer"),xjr.forEach(t),tHe=r(JMe," (Bert Generation model)"),JMe.forEach(t),aHe=i(w),Vg=n(w,"LI",{});var YMe=s(Vg);RZ=n(YMe,"STRONG",{});var kjr=s(RZ);nHe=r(kjr,"bert-japanese"),kjr.forEach(t),sHe=r(YMe," \u2014 "),Pk=n(YMe,"A",{href:!0});var Sjr=s(Pk);lHe=r(Sjr,"BertJapaneseTokenizer"),Sjr.forEach(t),iHe=r(YMe," (BertJapanese model)"),YMe.forEach(t),dHe=i(w),Xg=n(w,"LI",{});var KMe=s(Xg);BZ=n(KMe,"STRONG",{});var Rjr=s(BZ);cHe=r(Rjr,"bertweet"),Rjr.forEach(t),fHe=r(KMe," \u2014 "),$k=n(KMe,"A",{href:!0});var Bjr=s($k);mHe=r(Bjr,"BertweetTokenizer"),Bjr.forEach(t),gHe=r(KMe," (Bertweet model)"),KMe.forEach(t),hHe=i(w),Yn=n(w,"LI",{});var xL=s(Yn);PZ=n(xL,"STRONG",{});var Pjr=s(PZ);pHe=r(Pjr,"big_bird"),Pjr.forEach(t),_He=r(xL," \u2014 "),Ik=n(xL,"A",{href:!0});var $jr=s(Ik);uHe=r($jr,"BigBirdTokenizer"),$jr.forEach(t),bHe=r(xL," or "),qk=n(xL,"A",{href:!0});var Ijr=s(qk);vHe=r(Ijr,"BigBirdTokenizerFast"),Ijr.forEach(t),FHe=r(xL," (BigBird model)"),xL.forEach(t),THe=i(w),Kn=n(w,"LI",{});var kL=s(Kn);$Z=n(kL,"STRONG",{});var qjr=s($Z);MHe=r(qjr,"bigbird_pegasus"),qjr.forEach(t),EHe=r(kL," \u2014 "),Nk=n(kL,"A",{href:!0});var Njr=s(Nk);CHe=r(Njr,"PegasusTokenizer"),Njr.forEach(t),wHe=r(kL," or "),jk=n(kL,"A",{href:!0});var jjr=s(jk);AHe=r(jjr,"PegasusTokenizerFast"),jjr.forEach(t),yHe=r(kL," (BigBirdPegasus model)"),kL.forEach(t),LHe=i(w),Zn=n(w,"LI",{});var SL=s(Zn);IZ=n(SL,"STRONG",{});var Djr=s(IZ);xHe=r(Djr,"blenderbot"),Djr.forEach(t),kHe=r(SL," \u2014 "),Dk=n(SL,"A",{href:!0});var Gjr=s(Dk);SHe=r(Gjr,"BlenderbotTokenizer"),Gjr.forEach(t),RHe=r(SL," or "),Gk=n(SL,"A",{href:!0});var Ojr=s(Gk);BHe=r(Ojr,"BlenderbotTokenizerFast"),Ojr.forEach(t),PHe=r(SL," (Blenderbot model)"),SL.forEach(t),$He=i(w),zg=n(w,"LI",{});var ZMe=s(zg);qZ=n(ZMe,"STRONG",{});var Vjr=s(qZ);IHe=r(Vjr,"blenderbot-small"),Vjr.forEach(t),qHe=r(ZMe," \u2014 "),Ok=n(ZMe,"A",{href:!0});var Xjr=s(Ok);NHe=r(Xjr,"BlenderbotSmallTokenizer"),Xjr.forEach(t),jHe=r(ZMe," (BlenderbotSmall model)"),ZMe.forEach(t),DHe=i(w),Qg=n(w,"LI",{});var e4e=s(Qg);NZ=n(e4e,"STRONG",{});var zjr=s(NZ);GHe=r(zjr,"byt5"),zjr.forEach(t),OHe=r(e4e," \u2014 "),Vk=n(e4e,"A",{href:!0});var Qjr=s(Vk);VHe=r(Qjr,"ByT5Tokenizer"),Qjr.forEach(t),XHe=r(e4e," (ByT5 model)"),e4e.forEach(t),zHe=i(w),es=n(w,"LI",{});var RL=s(es);jZ=n(RL,"STRONG",{});var Wjr=s(jZ);QHe=r(Wjr,"camembert"),Wjr.forEach(t),WHe=r(RL," \u2014 "),Xk=n(RL,"A",{href:!0});var Hjr=s(Xk);HHe=r(Hjr,"CamembertTokenizer"),Hjr.forEach(t),UHe=r(RL," or "),zk=n(RL,"A",{href:!0});var Ujr=s(zk);JHe=r(Ujr,"CamembertTokenizerFast"),Ujr.forEach(t),YHe=r(RL," (CamemBERT model)"),RL.forEach(t),KHe=i(w),Wg=n(w,"LI",{});var o4e=s(Wg);DZ=n(o4e,"STRONG",{});var Jjr=s(DZ);ZHe=r(Jjr,"canine"),Jjr.forEach(t),eUe=r(o4e," \u2014 "),Qk=n(o4e,"A",{href:!0});var Yjr=s(Qk);oUe=r(Yjr,"CanineTokenizer"),Yjr.forEach(t),rUe=r(o4e," (Canine model)"),o4e.forEach(t),tUe=i(w),os=n(w,"LI",{});var BL=s(os);GZ=n(BL,"STRONG",{});var Kjr=s(GZ);aUe=r(Kjr,"clip"),Kjr.forEach(t),nUe=r(BL," \u2014 "),Wk=n(BL,"A",{href:!0});var Zjr=s(Wk);sUe=r(Zjr,"CLIPTokenizer"),Zjr.forEach(t),lUe=r(BL," or "),Hk=n(BL,"A",{href:!0});var eDr=s(Hk);iUe=r(eDr,"CLIPTokenizerFast"),eDr.forEach(t),dUe=r(BL," (CLIP model)"),BL.forEach(t),cUe=i(w),rs=n(w,"LI",{});var PL=s(rs);OZ=n(PL,"STRONG",{});var oDr=s(OZ);fUe=r(oDr,"convbert"),oDr.forEach(t),mUe=r(PL," \u2014 "),Uk=n(PL,"A",{href:!0});var rDr=s(Uk);gUe=r(rDr,"ConvBertTokenizer"),rDr.forEach(t),hUe=r(PL," or "),Jk=n(PL,"A",{href:!0});var tDr=s(Jk);pUe=r(tDr,"ConvBertTokenizerFast"),tDr.forEach(t),_Ue=r(PL," (ConvBERT model)"),PL.forEach(t),uUe=i(w),ts=n(w,"LI",{});var $L=s(ts);VZ=n($L,"STRONG",{});var aDr=s(VZ);bUe=r(aDr,"cpm"),aDr.forEach(t),vUe=r($L," \u2014 "),Yk=n($L,"A",{href:!0});var nDr=s(Yk);FUe=r(nDr,"CpmTokenizer"),nDr.forEach(t),TUe=r($L," or "),XZ=n($L,"CODE",{});var sDr=s(XZ);MUe=r(sDr,"CpmTokenizerFast"),sDr.forEach(t),EUe=r($L," (CPM model)"),$L.forEach(t),CUe=i(w),Hg=n(w,"LI",{});var r4e=s(Hg);zZ=n(r4e,"STRONG",{});var lDr=s(zZ);wUe=r(lDr,"ctrl"),lDr.forEach(t),AUe=r(r4e," \u2014 "),Kk=n(r4e,"A",{href:!0});var iDr=s(Kk);yUe=r(iDr,"CTRLTokenizer"),iDr.forEach(t),LUe=r(r4e," (CTRL model)"),r4e.forEach(t),xUe=i(w),as=n(w,"LI",{});var IL=s(as);QZ=n(IL,"STRONG",{});var dDr=s(QZ);kUe=r(dDr,"deberta"),dDr.forEach(t),SUe=r(IL," \u2014 "),Zk=n(IL,"A",{href:!0});var cDr=s(Zk);RUe=r(cDr,"DebertaTokenizer"),cDr.forEach(t),BUe=r(IL," or "),eS=n(IL,"A",{href:!0});var fDr=s(eS);PUe=r(fDr,"DebertaTokenizerFast"),fDr.forEach(t),$Ue=r(IL," (DeBERTa model)"),IL.forEach(t),IUe=i(w),ns=n(w,"LI",{});var qL=s(ns);WZ=n(qL,"STRONG",{});var mDr=s(WZ);qUe=r(mDr,"deberta-v2"),mDr.forEach(t),NUe=r(qL," \u2014 "),oS=n(qL,"A",{href:!0});var gDr=s(oS);jUe=r(gDr,"DebertaV2Tokenizer"),gDr.forEach(t),DUe=r(qL," or "),rS=n(qL,"A",{href:!0});var hDr=s(rS);GUe=r(hDr,"DebertaV2TokenizerFast"),hDr.forEach(t),OUe=r(qL," (DeBERTa-v2 model)"),qL.forEach(t),VUe=i(w),ss=n(w,"LI",{});var NL=s(ss);HZ=n(NL,"STRONG",{});var pDr=s(HZ);XUe=r(pDr,"distilbert"),pDr.forEach(t),zUe=r(NL," \u2014 "),tS=n(NL,"A",{href:!0});var _Dr=s(tS);QUe=r(_Dr,"DistilBertTokenizer"),_Dr.forEach(t),WUe=r(NL," or "),aS=n(NL,"A",{href:!0});var uDr=s(aS);HUe=r(uDr,"DistilBertTokenizerFast"),uDr.forEach(t),UUe=r(NL," (DistilBERT model)"),NL.forEach(t),JUe=i(w),ls=n(w,"LI",{});var jL=s(ls);UZ=n(jL,"STRONG",{});var bDr=s(UZ);YUe=r(bDr,"dpr"),bDr.forEach(t),KUe=r(jL," \u2014 "),nS=n(jL,"A",{href:!0});var vDr=s(nS);ZUe=r(vDr,"DPRQuestionEncoderTokenizer"),vDr.forEach(t),eJe=r(jL," or "),sS=n(jL,"A",{href:!0});var FDr=s(sS);oJe=r(FDr,"DPRQuestionEncoderTokenizerFast"),FDr.forEach(t),rJe=r(jL," (DPR model)"),jL.forEach(t),tJe=i(w),is=n(w,"LI",{});var DL=s(is);JZ=n(DL,"STRONG",{});var TDr=s(JZ);aJe=r(TDr,"electra"),TDr.forEach(t),nJe=r(DL," \u2014 "),lS=n(DL,"A",{href:!0});var MDr=s(lS);sJe=r(MDr,"ElectraTokenizer"),MDr.forEach(t),lJe=r(DL," or "),iS=n(DL,"A",{href:!0});var EDr=s(iS);iJe=r(EDr,"ElectraTokenizerFast"),EDr.forEach(t),dJe=r(DL," (ELECTRA model)"),DL.forEach(t),cJe=i(w),Ug=n(w,"LI",{});var t4e=s(Ug);YZ=n(t4e,"STRONG",{});var CDr=s(YZ);fJe=r(CDr,"flaubert"),CDr.forEach(t),mJe=r(t4e," \u2014 "),dS=n(t4e,"A",{href:!0});var wDr=s(dS);gJe=r(wDr,"FlaubertTokenizer"),wDr.forEach(t),hJe=r(t4e," (FlauBERT model)"),t4e.forEach(t),pJe=i(w),ds=n(w,"LI",{});var GL=s(ds);KZ=n(GL,"STRONG",{});var ADr=s(KZ);_Je=r(ADr,"fnet"),ADr.forEach(t),uJe=r(GL," \u2014 "),cS=n(GL,"A",{href:!0});var yDr=s(cS);bJe=r(yDr,"FNetTokenizer"),yDr.forEach(t),vJe=r(GL," or "),fS=n(GL,"A",{href:!0});var LDr=s(fS);FJe=r(LDr,"FNetTokenizerFast"),LDr.forEach(t),TJe=r(GL," (FNet model)"),GL.forEach(t),MJe=i(w),Jg=n(w,"LI",{});var a4e=s(Jg);ZZ=n(a4e,"STRONG",{});var xDr=s(ZZ);EJe=r(xDr,"fsmt"),xDr.forEach(t),CJe=r(a4e," \u2014 "),mS=n(a4e,"A",{href:!0});var kDr=s(mS);wJe=r(kDr,"FSMTTokenizer"),kDr.forEach(t),AJe=r(a4e," (FairSeq Machine-Translation model)"),a4e.forEach(t),yJe=i(w),cs=n(w,"LI",{});var OL=s(cs);eee=n(OL,"STRONG",{});var SDr=s(eee);LJe=r(SDr,"funnel"),SDr.forEach(t),xJe=r(OL," \u2014 "),gS=n(OL,"A",{href:!0});var RDr=s(gS);kJe=r(RDr,"FunnelTokenizer"),RDr.forEach(t),SJe=r(OL," or "),hS=n(OL,"A",{href:!0});var BDr=s(hS);RJe=r(BDr,"FunnelTokenizerFast"),BDr.forEach(t),BJe=r(OL," (Funnel Transformer model)"),OL.forEach(t),PJe=i(w),fs=n(w,"LI",{});var VL=s(fs);oee=n(VL,"STRONG",{});var PDr=s(oee);$Je=r(PDr,"gpt2"),PDr.forEach(t),IJe=r(VL," \u2014 "),pS=n(VL,"A",{href:!0});var $Dr=s(pS);qJe=r($Dr,"GPT2Tokenizer"),$Dr.forEach(t),NJe=r(VL," or "),_S=n(VL,"A",{href:!0});var IDr=s(_S);jJe=r(IDr,"GPT2TokenizerFast"),IDr.forEach(t),DJe=r(VL," (OpenAI GPT-2 model)"),VL.forEach(t),GJe=i(w),ms=n(w,"LI",{});var XL=s(ms);ree=n(XL,"STRONG",{});var qDr=s(ree);OJe=r(qDr,"gpt_neo"),qDr.forEach(t),VJe=r(XL," \u2014 "),uS=n(XL,"A",{href:!0});var NDr=s(uS);XJe=r(NDr,"GPT2Tokenizer"),NDr.forEach(t),zJe=r(XL," or "),bS=n(XL,"A",{href:!0});var jDr=s(bS);QJe=r(jDr,"GPT2TokenizerFast"),jDr.forEach(t),WJe=r(XL," (GPT Neo model)"),XL.forEach(t),HJe=i(w),gs=n(w,"LI",{});var zL=s(gs);tee=n(zL,"STRONG",{});var DDr=s(tee);UJe=r(DDr,"herbert"),DDr.forEach(t),JJe=r(zL," \u2014 "),vS=n(zL,"A",{href:!0});var GDr=s(vS);YJe=r(GDr,"HerbertTokenizer"),GDr.forEach(t),KJe=r(zL," or "),FS=n(zL,"A",{href:!0});var ODr=s(FS);ZJe=r(ODr,"HerbertTokenizerFast"),ODr.forEach(t),eYe=r(zL," (HerBERT model)"),zL.forEach(t),oYe=i(w),Yg=n(w,"LI",{});var n4e=s(Yg);aee=n(n4e,"STRONG",{});var VDr=s(aee);rYe=r(VDr,"hubert"),VDr.forEach(t),tYe=r(n4e," \u2014 "),TS=n(n4e,"A",{href:!0});var XDr=s(TS);aYe=r(XDr,"Wav2Vec2CTCTokenizer"),XDr.forEach(t),nYe=r(n4e," (Hubert model)"),n4e.forEach(t),sYe=i(w),hs=n(w,"LI",{});var QL=s(hs);nee=n(QL,"STRONG",{});var zDr=s(nee);lYe=r(zDr,"ibert"),zDr.forEach(t),iYe=r(QL," \u2014 "),MS=n(QL,"A",{href:!0});var QDr=s(MS);dYe=r(QDr,"RobertaTokenizer"),QDr.forEach(t),cYe=r(QL," or "),ES=n(QL,"A",{href:!0});var WDr=s(ES);fYe=r(WDr,"RobertaTokenizerFast"),WDr.forEach(t),mYe=r(QL," (I-BERT model)"),QL.forEach(t),gYe=i(w),ps=n(w,"LI",{});var WL=s(ps);see=n(WL,"STRONG",{});var HDr=s(see);hYe=r(HDr,"layoutlm"),HDr.forEach(t),pYe=r(WL," \u2014 "),CS=n(WL,"A",{href:!0});var UDr=s(CS);_Ye=r(UDr,"LayoutLMTokenizer"),UDr.forEach(t),uYe=r(WL," or "),wS=n(WL,"A",{href:!0});var JDr=s(wS);bYe=r(JDr,"LayoutLMTokenizerFast"),JDr.forEach(t),vYe=r(WL," (LayoutLM model)"),WL.forEach(t),FYe=i(w),_s=n(w,"LI",{});var HL=s(_s);lee=n(HL,"STRONG",{});var YDr=s(lee);TYe=r(YDr,"layoutlmv2"),YDr.forEach(t),MYe=r(HL," \u2014 "),AS=n(HL,"A",{href:!0});var KDr=s(AS);EYe=r(KDr,"LayoutLMv2Tokenizer"),KDr.forEach(t),CYe=r(HL," or "),yS=n(HL,"A",{href:!0});var ZDr=s(yS);wYe=r(ZDr,"LayoutLMv2TokenizerFast"),ZDr.forEach(t),AYe=r(HL," (LayoutLMv2 model)"),HL.forEach(t),yYe=i(w),us=n(w,"LI",{});var UL=s(us);iee=n(UL,"STRONG",{});var eGr=s(iee);LYe=r(eGr,"layoutxlm"),eGr.forEach(t),xYe=r(UL," \u2014 "),LS=n(UL,"A",{href:!0});var oGr=s(LS);kYe=r(oGr,"LayoutXLMTokenizer"),oGr.forEach(t),SYe=r(UL," or "),xS=n(UL,"A",{href:!0});var rGr=s(xS);RYe=r(rGr,"LayoutXLMTokenizerFast"),rGr.forEach(t),BYe=r(UL," (LayoutXLM model)"),UL.forEach(t),PYe=i(w),bs=n(w,"LI",{});var JL=s(bs);dee=n(JL,"STRONG",{});var tGr=s(dee);$Ye=r(tGr,"led"),tGr.forEach(t),IYe=r(JL," \u2014 "),kS=n(JL,"A",{href:!0});var aGr=s(kS);qYe=r(aGr,"LEDTokenizer"),aGr.forEach(t),NYe=r(JL," or "),SS=n(JL,"A",{href:!0});var nGr=s(SS);jYe=r(nGr,"LEDTokenizerFast"),nGr.forEach(t),DYe=r(JL," (LED model)"),JL.forEach(t),GYe=i(w),vs=n(w,"LI",{});var YL=s(vs);cee=n(YL,"STRONG",{});var sGr=s(cee);OYe=r(sGr,"longformer"),sGr.forEach(t),VYe=r(YL," \u2014 "),RS=n(YL,"A",{href:!0});var lGr=s(RS);XYe=r(lGr,"LongformerTokenizer"),lGr.forEach(t),zYe=r(YL," or "),BS=n(YL,"A",{href:!0});var iGr=s(BS);QYe=r(iGr,"LongformerTokenizerFast"),iGr.forEach(t),WYe=r(YL," (Longformer model)"),YL.forEach(t),HYe=i(w),Kg=n(w,"LI",{});var s4e=s(Kg);fee=n(s4e,"STRONG",{});var dGr=s(fee);UYe=r(dGr,"luke"),dGr.forEach(t),JYe=r(s4e," \u2014 "),PS=n(s4e,"A",{href:!0});var cGr=s(PS);YYe=r(cGr,"LukeTokenizer"),cGr.forEach(t),KYe=r(s4e," (LUKE model)"),s4e.forEach(t),ZYe=i(w),Fs=n(w,"LI",{});var KL=s(Fs);mee=n(KL,"STRONG",{});var fGr=s(mee);eKe=r(fGr,"lxmert"),fGr.forEach(t),oKe=r(KL," \u2014 "),$S=n(KL,"A",{href:!0});var mGr=s($S);rKe=r(mGr,"LxmertTokenizer"),mGr.forEach(t),tKe=r(KL," or "),IS=n(KL,"A",{href:!0});var gGr=s(IS);aKe=r(gGr,"LxmertTokenizerFast"),gGr.forEach(t),nKe=r(KL," (LXMERT model)"),KL.forEach(t),sKe=i(w),Zg=n(w,"LI",{});var l4e=s(Zg);gee=n(l4e,"STRONG",{});var hGr=s(gee);lKe=r(hGr,"m2m_100"),hGr.forEach(t),iKe=r(l4e," \u2014 "),qS=n(l4e,"A",{href:!0});var pGr=s(qS);dKe=r(pGr,"M2M100Tokenizer"),pGr.forEach(t),cKe=r(l4e," (M2M100 model)"),l4e.forEach(t),fKe=i(w),eh=n(w,"LI",{});var i4e=s(eh);hee=n(i4e,"STRONG",{});var _Gr=s(hee);mKe=r(_Gr,"marian"),_Gr.forEach(t),gKe=r(i4e," \u2014 "),NS=n(i4e,"A",{href:!0});var uGr=s(NS);hKe=r(uGr,"MarianTokenizer"),uGr.forEach(t),pKe=r(i4e," (Marian model)"),i4e.forEach(t),_Ke=i(w),Ts=n(w,"LI",{});var ZL=s(Ts);pee=n(ZL,"STRONG",{});var bGr=s(pee);uKe=r(bGr,"mbart"),bGr.forEach(t),bKe=r(ZL," \u2014 "),jS=n(ZL,"A",{href:!0});var vGr=s(jS);vKe=r(vGr,"MBartTokenizer"),vGr.forEach(t),FKe=r(ZL," or "),DS=n(ZL,"A",{href:!0});var FGr=s(DS);TKe=r(FGr,"MBartTokenizerFast"),FGr.forEach(t),MKe=r(ZL," (mBART model)"),ZL.forEach(t),EKe=i(w),Ms=n(w,"LI",{});var e7=s(Ms);_ee=n(e7,"STRONG",{});var TGr=s(_ee);CKe=r(TGr,"mbart50"),TGr.forEach(t),wKe=r(e7," \u2014 "),GS=n(e7,"A",{href:!0});var MGr=s(GS);AKe=r(MGr,"MBart50Tokenizer"),MGr.forEach(t),yKe=r(e7," or "),OS=n(e7,"A",{href:!0});var EGr=s(OS);LKe=r(EGr,"MBart50TokenizerFast"),EGr.forEach(t),xKe=r(e7," (mBART-50 model)"),e7.forEach(t),kKe=i(w),oh=n(w,"LI",{});var d4e=s(oh);uee=n(d4e,"STRONG",{});var CGr=s(uee);SKe=r(CGr,"mluke"),CGr.forEach(t),RKe=r(d4e," \u2014 "),VS=n(d4e,"A",{href:!0});var wGr=s(VS);BKe=r(wGr,"MLukeTokenizer"),wGr.forEach(t),PKe=r(d4e," (mLUKE model)"),d4e.forEach(t),$Ke=i(w),Es=n(w,"LI",{});var o7=s(Es);bee=n(o7,"STRONG",{});var AGr=s(bee);IKe=r(AGr,"mobilebert"),AGr.forEach(t),qKe=r(o7," \u2014 "),XS=n(o7,"A",{href:!0});var yGr=s(XS);NKe=r(yGr,"MobileBertTokenizer"),yGr.forEach(t),jKe=r(o7," or "),zS=n(o7,"A",{href:!0});var LGr=s(zS);DKe=r(LGr,"MobileBertTokenizerFast"),LGr.forEach(t),GKe=r(o7," (MobileBERT model)"),o7.forEach(t),OKe=i(w),Cs=n(w,"LI",{});var r7=s(Cs);vee=n(r7,"STRONG",{});var xGr=s(vee);VKe=r(xGr,"mpnet"),xGr.forEach(t),XKe=r(r7," \u2014 "),QS=n(r7,"A",{href:!0});var kGr=s(QS);zKe=r(kGr,"MPNetTokenizer"),kGr.forEach(t),QKe=r(r7," or "),WS=n(r7,"A",{href:!0});var SGr=s(WS);WKe=r(SGr,"MPNetTokenizerFast"),SGr.forEach(t),HKe=r(r7," (MPNet model)"),r7.forEach(t),UKe=i(w),ws=n(w,"LI",{});var t7=s(ws);Fee=n(t7,"STRONG",{});var RGr=s(Fee);JKe=r(RGr,"mt5"),RGr.forEach(t),YKe=r(t7," \u2014 "),HS=n(t7,"A",{href:!0});var BGr=s(HS);KKe=r(BGr,"MT5Tokenizer"),BGr.forEach(t),ZKe=r(t7," or "),US=n(t7,"A",{href:!0});var PGr=s(US);eZe=r(PGr,"MT5TokenizerFast"),PGr.forEach(t),oZe=r(t7," (mT5 model)"),t7.forEach(t),rZe=i(w),As=n(w,"LI",{});var a7=s(As);Tee=n(a7,"STRONG",{});var $Gr=s(Tee);tZe=r($Gr,"openai-gpt"),$Gr.forEach(t),aZe=r(a7," \u2014 "),JS=n(a7,"A",{href:!0});var IGr=s(JS);nZe=r(IGr,"OpenAIGPTTokenizer"),IGr.forEach(t),sZe=r(a7," or "),YS=n(a7,"A",{href:!0});var qGr=s(YS);lZe=r(qGr,"OpenAIGPTTokenizerFast"),qGr.forEach(t),iZe=r(a7," (OpenAI GPT model)"),a7.forEach(t),dZe=i(w),ys=n(w,"LI",{});var n7=s(ys);Mee=n(n7,"STRONG",{});var NGr=s(Mee);cZe=r(NGr,"pegasus"),NGr.forEach(t),fZe=r(n7," \u2014 "),KS=n(n7,"A",{href:!0});var jGr=s(KS);mZe=r(jGr,"PegasusTokenizer"),jGr.forEach(t),gZe=r(n7," or "),ZS=n(n7,"A",{href:!0});var DGr=s(ZS);hZe=r(DGr,"PegasusTokenizerFast"),DGr.forEach(t),pZe=r(n7," (Pegasus model)"),n7.forEach(t),_Ze=i(w),rh=n(w,"LI",{});var c4e=s(rh);Eee=n(c4e,"STRONG",{});var GGr=s(Eee);uZe=r(GGr,"perceiver"),GGr.forEach(t),bZe=r(c4e," \u2014 "),eR=n(c4e,"A",{href:!0});var OGr=s(eR);vZe=r(OGr,"PerceiverTokenizer"),OGr.forEach(t),FZe=r(c4e," (Perceiver model)"),c4e.forEach(t),TZe=i(w),th=n(w,"LI",{});var f4e=s(th);Cee=n(f4e,"STRONG",{});var VGr=s(Cee);MZe=r(VGr,"phobert"),VGr.forEach(t),EZe=r(f4e," \u2014 "),oR=n(f4e,"A",{href:!0});var XGr=s(oR);CZe=r(XGr,"PhobertTokenizer"),XGr.forEach(t),wZe=r(f4e," (PhoBERT model)"),f4e.forEach(t),AZe=i(w),ah=n(w,"LI",{});var m4e=s(ah);wee=n(m4e,"STRONG",{});var zGr=s(wee);yZe=r(zGr,"plbart"),zGr.forEach(t),LZe=r(m4e," \u2014 "),rR=n(m4e,"A",{href:!0});var QGr=s(rR);xZe=r(QGr,"PLBartTokenizer"),QGr.forEach(t),kZe=r(m4e," (PLBart model)"),m4e.forEach(t),SZe=i(w),nh=n(w,"LI",{});var g4e=s(nh);Aee=n(g4e,"STRONG",{});var WGr=s(Aee);RZe=r(WGr,"prophetnet"),WGr.forEach(t),BZe=r(g4e," \u2014 "),tR=n(g4e,"A",{href:!0});var HGr=s(tR);PZe=r(HGr,"ProphetNetTokenizer"),HGr.forEach(t),$Ze=r(g4e," (ProphetNet model)"),g4e.forEach(t),IZe=i(w),Ls=n(w,"LI",{});var s7=s(Ls);yee=n(s7,"STRONG",{});var UGr=s(yee);qZe=r(UGr,"qdqbert"),UGr.forEach(t),NZe=r(s7," \u2014 "),aR=n(s7,"A",{href:!0});var JGr=s(aR);jZe=r(JGr,"BertTokenizer"),JGr.forEach(t),DZe=r(s7," or "),nR=n(s7,"A",{href:!0});var YGr=s(nR);GZe=r(YGr,"BertTokenizerFast"),YGr.forEach(t),OZe=r(s7," (QDQBert model)"),s7.forEach(t),VZe=i(w),sh=n(w,"LI",{});var h4e=s(sh);Lee=n(h4e,"STRONG",{});var KGr=s(Lee);XZe=r(KGr,"rag"),KGr.forEach(t),zZe=r(h4e," \u2014 "),sR=n(h4e,"A",{href:!0});var ZGr=s(sR);QZe=r(ZGr,"RagTokenizer"),ZGr.forEach(t),WZe=r(h4e," (RAG model)"),h4e.forEach(t),HZe=i(w),xs=n(w,"LI",{});var l7=s(xs);xee=n(l7,"STRONG",{});var eOr=s(xee);UZe=r(eOr,"realm"),eOr.forEach(t),JZe=r(l7," \u2014 "),lR=n(l7,"A",{href:!0});var oOr=s(lR);YZe=r(oOr,"RealmTokenizer"),oOr.forEach(t),KZe=r(l7," or "),iR=n(l7,"A",{href:!0});var rOr=s(iR);ZZe=r(rOr,"RealmTokenizerFast"),rOr.forEach(t),eeo=r(l7," (Realm model)"),l7.forEach(t),oeo=i(w),ks=n(w,"LI",{});var i7=s(ks);kee=n(i7,"STRONG",{});var tOr=s(kee);reo=r(tOr,"reformer"),tOr.forEach(t),teo=r(i7," \u2014 "),dR=n(i7,"A",{href:!0});var aOr=s(dR);aeo=r(aOr,"ReformerTokenizer"),aOr.forEach(t),neo=r(i7," or "),cR=n(i7,"A",{href:!0});var nOr=s(cR);seo=r(nOr,"ReformerTokenizerFast"),nOr.forEach(t),leo=r(i7," (Reformer model)"),i7.forEach(t),ieo=i(w),Ss=n(w,"LI",{});var d7=s(Ss);See=n(d7,"STRONG",{});var sOr=s(See);deo=r(sOr,"rembert"),sOr.forEach(t),ceo=r(d7," \u2014 "),fR=n(d7,"A",{href:!0});var lOr=s(fR);feo=r(lOr,"RemBertTokenizer"),lOr.forEach(t),meo=r(d7," or "),mR=n(d7,"A",{href:!0});var iOr=s(mR);geo=r(iOr,"RemBertTokenizerFast"),iOr.forEach(t),heo=r(d7," (RemBERT model)"),d7.forEach(t),peo=i(w),Rs=n(w,"LI",{});var c7=s(Rs);Ree=n(c7,"STRONG",{});var dOr=s(Ree);_eo=r(dOr,"retribert"),dOr.forEach(t),ueo=r(c7," \u2014 "),gR=n(c7,"A",{href:!0});var cOr=s(gR);beo=r(cOr,"RetriBertTokenizer"),cOr.forEach(t),veo=r(c7," or "),hR=n(c7,"A",{href:!0});var fOr=s(hR);Feo=r(fOr,"RetriBertTokenizerFast"),fOr.forEach(t),Teo=r(c7," (RetriBERT model)"),c7.forEach(t),Meo=i(w),Bs=n(w,"LI",{});var f7=s(Bs);Bee=n(f7,"STRONG",{});var mOr=s(Bee);Eeo=r(mOr,"roberta"),mOr.forEach(t),Ceo=r(f7," \u2014 "),pR=n(f7,"A",{href:!0});var gOr=s(pR);weo=r(gOr,"RobertaTokenizer"),gOr.forEach(t),Aeo=r(f7," or "),_R=n(f7,"A",{href:!0});var hOr=s(_R);yeo=r(hOr,"RobertaTokenizerFast"),hOr.forEach(t),Leo=r(f7," (RoBERTa model)"),f7.forEach(t),xeo=i(w),Ps=n(w,"LI",{});var m7=s(Ps);Pee=n(m7,"STRONG",{});var pOr=s(Pee);keo=r(pOr,"roformer"),pOr.forEach(t),Seo=r(m7," \u2014 "),uR=n(m7,"A",{href:!0});var _Or=s(uR);Reo=r(_Or,"RoFormerTokenizer"),_Or.forEach(t),Beo=r(m7," or "),bR=n(m7,"A",{href:!0});var uOr=s(bR);Peo=r(uOr,"RoFormerTokenizerFast"),uOr.forEach(t),$eo=r(m7," (RoFormer model)"),m7.forEach(t),Ieo=i(w),lh=n(w,"LI",{});var p4e=s(lh);$ee=n(p4e,"STRONG",{});var bOr=s($ee);qeo=r(bOr,"speech_to_text"),bOr.forEach(t),Neo=r(p4e," \u2014 "),vR=n(p4e,"A",{href:!0});var vOr=s(vR);jeo=r(vOr,"Speech2TextTokenizer"),vOr.forEach(t),Deo=r(p4e," (Speech2Text model)"),p4e.forEach(t),Geo=i(w),ih=n(w,"LI",{});var _4e=s(ih);Iee=n(_4e,"STRONG",{});var FOr=s(Iee);Oeo=r(FOr,"speech_to_text_2"),FOr.forEach(t),Veo=r(_4e," \u2014 "),FR=n(_4e,"A",{href:!0});var TOr=s(FR);Xeo=r(TOr,"Speech2Text2Tokenizer"),TOr.forEach(t),zeo=r(_4e," (Speech2Text2 model)"),_4e.forEach(t),Qeo=i(w),$s=n(w,"LI",{});var g7=s($s);qee=n(g7,"STRONG",{});var MOr=s(qee);Weo=r(MOr,"splinter"),MOr.forEach(t),Heo=r(g7," \u2014 "),TR=n(g7,"A",{href:!0});var EOr=s(TR);Ueo=r(EOr,"SplinterTokenizer"),EOr.forEach(t),Jeo=r(g7," or "),MR=n(g7,"A",{href:!0});var COr=s(MR);Yeo=r(COr,"SplinterTokenizerFast"),COr.forEach(t),Keo=r(g7," (Splinter model)"),g7.forEach(t),Zeo=i(w),Is=n(w,"LI",{});var h7=s(Is);Nee=n(h7,"STRONG",{});var wOr=s(Nee);eoo=r(wOr,"squeezebert"),wOr.forEach(t),ooo=r(h7," \u2014 "),ER=n(h7,"A",{href:!0});var AOr=s(ER);roo=r(AOr,"SqueezeBertTokenizer"),AOr.forEach(t),too=r(h7," or "),CR=n(h7,"A",{href:!0});var yOr=s(CR);aoo=r(yOr,"SqueezeBertTokenizerFast"),yOr.forEach(t),noo=r(h7," (SqueezeBERT model)"),h7.forEach(t),soo=i(w),qs=n(w,"LI",{});var p7=s(qs);jee=n(p7,"STRONG",{});var LOr=s(jee);loo=r(LOr,"t5"),LOr.forEach(t),ioo=r(p7," \u2014 "),wR=n(p7,"A",{href:!0});var xOr=s(wR);doo=r(xOr,"T5Tokenizer"),xOr.forEach(t),coo=r(p7," or "),AR=n(p7,"A",{href:!0});var kOr=s(AR);foo=r(kOr,"T5TokenizerFast"),kOr.forEach(t),moo=r(p7," (T5 model)"),p7.forEach(t),goo=i(w),dh=n(w,"LI",{});var u4e=s(dh);Dee=n(u4e,"STRONG",{});var SOr=s(Dee);hoo=r(SOr,"tapas"),SOr.forEach(t),poo=r(u4e," \u2014 "),yR=n(u4e,"A",{href:!0});var ROr=s(yR);_oo=r(ROr,"TapasTokenizer"),ROr.forEach(t),uoo=r(u4e," (TAPAS model)"),u4e.forEach(t),boo=i(w),ch=n(w,"LI",{});var b4e=s(ch);Gee=n(b4e,"STRONG",{});var BOr=s(Gee);voo=r(BOr,"tapex"),BOr.forEach(t),Foo=r(b4e," \u2014 "),LR=n(b4e,"A",{href:!0});var POr=s(LR);Too=r(POr,"TapexTokenizer"),POr.forEach(t),Moo=r(b4e," (TAPEX model)"),b4e.forEach(t),Eoo=i(w),fh=n(w,"LI",{});var v4e=s(fh);Oee=n(v4e,"STRONG",{});var $Or=s(Oee);Coo=r($Or,"transfo-xl"),$Or.forEach(t),woo=r(v4e," \u2014 "),xR=n(v4e,"A",{href:!0});var IOr=s(xR);Aoo=r(IOr,"TransfoXLTokenizer"),IOr.forEach(t),yoo=r(v4e," (Transformer-XL model)"),v4e.forEach(t),Loo=i(w),mh=n(w,"LI",{});var F4e=s(mh);Vee=n(F4e,"STRONG",{});var qOr=s(Vee);xoo=r(qOr,"wav2vec2"),qOr.forEach(t),koo=r(F4e," \u2014 "),kR=n(F4e,"A",{href:!0});var NOr=s(kR);Soo=r(NOr,"Wav2Vec2CTCTokenizer"),NOr.forEach(t),Roo=r(F4e," (Wav2Vec2 model)"),F4e.forEach(t),Boo=i(w),gh=n(w,"LI",{});var T4e=s(gh);Xee=n(T4e,"STRONG",{});var jOr=s(Xee);Poo=r(jOr,"wav2vec2_phoneme"),jOr.forEach(t),$oo=r(T4e," \u2014 "),SR=n(T4e,"A",{href:!0});var DOr=s(SR);Ioo=r(DOr,"Wav2Vec2PhonemeCTCTokenizer"),DOr.forEach(t),qoo=r(T4e," (Wav2Vec2Phoneme model)"),T4e.forEach(t),Noo=i(w),Ns=n(w,"LI",{});var _7=s(Ns);zee=n(_7,"STRONG",{});var GOr=s(zee);joo=r(GOr,"xglm"),GOr.forEach(t),Doo=r(_7," \u2014 "),RR=n(_7,"A",{href:!0});var OOr=s(RR);Goo=r(OOr,"XGLMTokenizer"),OOr.forEach(t),Ooo=r(_7," or "),BR=n(_7,"A",{href:!0});var VOr=s(BR);Voo=r(VOr,"XGLMTokenizerFast"),VOr.forEach(t),Xoo=r(_7," (XGLM model)"),_7.forEach(t),zoo=i(w),hh=n(w,"LI",{});var M4e=s(hh);Qee=n(M4e,"STRONG",{});var XOr=s(Qee);Qoo=r(XOr,"xlm"),XOr.forEach(t),Woo=r(M4e," \u2014 "),PR=n(M4e,"A",{href:!0});var zOr=s(PR);Hoo=r(zOr,"XLMTokenizer"),zOr.forEach(t),Uoo=r(M4e," (XLM model)"),M4e.forEach(t),Joo=i(w),ph=n(w,"LI",{});var E4e=s(ph);Wee=n(E4e,"STRONG",{});var QOr=s(Wee);Yoo=r(QOr,"xlm-prophetnet"),QOr.forEach(t),Koo=r(E4e," \u2014 "),$R=n(E4e,"A",{href:!0});var WOr=s($R);Zoo=r(WOr,"XLMProphetNetTokenizer"),WOr.forEach(t),ero=r(E4e," (XLMProphetNet model)"),E4e.forEach(t),oro=i(w),js=n(w,"LI",{});var u7=s(js);Hee=n(u7,"STRONG",{});var HOr=s(Hee);rro=r(HOr,"xlm-roberta"),HOr.forEach(t),tro=r(u7," \u2014 "),IR=n(u7,"A",{href:!0});var UOr=s(IR);aro=r(UOr,"XLMRobertaTokenizer"),UOr.forEach(t),nro=r(u7," or "),qR=n(u7,"A",{href:!0});var JOr=s(qR);sro=r(JOr,"XLMRobertaTokenizerFast"),JOr.forEach(t),lro=r(u7," (XLM-RoBERTa model)"),u7.forEach(t),iro=i(w),Ds=n(w,"LI",{});var b7=s(Ds);Uee=n(b7,"STRONG",{});var YOr=s(Uee);dro=r(YOr,"xlnet"),YOr.forEach(t),cro=r(b7," \u2014 "),NR=n(b7,"A",{href:!0});var KOr=s(NR);fro=r(KOr,"XLNetTokenizer"),KOr.forEach(t),mro=r(b7," or "),jR=n(b7,"A",{href:!0});var ZOr=s(jR);gro=r(ZOr,"XLNetTokenizerFast"),ZOr.forEach(t),hro=r(b7," (XLNet model)"),b7.forEach(t),w.forEach(t),pro=i(ha),Jee=n(ha,"P",{});var eVr=s(Jee);_ro=r(eVr,"Examples:"),eVr.forEach(t),uro=i(ha),m(W5.$$.fragment,ha),ha.forEach(t),bro=i(zs),_h=n(zs,"DIV",{class:!0});var UPe=s(_h);m(H5.$$.fragment,UPe),vro=i(UPe),Yee=n(UPe,"P",{});var oVr=s(Yee);Fro=r(oVr,"Register a new tokenizer in this mapping."),oVr.forEach(t),UPe.forEach(t),zs.forEach(t),zRe=i(c),Ui=n(c,"H2",{class:!0});var JPe=s(Ui);uh=n(JPe,"A",{id:!0,class:!0,href:!0});var rVr=s(uh);Kee=n(rVr,"SPAN",{});var tVr=s(Kee);m(U5.$$.fragment,tVr),tVr.forEach(t),rVr.forEach(t),Tro=i(JPe),Zee=n(JPe,"SPAN",{});var aVr=s(Zee);Mro=r(aVr,"AutoFeatureExtractor"),aVr.forEach(t),JPe.forEach(t),QRe=i(c),Ho=n(c,"DIV",{class:!0});var Qs=s(Ho);m(J5.$$.fragment,Qs),Ero=i(Qs),Y5=n(Qs,"P",{});var YPe=s(Y5);Cro=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),DR=n(YPe,"A",{href:!0});var nVr=s(DR);wro=r(nVr,"AutoFeatureExtractor.from_pretrained()"),nVr.forEach(t),Aro=r(YPe," class method."),YPe.forEach(t),yro=i(Qs),K5=n(Qs,"P",{});var KPe=s(K5);Lro=r(KPe,"This class cannot be instantiated directly using "),eoe=n(KPe,"CODE",{});var sVr=s(eoe);xro=r(sVr,"__init__()"),sVr.forEach(t),kro=r(KPe," (throws an error)."),KPe.forEach(t),Sro=i(Qs),$e=n(Qs,"DIV",{class:!0});var Nt=s($e);m(Z5.$$.fragment,Nt),Rro=i(Nt),ooe=n(Nt,"P",{});var lVr=s(ooe);Bro=r(lVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),lVr.forEach(t),Pro=i(Nt),Va=n(Nt,"P",{});var SE=s(Va);$ro=r(SE,"The feature extractor class to instantiate is selected based on the "),roe=n(SE,"CODE",{});var iVr=s(roe);Iro=r(iVr,"model_type"),iVr.forEach(t),qro=r(SE,` property of the config object
(either passed as an argument or loaded from `),toe=n(SE,"CODE",{});var dVr=s(toe);Nro=r(dVr,"pretrained_model_name_or_path"),dVr.forEach(t),jro=r(SE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),aoe=n(SE,"CODE",{});var cVr=s(aoe);Dro=r(cVr,"pretrained_model_name_or_path"),cVr.forEach(t),Gro=r(SE,":"),SE.forEach(t),Oro=i(Nt),J=n(Nt,"UL",{});var oe=s(J);bh=n(oe,"LI",{});var C4e=s(bh);noe=n(C4e,"STRONG",{});var fVr=s(noe);Vro=r(fVr,"beit"),fVr.forEach(t),Xro=r(C4e," \u2014 "),GR=n(C4e,"A",{href:!0});var mVr=s(GR);zro=r(mVr,"BeitFeatureExtractor"),mVr.forEach(t),Qro=r(C4e," (BEiT model)"),C4e.forEach(t),Wro=i(oe),vh=n(oe,"LI",{});var w4e=s(vh);soe=n(w4e,"STRONG",{});var gVr=s(soe);Hro=r(gVr,"clip"),gVr.forEach(t),Uro=r(w4e," \u2014 "),OR=n(w4e,"A",{href:!0});var hVr=s(OR);Jro=r(hVr,"CLIPFeatureExtractor"),hVr.forEach(t),Yro=r(w4e," (CLIP model)"),w4e.forEach(t),Kro=i(oe),Fh=n(oe,"LI",{});var A4e=s(Fh);loe=n(A4e,"STRONG",{});var pVr=s(loe);Zro=r(pVr,"convnext"),pVr.forEach(t),eto=r(A4e," \u2014 "),VR=n(A4e,"A",{href:!0});var _Vr=s(VR);oto=r(_Vr,"ConvNextFeatureExtractor"),_Vr.forEach(t),rto=r(A4e," (ConvNext model)"),A4e.forEach(t),tto=i(oe),Th=n(oe,"LI",{});var y4e=s(Th);ioe=n(y4e,"STRONG",{});var uVr=s(ioe);ato=r(uVr,"deit"),uVr.forEach(t),nto=r(y4e," \u2014 "),XR=n(y4e,"A",{href:!0});var bVr=s(XR);sto=r(bVr,"DeiTFeatureExtractor"),bVr.forEach(t),lto=r(y4e," (DeiT model)"),y4e.forEach(t),ito=i(oe),Mh=n(oe,"LI",{});var L4e=s(Mh);doe=n(L4e,"STRONG",{});var vVr=s(doe);dto=r(vVr,"detr"),vVr.forEach(t),cto=r(L4e," \u2014 "),zR=n(L4e,"A",{href:!0});var FVr=s(zR);fto=r(FVr,"DetrFeatureExtractor"),FVr.forEach(t),mto=r(L4e," (DETR model)"),L4e.forEach(t),gto=i(oe),Eh=n(oe,"LI",{});var x4e=s(Eh);coe=n(x4e,"STRONG",{});var TVr=s(coe);hto=r(TVr,"hubert"),TVr.forEach(t),pto=r(x4e," \u2014 "),QR=n(x4e,"A",{href:!0});var MVr=s(QR);_to=r(MVr,"Wav2Vec2FeatureExtractor"),MVr.forEach(t),uto=r(x4e," (Hubert model)"),x4e.forEach(t),bto=i(oe),Ch=n(oe,"LI",{});var k4e=s(Ch);foe=n(k4e,"STRONG",{});var EVr=s(foe);vto=r(EVr,"imagegpt"),EVr.forEach(t),Fto=r(k4e," \u2014 "),WR=n(k4e,"A",{href:!0});var CVr=s(WR);Tto=r(CVr,"ImageGPTFeatureExtractor"),CVr.forEach(t),Mto=r(k4e," (ImageGPT model)"),k4e.forEach(t),Eto=i(oe),wh=n(oe,"LI",{});var S4e=s(wh);moe=n(S4e,"STRONG",{});var wVr=s(moe);Cto=r(wVr,"layoutlmv2"),wVr.forEach(t),wto=r(S4e," \u2014 "),HR=n(S4e,"A",{href:!0});var AVr=s(HR);Ato=r(AVr,"LayoutLMv2FeatureExtractor"),AVr.forEach(t),yto=r(S4e," (LayoutLMv2 model)"),S4e.forEach(t),Lto=i(oe),Ah=n(oe,"LI",{});var R4e=s(Ah);goe=n(R4e,"STRONG",{});var yVr=s(goe);xto=r(yVr,"maskformer"),yVr.forEach(t),kto=r(R4e," \u2014 "),UR=n(R4e,"A",{href:!0});var LVr=s(UR);Sto=r(LVr,"MaskFormerFeatureExtractor"),LVr.forEach(t),Rto=r(R4e," (MaskFormer model)"),R4e.forEach(t),Bto=i(oe),yh=n(oe,"LI",{});var B4e=s(yh);hoe=n(B4e,"STRONG",{});var xVr=s(hoe);Pto=r(xVr,"perceiver"),xVr.forEach(t),$to=r(B4e," \u2014 "),JR=n(B4e,"A",{href:!0});var kVr=s(JR);Ito=r(kVr,"PerceiverFeatureExtractor"),kVr.forEach(t),qto=r(B4e," (Perceiver model)"),B4e.forEach(t),Nto=i(oe),Lh=n(oe,"LI",{});var P4e=s(Lh);poe=n(P4e,"STRONG",{});var SVr=s(poe);jto=r(SVr,"poolformer"),SVr.forEach(t),Dto=r(P4e," \u2014 "),YR=n(P4e,"A",{href:!0});var RVr=s(YR);Gto=r(RVr,"PoolFormerFeatureExtractor"),RVr.forEach(t),Oto=r(P4e," (PoolFormer model)"),P4e.forEach(t),Vto=i(oe),xh=n(oe,"LI",{});var $4e=s(xh);_oe=n($4e,"STRONG",{});var BVr=s(_oe);Xto=r(BVr,"regnet"),BVr.forEach(t),zto=r($4e," \u2014 "),KR=n($4e,"A",{href:!0});var PVr=s(KR);Qto=r(PVr,"ConvNextFeatureExtractor"),PVr.forEach(t),Wto=r($4e," (RegNet model)"),$4e.forEach(t),Hto=i(oe),kh=n(oe,"LI",{});var I4e=s(kh);uoe=n(I4e,"STRONG",{});var $Vr=s(uoe);Uto=r($Vr,"resnet"),$Vr.forEach(t),Jto=r(I4e," \u2014 "),ZR=n(I4e,"A",{href:!0});var IVr=s(ZR);Yto=r(IVr,"ConvNextFeatureExtractor"),IVr.forEach(t),Kto=r(I4e," (ResNet model)"),I4e.forEach(t),Zto=i(oe),Sh=n(oe,"LI",{});var q4e=s(Sh);boe=n(q4e,"STRONG",{});var qVr=s(boe);eao=r(qVr,"segformer"),qVr.forEach(t),oao=r(q4e," \u2014 "),eB=n(q4e,"A",{href:!0});var NVr=s(eB);rao=r(NVr,"SegformerFeatureExtractor"),NVr.forEach(t),tao=r(q4e," (SegFormer model)"),q4e.forEach(t),aao=i(oe),Rh=n(oe,"LI",{});var N4e=s(Rh);voe=n(N4e,"STRONG",{});var jVr=s(voe);nao=r(jVr,"speech_to_text"),jVr.forEach(t),sao=r(N4e," \u2014 "),oB=n(N4e,"A",{href:!0});var DVr=s(oB);lao=r(DVr,"Speech2TextFeatureExtractor"),DVr.forEach(t),iao=r(N4e," (Speech2Text model)"),N4e.forEach(t),dao=i(oe),Bh=n(oe,"LI",{});var j4e=s(Bh);Foe=n(j4e,"STRONG",{});var GVr=s(Foe);cao=r(GVr,"swin"),GVr.forEach(t),fao=r(j4e," \u2014 "),rB=n(j4e,"A",{href:!0});var OVr=s(rB);mao=r(OVr,"ViTFeatureExtractor"),OVr.forEach(t),gao=r(j4e," (Swin model)"),j4e.forEach(t),hao=i(oe),Ph=n(oe,"LI",{});var D4e=s(Ph);Toe=n(D4e,"STRONG",{});var VVr=s(Toe);pao=r(VVr,"van"),VVr.forEach(t),_ao=r(D4e," \u2014 "),tB=n(D4e,"A",{href:!0});var XVr=s(tB);uao=r(XVr,"ConvNextFeatureExtractor"),XVr.forEach(t),bao=r(D4e," (VAN model)"),D4e.forEach(t),vao=i(oe),$h=n(oe,"LI",{});var G4e=s($h);Moe=n(G4e,"STRONG",{});var zVr=s(Moe);Fao=r(zVr,"vit"),zVr.forEach(t),Tao=r(G4e," \u2014 "),aB=n(G4e,"A",{href:!0});var QVr=s(aB);Mao=r(QVr,"ViTFeatureExtractor"),QVr.forEach(t),Eao=r(G4e," (ViT model)"),G4e.forEach(t),Cao=i(oe),Ih=n(oe,"LI",{});var O4e=s(Ih);Eoe=n(O4e,"STRONG",{});var WVr=s(Eoe);wao=r(WVr,"vit_mae"),WVr.forEach(t),Aao=r(O4e," \u2014 "),nB=n(O4e,"A",{href:!0});var HVr=s(nB);yao=r(HVr,"ViTFeatureExtractor"),HVr.forEach(t),Lao=r(O4e," (ViTMAE model)"),O4e.forEach(t),xao=i(oe),qh=n(oe,"LI",{});var V4e=s(qh);Coe=n(V4e,"STRONG",{});var UVr=s(Coe);kao=r(UVr,"wav2vec2"),UVr.forEach(t),Sao=r(V4e," \u2014 "),sB=n(V4e,"A",{href:!0});var JVr=s(sB);Rao=r(JVr,"Wav2Vec2FeatureExtractor"),JVr.forEach(t),Bao=r(V4e," (Wav2Vec2 model)"),V4e.forEach(t),oe.forEach(t),Pao=i(Nt),m(Nh.$$.fragment,Nt),$ao=i(Nt),woe=n(Nt,"P",{});var YVr=s(woe);Iao=r(YVr,"Examples:"),YVr.forEach(t),qao=i(Nt),m(e3.$$.fragment,Nt),Nt.forEach(t),Nao=i(Qs),jh=n(Qs,"DIV",{class:!0});var ZPe=s(jh);m(o3.$$.fragment,ZPe),jao=i(ZPe),Aoe=n(ZPe,"P",{});var KVr=s(Aoe);Dao=r(KVr,"Register a new feature extractor for this class."),KVr.forEach(t),ZPe.forEach(t),Qs.forEach(t),WRe=i(c),Ji=n(c,"H2",{class:!0});var e$e=s(Ji);Dh=n(e$e,"A",{id:!0,class:!0,href:!0});var ZVr=s(Dh);yoe=n(ZVr,"SPAN",{});var eXr=s(yoe);m(r3.$$.fragment,eXr),eXr.forEach(t),ZVr.forEach(t),Gao=i(e$e),Loe=n(e$e,"SPAN",{});var oXr=s(Loe);Oao=r(oXr,"AutoProcessor"),oXr.forEach(t),e$e.forEach(t),HRe=i(c),Uo=n(c,"DIV",{class:!0});var Ws=s(Uo);m(t3.$$.fragment,Ws),Vao=i(Ws),a3=n(Ws,"P",{});var o$e=s(a3);Xao=r(o$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),lB=n(o$e,"A",{href:!0});var rXr=s(lB);zao=r(rXr,"AutoProcessor.from_pretrained()"),rXr.forEach(t),Qao=r(o$e," class method."),o$e.forEach(t),Wao=i(Ws),n3=n(Ws,"P",{});var r$e=s(n3);Hao=r(r$e,"This class cannot be instantiated directly using "),xoe=n(r$e,"CODE",{});var tXr=s(xoe);Uao=r(tXr,"__init__()"),tXr.forEach(t),Jao=r(r$e," (throws an error)."),r$e.forEach(t),Yao=i(Ws),Ie=n(Ws,"DIV",{class:!0});var jt=s(Ie);m(s3.$$.fragment,jt),Kao=i(jt),koe=n(jt,"P",{});var aXr=s(koe);Zao=r(aXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),aXr.forEach(t),eno=i(jt),Yi=n(jt,"P",{});var EU=s(Yi);ono=r(EU,"The processor class to instantiate is selected based on the "),Soe=n(EU,"CODE",{});var nXr=s(Soe);rno=r(nXr,"model_type"),nXr.forEach(t),tno=r(EU,` property of the config object (either
passed as an argument or loaded from `),Roe=n(EU,"CODE",{});var sXr=s(Roe);ano=r(sXr,"pretrained_model_name_or_path"),sXr.forEach(t),nno=r(EU," if possible):"),EU.forEach(t),sno=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Gh=n(jo,"LI",{});var X4e=s(Gh);Boe=n(X4e,"STRONG",{});var lXr=s(Boe);lno=r(lXr,"clip"),lXr.forEach(t),ino=r(X4e," \u2014 "),iB=n(X4e,"A",{href:!0});var iXr=s(iB);dno=r(iXr,"CLIPProcessor"),iXr.forEach(t),cno=r(X4e," (CLIP model)"),X4e.forEach(t),fno=i(jo),Oh=n(jo,"LI",{});var z4e=s(Oh);Poe=n(z4e,"STRONG",{});var dXr=s(Poe);mno=r(dXr,"layoutlmv2"),dXr.forEach(t),gno=r(z4e," \u2014 "),dB=n(z4e,"A",{href:!0});var cXr=s(dB);hno=r(cXr,"LayoutLMv2Processor"),cXr.forEach(t),pno=r(z4e," (LayoutLMv2 model)"),z4e.forEach(t),_no=i(jo),Vh=n(jo,"LI",{});var Q4e=s(Vh);$oe=n(Q4e,"STRONG",{});var fXr=s($oe);uno=r(fXr,"layoutxlm"),fXr.forEach(t),bno=r(Q4e," \u2014 "),cB=n(Q4e,"A",{href:!0});var mXr=s(cB);vno=r(mXr,"LayoutXLMProcessor"),mXr.forEach(t),Fno=r(Q4e," (LayoutXLM model)"),Q4e.forEach(t),Tno=i(jo),Xh=n(jo,"LI",{});var W4e=s(Xh);Ioe=n(W4e,"STRONG",{});var gXr=s(Ioe);Mno=r(gXr,"speech_to_text"),gXr.forEach(t),Eno=r(W4e," \u2014 "),fB=n(W4e,"A",{href:!0});var hXr=s(fB);Cno=r(hXr,"Speech2TextProcessor"),hXr.forEach(t),wno=r(W4e," (Speech2Text model)"),W4e.forEach(t),Ano=i(jo),zh=n(jo,"LI",{});var H4e=s(zh);qoe=n(H4e,"STRONG",{});var pXr=s(qoe);yno=r(pXr,"speech_to_text_2"),pXr.forEach(t),Lno=r(H4e," \u2014 "),mB=n(H4e,"A",{href:!0});var _Xr=s(mB);xno=r(_Xr,"Speech2Text2Processor"),_Xr.forEach(t),kno=r(H4e," (Speech2Text2 model)"),H4e.forEach(t),Sno=i(jo),Qh=n(jo,"LI",{});var U4e=s(Qh);Noe=n(U4e,"STRONG",{});var uXr=s(Noe);Rno=r(uXr,"trocr"),uXr.forEach(t),Bno=r(U4e," \u2014 "),gB=n(U4e,"A",{href:!0});var bXr=s(gB);Pno=r(bXr,"TrOCRProcessor"),bXr.forEach(t),$no=r(U4e," (TrOCR model)"),U4e.forEach(t),Ino=i(jo),Wh=n(jo,"LI",{});var J4e=s(Wh);joe=n(J4e,"STRONG",{});var vXr=s(joe);qno=r(vXr,"vision-text-dual-encoder"),vXr.forEach(t),Nno=r(J4e," \u2014 "),hB=n(J4e,"A",{href:!0});var FXr=s(hB);jno=r(FXr,"VisionTextDualEncoderProcessor"),FXr.forEach(t),Dno=r(J4e," (VisionTextDualEncoder model)"),J4e.forEach(t),Gno=i(jo),Hh=n(jo,"LI",{});var Y4e=s(Hh);Doe=n(Y4e,"STRONG",{});var TXr=s(Doe);Ono=r(TXr,"wav2vec2"),TXr.forEach(t),Vno=r(Y4e," \u2014 "),pB=n(Y4e,"A",{href:!0});var MXr=s(pB);Xno=r(MXr,"Wav2Vec2Processor"),MXr.forEach(t),zno=r(Y4e," (Wav2Vec2 model)"),Y4e.forEach(t),jo.forEach(t),Qno=i(jt),m(Uh.$$.fragment,jt),Wno=i(jt),Goe=n(jt,"P",{});var EXr=s(Goe);Hno=r(EXr,"Examples:"),EXr.forEach(t),Uno=i(jt),m(l3.$$.fragment,jt),jt.forEach(t),Jno=i(Ws),Jh=n(Ws,"DIV",{class:!0});var t$e=s(Jh);m(i3.$$.fragment,t$e),Yno=i(t$e),Ooe=n(t$e,"P",{});var CXr=s(Ooe);Kno=r(CXr,"Register a new processor for this class."),CXr.forEach(t),t$e.forEach(t),Ws.forEach(t),URe=i(c),Ki=n(c,"H2",{class:!0});var a$e=s(Ki);Yh=n(a$e,"A",{id:!0,class:!0,href:!0});var wXr=s(Yh);Voe=n(wXr,"SPAN",{});var AXr=s(Voe);m(d3.$$.fragment,AXr),AXr.forEach(t),wXr.forEach(t),Zno=i(a$e),Xoe=n(a$e,"SPAN",{});var yXr=s(Xoe);eso=r(yXr,"AutoModel"),yXr.forEach(t),a$e.forEach(t),JRe=i(c),Jo=n(c,"DIV",{class:!0});var Hs=s(Jo);m(c3.$$.fragment,Hs),oso=i(Hs),Zi=n(Hs,"P",{});var CU=s(Zi);rso=r(CU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_B=n(CU,"A",{href:!0});var LXr=s(_B);tso=r(LXr,"from_pretrained()"),LXr.forEach(t),aso=r(CU," class method or the "),uB=n(CU,"A",{href:!0});var xXr=s(uB);nso=r(xXr,"from_config()"),xXr.forEach(t),sso=r(CU,` class
method.`),CU.forEach(t),lso=i(Hs),f3=n(Hs,"P",{});var n$e=s(f3);iso=r(n$e,"This class cannot be instantiated directly using "),zoe=n(n$e,"CODE",{});var kXr=s(zoe);dso=r(kXr,"__init__()"),kXr.forEach(t),cso=r(n$e," (throws an error)."),n$e.forEach(t),fso=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(m3.$$.fragment,Us),mso=i(Us),Qoe=n(Us,"P",{});var SXr=s(Qoe);gso=r(SXr,"Instantiates one of the base model classes of the library from a configuration."),SXr.forEach(t),hso=i(Us),ed=n(Us,"P",{});var wU=s(ed);pso=r(wU,`Note:
Loading a model from its configuration file does `),Woe=n(wU,"STRONG",{});var RXr=s(Woe);_so=r(RXr,"not"),RXr.forEach(t),uso=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bB=n(wU,"A",{href:!0});var BXr=s(bB);bso=r(BXr,"from_pretrained()"),BXr.forEach(t),vso=r(wU," to load the model weights."),wU.forEach(t),Fso=i(Us),Hoe=n(Us,"P",{});var PXr=s(Hoe);Tso=r(PXr,"Examples:"),PXr.forEach(t),Mso=i(Us),m(g3.$$.fragment,Us),Us.forEach(t),Eso=i(Hs),qe=n(Hs,"DIV",{class:!0});var Dt=s(qe);m(h3.$$.fragment,Dt),Cso=i(Dt),Uoe=n(Dt,"P",{});var $Xr=s(Uoe);wso=r($Xr,"Instantiate one of the base model classes of the library from a pretrained model."),$Xr.forEach(t),Aso=i(Dt),Xa=n(Dt,"P",{});var RE=s(Xa);yso=r(RE,"The model class to instantiate is selected based on the "),Joe=n(RE,"CODE",{});var IXr=s(Joe);Lso=r(IXr,"model_type"),IXr.forEach(t),xso=r(RE,` property of the config object (either
passed as an argument or loaded from `),Yoe=n(RE,"CODE",{});var qXr=s(Yoe);kso=r(qXr,"pretrained_model_name_or_path"),qXr.forEach(t),Sso=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Koe=n(RE,"CODE",{});var NXr=s(Koe);Rso=r(NXr,"pretrained_model_name_or_path"),NXr.forEach(t),Bso=r(RE,":"),RE.forEach(t),Pso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Kh=n(M,"LI",{});var K4e=s(Kh);Zoe=n(K4e,"STRONG",{});var jXr=s(Zoe);$so=r(jXr,"albert"),jXr.forEach(t),Iso=r(K4e," \u2014 "),vB=n(K4e,"A",{href:!0});var DXr=s(vB);qso=r(DXr,"AlbertModel"),DXr.forEach(t),Nso=r(K4e," (ALBERT model)"),K4e.forEach(t),jso=i(M),Zh=n(M,"LI",{});var Z4e=s(Zh);ere=n(Z4e,"STRONG",{});var GXr=s(ere);Dso=r(GXr,"bart"),GXr.forEach(t),Gso=r(Z4e," \u2014 "),FB=n(Z4e,"A",{href:!0});var OXr=s(FB);Oso=r(OXr,"BartModel"),OXr.forEach(t),Vso=r(Z4e," (BART model)"),Z4e.forEach(t),Xso=i(M),ep=n(M,"LI",{});var eEe=s(ep);ore=n(eEe,"STRONG",{});var VXr=s(ore);zso=r(VXr,"beit"),VXr.forEach(t),Qso=r(eEe," \u2014 "),TB=n(eEe,"A",{href:!0});var XXr=s(TB);Wso=r(XXr,"BeitModel"),XXr.forEach(t),Hso=r(eEe," (BEiT model)"),eEe.forEach(t),Uso=i(M),op=n(M,"LI",{});var oEe=s(op);rre=n(oEe,"STRONG",{});var zXr=s(rre);Jso=r(zXr,"bert"),zXr.forEach(t),Yso=r(oEe," \u2014 "),MB=n(oEe,"A",{href:!0});var QXr=s(MB);Kso=r(QXr,"BertModel"),QXr.forEach(t),Zso=r(oEe," (BERT model)"),oEe.forEach(t),elo=i(M),rp=n(M,"LI",{});var rEe=s(rp);tre=n(rEe,"STRONG",{});var WXr=s(tre);olo=r(WXr,"bert-generation"),WXr.forEach(t),rlo=r(rEe," \u2014 "),EB=n(rEe,"A",{href:!0});var HXr=s(EB);tlo=r(HXr,"BertGenerationEncoder"),HXr.forEach(t),alo=r(rEe," (Bert Generation model)"),rEe.forEach(t),nlo=i(M),tp=n(M,"LI",{});var tEe=s(tp);are=n(tEe,"STRONG",{});var UXr=s(are);slo=r(UXr,"big_bird"),UXr.forEach(t),llo=r(tEe," \u2014 "),CB=n(tEe,"A",{href:!0});var JXr=s(CB);ilo=r(JXr,"BigBirdModel"),JXr.forEach(t),dlo=r(tEe," (BigBird model)"),tEe.forEach(t),clo=i(M),ap=n(M,"LI",{});var aEe=s(ap);nre=n(aEe,"STRONG",{});var YXr=s(nre);flo=r(YXr,"bigbird_pegasus"),YXr.forEach(t),mlo=r(aEe," \u2014 "),wB=n(aEe,"A",{href:!0});var KXr=s(wB);glo=r(KXr,"BigBirdPegasusModel"),KXr.forEach(t),hlo=r(aEe," (BigBirdPegasus model)"),aEe.forEach(t),plo=i(M),np=n(M,"LI",{});var nEe=s(np);sre=n(nEe,"STRONG",{});var ZXr=s(sre);_lo=r(ZXr,"blenderbot"),ZXr.forEach(t),ulo=r(nEe," \u2014 "),AB=n(nEe,"A",{href:!0});var ezr=s(AB);blo=r(ezr,"BlenderbotModel"),ezr.forEach(t),vlo=r(nEe," (Blenderbot model)"),nEe.forEach(t),Flo=i(M),sp=n(M,"LI",{});var sEe=s(sp);lre=n(sEe,"STRONG",{});var ozr=s(lre);Tlo=r(ozr,"blenderbot-small"),ozr.forEach(t),Mlo=r(sEe," \u2014 "),yB=n(sEe,"A",{href:!0});var rzr=s(yB);Elo=r(rzr,"BlenderbotSmallModel"),rzr.forEach(t),Clo=r(sEe," (BlenderbotSmall model)"),sEe.forEach(t),wlo=i(M),lp=n(M,"LI",{});var lEe=s(lp);ire=n(lEe,"STRONG",{});var tzr=s(ire);Alo=r(tzr,"camembert"),tzr.forEach(t),ylo=r(lEe," \u2014 "),LB=n(lEe,"A",{href:!0});var azr=s(LB);Llo=r(azr,"CamembertModel"),azr.forEach(t),xlo=r(lEe," (CamemBERT model)"),lEe.forEach(t),klo=i(M),ip=n(M,"LI",{});var iEe=s(ip);dre=n(iEe,"STRONG",{});var nzr=s(dre);Slo=r(nzr,"canine"),nzr.forEach(t),Rlo=r(iEe," \u2014 "),xB=n(iEe,"A",{href:!0});var szr=s(xB);Blo=r(szr,"CanineModel"),szr.forEach(t),Plo=r(iEe," (Canine model)"),iEe.forEach(t),$lo=i(M),dp=n(M,"LI",{});var dEe=s(dp);cre=n(dEe,"STRONG",{});var lzr=s(cre);Ilo=r(lzr,"clip"),lzr.forEach(t),qlo=r(dEe," \u2014 "),kB=n(dEe,"A",{href:!0});var izr=s(kB);Nlo=r(izr,"CLIPModel"),izr.forEach(t),jlo=r(dEe," (CLIP model)"),dEe.forEach(t),Dlo=i(M),cp=n(M,"LI",{});var cEe=s(cp);fre=n(cEe,"STRONG",{});var dzr=s(fre);Glo=r(dzr,"convbert"),dzr.forEach(t),Olo=r(cEe," \u2014 "),SB=n(cEe,"A",{href:!0});var czr=s(SB);Vlo=r(czr,"ConvBertModel"),czr.forEach(t),Xlo=r(cEe," (ConvBERT model)"),cEe.forEach(t),zlo=i(M),fp=n(M,"LI",{});var fEe=s(fp);mre=n(fEe,"STRONG",{});var fzr=s(mre);Qlo=r(fzr,"convnext"),fzr.forEach(t),Wlo=r(fEe," \u2014 "),RB=n(fEe,"A",{href:!0});var mzr=s(RB);Hlo=r(mzr,"ConvNextModel"),mzr.forEach(t),Ulo=r(fEe," (ConvNext model)"),fEe.forEach(t),Jlo=i(M),mp=n(M,"LI",{});var mEe=s(mp);gre=n(mEe,"STRONG",{});var gzr=s(gre);Ylo=r(gzr,"ctrl"),gzr.forEach(t),Klo=r(mEe," \u2014 "),BB=n(mEe,"A",{href:!0});var hzr=s(BB);Zlo=r(hzr,"CTRLModel"),hzr.forEach(t),eio=r(mEe," (CTRL model)"),mEe.forEach(t),oio=i(M),gp=n(M,"LI",{});var gEe=s(gp);hre=n(gEe,"STRONG",{});var pzr=s(hre);rio=r(pzr,"data2vec-audio"),pzr.forEach(t),tio=r(gEe," \u2014 "),PB=n(gEe,"A",{href:!0});var _zr=s(PB);aio=r(_zr,"Data2VecAudioModel"),_zr.forEach(t),nio=r(gEe," (Data2VecAudio model)"),gEe.forEach(t),sio=i(M),hp=n(M,"LI",{});var hEe=s(hp);pre=n(hEe,"STRONG",{});var uzr=s(pre);lio=r(uzr,"data2vec-text"),uzr.forEach(t),iio=r(hEe," \u2014 "),$B=n(hEe,"A",{href:!0});var bzr=s($B);dio=r(bzr,"Data2VecTextModel"),bzr.forEach(t),cio=r(hEe," (Data2VecText model)"),hEe.forEach(t),fio=i(M),pp=n(M,"LI",{});var pEe=s(pp);_re=n(pEe,"STRONG",{});var vzr=s(_re);mio=r(vzr,"data2vec-vision"),vzr.forEach(t),gio=r(pEe," \u2014 "),IB=n(pEe,"A",{href:!0});var Fzr=s(IB);hio=r(Fzr,"Data2VecVisionModel"),Fzr.forEach(t),pio=r(pEe," (Data2VecVision model)"),pEe.forEach(t),_io=i(M),_p=n(M,"LI",{});var _Ee=s(_p);ure=n(_Ee,"STRONG",{});var Tzr=s(ure);uio=r(Tzr,"deberta"),Tzr.forEach(t),bio=r(_Ee," \u2014 "),qB=n(_Ee,"A",{href:!0});var Mzr=s(qB);vio=r(Mzr,"DebertaModel"),Mzr.forEach(t),Fio=r(_Ee," (DeBERTa model)"),_Ee.forEach(t),Tio=i(M),up=n(M,"LI",{});var uEe=s(up);bre=n(uEe,"STRONG",{});var Ezr=s(bre);Mio=r(Ezr,"deberta-v2"),Ezr.forEach(t),Eio=r(uEe," \u2014 "),NB=n(uEe,"A",{href:!0});var Czr=s(NB);Cio=r(Czr,"DebertaV2Model"),Czr.forEach(t),wio=r(uEe," (DeBERTa-v2 model)"),uEe.forEach(t),Aio=i(M),bp=n(M,"LI",{});var bEe=s(bp);vre=n(bEe,"STRONG",{});var wzr=s(vre);yio=r(wzr,"decision_transformer"),wzr.forEach(t),Lio=r(bEe," \u2014 "),jB=n(bEe,"A",{href:!0});var Azr=s(jB);xio=r(Azr,"DecisionTransformerModel"),Azr.forEach(t),kio=r(bEe," (Decision Transformer model)"),bEe.forEach(t),Sio=i(M),vp=n(M,"LI",{});var vEe=s(vp);Fre=n(vEe,"STRONG",{});var yzr=s(Fre);Rio=r(yzr,"deit"),yzr.forEach(t),Bio=r(vEe," \u2014 "),DB=n(vEe,"A",{href:!0});var Lzr=s(DB);Pio=r(Lzr,"DeiTModel"),Lzr.forEach(t),$io=r(vEe," (DeiT model)"),vEe.forEach(t),Iio=i(M),Fp=n(M,"LI",{});var FEe=s(Fp);Tre=n(FEe,"STRONG",{});var xzr=s(Tre);qio=r(xzr,"detr"),xzr.forEach(t),Nio=r(FEe," \u2014 "),GB=n(FEe,"A",{href:!0});var kzr=s(GB);jio=r(kzr,"DetrModel"),kzr.forEach(t),Dio=r(FEe," (DETR model)"),FEe.forEach(t),Gio=i(M),Tp=n(M,"LI",{});var TEe=s(Tp);Mre=n(TEe,"STRONG",{});var Szr=s(Mre);Oio=r(Szr,"distilbert"),Szr.forEach(t),Vio=r(TEe," \u2014 "),OB=n(TEe,"A",{href:!0});var Rzr=s(OB);Xio=r(Rzr,"DistilBertModel"),Rzr.forEach(t),zio=r(TEe," (DistilBERT model)"),TEe.forEach(t),Qio=i(M),Mp=n(M,"LI",{});var MEe=s(Mp);Ere=n(MEe,"STRONG",{});var Bzr=s(Ere);Wio=r(Bzr,"dpr"),Bzr.forEach(t),Hio=r(MEe," \u2014 "),VB=n(MEe,"A",{href:!0});var Pzr=s(VB);Uio=r(Pzr,"DPRQuestionEncoder"),Pzr.forEach(t),Jio=r(MEe," (DPR model)"),MEe.forEach(t),Yio=i(M),Ep=n(M,"LI",{});var EEe=s(Ep);Cre=n(EEe,"STRONG",{});var $zr=s(Cre);Kio=r($zr,"dpt"),$zr.forEach(t),Zio=r(EEe," \u2014 "),XB=n(EEe,"A",{href:!0});var Izr=s(XB);edo=r(Izr,"DPTModel"),Izr.forEach(t),odo=r(EEe," (DPT model)"),EEe.forEach(t),rdo=i(M),Cp=n(M,"LI",{});var CEe=s(Cp);wre=n(CEe,"STRONG",{});var qzr=s(wre);tdo=r(qzr,"electra"),qzr.forEach(t),ado=r(CEe," \u2014 "),zB=n(CEe,"A",{href:!0});var Nzr=s(zB);ndo=r(Nzr,"ElectraModel"),Nzr.forEach(t),sdo=r(CEe," (ELECTRA model)"),CEe.forEach(t),ldo=i(M),wp=n(M,"LI",{});var wEe=s(wp);Are=n(wEe,"STRONG",{});var jzr=s(Are);ido=r(jzr,"flaubert"),jzr.forEach(t),ddo=r(wEe," \u2014 "),QB=n(wEe,"A",{href:!0});var Dzr=s(QB);cdo=r(Dzr,"FlaubertModel"),Dzr.forEach(t),fdo=r(wEe," (FlauBERT model)"),wEe.forEach(t),mdo=i(M),Ap=n(M,"LI",{});var AEe=s(Ap);yre=n(AEe,"STRONG",{});var Gzr=s(yre);gdo=r(Gzr,"fnet"),Gzr.forEach(t),hdo=r(AEe," \u2014 "),WB=n(AEe,"A",{href:!0});var Ozr=s(WB);pdo=r(Ozr,"FNetModel"),Ozr.forEach(t),_do=r(AEe," (FNet model)"),AEe.forEach(t),udo=i(M),yp=n(M,"LI",{});var yEe=s(yp);Lre=n(yEe,"STRONG",{});var Vzr=s(Lre);bdo=r(Vzr,"fsmt"),Vzr.forEach(t),vdo=r(yEe," \u2014 "),HB=n(yEe,"A",{href:!0});var Xzr=s(HB);Fdo=r(Xzr,"FSMTModel"),Xzr.forEach(t),Tdo=r(yEe," (FairSeq Machine-Translation model)"),yEe.forEach(t),Mdo=i(M),Gs=n(M,"LI",{});var v7=s(Gs);xre=n(v7,"STRONG",{});var zzr=s(xre);Edo=r(zzr,"funnel"),zzr.forEach(t),Cdo=r(v7," \u2014 "),UB=n(v7,"A",{href:!0});var Qzr=s(UB);wdo=r(Qzr,"FunnelModel"),Qzr.forEach(t),Ado=r(v7," or "),JB=n(v7,"A",{href:!0});var Wzr=s(JB);ydo=r(Wzr,"FunnelBaseModel"),Wzr.forEach(t),Ldo=r(v7," (Funnel Transformer model)"),v7.forEach(t),xdo=i(M),Lp=n(M,"LI",{});var LEe=s(Lp);kre=n(LEe,"STRONG",{});var Hzr=s(kre);kdo=r(Hzr,"glpn"),Hzr.forEach(t),Sdo=r(LEe," \u2014 "),YB=n(LEe,"A",{href:!0});var Uzr=s(YB);Rdo=r(Uzr,"GLPNModel"),Uzr.forEach(t),Bdo=r(LEe," (GLPN model)"),LEe.forEach(t),Pdo=i(M),xp=n(M,"LI",{});var xEe=s(xp);Sre=n(xEe,"STRONG",{});var Jzr=s(Sre);$do=r(Jzr,"gpt2"),Jzr.forEach(t),Ido=r(xEe," \u2014 "),KB=n(xEe,"A",{href:!0});var Yzr=s(KB);qdo=r(Yzr,"GPT2Model"),Yzr.forEach(t),Ndo=r(xEe," (OpenAI GPT-2 model)"),xEe.forEach(t),jdo=i(M),kp=n(M,"LI",{});var kEe=s(kp);Rre=n(kEe,"STRONG",{});var Kzr=s(Rre);Ddo=r(Kzr,"gpt_neo"),Kzr.forEach(t),Gdo=r(kEe," \u2014 "),ZB=n(kEe,"A",{href:!0});var Zzr=s(ZB);Odo=r(Zzr,"GPTNeoModel"),Zzr.forEach(t),Vdo=r(kEe," (GPT Neo model)"),kEe.forEach(t),Xdo=i(M),Sp=n(M,"LI",{});var SEe=s(Sp);Bre=n(SEe,"STRONG",{});var eQr=s(Bre);zdo=r(eQr,"gptj"),eQr.forEach(t),Qdo=r(SEe," \u2014 "),eP=n(SEe,"A",{href:!0});var oQr=s(eP);Wdo=r(oQr,"GPTJModel"),oQr.forEach(t),Hdo=r(SEe," (GPT-J model)"),SEe.forEach(t),Udo=i(M),Rp=n(M,"LI",{});var REe=s(Rp);Pre=n(REe,"STRONG",{});var rQr=s(Pre);Jdo=r(rQr,"hubert"),rQr.forEach(t),Ydo=r(REe," \u2014 "),oP=n(REe,"A",{href:!0});var tQr=s(oP);Kdo=r(tQr,"HubertModel"),tQr.forEach(t),Zdo=r(REe," (Hubert model)"),REe.forEach(t),eco=i(M),Bp=n(M,"LI",{});var BEe=s(Bp);$re=n(BEe,"STRONG",{});var aQr=s($re);oco=r(aQr,"ibert"),aQr.forEach(t),rco=r(BEe," \u2014 "),rP=n(BEe,"A",{href:!0});var nQr=s(rP);tco=r(nQr,"IBertModel"),nQr.forEach(t),aco=r(BEe," (I-BERT model)"),BEe.forEach(t),nco=i(M),Pp=n(M,"LI",{});var PEe=s(Pp);Ire=n(PEe,"STRONG",{});var sQr=s(Ire);sco=r(sQr,"imagegpt"),sQr.forEach(t),lco=r(PEe," \u2014 "),tP=n(PEe,"A",{href:!0});var lQr=s(tP);ico=r(lQr,"ImageGPTModel"),lQr.forEach(t),dco=r(PEe," (ImageGPT model)"),PEe.forEach(t),cco=i(M),$p=n(M,"LI",{});var $Ee=s($p);qre=n($Ee,"STRONG",{});var iQr=s(qre);fco=r(iQr,"layoutlm"),iQr.forEach(t),mco=r($Ee," \u2014 "),aP=n($Ee,"A",{href:!0});var dQr=s(aP);gco=r(dQr,"LayoutLMModel"),dQr.forEach(t),hco=r($Ee," (LayoutLM model)"),$Ee.forEach(t),pco=i(M),Ip=n(M,"LI",{});var IEe=s(Ip);Nre=n(IEe,"STRONG",{});var cQr=s(Nre);_co=r(cQr,"layoutlmv2"),cQr.forEach(t),uco=r(IEe," \u2014 "),nP=n(IEe,"A",{href:!0});var fQr=s(nP);bco=r(fQr,"LayoutLMv2Model"),fQr.forEach(t),vco=r(IEe," (LayoutLMv2 model)"),IEe.forEach(t),Fco=i(M),qp=n(M,"LI",{});var qEe=s(qp);jre=n(qEe,"STRONG",{});var mQr=s(jre);Tco=r(mQr,"led"),mQr.forEach(t),Mco=r(qEe," \u2014 "),sP=n(qEe,"A",{href:!0});var gQr=s(sP);Eco=r(gQr,"LEDModel"),gQr.forEach(t),Cco=r(qEe," (LED model)"),qEe.forEach(t),wco=i(M),Np=n(M,"LI",{});var NEe=s(Np);Dre=n(NEe,"STRONG",{});var hQr=s(Dre);Aco=r(hQr,"longformer"),hQr.forEach(t),yco=r(NEe," \u2014 "),lP=n(NEe,"A",{href:!0});var pQr=s(lP);Lco=r(pQr,"LongformerModel"),pQr.forEach(t),xco=r(NEe," (Longformer model)"),NEe.forEach(t),kco=i(M),jp=n(M,"LI",{});var jEe=s(jp);Gre=n(jEe,"STRONG",{});var _Qr=s(Gre);Sco=r(_Qr,"luke"),_Qr.forEach(t),Rco=r(jEe," \u2014 "),iP=n(jEe,"A",{href:!0});var uQr=s(iP);Bco=r(uQr,"LukeModel"),uQr.forEach(t),Pco=r(jEe," (LUKE model)"),jEe.forEach(t),$co=i(M),Dp=n(M,"LI",{});var DEe=s(Dp);Ore=n(DEe,"STRONG",{});var bQr=s(Ore);Ico=r(bQr,"lxmert"),bQr.forEach(t),qco=r(DEe," \u2014 "),dP=n(DEe,"A",{href:!0});var vQr=s(dP);Nco=r(vQr,"LxmertModel"),vQr.forEach(t),jco=r(DEe," (LXMERT model)"),DEe.forEach(t),Dco=i(M),Gp=n(M,"LI",{});var GEe=s(Gp);Vre=n(GEe,"STRONG",{});var FQr=s(Vre);Gco=r(FQr,"m2m_100"),FQr.forEach(t),Oco=r(GEe," \u2014 "),cP=n(GEe,"A",{href:!0});var TQr=s(cP);Vco=r(TQr,"M2M100Model"),TQr.forEach(t),Xco=r(GEe," (M2M100 model)"),GEe.forEach(t),zco=i(M),Op=n(M,"LI",{});var OEe=s(Op);Xre=n(OEe,"STRONG",{});var MQr=s(Xre);Qco=r(MQr,"marian"),MQr.forEach(t),Wco=r(OEe," \u2014 "),fP=n(OEe,"A",{href:!0});var EQr=s(fP);Hco=r(EQr,"MarianModel"),EQr.forEach(t),Uco=r(OEe," (Marian model)"),OEe.forEach(t),Jco=i(M),Vp=n(M,"LI",{});var VEe=s(Vp);zre=n(VEe,"STRONG",{});var CQr=s(zre);Yco=r(CQr,"maskformer"),CQr.forEach(t),Kco=r(VEe," \u2014 "),mP=n(VEe,"A",{href:!0});var wQr=s(mP);Zco=r(wQr,"MaskFormerModel"),wQr.forEach(t),efo=r(VEe," (MaskFormer model)"),VEe.forEach(t),ofo=i(M),Xp=n(M,"LI",{});var XEe=s(Xp);Qre=n(XEe,"STRONG",{});var AQr=s(Qre);rfo=r(AQr,"mbart"),AQr.forEach(t),tfo=r(XEe," \u2014 "),gP=n(XEe,"A",{href:!0});var yQr=s(gP);afo=r(yQr,"MBartModel"),yQr.forEach(t),nfo=r(XEe," (mBART model)"),XEe.forEach(t),sfo=i(M),zp=n(M,"LI",{});var zEe=s(zp);Wre=n(zEe,"STRONG",{});var LQr=s(Wre);lfo=r(LQr,"megatron-bert"),LQr.forEach(t),ifo=r(zEe," \u2014 "),hP=n(zEe,"A",{href:!0});var xQr=s(hP);dfo=r(xQr,"MegatronBertModel"),xQr.forEach(t),cfo=r(zEe," (MegatronBert model)"),zEe.forEach(t),ffo=i(M),Qp=n(M,"LI",{});var QEe=s(Qp);Hre=n(QEe,"STRONG",{});var kQr=s(Hre);mfo=r(kQr,"mobilebert"),kQr.forEach(t),gfo=r(QEe," \u2014 "),pP=n(QEe,"A",{href:!0});var SQr=s(pP);hfo=r(SQr,"MobileBertModel"),SQr.forEach(t),pfo=r(QEe," (MobileBERT model)"),QEe.forEach(t),_fo=i(M),Wp=n(M,"LI",{});var WEe=s(Wp);Ure=n(WEe,"STRONG",{});var RQr=s(Ure);ufo=r(RQr,"mpnet"),RQr.forEach(t),bfo=r(WEe," \u2014 "),_P=n(WEe,"A",{href:!0});var BQr=s(_P);vfo=r(BQr,"MPNetModel"),BQr.forEach(t),Ffo=r(WEe," (MPNet model)"),WEe.forEach(t),Tfo=i(M),Hp=n(M,"LI",{});var HEe=s(Hp);Jre=n(HEe,"STRONG",{});var PQr=s(Jre);Mfo=r(PQr,"mt5"),PQr.forEach(t),Efo=r(HEe," \u2014 "),uP=n(HEe,"A",{href:!0});var $Qr=s(uP);Cfo=r($Qr,"MT5Model"),$Qr.forEach(t),wfo=r(HEe," (mT5 model)"),HEe.forEach(t),Afo=i(M),Up=n(M,"LI",{});var UEe=s(Up);Yre=n(UEe,"STRONG",{});var IQr=s(Yre);yfo=r(IQr,"nystromformer"),IQr.forEach(t),Lfo=r(UEe," \u2014 "),bP=n(UEe,"A",{href:!0});var qQr=s(bP);xfo=r(qQr,"NystromformerModel"),qQr.forEach(t),kfo=r(UEe," (Nystromformer model)"),UEe.forEach(t),Sfo=i(M),Jp=n(M,"LI",{});var JEe=s(Jp);Kre=n(JEe,"STRONG",{});var NQr=s(Kre);Rfo=r(NQr,"openai-gpt"),NQr.forEach(t),Bfo=r(JEe," \u2014 "),vP=n(JEe,"A",{href:!0});var jQr=s(vP);Pfo=r(jQr,"OpenAIGPTModel"),jQr.forEach(t),$fo=r(JEe," (OpenAI GPT model)"),JEe.forEach(t),Ifo=i(M),Yp=n(M,"LI",{});var YEe=s(Yp);Zre=n(YEe,"STRONG",{});var DQr=s(Zre);qfo=r(DQr,"pegasus"),DQr.forEach(t),Nfo=r(YEe," \u2014 "),FP=n(YEe,"A",{href:!0});var GQr=s(FP);jfo=r(GQr,"PegasusModel"),GQr.forEach(t),Dfo=r(YEe," (Pegasus model)"),YEe.forEach(t),Gfo=i(M),Kp=n(M,"LI",{});var KEe=s(Kp);ete=n(KEe,"STRONG",{});var OQr=s(ete);Ofo=r(OQr,"perceiver"),OQr.forEach(t),Vfo=r(KEe," \u2014 "),TP=n(KEe,"A",{href:!0});var VQr=s(TP);Xfo=r(VQr,"PerceiverModel"),VQr.forEach(t),zfo=r(KEe," (Perceiver model)"),KEe.forEach(t),Qfo=i(M),Zp=n(M,"LI",{});var ZEe=s(Zp);ote=n(ZEe,"STRONG",{});var XQr=s(ote);Wfo=r(XQr,"plbart"),XQr.forEach(t),Hfo=r(ZEe," \u2014 "),MP=n(ZEe,"A",{href:!0});var zQr=s(MP);Ufo=r(zQr,"PLBartModel"),zQr.forEach(t),Jfo=r(ZEe," (PLBart model)"),ZEe.forEach(t),Yfo=i(M),e_=n(M,"LI",{});var e5e=s(e_);rte=n(e5e,"STRONG",{});var QQr=s(rte);Kfo=r(QQr,"poolformer"),QQr.forEach(t),Zfo=r(e5e," \u2014 "),EP=n(e5e,"A",{href:!0});var WQr=s(EP);emo=r(WQr,"PoolFormerModel"),WQr.forEach(t),omo=r(e5e," (PoolFormer model)"),e5e.forEach(t),rmo=i(M),o_=n(M,"LI",{});var o5e=s(o_);tte=n(o5e,"STRONG",{});var HQr=s(tte);tmo=r(HQr,"prophetnet"),HQr.forEach(t),amo=r(o5e," \u2014 "),CP=n(o5e,"A",{href:!0});var UQr=s(CP);nmo=r(UQr,"ProphetNetModel"),UQr.forEach(t),smo=r(o5e," (ProphetNet model)"),o5e.forEach(t),lmo=i(M),r_=n(M,"LI",{});var r5e=s(r_);ate=n(r5e,"STRONG",{});var JQr=s(ate);imo=r(JQr,"qdqbert"),JQr.forEach(t),dmo=r(r5e," \u2014 "),wP=n(r5e,"A",{href:!0});var YQr=s(wP);cmo=r(YQr,"QDQBertModel"),YQr.forEach(t),fmo=r(r5e," (QDQBert model)"),r5e.forEach(t),mmo=i(M),t_=n(M,"LI",{});var t5e=s(t_);nte=n(t5e,"STRONG",{});var KQr=s(nte);gmo=r(KQr,"reformer"),KQr.forEach(t),hmo=r(t5e," \u2014 "),AP=n(t5e,"A",{href:!0});var ZQr=s(AP);pmo=r(ZQr,"ReformerModel"),ZQr.forEach(t),_mo=r(t5e," (Reformer model)"),t5e.forEach(t),umo=i(M),a_=n(M,"LI",{});var a5e=s(a_);ste=n(a5e,"STRONG",{});var eWr=s(ste);bmo=r(eWr,"regnet"),eWr.forEach(t),vmo=r(a5e," \u2014 "),yP=n(a5e,"A",{href:!0});var oWr=s(yP);Fmo=r(oWr,"RegNetModel"),oWr.forEach(t),Tmo=r(a5e," (RegNet model)"),a5e.forEach(t),Mmo=i(M),n_=n(M,"LI",{});var n5e=s(n_);lte=n(n5e,"STRONG",{});var rWr=s(lte);Emo=r(rWr,"rembert"),rWr.forEach(t),Cmo=r(n5e," \u2014 "),LP=n(n5e,"A",{href:!0});var tWr=s(LP);wmo=r(tWr,"RemBertModel"),tWr.forEach(t),Amo=r(n5e," (RemBERT model)"),n5e.forEach(t),ymo=i(M),s_=n(M,"LI",{});var s5e=s(s_);ite=n(s5e,"STRONG",{});var aWr=s(ite);Lmo=r(aWr,"resnet"),aWr.forEach(t),xmo=r(s5e," \u2014 "),xP=n(s5e,"A",{href:!0});var nWr=s(xP);kmo=r(nWr,"ResNetModel"),nWr.forEach(t),Smo=r(s5e," (ResNet model)"),s5e.forEach(t),Rmo=i(M),l_=n(M,"LI",{});var l5e=s(l_);dte=n(l5e,"STRONG",{});var sWr=s(dte);Bmo=r(sWr,"retribert"),sWr.forEach(t),Pmo=r(l5e," \u2014 "),kP=n(l5e,"A",{href:!0});var lWr=s(kP);$mo=r(lWr,"RetriBertModel"),lWr.forEach(t),Imo=r(l5e," (RetriBERT model)"),l5e.forEach(t),qmo=i(M),i_=n(M,"LI",{});var i5e=s(i_);cte=n(i5e,"STRONG",{});var iWr=s(cte);Nmo=r(iWr,"roberta"),iWr.forEach(t),jmo=r(i5e," \u2014 "),SP=n(i5e,"A",{href:!0});var dWr=s(SP);Dmo=r(dWr,"RobertaModel"),dWr.forEach(t),Gmo=r(i5e," (RoBERTa model)"),i5e.forEach(t),Omo=i(M),d_=n(M,"LI",{});var d5e=s(d_);fte=n(d5e,"STRONG",{});var cWr=s(fte);Vmo=r(cWr,"roformer"),cWr.forEach(t),Xmo=r(d5e," \u2014 "),RP=n(d5e,"A",{href:!0});var fWr=s(RP);zmo=r(fWr,"RoFormerModel"),fWr.forEach(t),Qmo=r(d5e," (RoFormer model)"),d5e.forEach(t),Wmo=i(M),c_=n(M,"LI",{});var c5e=s(c_);mte=n(c5e,"STRONG",{});var mWr=s(mte);Hmo=r(mWr,"segformer"),mWr.forEach(t),Umo=r(c5e," \u2014 "),BP=n(c5e,"A",{href:!0});var gWr=s(BP);Jmo=r(gWr,"SegformerModel"),gWr.forEach(t),Ymo=r(c5e," (SegFormer model)"),c5e.forEach(t),Kmo=i(M),f_=n(M,"LI",{});var f5e=s(f_);gte=n(f5e,"STRONG",{});var hWr=s(gte);Zmo=r(hWr,"sew"),hWr.forEach(t),ego=r(f5e," \u2014 "),PP=n(f5e,"A",{href:!0});var pWr=s(PP);ogo=r(pWr,"SEWModel"),pWr.forEach(t),rgo=r(f5e," (SEW model)"),f5e.forEach(t),tgo=i(M),m_=n(M,"LI",{});var m5e=s(m_);hte=n(m5e,"STRONG",{});var _Wr=s(hte);ago=r(_Wr,"sew-d"),_Wr.forEach(t),ngo=r(m5e," \u2014 "),$P=n(m5e,"A",{href:!0});var uWr=s($P);sgo=r(uWr,"SEWDModel"),uWr.forEach(t),lgo=r(m5e," (SEW-D model)"),m5e.forEach(t),igo=i(M),g_=n(M,"LI",{});var g5e=s(g_);pte=n(g5e,"STRONG",{});var bWr=s(pte);dgo=r(bWr,"speech_to_text"),bWr.forEach(t),cgo=r(g5e," \u2014 "),IP=n(g5e,"A",{href:!0});var vWr=s(IP);fgo=r(vWr,"Speech2TextModel"),vWr.forEach(t),mgo=r(g5e," (Speech2Text model)"),g5e.forEach(t),ggo=i(M),h_=n(M,"LI",{});var h5e=s(h_);_te=n(h5e,"STRONG",{});var FWr=s(_te);hgo=r(FWr,"splinter"),FWr.forEach(t),pgo=r(h5e," \u2014 "),qP=n(h5e,"A",{href:!0});var TWr=s(qP);_go=r(TWr,"SplinterModel"),TWr.forEach(t),ugo=r(h5e," (Splinter model)"),h5e.forEach(t),bgo=i(M),p_=n(M,"LI",{});var p5e=s(p_);ute=n(p5e,"STRONG",{});var MWr=s(ute);vgo=r(MWr,"squeezebert"),MWr.forEach(t),Fgo=r(p5e," \u2014 "),NP=n(p5e,"A",{href:!0});var EWr=s(NP);Tgo=r(EWr,"SqueezeBertModel"),EWr.forEach(t),Mgo=r(p5e," (SqueezeBERT model)"),p5e.forEach(t),Ego=i(M),__=n(M,"LI",{});var _5e=s(__);bte=n(_5e,"STRONG",{});var CWr=s(bte);Cgo=r(CWr,"swin"),CWr.forEach(t),wgo=r(_5e," \u2014 "),jP=n(_5e,"A",{href:!0});var wWr=s(jP);Ago=r(wWr,"SwinModel"),wWr.forEach(t),ygo=r(_5e," (Swin model)"),_5e.forEach(t),Lgo=i(M),u_=n(M,"LI",{});var u5e=s(u_);vte=n(u5e,"STRONG",{});var AWr=s(vte);xgo=r(AWr,"t5"),AWr.forEach(t),kgo=r(u5e," \u2014 "),DP=n(u5e,"A",{href:!0});var yWr=s(DP);Sgo=r(yWr,"T5Model"),yWr.forEach(t),Rgo=r(u5e," (T5 model)"),u5e.forEach(t),Bgo=i(M),b_=n(M,"LI",{});var b5e=s(b_);Fte=n(b5e,"STRONG",{});var LWr=s(Fte);Pgo=r(LWr,"tapas"),LWr.forEach(t),$go=r(b5e," \u2014 "),GP=n(b5e,"A",{href:!0});var xWr=s(GP);Igo=r(xWr,"TapasModel"),xWr.forEach(t),qgo=r(b5e," (TAPAS model)"),b5e.forEach(t),Ngo=i(M),v_=n(M,"LI",{});var v5e=s(v_);Tte=n(v5e,"STRONG",{});var kWr=s(Tte);jgo=r(kWr,"transfo-xl"),kWr.forEach(t),Dgo=r(v5e," \u2014 "),OP=n(v5e,"A",{href:!0});var SWr=s(OP);Ggo=r(SWr,"TransfoXLModel"),SWr.forEach(t),Ogo=r(v5e," (Transformer-XL model)"),v5e.forEach(t),Vgo=i(M),F_=n(M,"LI",{});var F5e=s(F_);Mte=n(F5e,"STRONG",{});var RWr=s(Mte);Xgo=r(RWr,"unispeech"),RWr.forEach(t),zgo=r(F5e," \u2014 "),VP=n(F5e,"A",{href:!0});var BWr=s(VP);Qgo=r(BWr,"UniSpeechModel"),BWr.forEach(t),Wgo=r(F5e," (UniSpeech model)"),F5e.forEach(t),Hgo=i(M),T_=n(M,"LI",{});var T5e=s(T_);Ete=n(T5e,"STRONG",{});var PWr=s(Ete);Ugo=r(PWr,"unispeech-sat"),PWr.forEach(t),Jgo=r(T5e," \u2014 "),XP=n(T5e,"A",{href:!0});var $Wr=s(XP);Ygo=r($Wr,"UniSpeechSatModel"),$Wr.forEach(t),Kgo=r(T5e," (UniSpeechSat model)"),T5e.forEach(t),Zgo=i(M),M_=n(M,"LI",{});var M5e=s(M_);Cte=n(M5e,"STRONG",{});var IWr=s(Cte);eho=r(IWr,"van"),IWr.forEach(t),oho=r(M5e," \u2014 "),zP=n(M5e,"A",{href:!0});var qWr=s(zP);rho=r(qWr,"VanModel"),qWr.forEach(t),tho=r(M5e," (VAN model)"),M5e.forEach(t),aho=i(M),E_=n(M,"LI",{});var E5e=s(E_);wte=n(E5e,"STRONG",{});var NWr=s(wte);nho=r(NWr,"vilt"),NWr.forEach(t),sho=r(E5e," \u2014 "),QP=n(E5e,"A",{href:!0});var jWr=s(QP);lho=r(jWr,"ViltModel"),jWr.forEach(t),iho=r(E5e," (ViLT model)"),E5e.forEach(t),dho=i(M),C_=n(M,"LI",{});var C5e=s(C_);Ate=n(C5e,"STRONG",{});var DWr=s(Ate);cho=r(DWr,"vision-text-dual-encoder"),DWr.forEach(t),fho=r(C5e," \u2014 "),WP=n(C5e,"A",{href:!0});var GWr=s(WP);mho=r(GWr,"VisionTextDualEncoderModel"),GWr.forEach(t),gho=r(C5e," (VisionTextDualEncoder model)"),C5e.forEach(t),hho=i(M),w_=n(M,"LI",{});var w5e=s(w_);yte=n(w5e,"STRONG",{});var OWr=s(yte);pho=r(OWr,"visual_bert"),OWr.forEach(t),_ho=r(w5e," \u2014 "),HP=n(w5e,"A",{href:!0});var VWr=s(HP);uho=r(VWr,"VisualBertModel"),VWr.forEach(t),bho=r(w5e," (VisualBert model)"),w5e.forEach(t),vho=i(M),A_=n(M,"LI",{});var A5e=s(A_);Lte=n(A5e,"STRONG",{});var XWr=s(Lte);Fho=r(XWr,"vit"),XWr.forEach(t),Tho=r(A5e," \u2014 "),UP=n(A5e,"A",{href:!0});var zWr=s(UP);Mho=r(zWr,"ViTModel"),zWr.forEach(t),Eho=r(A5e," (ViT model)"),A5e.forEach(t),Cho=i(M),y_=n(M,"LI",{});var y5e=s(y_);xte=n(y5e,"STRONG",{});var QWr=s(xte);who=r(QWr,"vit_mae"),QWr.forEach(t),Aho=r(y5e," \u2014 "),JP=n(y5e,"A",{href:!0});var WWr=s(JP);yho=r(WWr,"ViTMAEModel"),WWr.forEach(t),Lho=r(y5e," (ViTMAE model)"),y5e.forEach(t),xho=i(M),L_=n(M,"LI",{});var L5e=s(L_);kte=n(L5e,"STRONG",{});var HWr=s(kte);kho=r(HWr,"wav2vec2"),HWr.forEach(t),Sho=r(L5e," \u2014 "),YP=n(L5e,"A",{href:!0});var UWr=s(YP);Rho=r(UWr,"Wav2Vec2Model"),UWr.forEach(t),Bho=r(L5e," (Wav2Vec2 model)"),L5e.forEach(t),Pho=i(M),x_=n(M,"LI",{});var x5e=s(x_);Ste=n(x5e,"STRONG",{});var JWr=s(Ste);$ho=r(JWr,"wavlm"),JWr.forEach(t),Iho=r(x5e," \u2014 "),KP=n(x5e,"A",{href:!0});var YWr=s(KP);qho=r(YWr,"WavLMModel"),YWr.forEach(t),Nho=r(x5e," (WavLM model)"),x5e.forEach(t),jho=i(M),k_=n(M,"LI",{});var k5e=s(k_);Rte=n(k5e,"STRONG",{});var KWr=s(Rte);Dho=r(KWr,"xglm"),KWr.forEach(t),Gho=r(k5e," \u2014 "),ZP=n(k5e,"A",{href:!0});var ZWr=s(ZP);Oho=r(ZWr,"XGLMModel"),ZWr.forEach(t),Vho=r(k5e," (XGLM model)"),k5e.forEach(t),Xho=i(M),S_=n(M,"LI",{});var S5e=s(S_);Bte=n(S5e,"STRONG",{});var eHr=s(Bte);zho=r(eHr,"xlm"),eHr.forEach(t),Qho=r(S5e," \u2014 "),e$=n(S5e,"A",{href:!0});var oHr=s(e$);Who=r(oHr,"XLMModel"),oHr.forEach(t),Hho=r(S5e," (XLM model)"),S5e.forEach(t),Uho=i(M),R_=n(M,"LI",{});var R5e=s(R_);Pte=n(R5e,"STRONG",{});var rHr=s(Pte);Jho=r(rHr,"xlm-prophetnet"),rHr.forEach(t),Yho=r(R5e," \u2014 "),o$=n(R5e,"A",{href:!0});var tHr=s(o$);Kho=r(tHr,"XLMProphetNetModel"),tHr.forEach(t),Zho=r(R5e," (XLMProphetNet model)"),R5e.forEach(t),epo=i(M),B_=n(M,"LI",{});var B5e=s(B_);$te=n(B5e,"STRONG",{});var aHr=s($te);opo=r(aHr,"xlm-roberta"),aHr.forEach(t),rpo=r(B5e," \u2014 "),r$=n(B5e,"A",{href:!0});var nHr=s(r$);tpo=r(nHr,"XLMRobertaModel"),nHr.forEach(t),apo=r(B5e," (XLM-RoBERTa model)"),B5e.forEach(t),npo=i(M),P_=n(M,"LI",{});var P5e=s(P_);Ite=n(P5e,"STRONG",{});var sHr=s(Ite);spo=r(sHr,"xlm-roberta-xl"),sHr.forEach(t),lpo=r(P5e," \u2014 "),t$=n(P5e,"A",{href:!0});var lHr=s(t$);ipo=r(lHr,"XLMRobertaXLModel"),lHr.forEach(t),dpo=r(P5e," (XLM-RoBERTa-XL model)"),P5e.forEach(t),cpo=i(M),$_=n(M,"LI",{});var $5e=s($_);qte=n($5e,"STRONG",{});var iHr=s(qte);fpo=r(iHr,"xlnet"),iHr.forEach(t),mpo=r($5e," \u2014 "),a$=n($5e,"A",{href:!0});var dHr=s(a$);gpo=r(dHr,"XLNetModel"),dHr.forEach(t),hpo=r($5e," (XLNet model)"),$5e.forEach(t),ppo=i(M),I_=n(M,"LI",{});var I5e=s(I_);Nte=n(I5e,"STRONG",{});var cHr=s(Nte);_po=r(cHr,"yoso"),cHr.forEach(t),upo=r(I5e," \u2014 "),n$=n(I5e,"A",{href:!0});var fHr=s(n$);bpo=r(fHr,"YosoModel"),fHr.forEach(t),vpo=r(I5e," (YOSO model)"),I5e.forEach(t),M.forEach(t),Fpo=i(Dt),q_=n(Dt,"P",{});var q5e=s(q_);Tpo=r(q5e,"The model is set in evaluation mode by default using "),jte=n(q5e,"CODE",{});var mHr=s(jte);Mpo=r(mHr,"model.eval()"),mHr.forEach(t),Epo=r(q5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dte=n(q5e,"CODE",{});var gHr=s(Dte);Cpo=r(gHr,"model.train()"),gHr.forEach(t),q5e.forEach(t),wpo=i(Dt),Gte=n(Dt,"P",{});var hHr=s(Gte);Apo=r(hHr,"Examples:"),hHr.forEach(t),ypo=i(Dt),m(p3.$$.fragment,Dt),Dt.forEach(t),Hs.forEach(t),YRe=i(c),od=n(c,"H2",{class:!0});var s$e=s(od);N_=n(s$e,"A",{id:!0,class:!0,href:!0});var pHr=s(N_);Ote=n(pHr,"SPAN",{});var _Hr=s(Ote);m(_3.$$.fragment,_Hr),_Hr.forEach(t),pHr.forEach(t),Lpo=i(s$e),Vte=n(s$e,"SPAN",{});var uHr=s(Vte);xpo=r(uHr,"AutoModelForPreTraining"),uHr.forEach(t),s$e.forEach(t),KRe=i(c),Yo=n(c,"DIV",{class:!0});var Js=s(Yo);m(u3.$$.fragment,Js),kpo=i(Js),rd=n(Js,"P",{});var AU=s(rd);Spo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),s$=n(AU,"A",{href:!0});var bHr=s(s$);Rpo=r(bHr,"from_pretrained()"),bHr.forEach(t),Bpo=r(AU," class method or the "),l$=n(AU,"A",{href:!0});var vHr=s(l$);Ppo=r(vHr,"from_config()"),vHr.forEach(t),$po=r(AU,` class
method.`),AU.forEach(t),Ipo=i(Js),b3=n(Js,"P",{});var l$e=s(b3);qpo=r(l$e,"This class cannot be instantiated directly using "),Xte=n(l$e,"CODE",{});var FHr=s(Xte);Npo=r(FHr,"__init__()"),FHr.forEach(t),jpo=r(l$e," (throws an error)."),l$e.forEach(t),Dpo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(v3.$$.fragment,Ys),Gpo=i(Ys),zte=n(Ys,"P",{});var THr=s(zte);Opo=r(THr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),THr.forEach(t),Vpo=i(Ys),td=n(Ys,"P",{});var yU=s(td);Xpo=r(yU,`Note:
Loading a model from its configuration file does `),Qte=n(yU,"STRONG",{});var MHr=s(Qte);zpo=r(MHr,"not"),MHr.forEach(t),Qpo=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),i$=n(yU,"A",{href:!0});var EHr=s(i$);Wpo=r(EHr,"from_pretrained()"),EHr.forEach(t),Hpo=r(yU," to load the model weights."),yU.forEach(t),Upo=i(Ys),Wte=n(Ys,"P",{});var CHr=s(Wte);Jpo=r(CHr,"Examples:"),CHr.forEach(t),Ypo=i(Ys),m(F3.$$.fragment,Ys),Ys.forEach(t),Kpo=i(Js),Ne=n(Js,"DIV",{class:!0});var Gt=s(Ne);m(T3.$$.fragment,Gt),Zpo=i(Gt),Hte=n(Gt,"P",{});var wHr=s(Hte);e_o=r(wHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wHr.forEach(t),o_o=i(Gt),za=n(Gt,"P",{});var BE=s(za);r_o=r(BE,"The model class to instantiate is selected based on the "),Ute=n(BE,"CODE",{});var AHr=s(Ute);t_o=r(AHr,"model_type"),AHr.forEach(t),a_o=r(BE,` property of the config object (either
passed as an argument or loaded from `),Jte=n(BE,"CODE",{});var yHr=s(Jte);n_o=r(yHr,"pretrained_model_name_or_path"),yHr.forEach(t),s_o=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yte=n(BE,"CODE",{});var LHr=s(Yte);l_o=r(LHr,"pretrained_model_name_or_path"),LHr.forEach(t),i_o=r(BE,":"),BE.forEach(t),d_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);j_=n(B,"LI",{});var N5e=s(j_);Kte=n(N5e,"STRONG",{});var xHr=s(Kte);c_o=r(xHr,"albert"),xHr.forEach(t),f_o=r(N5e," \u2014 "),d$=n(N5e,"A",{href:!0});var kHr=s(d$);m_o=r(kHr,"AlbertForPreTraining"),kHr.forEach(t),g_o=r(N5e," (ALBERT model)"),N5e.forEach(t),h_o=i(B),D_=n(B,"LI",{});var j5e=s(D_);Zte=n(j5e,"STRONG",{});var SHr=s(Zte);p_o=r(SHr,"bart"),SHr.forEach(t),__o=r(j5e," \u2014 "),c$=n(j5e,"A",{href:!0});var RHr=s(c$);u_o=r(RHr,"BartForConditionalGeneration"),RHr.forEach(t),b_o=r(j5e," (BART model)"),j5e.forEach(t),v_o=i(B),G_=n(B,"LI",{});var D5e=s(G_);eae=n(D5e,"STRONG",{});var BHr=s(eae);F_o=r(BHr,"bert"),BHr.forEach(t),T_o=r(D5e," \u2014 "),f$=n(D5e,"A",{href:!0});var PHr=s(f$);M_o=r(PHr,"BertForPreTraining"),PHr.forEach(t),E_o=r(D5e," (BERT model)"),D5e.forEach(t),C_o=i(B),O_=n(B,"LI",{});var G5e=s(O_);oae=n(G5e,"STRONG",{});var $Hr=s(oae);w_o=r($Hr,"big_bird"),$Hr.forEach(t),A_o=r(G5e," \u2014 "),m$=n(G5e,"A",{href:!0});var IHr=s(m$);y_o=r(IHr,"BigBirdForPreTraining"),IHr.forEach(t),L_o=r(G5e," (BigBird model)"),G5e.forEach(t),x_o=i(B),V_=n(B,"LI",{});var O5e=s(V_);rae=n(O5e,"STRONG",{});var qHr=s(rae);k_o=r(qHr,"camembert"),qHr.forEach(t),S_o=r(O5e," \u2014 "),g$=n(O5e,"A",{href:!0});var NHr=s(g$);R_o=r(NHr,"CamembertForMaskedLM"),NHr.forEach(t),B_o=r(O5e," (CamemBERT model)"),O5e.forEach(t),P_o=i(B),X_=n(B,"LI",{});var V5e=s(X_);tae=n(V5e,"STRONG",{});var jHr=s(tae);$_o=r(jHr,"ctrl"),jHr.forEach(t),I_o=r(V5e," \u2014 "),h$=n(V5e,"A",{href:!0});var DHr=s(h$);q_o=r(DHr,"CTRLLMHeadModel"),DHr.forEach(t),N_o=r(V5e," (CTRL model)"),V5e.forEach(t),j_o=i(B),z_=n(B,"LI",{});var X5e=s(z_);aae=n(X5e,"STRONG",{});var GHr=s(aae);D_o=r(GHr,"data2vec-text"),GHr.forEach(t),G_o=r(X5e," \u2014 "),p$=n(X5e,"A",{href:!0});var OHr=s(p$);O_o=r(OHr,"Data2VecTextForMaskedLM"),OHr.forEach(t),V_o=r(X5e," (Data2VecText model)"),X5e.forEach(t),X_o=i(B),Q_=n(B,"LI",{});var z5e=s(Q_);nae=n(z5e,"STRONG",{});var VHr=s(nae);z_o=r(VHr,"deberta"),VHr.forEach(t),Q_o=r(z5e," \u2014 "),_$=n(z5e,"A",{href:!0});var XHr=s(_$);W_o=r(XHr,"DebertaForMaskedLM"),XHr.forEach(t),H_o=r(z5e," (DeBERTa model)"),z5e.forEach(t),U_o=i(B),W_=n(B,"LI",{});var Q5e=s(W_);sae=n(Q5e,"STRONG",{});var zHr=s(sae);J_o=r(zHr,"deberta-v2"),zHr.forEach(t),Y_o=r(Q5e," \u2014 "),u$=n(Q5e,"A",{href:!0});var QHr=s(u$);K_o=r(QHr,"DebertaV2ForMaskedLM"),QHr.forEach(t),Z_o=r(Q5e," (DeBERTa-v2 model)"),Q5e.forEach(t),euo=i(B),H_=n(B,"LI",{});var W5e=s(H_);lae=n(W5e,"STRONG",{});var WHr=s(lae);ouo=r(WHr,"distilbert"),WHr.forEach(t),ruo=r(W5e," \u2014 "),b$=n(W5e,"A",{href:!0});var HHr=s(b$);tuo=r(HHr,"DistilBertForMaskedLM"),HHr.forEach(t),auo=r(W5e," (DistilBERT model)"),W5e.forEach(t),nuo=i(B),U_=n(B,"LI",{});var H5e=s(U_);iae=n(H5e,"STRONG",{});var UHr=s(iae);suo=r(UHr,"electra"),UHr.forEach(t),luo=r(H5e," \u2014 "),v$=n(H5e,"A",{href:!0});var JHr=s(v$);iuo=r(JHr,"ElectraForPreTraining"),JHr.forEach(t),duo=r(H5e," (ELECTRA model)"),H5e.forEach(t),cuo=i(B),J_=n(B,"LI",{});var U5e=s(J_);dae=n(U5e,"STRONG",{});var YHr=s(dae);fuo=r(YHr,"flaubert"),YHr.forEach(t),muo=r(U5e," \u2014 "),F$=n(U5e,"A",{href:!0});var KHr=s(F$);guo=r(KHr,"FlaubertWithLMHeadModel"),KHr.forEach(t),huo=r(U5e," (FlauBERT model)"),U5e.forEach(t),puo=i(B),Y_=n(B,"LI",{});var J5e=s(Y_);cae=n(J5e,"STRONG",{});var ZHr=s(cae);_uo=r(ZHr,"fnet"),ZHr.forEach(t),uuo=r(J5e," \u2014 "),T$=n(J5e,"A",{href:!0});var eUr=s(T$);buo=r(eUr,"FNetForPreTraining"),eUr.forEach(t),vuo=r(J5e," (FNet model)"),J5e.forEach(t),Fuo=i(B),K_=n(B,"LI",{});var Y5e=s(K_);fae=n(Y5e,"STRONG",{});var oUr=s(fae);Tuo=r(oUr,"fsmt"),oUr.forEach(t),Muo=r(Y5e," \u2014 "),M$=n(Y5e,"A",{href:!0});var rUr=s(M$);Euo=r(rUr,"FSMTForConditionalGeneration"),rUr.forEach(t),Cuo=r(Y5e," (FairSeq Machine-Translation model)"),Y5e.forEach(t),wuo=i(B),Z_=n(B,"LI",{});var K5e=s(Z_);mae=n(K5e,"STRONG",{});var tUr=s(mae);Auo=r(tUr,"funnel"),tUr.forEach(t),yuo=r(K5e," \u2014 "),E$=n(K5e,"A",{href:!0});var aUr=s(E$);Luo=r(aUr,"FunnelForPreTraining"),aUr.forEach(t),xuo=r(K5e," (Funnel Transformer model)"),K5e.forEach(t),kuo=i(B),eu=n(B,"LI",{});var Z5e=s(eu);gae=n(Z5e,"STRONG",{});var nUr=s(gae);Suo=r(nUr,"gpt2"),nUr.forEach(t),Ruo=r(Z5e," \u2014 "),C$=n(Z5e,"A",{href:!0});var sUr=s(C$);Buo=r(sUr,"GPT2LMHeadModel"),sUr.forEach(t),Puo=r(Z5e," (OpenAI GPT-2 model)"),Z5e.forEach(t),$uo=i(B),ou=n(B,"LI",{});var e3e=s(ou);hae=n(e3e,"STRONG",{});var lUr=s(hae);Iuo=r(lUr,"ibert"),lUr.forEach(t),quo=r(e3e," \u2014 "),w$=n(e3e,"A",{href:!0});var iUr=s(w$);Nuo=r(iUr,"IBertForMaskedLM"),iUr.forEach(t),juo=r(e3e," (I-BERT model)"),e3e.forEach(t),Duo=i(B),ru=n(B,"LI",{});var o3e=s(ru);pae=n(o3e,"STRONG",{});var dUr=s(pae);Guo=r(dUr,"layoutlm"),dUr.forEach(t),Ouo=r(o3e," \u2014 "),A$=n(o3e,"A",{href:!0});var cUr=s(A$);Vuo=r(cUr,"LayoutLMForMaskedLM"),cUr.forEach(t),Xuo=r(o3e," (LayoutLM model)"),o3e.forEach(t),zuo=i(B),tu=n(B,"LI",{});var r3e=s(tu);_ae=n(r3e,"STRONG",{});var fUr=s(_ae);Quo=r(fUr,"longformer"),fUr.forEach(t),Wuo=r(r3e," \u2014 "),y$=n(r3e,"A",{href:!0});var mUr=s(y$);Huo=r(mUr,"LongformerForMaskedLM"),mUr.forEach(t),Uuo=r(r3e," (Longformer model)"),r3e.forEach(t),Juo=i(B),au=n(B,"LI",{});var t3e=s(au);uae=n(t3e,"STRONG",{});var gUr=s(uae);Yuo=r(gUr,"lxmert"),gUr.forEach(t),Kuo=r(t3e," \u2014 "),L$=n(t3e,"A",{href:!0});var hUr=s(L$);Zuo=r(hUr,"LxmertForPreTraining"),hUr.forEach(t),e6o=r(t3e," (LXMERT model)"),t3e.forEach(t),o6o=i(B),nu=n(B,"LI",{});var a3e=s(nu);bae=n(a3e,"STRONG",{});var pUr=s(bae);r6o=r(pUr,"megatron-bert"),pUr.forEach(t),t6o=r(a3e," \u2014 "),x$=n(a3e,"A",{href:!0});var _Ur=s(x$);a6o=r(_Ur,"MegatronBertForPreTraining"),_Ur.forEach(t),n6o=r(a3e," (MegatronBert model)"),a3e.forEach(t),s6o=i(B),su=n(B,"LI",{});var n3e=s(su);vae=n(n3e,"STRONG",{});var uUr=s(vae);l6o=r(uUr,"mobilebert"),uUr.forEach(t),i6o=r(n3e," \u2014 "),k$=n(n3e,"A",{href:!0});var bUr=s(k$);d6o=r(bUr,"MobileBertForPreTraining"),bUr.forEach(t),c6o=r(n3e," (MobileBERT model)"),n3e.forEach(t),f6o=i(B),lu=n(B,"LI",{});var s3e=s(lu);Fae=n(s3e,"STRONG",{});var vUr=s(Fae);m6o=r(vUr,"mpnet"),vUr.forEach(t),g6o=r(s3e," \u2014 "),S$=n(s3e,"A",{href:!0});var FUr=s(S$);h6o=r(FUr,"MPNetForMaskedLM"),FUr.forEach(t),p6o=r(s3e," (MPNet model)"),s3e.forEach(t),_6o=i(B),iu=n(B,"LI",{});var l3e=s(iu);Tae=n(l3e,"STRONG",{});var TUr=s(Tae);u6o=r(TUr,"openai-gpt"),TUr.forEach(t),b6o=r(l3e," \u2014 "),R$=n(l3e,"A",{href:!0});var MUr=s(R$);v6o=r(MUr,"OpenAIGPTLMHeadModel"),MUr.forEach(t),F6o=r(l3e," (OpenAI GPT model)"),l3e.forEach(t),T6o=i(B),du=n(B,"LI",{});var i3e=s(du);Mae=n(i3e,"STRONG",{});var EUr=s(Mae);M6o=r(EUr,"retribert"),EUr.forEach(t),E6o=r(i3e," \u2014 "),B$=n(i3e,"A",{href:!0});var CUr=s(B$);C6o=r(CUr,"RetriBertModel"),CUr.forEach(t),w6o=r(i3e," (RetriBERT model)"),i3e.forEach(t),A6o=i(B),cu=n(B,"LI",{});var d3e=s(cu);Eae=n(d3e,"STRONG",{});var wUr=s(Eae);y6o=r(wUr,"roberta"),wUr.forEach(t),L6o=r(d3e," \u2014 "),P$=n(d3e,"A",{href:!0});var AUr=s(P$);x6o=r(AUr,"RobertaForMaskedLM"),AUr.forEach(t),k6o=r(d3e," (RoBERTa model)"),d3e.forEach(t),S6o=i(B),fu=n(B,"LI",{});var c3e=s(fu);Cae=n(c3e,"STRONG",{});var yUr=s(Cae);R6o=r(yUr,"squeezebert"),yUr.forEach(t),B6o=r(c3e," \u2014 "),$$=n(c3e,"A",{href:!0});var LUr=s($$);P6o=r(LUr,"SqueezeBertForMaskedLM"),LUr.forEach(t),$6o=r(c3e," (SqueezeBERT model)"),c3e.forEach(t),I6o=i(B),mu=n(B,"LI",{});var f3e=s(mu);wae=n(f3e,"STRONG",{});var xUr=s(wae);q6o=r(xUr,"t5"),xUr.forEach(t),N6o=r(f3e," \u2014 "),I$=n(f3e,"A",{href:!0});var kUr=s(I$);j6o=r(kUr,"T5ForConditionalGeneration"),kUr.forEach(t),D6o=r(f3e," (T5 model)"),f3e.forEach(t),G6o=i(B),gu=n(B,"LI",{});var m3e=s(gu);Aae=n(m3e,"STRONG",{});var SUr=s(Aae);O6o=r(SUr,"tapas"),SUr.forEach(t),V6o=r(m3e," \u2014 "),q$=n(m3e,"A",{href:!0});var RUr=s(q$);X6o=r(RUr,"TapasForMaskedLM"),RUr.forEach(t),z6o=r(m3e," (TAPAS model)"),m3e.forEach(t),Q6o=i(B),hu=n(B,"LI",{});var g3e=s(hu);yae=n(g3e,"STRONG",{});var BUr=s(yae);W6o=r(BUr,"transfo-xl"),BUr.forEach(t),H6o=r(g3e," \u2014 "),N$=n(g3e,"A",{href:!0});var PUr=s(N$);U6o=r(PUr,"TransfoXLLMHeadModel"),PUr.forEach(t),J6o=r(g3e," (Transformer-XL model)"),g3e.forEach(t),Y6o=i(B),pu=n(B,"LI",{});var h3e=s(pu);Lae=n(h3e,"STRONG",{});var $Ur=s(Lae);K6o=r($Ur,"unispeech"),$Ur.forEach(t),Z6o=r(h3e," \u2014 "),j$=n(h3e,"A",{href:!0});var IUr=s(j$);e1o=r(IUr,"UniSpeechForPreTraining"),IUr.forEach(t),o1o=r(h3e," (UniSpeech model)"),h3e.forEach(t),r1o=i(B),_u=n(B,"LI",{});var p3e=s(_u);xae=n(p3e,"STRONG",{});var qUr=s(xae);t1o=r(qUr,"unispeech-sat"),qUr.forEach(t),a1o=r(p3e," \u2014 "),D$=n(p3e,"A",{href:!0});var NUr=s(D$);n1o=r(NUr,"UniSpeechSatForPreTraining"),NUr.forEach(t),s1o=r(p3e," (UniSpeechSat model)"),p3e.forEach(t),l1o=i(B),uu=n(B,"LI",{});var _3e=s(uu);kae=n(_3e,"STRONG",{});var jUr=s(kae);i1o=r(jUr,"visual_bert"),jUr.forEach(t),d1o=r(_3e," \u2014 "),G$=n(_3e,"A",{href:!0});var DUr=s(G$);c1o=r(DUr,"VisualBertForPreTraining"),DUr.forEach(t),f1o=r(_3e," (VisualBert model)"),_3e.forEach(t),m1o=i(B),bu=n(B,"LI",{});var u3e=s(bu);Sae=n(u3e,"STRONG",{});var GUr=s(Sae);g1o=r(GUr,"vit_mae"),GUr.forEach(t),h1o=r(u3e," \u2014 "),O$=n(u3e,"A",{href:!0});var OUr=s(O$);p1o=r(OUr,"ViTMAEForPreTraining"),OUr.forEach(t),_1o=r(u3e," (ViTMAE model)"),u3e.forEach(t),u1o=i(B),vu=n(B,"LI",{});var b3e=s(vu);Rae=n(b3e,"STRONG",{});var VUr=s(Rae);b1o=r(VUr,"wav2vec2"),VUr.forEach(t),v1o=r(b3e," \u2014 "),V$=n(b3e,"A",{href:!0});var XUr=s(V$);F1o=r(XUr,"Wav2Vec2ForPreTraining"),XUr.forEach(t),T1o=r(b3e," (Wav2Vec2 model)"),b3e.forEach(t),M1o=i(B),Fu=n(B,"LI",{});var v3e=s(Fu);Bae=n(v3e,"STRONG",{});var zUr=s(Bae);E1o=r(zUr,"xlm"),zUr.forEach(t),C1o=r(v3e," \u2014 "),X$=n(v3e,"A",{href:!0});var QUr=s(X$);w1o=r(QUr,"XLMWithLMHeadModel"),QUr.forEach(t),A1o=r(v3e," (XLM model)"),v3e.forEach(t),y1o=i(B),Tu=n(B,"LI",{});var F3e=s(Tu);Pae=n(F3e,"STRONG",{});var WUr=s(Pae);L1o=r(WUr,"xlm-roberta"),WUr.forEach(t),x1o=r(F3e," \u2014 "),z$=n(F3e,"A",{href:!0});var HUr=s(z$);k1o=r(HUr,"XLMRobertaForMaskedLM"),HUr.forEach(t),S1o=r(F3e," (XLM-RoBERTa model)"),F3e.forEach(t),R1o=i(B),Mu=n(B,"LI",{});var T3e=s(Mu);$ae=n(T3e,"STRONG",{});var UUr=s($ae);B1o=r(UUr,"xlm-roberta-xl"),UUr.forEach(t),P1o=r(T3e," \u2014 "),Q$=n(T3e,"A",{href:!0});var JUr=s(Q$);$1o=r(JUr,"XLMRobertaXLForMaskedLM"),JUr.forEach(t),I1o=r(T3e," (XLM-RoBERTa-XL model)"),T3e.forEach(t),q1o=i(B),Eu=n(B,"LI",{});var M3e=s(Eu);Iae=n(M3e,"STRONG",{});var YUr=s(Iae);N1o=r(YUr,"xlnet"),YUr.forEach(t),j1o=r(M3e," \u2014 "),W$=n(M3e,"A",{href:!0});var KUr=s(W$);D1o=r(KUr,"XLNetLMHeadModel"),KUr.forEach(t),G1o=r(M3e," (XLNet model)"),M3e.forEach(t),B.forEach(t),O1o=i(Gt),Cu=n(Gt,"P",{});var E3e=s(Cu);V1o=r(E3e,"The model is set in evaluation mode by default using "),qae=n(E3e,"CODE",{});var ZUr=s(qae);X1o=r(ZUr,"model.eval()"),ZUr.forEach(t),z1o=r(E3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nae=n(E3e,"CODE",{});var eJr=s(Nae);Q1o=r(eJr,"model.train()"),eJr.forEach(t),E3e.forEach(t),W1o=i(Gt),jae=n(Gt,"P",{});var oJr=s(jae);H1o=r(oJr,"Examples:"),oJr.forEach(t),U1o=i(Gt),m(M3.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),ZRe=i(c),ad=n(c,"H2",{class:!0});var i$e=s(ad);wu=n(i$e,"A",{id:!0,class:!0,href:!0});var rJr=s(wu);Dae=n(rJr,"SPAN",{});var tJr=s(Dae);m(E3.$$.fragment,tJr),tJr.forEach(t),rJr.forEach(t),J1o=i(i$e),Gae=n(i$e,"SPAN",{});var aJr=s(Gae);Y1o=r(aJr,"AutoModelForCausalLM"),aJr.forEach(t),i$e.forEach(t),eBe=i(c),Ko=n(c,"DIV",{class:!0});var Ks=s(Ko);m(C3.$$.fragment,Ks),K1o=i(Ks),nd=n(Ks,"P",{});var LU=s(nd);Z1o=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),H$=n(LU,"A",{href:!0});var nJr=s(H$);ebo=r(nJr,"from_pretrained()"),nJr.forEach(t),obo=r(LU," class method or the "),U$=n(LU,"A",{href:!0});var sJr=s(U$);rbo=r(sJr,"from_config()"),sJr.forEach(t),tbo=r(LU,` class
method.`),LU.forEach(t),abo=i(Ks),w3=n(Ks,"P",{});var d$e=s(w3);nbo=r(d$e,"This class cannot be instantiated directly using "),Oae=n(d$e,"CODE",{});var lJr=s(Oae);sbo=r(lJr,"__init__()"),lJr.forEach(t),lbo=r(d$e," (throws an error)."),d$e.forEach(t),ibo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(A3.$$.fragment,Zs),dbo=i(Zs),Vae=n(Zs,"P",{});var iJr=s(Vae);cbo=r(iJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iJr.forEach(t),fbo=i(Zs),sd=n(Zs,"P",{});var xU=s(sd);mbo=r(xU,`Note:
Loading a model from its configuration file does `),Xae=n(xU,"STRONG",{});var dJr=s(Xae);gbo=r(dJr,"not"),dJr.forEach(t),hbo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),J$=n(xU,"A",{href:!0});var cJr=s(J$);pbo=r(cJr,"from_pretrained()"),cJr.forEach(t),_bo=r(xU," to load the model weights."),xU.forEach(t),ubo=i(Zs),zae=n(Zs,"P",{});var fJr=s(zae);bbo=r(fJr,"Examples:"),fJr.forEach(t),vbo=i(Zs),m(y3.$$.fragment,Zs),Zs.forEach(t),Fbo=i(Ks),je=n(Ks,"DIV",{class:!0});var Ot=s(je);m(L3.$$.fragment,Ot),Tbo=i(Ot),Qae=n(Ot,"P",{});var mJr=s(Qae);Mbo=r(mJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mJr.forEach(t),Ebo=i(Ot),Qa=n(Ot,"P",{});var PE=s(Qa);Cbo=r(PE,"The model class to instantiate is selected based on the "),Wae=n(PE,"CODE",{});var gJr=s(Wae);wbo=r(gJr,"model_type"),gJr.forEach(t),Abo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Hae=n(PE,"CODE",{});var hJr=s(Hae);ybo=r(hJr,"pretrained_model_name_or_path"),hJr.forEach(t),Lbo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uae=n(PE,"CODE",{});var pJr=s(Uae);xbo=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),kbo=r(PE,":"),PE.forEach(t),Sbo=i(Ot),$=n(Ot,"UL",{});var q=s($);Au=n(q,"LI",{});var C3e=s(Au);Jae=n(C3e,"STRONG",{});var _Jr=s(Jae);Rbo=r(_Jr,"bart"),_Jr.forEach(t),Bbo=r(C3e," \u2014 "),Y$=n(C3e,"A",{href:!0});var uJr=s(Y$);Pbo=r(uJr,"BartForCausalLM"),uJr.forEach(t),$bo=r(C3e," (BART model)"),C3e.forEach(t),Ibo=i(q),yu=n(q,"LI",{});var w3e=s(yu);Yae=n(w3e,"STRONG",{});var bJr=s(Yae);qbo=r(bJr,"bert"),bJr.forEach(t),Nbo=r(w3e," \u2014 "),K$=n(w3e,"A",{href:!0});var vJr=s(K$);jbo=r(vJr,"BertLMHeadModel"),vJr.forEach(t),Dbo=r(w3e," (BERT model)"),w3e.forEach(t),Gbo=i(q),Lu=n(q,"LI",{});var A3e=s(Lu);Kae=n(A3e,"STRONG",{});var FJr=s(Kae);Obo=r(FJr,"bert-generation"),FJr.forEach(t),Vbo=r(A3e," \u2014 "),Z$=n(A3e,"A",{href:!0});var TJr=s(Z$);Xbo=r(TJr,"BertGenerationDecoder"),TJr.forEach(t),zbo=r(A3e," (Bert Generation model)"),A3e.forEach(t),Qbo=i(q),xu=n(q,"LI",{});var y3e=s(xu);Zae=n(y3e,"STRONG",{});var MJr=s(Zae);Wbo=r(MJr,"big_bird"),MJr.forEach(t),Hbo=r(y3e," \u2014 "),eI=n(y3e,"A",{href:!0});var EJr=s(eI);Ubo=r(EJr,"BigBirdForCausalLM"),EJr.forEach(t),Jbo=r(y3e," (BigBird model)"),y3e.forEach(t),Ybo=i(q),ku=n(q,"LI",{});var L3e=s(ku);ene=n(L3e,"STRONG",{});var CJr=s(ene);Kbo=r(CJr,"bigbird_pegasus"),CJr.forEach(t),Zbo=r(L3e," \u2014 "),oI=n(L3e,"A",{href:!0});var wJr=s(oI);e2o=r(wJr,"BigBirdPegasusForCausalLM"),wJr.forEach(t),o2o=r(L3e," (BigBirdPegasus model)"),L3e.forEach(t),r2o=i(q),Su=n(q,"LI",{});var x3e=s(Su);one=n(x3e,"STRONG",{});var AJr=s(one);t2o=r(AJr,"blenderbot"),AJr.forEach(t),a2o=r(x3e," \u2014 "),rI=n(x3e,"A",{href:!0});var yJr=s(rI);n2o=r(yJr,"BlenderbotForCausalLM"),yJr.forEach(t),s2o=r(x3e," (Blenderbot model)"),x3e.forEach(t),l2o=i(q),Ru=n(q,"LI",{});var k3e=s(Ru);rne=n(k3e,"STRONG",{});var LJr=s(rne);i2o=r(LJr,"blenderbot-small"),LJr.forEach(t),d2o=r(k3e," \u2014 "),tI=n(k3e,"A",{href:!0});var xJr=s(tI);c2o=r(xJr,"BlenderbotSmallForCausalLM"),xJr.forEach(t),f2o=r(k3e," (BlenderbotSmall model)"),k3e.forEach(t),m2o=i(q),Bu=n(q,"LI",{});var S3e=s(Bu);tne=n(S3e,"STRONG",{});var kJr=s(tne);g2o=r(kJr,"camembert"),kJr.forEach(t),h2o=r(S3e," \u2014 "),aI=n(S3e,"A",{href:!0});var SJr=s(aI);p2o=r(SJr,"CamembertForCausalLM"),SJr.forEach(t),_2o=r(S3e," (CamemBERT model)"),S3e.forEach(t),u2o=i(q),Pu=n(q,"LI",{});var R3e=s(Pu);ane=n(R3e,"STRONG",{});var RJr=s(ane);b2o=r(RJr,"ctrl"),RJr.forEach(t),v2o=r(R3e," \u2014 "),nI=n(R3e,"A",{href:!0});var BJr=s(nI);F2o=r(BJr,"CTRLLMHeadModel"),BJr.forEach(t),T2o=r(R3e," (CTRL model)"),R3e.forEach(t),M2o=i(q),$u=n(q,"LI",{});var B3e=s($u);nne=n(B3e,"STRONG",{});var PJr=s(nne);E2o=r(PJr,"data2vec-text"),PJr.forEach(t),C2o=r(B3e," \u2014 "),sI=n(B3e,"A",{href:!0});var $Jr=s(sI);w2o=r($Jr,"Data2VecTextForCausalLM"),$Jr.forEach(t),A2o=r(B3e," (Data2VecText model)"),B3e.forEach(t),y2o=i(q),Iu=n(q,"LI",{});var P3e=s(Iu);sne=n(P3e,"STRONG",{});var IJr=s(sne);L2o=r(IJr,"electra"),IJr.forEach(t),x2o=r(P3e," \u2014 "),lI=n(P3e,"A",{href:!0});var qJr=s(lI);k2o=r(qJr,"ElectraForCausalLM"),qJr.forEach(t),S2o=r(P3e," (ELECTRA model)"),P3e.forEach(t),R2o=i(q),qu=n(q,"LI",{});var $3e=s(qu);lne=n($3e,"STRONG",{});var NJr=s(lne);B2o=r(NJr,"gpt2"),NJr.forEach(t),P2o=r($3e," \u2014 "),iI=n($3e,"A",{href:!0});var jJr=s(iI);$2o=r(jJr,"GPT2LMHeadModel"),jJr.forEach(t),I2o=r($3e," (OpenAI GPT-2 model)"),$3e.forEach(t),q2o=i(q),Nu=n(q,"LI",{});var I3e=s(Nu);ine=n(I3e,"STRONG",{});var DJr=s(ine);N2o=r(DJr,"gpt_neo"),DJr.forEach(t),j2o=r(I3e," \u2014 "),dI=n(I3e,"A",{href:!0});var GJr=s(dI);D2o=r(GJr,"GPTNeoForCausalLM"),GJr.forEach(t),G2o=r(I3e," (GPT Neo model)"),I3e.forEach(t),O2o=i(q),ju=n(q,"LI",{});var q3e=s(ju);dne=n(q3e,"STRONG",{});var OJr=s(dne);V2o=r(OJr,"gptj"),OJr.forEach(t),X2o=r(q3e," \u2014 "),cI=n(q3e,"A",{href:!0});var VJr=s(cI);z2o=r(VJr,"GPTJForCausalLM"),VJr.forEach(t),Q2o=r(q3e," (GPT-J model)"),q3e.forEach(t),W2o=i(q),Du=n(q,"LI",{});var N3e=s(Du);cne=n(N3e,"STRONG",{});var XJr=s(cne);H2o=r(XJr,"marian"),XJr.forEach(t),U2o=r(N3e," \u2014 "),fI=n(N3e,"A",{href:!0});var zJr=s(fI);J2o=r(zJr,"MarianForCausalLM"),zJr.forEach(t),Y2o=r(N3e," (Marian model)"),N3e.forEach(t),K2o=i(q),Gu=n(q,"LI",{});var j3e=s(Gu);fne=n(j3e,"STRONG",{});var QJr=s(fne);Z2o=r(QJr,"mbart"),QJr.forEach(t),evo=r(j3e," \u2014 "),mI=n(j3e,"A",{href:!0});var WJr=s(mI);ovo=r(WJr,"MBartForCausalLM"),WJr.forEach(t),rvo=r(j3e," (mBART model)"),j3e.forEach(t),tvo=i(q),Ou=n(q,"LI",{});var D3e=s(Ou);mne=n(D3e,"STRONG",{});var HJr=s(mne);avo=r(HJr,"megatron-bert"),HJr.forEach(t),nvo=r(D3e," \u2014 "),gI=n(D3e,"A",{href:!0});var UJr=s(gI);svo=r(UJr,"MegatronBertForCausalLM"),UJr.forEach(t),lvo=r(D3e," (MegatronBert model)"),D3e.forEach(t),ivo=i(q),Vu=n(q,"LI",{});var G3e=s(Vu);gne=n(G3e,"STRONG",{});var JJr=s(gne);dvo=r(JJr,"openai-gpt"),JJr.forEach(t),cvo=r(G3e," \u2014 "),hI=n(G3e,"A",{href:!0});var YJr=s(hI);fvo=r(YJr,"OpenAIGPTLMHeadModel"),YJr.forEach(t),mvo=r(G3e," (OpenAI GPT model)"),G3e.forEach(t),gvo=i(q),Xu=n(q,"LI",{});var O3e=s(Xu);hne=n(O3e,"STRONG",{});var KJr=s(hne);hvo=r(KJr,"pegasus"),KJr.forEach(t),pvo=r(O3e," \u2014 "),pI=n(O3e,"A",{href:!0});var ZJr=s(pI);_vo=r(ZJr,"PegasusForCausalLM"),ZJr.forEach(t),uvo=r(O3e," (Pegasus model)"),O3e.forEach(t),bvo=i(q),zu=n(q,"LI",{});var V3e=s(zu);pne=n(V3e,"STRONG",{});var eYr=s(pne);vvo=r(eYr,"plbart"),eYr.forEach(t),Fvo=r(V3e," \u2014 "),_I=n(V3e,"A",{href:!0});var oYr=s(_I);Tvo=r(oYr,"PLBartForCausalLM"),oYr.forEach(t),Mvo=r(V3e," (PLBart model)"),V3e.forEach(t),Evo=i(q),Qu=n(q,"LI",{});var X3e=s(Qu);_ne=n(X3e,"STRONG",{});var rYr=s(_ne);Cvo=r(rYr,"prophetnet"),rYr.forEach(t),wvo=r(X3e," \u2014 "),uI=n(X3e,"A",{href:!0});var tYr=s(uI);Avo=r(tYr,"ProphetNetForCausalLM"),tYr.forEach(t),yvo=r(X3e," (ProphetNet model)"),X3e.forEach(t),Lvo=i(q),Wu=n(q,"LI",{});var z3e=s(Wu);une=n(z3e,"STRONG",{});var aYr=s(une);xvo=r(aYr,"qdqbert"),aYr.forEach(t),kvo=r(z3e," \u2014 "),bI=n(z3e,"A",{href:!0});var nYr=s(bI);Svo=r(nYr,"QDQBertLMHeadModel"),nYr.forEach(t),Rvo=r(z3e," (QDQBert model)"),z3e.forEach(t),Bvo=i(q),Hu=n(q,"LI",{});var Q3e=s(Hu);bne=n(Q3e,"STRONG",{});var sYr=s(bne);Pvo=r(sYr,"reformer"),sYr.forEach(t),$vo=r(Q3e," \u2014 "),vI=n(Q3e,"A",{href:!0});var lYr=s(vI);Ivo=r(lYr,"ReformerModelWithLMHead"),lYr.forEach(t),qvo=r(Q3e," (Reformer model)"),Q3e.forEach(t),Nvo=i(q),Uu=n(q,"LI",{});var W3e=s(Uu);vne=n(W3e,"STRONG",{});var iYr=s(vne);jvo=r(iYr,"rembert"),iYr.forEach(t),Dvo=r(W3e," \u2014 "),FI=n(W3e,"A",{href:!0});var dYr=s(FI);Gvo=r(dYr,"RemBertForCausalLM"),dYr.forEach(t),Ovo=r(W3e," (RemBERT model)"),W3e.forEach(t),Vvo=i(q),Ju=n(q,"LI",{});var H3e=s(Ju);Fne=n(H3e,"STRONG",{});var cYr=s(Fne);Xvo=r(cYr,"roberta"),cYr.forEach(t),zvo=r(H3e," \u2014 "),TI=n(H3e,"A",{href:!0});var fYr=s(TI);Qvo=r(fYr,"RobertaForCausalLM"),fYr.forEach(t),Wvo=r(H3e," (RoBERTa model)"),H3e.forEach(t),Hvo=i(q),Yu=n(q,"LI",{});var U3e=s(Yu);Tne=n(U3e,"STRONG",{});var mYr=s(Tne);Uvo=r(mYr,"roformer"),mYr.forEach(t),Jvo=r(U3e," \u2014 "),MI=n(U3e,"A",{href:!0});var gYr=s(MI);Yvo=r(gYr,"RoFormerForCausalLM"),gYr.forEach(t),Kvo=r(U3e," (RoFormer model)"),U3e.forEach(t),Zvo=i(q),Ku=n(q,"LI",{});var J3e=s(Ku);Mne=n(J3e,"STRONG",{});var hYr=s(Mne);eFo=r(hYr,"speech_to_text_2"),hYr.forEach(t),oFo=r(J3e," \u2014 "),EI=n(J3e,"A",{href:!0});var pYr=s(EI);rFo=r(pYr,"Speech2Text2ForCausalLM"),pYr.forEach(t),tFo=r(J3e," (Speech2Text2 model)"),J3e.forEach(t),aFo=i(q),Zu=n(q,"LI",{});var Y3e=s(Zu);Ene=n(Y3e,"STRONG",{});var _Yr=s(Ene);nFo=r(_Yr,"transfo-xl"),_Yr.forEach(t),sFo=r(Y3e," \u2014 "),CI=n(Y3e,"A",{href:!0});var uYr=s(CI);lFo=r(uYr,"TransfoXLLMHeadModel"),uYr.forEach(t),iFo=r(Y3e," (Transformer-XL model)"),Y3e.forEach(t),dFo=i(q),e6=n(q,"LI",{});var K3e=s(e6);Cne=n(K3e,"STRONG",{});var bYr=s(Cne);cFo=r(bYr,"trocr"),bYr.forEach(t),fFo=r(K3e," \u2014 "),wI=n(K3e,"A",{href:!0});var vYr=s(wI);mFo=r(vYr,"TrOCRForCausalLM"),vYr.forEach(t),gFo=r(K3e," (TrOCR model)"),K3e.forEach(t),hFo=i(q),o6=n(q,"LI",{});var Z3e=s(o6);wne=n(Z3e,"STRONG",{});var FYr=s(wne);pFo=r(FYr,"xglm"),FYr.forEach(t),_Fo=r(Z3e," \u2014 "),AI=n(Z3e,"A",{href:!0});var TYr=s(AI);uFo=r(TYr,"XGLMForCausalLM"),TYr.forEach(t),bFo=r(Z3e," (XGLM model)"),Z3e.forEach(t),vFo=i(q),r6=n(q,"LI",{});var eCe=s(r6);Ane=n(eCe,"STRONG",{});var MYr=s(Ane);FFo=r(MYr,"xlm"),MYr.forEach(t),TFo=r(eCe," \u2014 "),yI=n(eCe,"A",{href:!0});var EYr=s(yI);MFo=r(EYr,"XLMWithLMHeadModel"),EYr.forEach(t),EFo=r(eCe," (XLM model)"),eCe.forEach(t),CFo=i(q),t6=n(q,"LI",{});var oCe=s(t6);yne=n(oCe,"STRONG",{});var CYr=s(yne);wFo=r(CYr,"xlm-prophetnet"),CYr.forEach(t),AFo=r(oCe," \u2014 "),LI=n(oCe,"A",{href:!0});var wYr=s(LI);yFo=r(wYr,"XLMProphetNetForCausalLM"),wYr.forEach(t),LFo=r(oCe," (XLMProphetNet model)"),oCe.forEach(t),xFo=i(q),a6=n(q,"LI",{});var rCe=s(a6);Lne=n(rCe,"STRONG",{});var AYr=s(Lne);kFo=r(AYr,"xlm-roberta"),AYr.forEach(t),SFo=r(rCe," \u2014 "),xI=n(rCe,"A",{href:!0});var yYr=s(xI);RFo=r(yYr,"XLMRobertaForCausalLM"),yYr.forEach(t),BFo=r(rCe," (XLM-RoBERTa model)"),rCe.forEach(t),PFo=i(q),n6=n(q,"LI",{});var tCe=s(n6);xne=n(tCe,"STRONG",{});var LYr=s(xne);$Fo=r(LYr,"xlm-roberta-xl"),LYr.forEach(t),IFo=r(tCe," \u2014 "),kI=n(tCe,"A",{href:!0});var xYr=s(kI);qFo=r(xYr,"XLMRobertaXLForCausalLM"),xYr.forEach(t),NFo=r(tCe," (XLM-RoBERTa-XL model)"),tCe.forEach(t),jFo=i(q),s6=n(q,"LI",{});var aCe=s(s6);kne=n(aCe,"STRONG",{});var kYr=s(kne);DFo=r(kYr,"xlnet"),kYr.forEach(t),GFo=r(aCe," \u2014 "),SI=n(aCe,"A",{href:!0});var SYr=s(SI);OFo=r(SYr,"XLNetLMHeadModel"),SYr.forEach(t),VFo=r(aCe," (XLNet model)"),aCe.forEach(t),q.forEach(t),XFo=i(Ot),l6=n(Ot,"P",{});var nCe=s(l6);zFo=r(nCe,"The model is set in evaluation mode by default using "),Sne=n(nCe,"CODE",{});var RYr=s(Sne);QFo=r(RYr,"model.eval()"),RYr.forEach(t),WFo=r(nCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rne=n(nCe,"CODE",{});var BYr=s(Rne);HFo=r(BYr,"model.train()"),BYr.forEach(t),nCe.forEach(t),UFo=i(Ot),Bne=n(Ot,"P",{});var PYr=s(Bne);JFo=r(PYr,"Examples:"),PYr.forEach(t),YFo=i(Ot),m(x3.$$.fragment,Ot),Ot.forEach(t),Ks.forEach(t),oBe=i(c),ld=n(c,"H2",{class:!0});var c$e=s(ld);i6=n(c$e,"A",{id:!0,class:!0,href:!0});var $Yr=s(i6);Pne=n($Yr,"SPAN",{});var IYr=s(Pne);m(k3.$$.fragment,IYr),IYr.forEach(t),$Yr.forEach(t),KFo=i(c$e),$ne=n(c$e,"SPAN",{});var qYr=s($ne);ZFo=r(qYr,"AutoModelForMaskedLM"),qYr.forEach(t),c$e.forEach(t),rBe=i(c),Zo=n(c,"DIV",{class:!0});var el=s(Zo);m(S3.$$.fragment,el),eTo=i(el),id=n(el,"P",{});var kU=s(id);oTo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RI=n(kU,"A",{href:!0});var NYr=s(RI);rTo=r(NYr,"from_pretrained()"),NYr.forEach(t),tTo=r(kU," class method or the "),BI=n(kU,"A",{href:!0});var jYr=s(BI);aTo=r(jYr,"from_config()"),jYr.forEach(t),nTo=r(kU,` class
method.`),kU.forEach(t),sTo=i(el),R3=n(el,"P",{});var f$e=s(R3);lTo=r(f$e,"This class cannot be instantiated directly using "),Ine=n(f$e,"CODE",{});var DYr=s(Ine);iTo=r(DYr,"__init__()"),DYr.forEach(t),dTo=r(f$e," (throws an error)."),f$e.forEach(t),cTo=i(el),Wr=n(el,"DIV",{class:!0});var ol=s(Wr);m(B3.$$.fragment,ol),fTo=i(ol),qne=n(ol,"P",{});var GYr=s(qne);mTo=r(GYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GYr.forEach(t),gTo=i(ol),dd=n(ol,"P",{});var SU=s(dd);hTo=r(SU,`Note:
Loading a model from its configuration file does `),Nne=n(SU,"STRONG",{});var OYr=s(Nne);pTo=r(OYr,"not"),OYr.forEach(t),_To=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PI=n(SU,"A",{href:!0});var VYr=s(PI);uTo=r(VYr,"from_pretrained()"),VYr.forEach(t),bTo=r(SU," to load the model weights."),SU.forEach(t),vTo=i(ol),jne=n(ol,"P",{});var XYr=s(jne);FTo=r(XYr,"Examples:"),XYr.forEach(t),TTo=i(ol),m(P3.$$.fragment,ol),ol.forEach(t),MTo=i(el),De=n(el,"DIV",{class:!0});var Vt=s(De);m($3.$$.fragment,Vt),ETo=i(Vt),Dne=n(Vt,"P",{});var zYr=s(Dne);CTo=r(zYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zYr.forEach(t),wTo=i(Vt),Wa=n(Vt,"P",{});var $E=s(Wa);ATo=r($E,"The model class to instantiate is selected based on the "),Gne=n($E,"CODE",{});var QYr=s(Gne);yTo=r(QYr,"model_type"),QYr.forEach(t),LTo=r($E,` property of the config object (either
passed as an argument or loaded from `),One=n($E,"CODE",{});var WYr=s(One);xTo=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),kTo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vne=n($E,"CODE",{});var HYr=s(Vne);STo=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),RTo=r($E,":"),$E.forEach(t),BTo=i(Vt),I=n(Vt,"UL",{});var N=s(I);d6=n(N,"LI",{});var sCe=s(d6);Xne=n(sCe,"STRONG",{});var UYr=s(Xne);PTo=r(UYr,"albert"),UYr.forEach(t),$To=r(sCe," \u2014 "),$I=n(sCe,"A",{href:!0});var JYr=s($I);ITo=r(JYr,"AlbertForMaskedLM"),JYr.forEach(t),qTo=r(sCe," (ALBERT model)"),sCe.forEach(t),NTo=i(N),c6=n(N,"LI",{});var lCe=s(c6);zne=n(lCe,"STRONG",{});var YYr=s(zne);jTo=r(YYr,"bart"),YYr.forEach(t),DTo=r(lCe," \u2014 "),II=n(lCe,"A",{href:!0});var KYr=s(II);GTo=r(KYr,"BartForConditionalGeneration"),KYr.forEach(t),OTo=r(lCe," (BART model)"),lCe.forEach(t),VTo=i(N),f6=n(N,"LI",{});var iCe=s(f6);Qne=n(iCe,"STRONG",{});var ZYr=s(Qne);XTo=r(ZYr,"bert"),ZYr.forEach(t),zTo=r(iCe," \u2014 "),qI=n(iCe,"A",{href:!0});var eKr=s(qI);QTo=r(eKr,"BertForMaskedLM"),eKr.forEach(t),WTo=r(iCe," (BERT model)"),iCe.forEach(t),HTo=i(N),m6=n(N,"LI",{});var dCe=s(m6);Wne=n(dCe,"STRONG",{});var oKr=s(Wne);UTo=r(oKr,"big_bird"),oKr.forEach(t),JTo=r(dCe," \u2014 "),NI=n(dCe,"A",{href:!0});var rKr=s(NI);YTo=r(rKr,"BigBirdForMaskedLM"),rKr.forEach(t),KTo=r(dCe," (BigBird model)"),dCe.forEach(t),ZTo=i(N),g6=n(N,"LI",{});var cCe=s(g6);Hne=n(cCe,"STRONG",{});var tKr=s(Hne);e8o=r(tKr,"camembert"),tKr.forEach(t),o8o=r(cCe," \u2014 "),jI=n(cCe,"A",{href:!0});var aKr=s(jI);r8o=r(aKr,"CamembertForMaskedLM"),aKr.forEach(t),t8o=r(cCe," (CamemBERT model)"),cCe.forEach(t),a8o=i(N),h6=n(N,"LI",{});var fCe=s(h6);Une=n(fCe,"STRONG",{});var nKr=s(Une);n8o=r(nKr,"convbert"),nKr.forEach(t),s8o=r(fCe," \u2014 "),DI=n(fCe,"A",{href:!0});var sKr=s(DI);l8o=r(sKr,"ConvBertForMaskedLM"),sKr.forEach(t),i8o=r(fCe," (ConvBERT model)"),fCe.forEach(t),d8o=i(N),p6=n(N,"LI",{});var mCe=s(p6);Jne=n(mCe,"STRONG",{});var lKr=s(Jne);c8o=r(lKr,"data2vec-text"),lKr.forEach(t),f8o=r(mCe," \u2014 "),GI=n(mCe,"A",{href:!0});var iKr=s(GI);m8o=r(iKr,"Data2VecTextForMaskedLM"),iKr.forEach(t),g8o=r(mCe," (Data2VecText model)"),mCe.forEach(t),h8o=i(N),_6=n(N,"LI",{});var gCe=s(_6);Yne=n(gCe,"STRONG",{});var dKr=s(Yne);p8o=r(dKr,"deberta"),dKr.forEach(t),_8o=r(gCe," \u2014 "),OI=n(gCe,"A",{href:!0});var cKr=s(OI);u8o=r(cKr,"DebertaForMaskedLM"),cKr.forEach(t),b8o=r(gCe," (DeBERTa model)"),gCe.forEach(t),v8o=i(N),u6=n(N,"LI",{});var hCe=s(u6);Kne=n(hCe,"STRONG",{});var fKr=s(Kne);F8o=r(fKr,"deberta-v2"),fKr.forEach(t),T8o=r(hCe," \u2014 "),VI=n(hCe,"A",{href:!0});var mKr=s(VI);M8o=r(mKr,"DebertaV2ForMaskedLM"),mKr.forEach(t),E8o=r(hCe," (DeBERTa-v2 model)"),hCe.forEach(t),C8o=i(N),b6=n(N,"LI",{});var pCe=s(b6);Zne=n(pCe,"STRONG",{});var gKr=s(Zne);w8o=r(gKr,"distilbert"),gKr.forEach(t),A8o=r(pCe," \u2014 "),XI=n(pCe,"A",{href:!0});var hKr=s(XI);y8o=r(hKr,"DistilBertForMaskedLM"),hKr.forEach(t),L8o=r(pCe," (DistilBERT model)"),pCe.forEach(t),x8o=i(N),v6=n(N,"LI",{});var _Ce=s(v6);ese=n(_Ce,"STRONG",{});var pKr=s(ese);k8o=r(pKr,"electra"),pKr.forEach(t),S8o=r(_Ce," \u2014 "),zI=n(_Ce,"A",{href:!0});var _Kr=s(zI);R8o=r(_Kr,"ElectraForMaskedLM"),_Kr.forEach(t),B8o=r(_Ce," (ELECTRA model)"),_Ce.forEach(t),P8o=i(N),F6=n(N,"LI",{});var uCe=s(F6);ose=n(uCe,"STRONG",{});var uKr=s(ose);$8o=r(uKr,"flaubert"),uKr.forEach(t),I8o=r(uCe," \u2014 "),QI=n(uCe,"A",{href:!0});var bKr=s(QI);q8o=r(bKr,"FlaubertWithLMHeadModel"),bKr.forEach(t),N8o=r(uCe," (FlauBERT model)"),uCe.forEach(t),j8o=i(N),T6=n(N,"LI",{});var bCe=s(T6);rse=n(bCe,"STRONG",{});var vKr=s(rse);D8o=r(vKr,"fnet"),vKr.forEach(t),G8o=r(bCe," \u2014 "),WI=n(bCe,"A",{href:!0});var FKr=s(WI);O8o=r(FKr,"FNetForMaskedLM"),FKr.forEach(t),V8o=r(bCe," (FNet model)"),bCe.forEach(t),X8o=i(N),M6=n(N,"LI",{});var vCe=s(M6);tse=n(vCe,"STRONG",{});var TKr=s(tse);z8o=r(TKr,"funnel"),TKr.forEach(t),Q8o=r(vCe," \u2014 "),HI=n(vCe,"A",{href:!0});var MKr=s(HI);W8o=r(MKr,"FunnelForMaskedLM"),MKr.forEach(t),H8o=r(vCe," (Funnel Transformer model)"),vCe.forEach(t),U8o=i(N),E6=n(N,"LI",{});var FCe=s(E6);ase=n(FCe,"STRONG",{});var EKr=s(ase);J8o=r(EKr,"ibert"),EKr.forEach(t),Y8o=r(FCe," \u2014 "),UI=n(FCe,"A",{href:!0});var CKr=s(UI);K8o=r(CKr,"IBertForMaskedLM"),CKr.forEach(t),Z8o=r(FCe," (I-BERT model)"),FCe.forEach(t),e9o=i(N),C6=n(N,"LI",{});var TCe=s(C6);nse=n(TCe,"STRONG",{});var wKr=s(nse);o9o=r(wKr,"layoutlm"),wKr.forEach(t),r9o=r(TCe," \u2014 "),JI=n(TCe,"A",{href:!0});var AKr=s(JI);t9o=r(AKr,"LayoutLMForMaskedLM"),AKr.forEach(t),a9o=r(TCe," (LayoutLM model)"),TCe.forEach(t),n9o=i(N),w6=n(N,"LI",{});var MCe=s(w6);sse=n(MCe,"STRONG",{});var yKr=s(sse);s9o=r(yKr,"longformer"),yKr.forEach(t),l9o=r(MCe," \u2014 "),YI=n(MCe,"A",{href:!0});var LKr=s(YI);i9o=r(LKr,"LongformerForMaskedLM"),LKr.forEach(t),d9o=r(MCe," (Longformer model)"),MCe.forEach(t),c9o=i(N),A6=n(N,"LI",{});var ECe=s(A6);lse=n(ECe,"STRONG",{});var xKr=s(lse);f9o=r(xKr,"mbart"),xKr.forEach(t),m9o=r(ECe," \u2014 "),KI=n(ECe,"A",{href:!0});var kKr=s(KI);g9o=r(kKr,"MBartForConditionalGeneration"),kKr.forEach(t),h9o=r(ECe," (mBART model)"),ECe.forEach(t),p9o=i(N),y6=n(N,"LI",{});var CCe=s(y6);ise=n(CCe,"STRONG",{});var SKr=s(ise);_9o=r(SKr,"megatron-bert"),SKr.forEach(t),u9o=r(CCe," \u2014 "),ZI=n(CCe,"A",{href:!0});var RKr=s(ZI);b9o=r(RKr,"MegatronBertForMaskedLM"),RKr.forEach(t),v9o=r(CCe," (MegatronBert model)"),CCe.forEach(t),F9o=i(N),L6=n(N,"LI",{});var wCe=s(L6);dse=n(wCe,"STRONG",{});var BKr=s(dse);T9o=r(BKr,"mobilebert"),BKr.forEach(t),M9o=r(wCe," \u2014 "),eq=n(wCe,"A",{href:!0});var PKr=s(eq);E9o=r(PKr,"MobileBertForMaskedLM"),PKr.forEach(t),C9o=r(wCe," (MobileBERT model)"),wCe.forEach(t),w9o=i(N),x6=n(N,"LI",{});var ACe=s(x6);cse=n(ACe,"STRONG",{});var $Kr=s(cse);A9o=r($Kr,"mpnet"),$Kr.forEach(t),y9o=r(ACe," \u2014 "),oq=n(ACe,"A",{href:!0});var IKr=s(oq);L9o=r(IKr,"MPNetForMaskedLM"),IKr.forEach(t),x9o=r(ACe," (MPNet model)"),ACe.forEach(t),k9o=i(N),k6=n(N,"LI",{});var yCe=s(k6);fse=n(yCe,"STRONG",{});var qKr=s(fse);S9o=r(qKr,"nystromformer"),qKr.forEach(t),R9o=r(yCe," \u2014 "),rq=n(yCe,"A",{href:!0});var NKr=s(rq);B9o=r(NKr,"NystromformerForMaskedLM"),NKr.forEach(t),P9o=r(yCe," (Nystromformer model)"),yCe.forEach(t),$9o=i(N),S6=n(N,"LI",{});var LCe=s(S6);mse=n(LCe,"STRONG",{});var jKr=s(mse);I9o=r(jKr,"perceiver"),jKr.forEach(t),q9o=r(LCe," \u2014 "),tq=n(LCe,"A",{href:!0});var DKr=s(tq);N9o=r(DKr,"PerceiverForMaskedLM"),DKr.forEach(t),j9o=r(LCe," (Perceiver model)"),LCe.forEach(t),D9o=i(N),R6=n(N,"LI",{});var xCe=s(R6);gse=n(xCe,"STRONG",{});var GKr=s(gse);G9o=r(GKr,"qdqbert"),GKr.forEach(t),O9o=r(xCe," \u2014 "),aq=n(xCe,"A",{href:!0});var OKr=s(aq);V9o=r(OKr,"QDQBertForMaskedLM"),OKr.forEach(t),X9o=r(xCe," (QDQBert model)"),xCe.forEach(t),z9o=i(N),B6=n(N,"LI",{});var kCe=s(B6);hse=n(kCe,"STRONG",{});var VKr=s(hse);Q9o=r(VKr,"reformer"),VKr.forEach(t),W9o=r(kCe," \u2014 "),nq=n(kCe,"A",{href:!0});var XKr=s(nq);H9o=r(XKr,"ReformerForMaskedLM"),XKr.forEach(t),U9o=r(kCe," (Reformer model)"),kCe.forEach(t),J9o=i(N),P6=n(N,"LI",{});var SCe=s(P6);pse=n(SCe,"STRONG",{});var zKr=s(pse);Y9o=r(zKr,"rembert"),zKr.forEach(t),K9o=r(SCe," \u2014 "),sq=n(SCe,"A",{href:!0});var QKr=s(sq);Z9o=r(QKr,"RemBertForMaskedLM"),QKr.forEach(t),eMo=r(SCe," (RemBERT model)"),SCe.forEach(t),oMo=i(N),$6=n(N,"LI",{});var RCe=s($6);_se=n(RCe,"STRONG",{});var WKr=s(_se);rMo=r(WKr,"roberta"),WKr.forEach(t),tMo=r(RCe," \u2014 "),lq=n(RCe,"A",{href:!0});var HKr=s(lq);aMo=r(HKr,"RobertaForMaskedLM"),HKr.forEach(t),nMo=r(RCe," (RoBERTa model)"),RCe.forEach(t),sMo=i(N),I6=n(N,"LI",{});var BCe=s(I6);use=n(BCe,"STRONG",{});var UKr=s(use);lMo=r(UKr,"roformer"),UKr.forEach(t),iMo=r(BCe," \u2014 "),iq=n(BCe,"A",{href:!0});var JKr=s(iq);dMo=r(JKr,"RoFormerForMaskedLM"),JKr.forEach(t),cMo=r(BCe," (RoFormer model)"),BCe.forEach(t),fMo=i(N),q6=n(N,"LI",{});var PCe=s(q6);bse=n(PCe,"STRONG",{});var YKr=s(bse);mMo=r(YKr,"squeezebert"),YKr.forEach(t),gMo=r(PCe," \u2014 "),dq=n(PCe,"A",{href:!0});var KKr=s(dq);hMo=r(KKr,"SqueezeBertForMaskedLM"),KKr.forEach(t),pMo=r(PCe," (SqueezeBERT model)"),PCe.forEach(t),_Mo=i(N),N6=n(N,"LI",{});var $Ce=s(N6);vse=n($Ce,"STRONG",{});var ZKr=s(vse);uMo=r(ZKr,"tapas"),ZKr.forEach(t),bMo=r($Ce," \u2014 "),cq=n($Ce,"A",{href:!0});var eZr=s(cq);vMo=r(eZr,"TapasForMaskedLM"),eZr.forEach(t),FMo=r($Ce," (TAPAS model)"),$Ce.forEach(t),TMo=i(N),j6=n(N,"LI",{});var ICe=s(j6);Fse=n(ICe,"STRONG",{});var oZr=s(Fse);MMo=r(oZr,"wav2vec2"),oZr.forEach(t),EMo=r(ICe," \u2014 "),Tse=n(ICe,"CODE",{});var rZr=s(Tse);CMo=r(rZr,"Wav2Vec2ForMaskedLM"),rZr.forEach(t),wMo=r(ICe," (Wav2Vec2 model)"),ICe.forEach(t),AMo=i(N),D6=n(N,"LI",{});var qCe=s(D6);Mse=n(qCe,"STRONG",{});var tZr=s(Mse);yMo=r(tZr,"xlm"),tZr.forEach(t),LMo=r(qCe," \u2014 "),fq=n(qCe,"A",{href:!0});var aZr=s(fq);xMo=r(aZr,"XLMWithLMHeadModel"),aZr.forEach(t),kMo=r(qCe," (XLM model)"),qCe.forEach(t),SMo=i(N),G6=n(N,"LI",{});var NCe=s(G6);Ese=n(NCe,"STRONG",{});var nZr=s(Ese);RMo=r(nZr,"xlm-roberta"),nZr.forEach(t),BMo=r(NCe," \u2014 "),mq=n(NCe,"A",{href:!0});var sZr=s(mq);PMo=r(sZr,"XLMRobertaForMaskedLM"),sZr.forEach(t),$Mo=r(NCe," (XLM-RoBERTa model)"),NCe.forEach(t),IMo=i(N),O6=n(N,"LI",{});var jCe=s(O6);Cse=n(jCe,"STRONG",{});var lZr=s(Cse);qMo=r(lZr,"xlm-roberta-xl"),lZr.forEach(t),NMo=r(jCe," \u2014 "),gq=n(jCe,"A",{href:!0});var iZr=s(gq);jMo=r(iZr,"XLMRobertaXLForMaskedLM"),iZr.forEach(t),DMo=r(jCe," (XLM-RoBERTa-XL model)"),jCe.forEach(t),GMo=i(N),V6=n(N,"LI",{});var DCe=s(V6);wse=n(DCe,"STRONG",{});var dZr=s(wse);OMo=r(dZr,"yoso"),dZr.forEach(t),VMo=r(DCe," \u2014 "),hq=n(DCe,"A",{href:!0});var cZr=s(hq);XMo=r(cZr,"YosoForMaskedLM"),cZr.forEach(t),zMo=r(DCe," (YOSO model)"),DCe.forEach(t),N.forEach(t),QMo=i(Vt),X6=n(Vt,"P",{});var GCe=s(X6);WMo=r(GCe,"The model is set in evaluation mode by default using "),Ase=n(GCe,"CODE",{});var fZr=s(Ase);HMo=r(fZr,"model.eval()"),fZr.forEach(t),UMo=r(GCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=n(GCe,"CODE",{});var mZr=s(yse);JMo=r(mZr,"model.train()"),mZr.forEach(t),GCe.forEach(t),YMo=i(Vt),Lse=n(Vt,"P",{});var gZr=s(Lse);KMo=r(gZr,"Examples:"),gZr.forEach(t),ZMo=i(Vt),m(I3.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),tBe=i(c),cd=n(c,"H2",{class:!0});var m$e=s(cd);z6=n(m$e,"A",{id:!0,class:!0,href:!0});var hZr=s(z6);xse=n(hZr,"SPAN",{});var pZr=s(xse);m(q3.$$.fragment,pZr),pZr.forEach(t),hZr.forEach(t),e4o=i(m$e),kse=n(m$e,"SPAN",{});var _Zr=s(kse);o4o=r(_Zr,"AutoModelForSeq2SeqLM"),_Zr.forEach(t),m$e.forEach(t),aBe=i(c),er=n(c,"DIV",{class:!0});var rl=s(er);m(N3.$$.fragment,rl),r4o=i(rl),fd=n(rl,"P",{});var RU=s(fd);t4o=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pq=n(RU,"A",{href:!0});var uZr=s(pq);a4o=r(uZr,"from_pretrained()"),uZr.forEach(t),n4o=r(RU," class method or the "),_q=n(RU,"A",{href:!0});var bZr=s(_q);s4o=r(bZr,"from_config()"),bZr.forEach(t),l4o=r(RU,` class
method.`),RU.forEach(t),i4o=i(rl),j3=n(rl,"P",{});var g$e=s(j3);d4o=r(g$e,"This class cannot be instantiated directly using "),Sse=n(g$e,"CODE",{});var vZr=s(Sse);c4o=r(vZr,"__init__()"),vZr.forEach(t),f4o=r(g$e," (throws an error)."),g$e.forEach(t),m4o=i(rl),Hr=n(rl,"DIV",{class:!0});var tl=s(Hr);m(D3.$$.fragment,tl),g4o=i(tl),Rse=n(tl,"P",{});var FZr=s(Rse);h4o=r(FZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FZr.forEach(t),p4o=i(tl),md=n(tl,"P",{});var BU=s(md);_4o=r(BU,`Note:
Loading a model from its configuration file does `),Bse=n(BU,"STRONG",{});var TZr=s(Bse);u4o=r(TZr,"not"),TZr.forEach(t),b4o=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=n(BU,"A",{href:!0});var MZr=s(uq);v4o=r(MZr,"from_pretrained()"),MZr.forEach(t),F4o=r(BU," to load the model weights."),BU.forEach(t),T4o=i(tl),Pse=n(tl,"P",{});var EZr=s(Pse);M4o=r(EZr,"Examples:"),EZr.forEach(t),E4o=i(tl),m(G3.$$.fragment,tl),tl.forEach(t),C4o=i(rl),Ge=n(rl,"DIV",{class:!0});var Xt=s(Ge);m(O3.$$.fragment,Xt),w4o=i(Xt),$se=n(Xt,"P",{});var CZr=s($se);A4o=r(CZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CZr.forEach(t),y4o=i(Xt),Ha=n(Xt,"P",{});var IE=s(Ha);L4o=r(IE,"The model class to instantiate is selected based on the "),Ise=n(IE,"CODE",{});var wZr=s(Ise);x4o=r(wZr,"model_type"),wZr.forEach(t),k4o=r(IE,` property of the config object (either
passed as an argument or loaded from `),qse=n(IE,"CODE",{});var AZr=s(qse);S4o=r(AZr,"pretrained_model_name_or_path"),AZr.forEach(t),R4o=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nse=n(IE,"CODE",{});var yZr=s(Nse);B4o=r(yZr,"pretrained_model_name_or_path"),yZr.forEach(t),P4o=r(IE,":"),IE.forEach(t),$4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);Q6=n(le,"LI",{});var OCe=s(Q6);jse=n(OCe,"STRONG",{});var LZr=s(jse);I4o=r(LZr,"bart"),LZr.forEach(t),q4o=r(OCe," \u2014 "),bq=n(OCe,"A",{href:!0});var xZr=s(bq);N4o=r(xZr,"BartForConditionalGeneration"),xZr.forEach(t),j4o=r(OCe," (BART model)"),OCe.forEach(t),D4o=i(le),W6=n(le,"LI",{});var VCe=s(W6);Dse=n(VCe,"STRONG",{});var kZr=s(Dse);G4o=r(kZr,"bigbird_pegasus"),kZr.forEach(t),O4o=r(VCe," \u2014 "),vq=n(VCe,"A",{href:!0});var SZr=s(vq);V4o=r(SZr,"BigBirdPegasusForConditionalGeneration"),SZr.forEach(t),X4o=r(VCe," (BigBirdPegasus model)"),VCe.forEach(t),z4o=i(le),H6=n(le,"LI",{});var XCe=s(H6);Gse=n(XCe,"STRONG",{});var RZr=s(Gse);Q4o=r(RZr,"blenderbot"),RZr.forEach(t),W4o=r(XCe," \u2014 "),Fq=n(XCe,"A",{href:!0});var BZr=s(Fq);H4o=r(BZr,"BlenderbotForConditionalGeneration"),BZr.forEach(t),U4o=r(XCe," (Blenderbot model)"),XCe.forEach(t),J4o=i(le),U6=n(le,"LI",{});var zCe=s(U6);Ose=n(zCe,"STRONG",{});var PZr=s(Ose);Y4o=r(PZr,"blenderbot-small"),PZr.forEach(t),K4o=r(zCe," \u2014 "),Tq=n(zCe,"A",{href:!0});var $Zr=s(Tq);Z4o=r($Zr,"BlenderbotSmallForConditionalGeneration"),$Zr.forEach(t),eEo=r(zCe," (BlenderbotSmall model)"),zCe.forEach(t),oEo=i(le),J6=n(le,"LI",{});var QCe=s(J6);Vse=n(QCe,"STRONG",{});var IZr=s(Vse);rEo=r(IZr,"encoder-decoder"),IZr.forEach(t),tEo=r(QCe," \u2014 "),Mq=n(QCe,"A",{href:!0});var qZr=s(Mq);aEo=r(qZr,"EncoderDecoderModel"),qZr.forEach(t),nEo=r(QCe," (Encoder decoder model)"),QCe.forEach(t),sEo=i(le),Y6=n(le,"LI",{});var WCe=s(Y6);Xse=n(WCe,"STRONG",{});var NZr=s(Xse);lEo=r(NZr,"fsmt"),NZr.forEach(t),iEo=r(WCe," \u2014 "),Eq=n(WCe,"A",{href:!0});var jZr=s(Eq);dEo=r(jZr,"FSMTForConditionalGeneration"),jZr.forEach(t),cEo=r(WCe," (FairSeq Machine-Translation model)"),WCe.forEach(t),fEo=i(le),K6=n(le,"LI",{});var HCe=s(K6);zse=n(HCe,"STRONG",{});var DZr=s(zse);mEo=r(DZr,"led"),DZr.forEach(t),gEo=r(HCe," \u2014 "),Cq=n(HCe,"A",{href:!0});var GZr=s(Cq);hEo=r(GZr,"LEDForConditionalGeneration"),GZr.forEach(t),pEo=r(HCe," (LED model)"),HCe.forEach(t),_Eo=i(le),Z6=n(le,"LI",{});var UCe=s(Z6);Qse=n(UCe,"STRONG",{});var OZr=s(Qse);uEo=r(OZr,"m2m_100"),OZr.forEach(t),bEo=r(UCe," \u2014 "),wq=n(UCe,"A",{href:!0});var VZr=s(wq);vEo=r(VZr,"M2M100ForConditionalGeneration"),VZr.forEach(t),FEo=r(UCe," (M2M100 model)"),UCe.forEach(t),TEo=i(le),e1=n(le,"LI",{});var JCe=s(e1);Wse=n(JCe,"STRONG",{});var XZr=s(Wse);MEo=r(XZr,"marian"),XZr.forEach(t),EEo=r(JCe," \u2014 "),Aq=n(JCe,"A",{href:!0});var zZr=s(Aq);CEo=r(zZr,"MarianMTModel"),zZr.forEach(t),wEo=r(JCe," (Marian model)"),JCe.forEach(t),AEo=i(le),o1=n(le,"LI",{});var YCe=s(o1);Hse=n(YCe,"STRONG",{});var QZr=s(Hse);yEo=r(QZr,"mbart"),QZr.forEach(t),LEo=r(YCe," \u2014 "),yq=n(YCe,"A",{href:!0});var WZr=s(yq);xEo=r(WZr,"MBartForConditionalGeneration"),WZr.forEach(t),kEo=r(YCe," (mBART model)"),YCe.forEach(t),SEo=i(le),r1=n(le,"LI",{});var KCe=s(r1);Use=n(KCe,"STRONG",{});var HZr=s(Use);REo=r(HZr,"mt5"),HZr.forEach(t),BEo=r(KCe," \u2014 "),Lq=n(KCe,"A",{href:!0});var UZr=s(Lq);PEo=r(UZr,"MT5ForConditionalGeneration"),UZr.forEach(t),$Eo=r(KCe," (mT5 model)"),KCe.forEach(t),IEo=i(le),t1=n(le,"LI",{});var ZCe=s(t1);Jse=n(ZCe,"STRONG",{});var JZr=s(Jse);qEo=r(JZr,"pegasus"),JZr.forEach(t),NEo=r(ZCe," \u2014 "),xq=n(ZCe,"A",{href:!0});var YZr=s(xq);jEo=r(YZr,"PegasusForConditionalGeneration"),YZr.forEach(t),DEo=r(ZCe," (Pegasus model)"),ZCe.forEach(t),GEo=i(le),a1=n(le,"LI",{});var ewe=s(a1);Yse=n(ewe,"STRONG",{});var KZr=s(Yse);OEo=r(KZr,"plbart"),KZr.forEach(t),VEo=r(ewe," \u2014 "),kq=n(ewe,"A",{href:!0});var ZZr=s(kq);XEo=r(ZZr,"PLBartForConditionalGeneration"),ZZr.forEach(t),zEo=r(ewe," (PLBart model)"),ewe.forEach(t),QEo=i(le),n1=n(le,"LI",{});var owe=s(n1);Kse=n(owe,"STRONG",{});var eet=s(Kse);WEo=r(eet,"prophetnet"),eet.forEach(t),HEo=r(owe," \u2014 "),Sq=n(owe,"A",{href:!0});var oet=s(Sq);UEo=r(oet,"ProphetNetForConditionalGeneration"),oet.forEach(t),JEo=r(owe," (ProphetNet model)"),owe.forEach(t),YEo=i(le),s1=n(le,"LI",{});var rwe=s(s1);Zse=n(rwe,"STRONG",{});var ret=s(Zse);KEo=r(ret,"t5"),ret.forEach(t),ZEo=r(rwe," \u2014 "),Rq=n(rwe,"A",{href:!0});var tet=s(Rq);e5o=r(tet,"T5ForConditionalGeneration"),tet.forEach(t),o5o=r(rwe," (T5 model)"),rwe.forEach(t),r5o=i(le),l1=n(le,"LI",{});var twe=s(l1);ele=n(twe,"STRONG",{});var aet=s(ele);t5o=r(aet,"tapex"),aet.forEach(t),a5o=r(twe," \u2014 "),Bq=n(twe,"A",{href:!0});var net=s(Bq);n5o=r(net,"BartForConditionalGeneration"),net.forEach(t),s5o=r(twe," (TAPEX model)"),twe.forEach(t),l5o=i(le),i1=n(le,"LI",{});var awe=s(i1);ole=n(awe,"STRONG",{});var set=s(ole);i5o=r(set,"xlm-prophetnet"),set.forEach(t),d5o=r(awe," \u2014 "),Pq=n(awe,"A",{href:!0});var iet=s(Pq);c5o=r(iet,"XLMProphetNetForConditionalGeneration"),iet.forEach(t),f5o=r(awe," (XLMProphetNet model)"),awe.forEach(t),le.forEach(t),m5o=i(Xt),d1=n(Xt,"P",{});var nwe=s(d1);g5o=r(nwe,"The model is set in evaluation mode by default using "),rle=n(nwe,"CODE",{});var det=s(rle);h5o=r(det,"model.eval()"),det.forEach(t),p5o=r(nwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tle=n(nwe,"CODE",{});var cet=s(tle);_5o=r(cet,"model.train()"),cet.forEach(t),nwe.forEach(t),u5o=i(Xt),ale=n(Xt,"P",{});var fet=s(ale);b5o=r(fet,"Examples:"),fet.forEach(t),v5o=i(Xt),m(V3.$$.fragment,Xt),Xt.forEach(t),rl.forEach(t),nBe=i(c),gd=n(c,"H2",{class:!0});var h$e=s(gd);c1=n(h$e,"A",{id:!0,class:!0,href:!0});var met=s(c1);nle=n(met,"SPAN",{});var get=s(nle);m(X3.$$.fragment,get),get.forEach(t),met.forEach(t),F5o=i(h$e),sle=n(h$e,"SPAN",{});var het=s(sle);T5o=r(het,"AutoModelForSequenceClassification"),het.forEach(t),h$e.forEach(t),sBe=i(c),or=n(c,"DIV",{class:!0});var al=s(or);m(z3.$$.fragment,al),M5o=i(al),hd=n(al,"P",{});var PU=s(hd);E5o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),$q=n(PU,"A",{href:!0});var pet=s($q);C5o=r(pet,"from_pretrained()"),pet.forEach(t),w5o=r(PU," class method or the "),Iq=n(PU,"A",{href:!0});var _et=s(Iq);A5o=r(_et,"from_config()"),_et.forEach(t),y5o=r(PU,` class
method.`),PU.forEach(t),L5o=i(al),Q3=n(al,"P",{});var p$e=s(Q3);x5o=r(p$e,"This class cannot be instantiated directly using "),lle=n(p$e,"CODE",{});var uet=s(lle);k5o=r(uet,"__init__()"),uet.forEach(t),S5o=r(p$e," (throws an error)."),p$e.forEach(t),R5o=i(al),Ur=n(al,"DIV",{class:!0});var nl=s(Ur);m(W3.$$.fragment,nl),B5o=i(nl),ile=n(nl,"P",{});var bet=s(ile);P5o=r(bet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bet.forEach(t),$5o=i(nl),pd=n(nl,"P",{});var $U=s(pd);I5o=r($U,`Note:
Loading a model from its configuration file does `),dle=n($U,"STRONG",{});var vet=s(dle);q5o=r(vet,"not"),vet.forEach(t),N5o=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),qq=n($U,"A",{href:!0});var Fet=s(qq);j5o=r(Fet,"from_pretrained()"),Fet.forEach(t),D5o=r($U," to load the model weights."),$U.forEach(t),G5o=i(nl),cle=n(nl,"P",{});var Tet=s(cle);O5o=r(Tet,"Examples:"),Tet.forEach(t),V5o=i(nl),m(H3.$$.fragment,nl),nl.forEach(t),X5o=i(al),Oe=n(al,"DIV",{class:!0});var zt=s(Oe);m(U3.$$.fragment,zt),z5o=i(zt),fle=n(zt,"P",{});var Met=s(fle);Q5o=r(Met,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Met.forEach(t),W5o=i(zt),Ua=n(zt,"P",{});var qE=s(Ua);H5o=r(qE,"The model class to instantiate is selected based on the "),mle=n(qE,"CODE",{});var Eet=s(mle);U5o=r(Eet,"model_type"),Eet.forEach(t),J5o=r(qE,` property of the config object (either
passed as an argument or loaded from `),gle=n(qE,"CODE",{});var Cet=s(gle);Y5o=r(Cet,"pretrained_model_name_or_path"),Cet.forEach(t),K5o=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hle=n(qE,"CODE",{});var wet=s(hle);Z5o=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),e3o=r(qE,":"),qE.forEach(t),o3o=i(zt),y=n(zt,"UL",{});var L=s(y);f1=n(L,"LI",{});var swe=s(f1);ple=n(swe,"STRONG",{});var Aet=s(ple);r3o=r(Aet,"albert"),Aet.forEach(t),t3o=r(swe," \u2014 "),Nq=n(swe,"A",{href:!0});var yet=s(Nq);a3o=r(yet,"AlbertForSequenceClassification"),yet.forEach(t),n3o=r(swe," (ALBERT model)"),swe.forEach(t),s3o=i(L),m1=n(L,"LI",{});var lwe=s(m1);_le=n(lwe,"STRONG",{});var Let=s(_le);l3o=r(Let,"bart"),Let.forEach(t),i3o=r(lwe," \u2014 "),jq=n(lwe,"A",{href:!0});var xet=s(jq);d3o=r(xet,"BartForSequenceClassification"),xet.forEach(t),c3o=r(lwe," (BART model)"),lwe.forEach(t),f3o=i(L),g1=n(L,"LI",{});var iwe=s(g1);ule=n(iwe,"STRONG",{});var ket=s(ule);m3o=r(ket,"bert"),ket.forEach(t),g3o=r(iwe," \u2014 "),Dq=n(iwe,"A",{href:!0});var Set=s(Dq);h3o=r(Set,"BertForSequenceClassification"),Set.forEach(t),p3o=r(iwe," (BERT model)"),iwe.forEach(t),_3o=i(L),h1=n(L,"LI",{});var dwe=s(h1);ble=n(dwe,"STRONG",{});var Ret=s(ble);u3o=r(Ret,"big_bird"),Ret.forEach(t),b3o=r(dwe," \u2014 "),Gq=n(dwe,"A",{href:!0});var Bet=s(Gq);v3o=r(Bet,"BigBirdForSequenceClassification"),Bet.forEach(t),F3o=r(dwe," (BigBird model)"),dwe.forEach(t),T3o=i(L),p1=n(L,"LI",{});var cwe=s(p1);vle=n(cwe,"STRONG",{});var Pet=s(vle);M3o=r(Pet,"bigbird_pegasus"),Pet.forEach(t),E3o=r(cwe," \u2014 "),Oq=n(cwe,"A",{href:!0});var $et=s(Oq);C3o=r($et,"BigBirdPegasusForSequenceClassification"),$et.forEach(t),w3o=r(cwe," (BigBirdPegasus model)"),cwe.forEach(t),A3o=i(L),_1=n(L,"LI",{});var fwe=s(_1);Fle=n(fwe,"STRONG",{});var Iet=s(Fle);y3o=r(Iet,"camembert"),Iet.forEach(t),L3o=r(fwe," \u2014 "),Vq=n(fwe,"A",{href:!0});var qet=s(Vq);x3o=r(qet,"CamembertForSequenceClassification"),qet.forEach(t),k3o=r(fwe," (CamemBERT model)"),fwe.forEach(t),S3o=i(L),u1=n(L,"LI",{});var mwe=s(u1);Tle=n(mwe,"STRONG",{});var Net=s(Tle);R3o=r(Net,"canine"),Net.forEach(t),B3o=r(mwe," \u2014 "),Xq=n(mwe,"A",{href:!0});var jet=s(Xq);P3o=r(jet,"CanineForSequenceClassification"),jet.forEach(t),$3o=r(mwe," (Canine model)"),mwe.forEach(t),I3o=i(L),b1=n(L,"LI",{});var gwe=s(b1);Mle=n(gwe,"STRONG",{});var Det=s(Mle);q3o=r(Det,"convbert"),Det.forEach(t),N3o=r(gwe," \u2014 "),zq=n(gwe,"A",{href:!0});var Get=s(zq);j3o=r(Get,"ConvBertForSequenceClassification"),Get.forEach(t),D3o=r(gwe," (ConvBERT model)"),gwe.forEach(t),G3o=i(L),v1=n(L,"LI",{});var hwe=s(v1);Ele=n(hwe,"STRONG",{});var Oet=s(Ele);O3o=r(Oet,"ctrl"),Oet.forEach(t),V3o=r(hwe," \u2014 "),Qq=n(hwe,"A",{href:!0});var Vet=s(Qq);X3o=r(Vet,"CTRLForSequenceClassification"),Vet.forEach(t),z3o=r(hwe," (CTRL model)"),hwe.forEach(t),Q3o=i(L),F1=n(L,"LI",{});var pwe=s(F1);Cle=n(pwe,"STRONG",{});var Xet=s(Cle);W3o=r(Xet,"data2vec-text"),Xet.forEach(t),H3o=r(pwe," \u2014 "),Wq=n(pwe,"A",{href:!0});var zet=s(Wq);U3o=r(zet,"Data2VecTextForSequenceClassification"),zet.forEach(t),J3o=r(pwe," (Data2VecText model)"),pwe.forEach(t),Y3o=i(L),T1=n(L,"LI",{});var _we=s(T1);wle=n(_we,"STRONG",{});var Qet=s(wle);K3o=r(Qet,"deberta"),Qet.forEach(t),Z3o=r(_we," \u2014 "),Hq=n(_we,"A",{href:!0});var Wet=s(Hq);eCo=r(Wet,"DebertaForSequenceClassification"),Wet.forEach(t),oCo=r(_we," (DeBERTa model)"),_we.forEach(t),rCo=i(L),M1=n(L,"LI",{});var uwe=s(M1);Ale=n(uwe,"STRONG",{});var Het=s(Ale);tCo=r(Het,"deberta-v2"),Het.forEach(t),aCo=r(uwe," \u2014 "),Uq=n(uwe,"A",{href:!0});var Uet=s(Uq);nCo=r(Uet,"DebertaV2ForSequenceClassification"),Uet.forEach(t),sCo=r(uwe," (DeBERTa-v2 model)"),uwe.forEach(t),lCo=i(L),E1=n(L,"LI",{});var bwe=s(E1);yle=n(bwe,"STRONG",{});var Jet=s(yle);iCo=r(Jet,"distilbert"),Jet.forEach(t),dCo=r(bwe," \u2014 "),Jq=n(bwe,"A",{href:!0});var Yet=s(Jq);cCo=r(Yet,"DistilBertForSequenceClassification"),Yet.forEach(t),fCo=r(bwe," (DistilBERT model)"),bwe.forEach(t),mCo=i(L),C1=n(L,"LI",{});var vwe=s(C1);Lle=n(vwe,"STRONG",{});var Ket=s(Lle);gCo=r(Ket,"electra"),Ket.forEach(t),hCo=r(vwe," \u2014 "),Yq=n(vwe,"A",{href:!0});var Zet=s(Yq);pCo=r(Zet,"ElectraForSequenceClassification"),Zet.forEach(t),_Co=r(vwe," (ELECTRA model)"),vwe.forEach(t),uCo=i(L),w1=n(L,"LI",{});var Fwe=s(w1);xle=n(Fwe,"STRONG",{});var eot=s(xle);bCo=r(eot,"flaubert"),eot.forEach(t),vCo=r(Fwe," \u2014 "),Kq=n(Fwe,"A",{href:!0});var oot=s(Kq);FCo=r(oot,"FlaubertForSequenceClassification"),oot.forEach(t),TCo=r(Fwe," (FlauBERT model)"),Fwe.forEach(t),MCo=i(L),A1=n(L,"LI",{});var Twe=s(A1);kle=n(Twe,"STRONG",{});var rot=s(kle);ECo=r(rot,"fnet"),rot.forEach(t),CCo=r(Twe," \u2014 "),Zq=n(Twe,"A",{href:!0});var tot=s(Zq);wCo=r(tot,"FNetForSequenceClassification"),tot.forEach(t),ACo=r(Twe," (FNet model)"),Twe.forEach(t),yCo=i(L),y1=n(L,"LI",{});var Mwe=s(y1);Sle=n(Mwe,"STRONG",{});var aot=s(Sle);LCo=r(aot,"funnel"),aot.forEach(t),xCo=r(Mwe," \u2014 "),eN=n(Mwe,"A",{href:!0});var not=s(eN);kCo=r(not,"FunnelForSequenceClassification"),not.forEach(t),SCo=r(Mwe," (Funnel Transformer model)"),Mwe.forEach(t),RCo=i(L),L1=n(L,"LI",{});var Ewe=s(L1);Rle=n(Ewe,"STRONG",{});var sot=s(Rle);BCo=r(sot,"gpt2"),sot.forEach(t),PCo=r(Ewe," \u2014 "),oN=n(Ewe,"A",{href:!0});var lot=s(oN);$Co=r(lot,"GPT2ForSequenceClassification"),lot.forEach(t),ICo=r(Ewe," (OpenAI GPT-2 model)"),Ewe.forEach(t),qCo=i(L),x1=n(L,"LI",{});var Cwe=s(x1);Ble=n(Cwe,"STRONG",{});var iot=s(Ble);NCo=r(iot,"gpt_neo"),iot.forEach(t),jCo=r(Cwe," \u2014 "),rN=n(Cwe,"A",{href:!0});var dot=s(rN);DCo=r(dot,"GPTNeoForSequenceClassification"),dot.forEach(t),GCo=r(Cwe," (GPT Neo model)"),Cwe.forEach(t),OCo=i(L),k1=n(L,"LI",{});var wwe=s(k1);Ple=n(wwe,"STRONG",{});var cot=s(Ple);VCo=r(cot,"gptj"),cot.forEach(t),XCo=r(wwe," \u2014 "),tN=n(wwe,"A",{href:!0});var fot=s(tN);zCo=r(fot,"GPTJForSequenceClassification"),fot.forEach(t),QCo=r(wwe," (GPT-J model)"),wwe.forEach(t),WCo=i(L),S1=n(L,"LI",{});var Awe=s(S1);$le=n(Awe,"STRONG",{});var mot=s($le);HCo=r(mot,"ibert"),mot.forEach(t),UCo=r(Awe," \u2014 "),aN=n(Awe,"A",{href:!0});var got=s(aN);JCo=r(got,"IBertForSequenceClassification"),got.forEach(t),YCo=r(Awe," (I-BERT model)"),Awe.forEach(t),KCo=i(L),R1=n(L,"LI",{});var ywe=s(R1);Ile=n(ywe,"STRONG",{});var hot=s(Ile);ZCo=r(hot,"layoutlm"),hot.forEach(t),ewo=r(ywe," \u2014 "),nN=n(ywe,"A",{href:!0});var pot=s(nN);owo=r(pot,"LayoutLMForSequenceClassification"),pot.forEach(t),rwo=r(ywe," (LayoutLM model)"),ywe.forEach(t),two=i(L),B1=n(L,"LI",{});var Lwe=s(B1);qle=n(Lwe,"STRONG",{});var _ot=s(qle);awo=r(_ot,"layoutlmv2"),_ot.forEach(t),nwo=r(Lwe," \u2014 "),sN=n(Lwe,"A",{href:!0});var uot=s(sN);swo=r(uot,"LayoutLMv2ForSequenceClassification"),uot.forEach(t),lwo=r(Lwe," (LayoutLMv2 model)"),Lwe.forEach(t),iwo=i(L),P1=n(L,"LI",{});var xwe=s(P1);Nle=n(xwe,"STRONG",{});var bot=s(Nle);dwo=r(bot,"led"),bot.forEach(t),cwo=r(xwe," \u2014 "),lN=n(xwe,"A",{href:!0});var vot=s(lN);fwo=r(vot,"LEDForSequenceClassification"),vot.forEach(t),mwo=r(xwe," (LED model)"),xwe.forEach(t),gwo=i(L),$1=n(L,"LI",{});var kwe=s($1);jle=n(kwe,"STRONG",{});var Fot=s(jle);hwo=r(Fot,"longformer"),Fot.forEach(t),pwo=r(kwe," \u2014 "),iN=n(kwe,"A",{href:!0});var Tot=s(iN);_wo=r(Tot,"LongformerForSequenceClassification"),Tot.forEach(t),uwo=r(kwe," (Longformer model)"),kwe.forEach(t),bwo=i(L),I1=n(L,"LI",{});var Swe=s(I1);Dle=n(Swe,"STRONG",{});var Mot=s(Dle);vwo=r(Mot,"mbart"),Mot.forEach(t),Fwo=r(Swe," \u2014 "),dN=n(Swe,"A",{href:!0});var Eot=s(dN);Two=r(Eot,"MBartForSequenceClassification"),Eot.forEach(t),Mwo=r(Swe," (mBART model)"),Swe.forEach(t),Ewo=i(L),q1=n(L,"LI",{});var Rwe=s(q1);Gle=n(Rwe,"STRONG",{});var Cot=s(Gle);Cwo=r(Cot,"megatron-bert"),Cot.forEach(t),wwo=r(Rwe," \u2014 "),cN=n(Rwe,"A",{href:!0});var wot=s(cN);Awo=r(wot,"MegatronBertForSequenceClassification"),wot.forEach(t),ywo=r(Rwe," (MegatronBert model)"),Rwe.forEach(t),Lwo=i(L),N1=n(L,"LI",{});var Bwe=s(N1);Ole=n(Bwe,"STRONG",{});var Aot=s(Ole);xwo=r(Aot,"mobilebert"),Aot.forEach(t),kwo=r(Bwe," \u2014 "),fN=n(Bwe,"A",{href:!0});var yot=s(fN);Swo=r(yot,"MobileBertForSequenceClassification"),yot.forEach(t),Rwo=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),Bwo=i(L),j1=n(L,"LI",{});var Pwe=s(j1);Vle=n(Pwe,"STRONG",{});var Lot=s(Vle);Pwo=r(Lot,"mpnet"),Lot.forEach(t),$wo=r(Pwe," \u2014 "),mN=n(Pwe,"A",{href:!0});var xot=s(mN);Iwo=r(xot,"MPNetForSequenceClassification"),xot.forEach(t),qwo=r(Pwe," (MPNet model)"),Pwe.forEach(t),Nwo=i(L),D1=n(L,"LI",{});var $we=s(D1);Xle=n($we,"STRONG",{});var kot=s(Xle);jwo=r(kot,"nystromformer"),kot.forEach(t),Dwo=r($we," \u2014 "),gN=n($we,"A",{href:!0});var Sot=s(gN);Gwo=r(Sot,"NystromformerForSequenceClassification"),Sot.forEach(t),Owo=r($we," (Nystromformer model)"),$we.forEach(t),Vwo=i(L),G1=n(L,"LI",{});var Iwe=s(G1);zle=n(Iwe,"STRONG",{});var Rot=s(zle);Xwo=r(Rot,"openai-gpt"),Rot.forEach(t),zwo=r(Iwe," \u2014 "),hN=n(Iwe,"A",{href:!0});var Bot=s(hN);Qwo=r(Bot,"OpenAIGPTForSequenceClassification"),Bot.forEach(t),Wwo=r(Iwe," (OpenAI GPT model)"),Iwe.forEach(t),Hwo=i(L),O1=n(L,"LI",{});var qwe=s(O1);Qle=n(qwe,"STRONG",{});var Pot=s(Qle);Uwo=r(Pot,"perceiver"),Pot.forEach(t),Jwo=r(qwe," \u2014 "),pN=n(qwe,"A",{href:!0});var $ot=s(pN);Ywo=r($ot,"PerceiverForSequenceClassification"),$ot.forEach(t),Kwo=r(qwe," (Perceiver model)"),qwe.forEach(t),Zwo=i(L),V1=n(L,"LI",{});var Nwe=s(V1);Wle=n(Nwe,"STRONG",{});var Iot=s(Wle);eAo=r(Iot,"plbart"),Iot.forEach(t),oAo=r(Nwe," \u2014 "),_N=n(Nwe,"A",{href:!0});var qot=s(_N);rAo=r(qot,"PLBartForSequenceClassification"),qot.forEach(t),tAo=r(Nwe," (PLBart model)"),Nwe.forEach(t),aAo=i(L),X1=n(L,"LI",{});var jwe=s(X1);Hle=n(jwe,"STRONG",{});var Not=s(Hle);nAo=r(Not,"qdqbert"),Not.forEach(t),sAo=r(jwe," \u2014 "),uN=n(jwe,"A",{href:!0});var jot=s(uN);lAo=r(jot,"QDQBertForSequenceClassification"),jot.forEach(t),iAo=r(jwe," (QDQBert model)"),jwe.forEach(t),dAo=i(L),z1=n(L,"LI",{});var Dwe=s(z1);Ule=n(Dwe,"STRONG",{});var Dot=s(Ule);cAo=r(Dot,"reformer"),Dot.forEach(t),fAo=r(Dwe," \u2014 "),bN=n(Dwe,"A",{href:!0});var Got=s(bN);mAo=r(Got,"ReformerForSequenceClassification"),Got.forEach(t),gAo=r(Dwe," (Reformer model)"),Dwe.forEach(t),hAo=i(L),Q1=n(L,"LI",{});var Gwe=s(Q1);Jle=n(Gwe,"STRONG",{});var Oot=s(Jle);pAo=r(Oot,"rembert"),Oot.forEach(t),_Ao=r(Gwe," \u2014 "),vN=n(Gwe,"A",{href:!0});var Vot=s(vN);uAo=r(Vot,"RemBertForSequenceClassification"),Vot.forEach(t),bAo=r(Gwe," (RemBERT model)"),Gwe.forEach(t),vAo=i(L),W1=n(L,"LI",{});var Owe=s(W1);Yle=n(Owe,"STRONG",{});var Xot=s(Yle);FAo=r(Xot,"roberta"),Xot.forEach(t),TAo=r(Owe," \u2014 "),FN=n(Owe,"A",{href:!0});var zot=s(FN);MAo=r(zot,"RobertaForSequenceClassification"),zot.forEach(t),EAo=r(Owe," (RoBERTa model)"),Owe.forEach(t),CAo=i(L),H1=n(L,"LI",{});var Vwe=s(H1);Kle=n(Vwe,"STRONG",{});var Qot=s(Kle);wAo=r(Qot,"roformer"),Qot.forEach(t),AAo=r(Vwe," \u2014 "),TN=n(Vwe,"A",{href:!0});var Wot=s(TN);yAo=r(Wot,"RoFormerForSequenceClassification"),Wot.forEach(t),LAo=r(Vwe," (RoFormer model)"),Vwe.forEach(t),xAo=i(L),U1=n(L,"LI",{});var Xwe=s(U1);Zle=n(Xwe,"STRONG",{});var Hot=s(Zle);kAo=r(Hot,"squeezebert"),Hot.forEach(t),SAo=r(Xwe," \u2014 "),MN=n(Xwe,"A",{href:!0});var Uot=s(MN);RAo=r(Uot,"SqueezeBertForSequenceClassification"),Uot.forEach(t),BAo=r(Xwe," (SqueezeBERT model)"),Xwe.forEach(t),PAo=i(L),J1=n(L,"LI",{});var zwe=s(J1);eie=n(zwe,"STRONG",{});var Jot=s(eie);$Ao=r(Jot,"tapas"),Jot.forEach(t),IAo=r(zwe," \u2014 "),EN=n(zwe,"A",{href:!0});var Yot=s(EN);qAo=r(Yot,"TapasForSequenceClassification"),Yot.forEach(t),NAo=r(zwe," (TAPAS model)"),zwe.forEach(t),jAo=i(L),Y1=n(L,"LI",{});var Qwe=s(Y1);oie=n(Qwe,"STRONG",{});var Kot=s(oie);DAo=r(Kot,"tapex"),Kot.forEach(t),GAo=r(Qwe," \u2014 "),CN=n(Qwe,"A",{href:!0});var Zot=s(CN);OAo=r(Zot,"BartForSequenceClassification"),Zot.forEach(t),VAo=r(Qwe," (TAPEX model)"),Qwe.forEach(t),XAo=i(L),K1=n(L,"LI",{});var Wwe=s(K1);rie=n(Wwe,"STRONG",{});var ert=s(rie);zAo=r(ert,"transfo-xl"),ert.forEach(t),QAo=r(Wwe," \u2014 "),wN=n(Wwe,"A",{href:!0});var ort=s(wN);WAo=r(ort,"TransfoXLForSequenceClassification"),ort.forEach(t),HAo=r(Wwe," (Transformer-XL model)"),Wwe.forEach(t),UAo=i(L),Z1=n(L,"LI",{});var Hwe=s(Z1);tie=n(Hwe,"STRONG",{});var rrt=s(tie);JAo=r(rrt,"xlm"),rrt.forEach(t),YAo=r(Hwe," \u2014 "),AN=n(Hwe,"A",{href:!0});var trt=s(AN);KAo=r(trt,"XLMForSequenceClassification"),trt.forEach(t),ZAo=r(Hwe," (XLM model)"),Hwe.forEach(t),e0o=i(L),eb=n(L,"LI",{});var Uwe=s(eb);aie=n(Uwe,"STRONG",{});var art=s(aie);o0o=r(art,"xlm-roberta"),art.forEach(t),r0o=r(Uwe," \u2014 "),yN=n(Uwe,"A",{href:!0});var nrt=s(yN);t0o=r(nrt,"XLMRobertaForSequenceClassification"),nrt.forEach(t),a0o=r(Uwe," (XLM-RoBERTa model)"),Uwe.forEach(t),n0o=i(L),ob=n(L,"LI",{});var Jwe=s(ob);nie=n(Jwe,"STRONG",{});var srt=s(nie);s0o=r(srt,"xlm-roberta-xl"),srt.forEach(t),l0o=r(Jwe," \u2014 "),LN=n(Jwe,"A",{href:!0});var lrt=s(LN);i0o=r(lrt,"XLMRobertaXLForSequenceClassification"),lrt.forEach(t),d0o=r(Jwe," (XLM-RoBERTa-XL model)"),Jwe.forEach(t),c0o=i(L),rb=n(L,"LI",{});var Ywe=s(rb);sie=n(Ywe,"STRONG",{});var irt=s(sie);f0o=r(irt,"xlnet"),irt.forEach(t),m0o=r(Ywe," \u2014 "),xN=n(Ywe,"A",{href:!0});var drt=s(xN);g0o=r(drt,"XLNetForSequenceClassification"),drt.forEach(t),h0o=r(Ywe," (XLNet model)"),Ywe.forEach(t),p0o=i(L),tb=n(L,"LI",{});var Kwe=s(tb);lie=n(Kwe,"STRONG",{});var crt=s(lie);_0o=r(crt,"yoso"),crt.forEach(t),u0o=r(Kwe," \u2014 "),kN=n(Kwe,"A",{href:!0});var frt=s(kN);b0o=r(frt,"YosoForSequenceClassification"),frt.forEach(t),v0o=r(Kwe," (YOSO model)"),Kwe.forEach(t),L.forEach(t),F0o=i(zt),ab=n(zt,"P",{});var Zwe=s(ab);T0o=r(Zwe,"The model is set in evaluation mode by default using "),iie=n(Zwe,"CODE",{});var mrt=s(iie);M0o=r(mrt,"model.eval()"),mrt.forEach(t),E0o=r(Zwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=n(Zwe,"CODE",{});var grt=s(die);C0o=r(grt,"model.train()"),grt.forEach(t),Zwe.forEach(t),w0o=i(zt),cie=n(zt,"P",{});var hrt=s(cie);A0o=r(hrt,"Examples:"),hrt.forEach(t),y0o=i(zt),m(J3.$$.fragment,zt),zt.forEach(t),al.forEach(t),lBe=i(c),_d=n(c,"H2",{class:!0});var _$e=s(_d);nb=n(_$e,"A",{id:!0,class:!0,href:!0});var prt=s(nb);fie=n(prt,"SPAN",{});var _rt=s(fie);m(Y3.$$.fragment,_rt),_rt.forEach(t),prt.forEach(t),L0o=i(_$e),mie=n(_$e,"SPAN",{});var urt=s(mie);x0o=r(urt,"AutoModelForMultipleChoice"),urt.forEach(t),_$e.forEach(t),iBe=i(c),rr=n(c,"DIV",{class:!0});var sl=s(rr);m(K3.$$.fragment,sl),k0o=i(sl),ud=n(sl,"P",{});var IU=s(ud);S0o=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SN=n(IU,"A",{href:!0});var brt=s(SN);R0o=r(brt,"from_pretrained()"),brt.forEach(t),B0o=r(IU," class method or the "),RN=n(IU,"A",{href:!0});var vrt=s(RN);P0o=r(vrt,"from_config()"),vrt.forEach(t),$0o=r(IU,` class
method.`),IU.forEach(t),I0o=i(sl),Z3=n(sl,"P",{});var u$e=s(Z3);q0o=r(u$e,"This class cannot be instantiated directly using "),gie=n(u$e,"CODE",{});var Frt=s(gie);N0o=r(Frt,"__init__()"),Frt.forEach(t),j0o=r(u$e," (throws an error)."),u$e.forEach(t),D0o=i(sl),Jr=n(sl,"DIV",{class:!0});var ll=s(Jr);m(eC.$$.fragment,ll),G0o=i(ll),hie=n(ll,"P",{});var Trt=s(hie);O0o=r(Trt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Trt.forEach(t),V0o=i(ll),bd=n(ll,"P",{});var qU=s(bd);X0o=r(qU,`Note:
Loading a model from its configuration file does `),pie=n(qU,"STRONG",{});var Mrt=s(pie);z0o=r(Mrt,"not"),Mrt.forEach(t),Q0o=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BN=n(qU,"A",{href:!0});var Ert=s(BN);W0o=r(Ert,"from_pretrained()"),Ert.forEach(t),H0o=r(qU," to load the model weights."),qU.forEach(t),U0o=i(ll),_ie=n(ll,"P",{});var Crt=s(_ie);J0o=r(Crt,"Examples:"),Crt.forEach(t),Y0o=i(ll),m(oC.$$.fragment,ll),ll.forEach(t),K0o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(rC.$$.fragment,Qt),Z0o=i(Qt),uie=n(Qt,"P",{});var wrt=s(uie);eyo=r(wrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wrt.forEach(t),oyo=i(Qt),Ja=n(Qt,"P",{});var NE=s(Ja);ryo=r(NE,"The model class to instantiate is selected based on the "),bie=n(NE,"CODE",{});var Art=s(bie);tyo=r(Art,"model_type"),Art.forEach(t),ayo=r(NE,` property of the config object (either
passed as an argument or loaded from `),vie=n(NE,"CODE",{});var yrt=s(vie);nyo=r(yrt,"pretrained_model_name_or_path"),yrt.forEach(t),syo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(NE,"CODE",{});var Lrt=s(Fie);lyo=r(Lrt,"pretrained_model_name_or_path"),Lrt.forEach(t),iyo=r(NE,":"),NE.forEach(t),dyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);sb=n(O,"LI",{});var eAe=s(sb);Tie=n(eAe,"STRONG",{});var xrt=s(Tie);cyo=r(xrt,"albert"),xrt.forEach(t),fyo=r(eAe," \u2014 "),PN=n(eAe,"A",{href:!0});var krt=s(PN);myo=r(krt,"AlbertForMultipleChoice"),krt.forEach(t),gyo=r(eAe," (ALBERT model)"),eAe.forEach(t),hyo=i(O),lb=n(O,"LI",{});var oAe=s(lb);Mie=n(oAe,"STRONG",{});var Srt=s(Mie);pyo=r(Srt,"bert"),Srt.forEach(t),_yo=r(oAe," \u2014 "),$N=n(oAe,"A",{href:!0});var Rrt=s($N);uyo=r(Rrt,"BertForMultipleChoice"),Rrt.forEach(t),byo=r(oAe," (BERT model)"),oAe.forEach(t),vyo=i(O),ib=n(O,"LI",{});var rAe=s(ib);Eie=n(rAe,"STRONG",{});var Brt=s(Eie);Fyo=r(Brt,"big_bird"),Brt.forEach(t),Tyo=r(rAe," \u2014 "),IN=n(rAe,"A",{href:!0});var Prt=s(IN);Myo=r(Prt,"BigBirdForMultipleChoice"),Prt.forEach(t),Eyo=r(rAe," (BigBird model)"),rAe.forEach(t),Cyo=i(O),db=n(O,"LI",{});var tAe=s(db);Cie=n(tAe,"STRONG",{});var $rt=s(Cie);wyo=r($rt,"camembert"),$rt.forEach(t),Ayo=r(tAe," \u2014 "),qN=n(tAe,"A",{href:!0});var Irt=s(qN);yyo=r(Irt,"CamembertForMultipleChoice"),Irt.forEach(t),Lyo=r(tAe," (CamemBERT model)"),tAe.forEach(t),xyo=i(O),cb=n(O,"LI",{});var aAe=s(cb);wie=n(aAe,"STRONG",{});var qrt=s(wie);kyo=r(qrt,"canine"),qrt.forEach(t),Syo=r(aAe," \u2014 "),NN=n(aAe,"A",{href:!0});var Nrt=s(NN);Ryo=r(Nrt,"CanineForMultipleChoice"),Nrt.forEach(t),Byo=r(aAe," (Canine model)"),aAe.forEach(t),Pyo=i(O),fb=n(O,"LI",{});var nAe=s(fb);Aie=n(nAe,"STRONG",{});var jrt=s(Aie);$yo=r(jrt,"convbert"),jrt.forEach(t),Iyo=r(nAe," \u2014 "),jN=n(nAe,"A",{href:!0});var Drt=s(jN);qyo=r(Drt,"ConvBertForMultipleChoice"),Drt.forEach(t),Nyo=r(nAe," (ConvBERT model)"),nAe.forEach(t),jyo=i(O),mb=n(O,"LI",{});var sAe=s(mb);yie=n(sAe,"STRONG",{});var Grt=s(yie);Dyo=r(Grt,"data2vec-text"),Grt.forEach(t),Gyo=r(sAe," \u2014 "),DN=n(sAe,"A",{href:!0});var Ort=s(DN);Oyo=r(Ort,"Data2VecTextForMultipleChoice"),Ort.forEach(t),Vyo=r(sAe," (Data2VecText model)"),sAe.forEach(t),Xyo=i(O),gb=n(O,"LI",{});var lAe=s(gb);Lie=n(lAe,"STRONG",{});var Vrt=s(Lie);zyo=r(Vrt,"distilbert"),Vrt.forEach(t),Qyo=r(lAe," \u2014 "),GN=n(lAe,"A",{href:!0});var Xrt=s(GN);Wyo=r(Xrt,"DistilBertForMultipleChoice"),Xrt.forEach(t),Hyo=r(lAe," (DistilBERT model)"),lAe.forEach(t),Uyo=i(O),hb=n(O,"LI",{});var iAe=s(hb);xie=n(iAe,"STRONG",{});var zrt=s(xie);Jyo=r(zrt,"electra"),zrt.forEach(t),Yyo=r(iAe," \u2014 "),ON=n(iAe,"A",{href:!0});var Qrt=s(ON);Kyo=r(Qrt,"ElectraForMultipleChoice"),Qrt.forEach(t),Zyo=r(iAe," (ELECTRA model)"),iAe.forEach(t),eLo=i(O),pb=n(O,"LI",{});var dAe=s(pb);kie=n(dAe,"STRONG",{});var Wrt=s(kie);oLo=r(Wrt,"flaubert"),Wrt.forEach(t),rLo=r(dAe," \u2014 "),VN=n(dAe,"A",{href:!0});var Hrt=s(VN);tLo=r(Hrt,"FlaubertForMultipleChoice"),Hrt.forEach(t),aLo=r(dAe," (FlauBERT model)"),dAe.forEach(t),nLo=i(O),_b=n(O,"LI",{});var cAe=s(_b);Sie=n(cAe,"STRONG",{});var Urt=s(Sie);sLo=r(Urt,"fnet"),Urt.forEach(t),lLo=r(cAe," \u2014 "),XN=n(cAe,"A",{href:!0});var Jrt=s(XN);iLo=r(Jrt,"FNetForMultipleChoice"),Jrt.forEach(t),dLo=r(cAe," (FNet model)"),cAe.forEach(t),cLo=i(O),ub=n(O,"LI",{});var fAe=s(ub);Rie=n(fAe,"STRONG",{});var Yrt=s(Rie);fLo=r(Yrt,"funnel"),Yrt.forEach(t),mLo=r(fAe," \u2014 "),zN=n(fAe,"A",{href:!0});var Krt=s(zN);gLo=r(Krt,"FunnelForMultipleChoice"),Krt.forEach(t),hLo=r(fAe," (Funnel Transformer model)"),fAe.forEach(t),pLo=i(O),bb=n(O,"LI",{});var mAe=s(bb);Bie=n(mAe,"STRONG",{});var Zrt=s(Bie);_Lo=r(Zrt,"ibert"),Zrt.forEach(t),uLo=r(mAe," \u2014 "),QN=n(mAe,"A",{href:!0});var ett=s(QN);bLo=r(ett,"IBertForMultipleChoice"),ett.forEach(t),vLo=r(mAe," (I-BERT model)"),mAe.forEach(t),FLo=i(O),vb=n(O,"LI",{});var gAe=s(vb);Pie=n(gAe,"STRONG",{});var ott=s(Pie);TLo=r(ott,"longformer"),ott.forEach(t),MLo=r(gAe," \u2014 "),WN=n(gAe,"A",{href:!0});var rtt=s(WN);ELo=r(rtt,"LongformerForMultipleChoice"),rtt.forEach(t),CLo=r(gAe," (Longformer model)"),gAe.forEach(t),wLo=i(O),Fb=n(O,"LI",{});var hAe=s(Fb);$ie=n(hAe,"STRONG",{});var ttt=s($ie);ALo=r(ttt,"megatron-bert"),ttt.forEach(t),yLo=r(hAe," \u2014 "),HN=n(hAe,"A",{href:!0});var att=s(HN);LLo=r(att,"MegatronBertForMultipleChoice"),att.forEach(t),xLo=r(hAe," (MegatronBert model)"),hAe.forEach(t),kLo=i(O),Tb=n(O,"LI",{});var pAe=s(Tb);Iie=n(pAe,"STRONG",{});var ntt=s(Iie);SLo=r(ntt,"mobilebert"),ntt.forEach(t),RLo=r(pAe," \u2014 "),UN=n(pAe,"A",{href:!0});var stt=s(UN);BLo=r(stt,"MobileBertForMultipleChoice"),stt.forEach(t),PLo=r(pAe," (MobileBERT model)"),pAe.forEach(t),$Lo=i(O),Mb=n(O,"LI",{});var _Ae=s(Mb);qie=n(_Ae,"STRONG",{});var ltt=s(qie);ILo=r(ltt,"mpnet"),ltt.forEach(t),qLo=r(_Ae," \u2014 "),JN=n(_Ae,"A",{href:!0});var itt=s(JN);NLo=r(itt,"MPNetForMultipleChoice"),itt.forEach(t),jLo=r(_Ae," (MPNet model)"),_Ae.forEach(t),DLo=i(O),Eb=n(O,"LI",{});var uAe=s(Eb);Nie=n(uAe,"STRONG",{});var dtt=s(Nie);GLo=r(dtt,"nystromformer"),dtt.forEach(t),OLo=r(uAe," \u2014 "),YN=n(uAe,"A",{href:!0});var ctt=s(YN);VLo=r(ctt,"NystromformerForMultipleChoice"),ctt.forEach(t),XLo=r(uAe," (Nystromformer model)"),uAe.forEach(t),zLo=i(O),Cb=n(O,"LI",{});var bAe=s(Cb);jie=n(bAe,"STRONG",{});var ftt=s(jie);QLo=r(ftt,"qdqbert"),ftt.forEach(t),WLo=r(bAe," \u2014 "),KN=n(bAe,"A",{href:!0});var mtt=s(KN);HLo=r(mtt,"QDQBertForMultipleChoice"),mtt.forEach(t),ULo=r(bAe," (QDQBert model)"),bAe.forEach(t),JLo=i(O),wb=n(O,"LI",{});var vAe=s(wb);Die=n(vAe,"STRONG",{});var gtt=s(Die);YLo=r(gtt,"rembert"),gtt.forEach(t),KLo=r(vAe," \u2014 "),ZN=n(vAe,"A",{href:!0});var htt=s(ZN);ZLo=r(htt,"RemBertForMultipleChoice"),htt.forEach(t),e7o=r(vAe," (RemBERT model)"),vAe.forEach(t),o7o=i(O),Ab=n(O,"LI",{});var FAe=s(Ab);Gie=n(FAe,"STRONG",{});var ptt=s(Gie);r7o=r(ptt,"roberta"),ptt.forEach(t),t7o=r(FAe," \u2014 "),ej=n(FAe,"A",{href:!0});var _tt=s(ej);a7o=r(_tt,"RobertaForMultipleChoice"),_tt.forEach(t),n7o=r(FAe," (RoBERTa model)"),FAe.forEach(t),s7o=i(O),yb=n(O,"LI",{});var TAe=s(yb);Oie=n(TAe,"STRONG",{});var utt=s(Oie);l7o=r(utt,"roformer"),utt.forEach(t),i7o=r(TAe," \u2014 "),oj=n(TAe,"A",{href:!0});var btt=s(oj);d7o=r(btt,"RoFormerForMultipleChoice"),btt.forEach(t),c7o=r(TAe," (RoFormer model)"),TAe.forEach(t),f7o=i(O),Lb=n(O,"LI",{});var MAe=s(Lb);Vie=n(MAe,"STRONG",{});var vtt=s(Vie);m7o=r(vtt,"squeezebert"),vtt.forEach(t),g7o=r(MAe," \u2014 "),rj=n(MAe,"A",{href:!0});var Ftt=s(rj);h7o=r(Ftt,"SqueezeBertForMultipleChoice"),Ftt.forEach(t),p7o=r(MAe," (SqueezeBERT model)"),MAe.forEach(t),_7o=i(O),xb=n(O,"LI",{});var EAe=s(xb);Xie=n(EAe,"STRONG",{});var Ttt=s(Xie);u7o=r(Ttt,"xlm"),Ttt.forEach(t),b7o=r(EAe," \u2014 "),tj=n(EAe,"A",{href:!0});var Mtt=s(tj);v7o=r(Mtt,"XLMForMultipleChoice"),Mtt.forEach(t),F7o=r(EAe," (XLM model)"),EAe.forEach(t),T7o=i(O),kb=n(O,"LI",{});var CAe=s(kb);zie=n(CAe,"STRONG",{});var Ett=s(zie);M7o=r(Ett,"xlm-roberta"),Ett.forEach(t),E7o=r(CAe," \u2014 "),aj=n(CAe,"A",{href:!0});var Ctt=s(aj);C7o=r(Ctt,"XLMRobertaForMultipleChoice"),Ctt.forEach(t),w7o=r(CAe," (XLM-RoBERTa model)"),CAe.forEach(t),A7o=i(O),Sb=n(O,"LI",{});var wAe=s(Sb);Qie=n(wAe,"STRONG",{});var wtt=s(Qie);y7o=r(wtt,"xlm-roberta-xl"),wtt.forEach(t),L7o=r(wAe," \u2014 "),nj=n(wAe,"A",{href:!0});var Att=s(nj);x7o=r(Att,"XLMRobertaXLForMultipleChoice"),Att.forEach(t),k7o=r(wAe," (XLM-RoBERTa-XL model)"),wAe.forEach(t),S7o=i(O),Rb=n(O,"LI",{});var AAe=s(Rb);Wie=n(AAe,"STRONG",{});var ytt=s(Wie);R7o=r(ytt,"xlnet"),ytt.forEach(t),B7o=r(AAe," \u2014 "),sj=n(AAe,"A",{href:!0});var Ltt=s(sj);P7o=r(Ltt,"XLNetForMultipleChoice"),Ltt.forEach(t),$7o=r(AAe," (XLNet model)"),AAe.forEach(t),I7o=i(O),Bb=n(O,"LI",{});var yAe=s(Bb);Hie=n(yAe,"STRONG",{});var xtt=s(Hie);q7o=r(xtt,"yoso"),xtt.forEach(t),N7o=r(yAe," \u2014 "),lj=n(yAe,"A",{href:!0});var ktt=s(lj);j7o=r(ktt,"YosoForMultipleChoice"),ktt.forEach(t),D7o=r(yAe," (YOSO model)"),yAe.forEach(t),O.forEach(t),G7o=i(Qt),Pb=n(Qt,"P",{});var LAe=s(Pb);O7o=r(LAe,"The model is set in evaluation mode by default using "),Uie=n(LAe,"CODE",{});var Stt=s(Uie);V7o=r(Stt,"model.eval()"),Stt.forEach(t),X7o=r(LAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(LAe,"CODE",{});var Rtt=s(Jie);z7o=r(Rtt,"model.train()"),Rtt.forEach(t),LAe.forEach(t),Q7o=i(Qt),Yie=n(Qt,"P",{});var Btt=s(Yie);W7o=r(Btt,"Examples:"),Btt.forEach(t),H7o=i(Qt),m(tC.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),dBe=i(c),vd=n(c,"H2",{class:!0});var b$e=s(vd);$b=n(b$e,"A",{id:!0,class:!0,href:!0});var Ptt=s($b);Kie=n(Ptt,"SPAN",{});var $tt=s(Kie);m(aC.$$.fragment,$tt),$tt.forEach(t),Ptt.forEach(t),U7o=i(b$e),Zie=n(b$e,"SPAN",{});var Itt=s(Zie);J7o=r(Itt,"AutoModelForNextSentencePrediction"),Itt.forEach(t),b$e.forEach(t),cBe=i(c),tr=n(c,"DIV",{class:!0});var il=s(tr);m(nC.$$.fragment,il),Y7o=i(il),Fd=n(il,"P",{});var NU=s(Fd);K7o=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ij=n(NU,"A",{href:!0});var qtt=s(ij);Z7o=r(qtt,"from_pretrained()"),qtt.forEach(t),exo=r(NU," class method or the "),dj=n(NU,"A",{href:!0});var Ntt=s(dj);oxo=r(Ntt,"from_config()"),Ntt.forEach(t),rxo=r(NU,` class
method.`),NU.forEach(t),txo=i(il),sC=n(il,"P",{});var v$e=s(sC);axo=r(v$e,"This class cannot be instantiated directly using "),ede=n(v$e,"CODE",{});var jtt=s(ede);nxo=r(jtt,"__init__()"),jtt.forEach(t),sxo=r(v$e," (throws an error)."),v$e.forEach(t),lxo=i(il),Yr=n(il,"DIV",{class:!0});var dl=s(Yr);m(lC.$$.fragment,dl),ixo=i(dl),ode=n(dl,"P",{});var Dtt=s(ode);dxo=r(Dtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dtt.forEach(t),cxo=i(dl),Td=n(dl,"P",{});var jU=s(Td);fxo=r(jU,`Note:
Loading a model from its configuration file does `),rde=n(jU,"STRONG",{});var Gtt=s(rde);mxo=r(Gtt,"not"),Gtt.forEach(t),gxo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(jU,"A",{href:!0});var Ott=s(cj);hxo=r(Ott,"from_pretrained()"),Ott.forEach(t),pxo=r(jU," to load the model weights."),jU.forEach(t),_xo=i(dl),tde=n(dl,"P",{});var Vtt=s(tde);uxo=r(Vtt,"Examples:"),Vtt.forEach(t),bxo=i(dl),m(iC.$$.fragment,dl),dl.forEach(t),vxo=i(il),Xe=n(il,"DIV",{class:!0});var Wt=s(Xe);m(dC.$$.fragment,Wt),Fxo=i(Wt),ade=n(Wt,"P",{});var Xtt=s(ade);Txo=r(Xtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xtt.forEach(t),Mxo=i(Wt),Ya=n(Wt,"P",{});var jE=s(Ya);Exo=r(jE,"The model class to instantiate is selected based on the "),nde=n(jE,"CODE",{});var ztt=s(nde);Cxo=r(ztt,"model_type"),ztt.forEach(t),wxo=r(jE,` property of the config object (either
passed as an argument or loaded from `),sde=n(jE,"CODE",{});var Qtt=s(sde);Axo=r(Qtt,"pretrained_model_name_or_path"),Qtt.forEach(t),yxo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lde=n(jE,"CODE",{});var Wtt=s(lde);Lxo=r(Wtt,"pretrained_model_name_or_path"),Wtt.forEach(t),xxo=r(jE,":"),jE.forEach(t),kxo=i(Wt),da=n(Wt,"UL",{});var cl=s(da);Ib=n(cl,"LI",{});var xAe=s(Ib);ide=n(xAe,"STRONG",{});var Htt=s(ide);Sxo=r(Htt,"bert"),Htt.forEach(t),Rxo=r(xAe," \u2014 "),fj=n(xAe,"A",{href:!0});var Utt=s(fj);Bxo=r(Utt,"BertForNextSentencePrediction"),Utt.forEach(t),Pxo=r(xAe," (BERT model)"),xAe.forEach(t),$xo=i(cl),qb=n(cl,"LI",{});var kAe=s(qb);dde=n(kAe,"STRONG",{});var Jtt=s(dde);Ixo=r(Jtt,"fnet"),Jtt.forEach(t),qxo=r(kAe," \u2014 "),mj=n(kAe,"A",{href:!0});var Ytt=s(mj);Nxo=r(Ytt,"FNetForNextSentencePrediction"),Ytt.forEach(t),jxo=r(kAe," (FNet model)"),kAe.forEach(t),Dxo=i(cl),Nb=n(cl,"LI",{});var SAe=s(Nb);cde=n(SAe,"STRONG",{});var Ktt=s(cde);Gxo=r(Ktt,"megatron-bert"),Ktt.forEach(t),Oxo=r(SAe," \u2014 "),gj=n(SAe,"A",{href:!0});var Ztt=s(gj);Vxo=r(Ztt,"MegatronBertForNextSentencePrediction"),Ztt.forEach(t),Xxo=r(SAe," (MegatronBert model)"),SAe.forEach(t),zxo=i(cl),jb=n(cl,"LI",{});var RAe=s(jb);fde=n(RAe,"STRONG",{});var eat=s(fde);Qxo=r(eat,"mobilebert"),eat.forEach(t),Wxo=r(RAe," \u2014 "),hj=n(RAe,"A",{href:!0});var oat=s(hj);Hxo=r(oat,"MobileBertForNextSentencePrediction"),oat.forEach(t),Uxo=r(RAe," (MobileBERT model)"),RAe.forEach(t),Jxo=i(cl),Db=n(cl,"LI",{});var BAe=s(Db);mde=n(BAe,"STRONG",{});var rat=s(mde);Yxo=r(rat,"qdqbert"),rat.forEach(t),Kxo=r(BAe," \u2014 "),pj=n(BAe,"A",{href:!0});var tat=s(pj);Zxo=r(tat,"QDQBertForNextSentencePrediction"),tat.forEach(t),eko=r(BAe," (QDQBert model)"),BAe.forEach(t),cl.forEach(t),oko=i(Wt),Gb=n(Wt,"P",{});var PAe=s(Gb);rko=r(PAe,"The model is set in evaluation mode by default using "),gde=n(PAe,"CODE",{});var aat=s(gde);tko=r(aat,"model.eval()"),aat.forEach(t),ako=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hde=n(PAe,"CODE",{});var nat=s(hde);nko=r(nat,"model.train()"),nat.forEach(t),PAe.forEach(t),sko=i(Wt),pde=n(Wt,"P",{});var sat=s(pde);lko=r(sat,"Examples:"),sat.forEach(t),iko=i(Wt),m(cC.$$.fragment,Wt),Wt.forEach(t),il.forEach(t),fBe=i(c),Md=n(c,"H2",{class:!0});var F$e=s(Md);Ob=n(F$e,"A",{id:!0,class:!0,href:!0});var lat=s(Ob);_de=n(lat,"SPAN",{});var iat=s(_de);m(fC.$$.fragment,iat),iat.forEach(t),lat.forEach(t),dko=i(F$e),ude=n(F$e,"SPAN",{});var dat=s(ude);cko=r(dat,"AutoModelForTokenClassification"),dat.forEach(t),F$e.forEach(t),mBe=i(c),ar=n(c,"DIV",{class:!0});var fl=s(ar);m(mC.$$.fragment,fl),fko=i(fl),Ed=n(fl,"P",{});var DU=s(Ed);mko=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_j=n(DU,"A",{href:!0});var cat=s(_j);gko=r(cat,"from_pretrained()"),cat.forEach(t),hko=r(DU," class method or the "),uj=n(DU,"A",{href:!0});var fat=s(uj);pko=r(fat,"from_config()"),fat.forEach(t),_ko=r(DU,` class
method.`),DU.forEach(t),uko=i(fl),gC=n(fl,"P",{});var T$e=s(gC);bko=r(T$e,"This class cannot be instantiated directly using "),bde=n(T$e,"CODE",{});var mat=s(bde);vko=r(mat,"__init__()"),mat.forEach(t),Fko=r(T$e," (throws an error)."),T$e.forEach(t),Tko=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(hC.$$.fragment,ml),Mko=i(ml),vde=n(ml,"P",{});var gat=s(vde);Eko=r(gat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gat.forEach(t),Cko=i(ml),Cd=n(ml,"P",{});var GU=s(Cd);wko=r(GU,`Note:
Loading a model from its configuration file does `),Fde=n(GU,"STRONG",{});var hat=s(Fde);Ako=r(hat,"not"),hat.forEach(t),yko=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bj=n(GU,"A",{href:!0});var pat=s(bj);Lko=r(pat,"from_pretrained()"),pat.forEach(t),xko=r(GU," to load the model weights."),GU.forEach(t),kko=i(ml),Tde=n(ml,"P",{});var _at=s(Tde);Sko=r(_at,"Examples:"),_at.forEach(t),Rko=i(ml),m(pC.$$.fragment,ml),ml.forEach(t),Bko=i(fl),ze=n(fl,"DIV",{class:!0});var Ht=s(ze);m(_C.$$.fragment,Ht),Pko=i(Ht),Mde=n(Ht,"P",{});var uat=s(Mde);$ko=r(uat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uat.forEach(t),Iko=i(Ht),Ka=n(Ht,"P",{});var DE=s(Ka);qko=r(DE,"The model class to instantiate is selected based on the "),Ede=n(DE,"CODE",{});var bat=s(Ede);Nko=r(bat,"model_type"),bat.forEach(t),jko=r(DE,` property of the config object (either
passed as an argument or loaded from `),Cde=n(DE,"CODE",{});var vat=s(Cde);Dko=r(vat,"pretrained_model_name_or_path"),vat.forEach(t),Gko=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(DE,"CODE",{});var Fat=s(wde);Oko=r(Fat,"pretrained_model_name_or_path"),Fat.forEach(t),Vko=r(DE,":"),DE.forEach(t),Xko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Vb=n(D,"LI",{});var $Ae=s(Vb);Ade=n($Ae,"STRONG",{});var Tat=s(Ade);zko=r(Tat,"albert"),Tat.forEach(t),Qko=r($Ae," \u2014 "),vj=n($Ae,"A",{href:!0});var Mat=s(vj);Wko=r(Mat,"AlbertForTokenClassification"),Mat.forEach(t),Hko=r($Ae," (ALBERT model)"),$Ae.forEach(t),Uko=i(D),Xb=n(D,"LI",{});var IAe=s(Xb);yde=n(IAe,"STRONG",{});var Eat=s(yde);Jko=r(Eat,"bert"),Eat.forEach(t),Yko=r(IAe," \u2014 "),Fj=n(IAe,"A",{href:!0});var Cat=s(Fj);Kko=r(Cat,"BertForTokenClassification"),Cat.forEach(t),Zko=r(IAe," (BERT model)"),IAe.forEach(t),eSo=i(D),zb=n(D,"LI",{});var qAe=s(zb);Lde=n(qAe,"STRONG",{});var wat=s(Lde);oSo=r(wat,"big_bird"),wat.forEach(t),rSo=r(qAe," \u2014 "),Tj=n(qAe,"A",{href:!0});var Aat=s(Tj);tSo=r(Aat,"BigBirdForTokenClassification"),Aat.forEach(t),aSo=r(qAe," (BigBird model)"),qAe.forEach(t),nSo=i(D),Qb=n(D,"LI",{});var NAe=s(Qb);xde=n(NAe,"STRONG",{});var yat=s(xde);sSo=r(yat,"camembert"),yat.forEach(t),lSo=r(NAe," \u2014 "),Mj=n(NAe,"A",{href:!0});var Lat=s(Mj);iSo=r(Lat,"CamembertForTokenClassification"),Lat.forEach(t),dSo=r(NAe," (CamemBERT model)"),NAe.forEach(t),cSo=i(D),Wb=n(D,"LI",{});var jAe=s(Wb);kde=n(jAe,"STRONG",{});var xat=s(kde);fSo=r(xat,"canine"),xat.forEach(t),mSo=r(jAe," \u2014 "),Ej=n(jAe,"A",{href:!0});var kat=s(Ej);gSo=r(kat,"CanineForTokenClassification"),kat.forEach(t),hSo=r(jAe," (Canine model)"),jAe.forEach(t),pSo=i(D),Hb=n(D,"LI",{});var DAe=s(Hb);Sde=n(DAe,"STRONG",{});var Sat=s(Sde);_So=r(Sat,"convbert"),Sat.forEach(t),uSo=r(DAe," \u2014 "),Cj=n(DAe,"A",{href:!0});var Rat=s(Cj);bSo=r(Rat,"ConvBertForTokenClassification"),Rat.forEach(t),vSo=r(DAe," (ConvBERT model)"),DAe.forEach(t),FSo=i(D),Ub=n(D,"LI",{});var GAe=s(Ub);Rde=n(GAe,"STRONG",{});var Bat=s(Rde);TSo=r(Bat,"data2vec-text"),Bat.forEach(t),MSo=r(GAe," \u2014 "),wj=n(GAe,"A",{href:!0});var Pat=s(wj);ESo=r(Pat,"Data2VecTextForTokenClassification"),Pat.forEach(t),CSo=r(GAe," (Data2VecText model)"),GAe.forEach(t),wSo=i(D),Jb=n(D,"LI",{});var OAe=s(Jb);Bde=n(OAe,"STRONG",{});var $at=s(Bde);ASo=r($at,"deberta"),$at.forEach(t),ySo=r(OAe," \u2014 "),Aj=n(OAe,"A",{href:!0});var Iat=s(Aj);LSo=r(Iat,"DebertaForTokenClassification"),Iat.forEach(t),xSo=r(OAe," (DeBERTa model)"),OAe.forEach(t),kSo=i(D),Yb=n(D,"LI",{});var VAe=s(Yb);Pde=n(VAe,"STRONG",{});var qat=s(Pde);SSo=r(qat,"deberta-v2"),qat.forEach(t),RSo=r(VAe," \u2014 "),yj=n(VAe,"A",{href:!0});var Nat=s(yj);BSo=r(Nat,"DebertaV2ForTokenClassification"),Nat.forEach(t),PSo=r(VAe," (DeBERTa-v2 model)"),VAe.forEach(t),$So=i(D),Kb=n(D,"LI",{});var XAe=s(Kb);$de=n(XAe,"STRONG",{});var jat=s($de);ISo=r(jat,"distilbert"),jat.forEach(t),qSo=r(XAe," \u2014 "),Lj=n(XAe,"A",{href:!0});var Dat=s(Lj);NSo=r(Dat,"DistilBertForTokenClassification"),Dat.forEach(t),jSo=r(XAe," (DistilBERT model)"),XAe.forEach(t),DSo=i(D),Zb=n(D,"LI",{});var zAe=s(Zb);Ide=n(zAe,"STRONG",{});var Gat=s(Ide);GSo=r(Gat,"electra"),Gat.forEach(t),OSo=r(zAe," \u2014 "),xj=n(zAe,"A",{href:!0});var Oat=s(xj);VSo=r(Oat,"ElectraForTokenClassification"),Oat.forEach(t),XSo=r(zAe," (ELECTRA model)"),zAe.forEach(t),zSo=i(D),e2=n(D,"LI",{});var QAe=s(e2);qde=n(QAe,"STRONG",{});var Vat=s(qde);QSo=r(Vat,"flaubert"),Vat.forEach(t),WSo=r(QAe," \u2014 "),kj=n(QAe,"A",{href:!0});var Xat=s(kj);HSo=r(Xat,"FlaubertForTokenClassification"),Xat.forEach(t),USo=r(QAe," (FlauBERT model)"),QAe.forEach(t),JSo=i(D),o2=n(D,"LI",{});var WAe=s(o2);Nde=n(WAe,"STRONG",{});var zat=s(Nde);YSo=r(zat,"fnet"),zat.forEach(t),KSo=r(WAe," \u2014 "),Sj=n(WAe,"A",{href:!0});var Qat=s(Sj);ZSo=r(Qat,"FNetForTokenClassification"),Qat.forEach(t),eRo=r(WAe," (FNet model)"),WAe.forEach(t),oRo=i(D),r2=n(D,"LI",{});var HAe=s(r2);jde=n(HAe,"STRONG",{});var Wat=s(jde);rRo=r(Wat,"funnel"),Wat.forEach(t),tRo=r(HAe," \u2014 "),Rj=n(HAe,"A",{href:!0});var Hat=s(Rj);aRo=r(Hat,"FunnelForTokenClassification"),Hat.forEach(t),nRo=r(HAe," (Funnel Transformer model)"),HAe.forEach(t),sRo=i(D),t2=n(D,"LI",{});var UAe=s(t2);Dde=n(UAe,"STRONG",{});var Uat=s(Dde);lRo=r(Uat,"gpt2"),Uat.forEach(t),iRo=r(UAe," \u2014 "),Bj=n(UAe,"A",{href:!0});var Jat=s(Bj);dRo=r(Jat,"GPT2ForTokenClassification"),Jat.forEach(t),cRo=r(UAe," (OpenAI GPT-2 model)"),UAe.forEach(t),fRo=i(D),a2=n(D,"LI",{});var JAe=s(a2);Gde=n(JAe,"STRONG",{});var Yat=s(Gde);mRo=r(Yat,"ibert"),Yat.forEach(t),gRo=r(JAe," \u2014 "),Pj=n(JAe,"A",{href:!0});var Kat=s(Pj);hRo=r(Kat,"IBertForTokenClassification"),Kat.forEach(t),pRo=r(JAe," (I-BERT model)"),JAe.forEach(t),_Ro=i(D),n2=n(D,"LI",{});var YAe=s(n2);Ode=n(YAe,"STRONG",{});var Zat=s(Ode);uRo=r(Zat,"layoutlm"),Zat.forEach(t),bRo=r(YAe," \u2014 "),$j=n(YAe,"A",{href:!0});var ent=s($j);vRo=r(ent,"LayoutLMForTokenClassification"),ent.forEach(t),FRo=r(YAe," (LayoutLM model)"),YAe.forEach(t),TRo=i(D),s2=n(D,"LI",{});var KAe=s(s2);Vde=n(KAe,"STRONG",{});var ont=s(Vde);MRo=r(ont,"layoutlmv2"),ont.forEach(t),ERo=r(KAe," \u2014 "),Ij=n(KAe,"A",{href:!0});var rnt=s(Ij);CRo=r(rnt,"LayoutLMv2ForTokenClassification"),rnt.forEach(t),wRo=r(KAe," (LayoutLMv2 model)"),KAe.forEach(t),ARo=i(D),l2=n(D,"LI",{});var ZAe=s(l2);Xde=n(ZAe,"STRONG",{});var tnt=s(Xde);yRo=r(tnt,"longformer"),tnt.forEach(t),LRo=r(ZAe," \u2014 "),qj=n(ZAe,"A",{href:!0});var ant=s(qj);xRo=r(ant,"LongformerForTokenClassification"),ant.forEach(t),kRo=r(ZAe," (Longformer model)"),ZAe.forEach(t),SRo=i(D),i2=n(D,"LI",{});var e0e=s(i2);zde=n(e0e,"STRONG",{});var nnt=s(zde);RRo=r(nnt,"megatron-bert"),nnt.forEach(t),BRo=r(e0e," \u2014 "),Nj=n(e0e,"A",{href:!0});var snt=s(Nj);PRo=r(snt,"MegatronBertForTokenClassification"),snt.forEach(t),$Ro=r(e0e," (MegatronBert model)"),e0e.forEach(t),IRo=i(D),d2=n(D,"LI",{});var o0e=s(d2);Qde=n(o0e,"STRONG",{});var lnt=s(Qde);qRo=r(lnt,"mobilebert"),lnt.forEach(t),NRo=r(o0e," \u2014 "),jj=n(o0e,"A",{href:!0});var int=s(jj);jRo=r(int,"MobileBertForTokenClassification"),int.forEach(t),DRo=r(o0e," (MobileBERT model)"),o0e.forEach(t),GRo=i(D),c2=n(D,"LI",{});var r0e=s(c2);Wde=n(r0e,"STRONG",{});var dnt=s(Wde);ORo=r(dnt,"mpnet"),dnt.forEach(t),VRo=r(r0e," \u2014 "),Dj=n(r0e,"A",{href:!0});var cnt=s(Dj);XRo=r(cnt,"MPNetForTokenClassification"),cnt.forEach(t),zRo=r(r0e," (MPNet model)"),r0e.forEach(t),QRo=i(D),f2=n(D,"LI",{});var t0e=s(f2);Hde=n(t0e,"STRONG",{});var fnt=s(Hde);WRo=r(fnt,"nystromformer"),fnt.forEach(t),HRo=r(t0e," \u2014 "),Gj=n(t0e,"A",{href:!0});var mnt=s(Gj);URo=r(mnt,"NystromformerForTokenClassification"),mnt.forEach(t),JRo=r(t0e," (Nystromformer model)"),t0e.forEach(t),YRo=i(D),m2=n(D,"LI",{});var a0e=s(m2);Ude=n(a0e,"STRONG",{});var gnt=s(Ude);KRo=r(gnt,"qdqbert"),gnt.forEach(t),ZRo=r(a0e," \u2014 "),Oj=n(a0e,"A",{href:!0});var hnt=s(Oj);eBo=r(hnt,"QDQBertForTokenClassification"),hnt.forEach(t),oBo=r(a0e," (QDQBert model)"),a0e.forEach(t),rBo=i(D),g2=n(D,"LI",{});var n0e=s(g2);Jde=n(n0e,"STRONG",{});var pnt=s(Jde);tBo=r(pnt,"rembert"),pnt.forEach(t),aBo=r(n0e," \u2014 "),Vj=n(n0e,"A",{href:!0});var _nt=s(Vj);nBo=r(_nt,"RemBertForTokenClassification"),_nt.forEach(t),sBo=r(n0e," (RemBERT model)"),n0e.forEach(t),lBo=i(D),h2=n(D,"LI",{});var s0e=s(h2);Yde=n(s0e,"STRONG",{});var unt=s(Yde);iBo=r(unt,"roberta"),unt.forEach(t),dBo=r(s0e," \u2014 "),Xj=n(s0e,"A",{href:!0});var bnt=s(Xj);cBo=r(bnt,"RobertaForTokenClassification"),bnt.forEach(t),fBo=r(s0e," (RoBERTa model)"),s0e.forEach(t),mBo=i(D),p2=n(D,"LI",{});var l0e=s(p2);Kde=n(l0e,"STRONG",{});var vnt=s(Kde);gBo=r(vnt,"roformer"),vnt.forEach(t),hBo=r(l0e," \u2014 "),zj=n(l0e,"A",{href:!0});var Fnt=s(zj);pBo=r(Fnt,"RoFormerForTokenClassification"),Fnt.forEach(t),_Bo=r(l0e," (RoFormer model)"),l0e.forEach(t),uBo=i(D),_2=n(D,"LI",{});var i0e=s(_2);Zde=n(i0e,"STRONG",{});var Tnt=s(Zde);bBo=r(Tnt,"squeezebert"),Tnt.forEach(t),vBo=r(i0e," \u2014 "),Qj=n(i0e,"A",{href:!0});var Mnt=s(Qj);FBo=r(Mnt,"SqueezeBertForTokenClassification"),Mnt.forEach(t),TBo=r(i0e," (SqueezeBERT model)"),i0e.forEach(t),MBo=i(D),u2=n(D,"LI",{});var d0e=s(u2);ece=n(d0e,"STRONG",{});var Ent=s(ece);EBo=r(Ent,"xlm"),Ent.forEach(t),CBo=r(d0e," \u2014 "),Wj=n(d0e,"A",{href:!0});var Cnt=s(Wj);wBo=r(Cnt,"XLMForTokenClassification"),Cnt.forEach(t),ABo=r(d0e," (XLM model)"),d0e.forEach(t),yBo=i(D),b2=n(D,"LI",{});var c0e=s(b2);oce=n(c0e,"STRONG",{});var wnt=s(oce);LBo=r(wnt,"xlm-roberta"),wnt.forEach(t),xBo=r(c0e," \u2014 "),Hj=n(c0e,"A",{href:!0});var Ant=s(Hj);kBo=r(Ant,"XLMRobertaForTokenClassification"),Ant.forEach(t),SBo=r(c0e," (XLM-RoBERTa model)"),c0e.forEach(t),RBo=i(D),v2=n(D,"LI",{});var f0e=s(v2);rce=n(f0e,"STRONG",{});var ynt=s(rce);BBo=r(ynt,"xlm-roberta-xl"),ynt.forEach(t),PBo=r(f0e," \u2014 "),Uj=n(f0e,"A",{href:!0});var Lnt=s(Uj);$Bo=r(Lnt,"XLMRobertaXLForTokenClassification"),Lnt.forEach(t),IBo=r(f0e," (XLM-RoBERTa-XL model)"),f0e.forEach(t),qBo=i(D),F2=n(D,"LI",{});var m0e=s(F2);tce=n(m0e,"STRONG",{});var xnt=s(tce);NBo=r(xnt,"xlnet"),xnt.forEach(t),jBo=r(m0e," \u2014 "),Jj=n(m0e,"A",{href:!0});var knt=s(Jj);DBo=r(knt,"XLNetForTokenClassification"),knt.forEach(t),GBo=r(m0e," (XLNet model)"),m0e.forEach(t),OBo=i(D),T2=n(D,"LI",{});var g0e=s(T2);ace=n(g0e,"STRONG",{});var Snt=s(ace);VBo=r(Snt,"yoso"),Snt.forEach(t),XBo=r(g0e," \u2014 "),Yj=n(g0e,"A",{href:!0});var Rnt=s(Yj);zBo=r(Rnt,"YosoForTokenClassification"),Rnt.forEach(t),QBo=r(g0e," (YOSO model)"),g0e.forEach(t),D.forEach(t),WBo=i(Ht),M2=n(Ht,"P",{});var h0e=s(M2);HBo=r(h0e,"The model is set in evaluation mode by default using "),nce=n(h0e,"CODE",{});var Bnt=s(nce);UBo=r(Bnt,"model.eval()"),Bnt.forEach(t),JBo=r(h0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sce=n(h0e,"CODE",{});var Pnt=s(sce);YBo=r(Pnt,"model.train()"),Pnt.forEach(t),h0e.forEach(t),KBo=i(Ht),lce=n(Ht,"P",{});var $nt=s(lce);ZBo=r($nt,"Examples:"),$nt.forEach(t),ePo=i(Ht),m(uC.$$.fragment,Ht),Ht.forEach(t),fl.forEach(t),gBe=i(c),wd=n(c,"H2",{class:!0});var M$e=s(wd);E2=n(M$e,"A",{id:!0,class:!0,href:!0});var Int=s(E2);ice=n(Int,"SPAN",{});var qnt=s(ice);m(bC.$$.fragment,qnt),qnt.forEach(t),Int.forEach(t),oPo=i(M$e),dce=n(M$e,"SPAN",{});var Nnt=s(dce);rPo=r(Nnt,"AutoModelForQuestionAnswering"),Nnt.forEach(t),M$e.forEach(t),hBe=i(c),nr=n(c,"DIV",{class:!0});var gl=s(nr);m(vC.$$.fragment,gl),tPo=i(gl),Ad=n(gl,"P",{});var OU=s(Ad);aPo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Kj=n(OU,"A",{href:!0});var jnt=s(Kj);nPo=r(jnt,"from_pretrained()"),jnt.forEach(t),sPo=r(OU," class method or the "),Zj=n(OU,"A",{href:!0});var Dnt=s(Zj);lPo=r(Dnt,"from_config()"),Dnt.forEach(t),iPo=r(OU,` class
method.`),OU.forEach(t),dPo=i(gl),FC=n(gl,"P",{});var E$e=s(FC);cPo=r(E$e,"This class cannot be instantiated directly using "),cce=n(E$e,"CODE",{});var Gnt=s(cce);fPo=r(Gnt,"__init__()"),Gnt.forEach(t),mPo=r(E$e," (throws an error)."),E$e.forEach(t),gPo=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(TC.$$.fragment,hl),hPo=i(hl),fce=n(hl,"P",{});var Ont=s(fce);pPo=r(Ont,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ont.forEach(t),_Po=i(hl),yd=n(hl,"P",{});var VU=s(yd);uPo=r(VU,`Note:
Loading a model from its configuration file does `),mce=n(VU,"STRONG",{});var Vnt=s(mce);bPo=r(Vnt,"not"),Vnt.forEach(t),vPo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eD=n(VU,"A",{href:!0});var Xnt=s(eD);FPo=r(Xnt,"from_pretrained()"),Xnt.forEach(t),TPo=r(VU," to load the model weights."),VU.forEach(t),MPo=i(hl),gce=n(hl,"P",{});var znt=s(gce);EPo=r(znt,"Examples:"),znt.forEach(t),CPo=i(hl),m(MC.$$.fragment,hl),hl.forEach(t),wPo=i(gl),Qe=n(gl,"DIV",{class:!0});var Ut=s(Qe);m(EC.$$.fragment,Ut),APo=i(Ut),hce=n(Ut,"P",{});var Qnt=s(hce);yPo=r(Qnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qnt.forEach(t),LPo=i(Ut),Za=n(Ut,"P",{});var GE=s(Za);xPo=r(GE,"The model class to instantiate is selected based on the "),pce=n(GE,"CODE",{});var Wnt=s(pce);kPo=r(Wnt,"model_type"),Wnt.forEach(t),SPo=r(GE,` property of the config object (either
passed as an argument or loaded from `),_ce=n(GE,"CODE",{});var Hnt=s(_ce);RPo=r(Hnt,"pretrained_model_name_or_path"),Hnt.forEach(t),BPo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uce=n(GE,"CODE",{});var Unt=s(uce);PPo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),$Po=r(GE,":"),GE.forEach(t),IPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);C2=n(P,"LI",{});var p0e=s(C2);bce=n(p0e,"STRONG",{});var Jnt=s(bce);qPo=r(Jnt,"albert"),Jnt.forEach(t),NPo=r(p0e," \u2014 "),oD=n(p0e,"A",{href:!0});var Ynt=s(oD);jPo=r(Ynt,"AlbertForQuestionAnswering"),Ynt.forEach(t),DPo=r(p0e," (ALBERT model)"),p0e.forEach(t),GPo=i(P),w2=n(P,"LI",{});var _0e=s(w2);vce=n(_0e,"STRONG",{});var Knt=s(vce);OPo=r(Knt,"bart"),Knt.forEach(t),VPo=r(_0e," \u2014 "),rD=n(_0e,"A",{href:!0});var Znt=s(rD);XPo=r(Znt,"BartForQuestionAnswering"),Znt.forEach(t),zPo=r(_0e," (BART model)"),_0e.forEach(t),QPo=i(P),A2=n(P,"LI",{});var u0e=s(A2);Fce=n(u0e,"STRONG",{});var est=s(Fce);WPo=r(est,"bert"),est.forEach(t),HPo=r(u0e," \u2014 "),tD=n(u0e,"A",{href:!0});var ost=s(tD);UPo=r(ost,"BertForQuestionAnswering"),ost.forEach(t),JPo=r(u0e," (BERT model)"),u0e.forEach(t),YPo=i(P),y2=n(P,"LI",{});var b0e=s(y2);Tce=n(b0e,"STRONG",{});var rst=s(Tce);KPo=r(rst,"big_bird"),rst.forEach(t),ZPo=r(b0e," \u2014 "),aD=n(b0e,"A",{href:!0});var tst=s(aD);e$o=r(tst,"BigBirdForQuestionAnswering"),tst.forEach(t),o$o=r(b0e," (BigBird model)"),b0e.forEach(t),r$o=i(P),L2=n(P,"LI",{});var v0e=s(L2);Mce=n(v0e,"STRONG",{});var ast=s(Mce);t$o=r(ast,"bigbird_pegasus"),ast.forEach(t),a$o=r(v0e," \u2014 "),nD=n(v0e,"A",{href:!0});var nst=s(nD);n$o=r(nst,"BigBirdPegasusForQuestionAnswering"),nst.forEach(t),s$o=r(v0e," (BigBirdPegasus model)"),v0e.forEach(t),l$o=i(P),x2=n(P,"LI",{});var F0e=s(x2);Ece=n(F0e,"STRONG",{});var sst=s(Ece);i$o=r(sst,"camembert"),sst.forEach(t),d$o=r(F0e," \u2014 "),sD=n(F0e,"A",{href:!0});var lst=s(sD);c$o=r(lst,"CamembertForQuestionAnswering"),lst.forEach(t),f$o=r(F0e," (CamemBERT model)"),F0e.forEach(t),m$o=i(P),k2=n(P,"LI",{});var T0e=s(k2);Cce=n(T0e,"STRONG",{});var ist=s(Cce);g$o=r(ist,"canine"),ist.forEach(t),h$o=r(T0e," \u2014 "),lD=n(T0e,"A",{href:!0});var dst=s(lD);p$o=r(dst,"CanineForQuestionAnswering"),dst.forEach(t),_$o=r(T0e," (Canine model)"),T0e.forEach(t),u$o=i(P),S2=n(P,"LI",{});var M0e=s(S2);wce=n(M0e,"STRONG",{});var cst=s(wce);b$o=r(cst,"convbert"),cst.forEach(t),v$o=r(M0e," \u2014 "),iD=n(M0e,"A",{href:!0});var fst=s(iD);F$o=r(fst,"ConvBertForQuestionAnswering"),fst.forEach(t),T$o=r(M0e," (ConvBERT model)"),M0e.forEach(t),M$o=i(P),R2=n(P,"LI",{});var E0e=s(R2);Ace=n(E0e,"STRONG",{});var mst=s(Ace);E$o=r(mst,"data2vec-text"),mst.forEach(t),C$o=r(E0e," \u2014 "),dD=n(E0e,"A",{href:!0});var gst=s(dD);w$o=r(gst,"Data2VecTextForQuestionAnswering"),gst.forEach(t),A$o=r(E0e," (Data2VecText model)"),E0e.forEach(t),y$o=i(P),B2=n(P,"LI",{});var C0e=s(B2);yce=n(C0e,"STRONG",{});var hst=s(yce);L$o=r(hst,"deberta"),hst.forEach(t),x$o=r(C0e," \u2014 "),cD=n(C0e,"A",{href:!0});var pst=s(cD);k$o=r(pst,"DebertaForQuestionAnswering"),pst.forEach(t),S$o=r(C0e," (DeBERTa model)"),C0e.forEach(t),R$o=i(P),P2=n(P,"LI",{});var w0e=s(P2);Lce=n(w0e,"STRONG",{});var _st=s(Lce);B$o=r(_st,"deberta-v2"),_st.forEach(t),P$o=r(w0e," \u2014 "),fD=n(w0e,"A",{href:!0});var ust=s(fD);$$o=r(ust,"DebertaV2ForQuestionAnswering"),ust.forEach(t),I$o=r(w0e," (DeBERTa-v2 model)"),w0e.forEach(t),q$o=i(P),$2=n(P,"LI",{});var A0e=s($2);xce=n(A0e,"STRONG",{});var bst=s(xce);N$o=r(bst,"distilbert"),bst.forEach(t),j$o=r(A0e," \u2014 "),mD=n(A0e,"A",{href:!0});var vst=s(mD);D$o=r(vst,"DistilBertForQuestionAnswering"),vst.forEach(t),G$o=r(A0e," (DistilBERT model)"),A0e.forEach(t),O$o=i(P),I2=n(P,"LI",{});var y0e=s(I2);kce=n(y0e,"STRONG",{});var Fst=s(kce);V$o=r(Fst,"electra"),Fst.forEach(t),X$o=r(y0e," \u2014 "),gD=n(y0e,"A",{href:!0});var Tst=s(gD);z$o=r(Tst,"ElectraForQuestionAnswering"),Tst.forEach(t),Q$o=r(y0e," (ELECTRA model)"),y0e.forEach(t),W$o=i(P),q2=n(P,"LI",{});var L0e=s(q2);Sce=n(L0e,"STRONG",{});var Mst=s(Sce);H$o=r(Mst,"flaubert"),Mst.forEach(t),U$o=r(L0e," \u2014 "),hD=n(L0e,"A",{href:!0});var Est=s(hD);J$o=r(Est,"FlaubertForQuestionAnsweringSimple"),Est.forEach(t),Y$o=r(L0e," (FlauBERT model)"),L0e.forEach(t),K$o=i(P),N2=n(P,"LI",{});var x0e=s(N2);Rce=n(x0e,"STRONG",{});var Cst=s(Rce);Z$o=r(Cst,"fnet"),Cst.forEach(t),eIo=r(x0e," \u2014 "),pD=n(x0e,"A",{href:!0});var wst=s(pD);oIo=r(wst,"FNetForQuestionAnswering"),wst.forEach(t),rIo=r(x0e," (FNet model)"),x0e.forEach(t),tIo=i(P),j2=n(P,"LI",{});var k0e=s(j2);Bce=n(k0e,"STRONG",{});var Ast=s(Bce);aIo=r(Ast,"funnel"),Ast.forEach(t),nIo=r(k0e," \u2014 "),_D=n(k0e,"A",{href:!0});var yst=s(_D);sIo=r(yst,"FunnelForQuestionAnswering"),yst.forEach(t),lIo=r(k0e," (Funnel Transformer model)"),k0e.forEach(t),iIo=i(P),D2=n(P,"LI",{});var S0e=s(D2);Pce=n(S0e,"STRONG",{});var Lst=s(Pce);dIo=r(Lst,"gptj"),Lst.forEach(t),cIo=r(S0e," \u2014 "),uD=n(S0e,"A",{href:!0});var xst=s(uD);fIo=r(xst,"GPTJForQuestionAnswering"),xst.forEach(t),mIo=r(S0e," (GPT-J model)"),S0e.forEach(t),gIo=i(P),G2=n(P,"LI",{});var R0e=s(G2);$ce=n(R0e,"STRONG",{});var kst=s($ce);hIo=r(kst,"ibert"),kst.forEach(t),pIo=r(R0e," \u2014 "),bD=n(R0e,"A",{href:!0});var Sst=s(bD);_Io=r(Sst,"IBertForQuestionAnswering"),Sst.forEach(t),uIo=r(R0e," (I-BERT model)"),R0e.forEach(t),bIo=i(P),O2=n(P,"LI",{});var B0e=s(O2);Ice=n(B0e,"STRONG",{});var Rst=s(Ice);vIo=r(Rst,"layoutlmv2"),Rst.forEach(t),FIo=r(B0e," \u2014 "),vD=n(B0e,"A",{href:!0});var Bst=s(vD);TIo=r(Bst,"LayoutLMv2ForQuestionAnswering"),Bst.forEach(t),MIo=r(B0e," (LayoutLMv2 model)"),B0e.forEach(t),EIo=i(P),V2=n(P,"LI",{});var P0e=s(V2);qce=n(P0e,"STRONG",{});var Pst=s(qce);CIo=r(Pst,"led"),Pst.forEach(t),wIo=r(P0e," \u2014 "),FD=n(P0e,"A",{href:!0});var $st=s(FD);AIo=r($st,"LEDForQuestionAnswering"),$st.forEach(t),yIo=r(P0e," (LED model)"),P0e.forEach(t),LIo=i(P),X2=n(P,"LI",{});var $0e=s(X2);Nce=n($0e,"STRONG",{});var Ist=s(Nce);xIo=r(Ist,"longformer"),Ist.forEach(t),kIo=r($0e," \u2014 "),TD=n($0e,"A",{href:!0});var qst=s(TD);SIo=r(qst,"LongformerForQuestionAnswering"),qst.forEach(t),RIo=r($0e," (Longformer model)"),$0e.forEach(t),BIo=i(P),z2=n(P,"LI",{});var I0e=s(z2);jce=n(I0e,"STRONG",{});var Nst=s(jce);PIo=r(Nst,"lxmert"),Nst.forEach(t),$Io=r(I0e," \u2014 "),MD=n(I0e,"A",{href:!0});var jst=s(MD);IIo=r(jst,"LxmertForQuestionAnswering"),jst.forEach(t),qIo=r(I0e," (LXMERT model)"),I0e.forEach(t),NIo=i(P),Q2=n(P,"LI",{});var q0e=s(Q2);Dce=n(q0e,"STRONG",{});var Dst=s(Dce);jIo=r(Dst,"mbart"),Dst.forEach(t),DIo=r(q0e," \u2014 "),ED=n(q0e,"A",{href:!0});var Gst=s(ED);GIo=r(Gst,"MBartForQuestionAnswering"),Gst.forEach(t),OIo=r(q0e," (mBART model)"),q0e.forEach(t),VIo=i(P),W2=n(P,"LI",{});var N0e=s(W2);Gce=n(N0e,"STRONG",{});var Ost=s(Gce);XIo=r(Ost,"megatron-bert"),Ost.forEach(t),zIo=r(N0e," \u2014 "),CD=n(N0e,"A",{href:!0});var Vst=s(CD);QIo=r(Vst,"MegatronBertForQuestionAnswering"),Vst.forEach(t),WIo=r(N0e," (MegatronBert model)"),N0e.forEach(t),HIo=i(P),H2=n(P,"LI",{});var j0e=s(H2);Oce=n(j0e,"STRONG",{});var Xst=s(Oce);UIo=r(Xst,"mobilebert"),Xst.forEach(t),JIo=r(j0e," \u2014 "),wD=n(j0e,"A",{href:!0});var zst=s(wD);YIo=r(zst,"MobileBertForQuestionAnswering"),zst.forEach(t),KIo=r(j0e," (MobileBERT model)"),j0e.forEach(t),ZIo=i(P),U2=n(P,"LI",{});var D0e=s(U2);Vce=n(D0e,"STRONG",{});var Qst=s(Vce);eqo=r(Qst,"mpnet"),Qst.forEach(t),oqo=r(D0e," \u2014 "),AD=n(D0e,"A",{href:!0});var Wst=s(AD);rqo=r(Wst,"MPNetForQuestionAnswering"),Wst.forEach(t),tqo=r(D0e," (MPNet model)"),D0e.forEach(t),aqo=i(P),J2=n(P,"LI",{});var G0e=s(J2);Xce=n(G0e,"STRONG",{});var Hst=s(Xce);nqo=r(Hst,"nystromformer"),Hst.forEach(t),sqo=r(G0e," \u2014 "),yD=n(G0e,"A",{href:!0});var Ust=s(yD);lqo=r(Ust,"NystromformerForQuestionAnswering"),Ust.forEach(t),iqo=r(G0e," (Nystromformer model)"),G0e.forEach(t),dqo=i(P),Y2=n(P,"LI",{});var O0e=s(Y2);zce=n(O0e,"STRONG",{});var Jst=s(zce);cqo=r(Jst,"qdqbert"),Jst.forEach(t),fqo=r(O0e," \u2014 "),LD=n(O0e,"A",{href:!0});var Yst=s(LD);mqo=r(Yst,"QDQBertForQuestionAnswering"),Yst.forEach(t),gqo=r(O0e," (QDQBert model)"),O0e.forEach(t),hqo=i(P),K2=n(P,"LI",{});var V0e=s(K2);Qce=n(V0e,"STRONG",{});var Kst=s(Qce);pqo=r(Kst,"reformer"),Kst.forEach(t),_qo=r(V0e," \u2014 "),xD=n(V0e,"A",{href:!0});var Zst=s(xD);uqo=r(Zst,"ReformerForQuestionAnswering"),Zst.forEach(t),bqo=r(V0e," (Reformer model)"),V0e.forEach(t),vqo=i(P),Z2=n(P,"LI",{});var X0e=s(Z2);Wce=n(X0e,"STRONG",{});var elt=s(Wce);Fqo=r(elt,"rembert"),elt.forEach(t),Tqo=r(X0e," \u2014 "),kD=n(X0e,"A",{href:!0});var olt=s(kD);Mqo=r(olt,"RemBertForQuestionAnswering"),olt.forEach(t),Eqo=r(X0e," (RemBERT model)"),X0e.forEach(t),Cqo=i(P),ev=n(P,"LI",{});var z0e=s(ev);Hce=n(z0e,"STRONG",{});var rlt=s(Hce);wqo=r(rlt,"roberta"),rlt.forEach(t),Aqo=r(z0e," \u2014 "),SD=n(z0e,"A",{href:!0});var tlt=s(SD);yqo=r(tlt,"RobertaForQuestionAnswering"),tlt.forEach(t),Lqo=r(z0e," (RoBERTa model)"),z0e.forEach(t),xqo=i(P),ov=n(P,"LI",{});var Q0e=s(ov);Uce=n(Q0e,"STRONG",{});var alt=s(Uce);kqo=r(alt,"roformer"),alt.forEach(t),Sqo=r(Q0e," \u2014 "),RD=n(Q0e,"A",{href:!0});var nlt=s(RD);Rqo=r(nlt,"RoFormerForQuestionAnswering"),nlt.forEach(t),Bqo=r(Q0e," (RoFormer model)"),Q0e.forEach(t),Pqo=i(P),rv=n(P,"LI",{});var W0e=s(rv);Jce=n(W0e,"STRONG",{});var slt=s(Jce);$qo=r(slt,"splinter"),slt.forEach(t),Iqo=r(W0e," \u2014 "),BD=n(W0e,"A",{href:!0});var llt=s(BD);qqo=r(llt,"SplinterForQuestionAnswering"),llt.forEach(t),Nqo=r(W0e," (Splinter model)"),W0e.forEach(t),jqo=i(P),tv=n(P,"LI",{});var H0e=s(tv);Yce=n(H0e,"STRONG",{});var ilt=s(Yce);Dqo=r(ilt,"squeezebert"),ilt.forEach(t),Gqo=r(H0e," \u2014 "),PD=n(H0e,"A",{href:!0});var dlt=s(PD);Oqo=r(dlt,"SqueezeBertForQuestionAnswering"),dlt.forEach(t),Vqo=r(H0e," (SqueezeBERT model)"),H0e.forEach(t),Xqo=i(P),av=n(P,"LI",{});var U0e=s(av);Kce=n(U0e,"STRONG",{});var clt=s(Kce);zqo=r(clt,"xlm"),clt.forEach(t),Qqo=r(U0e," \u2014 "),$D=n(U0e,"A",{href:!0});var flt=s($D);Wqo=r(flt,"XLMForQuestionAnsweringSimple"),flt.forEach(t),Hqo=r(U0e," (XLM model)"),U0e.forEach(t),Uqo=i(P),nv=n(P,"LI",{});var J0e=s(nv);Zce=n(J0e,"STRONG",{});var mlt=s(Zce);Jqo=r(mlt,"xlm-roberta"),mlt.forEach(t),Yqo=r(J0e," \u2014 "),ID=n(J0e,"A",{href:!0});var glt=s(ID);Kqo=r(glt,"XLMRobertaForQuestionAnswering"),glt.forEach(t),Zqo=r(J0e," (XLM-RoBERTa model)"),J0e.forEach(t),eNo=i(P),sv=n(P,"LI",{});var Y0e=s(sv);efe=n(Y0e,"STRONG",{});var hlt=s(efe);oNo=r(hlt,"xlm-roberta-xl"),hlt.forEach(t),rNo=r(Y0e," \u2014 "),qD=n(Y0e,"A",{href:!0});var plt=s(qD);tNo=r(plt,"XLMRobertaXLForQuestionAnswering"),plt.forEach(t),aNo=r(Y0e," (XLM-RoBERTa-XL model)"),Y0e.forEach(t),nNo=i(P),lv=n(P,"LI",{});var K0e=s(lv);ofe=n(K0e,"STRONG",{});var _lt=s(ofe);sNo=r(_lt,"xlnet"),_lt.forEach(t),lNo=r(K0e," \u2014 "),ND=n(K0e,"A",{href:!0});var ult=s(ND);iNo=r(ult,"XLNetForQuestionAnsweringSimple"),ult.forEach(t),dNo=r(K0e," (XLNet model)"),K0e.forEach(t),cNo=i(P),iv=n(P,"LI",{});var Z0e=s(iv);rfe=n(Z0e,"STRONG",{});var blt=s(rfe);fNo=r(blt,"yoso"),blt.forEach(t),mNo=r(Z0e," \u2014 "),jD=n(Z0e,"A",{href:!0});var vlt=s(jD);gNo=r(vlt,"YosoForQuestionAnswering"),vlt.forEach(t),hNo=r(Z0e," (YOSO model)"),Z0e.forEach(t),P.forEach(t),pNo=i(Ut),dv=n(Ut,"P",{});var eye=s(dv);_No=r(eye,"The model is set in evaluation mode by default using "),tfe=n(eye,"CODE",{});var Flt=s(tfe);uNo=r(Flt,"model.eval()"),Flt.forEach(t),bNo=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),afe=n(eye,"CODE",{});var Tlt=s(afe);vNo=r(Tlt,"model.train()"),Tlt.forEach(t),eye.forEach(t),FNo=i(Ut),nfe=n(Ut,"P",{});var Mlt=s(nfe);TNo=r(Mlt,"Examples:"),Mlt.forEach(t),MNo=i(Ut),m(CC.$$.fragment,Ut),Ut.forEach(t),gl.forEach(t),pBe=i(c),Ld=n(c,"H2",{class:!0});var C$e=s(Ld);cv=n(C$e,"A",{id:!0,class:!0,href:!0});var Elt=s(cv);sfe=n(Elt,"SPAN",{});var Clt=s(sfe);m(wC.$$.fragment,Clt),Clt.forEach(t),Elt.forEach(t),ENo=i(C$e),lfe=n(C$e,"SPAN",{});var wlt=s(lfe);CNo=r(wlt,"AutoModelForTableQuestionAnswering"),wlt.forEach(t),C$e.forEach(t),_Be=i(c),sr=n(c,"DIV",{class:!0});var pl=s(sr);m(AC.$$.fragment,pl),wNo=i(pl),xd=n(pl,"P",{});var XU=s(xd);ANo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),DD=n(XU,"A",{href:!0});var Alt=s(DD);yNo=r(Alt,"from_pretrained()"),Alt.forEach(t),LNo=r(XU," class method or the "),GD=n(XU,"A",{href:!0});var ylt=s(GD);xNo=r(ylt,"from_config()"),ylt.forEach(t),kNo=r(XU,` class
method.`),XU.forEach(t),SNo=i(pl),yC=n(pl,"P",{});var w$e=s(yC);RNo=r(w$e,"This class cannot be instantiated directly using "),ife=n(w$e,"CODE",{});var Llt=s(ife);BNo=r(Llt,"__init__()"),Llt.forEach(t),PNo=r(w$e," (throws an error)."),w$e.forEach(t),$No=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(LC.$$.fragment,_l),INo=i(_l),dfe=n(_l,"P",{});var xlt=s(dfe);qNo=r(xlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xlt.forEach(t),NNo=i(_l),kd=n(_l,"P",{});var zU=s(kd);jNo=r(zU,`Note:
Loading a model from its configuration file does `),cfe=n(zU,"STRONG",{});var klt=s(cfe);DNo=r(klt,"not"),klt.forEach(t),GNo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(zU,"A",{href:!0});var Slt=s(OD);ONo=r(Slt,"from_pretrained()"),Slt.forEach(t),VNo=r(zU," to load the model weights."),zU.forEach(t),XNo=i(_l),ffe=n(_l,"P",{});var Rlt=s(ffe);zNo=r(Rlt,"Examples:"),Rlt.forEach(t),QNo=i(_l),m(xC.$$.fragment,_l),_l.forEach(t),WNo=i(pl),We=n(pl,"DIV",{class:!0});var Jt=s(We);m(kC.$$.fragment,Jt),HNo=i(Jt),mfe=n(Jt,"P",{});var Blt=s(mfe);UNo=r(Blt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Blt.forEach(t),JNo=i(Jt),en=n(Jt,"P",{});var OE=s(en);YNo=r(OE,"The model class to instantiate is selected based on the "),gfe=n(OE,"CODE",{});var Plt=s(gfe);KNo=r(Plt,"model_type"),Plt.forEach(t),ZNo=r(OE,` property of the config object (either
passed as an argument or loaded from `),hfe=n(OE,"CODE",{});var $lt=s(hfe);ejo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),ojo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(OE,"CODE",{});var Ilt=s(pfe);rjo=r(Ilt,"pretrained_model_name_or_path"),Ilt.forEach(t),tjo=r(OE,":"),OE.forEach(t),ajo=i(Jt),_fe=n(Jt,"UL",{});var qlt=s(_fe);fv=n(qlt,"LI",{});var oye=s(fv);ufe=n(oye,"STRONG",{});var Nlt=s(ufe);njo=r(Nlt,"tapas"),Nlt.forEach(t),sjo=r(oye," \u2014 "),VD=n(oye,"A",{href:!0});var jlt=s(VD);ljo=r(jlt,"TapasForQuestionAnswering"),jlt.forEach(t),ijo=r(oye," (TAPAS model)"),oye.forEach(t),qlt.forEach(t),djo=i(Jt),mv=n(Jt,"P",{});var rye=s(mv);cjo=r(rye,"The model is set in evaluation mode by default using "),bfe=n(rye,"CODE",{});var Dlt=s(bfe);fjo=r(Dlt,"model.eval()"),Dlt.forEach(t),mjo=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(rye,"CODE",{});var Glt=s(vfe);gjo=r(Glt,"model.train()"),Glt.forEach(t),rye.forEach(t),hjo=i(Jt),Ffe=n(Jt,"P",{});var Olt=s(Ffe);pjo=r(Olt,"Examples:"),Olt.forEach(t),_jo=i(Jt),m(SC.$$.fragment,Jt),Jt.forEach(t),pl.forEach(t),uBe=i(c),Sd=n(c,"H2",{class:!0});var A$e=s(Sd);gv=n(A$e,"A",{id:!0,class:!0,href:!0});var Vlt=s(gv);Tfe=n(Vlt,"SPAN",{});var Xlt=s(Tfe);m(RC.$$.fragment,Xlt),Xlt.forEach(t),Vlt.forEach(t),ujo=i(A$e),Mfe=n(A$e,"SPAN",{});var zlt=s(Mfe);bjo=r(zlt,"AutoModelForImageClassification"),zlt.forEach(t),A$e.forEach(t),bBe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);m(BC.$$.fragment,ul),vjo=i(ul),Rd=n(ul,"P",{});var QU=s(Rd);Fjo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),XD=n(QU,"A",{href:!0});var Qlt=s(XD);Tjo=r(Qlt,"from_pretrained()"),Qlt.forEach(t),Mjo=r(QU," class method or the "),zD=n(QU,"A",{href:!0});var Wlt=s(zD);Ejo=r(Wlt,"from_config()"),Wlt.forEach(t),Cjo=r(QU,` class
method.`),QU.forEach(t),wjo=i(ul),PC=n(ul,"P",{});var y$e=s(PC);Ajo=r(y$e,"This class cannot be instantiated directly using "),Efe=n(y$e,"CODE",{});var Hlt=s(Efe);yjo=r(Hlt,"__init__()"),Hlt.forEach(t),Ljo=r(y$e," (throws an error)."),y$e.forEach(t),xjo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m($C.$$.fragment,bl),kjo=i(bl),Cfe=n(bl,"P",{});var Ult=s(Cfe);Sjo=r(Ult,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ult.forEach(t),Rjo=i(bl),Bd=n(bl,"P",{});var WU=s(Bd);Bjo=r(WU,`Note:
Loading a model from its configuration file does `),wfe=n(WU,"STRONG",{});var Jlt=s(wfe);Pjo=r(Jlt,"not"),Jlt.forEach(t),$jo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(WU,"A",{href:!0});var Ylt=s(QD);Ijo=r(Ylt,"from_pretrained()"),Ylt.forEach(t),qjo=r(WU," to load the model weights."),WU.forEach(t),Njo=i(bl),Afe=n(bl,"P",{});var Klt=s(Afe);jjo=r(Klt,"Examples:"),Klt.forEach(t),Djo=i(bl),m(IC.$$.fragment,bl),bl.forEach(t),Gjo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);m(qC.$$.fragment,Yt),Ojo=i(Yt),yfe=n(Yt,"P",{});var Zlt=s(yfe);Vjo=r(Zlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zlt.forEach(t),Xjo=i(Yt),on=n(Yt,"P",{});var VE=s(on);zjo=r(VE,"The model class to instantiate is selected based on the "),Lfe=n(VE,"CODE",{});var eit=s(Lfe);Qjo=r(eit,"model_type"),eit.forEach(t),Wjo=r(VE,` property of the config object (either
passed as an argument or loaded from `),xfe=n(VE,"CODE",{});var oit=s(xfe);Hjo=r(oit,"pretrained_model_name_or_path"),oit.forEach(t),Ujo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(VE,"CODE",{});var rit=s(kfe);Jjo=r(rit,"pretrained_model_name_or_path"),rit.forEach(t),Yjo=r(VE,":"),VE.forEach(t),Kjo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);hv=n(ge,"LI",{});var tye=s(hv);Sfe=n(tye,"STRONG",{});var tit=s(Sfe);Zjo=r(tit,"beit"),tit.forEach(t),eDo=r(tye," \u2014 "),WD=n(tye,"A",{href:!0});var ait=s(WD);oDo=r(ait,"BeitForImageClassification"),ait.forEach(t),rDo=r(tye," (BEiT model)"),tye.forEach(t),tDo=i(ge),pv=n(ge,"LI",{});var aye=s(pv);Rfe=n(aye,"STRONG",{});var nit=s(Rfe);aDo=r(nit,"convnext"),nit.forEach(t),nDo=r(aye," \u2014 "),HD=n(aye,"A",{href:!0});var sit=s(HD);sDo=r(sit,"ConvNextForImageClassification"),sit.forEach(t),lDo=r(aye," (ConvNext model)"),aye.forEach(t),iDo=i(ge),_v=n(ge,"LI",{});var nye=s(_v);Bfe=n(nye,"STRONG",{});var lit=s(Bfe);dDo=r(lit,"data2vec-vision"),lit.forEach(t),cDo=r(nye," \u2014 "),UD=n(nye,"A",{href:!0});var iit=s(UD);fDo=r(iit,"Data2VecVisionForImageClassification"),iit.forEach(t),mDo=r(nye," (Data2VecVision model)"),nye.forEach(t),gDo=i(ge),Os=n(ge,"LI",{});var F7=s(Os);Pfe=n(F7,"STRONG",{});var dit=s(Pfe);hDo=r(dit,"deit"),dit.forEach(t),pDo=r(F7," \u2014 "),JD=n(F7,"A",{href:!0});var cit=s(JD);_Do=r(cit,"DeiTForImageClassification"),cit.forEach(t),uDo=r(F7," or "),YD=n(F7,"A",{href:!0});var fit=s(YD);bDo=r(fit,"DeiTForImageClassificationWithTeacher"),fit.forEach(t),vDo=r(F7," (DeiT model)"),F7.forEach(t),FDo=i(ge),uv=n(ge,"LI",{});var sye=s(uv);$fe=n(sye,"STRONG",{});var mit=s($fe);TDo=r(mit,"imagegpt"),mit.forEach(t),MDo=r(sye," \u2014 "),KD=n(sye,"A",{href:!0});var git=s(KD);EDo=r(git,"ImageGPTForImageClassification"),git.forEach(t),CDo=r(sye," (ImageGPT model)"),sye.forEach(t),wDo=i(ge),ma=n(ge,"LI",{});var If=s(ma);Ife=n(If,"STRONG",{});var hit=s(Ife);ADo=r(hit,"perceiver"),hit.forEach(t),yDo=r(If," \u2014 "),ZD=n(If,"A",{href:!0});var pit=s(ZD);LDo=r(pit,"PerceiverForImageClassificationLearned"),pit.forEach(t),xDo=r(If," or "),eG=n(If,"A",{href:!0});var _it=s(eG);kDo=r(_it,"PerceiverForImageClassificationFourier"),_it.forEach(t),SDo=r(If," or "),oG=n(If,"A",{href:!0});var uit=s(oG);RDo=r(uit,"PerceiverForImageClassificationConvProcessing"),uit.forEach(t),BDo=r(If," (Perceiver model)"),If.forEach(t),PDo=i(ge),bv=n(ge,"LI",{});var lye=s(bv);qfe=n(lye,"STRONG",{});var bit=s(qfe);$Do=r(bit,"poolformer"),bit.forEach(t),IDo=r(lye," \u2014 "),rG=n(lye,"A",{href:!0});var vit=s(rG);qDo=r(vit,"PoolFormerForImageClassification"),vit.forEach(t),NDo=r(lye," (PoolFormer model)"),lye.forEach(t),jDo=i(ge),vv=n(ge,"LI",{});var iye=s(vv);Nfe=n(iye,"STRONG",{});var Fit=s(Nfe);DDo=r(Fit,"regnet"),Fit.forEach(t),GDo=r(iye," \u2014 "),tG=n(iye,"A",{href:!0});var Tit=s(tG);ODo=r(Tit,"RegNetForImageClassification"),Tit.forEach(t),VDo=r(iye," (RegNet model)"),iye.forEach(t),XDo=i(ge),Fv=n(ge,"LI",{});var dye=s(Fv);jfe=n(dye,"STRONG",{});var Mit=s(jfe);zDo=r(Mit,"resnet"),Mit.forEach(t),QDo=r(dye," \u2014 "),aG=n(dye,"A",{href:!0});var Eit=s(aG);WDo=r(Eit,"ResNetForImageClassification"),Eit.forEach(t),HDo=r(dye," (ResNet model)"),dye.forEach(t),UDo=i(ge),Tv=n(ge,"LI",{});var cye=s(Tv);Dfe=n(cye,"STRONG",{});var Cit=s(Dfe);JDo=r(Cit,"segformer"),Cit.forEach(t),YDo=r(cye," \u2014 "),nG=n(cye,"A",{href:!0});var wit=s(nG);KDo=r(wit,"SegformerForImageClassification"),wit.forEach(t),ZDo=r(cye," (SegFormer model)"),cye.forEach(t),eGo=i(ge),Mv=n(ge,"LI",{});var fye=s(Mv);Gfe=n(fye,"STRONG",{});var Ait=s(Gfe);oGo=r(Ait,"swin"),Ait.forEach(t),rGo=r(fye," \u2014 "),sG=n(fye,"A",{href:!0});var yit=s(sG);tGo=r(yit,"SwinForImageClassification"),yit.forEach(t),aGo=r(fye," (Swin model)"),fye.forEach(t),nGo=i(ge),Ev=n(ge,"LI",{});var mye=s(Ev);Ofe=n(mye,"STRONG",{});var Lit=s(Ofe);sGo=r(Lit,"van"),Lit.forEach(t),lGo=r(mye," \u2014 "),lG=n(mye,"A",{href:!0});var xit=s(lG);iGo=r(xit,"VanForImageClassification"),xit.forEach(t),dGo=r(mye," (VAN model)"),mye.forEach(t),cGo=i(ge),Cv=n(ge,"LI",{});var gye=s(Cv);Vfe=n(gye,"STRONG",{});var kit=s(Vfe);fGo=r(kit,"vit"),kit.forEach(t),mGo=r(gye," \u2014 "),iG=n(gye,"A",{href:!0});var Sit=s(iG);gGo=r(Sit,"ViTForImageClassification"),Sit.forEach(t),hGo=r(gye," (ViT model)"),gye.forEach(t),ge.forEach(t),pGo=i(Yt),wv=n(Yt,"P",{});var hye=s(wv);_Go=r(hye,"The model is set in evaluation mode by default using "),Xfe=n(hye,"CODE",{});var Rit=s(Xfe);uGo=r(Rit,"model.eval()"),Rit.forEach(t),bGo=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zfe=n(hye,"CODE",{});var Bit=s(zfe);vGo=r(Bit,"model.train()"),Bit.forEach(t),hye.forEach(t),FGo=i(Yt),Qfe=n(Yt,"P",{});var Pit=s(Qfe);TGo=r(Pit,"Examples:"),Pit.forEach(t),MGo=i(Yt),m(NC.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),vBe=i(c),Pd=n(c,"H2",{class:!0});var L$e=s(Pd);Av=n(L$e,"A",{id:!0,class:!0,href:!0});var $it=s(Av);Wfe=n($it,"SPAN",{});var Iit=s(Wfe);m(jC.$$.fragment,Iit),Iit.forEach(t),$it.forEach(t),EGo=i(L$e),Hfe=n(L$e,"SPAN",{});var qit=s(Hfe);CGo=r(qit,"AutoModelForVision2Seq"),qit.forEach(t),L$e.forEach(t),FBe=i(c),ir=n(c,"DIV",{class:!0});var vl=s(ir);m(DC.$$.fragment,vl),wGo=i(vl),$d=n(vl,"P",{});var HU=s($d);AGo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dG=n(HU,"A",{href:!0});var Nit=s(dG);yGo=r(Nit,"from_pretrained()"),Nit.forEach(t),LGo=r(HU," class method or the "),cG=n(HU,"A",{href:!0});var jit=s(cG);xGo=r(jit,"from_config()"),jit.forEach(t),kGo=r(HU,` class
method.`),HU.forEach(t),SGo=i(vl),GC=n(vl,"P",{});var x$e=s(GC);RGo=r(x$e,"This class cannot be instantiated directly using "),Ufe=n(x$e,"CODE",{});var Dit=s(Ufe);BGo=r(Dit,"__init__()"),Dit.forEach(t),PGo=r(x$e," (throws an error)."),x$e.forEach(t),$Go=i(vl),rt=n(vl,"DIV",{class:!0});var Fl=s(rt);m(OC.$$.fragment,Fl),IGo=i(Fl),Jfe=n(Fl,"P",{});var Git=s(Jfe);qGo=r(Git,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Git.forEach(t),NGo=i(Fl),Id=n(Fl,"P",{});var UU=s(Id);jGo=r(UU,`Note:
Loading a model from its configuration file does `),Yfe=n(UU,"STRONG",{});var Oit=s(Yfe);DGo=r(Oit,"not"),Oit.forEach(t),GGo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(UU,"A",{href:!0});var Vit=s(fG);OGo=r(Vit,"from_pretrained()"),Vit.forEach(t),VGo=r(UU," to load the model weights."),UU.forEach(t),XGo=i(Fl),Kfe=n(Fl,"P",{});var Xit=s(Kfe);zGo=r(Xit,"Examples:"),Xit.forEach(t),QGo=i(Fl),m(VC.$$.fragment,Fl),Fl.forEach(t),WGo=i(vl),Ue=n(vl,"DIV",{class:!0});var Kt=s(Ue);m(XC.$$.fragment,Kt),HGo=i(Kt),Zfe=n(Kt,"P",{});var zit=s(Zfe);UGo=r(zit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zit.forEach(t),JGo=i(Kt),rn=n(Kt,"P",{});var XE=s(rn);YGo=r(XE,"The model class to instantiate is selected based on the "),eme=n(XE,"CODE",{});var Qit=s(eme);KGo=r(Qit,"model_type"),Qit.forEach(t),ZGo=r(XE,` property of the config object (either
passed as an argument or loaded from `),ome=n(XE,"CODE",{});var Wit=s(ome);eOo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),oOo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rme=n(XE,"CODE",{});var Hit=s(rme);rOo=r(Hit,"pretrained_model_name_or_path"),Hit.forEach(t),tOo=r(XE,":"),XE.forEach(t),aOo=i(Kt),tme=n(Kt,"UL",{});var Uit=s(tme);yv=n(Uit,"LI",{});var pye=s(yv);ame=n(pye,"STRONG",{});var Jit=s(ame);nOo=r(Jit,"vision-encoder-decoder"),Jit.forEach(t),sOo=r(pye," \u2014 "),mG=n(pye,"A",{href:!0});var Yit=s(mG);lOo=r(Yit,"VisionEncoderDecoderModel"),Yit.forEach(t),iOo=r(pye," (Vision Encoder decoder model)"),pye.forEach(t),Uit.forEach(t),dOo=i(Kt),Lv=n(Kt,"P",{});var _ye=s(Lv);cOo=r(_ye,"The model is set in evaluation mode by default using "),nme=n(_ye,"CODE",{});var Kit=s(nme);fOo=r(Kit,"model.eval()"),Kit.forEach(t),mOo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(_ye,"CODE",{});var Zit=s(sme);gOo=r(Zit,"model.train()"),Zit.forEach(t),_ye.forEach(t),hOo=i(Kt),lme=n(Kt,"P",{});var edt=s(lme);pOo=r(edt,"Examples:"),edt.forEach(t),_Oo=i(Kt),m(zC.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),TBe=i(c),qd=n(c,"H2",{class:!0});var k$e=s(qd);xv=n(k$e,"A",{id:!0,class:!0,href:!0});var odt=s(xv);ime=n(odt,"SPAN",{});var rdt=s(ime);m(QC.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),uOo=i(k$e),dme=n(k$e,"SPAN",{});var tdt=s(dme);bOo=r(tdt,"AutoModelForAudioClassification"),tdt.forEach(t),k$e.forEach(t),MBe=i(c),dr=n(c,"DIV",{class:!0});var Tl=s(dr);m(WC.$$.fragment,Tl),vOo=i(Tl),Nd=n(Tl,"P",{});var JU=s(Nd);FOo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),gG=n(JU,"A",{href:!0});var adt=s(gG);TOo=r(adt,"from_pretrained()"),adt.forEach(t),MOo=r(JU," class method or the "),hG=n(JU,"A",{href:!0});var ndt=s(hG);EOo=r(ndt,"from_config()"),ndt.forEach(t),COo=r(JU,` class
method.`),JU.forEach(t),wOo=i(Tl),HC=n(Tl,"P",{});var S$e=s(HC);AOo=r(S$e,"This class cannot be instantiated directly using "),cme=n(S$e,"CODE",{});var sdt=s(cme);yOo=r(sdt,"__init__()"),sdt.forEach(t),LOo=r(S$e," (throws an error)."),S$e.forEach(t),xOo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Ml=s(tt);m(UC.$$.fragment,Ml),kOo=i(Ml),fme=n(Ml,"P",{});var ldt=s(fme);SOo=r(ldt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),ldt.forEach(t),ROo=i(Ml),jd=n(Ml,"P",{});var YU=s(jd);BOo=r(YU,`Note:
Loading a model from its configuration file does `),mme=n(YU,"STRONG",{});var idt=s(mme);POo=r(idt,"not"),idt.forEach(t),$Oo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pG=n(YU,"A",{href:!0});var ddt=s(pG);IOo=r(ddt,"from_pretrained()"),ddt.forEach(t),qOo=r(YU," to load the model weights."),YU.forEach(t),NOo=i(Ml),gme=n(Ml,"P",{});var cdt=s(gme);jOo=r(cdt,"Examples:"),cdt.forEach(t),DOo=i(Ml),m(JC.$$.fragment,Ml),Ml.forEach(t),GOo=i(Tl),Je=n(Tl,"DIV",{class:!0});var Zt=s(Je);m(YC.$$.fragment,Zt),OOo=i(Zt),hme=n(Zt,"P",{});var fdt=s(hme);VOo=r(fdt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fdt.forEach(t),XOo=i(Zt),tn=n(Zt,"P",{});var zE=s(tn);zOo=r(zE,"The model class to instantiate is selected based on the "),pme=n(zE,"CODE",{});var mdt=s(pme);QOo=r(mdt,"model_type"),mdt.forEach(t),WOo=r(zE,` property of the config object (either
passed as an argument or loaded from `),_me=n(zE,"CODE",{});var gdt=s(_me);HOo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),UOo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n(zE,"CODE",{});var hdt=s(ume);JOo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),YOo=r(zE,":"),zE.forEach(t),KOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);kv=n(Do,"LI",{});var uye=s(kv);bme=n(uye,"STRONG",{});var pdt=s(bme);ZOo=r(pdt,"data2vec-audio"),pdt.forEach(t),eVo=r(uye," \u2014 "),_G=n(uye,"A",{href:!0});var _dt=s(_G);oVo=r(_dt,"Data2VecAudioForSequenceClassification"),_dt.forEach(t),rVo=r(uye," (Data2VecAudio model)"),uye.forEach(t),tVo=i(Do),Sv=n(Do,"LI",{});var bye=s(Sv);vme=n(bye,"STRONG",{});var udt=s(vme);aVo=r(udt,"hubert"),udt.forEach(t),nVo=r(bye," \u2014 "),uG=n(bye,"A",{href:!0});var bdt=s(uG);sVo=r(bdt,"HubertForSequenceClassification"),bdt.forEach(t),lVo=r(bye," (Hubert model)"),bye.forEach(t),iVo=i(Do),Rv=n(Do,"LI",{});var vye=s(Rv);Fme=n(vye,"STRONG",{});var vdt=s(Fme);dVo=r(vdt,"sew"),vdt.forEach(t),cVo=r(vye," \u2014 "),bG=n(vye,"A",{href:!0});var Fdt=s(bG);fVo=r(Fdt,"SEWForSequenceClassification"),Fdt.forEach(t),mVo=r(vye," (SEW model)"),vye.forEach(t),gVo=i(Do),Bv=n(Do,"LI",{});var Fye=s(Bv);Tme=n(Fye,"STRONG",{});var Tdt=s(Tme);hVo=r(Tdt,"sew-d"),Tdt.forEach(t),pVo=r(Fye," \u2014 "),vG=n(Fye,"A",{href:!0});var Mdt=s(vG);_Vo=r(Mdt,"SEWDForSequenceClassification"),Mdt.forEach(t),uVo=r(Fye," (SEW-D model)"),Fye.forEach(t),bVo=i(Do),Pv=n(Do,"LI",{});var Tye=s(Pv);Mme=n(Tye,"STRONG",{});var Edt=s(Mme);vVo=r(Edt,"unispeech"),Edt.forEach(t),FVo=r(Tye," \u2014 "),FG=n(Tye,"A",{href:!0});var Cdt=s(FG);TVo=r(Cdt,"UniSpeechForSequenceClassification"),Cdt.forEach(t),MVo=r(Tye," (UniSpeech model)"),Tye.forEach(t),EVo=i(Do),$v=n(Do,"LI",{});var Mye=s($v);Eme=n(Mye,"STRONG",{});var wdt=s(Eme);CVo=r(wdt,"unispeech-sat"),wdt.forEach(t),wVo=r(Mye," \u2014 "),TG=n(Mye,"A",{href:!0});var Adt=s(TG);AVo=r(Adt,"UniSpeechSatForSequenceClassification"),Adt.forEach(t),yVo=r(Mye," (UniSpeechSat model)"),Mye.forEach(t),LVo=i(Do),Iv=n(Do,"LI",{});var Eye=s(Iv);Cme=n(Eye,"STRONG",{});var ydt=s(Cme);xVo=r(ydt,"wav2vec2"),ydt.forEach(t),kVo=r(Eye," \u2014 "),MG=n(Eye,"A",{href:!0});var Ldt=s(MG);SVo=r(Ldt,"Wav2Vec2ForSequenceClassification"),Ldt.forEach(t),RVo=r(Eye," (Wav2Vec2 model)"),Eye.forEach(t),BVo=i(Do),qv=n(Do,"LI",{});var Cye=s(qv);wme=n(Cye,"STRONG",{});var xdt=s(wme);PVo=r(xdt,"wavlm"),xdt.forEach(t),$Vo=r(Cye," \u2014 "),EG=n(Cye,"A",{href:!0});var kdt=s(EG);IVo=r(kdt,"WavLMForSequenceClassification"),kdt.forEach(t),qVo=r(Cye," (WavLM model)"),Cye.forEach(t),Do.forEach(t),NVo=i(Zt),Nv=n(Zt,"P",{});var wye=s(Nv);jVo=r(wye,"The model is set in evaluation mode by default using "),Ame=n(wye,"CODE",{});var Sdt=s(Ame);DVo=r(Sdt,"model.eval()"),Sdt.forEach(t),GVo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(wye,"CODE",{});var Rdt=s(yme);OVo=r(Rdt,"model.train()"),Rdt.forEach(t),wye.forEach(t),VVo=i(Zt),Lme=n(Zt,"P",{});var Bdt=s(Lme);XVo=r(Bdt,"Examples:"),Bdt.forEach(t),zVo=i(Zt),m(KC.$$.fragment,Zt),Zt.forEach(t),Tl.forEach(t),EBe=i(c),Dd=n(c,"H2",{class:!0});var R$e=s(Dd);jv=n(R$e,"A",{id:!0,class:!0,href:!0});var Pdt=s(jv);xme=n(Pdt,"SPAN",{});var $dt=s(xme);m(ZC.$$.fragment,$dt),$dt.forEach(t),Pdt.forEach(t),QVo=i(R$e),kme=n(R$e,"SPAN",{});var Idt=s(kme);WVo=r(Idt,"AutoModelForAudioFrameClassification"),Idt.forEach(t),R$e.forEach(t),CBe=i(c),cr=n(c,"DIV",{class:!0});var El=s(cr);m(ew.$$.fragment,El),HVo=i(El),Gd=n(El,"P",{});var KU=s(Gd);UVo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CG=n(KU,"A",{href:!0});var qdt=s(CG);JVo=r(qdt,"from_pretrained()"),qdt.forEach(t),YVo=r(KU," class method or the "),wG=n(KU,"A",{href:!0});var Ndt=s(wG);KVo=r(Ndt,"from_config()"),Ndt.forEach(t),ZVo=r(KU,` class
method.`),KU.forEach(t),eXo=i(El),ow=n(El,"P",{});var B$e=s(ow);oXo=r(B$e,"This class cannot be instantiated directly using "),Sme=n(B$e,"CODE",{});var jdt=s(Sme);rXo=r(jdt,"__init__()"),jdt.forEach(t),tXo=r(B$e," (throws an error)."),B$e.forEach(t),aXo=i(El),at=n(El,"DIV",{class:!0});var Cl=s(at);m(rw.$$.fragment,Cl),nXo=i(Cl),Rme=n(Cl,"P",{});var Ddt=s(Rme);sXo=r(Ddt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ddt.forEach(t),lXo=i(Cl),Od=n(Cl,"P",{});var ZU=s(Od);iXo=r(ZU,`Note:
Loading a model from its configuration file does `),Bme=n(ZU,"STRONG",{});var Gdt=s(Bme);dXo=r(Gdt,"not"),Gdt.forEach(t),cXo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AG=n(ZU,"A",{href:!0});var Odt=s(AG);fXo=r(Odt,"from_pretrained()"),Odt.forEach(t),mXo=r(ZU," to load the model weights."),ZU.forEach(t),gXo=i(Cl),Pme=n(Cl,"P",{});var Vdt=s(Pme);hXo=r(Vdt,"Examples:"),Vdt.forEach(t),pXo=i(Cl),m(tw.$$.fragment,Cl),Cl.forEach(t),_Xo=i(El),Ye=n(El,"DIV",{class:!0});var ea=s(Ye);m(aw.$$.fragment,ea),uXo=i(ea),$me=n(ea,"P",{});var Xdt=s($me);bXo=r(Xdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Xdt.forEach(t),vXo=i(ea),an=n(ea,"P",{});var QE=s(an);FXo=r(QE,"The model class to instantiate is selected based on the "),Ime=n(QE,"CODE",{});var zdt=s(Ime);TXo=r(zdt,"model_type"),zdt.forEach(t),MXo=r(QE,` property of the config object (either
passed as an argument or loaded from `),qme=n(QE,"CODE",{});var Qdt=s(qme);EXo=r(Qdt,"pretrained_model_name_or_path"),Qdt.forEach(t),CXo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(QE,"CODE",{});var Wdt=s(Nme);wXo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),AXo=r(QE,":"),QE.forEach(t),yXo=i(ea),nn=n(ea,"UL",{});var WE=s(nn);Dv=n(WE,"LI",{});var Aye=s(Dv);jme=n(Aye,"STRONG",{});var Hdt=s(jme);LXo=r(Hdt,"data2vec-audio"),Hdt.forEach(t),xXo=r(Aye," \u2014 "),yG=n(Aye,"A",{href:!0});var Udt=s(yG);kXo=r(Udt,"Data2VecAudioForAudioFrameClassification"),Udt.forEach(t),SXo=r(Aye," (Data2VecAudio model)"),Aye.forEach(t),RXo=i(WE),Gv=n(WE,"LI",{});var yye=s(Gv);Dme=n(yye,"STRONG",{});var Jdt=s(Dme);BXo=r(Jdt,"unispeech-sat"),Jdt.forEach(t),PXo=r(yye," \u2014 "),LG=n(yye,"A",{href:!0});var Ydt=s(LG);$Xo=r(Ydt,"UniSpeechSatForAudioFrameClassification"),Ydt.forEach(t),IXo=r(yye," (UniSpeechSat model)"),yye.forEach(t),qXo=i(WE),Ov=n(WE,"LI",{});var Lye=s(Ov);Gme=n(Lye,"STRONG",{});var Kdt=s(Gme);NXo=r(Kdt,"wav2vec2"),Kdt.forEach(t),jXo=r(Lye," \u2014 "),xG=n(Lye,"A",{href:!0});var Zdt=s(xG);DXo=r(Zdt,"Wav2Vec2ForAudioFrameClassification"),Zdt.forEach(t),GXo=r(Lye," (Wav2Vec2 model)"),Lye.forEach(t),OXo=i(WE),Vv=n(WE,"LI",{});var xye=s(Vv);Ome=n(xye,"STRONG",{});var ect=s(Ome);VXo=r(ect,"wavlm"),ect.forEach(t),XXo=r(xye," \u2014 "),kG=n(xye,"A",{href:!0});var oct=s(kG);zXo=r(oct,"WavLMForAudioFrameClassification"),oct.forEach(t),QXo=r(xye," (WavLM model)"),xye.forEach(t),WE.forEach(t),WXo=i(ea),Xv=n(ea,"P",{});var kye=s(Xv);HXo=r(kye,"The model is set in evaluation mode by default using "),Vme=n(kye,"CODE",{});var rct=s(Vme);UXo=r(rct,"model.eval()"),rct.forEach(t),JXo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(kye,"CODE",{});var tct=s(Xme);YXo=r(tct,"model.train()"),tct.forEach(t),kye.forEach(t),KXo=i(ea),zme=n(ea,"P",{});var act=s(zme);ZXo=r(act,"Examples:"),act.forEach(t),ezo=i(ea),m(nw.$$.fragment,ea),ea.forEach(t),El.forEach(t),wBe=i(c),Vd=n(c,"H2",{class:!0});var P$e=s(Vd);zv=n(P$e,"A",{id:!0,class:!0,href:!0});var nct=s(zv);Qme=n(nct,"SPAN",{});var sct=s(Qme);m(sw.$$.fragment,sct),sct.forEach(t),nct.forEach(t),ozo=i(P$e),Wme=n(P$e,"SPAN",{});var lct=s(Wme);rzo=r(lct,"AutoModelForCTC"),lct.forEach(t),P$e.forEach(t),ABe=i(c),fr=n(c,"DIV",{class:!0});var wl=s(fr);m(lw.$$.fragment,wl),tzo=i(wl),Xd=n(wl,"P",{});var eJ=s(Xd);azo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SG=n(eJ,"A",{href:!0});var ict=s(SG);nzo=r(ict,"from_pretrained()"),ict.forEach(t),szo=r(eJ," class method or the "),RG=n(eJ,"A",{href:!0});var dct=s(RG);lzo=r(dct,"from_config()"),dct.forEach(t),izo=r(eJ,` class
method.`),eJ.forEach(t),dzo=i(wl),iw=n(wl,"P",{});var $$e=s(iw);czo=r($$e,"This class cannot be instantiated directly using "),Hme=n($$e,"CODE",{});var cct=s(Hme);fzo=r(cct,"__init__()"),cct.forEach(t),mzo=r($$e," (throws an error)."),$$e.forEach(t),gzo=i(wl),nt=n(wl,"DIV",{class:!0});var Al=s(nt);m(dw.$$.fragment,Al),hzo=i(Al),Ume=n(Al,"P",{});var fct=s(Ume);pzo=r(fct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),fct.forEach(t),_zo=i(Al),zd=n(Al,"P",{});var oJ=s(zd);uzo=r(oJ,`Note:
Loading a model from its configuration file does `),Jme=n(oJ,"STRONG",{});var mct=s(Jme);bzo=r(mct,"not"),mct.forEach(t),vzo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(oJ,"A",{href:!0});var gct=s(BG);Fzo=r(gct,"from_pretrained()"),gct.forEach(t),Tzo=r(oJ," to load the model weights."),oJ.forEach(t),Mzo=i(Al),Yme=n(Al,"P",{});var hct=s(Yme);Ezo=r(hct,"Examples:"),hct.forEach(t),Czo=i(Al),m(cw.$$.fragment,Al),Al.forEach(t),wzo=i(wl),Ke=n(wl,"DIV",{class:!0});var oa=s(Ke);m(fw.$$.fragment,oa),Azo=i(oa),Kme=n(oa,"P",{});var pct=s(Kme);yzo=r(pct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pct.forEach(t),Lzo=i(oa),sn=n(oa,"P",{});var HE=s(sn);xzo=r(HE,"The model class to instantiate is selected based on the "),Zme=n(HE,"CODE",{});var _ct=s(Zme);kzo=r(_ct,"model_type"),_ct.forEach(t),Szo=r(HE,` property of the config object (either
passed as an argument or loaded from `),ege=n(HE,"CODE",{});var uct=s(ege);Rzo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Bzo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oge=n(HE,"CODE",{});var bct=s(oge);Pzo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),$zo=r(HE,":"),HE.forEach(t),Izo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);Qv=n(Go,"LI",{});var Sye=s(Qv);rge=n(Sye,"STRONG",{});var vct=s(rge);qzo=r(vct,"data2vec-audio"),vct.forEach(t),Nzo=r(Sye," \u2014 "),PG=n(Sye,"A",{href:!0});var Fct=s(PG);jzo=r(Fct,"Data2VecAudioForCTC"),Fct.forEach(t),Dzo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),Gzo=i(Go),Wv=n(Go,"LI",{});var Rye=s(Wv);tge=n(Rye,"STRONG",{});var Tct=s(tge);Ozo=r(Tct,"hubert"),Tct.forEach(t),Vzo=r(Rye," \u2014 "),$G=n(Rye,"A",{href:!0});var Mct=s($G);Xzo=r(Mct,"HubertForCTC"),Mct.forEach(t),zzo=r(Rye," (Hubert model)"),Rye.forEach(t),Qzo=i(Go),Hv=n(Go,"LI",{});var Bye=s(Hv);age=n(Bye,"STRONG",{});var Ect=s(age);Wzo=r(Ect,"sew"),Ect.forEach(t),Hzo=r(Bye," \u2014 "),IG=n(Bye,"A",{href:!0});var Cct=s(IG);Uzo=r(Cct,"SEWForCTC"),Cct.forEach(t),Jzo=r(Bye," (SEW model)"),Bye.forEach(t),Yzo=i(Go),Uv=n(Go,"LI",{});var Pye=s(Uv);nge=n(Pye,"STRONG",{});var wct=s(nge);Kzo=r(wct,"sew-d"),wct.forEach(t),Zzo=r(Pye," \u2014 "),qG=n(Pye,"A",{href:!0});var Act=s(qG);eQo=r(Act,"SEWDForCTC"),Act.forEach(t),oQo=r(Pye," (SEW-D model)"),Pye.forEach(t),rQo=i(Go),Jv=n(Go,"LI",{});var $ye=s(Jv);sge=n($ye,"STRONG",{});var yct=s(sge);tQo=r(yct,"unispeech"),yct.forEach(t),aQo=r($ye," \u2014 "),NG=n($ye,"A",{href:!0});var Lct=s(NG);nQo=r(Lct,"UniSpeechForCTC"),Lct.forEach(t),sQo=r($ye," (UniSpeech model)"),$ye.forEach(t),lQo=i(Go),Yv=n(Go,"LI",{});var Iye=s(Yv);lge=n(Iye,"STRONG",{});var xct=s(lge);iQo=r(xct,"unispeech-sat"),xct.forEach(t),dQo=r(Iye," \u2014 "),jG=n(Iye,"A",{href:!0});var kct=s(jG);cQo=r(kct,"UniSpeechSatForCTC"),kct.forEach(t),fQo=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),mQo=i(Go),Kv=n(Go,"LI",{});var qye=s(Kv);ige=n(qye,"STRONG",{});var Sct=s(ige);gQo=r(Sct,"wav2vec2"),Sct.forEach(t),hQo=r(qye," \u2014 "),DG=n(qye,"A",{href:!0});var Rct=s(DG);pQo=r(Rct,"Wav2Vec2ForCTC"),Rct.forEach(t),_Qo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),uQo=i(Go),Zv=n(Go,"LI",{});var Nye=s(Zv);dge=n(Nye,"STRONG",{});var Bct=s(dge);bQo=r(Bct,"wavlm"),Bct.forEach(t),vQo=r(Nye," \u2014 "),GG=n(Nye,"A",{href:!0});var Pct=s(GG);FQo=r(Pct,"WavLMForCTC"),Pct.forEach(t),TQo=r(Nye," (WavLM model)"),Nye.forEach(t),Go.forEach(t),MQo=i(oa),eF=n(oa,"P",{});var jye=s(eF);EQo=r(jye,"The model is set in evaluation mode by default using "),cge=n(jye,"CODE",{});var $ct=s(cge);CQo=r($ct,"model.eval()"),$ct.forEach(t),wQo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fge=n(jye,"CODE",{});var Ict=s(fge);AQo=r(Ict,"model.train()"),Ict.forEach(t),jye.forEach(t),yQo=i(oa),mge=n(oa,"P",{});var qct=s(mge);LQo=r(qct,"Examples:"),qct.forEach(t),xQo=i(oa),m(mw.$$.fragment,oa),oa.forEach(t),wl.forEach(t),yBe=i(c),Qd=n(c,"H2",{class:!0});var I$e=s(Qd);oF=n(I$e,"A",{id:!0,class:!0,href:!0});var Nct=s(oF);gge=n(Nct,"SPAN",{});var jct=s(gge);m(gw.$$.fragment,jct),jct.forEach(t),Nct.forEach(t),kQo=i(I$e),hge=n(I$e,"SPAN",{});var Dct=s(hge);SQo=r(Dct,"AutoModelForSpeechSeq2Seq"),Dct.forEach(t),I$e.forEach(t),LBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(hw.$$.fragment,yl),RQo=i(yl),Wd=n(yl,"P",{});var rJ=s(Wd);BQo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OG=n(rJ,"A",{href:!0});var Gct=s(OG);PQo=r(Gct,"from_pretrained()"),Gct.forEach(t),$Qo=r(rJ," class method or the "),VG=n(rJ,"A",{href:!0});var Oct=s(VG);IQo=r(Oct,"from_config()"),Oct.forEach(t),qQo=r(rJ,` class
method.`),rJ.forEach(t),NQo=i(yl),pw=n(yl,"P",{});var q$e=s(pw);jQo=r(q$e,"This class cannot be instantiated directly using "),pge=n(q$e,"CODE",{});var Vct=s(pge);DQo=r(Vct,"__init__()"),Vct.forEach(t),GQo=r(q$e," (throws an error)."),q$e.forEach(t),OQo=i(yl),st=n(yl,"DIV",{class:!0});var Ll=s(st);m(_w.$$.fragment,Ll),VQo=i(Ll),_ge=n(Ll,"P",{});var Xct=s(_ge);XQo=r(Xct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Xct.forEach(t),zQo=i(Ll),Hd=n(Ll,"P",{});var tJ=s(Hd);QQo=r(tJ,`Note:
Loading a model from its configuration file does `),uge=n(tJ,"STRONG",{});var zct=s(uge);WQo=r(zct,"not"),zct.forEach(t),HQo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(tJ,"A",{href:!0});var Qct=s(XG);UQo=r(Qct,"from_pretrained()"),Qct.forEach(t),JQo=r(tJ," to load the model weights."),tJ.forEach(t),YQo=i(Ll),bge=n(Ll,"P",{});var Wct=s(bge);KQo=r(Wct,"Examples:"),Wct.forEach(t),ZQo=i(Ll),m(uw.$$.fragment,Ll),Ll.forEach(t),eWo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(bw.$$.fragment,ra),oWo=i(ra),vge=n(ra,"P",{});var Hct=s(vge);rWo=r(Hct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Hct.forEach(t),tWo=i(ra),ln=n(ra,"P",{});var UE=s(ln);aWo=r(UE,"The model class to instantiate is selected based on the "),Fge=n(UE,"CODE",{});var Uct=s(Fge);nWo=r(Uct,"model_type"),Uct.forEach(t),sWo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Tge=n(UE,"CODE",{});var Jct=s(Tge);lWo=r(Jct,"pretrained_model_name_or_path"),Jct.forEach(t),iWo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=n(UE,"CODE",{});var Yct=s(Mge);dWo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),cWo=r(UE,":"),UE.forEach(t),fWo=i(ra),vw=n(ra,"UL",{});var N$e=s(vw);rF=n(N$e,"LI",{});var Dye=s(rF);Ege=n(Dye,"STRONG",{});var Kct=s(Ege);mWo=r(Kct,"speech-encoder-decoder"),Kct.forEach(t),gWo=r(Dye," \u2014 "),zG=n(Dye,"A",{href:!0});var Zct=s(zG);hWo=r(Zct,"SpeechEncoderDecoderModel"),Zct.forEach(t),pWo=r(Dye," (Speech Encoder decoder model)"),Dye.forEach(t),_Wo=i(N$e),tF=n(N$e,"LI",{});var Gye=s(tF);Cge=n(Gye,"STRONG",{});var eft=s(Cge);uWo=r(eft,"speech_to_text"),eft.forEach(t),bWo=r(Gye," \u2014 "),QG=n(Gye,"A",{href:!0});var oft=s(QG);vWo=r(oft,"Speech2TextForConditionalGeneration"),oft.forEach(t),FWo=r(Gye," (Speech2Text model)"),Gye.forEach(t),N$e.forEach(t),TWo=i(ra),aF=n(ra,"P",{});var Oye=s(aF);MWo=r(Oye,"The model is set in evaluation mode by default using "),wge=n(Oye,"CODE",{});var rft=s(wge);EWo=r(rft,"model.eval()"),rft.forEach(t),CWo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Age=n(Oye,"CODE",{});var tft=s(Age);wWo=r(tft,"model.train()"),tft.forEach(t),Oye.forEach(t),AWo=i(ra),yge=n(ra,"P",{});var aft=s(yge);yWo=r(aft,"Examples:"),aft.forEach(t),LWo=i(ra),m(Fw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),xBe=i(c),Ud=n(c,"H2",{class:!0});var j$e=s(Ud);nF=n(j$e,"A",{id:!0,class:!0,href:!0});var nft=s(nF);Lge=n(nft,"SPAN",{});var sft=s(Lge);m(Tw.$$.fragment,sft),sft.forEach(t),nft.forEach(t),xWo=i(j$e),xge=n(j$e,"SPAN",{});var lft=s(xge);kWo=r(lft,"AutoModelForAudioXVector"),lft.forEach(t),j$e.forEach(t),kBe=i(c),gr=n(c,"DIV",{class:!0});var xl=s(gr);m(Mw.$$.fragment,xl),SWo=i(xl),Jd=n(xl,"P",{});var aJ=s(Jd);RWo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),WG=n(aJ,"A",{href:!0});var ift=s(WG);BWo=r(ift,"from_pretrained()"),ift.forEach(t),PWo=r(aJ," class method or the "),HG=n(aJ,"A",{href:!0});var dft=s(HG);$Wo=r(dft,"from_config()"),dft.forEach(t),IWo=r(aJ,` class
method.`),aJ.forEach(t),qWo=i(xl),Ew=n(xl,"P",{});var D$e=s(Ew);NWo=r(D$e,"This class cannot be instantiated directly using "),kge=n(D$e,"CODE",{});var cft=s(kge);jWo=r(cft,"__init__()"),cft.forEach(t),DWo=r(D$e," (throws an error)."),D$e.forEach(t),GWo=i(xl),lt=n(xl,"DIV",{class:!0});var kl=s(lt);m(Cw.$$.fragment,kl),OWo=i(kl),Sge=n(kl,"P",{});var fft=s(Sge);VWo=r(fft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),fft.forEach(t),XWo=i(kl),Yd=n(kl,"P",{});var nJ=s(Yd);zWo=r(nJ,`Note:
Loading a model from its configuration file does `),Rge=n(nJ,"STRONG",{});var mft=s(Rge);QWo=r(mft,"not"),mft.forEach(t),WWo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n(nJ,"A",{href:!0});var gft=s(UG);HWo=r(gft,"from_pretrained()"),gft.forEach(t),UWo=r(nJ," to load the model weights."),nJ.forEach(t),JWo=i(kl),Bge=n(kl,"P",{});var hft=s(Bge);YWo=r(hft,"Examples:"),hft.forEach(t),KWo=i(kl),m(ww.$$.fragment,kl),kl.forEach(t),ZWo=i(xl),eo=n(xl,"DIV",{class:!0});var ta=s(eo);m(Aw.$$.fragment,ta),eHo=i(ta),Pge=n(ta,"P",{});var pft=s(Pge);oHo=r(pft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),pft.forEach(t),rHo=i(ta),dn=n(ta,"P",{});var JE=s(dn);tHo=r(JE,"The model class to instantiate is selected based on the "),$ge=n(JE,"CODE",{});var _ft=s($ge);aHo=r(_ft,"model_type"),_ft.forEach(t),nHo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Ige=n(JE,"CODE",{});var uft=s(Ige);sHo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),lHo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(JE,"CODE",{});var bft=s(qge);iHo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),dHo=r(JE,":"),JE.forEach(t),cHo=i(ta),cn=n(ta,"UL",{});var YE=s(cn);sF=n(YE,"LI",{});var Vye=s(sF);Nge=n(Vye,"STRONG",{});var vft=s(Nge);fHo=r(vft,"data2vec-audio"),vft.forEach(t),mHo=r(Vye," \u2014 "),JG=n(Vye,"A",{href:!0});var Fft=s(JG);gHo=r(Fft,"Data2VecAudioForXVector"),Fft.forEach(t),hHo=r(Vye," (Data2VecAudio model)"),Vye.forEach(t),pHo=i(YE),lF=n(YE,"LI",{});var Xye=s(lF);jge=n(Xye,"STRONG",{});var Tft=s(jge);_Ho=r(Tft,"unispeech-sat"),Tft.forEach(t),uHo=r(Xye," \u2014 "),YG=n(Xye,"A",{href:!0});var Mft=s(YG);bHo=r(Mft,"UniSpeechSatForXVector"),Mft.forEach(t),vHo=r(Xye," (UniSpeechSat model)"),Xye.forEach(t),FHo=i(YE),iF=n(YE,"LI",{});var zye=s(iF);Dge=n(zye,"STRONG",{});var Eft=s(Dge);THo=r(Eft,"wav2vec2"),Eft.forEach(t),MHo=r(zye," \u2014 "),KG=n(zye,"A",{href:!0});var Cft=s(KG);EHo=r(Cft,"Wav2Vec2ForXVector"),Cft.forEach(t),CHo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),wHo=i(YE),dF=n(YE,"LI",{});var Qye=s(dF);Gge=n(Qye,"STRONG",{});var wft=s(Gge);AHo=r(wft,"wavlm"),wft.forEach(t),yHo=r(Qye," \u2014 "),ZG=n(Qye,"A",{href:!0});var Aft=s(ZG);LHo=r(Aft,"WavLMForXVector"),Aft.forEach(t),xHo=r(Qye," (WavLM model)"),Qye.forEach(t),YE.forEach(t),kHo=i(ta),cF=n(ta,"P",{});var Wye=s(cF);SHo=r(Wye,"The model is set in evaluation mode by default using "),Oge=n(Wye,"CODE",{});var yft=s(Oge);RHo=r(yft,"model.eval()"),yft.forEach(t),BHo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(Wye,"CODE",{});var Lft=s(Vge);PHo=r(Lft,"model.train()"),Lft.forEach(t),Wye.forEach(t),$Ho=i(ta),Xge=n(ta,"P",{});var xft=s(Xge);IHo=r(xft,"Examples:"),xft.forEach(t),qHo=i(ta),m(yw.$$.fragment,ta),ta.forEach(t),xl.forEach(t),SBe=i(c),Kd=n(c,"H2",{class:!0});var G$e=s(Kd);fF=n(G$e,"A",{id:!0,class:!0,href:!0});var kft=s(fF);zge=n(kft,"SPAN",{});var Sft=s(zge);m(Lw.$$.fragment,Sft),Sft.forEach(t),kft.forEach(t),NHo=i(G$e),Qge=n(G$e,"SPAN",{});var Rft=s(Qge);jHo=r(Rft,"AutoModelForMaskedImageModeling"),Rft.forEach(t),G$e.forEach(t),RBe=i(c),hr=n(c,"DIV",{class:!0});var Sl=s(hr);m(xw.$$.fragment,Sl),DHo=i(Sl),Zd=n(Sl,"P",{});var sJ=s(Zd);GHo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),eO=n(sJ,"A",{href:!0});var Bft=s(eO);OHo=r(Bft,"from_pretrained()"),Bft.forEach(t),VHo=r(sJ," class method or the "),oO=n(sJ,"A",{href:!0});var Pft=s(oO);XHo=r(Pft,"from_config()"),Pft.forEach(t),zHo=r(sJ,` class
method.`),sJ.forEach(t),QHo=i(Sl),kw=n(Sl,"P",{});var O$e=s(kw);WHo=r(O$e,"This class cannot be instantiated directly using "),Wge=n(O$e,"CODE",{});var $ft=s(Wge);HHo=r($ft,"__init__()"),$ft.forEach(t),UHo=r(O$e," (throws an error)."),O$e.forEach(t),JHo=i(Sl),it=n(Sl,"DIV",{class:!0});var Rl=s(it);m(Sw.$$.fragment,Rl),YHo=i(Rl),Hge=n(Rl,"P",{});var Ift=s(Hge);KHo=r(Ift,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ift.forEach(t),ZHo=i(Rl),ec=n(Rl,"P",{});var lJ=s(ec);eUo=r(lJ,`Note:
Loading a model from its configuration file does `),Uge=n(lJ,"STRONG",{});var qft=s(Uge);oUo=r(qft,"not"),qft.forEach(t),rUo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rO=n(lJ,"A",{href:!0});var Nft=s(rO);tUo=r(Nft,"from_pretrained()"),Nft.forEach(t),aUo=r(lJ," to load the model weights."),lJ.forEach(t),nUo=i(Rl),Jge=n(Rl,"P",{});var jft=s(Jge);sUo=r(jft,"Examples:"),jft.forEach(t),lUo=i(Rl),m(Rw.$$.fragment,Rl),Rl.forEach(t),iUo=i(Sl),oo=n(Sl,"DIV",{class:!0});var aa=s(oo);m(Bw.$$.fragment,aa),dUo=i(aa),Yge=n(aa,"P",{});var Dft=s(Yge);cUo=r(Dft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Dft.forEach(t),fUo=i(aa),fn=n(aa,"P",{});var KE=s(fn);mUo=r(KE,"The model class to instantiate is selected based on the "),Kge=n(KE,"CODE",{});var Gft=s(Kge);gUo=r(Gft,"model_type"),Gft.forEach(t),hUo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Zge=n(KE,"CODE",{});var Oft=s(Zge);pUo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),_Uo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(KE,"CODE",{});var Vft=s(ehe);uUo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),bUo=r(KE,":"),KE.forEach(t),vUo=i(aa),oc=n(aa,"UL",{});var iJ=s(oc);mF=n(iJ,"LI",{});var Hye=s(mF);ohe=n(Hye,"STRONG",{});var Xft=s(ohe);FUo=r(Xft,"deit"),Xft.forEach(t),TUo=r(Hye," \u2014 "),tO=n(Hye,"A",{href:!0});var zft=s(tO);MUo=r(zft,"DeiTForMaskedImageModeling"),zft.forEach(t),EUo=r(Hye," (DeiT model)"),Hye.forEach(t),CUo=i(iJ),gF=n(iJ,"LI",{});var Uye=s(gF);rhe=n(Uye,"STRONG",{});var Qft=s(rhe);wUo=r(Qft,"swin"),Qft.forEach(t),AUo=r(Uye," \u2014 "),aO=n(Uye,"A",{href:!0});var Wft=s(aO);yUo=r(Wft,"SwinForMaskedImageModeling"),Wft.forEach(t),LUo=r(Uye," (Swin model)"),Uye.forEach(t),xUo=i(iJ),hF=n(iJ,"LI",{});var Jye=s(hF);the=n(Jye,"STRONG",{});var Hft=s(the);kUo=r(Hft,"vit"),Hft.forEach(t),SUo=r(Jye," \u2014 "),nO=n(Jye,"A",{href:!0});var Uft=s(nO);RUo=r(Uft,"ViTForMaskedImageModeling"),Uft.forEach(t),BUo=r(Jye," (ViT model)"),Jye.forEach(t),iJ.forEach(t),PUo=i(aa),pF=n(aa,"P",{});var Yye=s(pF);$Uo=r(Yye,"The model is set in evaluation mode by default using "),ahe=n(Yye,"CODE",{});var Jft=s(ahe);IUo=r(Jft,"model.eval()"),Jft.forEach(t),qUo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nhe=n(Yye,"CODE",{});var Yft=s(nhe);NUo=r(Yft,"model.train()"),Yft.forEach(t),Yye.forEach(t),jUo=i(aa),she=n(aa,"P",{});var Kft=s(she);DUo=r(Kft,"Examples:"),Kft.forEach(t),GUo=i(aa),m(Pw.$$.fragment,aa),aa.forEach(t),Sl.forEach(t),BBe=i(c),rc=n(c,"H2",{class:!0});var V$e=s(rc);_F=n(V$e,"A",{id:!0,class:!0,href:!0});var Zft=s(_F);lhe=n(Zft,"SPAN",{});var emt=s(lhe);m($w.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),OUo=i(V$e),ihe=n(V$e,"SPAN",{});var omt=s(ihe);VUo=r(omt,"AutoModelForObjectDetection"),omt.forEach(t),V$e.forEach(t),PBe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);m(Iw.$$.fragment,Bl),XUo=i(Bl),tc=n(Bl,"P",{});var dJ=s(tc);zUo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),sO=n(dJ,"A",{href:!0});var rmt=s(sO);QUo=r(rmt,"from_pretrained()"),rmt.forEach(t),WUo=r(dJ," class method or the "),lO=n(dJ,"A",{href:!0});var tmt=s(lO);HUo=r(tmt,"from_config()"),tmt.forEach(t),UUo=r(dJ,` class
method.`),dJ.forEach(t),JUo=i(Bl),qw=n(Bl,"P",{});var X$e=s(qw);YUo=r(X$e,"This class cannot be instantiated directly using "),dhe=n(X$e,"CODE",{});var amt=s(dhe);KUo=r(amt,"__init__()"),amt.forEach(t),ZUo=r(X$e," (throws an error)."),X$e.forEach(t),eJo=i(Bl),dt=n(Bl,"DIV",{class:!0});var Pl=s(dt);m(Nw.$$.fragment,Pl),oJo=i(Pl),che=n(Pl,"P",{});var nmt=s(che);rJo=r(nmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nmt.forEach(t),tJo=i(Pl),ac=n(Pl,"P",{});var cJ=s(ac);aJo=r(cJ,`Note:
Loading a model from its configuration file does `),fhe=n(cJ,"STRONG",{});var smt=s(fhe);nJo=r(smt,"not"),smt.forEach(t),sJo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(cJ,"A",{href:!0});var lmt=s(iO);lJo=r(lmt,"from_pretrained()"),lmt.forEach(t),iJo=r(cJ," to load the model weights."),cJ.forEach(t),dJo=i(Pl),mhe=n(Pl,"P",{});var imt=s(mhe);cJo=r(imt,"Examples:"),imt.forEach(t),fJo=i(Pl),m(jw.$$.fragment,Pl),Pl.forEach(t),mJo=i(Bl),ro=n(Bl,"DIV",{class:!0});var na=s(ro);m(Dw.$$.fragment,na),gJo=i(na),ghe=n(na,"P",{});var dmt=s(ghe);hJo=r(dmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dmt.forEach(t),pJo=i(na),mn=n(na,"P",{});var ZE=s(mn);_Jo=r(ZE,"The model class to instantiate is selected based on the "),hhe=n(ZE,"CODE",{});var cmt=s(hhe);uJo=r(cmt,"model_type"),cmt.forEach(t),bJo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),phe=n(ZE,"CODE",{});var fmt=s(phe);vJo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),FJo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(ZE,"CODE",{});var mmt=s(_he);TJo=r(mmt,"pretrained_model_name_or_path"),mmt.forEach(t),MJo=r(ZE,":"),ZE.forEach(t),EJo=i(na),uhe=n(na,"UL",{});var gmt=s(uhe);uF=n(gmt,"LI",{});var Kye=s(uF);bhe=n(Kye,"STRONG",{});var hmt=s(bhe);CJo=r(hmt,"detr"),hmt.forEach(t),wJo=r(Kye," \u2014 "),dO=n(Kye,"A",{href:!0});var pmt=s(dO);AJo=r(pmt,"DetrForObjectDetection"),pmt.forEach(t),yJo=r(Kye," (DETR model)"),Kye.forEach(t),gmt.forEach(t),LJo=i(na),bF=n(na,"P",{});var Zye=s(bF);xJo=r(Zye,"The model is set in evaluation mode by default using "),vhe=n(Zye,"CODE",{});var _mt=s(vhe);kJo=r(_mt,"model.eval()"),_mt.forEach(t),SJo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(Zye,"CODE",{});var umt=s(Fhe);RJo=r(umt,"model.train()"),umt.forEach(t),Zye.forEach(t),BJo=i(na),The=n(na,"P",{});var bmt=s(The);PJo=r(bmt,"Examples:"),bmt.forEach(t),$Jo=i(na),m(Gw.$$.fragment,na),na.forEach(t),Bl.forEach(t),$Be=i(c),nc=n(c,"H2",{class:!0});var z$e=s(nc);vF=n(z$e,"A",{id:!0,class:!0,href:!0});var vmt=s(vF);Mhe=n(vmt,"SPAN",{});var Fmt=s(Mhe);m(Ow.$$.fragment,Fmt),Fmt.forEach(t),vmt.forEach(t),IJo=i(z$e),Ehe=n(z$e,"SPAN",{});var Tmt=s(Ehe);qJo=r(Tmt,"AutoModelForImageSegmentation"),Tmt.forEach(t),z$e.forEach(t),IBe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);m(Vw.$$.fragment,$l),NJo=i($l),sc=n($l,"P",{});var fJ=s(sc);jJo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),cO=n(fJ,"A",{href:!0});var Mmt=s(cO);DJo=r(Mmt,"from_pretrained()"),Mmt.forEach(t),GJo=r(fJ," class method or the "),fO=n(fJ,"A",{href:!0});var Emt=s(fO);OJo=r(Emt,"from_config()"),Emt.forEach(t),VJo=r(fJ,` class
method.`),fJ.forEach(t),XJo=i($l),Xw=n($l,"P",{});var Q$e=s(Xw);zJo=r(Q$e,"This class cannot be instantiated directly using "),Che=n(Q$e,"CODE",{});var Cmt=s(Che);QJo=r(Cmt,"__init__()"),Cmt.forEach(t),WJo=r(Q$e," (throws an error)."),Q$e.forEach(t),HJo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(zw.$$.fragment,Il),UJo=i(Il),whe=n(Il,"P",{});var wmt=s(whe);JJo=r(wmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),wmt.forEach(t),YJo=i(Il),lc=n(Il,"P",{});var mJ=s(lc);KJo=r(mJ,`Note:
Loading a model from its configuration file does `),Ahe=n(mJ,"STRONG",{});var Amt=s(Ahe);ZJo=r(Amt,"not"),Amt.forEach(t),eYo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mO=n(mJ,"A",{href:!0});var ymt=s(mO);oYo=r(ymt,"from_pretrained()"),ymt.forEach(t),rYo=r(mJ," to load the model weights."),mJ.forEach(t),tYo=i(Il),yhe=n(Il,"P",{});var Lmt=s(yhe);aYo=r(Lmt,"Examples:"),Lmt.forEach(t),nYo=i(Il),m(Qw.$$.fragment,Il),Il.forEach(t),sYo=i($l),to=n($l,"DIV",{class:!0});var sa=s(to);m(Ww.$$.fragment,sa),lYo=i(sa),Lhe=n(sa,"P",{});var xmt=s(Lhe);iYo=r(xmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xmt.forEach(t),dYo=i(sa),gn=n(sa,"P",{});var e5=s(gn);cYo=r(e5,"The model class to instantiate is selected based on the "),xhe=n(e5,"CODE",{});var kmt=s(xhe);fYo=r(kmt,"model_type"),kmt.forEach(t),mYo=r(e5,` property of the config object (either
passed as an argument or loaded from `),khe=n(e5,"CODE",{});var Smt=s(khe);gYo=r(Smt,"pretrained_model_name_or_path"),Smt.forEach(t),hYo=r(e5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(e5,"CODE",{});var Rmt=s(She);pYo=r(Rmt,"pretrained_model_name_or_path"),Rmt.forEach(t),_Yo=r(e5,":"),e5.forEach(t),uYo=i(sa),Rhe=n(sa,"UL",{});var Bmt=s(Rhe);FF=n(Bmt,"LI",{});var eLe=s(FF);Bhe=n(eLe,"STRONG",{});var Pmt=s(Bhe);bYo=r(Pmt,"detr"),Pmt.forEach(t),vYo=r(eLe," \u2014 "),gO=n(eLe,"A",{href:!0});var $mt=s(gO);FYo=r($mt,"DetrForSegmentation"),$mt.forEach(t),TYo=r(eLe," (DETR model)"),eLe.forEach(t),Bmt.forEach(t),MYo=i(sa),TF=n(sa,"P",{});var oLe=s(TF);EYo=r(oLe,"The model is set in evaluation mode by default using "),Phe=n(oLe,"CODE",{});var Imt=s(Phe);CYo=r(Imt,"model.eval()"),Imt.forEach(t),wYo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(oLe,"CODE",{});var qmt=s($he);AYo=r(qmt,"model.train()"),qmt.forEach(t),oLe.forEach(t),yYo=i(sa),Ihe=n(sa,"P",{});var Nmt=s(Ihe);LYo=r(Nmt,"Examples:"),Nmt.forEach(t),xYo=i(sa),m(Hw.$$.fragment,sa),sa.forEach(t),$l.forEach(t),qBe=i(c),ic=n(c,"H2",{class:!0});var W$e=s(ic);MF=n(W$e,"A",{id:!0,class:!0,href:!0});var jmt=s(MF);qhe=n(jmt,"SPAN",{});var Dmt=s(qhe);m(Uw.$$.fragment,Dmt),Dmt.forEach(t),jmt.forEach(t),kYo=i(W$e),Nhe=n(W$e,"SPAN",{});var Gmt=s(Nhe);SYo=r(Gmt,"AutoModelForSemanticSegmentation"),Gmt.forEach(t),W$e.forEach(t),NBe=i(c),ur=n(c,"DIV",{class:!0});var ql=s(ur);m(Jw.$$.fragment,ql),RYo=i(ql),dc=n(ql,"P",{});var gJ=s(dc);BYo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),hO=n(gJ,"A",{href:!0});var Omt=s(hO);PYo=r(Omt,"from_pretrained()"),Omt.forEach(t),$Yo=r(gJ," class method or the "),pO=n(gJ,"A",{href:!0});var Vmt=s(pO);IYo=r(Vmt,"from_config()"),Vmt.forEach(t),qYo=r(gJ,` class
method.`),gJ.forEach(t),NYo=i(ql),Yw=n(ql,"P",{});var H$e=s(Yw);jYo=r(H$e,"This class cannot be instantiated directly using "),jhe=n(H$e,"CODE",{});var Xmt=s(jhe);DYo=r(Xmt,"__init__()"),Xmt.forEach(t),GYo=r(H$e," (throws an error)."),H$e.forEach(t),OYo=i(ql),ft=n(ql,"DIV",{class:!0});var Nl=s(ft);m(Kw.$$.fragment,Nl),VYo=i(Nl),Dhe=n(Nl,"P",{});var zmt=s(Dhe);XYo=r(zmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),zmt.forEach(t),zYo=i(Nl),cc=n(Nl,"P",{});var hJ=s(cc);QYo=r(hJ,`Note:
Loading a model from its configuration file does `),Ghe=n(hJ,"STRONG",{});var Qmt=s(Ghe);WYo=r(Qmt,"not"),Qmt.forEach(t),HYo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(hJ,"A",{href:!0});var Wmt=s(_O);UYo=r(Wmt,"from_pretrained()"),Wmt.forEach(t),JYo=r(hJ," to load the model weights."),hJ.forEach(t),YYo=i(Nl),Ohe=n(Nl,"P",{});var Hmt=s(Ohe);KYo=r(Hmt,"Examples:"),Hmt.forEach(t),ZYo=i(Nl),m(Zw.$$.fragment,Nl),Nl.forEach(t),eKo=i(ql),ao=n(ql,"DIV",{class:!0});var la=s(ao);m(eA.$$.fragment,la),oKo=i(la),Vhe=n(la,"P",{});var Umt=s(Vhe);rKo=r(Umt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Umt.forEach(t),tKo=i(la),hn=n(la,"P",{});var o5=s(hn);aKo=r(o5,"The model class to instantiate is selected based on the "),Xhe=n(o5,"CODE",{});var Jmt=s(Xhe);nKo=r(Jmt,"model_type"),Jmt.forEach(t),sKo=r(o5,` property of the config object (either
passed as an argument or loaded from `),zhe=n(o5,"CODE",{});var Ymt=s(zhe);lKo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),iKo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(o5,"CODE",{});var Kmt=s(Qhe);dKo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),cKo=r(o5,":"),o5.forEach(t),fKo=i(la),pn=n(la,"UL",{});var r5=s(pn);EF=n(r5,"LI",{});var rLe=s(EF);Whe=n(rLe,"STRONG",{});var Zmt=s(Whe);mKo=r(Zmt,"beit"),Zmt.forEach(t),gKo=r(rLe," \u2014 "),uO=n(rLe,"A",{href:!0});var egt=s(uO);hKo=r(egt,"BeitForSemanticSegmentation"),egt.forEach(t),pKo=r(rLe," (BEiT model)"),rLe.forEach(t),_Ko=i(r5),CF=n(r5,"LI",{});var tLe=s(CF);Hhe=n(tLe,"STRONG",{});var ogt=s(Hhe);uKo=r(ogt,"data2vec-vision"),ogt.forEach(t),bKo=r(tLe," \u2014 "),bO=n(tLe,"A",{href:!0});var rgt=s(bO);vKo=r(rgt,"Data2VecVisionForSemanticSegmentation"),rgt.forEach(t),FKo=r(tLe," (Data2VecVision model)"),tLe.forEach(t),TKo=i(r5),wF=n(r5,"LI",{});var aLe=s(wF);Uhe=n(aLe,"STRONG",{});var tgt=s(Uhe);MKo=r(tgt,"dpt"),tgt.forEach(t),EKo=r(aLe," \u2014 "),vO=n(aLe,"A",{href:!0});var agt=s(vO);CKo=r(agt,"DPTForSemanticSegmentation"),agt.forEach(t),wKo=r(aLe," (DPT model)"),aLe.forEach(t),AKo=i(r5),AF=n(r5,"LI",{});var nLe=s(AF);Jhe=n(nLe,"STRONG",{});var ngt=s(Jhe);yKo=r(ngt,"segformer"),ngt.forEach(t),LKo=r(nLe," \u2014 "),FO=n(nLe,"A",{href:!0});var sgt=s(FO);xKo=r(sgt,"SegformerForSemanticSegmentation"),sgt.forEach(t),kKo=r(nLe," (SegFormer model)"),nLe.forEach(t),r5.forEach(t),SKo=i(la),yF=n(la,"P",{});var sLe=s(yF);RKo=r(sLe,"The model is set in evaluation mode by default using "),Yhe=n(sLe,"CODE",{});var lgt=s(Yhe);BKo=r(lgt,"model.eval()"),lgt.forEach(t),PKo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(sLe,"CODE",{});var igt=s(Khe);$Ko=r(igt,"model.train()"),igt.forEach(t),sLe.forEach(t),IKo=i(la),Zhe=n(la,"P",{});var dgt=s(Zhe);qKo=r(dgt,"Examples:"),dgt.forEach(t),NKo=i(la),m(oA.$$.fragment,la),la.forEach(t),ql.forEach(t),jBe=i(c),fc=n(c,"H2",{class:!0});var U$e=s(fc);LF=n(U$e,"A",{id:!0,class:!0,href:!0});var cgt=s(LF);epe=n(cgt,"SPAN",{});var fgt=s(epe);m(rA.$$.fragment,fgt),fgt.forEach(t),cgt.forEach(t),jKo=i(U$e),ope=n(U$e,"SPAN",{});var mgt=s(ope);DKo=r(mgt,"AutoModelForInstanceSegmentation"),mgt.forEach(t),U$e.forEach(t),DBe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(tA.$$.fragment,jl),GKo=i(jl),mc=n(jl,"P",{});var pJ=s(mc);OKo=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),TO=n(pJ,"A",{href:!0});var ggt=s(TO);VKo=r(ggt,"from_pretrained()"),ggt.forEach(t),XKo=r(pJ," class method or the "),MO=n(pJ,"A",{href:!0});var hgt=s(MO);zKo=r(hgt,"from_config()"),hgt.forEach(t),QKo=r(pJ,` class
method.`),pJ.forEach(t),WKo=i(jl),aA=n(jl,"P",{});var J$e=s(aA);HKo=r(J$e,"This class cannot be instantiated directly using "),rpe=n(J$e,"CODE",{});var pgt=s(rpe);UKo=r(pgt,"__init__()"),pgt.forEach(t),JKo=r(J$e," (throws an error)."),J$e.forEach(t),YKo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(nA.$$.fragment,Dl),KKo=i(Dl),tpe=n(Dl,"P",{});var _gt=s(tpe);ZKo=r(_gt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),_gt.forEach(t),eZo=i(Dl),gc=n(Dl,"P",{});var _J=s(gc);oZo=r(_J,`Note:
Loading a model from its configuration file does `),ape=n(_J,"STRONG",{});var ugt=s(ape);rZo=r(ugt,"not"),ugt.forEach(t),tZo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=n(_J,"A",{href:!0});var bgt=s(EO);aZo=r(bgt,"from_pretrained()"),bgt.forEach(t),nZo=r(_J," to load the model weights."),_J.forEach(t),sZo=i(Dl),npe=n(Dl,"P",{});var vgt=s(npe);lZo=r(vgt,"Examples:"),vgt.forEach(t),iZo=i(Dl),m(sA.$$.fragment,Dl),Dl.forEach(t),dZo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(lA.$$.fragment,ia),cZo=i(ia),spe=n(ia,"P",{});var Fgt=s(spe);fZo=r(Fgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Fgt.forEach(t),mZo=i(ia),_n=n(ia,"P",{});var t5=s(_n);gZo=r(t5,"The model class to instantiate is selected based on the "),lpe=n(t5,"CODE",{});var Tgt=s(lpe);hZo=r(Tgt,"model_type"),Tgt.forEach(t),pZo=r(t5,` property of the config object (either
passed as an argument or loaded from `),ipe=n(t5,"CODE",{});var Mgt=s(ipe);_Zo=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),uZo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(t5,"CODE",{});var Egt=s(dpe);bZo=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),vZo=r(t5,":"),t5.forEach(t),FZo=i(ia),cpe=n(ia,"UL",{});var Cgt=s(cpe);xF=n(Cgt,"LI",{});var lLe=s(xF);fpe=n(lLe,"STRONG",{});var wgt=s(fpe);TZo=r(wgt,"maskformer"),wgt.forEach(t),MZo=r(lLe," \u2014 "),CO=n(lLe,"A",{href:!0});var Agt=s(CO);EZo=r(Agt,"MaskFormerForInstanceSegmentation"),Agt.forEach(t),CZo=r(lLe," (MaskFormer model)"),lLe.forEach(t),Cgt.forEach(t),wZo=i(ia),kF=n(ia,"P",{});var iLe=s(kF);AZo=r(iLe,"The model is set in evaluation mode by default using "),mpe=n(iLe,"CODE",{});var ygt=s(mpe);yZo=r(ygt,"model.eval()"),ygt.forEach(t),LZo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gpe=n(iLe,"CODE",{});var Lgt=s(gpe);xZo=r(Lgt,"model.train()"),Lgt.forEach(t),iLe.forEach(t),kZo=i(ia),hpe=n(ia,"P",{});var xgt=s(hpe);SZo=r(xgt,"Examples:"),xgt.forEach(t),RZo=i(ia),m(iA.$$.fragment,ia),ia.forEach(t),jl.forEach(t),GBe=i(c),hc=n(c,"H2",{class:!0});var Y$e=s(hc);SF=n(Y$e,"A",{id:!0,class:!0,href:!0});var kgt=s(SF);ppe=n(kgt,"SPAN",{});var Sgt=s(ppe);m(dA.$$.fragment,Sgt),Sgt.forEach(t),kgt.forEach(t),BZo=i(Y$e),_pe=n(Y$e,"SPAN",{});var Rgt=s(_pe);PZo=r(Rgt,"TFAutoModel"),Rgt.forEach(t),Y$e.forEach(t),OBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(cA.$$.fragment,Gl),$Zo=i(Gl),pc=n(Gl,"P",{});var uJ=s(pc);IZo=r(uJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wO=n(uJ,"A",{href:!0});var Bgt=s(wO);qZo=r(Bgt,"from_pretrained()"),Bgt.forEach(t),NZo=r(uJ," class method or the "),AO=n(uJ,"A",{href:!0});var Pgt=s(AO);jZo=r(Pgt,"from_config()"),Pgt.forEach(t),DZo=r(uJ,` class
method.`),uJ.forEach(t),GZo=i(Gl),fA=n(Gl,"P",{});var K$e=s(fA);OZo=r(K$e,"This class cannot be instantiated directly using "),upe=n(K$e,"CODE",{});var $gt=s(upe);VZo=r($gt,"__init__()"),$gt.forEach(t),XZo=r(K$e," (throws an error)."),K$e.forEach(t),zZo=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(mA.$$.fragment,Ol),QZo=i(Ol),bpe=n(Ol,"P",{});var Igt=s(bpe);WZo=r(Igt,"Instantiates one of the base model classes of the library from a configuration."),Igt.forEach(t),HZo=i(Ol),_c=n(Ol,"P",{});var bJ=s(_c);UZo=r(bJ,`Note:
Loading a model from its configuration file does `),vpe=n(bJ,"STRONG",{});var qgt=s(vpe);JZo=r(qgt,"not"),qgt.forEach(t),YZo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(bJ,"A",{href:!0});var Ngt=s(yO);KZo=r(Ngt,"from_pretrained()"),Ngt.forEach(t),ZZo=r(bJ," to load the model weights."),bJ.forEach(t),eer=i(Ol),Fpe=n(Ol,"P",{});var jgt=s(Fpe);oer=r(jgt,"Examples:"),jgt.forEach(t),rer=i(Ol),m(gA.$$.fragment,Ol),Ol.forEach(t),ter=i(Gl),ho=n(Gl,"DIV",{class:!0});var pa=s(ho);m(hA.$$.fragment,pa),aer=i(pa),Tpe=n(pa,"P",{});var Dgt=s(Tpe);ner=r(Dgt,"Instantiate one of the base model classes of the library from a pretrained model."),Dgt.forEach(t),ser=i(pa),un=n(pa,"P",{});var a5=s(un);ler=r(a5,"The model class to instantiate is selected based on the "),Mpe=n(a5,"CODE",{});var Ggt=s(Mpe);ier=r(Ggt,"model_type"),Ggt.forEach(t),der=r(a5,` property of the config object (either
passed as an argument or loaded from `),Epe=n(a5,"CODE",{});var Ogt=s(Epe);cer=r(Ogt,"pretrained_model_name_or_path"),Ogt.forEach(t),fer=r(a5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(a5,"CODE",{});var Vgt=s(Cpe);mer=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),ger=r(a5,":"),a5.forEach(t),her=i(pa),x=n(pa,"UL",{});var k=s(x);RF=n(k,"LI",{});var dLe=s(RF);wpe=n(dLe,"STRONG",{});var Xgt=s(wpe);per=r(Xgt,"albert"),Xgt.forEach(t),_er=r(dLe," \u2014 "),LO=n(dLe,"A",{href:!0});var zgt=s(LO);uer=r(zgt,"TFAlbertModel"),zgt.forEach(t),ber=r(dLe," (ALBERT model)"),dLe.forEach(t),ver=i(k),BF=n(k,"LI",{});var cLe=s(BF);Ape=n(cLe,"STRONG",{});var Qgt=s(Ape);Fer=r(Qgt,"bart"),Qgt.forEach(t),Ter=r(cLe," \u2014 "),xO=n(cLe,"A",{href:!0});var Wgt=s(xO);Mer=r(Wgt,"TFBartModel"),Wgt.forEach(t),Eer=r(cLe," (BART model)"),cLe.forEach(t),Cer=i(k),PF=n(k,"LI",{});var fLe=s(PF);ype=n(fLe,"STRONG",{});var Hgt=s(ype);wer=r(Hgt,"bert"),Hgt.forEach(t),Aer=r(fLe," \u2014 "),kO=n(fLe,"A",{href:!0});var Ugt=s(kO);yer=r(Ugt,"TFBertModel"),Ugt.forEach(t),Ler=r(fLe," (BERT model)"),fLe.forEach(t),xer=i(k),$F=n(k,"LI",{});var mLe=s($F);Lpe=n(mLe,"STRONG",{});var Jgt=s(Lpe);ker=r(Jgt,"blenderbot"),Jgt.forEach(t),Ser=r(mLe," \u2014 "),SO=n(mLe,"A",{href:!0});var Ygt=s(SO);Rer=r(Ygt,"TFBlenderbotModel"),Ygt.forEach(t),Ber=r(mLe," (Blenderbot model)"),mLe.forEach(t),Per=i(k),IF=n(k,"LI",{});var gLe=s(IF);xpe=n(gLe,"STRONG",{});var Kgt=s(xpe);$er=r(Kgt,"blenderbot-small"),Kgt.forEach(t),Ier=r(gLe," \u2014 "),RO=n(gLe,"A",{href:!0});var Zgt=s(RO);qer=r(Zgt,"TFBlenderbotSmallModel"),Zgt.forEach(t),Ner=r(gLe," (BlenderbotSmall model)"),gLe.forEach(t),jer=i(k),qF=n(k,"LI",{});var hLe=s(qF);kpe=n(hLe,"STRONG",{});var eht=s(kpe);Der=r(eht,"camembert"),eht.forEach(t),Ger=r(hLe," \u2014 "),BO=n(hLe,"A",{href:!0});var oht=s(BO);Oer=r(oht,"TFCamembertModel"),oht.forEach(t),Ver=r(hLe," (CamemBERT model)"),hLe.forEach(t),Xer=i(k),NF=n(k,"LI",{});var pLe=s(NF);Spe=n(pLe,"STRONG",{});var rht=s(Spe);zer=r(rht,"clip"),rht.forEach(t),Qer=r(pLe," \u2014 "),PO=n(pLe,"A",{href:!0});var tht=s(PO);Wer=r(tht,"TFCLIPModel"),tht.forEach(t),Her=r(pLe," (CLIP model)"),pLe.forEach(t),Uer=i(k),jF=n(k,"LI",{});var _Le=s(jF);Rpe=n(_Le,"STRONG",{});var aht=s(Rpe);Jer=r(aht,"convbert"),aht.forEach(t),Yer=r(_Le," \u2014 "),$O=n(_Le,"A",{href:!0});var nht=s($O);Ker=r(nht,"TFConvBertModel"),nht.forEach(t),Zer=r(_Le," (ConvBERT model)"),_Le.forEach(t),eor=i(k),DF=n(k,"LI",{});var uLe=s(DF);Bpe=n(uLe,"STRONG",{});var sht=s(Bpe);oor=r(sht,"convnext"),sht.forEach(t),ror=r(uLe," \u2014 "),IO=n(uLe,"A",{href:!0});var lht=s(IO);tor=r(lht,"TFConvNextModel"),lht.forEach(t),aor=r(uLe," (ConvNext model)"),uLe.forEach(t),nor=i(k),GF=n(k,"LI",{});var bLe=s(GF);Ppe=n(bLe,"STRONG",{});var iht=s(Ppe);sor=r(iht,"ctrl"),iht.forEach(t),lor=r(bLe," \u2014 "),qO=n(bLe,"A",{href:!0});var dht=s(qO);ior=r(dht,"TFCTRLModel"),dht.forEach(t),dor=r(bLe," (CTRL model)"),bLe.forEach(t),cor=i(k),OF=n(k,"LI",{});var vLe=s(OF);$pe=n(vLe,"STRONG",{});var cht=s($pe);mor=r(cht,"deberta"),cht.forEach(t),gor=r(vLe," \u2014 "),NO=n(vLe,"A",{href:!0});var fht=s(NO);hor=r(fht,"TFDebertaModel"),fht.forEach(t),por=r(vLe," (DeBERTa model)"),vLe.forEach(t),_or=i(k),VF=n(k,"LI",{});var FLe=s(VF);Ipe=n(FLe,"STRONG",{});var mht=s(Ipe);uor=r(mht,"deberta-v2"),mht.forEach(t),bor=r(FLe," \u2014 "),jO=n(FLe,"A",{href:!0});var ght=s(jO);vor=r(ght,"TFDebertaV2Model"),ght.forEach(t),For=r(FLe," (DeBERTa-v2 model)"),FLe.forEach(t),Tor=i(k),XF=n(k,"LI",{});var TLe=s(XF);qpe=n(TLe,"STRONG",{});var hht=s(qpe);Mor=r(hht,"distilbert"),hht.forEach(t),Eor=r(TLe," \u2014 "),DO=n(TLe,"A",{href:!0});var pht=s(DO);Cor=r(pht,"TFDistilBertModel"),pht.forEach(t),wor=r(TLe," (DistilBERT model)"),TLe.forEach(t),Aor=i(k),zF=n(k,"LI",{});var MLe=s(zF);Npe=n(MLe,"STRONG",{});var _ht=s(Npe);yor=r(_ht,"dpr"),_ht.forEach(t),Lor=r(MLe," \u2014 "),GO=n(MLe,"A",{href:!0});var uht=s(GO);xor=r(uht,"TFDPRQuestionEncoder"),uht.forEach(t),kor=r(MLe," (DPR model)"),MLe.forEach(t),Sor=i(k),QF=n(k,"LI",{});var ELe=s(QF);jpe=n(ELe,"STRONG",{});var bht=s(jpe);Ror=r(bht,"electra"),bht.forEach(t),Bor=r(ELe," \u2014 "),OO=n(ELe,"A",{href:!0});var vht=s(OO);Por=r(vht,"TFElectraModel"),vht.forEach(t),$or=r(ELe," (ELECTRA model)"),ELe.forEach(t),Ior=i(k),WF=n(k,"LI",{});var CLe=s(WF);Dpe=n(CLe,"STRONG",{});var Fht=s(Dpe);qor=r(Fht,"flaubert"),Fht.forEach(t),Nor=r(CLe," \u2014 "),VO=n(CLe,"A",{href:!0});var Tht=s(VO);jor=r(Tht,"TFFlaubertModel"),Tht.forEach(t),Dor=r(CLe," (FlauBERT model)"),CLe.forEach(t),Gor=i(k),Vs=n(k,"LI",{});var T7=s(Vs);Gpe=n(T7,"STRONG",{});var Mht=s(Gpe);Oor=r(Mht,"funnel"),Mht.forEach(t),Vor=r(T7," \u2014 "),XO=n(T7,"A",{href:!0});var Eht=s(XO);Xor=r(Eht,"TFFunnelModel"),Eht.forEach(t),zor=r(T7," or "),zO=n(T7,"A",{href:!0});var Cht=s(zO);Qor=r(Cht,"TFFunnelBaseModel"),Cht.forEach(t),Wor=r(T7," (Funnel Transformer model)"),T7.forEach(t),Hor=i(k),HF=n(k,"LI",{});var wLe=s(HF);Ope=n(wLe,"STRONG",{});var wht=s(Ope);Uor=r(wht,"gpt2"),wht.forEach(t),Jor=r(wLe," \u2014 "),QO=n(wLe,"A",{href:!0});var Aht=s(QO);Yor=r(Aht,"TFGPT2Model"),Aht.forEach(t),Kor=r(wLe," (OpenAI GPT-2 model)"),wLe.forEach(t),Zor=i(k),UF=n(k,"LI",{});var ALe=s(UF);Vpe=n(ALe,"STRONG",{});var yht=s(Vpe);err=r(yht,"gptj"),yht.forEach(t),orr=r(ALe," \u2014 "),WO=n(ALe,"A",{href:!0});var Lht=s(WO);rrr=r(Lht,"TFGPTJModel"),Lht.forEach(t),trr=r(ALe," (GPT-J model)"),ALe.forEach(t),arr=i(k),JF=n(k,"LI",{});var yLe=s(JF);Xpe=n(yLe,"STRONG",{});var xht=s(Xpe);nrr=r(xht,"hubert"),xht.forEach(t),srr=r(yLe," \u2014 "),HO=n(yLe,"A",{href:!0});var kht=s(HO);lrr=r(kht,"TFHubertModel"),kht.forEach(t),irr=r(yLe," (Hubert model)"),yLe.forEach(t),drr=i(k),YF=n(k,"LI",{});var LLe=s(YF);zpe=n(LLe,"STRONG",{});var Sht=s(zpe);crr=r(Sht,"layoutlm"),Sht.forEach(t),frr=r(LLe," \u2014 "),UO=n(LLe,"A",{href:!0});var Rht=s(UO);mrr=r(Rht,"TFLayoutLMModel"),Rht.forEach(t),grr=r(LLe," (LayoutLM model)"),LLe.forEach(t),hrr=i(k),KF=n(k,"LI",{});var xLe=s(KF);Qpe=n(xLe,"STRONG",{});var Bht=s(Qpe);prr=r(Bht,"led"),Bht.forEach(t),_rr=r(xLe," \u2014 "),JO=n(xLe,"A",{href:!0});var Pht=s(JO);urr=r(Pht,"TFLEDModel"),Pht.forEach(t),brr=r(xLe," (LED model)"),xLe.forEach(t),vrr=i(k),ZF=n(k,"LI",{});var kLe=s(ZF);Wpe=n(kLe,"STRONG",{});var $ht=s(Wpe);Frr=r($ht,"longformer"),$ht.forEach(t),Trr=r(kLe," \u2014 "),YO=n(kLe,"A",{href:!0});var Iht=s(YO);Mrr=r(Iht,"TFLongformerModel"),Iht.forEach(t),Err=r(kLe," (Longformer model)"),kLe.forEach(t),Crr=i(k),eT=n(k,"LI",{});var SLe=s(eT);Hpe=n(SLe,"STRONG",{});var qht=s(Hpe);wrr=r(qht,"lxmert"),qht.forEach(t),Arr=r(SLe," \u2014 "),KO=n(SLe,"A",{href:!0});var Nht=s(KO);yrr=r(Nht,"TFLxmertModel"),Nht.forEach(t),Lrr=r(SLe," (LXMERT model)"),SLe.forEach(t),xrr=i(k),oT=n(k,"LI",{});var RLe=s(oT);Upe=n(RLe,"STRONG",{});var jht=s(Upe);krr=r(jht,"marian"),jht.forEach(t),Srr=r(RLe," \u2014 "),ZO=n(RLe,"A",{href:!0});var Dht=s(ZO);Rrr=r(Dht,"TFMarianModel"),Dht.forEach(t),Brr=r(RLe," (Marian model)"),RLe.forEach(t),Prr=i(k),rT=n(k,"LI",{});var BLe=s(rT);Jpe=n(BLe,"STRONG",{});var Ght=s(Jpe);$rr=r(Ght,"mbart"),Ght.forEach(t),Irr=r(BLe," \u2014 "),eV=n(BLe,"A",{href:!0});var Oht=s(eV);qrr=r(Oht,"TFMBartModel"),Oht.forEach(t),Nrr=r(BLe," (mBART model)"),BLe.forEach(t),jrr=i(k),tT=n(k,"LI",{});var PLe=s(tT);Ype=n(PLe,"STRONG",{});var Vht=s(Ype);Drr=r(Vht,"mobilebert"),Vht.forEach(t),Grr=r(PLe," \u2014 "),oV=n(PLe,"A",{href:!0});var Xht=s(oV);Orr=r(Xht,"TFMobileBertModel"),Xht.forEach(t),Vrr=r(PLe," (MobileBERT model)"),PLe.forEach(t),Xrr=i(k),aT=n(k,"LI",{});var $Le=s(aT);Kpe=n($Le,"STRONG",{});var zht=s(Kpe);zrr=r(zht,"mpnet"),zht.forEach(t),Qrr=r($Le," \u2014 "),rV=n($Le,"A",{href:!0});var Qht=s(rV);Wrr=r(Qht,"TFMPNetModel"),Qht.forEach(t),Hrr=r($Le," (MPNet model)"),$Le.forEach(t),Urr=i(k),nT=n(k,"LI",{});var ILe=s(nT);Zpe=n(ILe,"STRONG",{});var Wht=s(Zpe);Jrr=r(Wht,"mt5"),Wht.forEach(t),Yrr=r(ILe," \u2014 "),tV=n(ILe,"A",{href:!0});var Hht=s(tV);Krr=r(Hht,"TFMT5Model"),Hht.forEach(t),Zrr=r(ILe," (mT5 model)"),ILe.forEach(t),etr=i(k),sT=n(k,"LI",{});var qLe=s(sT);e_e=n(qLe,"STRONG",{});var Uht=s(e_e);otr=r(Uht,"openai-gpt"),Uht.forEach(t),rtr=r(qLe," \u2014 "),aV=n(qLe,"A",{href:!0});var Jht=s(aV);ttr=r(Jht,"TFOpenAIGPTModel"),Jht.forEach(t),atr=r(qLe," (OpenAI GPT model)"),qLe.forEach(t),ntr=i(k),lT=n(k,"LI",{});var NLe=s(lT);o_e=n(NLe,"STRONG",{});var Yht=s(o_e);str=r(Yht,"pegasus"),Yht.forEach(t),ltr=r(NLe," \u2014 "),nV=n(NLe,"A",{href:!0});var Kht=s(nV);itr=r(Kht,"TFPegasusModel"),Kht.forEach(t),dtr=r(NLe," (Pegasus model)"),NLe.forEach(t),ctr=i(k),iT=n(k,"LI",{});var jLe=s(iT);r_e=n(jLe,"STRONG",{});var Zht=s(r_e);ftr=r(Zht,"rembert"),Zht.forEach(t),mtr=r(jLe," \u2014 "),sV=n(jLe,"A",{href:!0});var ept=s(sV);gtr=r(ept,"TFRemBertModel"),ept.forEach(t),htr=r(jLe," (RemBERT model)"),jLe.forEach(t),ptr=i(k),dT=n(k,"LI",{});var DLe=s(dT);t_e=n(DLe,"STRONG",{});var opt=s(t_e);_tr=r(opt,"roberta"),opt.forEach(t),utr=r(DLe," \u2014 "),lV=n(DLe,"A",{href:!0});var rpt=s(lV);btr=r(rpt,"TFRobertaModel"),rpt.forEach(t),vtr=r(DLe," (RoBERTa model)"),DLe.forEach(t),Ftr=i(k),cT=n(k,"LI",{});var GLe=s(cT);a_e=n(GLe,"STRONG",{});var tpt=s(a_e);Ttr=r(tpt,"roformer"),tpt.forEach(t),Mtr=r(GLe," \u2014 "),iV=n(GLe,"A",{href:!0});var apt=s(iV);Etr=r(apt,"TFRoFormerModel"),apt.forEach(t),Ctr=r(GLe," (RoFormer model)"),GLe.forEach(t),wtr=i(k),fT=n(k,"LI",{});var OLe=s(fT);n_e=n(OLe,"STRONG",{});var npt=s(n_e);Atr=r(npt,"speech_to_text"),npt.forEach(t),ytr=r(OLe," \u2014 "),dV=n(OLe,"A",{href:!0});var spt=s(dV);Ltr=r(spt,"TFSpeech2TextModel"),spt.forEach(t),xtr=r(OLe," (Speech2Text model)"),OLe.forEach(t),ktr=i(k),mT=n(k,"LI",{});var VLe=s(mT);s_e=n(VLe,"STRONG",{});var lpt=s(s_e);Str=r(lpt,"t5"),lpt.forEach(t),Rtr=r(VLe," \u2014 "),cV=n(VLe,"A",{href:!0});var ipt=s(cV);Btr=r(ipt,"TFT5Model"),ipt.forEach(t),Ptr=r(VLe," (T5 model)"),VLe.forEach(t),$tr=i(k),gT=n(k,"LI",{});var XLe=s(gT);l_e=n(XLe,"STRONG",{});var dpt=s(l_e);Itr=r(dpt,"tapas"),dpt.forEach(t),qtr=r(XLe," \u2014 "),fV=n(XLe,"A",{href:!0});var cpt=s(fV);Ntr=r(cpt,"TFTapasModel"),cpt.forEach(t),jtr=r(XLe," (TAPAS model)"),XLe.forEach(t),Dtr=i(k),hT=n(k,"LI",{});var zLe=s(hT);i_e=n(zLe,"STRONG",{});var fpt=s(i_e);Gtr=r(fpt,"transfo-xl"),fpt.forEach(t),Otr=r(zLe," \u2014 "),mV=n(zLe,"A",{href:!0});var mpt=s(mV);Vtr=r(mpt,"TFTransfoXLModel"),mpt.forEach(t),Xtr=r(zLe," (Transformer-XL model)"),zLe.forEach(t),ztr=i(k),pT=n(k,"LI",{});var QLe=s(pT);d_e=n(QLe,"STRONG",{});var gpt=s(d_e);Qtr=r(gpt,"vit"),gpt.forEach(t),Wtr=r(QLe," \u2014 "),gV=n(QLe,"A",{href:!0});var hpt=s(gV);Htr=r(hpt,"TFViTModel"),hpt.forEach(t),Utr=r(QLe," (ViT model)"),QLe.forEach(t),Jtr=i(k),_T=n(k,"LI",{});var WLe=s(_T);c_e=n(WLe,"STRONG",{});var ppt=s(c_e);Ytr=r(ppt,"vit_mae"),ppt.forEach(t),Ktr=r(WLe," \u2014 "),hV=n(WLe,"A",{href:!0});var _pt=s(hV);Ztr=r(_pt,"TFViTMAEModel"),_pt.forEach(t),ear=r(WLe," (ViTMAE model)"),WLe.forEach(t),oar=i(k),uT=n(k,"LI",{});var HLe=s(uT);f_e=n(HLe,"STRONG",{});var upt=s(f_e);rar=r(upt,"wav2vec2"),upt.forEach(t),tar=r(HLe," \u2014 "),pV=n(HLe,"A",{href:!0});var bpt=s(pV);aar=r(bpt,"TFWav2Vec2Model"),bpt.forEach(t),nar=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),sar=i(k),bT=n(k,"LI",{});var ULe=s(bT);m_e=n(ULe,"STRONG",{});var vpt=s(m_e);lar=r(vpt,"xlm"),vpt.forEach(t),iar=r(ULe," \u2014 "),_V=n(ULe,"A",{href:!0});var Fpt=s(_V);dar=r(Fpt,"TFXLMModel"),Fpt.forEach(t),car=r(ULe," (XLM model)"),ULe.forEach(t),far=i(k),vT=n(k,"LI",{});var JLe=s(vT);g_e=n(JLe,"STRONG",{});var Tpt=s(g_e);mar=r(Tpt,"xlm-roberta"),Tpt.forEach(t),gar=r(JLe," \u2014 "),uV=n(JLe,"A",{href:!0});var Mpt=s(uV);har=r(Mpt,"TFXLMRobertaModel"),Mpt.forEach(t),par=r(JLe," (XLM-RoBERTa model)"),JLe.forEach(t),_ar=i(k),FT=n(k,"LI",{});var YLe=s(FT);h_e=n(YLe,"STRONG",{});var Ept=s(h_e);uar=r(Ept,"xlnet"),Ept.forEach(t),bar=r(YLe," \u2014 "),bV=n(YLe,"A",{href:!0});var Cpt=s(bV);Far=r(Cpt,"TFXLNetModel"),Cpt.forEach(t),Tar=r(YLe," (XLNet model)"),YLe.forEach(t),k.forEach(t),Mar=i(pa),p_e=n(pa,"P",{});var wpt=s(p_e);Ear=r(wpt,"Examples:"),wpt.forEach(t),Car=i(pa),m(pA.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),VBe=i(c),uc=n(c,"H2",{class:!0});var Z$e=s(uc);TT=n(Z$e,"A",{id:!0,class:!0,href:!0});var Apt=s(TT);__e=n(Apt,"SPAN",{});var ypt=s(__e);m(_A.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),war=i(Z$e),u_e=n(Z$e,"SPAN",{});var Lpt=s(u_e);Aar=r(Lpt,"TFAutoModelForPreTraining"),Lpt.forEach(t),Z$e.forEach(t),XBe=i(c),Fr=n(c,"DIV",{class:!0});var Vl=s(Fr);m(uA.$$.fragment,Vl),yar=i(Vl),bc=n(Vl,"P",{});var vJ=s(bc);Lar=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),vV=n(vJ,"A",{href:!0});var xpt=s(vV);xar=r(xpt,"from_pretrained()"),xpt.forEach(t),kar=r(vJ," class method or the "),FV=n(vJ,"A",{href:!0});var kpt=s(FV);Sar=r(kpt,"from_config()"),kpt.forEach(t),Rar=r(vJ,` class
method.`),vJ.forEach(t),Bar=i(Vl),bA=n(Vl,"P",{});var eIe=s(bA);Par=r(eIe,"This class cannot be instantiated directly using "),b_e=n(eIe,"CODE",{});var Spt=s(b_e);$ar=r(Spt,"__init__()"),Spt.forEach(t),Iar=r(eIe," (throws an error)."),eIe.forEach(t),qar=i(Vl),ht=n(Vl,"DIV",{class:!0});var Xl=s(ht);m(vA.$$.fragment,Xl),Nar=i(Xl),v_e=n(Xl,"P",{});var Rpt=s(v_e);jar=r(Rpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rpt.forEach(t),Dar=i(Xl),vc=n(Xl,"P",{});var FJ=s(vc);Gar=r(FJ,`Note:
Loading a model from its configuration file does `),F_e=n(FJ,"STRONG",{});var Bpt=s(F_e);Oar=r(Bpt,"not"),Bpt.forEach(t),Var=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(FJ,"A",{href:!0});var Ppt=s(TV);Xar=r(Ppt,"from_pretrained()"),Ppt.forEach(t),zar=r(FJ," to load the model weights."),FJ.forEach(t),Qar=i(Xl),T_e=n(Xl,"P",{});var $pt=s(T_e);War=r($pt,"Examples:"),$pt.forEach(t),Har=i(Xl),m(FA.$$.fragment,Xl),Xl.forEach(t),Uar=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);m(TA.$$.fragment,_a),Jar=i(_a),M_e=n(_a,"P",{});var Ipt=s(M_e);Yar=r(Ipt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ipt.forEach(t),Kar=i(_a),bn=n(_a,"P",{});var n5=s(bn);Zar=r(n5,"The model class to instantiate is selected based on the "),E_e=n(n5,"CODE",{});var qpt=s(E_e);enr=r(qpt,"model_type"),qpt.forEach(t),onr=r(n5,` property of the config object (either
passed as an argument or loaded from `),C_e=n(n5,"CODE",{});var Npt=s(C_e);rnr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),tnr=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w_e=n(n5,"CODE",{});var jpt=s(w_e);anr=r(jpt,"pretrained_model_name_or_path"),jpt.forEach(t),nnr=r(n5,":"),n5.forEach(t),snr=i(_a),H=n(_a,"UL",{});var U=s(H);MT=n(U,"LI",{});var KLe=s(MT);A_e=n(KLe,"STRONG",{});var Dpt=s(A_e);lnr=r(Dpt,"albert"),Dpt.forEach(t),inr=r(KLe," \u2014 "),MV=n(KLe,"A",{href:!0});var Gpt=s(MV);dnr=r(Gpt,"TFAlbertForPreTraining"),Gpt.forEach(t),cnr=r(KLe," (ALBERT model)"),KLe.forEach(t),fnr=i(U),ET=n(U,"LI",{});var ZLe=s(ET);y_e=n(ZLe,"STRONG",{});var Opt=s(y_e);mnr=r(Opt,"bart"),Opt.forEach(t),gnr=r(ZLe," \u2014 "),EV=n(ZLe,"A",{href:!0});var Vpt=s(EV);hnr=r(Vpt,"TFBartForConditionalGeneration"),Vpt.forEach(t),pnr=r(ZLe," (BART model)"),ZLe.forEach(t),_nr=i(U),CT=n(U,"LI",{});var e7e=s(CT);L_e=n(e7e,"STRONG",{});var Xpt=s(L_e);unr=r(Xpt,"bert"),Xpt.forEach(t),bnr=r(e7e," \u2014 "),CV=n(e7e,"A",{href:!0});var zpt=s(CV);vnr=r(zpt,"TFBertForPreTraining"),zpt.forEach(t),Fnr=r(e7e," (BERT model)"),e7e.forEach(t),Tnr=i(U),wT=n(U,"LI",{});var o7e=s(wT);x_e=n(o7e,"STRONG",{});var Qpt=s(x_e);Mnr=r(Qpt,"camembert"),Qpt.forEach(t),Enr=r(o7e," \u2014 "),wV=n(o7e,"A",{href:!0});var Wpt=s(wV);Cnr=r(Wpt,"TFCamembertForMaskedLM"),Wpt.forEach(t),wnr=r(o7e," (CamemBERT model)"),o7e.forEach(t),Anr=i(U),AT=n(U,"LI",{});var r7e=s(AT);k_e=n(r7e,"STRONG",{});var Hpt=s(k_e);ynr=r(Hpt,"ctrl"),Hpt.forEach(t),Lnr=r(r7e," \u2014 "),AV=n(r7e,"A",{href:!0});var Upt=s(AV);xnr=r(Upt,"TFCTRLLMHeadModel"),Upt.forEach(t),knr=r(r7e," (CTRL model)"),r7e.forEach(t),Snr=i(U),yT=n(U,"LI",{});var t7e=s(yT);S_e=n(t7e,"STRONG",{});var Jpt=s(S_e);Rnr=r(Jpt,"distilbert"),Jpt.forEach(t),Bnr=r(t7e," \u2014 "),yV=n(t7e,"A",{href:!0});var Ypt=s(yV);Pnr=r(Ypt,"TFDistilBertForMaskedLM"),Ypt.forEach(t),$nr=r(t7e," (DistilBERT model)"),t7e.forEach(t),Inr=i(U),LT=n(U,"LI",{});var a7e=s(LT);R_e=n(a7e,"STRONG",{});var Kpt=s(R_e);qnr=r(Kpt,"electra"),Kpt.forEach(t),Nnr=r(a7e," \u2014 "),LV=n(a7e,"A",{href:!0});var Zpt=s(LV);jnr=r(Zpt,"TFElectraForPreTraining"),Zpt.forEach(t),Dnr=r(a7e," (ELECTRA model)"),a7e.forEach(t),Gnr=i(U),xT=n(U,"LI",{});var n7e=s(xT);B_e=n(n7e,"STRONG",{});var e_t=s(B_e);Onr=r(e_t,"flaubert"),e_t.forEach(t),Vnr=r(n7e," \u2014 "),xV=n(n7e,"A",{href:!0});var o_t=s(xV);Xnr=r(o_t,"TFFlaubertWithLMHeadModel"),o_t.forEach(t),znr=r(n7e," (FlauBERT model)"),n7e.forEach(t),Qnr=i(U),kT=n(U,"LI",{});var s7e=s(kT);P_e=n(s7e,"STRONG",{});var r_t=s(P_e);Wnr=r(r_t,"funnel"),r_t.forEach(t),Hnr=r(s7e," \u2014 "),kV=n(s7e,"A",{href:!0});var t_t=s(kV);Unr=r(t_t,"TFFunnelForPreTraining"),t_t.forEach(t),Jnr=r(s7e," (Funnel Transformer model)"),s7e.forEach(t),Ynr=i(U),ST=n(U,"LI",{});var l7e=s(ST);$_e=n(l7e,"STRONG",{});var a_t=s($_e);Knr=r(a_t,"gpt2"),a_t.forEach(t),Znr=r(l7e," \u2014 "),SV=n(l7e,"A",{href:!0});var n_t=s(SV);esr=r(n_t,"TFGPT2LMHeadModel"),n_t.forEach(t),osr=r(l7e," (OpenAI GPT-2 model)"),l7e.forEach(t),rsr=i(U),RT=n(U,"LI",{});var i7e=s(RT);I_e=n(i7e,"STRONG",{});var s_t=s(I_e);tsr=r(s_t,"layoutlm"),s_t.forEach(t),asr=r(i7e," \u2014 "),RV=n(i7e,"A",{href:!0});var l_t=s(RV);nsr=r(l_t,"TFLayoutLMForMaskedLM"),l_t.forEach(t),ssr=r(i7e," (LayoutLM model)"),i7e.forEach(t),lsr=i(U),BT=n(U,"LI",{});var d7e=s(BT);q_e=n(d7e,"STRONG",{});var i_t=s(q_e);isr=r(i_t,"lxmert"),i_t.forEach(t),dsr=r(d7e," \u2014 "),BV=n(d7e,"A",{href:!0});var d_t=s(BV);csr=r(d_t,"TFLxmertForPreTraining"),d_t.forEach(t),fsr=r(d7e," (LXMERT model)"),d7e.forEach(t),msr=i(U),PT=n(U,"LI",{});var c7e=s(PT);N_e=n(c7e,"STRONG",{});var c_t=s(N_e);gsr=r(c_t,"mobilebert"),c_t.forEach(t),hsr=r(c7e," \u2014 "),PV=n(c7e,"A",{href:!0});var f_t=s(PV);psr=r(f_t,"TFMobileBertForPreTraining"),f_t.forEach(t),_sr=r(c7e," (MobileBERT model)"),c7e.forEach(t),usr=i(U),$T=n(U,"LI",{});var f7e=s($T);j_e=n(f7e,"STRONG",{});var m_t=s(j_e);bsr=r(m_t,"mpnet"),m_t.forEach(t),vsr=r(f7e," \u2014 "),$V=n(f7e,"A",{href:!0});var g_t=s($V);Fsr=r(g_t,"TFMPNetForMaskedLM"),g_t.forEach(t),Tsr=r(f7e," (MPNet model)"),f7e.forEach(t),Msr=i(U),IT=n(U,"LI",{});var m7e=s(IT);D_e=n(m7e,"STRONG",{});var h_t=s(D_e);Esr=r(h_t,"openai-gpt"),h_t.forEach(t),Csr=r(m7e," \u2014 "),IV=n(m7e,"A",{href:!0});var p_t=s(IV);wsr=r(p_t,"TFOpenAIGPTLMHeadModel"),p_t.forEach(t),Asr=r(m7e," (OpenAI GPT model)"),m7e.forEach(t),ysr=i(U),qT=n(U,"LI",{});var g7e=s(qT);G_e=n(g7e,"STRONG",{});var __t=s(G_e);Lsr=r(__t,"roberta"),__t.forEach(t),xsr=r(g7e," \u2014 "),qV=n(g7e,"A",{href:!0});var u_t=s(qV);ksr=r(u_t,"TFRobertaForMaskedLM"),u_t.forEach(t),Ssr=r(g7e," (RoBERTa model)"),g7e.forEach(t),Rsr=i(U),NT=n(U,"LI",{});var h7e=s(NT);O_e=n(h7e,"STRONG",{});var b_t=s(O_e);Bsr=r(b_t,"t5"),b_t.forEach(t),Psr=r(h7e," \u2014 "),NV=n(h7e,"A",{href:!0});var v_t=s(NV);$sr=r(v_t,"TFT5ForConditionalGeneration"),v_t.forEach(t),Isr=r(h7e," (T5 model)"),h7e.forEach(t),qsr=i(U),jT=n(U,"LI",{});var p7e=s(jT);V_e=n(p7e,"STRONG",{});var F_t=s(V_e);Nsr=r(F_t,"tapas"),F_t.forEach(t),jsr=r(p7e," \u2014 "),jV=n(p7e,"A",{href:!0});var T_t=s(jV);Dsr=r(T_t,"TFTapasForMaskedLM"),T_t.forEach(t),Gsr=r(p7e," (TAPAS model)"),p7e.forEach(t),Osr=i(U),DT=n(U,"LI",{});var _7e=s(DT);X_e=n(_7e,"STRONG",{});var M_t=s(X_e);Vsr=r(M_t,"transfo-xl"),M_t.forEach(t),Xsr=r(_7e," \u2014 "),DV=n(_7e,"A",{href:!0});var E_t=s(DV);zsr=r(E_t,"TFTransfoXLLMHeadModel"),E_t.forEach(t),Qsr=r(_7e," (Transformer-XL model)"),_7e.forEach(t),Wsr=i(U),GT=n(U,"LI",{});var u7e=s(GT);z_e=n(u7e,"STRONG",{});var C_t=s(z_e);Hsr=r(C_t,"vit_mae"),C_t.forEach(t),Usr=r(u7e," \u2014 "),GV=n(u7e,"A",{href:!0});var w_t=s(GV);Jsr=r(w_t,"TFViTMAEForPreTraining"),w_t.forEach(t),Ysr=r(u7e," (ViTMAE model)"),u7e.forEach(t),Ksr=i(U),OT=n(U,"LI",{});var b7e=s(OT);Q_e=n(b7e,"STRONG",{});var A_t=s(Q_e);Zsr=r(A_t,"xlm"),A_t.forEach(t),elr=r(b7e," \u2014 "),OV=n(b7e,"A",{href:!0});var y_t=s(OV);olr=r(y_t,"TFXLMWithLMHeadModel"),y_t.forEach(t),rlr=r(b7e," (XLM model)"),b7e.forEach(t),tlr=i(U),VT=n(U,"LI",{});var v7e=s(VT);W_e=n(v7e,"STRONG",{});var L_t=s(W_e);alr=r(L_t,"xlm-roberta"),L_t.forEach(t),nlr=r(v7e," \u2014 "),VV=n(v7e,"A",{href:!0});var x_t=s(VV);slr=r(x_t,"TFXLMRobertaForMaskedLM"),x_t.forEach(t),llr=r(v7e," (XLM-RoBERTa model)"),v7e.forEach(t),ilr=i(U),XT=n(U,"LI",{});var F7e=s(XT);H_e=n(F7e,"STRONG",{});var k_t=s(H_e);dlr=r(k_t,"xlnet"),k_t.forEach(t),clr=r(F7e," \u2014 "),XV=n(F7e,"A",{href:!0});var S_t=s(XV);flr=r(S_t,"TFXLNetLMHeadModel"),S_t.forEach(t),mlr=r(F7e," (XLNet model)"),F7e.forEach(t),U.forEach(t),glr=i(_a),U_e=n(_a,"P",{});var R_t=s(U_e);hlr=r(R_t,"Examples:"),R_t.forEach(t),plr=i(_a),m(MA.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),zBe=i(c),Fc=n(c,"H2",{class:!0});var oIe=s(Fc);zT=n(oIe,"A",{id:!0,class:!0,href:!0});var B_t=s(zT);J_e=n(B_t,"SPAN",{});var P_t=s(J_e);m(EA.$$.fragment,P_t),P_t.forEach(t),B_t.forEach(t),_lr=i(oIe),Y_e=n(oIe,"SPAN",{});var $_t=s(Y_e);ulr=r($_t,"TFAutoModelForCausalLM"),$_t.forEach(t),oIe.forEach(t),QBe=i(c),Tr=n(c,"DIV",{class:!0});var zl=s(Tr);m(CA.$$.fragment,zl),blr=i(zl),Tc=n(zl,"P",{});var TJ=s(Tc);vlr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zV=n(TJ,"A",{href:!0});var I_t=s(zV);Flr=r(I_t,"from_pretrained()"),I_t.forEach(t),Tlr=r(TJ," class method or the "),QV=n(TJ,"A",{href:!0});var q_t=s(QV);Mlr=r(q_t,"from_config()"),q_t.forEach(t),Elr=r(TJ,` class
method.`),TJ.forEach(t),Clr=i(zl),wA=n(zl,"P",{});var rIe=s(wA);wlr=r(rIe,"This class cannot be instantiated directly using "),K_e=n(rIe,"CODE",{});var N_t=s(K_e);Alr=r(N_t,"__init__()"),N_t.forEach(t),ylr=r(rIe," (throws an error)."),rIe.forEach(t),Llr=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);m(AA.$$.fragment,Ql),xlr=i(Ql),Z_e=n(Ql,"P",{});var j_t=s(Z_e);klr=r(j_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j_t.forEach(t),Slr=i(Ql),Mc=n(Ql,"P",{});var MJ=s(Mc);Rlr=r(MJ,`Note:
Loading a model from its configuration file does `),eue=n(MJ,"STRONG",{});var D_t=s(eue);Blr=r(D_t,"not"),D_t.forEach(t),Plr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(MJ,"A",{href:!0});var G_t=s(WV);$lr=r(G_t,"from_pretrained()"),G_t.forEach(t),Ilr=r(MJ," to load the model weights."),MJ.forEach(t),qlr=i(Ql),oue=n(Ql,"P",{});var O_t=s(oue);Nlr=r(O_t,"Examples:"),O_t.forEach(t),jlr=i(Ql),m(yA.$$.fragment,Ql),Ql.forEach(t),Dlr=i(zl),_o=n(zl,"DIV",{class:!0});var ua=s(_o);m(LA.$$.fragment,ua),Glr=i(ua),rue=n(ua,"P",{});var V_t=s(rue);Olr=r(V_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),V_t.forEach(t),Vlr=i(ua),vn=n(ua,"P",{});var s5=s(vn);Xlr=r(s5,"The model class to instantiate is selected based on the "),tue=n(s5,"CODE",{});var X_t=s(tue);zlr=r(X_t,"model_type"),X_t.forEach(t),Qlr=r(s5,` property of the config object (either
passed as an argument or loaded from `),aue=n(s5,"CODE",{});var z_t=s(aue);Wlr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Hlr=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(s5,"CODE",{});var Q_t=s(nue);Ulr=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),Jlr=r(s5,":"),s5.forEach(t),Ylr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);QT=n(pe,"LI",{});var T7e=s(QT);sue=n(T7e,"STRONG",{});var W_t=s(sue);Klr=r(W_t,"bert"),W_t.forEach(t),Zlr=r(T7e," \u2014 "),HV=n(T7e,"A",{href:!0});var H_t=s(HV);eir=r(H_t,"TFBertLMHeadModel"),H_t.forEach(t),oir=r(T7e," (BERT model)"),T7e.forEach(t),rir=i(pe),WT=n(pe,"LI",{});var M7e=s(WT);lue=n(M7e,"STRONG",{});var U_t=s(lue);tir=r(U_t,"camembert"),U_t.forEach(t),air=r(M7e," \u2014 "),UV=n(M7e,"A",{href:!0});var J_t=s(UV);nir=r(J_t,"TFCamembertForCausalLM"),J_t.forEach(t),sir=r(M7e," (CamemBERT model)"),M7e.forEach(t),lir=i(pe),HT=n(pe,"LI",{});var E7e=s(HT);iue=n(E7e,"STRONG",{});var Y_t=s(iue);iir=r(Y_t,"ctrl"),Y_t.forEach(t),dir=r(E7e," \u2014 "),JV=n(E7e,"A",{href:!0});var K_t=s(JV);cir=r(K_t,"TFCTRLLMHeadModel"),K_t.forEach(t),fir=r(E7e," (CTRL model)"),E7e.forEach(t),mir=i(pe),UT=n(pe,"LI",{});var C7e=s(UT);due=n(C7e,"STRONG",{});var Z_t=s(due);gir=r(Z_t,"gpt2"),Z_t.forEach(t),hir=r(C7e," \u2014 "),YV=n(C7e,"A",{href:!0});var eut=s(YV);pir=r(eut,"TFGPT2LMHeadModel"),eut.forEach(t),_ir=r(C7e," (OpenAI GPT-2 model)"),C7e.forEach(t),uir=i(pe),JT=n(pe,"LI",{});var w7e=s(JT);cue=n(w7e,"STRONG",{});var out=s(cue);bir=r(out,"gptj"),out.forEach(t),vir=r(w7e," \u2014 "),KV=n(w7e,"A",{href:!0});var rut=s(KV);Fir=r(rut,"TFGPTJForCausalLM"),rut.forEach(t),Tir=r(w7e," (GPT-J model)"),w7e.forEach(t),Mir=i(pe),YT=n(pe,"LI",{});var A7e=s(YT);fue=n(A7e,"STRONG",{});var tut=s(fue);Eir=r(tut,"openai-gpt"),tut.forEach(t),Cir=r(A7e," \u2014 "),ZV=n(A7e,"A",{href:!0});var aut=s(ZV);wir=r(aut,"TFOpenAIGPTLMHeadModel"),aut.forEach(t),Air=r(A7e," (OpenAI GPT model)"),A7e.forEach(t),yir=i(pe),KT=n(pe,"LI",{});var y7e=s(KT);mue=n(y7e,"STRONG",{});var nut=s(mue);Lir=r(nut,"rembert"),nut.forEach(t),xir=r(y7e," \u2014 "),eX=n(y7e,"A",{href:!0});var sut=s(eX);kir=r(sut,"TFRemBertForCausalLM"),sut.forEach(t),Sir=r(y7e," (RemBERT model)"),y7e.forEach(t),Rir=i(pe),ZT=n(pe,"LI",{});var L7e=s(ZT);gue=n(L7e,"STRONG",{});var lut=s(gue);Bir=r(lut,"roberta"),lut.forEach(t),Pir=r(L7e," \u2014 "),oX=n(L7e,"A",{href:!0});var iut=s(oX);$ir=r(iut,"TFRobertaForCausalLM"),iut.forEach(t),Iir=r(L7e," (RoBERTa model)"),L7e.forEach(t),qir=i(pe),e8=n(pe,"LI",{});var x7e=s(e8);hue=n(x7e,"STRONG",{});var dut=s(hue);Nir=r(dut,"roformer"),dut.forEach(t),jir=r(x7e," \u2014 "),rX=n(x7e,"A",{href:!0});var cut=s(rX);Dir=r(cut,"TFRoFormerForCausalLM"),cut.forEach(t),Gir=r(x7e," (RoFormer model)"),x7e.forEach(t),Oir=i(pe),o8=n(pe,"LI",{});var k7e=s(o8);pue=n(k7e,"STRONG",{});var fut=s(pue);Vir=r(fut,"transfo-xl"),fut.forEach(t),Xir=r(k7e," \u2014 "),tX=n(k7e,"A",{href:!0});var mut=s(tX);zir=r(mut,"TFTransfoXLLMHeadModel"),mut.forEach(t),Qir=r(k7e," (Transformer-XL model)"),k7e.forEach(t),Wir=i(pe),r8=n(pe,"LI",{});var S7e=s(r8);_ue=n(S7e,"STRONG",{});var gut=s(_ue);Hir=r(gut,"xlm"),gut.forEach(t),Uir=r(S7e," \u2014 "),aX=n(S7e,"A",{href:!0});var hut=s(aX);Jir=r(hut,"TFXLMWithLMHeadModel"),hut.forEach(t),Yir=r(S7e," (XLM model)"),S7e.forEach(t),Kir=i(pe),t8=n(pe,"LI",{});var R7e=s(t8);uue=n(R7e,"STRONG",{});var put=s(uue);Zir=r(put,"xlnet"),put.forEach(t),edr=r(R7e," \u2014 "),nX=n(R7e,"A",{href:!0});var _ut=s(nX);odr=r(_ut,"TFXLNetLMHeadModel"),_ut.forEach(t),rdr=r(R7e," (XLNet model)"),R7e.forEach(t),pe.forEach(t),tdr=i(ua),bue=n(ua,"P",{});var uut=s(bue);adr=r(uut,"Examples:"),uut.forEach(t),ndr=i(ua),m(xA.$$.fragment,ua),ua.forEach(t),zl.forEach(t),WBe=i(c),Ec=n(c,"H2",{class:!0});var tIe=s(Ec);a8=n(tIe,"A",{id:!0,class:!0,href:!0});var but=s(a8);vue=n(but,"SPAN",{});var vut=s(vue);m(kA.$$.fragment,vut),vut.forEach(t),but.forEach(t),sdr=i(tIe),Fue=n(tIe,"SPAN",{});var Fut=s(Fue);ldr=r(Fut,"TFAutoModelForImageClassification"),Fut.forEach(t),tIe.forEach(t),HBe=i(c),Mr=n(c,"DIV",{class:!0});var Wl=s(Mr);m(SA.$$.fragment,Wl),idr=i(Wl),Cc=n(Wl,"P",{});var EJ=s(Cc);ddr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sX=n(EJ,"A",{href:!0});var Tut=s(sX);cdr=r(Tut,"from_pretrained()"),Tut.forEach(t),fdr=r(EJ," class method or the "),lX=n(EJ,"A",{href:!0});var Mut=s(lX);mdr=r(Mut,"from_config()"),Mut.forEach(t),gdr=r(EJ,` class
method.`),EJ.forEach(t),hdr=i(Wl),RA=n(Wl,"P",{});var aIe=s(RA);pdr=r(aIe,"This class cannot be instantiated directly using "),Tue=n(aIe,"CODE",{});var Eut=s(Tue);_dr=r(Eut,"__init__()"),Eut.forEach(t),udr=r(aIe," (throws an error)."),aIe.forEach(t),bdr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);m(BA.$$.fragment,Hl),vdr=i(Hl),Mue=n(Hl,"P",{});var Cut=s(Mue);Fdr=r(Cut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Cut.forEach(t),Tdr=i(Hl),wc=n(Hl,"P",{});var CJ=s(wc);Mdr=r(CJ,`Note:
Loading a model from its configuration file does `),Eue=n(CJ,"STRONG",{});var wut=s(Eue);Edr=r(wut,"not"),wut.forEach(t),Cdr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(CJ,"A",{href:!0});var Aut=s(iX);wdr=r(Aut,"from_pretrained()"),Aut.forEach(t),Adr=r(CJ," to load the model weights."),CJ.forEach(t),ydr=i(Hl),Cue=n(Hl,"P",{});var yut=s(Cue);Ldr=r(yut,"Examples:"),yut.forEach(t),xdr=i(Hl),m(PA.$$.fragment,Hl),Hl.forEach(t),kdr=i(Wl),uo=n(Wl,"DIV",{class:!0});var ba=s(uo);m($A.$$.fragment,ba),Sdr=i(ba),wue=n(ba,"P",{});var Lut=s(wue);Rdr=r(Lut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lut.forEach(t),Bdr=i(ba),Fn=n(ba,"P",{});var l5=s(Fn);Pdr=r(l5,"The model class to instantiate is selected based on the "),Aue=n(l5,"CODE",{});var xut=s(Aue);$dr=r(xut,"model_type"),xut.forEach(t),Idr=r(l5,` property of the config object (either
passed as an argument or loaded from `),yue=n(l5,"CODE",{});var kut=s(yue);qdr=r(kut,"pretrained_model_name_or_path"),kut.forEach(t),Ndr=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lue=n(l5,"CODE",{});var Sut=s(Lue);jdr=r(Sut,"pretrained_model_name_or_path"),Sut.forEach(t),Ddr=r(l5,":"),l5.forEach(t),Gdr=i(ba),IA=n(ba,"UL",{});var nIe=s(IA);n8=n(nIe,"LI",{});var B7e=s(n8);xue=n(B7e,"STRONG",{});var Rut=s(xue);Odr=r(Rut,"convnext"),Rut.forEach(t),Vdr=r(B7e," \u2014 "),dX=n(B7e,"A",{href:!0});var But=s(dX);Xdr=r(But,"TFConvNextForImageClassification"),But.forEach(t),zdr=r(B7e," (ConvNext model)"),B7e.forEach(t),Qdr=i(nIe),s8=n(nIe,"LI",{});var P7e=s(s8);kue=n(P7e,"STRONG",{});var Put=s(kue);Wdr=r(Put,"vit"),Put.forEach(t),Hdr=r(P7e," \u2014 "),cX=n(P7e,"A",{href:!0});var $ut=s(cX);Udr=r($ut,"TFViTForImageClassification"),$ut.forEach(t),Jdr=r(P7e," (ViT model)"),P7e.forEach(t),nIe.forEach(t),Ydr=i(ba),Sue=n(ba,"P",{});var Iut=s(Sue);Kdr=r(Iut,"Examples:"),Iut.forEach(t),Zdr=i(ba),m(qA.$$.fragment,ba),ba.forEach(t),Wl.forEach(t),UBe=i(c),Ac=n(c,"H2",{class:!0});var sIe=s(Ac);l8=n(sIe,"A",{id:!0,class:!0,href:!0});var qut=s(l8);Rue=n(qut,"SPAN",{});var Nut=s(Rue);m(NA.$$.fragment,Nut),Nut.forEach(t),qut.forEach(t),ecr=i(sIe),Bue=n(sIe,"SPAN",{});var jut=s(Bue);ocr=r(jut,"TFAutoModelForMaskedLM"),jut.forEach(t),sIe.forEach(t),JBe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(jA.$$.fragment,Ul),rcr=i(Ul),yc=n(Ul,"P",{});var wJ=s(yc);tcr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),fX=n(wJ,"A",{href:!0});var Dut=s(fX);acr=r(Dut,"from_pretrained()"),Dut.forEach(t),ncr=r(wJ," class method or the "),mX=n(wJ,"A",{href:!0});var Gut=s(mX);scr=r(Gut,"from_config()"),Gut.forEach(t),lcr=r(wJ,` class
method.`),wJ.forEach(t),icr=i(Ul),DA=n(Ul,"P",{});var lIe=s(DA);dcr=r(lIe,"This class cannot be instantiated directly using "),Pue=n(lIe,"CODE",{});var Out=s(Pue);ccr=r(Out,"__init__()"),Out.forEach(t),fcr=r(lIe," (throws an error)."),lIe.forEach(t),mcr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(GA.$$.fragment,Jl),gcr=i(Jl),$ue=n(Jl,"P",{});var Vut=s($ue);hcr=r(Vut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vut.forEach(t),pcr=i(Jl),Lc=n(Jl,"P",{});var AJ=s(Lc);_cr=r(AJ,`Note:
Loading a model from its configuration file does `),Iue=n(AJ,"STRONG",{});var Xut=s(Iue);ucr=r(Xut,"not"),Xut.forEach(t),bcr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(AJ,"A",{href:!0});var zut=s(gX);vcr=r(zut,"from_pretrained()"),zut.forEach(t),Fcr=r(AJ," to load the model weights."),AJ.forEach(t),Tcr=i(Jl),que=n(Jl,"P",{});var Qut=s(que);Mcr=r(Qut,"Examples:"),Qut.forEach(t),Ecr=i(Jl),m(OA.$$.fragment,Jl),Jl.forEach(t),Ccr=i(Ul),bo=n(Ul,"DIV",{class:!0});var va=s(bo);m(VA.$$.fragment,va),wcr=i(va),Nue=n(va,"P",{});var Wut=s(Nue);Acr=r(Wut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wut.forEach(t),ycr=i(va),Tn=n(va,"P",{});var i5=s(Tn);Lcr=r(i5,"The model class to instantiate is selected based on the "),jue=n(i5,"CODE",{});var Hut=s(jue);xcr=r(Hut,"model_type"),Hut.forEach(t),kcr=r(i5,` property of the config object (either
passed as an argument or loaded from `),Due=n(i5,"CODE",{});var Uut=s(Due);Scr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),Rcr=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gue=n(i5,"CODE",{});var Jut=s(Gue);Bcr=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),Pcr=r(i5,":"),i5.forEach(t),$cr=i(va),Y=n(va,"UL",{});var re=s(Y);i8=n(re,"LI",{});var $7e=s(i8);Oue=n($7e,"STRONG",{});var Yut=s(Oue);Icr=r(Yut,"albert"),Yut.forEach(t),qcr=r($7e," \u2014 "),hX=n($7e,"A",{href:!0});var Kut=s(hX);Ncr=r(Kut,"TFAlbertForMaskedLM"),Kut.forEach(t),jcr=r($7e," (ALBERT model)"),$7e.forEach(t),Dcr=i(re),d8=n(re,"LI",{});var I7e=s(d8);Vue=n(I7e,"STRONG",{});var Zut=s(Vue);Gcr=r(Zut,"bert"),Zut.forEach(t),Ocr=r(I7e," \u2014 "),pX=n(I7e,"A",{href:!0});var e6t=s(pX);Vcr=r(e6t,"TFBertForMaskedLM"),e6t.forEach(t),Xcr=r(I7e," (BERT model)"),I7e.forEach(t),zcr=i(re),c8=n(re,"LI",{});var q7e=s(c8);Xue=n(q7e,"STRONG",{});var o6t=s(Xue);Qcr=r(o6t,"camembert"),o6t.forEach(t),Wcr=r(q7e," \u2014 "),_X=n(q7e,"A",{href:!0});var r6t=s(_X);Hcr=r(r6t,"TFCamembertForMaskedLM"),r6t.forEach(t),Ucr=r(q7e," (CamemBERT model)"),q7e.forEach(t),Jcr=i(re),f8=n(re,"LI",{});var N7e=s(f8);zue=n(N7e,"STRONG",{});var t6t=s(zue);Ycr=r(t6t,"convbert"),t6t.forEach(t),Kcr=r(N7e," \u2014 "),uX=n(N7e,"A",{href:!0});var a6t=s(uX);Zcr=r(a6t,"TFConvBertForMaskedLM"),a6t.forEach(t),efr=r(N7e," (ConvBERT model)"),N7e.forEach(t),ofr=i(re),m8=n(re,"LI",{});var j7e=s(m8);Que=n(j7e,"STRONG",{});var n6t=s(Que);rfr=r(n6t,"deberta"),n6t.forEach(t),tfr=r(j7e," \u2014 "),bX=n(j7e,"A",{href:!0});var s6t=s(bX);afr=r(s6t,"TFDebertaForMaskedLM"),s6t.forEach(t),nfr=r(j7e," (DeBERTa model)"),j7e.forEach(t),sfr=i(re),g8=n(re,"LI",{});var D7e=s(g8);Wue=n(D7e,"STRONG",{});var l6t=s(Wue);lfr=r(l6t,"deberta-v2"),l6t.forEach(t),ifr=r(D7e," \u2014 "),vX=n(D7e,"A",{href:!0});var i6t=s(vX);dfr=r(i6t,"TFDebertaV2ForMaskedLM"),i6t.forEach(t),cfr=r(D7e," (DeBERTa-v2 model)"),D7e.forEach(t),ffr=i(re),h8=n(re,"LI",{});var G7e=s(h8);Hue=n(G7e,"STRONG",{});var d6t=s(Hue);mfr=r(d6t,"distilbert"),d6t.forEach(t),gfr=r(G7e," \u2014 "),FX=n(G7e,"A",{href:!0});var c6t=s(FX);hfr=r(c6t,"TFDistilBertForMaskedLM"),c6t.forEach(t),pfr=r(G7e," (DistilBERT model)"),G7e.forEach(t),_fr=i(re),p8=n(re,"LI",{});var O7e=s(p8);Uue=n(O7e,"STRONG",{});var f6t=s(Uue);ufr=r(f6t,"electra"),f6t.forEach(t),bfr=r(O7e," \u2014 "),TX=n(O7e,"A",{href:!0});var m6t=s(TX);vfr=r(m6t,"TFElectraForMaskedLM"),m6t.forEach(t),Ffr=r(O7e," (ELECTRA model)"),O7e.forEach(t),Tfr=i(re),_8=n(re,"LI",{});var V7e=s(_8);Jue=n(V7e,"STRONG",{});var g6t=s(Jue);Mfr=r(g6t,"flaubert"),g6t.forEach(t),Efr=r(V7e," \u2014 "),MX=n(V7e,"A",{href:!0});var h6t=s(MX);Cfr=r(h6t,"TFFlaubertWithLMHeadModel"),h6t.forEach(t),wfr=r(V7e," (FlauBERT model)"),V7e.forEach(t),Afr=i(re),u8=n(re,"LI",{});var X7e=s(u8);Yue=n(X7e,"STRONG",{});var p6t=s(Yue);yfr=r(p6t,"funnel"),p6t.forEach(t),Lfr=r(X7e," \u2014 "),EX=n(X7e,"A",{href:!0});var _6t=s(EX);xfr=r(_6t,"TFFunnelForMaskedLM"),_6t.forEach(t),kfr=r(X7e," (Funnel Transformer model)"),X7e.forEach(t),Sfr=i(re),b8=n(re,"LI",{});var z7e=s(b8);Kue=n(z7e,"STRONG",{});var u6t=s(Kue);Rfr=r(u6t,"layoutlm"),u6t.forEach(t),Bfr=r(z7e," \u2014 "),CX=n(z7e,"A",{href:!0});var b6t=s(CX);Pfr=r(b6t,"TFLayoutLMForMaskedLM"),b6t.forEach(t),$fr=r(z7e," (LayoutLM model)"),z7e.forEach(t),Ifr=i(re),v8=n(re,"LI",{});var Q7e=s(v8);Zue=n(Q7e,"STRONG",{});var v6t=s(Zue);qfr=r(v6t,"longformer"),v6t.forEach(t),Nfr=r(Q7e," \u2014 "),wX=n(Q7e,"A",{href:!0});var F6t=s(wX);jfr=r(F6t,"TFLongformerForMaskedLM"),F6t.forEach(t),Dfr=r(Q7e," (Longformer model)"),Q7e.forEach(t),Gfr=i(re),F8=n(re,"LI",{});var W7e=s(F8);e6e=n(W7e,"STRONG",{});var T6t=s(e6e);Ofr=r(T6t,"mobilebert"),T6t.forEach(t),Vfr=r(W7e," \u2014 "),AX=n(W7e,"A",{href:!0});var M6t=s(AX);Xfr=r(M6t,"TFMobileBertForMaskedLM"),M6t.forEach(t),zfr=r(W7e," (MobileBERT model)"),W7e.forEach(t),Qfr=i(re),T8=n(re,"LI",{});var H7e=s(T8);o6e=n(H7e,"STRONG",{});var E6t=s(o6e);Wfr=r(E6t,"mpnet"),E6t.forEach(t),Hfr=r(H7e," \u2014 "),yX=n(H7e,"A",{href:!0});var C6t=s(yX);Ufr=r(C6t,"TFMPNetForMaskedLM"),C6t.forEach(t),Jfr=r(H7e," (MPNet model)"),H7e.forEach(t),Yfr=i(re),M8=n(re,"LI",{});var U7e=s(M8);r6e=n(U7e,"STRONG",{});var w6t=s(r6e);Kfr=r(w6t,"rembert"),w6t.forEach(t),Zfr=r(U7e," \u2014 "),LX=n(U7e,"A",{href:!0});var A6t=s(LX);emr=r(A6t,"TFRemBertForMaskedLM"),A6t.forEach(t),omr=r(U7e," (RemBERT model)"),U7e.forEach(t),rmr=i(re),E8=n(re,"LI",{});var J7e=s(E8);t6e=n(J7e,"STRONG",{});var y6t=s(t6e);tmr=r(y6t,"roberta"),y6t.forEach(t),amr=r(J7e," \u2014 "),xX=n(J7e,"A",{href:!0});var L6t=s(xX);nmr=r(L6t,"TFRobertaForMaskedLM"),L6t.forEach(t),smr=r(J7e," (RoBERTa model)"),J7e.forEach(t),lmr=i(re),C8=n(re,"LI",{});var Y7e=s(C8);a6e=n(Y7e,"STRONG",{});var x6t=s(a6e);imr=r(x6t,"roformer"),x6t.forEach(t),dmr=r(Y7e," \u2014 "),kX=n(Y7e,"A",{href:!0});var k6t=s(kX);cmr=r(k6t,"TFRoFormerForMaskedLM"),k6t.forEach(t),fmr=r(Y7e," (RoFormer model)"),Y7e.forEach(t),mmr=i(re),w8=n(re,"LI",{});var K7e=s(w8);n6e=n(K7e,"STRONG",{});var S6t=s(n6e);gmr=r(S6t,"tapas"),S6t.forEach(t),hmr=r(K7e," \u2014 "),SX=n(K7e,"A",{href:!0});var R6t=s(SX);pmr=r(R6t,"TFTapasForMaskedLM"),R6t.forEach(t),_mr=r(K7e," (TAPAS model)"),K7e.forEach(t),umr=i(re),A8=n(re,"LI",{});var Z7e=s(A8);s6e=n(Z7e,"STRONG",{});var B6t=s(s6e);bmr=r(B6t,"xlm"),B6t.forEach(t),vmr=r(Z7e," \u2014 "),RX=n(Z7e,"A",{href:!0});var P6t=s(RX);Fmr=r(P6t,"TFXLMWithLMHeadModel"),P6t.forEach(t),Tmr=r(Z7e," (XLM model)"),Z7e.forEach(t),Mmr=i(re),y8=n(re,"LI",{});var exe=s(y8);l6e=n(exe,"STRONG",{});var $6t=s(l6e);Emr=r($6t,"xlm-roberta"),$6t.forEach(t),Cmr=r(exe," \u2014 "),BX=n(exe,"A",{href:!0});var I6t=s(BX);wmr=r(I6t,"TFXLMRobertaForMaskedLM"),I6t.forEach(t),Amr=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),re.forEach(t),ymr=i(va),i6e=n(va,"P",{});var q6t=s(i6e);Lmr=r(q6t,"Examples:"),q6t.forEach(t),xmr=i(va),m(XA.$$.fragment,va),va.forEach(t),Ul.forEach(t),YBe=i(c),xc=n(c,"H2",{class:!0});var iIe=s(xc);L8=n(iIe,"A",{id:!0,class:!0,href:!0});var N6t=s(L8);d6e=n(N6t,"SPAN",{});var j6t=s(d6e);m(zA.$$.fragment,j6t),j6t.forEach(t),N6t.forEach(t),kmr=i(iIe),c6e=n(iIe,"SPAN",{});var D6t=s(c6e);Smr=r(D6t,"TFAutoModelForSeq2SeqLM"),D6t.forEach(t),iIe.forEach(t),KBe=i(c),Cr=n(c,"DIV",{class:!0});var Yl=s(Cr);m(QA.$$.fragment,Yl),Rmr=i(Yl),kc=n(Yl,"P",{});var yJ=s(kc);Bmr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PX=n(yJ,"A",{href:!0});var G6t=s(PX);Pmr=r(G6t,"from_pretrained()"),G6t.forEach(t),$mr=r(yJ," class method or the "),$X=n(yJ,"A",{href:!0});var O6t=s($X);Imr=r(O6t,"from_config()"),O6t.forEach(t),qmr=r(yJ,` class
method.`),yJ.forEach(t),Nmr=i(Yl),WA=n(Yl,"P",{});var dIe=s(WA);jmr=r(dIe,"This class cannot be instantiated directly using "),f6e=n(dIe,"CODE",{});var V6t=s(f6e);Dmr=r(V6t,"__init__()"),V6t.forEach(t),Gmr=r(dIe," (throws an error)."),dIe.forEach(t),Omr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(HA.$$.fragment,Kl),Vmr=i(Kl),m6e=n(Kl,"P",{});var X6t=s(m6e);Xmr=r(X6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),X6t.forEach(t),zmr=i(Kl),Sc=n(Kl,"P",{});var LJ=s(Sc);Qmr=r(LJ,`Note:
Loading a model from its configuration file does `),g6e=n(LJ,"STRONG",{});var z6t=s(g6e);Wmr=r(z6t,"not"),z6t.forEach(t),Hmr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(LJ,"A",{href:!0});var Q6t=s(IX);Umr=r(Q6t,"from_pretrained()"),Q6t.forEach(t),Jmr=r(LJ," to load the model weights."),LJ.forEach(t),Ymr=i(Kl),h6e=n(Kl,"P",{});var W6t=s(h6e);Kmr=r(W6t,"Examples:"),W6t.forEach(t),Zmr=i(Kl),m(UA.$$.fragment,Kl),Kl.forEach(t),egr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Fa=s(vo);m(JA.$$.fragment,Fa),ogr=i(Fa),p6e=n(Fa,"P",{});var H6t=s(p6e);rgr=r(H6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H6t.forEach(t),tgr=i(Fa),Mn=n(Fa,"P",{});var d5=s(Mn);agr=r(d5,"The model class to instantiate is selected based on the "),_6e=n(d5,"CODE",{});var U6t=s(_6e);ngr=r(U6t,"model_type"),U6t.forEach(t),sgr=r(d5,` property of the config object (either
passed as an argument or loaded from `),u6e=n(d5,"CODE",{});var J6t=s(u6e);lgr=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),igr=r(d5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b6e=n(d5,"CODE",{});var Y6t=s(b6e);dgr=r(Y6t,"pretrained_model_name_or_path"),Y6t.forEach(t),cgr=r(d5,":"),d5.forEach(t),fgr=i(Fa),be=n(Fa,"UL",{});var we=s(be);x8=n(we,"LI",{});var oxe=s(x8);v6e=n(oxe,"STRONG",{});var K6t=s(v6e);mgr=r(K6t,"bart"),K6t.forEach(t),ggr=r(oxe," \u2014 "),qX=n(oxe,"A",{href:!0});var Z6t=s(qX);hgr=r(Z6t,"TFBartForConditionalGeneration"),Z6t.forEach(t),pgr=r(oxe," (BART model)"),oxe.forEach(t),_gr=i(we),k8=n(we,"LI",{});var rxe=s(k8);F6e=n(rxe,"STRONG",{});var e1t=s(F6e);ugr=r(e1t,"blenderbot"),e1t.forEach(t),bgr=r(rxe," \u2014 "),NX=n(rxe,"A",{href:!0});var o1t=s(NX);vgr=r(o1t,"TFBlenderbotForConditionalGeneration"),o1t.forEach(t),Fgr=r(rxe," (Blenderbot model)"),rxe.forEach(t),Tgr=i(we),S8=n(we,"LI",{});var txe=s(S8);T6e=n(txe,"STRONG",{});var r1t=s(T6e);Mgr=r(r1t,"blenderbot-small"),r1t.forEach(t),Egr=r(txe," \u2014 "),jX=n(txe,"A",{href:!0});var t1t=s(jX);Cgr=r(t1t,"TFBlenderbotSmallForConditionalGeneration"),t1t.forEach(t),wgr=r(txe," (BlenderbotSmall model)"),txe.forEach(t),Agr=i(we),R8=n(we,"LI",{});var axe=s(R8);M6e=n(axe,"STRONG",{});var a1t=s(M6e);ygr=r(a1t,"encoder-decoder"),a1t.forEach(t),Lgr=r(axe," \u2014 "),DX=n(axe,"A",{href:!0});var n1t=s(DX);xgr=r(n1t,"TFEncoderDecoderModel"),n1t.forEach(t),kgr=r(axe," (Encoder decoder model)"),axe.forEach(t),Sgr=i(we),B8=n(we,"LI",{});var nxe=s(B8);E6e=n(nxe,"STRONG",{});var s1t=s(E6e);Rgr=r(s1t,"led"),s1t.forEach(t),Bgr=r(nxe," \u2014 "),GX=n(nxe,"A",{href:!0});var l1t=s(GX);Pgr=r(l1t,"TFLEDForConditionalGeneration"),l1t.forEach(t),$gr=r(nxe," (LED model)"),nxe.forEach(t),Igr=i(we),P8=n(we,"LI",{});var sxe=s(P8);C6e=n(sxe,"STRONG",{});var i1t=s(C6e);qgr=r(i1t,"marian"),i1t.forEach(t),Ngr=r(sxe," \u2014 "),OX=n(sxe,"A",{href:!0});var d1t=s(OX);jgr=r(d1t,"TFMarianMTModel"),d1t.forEach(t),Dgr=r(sxe," (Marian model)"),sxe.forEach(t),Ggr=i(we),$8=n(we,"LI",{});var lxe=s($8);w6e=n(lxe,"STRONG",{});var c1t=s(w6e);Ogr=r(c1t,"mbart"),c1t.forEach(t),Vgr=r(lxe," \u2014 "),VX=n(lxe,"A",{href:!0});var f1t=s(VX);Xgr=r(f1t,"TFMBartForConditionalGeneration"),f1t.forEach(t),zgr=r(lxe," (mBART model)"),lxe.forEach(t),Qgr=i(we),I8=n(we,"LI",{});var ixe=s(I8);A6e=n(ixe,"STRONG",{});var m1t=s(A6e);Wgr=r(m1t,"mt5"),m1t.forEach(t),Hgr=r(ixe," \u2014 "),XX=n(ixe,"A",{href:!0});var g1t=s(XX);Ugr=r(g1t,"TFMT5ForConditionalGeneration"),g1t.forEach(t),Jgr=r(ixe," (mT5 model)"),ixe.forEach(t),Ygr=i(we),q8=n(we,"LI",{});var dxe=s(q8);y6e=n(dxe,"STRONG",{});var h1t=s(y6e);Kgr=r(h1t,"pegasus"),h1t.forEach(t),Zgr=r(dxe," \u2014 "),zX=n(dxe,"A",{href:!0});var p1t=s(zX);ehr=r(p1t,"TFPegasusForConditionalGeneration"),p1t.forEach(t),ohr=r(dxe," (Pegasus model)"),dxe.forEach(t),rhr=i(we),N8=n(we,"LI",{});var cxe=s(N8);L6e=n(cxe,"STRONG",{});var _1t=s(L6e);thr=r(_1t,"t5"),_1t.forEach(t),ahr=r(cxe," \u2014 "),QX=n(cxe,"A",{href:!0});var u1t=s(QX);nhr=r(u1t,"TFT5ForConditionalGeneration"),u1t.forEach(t),shr=r(cxe," (T5 model)"),cxe.forEach(t),we.forEach(t),lhr=i(Fa),x6e=n(Fa,"P",{});var b1t=s(x6e);ihr=r(b1t,"Examples:"),b1t.forEach(t),dhr=i(Fa),m(YA.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),ZBe=i(c),Rc=n(c,"H2",{class:!0});var cIe=s(Rc);j8=n(cIe,"A",{id:!0,class:!0,href:!0});var v1t=s(j8);k6e=n(v1t,"SPAN",{});var F1t=s(k6e);m(KA.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),chr=i(cIe),S6e=n(cIe,"SPAN",{});var T1t=s(S6e);fhr=r(T1t,"TFAutoModelForSequenceClassification"),T1t.forEach(t),cIe.forEach(t),ePe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(ZA.$$.fragment,Zl),mhr=i(Zl),Bc=n(Zl,"P",{});var xJ=s(Bc);ghr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WX=n(xJ,"A",{href:!0});var M1t=s(WX);hhr=r(M1t,"from_pretrained()"),M1t.forEach(t),phr=r(xJ," class method or the "),HX=n(xJ,"A",{href:!0});var E1t=s(HX);_hr=r(E1t,"from_config()"),E1t.forEach(t),uhr=r(xJ,` class
method.`),xJ.forEach(t),bhr=i(Zl),e0=n(Zl,"P",{});var fIe=s(e0);vhr=r(fIe,"This class cannot be instantiated directly using "),R6e=n(fIe,"CODE",{});var C1t=s(R6e);Fhr=r(C1t,"__init__()"),C1t.forEach(t),Thr=r(fIe," (throws an error)."),fIe.forEach(t),Mhr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(o0.$$.fragment,ei),Ehr=i(ei),B6e=n(ei,"P",{});var w1t=s(B6e);Chr=r(w1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w1t.forEach(t),whr=i(ei),Pc=n(ei,"P",{});var kJ=s(Pc);Ahr=r(kJ,`Note:
Loading a model from its configuration file does `),P6e=n(kJ,"STRONG",{});var A1t=s(P6e);yhr=r(A1t,"not"),A1t.forEach(t),Lhr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(kJ,"A",{href:!0});var y1t=s(UX);xhr=r(y1t,"from_pretrained()"),y1t.forEach(t),khr=r(kJ," to load the model weights."),kJ.forEach(t),Shr=i(ei),$6e=n(ei,"P",{});var L1t=s($6e);Rhr=r(L1t,"Examples:"),L1t.forEach(t),Bhr=i(ei),m(r0.$$.fragment,ei),ei.forEach(t),Phr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ta=s(Fo);m(t0.$$.fragment,Ta),$hr=i(Ta),I6e=n(Ta,"P",{});var x1t=s(I6e);Ihr=r(x1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),x1t.forEach(t),qhr=i(Ta),En=n(Ta,"P",{});var c5=s(En);Nhr=r(c5,"The model class to instantiate is selected based on the "),q6e=n(c5,"CODE",{});var k1t=s(q6e);jhr=r(k1t,"model_type"),k1t.forEach(t),Dhr=r(c5,` property of the config object (either
passed as an argument or loaded from `),N6e=n(c5,"CODE",{});var S1t=s(N6e);Ghr=r(S1t,"pretrained_model_name_or_path"),S1t.forEach(t),Ohr=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j6e=n(c5,"CODE",{});var R1t=s(j6e);Vhr=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),Xhr=r(c5,":"),c5.forEach(t),zhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);D8=n(Q,"LI",{});var fxe=s(D8);D6e=n(fxe,"STRONG",{});var B1t=s(D6e);Qhr=r(B1t,"albert"),B1t.forEach(t),Whr=r(fxe," \u2014 "),JX=n(fxe,"A",{href:!0});var P1t=s(JX);Hhr=r(P1t,"TFAlbertForSequenceClassification"),P1t.forEach(t),Uhr=r(fxe," (ALBERT model)"),fxe.forEach(t),Jhr=i(Q),G8=n(Q,"LI",{});var mxe=s(G8);G6e=n(mxe,"STRONG",{});var $1t=s(G6e);Yhr=r($1t,"bert"),$1t.forEach(t),Khr=r(mxe," \u2014 "),YX=n(mxe,"A",{href:!0});var I1t=s(YX);Zhr=r(I1t,"TFBertForSequenceClassification"),I1t.forEach(t),epr=r(mxe," (BERT model)"),mxe.forEach(t),opr=i(Q),O8=n(Q,"LI",{});var gxe=s(O8);O6e=n(gxe,"STRONG",{});var q1t=s(O6e);rpr=r(q1t,"camembert"),q1t.forEach(t),tpr=r(gxe," \u2014 "),KX=n(gxe,"A",{href:!0});var N1t=s(KX);apr=r(N1t,"TFCamembertForSequenceClassification"),N1t.forEach(t),npr=r(gxe," (CamemBERT model)"),gxe.forEach(t),spr=i(Q),V8=n(Q,"LI",{});var hxe=s(V8);V6e=n(hxe,"STRONG",{});var j1t=s(V6e);lpr=r(j1t,"convbert"),j1t.forEach(t),ipr=r(hxe," \u2014 "),ZX=n(hxe,"A",{href:!0});var D1t=s(ZX);dpr=r(D1t,"TFConvBertForSequenceClassification"),D1t.forEach(t),cpr=r(hxe," (ConvBERT model)"),hxe.forEach(t),fpr=i(Q),X8=n(Q,"LI",{});var pxe=s(X8);X6e=n(pxe,"STRONG",{});var G1t=s(X6e);mpr=r(G1t,"ctrl"),G1t.forEach(t),gpr=r(pxe," \u2014 "),ez=n(pxe,"A",{href:!0});var O1t=s(ez);hpr=r(O1t,"TFCTRLForSequenceClassification"),O1t.forEach(t),ppr=r(pxe," (CTRL model)"),pxe.forEach(t),_pr=i(Q),z8=n(Q,"LI",{});var _xe=s(z8);z6e=n(_xe,"STRONG",{});var V1t=s(z6e);upr=r(V1t,"deberta"),V1t.forEach(t),bpr=r(_xe," \u2014 "),oz=n(_xe,"A",{href:!0});var X1t=s(oz);vpr=r(X1t,"TFDebertaForSequenceClassification"),X1t.forEach(t),Fpr=r(_xe," (DeBERTa model)"),_xe.forEach(t),Tpr=i(Q),Q8=n(Q,"LI",{});var uxe=s(Q8);Q6e=n(uxe,"STRONG",{});var z1t=s(Q6e);Mpr=r(z1t,"deberta-v2"),z1t.forEach(t),Epr=r(uxe," \u2014 "),rz=n(uxe,"A",{href:!0});var Q1t=s(rz);Cpr=r(Q1t,"TFDebertaV2ForSequenceClassification"),Q1t.forEach(t),wpr=r(uxe," (DeBERTa-v2 model)"),uxe.forEach(t),Apr=i(Q),W8=n(Q,"LI",{});var bxe=s(W8);W6e=n(bxe,"STRONG",{});var W1t=s(W6e);ypr=r(W1t,"distilbert"),W1t.forEach(t),Lpr=r(bxe," \u2014 "),tz=n(bxe,"A",{href:!0});var H1t=s(tz);xpr=r(H1t,"TFDistilBertForSequenceClassification"),H1t.forEach(t),kpr=r(bxe," (DistilBERT model)"),bxe.forEach(t),Spr=i(Q),H8=n(Q,"LI",{});var vxe=s(H8);H6e=n(vxe,"STRONG",{});var U1t=s(H6e);Rpr=r(U1t,"electra"),U1t.forEach(t),Bpr=r(vxe," \u2014 "),az=n(vxe,"A",{href:!0});var J1t=s(az);Ppr=r(J1t,"TFElectraForSequenceClassification"),J1t.forEach(t),$pr=r(vxe," (ELECTRA model)"),vxe.forEach(t),Ipr=i(Q),U8=n(Q,"LI",{});var Fxe=s(U8);U6e=n(Fxe,"STRONG",{});var Y1t=s(U6e);qpr=r(Y1t,"flaubert"),Y1t.forEach(t),Npr=r(Fxe," \u2014 "),nz=n(Fxe,"A",{href:!0});var K1t=s(nz);jpr=r(K1t,"TFFlaubertForSequenceClassification"),K1t.forEach(t),Dpr=r(Fxe," (FlauBERT model)"),Fxe.forEach(t),Gpr=i(Q),J8=n(Q,"LI",{});var Txe=s(J8);J6e=n(Txe,"STRONG",{});var Z1t=s(J6e);Opr=r(Z1t,"funnel"),Z1t.forEach(t),Vpr=r(Txe," \u2014 "),sz=n(Txe,"A",{href:!0});var ebt=s(sz);Xpr=r(ebt,"TFFunnelForSequenceClassification"),ebt.forEach(t),zpr=r(Txe," (Funnel Transformer model)"),Txe.forEach(t),Qpr=i(Q),Y8=n(Q,"LI",{});var Mxe=s(Y8);Y6e=n(Mxe,"STRONG",{});var obt=s(Y6e);Wpr=r(obt,"gpt2"),obt.forEach(t),Hpr=r(Mxe," \u2014 "),lz=n(Mxe,"A",{href:!0});var rbt=s(lz);Upr=r(rbt,"TFGPT2ForSequenceClassification"),rbt.forEach(t),Jpr=r(Mxe," (OpenAI GPT-2 model)"),Mxe.forEach(t),Ypr=i(Q),K8=n(Q,"LI",{});var Exe=s(K8);K6e=n(Exe,"STRONG",{});var tbt=s(K6e);Kpr=r(tbt,"gptj"),tbt.forEach(t),Zpr=r(Exe," \u2014 "),iz=n(Exe,"A",{href:!0});var abt=s(iz);e_r=r(abt,"TFGPTJForSequenceClassification"),abt.forEach(t),o_r=r(Exe," (GPT-J model)"),Exe.forEach(t),r_r=i(Q),Z8=n(Q,"LI",{});var Cxe=s(Z8);Z6e=n(Cxe,"STRONG",{});var nbt=s(Z6e);t_r=r(nbt,"layoutlm"),nbt.forEach(t),a_r=r(Cxe," \u2014 "),dz=n(Cxe,"A",{href:!0});var sbt=s(dz);n_r=r(sbt,"TFLayoutLMForSequenceClassification"),sbt.forEach(t),s_r=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),l_r=i(Q),e9=n(Q,"LI",{});var wxe=s(e9);e1e=n(wxe,"STRONG",{});var lbt=s(e1e);i_r=r(lbt,"longformer"),lbt.forEach(t),d_r=r(wxe," \u2014 "),cz=n(wxe,"A",{href:!0});var ibt=s(cz);c_r=r(ibt,"TFLongformerForSequenceClassification"),ibt.forEach(t),f_r=r(wxe," (Longformer model)"),wxe.forEach(t),m_r=i(Q),o9=n(Q,"LI",{});var Axe=s(o9);o1e=n(Axe,"STRONG",{});var dbt=s(o1e);g_r=r(dbt,"mobilebert"),dbt.forEach(t),h_r=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var cbt=s(fz);p_r=r(cbt,"TFMobileBertForSequenceClassification"),cbt.forEach(t),__r=r(Axe," (MobileBERT model)"),Axe.forEach(t),u_r=i(Q),r9=n(Q,"LI",{});var yxe=s(r9);r1e=n(yxe,"STRONG",{});var fbt=s(r1e);b_r=r(fbt,"mpnet"),fbt.forEach(t),v_r=r(yxe," \u2014 "),mz=n(yxe,"A",{href:!0});var mbt=s(mz);F_r=r(mbt,"TFMPNetForSequenceClassification"),mbt.forEach(t),T_r=r(yxe," (MPNet model)"),yxe.forEach(t),M_r=i(Q),t9=n(Q,"LI",{});var Lxe=s(t9);t1e=n(Lxe,"STRONG",{});var gbt=s(t1e);E_r=r(gbt,"openai-gpt"),gbt.forEach(t),C_r=r(Lxe," \u2014 "),gz=n(Lxe,"A",{href:!0});var hbt=s(gz);w_r=r(hbt,"TFOpenAIGPTForSequenceClassification"),hbt.forEach(t),A_r=r(Lxe," (OpenAI GPT model)"),Lxe.forEach(t),y_r=i(Q),a9=n(Q,"LI",{});var xxe=s(a9);a1e=n(xxe,"STRONG",{});var pbt=s(a1e);L_r=r(pbt,"rembert"),pbt.forEach(t),x_r=r(xxe," \u2014 "),hz=n(xxe,"A",{href:!0});var _bt=s(hz);k_r=r(_bt,"TFRemBertForSequenceClassification"),_bt.forEach(t),S_r=r(xxe," (RemBERT model)"),xxe.forEach(t),R_r=i(Q),n9=n(Q,"LI",{});var kxe=s(n9);n1e=n(kxe,"STRONG",{});var ubt=s(n1e);B_r=r(ubt,"roberta"),ubt.forEach(t),P_r=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var bbt=s(pz);$_r=r(bbt,"TFRobertaForSequenceClassification"),bbt.forEach(t),I_r=r(kxe," (RoBERTa model)"),kxe.forEach(t),q_r=i(Q),s9=n(Q,"LI",{});var Sxe=s(s9);s1e=n(Sxe,"STRONG",{});var vbt=s(s1e);N_r=r(vbt,"roformer"),vbt.forEach(t),j_r=r(Sxe," \u2014 "),_z=n(Sxe,"A",{href:!0});var Fbt=s(_z);D_r=r(Fbt,"TFRoFormerForSequenceClassification"),Fbt.forEach(t),G_r=r(Sxe," (RoFormer model)"),Sxe.forEach(t),O_r=i(Q),l9=n(Q,"LI",{});var Rxe=s(l9);l1e=n(Rxe,"STRONG",{});var Tbt=s(l1e);V_r=r(Tbt,"tapas"),Tbt.forEach(t),X_r=r(Rxe," \u2014 "),uz=n(Rxe,"A",{href:!0});var Mbt=s(uz);z_r=r(Mbt,"TFTapasForSequenceClassification"),Mbt.forEach(t),Q_r=r(Rxe," (TAPAS model)"),Rxe.forEach(t),W_r=i(Q),i9=n(Q,"LI",{});var Bxe=s(i9);i1e=n(Bxe,"STRONG",{});var Ebt=s(i1e);H_r=r(Ebt,"transfo-xl"),Ebt.forEach(t),U_r=r(Bxe," \u2014 "),bz=n(Bxe,"A",{href:!0});var Cbt=s(bz);J_r=r(Cbt,"TFTransfoXLForSequenceClassification"),Cbt.forEach(t),Y_r=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),K_r=i(Q),d9=n(Q,"LI",{});var Pxe=s(d9);d1e=n(Pxe,"STRONG",{});var wbt=s(d1e);Z_r=r(wbt,"xlm"),wbt.forEach(t),eur=r(Pxe," \u2014 "),vz=n(Pxe,"A",{href:!0});var Abt=s(vz);our=r(Abt,"TFXLMForSequenceClassification"),Abt.forEach(t),rur=r(Pxe," (XLM model)"),Pxe.forEach(t),tur=i(Q),c9=n(Q,"LI",{});var $xe=s(c9);c1e=n($xe,"STRONG",{});var ybt=s(c1e);aur=r(ybt,"xlm-roberta"),ybt.forEach(t),nur=r($xe," \u2014 "),Fz=n($xe,"A",{href:!0});var Lbt=s(Fz);sur=r(Lbt,"TFXLMRobertaForSequenceClassification"),Lbt.forEach(t),lur=r($xe," (XLM-RoBERTa model)"),$xe.forEach(t),iur=i(Q),f9=n(Q,"LI",{});var Ixe=s(f9);f1e=n(Ixe,"STRONG",{});var xbt=s(f1e);dur=r(xbt,"xlnet"),xbt.forEach(t),cur=r(Ixe," \u2014 "),Tz=n(Ixe,"A",{href:!0});var kbt=s(Tz);fur=r(kbt,"TFXLNetForSequenceClassification"),kbt.forEach(t),mur=r(Ixe," (XLNet model)"),Ixe.forEach(t),Q.forEach(t),gur=i(Ta),m1e=n(Ta,"P",{});var Sbt=s(m1e);hur=r(Sbt,"Examples:"),Sbt.forEach(t),pur=i(Ta),m(a0.$$.fragment,Ta),Ta.forEach(t),Zl.forEach(t),oPe=i(c),$c=n(c,"H2",{class:!0});var mIe=s($c);m9=n(mIe,"A",{id:!0,class:!0,href:!0});var Rbt=s(m9);g1e=n(Rbt,"SPAN",{});var Bbt=s(g1e);m(n0.$$.fragment,Bbt),Bbt.forEach(t),Rbt.forEach(t),_ur=i(mIe),h1e=n(mIe,"SPAN",{});var Pbt=s(h1e);uur=r(Pbt,"TFAutoModelForMultipleChoice"),Pbt.forEach(t),mIe.forEach(t),rPe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(s0.$$.fragment,oi),bur=i(oi),Ic=n(oi,"P",{});var SJ=s(Ic);vur=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mz=n(SJ,"A",{href:!0});var $bt=s(Mz);Fur=r($bt,"from_pretrained()"),$bt.forEach(t),Tur=r(SJ," class method or the "),Ez=n(SJ,"A",{href:!0});var Ibt=s(Ez);Mur=r(Ibt,"from_config()"),Ibt.forEach(t),Eur=r(SJ,` class
method.`),SJ.forEach(t),Cur=i(oi),l0=n(oi,"P",{});var gIe=s(l0);wur=r(gIe,"This class cannot be instantiated directly using "),p1e=n(gIe,"CODE",{});var qbt=s(p1e);Aur=r(qbt,"__init__()"),qbt.forEach(t),yur=r(gIe," (throws an error)."),gIe.forEach(t),Lur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(i0.$$.fragment,ri),xur=i(ri),_1e=n(ri,"P",{});var Nbt=s(_1e);kur=r(Nbt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Nbt.forEach(t),Sur=i(ri),qc=n(ri,"P",{});var RJ=s(qc);Rur=r(RJ,`Note:
Loading a model from its configuration file does `),u1e=n(RJ,"STRONG",{});var jbt=s(u1e);Bur=r(jbt,"not"),jbt.forEach(t),Pur=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(RJ,"A",{href:!0});var Dbt=s(Cz);$ur=r(Dbt,"from_pretrained()"),Dbt.forEach(t),Iur=r(RJ," to load the model weights."),RJ.forEach(t),qur=i(ri),b1e=n(ri,"P",{});var Gbt=s(b1e);Nur=r(Gbt,"Examples:"),Gbt.forEach(t),jur=i(ri),m(d0.$$.fragment,ri),ri.forEach(t),Dur=i(oi),To=n(oi,"DIV",{class:!0});var Ma=s(To);m(c0.$$.fragment,Ma),Gur=i(Ma),v1e=n(Ma,"P",{});var Obt=s(v1e);Our=r(Obt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Obt.forEach(t),Vur=i(Ma),Cn=n(Ma,"P",{});var f5=s(Cn);Xur=r(f5,"The model class to instantiate is selected based on the "),F1e=n(f5,"CODE",{});var Vbt=s(F1e);zur=r(Vbt,"model_type"),Vbt.forEach(t),Qur=r(f5,` property of the config object (either
passed as an argument or loaded from `),T1e=n(f5,"CODE",{});var Xbt=s(T1e);Wur=r(Xbt,"pretrained_model_name_or_path"),Xbt.forEach(t),Hur=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(f5,"CODE",{});var zbt=s(M1e);Uur=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Jur=r(f5,":"),f5.forEach(t),Yur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);g9=n(ie,"LI",{});var qxe=s(g9);E1e=n(qxe,"STRONG",{});var Qbt=s(E1e);Kur=r(Qbt,"albert"),Qbt.forEach(t),Zur=r(qxe," \u2014 "),wz=n(qxe,"A",{href:!0});var Wbt=s(wz);e6r=r(Wbt,"TFAlbertForMultipleChoice"),Wbt.forEach(t),o6r=r(qxe," (ALBERT model)"),qxe.forEach(t),r6r=i(ie),h9=n(ie,"LI",{});var Nxe=s(h9);C1e=n(Nxe,"STRONG",{});var Hbt=s(C1e);t6r=r(Hbt,"bert"),Hbt.forEach(t),a6r=r(Nxe," \u2014 "),Az=n(Nxe,"A",{href:!0});var Ubt=s(Az);n6r=r(Ubt,"TFBertForMultipleChoice"),Ubt.forEach(t),s6r=r(Nxe," (BERT model)"),Nxe.forEach(t),l6r=i(ie),p9=n(ie,"LI",{});var jxe=s(p9);w1e=n(jxe,"STRONG",{});var Jbt=s(w1e);i6r=r(Jbt,"camembert"),Jbt.forEach(t),d6r=r(jxe," \u2014 "),yz=n(jxe,"A",{href:!0});var Ybt=s(yz);c6r=r(Ybt,"TFCamembertForMultipleChoice"),Ybt.forEach(t),f6r=r(jxe," (CamemBERT model)"),jxe.forEach(t),m6r=i(ie),_9=n(ie,"LI",{});var Dxe=s(_9);A1e=n(Dxe,"STRONG",{});var Kbt=s(A1e);g6r=r(Kbt,"convbert"),Kbt.forEach(t),h6r=r(Dxe," \u2014 "),Lz=n(Dxe,"A",{href:!0});var Zbt=s(Lz);p6r=r(Zbt,"TFConvBertForMultipleChoice"),Zbt.forEach(t),_6r=r(Dxe," (ConvBERT model)"),Dxe.forEach(t),u6r=i(ie),u9=n(ie,"LI",{});var Gxe=s(u9);y1e=n(Gxe,"STRONG",{});var e2t=s(y1e);b6r=r(e2t,"distilbert"),e2t.forEach(t),v6r=r(Gxe," \u2014 "),xz=n(Gxe,"A",{href:!0});var o2t=s(xz);F6r=r(o2t,"TFDistilBertForMultipleChoice"),o2t.forEach(t),T6r=r(Gxe," (DistilBERT model)"),Gxe.forEach(t),M6r=i(ie),b9=n(ie,"LI",{});var Oxe=s(b9);L1e=n(Oxe,"STRONG",{});var r2t=s(L1e);E6r=r(r2t,"electra"),r2t.forEach(t),C6r=r(Oxe," \u2014 "),kz=n(Oxe,"A",{href:!0});var t2t=s(kz);w6r=r(t2t,"TFElectraForMultipleChoice"),t2t.forEach(t),A6r=r(Oxe," (ELECTRA model)"),Oxe.forEach(t),y6r=i(ie),v9=n(ie,"LI",{});var Vxe=s(v9);x1e=n(Vxe,"STRONG",{});var a2t=s(x1e);L6r=r(a2t,"flaubert"),a2t.forEach(t),x6r=r(Vxe," \u2014 "),Sz=n(Vxe,"A",{href:!0});var n2t=s(Sz);k6r=r(n2t,"TFFlaubertForMultipleChoice"),n2t.forEach(t),S6r=r(Vxe," (FlauBERT model)"),Vxe.forEach(t),R6r=i(ie),F9=n(ie,"LI",{});var Xxe=s(F9);k1e=n(Xxe,"STRONG",{});var s2t=s(k1e);B6r=r(s2t,"funnel"),s2t.forEach(t),P6r=r(Xxe," \u2014 "),Rz=n(Xxe,"A",{href:!0});var l2t=s(Rz);$6r=r(l2t,"TFFunnelForMultipleChoice"),l2t.forEach(t),I6r=r(Xxe," (Funnel Transformer model)"),Xxe.forEach(t),q6r=i(ie),T9=n(ie,"LI",{});var zxe=s(T9);S1e=n(zxe,"STRONG",{});var i2t=s(S1e);N6r=r(i2t,"longformer"),i2t.forEach(t),j6r=r(zxe," \u2014 "),Bz=n(zxe,"A",{href:!0});var d2t=s(Bz);D6r=r(d2t,"TFLongformerForMultipleChoice"),d2t.forEach(t),G6r=r(zxe," (Longformer model)"),zxe.forEach(t),O6r=i(ie),M9=n(ie,"LI",{});var Qxe=s(M9);R1e=n(Qxe,"STRONG",{});var c2t=s(R1e);V6r=r(c2t,"mobilebert"),c2t.forEach(t),X6r=r(Qxe," \u2014 "),Pz=n(Qxe,"A",{href:!0});var f2t=s(Pz);z6r=r(f2t,"TFMobileBertForMultipleChoice"),f2t.forEach(t),Q6r=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),W6r=i(ie),E9=n(ie,"LI",{});var Wxe=s(E9);B1e=n(Wxe,"STRONG",{});var m2t=s(B1e);H6r=r(m2t,"mpnet"),m2t.forEach(t),U6r=r(Wxe," \u2014 "),$z=n(Wxe,"A",{href:!0});var g2t=s($z);J6r=r(g2t,"TFMPNetForMultipleChoice"),g2t.forEach(t),Y6r=r(Wxe," (MPNet model)"),Wxe.forEach(t),K6r=i(ie),C9=n(ie,"LI",{});var Hxe=s(C9);P1e=n(Hxe,"STRONG",{});var h2t=s(P1e);Z6r=r(h2t,"rembert"),h2t.forEach(t),e1r=r(Hxe," \u2014 "),Iz=n(Hxe,"A",{href:!0});var p2t=s(Iz);o1r=r(p2t,"TFRemBertForMultipleChoice"),p2t.forEach(t),r1r=r(Hxe," (RemBERT model)"),Hxe.forEach(t),t1r=i(ie),w9=n(ie,"LI",{});var Uxe=s(w9);$1e=n(Uxe,"STRONG",{});var _2t=s($1e);a1r=r(_2t,"roberta"),_2t.forEach(t),n1r=r(Uxe," \u2014 "),qz=n(Uxe,"A",{href:!0});var u2t=s(qz);s1r=r(u2t,"TFRobertaForMultipleChoice"),u2t.forEach(t),l1r=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),i1r=i(ie),A9=n(ie,"LI",{});var Jxe=s(A9);I1e=n(Jxe,"STRONG",{});var b2t=s(I1e);d1r=r(b2t,"roformer"),b2t.forEach(t),c1r=r(Jxe," \u2014 "),Nz=n(Jxe,"A",{href:!0});var v2t=s(Nz);f1r=r(v2t,"TFRoFormerForMultipleChoice"),v2t.forEach(t),m1r=r(Jxe," (RoFormer model)"),Jxe.forEach(t),g1r=i(ie),y9=n(ie,"LI",{});var Yxe=s(y9);q1e=n(Yxe,"STRONG",{});var F2t=s(q1e);h1r=r(F2t,"xlm"),F2t.forEach(t),p1r=r(Yxe," \u2014 "),jz=n(Yxe,"A",{href:!0});var T2t=s(jz);_1r=r(T2t,"TFXLMForMultipleChoice"),T2t.forEach(t),u1r=r(Yxe," (XLM model)"),Yxe.forEach(t),b1r=i(ie),L9=n(ie,"LI",{});var Kxe=s(L9);N1e=n(Kxe,"STRONG",{});var M2t=s(N1e);v1r=r(M2t,"xlm-roberta"),M2t.forEach(t),F1r=r(Kxe," \u2014 "),Dz=n(Kxe,"A",{href:!0});var E2t=s(Dz);T1r=r(E2t,"TFXLMRobertaForMultipleChoice"),E2t.forEach(t),M1r=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),E1r=i(ie),x9=n(ie,"LI",{});var Zxe=s(x9);j1e=n(Zxe,"STRONG",{});var C2t=s(j1e);C1r=r(C2t,"xlnet"),C2t.forEach(t),w1r=r(Zxe," \u2014 "),Gz=n(Zxe,"A",{href:!0});var w2t=s(Gz);A1r=r(w2t,"TFXLNetForMultipleChoice"),w2t.forEach(t),y1r=r(Zxe," (XLNet model)"),Zxe.forEach(t),ie.forEach(t),L1r=i(Ma),D1e=n(Ma,"P",{});var A2t=s(D1e);x1r=r(A2t,"Examples:"),A2t.forEach(t),k1r=i(Ma),m(f0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),tPe=i(c),Nc=n(c,"H2",{class:!0});var hIe=s(Nc);k9=n(hIe,"A",{id:!0,class:!0,href:!0});var y2t=s(k9);G1e=n(y2t,"SPAN",{});var L2t=s(G1e);m(m0.$$.fragment,L2t),L2t.forEach(t),y2t.forEach(t),S1r=i(hIe),O1e=n(hIe,"SPAN",{});var x2t=s(O1e);R1r=r(x2t,"TFAutoModelForTableQuestionAnswering"),x2t.forEach(t),hIe.forEach(t),aPe=i(c),yr=n(c,"DIV",{class:!0});var ti=s(yr);m(g0.$$.fragment,ti),B1r=i(ti),jc=n(ti,"P",{});var BJ=s(jc);P1r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Oz=n(BJ,"A",{href:!0});var k2t=s(Oz);$1r=r(k2t,"from_pretrained()"),k2t.forEach(t),I1r=r(BJ," class method or the "),Vz=n(BJ,"A",{href:!0});var S2t=s(Vz);q1r=r(S2t,"from_config()"),S2t.forEach(t),N1r=r(BJ,` class
method.`),BJ.forEach(t),j1r=i(ti),h0=n(ti,"P",{});var pIe=s(h0);D1r=r(pIe,"This class cannot be instantiated directly using "),V1e=n(pIe,"CODE",{});var R2t=s(V1e);G1r=r(R2t,"__init__()"),R2t.forEach(t),O1r=r(pIe," (throws an error)."),pIe.forEach(t),V1r=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(p0.$$.fragment,ai),X1r=i(ai),X1e=n(ai,"P",{});var B2t=s(X1e);z1r=r(B2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),B2t.forEach(t),Q1r=i(ai),Dc=n(ai,"P",{});var PJ=s(Dc);W1r=r(PJ,`Note:
Loading a model from its configuration file does `),z1e=n(PJ,"STRONG",{});var P2t=s(z1e);H1r=r(P2t,"not"),P2t.forEach(t),U1r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(PJ,"A",{href:!0});var $2t=s(Xz);J1r=r($2t,"from_pretrained()"),$2t.forEach(t),Y1r=r(PJ," to load the model weights."),PJ.forEach(t),K1r=i(ai),Q1e=n(ai,"P",{});var I2t=s(Q1e);Z1r=r(I2t,"Examples:"),I2t.forEach(t),ebr=i(ai),m(_0.$$.fragment,ai),ai.forEach(t),obr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(u0.$$.fragment,Ea),rbr=i(Ea),W1e=n(Ea,"P",{});var q2t=s(W1e);tbr=r(q2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q2t.forEach(t),abr=i(Ea),wn=n(Ea,"P",{});var m5=s(wn);nbr=r(m5,"The model class to instantiate is selected based on the "),H1e=n(m5,"CODE",{});var N2t=s(H1e);sbr=r(N2t,"model_type"),N2t.forEach(t),lbr=r(m5,` property of the config object (either
passed as an argument or loaded from `),U1e=n(m5,"CODE",{});var j2t=s(U1e);ibr=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),dbr=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(m5,"CODE",{});var D2t=s(J1e);cbr=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),fbr=r(m5,":"),m5.forEach(t),mbr=i(Ea),Y1e=n(Ea,"UL",{});var G2t=s(Y1e);S9=n(G2t,"LI",{});var eke=s(S9);K1e=n(eke,"STRONG",{});var O2t=s(K1e);gbr=r(O2t,"tapas"),O2t.forEach(t),hbr=r(eke," \u2014 "),zz=n(eke,"A",{href:!0});var V2t=s(zz);pbr=r(V2t,"TFTapasForQuestionAnswering"),V2t.forEach(t),_br=r(eke," (TAPAS model)"),eke.forEach(t),G2t.forEach(t),ubr=i(Ea),Z1e=n(Ea,"P",{});var X2t=s(Z1e);bbr=r(X2t,"Examples:"),X2t.forEach(t),vbr=i(Ea),m(b0.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),nPe=i(c),Gc=n(c,"H2",{class:!0});var _Ie=s(Gc);R9=n(_Ie,"A",{id:!0,class:!0,href:!0});var z2t=s(R9);ebe=n(z2t,"SPAN",{});var Q2t=s(ebe);m(v0.$$.fragment,Q2t),Q2t.forEach(t),z2t.forEach(t),Fbr=i(_Ie),obe=n(_Ie,"SPAN",{});var W2t=s(obe);Tbr=r(W2t,"TFAutoModelForTokenClassification"),W2t.forEach(t),_Ie.forEach(t),sPe=i(c),Lr=n(c,"DIV",{class:!0});var ni=s(Lr);m(F0.$$.fragment,ni),Mbr=i(ni),Oc=n(ni,"P",{});var $J=s(Oc);Ebr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Qz=n($J,"A",{href:!0});var H2t=s(Qz);Cbr=r(H2t,"from_pretrained()"),H2t.forEach(t),wbr=r($J," class method or the "),Wz=n($J,"A",{href:!0});var U2t=s(Wz);Abr=r(U2t,"from_config()"),U2t.forEach(t),ybr=r($J,` class
method.`),$J.forEach(t),Lbr=i(ni),T0=n(ni,"P",{});var uIe=s(T0);xbr=r(uIe,"This class cannot be instantiated directly using "),rbe=n(uIe,"CODE",{});var J2t=s(rbe);kbr=r(J2t,"__init__()"),J2t.forEach(t),Sbr=r(uIe," (throws an error)."),uIe.forEach(t),Rbr=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(M0.$$.fragment,si),Bbr=i(si),tbe=n(si,"P",{});var Y2t=s(tbe);Pbr=r(Y2t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y2t.forEach(t),$br=i(si),Vc=n(si,"P",{});var IJ=s(Vc);Ibr=r(IJ,`Note:
Loading a model from its configuration file does `),abe=n(IJ,"STRONG",{});var K2t=s(abe);qbr=r(K2t,"not"),K2t.forEach(t),Nbr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(IJ,"A",{href:!0});var Z2t=s(Hz);jbr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),Dbr=r(IJ," to load the model weights."),IJ.forEach(t),Gbr=i(si),nbe=n(si,"P",{});var evt=s(nbe);Obr=r(evt,"Examples:"),evt.forEach(t),Vbr=i(si),m(E0.$$.fragment,si),si.forEach(t),Xbr=i(ni),Eo=n(ni,"DIV",{class:!0});var Ca=s(Eo);m(C0.$$.fragment,Ca),zbr=i(Ca),sbe=n(Ca,"P",{});var ovt=s(sbe);Qbr=r(ovt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ovt.forEach(t),Wbr=i(Ca),An=n(Ca,"P",{});var g5=s(An);Hbr=r(g5,"The model class to instantiate is selected based on the "),lbe=n(g5,"CODE",{});var rvt=s(lbe);Ubr=r(rvt,"model_type"),rvt.forEach(t),Jbr=r(g5,` property of the config object (either
passed as an argument or loaded from `),ibe=n(g5,"CODE",{});var tvt=s(ibe);Ybr=r(tvt,"pretrained_model_name_or_path"),tvt.forEach(t),Kbr=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(g5,"CODE",{});var avt=s(dbe);Zbr=r(avt,"pretrained_model_name_or_path"),avt.forEach(t),e2r=r(g5,":"),g5.forEach(t),o2r=i(Ca),K=n(Ca,"UL",{});var te=s(K);B9=n(te,"LI",{});var oke=s(B9);cbe=n(oke,"STRONG",{});var nvt=s(cbe);r2r=r(nvt,"albert"),nvt.forEach(t),t2r=r(oke," \u2014 "),Uz=n(oke,"A",{href:!0});var svt=s(Uz);a2r=r(svt,"TFAlbertForTokenClassification"),svt.forEach(t),n2r=r(oke," (ALBERT model)"),oke.forEach(t),s2r=i(te),P9=n(te,"LI",{});var rke=s(P9);fbe=n(rke,"STRONG",{});var lvt=s(fbe);l2r=r(lvt,"bert"),lvt.forEach(t),i2r=r(rke," \u2014 "),Jz=n(rke,"A",{href:!0});var ivt=s(Jz);d2r=r(ivt,"TFBertForTokenClassification"),ivt.forEach(t),c2r=r(rke," (BERT model)"),rke.forEach(t),f2r=i(te),$9=n(te,"LI",{});var tke=s($9);mbe=n(tke,"STRONG",{});var dvt=s(mbe);m2r=r(dvt,"camembert"),dvt.forEach(t),g2r=r(tke," \u2014 "),Yz=n(tke,"A",{href:!0});var cvt=s(Yz);h2r=r(cvt,"TFCamembertForTokenClassification"),cvt.forEach(t),p2r=r(tke," (CamemBERT model)"),tke.forEach(t),_2r=i(te),I9=n(te,"LI",{});var ake=s(I9);gbe=n(ake,"STRONG",{});var fvt=s(gbe);u2r=r(fvt,"convbert"),fvt.forEach(t),b2r=r(ake," \u2014 "),Kz=n(ake,"A",{href:!0});var mvt=s(Kz);v2r=r(mvt,"TFConvBertForTokenClassification"),mvt.forEach(t),F2r=r(ake," (ConvBERT model)"),ake.forEach(t),T2r=i(te),q9=n(te,"LI",{});var nke=s(q9);hbe=n(nke,"STRONG",{});var gvt=s(hbe);M2r=r(gvt,"deberta"),gvt.forEach(t),E2r=r(nke," \u2014 "),Zz=n(nke,"A",{href:!0});var hvt=s(Zz);C2r=r(hvt,"TFDebertaForTokenClassification"),hvt.forEach(t),w2r=r(nke," (DeBERTa model)"),nke.forEach(t),A2r=i(te),N9=n(te,"LI",{});var ske=s(N9);pbe=n(ske,"STRONG",{});var pvt=s(pbe);y2r=r(pvt,"deberta-v2"),pvt.forEach(t),L2r=r(ske," \u2014 "),eQ=n(ske,"A",{href:!0});var _vt=s(eQ);x2r=r(_vt,"TFDebertaV2ForTokenClassification"),_vt.forEach(t),k2r=r(ske," (DeBERTa-v2 model)"),ske.forEach(t),S2r=i(te),j9=n(te,"LI",{});var lke=s(j9);_be=n(lke,"STRONG",{});var uvt=s(_be);R2r=r(uvt,"distilbert"),uvt.forEach(t),B2r=r(lke," \u2014 "),oQ=n(lke,"A",{href:!0});var bvt=s(oQ);P2r=r(bvt,"TFDistilBertForTokenClassification"),bvt.forEach(t),$2r=r(lke," (DistilBERT model)"),lke.forEach(t),I2r=i(te),D9=n(te,"LI",{});var ike=s(D9);ube=n(ike,"STRONG",{});var vvt=s(ube);q2r=r(vvt,"electra"),vvt.forEach(t),N2r=r(ike," \u2014 "),rQ=n(ike,"A",{href:!0});var Fvt=s(rQ);j2r=r(Fvt,"TFElectraForTokenClassification"),Fvt.forEach(t),D2r=r(ike," (ELECTRA model)"),ike.forEach(t),G2r=i(te),G9=n(te,"LI",{});var dke=s(G9);bbe=n(dke,"STRONG",{});var Tvt=s(bbe);O2r=r(Tvt,"flaubert"),Tvt.forEach(t),V2r=r(dke," \u2014 "),tQ=n(dke,"A",{href:!0});var Mvt=s(tQ);X2r=r(Mvt,"TFFlaubertForTokenClassification"),Mvt.forEach(t),z2r=r(dke," (FlauBERT model)"),dke.forEach(t),Q2r=i(te),O9=n(te,"LI",{});var cke=s(O9);vbe=n(cke,"STRONG",{});var Evt=s(vbe);W2r=r(Evt,"funnel"),Evt.forEach(t),H2r=r(cke," \u2014 "),aQ=n(cke,"A",{href:!0});var Cvt=s(aQ);U2r=r(Cvt,"TFFunnelForTokenClassification"),Cvt.forEach(t),J2r=r(cke," (Funnel Transformer model)"),cke.forEach(t),Y2r=i(te),V9=n(te,"LI",{});var fke=s(V9);Fbe=n(fke,"STRONG",{});var wvt=s(Fbe);K2r=r(wvt,"layoutlm"),wvt.forEach(t),Z2r=r(fke," \u2014 "),nQ=n(fke,"A",{href:!0});var Avt=s(nQ);evr=r(Avt,"TFLayoutLMForTokenClassification"),Avt.forEach(t),ovr=r(fke," (LayoutLM model)"),fke.forEach(t),rvr=i(te),X9=n(te,"LI",{});var mke=s(X9);Tbe=n(mke,"STRONG",{});var yvt=s(Tbe);tvr=r(yvt,"longformer"),yvt.forEach(t),avr=r(mke," \u2014 "),sQ=n(mke,"A",{href:!0});var Lvt=s(sQ);nvr=r(Lvt,"TFLongformerForTokenClassification"),Lvt.forEach(t),svr=r(mke," (Longformer model)"),mke.forEach(t),lvr=i(te),z9=n(te,"LI",{});var gke=s(z9);Mbe=n(gke,"STRONG",{});var xvt=s(Mbe);ivr=r(xvt,"mobilebert"),xvt.forEach(t),dvr=r(gke," \u2014 "),lQ=n(gke,"A",{href:!0});var kvt=s(lQ);cvr=r(kvt,"TFMobileBertForTokenClassification"),kvt.forEach(t),fvr=r(gke," (MobileBERT model)"),gke.forEach(t),mvr=i(te),Q9=n(te,"LI",{});var hke=s(Q9);Ebe=n(hke,"STRONG",{});var Svt=s(Ebe);gvr=r(Svt,"mpnet"),Svt.forEach(t),hvr=r(hke," \u2014 "),iQ=n(hke,"A",{href:!0});var Rvt=s(iQ);pvr=r(Rvt,"TFMPNetForTokenClassification"),Rvt.forEach(t),_vr=r(hke," (MPNet model)"),hke.forEach(t),uvr=i(te),W9=n(te,"LI",{});var pke=s(W9);Cbe=n(pke,"STRONG",{});var Bvt=s(Cbe);bvr=r(Bvt,"rembert"),Bvt.forEach(t),vvr=r(pke," \u2014 "),dQ=n(pke,"A",{href:!0});var Pvt=s(dQ);Fvr=r(Pvt,"TFRemBertForTokenClassification"),Pvt.forEach(t),Tvr=r(pke," (RemBERT model)"),pke.forEach(t),Mvr=i(te),H9=n(te,"LI",{});var _ke=s(H9);wbe=n(_ke,"STRONG",{});var $vt=s(wbe);Evr=r($vt,"roberta"),$vt.forEach(t),Cvr=r(_ke," \u2014 "),cQ=n(_ke,"A",{href:!0});var Ivt=s(cQ);wvr=r(Ivt,"TFRobertaForTokenClassification"),Ivt.forEach(t),Avr=r(_ke," (RoBERTa model)"),_ke.forEach(t),yvr=i(te),U9=n(te,"LI",{});var uke=s(U9);Abe=n(uke,"STRONG",{});var qvt=s(Abe);Lvr=r(qvt,"roformer"),qvt.forEach(t),xvr=r(uke," \u2014 "),fQ=n(uke,"A",{href:!0});var Nvt=s(fQ);kvr=r(Nvt,"TFRoFormerForTokenClassification"),Nvt.forEach(t),Svr=r(uke," (RoFormer model)"),uke.forEach(t),Rvr=i(te),J9=n(te,"LI",{});var bke=s(J9);ybe=n(bke,"STRONG",{});var jvt=s(ybe);Bvr=r(jvt,"xlm"),jvt.forEach(t),Pvr=r(bke," \u2014 "),mQ=n(bke,"A",{href:!0});var Dvt=s(mQ);$vr=r(Dvt,"TFXLMForTokenClassification"),Dvt.forEach(t),Ivr=r(bke," (XLM model)"),bke.forEach(t),qvr=i(te),Y9=n(te,"LI",{});var vke=s(Y9);Lbe=n(vke,"STRONG",{});var Gvt=s(Lbe);Nvr=r(Gvt,"xlm-roberta"),Gvt.forEach(t),jvr=r(vke," \u2014 "),gQ=n(vke,"A",{href:!0});var Ovt=s(gQ);Dvr=r(Ovt,"TFXLMRobertaForTokenClassification"),Ovt.forEach(t),Gvr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),Ovr=i(te),K9=n(te,"LI",{});var Fke=s(K9);xbe=n(Fke,"STRONG",{});var Vvt=s(xbe);Vvr=r(Vvt,"xlnet"),Vvt.forEach(t),Xvr=r(Fke," \u2014 "),hQ=n(Fke,"A",{href:!0});var Xvt=s(hQ);zvr=r(Xvt,"TFXLNetForTokenClassification"),Xvt.forEach(t),Qvr=r(Fke," (XLNet model)"),Fke.forEach(t),te.forEach(t),Wvr=i(Ca),kbe=n(Ca,"P",{});var zvt=s(kbe);Hvr=r(zvt,"Examples:"),zvt.forEach(t),Uvr=i(Ca),m(w0.$$.fragment,Ca),Ca.forEach(t),ni.forEach(t),lPe=i(c),Xc=n(c,"H2",{class:!0});var bIe=s(Xc);Z9=n(bIe,"A",{id:!0,class:!0,href:!0});var Qvt=s(Z9);Sbe=n(Qvt,"SPAN",{});var Wvt=s(Sbe);m(A0.$$.fragment,Wvt),Wvt.forEach(t),Qvt.forEach(t),Jvr=i(bIe),Rbe=n(bIe,"SPAN",{});var Hvt=s(Rbe);Yvr=r(Hvt,"TFAutoModelForQuestionAnswering"),Hvt.forEach(t),bIe.forEach(t),iPe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(y0.$$.fragment,li),Kvr=i(li),zc=n(li,"P",{});var qJ=s(zc);Zvr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),pQ=n(qJ,"A",{href:!0});var Uvt=s(pQ);eFr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),oFr=r(qJ," class method or the "),_Q=n(qJ,"A",{href:!0});var Jvt=s(_Q);rFr=r(Jvt,"from_config()"),Jvt.forEach(t),tFr=r(qJ,` class
method.`),qJ.forEach(t),aFr=i(li),L0=n(li,"P",{});var vIe=s(L0);nFr=r(vIe,"This class cannot be instantiated directly using "),Bbe=n(vIe,"CODE",{});var Yvt=s(Bbe);sFr=r(Yvt,"__init__()"),Yvt.forEach(t),lFr=r(vIe," (throws an error)."),vIe.forEach(t),iFr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(x0.$$.fragment,ii),dFr=i(ii),Pbe=n(ii,"P",{});var Kvt=s(Pbe);cFr=r(Kvt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kvt.forEach(t),fFr=i(ii),Qc=n(ii,"P",{});var NJ=s(Qc);mFr=r(NJ,`Note:
Loading a model from its configuration file does `),$be=n(NJ,"STRONG",{});var Zvt=s($be);gFr=r(Zvt,"not"),Zvt.forEach(t),hFr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(NJ,"A",{href:!0});var eFt=s(uQ);pFr=r(eFt,"from_pretrained()"),eFt.forEach(t),_Fr=r(NJ," to load the model weights."),NJ.forEach(t),uFr=i(ii),Ibe=n(ii,"P",{});var oFt=s(Ibe);bFr=r(oFt,"Examples:"),oFt.forEach(t),vFr=i(ii),m(k0.$$.fragment,ii),ii.forEach(t),FFr=i(li),Co=n(li,"DIV",{class:!0});var wa=s(Co);m(S0.$$.fragment,wa),TFr=i(wa),qbe=n(wa,"P",{});var rFt=s(qbe);MFr=r(rFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rFt.forEach(t),EFr=i(wa),yn=n(wa,"P",{});var h5=s(yn);CFr=r(h5,"The model class to instantiate is selected based on the "),Nbe=n(h5,"CODE",{});var tFt=s(Nbe);wFr=r(tFt,"model_type"),tFt.forEach(t),AFr=r(h5,` property of the config object (either
passed as an argument or loaded from `),jbe=n(h5,"CODE",{});var aFt=s(jbe);yFr=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),LFr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dbe=n(h5,"CODE",{});var nFt=s(Dbe);xFr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),kFr=r(h5,":"),h5.forEach(t),SFr=i(wa),Z=n(wa,"UL",{});var ae=s(Z);eM=n(ae,"LI",{});var Tke=s(eM);Gbe=n(Tke,"STRONG",{});var sFt=s(Gbe);RFr=r(sFt,"albert"),sFt.forEach(t),BFr=r(Tke," \u2014 "),bQ=n(Tke,"A",{href:!0});var lFt=s(bQ);PFr=r(lFt,"TFAlbertForQuestionAnswering"),lFt.forEach(t),$Fr=r(Tke," (ALBERT model)"),Tke.forEach(t),IFr=i(ae),oM=n(ae,"LI",{});var Mke=s(oM);Obe=n(Mke,"STRONG",{});var iFt=s(Obe);qFr=r(iFt,"bert"),iFt.forEach(t),NFr=r(Mke," \u2014 "),vQ=n(Mke,"A",{href:!0});var dFt=s(vQ);jFr=r(dFt,"TFBertForQuestionAnswering"),dFt.forEach(t),DFr=r(Mke," (BERT model)"),Mke.forEach(t),GFr=i(ae),rM=n(ae,"LI",{});var Eke=s(rM);Vbe=n(Eke,"STRONG",{});var cFt=s(Vbe);OFr=r(cFt,"camembert"),cFt.forEach(t),VFr=r(Eke," \u2014 "),FQ=n(Eke,"A",{href:!0});var fFt=s(FQ);XFr=r(fFt,"TFCamembertForQuestionAnswering"),fFt.forEach(t),zFr=r(Eke," (CamemBERT model)"),Eke.forEach(t),QFr=i(ae),tM=n(ae,"LI",{});var Cke=s(tM);Xbe=n(Cke,"STRONG",{});var mFt=s(Xbe);WFr=r(mFt,"convbert"),mFt.forEach(t),HFr=r(Cke," \u2014 "),TQ=n(Cke,"A",{href:!0});var gFt=s(TQ);UFr=r(gFt,"TFConvBertForQuestionAnswering"),gFt.forEach(t),JFr=r(Cke," (ConvBERT model)"),Cke.forEach(t),YFr=i(ae),aM=n(ae,"LI",{});var wke=s(aM);zbe=n(wke,"STRONG",{});var hFt=s(zbe);KFr=r(hFt,"deberta"),hFt.forEach(t),ZFr=r(wke," \u2014 "),MQ=n(wke,"A",{href:!0});var pFt=s(MQ);eTr=r(pFt,"TFDebertaForQuestionAnswering"),pFt.forEach(t),oTr=r(wke," (DeBERTa model)"),wke.forEach(t),rTr=i(ae),nM=n(ae,"LI",{});var Ake=s(nM);Qbe=n(Ake,"STRONG",{});var _Ft=s(Qbe);tTr=r(_Ft,"deberta-v2"),_Ft.forEach(t),aTr=r(Ake," \u2014 "),EQ=n(Ake,"A",{href:!0});var uFt=s(EQ);nTr=r(uFt,"TFDebertaV2ForQuestionAnswering"),uFt.forEach(t),sTr=r(Ake," (DeBERTa-v2 model)"),Ake.forEach(t),lTr=i(ae),sM=n(ae,"LI",{});var yke=s(sM);Wbe=n(yke,"STRONG",{});var bFt=s(Wbe);iTr=r(bFt,"distilbert"),bFt.forEach(t),dTr=r(yke," \u2014 "),CQ=n(yke,"A",{href:!0});var vFt=s(CQ);cTr=r(vFt,"TFDistilBertForQuestionAnswering"),vFt.forEach(t),fTr=r(yke," (DistilBERT model)"),yke.forEach(t),mTr=i(ae),lM=n(ae,"LI",{});var Lke=s(lM);Hbe=n(Lke,"STRONG",{});var FFt=s(Hbe);gTr=r(FFt,"electra"),FFt.forEach(t),hTr=r(Lke," \u2014 "),wQ=n(Lke,"A",{href:!0});var TFt=s(wQ);pTr=r(TFt,"TFElectraForQuestionAnswering"),TFt.forEach(t),_Tr=r(Lke," (ELECTRA model)"),Lke.forEach(t),uTr=i(ae),iM=n(ae,"LI",{});var xke=s(iM);Ube=n(xke,"STRONG",{});var MFt=s(Ube);bTr=r(MFt,"flaubert"),MFt.forEach(t),vTr=r(xke," \u2014 "),AQ=n(xke,"A",{href:!0});var EFt=s(AQ);FTr=r(EFt,"TFFlaubertForQuestionAnsweringSimple"),EFt.forEach(t),TTr=r(xke," (FlauBERT model)"),xke.forEach(t),MTr=i(ae),dM=n(ae,"LI",{});var kke=s(dM);Jbe=n(kke,"STRONG",{});var CFt=s(Jbe);ETr=r(CFt,"funnel"),CFt.forEach(t),CTr=r(kke," \u2014 "),yQ=n(kke,"A",{href:!0});var wFt=s(yQ);wTr=r(wFt,"TFFunnelForQuestionAnswering"),wFt.forEach(t),ATr=r(kke," (Funnel Transformer model)"),kke.forEach(t),yTr=i(ae),cM=n(ae,"LI",{});var Ske=s(cM);Ybe=n(Ske,"STRONG",{});var AFt=s(Ybe);LTr=r(AFt,"gptj"),AFt.forEach(t),xTr=r(Ske," \u2014 "),LQ=n(Ske,"A",{href:!0});var yFt=s(LQ);kTr=r(yFt,"TFGPTJForQuestionAnswering"),yFt.forEach(t),STr=r(Ske," (GPT-J model)"),Ske.forEach(t),RTr=i(ae),fM=n(ae,"LI",{});var Rke=s(fM);Kbe=n(Rke,"STRONG",{});var LFt=s(Kbe);BTr=r(LFt,"longformer"),LFt.forEach(t),PTr=r(Rke," \u2014 "),xQ=n(Rke,"A",{href:!0});var xFt=s(xQ);$Tr=r(xFt,"TFLongformerForQuestionAnswering"),xFt.forEach(t),ITr=r(Rke," (Longformer model)"),Rke.forEach(t),qTr=i(ae),mM=n(ae,"LI",{});var Bke=s(mM);Zbe=n(Bke,"STRONG",{});var kFt=s(Zbe);NTr=r(kFt,"mobilebert"),kFt.forEach(t),jTr=r(Bke," \u2014 "),kQ=n(Bke,"A",{href:!0});var SFt=s(kQ);DTr=r(SFt,"TFMobileBertForQuestionAnswering"),SFt.forEach(t),GTr=r(Bke," (MobileBERT model)"),Bke.forEach(t),OTr=i(ae),gM=n(ae,"LI",{});var Pke=s(gM);e2e=n(Pke,"STRONG",{});var RFt=s(e2e);VTr=r(RFt,"mpnet"),RFt.forEach(t),XTr=r(Pke," \u2014 "),SQ=n(Pke,"A",{href:!0});var BFt=s(SQ);zTr=r(BFt,"TFMPNetForQuestionAnswering"),BFt.forEach(t),QTr=r(Pke," (MPNet model)"),Pke.forEach(t),WTr=i(ae),hM=n(ae,"LI",{});var $ke=s(hM);o2e=n($ke,"STRONG",{});var PFt=s(o2e);HTr=r(PFt,"rembert"),PFt.forEach(t),UTr=r($ke," \u2014 "),RQ=n($ke,"A",{href:!0});var $Ft=s(RQ);JTr=r($Ft,"TFRemBertForQuestionAnswering"),$Ft.forEach(t),YTr=r($ke," (RemBERT model)"),$ke.forEach(t),KTr=i(ae),pM=n(ae,"LI",{});var Ike=s(pM);r2e=n(Ike,"STRONG",{});var IFt=s(r2e);ZTr=r(IFt,"roberta"),IFt.forEach(t),e8r=r(Ike," \u2014 "),BQ=n(Ike,"A",{href:!0});var qFt=s(BQ);o8r=r(qFt,"TFRobertaForQuestionAnswering"),qFt.forEach(t),r8r=r(Ike," (RoBERTa model)"),Ike.forEach(t),t8r=i(ae),_M=n(ae,"LI",{});var qke=s(_M);t2e=n(qke,"STRONG",{});var NFt=s(t2e);a8r=r(NFt,"roformer"),NFt.forEach(t),n8r=r(qke," \u2014 "),PQ=n(qke,"A",{href:!0});var jFt=s(PQ);s8r=r(jFt,"TFRoFormerForQuestionAnswering"),jFt.forEach(t),l8r=r(qke," (RoFormer model)"),qke.forEach(t),i8r=i(ae),uM=n(ae,"LI",{});var Nke=s(uM);a2e=n(Nke,"STRONG",{});var DFt=s(a2e);d8r=r(DFt,"xlm"),DFt.forEach(t),c8r=r(Nke," \u2014 "),$Q=n(Nke,"A",{href:!0});var GFt=s($Q);f8r=r(GFt,"TFXLMForQuestionAnsweringSimple"),GFt.forEach(t),m8r=r(Nke," (XLM model)"),Nke.forEach(t),g8r=i(ae),bM=n(ae,"LI",{});var jke=s(bM);n2e=n(jke,"STRONG",{});var OFt=s(n2e);h8r=r(OFt,"xlm-roberta"),OFt.forEach(t),p8r=r(jke," \u2014 "),IQ=n(jke,"A",{href:!0});var VFt=s(IQ);_8r=r(VFt,"TFXLMRobertaForQuestionAnswering"),VFt.forEach(t),u8r=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),b8r=i(ae),vM=n(ae,"LI",{});var Dke=s(vM);s2e=n(Dke,"STRONG",{});var XFt=s(s2e);v8r=r(XFt,"xlnet"),XFt.forEach(t),F8r=r(Dke," \u2014 "),qQ=n(Dke,"A",{href:!0});var zFt=s(qQ);T8r=r(zFt,"TFXLNetForQuestionAnsweringSimple"),zFt.forEach(t),M8r=r(Dke," (XLNet model)"),Dke.forEach(t),ae.forEach(t),E8r=i(wa),l2e=n(wa,"P",{});var QFt=s(l2e);C8r=r(QFt,"Examples:"),QFt.forEach(t),w8r=i(wa),m(R0.$$.fragment,wa),wa.forEach(t),li.forEach(t),dPe=i(c),Wc=n(c,"H2",{class:!0});var FIe=s(Wc);FM=n(FIe,"A",{id:!0,class:!0,href:!0});var WFt=s(FM);i2e=n(WFt,"SPAN",{});var HFt=s(i2e);m(B0.$$.fragment,HFt),HFt.forEach(t),WFt.forEach(t),A8r=i(FIe),d2e=n(FIe,"SPAN",{});var UFt=s(d2e);y8r=r(UFt,"TFAutoModelForVision2Seq"),UFt.forEach(t),FIe.forEach(t),cPe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(P0.$$.fragment,di),L8r=i(di),Hc=n(di,"P",{});var jJ=s(Hc);x8r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NQ=n(jJ,"A",{href:!0});var JFt=s(NQ);k8r=r(JFt,"from_pretrained()"),JFt.forEach(t),S8r=r(jJ," class method or the "),jQ=n(jJ,"A",{href:!0});var YFt=s(jQ);R8r=r(YFt,"from_config()"),YFt.forEach(t),B8r=r(jJ,` class
method.`),jJ.forEach(t),P8r=i(di),$0=n(di,"P",{});var TIe=s($0);$8r=r(TIe,"This class cannot be instantiated directly using "),c2e=n(TIe,"CODE",{});var KFt=s(c2e);I8r=r(KFt,"__init__()"),KFt.forEach(t),q8r=r(TIe," (throws an error)."),TIe.forEach(t),N8r=i(di),Ct=n(di,"DIV",{class:!0});var ci=s(Ct);m(I0.$$.fragment,ci),j8r=i(ci),f2e=n(ci,"P",{});var ZFt=s(f2e);D8r=r(ZFt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZFt.forEach(t),G8r=i(ci),Uc=n(ci,"P",{});var DJ=s(Uc);O8r=r(DJ,`Note:
Loading a model from its configuration file does `),m2e=n(DJ,"STRONG",{});var eTt=s(m2e);V8r=r(eTt,"not"),eTt.forEach(t),X8r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(DJ,"A",{href:!0});var oTt=s(DQ);z8r=r(oTt,"from_pretrained()"),oTt.forEach(t),Q8r=r(DJ," to load the model weights."),DJ.forEach(t),W8r=i(ci),g2e=n(ci,"P",{});var rTt=s(g2e);H8r=r(rTt,"Examples:"),rTt.forEach(t),U8r=i(ci),m(q0.$$.fragment,ci),ci.forEach(t),J8r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(N0.$$.fragment,Aa),Y8r=i(Aa),h2e=n(Aa,"P",{});var tTt=s(h2e);K8r=r(tTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tTt.forEach(t),Z8r=i(Aa),Ln=n(Aa,"P",{});var p5=s(Ln);e9r=r(p5,"The model class to instantiate is selected based on the "),p2e=n(p5,"CODE",{});var aTt=s(p2e);o9r=r(aTt,"model_type"),aTt.forEach(t),r9r=r(p5,` property of the config object (either
passed as an argument or loaded from `),_2e=n(p5,"CODE",{});var nTt=s(_2e);t9r=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),a9r=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u2e=n(p5,"CODE",{});var sTt=s(u2e);n9r=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),s9r=r(p5,":"),p5.forEach(t),l9r=i(Aa),b2e=n(Aa,"UL",{});var lTt=s(b2e);TM=n(lTt,"LI",{});var Gke=s(TM);v2e=n(Gke,"STRONG",{});var iTt=s(v2e);i9r=r(iTt,"vision-encoder-decoder"),iTt.forEach(t),d9r=r(Gke," \u2014 "),GQ=n(Gke,"A",{href:!0});var dTt=s(GQ);c9r=r(dTt,"TFVisionEncoderDecoderModel"),dTt.forEach(t),f9r=r(Gke," (Vision Encoder decoder model)"),Gke.forEach(t),lTt.forEach(t),m9r=i(Aa),F2e=n(Aa,"P",{});var cTt=s(F2e);g9r=r(cTt,"Examples:"),cTt.forEach(t),h9r=i(Aa),m(j0.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),fPe=i(c),Jc=n(c,"H2",{class:!0});var MIe=s(Jc);MM=n(MIe,"A",{id:!0,class:!0,href:!0});var fTt=s(MM);T2e=n(fTt,"SPAN",{});var mTt=s(T2e);m(D0.$$.fragment,mTt),mTt.forEach(t),fTt.forEach(t),p9r=i(MIe),M2e=n(MIe,"SPAN",{});var gTt=s(M2e);_9r=r(gTt,"TFAutoModelForSpeechSeq2Seq"),gTt.forEach(t),MIe.forEach(t),mPe=i(c),Sr=n(c,"DIV",{class:!0});var fi=s(Sr);m(G0.$$.fragment,fi),u9r=i(fi),Yc=n(fi,"P",{});var GJ=s(Yc);b9r=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),OQ=n(GJ,"A",{href:!0});var hTt=s(OQ);v9r=r(hTt,"from_pretrained()"),hTt.forEach(t),F9r=r(GJ," class method or the "),VQ=n(GJ,"A",{href:!0});var pTt=s(VQ);T9r=r(pTt,"from_config()"),pTt.forEach(t),M9r=r(GJ,` class
method.`),GJ.forEach(t),E9r=i(fi),O0=n(fi,"P",{});var EIe=s(O0);C9r=r(EIe,"This class cannot be instantiated directly using "),E2e=n(EIe,"CODE",{});var _Tt=s(E2e);w9r=r(_Tt,"__init__()"),_Tt.forEach(t),A9r=r(EIe," (throws an error)."),EIe.forEach(t),y9r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(V0.$$.fragment,mi),L9r=i(mi),C2e=n(mi,"P",{});var uTt=s(C2e);x9r=r(uTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uTt.forEach(t),k9r=i(mi),Kc=n(mi,"P",{});var OJ=s(Kc);S9r=r(OJ,`Note:
Loading a model from its configuration file does `),w2e=n(OJ,"STRONG",{});var bTt=s(w2e);R9r=r(bTt,"not"),bTt.forEach(t),B9r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(OJ,"A",{href:!0});var vTt=s(XQ);P9r=r(vTt,"from_pretrained()"),vTt.forEach(t),$9r=r(OJ," to load the model weights."),OJ.forEach(t),I9r=i(mi),A2e=n(mi,"P",{});var FTt=s(A2e);q9r=r(FTt,"Examples:"),FTt.forEach(t),N9r=i(mi),m(X0.$$.fragment,mi),mi.forEach(t),j9r=i(fi),Ao=n(fi,"DIV",{class:!0});var ya=s(Ao);m(z0.$$.fragment,ya),D9r=i(ya),y2e=n(ya,"P",{});var TTt=s(y2e);G9r=r(TTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TTt.forEach(t),O9r=i(ya),xn=n(ya,"P",{});var _5=s(xn);V9r=r(_5,"The model class to instantiate is selected based on the "),L2e=n(_5,"CODE",{});var MTt=s(L2e);X9r=r(MTt,"model_type"),MTt.forEach(t),z9r=r(_5,` property of the config object (either
passed as an argument or loaded from `),x2e=n(_5,"CODE",{});var ETt=s(x2e);Q9r=r(ETt,"pretrained_model_name_or_path"),ETt.forEach(t),W9r=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k2e=n(_5,"CODE",{});var CTt=s(k2e);H9r=r(CTt,"pretrained_model_name_or_path"),CTt.forEach(t),U9r=r(_5,":"),_5.forEach(t),J9r=i(ya),S2e=n(ya,"UL",{});var wTt=s(S2e);EM=n(wTt,"LI",{});var Oke=s(EM);R2e=n(Oke,"STRONG",{});var ATt=s(R2e);Y9r=r(ATt,"speech_to_text"),ATt.forEach(t),K9r=r(Oke," \u2014 "),zQ=n(Oke,"A",{href:!0});var yTt=s(zQ);Z9r=r(yTt,"TFSpeech2TextForConditionalGeneration"),yTt.forEach(t),eMr=r(Oke," (Speech2Text model)"),Oke.forEach(t),wTt.forEach(t),oMr=i(ya),B2e=n(ya,"P",{});var LTt=s(B2e);rMr=r(LTt,"Examples:"),LTt.forEach(t),tMr=i(ya),m(Q0.$$.fragment,ya),ya.forEach(t),fi.forEach(t),gPe=i(c),Zc=n(c,"H2",{class:!0});var CIe=s(Zc);CM=n(CIe,"A",{id:!0,class:!0,href:!0});var xTt=s(CM);P2e=n(xTt,"SPAN",{});var kTt=s(P2e);m(W0.$$.fragment,kTt),kTt.forEach(t),xTt.forEach(t),aMr=i(CIe),$2e=n(CIe,"SPAN",{});var STt=s($2e);nMr=r(STt,"FlaxAutoModel"),STt.forEach(t),CIe.forEach(t),hPe=i(c),Rr=n(c,"DIV",{class:!0});var gi=s(Rr);m(H0.$$.fragment,gi),sMr=i(gi),ef=n(gi,"P",{});var VJ=s(ef);lMr=r(VJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),QQ=n(VJ,"A",{href:!0});var RTt=s(QQ);iMr=r(RTt,"from_pretrained()"),RTt.forEach(t),dMr=r(VJ," class method or the "),WQ=n(VJ,"A",{href:!0});var BTt=s(WQ);cMr=r(BTt,"from_config()"),BTt.forEach(t),fMr=r(VJ,` class
method.`),VJ.forEach(t),mMr=i(gi),U0=n(gi,"P",{});var wIe=s(U0);gMr=r(wIe,"This class cannot be instantiated directly using "),I2e=n(wIe,"CODE",{});var PTt=s(I2e);hMr=r(PTt,"__init__()"),PTt.forEach(t),pMr=r(wIe," (throws an error)."),wIe.forEach(t),_Mr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(J0.$$.fragment,hi),uMr=i(hi),q2e=n(hi,"P",{});var $Tt=s(q2e);bMr=r($Tt,"Instantiates one of the base model classes of the library from a configuration."),$Tt.forEach(t),vMr=i(hi),of=n(hi,"P",{});var XJ=s(of);FMr=r(XJ,`Note:
Loading a model from its configuration file does `),N2e=n(XJ,"STRONG",{});var ITt=s(N2e);TMr=r(ITt,"not"),ITt.forEach(t),MMr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(XJ,"A",{href:!0});var qTt=s(HQ);EMr=r(qTt,"from_pretrained()"),qTt.forEach(t),CMr=r(XJ," to load the model weights."),XJ.forEach(t),wMr=i(hi),j2e=n(hi,"P",{});var NTt=s(j2e);AMr=r(NTt,"Examples:"),NTt.forEach(t),yMr=i(hi),m(Y0.$$.fragment,hi),hi.forEach(t),LMr=i(gi),yo=n(gi,"DIV",{class:!0});var La=s(yo);m(K0.$$.fragment,La),xMr=i(La),D2e=n(La,"P",{});var jTt=s(D2e);kMr=r(jTt,"Instantiate one of the base model classes of the library from a pretrained model."),jTt.forEach(t),SMr=i(La),kn=n(La,"P",{});var u5=s(kn);RMr=r(u5,"The model class to instantiate is selected based on the "),G2e=n(u5,"CODE",{});var DTt=s(G2e);BMr=r(DTt,"model_type"),DTt.forEach(t),PMr=r(u5,` property of the config object (either
passed as an argument or loaded from `),O2e=n(u5,"CODE",{});var GTt=s(O2e);$Mr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),IMr=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(u5,"CODE",{});var OTt=s(V2e);qMr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),NMr=r(u5,":"),u5.forEach(t),jMr=i(La),z=n(La,"UL",{});var W=s(z);wM=n(W,"LI",{});var Vke=s(wM);X2e=n(Vke,"STRONG",{});var VTt=s(X2e);DMr=r(VTt,"albert"),VTt.forEach(t),GMr=r(Vke," \u2014 "),UQ=n(Vke,"A",{href:!0});var XTt=s(UQ);OMr=r(XTt,"FlaxAlbertModel"),XTt.forEach(t),VMr=r(Vke," (ALBERT model)"),Vke.forEach(t),XMr=i(W),AM=n(W,"LI",{});var Xke=s(AM);z2e=n(Xke,"STRONG",{});var zTt=s(z2e);zMr=r(zTt,"bart"),zTt.forEach(t),QMr=r(Xke," \u2014 "),JQ=n(Xke,"A",{href:!0});var QTt=s(JQ);WMr=r(QTt,"FlaxBartModel"),QTt.forEach(t),HMr=r(Xke," (BART model)"),Xke.forEach(t),UMr=i(W),yM=n(W,"LI",{});var zke=s(yM);Q2e=n(zke,"STRONG",{});var WTt=s(Q2e);JMr=r(WTt,"beit"),WTt.forEach(t),YMr=r(zke," \u2014 "),YQ=n(zke,"A",{href:!0});var HTt=s(YQ);KMr=r(HTt,"FlaxBeitModel"),HTt.forEach(t),ZMr=r(zke," (BEiT model)"),zke.forEach(t),e4r=i(W),LM=n(W,"LI",{});var Qke=s(LM);W2e=n(Qke,"STRONG",{});var UTt=s(W2e);o4r=r(UTt,"bert"),UTt.forEach(t),r4r=r(Qke," \u2014 "),KQ=n(Qke,"A",{href:!0});var JTt=s(KQ);t4r=r(JTt,"FlaxBertModel"),JTt.forEach(t),a4r=r(Qke," (BERT model)"),Qke.forEach(t),n4r=i(W),xM=n(W,"LI",{});var Wke=s(xM);H2e=n(Wke,"STRONG",{});var YTt=s(H2e);s4r=r(YTt,"big_bird"),YTt.forEach(t),l4r=r(Wke," \u2014 "),ZQ=n(Wke,"A",{href:!0});var KTt=s(ZQ);i4r=r(KTt,"FlaxBigBirdModel"),KTt.forEach(t),d4r=r(Wke," (BigBird model)"),Wke.forEach(t),c4r=i(W),kM=n(W,"LI",{});var Hke=s(kM);U2e=n(Hke,"STRONG",{});var ZTt=s(U2e);f4r=r(ZTt,"blenderbot"),ZTt.forEach(t),m4r=r(Hke," \u2014 "),eW=n(Hke,"A",{href:!0});var e8t=s(eW);g4r=r(e8t,"FlaxBlenderbotModel"),e8t.forEach(t),h4r=r(Hke," (Blenderbot model)"),Hke.forEach(t),p4r=i(W),SM=n(W,"LI",{});var Uke=s(SM);J2e=n(Uke,"STRONG",{});var o8t=s(J2e);_4r=r(o8t,"blenderbot-small"),o8t.forEach(t),u4r=r(Uke," \u2014 "),oW=n(Uke,"A",{href:!0});var r8t=s(oW);b4r=r(r8t,"FlaxBlenderbotSmallModel"),r8t.forEach(t),v4r=r(Uke," (BlenderbotSmall model)"),Uke.forEach(t),F4r=i(W),RM=n(W,"LI",{});var Jke=s(RM);Y2e=n(Jke,"STRONG",{});var t8t=s(Y2e);T4r=r(t8t,"clip"),t8t.forEach(t),M4r=r(Jke," \u2014 "),rW=n(Jke,"A",{href:!0});var a8t=s(rW);E4r=r(a8t,"FlaxCLIPModel"),a8t.forEach(t),C4r=r(Jke," (CLIP model)"),Jke.forEach(t),w4r=i(W),BM=n(W,"LI",{});var Yke=s(BM);K2e=n(Yke,"STRONG",{});var n8t=s(K2e);A4r=r(n8t,"distilbert"),n8t.forEach(t),y4r=r(Yke," \u2014 "),tW=n(Yke,"A",{href:!0});var s8t=s(tW);L4r=r(s8t,"FlaxDistilBertModel"),s8t.forEach(t),x4r=r(Yke," (DistilBERT model)"),Yke.forEach(t),k4r=i(W),PM=n(W,"LI",{});var Kke=s(PM);Z2e=n(Kke,"STRONG",{});var l8t=s(Z2e);S4r=r(l8t,"electra"),l8t.forEach(t),R4r=r(Kke," \u2014 "),aW=n(Kke,"A",{href:!0});var i8t=s(aW);B4r=r(i8t,"FlaxElectraModel"),i8t.forEach(t),P4r=r(Kke," (ELECTRA model)"),Kke.forEach(t),$4r=i(W),$M=n(W,"LI",{});var Zke=s($M);eve=n(Zke,"STRONG",{});var d8t=s(eve);I4r=r(d8t,"gpt2"),d8t.forEach(t),q4r=r(Zke," \u2014 "),nW=n(Zke,"A",{href:!0});var c8t=s(nW);N4r=r(c8t,"FlaxGPT2Model"),c8t.forEach(t),j4r=r(Zke," (OpenAI GPT-2 model)"),Zke.forEach(t),D4r=i(W),IM=n(W,"LI",{});var eSe=s(IM);ove=n(eSe,"STRONG",{});var f8t=s(ove);G4r=r(f8t,"gpt_neo"),f8t.forEach(t),O4r=r(eSe," \u2014 "),sW=n(eSe,"A",{href:!0});var m8t=s(sW);V4r=r(m8t,"FlaxGPTNeoModel"),m8t.forEach(t),X4r=r(eSe," (GPT Neo model)"),eSe.forEach(t),z4r=i(W),qM=n(W,"LI",{});var oSe=s(qM);rve=n(oSe,"STRONG",{});var g8t=s(rve);Q4r=r(g8t,"gptj"),g8t.forEach(t),W4r=r(oSe," \u2014 "),lW=n(oSe,"A",{href:!0});var h8t=s(lW);H4r=r(h8t,"FlaxGPTJModel"),h8t.forEach(t),U4r=r(oSe," (GPT-J model)"),oSe.forEach(t),J4r=i(W),NM=n(W,"LI",{});var rSe=s(NM);tve=n(rSe,"STRONG",{});var p8t=s(tve);Y4r=r(p8t,"marian"),p8t.forEach(t),K4r=r(rSe," \u2014 "),iW=n(rSe,"A",{href:!0});var _8t=s(iW);Z4r=r(_8t,"FlaxMarianModel"),_8t.forEach(t),eEr=r(rSe," (Marian model)"),rSe.forEach(t),oEr=i(W),jM=n(W,"LI",{});var tSe=s(jM);ave=n(tSe,"STRONG",{});var u8t=s(ave);rEr=r(u8t,"mbart"),u8t.forEach(t),tEr=r(tSe," \u2014 "),dW=n(tSe,"A",{href:!0});var b8t=s(dW);aEr=r(b8t,"FlaxMBartModel"),b8t.forEach(t),nEr=r(tSe," (mBART model)"),tSe.forEach(t),sEr=i(W),DM=n(W,"LI",{});var aSe=s(DM);nve=n(aSe,"STRONG",{});var v8t=s(nve);lEr=r(v8t,"mt5"),v8t.forEach(t),iEr=r(aSe," \u2014 "),cW=n(aSe,"A",{href:!0});var F8t=s(cW);dEr=r(F8t,"FlaxMT5Model"),F8t.forEach(t),cEr=r(aSe," (mT5 model)"),aSe.forEach(t),fEr=i(W),GM=n(W,"LI",{});var nSe=s(GM);sve=n(nSe,"STRONG",{});var T8t=s(sve);mEr=r(T8t,"pegasus"),T8t.forEach(t),gEr=r(nSe," \u2014 "),fW=n(nSe,"A",{href:!0});var M8t=s(fW);hEr=r(M8t,"FlaxPegasusModel"),M8t.forEach(t),pEr=r(nSe," (Pegasus model)"),nSe.forEach(t),_Er=i(W),OM=n(W,"LI",{});var sSe=s(OM);lve=n(sSe,"STRONG",{});var E8t=s(lve);uEr=r(E8t,"roberta"),E8t.forEach(t),bEr=r(sSe," \u2014 "),mW=n(sSe,"A",{href:!0});var C8t=s(mW);vEr=r(C8t,"FlaxRobertaModel"),C8t.forEach(t),FEr=r(sSe," (RoBERTa model)"),sSe.forEach(t),TEr=i(W),VM=n(W,"LI",{});var lSe=s(VM);ive=n(lSe,"STRONG",{});var w8t=s(ive);MEr=r(w8t,"roformer"),w8t.forEach(t),EEr=r(lSe," \u2014 "),gW=n(lSe,"A",{href:!0});var A8t=s(gW);CEr=r(A8t,"FlaxRoFormerModel"),A8t.forEach(t),wEr=r(lSe," (RoFormer model)"),lSe.forEach(t),AEr=i(W),XM=n(W,"LI",{});var iSe=s(XM);dve=n(iSe,"STRONG",{});var y8t=s(dve);yEr=r(y8t,"t5"),y8t.forEach(t),LEr=r(iSe," \u2014 "),hW=n(iSe,"A",{href:!0});var L8t=s(hW);xEr=r(L8t,"FlaxT5Model"),L8t.forEach(t),kEr=r(iSe," (T5 model)"),iSe.forEach(t),SEr=i(W),zM=n(W,"LI",{});var dSe=s(zM);cve=n(dSe,"STRONG",{});var x8t=s(cve);REr=r(x8t,"vision-text-dual-encoder"),x8t.forEach(t),BEr=r(dSe," \u2014 "),pW=n(dSe,"A",{href:!0});var k8t=s(pW);PEr=r(k8t,"FlaxVisionTextDualEncoderModel"),k8t.forEach(t),$Er=r(dSe," (VisionTextDualEncoder model)"),dSe.forEach(t),IEr=i(W),QM=n(W,"LI",{});var cSe=s(QM);fve=n(cSe,"STRONG",{});var S8t=s(fve);qEr=r(S8t,"vit"),S8t.forEach(t),NEr=r(cSe," \u2014 "),_W=n(cSe,"A",{href:!0});var R8t=s(_W);jEr=r(R8t,"FlaxViTModel"),R8t.forEach(t),DEr=r(cSe," (ViT model)"),cSe.forEach(t),GEr=i(W),WM=n(W,"LI",{});var fSe=s(WM);mve=n(fSe,"STRONG",{});var B8t=s(mve);OEr=r(B8t,"wav2vec2"),B8t.forEach(t),VEr=r(fSe," \u2014 "),uW=n(fSe,"A",{href:!0});var P8t=s(uW);XEr=r(P8t,"FlaxWav2Vec2Model"),P8t.forEach(t),zEr=r(fSe," (Wav2Vec2 model)"),fSe.forEach(t),QEr=i(W),HM=n(W,"LI",{});var mSe=s(HM);gve=n(mSe,"STRONG",{});var $8t=s(gve);WEr=r($8t,"xglm"),$8t.forEach(t),HEr=r(mSe," \u2014 "),bW=n(mSe,"A",{href:!0});var I8t=s(bW);UEr=r(I8t,"FlaxXGLMModel"),I8t.forEach(t),JEr=r(mSe," (XGLM model)"),mSe.forEach(t),YEr=i(W),UM=n(W,"LI",{});var gSe=s(UM);hve=n(gSe,"STRONG",{});var q8t=s(hve);KEr=r(q8t,"xlm-roberta"),q8t.forEach(t),ZEr=r(gSe," \u2014 "),vW=n(gSe,"A",{href:!0});var N8t=s(vW);e5r=r(N8t,"FlaxXLMRobertaModel"),N8t.forEach(t),o5r=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),W.forEach(t),r5r=i(La),pve=n(La,"P",{});var j8t=s(pve);t5r=r(j8t,"Examples:"),j8t.forEach(t),a5r=i(La),m(Z0.$$.fragment,La),La.forEach(t),gi.forEach(t),pPe=i(c),rf=n(c,"H2",{class:!0});var AIe=s(rf);JM=n(AIe,"A",{id:!0,class:!0,href:!0});var D8t=s(JM);_ve=n(D8t,"SPAN",{});var G8t=s(_ve);m(ey.$$.fragment,G8t),G8t.forEach(t),D8t.forEach(t),n5r=i(AIe),uve=n(AIe,"SPAN",{});var O8t=s(uve);s5r=r(O8t,"FlaxAutoModelForCausalLM"),O8t.forEach(t),AIe.forEach(t),_Pe=i(c),Br=n(c,"DIV",{class:!0});var pi=s(Br);m(oy.$$.fragment,pi),l5r=i(pi),tf=n(pi,"P",{});var zJ=s(tf);i5r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),FW=n(zJ,"A",{href:!0});var V8t=s(FW);d5r=r(V8t,"from_pretrained()"),V8t.forEach(t),c5r=r(zJ," class method or the "),TW=n(zJ,"A",{href:!0});var X8t=s(TW);f5r=r(X8t,"from_config()"),X8t.forEach(t),m5r=r(zJ,` class
method.`),zJ.forEach(t),g5r=i(pi),ry=n(pi,"P",{});var yIe=s(ry);h5r=r(yIe,"This class cannot be instantiated directly using "),bve=n(yIe,"CODE",{});var z8t=s(bve);p5r=r(z8t,"__init__()"),z8t.forEach(t),_5r=r(yIe," (throws an error)."),yIe.forEach(t),u5r=i(pi),yt=n(pi,"DIV",{class:!0});var _i=s(yt);m(ty.$$.fragment,_i),b5r=i(_i),vve=n(_i,"P",{});var Q8t=s(vve);v5r=r(Q8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Q8t.forEach(t),F5r=i(_i),af=n(_i,"P",{});var QJ=s(af);T5r=r(QJ,`Note:
Loading a model from its configuration file does `),Fve=n(QJ,"STRONG",{});var W8t=s(Fve);M5r=r(W8t,"not"),W8t.forEach(t),E5r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(QJ,"A",{href:!0});var H8t=s(MW);C5r=r(H8t,"from_pretrained()"),H8t.forEach(t),w5r=r(QJ," to load the model weights."),QJ.forEach(t),A5r=i(_i),Tve=n(_i,"P",{});var U8t=s(Tve);y5r=r(U8t,"Examples:"),U8t.forEach(t),L5r=i(_i),m(ay.$$.fragment,_i),_i.forEach(t),x5r=i(pi),Lo=n(pi,"DIV",{class:!0});var xa=s(Lo);m(ny.$$.fragment,xa),k5r=i(xa),Mve=n(xa,"P",{});var J8t=s(Mve);S5r=r(J8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),J8t.forEach(t),R5r=i(xa),Sn=n(xa,"P",{});var b5=s(Sn);B5r=r(b5,"The model class to instantiate is selected based on the "),Eve=n(b5,"CODE",{});var Y8t=s(Eve);P5r=r(Y8t,"model_type"),Y8t.forEach(t),$5r=r(b5,` property of the config object (either
passed as an argument or loaded from `),Cve=n(b5,"CODE",{});var K8t=s(Cve);I5r=r(K8t,"pretrained_model_name_or_path"),K8t.forEach(t),q5r=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wve=n(b5,"CODE",{});var Z8t=s(wve);N5r=r(Z8t,"pretrained_model_name_or_path"),Z8t.forEach(t),j5r=r(b5,":"),b5.forEach(t),D5r=i(xa),ca=n(xa,"UL",{});var ui=s(ca);YM=n(ui,"LI",{});var hSe=s(YM);Ave=n(hSe,"STRONG",{});var e9t=s(Ave);G5r=r(e9t,"bart"),e9t.forEach(t),O5r=r(hSe," \u2014 "),EW=n(hSe,"A",{href:!0});var o9t=s(EW);V5r=r(o9t,"FlaxBartForCausalLM"),o9t.forEach(t),X5r=r(hSe," (BART model)"),hSe.forEach(t),z5r=i(ui),KM=n(ui,"LI",{});var pSe=s(KM);yve=n(pSe,"STRONG",{});var r9t=s(yve);Q5r=r(r9t,"gpt2"),r9t.forEach(t),W5r=r(pSe," \u2014 "),CW=n(pSe,"A",{href:!0});var t9t=s(CW);H5r=r(t9t,"FlaxGPT2LMHeadModel"),t9t.forEach(t),U5r=r(pSe," (OpenAI GPT-2 model)"),pSe.forEach(t),J5r=i(ui),ZM=n(ui,"LI",{});var _Se=s(ZM);Lve=n(_Se,"STRONG",{});var a9t=s(Lve);Y5r=r(a9t,"gpt_neo"),a9t.forEach(t),K5r=r(_Se," \u2014 "),wW=n(_Se,"A",{href:!0});var n9t=s(wW);Z5r=r(n9t,"FlaxGPTNeoForCausalLM"),n9t.forEach(t),e3r=r(_Se," (GPT Neo model)"),_Se.forEach(t),o3r=i(ui),e4=n(ui,"LI",{});var uSe=s(e4);xve=n(uSe,"STRONG",{});var s9t=s(xve);r3r=r(s9t,"gptj"),s9t.forEach(t),t3r=r(uSe," \u2014 "),AW=n(uSe,"A",{href:!0});var l9t=s(AW);a3r=r(l9t,"FlaxGPTJForCausalLM"),l9t.forEach(t),n3r=r(uSe," (GPT-J model)"),uSe.forEach(t),s3r=i(ui),o4=n(ui,"LI",{});var bSe=s(o4);kve=n(bSe,"STRONG",{});var i9t=s(kve);l3r=r(i9t,"xglm"),i9t.forEach(t),i3r=r(bSe," \u2014 "),yW=n(bSe,"A",{href:!0});var d9t=s(yW);d3r=r(d9t,"FlaxXGLMForCausalLM"),d9t.forEach(t),c3r=r(bSe," (XGLM model)"),bSe.forEach(t),ui.forEach(t),f3r=i(xa),Sve=n(xa,"P",{});var c9t=s(Sve);m3r=r(c9t,"Examples:"),c9t.forEach(t),g3r=i(xa),m(sy.$$.fragment,xa),xa.forEach(t),pi.forEach(t),uPe=i(c),nf=n(c,"H2",{class:!0});var LIe=s(nf);r4=n(LIe,"A",{id:!0,class:!0,href:!0});var f9t=s(r4);Rve=n(f9t,"SPAN",{});var m9t=s(Rve);m(ly.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),h3r=i(LIe),Bve=n(LIe,"SPAN",{});var g9t=s(Bve);p3r=r(g9t,"FlaxAutoModelForPreTraining"),g9t.forEach(t),LIe.forEach(t),bPe=i(c),Pr=n(c,"DIV",{class:!0});var bi=s(Pr);m(iy.$$.fragment,bi),_3r=i(bi),sf=n(bi,"P",{});var WJ=s(sf);u3r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LW=n(WJ,"A",{href:!0});var h9t=s(LW);b3r=r(h9t,"from_pretrained()"),h9t.forEach(t),v3r=r(WJ," class method or the "),xW=n(WJ,"A",{href:!0});var p9t=s(xW);F3r=r(p9t,"from_config()"),p9t.forEach(t),T3r=r(WJ,` class
method.`),WJ.forEach(t),M3r=i(bi),dy=n(bi,"P",{});var xIe=s(dy);E3r=r(xIe,"This class cannot be instantiated directly using "),Pve=n(xIe,"CODE",{});var _9t=s(Pve);C3r=r(_9t,"__init__()"),_9t.forEach(t),w3r=r(xIe," (throws an error)."),xIe.forEach(t),A3r=i(bi),Lt=n(bi,"DIV",{class:!0});var vi=s(Lt);m(cy.$$.fragment,vi),y3r=i(vi),$ve=n(vi,"P",{});var u9t=s($ve);L3r=r(u9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u9t.forEach(t),x3r=i(vi),lf=n(vi,"P",{});var HJ=s(lf);k3r=r(HJ,`Note:
Loading a model from its configuration file does `),Ive=n(HJ,"STRONG",{});var b9t=s(Ive);S3r=r(b9t,"not"),b9t.forEach(t),R3r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(HJ,"A",{href:!0});var v9t=s(kW);B3r=r(v9t,"from_pretrained()"),v9t.forEach(t),P3r=r(HJ," to load the model weights."),HJ.forEach(t),$3r=i(vi),qve=n(vi,"P",{});var F9t=s(qve);I3r=r(F9t,"Examples:"),F9t.forEach(t),q3r=i(vi),m(fy.$$.fragment,vi),vi.forEach(t),N3r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(my.$$.fragment,ka),j3r=i(ka),Nve=n(ka,"P",{});var T9t=s(Nve);D3r=r(T9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T9t.forEach(t),G3r=i(ka),Rn=n(ka,"P",{});var v5=s(Rn);O3r=r(v5,"The model class to instantiate is selected based on the "),jve=n(v5,"CODE",{});var M9t=s(jve);V3r=r(M9t,"model_type"),M9t.forEach(t),X3r=r(v5,` property of the config object (either
passed as an argument or loaded from `),Dve=n(v5,"CODE",{});var E9t=s(Dve);z3r=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),Q3r=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gve=n(v5,"CODE",{});var C9t=s(Gve);W3r=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),H3r=r(v5,":"),v5.forEach(t),U3r=i(ka),me=n(ka,"UL",{});var _e=s(me);t4=n(_e,"LI",{});var vSe=s(t4);Ove=n(vSe,"STRONG",{});var w9t=s(Ove);J3r=r(w9t,"albert"),w9t.forEach(t),Y3r=r(vSe," \u2014 "),SW=n(vSe,"A",{href:!0});var A9t=s(SW);K3r=r(A9t,"FlaxAlbertForPreTraining"),A9t.forEach(t),Z3r=r(vSe," (ALBERT model)"),vSe.forEach(t),eCr=i(_e),a4=n(_e,"LI",{});var FSe=s(a4);Vve=n(FSe,"STRONG",{});var y9t=s(Vve);oCr=r(y9t,"bart"),y9t.forEach(t),rCr=r(FSe," \u2014 "),RW=n(FSe,"A",{href:!0});var L9t=s(RW);tCr=r(L9t,"FlaxBartForConditionalGeneration"),L9t.forEach(t),aCr=r(FSe," (BART model)"),FSe.forEach(t),nCr=i(_e),n4=n(_e,"LI",{});var TSe=s(n4);Xve=n(TSe,"STRONG",{});var x9t=s(Xve);sCr=r(x9t,"bert"),x9t.forEach(t),lCr=r(TSe," \u2014 "),BW=n(TSe,"A",{href:!0});var k9t=s(BW);iCr=r(k9t,"FlaxBertForPreTraining"),k9t.forEach(t),dCr=r(TSe," (BERT model)"),TSe.forEach(t),cCr=i(_e),s4=n(_e,"LI",{});var MSe=s(s4);zve=n(MSe,"STRONG",{});var S9t=s(zve);fCr=r(S9t,"big_bird"),S9t.forEach(t),mCr=r(MSe," \u2014 "),PW=n(MSe,"A",{href:!0});var R9t=s(PW);gCr=r(R9t,"FlaxBigBirdForPreTraining"),R9t.forEach(t),hCr=r(MSe," (BigBird model)"),MSe.forEach(t),pCr=i(_e),l4=n(_e,"LI",{});var ESe=s(l4);Qve=n(ESe,"STRONG",{});var B9t=s(Qve);_Cr=r(B9t,"electra"),B9t.forEach(t),uCr=r(ESe," \u2014 "),$W=n(ESe,"A",{href:!0});var P9t=s($W);bCr=r(P9t,"FlaxElectraForPreTraining"),P9t.forEach(t),vCr=r(ESe," (ELECTRA model)"),ESe.forEach(t),FCr=i(_e),i4=n(_e,"LI",{});var CSe=s(i4);Wve=n(CSe,"STRONG",{});var $9t=s(Wve);TCr=r($9t,"mbart"),$9t.forEach(t),MCr=r(CSe," \u2014 "),IW=n(CSe,"A",{href:!0});var I9t=s(IW);ECr=r(I9t,"FlaxMBartForConditionalGeneration"),I9t.forEach(t),CCr=r(CSe," (mBART model)"),CSe.forEach(t),wCr=i(_e),d4=n(_e,"LI",{});var wSe=s(d4);Hve=n(wSe,"STRONG",{});var q9t=s(Hve);ACr=r(q9t,"mt5"),q9t.forEach(t),yCr=r(wSe," \u2014 "),qW=n(wSe,"A",{href:!0});var N9t=s(qW);LCr=r(N9t,"FlaxMT5ForConditionalGeneration"),N9t.forEach(t),xCr=r(wSe," (mT5 model)"),wSe.forEach(t),kCr=i(_e),c4=n(_e,"LI",{});var ASe=s(c4);Uve=n(ASe,"STRONG",{});var j9t=s(Uve);SCr=r(j9t,"roberta"),j9t.forEach(t),RCr=r(ASe," \u2014 "),NW=n(ASe,"A",{href:!0});var D9t=s(NW);BCr=r(D9t,"FlaxRobertaForMaskedLM"),D9t.forEach(t),PCr=r(ASe," (RoBERTa model)"),ASe.forEach(t),$Cr=i(_e),f4=n(_e,"LI",{});var ySe=s(f4);Jve=n(ySe,"STRONG",{});var G9t=s(Jve);ICr=r(G9t,"roformer"),G9t.forEach(t),qCr=r(ySe," \u2014 "),jW=n(ySe,"A",{href:!0});var O9t=s(jW);NCr=r(O9t,"FlaxRoFormerForMaskedLM"),O9t.forEach(t),jCr=r(ySe," (RoFormer model)"),ySe.forEach(t),DCr=i(_e),m4=n(_e,"LI",{});var LSe=s(m4);Yve=n(LSe,"STRONG",{});var V9t=s(Yve);GCr=r(V9t,"t5"),V9t.forEach(t),OCr=r(LSe," \u2014 "),DW=n(LSe,"A",{href:!0});var X9t=s(DW);VCr=r(X9t,"FlaxT5ForConditionalGeneration"),X9t.forEach(t),XCr=r(LSe," (T5 model)"),LSe.forEach(t),zCr=i(_e),g4=n(_e,"LI",{});var xSe=s(g4);Kve=n(xSe,"STRONG",{});var z9t=s(Kve);QCr=r(z9t,"wav2vec2"),z9t.forEach(t),WCr=r(xSe," \u2014 "),GW=n(xSe,"A",{href:!0});var Q9t=s(GW);HCr=r(Q9t,"FlaxWav2Vec2ForPreTraining"),Q9t.forEach(t),UCr=r(xSe," (Wav2Vec2 model)"),xSe.forEach(t),JCr=i(_e),h4=n(_e,"LI",{});var kSe=s(h4);Zve=n(kSe,"STRONG",{});var W9t=s(Zve);YCr=r(W9t,"xlm-roberta"),W9t.forEach(t),KCr=r(kSe," \u2014 "),OW=n(kSe,"A",{href:!0});var H9t=s(OW);ZCr=r(H9t,"FlaxXLMRobertaForMaskedLM"),H9t.forEach(t),ewr=r(kSe," (XLM-RoBERTa model)"),kSe.forEach(t),_e.forEach(t),owr=i(ka),eFe=n(ka,"P",{});var U9t=s(eFe);rwr=r(U9t,"Examples:"),U9t.forEach(t),twr=i(ka),m(gy.$$.fragment,ka),ka.forEach(t),bi.forEach(t),vPe=i(c),df=n(c,"H2",{class:!0});var kIe=s(df);p4=n(kIe,"A",{id:!0,class:!0,href:!0});var J9t=s(p4);oFe=n(J9t,"SPAN",{});var Y9t=s(oFe);m(hy.$$.fragment,Y9t),Y9t.forEach(t),J9t.forEach(t),awr=i(kIe),rFe=n(kIe,"SPAN",{});var K9t=s(rFe);nwr=r(K9t,"FlaxAutoModelForMaskedLM"),K9t.forEach(t),kIe.forEach(t),FPe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(py.$$.fragment,Fi),swr=i(Fi),cf=n(Fi,"P",{});var UJ=s(cf);lwr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),VW=n(UJ,"A",{href:!0});var Z9t=s(VW);iwr=r(Z9t,"from_pretrained()"),Z9t.forEach(t),dwr=r(UJ," class method or the "),XW=n(UJ,"A",{href:!0});var eMt=s(XW);cwr=r(eMt,"from_config()"),eMt.forEach(t),fwr=r(UJ,` class
method.`),UJ.forEach(t),mwr=i(Fi),_y=n(Fi,"P",{});var SIe=s(_y);gwr=r(SIe,"This class cannot be instantiated directly using "),tFe=n(SIe,"CODE",{});var oMt=s(tFe);hwr=r(oMt,"__init__()"),oMt.forEach(t),pwr=r(SIe," (throws an error)."),SIe.forEach(t),_wr=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ti=s(xt);m(uy.$$.fragment,Ti),uwr=i(Ti),aFe=n(Ti,"P",{});var rMt=s(aFe);bwr=r(rMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rMt.forEach(t),vwr=i(Ti),ff=n(Ti,"P",{});var JJ=s(ff);Fwr=r(JJ,`Note:
Loading a model from its configuration file does `),nFe=n(JJ,"STRONG",{});var tMt=s(nFe);Twr=r(tMt,"not"),tMt.forEach(t),Mwr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(JJ,"A",{href:!0});var aMt=s(zW);Ewr=r(aMt,"from_pretrained()"),aMt.forEach(t),Cwr=r(JJ," to load the model weights."),JJ.forEach(t),wwr=i(Ti),sFe=n(Ti,"P",{});var nMt=s(sFe);Awr=r(nMt,"Examples:"),nMt.forEach(t),ywr=i(Ti),m(by.$$.fragment,Ti),Ti.forEach(t),Lwr=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(vy.$$.fragment,Sa),xwr=i(Sa),lFe=n(Sa,"P",{});var sMt=s(lFe);kwr=r(sMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),sMt.forEach(t),Swr=i(Sa),Bn=n(Sa,"P",{});var F5=s(Bn);Rwr=r(F5,"The model class to instantiate is selected based on the "),iFe=n(F5,"CODE",{});var lMt=s(iFe);Bwr=r(lMt,"model_type"),lMt.forEach(t),Pwr=r(F5,` property of the config object (either
passed as an argument or loaded from `),dFe=n(F5,"CODE",{});var iMt=s(dFe);$wr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),Iwr=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(F5,"CODE",{});var dMt=s(cFe);qwr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),Nwr=r(F5,":"),F5.forEach(t),jwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);_4=n(Ae,"LI",{});var SSe=s(_4);fFe=n(SSe,"STRONG",{});var cMt=s(fFe);Dwr=r(cMt,"albert"),cMt.forEach(t),Gwr=r(SSe," \u2014 "),QW=n(SSe,"A",{href:!0});var fMt=s(QW);Owr=r(fMt,"FlaxAlbertForMaskedLM"),fMt.forEach(t),Vwr=r(SSe," (ALBERT model)"),SSe.forEach(t),Xwr=i(Ae),u4=n(Ae,"LI",{});var RSe=s(u4);mFe=n(RSe,"STRONG",{});var mMt=s(mFe);zwr=r(mMt,"bart"),mMt.forEach(t),Qwr=r(RSe," \u2014 "),WW=n(RSe,"A",{href:!0});var gMt=s(WW);Wwr=r(gMt,"FlaxBartForConditionalGeneration"),gMt.forEach(t),Hwr=r(RSe," (BART model)"),RSe.forEach(t),Uwr=i(Ae),b4=n(Ae,"LI",{});var BSe=s(b4);gFe=n(BSe,"STRONG",{});var hMt=s(gFe);Jwr=r(hMt,"bert"),hMt.forEach(t),Ywr=r(BSe," \u2014 "),HW=n(BSe,"A",{href:!0});var pMt=s(HW);Kwr=r(pMt,"FlaxBertForMaskedLM"),pMt.forEach(t),Zwr=r(BSe," (BERT model)"),BSe.forEach(t),eAr=i(Ae),v4=n(Ae,"LI",{});var PSe=s(v4);hFe=n(PSe,"STRONG",{});var _Mt=s(hFe);oAr=r(_Mt,"big_bird"),_Mt.forEach(t),rAr=r(PSe," \u2014 "),UW=n(PSe,"A",{href:!0});var uMt=s(UW);tAr=r(uMt,"FlaxBigBirdForMaskedLM"),uMt.forEach(t),aAr=r(PSe," (BigBird model)"),PSe.forEach(t),nAr=i(Ae),F4=n(Ae,"LI",{});var $Se=s(F4);pFe=n($Se,"STRONG",{});var bMt=s(pFe);sAr=r(bMt,"distilbert"),bMt.forEach(t),lAr=r($Se," \u2014 "),JW=n($Se,"A",{href:!0});var vMt=s(JW);iAr=r(vMt,"FlaxDistilBertForMaskedLM"),vMt.forEach(t),dAr=r($Se," (DistilBERT model)"),$Se.forEach(t),cAr=i(Ae),T4=n(Ae,"LI",{});var ISe=s(T4);_Fe=n(ISe,"STRONG",{});var FMt=s(_Fe);fAr=r(FMt,"electra"),FMt.forEach(t),mAr=r(ISe," \u2014 "),YW=n(ISe,"A",{href:!0});var TMt=s(YW);gAr=r(TMt,"FlaxElectraForMaskedLM"),TMt.forEach(t),hAr=r(ISe," (ELECTRA model)"),ISe.forEach(t),pAr=i(Ae),M4=n(Ae,"LI",{});var qSe=s(M4);uFe=n(qSe,"STRONG",{});var MMt=s(uFe);_Ar=r(MMt,"mbart"),MMt.forEach(t),uAr=r(qSe," \u2014 "),KW=n(qSe,"A",{href:!0});var EMt=s(KW);bAr=r(EMt,"FlaxMBartForConditionalGeneration"),EMt.forEach(t),vAr=r(qSe," (mBART model)"),qSe.forEach(t),FAr=i(Ae),E4=n(Ae,"LI",{});var NSe=s(E4);bFe=n(NSe,"STRONG",{});var CMt=s(bFe);TAr=r(CMt,"roberta"),CMt.forEach(t),MAr=r(NSe," \u2014 "),ZW=n(NSe,"A",{href:!0});var wMt=s(ZW);EAr=r(wMt,"FlaxRobertaForMaskedLM"),wMt.forEach(t),CAr=r(NSe," (RoBERTa model)"),NSe.forEach(t),wAr=i(Ae),C4=n(Ae,"LI",{});var jSe=s(C4);vFe=n(jSe,"STRONG",{});var AMt=s(vFe);AAr=r(AMt,"roformer"),AMt.forEach(t),yAr=r(jSe," \u2014 "),eH=n(jSe,"A",{href:!0});var yMt=s(eH);LAr=r(yMt,"FlaxRoFormerForMaskedLM"),yMt.forEach(t),xAr=r(jSe," (RoFormer model)"),jSe.forEach(t),kAr=i(Ae),w4=n(Ae,"LI",{});var DSe=s(w4);FFe=n(DSe,"STRONG",{});var LMt=s(FFe);SAr=r(LMt,"xlm-roberta"),LMt.forEach(t),RAr=r(DSe," \u2014 "),oH=n(DSe,"A",{href:!0});var xMt=s(oH);BAr=r(xMt,"FlaxXLMRobertaForMaskedLM"),xMt.forEach(t),PAr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Ae.forEach(t),$Ar=i(Sa),TFe=n(Sa,"P",{});var kMt=s(TFe);IAr=r(kMt,"Examples:"),kMt.forEach(t),qAr=i(Sa),m(Fy.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),TPe=i(c),mf=n(c,"H2",{class:!0});var RIe=s(mf);A4=n(RIe,"A",{id:!0,class:!0,href:!0});var SMt=s(A4);MFe=n(SMt,"SPAN",{});var RMt=s(MFe);m(Ty.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),NAr=i(RIe),EFe=n(RIe,"SPAN",{});var BMt=s(EFe);jAr=r(BMt,"FlaxAutoModelForSeq2SeqLM"),BMt.forEach(t),RIe.forEach(t),MPe=i(c),Ir=n(c,"DIV",{class:!0});var Mi=s(Ir);m(My.$$.fragment,Mi),DAr=i(Mi),gf=n(Mi,"P",{});var YJ=s(gf);GAr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),rH=n(YJ,"A",{href:!0});var PMt=s(rH);OAr=r(PMt,"from_pretrained()"),PMt.forEach(t),VAr=r(YJ," class method or the "),tH=n(YJ,"A",{href:!0});var $Mt=s(tH);XAr=r($Mt,"from_config()"),$Mt.forEach(t),zAr=r(YJ,` class
method.`),YJ.forEach(t),QAr=i(Mi),Ey=n(Mi,"P",{});var BIe=s(Ey);WAr=r(BIe,"This class cannot be instantiated directly using "),CFe=n(BIe,"CODE",{});var IMt=s(CFe);HAr=r(IMt,"__init__()"),IMt.forEach(t),UAr=r(BIe," (throws an error)."),BIe.forEach(t),JAr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(Cy.$$.fragment,Ei),YAr=i(Ei),wFe=n(Ei,"P",{});var qMt=s(wFe);KAr=r(qMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qMt.forEach(t),ZAr=i(Ei),hf=n(Ei,"P",{});var KJ=s(hf);e0r=r(KJ,`Note:
Loading a model from its configuration file does `),AFe=n(KJ,"STRONG",{});var NMt=s(AFe);o0r=r(NMt,"not"),NMt.forEach(t),r0r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(KJ,"A",{href:!0});var jMt=s(aH);t0r=r(jMt,"from_pretrained()"),jMt.forEach(t),a0r=r(KJ," to load the model weights."),KJ.forEach(t),n0r=i(Ei),yFe=n(Ei,"P",{});var DMt=s(yFe);s0r=r(DMt,"Examples:"),DMt.forEach(t),l0r=i(Ei),m(wy.$$.fragment,Ei),Ei.forEach(t),i0r=i(Mi),So=n(Mi,"DIV",{class:!0});var Ra=s(So);m(Ay.$$.fragment,Ra),d0r=i(Ra),LFe=n(Ra,"P",{});var GMt=s(LFe);c0r=r(GMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GMt.forEach(t),f0r=i(Ra),Pn=n(Ra,"P",{});var T5=s(Pn);m0r=r(T5,"The model class to instantiate is selected based on the "),xFe=n(T5,"CODE",{});var OMt=s(xFe);g0r=r(OMt,"model_type"),OMt.forEach(t),h0r=r(T5,` property of the config object (either
passed as an argument or loaded from `),kFe=n(T5,"CODE",{});var VMt=s(kFe);p0r=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),_0r=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(T5,"CODE",{});var XMt=s(SFe);u0r=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),b0r=r(T5,":"),T5.forEach(t),v0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);y4=n(so,"LI",{});var GSe=s(y4);RFe=n(GSe,"STRONG",{});var zMt=s(RFe);F0r=r(zMt,"bart"),zMt.forEach(t),T0r=r(GSe," \u2014 "),nH=n(GSe,"A",{href:!0});var QMt=s(nH);M0r=r(QMt,"FlaxBartForConditionalGeneration"),QMt.forEach(t),E0r=r(GSe," (BART model)"),GSe.forEach(t),C0r=i(so),L4=n(so,"LI",{});var OSe=s(L4);BFe=n(OSe,"STRONG",{});var WMt=s(BFe);w0r=r(WMt,"blenderbot"),WMt.forEach(t),A0r=r(OSe," \u2014 "),sH=n(OSe,"A",{href:!0});var HMt=s(sH);y0r=r(HMt,"FlaxBlenderbotForConditionalGeneration"),HMt.forEach(t),L0r=r(OSe," (Blenderbot model)"),OSe.forEach(t),x0r=i(so),x4=n(so,"LI",{});var VSe=s(x4);PFe=n(VSe,"STRONG",{});var UMt=s(PFe);k0r=r(UMt,"blenderbot-small"),UMt.forEach(t),S0r=r(VSe," \u2014 "),lH=n(VSe,"A",{href:!0});var JMt=s(lH);R0r=r(JMt,"FlaxBlenderbotSmallForConditionalGeneration"),JMt.forEach(t),B0r=r(VSe," (BlenderbotSmall model)"),VSe.forEach(t),P0r=i(so),k4=n(so,"LI",{});var XSe=s(k4);$Fe=n(XSe,"STRONG",{});var YMt=s($Fe);$0r=r(YMt,"encoder-decoder"),YMt.forEach(t),I0r=r(XSe," \u2014 "),iH=n(XSe,"A",{href:!0});var KMt=s(iH);q0r=r(KMt,"FlaxEncoderDecoderModel"),KMt.forEach(t),N0r=r(XSe," (Encoder decoder model)"),XSe.forEach(t),j0r=i(so),S4=n(so,"LI",{});var zSe=s(S4);IFe=n(zSe,"STRONG",{});var ZMt=s(IFe);D0r=r(ZMt,"marian"),ZMt.forEach(t),G0r=r(zSe," \u2014 "),dH=n(zSe,"A",{href:!0});var e4t=s(dH);O0r=r(e4t,"FlaxMarianMTModel"),e4t.forEach(t),V0r=r(zSe," (Marian model)"),zSe.forEach(t),X0r=i(so),R4=n(so,"LI",{});var QSe=s(R4);qFe=n(QSe,"STRONG",{});var o4t=s(qFe);z0r=r(o4t,"mbart"),o4t.forEach(t),Q0r=r(QSe," \u2014 "),cH=n(QSe,"A",{href:!0});var r4t=s(cH);W0r=r(r4t,"FlaxMBartForConditionalGeneration"),r4t.forEach(t),H0r=r(QSe," (mBART model)"),QSe.forEach(t),U0r=i(so),B4=n(so,"LI",{});var WSe=s(B4);NFe=n(WSe,"STRONG",{});var t4t=s(NFe);J0r=r(t4t,"mt5"),t4t.forEach(t),Y0r=r(WSe," \u2014 "),fH=n(WSe,"A",{href:!0});var a4t=s(fH);K0r=r(a4t,"FlaxMT5ForConditionalGeneration"),a4t.forEach(t),Z0r=r(WSe," (mT5 model)"),WSe.forEach(t),eyr=i(so),P4=n(so,"LI",{});var HSe=s(P4);jFe=n(HSe,"STRONG",{});var n4t=s(jFe);oyr=r(n4t,"pegasus"),n4t.forEach(t),ryr=r(HSe," \u2014 "),mH=n(HSe,"A",{href:!0});var s4t=s(mH);tyr=r(s4t,"FlaxPegasusForConditionalGeneration"),s4t.forEach(t),ayr=r(HSe," (Pegasus model)"),HSe.forEach(t),nyr=i(so),$4=n(so,"LI",{});var USe=s($4);DFe=n(USe,"STRONG",{});var l4t=s(DFe);syr=r(l4t,"t5"),l4t.forEach(t),lyr=r(USe," \u2014 "),gH=n(USe,"A",{href:!0});var i4t=s(gH);iyr=r(i4t,"FlaxT5ForConditionalGeneration"),i4t.forEach(t),dyr=r(USe," (T5 model)"),USe.forEach(t),so.forEach(t),cyr=i(Ra),GFe=n(Ra,"P",{});var d4t=s(GFe);fyr=r(d4t,"Examples:"),d4t.forEach(t),myr=i(Ra),m(yy.$$.fragment,Ra),Ra.forEach(t),Mi.forEach(t),EPe=i(c),pf=n(c,"H2",{class:!0});var PIe=s(pf);I4=n(PIe,"A",{id:!0,class:!0,href:!0});var c4t=s(I4);OFe=n(c4t,"SPAN",{});var f4t=s(OFe);m(Ly.$$.fragment,f4t),f4t.forEach(t),c4t.forEach(t),gyr=i(PIe),VFe=n(PIe,"SPAN",{});var m4t=s(VFe);hyr=r(m4t,"FlaxAutoModelForSequenceClassification"),m4t.forEach(t),PIe.forEach(t),CPe=i(c),qr=n(c,"DIV",{class:!0});var Ci=s(qr);m(xy.$$.fragment,Ci),pyr=i(Ci),_f=n(Ci,"P",{});var ZJ=s(_f);_yr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),hH=n(ZJ,"A",{href:!0});var g4t=s(hH);uyr=r(g4t,"from_pretrained()"),g4t.forEach(t),byr=r(ZJ," class method or the "),pH=n(ZJ,"A",{href:!0});var h4t=s(pH);vyr=r(h4t,"from_config()"),h4t.forEach(t),Fyr=r(ZJ,` class
method.`),ZJ.forEach(t),Tyr=i(Ci),ky=n(Ci,"P",{});var $Ie=s(ky);Myr=r($Ie,"This class cannot be instantiated directly using "),XFe=n($Ie,"CODE",{});var p4t=s(XFe);Eyr=r(p4t,"__init__()"),p4t.forEach(t),Cyr=r($Ie," (throws an error)."),$Ie.forEach(t),wyr=i(Ci),St=n(Ci,"DIV",{class:!0});var wi=s(St);m(Sy.$$.fragment,wi),Ayr=i(wi),zFe=n(wi,"P",{});var _4t=s(zFe);yyr=r(_4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_4t.forEach(t),Lyr=i(wi),uf=n(wi,"P",{});var eY=s(uf);xyr=r(eY,`Note:
Loading a model from its configuration file does `),QFe=n(eY,"STRONG",{});var u4t=s(QFe);kyr=r(u4t,"not"),u4t.forEach(t),Syr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(eY,"A",{href:!0});var b4t=s(_H);Ryr=r(b4t,"from_pretrained()"),b4t.forEach(t),Byr=r(eY," to load the model weights."),eY.forEach(t),Pyr=i(wi),WFe=n(wi,"P",{});var v4t=s(WFe);$yr=r(v4t,"Examples:"),v4t.forEach(t),Iyr=i(wi),m(Ry.$$.fragment,wi),wi.forEach(t),qyr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Ba=s(Ro);m(By.$$.fragment,Ba),Nyr=i(Ba),HFe=n(Ba,"P",{});var F4t=s(HFe);jyr=r(F4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),F4t.forEach(t),Dyr=i(Ba),$n=n(Ba,"P",{});var M5=s($n);Gyr=r(M5,"The model class to instantiate is selected based on the "),UFe=n(M5,"CODE",{});var T4t=s(UFe);Oyr=r(T4t,"model_type"),T4t.forEach(t),Vyr=r(M5,` property of the config object (either
passed as an argument or loaded from `),JFe=n(M5,"CODE",{});var M4t=s(JFe);Xyr=r(M4t,"pretrained_model_name_or_path"),M4t.forEach(t),zyr=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(M5,"CODE",{});var E4t=s(YFe);Qyr=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),Wyr=r(M5,":"),M5.forEach(t),Hyr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);q4=n(ye,"LI",{});var JSe=s(q4);KFe=n(JSe,"STRONG",{});var C4t=s(KFe);Uyr=r(C4t,"albert"),C4t.forEach(t),Jyr=r(JSe," \u2014 "),uH=n(JSe,"A",{href:!0});var w4t=s(uH);Yyr=r(w4t,"FlaxAlbertForSequenceClassification"),w4t.forEach(t),Kyr=r(JSe," (ALBERT model)"),JSe.forEach(t),Zyr=i(ye),N4=n(ye,"LI",{});var YSe=s(N4);ZFe=n(YSe,"STRONG",{});var A4t=s(ZFe);eLr=r(A4t,"bart"),A4t.forEach(t),oLr=r(YSe," \u2014 "),bH=n(YSe,"A",{href:!0});var y4t=s(bH);rLr=r(y4t,"FlaxBartForSequenceClassification"),y4t.forEach(t),tLr=r(YSe," (BART model)"),YSe.forEach(t),aLr=i(ye),j4=n(ye,"LI",{});var KSe=s(j4);eTe=n(KSe,"STRONG",{});var L4t=s(eTe);nLr=r(L4t,"bert"),L4t.forEach(t),sLr=r(KSe," \u2014 "),vH=n(KSe,"A",{href:!0});var x4t=s(vH);lLr=r(x4t,"FlaxBertForSequenceClassification"),x4t.forEach(t),iLr=r(KSe," (BERT model)"),KSe.forEach(t),dLr=i(ye),D4=n(ye,"LI",{});var ZSe=s(D4);oTe=n(ZSe,"STRONG",{});var k4t=s(oTe);cLr=r(k4t,"big_bird"),k4t.forEach(t),fLr=r(ZSe," \u2014 "),FH=n(ZSe,"A",{href:!0});var S4t=s(FH);mLr=r(S4t,"FlaxBigBirdForSequenceClassification"),S4t.forEach(t),gLr=r(ZSe," (BigBird model)"),ZSe.forEach(t),hLr=i(ye),G4=n(ye,"LI",{});var eRe=s(G4);rTe=n(eRe,"STRONG",{});var R4t=s(rTe);pLr=r(R4t,"distilbert"),R4t.forEach(t),_Lr=r(eRe," \u2014 "),TH=n(eRe,"A",{href:!0});var B4t=s(TH);uLr=r(B4t,"FlaxDistilBertForSequenceClassification"),B4t.forEach(t),bLr=r(eRe," (DistilBERT model)"),eRe.forEach(t),vLr=i(ye),O4=n(ye,"LI",{});var oRe=s(O4);tTe=n(oRe,"STRONG",{});var P4t=s(tTe);FLr=r(P4t,"electra"),P4t.forEach(t),TLr=r(oRe," \u2014 "),MH=n(oRe,"A",{href:!0});var $4t=s(MH);MLr=r($4t,"FlaxElectraForSequenceClassification"),$4t.forEach(t),ELr=r(oRe," (ELECTRA model)"),oRe.forEach(t),CLr=i(ye),V4=n(ye,"LI",{});var rRe=s(V4);aTe=n(rRe,"STRONG",{});var I4t=s(aTe);wLr=r(I4t,"mbart"),I4t.forEach(t),ALr=r(rRe," \u2014 "),EH=n(rRe,"A",{href:!0});var q4t=s(EH);yLr=r(q4t,"FlaxMBartForSequenceClassification"),q4t.forEach(t),LLr=r(rRe," (mBART model)"),rRe.forEach(t),xLr=i(ye),X4=n(ye,"LI",{});var tRe=s(X4);nTe=n(tRe,"STRONG",{});var N4t=s(nTe);kLr=r(N4t,"roberta"),N4t.forEach(t),SLr=r(tRe," \u2014 "),CH=n(tRe,"A",{href:!0});var j4t=s(CH);RLr=r(j4t,"FlaxRobertaForSequenceClassification"),j4t.forEach(t),BLr=r(tRe," (RoBERTa model)"),tRe.forEach(t),PLr=i(ye),z4=n(ye,"LI",{});var aRe=s(z4);sTe=n(aRe,"STRONG",{});var D4t=s(sTe);$Lr=r(D4t,"roformer"),D4t.forEach(t),ILr=r(aRe," \u2014 "),wH=n(aRe,"A",{href:!0});var G4t=s(wH);qLr=r(G4t,"FlaxRoFormerForSequenceClassification"),G4t.forEach(t),NLr=r(aRe," (RoFormer model)"),aRe.forEach(t),jLr=i(ye),Q4=n(ye,"LI",{});var nRe=s(Q4);lTe=n(nRe,"STRONG",{});var O4t=s(lTe);DLr=r(O4t,"xlm-roberta"),O4t.forEach(t),GLr=r(nRe," \u2014 "),AH=n(nRe,"A",{href:!0});var V4t=s(AH);OLr=r(V4t,"FlaxXLMRobertaForSequenceClassification"),V4t.forEach(t),VLr=r(nRe," (XLM-RoBERTa model)"),nRe.forEach(t),ye.forEach(t),XLr=i(Ba),iTe=n(Ba,"P",{});var X4t=s(iTe);zLr=r(X4t,"Examples:"),X4t.forEach(t),QLr=i(Ba),m(Py.$$.fragment,Ba),Ba.forEach(t),Ci.forEach(t),wPe=i(c),bf=n(c,"H2",{class:!0});var IIe=s(bf);W4=n(IIe,"A",{id:!0,class:!0,href:!0});var z4t=s(W4);dTe=n(z4t,"SPAN",{});var Q4t=s(dTe);m($y.$$.fragment,Q4t),Q4t.forEach(t),z4t.forEach(t),WLr=i(IIe),cTe=n(IIe,"SPAN",{});var W4t=s(cTe);HLr=r(W4t,"FlaxAutoModelForQuestionAnswering"),W4t.forEach(t),IIe.forEach(t),APe=i(c),Nr=n(c,"DIV",{class:!0});var Ai=s(Nr);m(Iy.$$.fragment,Ai),ULr=i(Ai),vf=n(Ai,"P",{});var oY=s(vf);JLr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yH=n(oY,"A",{href:!0});var H4t=s(yH);YLr=r(H4t,"from_pretrained()"),H4t.forEach(t),KLr=r(oY," class method or the "),LH=n(oY,"A",{href:!0});var U4t=s(LH);ZLr=r(U4t,"from_config()"),U4t.forEach(t),e7r=r(oY,` class
method.`),oY.forEach(t),o7r=i(Ai),qy=n(Ai,"P",{});var qIe=s(qy);r7r=r(qIe,"This class cannot be instantiated directly using "),fTe=n(qIe,"CODE",{});var J4t=s(fTe);t7r=r(J4t,"__init__()"),J4t.forEach(t),a7r=r(qIe," (throws an error)."),qIe.forEach(t),n7r=i(Ai),Rt=n(Ai,"DIV",{class:!0});var yi=s(Rt);m(Ny.$$.fragment,yi),s7r=i(yi),mTe=n(yi,"P",{});var Y4t=s(mTe);l7r=r(Y4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y4t.forEach(t),i7r=i(yi),Ff=n(yi,"P",{});var rY=s(Ff);d7r=r(rY,`Note:
Loading a model from its configuration file does `),gTe=n(rY,"STRONG",{});var K4t=s(gTe);c7r=r(K4t,"not"),K4t.forEach(t),f7r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(rY,"A",{href:!0});var Z4t=s(xH);m7r=r(Z4t,"from_pretrained()"),Z4t.forEach(t),g7r=r(rY," to load the model weights."),rY.forEach(t),h7r=i(yi),hTe=n(yi,"P",{});var eEt=s(hTe);p7r=r(eEt,"Examples:"),eEt.forEach(t),_7r=i(yi),m(jy.$$.fragment,yi),yi.forEach(t),u7r=i(Ai),Bo=n(Ai,"DIV",{class:!0});var Pa=s(Bo);m(Dy.$$.fragment,Pa),b7r=i(Pa),pTe=n(Pa,"P",{});var oEt=s(pTe);v7r=r(oEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oEt.forEach(t),F7r=i(Pa),In=n(Pa,"P",{});var E5=s(In);T7r=r(E5,"The model class to instantiate is selected based on the "),_Te=n(E5,"CODE",{});var rEt=s(_Te);M7r=r(rEt,"model_type"),rEt.forEach(t),E7r=r(E5,` property of the config object (either
passed as an argument or loaded from `),uTe=n(E5,"CODE",{});var tEt=s(uTe);C7r=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),w7r=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bTe=n(E5,"CODE",{});var aEt=s(bTe);A7r=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),y7r=r(E5,":"),E5.forEach(t),L7r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);H4=n(Le,"LI",{});var sRe=s(H4);vTe=n(sRe,"STRONG",{});var nEt=s(vTe);x7r=r(nEt,"albert"),nEt.forEach(t),k7r=r(sRe," \u2014 "),kH=n(sRe,"A",{href:!0});var sEt=s(kH);S7r=r(sEt,"FlaxAlbertForQuestionAnswering"),sEt.forEach(t),R7r=r(sRe," (ALBERT model)"),sRe.forEach(t),B7r=i(Le),U4=n(Le,"LI",{});var lRe=s(U4);FTe=n(lRe,"STRONG",{});var lEt=s(FTe);P7r=r(lEt,"bart"),lEt.forEach(t),$7r=r(lRe," \u2014 "),SH=n(lRe,"A",{href:!0});var iEt=s(SH);I7r=r(iEt,"FlaxBartForQuestionAnswering"),iEt.forEach(t),q7r=r(lRe," (BART model)"),lRe.forEach(t),N7r=i(Le),J4=n(Le,"LI",{});var iRe=s(J4);TTe=n(iRe,"STRONG",{});var dEt=s(TTe);j7r=r(dEt,"bert"),dEt.forEach(t),D7r=r(iRe," \u2014 "),RH=n(iRe,"A",{href:!0});var cEt=s(RH);G7r=r(cEt,"FlaxBertForQuestionAnswering"),cEt.forEach(t),O7r=r(iRe," (BERT model)"),iRe.forEach(t),V7r=i(Le),Y4=n(Le,"LI",{});var dRe=s(Y4);MTe=n(dRe,"STRONG",{});var fEt=s(MTe);X7r=r(fEt,"big_bird"),fEt.forEach(t),z7r=r(dRe," \u2014 "),BH=n(dRe,"A",{href:!0});var mEt=s(BH);Q7r=r(mEt,"FlaxBigBirdForQuestionAnswering"),mEt.forEach(t),W7r=r(dRe," (BigBird model)"),dRe.forEach(t),H7r=i(Le),K4=n(Le,"LI",{});var cRe=s(K4);ETe=n(cRe,"STRONG",{});var gEt=s(ETe);U7r=r(gEt,"distilbert"),gEt.forEach(t),J7r=r(cRe," \u2014 "),PH=n(cRe,"A",{href:!0});var hEt=s(PH);Y7r=r(hEt,"FlaxDistilBertForQuestionAnswering"),hEt.forEach(t),K7r=r(cRe," (DistilBERT model)"),cRe.forEach(t),Z7r=i(Le),Z4=n(Le,"LI",{});var fRe=s(Z4);CTe=n(fRe,"STRONG",{});var pEt=s(CTe);exr=r(pEt,"electra"),pEt.forEach(t),oxr=r(fRe," \u2014 "),$H=n(fRe,"A",{href:!0});var _Et=s($H);rxr=r(_Et,"FlaxElectraForQuestionAnswering"),_Et.forEach(t),txr=r(fRe," (ELECTRA model)"),fRe.forEach(t),axr=i(Le),eE=n(Le,"LI",{});var mRe=s(eE);wTe=n(mRe,"STRONG",{});var uEt=s(wTe);nxr=r(uEt,"mbart"),uEt.forEach(t),sxr=r(mRe," \u2014 "),IH=n(mRe,"A",{href:!0});var bEt=s(IH);lxr=r(bEt,"FlaxMBartForQuestionAnswering"),bEt.forEach(t),ixr=r(mRe," (mBART model)"),mRe.forEach(t),dxr=i(Le),oE=n(Le,"LI",{});var gRe=s(oE);ATe=n(gRe,"STRONG",{});var vEt=s(ATe);cxr=r(vEt,"roberta"),vEt.forEach(t),fxr=r(gRe," \u2014 "),qH=n(gRe,"A",{href:!0});var FEt=s(qH);mxr=r(FEt,"FlaxRobertaForQuestionAnswering"),FEt.forEach(t),gxr=r(gRe," (RoBERTa model)"),gRe.forEach(t),hxr=i(Le),rE=n(Le,"LI",{});var hRe=s(rE);yTe=n(hRe,"STRONG",{});var TEt=s(yTe);pxr=r(TEt,"roformer"),TEt.forEach(t),_xr=r(hRe," \u2014 "),NH=n(hRe,"A",{href:!0});var MEt=s(NH);uxr=r(MEt,"FlaxRoFormerForQuestionAnswering"),MEt.forEach(t),bxr=r(hRe," (RoFormer model)"),hRe.forEach(t),vxr=i(Le),tE=n(Le,"LI",{});var pRe=s(tE);LTe=n(pRe,"STRONG",{});var EEt=s(LTe);Fxr=r(EEt,"xlm-roberta"),EEt.forEach(t),Txr=r(pRe," \u2014 "),jH=n(pRe,"A",{href:!0});var CEt=s(jH);Mxr=r(CEt,"FlaxXLMRobertaForQuestionAnswering"),CEt.forEach(t),Exr=r(pRe," (XLM-RoBERTa model)"),pRe.forEach(t),Le.forEach(t),Cxr=i(Pa),xTe=n(Pa,"P",{});var wEt=s(xTe);wxr=r(wEt,"Examples:"),wEt.forEach(t),Axr=i(Pa),m(Gy.$$.fragment,Pa),Pa.forEach(t),Ai.forEach(t),yPe=i(c),Tf=n(c,"H2",{class:!0});var NIe=s(Tf);aE=n(NIe,"A",{id:!0,class:!0,href:!0});var AEt=s(aE);kTe=n(AEt,"SPAN",{});var yEt=s(kTe);m(Oy.$$.fragment,yEt),yEt.forEach(t),AEt.forEach(t),yxr=i(NIe),STe=n(NIe,"SPAN",{});var LEt=s(STe);Lxr=r(LEt,"FlaxAutoModelForTokenClassification"),LEt.forEach(t),NIe.forEach(t),LPe=i(c),jr=n(c,"DIV",{class:!0});var Li=s(jr);m(Vy.$$.fragment,Li),xxr=i(Li),Mf=n(Li,"P",{});var tY=s(Mf);kxr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DH=n(tY,"A",{href:!0});var xEt=s(DH);Sxr=r(xEt,"from_pretrained()"),xEt.forEach(t),Rxr=r(tY," class method or the "),GH=n(tY,"A",{href:!0});var kEt=s(GH);Bxr=r(kEt,"from_config()"),kEt.forEach(t),Pxr=r(tY,` class
method.`),tY.forEach(t),$xr=i(Li),Xy=n(Li,"P",{});var jIe=s(Xy);Ixr=r(jIe,"This class cannot be instantiated directly using "),RTe=n(jIe,"CODE",{});var SEt=s(RTe);qxr=r(SEt,"__init__()"),SEt.forEach(t),Nxr=r(jIe," (throws an error)."),jIe.forEach(t),jxr=i(Li),Bt=n(Li,"DIV",{class:!0});var xi=s(Bt);m(zy.$$.fragment,xi),Dxr=i(xi),BTe=n(xi,"P",{});var REt=s(BTe);Gxr=r(REt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),REt.forEach(t),Oxr=i(xi),Ef=n(xi,"P",{});var aY=s(Ef);Vxr=r(aY,`Note:
Loading a model from its configuration file does `),PTe=n(aY,"STRONG",{});var BEt=s(PTe);Xxr=r(BEt,"not"),BEt.forEach(t),zxr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(aY,"A",{href:!0});var PEt=s(OH);Qxr=r(PEt,"from_pretrained()"),PEt.forEach(t),Wxr=r(aY," to load the model weights."),aY.forEach(t),Hxr=i(xi),$Te=n(xi,"P",{});var $Et=s($Te);Uxr=r($Et,"Examples:"),$Et.forEach(t),Jxr=i(xi),m(Qy.$$.fragment,xi),xi.forEach(t),Yxr=i(Li),Po=n(Li,"DIV",{class:!0});var $a=s(Po);m(Wy.$$.fragment,$a),Kxr=i($a),ITe=n($a,"P",{});var IEt=s(ITe);Zxr=r(IEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),IEt.forEach(t),ekr=i($a),qn=n($a,"P",{});var C5=s(qn);okr=r(C5,"The model class to instantiate is selected based on the "),qTe=n(C5,"CODE",{});var qEt=s(qTe);rkr=r(qEt,"model_type"),qEt.forEach(t),tkr=r(C5,` property of the config object (either
passed as an argument or loaded from `),NTe=n(C5,"CODE",{});var NEt=s(NTe);akr=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),nkr=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jTe=n(C5,"CODE",{});var jEt=s(jTe);skr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),lkr=r(C5,":"),C5.forEach(t),ikr=i($a),Be=n($a,"UL",{});var Oo=s(Be);nE=n(Oo,"LI",{});var _Re=s(nE);DTe=n(_Re,"STRONG",{});var DEt=s(DTe);dkr=r(DEt,"albert"),DEt.forEach(t),ckr=r(_Re," \u2014 "),VH=n(_Re,"A",{href:!0});var GEt=s(VH);fkr=r(GEt,"FlaxAlbertForTokenClassification"),GEt.forEach(t),mkr=r(_Re," (ALBERT model)"),_Re.forEach(t),gkr=i(Oo),sE=n(Oo,"LI",{});var uRe=s(sE);GTe=n(uRe,"STRONG",{});var OEt=s(GTe);hkr=r(OEt,"bert"),OEt.forEach(t),pkr=r(uRe," \u2014 "),XH=n(uRe,"A",{href:!0});var VEt=s(XH);_kr=r(VEt,"FlaxBertForTokenClassification"),VEt.forEach(t),ukr=r(uRe," (BERT model)"),uRe.forEach(t),bkr=i(Oo),lE=n(Oo,"LI",{});var bRe=s(lE);OTe=n(bRe,"STRONG",{});var XEt=s(OTe);vkr=r(XEt,"big_bird"),XEt.forEach(t),Fkr=r(bRe," \u2014 "),zH=n(bRe,"A",{href:!0});var zEt=s(zH);Tkr=r(zEt,"FlaxBigBirdForTokenClassification"),zEt.forEach(t),Mkr=r(bRe," (BigBird model)"),bRe.forEach(t),Ekr=i(Oo),iE=n(Oo,"LI",{});var vRe=s(iE);VTe=n(vRe,"STRONG",{});var QEt=s(VTe);Ckr=r(QEt,"distilbert"),QEt.forEach(t),wkr=r(vRe," \u2014 "),QH=n(vRe,"A",{href:!0});var WEt=s(QH);Akr=r(WEt,"FlaxDistilBertForTokenClassification"),WEt.forEach(t),ykr=r(vRe," (DistilBERT model)"),vRe.forEach(t),Lkr=i(Oo),dE=n(Oo,"LI",{});var FRe=s(dE);XTe=n(FRe,"STRONG",{});var HEt=s(XTe);xkr=r(HEt,"electra"),HEt.forEach(t),kkr=r(FRe," \u2014 "),WH=n(FRe,"A",{href:!0});var UEt=s(WH);Skr=r(UEt,"FlaxElectraForTokenClassification"),UEt.forEach(t),Rkr=r(FRe," (ELECTRA model)"),FRe.forEach(t),Bkr=i(Oo),cE=n(Oo,"LI",{});var TRe=s(cE);zTe=n(TRe,"STRONG",{});var JEt=s(zTe);Pkr=r(JEt,"roberta"),JEt.forEach(t),$kr=r(TRe," \u2014 "),HH=n(TRe,"A",{href:!0});var YEt=s(HH);Ikr=r(YEt,"FlaxRobertaForTokenClassification"),YEt.forEach(t),qkr=r(TRe," (RoBERTa model)"),TRe.forEach(t),Nkr=i(Oo),fE=n(Oo,"LI",{});var MRe=s(fE);QTe=n(MRe,"STRONG",{});var KEt=s(QTe);jkr=r(KEt,"roformer"),KEt.forEach(t),Dkr=r(MRe," \u2014 "),UH=n(MRe,"A",{href:!0});var ZEt=s(UH);Gkr=r(ZEt,"FlaxRoFormerForTokenClassification"),ZEt.forEach(t),Okr=r(MRe," (RoFormer model)"),MRe.forEach(t),Vkr=i(Oo),mE=n(Oo,"LI",{});var ERe=s(mE);WTe=n(ERe,"STRONG",{});var e5t=s(WTe);Xkr=r(e5t,"xlm-roberta"),e5t.forEach(t),zkr=r(ERe," \u2014 "),JH=n(ERe,"A",{href:!0});var o5t=s(JH);Qkr=r(o5t,"FlaxXLMRobertaForTokenClassification"),o5t.forEach(t),Wkr=r(ERe," (XLM-RoBERTa model)"),ERe.forEach(t),Oo.forEach(t),Hkr=i($a),HTe=n($a,"P",{});var r5t=s(HTe);Ukr=r(r5t,"Examples:"),r5t.forEach(t),Jkr=i($a),m(Hy.$$.fragment,$a),$a.forEach(t),Li.forEach(t),xPe=i(c),Cf=n(c,"H2",{class:!0});var DIe=s(Cf);gE=n(DIe,"A",{id:!0,class:!0,href:!0});var t5t=s(gE);UTe=n(t5t,"SPAN",{});var a5t=s(UTe);m(Uy.$$.fragment,a5t),a5t.forEach(t),t5t.forEach(t),Ykr=i(DIe),JTe=n(DIe,"SPAN",{});var n5t=s(JTe);Kkr=r(n5t,"FlaxAutoModelForMultipleChoice"),n5t.forEach(t),DIe.forEach(t),kPe=i(c),Dr=n(c,"DIV",{class:!0});var ki=s(Dr);m(Jy.$$.fragment,ki),Zkr=i(ki),wf=n(ki,"P",{});var nY=s(wf);eSr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),YH=n(nY,"A",{href:!0});var s5t=s(YH);oSr=r(s5t,"from_pretrained()"),s5t.forEach(t),rSr=r(nY," class method or the "),KH=n(nY,"A",{href:!0});var l5t=s(KH);tSr=r(l5t,"from_config()"),l5t.forEach(t),aSr=r(nY,` class
method.`),nY.forEach(t),nSr=i(ki),Yy=n(ki,"P",{});var GIe=s(Yy);sSr=r(GIe,"This class cannot be instantiated directly using "),YTe=n(GIe,"CODE",{});var i5t=s(YTe);lSr=r(i5t,"__init__()"),i5t.forEach(t),iSr=r(GIe," (throws an error)."),GIe.forEach(t),dSr=i(ki),Pt=n(ki,"DIV",{class:!0});var Si=s(Pt);m(Ky.$$.fragment,Si),cSr=i(Si),KTe=n(Si,"P",{});var d5t=s(KTe);fSr=r(d5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d5t.forEach(t),mSr=i(Si),Af=n(Si,"P",{});var sY=s(Af);gSr=r(sY,`Note:
Loading a model from its configuration file does `),ZTe=n(sY,"STRONG",{});var c5t=s(ZTe);hSr=r(c5t,"not"),c5t.forEach(t),pSr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZH=n(sY,"A",{href:!0});var f5t=s(ZH);_Sr=r(f5t,"from_pretrained()"),f5t.forEach(t),uSr=r(sY," to load the model weights."),sY.forEach(t),bSr=i(Si),e8e=n(Si,"P",{});var m5t=s(e8e);vSr=r(m5t,"Examples:"),m5t.forEach(t),FSr=i(Si),m(Zy.$$.fragment,Si),Si.forEach(t),TSr=i(ki),$o=n(ki,"DIV",{class:!0});var Ia=s($o);m(eL.$$.fragment,Ia),MSr=i(Ia),o8e=n(Ia,"P",{});var g5t=s(o8e);ESr=r(g5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g5t.forEach(t),CSr=i(Ia),Nn=n(Ia,"P",{});var w5=s(Nn);wSr=r(w5,"The model class to instantiate is selected based on the "),r8e=n(w5,"CODE",{});var h5t=s(r8e);ASr=r(h5t,"model_type"),h5t.forEach(t),ySr=r(w5,` property of the config object (either
passed as an argument or loaded from `),t8e=n(w5,"CODE",{});var p5t=s(t8e);LSr=r(p5t,"pretrained_model_name_or_path"),p5t.forEach(t),xSr=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a8e=n(w5,"CODE",{});var _5t=s(a8e);kSr=r(_5t,"pretrained_model_name_or_path"),_5t.forEach(t),SSr=r(w5,":"),w5.forEach(t),RSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);hE=n(Vo,"LI",{});var CRe=s(hE);n8e=n(CRe,"STRONG",{});var u5t=s(n8e);BSr=r(u5t,"albert"),u5t.forEach(t),PSr=r(CRe," \u2014 "),eU=n(CRe,"A",{href:!0});var b5t=s(eU);$Sr=r(b5t,"FlaxAlbertForMultipleChoice"),b5t.forEach(t),ISr=r(CRe," (ALBERT model)"),CRe.forEach(t),qSr=i(Vo),pE=n(Vo,"LI",{});var wRe=s(pE);s8e=n(wRe,"STRONG",{});var v5t=s(s8e);NSr=r(v5t,"bert"),v5t.forEach(t),jSr=r(wRe," \u2014 "),oU=n(wRe,"A",{href:!0});var F5t=s(oU);DSr=r(F5t,"FlaxBertForMultipleChoice"),F5t.forEach(t),GSr=r(wRe," (BERT model)"),wRe.forEach(t),OSr=i(Vo),_E=n(Vo,"LI",{});var ARe=s(_E);l8e=n(ARe,"STRONG",{});var T5t=s(l8e);VSr=r(T5t,"big_bird"),T5t.forEach(t),XSr=r(ARe," \u2014 "),rU=n(ARe,"A",{href:!0});var M5t=s(rU);zSr=r(M5t,"FlaxBigBirdForMultipleChoice"),M5t.forEach(t),QSr=r(ARe," (BigBird model)"),ARe.forEach(t),WSr=i(Vo),uE=n(Vo,"LI",{});var yRe=s(uE);i8e=n(yRe,"STRONG",{});var E5t=s(i8e);HSr=r(E5t,"distilbert"),E5t.forEach(t),USr=r(yRe," \u2014 "),tU=n(yRe,"A",{href:!0});var C5t=s(tU);JSr=r(C5t,"FlaxDistilBertForMultipleChoice"),C5t.forEach(t),YSr=r(yRe," (DistilBERT model)"),yRe.forEach(t),KSr=i(Vo),bE=n(Vo,"LI",{});var LRe=s(bE);d8e=n(LRe,"STRONG",{});var w5t=s(d8e);ZSr=r(w5t,"electra"),w5t.forEach(t),eRr=r(LRe," \u2014 "),aU=n(LRe,"A",{href:!0});var A5t=s(aU);oRr=r(A5t,"FlaxElectraForMultipleChoice"),A5t.forEach(t),rRr=r(LRe," (ELECTRA model)"),LRe.forEach(t),tRr=i(Vo),vE=n(Vo,"LI",{});var xRe=s(vE);c8e=n(xRe,"STRONG",{});var y5t=s(c8e);aRr=r(y5t,"roberta"),y5t.forEach(t),nRr=r(xRe," \u2014 "),nU=n(xRe,"A",{href:!0});var L5t=s(nU);sRr=r(L5t,"FlaxRobertaForMultipleChoice"),L5t.forEach(t),lRr=r(xRe," (RoBERTa model)"),xRe.forEach(t),iRr=i(Vo),FE=n(Vo,"LI",{});var kRe=s(FE);f8e=n(kRe,"STRONG",{});var x5t=s(f8e);dRr=r(x5t,"roformer"),x5t.forEach(t),cRr=r(kRe," \u2014 "),sU=n(kRe,"A",{href:!0});var k5t=s(sU);fRr=r(k5t,"FlaxRoFormerForMultipleChoice"),k5t.forEach(t),mRr=r(kRe," (RoFormer model)"),kRe.forEach(t),gRr=i(Vo),TE=n(Vo,"LI",{});var SRe=s(TE);m8e=n(SRe,"STRONG",{});var S5t=s(m8e);hRr=r(S5t,"xlm-roberta"),S5t.forEach(t),pRr=r(SRe," \u2014 "),lU=n(SRe,"A",{href:!0});var R5t=s(lU);_Rr=r(R5t,"FlaxXLMRobertaForMultipleChoice"),R5t.forEach(t),uRr=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),Vo.forEach(t),bRr=i(Ia),g8e=n(Ia,"P",{});var B5t=s(g8e);vRr=r(B5t,"Examples:"),B5t.forEach(t),FRr=i(Ia),m(oL.$$.fragment,Ia),Ia.forEach(t),ki.forEach(t),SPe=i(c),yf=n(c,"H2",{class:!0});var OIe=s(yf);ME=n(OIe,"A",{id:!0,class:!0,href:!0});var P5t=s(ME);h8e=n(P5t,"SPAN",{});var $5t=s(h8e);m(rL.$$.fragment,$5t),$5t.forEach(t),P5t.forEach(t),TRr=i(OIe),p8e=n(OIe,"SPAN",{});var I5t=s(p8e);MRr=r(I5t,"FlaxAutoModelForNextSentencePrediction"),I5t.forEach(t),OIe.forEach(t),RPe=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(tL.$$.fragment,Ri),ERr=i(Ri),Lf=n(Ri,"P",{});var lY=s(Lf);CRr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),iU=n(lY,"A",{href:!0});var q5t=s(iU);wRr=r(q5t,"from_pretrained()"),q5t.forEach(t),ARr=r(lY," class method or the "),dU=n(lY,"A",{href:!0});var N5t=s(dU);yRr=r(N5t,"from_config()"),N5t.forEach(t),LRr=r(lY,` class
method.`),lY.forEach(t),xRr=i(Ri),aL=n(Ri,"P",{});var VIe=s(aL);kRr=r(VIe,"This class cannot be instantiated directly using "),_8e=n(VIe,"CODE",{});var j5t=s(_8e);SRr=r(j5t,"__init__()"),j5t.forEach(t),RRr=r(VIe," (throws an error)."),VIe.forEach(t),BRr=i(Ri),$t=n(Ri,"DIV",{class:!0});var Bi=s($t);m(nL.$$.fragment,Bi),PRr=i(Bi),u8e=n(Bi,"P",{});var D5t=s(u8e);$Rr=r(D5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D5t.forEach(t),IRr=i(Bi),xf=n(Bi,"P",{});var iY=s(xf);qRr=r(iY,`Note:
Loading a model from its configuration file does `),b8e=n(iY,"STRONG",{});var G5t=s(b8e);NRr=r(G5t,"not"),G5t.forEach(t),jRr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(iY,"A",{href:!0});var O5t=s(cU);DRr=r(O5t,"from_pretrained()"),O5t.forEach(t),GRr=r(iY," to load the model weights."),iY.forEach(t),ORr=i(Bi),v8e=n(Bi,"P",{});var V5t=s(v8e);VRr=r(V5t,"Examples:"),V5t.forEach(t),XRr=i(Bi),m(sL.$$.fragment,Bi),Bi.forEach(t),zRr=i(Ri),Io=n(Ri,"DIV",{class:!0});var qa=s(Io);m(lL.$$.fragment,qa),QRr=i(qa),F8e=n(qa,"P",{});var X5t=s(F8e);WRr=r(X5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),X5t.forEach(t),HRr=i(qa),jn=n(qa,"P",{});var A5=s(jn);URr=r(A5,"The model class to instantiate is selected based on the "),T8e=n(A5,"CODE",{});var z5t=s(T8e);JRr=r(z5t,"model_type"),z5t.forEach(t),YRr=r(A5,` property of the config object (either
passed as an argument or loaded from `),M8e=n(A5,"CODE",{});var Q5t=s(M8e);KRr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),ZRr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E8e=n(A5,"CODE",{});var W5t=s(E8e);eBr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),oBr=r(A5,":"),A5.forEach(t),rBr=i(qa),C8e=n(qa,"UL",{});var H5t=s(C8e);EE=n(H5t,"LI",{});var RRe=s(EE);w8e=n(RRe,"STRONG",{});var U5t=s(w8e);tBr=r(U5t,"bert"),U5t.forEach(t),aBr=r(RRe," \u2014 "),fU=n(RRe,"A",{href:!0});var J5t=s(fU);nBr=r(J5t,"FlaxBertForNextSentencePrediction"),J5t.forEach(t),sBr=r(RRe," (BERT model)"),RRe.forEach(t),H5t.forEach(t),lBr=i(qa),A8e=n(qa,"P",{});var Y5t=s(A8e);iBr=r(Y5t,"Examples:"),Y5t.forEach(t),dBr=i(qa),m(iL.$$.fragment,qa),qa.forEach(t),Ri.forEach(t),BPe=i(c),kf=n(c,"H2",{class:!0});var XIe=s(kf);CE=n(XIe,"A",{id:!0,class:!0,href:!0});var K5t=s(CE);y8e=n(K5t,"SPAN",{});var Z5t=s(y8e);m(dL.$$.fragment,Z5t),Z5t.forEach(t),K5t.forEach(t),cBr=i(XIe),L8e=n(XIe,"SPAN",{});var e3t=s(L8e);fBr=r(e3t,"FlaxAutoModelForImageClassification"),e3t.forEach(t),XIe.forEach(t),PPe=i(c),Or=n(c,"DIV",{class:!0});var Pi=s(Or);m(cL.$$.fragment,Pi),mBr=i(Pi),Sf=n(Pi,"P",{});var dY=s(Sf);gBr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),mU=n(dY,"A",{href:!0});var o3t=s(mU);hBr=r(o3t,"from_pretrained()"),o3t.forEach(t),pBr=r(dY," class method or the "),gU=n(dY,"A",{href:!0});var r3t=s(gU);_Br=r(r3t,"from_config()"),r3t.forEach(t),uBr=r(dY,` class
method.`),dY.forEach(t),bBr=i(Pi),fL=n(Pi,"P",{});var zIe=s(fL);vBr=r(zIe,"This class cannot be instantiated directly using "),x8e=n(zIe,"CODE",{});var t3t=s(x8e);FBr=r(t3t,"__init__()"),t3t.forEach(t),TBr=r(zIe," (throws an error)."),zIe.forEach(t),MBr=i(Pi),It=n(Pi,"DIV",{class:!0});var $i=s(It);m(mL.$$.fragment,$i),EBr=i($i),k8e=n($i,"P",{});var a3t=s(k8e);CBr=r(a3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),a3t.forEach(t),wBr=i($i),Rf=n($i,"P",{});var cY=s(Rf);ABr=r(cY,`Note:
Loading a model from its configuration file does `),S8e=n(cY,"STRONG",{});var n3t=s(S8e);yBr=r(n3t,"not"),n3t.forEach(t),LBr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hU=n(cY,"A",{href:!0});var s3t=s(hU);xBr=r(s3t,"from_pretrained()"),s3t.forEach(t),kBr=r(cY," to load the model weights."),cY.forEach(t),SBr=i($i),R8e=n($i,"P",{});var l3t=s(R8e);RBr=r(l3t,"Examples:"),l3t.forEach(t),BBr=i($i),m(gL.$$.fragment,$i),$i.forEach(t),PBr=i(Pi),qo=n(Pi,"DIV",{class:!0});var Na=s(qo);m(hL.$$.fragment,Na),$Br=i(Na),B8e=n(Na,"P",{});var i3t=s(B8e);IBr=r(i3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),i3t.forEach(t),qBr=i(Na),Dn=n(Na,"P",{});var y5=s(Dn);NBr=r(y5,"The model class to instantiate is selected based on the "),P8e=n(y5,"CODE",{});var d3t=s(P8e);jBr=r(d3t,"model_type"),d3t.forEach(t),DBr=r(y5,` property of the config object (either
passed as an argument or loaded from `),$8e=n(y5,"CODE",{});var c3t=s($8e);GBr=r(c3t,"pretrained_model_name_or_path"),c3t.forEach(t),OBr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I8e=n(y5,"CODE",{});var f3t=s(I8e);VBr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),XBr=r(y5,":"),y5.forEach(t),zBr=i(Na),pL=n(Na,"UL",{});var QIe=s(pL);wE=n(QIe,"LI",{});var BRe=s(wE);q8e=n(BRe,"STRONG",{});var m3t=s(q8e);QBr=r(m3t,"beit"),m3t.forEach(t),WBr=r(BRe," \u2014 "),pU=n(BRe,"A",{href:!0});var g3t=s(pU);HBr=r(g3t,"FlaxBeitForImageClassification"),g3t.forEach(t),UBr=r(BRe," (BEiT model)"),BRe.forEach(t),JBr=i(QIe),AE=n(QIe,"LI",{});var PRe=s(AE);N8e=n(PRe,"STRONG",{});var h3t=s(N8e);YBr=r(h3t,"vit"),h3t.forEach(t),KBr=r(PRe," \u2014 "),_U=n(PRe,"A",{href:!0});var p3t=s(_U);ZBr=r(p3t,"FlaxViTForImageClassification"),p3t.forEach(t),ePr=r(PRe," (ViT model)"),PRe.forEach(t),QIe.forEach(t),oPr=i(Na),j8e=n(Na,"P",{});var _3t=s(j8e);rPr=r(_3t,"Examples:"),_3t.forEach(t),tPr=i(Na),m(_L.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),$Pe=i(c),Bf=n(c,"H2",{class:!0});var WIe=s(Bf);yE=n(WIe,"A",{id:!0,class:!0,href:!0});var u3t=s(yE);D8e=n(u3t,"SPAN",{});var b3t=s(D8e);m(uL.$$.fragment,b3t),b3t.forEach(t),u3t.forEach(t),aPr=i(WIe),G8e=n(WIe,"SPAN",{});var v3t=s(G8e);nPr=r(v3t,"FlaxAutoModelForVision2Seq"),v3t.forEach(t),WIe.forEach(t),IPe=i(c),Vr=n(c,"DIV",{class:!0});var Ii=s(Vr);m(bL.$$.fragment,Ii),sPr=i(Ii),Pf=n(Ii,"P",{});var fY=s(Pf);lPr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),uU=n(fY,"A",{href:!0});var F3t=s(uU);iPr=r(F3t,"from_pretrained()"),F3t.forEach(t),dPr=r(fY," class method or the "),bU=n(fY,"A",{href:!0});var T3t=s(bU);cPr=r(T3t,"from_config()"),T3t.forEach(t),fPr=r(fY,` class
method.`),fY.forEach(t),mPr=i(Ii),vL=n(Ii,"P",{});var HIe=s(vL);gPr=r(HIe,"This class cannot be instantiated directly using "),O8e=n(HIe,"CODE",{});var M3t=s(O8e);hPr=r(M3t,"__init__()"),M3t.forEach(t),pPr=r(HIe," (throws an error)."),HIe.forEach(t),_Pr=i(Ii),qt=n(Ii,"DIV",{class:!0});var qi=s(qt);m(FL.$$.fragment,qi),uPr=i(qi),V8e=n(qi,"P",{});var E3t=s(V8e);bPr=r(E3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),E3t.forEach(t),vPr=i(qi),$f=n(qi,"P",{});var mY=s($f);FPr=r(mY,`Note:
Loading a model from its configuration file does `),X8e=n(mY,"STRONG",{});var C3t=s(X8e);TPr=r(C3t,"not"),C3t.forEach(t),MPr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(mY,"A",{href:!0});var w3t=s(vU);EPr=r(w3t,"from_pretrained()"),w3t.forEach(t),CPr=r(mY," to load the model weights."),mY.forEach(t),wPr=i(qi),z8e=n(qi,"P",{});var A3t=s(z8e);APr=r(A3t,"Examples:"),A3t.forEach(t),yPr=i(qi),m(TL.$$.fragment,qi),qi.forEach(t),LPr=i(Ii),No=n(Ii,"DIV",{class:!0});var ja=s(No);m(ML.$$.fragment,ja),xPr=i(ja),Q8e=n(ja,"P",{});var y3t=s(Q8e);kPr=r(y3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),y3t.forEach(t),SPr=i(ja),Gn=n(ja,"P",{});var L5=s(Gn);RPr=r(L5,"The model class to instantiate is selected based on the "),W8e=n(L5,"CODE",{});var L3t=s(W8e);BPr=r(L3t,"model_type"),L3t.forEach(t),PPr=r(L5,` property of the config object (either
passed as an argument or loaded from `),H8e=n(L5,"CODE",{});var x3t=s(H8e);$Pr=r(x3t,"pretrained_model_name_or_path"),x3t.forEach(t),IPr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U8e=n(L5,"CODE",{});var k3t=s(U8e);qPr=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),NPr=r(L5,":"),L5.forEach(t),jPr=i(ja),J8e=n(ja,"UL",{});var S3t=s(J8e);LE=n(S3t,"LI",{});var $Re=s(LE);Y8e=n($Re,"STRONG",{});var R3t=s(Y8e);DPr=r(R3t,"vision-encoder-decoder"),R3t.forEach(t),GPr=r($Re," \u2014 "),FU=n($Re,"A",{href:!0});var B3t=s(FU);OPr=r(B3t,"FlaxVisionEncoderDecoderModel"),B3t.forEach(t),VPr=r($Re," (Vision Encoder decoder model)"),$Re.forEach(t),S3t.forEach(t),XPr=i(ja),K8e=n(ja,"P",{});var P3t=s(K8e);zPr=r(P3t,"Examples:"),P3t.forEach(t),QPr=i(ja),m(EL.$$.fragment,ja),ja.forEach(t),Ii.forEach(t),this.h()},h(){d(ee,"name","hf:doc:metadata"),d(ee,"content",JSON.stringify(X3t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(zi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Qi,"class","relative group"),d(L7,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(x7,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertConfig"),d(k7,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig"),d(S7,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitConfig"),d(R7,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertConfig"),d(B7,"href","/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(P7,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdConfig"),d($7,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(I7,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(q7,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(N7,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertConfig"),d(j7,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineConfig"),d(D7,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPConfig"),d(G7,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertConfig"),d(O7,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextConfig"),d(V7,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLConfig"),d(X7,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(z7,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(Q7,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(W7,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaConfig"),d(H7,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(U7,"href","/docs/transformers/pr_16869/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(J7,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTConfig"),d(Y7,"href","/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrConfig"),d(K7,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Z7,"href","/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRConfig"),d(ex,"href","/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTConfig"),d(ox,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraConfig"),d(rx,"href","/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(tx,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ax,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetConfig"),d(nx,"href","/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTConfig"),d(sx,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelConfig"),d(lx,"href","/docs/transformers/pr_16869/en/model_doc/glpn#transformers.GLPNConfig"),d(ix,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Config"),d(dx,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(cx,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJConfig"),d(fx,"href","/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertConfig"),d(mx,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertConfig"),d(gx,"href","/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(hx,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(px,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(_x,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDConfig"),d(ux,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerConfig"),d(bx,"href","/docs/transformers/pr_16869/en/model_doc/luke#transformers.LukeConfig"),d(vx,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertConfig"),d(Fx,"href","/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Config"),d(Tx,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianConfig"),d(Mx,"href","/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Ex,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartConfig"),d(Cx,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(wx,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Ax,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetConfig"),d(yx,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Config"),d(Lx,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(xx,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(kx,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusConfig"),d(Sx,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Rx,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartConfig"),d(Bx,"href","/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Px,"href","/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d($x,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Ix,"href","/docs/transformers/pr_16869/en/model_doc/rag#transformers.RagConfig"),d(qx,"href","/docs/transformers/pr_16869/en/model_doc/realm#transformers.RealmConfig"),d(Nx,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerConfig"),d(jx,"href","/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetConfig"),d(Dx,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertConfig"),d(Gx,"href","/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetConfig"),d(Ox,"href","/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertConfig"),d(Vx,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaConfig"),d(Xx,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerConfig"),d(zx,"href","/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerConfig"),d(Qx,"href","/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWConfig"),d(Wx,"href","/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDConfig"),d(Hx,"href","/docs/transformers/pr_16869/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Ux,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Jx,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Yx,"href","/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterConfig"),d(Kx,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Zx,"href","/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinConfig"),d(ek,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Config"),d(ok,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasConfig"),d(rk,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartConfig"),d(tk,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ak,"href","/docs/transformers/pr_16869/en/model_doc/trocr#transformers.TrOCRConfig"),d(nk,"href","/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(sk,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(lk,"href","/docs/transformers/pr_16869/en/model_doc/van#transformers.VanConfig"),d(ik,"href","/docs/transformers/pr_16869/en/model_doc/vilt#transformers.ViltConfig"),d(dk,"href","/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ck,"href","/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(fk,"href","/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(mk,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTConfig"),d(gk,"href","/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(hk,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(pk,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMConfig"),d(_k,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMConfig"),d(uk,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMConfig"),d(bk,"href","/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(vk,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Fk,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Tk,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetConfig"),d(Mk,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"id","transformers.AutoTokenizer"),d(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dg,"href","#transformers.AutoTokenizer"),d(Hi,"class","relative group"),d(Ek,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ck,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertTokenizer"),d(wk,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartTokenizer"),d(yk,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16869/en/model_doc/barthez#transformers.BarthezTokenizer"),d(xk,"href","/docs/transformers/pr_16869/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(kk,"href","/docs/transformers/pr_16869/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Sk,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertTokenizer"),d(Rk,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Pk,"href","/docs/transformers/pr_16869/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d($k,"href","/docs/transformers/pr_16869/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Ik,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(qk,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(jk,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Gk,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Vk,"href","/docs/transformers/pr_16869/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Xk,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertTokenizer"),d(zk,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineTokenizer"),d(Wk,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPTokenizer"),d(Hk,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Jk,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16869/en/model_doc/cpm#transformers.CpmTokenizer"),d(Kk,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Zk,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaTokenizer"),d(eS,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(oS,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(rS,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(tS,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(aS,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(nS,"href","/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(sS,"href","/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(lS,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraTokenizer"),d(iS,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(dS,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(cS,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetTokenizer"),d(fS,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(mS,"href","/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(gS,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelTokenizer"),d(hS,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(pS,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(_S,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(uS,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bS,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vS,"href","/docs/transformers/pr_16869/en/model_doc/herbert#transformers.HerbertTokenizer"),d(FS,"href","/docs/transformers/pr_16869/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(TS,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(MS,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaTokenizer"),d(ES,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(CS,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(wS,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(AS,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(yS,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(LS,"href","/docs/transformers/pr_16869/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(xS,"href","/docs/transformers/pr_16869/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(kS,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDTokenizer"),d(SS,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDTokenizerFast"),d(RS,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerTokenizer"),d(BS,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(PS,"href","/docs/transformers/pr_16869/en/model_doc/luke#transformers.LukeTokenizer"),d($S,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(IS,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(qS,"href","/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(NS,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianTokenizer"),d(jS,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartTokenizer"),d(DS,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(GS,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(OS,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(VS,"href","/docs/transformers/pr_16869/en/model_doc/mluke#transformers.MLukeTokenizer"),d(XS,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(zS,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(QS,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(WS,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(HS,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.T5Tokenizer"),d(US,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.T5TokenizerFast"),d(JS,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(YS,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(KS,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ZS,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(eR,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(oR,"href","/docs/transformers/pr_16869/en/model_doc/phobert#transformers.PhobertTokenizer"),d(rR,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartTokenizer"),d(tR,"href","/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(aR,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertTokenizer"),d(nR,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertTokenizerFast"),d(sR,"href","/docs/transformers/pr_16869/en/model_doc/rag#transformers.RagTokenizer"),d(lR,"href","/docs/transformers/pr_16869/en/model_doc/realm#transformers.RealmTokenizer"),d(iR,"href","/docs/transformers/pr_16869/en/model_doc/realm#transformers.RealmTokenizerFast"),d(dR,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerTokenizer"),d(cR,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(fR,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertTokenizer"),d(mR,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(gR,"href","/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(hR,"href","/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(pR,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaTokenizer"),d(_R,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(uR,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(bR,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(vR,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(FR,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(TR,"href","/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterTokenizer"),d(MR,"href","/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(ER,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(CR,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(wR,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.T5Tokenizer"),d(AR,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.T5TokenizerFast"),d(yR,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasTokenizer"),d(LR,"href","/docs/transformers/pr_16869/en/model_doc/tapex#transformers.TapexTokenizer"),d(xR,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(kR,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(SR,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(RR,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMTokenizer"),d(BR,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(PR,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMTokenizer"),d($R,"href","/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(IR,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(qR,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(NR,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(jR,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Ui,"class","relative group"),d(DR,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(GR,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(VR,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(WR,"href","/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(UR,"href","/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(aB,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(nB,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"id","transformers.AutoProcessor"),d(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dh,"href","#transformers.AutoProcessor"),d(Ji,"class","relative group"),d(lB,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(iB,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPProcessor"),d(dB,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(cB,"href","/docs/transformers/pr_16869/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(fB,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(mB,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(gB,"href","/docs/transformers/pr_16869/en/model_doc/trocr#transformers.TrOCRProcessor"),d(hB,"href","/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(pB,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"id","transformers.AutoModel"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoModel"),d(Ki,"class","relative group"),d(_B,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uB,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bB,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vB,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertModel"),d(FB,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartModel"),d(TB,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitModel"),d(MB,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertModel"),d(EB,"href","/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(CB,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdModel"),d(wB,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(AB,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(yB,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(LB,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertModel"),d(xB,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineModel"),d(kB,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.CLIPModel"),d(SB,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertModel"),d(RB,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextModel"),d(BB,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLModel"),d(PB,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d($B,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(IB,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(qB,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaModel"),d(NB,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(jB,"href","/docs/transformers/pr_16869/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(DB,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTModel"),d(GB,"href","/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrModel"),d(OB,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertModel"),d(VB,"href","/docs/transformers/pr_16869/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(XB,"href","/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTModel"),d(zB,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraModel"),d(QB,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertModel"),d(WB,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetModel"),d(HB,"href","/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTModel"),d(UB,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelModel"),d(JB,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelBaseModel"),d(YB,"href","/docs/transformers/pr_16869/en/model_doc/glpn#transformers.GLPNModel"),d(KB,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2Model"),d(ZB,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(eP,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJModel"),d(oP,"href","/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertModel"),d(rP,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertModel"),d(tP,"href","/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(aP,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(nP,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(sP,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDModel"),d(lP,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerModel"),d(iP,"href","/docs/transformers/pr_16869/en/model_doc/luke#transformers.LukeModel"),d(dP,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertModel"),d(cP,"href","/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100Model"),d(fP,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianModel"),d(mP,"href","/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerModel"),d(gP,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartModel"),d(hP,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(pP,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertModel"),d(_P,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetModel"),d(uP,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5Model"),d(bP,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerModel"),d(vP,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(FP,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusModel"),d(TP,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverModel"),d(MP,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartModel"),d(EP,"href","/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerModel"),d(CP,"href","/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(wP,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertModel"),d(AP,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerModel"),d(yP,"href","/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetModel"),d(LP,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertModel"),d(xP,"href","/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetModel"),d(kP,"href","/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertModel"),d(SP,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaModel"),d(RP,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerModel"),d(BP,"href","/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerModel"),d(PP,"href","/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWModel"),d($P,"href","/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDModel"),d(IP,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(qP,"href","/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterModel"),d(NP,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(jP,"href","/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinModel"),d(DP,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5Model"),d(GP,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasModel"),d(OP,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(VP,"href","/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechModel"),d(XP,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(zP,"href","/docs/transformers/pr_16869/en/model_doc/van#transformers.VanModel"),d(QP,"href","/docs/transformers/pr_16869/en/model_doc/vilt#transformers.ViltModel"),d(WP,"href","/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(HP,"href","/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertModel"),d(UP,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTModel"),d(JP,"href","/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(YP,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(KP,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMModel"),d(ZP,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMModel"),d(e$,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMModel"),d(o$,"href","/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(r$,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(t$,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(a$,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetModel"),d(n$,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N_,"id","transformers.AutoModelForPreTraining"),d(N_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N_,"href","#transformers.AutoModelForPreTraining"),d(od,"class","relative group"),d(s$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(l$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(i$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d$,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForPreTraining"),d(c$,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(f$,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForPreTraining"),d(m$,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(g$,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(h$,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(p$,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(_$,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(u$,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(b$,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(v$,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForPreTraining"),d(F$,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(T$,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForPreTraining"),d(M$,"href","/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(E$,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(C$,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(w$,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(A$,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(y$,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(L$,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(x$,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(k$,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(S$,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(R$,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(B$,"href","/docs/transformers/pr_16869/en/model_doc/retribert#transformers.RetriBertModel"),d(P$,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d($$,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(I$,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(q$,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(N$,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(j$,"href","/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(D$,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(G$,"href","/docs/transformers/pr_16869/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(O$,"href","/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(V$,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(X$,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(z$,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(W$,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wu,"id","transformers.AutoModelForCausalLM"),d(wu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wu,"href","#transformers.AutoModelForCausalLM"),d(ad,"class","relative group"),d(H$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(U$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(J$,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Y$,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForCausalLM"),d(K$,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertLMHeadModel"),d(Z$,"href","/docs/transformers/pr_16869/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(eI,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(oI,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(rI,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(tI,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(aI,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(nI,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(sI,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(lI,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForCausalLM"),d(iI,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(dI,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(cI,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(fI,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianForCausalLM"),d(mI,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForCausalLM"),d(gI,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(hI,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(pI,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(_I,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(uI,"href","/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(bI,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(vI,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(FI,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(TI,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(MI,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(EI,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(CI,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(wI,"href","/docs/transformers/pr_16869/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(AI,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(yI,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(LI,"href","/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(xI,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(kI,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(SI,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i6,"id","transformers.AutoModelForMaskedLM"),d(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i6,"href","#transformers.AutoModelForMaskedLM"),d(ld,"class","relative group"),d(RI,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BI,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PI,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($I,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(II,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(qI,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(jI,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(DI,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(OI,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(VI,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(XI,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(zI,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(QI,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(WI,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(HI,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(UI,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(YI,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(KI,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(eq,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(oq,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(rq,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(tq,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(aq,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(nq,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(sq,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(iq,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(dq,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(cq,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(fq,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(mq,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(gq,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(hq,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(z6,"id","transformers.AutoModelForSeq2SeqLM"),d(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z6,"href","#transformers.AutoModelForSeq2SeqLM"),d(cd,"class","relative group"),d(pq,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_q,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uq,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bq,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(Eq,"href","/docs/transformers/pr_16869/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16869/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.MarianMTModel"),d(yq,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16869/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16869/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c1,"id","transformers.AutoModelForSequenceClassification"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.AutoModelForSequenceClassification"),d(gd,"class","relative group"),d($q,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Iq,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qq,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nq,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16869/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nb,"id","transformers.AutoModelForMultipleChoice"),d(nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nb,"href","#transformers.AutoModelForMultipleChoice"),d(_d,"class","relative group"),d(SN,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RN,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BN,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PN,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d($N,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($b,"id","transformers.AutoModelForNextSentencePrediction"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForNextSentencePrediction"),d(vd,"class","relative group"),d(ij,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fj,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(mj,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(gj,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(hj,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(pj,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ob,"id","transformers.AutoModelForTokenClassification"),d(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ob,"href","#transformers.AutoModelForTokenClassification"),d(Md,"class","relative group"),d(_j,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vj,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(yj,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(kj,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(qj,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(zj,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E2,"id","transformers.AutoModelForQuestionAnswering"),d(E2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E2,"href","#transformers.AutoModelForQuestionAnswering"),d(wd,"class","relative group"),d(Kj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zj,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oD,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16869/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16869/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(pD,"href","/docs/transformers/pr_16869/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16869/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16869/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16869/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16869/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_16869/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16869/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16869/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16869/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(ID,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(jD,"href","/docs/transformers/pr_16869/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cv,"id","transformers.AutoModelForTableQuestionAnswering"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ld,"class","relative group"),d(DD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VD,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gv,"id","transformers.AutoModelForImageClassification"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForImageClassification"),d(Sd,"class","relative group"),d(XD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QD,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WD,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitForImageClassification"),d(HD,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(UD,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(JD,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForImageClassification"),d(YD,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(KD,"href","/docs/transformers/pr_16869/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(ZD,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(eG,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(oG,"href","/docs/transformers/pr_16869/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(rG,"href","/docs/transformers/pr_16869/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(tG,"href","/docs/transformers/pr_16869/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(aG,"href","/docs/transformers/pr_16869/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(nG,"href","/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(sG,"href","/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinForImageClassification"),d(lG,"href","/docs/transformers/pr_16869/en/model_doc/van#transformers.VanForImageClassification"),d(iG,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.AutoModelForVision2Seq"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForVision2Seq"),d(Pd,"class","relative group"),d(dG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mG,"href","/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xv,"id","transformers.AutoModelForAudioClassification"),d(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xv,"href","#transformers.AutoModelForAudioClassification"),d(qd,"class","relative group"),d(gG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_G,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(uG,"href","/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(bG,"href","/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(vG,"href","/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(FG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(TG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(MG,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(EG,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jv,"id","transformers.AutoModelForAudioFrameClassification"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(CG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yG,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(LG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(xG,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(kG,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zv,"id","transformers.AutoModelForCTC"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.AutoModelForCTC"),d(Vd,"class","relative group"),d(SG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PG,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d($G,"href","/docs/transformers/pr_16869/en/model_doc/hubert#transformers.HubertForCTC"),d(IG,"href","/docs/transformers/pr_16869/en/model_doc/sew#transformers.SEWForCTC"),d(qG,"href","/docs/transformers/pr_16869/en/model_doc/sew-d#transformers.SEWDForCTC"),d(NG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(jG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(DG,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(GG,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Qd,"class","relative group"),d(OG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zG,"href","/docs/transformers/pr_16869/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(QG,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nF,"id","transformers.AutoModelForAudioXVector"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForAudioXVector"),d(Ud,"class","relative group"),d(WG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UG,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JG,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(YG,"href","/docs/transformers/pr_16869/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(KG,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(ZG,"href","/docs/transformers/pr_16869/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fF,"id","transformers.AutoModelForMaskedImageModeling"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Kd,"class","relative group"),d(eO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tO,"href","/docs/transformers/pr_16869/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(aO,"href","/docs/transformers/pr_16869/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(nO,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_F,"id","transformers.AutoModelForObjectDetection"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.AutoModelForObjectDetection"),d(rc,"class","relative group"),d(sO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vF,"id","transformers.AutoModelForImageSegmentation"),d(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vF,"href","#transformers.AutoModelForImageSegmentation"),d(nc,"class","relative group"),d(cO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gO,"href","/docs/transformers/pr_16869/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MF,"id","transformers.AutoModelForSemanticSegmentation"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForSemanticSegmentation"),d(ic,"class","relative group"),d(hO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_O,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uO,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(bO,"href","/docs/transformers/pr_16869/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(vO,"href","/docs/transformers/pr_16869/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(FO,"href","/docs/transformers/pr_16869/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LF,"id","transformers.AutoModelForInstanceSegmentation"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(TO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CO,"href","/docs/transformers/pr_16869/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SF,"id","transformers.TFAutoModel"),d(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SF,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(wO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LO,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertModel"),d(xO,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartModel"),d(kO,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertModel"),d(SO,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(RO,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(BO,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertModel"),d(PO,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.TFCLIPModel"),d($O,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertModel"),d(IO,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.TFConvNextModel"),d(qO,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLModel"),d(NO,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaModel"),d(jO,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(DO,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(GO,"href","/docs/transformers/pr_16869/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(OO,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraModel"),d(VO,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(XO,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelModel"),d(zO,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(QO,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2Model"),d(WO,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJModel"),d(HO,"href","/docs/transformers/pr_16869/en/model_doc/hubert#transformers.TFHubertModel"),d(UO,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(JO,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.TFLEDModel"),d(YO,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerModel"),d(KO,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.TFLxmertModel"),d(ZO,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.TFMarianModel"),d(eV,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.TFMBartModel"),d(oV,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(rV,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetModel"),d(tV,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.TFMT5Model"),d(aV,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(nV,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.TFPegasusModel"),d(sV,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertModel"),d(lV,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaModel"),d(iV,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerModel"),d(dV,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(cV,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5Model"),d(fV,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasModel"),d(mV,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(gV,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.TFViTModel"),d(hV,"href","/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(pV,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(_V,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMModel"),d(uV,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(bV,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.TFAutoModelForPreTraining"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(vV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MV,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(EV,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(CV,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForPreTraining"),d(wV,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(AV,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(yV,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(LV,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(xV,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(kV,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(SV,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(RV,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(BV,"href","/docs/transformers/pr_16869/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(PV,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d($V,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(IV,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(qV,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(NV,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(jV,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(DV,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(GV,"href","/docs/transformers/pr_16869/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(OV,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(VV,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(XV,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zT,"id","transformers.TFAutoModelForCausalLM"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(zV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WV,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HV,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(UV,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(JV,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(YV,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(KV,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(ZV,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(eX,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(oX,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(rX,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(tX,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(aX,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(nX,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a8,"id","transformers.TFAutoModelForImageClassification"),d(a8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a8,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(sX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dX,"href","/docs/transformers/pr_16869/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(cX,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l8,"id","transformers.TFAutoModelForMaskedLM"),d(l8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l8,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(fX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hX,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(pX,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(uX,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(vX,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(FX,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(TX,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(MX,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(EX,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(CX,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(wX,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(AX,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(yX,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LX,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(kX,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(SX,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RX,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(BX,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L8,"id","transformers.TFAutoModelForSeq2SeqLM"),d(L8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L8,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(PX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($X,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qX,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(NX,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(jX,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(GX,"href","/docs/transformers/pr_16869/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.TFMarianMTModel"),d(VX,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(zX,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j8,"id","transformers.TFAutoModelForSequenceClassification"),d(j8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j8,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(WX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UX,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JX,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16869/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16869/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16869/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m9,"id","transformers.TFAutoModelForMultipleChoice"),d(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m9,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(Mz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ez,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Cz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wz,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d($z,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Oz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zz,"href","/docs/transformers/pr_16869/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R9,"id","transformers.TFAutoModelForTokenClassification"),d(R9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R9,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(Qz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hz,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uz,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16869/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(lQ,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z9,"id","transformers.TFAutoModelForQuestionAnswering"),d(Z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z9,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(pQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Q,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bQ,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16869/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16869/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16869/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16869/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16869/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(yQ,"href","/docs/transformers/pr_16869/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16869/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_16869/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_16869/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16869/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16869/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(IQ,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16869/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.TFAutoModelForVision2Seq"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(NQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(OQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zQ,"href","/docs/transformers/pr_16869/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.FlaxAutoModel"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(QQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HQ,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UQ,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertModel"),d(JQ,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartModel"),d(YQ,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.FlaxBeitModel"),d(KQ,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertModel"),d(ZQ,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(eW,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(oW,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(rW,"href","/docs/transformers/pr_16869/en/model_doc/clip#transformers.FlaxCLIPModel"),d(tW,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(aW,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraModel"),d(nW,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(sW,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(lW,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(iW,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.FlaxMarianModel"),d(dW,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartModel"),d(cW,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5Model"),d(fW,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(mW,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(gW,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(hW,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5Model"),d(pW,"href","/docs/transformers/pr_16869/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(_W,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.FlaxViTModel"),d(uW,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(bW,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(vW,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JM,"id","transformers.FlaxAutoModelForCausalLM"),d(JM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(JM,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(FW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EW,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(CW,"href","/docs/transformers/pr_16869/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(wW,"href","/docs/transformers/pr_16869/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(AW,"href","/docs/transformers/pr_16869/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(yW,"href","/docs/transformers/pr_16869/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r4,"id","transformers.FlaxAutoModelForPreTraining"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(LW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SW,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(RW,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(PW,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d($W,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(IW,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(jW,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(DW,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(GW,"href","/docs/transformers/pr_16869/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(OW,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p4,"id","transformers.FlaxAutoModelForMaskedLM"),d(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(VW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zW,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QW,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(WW,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(HW,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(UW,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(JW,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(YW,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(KW,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(eH,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(oH,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(rH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nH,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sH,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(lH,"href","/docs/transformers/pr_16869/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(iH,"href","/docs/transformers/pr_16869/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(dH,"href","/docs/transformers/pr_16869/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(cH,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(fH,"href","/docs/transformers/pr_16869/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(mH,"href","/docs/transformers/pr_16869/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(gH,"href","/docs/transformers/pr_16869/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(hH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uH,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(bH,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(vH,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(FH,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(TH,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(MH,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(EH,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(CH,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(wH,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(AH,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(W4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(yH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kH,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_16869/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d($H,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_16869/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aE,"id","transformers.FlaxAutoModelForTokenClassification"),d(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(DH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VH,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(XH,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(zH,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(QH,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(WH,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(HH,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(UH,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(JH,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(YH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZH,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eU,"href","/docs/transformers/pr_16869/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(oU,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(rU,"href","/docs/transformers/pr_16869/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(tU,"href","/docs/transformers/pr_16869/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(aU,"href","/docs/transformers/pr_16869/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(nU,"href","/docs/transformers/pr_16869/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(sU,"href","/docs/transformers/pr_16869/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(lU,"href","/docs/transformers/pr_16869/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ME,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ME,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(iU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fU,"href","/docs/transformers/pr_16869/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CE,"id","transformers.FlaxAutoModelForImageClassification"),d(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CE,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(mU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pU,"href","/docs/transformers/pr_16869/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(_U,"href","/docs/transformers/pr_16869/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yE,"id","transformers.FlaxAutoModelForVision2Seq"),d(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(uU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vU,"href","/docs/transformers/pr_16869/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FU,"href","/docs/transformers/pr_16869/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,ee),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,Ni),b(c,Nf,u),b(c,fa,u),e(fa,ji),e(fa,Di),e(Di,x5),e(fa,jf),b(c,xe,u),b(c,co,u),e(co,Gi),e(co,On),e(On,k5),e(co,Vn),e(co,Xn),e(Xn,S5),e(co,Oi),e(co,zn),e(zn,R5),e(co,Vi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,M7),e(ue,Xi),e(Xi,E7),e(ue,C7),b(c,zo,u),b(c,Ga,u),e(Ga,w7),e(Ga,Gf),e(Gf,A7),e(Ga,UIe),b(c,IRe,u),b(c,zi,u),e(zi,Of),e(Of,gY),g(B5,gY,null),e(zi,JIe),e(zi,hY),e(hY,YIe),b(c,qRe,u),b(c,Qn,u),e(Qn,KIe),e(Qn,pY),e(pY,ZIe),e(Qn,eqe),e(Qn,_Y),e(_Y,oqe),e(Qn,rqe),b(c,NRe,u),g(P5,c,u),b(c,jRe,u),b(c,y7,u),e(y7,tqe),b(c,DRe,u),g(Vf,c,u),b(c,GRe,u),b(c,Qi,u),e(Qi,Xf),e(Xf,uY),g($5,uY,null),e(Qi,aqe),e(Qi,bY),e(bY,nqe),b(c,ORe,u),b(c,Qo,u),g(I5,Qo,null),e(Qo,sqe),e(Qo,q5),e(q5,lqe),e(q5,L7),e(L7,iqe),e(q5,dqe),e(Qo,cqe),e(Qo,N5),e(N5,fqe),e(N5,vY),e(vY,mqe),e(N5,gqe),e(Qo,hqe),e(Qo,mo),g(j5,mo,null),e(mo,pqe),e(mo,FY),e(FY,_qe),e(mo,uqe),e(mo,Wi),e(Wi,bqe),e(Wi,TY),e(TY,vqe),e(Wi,Fqe),e(Wi,MY),e(MY,Tqe),e(Wi,Mqe),e(mo,Eqe),e(mo,v),e(v,zf),e(zf,EY),e(EY,Cqe),e(zf,wqe),e(zf,x7),e(x7,Aqe),e(zf,yqe),e(v,Lqe),e(v,Qf),e(Qf,CY),e(CY,xqe),e(Qf,kqe),e(Qf,k7),e(k7,Sqe),e(Qf,Rqe),e(v,Bqe),e(v,Wf),e(Wf,wY),e(wY,Pqe),e(Wf,$qe),e(Wf,S7),e(S7,Iqe),e(Wf,qqe),e(v,Nqe),e(v,Hf),e(Hf,AY),e(AY,jqe),e(Hf,Dqe),e(Hf,R7),e(R7,Gqe),e(Hf,Oqe),e(v,Vqe),e(v,Uf),e(Uf,yY),e(yY,Xqe),e(Uf,zqe),e(Uf,B7),e(B7,Qqe),e(Uf,Wqe),e(v,Hqe),e(v,Jf),e(Jf,LY),e(LY,Uqe),e(Jf,Jqe),e(Jf,P7),e(P7,Yqe),e(Jf,Kqe),e(v,Zqe),e(v,Yf),e(Yf,xY),e(xY,eNe),e(Yf,oNe),e(Yf,$7),e($7,rNe),e(Yf,tNe),e(v,aNe),e(v,Kf),e(Kf,kY),e(kY,nNe),e(Kf,sNe),e(Kf,I7),e(I7,lNe),e(Kf,iNe),e(v,dNe),e(v,Zf),e(Zf,SY),e(SY,cNe),e(Zf,fNe),e(Zf,q7),e(q7,mNe),e(Zf,gNe),e(v,hNe),e(v,em),e(em,RY),e(RY,pNe),e(em,_Ne),e(em,N7),e(N7,uNe),e(em,bNe),e(v,vNe),e(v,om),e(om,BY),e(BY,FNe),e(om,TNe),e(om,j7),e(j7,MNe),e(om,ENe),e(v,CNe),e(v,rm),e(rm,PY),e(PY,wNe),e(rm,ANe),e(rm,D7),e(D7,yNe),e(rm,LNe),e(v,xNe),e(v,tm),e(tm,$Y),e($Y,kNe),e(tm,SNe),e(tm,G7),e(G7,RNe),e(tm,BNe),e(v,PNe),e(v,am),e(am,IY),e(IY,$Ne),e(am,INe),e(am,O7),e(O7,qNe),e(am,NNe),e(v,jNe),e(v,nm),e(nm,qY),e(qY,DNe),e(nm,GNe),e(nm,V7),e(V7,ONe),e(nm,VNe),e(v,XNe),e(v,sm),e(sm,NY),e(NY,zNe),e(sm,QNe),e(sm,X7),e(X7,WNe),e(sm,HNe),e(v,UNe),e(v,lm),e(lm,jY),e(jY,JNe),e(lm,YNe),e(lm,z7),e(z7,KNe),e(lm,ZNe),e(v,eje),e(v,im),e(im,DY),e(DY,oje),e(im,rje),e(im,Q7),e(Q7,tje),e(im,aje),e(v,nje),e(v,dm),e(dm,GY),e(GY,sje),e(dm,lje),e(dm,W7),e(W7,ije),e(dm,dje),e(v,cje),e(v,cm),e(cm,OY),e(OY,fje),e(cm,mje),e(cm,H7),e(H7,gje),e(cm,hje),e(v,pje),e(v,fm),e(fm,VY),e(VY,_je),e(fm,uje),e(fm,U7),e(U7,bje),e(fm,vje),e(v,Fje),e(v,mm),e(mm,XY),e(XY,Tje),e(mm,Mje),e(mm,J7),e(J7,Eje),e(mm,Cje),e(v,wje),e(v,gm),e(gm,zY),e(zY,Aje),e(gm,yje),e(gm,Y7),e(Y7,Lje),e(gm,xje),e(v,kje),e(v,hm),e(hm,QY),e(QY,Sje),e(hm,Rje),e(hm,K7),e(K7,Bje),e(hm,Pje),e(v,$je),e(v,pm),e(pm,WY),e(WY,Ije),e(pm,qje),e(pm,Z7),e(Z7,Nje),e(pm,jje),e(v,Dje),e(v,_m),e(_m,HY),e(HY,Gje),e(_m,Oje),e(_m,ex),e(ex,Vje),e(_m,Xje),e(v,zje),e(v,um),e(um,UY),e(UY,Qje),e(um,Wje),e(um,ox),e(ox,Hje),e(um,Uje),e(v,Jje),e(v,bm),e(bm,JY),e(JY,Yje),e(bm,Kje),e(bm,rx),e(rx,Zje),e(bm,eDe),e(v,oDe),e(v,vm),e(vm,YY),e(YY,rDe),e(vm,tDe),e(vm,tx),e(tx,aDe),e(vm,nDe),e(v,sDe),e(v,Fm),e(Fm,KY),e(KY,lDe),e(Fm,iDe),e(Fm,ax),e(ax,dDe),e(Fm,cDe),e(v,fDe),e(v,Tm),e(Tm,ZY),e(ZY,mDe),e(Tm,gDe),e(Tm,nx),e(nx,hDe),e(Tm,pDe),e(v,_De),e(v,Mm),e(Mm,eK),e(eK,uDe),e(Mm,bDe),e(Mm,sx),e(sx,vDe),e(Mm,FDe),e(v,TDe),e(v,Em),e(Em,oK),e(oK,MDe),e(Em,EDe),e(Em,lx),e(lx,CDe),e(Em,wDe),e(v,ADe),e(v,Cm),e(Cm,rK),e(rK,yDe),e(Cm,LDe),e(Cm,ix),e(ix,xDe),e(Cm,kDe),e(v,SDe),e(v,wm),e(wm,tK),e(tK,RDe),e(wm,BDe),e(wm,dx),e(dx,PDe),e(wm,$De),e(v,IDe),e(v,Am),e(Am,aK),e(aK,qDe),e(Am,NDe),e(Am,cx),e(cx,jDe),e(Am,DDe),e(v,GDe),e(v,ym),e(ym,nK),e(nK,ODe),e(ym,VDe),e(ym,fx),e(fx,XDe),e(ym,zDe),e(v,QDe),e(v,Lm),e(Lm,sK),e(sK,WDe),e(Lm,HDe),e(Lm,mx),e(mx,UDe),e(Lm,JDe),e(v,YDe),e(v,xm),e(xm,lK),e(lK,KDe),e(xm,ZDe),e(xm,gx),e(gx,eGe),e(xm,oGe),e(v,rGe),e(v,km),e(km,iK),e(iK,tGe),e(km,aGe),e(km,hx),e(hx,nGe),e(km,sGe),e(v,lGe),e(v,Sm),e(Sm,dK),e(dK,iGe),e(Sm,dGe),e(Sm,px),e(px,cGe),e(Sm,fGe),e(v,mGe),e(v,Rm),e(Rm,cK),e(cK,gGe),e(Rm,hGe),e(Rm,_x),e(_x,pGe),e(Rm,_Ge),e(v,uGe),e(v,Bm),e(Bm,fK),e(fK,bGe),e(Bm,vGe),e(Bm,ux),e(ux,FGe),e(Bm,TGe),e(v,MGe),e(v,Pm),e(Pm,mK),e(mK,EGe),e(Pm,CGe),e(Pm,bx),e(bx,wGe),e(Pm,AGe),e(v,yGe),e(v,$m),e($m,gK),e(gK,LGe),e($m,xGe),e($m,vx),e(vx,kGe),e($m,SGe),e(v,RGe),e(v,Im),e(Im,hK),e(hK,BGe),e(Im,PGe),e(Im,Fx),e(Fx,$Ge),e(Im,IGe),e(v,qGe),e(v,qm),e(qm,pK),e(pK,NGe),e(qm,jGe),e(qm,Tx),e(Tx,DGe),e(qm,GGe),e(v,OGe),e(v,Nm),e(Nm,_K),e(_K,VGe),e(Nm,XGe),e(Nm,Mx),e(Mx,zGe),e(Nm,QGe),e(v,WGe),e(v,jm),e(jm,uK),e(uK,HGe),e(jm,UGe),e(jm,Ex),e(Ex,JGe),e(jm,YGe),e(v,KGe),e(v,Dm),e(Dm,bK),e(bK,ZGe),e(Dm,eOe),e(Dm,Cx),e(Cx,oOe),e(Dm,rOe),e(v,tOe),e(v,Gm),e(Gm,vK),e(vK,aOe),e(Gm,nOe),e(Gm,wx),e(wx,sOe),e(Gm,lOe),e(v,iOe),e(v,Om),e(Om,FK),e(FK,dOe),e(Om,cOe),e(Om,Ax),e(Ax,fOe),e(Om,mOe),e(v,gOe),e(v,Vm),e(Vm,TK),e(TK,hOe),e(Vm,pOe),e(Vm,yx),e(yx,_Oe),e(Vm,uOe),e(v,bOe),e(v,Xm),e(Xm,MK),e(MK,vOe),e(Xm,FOe),e(Xm,Lx),e(Lx,TOe),e(Xm,MOe),e(v,EOe),e(v,zm),e(zm,EK),e(EK,COe),e(zm,wOe),e(zm,xx),e(xx,AOe),e(zm,yOe),e(v,LOe),e(v,Qm),e(Qm,CK),e(CK,xOe),e(Qm,kOe),e(Qm,kx),e(kx,SOe),e(Qm,ROe),e(v,BOe),e(v,Wm),e(Wm,wK),e(wK,POe),e(Wm,$Oe),e(Wm,Sx),e(Sx,IOe),e(Wm,qOe),e(v,NOe),e(v,Hm),e(Hm,AK),e(AK,jOe),e(Hm,DOe),e(Hm,Rx),e(Rx,GOe),e(Hm,OOe),e(v,VOe),e(v,Um),e(Um,yK),e(yK,XOe),e(Um,zOe),e(Um,Bx),e(Bx,QOe),e(Um,WOe),e(v,HOe),e(v,Jm),e(Jm,LK),e(LK,UOe),e(Jm,JOe),e(Jm,Px),e(Px,YOe),e(Jm,KOe),e(v,ZOe),e(v,Ym),e(Ym,xK),e(xK,eVe),e(Ym,oVe),e(Ym,$x),e($x,rVe),e(Ym,tVe),e(v,aVe),e(v,Km),e(Km,kK),e(kK,nVe),e(Km,sVe),e(Km,Ix),e(Ix,lVe),e(Km,iVe),e(v,dVe),e(v,Zm),e(Zm,SK),e(SK,cVe),e(Zm,fVe),e(Zm,qx),e(qx,mVe),e(Zm,gVe),e(v,hVe),e(v,eg),e(eg,RK),e(RK,pVe),e(eg,_Ve),e(eg,Nx),e(Nx,uVe),e(eg,bVe),e(v,vVe),e(v,og),e(og,BK),e(BK,FVe),e(og,TVe),e(og,jx),e(jx,MVe),e(og,EVe),e(v,CVe),e(v,rg),e(rg,PK),e(PK,wVe),e(rg,AVe),e(rg,Dx),e(Dx,yVe),e(rg,LVe),e(v,xVe),e(v,tg),e(tg,$K),e($K,kVe),e(tg,SVe),e(tg,Gx),e(Gx,RVe),e(tg,BVe),e(v,PVe),e(v,ag),e(ag,IK),e(IK,$Ve),e(ag,IVe),e(ag,Ox),e(Ox,qVe),e(ag,NVe),e(v,jVe),e(v,ng),e(ng,qK),e(qK,DVe),e(ng,GVe),e(ng,Vx),e(Vx,OVe),e(ng,VVe),e(v,XVe),e(v,sg),e(sg,NK),e(NK,zVe),e(sg,QVe),e(sg,Xx),e(Xx,WVe),e(sg,HVe),e(v,UVe),e(v,lg),e(lg,jK),e(jK,JVe),e(lg,YVe),e(lg,zx),e(zx,KVe),e(lg,ZVe),e(v,eXe),e(v,ig),e(ig,DK),e(DK,oXe),e(ig,rXe),e(ig,Qx),e(Qx,tXe),e(ig,aXe),e(v,nXe),e(v,dg),e(dg,GK),e(GK,sXe),e(dg,lXe),e(dg,Wx),e(Wx,iXe),e(dg,dXe),e(v,cXe),e(v,cg),e(cg,OK),e(OK,fXe),e(cg,mXe),e(cg,Hx),e(Hx,gXe),e(cg,hXe),e(v,pXe),e(v,fg),e(fg,VK),e(VK,_Xe),e(fg,uXe),e(fg,Ux),e(Ux,bXe),e(fg,vXe),e(v,FXe),e(v,mg),e(mg,XK),e(XK,TXe),e(mg,MXe),e(mg,Jx),e(Jx,EXe),e(mg,CXe),e(v,wXe),e(v,gg),e(gg,zK),e(zK,AXe),e(gg,yXe),e(gg,Yx),e(Yx,LXe),e(gg,xXe),e(v,kXe),e(v,hg),e(hg,QK),e(QK,SXe),e(hg,RXe),e(hg,Kx),e(Kx,BXe),e(hg,PXe),e(v,$Xe),e(v,pg),e(pg,WK),e(WK,IXe),e(pg,qXe),e(pg,Zx),e(Zx,NXe),e(pg,jXe),e(v,DXe),e(v,_g),e(_g,HK),e(HK,GXe),e(_g,OXe),e(_g,ek),e(ek,VXe),e(_g,XXe),e(v,zXe),e(v,ug),e(ug,UK),e(UK,QXe),e(ug,WXe),e(ug,ok),e(ok,HXe),e(ug,UXe),e(v,JXe),e(v,bg),e(bg,JK),e(JK,YXe),e(bg,KXe),e(bg,rk),e(rk,ZXe),e(bg,eze),e(v,oze),e(v,vg),e(vg,YK),e(YK,rze),e(vg,tze),e(vg,tk),e(tk,aze),e(vg,nze),e(v,sze),e(v,Fg),e(Fg,KK),e(KK,lze),e(Fg,ize),e(Fg,ak),e(ak,dze),e(Fg,cze),e(v,fze),e(v,Tg),e(Tg,ZK),e(ZK,mze),e(Tg,gze),e(Tg,nk),e(nk,hze),e(Tg,pze),e(v,_ze),e(v,Mg),e(Mg,eZ),e(eZ,uze),e(Mg,bze),e(Mg,sk),e(sk,vze),e(Mg,Fze),e(v,Tze),e(v,Eg),e(Eg,oZ),e(oZ,Mze),e(Eg,Eze),e(Eg,lk),e(lk,Cze),e(Eg,wze),e(v,Aze),e(v,Cg),e(Cg,rZ),e(rZ,yze),e(Cg,Lze),e(Cg,ik),e(ik,xze),e(Cg,kze),e(v,Sze),e(v,wg),e(wg,tZ),e(tZ,Rze),e(wg,Bze),e(wg,dk),e(dk,Pze),e(wg,$ze),e(v,Ize),e(v,Ag),e(Ag,aZ),e(aZ,qze),e(Ag,Nze),e(Ag,ck),e(ck,jze),e(Ag,Dze),e(v,Gze),e(v,yg),e(yg,nZ),e(nZ,Oze),e(yg,Vze),e(yg,fk),e(fk,Xze),e(yg,zze),e(v,Qze),e(v,Lg),e(Lg,sZ),e(sZ,Wze),e(Lg,Hze),e(Lg,mk),e(mk,Uze),e(Lg,Jze),e(v,Yze),e(v,xg),e(xg,lZ),e(lZ,Kze),e(xg,Zze),e(xg,gk),e(gk,eQe),e(xg,oQe),e(v,rQe),e(v,kg),e(kg,iZ),e(iZ,tQe),e(kg,aQe),e(kg,hk),e(hk,nQe),e(kg,sQe),e(v,lQe),e(v,Sg),e(Sg,dZ),e(dZ,iQe),e(Sg,dQe),e(Sg,pk),e(pk,cQe),e(Sg,fQe),e(v,mQe),e(v,Rg),e(Rg,cZ),e(cZ,gQe),e(Rg,hQe),e(Rg,_k),e(_k,pQe),e(Rg,_Qe),e(v,uQe),e(v,Bg),e(Bg,fZ),e(fZ,bQe),e(Bg,vQe),e(Bg,uk),e(uk,FQe),e(Bg,TQe),e(v,MQe),e(v,Pg),e(Pg,mZ),e(mZ,EQe),e(Pg,CQe),e(Pg,bk),e(bk,wQe),e(Pg,AQe),e(v,yQe),e(v,$g),e($g,gZ),e(gZ,LQe),e($g,xQe),e($g,vk),e(vk,kQe),e($g,SQe),e(v,RQe),e(v,Ig),e(Ig,hZ),e(hZ,BQe),e(Ig,PQe),e(Ig,Fk),e(Fk,$Qe),e(Ig,IQe),e(v,qQe),e(v,qg),e(qg,pZ),e(pZ,NQe),e(qg,jQe),e(qg,Tk),e(Tk,DQe),e(qg,GQe),e(v,OQe),e(v,Ng),e(Ng,_Z),e(_Z,VQe),e(Ng,XQe),e(Ng,Mk),e(Mk,zQe),e(Ng,QQe),e(mo,WQe),e(mo,uZ),e(uZ,HQe),e(mo,UQe),g(D5,mo,null),e(Qo,JQe),e(Qo,jg),g(G5,jg,null),e(jg,YQe),e(jg,bZ),e(bZ,KQe),b(c,VRe,u),b(c,Hi,u),e(Hi,Dg),e(Dg,vZ),g(O5,vZ,null),e(Hi,ZQe),e(Hi,FZ),e(FZ,eWe),b(c,XRe,u),b(c,Wo,u),g(V5,Wo,null),e(Wo,oWe),e(Wo,X5),e(X5,rWe),e(X5,Ek),e(Ek,tWe),e(X5,aWe),e(Wo,nWe),e(Wo,z5),e(z5,sWe),e(z5,TZ),e(TZ,lWe),e(z5,iWe),e(Wo,dWe),e(Wo,go),g(Q5,go,null),e(go,cWe),e(go,MZ),e(MZ,fWe),e(go,mWe),e(go,Oa),e(Oa,gWe),e(Oa,EZ),e(EZ,hWe),e(Oa,pWe),e(Oa,CZ),e(CZ,_We),e(Oa,uWe),e(Oa,wZ),e(wZ,bWe),e(Oa,vWe),e(go,FWe),e(go,E),e(E,Wn),e(Wn,AZ),e(AZ,TWe),e(Wn,MWe),e(Wn,Ck),e(Ck,EWe),e(Wn,CWe),e(Wn,wk),e(wk,wWe),e(Wn,AWe),e(E,yWe),e(E,Hn),e(Hn,yZ),e(yZ,LWe),e(Hn,xWe),e(Hn,Ak),e(Ak,kWe),e(Hn,SWe),e(Hn,yk),e(yk,RWe),e(Hn,BWe),e(E,PWe),e(E,Un),e(Un,LZ),e(LZ,$We),e(Un,IWe),e(Un,Lk),e(Lk,qWe),e(Un,NWe),e(Un,xk),e(xk,jWe),e(Un,DWe),e(E,GWe),e(E,Gg),e(Gg,xZ),e(xZ,OWe),e(Gg,VWe),e(Gg,kk),e(kk,XWe),e(Gg,zWe),e(E,QWe),e(E,Jn),e(Jn,kZ),e(kZ,WWe),e(Jn,HWe),e(Jn,Sk),e(Sk,UWe),e(Jn,JWe),e(Jn,Rk),e(Rk,YWe),e(Jn,KWe),e(E,ZWe),e(E,Og),e(Og,SZ),e(SZ,eHe),e(Og,oHe),e(Og,Bk),e(Bk,rHe),e(Og,tHe),e(E,aHe),e(E,Vg),e(Vg,RZ),e(RZ,nHe),e(Vg,sHe),e(Vg,Pk),e(Pk,lHe),e(Vg,iHe),e(E,dHe),e(E,Xg),e(Xg,BZ),e(BZ,cHe),e(Xg,fHe),e(Xg,$k),e($k,mHe),e(Xg,gHe),e(E,hHe),e(E,Yn),e(Yn,PZ),e(PZ,pHe),e(Yn,_He),e(Yn,Ik),e(Ik,uHe),e(Yn,bHe),e(Yn,qk),e(qk,vHe),e(Yn,FHe),e(E,THe),e(E,Kn),e(Kn,$Z),e($Z,MHe),e(Kn,EHe),e(Kn,Nk),e(Nk,CHe),e(Kn,wHe),e(Kn,jk),e(jk,AHe),e(Kn,yHe),e(E,LHe),e(E,Zn),e(Zn,IZ),e(IZ,xHe),e(Zn,kHe),e(Zn,Dk),e(Dk,SHe),e(Zn,RHe),e(Zn,Gk),e(Gk,BHe),e(Zn,PHe),e(E,$He),e(E,zg),e(zg,qZ),e(qZ,IHe),e(zg,qHe),e(zg,Ok),e(Ok,NHe),e(zg,jHe),e(E,DHe),e(E,Qg),e(Qg,NZ),e(NZ,GHe),e(Qg,OHe),e(Qg,Vk),e(Vk,VHe),e(Qg,XHe),e(E,zHe),e(E,es),e(es,jZ),e(jZ,QHe),e(es,WHe),e(es,Xk),e(Xk,HHe),e(es,UHe),e(es,zk),e(zk,JHe),e(es,YHe),e(E,KHe),e(E,Wg),e(Wg,DZ),e(DZ,ZHe),e(Wg,eUe),e(Wg,Qk),e(Qk,oUe),e(Wg,rUe),e(E,tUe),e(E,os),e(os,GZ),e(GZ,aUe),e(os,nUe),e(os,Wk),e(Wk,sUe),e(os,lUe),e(os,Hk),e(Hk,iUe),e(os,dUe),e(E,cUe),e(E,rs),e(rs,OZ),e(OZ,fUe),e(rs,mUe),e(rs,Uk),e(Uk,gUe),e(rs,hUe),e(rs,Jk),e(Jk,pUe),e(rs,_Ue),e(E,uUe),e(E,ts),e(ts,VZ),e(VZ,bUe),e(ts,vUe),e(ts,Yk),e(Yk,FUe),e(ts,TUe),e(ts,XZ),e(XZ,MUe),e(ts,EUe),e(E,CUe),e(E,Hg),e(Hg,zZ),e(zZ,wUe),e(Hg,AUe),e(Hg,Kk),e(Kk,yUe),e(Hg,LUe),e(E,xUe),e(E,as),e(as,QZ),e(QZ,kUe),e(as,SUe),e(as,Zk),e(Zk,RUe),e(as,BUe),e(as,eS),e(eS,PUe),e(as,$Ue),e(E,IUe),e(E,ns),e(ns,WZ),e(WZ,qUe),e(ns,NUe),e(ns,oS),e(oS,jUe),e(ns,DUe),e(ns,rS),e(rS,GUe),e(ns,OUe),e(E,VUe),e(E,ss),e(ss,HZ),e(HZ,XUe),e(ss,zUe),e(ss,tS),e(tS,QUe),e(ss,WUe),e(ss,aS),e(aS,HUe),e(ss,UUe),e(E,JUe),e(E,ls),e(ls,UZ),e(UZ,YUe),e(ls,KUe),e(ls,nS),e(nS,ZUe),e(ls,eJe),e(ls,sS),e(sS,oJe),e(ls,rJe),e(E,tJe),e(E,is),e(is,JZ),e(JZ,aJe),e(is,nJe),e(is,lS),e(lS,sJe),e(is,lJe),e(is,iS),e(iS,iJe),e(is,dJe),e(E,cJe),e(E,Ug),e(Ug,YZ),e(YZ,fJe),e(Ug,mJe),e(Ug,dS),e(dS,gJe),e(Ug,hJe),e(E,pJe),e(E,ds),e(ds,KZ),e(KZ,_Je),e(ds,uJe),e(ds,cS),e(cS,bJe),e(ds,vJe),e(ds,fS),e(fS,FJe),e(ds,TJe),e(E,MJe),e(E,Jg),e(Jg,ZZ),e(ZZ,EJe),e(Jg,CJe),e(Jg,mS),e(mS,wJe),e(Jg,AJe),e(E,yJe),e(E,cs),e(cs,eee),e(eee,LJe),e(cs,xJe),e(cs,gS),e(gS,kJe),e(cs,SJe),e(cs,hS),e(hS,RJe),e(cs,BJe),e(E,PJe),e(E,fs),e(fs,oee),e(oee,$Je),e(fs,IJe),e(fs,pS),e(pS,qJe),e(fs,NJe),e(fs,_S),e(_S,jJe),e(fs,DJe),e(E,GJe),e(E,ms),e(ms,ree),e(ree,OJe),e(ms,VJe),e(ms,uS),e(uS,XJe),e(ms,zJe),e(ms,bS),e(bS,QJe),e(ms,WJe),e(E,HJe),e(E,gs),e(gs,tee),e(tee,UJe),e(gs,JJe),e(gs,vS),e(vS,YJe),e(gs,KJe),e(gs,FS),e(FS,ZJe),e(gs,eYe),e(E,oYe),e(E,Yg),e(Yg,aee),e(aee,rYe),e(Yg,tYe),e(Yg,TS),e(TS,aYe),e(Yg,nYe),e(E,sYe),e(E,hs),e(hs,nee),e(nee,lYe),e(hs,iYe),e(hs,MS),e(MS,dYe),e(hs,cYe),e(hs,ES),e(ES,fYe),e(hs,mYe),e(E,gYe),e(E,ps),e(ps,see),e(see,hYe),e(ps,pYe),e(ps,CS),e(CS,_Ye),e(ps,uYe),e(ps,wS),e(wS,bYe),e(ps,vYe),e(E,FYe),e(E,_s),e(_s,lee),e(lee,TYe),e(_s,MYe),e(_s,AS),e(AS,EYe),e(_s,CYe),e(_s,yS),e(yS,wYe),e(_s,AYe),e(E,yYe),e(E,us),e(us,iee),e(iee,LYe),e(us,xYe),e(us,LS),e(LS,kYe),e(us,SYe),e(us,xS),e(xS,RYe),e(us,BYe),e(E,PYe),e(E,bs),e(bs,dee),e(dee,$Ye),e(bs,IYe),e(bs,kS),e(kS,qYe),e(bs,NYe),e(bs,SS),e(SS,jYe),e(bs,DYe),e(E,GYe),e(E,vs),e(vs,cee),e(cee,OYe),e(vs,VYe),e(vs,RS),e(RS,XYe),e(vs,zYe),e(vs,BS),e(BS,QYe),e(vs,WYe),e(E,HYe),e(E,Kg),e(Kg,fee),e(fee,UYe),e(Kg,JYe),e(Kg,PS),e(PS,YYe),e(Kg,KYe),e(E,ZYe),e(E,Fs),e(Fs,mee),e(mee,eKe),e(Fs,oKe),e(Fs,$S),e($S,rKe),e(Fs,tKe),e(Fs,IS),e(IS,aKe),e(Fs,nKe),e(E,sKe),e(E,Zg),e(Zg,gee),e(gee,lKe),e(Zg,iKe),e(Zg,qS),e(qS,dKe),e(Zg,cKe),e(E,fKe),e(E,eh),e(eh,hee),e(hee,mKe),e(eh,gKe),e(eh,NS),e(NS,hKe),e(eh,pKe),e(E,_Ke),e(E,Ts),e(Ts,pee),e(pee,uKe),e(Ts,bKe),e(Ts,jS),e(jS,vKe),e(Ts,FKe),e(Ts,DS),e(DS,TKe),e(Ts,MKe),e(E,EKe),e(E,Ms),e(Ms,_ee),e(_ee,CKe),e(Ms,wKe),e(Ms,GS),e(GS,AKe),e(Ms,yKe),e(Ms,OS),e(OS,LKe),e(Ms,xKe),e(E,kKe),e(E,oh),e(oh,uee),e(uee,SKe),e(oh,RKe),e(oh,VS),e(VS,BKe),e(oh,PKe),e(E,$Ke),e(E,Es),e(Es,bee),e(bee,IKe),e(Es,qKe),e(Es,XS),e(XS,NKe),e(Es,jKe),e(Es,zS),e(zS,DKe),e(Es,GKe),e(E,OKe),e(E,Cs),e(Cs,vee),e(vee,VKe),e(Cs,XKe),e(Cs,QS),e(QS,zKe),e(Cs,QKe),e(Cs,WS),e(WS,WKe),e(Cs,HKe),e(E,UKe),e(E,ws),e(ws,Fee),e(Fee,JKe),e(ws,YKe),e(ws,HS),e(HS,KKe),e(ws,ZKe),e(ws,US),e(US,eZe),e(ws,oZe),e(E,rZe),e(E,As),e(As,Tee),e(Tee,tZe),e(As,aZe),e(As,JS),e(JS,nZe),e(As,sZe),e(As,YS),e(YS,lZe),e(As,iZe),e(E,dZe),e(E,ys),e(ys,Mee),e(Mee,cZe),e(ys,fZe),e(ys,KS),e(KS,mZe),e(ys,gZe),e(ys,ZS),e(ZS,hZe),e(ys,pZe),e(E,_Ze),e(E,rh),e(rh,Eee),e(Eee,uZe),e(rh,bZe),e(rh,eR),e(eR,vZe),e(rh,FZe),e(E,TZe),e(E,th),e(th,Cee),e(Cee,MZe),e(th,EZe),e(th,oR),e(oR,CZe),e(th,wZe),e(E,AZe),e(E,ah),e(ah,wee),e(wee,yZe),e(ah,LZe),e(ah,rR),e(rR,xZe),e(ah,kZe),e(E,SZe),e(E,nh),e(nh,Aee),e(Aee,RZe),e(nh,BZe),e(nh,tR),e(tR,PZe),e(nh,$Ze),e(E,IZe),e(E,Ls),e(Ls,yee),e(yee,qZe),e(Ls,NZe),e(Ls,aR),e(aR,jZe),e(Ls,DZe),e(Ls,nR),e(nR,GZe),e(Ls,OZe),e(E,VZe),e(E,sh),e(sh,Lee),e(Lee,XZe),e(sh,zZe),e(sh,sR),e(sR,QZe),e(sh,WZe),e(E,HZe),e(E,xs),e(xs,xee),e(xee,UZe),e(xs,JZe),e(xs,lR),e(lR,YZe),e(xs,KZe),e(xs,iR),e(iR,ZZe),e(xs,eeo),e(E,oeo),e(E,ks),e(ks,kee),e(kee,reo),e(ks,teo),e(ks,dR),e(dR,aeo),e(ks,neo),e(ks,cR),e(cR,seo),e(ks,leo),e(E,ieo),e(E,Ss),e(Ss,See),e(See,deo),e(Ss,ceo),e(Ss,fR),e(fR,feo),e(Ss,meo),e(Ss,mR),e(mR,geo),e(Ss,heo),e(E,peo),e(E,Rs),e(Rs,Ree),e(Ree,_eo),e(Rs,ueo),e(Rs,gR),e(gR,beo),e(Rs,veo),e(Rs,hR),e(hR,Feo),e(Rs,Teo),e(E,Meo),e(E,Bs),e(Bs,Bee),e(Bee,Eeo),e(Bs,Ceo),e(Bs,pR),e(pR,weo),e(Bs,Aeo),e(Bs,_R),e(_R,yeo),e(Bs,Leo),e(E,xeo),e(E,Ps),e(Ps,Pee),e(Pee,keo),e(Ps,Seo),e(Ps,uR),e(uR,Reo),e(Ps,Beo),e(Ps,bR),e(bR,Peo),e(Ps,$eo),e(E,Ieo),e(E,lh),e(lh,$ee),e($ee,qeo),e(lh,Neo),e(lh,vR),e(vR,jeo),e(lh,Deo),e(E,Geo),e(E,ih),e(ih,Iee),e(Iee,Oeo),e(ih,Veo),e(ih,FR),e(FR,Xeo),e(ih,zeo),e(E,Qeo),e(E,$s),e($s,qee),e(qee,Weo),e($s,Heo),e($s,TR),e(TR,Ueo),e($s,Jeo),e($s,MR),e(MR,Yeo),e($s,Keo),e(E,Zeo),e(E,Is),e(Is,Nee),e(Nee,eoo),e(Is,ooo),e(Is,ER),e(ER,roo),e(Is,too),e(Is,CR),e(CR,aoo),e(Is,noo),e(E,soo),e(E,qs),e(qs,jee),e(jee,loo),e(qs,ioo),e(qs,wR),e(wR,doo),e(qs,coo),e(qs,AR),e(AR,foo),e(qs,moo),e(E,goo),e(E,dh),e(dh,Dee),e(Dee,hoo),e(dh,poo),e(dh,yR),e(yR,_oo),e(dh,uoo),e(E,boo),e(E,ch),e(ch,Gee),e(Gee,voo),e(ch,Foo),e(ch,LR),e(LR,Too),e(ch,Moo),e(E,Eoo),e(E,fh),e(fh,Oee),e(Oee,Coo),e(fh,woo),e(fh,xR),e(xR,Aoo),e(fh,yoo),e(E,Loo),e(E,mh),e(mh,Vee),e(Vee,xoo),e(mh,koo),e(mh,kR),e(kR,Soo),e(mh,Roo),e(E,Boo),e(E,gh),e(gh,Xee),e(Xee,Poo),e(gh,$oo),e(gh,SR),e(SR,Ioo),e(gh,qoo),e(E,Noo),e(E,Ns),e(Ns,zee),e(zee,joo),e(Ns,Doo),e(Ns,RR),e(RR,Goo),e(Ns,Ooo),e(Ns,BR),e(BR,Voo),e(Ns,Xoo),e(E,zoo),e(E,hh),e(hh,Qee),e(Qee,Qoo),e(hh,Woo),e(hh,PR),e(PR,Hoo),e(hh,Uoo),e(E,Joo),e(E,ph),e(ph,Wee),e(Wee,Yoo),e(ph,Koo),e(ph,$R),e($R,Zoo),e(ph,ero),e(E,oro),e(E,js),e(js,Hee),e(Hee,rro),e(js,tro),e(js,IR),e(IR,aro),e(js,nro),e(js,qR),e(qR,sro),e(js,lro),e(E,iro),e(E,Ds),e(Ds,Uee),e(Uee,dro),e(Ds,cro),e(Ds,NR),e(NR,fro),e(Ds,mro),e(Ds,jR),e(jR,gro),e(Ds,hro),e(go,pro),e(go,Jee),e(Jee,_ro),e(go,uro),g(W5,go,null),e(Wo,bro),e(Wo,_h),g(H5,_h,null),e(_h,vro),e(_h,Yee),e(Yee,Fro),b(c,zRe,u),b(c,Ui,u),e(Ui,uh),e(uh,Kee),g(U5,Kee,null),e(Ui,Tro),e(Ui,Zee),e(Zee,Mro),b(c,QRe,u),b(c,Ho,u),g(J5,Ho,null),e(Ho,Ero),e(Ho,Y5),e(Y5,Cro),e(Y5,DR),e(DR,wro),e(Y5,Aro),e(Ho,yro),e(Ho,K5),e(K5,Lro),e(K5,eoe),e(eoe,xro),e(K5,kro),e(Ho,Sro),e(Ho,$e),g(Z5,$e,null),e($e,Rro),e($e,ooe),e(ooe,Bro),e($e,Pro),e($e,Va),e(Va,$ro),e(Va,roe),e(roe,Iro),e(Va,qro),e(Va,toe),e(toe,Nro),e(Va,jro),e(Va,aoe),e(aoe,Dro),e(Va,Gro),e($e,Oro),e($e,J),e(J,bh),e(bh,noe),e(noe,Vro),e(bh,Xro),e(bh,GR),e(GR,zro),e(bh,Qro),e(J,Wro),e(J,vh),e(vh,soe),e(soe,Hro),e(vh,Uro),e(vh,OR),e(OR,Jro),e(vh,Yro),e(J,Kro),e(J,Fh),e(Fh,loe),e(loe,Zro),e(Fh,eto),e(Fh,VR),e(VR,oto),e(Fh,rto),e(J,tto),e(J,Th),e(Th,ioe),e(ioe,ato),e(Th,nto),e(Th,XR),e(XR,sto),e(Th,lto),e(J,ito),e(J,Mh),e(Mh,doe),e(doe,dto),e(Mh,cto),e(Mh,zR),e(zR,fto),e(Mh,mto),e(J,gto),e(J,Eh),e(Eh,coe),e(coe,hto),e(Eh,pto),e(Eh,QR),e(QR,_to),e(Eh,uto),e(J,bto),e(J,Ch),e(Ch,foe),e(foe,vto),e(Ch,Fto),e(Ch,WR),e(WR,Tto),e(Ch,Mto),e(J,Eto),e(J,wh),e(wh,moe),e(moe,Cto),e(wh,wto),e(wh,HR),e(HR,Ato),e(wh,yto),e(J,Lto),e(J,Ah),e(Ah,goe),e(goe,xto),e(Ah,kto),e(Ah,UR),e(UR,Sto),e(Ah,Rto),e(J,Bto),e(J,yh),e(yh,hoe),e(hoe,Pto),e(yh,$to),e(yh,JR),e(JR,Ito),e(yh,qto),e(J,Nto),e(J,Lh),e(Lh,poe),e(poe,jto),e(Lh,Dto),e(Lh,YR),e(YR,Gto),e(Lh,Oto),e(J,Vto),e(J,xh),e(xh,_oe),e(_oe,Xto),e(xh,zto),e(xh,KR),e(KR,Qto),e(xh,Wto),e(J,Hto),e(J,kh),e(kh,uoe),e(uoe,Uto),e(kh,Jto),e(kh,ZR),e(ZR,Yto),e(kh,Kto),e(J,Zto),e(J,Sh),e(Sh,boe),e(boe,eao),e(Sh,oao),e(Sh,eB),e(eB,rao),e(Sh,tao),e(J,aao),e(J,Rh),e(Rh,voe),e(voe,nao),e(Rh,sao),e(Rh,oB),e(oB,lao),e(Rh,iao),e(J,dao),e(J,Bh),e(Bh,Foe),e(Foe,cao),e(Bh,fao),e(Bh,rB),e(rB,mao),e(Bh,gao),e(J,hao),e(J,Ph),e(Ph,Toe),e(Toe,pao),e(Ph,_ao),e(Ph,tB),e(tB,uao),e(Ph,bao),e(J,vao),e(J,$h),e($h,Moe),e(Moe,Fao),e($h,Tao),e($h,aB),e(aB,Mao),e($h,Eao),e(J,Cao),e(J,Ih),e(Ih,Eoe),e(Eoe,wao),e(Ih,Aao),e(Ih,nB),e(nB,yao),e(Ih,Lao),e(J,xao),e(J,qh),e(qh,Coe),e(Coe,kao),e(qh,Sao),e(qh,sB),e(sB,Rao),e(qh,Bao),e($e,Pao),g(Nh,$e,null),e($e,$ao),e($e,woe),e(woe,Iao),e($e,qao),g(e3,$e,null),e(Ho,Nao),e(Ho,jh),g(o3,jh,null),e(jh,jao),e(jh,Aoe),e(Aoe,Dao),b(c,WRe,u),b(c,Ji,u),e(Ji,Dh),e(Dh,yoe),g(r3,yoe,null),e(Ji,Gao),e(Ji,Loe),e(Loe,Oao),b(c,HRe,u),b(c,Uo,u),g(t3,Uo,null),e(Uo,Vao),e(Uo,a3),e(a3,Xao),e(a3,lB),e(lB,zao),e(a3,Qao),e(Uo,Wao),e(Uo,n3),e(n3,Hao),e(n3,xoe),e(xoe,Uao),e(n3,Jao),e(Uo,Yao),e(Uo,Ie),g(s3,Ie,null),e(Ie,Kao),e(Ie,koe),e(koe,Zao),e(Ie,eno),e(Ie,Yi),e(Yi,ono),e(Yi,Soe),e(Soe,rno),e(Yi,tno),e(Yi,Roe),e(Roe,ano),e(Yi,nno),e(Ie,sno),e(Ie,ke),e(ke,Gh),e(Gh,Boe),e(Boe,lno),e(Gh,ino),e(Gh,iB),e(iB,dno),e(Gh,cno),e(ke,fno),e(ke,Oh),e(Oh,Poe),e(Poe,mno),e(Oh,gno),e(Oh,dB),e(dB,hno),e(Oh,pno),e(ke,_no),e(ke,Vh),e(Vh,$oe),e($oe,uno),e(Vh,bno),e(Vh,cB),e(cB,vno),e(Vh,Fno),e(ke,Tno),e(ke,Xh),e(Xh,Ioe),e(Ioe,Mno),e(Xh,Eno),e(Xh,fB),e(fB,Cno),e(Xh,wno),e(ke,Ano),e(ke,zh),e(zh,qoe),e(qoe,yno),e(zh,Lno),e(zh,mB),e(mB,xno),e(zh,kno),e(ke,Sno),e(ke,Qh),e(Qh,Noe),e(Noe,Rno),e(Qh,Bno),e(Qh,gB),e(gB,Pno),e(Qh,$no),e(ke,Ino),e(ke,Wh),e(Wh,joe),e(joe,qno),e(Wh,Nno),e(Wh,hB),e(hB,jno),e(Wh,Dno),e(ke,Gno),e(ke,Hh),e(Hh,Doe),e(Doe,Ono),e(Hh,Vno),e(Hh,pB),e(pB,Xno),e(Hh,zno),e(Ie,Qno),g(Uh,Ie,null),e(Ie,Wno),e(Ie,Goe),e(Goe,Hno),e(Ie,Uno),g(l3,Ie,null),e(Uo,Jno),e(Uo,Jh),g(i3,Jh,null),e(Jh,Yno),e(Jh,Ooe),e(Ooe,Kno),b(c,URe,u),b(c,Ki,u),e(Ki,Yh),e(Yh,Voe),g(d3,Voe,null),e(Ki,Zno),e(Ki,Xoe),e(Xoe,eso),b(c,JRe,u),b(c,Jo,u),g(c3,Jo,null),e(Jo,oso),e(Jo,Zi),e(Zi,rso),e(Zi,_B),e(_B,tso),e(Zi,aso),e(Zi,uB),e(uB,nso),e(Zi,sso),e(Jo,lso),e(Jo,f3),e(f3,iso),e(f3,zoe),e(zoe,dso),e(f3,cso),e(Jo,fso),e(Jo,Xr),g(m3,Xr,null),e(Xr,mso),e(Xr,Qoe),e(Qoe,gso),e(Xr,hso),e(Xr,ed),e(ed,pso),e(ed,Woe),e(Woe,_so),e(ed,uso),e(ed,bB),e(bB,bso),e(ed,vso),e(Xr,Fso),e(Xr,Hoe),e(Hoe,Tso),e(Xr,Mso),g(g3,Xr,null),e(Jo,Eso),e(Jo,qe),g(h3,qe,null),e(qe,Cso),e(qe,Uoe),e(Uoe,wso),e(qe,Aso),e(qe,Xa),e(Xa,yso),e(Xa,Joe),e(Joe,Lso),e(Xa,xso),e(Xa,Yoe),e(Yoe,kso),e(Xa,Sso),e(Xa,Koe),e(Koe,Rso),e(Xa,Bso),e(qe,Pso),e(qe,T),e(T,Kh),e(Kh,Zoe),e(Zoe,$so),e(Kh,Iso),e(Kh,vB),e(vB,qso),e(Kh,Nso),e(T,jso),e(T,Zh),e(Zh,ere),e(ere,Dso),e(Zh,Gso),e(Zh,FB),e(FB,Oso),e(Zh,Vso),e(T,Xso),e(T,ep),e(ep,ore),e(ore,zso),e(ep,Qso),e(ep,TB),e(TB,Wso),e(ep,Hso),e(T,Uso),e(T,op),e(op,rre),e(rre,Jso),e(op,Yso),e(op,MB),e(MB,Kso),e(op,Zso),e(T,elo),e(T,rp),e(rp,tre),e(tre,olo),e(rp,rlo),e(rp,EB),e(EB,tlo),e(rp,alo),e(T,nlo),e(T,tp),e(tp,are),e(are,slo),e(tp,llo),e(tp,CB),e(CB,ilo),e(tp,dlo),e(T,clo),e(T,ap),e(ap,nre),e(nre,flo),e(ap,mlo),e(ap,wB),e(wB,glo),e(ap,hlo),e(T,plo),e(T,np),e(np,sre),e(sre,_lo),e(np,ulo),e(np,AB),e(AB,blo),e(np,vlo),e(T,Flo),e(T,sp),e(sp,lre),e(lre,Tlo),e(sp,Mlo),e(sp,yB),e(yB,Elo),e(sp,Clo),e(T,wlo),e(T,lp),e(lp,ire),e(ire,Alo),e(lp,ylo),e(lp,LB),e(LB,Llo),e(lp,xlo),e(T,klo),e(T,ip),e(ip,dre),e(dre,Slo),e(ip,Rlo),e(ip,xB),e(xB,Blo),e(ip,Plo),e(T,$lo),e(T,dp),e(dp,cre),e(cre,Ilo),e(dp,qlo),e(dp,kB),e(kB,Nlo),e(dp,jlo),e(T,Dlo),e(T,cp),e(cp,fre),e(fre,Glo),e(cp,Olo),e(cp,SB),e(SB,Vlo),e(cp,Xlo),e(T,zlo),e(T,fp),e(fp,mre),e(mre,Qlo),e(fp,Wlo),e(fp,RB),e(RB,Hlo),e(fp,Ulo),e(T,Jlo),e(T,mp),e(mp,gre),e(gre,Ylo),e(mp,Klo),e(mp,BB),e(BB,Zlo),e(mp,eio),e(T,oio),e(T,gp),e(gp,hre),e(hre,rio),e(gp,tio),e(gp,PB),e(PB,aio),e(gp,nio),e(T,sio),e(T,hp),e(hp,pre),e(pre,lio),e(hp,iio),e(hp,$B),e($B,dio),e(hp,cio),e(T,fio),e(T,pp),e(pp,_re),e(_re,mio),e(pp,gio),e(pp,IB),e(IB,hio),e(pp,pio),e(T,_io),e(T,_p),e(_p,ure),e(ure,uio),e(_p,bio),e(_p,qB),e(qB,vio),e(_p,Fio),e(T,Tio),e(T,up),e(up,bre),e(bre,Mio),e(up,Eio),e(up,NB),e(NB,Cio),e(up,wio),e(T,Aio),e(T,bp),e(bp,vre),e(vre,yio),e(bp,Lio),e(bp,jB),e(jB,xio),e(bp,kio),e(T,Sio),e(T,vp),e(vp,Fre),e(Fre,Rio),e(vp,Bio),e(vp,DB),e(DB,Pio),e(vp,$io),e(T,Iio),e(T,Fp),e(Fp,Tre),e(Tre,qio),e(Fp,Nio),e(Fp,GB),e(GB,jio),e(Fp,Dio),e(T,Gio),e(T,Tp),e(Tp,Mre),e(Mre,Oio),e(Tp,Vio),e(Tp,OB),e(OB,Xio),e(Tp,zio),e(T,Qio),e(T,Mp),e(Mp,Ere),e(Ere,Wio),e(Mp,Hio),e(Mp,VB),e(VB,Uio),e(Mp,Jio),e(T,Yio),e(T,Ep),e(Ep,Cre),e(Cre,Kio),e(Ep,Zio),e(Ep,XB),e(XB,edo),e(Ep,odo),e(T,rdo),e(T,Cp),e(Cp,wre),e(wre,tdo),e(Cp,ado),e(Cp,zB),e(zB,ndo),e(Cp,sdo),e(T,ldo),e(T,wp),e(wp,Are),e(Are,ido),e(wp,ddo),e(wp,QB),e(QB,cdo),e(wp,fdo),e(T,mdo),e(T,Ap),e(Ap,yre),e(yre,gdo),e(Ap,hdo),e(Ap,WB),e(WB,pdo),e(Ap,_do),e(T,udo),e(T,yp),e(yp,Lre),e(Lre,bdo),e(yp,vdo),e(yp,HB),e(HB,Fdo),e(yp,Tdo),e(T,Mdo),e(T,Gs),e(Gs,xre),e(xre,Edo),e(Gs,Cdo),e(Gs,UB),e(UB,wdo),e(Gs,Ado),e(Gs,JB),e(JB,ydo),e(Gs,Ldo),e(T,xdo),e(T,Lp),e(Lp,kre),e(kre,kdo),e(Lp,Sdo),e(Lp,YB),e(YB,Rdo),e(Lp,Bdo),e(T,Pdo),e(T,xp),e(xp,Sre),e(Sre,$do),e(xp,Ido),e(xp,KB),e(KB,qdo),e(xp,Ndo),e(T,jdo),e(T,kp),e(kp,Rre),e(Rre,Ddo),e(kp,Gdo),e(kp,ZB),e(ZB,Odo),e(kp,Vdo),e(T,Xdo),e(T,Sp),e(Sp,Bre),e(Bre,zdo),e(Sp,Qdo),e(Sp,eP),e(eP,Wdo),e(Sp,Hdo),e(T,Udo),e(T,Rp),e(Rp,Pre),e(Pre,Jdo),e(Rp,Ydo),e(Rp,oP),e(oP,Kdo),e(Rp,Zdo),e(T,eco),e(T,Bp),e(Bp,$re),e($re,oco),e(Bp,rco),e(Bp,rP),e(rP,tco),e(Bp,aco),e(T,nco),e(T,Pp),e(Pp,Ire),e(Ire,sco),e(Pp,lco),e(Pp,tP),e(tP,ico),e(Pp,dco),e(T,cco),e(T,$p),e($p,qre),e(qre,fco),e($p,mco),e($p,aP),e(aP,gco),e($p,hco),e(T,pco),e(T,Ip),e(Ip,Nre),e(Nre,_co),e(Ip,uco),e(Ip,nP),e(nP,bco),e(Ip,vco),e(T,Fco),e(T,qp),e(qp,jre),e(jre,Tco),e(qp,Mco),e(qp,sP),e(sP,Eco),e(qp,Cco),e(T,wco),e(T,Np),e(Np,Dre),e(Dre,Aco),e(Np,yco),e(Np,lP),e(lP,Lco),e(Np,xco),e(T,kco),e(T,jp),e(jp,Gre),e(Gre,Sco),e(jp,Rco),e(jp,iP),e(iP,Bco),e(jp,Pco),e(T,$co),e(T,Dp),e(Dp,Ore),e(Ore,Ico),e(Dp,qco),e(Dp,dP),e(dP,Nco),e(Dp,jco),e(T,Dco),e(T,Gp),e(Gp,Vre),e(Vre,Gco),e(Gp,Oco),e(Gp,cP),e(cP,Vco),e(Gp,Xco),e(T,zco),e(T,Op),e(Op,Xre),e(Xre,Qco),e(Op,Wco),e(Op,fP),e(fP,Hco),e(Op,Uco),e(T,Jco),e(T,Vp),e(Vp,zre),e(zre,Yco),e(Vp,Kco),e(Vp,mP),e(mP,Zco),e(Vp,efo),e(T,ofo),e(T,Xp),e(Xp,Qre),e(Qre,rfo),e(Xp,tfo),e(Xp,gP),e(gP,afo),e(Xp,nfo),e(T,sfo),e(T,zp),e(zp,Wre),e(Wre,lfo),e(zp,ifo),e(zp,hP),e(hP,dfo),e(zp,cfo),e(T,ffo),e(T,Qp),e(Qp,Hre),e(Hre,mfo),e(Qp,gfo),e(Qp,pP),e(pP,hfo),e(Qp,pfo),e(T,_fo),e(T,Wp),e(Wp,Ure),e(Ure,ufo),e(Wp,bfo),e(Wp,_P),e(_P,vfo),e(Wp,Ffo),e(T,Tfo),e(T,Hp),e(Hp,Jre),e(Jre,Mfo),e(Hp,Efo),e(Hp,uP),e(uP,Cfo),e(Hp,wfo),e(T,Afo),e(T,Up),e(Up,Yre),e(Yre,yfo),e(Up,Lfo),e(Up,bP),e(bP,xfo),e(Up,kfo),e(T,Sfo),e(T,Jp),e(Jp,Kre),e(Kre,Rfo),e(Jp,Bfo),e(Jp,vP),e(vP,Pfo),e(Jp,$fo),e(T,Ifo),e(T,Yp),e(Yp,Zre),e(Zre,qfo),e(Yp,Nfo),e(Yp,FP),e(FP,jfo),e(Yp,Dfo),e(T,Gfo),e(T,Kp),e(Kp,ete),e(ete,Ofo),e(Kp,Vfo),e(Kp,TP),e(TP,Xfo),e(Kp,zfo),e(T,Qfo),e(T,Zp),e(Zp,ote),e(ote,Wfo),e(Zp,Hfo),e(Zp,MP),e(MP,Ufo),e(Zp,Jfo),e(T,Yfo),e(T,e_),e(e_,rte),e(rte,Kfo),e(e_,Zfo),e(e_,EP),e(EP,emo),e(e_,omo),e(T,rmo),e(T,o_),e(o_,tte),e(tte,tmo),e(o_,amo),e(o_,CP),e(CP,nmo),e(o_,smo),e(T,lmo),e(T,r_),e(r_,ate),e(ate,imo),e(r_,dmo),e(r_,wP),e(wP,cmo),e(r_,fmo),e(T,mmo),e(T,t_),e(t_,nte),e(nte,gmo),e(t_,hmo),e(t_,AP),e(AP,pmo),e(t_,_mo),e(T,umo),e(T,a_),e(a_,ste),e(ste,bmo),e(a_,vmo),e(a_,yP),e(yP,Fmo),e(a_,Tmo),e(T,Mmo),e(T,n_),e(n_,lte),e(lte,Emo),e(n_,Cmo),e(n_,LP),e(LP,wmo),e(n_,Amo),e(T,ymo),e(T,s_),e(s_,ite),e(ite,Lmo),e(s_,xmo),e(s_,xP),e(xP,kmo),e(s_,Smo),e(T,Rmo),e(T,l_),e(l_,dte),e(dte,Bmo),e(l_,Pmo),e(l_,kP),e(kP,$mo),e(l_,Imo),e(T,qmo),e(T,i_),e(i_,cte),e(cte,Nmo),e(i_,jmo),e(i_,SP),e(SP,Dmo),e(i_,Gmo),e(T,Omo),e(T,d_),e(d_,fte),e(fte,Vmo),e(d_,Xmo),e(d_,RP),e(RP,zmo),e(d_,Qmo),e(T,Wmo),e(T,c_),e(c_,mte),e(mte,Hmo),e(c_,Umo),e(c_,BP),e(BP,Jmo),e(c_,Ymo),e(T,Kmo),e(T,f_),e(f_,gte),e(gte,Zmo),e(f_,ego),e(f_,PP),e(PP,ogo),e(f_,rgo),e(T,tgo),e(T,m_),e(m_,hte),e(hte,ago),e(m_,ngo),e(m_,$P),e($P,sgo),e(m_,lgo),e(T,igo),e(T,g_),e(g_,pte),e(pte,dgo),e(g_,cgo),e(g_,IP),e(IP,fgo),e(g_,mgo),e(T,ggo),e(T,h_),e(h_,_te),e(_te,hgo),e(h_,pgo),e(h_,qP),e(qP,_go),e(h_,ugo),e(T,bgo),e(T,p_),e(p_,ute),e(ute,vgo),e(p_,Fgo),e(p_,NP),e(NP,Tgo),e(p_,Mgo),e(T,Ego),e(T,__),e(__,bte),e(bte,Cgo),e(__,wgo),e(__,jP),e(jP,Ago),e(__,ygo),e(T,Lgo),e(T,u_),e(u_,vte),e(vte,xgo),e(u_,kgo),e(u_,DP),e(DP,Sgo),e(u_,Rgo),e(T,Bgo),e(T,b_),e(b_,Fte),e(Fte,Pgo),e(b_,$go),e(b_,GP),e(GP,Igo),e(b_,qgo),e(T,Ngo),e(T,v_),e(v_,Tte),e(Tte,jgo),e(v_,Dgo),e(v_,OP),e(OP,Ggo),e(v_,Ogo),e(T,Vgo),e(T,F_),e(F_,Mte),e(Mte,Xgo),e(F_,zgo),e(F_,VP),e(VP,Qgo),e(F_,Wgo),e(T,Hgo),e(T,T_),e(T_,Ete),e(Ete,Ugo),e(T_,Jgo),e(T_,XP),e(XP,Ygo),e(T_,Kgo),e(T,Zgo),e(T,M_),e(M_,Cte),e(Cte,eho),e(M_,oho),e(M_,zP),e(zP,rho),e(M_,tho),e(T,aho),e(T,E_),e(E_,wte),e(wte,nho),e(E_,sho),e(E_,QP),e(QP,lho),e(E_,iho),e(T,dho),e(T,C_),e(C_,Ate),e(Ate,cho),e(C_,fho),e(C_,WP),e(WP,mho),e(C_,gho),e(T,hho),e(T,w_),e(w_,yte),e(yte,pho),e(w_,_ho),e(w_,HP),e(HP,uho),e(w_,bho),e(T,vho),e(T,A_),e(A_,Lte),e(Lte,Fho),e(A_,Tho),e(A_,UP),e(UP,Mho),e(A_,Eho),e(T,Cho),e(T,y_),e(y_,xte),e(xte,who),e(y_,Aho),e(y_,JP),e(JP,yho),e(y_,Lho),e(T,xho),e(T,L_),e(L_,kte),e(kte,kho),e(L_,Sho),e(L_,YP),e(YP,Rho),e(L_,Bho),e(T,Pho),e(T,x_),e(x_,Ste),e(Ste,$ho),e(x_,Iho),e(x_,KP),e(KP,qho),e(x_,Nho),e(T,jho),e(T,k_),e(k_,Rte),e(Rte,Dho),e(k_,Gho),e(k_,ZP),e(ZP,Oho),e(k_,Vho),e(T,Xho),e(T,S_),e(S_,Bte),e(Bte,zho),e(S_,Qho),e(S_,e$),e(e$,Who),e(S_,Hho),e(T,Uho),e(T,R_),e(R_,Pte),e(Pte,Jho),e(R_,Yho),e(R_,o$),e(o$,Kho),e(R_,Zho),e(T,epo),e(T,B_),e(B_,$te),e($te,opo),e(B_,rpo),e(B_,r$),e(r$,tpo),e(B_,apo),e(T,npo),e(T,P_),e(P_,Ite),e(Ite,spo),e(P_,lpo),e(P_,t$),e(t$,ipo),e(P_,dpo),e(T,cpo),e(T,$_),e($_,qte),e(qte,fpo),e($_,mpo),e($_,a$),e(a$,gpo),e($_,hpo),e(T,ppo),e(T,I_),e(I_,Nte),e(Nte,_po),e(I_,upo),e(I_,n$),e(n$,bpo),e(I_,vpo),e(qe,Fpo),e(qe,q_),e(q_,Tpo),e(q_,jte),e(jte,Mpo),e(q_,Epo),e(q_,Dte),e(Dte,Cpo),e(qe,wpo),e(qe,Gte),e(Gte,Apo),e(qe,ypo),g(p3,qe,null),b(c,YRe,u),b(c,od,u),e(od,N_),e(N_,Ote),g(_3,Ote,null),e(od,Lpo),e(od,Vte),e(Vte,xpo),b(c,KRe,u),b(c,Yo,u),g(u3,Yo,null),e(Yo,kpo),e(Yo,rd),e(rd,Spo),e(rd,s$),e(s$,Rpo),e(rd,Bpo),e(rd,l$),e(l$,Ppo),e(rd,$po),e(Yo,Ipo),e(Yo,b3),e(b3,qpo),e(b3,Xte),e(Xte,Npo),e(b3,jpo),e(Yo,Dpo),e(Yo,zr),g(v3,zr,null),e(zr,Gpo),e(zr,zte),e(zte,Opo),e(zr,Vpo),e(zr,td),e(td,Xpo),e(td,Qte),e(Qte,zpo),e(td,Qpo),e(td,i$),e(i$,Wpo),e(td,Hpo),e(zr,Upo),e(zr,Wte),e(Wte,Jpo),e(zr,Ypo),g(F3,zr,null),e(Yo,Kpo),e(Yo,Ne),g(T3,Ne,null),e(Ne,Zpo),e(Ne,Hte),e(Hte,e_o),e(Ne,o_o),e(Ne,za),e(za,r_o),e(za,Ute),e(Ute,t_o),e(za,a_o),e(za,Jte),e(Jte,n_o),e(za,s_o),e(za,Yte),e(Yte,l_o),e(za,i_o),e(Ne,d_o),e(Ne,S),e(S,j_),e(j_,Kte),e(Kte,c_o),e(j_,f_o),e(j_,d$),e(d$,m_o),e(j_,g_o),e(S,h_o),e(S,D_),e(D_,Zte),e(Zte,p_o),e(D_,__o),e(D_,c$),e(c$,u_o),e(D_,b_o),e(S,v_o),e(S,G_),e(G_,eae),e(eae,F_o),e(G_,T_o),e(G_,f$),e(f$,M_o),e(G_,E_o),e(S,C_o),e(S,O_),e(O_,oae),e(oae,w_o),e(O_,A_o),e(O_,m$),e(m$,y_o),e(O_,L_o),e(S,x_o),e(S,V_),e(V_,rae),e(rae,k_o),e(V_,S_o),e(V_,g$),e(g$,R_o),e(V_,B_o),e(S,P_o),e(S,X_),e(X_,tae),e(tae,$_o),e(X_,I_o),e(X_,h$),e(h$,q_o),e(X_,N_o),e(S,j_o),e(S,z_),e(z_,aae),e(aae,D_o),e(z_,G_o),e(z_,p$),e(p$,O_o),e(z_,V_o),e(S,X_o),e(S,Q_),e(Q_,nae),e(nae,z_o),e(Q_,Q_o),e(Q_,_$),e(_$,W_o),e(Q_,H_o),e(S,U_o),e(S,W_),e(W_,sae),e(sae,J_o),e(W_,Y_o),e(W_,u$),e(u$,K_o),e(W_,Z_o),e(S,euo),e(S,H_),e(H_,lae),e(lae,ouo),e(H_,ruo),e(H_,b$),e(b$,tuo),e(H_,auo),e(S,nuo),e(S,U_),e(U_,iae),e(iae,suo),e(U_,luo),e(U_,v$),e(v$,iuo),e(U_,duo),e(S,cuo),e(S,J_),e(J_,dae),e(dae,fuo),e(J_,muo),e(J_,F$),e(F$,guo),e(J_,huo),e(S,puo),e(S,Y_),e(Y_,cae),e(cae,_uo),e(Y_,uuo),e(Y_,T$),e(T$,buo),e(Y_,vuo),e(S,Fuo),e(S,K_),e(K_,fae),e(fae,Tuo),e(K_,Muo),e(K_,M$),e(M$,Euo),e(K_,Cuo),e(S,wuo),e(S,Z_),e(Z_,mae),e(mae,Auo),e(Z_,yuo),e(Z_,E$),e(E$,Luo),e(Z_,xuo),e(S,kuo),e(S,eu),e(eu,gae),e(gae,Suo),e(eu,Ruo),e(eu,C$),e(C$,Buo),e(eu,Puo),e(S,$uo),e(S,ou),e(ou,hae),e(hae,Iuo),e(ou,quo),e(ou,w$),e(w$,Nuo),e(ou,juo),e(S,Duo),e(S,ru),e(ru,pae),e(pae,Guo),e(ru,Ouo),e(ru,A$),e(A$,Vuo),e(ru,Xuo),e(S,zuo),e(S,tu),e(tu,_ae),e(_ae,Quo),e(tu,Wuo),e(tu,y$),e(y$,Huo),e(tu,Uuo),e(S,Juo),e(S,au),e(au,uae),e(uae,Yuo),e(au,Kuo),e(au,L$),e(L$,Zuo),e(au,e6o),e(S,o6o),e(S,nu),e(nu,bae),e(bae,r6o),e(nu,t6o),e(nu,x$),e(x$,a6o),e(nu,n6o),e(S,s6o),e(S,su),e(su,vae),e(vae,l6o),e(su,i6o),e(su,k$),e(k$,d6o),e(su,c6o),e(S,f6o),e(S,lu),e(lu,Fae),e(Fae,m6o),e(lu,g6o),e(lu,S$),e(S$,h6o),e(lu,p6o),e(S,_6o),e(S,iu),e(iu,Tae),e(Tae,u6o),e(iu,b6o),e(iu,R$),e(R$,v6o),e(iu,F6o),e(S,T6o),e(S,du),e(du,Mae),e(Mae,M6o),e(du,E6o),e(du,B$),e(B$,C6o),e(du,w6o),e(S,A6o),e(S,cu),e(cu,Eae),e(Eae,y6o),e(cu,L6o),e(cu,P$),e(P$,x6o),e(cu,k6o),e(S,S6o),e(S,fu),e(fu,Cae),e(Cae,R6o),e(fu,B6o),e(fu,$$),e($$,P6o),e(fu,$6o),e(S,I6o),e(S,mu),e(mu,wae),e(wae,q6o),e(mu,N6o),e(mu,I$),e(I$,j6o),e(mu,D6o),e(S,G6o),e(S,gu),e(gu,Aae),e(Aae,O6o),e(gu,V6o),e(gu,q$),e(q$,X6o),e(gu,z6o),e(S,Q6o),e(S,hu),e(hu,yae),e(yae,W6o),e(hu,H6o),e(hu,N$),e(N$,U6o),e(hu,J6o),e(S,Y6o),e(S,pu),e(pu,Lae),e(Lae,K6o),e(pu,Z6o),e(pu,j$),e(j$,e1o),e(pu,o1o),e(S,r1o),e(S,_u),e(_u,xae),e(xae,t1o),e(_u,a1o),e(_u,D$),e(D$,n1o),e(_u,s1o),e(S,l1o),e(S,uu),e(uu,kae),e(kae,i1o),e(uu,d1o),e(uu,G$),e(G$,c1o),e(uu,f1o),e(S,m1o),e(S,bu),e(bu,Sae),e(Sae,g1o),e(bu,h1o),e(bu,O$),e(O$,p1o),e(bu,_1o),e(S,u1o),e(S,vu),e(vu,Rae),e(Rae,b1o),e(vu,v1o),e(vu,V$),e(V$,F1o),e(vu,T1o),e(S,M1o),e(S,Fu),e(Fu,Bae),e(Bae,E1o),e(Fu,C1o),e(Fu,X$),e(X$,w1o),e(Fu,A1o),e(S,y1o),e(S,Tu),e(Tu,Pae),e(Pae,L1o),e(Tu,x1o),e(Tu,z$),e(z$,k1o),e(Tu,S1o),e(S,R1o),e(S,Mu),e(Mu,$ae),e($ae,B1o),e(Mu,P1o),e(Mu,Q$),e(Q$,$1o),e(Mu,I1o),e(S,q1o),e(S,Eu),e(Eu,Iae),e(Iae,N1o),e(Eu,j1o),e(Eu,W$),e(W$,D1o),e(Eu,G1o),e(Ne,O1o),e(Ne,Cu),e(Cu,V1o),e(Cu,qae),e(qae,X1o),e(Cu,z1o),e(Cu,Nae),e(Nae,Q1o),e(Ne,W1o),e(Ne,jae),e(jae,H1o),e(Ne,U1o),g(M3,Ne,null),b(c,ZRe,u),b(c,ad,u),e(ad,wu),e(wu,Dae),g(E3,Dae,null),e(ad,J1o),e(ad,Gae),e(Gae,Y1o),b(c,eBe,u),b(c,Ko,u),g(C3,Ko,null),e(Ko,K1o),e(Ko,nd),e(nd,Z1o),e(nd,H$),e(H$,ebo),e(nd,obo),e(nd,U$),e(U$,rbo),e(nd,tbo),e(Ko,abo),e(Ko,w3),e(w3,nbo),e(w3,Oae),e(Oae,sbo),e(w3,lbo),e(Ko,ibo),e(Ko,Qr),g(A3,Qr,null),e(Qr,dbo),e(Qr,Vae),e(Vae,cbo),e(Qr,fbo),e(Qr,sd),e(sd,mbo),e(sd,Xae),e(Xae,gbo),e(sd,hbo),e(sd,J$),e(J$,pbo),e(sd,_bo),e(Qr,ubo),e(Qr,zae),e(zae,bbo),e(Qr,vbo),g(y3,Qr,null),e(Ko,Fbo),e(Ko,je),g(L3,je,null),e(je,Tbo),e(je,Qae),e(Qae,Mbo),e(je,Ebo),e(je,Qa),e(Qa,Cbo),e(Qa,Wae),e(Wae,wbo),e(Qa,Abo),e(Qa,Hae),e(Hae,ybo),e(Qa,Lbo),e(Qa,Uae),e(Uae,xbo),e(Qa,kbo),e(je,Sbo),e(je,$),e($,Au),e(Au,Jae),e(Jae,Rbo),e(Au,Bbo),e(Au,Y$),e(Y$,Pbo),e(Au,$bo),e($,Ibo),e($,yu),e(yu,Yae),e(Yae,qbo),e(yu,Nbo),e(yu,K$),e(K$,jbo),e(yu,Dbo),e($,Gbo),e($,Lu),e(Lu,Kae),e(Kae,Obo),e(Lu,Vbo),e(Lu,Z$),e(Z$,Xbo),e(Lu,zbo),e($,Qbo),e($,xu),e(xu,Zae),e(Zae,Wbo),e(xu,Hbo),e(xu,eI),e(eI,Ubo),e(xu,Jbo),e($,Ybo),e($,ku),e(ku,ene),e(ene,Kbo),e(ku,Zbo),e(ku,oI),e(oI,e2o),e(ku,o2o),e($,r2o),e($,Su),e(Su,one),e(one,t2o),e(Su,a2o),e(Su,rI),e(rI,n2o),e(Su,s2o),e($,l2o),e($,Ru),e(Ru,rne),e(rne,i2o),e(Ru,d2o),e(Ru,tI),e(tI,c2o),e(Ru,f2o),e($,m2o),e($,Bu),e(Bu,tne),e(tne,g2o),e(Bu,h2o),e(Bu,aI),e(aI,p2o),e(Bu,_2o),e($,u2o),e($,Pu),e(Pu,ane),e(ane,b2o),e(Pu,v2o),e(Pu,nI),e(nI,F2o),e(Pu,T2o),e($,M2o),e($,$u),e($u,nne),e(nne,E2o),e($u,C2o),e($u,sI),e(sI,w2o),e($u,A2o),e($,y2o),e($,Iu),e(Iu,sne),e(sne,L2o),e(Iu,x2o),e(Iu,lI),e(lI,k2o),e(Iu,S2o),e($,R2o),e($,qu),e(qu,lne),e(lne,B2o),e(qu,P2o),e(qu,iI),e(iI,$2o),e(qu,I2o),e($,q2o),e($,Nu),e(Nu,ine),e(ine,N2o),e(Nu,j2o),e(Nu,dI),e(dI,D2o),e(Nu,G2o),e($,O2o),e($,ju),e(ju,dne),e(dne,V2o),e(ju,X2o),e(ju,cI),e(cI,z2o),e(ju,Q2o),e($,W2o),e($,Du),e(Du,cne),e(cne,H2o),e(Du,U2o),e(Du,fI),e(fI,J2o),e(Du,Y2o),e($,K2o),e($,Gu),e(Gu,fne),e(fne,Z2o),e(Gu,evo),e(Gu,mI),e(mI,ovo),e(Gu,rvo),e($,tvo),e($,Ou),e(Ou,mne),e(mne,avo),e(Ou,nvo),e(Ou,gI),e(gI,svo),e(Ou,lvo),e($,ivo),e($,Vu),e(Vu,gne),e(gne,dvo),e(Vu,cvo),e(Vu,hI),e(hI,fvo),e(Vu,mvo),e($,gvo),e($,Xu),e(Xu,hne),e(hne,hvo),e(Xu,pvo),e(Xu,pI),e(pI,_vo),e(Xu,uvo),e($,bvo),e($,zu),e(zu,pne),e(pne,vvo),e(zu,Fvo),e(zu,_I),e(_I,Tvo),e(zu,Mvo),e($,Evo),e($,Qu),e(Qu,_ne),e(_ne,Cvo),e(Qu,wvo),e(Qu,uI),e(uI,Avo),e(Qu,yvo),e($,Lvo),e($,Wu),e(Wu,une),e(une,xvo),e(Wu,kvo),e(Wu,bI),e(bI,Svo),e(Wu,Rvo),e($,Bvo),e($,Hu),e(Hu,bne),e(bne,Pvo),e(Hu,$vo),e(Hu,vI),e(vI,Ivo),e(Hu,qvo),e($,Nvo),e($,Uu),e(Uu,vne),e(vne,jvo),e(Uu,Dvo),e(Uu,FI),e(FI,Gvo),e(Uu,Ovo),e($,Vvo),e($,Ju),e(Ju,Fne),e(Fne,Xvo),e(Ju,zvo),e(Ju,TI),e(TI,Qvo),e(Ju,Wvo),e($,Hvo),e($,Yu),e(Yu,Tne),e(Tne,Uvo),e(Yu,Jvo),e(Yu,MI),e(MI,Yvo),e(Yu,Kvo),e($,Zvo),e($,Ku),e(Ku,Mne),e(Mne,eFo),e(Ku,oFo),e(Ku,EI),e(EI,rFo),e(Ku,tFo),e($,aFo),e($,Zu),e(Zu,Ene),e(Ene,nFo),e(Zu,sFo),e(Zu,CI),e(CI,lFo),e(Zu,iFo),e($,dFo),e($,e6),e(e6,Cne),e(Cne,cFo),e(e6,fFo),e(e6,wI),e(wI,mFo),e(e6,gFo),e($,hFo),e($,o6),e(o6,wne),e(wne,pFo),e(o6,_Fo),e(o6,AI),e(AI,uFo),e(o6,bFo),e($,vFo),e($,r6),e(r6,Ane),e(Ane,FFo),e(r6,TFo),e(r6,yI),e(yI,MFo),e(r6,EFo),e($,CFo),e($,t6),e(t6,yne),e(yne,wFo),e(t6,AFo),e(t6,LI),e(LI,yFo),e(t6,LFo),e($,xFo),e($,a6),e(a6,Lne),e(Lne,kFo),e(a6,SFo),e(a6,xI),e(xI,RFo),e(a6,BFo),e($,PFo),e($,n6),e(n6,xne),e(xne,$Fo),e(n6,IFo),e(n6,kI),e(kI,qFo),e(n6,NFo),e($,jFo),e($,s6),e(s6,kne),e(kne,DFo),e(s6,GFo),e(s6,SI),e(SI,OFo),e(s6,VFo),e(je,XFo),e(je,l6),e(l6,zFo),e(l6,Sne),e(Sne,QFo),e(l6,WFo),e(l6,Rne),e(Rne,HFo),e(je,UFo),e(je,Bne),e(Bne,JFo),e(je,YFo),g(x3,je,null),b(c,oBe,u),b(c,ld,u),e(ld,i6),e(i6,Pne),g(k3,Pne,null),e(ld,KFo),e(ld,$ne),e($ne,ZFo),b(c,rBe,u),b(c,Zo,u),g(S3,Zo,null),e(Zo,eTo),e(Zo,id),e(id,oTo),e(id,RI),e(RI,rTo),e(id,tTo),e(id,BI),e(BI,aTo),e(id,nTo),e(Zo,sTo),e(Zo,R3),e(R3,lTo),e(R3,Ine),e(Ine,iTo),e(R3,dTo),e(Zo,cTo),e(Zo,Wr),g(B3,Wr,null),e(Wr,fTo),e(Wr,qne),e(qne,mTo),e(Wr,gTo),e(Wr,dd),e(dd,hTo),e(dd,Nne),e(Nne,pTo),e(dd,_To),e(dd,PI),e(PI,uTo),e(dd,bTo),e(Wr,vTo),e(Wr,jne),e(jne,FTo),e(Wr,TTo),g(P3,Wr,null),e(Zo,MTo),e(Zo,De),g($3,De,null),e(De,ETo),e(De,Dne),e(Dne,CTo),e(De,wTo),e(De,Wa),e(Wa,ATo),e(Wa,Gne),e(Gne,yTo),e(Wa,LTo),e(Wa,One),e(One,xTo),e(Wa,kTo),e(Wa,Vne),e(Vne,STo),e(Wa,RTo),e(De,BTo),e(De,I),e(I,d6),e(d6,Xne),e(Xne,PTo),e(d6,$To),e(d6,$I),e($I,ITo),e(d6,qTo),e(I,NTo),e(I,c6),e(c6,zne),e(zne,jTo),e(c6,DTo),e(c6,II),e(II,GTo),e(c6,OTo),e(I,VTo),e(I,f6),e(f6,Qne),e(Qne,XTo),e(f6,zTo),e(f6,qI),e(qI,QTo),e(f6,WTo),e(I,HTo),e(I,m6),e(m6,Wne),e(Wne,UTo),e(m6,JTo),e(m6,NI),e(NI,YTo),e(m6,KTo),e(I,ZTo),e(I,g6),e(g6,Hne),e(Hne,e8o),e(g6,o8o),e(g6,jI),e(jI,r8o),e(g6,t8o),e(I,a8o),e(I,h6),e(h6,Une),e(Une,n8o),e(h6,s8o),e(h6,DI),e(DI,l8o),e(h6,i8o),e(I,d8o),e(I,p6),e(p6,Jne),e(Jne,c8o),e(p6,f8o),e(p6,GI),e(GI,m8o),e(p6,g8o),e(I,h8o),e(I,_6),e(_6,Yne),e(Yne,p8o),e(_6,_8o),e(_6,OI),e(OI,u8o),e(_6,b8o),e(I,v8o),e(I,u6),e(u6,Kne),e(Kne,F8o),e(u6,T8o),e(u6,VI),e(VI,M8o),e(u6,E8o),e(I,C8o),e(I,b6),e(b6,Zne),e(Zne,w8o),e(b6,A8o),e(b6,XI),e(XI,y8o),e(b6,L8o),e(I,x8o),e(I,v6),e(v6,ese),e(ese,k8o),e(v6,S8o),e(v6,zI),e(zI,R8o),e(v6,B8o),e(I,P8o),e(I,F6),e(F6,ose),e(ose,$8o),e(F6,I8o),e(F6,QI),e(QI,q8o),e(F6,N8o),e(I,j8o),e(I,T6),e(T6,rse),e(rse,D8o),e(T6,G8o),e(T6,WI),e(WI,O8o),e(T6,V8o),e(I,X8o),e(I,M6),e(M6,tse),e(tse,z8o),e(M6,Q8o),e(M6,HI),e(HI,W8o),e(M6,H8o),e(I,U8o),e(I,E6),e(E6,ase),e(ase,J8o),e(E6,Y8o),e(E6,UI),e(UI,K8o),e(E6,Z8o),e(I,e9o),e(I,C6),e(C6,nse),e(nse,o9o),e(C6,r9o),e(C6,JI),e(JI,t9o),e(C6,a9o),e(I,n9o),e(I,w6),e(w6,sse),e(sse,s9o),e(w6,l9o),e(w6,YI),e(YI,i9o),e(w6,d9o),e(I,c9o),e(I,A6),e(A6,lse),e(lse,f9o),e(A6,m9o),e(A6,KI),e(KI,g9o),e(A6,h9o),e(I,p9o),e(I,y6),e(y6,ise),e(ise,_9o),e(y6,u9o),e(y6,ZI),e(ZI,b9o),e(y6,v9o),e(I,F9o),e(I,L6),e(L6,dse),e(dse,T9o),e(L6,M9o),e(L6,eq),e(eq,E9o),e(L6,C9o),e(I,w9o),e(I,x6),e(x6,cse),e(cse,A9o),e(x6,y9o),e(x6,oq),e(oq,L9o),e(x6,x9o),e(I,k9o),e(I,k6),e(k6,fse),e(fse,S9o),e(k6,R9o),e(k6,rq),e(rq,B9o),e(k6,P9o),e(I,$9o),e(I,S6),e(S6,mse),e(mse,I9o),e(S6,q9o),e(S6,tq),e(tq,N9o),e(S6,j9o),e(I,D9o),e(I,R6),e(R6,gse),e(gse,G9o),e(R6,O9o),e(R6,aq),e(aq,V9o),e(R6,X9o),e(I,z9o),e(I,B6),e(B6,hse),e(hse,Q9o),e(B6,W9o),e(B6,nq),e(nq,H9o),e(B6,U9o),e(I,J9o),e(I,P6),e(P6,pse),e(pse,Y9o),e(P6,K9o),e(P6,sq),e(sq,Z9o),e(P6,eMo),e(I,oMo),e(I,$6),e($6,_se),e(_se,rMo),e($6,tMo),e($6,lq),e(lq,aMo),e($6,nMo),e(I,sMo),e(I,I6),e(I6,use),e(use,lMo),e(I6,iMo),e(I6,iq),e(iq,dMo),e(I6,cMo),e(I,fMo),e(I,q6),e(q6,bse),e(bse,mMo),e(q6,gMo),e(q6,dq),e(dq,hMo),e(q6,pMo),e(I,_Mo),e(I,N6),e(N6,vse),e(vse,uMo),e(N6,bMo),e(N6,cq),e(cq,vMo),e(N6,FMo),e(I,TMo),e(I,j6),e(j6,Fse),e(Fse,MMo),e(j6,EMo),e(j6,Tse),e(Tse,CMo),e(j6,wMo),e(I,AMo),e(I,D6),e(D6,Mse),e(Mse,yMo),e(D6,LMo),e(D6,fq),e(fq,xMo),e(D6,kMo),e(I,SMo),e(I,G6),e(G6,Ese),e(Ese,RMo),e(G6,BMo),e(G6,mq),e(mq,PMo),e(G6,$Mo),e(I,IMo),e(I,O6),e(O6,Cse),e(Cse,qMo),e(O6,NMo),e(O6,gq),e(gq,jMo),e(O6,DMo),e(I,GMo),e(I,V6),e(V6,wse),e(wse,OMo),e(V6,VMo),e(V6,hq),e(hq,XMo),e(V6,zMo),e(De,QMo),e(De,X6),e(X6,WMo),e(X6,Ase),e(Ase,HMo),e(X6,UMo),e(X6,yse),e(yse,JMo),e(De,YMo),e(De,Lse),e(Lse,KMo),e(De,ZMo),g(I3,De,null),b(c,tBe,u),b(c,cd,u),e(cd,z6),e(z6,xse),g(q3,xse,null),e(cd,e4o),e(cd,kse),e(kse,o4o),b(c,aBe,u),b(c,er,u),g(N3,er,null),e(er,r4o),e(er,fd),e(fd,t4o),e(fd,pq),e(pq,a4o),e(fd,n4o),e(fd,_q),e(_q,s4o),e(fd,l4o),e(er,i4o),e(er,j3),e(j3,d4o),e(j3,Sse),e(Sse,c4o),e(j3,f4o),e(er,m4o),e(er,Hr),g(D3,Hr,null),e(Hr,g4o),e(Hr,Rse),e(Rse,h4o),e(Hr,p4o),e(Hr,md),e(md,_4o),e(md,Bse),e(Bse,u4o),e(md,b4o),e(md,uq),e(uq,v4o),e(md,F4o),e(Hr,T4o),e(Hr,Pse),e(Pse,M4o),e(Hr,E4o),g(G3,Hr,null),e(er,C4o),e(er,Ge),g(O3,Ge,null),e(Ge,w4o),e(Ge,$se),e($se,A4o),e(Ge,y4o),e(Ge,Ha),e(Ha,L4o),e(Ha,Ise),e(Ise,x4o),e(Ha,k4o),e(Ha,qse),e(qse,S4o),e(Ha,R4o),e(Ha,Nse),e(Nse,B4o),e(Ha,P4o),e(Ge,$4o),e(Ge,ne),e(ne,Q6),e(Q6,jse),e(jse,I4o),e(Q6,q4o),e(Q6,bq),e(bq,N4o),e(Q6,j4o),e(ne,D4o),e(ne,W6),e(W6,Dse),e(Dse,G4o),e(W6,O4o),e(W6,vq),e(vq,V4o),e(W6,X4o),e(ne,z4o),e(ne,H6),e(H6,Gse),e(Gse,Q4o),e(H6,W4o),e(H6,Fq),e(Fq,H4o),e(H6,U4o),e(ne,J4o),e(ne,U6),e(U6,Ose),e(Ose,Y4o),e(U6,K4o),e(U6,Tq),e(Tq,Z4o),e(U6,eEo),e(ne,oEo),e(ne,J6),e(J6,Vse),e(Vse,rEo),e(J6,tEo),e(J6,Mq),e(Mq,aEo),e(J6,nEo),e(ne,sEo),e(ne,Y6),e(Y6,Xse),e(Xse,lEo),e(Y6,iEo),e(Y6,Eq),e(Eq,dEo),e(Y6,cEo),e(ne,fEo),e(ne,K6),e(K6,zse),e(zse,mEo),e(K6,gEo),e(K6,Cq),e(Cq,hEo),e(K6,pEo),e(ne,_Eo),e(ne,Z6),e(Z6,Qse),e(Qse,uEo),e(Z6,bEo),e(Z6,wq),e(wq,vEo),e(Z6,FEo),e(ne,TEo),e(ne,e1),e(e1,Wse),e(Wse,MEo),e(e1,EEo),e(e1,Aq),e(Aq,CEo),e(e1,wEo),e(ne,AEo),e(ne,o1),e(o1,Hse),e(Hse,yEo),e(o1,LEo),e(o1,yq),e(yq,xEo),e(o1,kEo),e(ne,SEo),e(ne,r1),e(r1,Use),e(Use,REo),e(r1,BEo),e(r1,Lq),e(Lq,PEo),e(r1,$Eo),e(ne,IEo),e(ne,t1),e(t1,Jse),e(Jse,qEo),e(t1,NEo),e(t1,xq),e(xq,jEo),e(t1,DEo),e(ne,GEo),e(ne,a1),e(a1,Yse),e(Yse,OEo),e(a1,VEo),e(a1,kq),e(kq,XEo),e(a1,zEo),e(ne,QEo),e(ne,n1),e(n1,Kse),e(Kse,WEo),e(n1,HEo),e(n1,Sq),e(Sq,UEo),e(n1,JEo),e(ne,YEo),e(ne,s1),e(s1,Zse),e(Zse,KEo),e(s1,ZEo),e(s1,Rq),e(Rq,e5o),e(s1,o5o),e(ne,r5o),e(ne,l1),e(l1,ele),e(ele,t5o),e(l1,a5o),e(l1,Bq),e(Bq,n5o),e(l1,s5o),e(ne,l5o),e(ne,i1),e(i1,ole),e(ole,i5o),e(i1,d5o),e(i1,Pq),e(Pq,c5o),e(i1,f5o),e(Ge,m5o),e(Ge,d1),e(d1,g5o),e(d1,rle),e(rle,h5o),e(d1,p5o),e(d1,tle),e(tle,_5o),e(Ge,u5o),e(Ge,ale),e(ale,b5o),e(Ge,v5o),g(V3,Ge,null),b(c,nBe,u),b(c,gd,u),e(gd,c1),e(c1,nle),g(X3,nle,null),e(gd,F5o),e(gd,sle),e(sle,T5o),b(c,sBe,u),b(c,or,u),g(z3,or,null),e(or,M5o),e(or,hd),e(hd,E5o),e(hd,$q),e($q,C5o),e(hd,w5o),e(hd,Iq),e(Iq,A5o),e(hd,y5o),e(or,L5o),e(or,Q3),e(Q3,x5o),e(Q3,lle),e(lle,k5o),e(Q3,S5o),e(or,R5o),e(or,Ur),g(W3,Ur,null),e(Ur,B5o),e(Ur,ile),e(ile,P5o),e(Ur,$5o),e(Ur,pd),e(pd,I5o),e(pd,dle),e(dle,q5o),e(pd,N5o),e(pd,qq),e(qq,j5o),e(pd,D5o),e(Ur,G5o),e(Ur,cle),e(cle,O5o),e(Ur,V5o),g(H3,Ur,null),e(or,X5o),e(or,Oe),g(U3,Oe,null),e(Oe,z5o),e(Oe,fle),e(fle,Q5o),e(Oe,W5o),e(Oe,Ua),e(Ua,H5o),e(Ua,mle),e(mle,U5o),e(Ua,J5o),e(Ua,gle),e(gle,Y5o),e(Ua,K5o),e(Ua,hle),e(hle,Z5o),e(Ua,e3o),e(Oe,o3o),e(Oe,y),e(y,f1),e(f1,ple),e(ple,r3o),e(f1,t3o),e(f1,Nq),e(Nq,a3o),e(f1,n3o),e(y,s3o),e(y,m1),e(m1,_le),e(_le,l3o),e(m1,i3o),e(m1,jq),e(jq,d3o),e(m1,c3o),e(y,f3o),e(y,g1),e(g1,ule),e(ule,m3o),e(g1,g3o),e(g1,Dq),e(Dq,h3o),e(g1,p3o),e(y,_3o),e(y,h1),e(h1,ble),e(ble,u3o),e(h1,b3o),e(h1,Gq),e(Gq,v3o),e(h1,F3o),e(y,T3o),e(y,p1),e(p1,vle),e(vle,M3o),e(p1,E3o),e(p1,Oq),e(Oq,C3o),e(p1,w3o),e(y,A3o),e(y,_1),e(_1,Fle),e(Fle,y3o),e(_1,L3o),e(_1,Vq),e(Vq,x3o),e(_1,k3o),e(y,S3o),e(y,u1),e(u1,Tle),e(Tle,R3o),e(u1,B3o),e(u1,Xq),e(Xq,P3o),e(u1,$3o),e(y,I3o),e(y,b1),e(b1,Mle),e(Mle,q3o),e(b1,N3o),e(b1,zq),e(zq,j3o),e(b1,D3o),e(y,G3o),e(y,v1),e(v1,Ele),e(Ele,O3o),e(v1,V3o),e(v1,Qq),e(Qq,X3o),e(v1,z3o),e(y,Q3o),e(y,F1),e(F1,Cle),e(Cle,W3o),e(F1,H3o),e(F1,Wq),e(Wq,U3o),e(F1,J3o),e(y,Y3o),e(y,T1),e(T1,wle),e(wle,K3o),e(T1,Z3o),e(T1,Hq),e(Hq,eCo),e(T1,oCo),e(y,rCo),e(y,M1),e(M1,Ale),e(Ale,tCo),e(M1,aCo),e(M1,Uq),e(Uq,nCo),e(M1,sCo),e(y,lCo),e(y,E1),e(E1,yle),e(yle,iCo),e(E1,dCo),e(E1,Jq),e(Jq,cCo),e(E1,fCo),e(y,mCo),e(y,C1),e(C1,Lle),e(Lle,gCo),e(C1,hCo),e(C1,Yq),e(Yq,pCo),e(C1,_Co),e(y,uCo),e(y,w1),e(w1,xle),e(xle,bCo),e(w1,vCo),e(w1,Kq),e(Kq,FCo),e(w1,TCo),e(y,MCo),e(y,A1),e(A1,kle),e(kle,ECo),e(A1,CCo),e(A1,Zq),e(Zq,wCo),e(A1,ACo),e(y,yCo),e(y,y1),e(y1,Sle),e(Sle,LCo),e(y1,xCo),e(y1,eN),e(eN,kCo),e(y1,SCo),e(y,RCo),e(y,L1),e(L1,Rle),e(Rle,BCo),e(L1,PCo),e(L1,oN),e(oN,$Co),e(L1,ICo),e(y,qCo),e(y,x1),e(x1,Ble),e(Ble,NCo),e(x1,jCo),e(x1,rN),e(rN,DCo),e(x1,GCo),e(y,OCo),e(y,k1),e(k1,Ple),e(Ple,VCo),e(k1,XCo),e(k1,tN),e(tN,zCo),e(k1,QCo),e(y,WCo),e(y,S1),e(S1,$le),e($le,HCo),e(S1,UCo),e(S1,aN),e(aN,JCo),e(S1,YCo),e(y,KCo),e(y,R1),e(R1,Ile),e(Ile,ZCo),e(R1,ewo),e(R1,nN),e(nN,owo),e(R1,rwo),e(y,two),e(y,B1),e(B1,qle),e(qle,awo),e(B1,nwo),e(B1,sN),e(sN,swo),e(B1,lwo),e(y,iwo),e(y,P1),e(P1,Nle),e(Nle,dwo),e(P1,cwo),e(P1,lN),e(lN,fwo),e(P1,mwo),e(y,gwo),e(y,$1),e($1,jle),e(jle,hwo),e($1,pwo),e($1,iN),e(iN,_wo),e($1,uwo),e(y,bwo),e(y,I1),e(I1,Dle),e(Dle,vwo),e(I1,Fwo),e(I1,dN),e(dN,Two),e(I1,Mwo),e(y,Ewo),e(y,q1),e(q1,Gle),e(Gle,Cwo),e(q1,wwo),e(q1,cN),e(cN,Awo),e(q1,ywo),e(y,Lwo),e(y,N1),e(N1,Ole),e(Ole,xwo),e(N1,kwo),e(N1,fN),e(fN,Swo),e(N1,Rwo),e(y,Bwo),e(y,j1),e(j1,Vle),e(Vle,Pwo),e(j1,$wo),e(j1,mN),e(mN,Iwo),e(j1,qwo),e(y,Nwo),e(y,D1),e(D1,Xle),e(Xle,jwo),e(D1,Dwo),e(D1,gN),e(gN,Gwo),e(D1,Owo),e(y,Vwo),e(y,G1),e(G1,zle),e(zle,Xwo),e(G1,zwo),e(G1,hN),e(hN,Qwo),e(G1,Wwo),e(y,Hwo),e(y,O1),e(O1,Qle),e(Qle,Uwo),e(O1,Jwo),e(O1,pN),e(pN,Ywo),e(O1,Kwo),e(y,Zwo),e(y,V1),e(V1,Wle),e(Wle,eAo),e(V1,oAo),e(V1,_N),e(_N,rAo),e(V1,tAo),e(y,aAo),e(y,X1),e(X1,Hle),e(Hle,nAo),e(X1,sAo),e(X1,uN),e(uN,lAo),e(X1,iAo),e(y,dAo),e(y,z1),e(z1,Ule),e(Ule,cAo),e(z1,fAo),e(z1,bN),e(bN,mAo),e(z1,gAo),e(y,hAo),e(y,Q1),e(Q1,Jle),e(Jle,pAo),e(Q1,_Ao),e(Q1,vN),e(vN,uAo),e(Q1,bAo),e(y,vAo),e(y,W1),e(W1,Yle),e(Yle,FAo),e(W1,TAo),e(W1,FN),e(FN,MAo),e(W1,EAo),e(y,CAo),e(y,H1),e(H1,Kle),e(Kle,wAo),e(H1,AAo),e(H1,TN),e(TN,yAo),e(H1,LAo),e(y,xAo),e(y,U1),e(U1,Zle),e(Zle,kAo),e(U1,SAo),e(U1,MN),e(MN,RAo),e(U1,BAo),e(y,PAo),e(y,J1),e(J1,eie),e(eie,$Ao),e(J1,IAo),e(J1,EN),e(EN,qAo),e(J1,NAo),e(y,jAo),e(y,Y1),e(Y1,oie),e(oie,DAo),e(Y1,GAo),e(Y1,CN),e(CN,OAo),e(Y1,VAo),e(y,XAo),e(y,K1),e(K1,rie),e(rie,zAo),e(K1,QAo),e(K1,wN),e(wN,WAo),e(K1,HAo),e(y,UAo),e(y,Z1),e(Z1,tie),e(tie,JAo),e(Z1,YAo),e(Z1,AN),e(AN,KAo),e(Z1,ZAo),e(y,e0o),e(y,eb),e(eb,aie),e(aie,o0o),e(eb,r0o),e(eb,yN),e(yN,t0o),e(eb,a0o),e(y,n0o),e(y,ob),e(ob,nie),e(nie,s0o),e(ob,l0o),e(ob,LN),e(LN,i0o),e(ob,d0o),e(y,c0o),e(y,rb),e(rb,sie),e(sie,f0o),e(rb,m0o),e(rb,xN),e(xN,g0o),e(rb,h0o),e(y,p0o),e(y,tb),e(tb,lie),e(lie,_0o),e(tb,u0o),e(tb,kN),e(kN,b0o),e(tb,v0o),e(Oe,F0o),e(Oe,ab),e(ab,T0o),e(ab,iie),e(iie,M0o),e(ab,E0o),e(ab,die),e(die,C0o),e(Oe,w0o),e(Oe,cie),e(cie,A0o),e(Oe,y0o),g(J3,Oe,null),b(c,lBe,u),b(c,_d,u),e(_d,nb),e(nb,fie),g(Y3,fie,null),e(_d,L0o),e(_d,mie),e(mie,x0o),b(c,iBe,u),b(c,rr,u),g(K3,rr,null),e(rr,k0o),e(rr,ud),e(ud,S0o),e(ud,SN),e(SN,R0o),e(ud,B0o),e(ud,RN),e(RN,P0o),e(ud,$0o),e(rr,I0o),e(rr,Z3),e(Z3,q0o),e(Z3,gie),e(gie,N0o),e(Z3,j0o),e(rr,D0o),e(rr,Jr),g(eC,Jr,null),e(Jr,G0o),e(Jr,hie),e(hie,O0o),e(Jr,V0o),e(Jr,bd),e(bd,X0o),e(bd,pie),e(pie,z0o),e(bd,Q0o),e(bd,BN),e(BN,W0o),e(bd,H0o),e(Jr,U0o),e(Jr,_ie),e(_ie,J0o),e(Jr,Y0o),g(oC,Jr,null),e(rr,K0o),e(rr,Ve),g(rC,Ve,null),e(Ve,Z0o),e(Ve,uie),e(uie,eyo),e(Ve,oyo),e(Ve,Ja),e(Ja,ryo),e(Ja,bie),e(bie,tyo),e(Ja,ayo),e(Ja,vie),e(vie,nyo),e(Ja,syo),e(Ja,Fie),e(Fie,lyo),e(Ja,iyo),e(Ve,dyo),e(Ve,G),e(G,sb),e(sb,Tie),e(Tie,cyo),e(sb,fyo),e(sb,PN),e(PN,myo),e(sb,gyo),e(G,hyo),e(G,lb),e(lb,Mie),e(Mie,pyo),e(lb,_yo),e(lb,$N),e($N,uyo),e(lb,byo),e(G,vyo),e(G,ib),e(ib,Eie),e(Eie,Fyo),e(ib,Tyo),e(ib,IN),e(IN,Myo),e(ib,Eyo),e(G,Cyo),e(G,db),e(db,Cie),e(Cie,wyo),e(db,Ayo),e(db,qN),e(qN,yyo),e(db,Lyo),e(G,xyo),e(G,cb),e(cb,wie),e(wie,kyo),e(cb,Syo),e(cb,NN),e(NN,Ryo),e(cb,Byo),e(G,Pyo),e(G,fb),e(fb,Aie),e(Aie,$yo),e(fb,Iyo),e(fb,jN),e(jN,qyo),e(fb,Nyo),e(G,jyo),e(G,mb),e(mb,yie),e(yie,Dyo),e(mb,Gyo),e(mb,DN),e(DN,Oyo),e(mb,Vyo),e(G,Xyo),e(G,gb),e(gb,Lie),e(Lie,zyo),e(gb,Qyo),e(gb,GN),e(GN,Wyo),e(gb,Hyo),e(G,Uyo),e(G,hb),e(hb,xie),e(xie,Jyo),e(hb,Yyo),e(hb,ON),e(ON,Kyo),e(hb,Zyo),e(G,eLo),e(G,pb),e(pb,kie),e(kie,oLo),e(pb,rLo),e(pb,VN),e(VN,tLo),e(pb,aLo),e(G,nLo),e(G,_b),e(_b,Sie),e(Sie,sLo),e(_b,lLo),e(_b,XN),e(XN,iLo),e(_b,dLo),e(G,cLo),e(G,ub),e(ub,Rie),e(Rie,fLo),e(ub,mLo),e(ub,zN),e(zN,gLo),e(ub,hLo),e(G,pLo),e(G,bb),e(bb,Bie),e(Bie,_Lo),e(bb,uLo),e(bb,QN),e(QN,bLo),e(bb,vLo),e(G,FLo),e(G,vb),e(vb,Pie),e(Pie,TLo),e(vb,MLo),e(vb,WN),e(WN,ELo),e(vb,CLo),e(G,wLo),e(G,Fb),e(Fb,$ie),e($ie,ALo),e(Fb,yLo),e(Fb,HN),e(HN,LLo),e(Fb,xLo),e(G,kLo),e(G,Tb),e(Tb,Iie),e(Iie,SLo),e(Tb,RLo),e(Tb,UN),e(UN,BLo),e(Tb,PLo),e(G,$Lo),e(G,Mb),e(Mb,qie),e(qie,ILo),e(Mb,qLo),e(Mb,JN),e(JN,NLo),e(Mb,jLo),e(G,DLo),e(G,Eb),e(Eb,Nie),e(Nie,GLo),e(Eb,OLo),e(Eb,YN),e(YN,VLo),e(Eb,XLo),e(G,zLo),e(G,Cb),e(Cb,jie),e(jie,QLo),e(Cb,WLo),e(Cb,KN),e(KN,HLo),e(Cb,ULo),e(G,JLo),e(G,wb),e(wb,Die),e(Die,YLo),e(wb,KLo),e(wb,ZN),e(ZN,ZLo),e(wb,e7o),e(G,o7o),e(G,Ab),e(Ab,Gie),e(Gie,r7o),e(Ab,t7o),e(Ab,ej),e(ej,a7o),e(Ab,n7o),e(G,s7o),e(G,yb),e(yb,Oie),e(Oie,l7o),e(yb,i7o),e(yb,oj),e(oj,d7o),e(yb,c7o),e(G,f7o),e(G,Lb),e(Lb,Vie),e(Vie,m7o),e(Lb,g7o),e(Lb,rj),e(rj,h7o),e(Lb,p7o),e(G,_7o),e(G,xb),e(xb,Xie),e(Xie,u7o),e(xb,b7o),e(xb,tj),e(tj,v7o),e(xb,F7o),e(G,T7o),e(G,kb),e(kb,zie),e(zie,M7o),e(kb,E7o),e(kb,aj),e(aj,C7o),e(kb,w7o),e(G,A7o),e(G,Sb),e(Sb,Qie),e(Qie,y7o),e(Sb,L7o),e(Sb,nj),e(nj,x7o),e(Sb,k7o),e(G,S7o),e(G,Rb),e(Rb,Wie),e(Wie,R7o),e(Rb,B7o),e(Rb,sj),e(sj,P7o),e(Rb,$7o),e(G,I7o),e(G,Bb),e(Bb,Hie),e(Hie,q7o),e(Bb,N7o),e(Bb,lj),e(lj,j7o),e(Bb,D7o),e(Ve,G7o),e(Ve,Pb),e(Pb,O7o),e(Pb,Uie),e(Uie,V7o),e(Pb,X7o),e(Pb,Jie),e(Jie,z7o),e(Ve,Q7o),e(Ve,Yie),e(Yie,W7o),e(Ve,H7o),g(tC,Ve,null),b(c,dBe,u),b(c,vd,u),e(vd,$b),e($b,Kie),g(aC,Kie,null),e(vd,U7o),e(vd,Zie),e(Zie,J7o),b(c,cBe,u),b(c,tr,u),g(nC,tr,null),e(tr,Y7o),e(tr,Fd),e(Fd,K7o),e(Fd,ij),e(ij,Z7o),e(Fd,exo),e(Fd,dj),e(dj,oxo),e(Fd,rxo),e(tr,txo),e(tr,sC),e(sC,axo),e(sC,ede),e(ede,nxo),e(sC,sxo),e(tr,lxo),e(tr,Yr),g(lC,Yr,null),e(Yr,ixo),e(Yr,ode),e(ode,dxo),e(Yr,cxo),e(Yr,Td),e(Td,fxo),e(Td,rde),e(rde,mxo),e(Td,gxo),e(Td,cj),e(cj,hxo),e(Td,pxo),e(Yr,_xo),e(Yr,tde),e(tde,uxo),e(Yr,bxo),g(iC,Yr,null),e(tr,vxo),e(tr,Xe),g(dC,Xe,null),e(Xe,Fxo),e(Xe,ade),e(ade,Txo),e(Xe,Mxo),e(Xe,Ya),e(Ya,Exo),e(Ya,nde),e(nde,Cxo),e(Ya,wxo),e(Ya,sde),e(sde,Axo),e(Ya,yxo),e(Ya,lde),e(lde,Lxo),e(Ya,xxo),e(Xe,kxo),e(Xe,da),e(da,Ib),e(Ib,ide),e(ide,Sxo),e(Ib,Rxo),e(Ib,fj),e(fj,Bxo),e(Ib,Pxo),e(da,$xo),e(da,qb),e(qb,dde),e(dde,Ixo),e(qb,qxo),e(qb,mj),e(mj,Nxo),e(qb,jxo),e(da,Dxo),e(da,Nb),e(Nb,cde),e(cde,Gxo),e(Nb,Oxo),e(Nb,gj),e(gj,Vxo),e(Nb,Xxo),e(da,zxo),e(da,jb),e(jb,fde),e(fde,Qxo),e(jb,Wxo),e(jb,hj),e(hj,Hxo),e(jb,Uxo),e(da,Jxo),e(da,Db),e(Db,mde),e(mde,Yxo),e(Db,Kxo),e(Db,pj),e(pj,Zxo),e(Db,eko),e(Xe,oko),e(Xe,Gb),e(Gb,rko),e(Gb,gde),e(gde,tko),e(Gb,ako),e(Gb,hde),e(hde,nko),e(Xe,sko),e(Xe,pde),e(pde,lko),e(Xe,iko),g(cC,Xe,null),b(c,fBe,u),b(c,Md,u),e(Md,Ob),e(Ob,_de),g(fC,_de,null),e(Md,dko),e(Md,ude),e(ude,cko),b(c,mBe,u),b(c,ar,u),g(mC,ar,null),e(ar,fko),e(ar,Ed),e(Ed,mko),e(Ed,_j),e(_j,gko),e(Ed,hko),e(Ed,uj),e(uj,pko),e(Ed,_ko),e(ar,uko),e(ar,gC),e(gC,bko),e(gC,bde),e(bde,vko),e(gC,Fko),e(ar,Tko),e(ar,Kr),g(hC,Kr,null),e(Kr,Mko),e(Kr,vde),e(vde,Eko),e(Kr,Cko),e(Kr,Cd),e(Cd,wko),e(Cd,Fde),e(Fde,Ako),e(Cd,yko),e(Cd,bj),e(bj,Lko),e(Cd,xko),e(Kr,kko),e(Kr,Tde),e(Tde,Sko),e(Kr,Rko),g(pC,Kr,null),e(ar,Bko),e(ar,ze),g(_C,ze,null),e(ze,Pko),e(ze,Mde),e(Mde,$ko),e(ze,Iko),e(ze,Ka),e(Ka,qko),e(Ka,Ede),e(Ede,Nko),e(Ka,jko),e(Ka,Cde),e(Cde,Dko),e(Ka,Gko),e(Ka,wde),e(wde,Oko),e(Ka,Vko),e(ze,Xko),e(ze,j),e(j,Vb),e(Vb,Ade),e(Ade,zko),e(Vb,Qko),e(Vb,vj),e(vj,Wko),e(Vb,Hko),e(j,Uko),e(j,Xb),e(Xb,yde),e(yde,Jko),e(Xb,Yko),e(Xb,Fj),e(Fj,Kko),e(Xb,Zko),e(j,eSo),e(j,zb),e(zb,Lde),e(Lde,oSo),e(zb,rSo),e(zb,Tj),e(Tj,tSo),e(zb,aSo),e(j,nSo),e(j,Qb),e(Qb,xde),e(xde,sSo),e(Qb,lSo),e(Qb,Mj),e(Mj,iSo),e(Qb,dSo),e(j,cSo),e(j,Wb),e(Wb,kde),e(kde,fSo),e(Wb,mSo),e(Wb,Ej),e(Ej,gSo),e(Wb,hSo),e(j,pSo),e(j,Hb),e(Hb,Sde),e(Sde,_So),e(Hb,uSo),e(Hb,Cj),e(Cj,bSo),e(Hb,vSo),e(j,FSo),e(j,Ub),e(Ub,Rde),e(Rde,TSo),e(Ub,MSo),e(Ub,wj),e(wj,ESo),e(Ub,CSo),e(j,wSo),e(j,Jb),e(Jb,Bde),e(Bde,ASo),e(Jb,ySo),e(Jb,Aj),e(Aj,LSo),e(Jb,xSo),e(j,kSo),e(j,Yb),e(Yb,Pde),e(Pde,SSo),e(Yb,RSo),e(Yb,yj),e(yj,BSo),e(Yb,PSo),e(j,$So),e(j,Kb),e(Kb,$de),e($de,ISo),e(Kb,qSo),e(Kb,Lj),e(Lj,NSo),e(Kb,jSo),e(j,DSo),e(j,Zb),e(Zb,Ide),e(Ide,GSo),e(Zb,OSo),e(Zb,xj),e(xj,VSo),e(Zb,XSo),e(j,zSo),e(j,e2),e(e2,qde),e(qde,QSo),e(e2,WSo),e(e2,kj),e(kj,HSo),e(e2,USo),e(j,JSo),e(j,o2),e(o2,Nde),e(Nde,YSo),e(o2,KSo),e(o2,Sj),e(Sj,ZSo),e(o2,eRo),e(j,oRo),e(j,r2),e(r2,jde),e(jde,rRo),e(r2,tRo),e(r2,Rj),e(Rj,aRo),e(r2,nRo),e(j,sRo),e(j,t2),e(t2,Dde),e(Dde,lRo),e(t2,iRo),e(t2,Bj),e(Bj,dRo),e(t2,cRo),e(j,fRo),e(j,a2),e(a2,Gde),e(Gde,mRo),e(a2,gRo),e(a2,Pj),e(Pj,hRo),e(a2,pRo),e(j,_Ro),e(j,n2),e(n2,Ode),e(Ode,uRo),e(n2,bRo),e(n2,$j),e($j,vRo),e(n2,FRo),e(j,TRo),e(j,s2),e(s2,Vde),e(Vde,MRo),e(s2,ERo),e(s2,Ij),e(Ij,CRo),e(s2,wRo),e(j,ARo),e(j,l2),e(l2,Xde),e(Xde,yRo),e(l2,LRo),e(l2,qj),e(qj,xRo),e(l2,kRo),e(j,SRo),e(j,i2),e(i2,zde),e(zde,RRo),e(i2,BRo),e(i2,Nj),e(Nj,PRo),e(i2,$Ro),e(j,IRo),e(j,d2),e(d2,Qde),e(Qde,qRo),e(d2,NRo),e(d2,jj),e(jj,jRo),e(d2,DRo),e(j,GRo),e(j,c2),e(c2,Wde),e(Wde,ORo),e(c2,VRo),e(c2,Dj),e(Dj,XRo),e(c2,zRo),e(j,QRo),e(j,f2),e(f2,Hde),e(Hde,WRo),e(f2,HRo),e(f2,Gj),e(Gj,URo),e(f2,JRo),e(j,YRo),e(j,m2),e(m2,Ude),e(Ude,KRo),e(m2,ZRo),e(m2,Oj),e(Oj,eBo),e(m2,oBo),e(j,rBo),e(j,g2),e(g2,Jde),e(Jde,tBo),e(g2,aBo),e(g2,Vj),e(Vj,nBo),e(g2,sBo),e(j,lBo),e(j,h2),e(h2,Yde),e(Yde,iBo),e(h2,dBo),e(h2,Xj),e(Xj,cBo),e(h2,fBo),e(j,mBo),e(j,p2),e(p2,Kde),e(Kde,gBo),e(p2,hBo),e(p2,zj),e(zj,pBo),e(p2,_Bo),e(j,uBo),e(j,_2),e(_2,Zde),e(Zde,bBo),e(_2,vBo),e(_2,Qj),e(Qj,FBo),e(_2,TBo),e(j,MBo),e(j,u2),e(u2,ece),e(ece,EBo),e(u2,CBo),e(u2,Wj),e(Wj,wBo),e(u2,ABo),e(j,yBo),e(j,b2),e(b2,oce),e(oce,LBo),e(b2,xBo),e(b2,Hj),e(Hj,kBo),e(b2,SBo),e(j,RBo),e(j,v2),e(v2,rce),e(rce,BBo),e(v2,PBo),e(v2,Uj),e(Uj,$Bo),e(v2,IBo),e(j,qBo),e(j,F2),e(F2,tce),e(tce,NBo),e(F2,jBo),e(F2,Jj),e(Jj,DBo),e(F2,GBo),e(j,OBo),e(j,T2),e(T2,ace),e(ace,VBo),e(T2,XBo),e(T2,Yj),e(Yj,zBo),e(T2,QBo),e(ze,WBo),e(ze,M2),e(M2,HBo),e(M2,nce),e(nce,UBo),e(M2,JBo),e(M2,sce),e(sce,YBo),e(ze,KBo),e(ze,lce),e(lce,ZBo),e(ze,ePo),g(uC,ze,null),b(c,gBe,u),b(c,wd,u),e(wd,E2),e(E2,ice),g(bC,ice,null),e(wd,oPo),e(wd,dce),e(dce,rPo),b(c,hBe,u),b(c,nr,u),g(vC,nr,null),e(nr,tPo),e(nr,Ad),e(Ad,aPo),e(Ad,Kj),e(Kj,nPo),e(Ad,sPo),e(Ad,Zj),e(Zj,lPo),e(Ad,iPo),e(nr,dPo),e(nr,FC),e(FC,cPo),e(FC,cce),e(cce,fPo),e(FC,mPo),e(nr,gPo),e(nr,Zr),g(TC,Zr,null),e(Zr,hPo),e(Zr,fce),e(fce,pPo),e(Zr,_Po),e(Zr,yd),e(yd,uPo),e(yd,mce),e(mce,bPo),e(yd,vPo),e(yd,eD),e(eD,FPo),e(yd,TPo),e(Zr,MPo),e(Zr,gce),e(gce,EPo),e(Zr,CPo),g(MC,Zr,null),e(nr,wPo),e(nr,Qe),g(EC,Qe,null),e(Qe,APo),e(Qe,hce),e(hce,yPo),e(Qe,LPo),e(Qe,Za),e(Za,xPo),e(Za,pce),e(pce,kPo),e(Za,SPo),e(Za,_ce),e(_ce,RPo),e(Za,BPo),e(Za,uce),e(uce,PPo),e(Za,$Po),e(Qe,IPo),e(Qe,R),e(R,C2),e(C2,bce),e(bce,qPo),e(C2,NPo),e(C2,oD),e(oD,jPo),e(C2,DPo),e(R,GPo),e(R,w2),e(w2,vce),e(vce,OPo),e(w2,VPo),e(w2,rD),e(rD,XPo),e(w2,zPo),e(R,QPo),e(R,A2),e(A2,Fce),e(Fce,WPo),e(A2,HPo),e(A2,tD),e(tD,UPo),e(A2,JPo),e(R,YPo),e(R,y2),e(y2,Tce),e(Tce,KPo),e(y2,ZPo),e(y2,aD),e(aD,e$o),e(y2,o$o),e(R,r$o),e(R,L2),e(L2,Mce),e(Mce,t$o),e(L2,a$o),e(L2,nD),e(nD,n$o),e(L2,s$o),e(R,l$o),e(R,x2),e(x2,Ece),e(Ece,i$o),e(x2,d$o),e(x2,sD),e(sD,c$o),e(x2,f$o),e(R,m$o),e(R,k2),e(k2,Cce),e(Cce,g$o),e(k2,h$o),e(k2,lD),e(lD,p$o),e(k2,_$o),e(R,u$o),e(R,S2),e(S2,wce),e(wce,b$o),e(S2,v$o),e(S2,iD),e(iD,F$o),e(S2,T$o),e(R,M$o),e(R,R2),e(R2,Ace),e(Ace,E$o),e(R2,C$o),e(R2,dD),e(dD,w$o),e(R2,A$o),e(R,y$o),e(R,B2),e(B2,yce),e(yce,L$o),e(B2,x$o),e(B2,cD),e(cD,k$o),e(B2,S$o),e(R,R$o),e(R,P2),e(P2,Lce),e(Lce,B$o),e(P2,P$o),e(P2,fD),e(fD,$$o),e(P2,I$o),e(R,q$o),e(R,$2),e($2,xce),e(xce,N$o),e($2,j$o),e($2,mD),e(mD,D$o),e($2,G$o),e(R,O$o),e(R,I2),e(I2,kce),e(kce,V$o),e(I2,X$o),e(I2,gD),e(gD,z$o),e(I2,Q$o),e(R,W$o),e(R,q2),e(q2,Sce),e(Sce,H$o),e(q2,U$o),e(q2,hD),e(hD,J$o),e(q2,Y$o),e(R,K$o),e(R,N2),e(N2,Rce),e(Rce,Z$o),e(N2,eIo),e(N2,pD),e(pD,oIo),e(N2,rIo),e(R,tIo),e(R,j2),e(j2,Bce),e(Bce,aIo),e(j2,nIo),e(j2,_D),e(_D,sIo),e(j2,lIo),e(R,iIo),e(R,D2),e(D2,Pce),e(Pce,dIo),e(D2,cIo),e(D2,uD),e(uD,fIo),e(D2,mIo),e(R,gIo),e(R,G2),e(G2,$ce),e($ce,hIo),e(G2,pIo),e(G2,bD),e(bD,_Io),e(G2,uIo),e(R,bIo),e(R,O2),e(O2,Ice),e(Ice,vIo),e(O2,FIo),e(O2,vD),e(vD,TIo),e(O2,MIo),e(R,EIo),e(R,V2),e(V2,qce),e(qce,CIo),e(V2,wIo),e(V2,FD),e(FD,AIo),e(V2,yIo),e(R,LIo),e(R,X2),e(X2,Nce),e(Nce,xIo),e(X2,kIo),e(X2,TD),e(TD,SIo),e(X2,RIo),e(R,BIo),e(R,z2),e(z2,jce),e(jce,PIo),e(z2,$Io),e(z2,MD),e(MD,IIo),e(z2,qIo),e(R,NIo),e(R,Q2),e(Q2,Dce),e(Dce,jIo),e(Q2,DIo),e(Q2,ED),e(ED,GIo),e(Q2,OIo),e(R,VIo),e(R,W2),e(W2,Gce),e(Gce,XIo),e(W2,zIo),e(W2,CD),e(CD,QIo),e(W2,WIo),e(R,HIo),e(R,H2),e(H2,Oce),e(Oce,UIo),e(H2,JIo),e(H2,wD),e(wD,YIo),e(H2,KIo),e(R,ZIo),e(R,U2),e(U2,Vce),e(Vce,eqo),e(U2,oqo),e(U2,AD),e(AD,rqo),e(U2,tqo),e(R,aqo),e(R,J2),e(J2,Xce),e(Xce,nqo),e(J2,sqo),e(J2,yD),e(yD,lqo),e(J2,iqo),e(R,dqo),e(R,Y2),e(Y2,zce),e(zce,cqo),e(Y2,fqo),e(Y2,LD),e(LD,mqo),e(Y2,gqo),e(R,hqo),e(R,K2),e(K2,Qce),e(Qce,pqo),e(K2,_qo),e(K2,xD),e(xD,uqo),e(K2,bqo),e(R,vqo),e(R,Z2),e(Z2,Wce),e(Wce,Fqo),e(Z2,Tqo),e(Z2,kD),e(kD,Mqo),e(Z2,Eqo),e(R,Cqo),e(R,ev),e(ev,Hce),e(Hce,wqo),e(ev,Aqo),e(ev,SD),e(SD,yqo),e(ev,Lqo),e(R,xqo),e(R,ov),e(ov,Uce),e(Uce,kqo),e(ov,Sqo),e(ov,RD),e(RD,Rqo),e(ov,Bqo),e(R,Pqo),e(R,rv),e(rv,Jce),e(Jce,$qo),e(rv,Iqo),e(rv,BD),e(BD,qqo),e(rv,Nqo),e(R,jqo),e(R,tv),e(tv,Yce),e(Yce,Dqo),e(tv,Gqo),e(tv,PD),e(PD,Oqo),e(tv,Vqo),e(R,Xqo),e(R,av),e(av,Kce),e(Kce,zqo),e(av,Qqo),e(av,$D),e($D,Wqo),e(av,Hqo),e(R,Uqo),e(R,nv),e(nv,Zce),e(Zce,Jqo),e(nv,Yqo),e(nv,ID),e(ID,Kqo),e(nv,Zqo),e(R,eNo),e(R,sv),e(sv,efe),e(efe,oNo),e(sv,rNo),e(sv,qD),e(qD,tNo),e(sv,aNo),e(R,nNo),e(R,lv),e(lv,ofe),e(ofe,sNo),e(lv,lNo),e(lv,ND),e(ND,iNo),e(lv,dNo),e(R,cNo),e(R,iv),e(iv,rfe),e(rfe,fNo),e(iv,mNo),e(iv,jD),e(jD,gNo),e(iv,hNo),e(Qe,pNo),e(Qe,dv),e(dv,_No),e(dv,tfe),e(tfe,uNo),e(dv,bNo),e(dv,afe),e(afe,vNo),e(Qe,FNo),e(Qe,nfe),e(nfe,TNo),e(Qe,MNo),g(CC,Qe,null),b(c,pBe,u),b(c,Ld,u),e(Ld,cv),e(cv,sfe),g(wC,sfe,null),e(Ld,ENo),e(Ld,lfe),e(lfe,CNo),b(c,_Be,u),b(c,sr,u),g(AC,sr,null),e(sr,wNo),e(sr,xd),e(xd,ANo),e(xd,DD),e(DD,yNo),e(xd,LNo),e(xd,GD),e(GD,xNo),e(xd,kNo),e(sr,SNo),e(sr,yC),e(yC,RNo),e(yC,ife),e(ife,BNo),e(yC,PNo),e(sr,$No),e(sr,et),g(LC,et,null),e(et,INo),e(et,dfe),e(dfe,qNo),e(et,NNo),e(et,kd),e(kd,jNo),e(kd,cfe),e(cfe,DNo),e(kd,GNo),e(kd,OD),e(OD,ONo),e(kd,VNo),e(et,XNo),e(et,ffe),e(ffe,zNo),e(et,QNo),g(xC,et,null),e(sr,WNo),e(sr,We),g(kC,We,null),e(We,HNo),e(We,mfe),e(mfe,UNo),e(We,JNo),e(We,en),e(en,YNo),e(en,gfe),e(gfe,KNo),e(en,ZNo),e(en,hfe),e(hfe,ejo),e(en,ojo),e(en,pfe),e(pfe,rjo),e(en,tjo),e(We,ajo),e(We,_fe),e(_fe,fv),e(fv,ufe),e(ufe,njo),e(fv,sjo),e(fv,VD),e(VD,ljo),e(fv,ijo),e(We,djo),e(We,mv),e(mv,cjo),e(mv,bfe),e(bfe,fjo),e(mv,mjo),e(mv,vfe),e(vfe,gjo),e(We,hjo),e(We,Ffe),e(Ffe,pjo),e(We,_jo),g(SC,We,null),b(c,uBe,u),b(c,Sd,u),e(Sd,gv),e(gv,Tfe),g(RC,Tfe,null),e(Sd,ujo),e(Sd,Mfe),e(Mfe,bjo),b(c,bBe,u),b(c,lr,u),g(BC,lr,null),e(lr,vjo),e(lr,Rd),e(Rd,Fjo),e(Rd,XD),e(XD,Tjo),e(Rd,Mjo),e(Rd,zD),e(zD,Ejo),e(Rd,Cjo),e(lr,wjo),e(lr,PC),e(PC,Ajo),e(PC,Efe),e(Efe,yjo),e(PC,Ljo),e(lr,xjo),e(lr,ot),g($C,ot,null),e(ot,kjo),e(ot,Cfe),e(Cfe,Sjo),e(ot,Rjo),e(ot,Bd),e(Bd,Bjo),e(Bd,wfe),e(wfe,Pjo),e(Bd,$jo),e(Bd,QD),e(QD,Ijo),e(Bd,qjo),e(ot,Njo),e(ot,Afe),e(Afe,jjo),e(ot,Djo),g(IC,ot,null),e(lr,Gjo),e(lr,He),g(qC,He,null),e(He,Ojo),e(He,yfe),e(yfe,Vjo),e(He,Xjo),e(He,on),e(on,zjo),e(on,Lfe),e(Lfe,Qjo),e(on,Wjo),e(on,xfe),e(xfe,Hjo),e(on,Ujo),e(on,kfe),e(kfe,Jjo),e(on,Yjo),e(He,Kjo),e(He,de),e(de,hv),e(hv,Sfe),e(Sfe,Zjo),e(hv,eDo),e(hv,WD),e(WD,oDo),e(hv,rDo),e(de,tDo),e(de,pv),e(pv,Rfe),e(Rfe,aDo),e(pv,nDo),e(pv,HD),e(HD,sDo),e(pv,lDo),e(de,iDo),e(de,_v),e(_v,Bfe),e(Bfe,dDo),e(_v,cDo),e(_v,UD),e(UD,fDo),e(_v,mDo),e(de,gDo),e(de,Os),e(Os,Pfe),e(Pfe,hDo),e(Os,pDo),e(Os,JD),e(JD,_Do),e(Os,uDo),e(Os,YD),e(YD,bDo),e(Os,vDo),e(de,FDo),e(de,uv),e(uv,$fe),e($fe,TDo),e(uv,MDo),e(uv,KD),e(KD,EDo),e(uv,CDo),e(de,wDo),e(de,ma),e(ma,Ife),e(Ife,ADo),e(ma,yDo),e(ma,ZD),e(ZD,LDo),e(ma,xDo),e(ma,eG),e(eG,kDo),e(ma,SDo),e(ma,oG),e(oG,RDo),e(ma,BDo),e(de,PDo),e(de,bv),e(bv,qfe),e(qfe,$Do),e(bv,IDo),e(bv,rG),e(rG,qDo),e(bv,NDo),e(de,jDo),e(de,vv),e(vv,Nfe),e(Nfe,DDo),e(vv,GDo),e(vv,tG),e(tG,ODo),e(vv,VDo),e(de,XDo),e(de,Fv),e(Fv,jfe),e(jfe,zDo),e(Fv,QDo),e(Fv,aG),e(aG,WDo),e(Fv,HDo),e(de,UDo),e(de,Tv),e(Tv,Dfe),e(Dfe,JDo),e(Tv,YDo),e(Tv,nG),e(nG,KDo),e(Tv,ZDo),e(de,eGo),e(de,Mv),e(Mv,Gfe),e(Gfe,oGo),e(Mv,rGo),e(Mv,sG),e(sG,tGo),e(Mv,aGo),e(de,nGo),e(de,Ev),e(Ev,Ofe),e(Ofe,sGo),e(Ev,lGo),e(Ev,lG),e(lG,iGo),e(Ev,dGo),e(de,cGo),e(de,Cv),e(Cv,Vfe),e(Vfe,fGo),e(Cv,mGo),e(Cv,iG),e(iG,gGo),e(Cv,hGo),e(He,pGo),e(He,wv),e(wv,_Go),e(wv,Xfe),e(Xfe,uGo),e(wv,bGo),e(wv,zfe),e(zfe,vGo),e(He,FGo),e(He,Qfe),e(Qfe,TGo),e(He,MGo),g(NC,He,null),b(c,vBe,u),b(c,Pd,u),e(Pd,Av),e(Av,Wfe),g(jC,Wfe,null),e(Pd,EGo),e(Pd,Hfe),e(Hfe,CGo),b(c,FBe,u),b(c,ir,u),g(DC,ir,null),e(ir,wGo),e(ir,$d),e($d,AGo),e($d,dG),e(dG,yGo),e($d,LGo),e($d,cG),e(cG,xGo),e($d,kGo),e(ir,SGo),e(ir,GC),e(GC,RGo),e(GC,Ufe),e(Ufe,BGo),e(GC,PGo),e(ir,$Go),e(ir,rt),g(OC,rt,null),e(rt,IGo),e(rt,Jfe),e(Jfe,qGo),e(rt,NGo),e(rt,Id),e(Id,jGo),e(Id,Yfe),e(Yfe,DGo),e(Id,GGo),e(Id,fG),e(fG,OGo),e(Id,VGo),e(rt,XGo),e(rt,Kfe),e(Kfe,zGo),e(rt,QGo),g(VC,rt,null),e(ir,WGo),e(ir,Ue),g(XC,Ue,null),e(Ue,HGo),e(Ue,Zfe),e(Zfe,UGo),e(Ue,JGo),e(Ue,rn),e(rn,YGo),e(rn,eme),e(eme,KGo),e(rn,ZGo),e(rn,ome),e(ome,eOo),e(rn,oOo),e(rn,rme),e(rme,rOo),e(rn,tOo),e(Ue,aOo),e(Ue,tme),e(tme,yv),e(yv,ame),e(ame,nOo),e(yv,sOo),e(yv,mG),e(mG,lOo),e(yv,iOo),e(Ue,dOo),e(Ue,Lv),e(Lv,cOo),e(Lv,nme),e(nme,fOo),e(Lv,mOo),e(Lv,sme),e(sme,gOo),e(Ue,hOo),e(Ue,lme),e(lme,pOo),e(Ue,_Oo),g(zC,Ue,null),b(c,TBe,u),b(c,qd,u),e(qd,xv),e(xv,ime),g(QC,ime,null),e(qd,uOo),e(qd,dme),e(dme,bOo),b(c,MBe,u),b(c,dr,u),g(WC,dr,null),e(dr,vOo),e(dr,Nd),e(Nd,FOo),e(Nd,gG),e(gG,TOo),e(Nd,MOo),e(Nd,hG),e(hG,EOo),e(Nd,COo),e(dr,wOo),e(dr,HC),e(HC,AOo),e(HC,cme),e(cme,yOo),e(HC,LOo),e(dr,xOo),e(dr,tt),g(UC,tt,null),e(tt,kOo),e(tt,fme),e(fme,SOo),e(tt,ROo),e(tt,jd),e(jd,BOo),e(jd,mme),e(mme,POo),e(jd,$Oo),e(jd,pG),e(pG,IOo),e(jd,qOo),e(tt,NOo),e(tt,gme),e(gme,jOo),e(tt,DOo),g(JC,tt,null),e(dr,GOo),e(dr,Je),g(YC,Je,null),e(Je,OOo),e(Je,hme),e(hme,VOo),e(Je,XOo),e(Je,tn),e(tn,zOo),e(tn,pme),e(pme,QOo),e(tn,WOo),e(tn,_me),e(_me,HOo),e(tn,UOo),e(tn,ume),e(ume,JOo),e(tn,YOo),e(Je,KOo),e(Je,Se),e(Se,kv),e(kv,bme),e(bme,ZOo),e(kv,eVo),e(kv,_G),e(_G,oVo),e(kv,rVo),e(Se,tVo),e(Se,Sv),e(Sv,vme),e(vme,aVo),e(Sv,nVo),e(Sv,uG),e(uG,sVo),e(Sv,lVo),e(Se,iVo),e(Se,Rv),e(Rv,Fme),e(Fme,dVo),e(Rv,cVo),e(Rv,bG),e(bG,fVo),e(Rv,mVo),e(Se,gVo),e(Se,Bv),e(Bv,Tme),e(Tme,hVo),e(Bv,pVo),e(Bv,vG),e(vG,_Vo),e(Bv,uVo),e(Se,bVo),e(Se,Pv),e(Pv,Mme),e(Mme,vVo),e(Pv,FVo),e(Pv,FG),e(FG,TVo),e(Pv,MVo),e(Se,EVo),e(Se,$v),e($v,Eme),e(Eme,CVo),e($v,wVo),e($v,TG),e(TG,AVo),e($v,yVo),e(Se,LVo),e(Se,Iv),e(Iv,Cme),e(Cme,xVo),e(Iv,kVo),e(Iv,MG),e(MG,SVo),e(Iv,RVo),e(Se,BVo),e(Se,qv),e(qv,wme),e(wme,PVo),e(qv,$Vo),e(qv,EG),e(EG,IVo),e(qv,qVo),e(Je,NVo),e(Je,Nv),e(Nv,jVo),e(Nv,Ame),e(Ame,DVo),e(Nv,GVo),e(Nv,yme),e(yme,OVo),e(Je,VVo),e(Je,Lme),e(Lme,XVo),e(Je,zVo),g(KC,Je,null),b(c,EBe,u),b(c,Dd,u),e(Dd,jv),e(jv,xme),g(ZC,xme,null),e(Dd,QVo),e(Dd,kme),e(kme,WVo),b(c,CBe,u),b(c,cr,u),g(ew,cr,null),e(cr,HVo),e(cr,Gd),e(Gd,UVo),e(Gd,CG),e(CG,JVo),e(Gd,YVo),e(Gd,wG),e(wG,KVo),e(Gd,ZVo),e(cr,eXo),e(cr,ow),e(ow,oXo),e(ow,Sme),e(Sme,rXo),e(ow,tXo),e(cr,aXo),e(cr,at),g(rw,at,null),e(at,nXo),e(at,Rme),e(Rme,sXo),e(at,lXo),e(at,Od),e(Od,iXo),e(Od,Bme),e(Bme,dXo),e(Od,cXo),e(Od,AG),e(AG,fXo),e(Od,mXo),e(at,gXo),e(at,Pme),e(Pme,hXo),e(at,pXo),g(tw,at,null),e(cr,_Xo),e(cr,Ye),g(aw,Ye,null),e(Ye,uXo),e(Ye,$me),e($me,bXo),e(Ye,vXo),e(Ye,an),e(an,FXo),e(an,Ime),e(Ime,TXo),e(an,MXo),e(an,qme),e(qme,EXo),e(an,CXo),e(an,Nme),e(Nme,wXo),e(an,AXo),e(Ye,yXo),e(Ye,nn),e(nn,Dv),e(Dv,jme),e(jme,LXo),e(Dv,xXo),e(Dv,yG),e(yG,kXo),e(Dv,SXo),e(nn,RXo),e(nn,Gv),e(Gv,Dme),e(Dme,BXo),e(Gv,PXo),e(Gv,LG),e(LG,$Xo),e(Gv,IXo),e(nn,qXo),e(nn,Ov),e(Ov,Gme),e(Gme,NXo),e(Ov,jXo),e(Ov,xG),e(xG,DXo),e(Ov,GXo),e(nn,OXo),e(nn,Vv),e(Vv,Ome),e(Ome,VXo),e(Vv,XXo),e(Vv,kG),e(kG,zXo),e(Vv,QXo),e(Ye,WXo),e(Ye,Xv),e(Xv,HXo),e(Xv,Vme),e(Vme,UXo),e(Xv,JXo),e(Xv,Xme),e(Xme,YXo),e(Ye,KXo),e(Ye,zme),e(zme,ZXo),e(Ye,ezo),g(nw,Ye,null),b(c,wBe,u),b(c,Vd,u),e(Vd,zv),e(zv,Qme),g(sw,Qme,null),e(Vd,ozo),e(Vd,Wme),e(Wme,rzo),b(c,ABe,u),b(c,fr,u),g(lw,fr,null),e(fr,tzo),e(fr,Xd),e(Xd,azo),e(Xd,SG),e(SG,nzo),e(Xd,szo),e(Xd,RG),e(RG,lzo),e(Xd,izo),e(fr,dzo),e(fr,iw),e(iw,czo),e(iw,Hme),e(Hme,fzo),e(iw,mzo),e(fr,gzo),e(fr,nt),g(dw,nt,null),e(nt,hzo),e(nt,Ume),e(Ume,pzo),e(nt,_zo),e(nt,zd),e(zd,uzo),e(zd,Jme),e(Jme,bzo),e(zd,vzo),e(zd,BG),e(BG,Fzo),e(zd,Tzo),e(nt,Mzo),e(nt,Yme),e(Yme,Ezo),e(nt,Czo),g(cw,nt,null),e(fr,wzo),e(fr,Ke),g(fw,Ke,null),e(Ke,Azo),e(Ke,Kme),e(Kme,yzo),e(Ke,Lzo),e(Ke,sn),e(sn,xzo),e(sn,Zme),e(Zme,kzo),e(sn,Szo),e(sn,ege),e(ege,Rzo),e(sn,Bzo),e(sn,oge),e(oge,Pzo),e(sn,$zo),e(Ke,Izo),e(Ke,Re),e(Re,Qv),e(Qv,rge),e(rge,qzo),e(Qv,Nzo),e(Qv,PG),e(PG,jzo),e(Qv,Dzo),e(Re,Gzo),e(Re,Wv),e(Wv,tge),e(tge,Ozo),e(Wv,Vzo),e(Wv,$G),e($G,Xzo),e(Wv,zzo),e(Re,Qzo),e(Re,Hv),e(Hv,age),e(age,Wzo),e(Hv,Hzo),e(Hv,IG),e(IG,Uzo),e(Hv,Jzo),e(Re,Yzo),e(Re,Uv),e(Uv,nge),e(nge,Kzo),e(Uv,Zzo),e(Uv,qG),e(qG,eQo),e(Uv,oQo),e(Re,rQo),e(Re,Jv),e(Jv,sge),e(sge,tQo),e(Jv,aQo),e(Jv,NG),e(NG,nQo),e(Jv,sQo),e(Re,lQo),e(Re,Yv),e(Yv,lge),e(lge,iQo),e(Yv,dQo),e(Yv,jG),e(jG,cQo),e(Yv,fQo),e(Re,mQo),e(Re,Kv),e(Kv,ige),e(ige,gQo),e(Kv,hQo),e(Kv,DG),e(DG,pQo),e(Kv,_Qo),e(Re,uQo),e(Re,Zv),e(Zv,dge),e(dge,bQo),e(Zv,vQo),e(Zv,GG),e(GG,FQo),e(Zv,TQo),e(Ke,MQo),e(Ke,eF),e(eF,EQo),e(eF,cge),e(cge,CQo),e(eF,wQo),e(eF,fge),e(fge,AQo),e(Ke,yQo),e(Ke,mge),e(mge,LQo),e(Ke,xQo),g(mw,Ke,null),b(c,yBe,u),b(c,Qd,u),e(Qd,oF),e(oF,gge),g(gw,gge,null),e(Qd,kQo),e(Qd,hge),e(hge,SQo),b(c,LBe,u),b(c,mr,u),g(hw,mr,null),e(mr,RQo),e(mr,Wd),e(Wd,BQo),e(Wd,OG),e(OG,PQo),e(Wd,$Qo),e(Wd,VG),e(VG,IQo),e(Wd,qQo),e(mr,NQo),e(mr,pw),e(pw,jQo),e(pw,pge),e(pge,DQo),e(pw,GQo),e(mr,OQo),e(mr,st),g(_w,st,null),e(st,VQo),e(st,_ge),e(_ge,XQo),e(st,zQo),e(st,Hd),e(Hd,QQo),e(Hd,uge),e(uge,WQo),e(Hd,HQo),e(Hd,XG),e(XG,UQo),e(Hd,JQo),e(st,YQo),e(st,bge),e(bge,KQo),e(st,ZQo),g(uw,st,null),e(mr,eWo),e(mr,Ze),g(bw,Ze,null),e(Ze,oWo),e(Ze,vge),e(vge,rWo),e(Ze,tWo),e(Ze,ln),e(ln,aWo),e(ln,Fge),e(Fge,nWo),e(ln,sWo),e(ln,Tge),e(Tge,lWo),e(ln,iWo),e(ln,Mge),e(Mge,dWo),e(ln,cWo),e(Ze,fWo),e(Ze,vw),e(vw,rF),e(rF,Ege),e(Ege,mWo),e(rF,gWo),e(rF,zG),e(zG,hWo),e(rF,pWo),e(vw,_Wo),e(vw,tF),e(tF,Cge),e(Cge,uWo),e(tF,bWo),e(tF,QG),e(QG,vWo),e(tF,FWo),e(Ze,TWo),e(Ze,aF),e(aF,MWo),e(aF,wge),e(wge,EWo),e(aF,CWo),e(aF,Age),e(Age,wWo),e(Ze,AWo),e(Ze,yge),e(yge,yWo),e(Ze,LWo),g(Fw,Ze,null),b(c,xBe,u),b(c,Ud,u),e(Ud,nF),e(nF,Lge),g(Tw,Lge,null),e(Ud,xWo),e(Ud,xge),e(xge,kWo),b(c,kBe,u),b(c,gr,u),g(Mw,gr,null),e(gr,SWo),e(gr,Jd),e(Jd,RWo),e(Jd,WG),e(WG,BWo),e(Jd,PWo),e(Jd,HG),e(HG,$Wo),e(Jd,IWo),e(gr,qWo),e(gr,Ew),e(Ew,NWo),e(Ew,kge),e(kge,jWo),e(Ew,DWo),e(gr,GWo),e(gr,lt),g(Cw,lt,null),e(lt,OWo),e(lt,Sge),e(Sge,VWo),e(lt,XWo),e(lt,Yd),e(Yd,zWo),e(Yd,Rge),e(Rge,QWo),e(Yd,WWo),e(Yd,UG),e(UG,HWo),e(Yd,UWo),e(lt,JWo),e(lt,Bge),e(Bge,YWo),e(lt,KWo),g(ww,lt,null),e(gr,ZWo),e(gr,eo),g(Aw,eo,null),e(eo,eHo),e(eo,Pge),e(Pge,oHo),e(eo,rHo),e(eo,dn),e(dn,tHo),e(dn,$ge),e($ge,aHo),e(dn,nHo),e(dn,Ige),e(Ige,sHo),e(dn,lHo),e(dn,qge),e(qge,iHo),e(dn,dHo),e(eo,cHo),e(eo,cn),e(cn,sF),e(sF,Nge),e(Nge,fHo),e(sF,mHo),e(sF,JG),e(JG,gHo),e(sF,hHo),e(cn,pHo),e(cn,lF),e(lF,jge),e(jge,_Ho),e(lF,uHo),e(lF,YG),e(YG,bHo),e(lF,vHo),e(cn,FHo),e(cn,iF),e(iF,Dge),e(Dge,THo),e(iF,MHo),e(iF,KG),e(KG,EHo),e(iF,CHo),e(cn,wHo),e(cn,dF),e(dF,Gge),e(Gge,AHo),e(dF,yHo),e(dF,ZG),e(ZG,LHo),e(dF,xHo),e(eo,kHo),e(eo,cF),e(cF,SHo),e(cF,Oge),e(Oge,RHo),e(cF,BHo),e(cF,Vge),e(Vge,PHo),e(eo,$Ho),e(eo,Xge),e(Xge,IHo),e(eo,qHo),g(yw,eo,null),b(c,SBe,u),b(c,Kd,u),e(Kd,fF),e(fF,zge),g(Lw,zge,null),e(Kd,NHo),e(Kd,Qge),e(Qge,jHo),b(c,RBe,u),b(c,hr,u),g(xw,hr,null),e(hr,DHo),e(hr,Zd),e(Zd,GHo),e(Zd,eO),e(eO,OHo),e(Zd,VHo),e(Zd,oO),e(oO,XHo),e(Zd,zHo),e(hr,QHo),e(hr,kw),e(kw,WHo),e(kw,Wge),e(Wge,HHo),e(kw,UHo),e(hr,JHo),e(hr,it),g(Sw,it,null),e(it,YHo),e(it,Hge),e(Hge,KHo),e(it,ZHo),e(it,ec),e(ec,eUo),e(ec,Uge),e(Uge,oUo),e(ec,rUo),e(ec,rO),e(rO,tUo),e(ec,aUo),e(it,nUo),e(it,Jge),e(Jge,sUo),e(it,lUo),g(Rw,it,null),e(hr,iUo),e(hr,oo),g(Bw,oo,null),e(oo,dUo),e(oo,Yge),e(Yge,cUo),e(oo,fUo),e(oo,fn),e(fn,mUo),e(fn,Kge),e(Kge,gUo),e(fn,hUo),e(fn,Zge),e(Zge,pUo),e(fn,_Uo),e(fn,ehe),e(ehe,uUo),e(fn,bUo),e(oo,vUo),e(oo,oc),e(oc,mF),e(mF,ohe),e(ohe,FUo),e(mF,TUo),e(mF,tO),e(tO,MUo),e(mF,EUo),e(oc,CUo),e(oc,gF),e(gF,rhe),e(rhe,wUo),e(gF,AUo),e(gF,aO),e(aO,yUo),e(gF,LUo),e(oc,xUo),e(oc,hF),e(hF,the),e(the,kUo),e(hF,SUo),e(hF,nO),e(nO,RUo),e(hF,BUo),e(oo,PUo),e(oo,pF),e(pF,$Uo),e(pF,ahe),e(ahe,IUo),e(pF,qUo),e(pF,nhe),e(nhe,NUo),e(oo,jUo),e(oo,she),e(she,DUo),e(oo,GUo),g(Pw,oo,null),b(c,BBe,u),b(c,rc,u),e(rc,_F),e(_F,lhe),g($w,lhe,null),e(rc,OUo),e(rc,ihe),e(ihe,VUo),b(c,PBe,u),b(c,pr,u),g(Iw,pr,null),e(pr,XUo),e(pr,tc),e(tc,zUo),e(tc,sO),e(sO,QUo),e(tc,WUo),e(tc,lO),e(lO,HUo),e(tc,UUo),e(pr,JUo),e(pr,qw),e(qw,YUo),e(qw,dhe),e(dhe,KUo),e(qw,ZUo),e(pr,eJo),e(pr,dt),g(Nw,dt,null),e(dt,oJo),e(dt,che),e(che,rJo),e(dt,tJo),e(dt,ac),e(ac,aJo),e(ac,fhe),e(fhe,nJo),e(ac,sJo),e(ac,iO),e(iO,lJo),e(ac,iJo),e(dt,dJo),e(dt,mhe),e(mhe,cJo),e(dt,fJo),g(jw,dt,null),e(pr,mJo),e(pr,ro),g(Dw,ro,null),e(ro,gJo),e(ro,ghe),e(ghe,hJo),e(ro,pJo),e(ro,mn),e(mn,_Jo),e(mn,hhe),e(hhe,uJo),e(mn,bJo),e(mn,phe),e(phe,vJo),e(mn,FJo),e(mn,_he),e(_he,TJo),e(mn,MJo),e(ro,EJo),e(ro,uhe),e(uhe,uF),e(uF,bhe),e(bhe,CJo),e(uF,wJo),e(uF,dO),e(dO,AJo),e(uF,yJo),e(ro,LJo),e(ro,bF),e(bF,xJo),e(bF,vhe),e(vhe,kJo),e(bF,SJo),e(bF,Fhe),e(Fhe,RJo),e(ro,BJo),e(ro,The),e(The,PJo),e(ro,$Jo),g(Gw,ro,null),b(c,$Be,u),b(c,nc,u),e(nc,vF),e(vF,Mhe),g(Ow,Mhe,null),e(nc,IJo),e(nc,Ehe),e(Ehe,qJo),b(c,IBe,u),b(c,_r,u),g(Vw,_r,null),e(_r,NJo),e(_r,sc),e(sc,jJo),e(sc,cO),e(cO,DJo),e(sc,GJo),e(sc,fO),e(fO,OJo),e(sc,VJo),e(_r,XJo),e(_r,Xw),e(Xw,zJo),e(Xw,Che),e(Che,QJo),e(Xw,WJo),e(_r,HJo),e(_r,ct),g(zw,ct,null),e(ct,UJo),e(ct,whe),e(whe,JJo),e(ct,YJo),e(ct,lc),e(lc,KJo),e(lc,Ahe),e(Ahe,ZJo),e(lc,eYo),e(lc,mO),e(mO,oYo),e(lc,rYo),e(ct,tYo),e(ct,yhe),e(yhe,aYo),e(ct,nYo),g(Qw,ct,null),e(_r,sYo),e(_r,to),g(Ww,to,null),e(to,lYo),e(to,Lhe),e(Lhe,iYo),e(to,dYo),e(to,gn),e(gn,cYo),e(gn,xhe),e(xhe,fYo),e(gn,mYo),e(gn,khe),e(khe,gYo),e(gn,hYo),e(gn,She),e(She,pYo),e(gn,_Yo),e(to,uYo),e(to,Rhe),e(Rhe,FF),e(FF,Bhe),e(Bhe,bYo),e(FF,vYo),e(FF,gO),e(gO,FYo),e(FF,TYo),e(to,MYo),e(to,TF),e(TF,EYo),e(TF,Phe),e(Phe,CYo),e(TF,wYo),e(TF,$he),e($he,AYo),e(to,yYo),e(to,Ihe),e(Ihe,LYo),e(to,xYo),g(Hw,to,null),b(c,qBe,u),b(c,ic,u),e(ic,MF),e(MF,qhe),g(Uw,qhe,null),e(ic,kYo),e(ic,Nhe),e(Nhe,SYo),b(c,NBe,u),b(c,ur,u),g(Jw,ur,null),e(ur,RYo),e(ur,dc),e(dc,BYo),e(dc,hO),e(hO,PYo),e(dc,$Yo),e(dc,pO),e(pO,IYo),e(dc,qYo),e(ur,NYo),e(ur,Yw),e(Yw,jYo),e(Yw,jhe),e(jhe,DYo),e(Yw,GYo),e(ur,OYo),e(ur,ft),g(Kw,ft,null),e(ft,VYo),e(ft,Dhe),e(Dhe,XYo),e(ft,zYo),e(ft,cc),e(cc,QYo),e(cc,Ghe),e(Ghe,WYo),e(cc,HYo),e(cc,_O),e(_O,UYo),e(cc,JYo),e(ft,YYo),e(ft,Ohe),e(Ohe,KYo),e(ft,ZYo),g(Zw,ft,null),e(ur,eKo),e(ur,ao),g(eA,ao,null),e(ao,oKo),e(ao,Vhe),e(Vhe,rKo),e(ao,tKo),e(ao,hn),e(hn,aKo),e(hn,Xhe),e(Xhe,nKo),e(hn,sKo),e(hn,zhe),e(zhe,lKo),e(hn,iKo),e(hn,Qhe),e(Qhe,dKo),e(hn,cKo),e(ao,fKo),e(ao,pn),e(pn,EF),e(EF,Whe),e(Whe,mKo),e(EF,gKo),e(EF,uO),e(uO,hKo),e(EF,pKo),e(pn,_Ko),e(pn,CF),e(CF,Hhe),e(Hhe,uKo),e(CF,bKo),e(CF,bO),e(bO,vKo),e(CF,FKo),e(pn,TKo),e(pn,wF),e(wF,Uhe),e(Uhe,MKo),e(wF,EKo),e(wF,vO),e(vO,CKo),e(wF,wKo),e(pn,AKo),e(pn,AF),e(AF,Jhe),e(Jhe,yKo),e(AF,LKo),e(AF,FO),e(FO,xKo),e(AF,kKo),e(ao,SKo),e(ao,yF),e(yF,RKo),e(yF,Yhe),e(Yhe,BKo),e(yF,PKo),e(yF,Khe),e(Khe,$Ko),e(ao,IKo),e(ao,Zhe),e(Zhe,qKo),e(ao,NKo),g(oA,ao,null),b(c,jBe,u),b(c,fc,u),e(fc,LF),e(LF,epe),g(rA,epe,null),e(fc,jKo),e(fc,ope),e(ope,DKo),b(c,DBe,u),b(c,br,u),g(tA,br,null),e(br,GKo),e(br,mc),e(mc,OKo),e(mc,TO),e(TO,VKo),e(mc,XKo),e(mc,MO),e(MO,zKo),e(mc,QKo),e(br,WKo),e(br,aA),e(aA,HKo),e(aA,rpe),e(rpe,UKo),e(aA,JKo),e(br,YKo),e(br,mt),g(nA,mt,null),e(mt,KKo),e(mt,tpe),e(tpe,ZKo),e(mt,eZo),e(mt,gc),e(gc,oZo),e(gc,ape),e(ape,rZo),e(gc,tZo),e(gc,EO),e(EO,aZo),e(gc,nZo),e(mt,sZo),e(mt,npe),e(npe,lZo),e(mt,iZo),g(sA,mt,null),e(br,dZo),e(br,no),g(lA,no,null),e(no,cZo),e(no,spe),e(spe,fZo),e(no,mZo),e(no,_n),e(_n,gZo),e(_n,lpe),e(lpe,hZo),e(_n,pZo),e(_n,ipe),e(ipe,_Zo),e(_n,uZo),e(_n,dpe),e(dpe,bZo),e(_n,vZo),e(no,FZo),e(no,cpe),e(cpe,xF),e(xF,fpe),e(fpe,TZo),e(xF,MZo),e(xF,CO),e(CO,EZo),e(xF,CZo),e(no,wZo),e(no,kF),e(kF,AZo),e(kF,mpe),e(mpe,yZo),e(kF,LZo),e(kF,gpe),e(gpe,xZo),e(no,kZo),e(no,hpe),e(hpe,SZo),e(no,RZo),g(iA,no,null),b(c,GBe,u),b(c,hc,u),e(hc,SF),e(SF,ppe),g(dA,ppe,null),e(hc,BZo),e(hc,_pe),e(_pe,PZo),b(c,OBe,u),b(c,vr,u),g(cA,vr,null),e(vr,$Zo),e(vr,pc),e(pc,IZo),e(pc,wO),e(wO,qZo),e(pc,NZo),e(pc,AO),e(AO,jZo),e(pc,DZo),e(vr,GZo),e(vr,fA),e(fA,OZo),e(fA,upe),e(upe,VZo),e(fA,XZo),e(vr,zZo),e(vr,gt),g(mA,gt,null),e(gt,QZo),e(gt,bpe),e(bpe,WZo),e(gt,HZo),e(gt,_c),e(_c,UZo),e(_c,vpe),e(vpe,JZo),e(_c,YZo),e(_c,yO),e(yO,KZo),e(_c,ZZo),e(gt,eer),e(gt,Fpe),e(Fpe,oer),e(gt,rer),g(gA,gt,null),e(vr,ter),e(vr,ho),g(hA,ho,null),e(ho,aer),e(ho,Tpe),e(Tpe,ner),e(ho,ser),e(ho,un),e(un,ler),e(un,Mpe),e(Mpe,ier),e(un,der),e(un,Epe),e(Epe,cer),e(un,fer),e(un,Cpe),e(Cpe,mer),e(un,ger),e(ho,her),e(ho,x),e(x,RF),e(RF,wpe),e(wpe,per),e(RF,_er),e(RF,LO),e(LO,uer),e(RF,ber),e(x,ver),e(x,BF),e(BF,Ape),e(Ape,Fer),e(BF,Ter),e(BF,xO),e(xO,Mer),e(BF,Eer),e(x,Cer),e(x,PF),e(PF,ype),e(ype,wer),e(PF,Aer),e(PF,kO),e(kO,yer),e(PF,Ler),e(x,xer),e(x,$F),e($F,Lpe),e(Lpe,ker),e($F,Ser),e($F,SO),e(SO,Rer),e($F,Ber),e(x,Per),e(x,IF),e(IF,xpe),e(xpe,$er),e(IF,Ier),e(IF,RO),e(RO,qer),e(IF,Ner),e(x,jer),e(x,qF),e(qF,kpe),e(kpe,Der),e(qF,Ger),e(qF,BO),e(BO,Oer),e(qF,Ver),e(x,Xer),e(x,NF),e(NF,Spe),e(Spe,zer),e(NF,Qer),e(NF,PO),e(PO,Wer),e(NF,Her),e(x,Uer),e(x,jF),e(jF,Rpe),e(Rpe,Jer),e(jF,Yer),e(jF,$O),e($O,Ker),e(jF,Zer),e(x,eor),e(x,DF),e(DF,Bpe),e(Bpe,oor),e(DF,ror),e(DF,IO),e(IO,tor),e(DF,aor),e(x,nor),e(x,GF),e(GF,Ppe),e(Ppe,sor),e(GF,lor),e(GF,qO),e(qO,ior),e(GF,dor),e(x,cor),e(x,OF),e(OF,$pe),e($pe,mor),e(OF,gor),e(OF,NO),e(NO,hor),e(OF,por),e(x,_or),e(x,VF),e(VF,Ipe),e(Ipe,uor),e(VF,bor),e(VF,jO),e(jO,vor),e(VF,For),e(x,Tor),e(x,XF),e(XF,qpe),e(qpe,Mor),e(XF,Eor),e(XF,DO),e(DO,Cor),e(XF,wor),e(x,Aor),e(x,zF),e(zF,Npe),e(Npe,yor),e(zF,Lor),e(zF,GO),e(GO,xor),e(zF,kor),e(x,Sor),e(x,QF),e(QF,jpe),e(jpe,Ror),e(QF,Bor),e(QF,OO),e(OO,Por),e(QF,$or),e(x,Ior),e(x,WF),e(WF,Dpe),e(Dpe,qor),e(WF,Nor),e(WF,VO),e(VO,jor),e(WF,Dor),e(x,Gor),e(x,Vs),e(Vs,Gpe),e(Gpe,Oor),e(Vs,Vor),e(Vs,XO),e(XO,Xor),e(Vs,zor),e(Vs,zO),e(zO,Qor),e(Vs,Wor),e(x,Hor),e(x,HF),e(HF,Ope),e(Ope,Uor),e(HF,Jor),e(HF,QO),e(QO,Yor),e(HF,Kor),e(x,Zor),e(x,UF),e(UF,Vpe),e(Vpe,err),e(UF,orr),e(UF,WO),e(WO,rrr),e(UF,trr),e(x,arr),e(x,JF),e(JF,Xpe),e(Xpe,nrr),e(JF,srr),e(JF,HO),e(HO,lrr),e(JF,irr),e(x,drr),e(x,YF),e(YF,zpe),e(zpe,crr),e(YF,frr),e(YF,UO),e(UO,mrr),e(YF,grr),e(x,hrr),e(x,KF),e(KF,Qpe),e(Qpe,prr),e(KF,_rr),e(KF,JO),e(JO,urr),e(KF,brr),e(x,vrr),e(x,ZF),e(ZF,Wpe),e(Wpe,Frr),e(ZF,Trr),e(ZF,YO),e(YO,Mrr),e(ZF,Err),e(x,Crr),e(x,eT),e(eT,Hpe),e(Hpe,wrr),e(eT,Arr),e(eT,KO),e(KO,yrr),e(eT,Lrr),e(x,xrr),e(x,oT),e(oT,Upe),e(Upe,krr),e(oT,Srr),e(oT,ZO),e(ZO,Rrr),e(oT,Brr),e(x,Prr),e(x,rT),e(rT,Jpe),e(Jpe,$rr),e(rT,Irr),e(rT,eV),e(eV,qrr),e(rT,Nrr),e(x,jrr),e(x,tT),e(tT,Ype),e(Ype,Drr),e(tT,Grr),e(tT,oV),e(oV,Orr),e(tT,Vrr),e(x,Xrr),e(x,aT),e(aT,Kpe),e(Kpe,zrr),e(aT,Qrr),e(aT,rV),e(rV,Wrr),e(aT,Hrr),e(x,Urr),e(x,nT),e(nT,Zpe),e(Zpe,Jrr),e(nT,Yrr),e(nT,tV),e(tV,Krr),e(nT,Zrr),e(x,etr),e(x,sT),e(sT,e_e),e(e_e,otr),e(sT,rtr),e(sT,aV),e(aV,ttr),e(sT,atr),e(x,ntr),e(x,lT),e(lT,o_e),e(o_e,str),e(lT,ltr),e(lT,nV),e(nV,itr),e(lT,dtr),e(x,ctr),e(x,iT),e(iT,r_e),e(r_e,ftr),e(iT,mtr),e(iT,sV),e(sV,gtr),e(iT,htr),e(x,ptr),e(x,dT),e(dT,t_e),e(t_e,_tr),e(dT,utr),e(dT,lV),e(lV,btr),e(dT,vtr),e(x,Ftr),e(x,cT),e(cT,a_e),e(a_e,Ttr),e(cT,Mtr),e(cT,iV),e(iV,Etr),e(cT,Ctr),e(x,wtr),e(x,fT),e(fT,n_e),e(n_e,Atr),e(fT,ytr),e(fT,dV),e(dV,Ltr),e(fT,xtr),e(x,ktr),e(x,mT),e(mT,s_e),e(s_e,Str),e(mT,Rtr),e(mT,cV),e(cV,Btr),e(mT,Ptr),e(x,$tr),e(x,gT),e(gT,l_e),e(l_e,Itr),e(gT,qtr),e(gT,fV),e(fV,Ntr),e(gT,jtr),e(x,Dtr),e(x,hT),e(hT,i_e),e(i_e,Gtr),e(hT,Otr),e(hT,mV),e(mV,Vtr),e(hT,Xtr),e(x,ztr),e(x,pT),e(pT,d_e),e(d_e,Qtr),e(pT,Wtr),e(pT,gV),e(gV,Htr),e(pT,Utr),e(x,Jtr),e(x,_T),e(_T,c_e),e(c_e,Ytr),e(_T,Ktr),e(_T,hV),e(hV,Ztr),e(_T,ear),e(x,oar),e(x,uT),e(uT,f_e),e(f_e,rar),e(uT,tar),e(uT,pV),e(pV,aar),e(uT,nar),e(x,sar),e(x,bT),e(bT,m_e),e(m_e,lar),e(bT,iar),e(bT,_V),e(_V,dar),e(bT,car),e(x,far),e(x,vT),e(vT,g_e),e(g_e,mar),e(vT,gar),e(vT,uV),e(uV,har),e(vT,par),e(x,_ar),e(x,FT),e(FT,h_e),e(h_e,uar),e(FT,bar),e(FT,bV),e(bV,Far),e(FT,Tar),e(ho,Mar),e(ho,p_e),e(p_e,Ear),e(ho,Car),g(pA,ho,null),b(c,VBe,u),b(c,uc,u),e(uc,TT),e(TT,__e),g(_A,__e,null),e(uc,war),e(uc,u_e),e(u_e,Aar),b(c,XBe,u),b(c,Fr,u),g(uA,Fr,null),e(Fr,yar),e(Fr,bc),e(bc,Lar),e(bc,vV),e(vV,xar),e(bc,kar),e(bc,FV),e(FV,Sar),e(bc,Rar),e(Fr,Bar),e(Fr,bA),e(bA,Par),e(bA,b_e),e(b_e,$ar),e(bA,Iar),e(Fr,qar),e(Fr,ht),g(vA,ht,null),e(ht,Nar),e(ht,v_e),e(v_e,jar),e(ht,Dar),e(ht,vc),e(vc,Gar),e(vc,F_e),e(F_e,Oar),e(vc,Var),e(vc,TV),e(TV,Xar),e(vc,zar),e(ht,Qar),e(ht,T_e),e(T_e,War),e(ht,Har),g(FA,ht,null),e(Fr,Uar),e(Fr,po),g(TA,po,null),e(po,Jar),e(po,M_e),e(M_e,Yar),e(po,Kar),e(po,bn),e(bn,Zar),e(bn,E_e),e(E_e,enr),e(bn,onr),e(bn,C_e),e(C_e,rnr),e(bn,tnr),e(bn,w_e),e(w_e,anr),e(bn,nnr),e(po,snr),e(po,H),e(H,MT),e(MT,A_e),e(A_e,lnr),e(MT,inr),e(MT,MV),e(MV,dnr),e(MT,cnr),e(H,fnr),e(H,ET),e(ET,y_e),e(y_e,mnr),e(ET,gnr),e(ET,EV),e(EV,hnr),e(ET,pnr),e(H,_nr),e(H,CT),e(CT,L_e),e(L_e,unr),e(CT,bnr),e(CT,CV),e(CV,vnr),e(CT,Fnr),e(H,Tnr),e(H,wT),e(wT,x_e),e(x_e,Mnr),e(wT,Enr),e(wT,wV),e(wV,Cnr),e(wT,wnr),e(H,Anr),e(H,AT),e(AT,k_e),e(k_e,ynr),e(AT,Lnr),e(AT,AV),e(AV,xnr),e(AT,knr),e(H,Snr),e(H,yT),e(yT,S_e),e(S_e,Rnr),e(yT,Bnr),e(yT,yV),e(yV,Pnr),e(yT,$nr),e(H,Inr),e(H,LT),e(LT,R_e),e(R_e,qnr),e(LT,Nnr),e(LT,LV),e(LV,jnr),e(LT,Dnr),e(H,Gnr),e(H,xT),e(xT,B_e),e(B_e,Onr),e(xT,Vnr),e(xT,xV),e(xV,Xnr),e(xT,znr),e(H,Qnr),e(H,kT),e(kT,P_e),e(P_e,Wnr),e(kT,Hnr),e(kT,kV),e(kV,Unr),e(kT,Jnr),e(H,Ynr),e(H,ST),e(ST,$_e),e($_e,Knr),e(ST,Znr),e(ST,SV),e(SV,esr),e(ST,osr),e(H,rsr),e(H,RT),e(RT,I_e),e(I_e,tsr),e(RT,asr),e(RT,RV),e(RV,nsr),e(RT,ssr),e(H,lsr),e(H,BT),e(BT,q_e),e(q_e,isr),e(BT,dsr),e(BT,BV),e(BV,csr),e(BT,fsr),e(H,msr),e(H,PT),e(PT,N_e),e(N_e,gsr),e(PT,hsr),e(PT,PV),e(PV,psr),e(PT,_sr),e(H,usr),e(H,$T),e($T,j_e),e(j_e,bsr),e($T,vsr),e($T,$V),e($V,Fsr),e($T,Tsr),e(H,Msr),e(H,IT),e(IT,D_e),e(D_e,Esr),e(IT,Csr),e(IT,IV),e(IV,wsr),e(IT,Asr),e(H,ysr),e(H,qT),e(qT,G_e),e(G_e,Lsr),e(qT,xsr),e(qT,qV),e(qV,ksr),e(qT,Ssr),e(H,Rsr),e(H,NT),e(NT,O_e),e(O_e,Bsr),e(NT,Psr),e(NT,NV),e(NV,$sr),e(NT,Isr),e(H,qsr),e(H,jT),e(jT,V_e),e(V_e,Nsr),e(jT,jsr),e(jT,jV),e(jV,Dsr),e(jT,Gsr),e(H,Osr),e(H,DT),e(DT,X_e),e(X_e,Vsr),e(DT,Xsr),e(DT,DV),e(DV,zsr),e(DT,Qsr),e(H,Wsr),e(H,GT),e(GT,z_e),e(z_e,Hsr),e(GT,Usr),e(GT,GV),e(GV,Jsr),e(GT,Ysr),e(H,Ksr),e(H,OT),e(OT,Q_e),e(Q_e,Zsr),e(OT,elr),e(OT,OV),e(OV,olr),e(OT,rlr),e(H,tlr),e(H,VT),e(VT,W_e),e(W_e,alr),e(VT,nlr),e(VT,VV),e(VV,slr),e(VT,llr),e(H,ilr),e(H,XT),e(XT,H_e),e(H_e,dlr),e(XT,clr),e(XT,XV),e(XV,flr),e(XT,mlr),e(po,glr),e(po,U_e),e(U_e,hlr),e(po,plr),g(MA,po,null),b(c,zBe,u),b(c,Fc,u),e(Fc,zT),e(zT,J_e),g(EA,J_e,null),e(Fc,_lr),e(Fc,Y_e),e(Y_e,ulr),b(c,QBe,u),b(c,Tr,u),g(CA,Tr,null),e(Tr,blr),e(Tr,Tc),e(Tc,vlr),e(Tc,zV),e(zV,Flr),e(Tc,Tlr),e(Tc,QV),e(QV,Mlr),e(Tc,Elr),e(Tr,Clr),e(Tr,wA),e(wA,wlr),e(wA,K_e),e(K_e,Alr),e(wA,ylr),e(Tr,Llr),e(Tr,pt),g(AA,pt,null),e(pt,xlr),e(pt,Z_e),e(Z_e,klr),e(pt,Slr),e(pt,Mc),e(Mc,Rlr),e(Mc,eue),e(eue,Blr),e(Mc,Plr),e(Mc,WV),e(WV,$lr),e(Mc,Ilr),e(pt,qlr),e(pt,oue),e(oue,Nlr),e(pt,jlr),g(yA,pt,null),e(Tr,Dlr),e(Tr,_o),g(LA,_o,null),e(_o,Glr),e(_o,rue),e(rue,Olr),e(_o,Vlr),e(_o,vn),e(vn,Xlr),e(vn,tue),e(tue,zlr),e(vn,Qlr),e(vn,aue),e(aue,Wlr),e(vn,Hlr),e(vn,nue),e(nue,Ulr),e(vn,Jlr),e(_o,Ylr),e(_o,fe),e(fe,QT),e(QT,sue),e(sue,Klr),e(QT,Zlr),e(QT,HV),e(HV,eir),e(QT,oir),e(fe,rir),e(fe,WT),e(WT,lue),e(lue,tir),e(WT,air),e(WT,UV),e(UV,nir),e(WT,sir),e(fe,lir),e(fe,HT),e(HT,iue),e(iue,iir),e(HT,dir),e(HT,JV),e(JV,cir),e(HT,fir),e(fe,mir),e(fe,UT),e(UT,due),e(due,gir),e(UT,hir),e(UT,YV),e(YV,pir),e(UT,_ir),e(fe,uir),e(fe,JT),e(JT,cue),e(cue,bir),e(JT,vir),e(JT,KV),e(KV,Fir),e(JT,Tir),e(fe,Mir),e(fe,YT),e(YT,fue),e(fue,Eir),e(YT,Cir),e(YT,ZV),e(ZV,wir),e(YT,Air),e(fe,yir),e(fe,KT),e(KT,mue),e(mue,Lir),e(KT,xir),e(KT,eX),e(eX,kir),e(KT,Sir),e(fe,Rir),e(fe,ZT),e(ZT,gue),e(gue,Bir),e(ZT,Pir),e(ZT,oX),e(oX,$ir),e(ZT,Iir),e(fe,qir),e(fe,e8),e(e8,hue),e(hue,Nir),e(e8,jir),e(e8,rX),e(rX,Dir),e(e8,Gir),e(fe,Oir),e(fe,o8),e(o8,pue),e(pue,Vir),e(o8,Xir),e(o8,tX),e(tX,zir),e(o8,Qir),e(fe,Wir),e(fe,r8),e(r8,_ue),e(_ue,Hir),e(r8,Uir),e(r8,aX),e(aX,Jir),e(r8,Yir),e(fe,Kir),e(fe,t8),e(t8,uue),e(uue,Zir),e(t8,edr),e(t8,nX),e(nX,odr),e(t8,rdr),e(_o,tdr),e(_o,bue),e(bue,adr),e(_o,ndr),g(xA,_o,null),b(c,WBe,u),b(c,Ec,u),e(Ec,a8),e(a8,vue),g(kA,vue,null),e(Ec,sdr),e(Ec,Fue),e(Fue,ldr),b(c,HBe,u),b(c,Mr,u),g(SA,Mr,null),e(Mr,idr),e(Mr,Cc),e(Cc,ddr),e(Cc,sX),e(sX,cdr),e(Cc,fdr),e(Cc,lX),e(lX,mdr),e(Cc,gdr),e(Mr,hdr),e(Mr,RA),e(RA,pdr),e(RA,Tue),e(Tue,_dr),e(RA,udr),e(Mr,bdr),e(Mr,_t),g(BA,_t,null),e(_t,vdr),e(_t,Mue),e(Mue,Fdr),e(_t,Tdr),e(_t,wc),e(wc,Mdr),e(wc,Eue),e(Eue,Edr),e(wc,Cdr),e(wc,iX),e(iX,wdr),e(wc,Adr),e(_t,ydr),e(_t,Cue),e(Cue,Ldr),e(_t,xdr),g(PA,_t,null),e(Mr,kdr),e(Mr,uo),g($A,uo,null),e(uo,Sdr),e(uo,wue),e(wue,Rdr),e(uo,Bdr),e(uo,Fn),e(Fn,Pdr),e(Fn,Aue),e(Aue,$dr),e(Fn,Idr),e(Fn,yue),e(yue,qdr),e(Fn,Ndr),e(Fn,Lue),e(Lue,jdr),e(Fn,Ddr),e(uo,Gdr),e(uo,IA),e(IA,n8),e(n8,xue),e(xue,Odr),e(n8,Vdr),e(n8,dX),e(dX,Xdr),e(n8,zdr),e(IA,Qdr),e(IA,s8),e(s8,kue),e(kue,Wdr),e(s8,Hdr),e(s8,cX),e(cX,Udr),e(s8,Jdr),e(uo,Ydr),e(uo,Sue),e(Sue,Kdr),e(uo,Zdr),g(qA,uo,null),b(c,UBe,u),b(c,Ac,u),e(Ac,l8),e(l8,Rue),g(NA,Rue,null),e(Ac,ecr),e(Ac,Bue),e(Bue,ocr),b(c,JBe,u),b(c,Er,u),g(jA,Er,null),e(Er,rcr),e(Er,yc),e(yc,tcr),e(yc,fX),e(fX,acr),e(yc,ncr),e(yc,mX),e(mX,scr),e(yc,lcr),e(Er,icr),e(Er,DA),e(DA,dcr),e(DA,Pue),e(Pue,ccr),e(DA,fcr),e(Er,mcr),e(Er,ut),g(GA,ut,null),e(ut,gcr),e(ut,$ue),e($ue,hcr),e(ut,pcr),e(ut,Lc),e(Lc,_cr),e(Lc,Iue),e(Iue,ucr),e(Lc,bcr),e(Lc,gX),e(gX,vcr),e(Lc,Fcr),e(ut,Tcr),e(ut,que),e(que,Mcr),e(ut,Ecr),g(OA,ut,null),e(Er,Ccr),e(Er,bo),g(VA,bo,null),e(bo,wcr),e(bo,Nue),e(Nue,Acr),e(bo,ycr),e(bo,Tn),e(Tn,Lcr),e(Tn,jue),e(jue,xcr),e(Tn,kcr),e(Tn,Due),e(Due,Scr),e(Tn,Rcr),e(Tn,Gue),e(Gue,Bcr),e(Tn,Pcr),e(bo,$cr),e(bo,Y),e(Y,i8),e(i8,Oue),e(Oue,Icr),e(i8,qcr),e(i8,hX),e(hX,Ncr),e(i8,jcr),e(Y,Dcr),e(Y,d8),e(d8,Vue),e(Vue,Gcr),e(d8,Ocr),e(d8,pX),e(pX,Vcr),e(d8,Xcr),e(Y,zcr),e(Y,c8),e(c8,Xue),e(Xue,Qcr),e(c8,Wcr),e(c8,_X),e(_X,Hcr),e(c8,Ucr),e(Y,Jcr),e(Y,f8),e(f8,zue),e(zue,Ycr),e(f8,Kcr),e(f8,uX),e(uX,Zcr),e(f8,efr),e(Y,ofr),e(Y,m8),e(m8,Que),e(Que,rfr),e(m8,tfr),e(m8,bX),e(bX,afr),e(m8,nfr),e(Y,sfr),e(Y,g8),e(g8,Wue),e(Wue,lfr),e(g8,ifr),e(g8,vX),e(vX,dfr),e(g8,cfr),e(Y,ffr),e(Y,h8),e(h8,Hue),e(Hue,mfr),e(h8,gfr),e(h8,FX),e(FX,hfr),e(h8,pfr),e(Y,_fr),e(Y,p8),e(p8,Uue),e(Uue,ufr),e(p8,bfr),e(p8,TX),e(TX,vfr),e(p8,Ffr),e(Y,Tfr),e(Y,_8),e(_8,Jue),e(Jue,Mfr),e(_8,Efr),e(_8,MX),e(MX,Cfr),e(_8,wfr),e(Y,Afr),e(Y,u8),e(u8,Yue),e(Yue,yfr),e(u8,Lfr),e(u8,EX),e(EX,xfr),e(u8,kfr),e(Y,Sfr),e(Y,b8),e(b8,Kue),e(Kue,Rfr),e(b8,Bfr),e(b8,CX),e(CX,Pfr),e(b8,$fr),e(Y,Ifr),e(Y,v8),e(v8,Zue),e(Zue,qfr),e(v8,Nfr),e(v8,wX),e(wX,jfr),e(v8,Dfr),e(Y,Gfr),e(Y,F8),e(F8,e6e),e(e6e,Ofr),e(F8,Vfr),e(F8,AX),e(AX,Xfr),e(F8,zfr),e(Y,Qfr),e(Y,T8),e(T8,o6e),e(o6e,Wfr),e(T8,Hfr),e(T8,yX),e(yX,Ufr),e(T8,Jfr),e(Y,Yfr),e(Y,M8),e(M8,r6e),e(r6e,Kfr),e(M8,Zfr),e(M8,LX),e(LX,emr),e(M8,omr),e(Y,rmr),e(Y,E8),e(E8,t6e),e(t6e,tmr),e(E8,amr),e(E8,xX),e(xX,nmr),e(E8,smr),e(Y,lmr),e(Y,C8),e(C8,a6e),e(a6e,imr),e(C8,dmr),e(C8,kX),e(kX,cmr),e(C8,fmr),e(Y,mmr),e(Y,w8),e(w8,n6e),e(n6e,gmr),e(w8,hmr),e(w8,SX),e(SX,pmr),e(w8,_mr),e(Y,umr),e(Y,A8),e(A8,s6e),e(s6e,bmr),e(A8,vmr),e(A8,RX),e(RX,Fmr),e(A8,Tmr),e(Y,Mmr),e(Y,y8),e(y8,l6e),e(l6e,Emr),e(y8,Cmr),e(y8,BX),e(BX,wmr),e(y8,Amr),e(bo,ymr),e(bo,i6e),e(i6e,Lmr),e(bo,xmr),g(XA,bo,null),b(c,YBe,u),b(c,xc,u),e(xc,L8),e(L8,d6e),g(zA,d6e,null),e(xc,kmr),e(xc,c6e),e(c6e,Smr),b(c,KBe,u),b(c,Cr,u),g(QA,Cr,null),e(Cr,Rmr),e(Cr,kc),e(kc,Bmr),e(kc,PX),e(PX,Pmr),e(kc,$mr),e(kc,$X),e($X,Imr),e(kc,qmr),e(Cr,Nmr),e(Cr,WA),e(WA,jmr),e(WA,f6e),e(f6e,Dmr),e(WA,Gmr),e(Cr,Omr),e(Cr,bt),g(HA,bt,null),e(bt,Vmr),e(bt,m6e),e(m6e,Xmr),e(bt,zmr),e(bt,Sc),e(Sc,Qmr),e(Sc,g6e),e(g6e,Wmr),e(Sc,Hmr),e(Sc,IX),e(IX,Umr),e(Sc,Jmr),e(bt,Ymr),e(bt,h6e),e(h6e,Kmr),e(bt,Zmr),g(UA,bt,null),e(Cr,egr),e(Cr,vo),g(JA,vo,null),e(vo,ogr),e(vo,p6e),e(p6e,rgr),e(vo,tgr),e(vo,Mn),e(Mn,agr),e(Mn,_6e),e(_6e,ngr),e(Mn,sgr),e(Mn,u6e),e(u6e,lgr),e(Mn,igr),e(Mn,b6e),e(b6e,dgr),e(Mn,cgr),e(vo,fgr),e(vo,be),e(be,x8),e(x8,v6e),e(v6e,mgr),e(x8,ggr),e(x8,qX),e(qX,hgr),e(x8,pgr),e(be,_gr),e(be,k8),e(k8,F6e),e(F6e,ugr),e(k8,bgr),e(k8,NX),e(NX,vgr),e(k8,Fgr),e(be,Tgr),e(be,S8),e(S8,T6e),e(T6e,Mgr),e(S8,Egr),e(S8,jX),e(jX,Cgr),e(S8,wgr),e(be,Agr),e(be,R8),e(R8,M6e),e(M6e,ygr),e(R8,Lgr),e(R8,DX),e(DX,xgr),e(R8,kgr),e(be,Sgr),e(be,B8),e(B8,E6e),e(E6e,Rgr),e(B8,Bgr),e(B8,GX),e(GX,Pgr),e(B8,$gr),e(be,Igr),e(be,P8),e(P8,C6e),e(C6e,qgr),e(P8,Ngr),e(P8,OX),e(OX,jgr),e(P8,Dgr),e(be,Ggr),e(be,$8),e($8,w6e),e(w6e,Ogr),e($8,Vgr),e($8,VX),e(VX,Xgr),e($8,zgr),e(be,Qgr),e(be,I8),e(I8,A6e),e(A6e,Wgr),e(I8,Hgr),e(I8,XX),e(XX,Ugr),e(I8,Jgr),e(be,Ygr),e(be,q8),e(q8,y6e),e(y6e,Kgr),e(q8,Zgr),e(q8,zX),e(zX,ehr),e(q8,ohr),e(be,rhr),e(be,N8),e(N8,L6e),e(L6e,thr),e(N8,ahr),e(N8,QX),e(QX,nhr),e(N8,shr),e(vo,lhr),e(vo,x6e),e(x6e,ihr),e(vo,dhr),g(YA,vo,null),b(c,ZBe,u),b(c,Rc,u),e(Rc,j8),e(j8,k6e),g(KA,k6e,null),e(Rc,chr),e(Rc,S6e),e(S6e,fhr),b(c,ePe,u),b(c,wr,u),g(ZA,wr,null),e(wr,mhr),e(wr,Bc),e(Bc,ghr),e(Bc,WX),e(WX,hhr),e(Bc,phr),e(Bc,HX),e(HX,_hr),e(Bc,uhr),e(wr,bhr),e(wr,e0),e(e0,vhr),e(e0,R6e),e(R6e,Fhr),e(e0,Thr),e(wr,Mhr),e(wr,vt),g(o0,vt,null),e(vt,Ehr),e(vt,B6e),e(B6e,Chr),e(vt,whr),e(vt,Pc),e(Pc,Ahr),e(Pc,P6e),e(P6e,yhr),e(Pc,Lhr),e(Pc,UX),e(UX,xhr),e(Pc,khr),e(vt,Shr),e(vt,$6e),e($6e,Rhr),e(vt,Bhr),g(r0,vt,null),e(wr,Phr),e(wr,Fo),g(t0,Fo,null),e(Fo,$hr),e(Fo,I6e),e(I6e,Ihr),e(Fo,qhr),e(Fo,En),e(En,Nhr),e(En,q6e),e(q6e,jhr),e(En,Dhr),e(En,N6e),e(N6e,Ghr),e(En,Ohr),e(En,j6e),e(j6e,Vhr),e(En,Xhr),e(Fo,zhr),e(Fo,V),e(V,D8),e(D8,D6e),e(D6e,Qhr),e(D8,Whr),e(D8,JX),e(JX,Hhr),e(D8,Uhr),e(V,Jhr),e(V,G8),e(G8,G6e),e(G6e,Yhr),e(G8,Khr),e(G8,YX),e(YX,Zhr),e(G8,epr),e(V,opr),e(V,O8),e(O8,O6e),e(O6e,rpr),e(O8,tpr),e(O8,KX),e(KX,apr),e(O8,npr),e(V,spr),e(V,V8),e(V8,V6e),e(V6e,lpr),e(V8,ipr),e(V8,ZX),e(ZX,dpr),e(V8,cpr),e(V,fpr),e(V,X8),e(X8,X6e),e(X6e,mpr),e(X8,gpr),e(X8,ez),e(ez,hpr),e(X8,ppr),e(V,_pr),e(V,z8),e(z8,z6e),e(z6e,upr),e(z8,bpr),e(z8,oz),e(oz,vpr),e(z8,Fpr),e(V,Tpr),e(V,Q8),e(Q8,Q6e),e(Q6e,Mpr),e(Q8,Epr),e(Q8,rz),e(rz,Cpr),e(Q8,wpr),e(V,Apr),e(V,W8),e(W8,W6e),e(W6e,ypr),e(W8,Lpr),e(W8,tz),e(tz,xpr),e(W8,kpr),e(V,Spr),e(V,H8),e(H8,H6e),e(H6e,Rpr),e(H8,Bpr),e(H8,az),e(az,Ppr),e(H8,$pr),e(V,Ipr),e(V,U8),e(U8,U6e),e(U6e,qpr),e(U8,Npr),e(U8,nz),e(nz,jpr),e(U8,Dpr),e(V,Gpr),e(V,J8),e(J8,J6e),e(J6e,Opr),e(J8,Vpr),e(J8,sz),e(sz,Xpr),e(J8,zpr),e(V,Qpr),e(V,Y8),e(Y8,Y6e),e(Y6e,Wpr),e(Y8,Hpr),e(Y8,lz),e(lz,Upr),e(Y8,Jpr),e(V,Ypr),e(V,K8),e(K8,K6e),e(K6e,Kpr),e(K8,Zpr),e(K8,iz),e(iz,e_r),e(K8,o_r),e(V,r_r),e(V,Z8),e(Z8,Z6e),e(Z6e,t_r),e(Z8,a_r),e(Z8,dz),e(dz,n_r),e(Z8,s_r),e(V,l_r),e(V,e9),e(e9,e1e),e(e1e,i_r),e(e9,d_r),e(e9,cz),e(cz,c_r),e(e9,f_r),e(V,m_r),e(V,o9),e(o9,o1e),e(o1e,g_r),e(o9,h_r),e(o9,fz),e(fz,p_r),e(o9,__r),e(V,u_r),e(V,r9),e(r9,r1e),e(r1e,b_r),e(r9,v_r),e(r9,mz),e(mz,F_r),e(r9,T_r),e(V,M_r),e(V,t9),e(t9,t1e),e(t1e,E_r),e(t9,C_r),e(t9,gz),e(gz,w_r),e(t9,A_r),e(V,y_r),e(V,a9),e(a9,a1e),e(a1e,L_r),e(a9,x_r),e(a9,hz),e(hz,k_r),e(a9,S_r),e(V,R_r),e(V,n9),e(n9,n1e),e(n1e,B_r),e(n9,P_r),e(n9,pz),e(pz,$_r),e(n9,I_r),e(V,q_r),e(V,s9),e(s9,s1e),e(s1e,N_r),e(s9,j_r),e(s9,_z),e(_z,D_r),e(s9,G_r),e(V,O_r),e(V,l9),e(l9,l1e),e(l1e,V_r),e(l9,X_r),e(l9,uz),e(uz,z_r),e(l9,Q_r),e(V,W_r),e(V,i9),e(i9,i1e),e(i1e,H_r),e(i9,U_r),e(i9,bz),e(bz,J_r),e(i9,Y_r),e(V,K_r),e(V,d9),e(d9,d1e),e(d1e,Z_r),e(d9,eur),e(d9,vz),e(vz,our),e(d9,rur),e(V,tur),e(V,c9),e(c9,c1e),e(c1e,aur),e(c9,nur),e(c9,Fz),e(Fz,sur),e(c9,lur),e(V,iur),e(V,f9),e(f9,f1e),e(f1e,dur),e(f9,cur),e(f9,Tz),e(Tz,fur),e(f9,mur),e(Fo,gur),e(Fo,m1e),e(m1e,hur),e(Fo,pur),g(a0,Fo,null),b(c,oPe,u),b(c,$c,u),e($c,m9),e(m9,g1e),g(n0,g1e,null),e($c,_ur),e($c,h1e),e(h1e,uur),b(c,rPe,u),b(c,Ar,u),g(s0,Ar,null),e(Ar,bur),e(Ar,Ic),e(Ic,vur),e(Ic,Mz),e(Mz,Fur),e(Ic,Tur),e(Ic,Ez),e(Ez,Mur),e(Ic,Eur),e(Ar,Cur),e(Ar,l0),e(l0,wur),e(l0,p1e),e(p1e,Aur),e(l0,yur),e(Ar,Lur),e(Ar,Ft),g(i0,Ft,null),e(Ft,xur),e(Ft,_1e),e(_1e,kur),e(Ft,Sur),e(Ft,qc),e(qc,Rur),e(qc,u1e),e(u1e,Bur),e(qc,Pur),e(qc,Cz),e(Cz,$ur),e(qc,Iur),e(Ft,qur),e(Ft,b1e),e(b1e,Nur),e(Ft,jur),g(d0,Ft,null),e(Ar,Dur),e(Ar,To),g(c0,To,null),e(To,Gur),e(To,v1e),e(v1e,Our),e(To,Vur),e(To,Cn),e(Cn,Xur),e(Cn,F1e),e(F1e,zur),e(Cn,Qur),e(Cn,T1e),e(T1e,Wur),e(Cn,Hur),e(Cn,M1e),e(M1e,Uur),e(Cn,Jur),e(To,Yur),e(To,se),e(se,g9),e(g9,E1e),e(E1e,Kur),e(g9,Zur),e(g9,wz),e(wz,e6r),e(g9,o6r),e(se,r6r),e(se,h9),e(h9,C1e),e(C1e,t6r),e(h9,a6r),e(h9,Az),e(Az,n6r),e(h9,s6r),e(se,l6r),e(se,p9),e(p9,w1e),e(w1e,i6r),e(p9,d6r),e(p9,yz),e(yz,c6r),e(p9,f6r),e(se,m6r),e(se,_9),e(_9,A1e),e(A1e,g6r),e(_9,h6r),e(_9,Lz),e(Lz,p6r),e(_9,_6r),e(se,u6r),e(se,u9),e(u9,y1e),e(y1e,b6r),e(u9,v6r),e(u9,xz),e(xz,F6r),e(u9,T6r),e(se,M6r),e(se,b9),e(b9,L1e),e(L1e,E6r),e(b9,C6r),e(b9,kz),e(kz,w6r),e(b9,A6r),e(se,y6r),e(se,v9),e(v9,x1e),e(x1e,L6r),e(v9,x6r),e(v9,Sz),e(Sz,k6r),e(v9,S6r),e(se,R6r),e(se,F9),e(F9,k1e),e(k1e,B6r),e(F9,P6r),e(F9,Rz),e(Rz,$6r),e(F9,I6r),e(se,q6r),e(se,T9),e(T9,S1e),e(S1e,N6r),e(T9,j6r),e(T9,Bz),e(Bz,D6r),e(T9,G6r),e(se,O6r),e(se,M9),e(M9,R1e),e(R1e,V6r),e(M9,X6r),e(M9,Pz),e(Pz,z6r),e(M9,Q6r),e(se,W6r),e(se,E9),e(E9,B1e),e(B1e,H6r),e(E9,U6r),e(E9,$z),e($z,J6r),e(E9,Y6r),e(se,K6r),e(se,C9),e(C9,P1e),e(P1e,Z6r),e(C9,e1r),e(C9,Iz),e(Iz,o1r),e(C9,r1r),e(se,t1r),e(se,w9),e(w9,$1e),e($1e,a1r),e(w9,n1r),e(w9,qz),e(qz,s1r),e(w9,l1r),e(se,i1r),e(se,A9),e(A9,I1e),e(I1e,d1r),e(A9,c1r),e(A9,Nz),e(Nz,f1r),e(A9,m1r),e(se,g1r),e(se,y9),e(y9,q1e),e(q1e,h1r),e(y9,p1r),e(y9,jz),e(jz,_1r),e(y9,u1r),e(se,b1r),e(se,L9),e(L9,N1e),e(N1e,v1r),e(L9,F1r),e(L9,Dz),e(Dz,T1r),e(L9,M1r),e(se,E1r),e(se,x9),e(x9,j1e),e(j1e,C1r),e(x9,w1r),e(x9,Gz),e(Gz,A1r),e(x9,y1r),e(To,L1r),e(To,D1e),e(D1e,x1r),e(To,k1r),g(f0,To,null),b(c,tPe,u),b(c,Nc,u),e(Nc,k9),e(k9,G1e),g(m0,G1e,null),e(Nc,S1r),e(Nc,O1e),e(O1e,R1r),b(c,aPe,u),b(c,yr,u),g(g0,yr,null),e(yr,B1r),e(yr,jc),e(jc,P1r),e(jc,Oz),e(Oz,$1r),e(jc,I1r),e(jc,Vz),e(Vz,q1r),e(jc,N1r),e(yr,j1r),e(yr,h0),e(h0,D1r),e(h0,V1e),e(V1e,G1r),e(h0,O1r),e(yr,V1r),e(yr,Tt),g(p0,Tt,null),e(Tt,X1r),e(Tt,X1e),e(X1e,z1r),e(Tt,Q1r),e(Tt,Dc),e(Dc,W1r),e(Dc,z1e),e(z1e,H1r),e(Dc,U1r),e(Dc,Xz),e(Xz,J1r),e(Dc,Y1r),e(Tt,K1r),e(Tt,Q1e),e(Q1e,Z1r),e(Tt,ebr),g(_0,Tt,null),e(yr,obr),e(yr,Mo),g(u0,Mo,null),e(Mo,rbr),e(Mo,W1e),e(W1e,tbr),e(Mo,abr),e(Mo,wn),e(wn,nbr),e(wn,H1e),e(H1e,sbr),e(wn,lbr),e(wn,U1e),e(U1e,ibr),e(wn,dbr),e(wn,J1e),e(J1e,cbr),e(wn,fbr),e(Mo,mbr),e(Mo,Y1e),e(Y1e,S9),e(S9,K1e),e(K1e,gbr),e(S9,hbr),e(S9,zz),e(zz,pbr),e(S9,_br),e(Mo,ubr),e(Mo,Z1e),e(Z1e,bbr),e(Mo,vbr),g(b0,Mo,null),b(c,nPe,u),b(c,Gc,u),e(Gc,R9),e(R9,ebe),g(v0,ebe,null),e(Gc,Fbr),e(Gc,obe),e(obe,Tbr),b(c,sPe,u),b(c,Lr,u),g(F0,Lr,null),e(Lr,Mbr),e(Lr,Oc),e(Oc,Ebr),e(Oc,Qz),e(Qz,Cbr),e(Oc,wbr),e(Oc,Wz),e(Wz,Abr),e(Oc,ybr),e(Lr,Lbr),e(Lr,T0),e(T0,xbr),e(T0,rbe),e(rbe,kbr),e(T0,Sbr),e(Lr,Rbr),e(Lr,Mt),g(M0,Mt,null),e(Mt,Bbr),e(Mt,tbe),e(tbe,Pbr),e(Mt,$br),e(Mt,Vc),e(Vc,Ibr),e(Vc,abe),e(abe,qbr),e(Vc,Nbr),e(Vc,Hz),e(Hz,jbr),e(Vc,Dbr),e(Mt,Gbr),e(Mt,nbe),e(nbe,Obr),e(Mt,Vbr),g(E0,Mt,null),e(Lr,Xbr),e(Lr,Eo),g(C0,Eo,null),e(Eo,zbr),e(Eo,sbe),e(sbe,Qbr),e(Eo,Wbr),e(Eo,An),e(An,Hbr),e(An,lbe),e(lbe,Ubr),e(An,Jbr),e(An,ibe),e(ibe,Ybr),e(An,Kbr),e(An,dbe),e(dbe,Zbr),e(An,e2r),e(Eo,o2r),e(Eo,K),e(K,B9),e(B9,cbe),e(cbe,r2r),e(B9,t2r),e(B9,Uz),e(Uz,a2r),e(B9,n2r),e(K,s2r),e(K,P9),e(P9,fbe),e(fbe,l2r),e(P9,i2r),e(P9,Jz),e(Jz,d2r),e(P9,c2r),e(K,f2r),e(K,$9),e($9,mbe),e(mbe,m2r),e($9,g2r),e($9,Yz),e(Yz,h2r),e($9,p2r),e(K,_2r),e(K,I9),e(I9,gbe),e(gbe,u2r),e(I9,b2r),e(I9,Kz),e(Kz,v2r),e(I9,F2r),e(K,T2r),e(K,q9),e(q9,hbe),e(hbe,M2r),e(q9,E2r),e(q9,Zz),e(Zz,C2r),e(q9,w2r),e(K,A2r),e(K,N9),e(N9,pbe),e(pbe,y2r),e(N9,L2r),e(N9,eQ),e(eQ,x2r),e(N9,k2r),e(K,S2r),e(K,j9),e(j9,_be),e(_be,R2r),e(j9,B2r),e(j9,oQ),e(oQ,P2r),e(j9,$2r),e(K,I2r),e(K,D9),e(D9,ube),e(ube,q2r),e(D9,N2r),e(D9,rQ),e(rQ,j2r),e(D9,D2r),e(K,G2r),e(K,G9),e(G9,bbe),e(bbe,O2r),e(G9,V2r),e(G9,tQ),e(tQ,X2r),e(G9,z2r),e(K,Q2r),e(K,O9),e(O9,vbe),e(vbe,W2r),e(O9,H2r),e(O9,aQ),e(aQ,U2r),e(O9,J2r),e(K,Y2r),e(K,V9),e(V9,Fbe),e(Fbe,K2r),e(V9,Z2r),e(V9,nQ),e(nQ,evr),e(V9,ovr),e(K,rvr),e(K,X9),e(X9,Tbe),e(Tbe,tvr),e(X9,avr),e(X9,sQ),e(sQ,nvr),e(X9,svr),e(K,lvr),e(K,z9),e(z9,Mbe),e(Mbe,ivr),e(z9,dvr),e(z9,lQ),e(lQ,cvr),e(z9,fvr),e(K,mvr),e(K,Q9),e(Q9,Ebe),e(Ebe,gvr),e(Q9,hvr),e(Q9,iQ),e(iQ,pvr),e(Q9,_vr),e(K,uvr),e(K,W9),e(W9,Cbe),e(Cbe,bvr),e(W9,vvr),e(W9,dQ),e(dQ,Fvr),e(W9,Tvr),e(K,Mvr),e(K,H9),e(H9,wbe),e(wbe,Evr),e(H9,Cvr),e(H9,cQ),e(cQ,wvr),e(H9,Avr),e(K,yvr),e(K,U9),e(U9,Abe),e(Abe,Lvr),e(U9,xvr),e(U9,fQ),e(fQ,kvr),e(U9,Svr),e(K,Rvr),e(K,J9),e(J9,ybe),e(ybe,Bvr),e(J9,Pvr),e(J9,mQ),e(mQ,$vr),e(J9,Ivr),e(K,qvr),e(K,Y9),e(Y9,Lbe),e(Lbe,Nvr),e(Y9,jvr),e(Y9,gQ),e(gQ,Dvr),e(Y9,Gvr),e(K,Ovr),e(K,K9),e(K9,xbe),e(xbe,Vvr),e(K9,Xvr),e(K9,hQ),e(hQ,zvr),e(K9,Qvr),e(Eo,Wvr),e(Eo,kbe),e(kbe,Hvr),e(Eo,Uvr),g(w0,Eo,null),b(c,lPe,u),b(c,Xc,u),e(Xc,Z9),e(Z9,Sbe),g(A0,Sbe,null),e(Xc,Jvr),e(Xc,Rbe),e(Rbe,Yvr),b(c,iPe,u),b(c,xr,u),g(y0,xr,null),e(xr,Kvr),e(xr,zc),e(zc,Zvr),e(zc,pQ),e(pQ,eFr),e(zc,oFr),e(zc,_Q),e(_Q,rFr),e(zc,tFr),e(xr,aFr),e(xr,L0),e(L0,nFr),e(L0,Bbe),e(Bbe,sFr),e(L0,lFr),e(xr,iFr),e(xr,Et),g(x0,Et,null),e(Et,dFr),e(Et,Pbe),e(Pbe,cFr),e(Et,fFr),e(Et,Qc),e(Qc,mFr),e(Qc,$be),e($be,gFr),e(Qc,hFr),e(Qc,uQ),e(uQ,pFr),e(Qc,_Fr),e(Et,uFr),e(Et,Ibe),e(Ibe,bFr),e(Et,vFr),g(k0,Et,null),e(xr,FFr),e(xr,Co),g(S0,Co,null),e(Co,TFr),e(Co,qbe),e(qbe,MFr),e(Co,EFr),e(Co,yn),e(yn,CFr),e(yn,Nbe),e(Nbe,wFr),e(yn,AFr),e(yn,jbe),e(jbe,yFr),e(yn,LFr),e(yn,Dbe),e(Dbe,xFr),e(yn,kFr),e(Co,SFr),e(Co,Z),e(Z,eM),e(eM,Gbe),e(Gbe,RFr),e(eM,BFr),e(eM,bQ),e(bQ,PFr),e(eM,$Fr),e(Z,IFr),e(Z,oM),e(oM,Obe),e(Obe,qFr),e(oM,NFr),e(oM,vQ),e(vQ,jFr),e(oM,DFr),e(Z,GFr),e(Z,rM),e(rM,Vbe),e(Vbe,OFr),e(rM,VFr),e(rM,FQ),e(FQ,XFr),e(rM,zFr),e(Z,QFr),e(Z,tM),e(tM,Xbe),e(Xbe,WFr),e(tM,HFr),e(tM,TQ),e(TQ,UFr),e(tM,JFr),e(Z,YFr),e(Z,aM),e(aM,zbe),e(zbe,KFr),e(aM,ZFr),e(aM,MQ),e(MQ,eTr),e(aM,oTr),e(Z,rTr),e(Z,nM),e(nM,Qbe),e(Qbe,tTr),e(nM,aTr),e(nM,EQ),e(EQ,nTr),e(nM,sTr),e(Z,lTr),e(Z,sM),e(sM,Wbe),e(Wbe,iTr),e(sM,dTr),e(sM,CQ),e(CQ,cTr),e(sM,fTr),e(Z,mTr),e(Z,lM),e(lM,Hbe),e(Hbe,gTr),e(lM,hTr),e(lM,wQ),e(wQ,pTr),e(lM,_Tr),e(Z,uTr),e(Z,iM),e(iM,Ube),e(Ube,bTr),e(iM,vTr),e(iM,AQ),e(AQ,FTr),e(iM,TTr),e(Z,MTr),e(Z,dM),e(dM,Jbe),e(Jbe,ETr),e(dM,CTr),e(dM,yQ),e(yQ,wTr),e(dM,ATr),e(Z,yTr),e(Z,cM),e(cM,Ybe),e(Ybe,LTr),e(cM,xTr),e(cM,LQ),e(LQ,kTr),e(cM,STr),e(Z,RTr),e(Z,fM),e(fM,Kbe),e(Kbe,BTr),e(fM,PTr),e(fM,xQ),e(xQ,$Tr),e(fM,ITr),e(Z,qTr),e(Z,mM),e(mM,Zbe),e(Zbe,NTr),e(mM,jTr),e(mM,kQ),e(kQ,DTr),e(mM,GTr),e(Z,OTr),e(Z,gM),e(gM,e2e),e(e2e,VTr),e(gM,XTr),e(gM,SQ),e(SQ,zTr),e(gM,QTr),e(Z,WTr),e(Z,hM),e(hM,o2e),e(o2e,HTr),e(hM,UTr),e(hM,RQ),e(RQ,JTr),e(hM,YTr),e(Z,KTr),e(Z,pM),e(pM,r2e),e(r2e,ZTr),e(pM,e8r),e(pM,BQ),e(BQ,o8r),e(pM,r8r),e(Z,t8r),e(Z,_M),e(_M,t2e),e(t2e,a8r),e(_M,n8r),e(_M,PQ),e(PQ,s8r),e(_M,l8r),e(Z,i8r),e(Z,uM),e(uM,a2e),e(a2e,d8r),e(uM,c8r),e(uM,$Q),e($Q,f8r),e(uM,m8r),e(Z,g8r),e(Z,bM),e(bM,n2e),e(n2e,h8r),e(bM,p8r),e(bM,IQ),e(IQ,_8r),e(bM,u8r),e(Z,b8r),e(Z,vM),e(vM,s2e),e(s2e,v8r),e(vM,F8r),e(vM,qQ),e(qQ,T8r),e(vM,M8r),e(Co,E8r),e(Co,l2e),e(l2e,C8r),e(Co,w8r),g(R0,Co,null),b(c,dPe,u),b(c,Wc,u),e(Wc,FM),e(FM,i2e),g(B0,i2e,null),e(Wc,A8r),e(Wc,d2e),e(d2e,y8r),b(c,cPe,u),b(c,kr,u),g(P0,kr,null),e(kr,L8r),e(kr,Hc),e(Hc,x8r),e(Hc,NQ),e(NQ,k8r),e(Hc,S8r),e(Hc,jQ),e(jQ,R8r),e(Hc,B8r),e(kr,P8r),e(kr,$0),e($0,$8r),e($0,c2e),e(c2e,I8r),e($0,q8r),e(kr,N8r),e(kr,Ct),g(I0,Ct,null),e(Ct,j8r),e(Ct,f2e),e(f2e,D8r),e(Ct,G8r),e(Ct,Uc),e(Uc,O8r),e(Uc,m2e),e(m2e,V8r),e(Uc,X8r),e(Uc,DQ),e(DQ,z8r),e(Uc,Q8r),e(Ct,W8r),e(Ct,g2e),e(g2e,H8r),e(Ct,U8r),g(q0,Ct,null),e(kr,J8r),e(kr,wo),g(N0,wo,null),e(wo,Y8r),e(wo,h2e),e(h2e,K8r),e(wo,Z8r),e(wo,Ln),e(Ln,e9r),e(Ln,p2e),e(p2e,o9r),e(Ln,r9r),e(Ln,_2e),e(_2e,t9r),e(Ln,a9r),e(Ln,u2e),e(u2e,n9r),e(Ln,s9r),e(wo,l9r),e(wo,b2e),e(b2e,TM),e(TM,v2e),e(v2e,i9r),e(TM,d9r),e(TM,GQ),e(GQ,c9r),e(TM,f9r),e(wo,m9r),e(wo,F2e),e(F2e,g9r),e(wo,h9r),g(j0,wo,null),b(c,fPe,u),b(c,Jc,u),e(Jc,MM),e(MM,T2e),g(D0,T2e,null),e(Jc,p9r),e(Jc,M2e),e(M2e,_9r),b(c,mPe,u),b(c,Sr,u),g(G0,Sr,null),e(Sr,u9r),e(Sr,Yc),e(Yc,b9r),e(Yc,OQ),e(OQ,v9r),e(Yc,F9r),e(Yc,VQ),e(VQ,T9r),e(Yc,M9r),e(Sr,E9r),e(Sr,O0),e(O0,C9r),e(O0,E2e),e(E2e,w9r),e(O0,A9r),e(Sr,y9r),e(Sr,wt),g(V0,wt,null),e(wt,L9r),e(wt,C2e),e(C2e,x9r),e(wt,k9r),e(wt,Kc),e(Kc,S9r),e(Kc,w2e),e(w2e,R9r),e(Kc,B9r),e(Kc,XQ),e(XQ,P9r),e(Kc,$9r),e(wt,I9r),e(wt,A2e),e(A2e,q9r),e(wt,N9r),g(X0,wt,null),e(Sr,j9r),e(Sr,Ao),g(z0,Ao,null),e(Ao,D9r),e(Ao,y2e),e(y2e,G9r),e(Ao,O9r),e(Ao,xn),e(xn,V9r),e(xn,L2e),e(L2e,X9r),e(xn,z9r),e(xn,x2e),e(x2e,Q9r),e(xn,W9r),e(xn,k2e),e(k2e,H9r),e(xn,U9r),e(Ao,J9r),e(Ao,S2e),e(S2e,EM),e(EM,R2e),e(R2e,Y9r),e(EM,K9r),e(EM,zQ),e(zQ,Z9r),e(EM,eMr),e(Ao,oMr),e(Ao,B2e),e(B2e,rMr),e(Ao,tMr),g(Q0,Ao,null),b(c,gPe,u),b(c,Zc,u),e(Zc,CM),e(CM,P2e),g(W0,P2e,null),e(Zc,aMr),e(Zc,$2e),e($2e,nMr),b(c,hPe,u),b(c,Rr,u),g(H0,Rr,null),e(Rr,sMr),e(Rr,ef),e(ef,lMr),e(ef,QQ),e(QQ,iMr),e(ef,dMr),e(ef,WQ),e(WQ,cMr),e(ef,fMr),e(Rr,mMr),e(Rr,U0),e(U0,gMr),e(U0,I2e),e(I2e,hMr),e(U0,pMr),e(Rr,_Mr),e(Rr,At),g(J0,At,null),e(At,uMr),e(At,q2e),e(q2e,bMr),e(At,vMr),e(At,of),e(of,FMr),e(of,N2e),e(N2e,TMr),e(of,MMr),e(of,HQ),e(HQ,EMr),e(of,CMr),e(At,wMr),e(At,j2e),e(j2e,AMr),e(At,yMr),g(Y0,At,null),e(Rr,LMr),e(Rr,yo),g(K0,yo,null),e(yo,xMr),e(yo,D2e),e(D2e,kMr),e(yo,SMr),e(yo,kn),e(kn,RMr),e(kn,G2e),e(G2e,BMr),e(kn,PMr),e(kn,O2e),e(O2e,$Mr),e(kn,IMr),e(kn,V2e),e(V2e,qMr),e(kn,NMr),e(yo,jMr),e(yo,z),e(z,wM),e(wM,X2e),e(X2e,DMr),e(wM,GMr),e(wM,UQ),e(UQ,OMr),e(wM,VMr),e(z,XMr),e(z,AM),e(AM,z2e),e(z2e,zMr),e(AM,QMr),e(AM,JQ),e(JQ,WMr),e(AM,HMr),e(z,UMr),e(z,yM),e(yM,Q2e),e(Q2e,JMr),e(yM,YMr),e(yM,YQ),e(YQ,KMr),e(yM,ZMr),e(z,e4r),e(z,LM),e(LM,W2e),e(W2e,o4r),e(LM,r4r),e(LM,KQ),e(KQ,t4r),e(LM,a4r),e(z,n4r),e(z,xM),e(xM,H2e),e(H2e,s4r),e(xM,l4r),e(xM,ZQ),e(ZQ,i4r),e(xM,d4r),e(z,c4r),e(z,kM),e(kM,U2e),e(U2e,f4r),e(kM,m4r),e(kM,eW),e(eW,g4r),e(kM,h4r),e(z,p4r),e(z,SM),e(SM,J2e),e(J2e,_4r),e(SM,u4r),e(SM,oW),e(oW,b4r),e(SM,v4r),e(z,F4r),e(z,RM),e(RM,Y2e),e(Y2e,T4r),e(RM,M4r),e(RM,rW),e(rW,E4r),e(RM,C4r),e(z,w4r),e(z,BM),e(BM,K2e),e(K2e,A4r),e(BM,y4r),e(BM,tW),e(tW,L4r),e(BM,x4r),e(z,k4r),e(z,PM),e(PM,Z2e),e(Z2e,S4r),e(PM,R4r),e(PM,aW),e(aW,B4r),e(PM,P4r),e(z,$4r),e(z,$M),e($M,eve),e(eve,I4r),e($M,q4r),e($M,nW),e(nW,N4r),e($M,j4r),e(z,D4r),e(z,IM),e(IM,ove),e(ove,G4r),e(IM,O4r),e(IM,sW),e(sW,V4r),e(IM,X4r),e(z,z4r),e(z,qM),e(qM,rve),e(rve,Q4r),e(qM,W4r),e(qM,lW),e(lW,H4r),e(qM,U4r),e(z,J4r),e(z,NM),e(NM,tve),e(tve,Y4r),e(NM,K4r),e(NM,iW),e(iW,Z4r),e(NM,eEr),e(z,oEr),e(z,jM),e(jM,ave),e(ave,rEr),e(jM,tEr),e(jM,dW),e(dW,aEr),e(jM,nEr),e(z,sEr),e(z,DM),e(DM,nve),e(nve,lEr),e(DM,iEr),e(DM,cW),e(cW,dEr),e(DM,cEr),e(z,fEr),e(z,GM),e(GM,sve),e(sve,mEr),e(GM,gEr),e(GM,fW),e(fW,hEr),e(GM,pEr),e(z,_Er),e(z,OM),e(OM,lve),e(lve,uEr),e(OM,bEr),e(OM,mW),e(mW,vEr),e(OM,FEr),e(z,TEr),e(z,VM),e(VM,ive),e(ive,MEr),e(VM,EEr),e(VM,gW),e(gW,CEr),e(VM,wEr),e(z,AEr),e(z,XM),e(XM,dve),e(dve,yEr),e(XM,LEr),e(XM,hW),e(hW,xEr),e(XM,kEr),e(z,SEr),e(z,zM),e(zM,cve),e(cve,REr),e(zM,BEr),e(zM,pW),e(pW,PEr),e(zM,$Er),e(z,IEr),e(z,QM),e(QM,fve),e(fve,qEr),e(QM,NEr),e(QM,_W),e(_W,jEr),e(QM,DEr),e(z,GEr),e(z,WM),e(WM,mve),e(mve,OEr),e(WM,VEr),e(WM,uW),e(uW,XEr),e(WM,zEr),e(z,QEr),e(z,HM),e(HM,gve),e(gve,WEr),e(HM,HEr),e(HM,bW),e(bW,UEr),e(HM,JEr),e(z,YEr),e(z,UM),e(UM,hve),e(hve,KEr),e(UM,ZEr),e(UM,vW),e(vW,e5r),e(UM,o5r),e(yo,r5r),e(yo,pve),e(pve,t5r),e(yo,a5r),g(Z0,yo,null),b(c,pPe,u),b(c,rf,u),e(rf,JM),e(JM,_ve),g(ey,_ve,null),e(rf,n5r),e(rf,uve),e(uve,s5r),b(c,_Pe,u),b(c,Br,u),g(oy,Br,null),e(Br,l5r),e(Br,tf),e(tf,i5r),e(tf,FW),e(FW,d5r),e(tf,c5r),e(tf,TW),e(TW,f5r),e(tf,m5r),e(Br,g5r),e(Br,ry),e(ry,h5r),e(ry,bve),e(bve,p5r),e(ry,_5r),e(Br,u5r),e(Br,yt),g(ty,yt,null),e(yt,b5r),e(yt,vve),e(vve,v5r),e(yt,F5r),e(yt,af),e(af,T5r),e(af,Fve),e(Fve,M5r),e(af,E5r),e(af,MW),e(MW,C5r),e(af,w5r),e(yt,A5r),e(yt,Tve),e(Tve,y5r),e(yt,L5r),g(ay,yt,null),e(Br,x5r),e(Br,Lo),g(ny,Lo,null),e(Lo,k5r),e(Lo,Mve),e(Mve,S5r),e(Lo,R5r),e(Lo,Sn),e(Sn,B5r),e(Sn,Eve),e(Eve,P5r),e(Sn,$5r),e(Sn,Cve),e(Cve,I5r),e(Sn,q5r),e(Sn,wve),e(wve,N5r),e(Sn,j5r),e(Lo,D5r),e(Lo,ca),e(ca,YM),e(YM,Ave),e(Ave,G5r),e(YM,O5r),e(YM,EW),e(EW,V5r),e(YM,X5r),e(ca,z5r),e(ca,KM),e(KM,yve),e(yve,Q5r),e(KM,W5r),e(KM,CW),e(CW,H5r),e(KM,U5r),e(ca,J5r),e(ca,ZM),e(ZM,Lve),e(Lve,Y5r),e(ZM,K5r),e(ZM,wW),e(wW,Z5r),e(ZM,e3r),e(ca,o3r),e(ca,e4),e(e4,xve),e(xve,r3r),e(e4,t3r),e(e4,AW),e(AW,a3r),e(e4,n3r),e(ca,s3r),e(ca,o4),e(o4,kve),e(kve,l3r),e(o4,i3r),e(o4,yW),e(yW,d3r),e(o4,c3r),e(Lo,f3r),e(Lo,Sve),e(Sve,m3r),e(Lo,g3r),g(sy,Lo,null),b(c,uPe,u),b(c,nf,u),e(nf,r4),e(r4,Rve),g(ly,Rve,null),e(nf,h3r),e(nf,Bve),e(Bve,p3r),b(c,bPe,u),b(c,Pr,u),g(iy,Pr,null),e(Pr,_3r),e(Pr,sf),e(sf,u3r),e(sf,LW),e(LW,b3r),e(sf,v3r),e(sf,xW),e(xW,F3r),e(sf,T3r),e(Pr,M3r),e(Pr,dy),e(dy,E3r),e(dy,Pve),e(Pve,C3r),e(dy,w3r),e(Pr,A3r),e(Pr,Lt),g(cy,Lt,null),e(Lt,y3r),e(Lt,$ve),e($ve,L3r),e(Lt,x3r),e(Lt,lf),e(lf,k3r),e(lf,Ive),e(Ive,S3r),e(lf,R3r),e(lf,kW),e(kW,B3r),e(lf,P3r),e(Lt,$3r),e(Lt,qve),e(qve,I3r),e(Lt,q3r),g(fy,Lt,null),e(Pr,N3r),e(Pr,xo),g(my,xo,null),e(xo,j3r),e(xo,Nve),e(Nve,D3r),e(xo,G3r),e(xo,Rn),e(Rn,O3r),e(Rn,jve),e(jve,V3r),e(Rn,X3r),e(Rn,Dve),e(Dve,z3r),e(Rn,Q3r),e(Rn,Gve),e(Gve,W3r),e(Rn,H3r),e(xo,U3r),e(xo,me),e(me,t4),e(t4,Ove),e(Ove,J3r),e(t4,Y3r),e(t4,SW),e(SW,K3r),e(t4,Z3r),e(me,eCr),e(me,a4),e(a4,Vve),e(Vve,oCr),e(a4,rCr),e(a4,RW),e(RW,tCr),e(a4,aCr),e(me,nCr),e(me,n4),e(n4,Xve),e(Xve,sCr),e(n4,lCr),e(n4,BW),e(BW,iCr),e(n4,dCr),e(me,cCr),e(me,s4),e(s4,zve),e(zve,fCr),e(s4,mCr),e(s4,PW),e(PW,gCr),e(s4,hCr),e(me,pCr),e(me,l4),e(l4,Qve),e(Qve,_Cr),e(l4,uCr),e(l4,$W),e($W,bCr),e(l4,vCr),e(me,FCr),e(me,i4),e(i4,Wve),e(Wve,TCr),e(i4,MCr),e(i4,IW),e(IW,ECr),e(i4,CCr),e(me,wCr),e(me,d4),e(d4,Hve),e(Hve,ACr),e(d4,yCr),e(d4,qW),e(qW,LCr),e(d4,xCr),e(me,kCr),e(me,c4),e(c4,Uve),e(Uve,SCr),e(c4,RCr),e(c4,NW),e(NW,BCr),e(c4,PCr),e(me,$Cr),e(me,f4),e(f4,Jve),e(Jve,ICr),e(f4,qCr),e(f4,jW),e(jW,NCr),e(f4,jCr),e(me,DCr),e(me,m4),e(m4,Yve),e(Yve,GCr),e(m4,OCr),e(m4,DW),e(DW,VCr),e(m4,XCr),e(me,zCr),e(me,g4),e(g4,Kve),e(Kve,QCr),e(g4,WCr),e(g4,GW),e(GW,HCr),e(g4,UCr),e(me,JCr),e(me,h4),e(h4,Zve),e(Zve,YCr),e(h4,KCr),e(h4,OW),e(OW,ZCr),e(h4,ewr),e(xo,owr),e(xo,eFe),e(eFe,rwr),e(xo,twr),g(gy,xo,null),b(c,vPe,u),b(c,df,u),e(df,p4),e(p4,oFe),g(hy,oFe,null),e(df,awr),e(df,rFe),e(rFe,nwr),b(c,FPe,u),b(c,$r,u),g(py,$r,null),e($r,swr),e($r,cf),e(cf,lwr),e(cf,VW),e(VW,iwr),e(cf,dwr),e(cf,XW),e(XW,cwr),e(cf,fwr),e($r,mwr),e($r,_y),e(_y,gwr),e(_y,tFe),e(tFe,hwr),e(_y,pwr),e($r,_wr),e($r,xt),g(uy,xt,null),e(xt,uwr),e(xt,aFe),e(aFe,bwr),e(xt,vwr),e(xt,ff),e(ff,Fwr),e(ff,nFe),e(nFe,Twr),e(ff,Mwr),e(ff,zW),e(zW,Ewr),e(ff,Cwr),e(xt,wwr),e(xt,sFe),e(sFe,Awr),e(xt,ywr),g(by,xt,null),e($r,Lwr),e($r,ko),g(vy,ko,null),e(ko,xwr),e(ko,lFe),e(lFe,kwr),e(ko,Swr),e(ko,Bn),e(Bn,Rwr),e(Bn,iFe),e(iFe,Bwr),e(Bn,Pwr),e(Bn,dFe),e(dFe,$wr),e(Bn,Iwr),e(Bn,cFe),e(cFe,qwr),e(Bn,Nwr),e(ko,jwr),e(ko,ve),e(ve,_4),e(_4,fFe),e(fFe,Dwr),e(_4,Gwr),e(_4,QW),e(QW,Owr),e(_4,Vwr),e(ve,Xwr),e(ve,u4),e(u4,mFe),e(mFe,zwr),e(u4,Qwr),e(u4,WW),e(WW,Wwr),e(u4,Hwr),e(ve,Uwr),e(ve,b4),e(b4,gFe),e(gFe,Jwr),e(b4,Ywr),e(b4,HW),e(HW,Kwr),e(b4,Zwr),e(ve,eAr),e(ve,v4),e(v4,hFe),e(hFe,oAr),e(v4,rAr),e(v4,UW),e(UW,tAr),e(v4,aAr),e(ve,nAr),e(ve,F4),e(F4,pFe),e(pFe,sAr),e(F4,lAr),e(F4,JW),e(JW,iAr),e(F4,dAr),e(ve,cAr),e(ve,T4),e(T4,_Fe),e(_Fe,fAr),e(T4,mAr),e(T4,YW),e(YW,gAr),e(T4,hAr),e(ve,pAr),e(ve,M4),e(M4,uFe),e(uFe,_Ar),e(M4,uAr),e(M4,KW),e(KW,bAr),e(M4,vAr),e(ve,FAr),e(ve,E4),e(E4,bFe),e(bFe,TAr),e(E4,MAr),e(E4,ZW),e(ZW,EAr),e(E4,CAr),e(ve,wAr),e(ve,C4),e(C4,vFe),e(vFe,AAr),e(C4,yAr),e(C4,eH),e(eH,LAr),e(C4,xAr),e(ve,kAr),e(ve,w4),e(w4,FFe),e(FFe,SAr),e(w4,RAr),e(w4,oH),e(oH,BAr),e(w4,PAr),e(ko,$Ar),e(ko,TFe),e(TFe,IAr),e(ko,qAr),g(Fy,ko,null),b(c,TPe,u),b(c,mf,u),e(mf,A4),e(A4,MFe),g(Ty,MFe,null),e(mf,NAr),e(mf,EFe),e(EFe,jAr),b(c,MPe,u),b(c,Ir,u),g(My,Ir,null),e(Ir,DAr),e(Ir,gf),e(gf,GAr),e(gf,rH),e(rH,OAr),e(gf,VAr),e(gf,tH),e(tH,XAr),e(gf,zAr),e(Ir,QAr),e(Ir,Ey),e(Ey,WAr),e(Ey,CFe),e(CFe,HAr),e(Ey,UAr),e(Ir,JAr),e(Ir,kt),g(Cy,kt,null),e(kt,YAr),e(kt,wFe),e(wFe,KAr),e(kt,ZAr),e(kt,hf),e(hf,e0r),e(hf,AFe),e(AFe,o0r),e(hf,r0r),e(hf,aH),e(aH,t0r),e(hf,a0r),e(kt,n0r),e(kt,yFe),e(yFe,s0r),e(kt,l0r),g(wy,kt,null),e(Ir,i0r),e(Ir,So),g(Ay,So,null),e(So,d0r),e(So,LFe),e(LFe,c0r),e(So,f0r),e(So,Pn),e(Pn,m0r),e(Pn,xFe),e(xFe,g0r),e(Pn,h0r),e(Pn,kFe),e(kFe,p0r),e(Pn,_0r),e(Pn,SFe),e(SFe,u0r),e(Pn,b0r),e(So,v0r),e(So,Ee),e(Ee,y4),e(y4,RFe),e(RFe,F0r),e(y4,T0r),e(y4,nH),e(nH,M0r),e(y4,E0r),e(Ee,C0r),e(Ee,L4),e(L4,BFe),e(BFe,w0r),e(L4,A0r),e(L4,sH),e(sH,y0r),e(L4,L0r),e(Ee,x0r),e(Ee,x4),e(x4,PFe),e(PFe,k0r),e(x4,S0r),e(x4,lH),e(lH,R0r),e(x4,B0r),e(Ee,P0r),e(Ee,k4),e(k4,$Fe),e($Fe,$0r),e(k4,I0r),e(k4,iH),e(iH,q0r),e(k4,N0r),e(Ee,j0r),e(Ee,S4),e(S4,IFe),e(IFe,D0r),e(S4,G0r),e(S4,dH),e(dH,O0r),e(S4,V0r),e(Ee,X0r),e(Ee,R4),e(R4,qFe),e(qFe,z0r),e(R4,Q0r),e(R4,cH),e(cH,W0r),e(R4,H0r),e(Ee,U0r),e(Ee,B4),e(B4,NFe),e(NFe,J0r),e(B4,Y0r),e(B4,fH),e(fH,K0r),e(B4,Z0r),e(Ee,eyr),e(Ee,P4),e(P4,jFe),e(jFe,oyr),e(P4,ryr),e(P4,mH),e(mH,tyr),e(P4,ayr),e(Ee,nyr),e(Ee,$4),e($4,DFe),e(DFe,syr),e($4,lyr),e($4,gH),e(gH,iyr),e($4,dyr),e(So,cyr),e(So,GFe),e(GFe,fyr),e(So,myr),g(yy,So,null),b(c,EPe,u),b(c,pf,u),e(pf,I4),e(I4,OFe),g(Ly,OFe,null),e(pf,gyr),e(pf,VFe),e(VFe,hyr),b(c,CPe,u),b(c,qr,u),g(xy,qr,null),e(qr,pyr),e(qr,_f),e(_f,_yr),e(_f,hH),e(hH,uyr),e(_f,byr),e(_f,pH),e(pH,vyr),e(_f,Fyr),e(qr,Tyr),e(qr,ky),e(ky,Myr),e(ky,XFe),e(XFe,Eyr),e(ky,Cyr),e(qr,wyr),e(qr,St),g(Sy,St,null),e(St,Ayr),e(St,zFe),e(zFe,yyr),e(St,Lyr),e(St,uf),e(uf,xyr),e(uf,QFe),e(QFe,kyr),e(uf,Syr),e(uf,_H),e(_H,Ryr),e(uf,Byr),e(St,Pyr),e(St,WFe),e(WFe,$yr),e(St,Iyr),g(Ry,St,null),e(qr,qyr),e(qr,Ro),g(By,Ro,null),e(Ro,Nyr),e(Ro,HFe),e(HFe,jyr),e(Ro,Dyr),e(Ro,$n),e($n,Gyr),e($n,UFe),e(UFe,Oyr),e($n,Vyr),e($n,JFe),e(JFe,Xyr),e($n,zyr),e($n,YFe),e(YFe,Qyr),e($n,Wyr),e(Ro,Hyr),e(Ro,Fe),e(Fe,q4),e(q4,KFe),e(KFe,Uyr),e(q4,Jyr),e(q4,uH),e(uH,Yyr),e(q4,Kyr),e(Fe,Zyr),e(Fe,N4),e(N4,ZFe),e(ZFe,eLr),e(N4,oLr),e(N4,bH),e(bH,rLr),e(N4,tLr),e(Fe,aLr),e(Fe,j4),e(j4,eTe),e(eTe,nLr),e(j4,sLr),e(j4,vH),e(vH,lLr),e(j4,iLr),e(Fe,dLr),e(Fe,D4),e(D4,oTe),e(oTe,cLr),e(D4,fLr),e(D4,FH),e(FH,mLr),e(D4,gLr),e(Fe,hLr),e(Fe,G4),e(G4,rTe),e(rTe,pLr),e(G4,_Lr),e(G4,TH),e(TH,uLr),e(G4,bLr),e(Fe,vLr),e(Fe,O4),e(O4,tTe),e(tTe,FLr),e(O4,TLr),e(O4,MH),e(MH,MLr),e(O4,ELr),e(Fe,CLr),e(Fe,V4),e(V4,aTe),e(aTe,wLr),e(V4,ALr),e(V4,EH),e(EH,yLr),e(V4,LLr),e(Fe,xLr),e(Fe,X4),e(X4,nTe),e(nTe,kLr),e(X4,SLr),e(X4,CH),e(CH,RLr),e(X4,BLr),e(Fe,PLr),e(Fe,z4),e(z4,sTe),e(sTe,$Lr),e(z4,ILr),e(z4,wH),e(wH,qLr),e(z4,NLr),e(Fe,jLr),e(Fe,Q4),e(Q4,lTe),e(lTe,DLr),e(Q4,GLr),e(Q4,AH),e(AH,OLr),e(Q4,VLr),e(Ro,XLr),e(Ro,iTe),e(iTe,zLr),e(Ro,QLr),g(Py,Ro,null),b(c,wPe,u),b(c,bf,u),e(bf,W4),e(W4,dTe),g($y,dTe,null),e(bf,WLr),e(bf,cTe),e(cTe,HLr),b(c,APe,u),b(c,Nr,u),g(Iy,Nr,null),e(Nr,ULr),e(Nr,vf),e(vf,JLr),e(vf,yH),e(yH,YLr),e(vf,KLr),e(vf,LH),e(LH,ZLr),e(vf,e7r),e(Nr,o7r),e(Nr,qy),e(qy,r7r),e(qy,fTe),e(fTe,t7r),e(qy,a7r),e(Nr,n7r),e(Nr,Rt),g(Ny,Rt,null),e(Rt,s7r),e(Rt,mTe),e(mTe,l7r),e(Rt,i7r),e(Rt,Ff),e(Ff,d7r),e(Ff,gTe),e(gTe,c7r),e(Ff,f7r),e(Ff,xH),e(xH,m7r),e(Ff,g7r),e(Rt,h7r),e(Rt,hTe),e(hTe,p7r),e(Rt,_7r),g(jy,Rt,null),e(Nr,u7r),e(Nr,Bo),g(Dy,Bo,null),e(Bo,b7r),e(Bo,pTe),e(pTe,v7r),e(Bo,F7r),e(Bo,In),e(In,T7r),e(In,_Te),e(_Te,M7r),e(In,E7r),e(In,uTe),e(uTe,C7r),e(In,w7r),e(In,bTe),e(bTe,A7r),e(In,y7r),e(Bo,L7r),e(Bo,Te),e(Te,H4),e(H4,vTe),e(vTe,x7r),e(H4,k7r),e(H4,kH),e(kH,S7r),e(H4,R7r),e(Te,B7r),e(Te,U4),e(U4,FTe),e(FTe,P7r),e(U4,$7r),e(U4,SH),e(SH,I7r),e(U4,q7r),e(Te,N7r),e(Te,J4),e(J4,TTe),e(TTe,j7r),e(J4,D7r),e(J4,RH),e(RH,G7r),e(J4,O7r),e(Te,V7r),e(Te,Y4),e(Y4,MTe),e(MTe,X7r),e(Y4,z7r),e(Y4,BH),e(BH,Q7r),e(Y4,W7r),e(Te,H7r),e(Te,K4),e(K4,ETe),e(ETe,U7r),e(K4,J7r),e(K4,PH),e(PH,Y7r),e(K4,K7r),e(Te,Z7r),e(Te,Z4),e(Z4,CTe),e(CTe,exr),e(Z4,oxr),e(Z4,$H),e($H,rxr),e(Z4,txr),e(Te,axr),e(Te,eE),e(eE,wTe),e(wTe,nxr),e(eE,sxr),e(eE,IH),e(IH,lxr),e(eE,ixr),e(Te,dxr),e(Te,oE),e(oE,ATe),e(ATe,cxr),e(oE,fxr),e(oE,qH),e(qH,mxr),e(oE,gxr),e(Te,hxr),e(Te,rE),e(rE,yTe),e(yTe,pxr),e(rE,_xr),e(rE,NH),e(NH,uxr),e(rE,bxr),e(Te,vxr),e(Te,tE),e(tE,LTe),e(LTe,Fxr),e(tE,Txr),e(tE,jH),e(jH,Mxr),e(tE,Exr),e(Bo,Cxr),e(Bo,xTe),e(xTe,wxr),e(Bo,Axr),g(Gy,Bo,null),b(c,yPe,u),b(c,Tf,u),e(Tf,aE),e(aE,kTe),g(Oy,kTe,null),e(Tf,yxr),e(Tf,STe),e(STe,Lxr),b(c,LPe,u),b(c,jr,u),g(Vy,jr,null),e(jr,xxr),e(jr,Mf),e(Mf,kxr),e(Mf,DH),e(DH,Sxr),e(Mf,Rxr),e(Mf,GH),e(GH,Bxr),e(Mf,Pxr),e(jr,$xr),e(jr,Xy),e(Xy,Ixr),e(Xy,RTe),e(RTe,qxr),e(Xy,Nxr),e(jr,jxr),e(jr,Bt),g(zy,Bt,null),e(Bt,Dxr),e(Bt,BTe),e(BTe,Gxr),e(Bt,Oxr),e(Bt,Ef),e(Ef,Vxr),e(Ef,PTe),e(PTe,Xxr),e(Ef,zxr),e(Ef,OH),e(OH,Qxr),e(Ef,Wxr),e(Bt,Hxr),e(Bt,$Te),e($Te,Uxr),e(Bt,Jxr),g(Qy,Bt,null),e(jr,Yxr),e(jr,Po),g(Wy,Po,null),e(Po,Kxr),e(Po,ITe),e(ITe,Zxr),e(Po,ekr),e(Po,qn),e(qn,okr),e(qn,qTe),e(qTe,rkr),e(qn,tkr),e(qn,NTe),e(NTe,akr),e(qn,nkr),e(qn,jTe),e(jTe,skr),e(qn,lkr),e(Po,ikr),e(Po,Be),e(Be,nE),e(nE,DTe),e(DTe,dkr),e(nE,ckr),e(nE,VH),e(VH,fkr),e(nE,mkr),e(Be,gkr),e(Be,sE),e(sE,GTe),e(GTe,hkr),e(sE,pkr),e(sE,XH),e(XH,_kr),e(sE,ukr),e(Be,bkr),e(Be,lE),e(lE,OTe),e(OTe,vkr),e(lE,Fkr),e(lE,zH),e(zH,Tkr),e(lE,Mkr),e(Be,Ekr),e(Be,iE),e(iE,VTe),e(VTe,Ckr),e(iE,wkr),e(iE,QH),e(QH,Akr),e(iE,ykr),e(Be,Lkr),e(Be,dE),e(dE,XTe),e(XTe,xkr),e(dE,kkr),e(dE,WH),e(WH,Skr),e(dE,Rkr),e(Be,Bkr),e(Be,cE),e(cE,zTe),e(zTe,Pkr),e(cE,$kr),e(cE,HH),e(HH,Ikr),e(cE,qkr),e(Be,Nkr),e(Be,fE),e(fE,QTe),e(QTe,jkr),e(fE,Dkr),e(fE,UH),e(UH,Gkr),e(fE,Okr),e(Be,Vkr),e(Be,mE),e(mE,WTe),e(WTe,Xkr),e(mE,zkr),e(mE,JH),e(JH,Qkr),e(mE,Wkr),e(Po,Hkr),e(Po,HTe),e(HTe,Ukr),e(Po,Jkr),g(Hy,Po,null),b(c,xPe,u),b(c,Cf,u),e(Cf,gE),e(gE,UTe),g(Uy,UTe,null),e(Cf,Ykr),e(Cf,JTe),e(JTe,Kkr),b(c,kPe,u),b(c,Dr,u),g(Jy,Dr,null),e(Dr,Zkr),e(Dr,wf),e(wf,eSr),e(wf,YH),e(YH,oSr),e(wf,rSr),e(wf,KH),e(KH,tSr),e(wf,aSr),e(Dr,nSr),e(Dr,Yy),e(Yy,sSr),e(Yy,YTe),e(YTe,lSr),e(Yy,iSr),e(Dr,dSr),e(Dr,Pt),g(Ky,Pt,null),e(Pt,cSr),e(Pt,KTe),e(KTe,fSr),e(Pt,mSr),e(Pt,Af),e(Af,gSr),e(Af,ZTe),e(ZTe,hSr),e(Af,pSr),e(Af,ZH),e(ZH,_Sr),e(Af,uSr),e(Pt,bSr),e(Pt,e8e),e(e8e,vSr),e(Pt,FSr),g(Zy,Pt,null),e(Dr,TSr),e(Dr,$o),g(eL,$o,null),e($o,MSr),e($o,o8e),e(o8e,ESr),e($o,CSr),e($o,Nn),e(Nn,wSr),e(Nn,r8e),e(r8e,ASr),e(Nn,ySr),e(Nn,t8e),e(t8e,LSr),e(Nn,xSr),e(Nn,a8e),e(a8e,kSr),e(Nn,SSr),e($o,RSr),e($o,Pe),e(Pe,hE),e(hE,n8e),e(n8e,BSr),e(hE,PSr),e(hE,eU),e(eU,$Sr),e(hE,ISr),e(Pe,qSr),e(Pe,pE),e(pE,s8e),e(s8e,NSr),e(pE,jSr),e(pE,oU),e(oU,DSr),e(pE,GSr),e(Pe,OSr),e(Pe,_E),e(_E,l8e),e(l8e,VSr),e(_E,XSr),e(_E,rU),e(rU,zSr),e(_E,QSr),e(Pe,WSr),e(Pe,uE),e(uE,i8e),e(i8e,HSr),e(uE,USr),e(uE,tU),e(tU,JSr),e(uE,YSr),e(Pe,KSr),e(Pe,bE),e(bE,d8e),e(d8e,ZSr),e(bE,eRr),e(bE,aU),e(aU,oRr),e(bE,rRr),e(Pe,tRr),e(Pe,vE),e(vE,c8e),e(c8e,aRr),e(vE,nRr),e(vE,nU),e(nU,sRr),e(vE,lRr),e(Pe,iRr),e(Pe,FE),e(FE,f8e),e(f8e,dRr),e(FE,cRr),e(FE,sU),e(sU,fRr),e(FE,mRr),e(Pe,gRr),e(Pe,TE),e(TE,m8e),e(m8e,hRr),e(TE,pRr),e(TE,lU),e(lU,_Rr),e(TE,uRr),e($o,bRr),e($o,g8e),e(g8e,vRr),e($o,FRr),g(oL,$o,null),b(c,SPe,u),b(c,yf,u),e(yf,ME),e(ME,h8e),g(rL,h8e,null),e(yf,TRr),e(yf,p8e),e(p8e,MRr),b(c,RPe,u),b(c,Gr,u),g(tL,Gr,null),e(Gr,ERr),e(Gr,Lf),e(Lf,CRr),e(Lf,iU),e(iU,wRr),e(Lf,ARr),e(Lf,dU),e(dU,yRr),e(Lf,LRr),e(Gr,xRr),e(Gr,aL),e(aL,kRr),e(aL,_8e),e(_8e,SRr),e(aL,RRr),e(Gr,BRr),e(Gr,$t),g(nL,$t,null),e($t,PRr),e($t,u8e),e(u8e,$Rr),e($t,IRr),e($t,xf),e(xf,qRr),e(xf,b8e),e(b8e,NRr),e(xf,jRr),e(xf,cU),e(cU,DRr),e(xf,GRr),e($t,ORr),e($t,v8e),e(v8e,VRr),e($t,XRr),g(sL,$t,null),e(Gr,zRr),e(Gr,Io),g(lL,Io,null),e(Io,QRr),e(Io,F8e),e(F8e,WRr),e(Io,HRr),e(Io,jn),e(jn,URr),e(jn,T8e),e(T8e,JRr),e(jn,YRr),e(jn,M8e),e(M8e,KRr),e(jn,ZRr),e(jn,E8e),e(E8e,eBr),e(jn,oBr),e(Io,rBr),e(Io,C8e),e(C8e,EE),e(EE,w8e),e(w8e,tBr),e(EE,aBr),e(EE,fU),e(fU,nBr),e(EE,sBr),e(Io,lBr),e(Io,A8e),e(A8e,iBr),e(Io,dBr),g(iL,Io,null),b(c,BPe,u),b(c,kf,u),e(kf,CE),e(CE,y8e),g(dL,y8e,null),e(kf,cBr),e(kf,L8e),e(L8e,fBr),b(c,PPe,u),b(c,Or,u),g(cL,Or,null),e(Or,mBr),e(Or,Sf),e(Sf,gBr),e(Sf,mU),e(mU,hBr),e(Sf,pBr),e(Sf,gU),e(gU,_Br),e(Sf,uBr),e(Or,bBr),e(Or,fL),e(fL,vBr),e(fL,x8e),e(x8e,FBr),e(fL,TBr),e(Or,MBr),e(Or,It),g(mL,It,null),e(It,EBr),e(It,k8e),e(k8e,CBr),e(It,wBr),e(It,Rf),e(Rf,ABr),e(Rf,S8e),e(S8e,yBr),e(Rf,LBr),e(Rf,hU),e(hU,xBr),e(Rf,kBr),e(It,SBr),e(It,R8e),e(R8e,RBr),e(It,BBr),g(gL,It,null),e(Or,PBr),e(Or,qo),g(hL,qo,null),e(qo,$Br),e(qo,B8e),e(B8e,IBr),e(qo,qBr),e(qo,Dn),e(Dn,NBr),e(Dn,P8e),e(P8e,jBr),e(Dn,DBr),e(Dn,$8e),e($8e,GBr),e(Dn,OBr),e(Dn,I8e),e(I8e,VBr),e(Dn,XBr),e(qo,zBr),e(qo,pL),e(pL,wE),e(wE,q8e),e(q8e,QBr),e(wE,WBr),e(wE,pU),e(pU,HBr),e(wE,UBr),e(pL,JBr),e(pL,AE),e(AE,N8e),e(N8e,YBr),e(AE,KBr),e(AE,_U),e(_U,ZBr),e(AE,ePr),e(qo,oPr),e(qo,j8e),e(j8e,rPr),e(qo,tPr),g(_L,qo,null),b(c,$Pe,u),b(c,Bf,u),e(Bf,yE),e(yE,D8e),g(uL,D8e,null),e(Bf,aPr),e(Bf,G8e),e(G8e,nPr),b(c,IPe,u),b(c,Vr,u),g(bL,Vr,null),e(Vr,sPr),e(Vr,Pf),e(Pf,lPr),e(Pf,uU),e(uU,iPr),e(Pf,dPr),e(Pf,bU),e(bU,cPr),e(Pf,fPr),e(Vr,mPr),e(Vr,vL),e(vL,gPr),e(vL,O8e),e(O8e,hPr),e(vL,pPr),e(Vr,_Pr),e(Vr,qt),g(FL,qt,null),e(qt,uPr),e(qt,V8e),e(V8e,bPr),e(qt,vPr),e(qt,$f),e($f,FPr),e($f,X8e),e(X8e,TPr),e($f,MPr),e($f,vU),e(vU,EPr),e($f,CPr),e(qt,wPr),e(qt,z8e),e(z8e,APr),e(qt,yPr),g(TL,qt,null),e(Vr,LPr),e(Vr,No),g(ML,No,null),e(No,xPr),e(No,Q8e),e(Q8e,kPr),e(No,SPr),e(No,Gn),e(Gn,RPr),e(Gn,W8e),e(W8e,BPr),e(Gn,PPr),e(Gn,H8e),e(H8e,$Pr),e(Gn,IPr),e(Gn,U8e),e(U8e,qPr),e(Gn,NPr),e(No,jPr),e(No,J8e),e(J8e,LE),e(LE,Y8e),e(Y8e,DPr),e(LE,GPr),e(LE,FU),e(FU,OPr),e(LE,VPr),e(No,XPr),e(No,K8e),e(K8e,zPr),e(No,QPr),g(EL,No,null),qPe=!0},p(c,[u]){const CL={};u&2&&(CL.$$scope={dirty:u,ctx:c}),Vf.$set(CL);const Z8e={};u&2&&(Z8e.$$scope={dirty:u,ctx:c}),Nh.$set(Z8e);const e9e={};u&2&&(e9e.$$scope={dirty:u,ctx:c}),Uh.$set(e9e)},i(c){qPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h(Vf.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Z5.$$.fragment,c),h(Nh.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(s3.$$.fragment,c),h(Uh.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(v3.$$.fragment,c),h(F3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),qPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p(Vf.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Z5.$$.fragment,c),p(Nh.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(s3.$$.fragment,c),p(Uh.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(v3.$$.fragment,c),p(F3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),qPe=!1},d(c){t(ee),c&&t(io),c&&t(ce),_(he),c&&t(Nf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(IRe),c&&t(zi),_(B5),c&&t(qRe),c&&t(Qn),c&&t(NRe),_(P5,c),c&&t(jRe),c&&t(y7),c&&t(DRe),_(Vf,c),c&&t(GRe),c&&t(Qi),_($5),c&&t(ORe),c&&t(Qo),_(I5),_(j5),_(D5),_(G5),c&&t(VRe),c&&t(Hi),_(O5),c&&t(XRe),c&&t(Wo),_(V5),_(Q5),_(W5),_(H5),c&&t(zRe),c&&t(Ui),_(U5),c&&t(QRe),c&&t(Ho),_(J5),_(Z5),_(Nh),_(e3),_(o3),c&&t(WRe),c&&t(Ji),_(r3),c&&t(HRe),c&&t(Uo),_(t3),_(s3),_(Uh),_(l3),_(i3),c&&t(URe),c&&t(Ki),_(d3),c&&t(JRe),c&&t(Jo),_(c3),_(m3),_(g3),_(h3),_(p3),c&&t(YRe),c&&t(od),_(_3),c&&t(KRe),c&&t(Yo),_(u3),_(v3),_(F3),_(T3),_(M3),c&&t(ZRe),c&&t(ad),_(E3),c&&t(eBe),c&&t(Ko),_(C3),_(A3),_(y3),_(L3),_(x3),c&&t(oBe),c&&t(ld),_(k3),c&&t(rBe),c&&t(Zo),_(S3),_(B3),_(P3),_($3),_(I3),c&&t(tBe),c&&t(cd),_(q3),c&&t(aBe),c&&t(er),_(N3),_(D3),_(G3),_(O3),_(V3),c&&t(nBe),c&&t(gd),_(X3),c&&t(sBe),c&&t(or),_(z3),_(W3),_(H3),_(U3),_(J3),c&&t(lBe),c&&t(_d),_(Y3),c&&t(iBe),c&&t(rr),_(K3),_(eC),_(oC),_(rC),_(tC),c&&t(dBe),c&&t(vd),_(aC),c&&t(cBe),c&&t(tr),_(nC),_(lC),_(iC),_(dC),_(cC),c&&t(fBe),c&&t(Md),_(fC),c&&t(mBe),c&&t(ar),_(mC),_(hC),_(pC),_(_C),_(uC),c&&t(gBe),c&&t(wd),_(bC),c&&t(hBe),c&&t(nr),_(vC),_(TC),_(MC),_(EC),_(CC),c&&t(pBe),c&&t(Ld),_(wC),c&&t(_Be),c&&t(sr),_(AC),_(LC),_(xC),_(kC),_(SC),c&&t(uBe),c&&t(Sd),_(RC),c&&t(bBe),c&&t(lr),_(BC),_($C),_(IC),_(qC),_(NC),c&&t(vBe),c&&t(Pd),_(jC),c&&t(FBe),c&&t(ir),_(DC),_(OC),_(VC),_(XC),_(zC),c&&t(TBe),c&&t(qd),_(QC),c&&t(MBe),c&&t(dr),_(WC),_(UC),_(JC),_(YC),_(KC),c&&t(EBe),c&&t(Dd),_(ZC),c&&t(CBe),c&&t(cr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(wBe),c&&t(Vd),_(sw),c&&t(ABe),c&&t(fr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(yBe),c&&t(Qd),_(gw),c&&t(LBe),c&&t(mr),_(hw),_(_w),_(uw),_(bw),_(Fw),c&&t(xBe),c&&t(Ud),_(Tw),c&&t(kBe),c&&t(gr),_(Mw),_(Cw),_(ww),_(Aw),_(yw),c&&t(SBe),c&&t(Kd),_(Lw),c&&t(RBe),c&&t(hr),_(xw),_(Sw),_(Rw),_(Bw),_(Pw),c&&t(BBe),c&&t(rc),_($w),c&&t(PBe),c&&t(pr),_(Iw),_(Nw),_(jw),_(Dw),_(Gw),c&&t($Be),c&&t(nc),_(Ow),c&&t(IBe),c&&t(_r),_(Vw),_(zw),_(Qw),_(Ww),_(Hw),c&&t(qBe),c&&t(ic),_(Uw),c&&t(NBe),c&&t(ur),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(jBe),c&&t(fc),_(rA),c&&t(DBe),c&&t(br),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(GBe),c&&t(hc),_(dA),c&&t(OBe),c&&t(vr),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(VBe),c&&t(uc),_(_A),c&&t(XBe),c&&t(Fr),_(uA),_(vA),_(FA),_(TA),_(MA),c&&t(zBe),c&&t(Fc),_(EA),c&&t(QBe),c&&t(Tr),_(CA),_(AA),_(yA),_(LA),_(xA),c&&t(WBe),c&&t(Ec),_(kA),c&&t(HBe),c&&t(Mr),_(SA),_(BA),_(PA),_($A),_(qA),c&&t(UBe),c&&t(Ac),_(NA),c&&t(JBe),c&&t(Er),_(jA),_(GA),_(OA),_(VA),_(XA),c&&t(YBe),c&&t(xc),_(zA),c&&t(KBe),c&&t(Cr),_(QA),_(HA),_(UA),_(JA),_(YA),c&&t(ZBe),c&&t(Rc),_(KA),c&&t(ePe),c&&t(wr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(oPe),c&&t($c),_(n0),c&&t(rPe),c&&t(Ar),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(tPe),c&&t(Nc),_(m0),c&&t(aPe),c&&t(yr),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(nPe),c&&t(Gc),_(v0),c&&t(sPe),c&&t(Lr),_(F0),_(M0),_(E0),_(C0),_(w0),c&&t(lPe),c&&t(Xc),_(A0),c&&t(iPe),c&&t(xr),_(y0),_(x0),_(k0),_(S0),_(R0),c&&t(dPe),c&&t(Wc),_(B0),c&&t(cPe),c&&t(kr),_(P0),_(I0),_(q0),_(N0),_(j0),c&&t(fPe),c&&t(Jc),_(D0),c&&t(mPe),c&&t(Sr),_(G0),_(V0),_(X0),_(z0),_(Q0),c&&t(gPe),c&&t(Zc),_(W0),c&&t(hPe),c&&t(Rr),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(pPe),c&&t(rf),_(ey),c&&t(_Pe),c&&t(Br),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(uPe),c&&t(nf),_(ly),c&&t(bPe),c&&t(Pr),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(vPe),c&&t(df),_(hy),c&&t(FPe),c&&t($r),_(py),_(uy),_(by),_(vy),_(Fy),c&&t(TPe),c&&t(mf),_(Ty),c&&t(MPe),c&&t(Ir),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(EPe),c&&t(pf),_(Ly),c&&t(CPe),c&&t(qr),_(xy),_(Sy),_(Ry),_(By),_(Py),c&&t(wPe),c&&t(bf),_($y),c&&t(APe),c&&t(Nr),_(Iy),_(Ny),_(jy),_(Dy),_(Gy),c&&t(yPe),c&&t(Tf),_(Oy),c&&t(LPe),c&&t(jr),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(xPe),c&&t(Cf),_(Uy),c&&t(kPe),c&&t(Dr),_(Jy),_(Ky),_(Zy),_(eL),_(oL),c&&t(SPe),c&&t(yf),_(rL),c&&t(RPe),c&&t(Gr),_(tL),_(nL),_(sL),_(lL),_(iL),c&&t(BPe),c&&t(kf),_(dL),c&&t(PPe),c&&t(Or),_(cL),_(mL),_(gL),_(hL),_(_L),c&&t($Pe),c&&t(Bf),_(uL),c&&t(IPe),c&&t(Vr),_(bL),_(FL),_(TL),_(ML),_(EL)}}}const X3t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function z3t(qf){return j3t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Y3t extends $3t{constructor(ee){super();I3t(this,ee,z3t,V3t,q3t,{})}}export{Y3t as default,X3t as metadata};
