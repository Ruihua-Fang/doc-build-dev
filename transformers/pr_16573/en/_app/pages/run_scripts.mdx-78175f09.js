import{S as Ou,i as ju,s as Fu,e as a,k as h,w as E,t as s,M as Ru,c as o,d as r,m as f,a as i,x as b,h as l,b as p,F as t,g as u,y as x,q as z,o as T,B as k,v as Mu,L as ri}from"../chunks/vendor-6b77c823.js";import{I as re}from"../chunks/IconCopyLink-7a11ce68.js";import{C as M}from"../chunks/CodeBlock-3a8b25a8.js";import{F as Nu,M as ai}from"../chunks/Markdown-4489c441.js";function Hu(H){let m,w,c,v,q,$,O,j,U,F,A,S,P,D,N,L,R,y,g,G;return g=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`}}),{c(){m=a("p"),w=s("The example script downloads and preprocesses a dataset from the \u{1F917} "),c=a("a"),v=s("Datasets"),q=s(" library. Then the script fine-tunes a dataset with the "),$=a("a"),O=s("Trainer"),j=s(" on an architecture that supports summarization. The following example shows how to fine-tune "),U=a("a"),F=s("T5-small"),A=s(" on the "),S=a("a"),P=s("CNN/DailyMail"),D=s(" dataset. The T5 model requires an additional "),N=a("code"),L=s("source_prefix"),R=s(" argument due to how it was trained. This prompt lets T5 know this is a summarization task."),y=h(),E(g.$$.fragment),this.h()},l(C){m=o(C,"P",{});var I=i(m);w=l(I,"The example script downloads and preprocesses a dataset from the \u{1F917} "),c=o(I,"A",{href:!0,rel:!0});var B=i(c);v=l(B,"Datasets"),B.forEach(r),q=l(I," library. Then the script fine-tunes a dataset with the "),$=o(I,"A",{href:!0,rel:!0});var wt=i($);O=l(wt,"Trainer"),wt.forEach(r),j=l(I," on an architecture that supports summarization. The following example shows how to fine-tune "),U=o(I,"A",{href:!0,rel:!0});var De=i(U);F=l(De,"T5-small"),De.forEach(r),A=l(I," on the "),S=o(I,"A",{href:!0,rel:!0});var J=i(S);P=l(J,"CNN/DailyMail"),J.forEach(r),D=l(I," dataset. The T5 model requires an additional "),N=o(I,"CODE",{});var yt=i(N);L=l(yt,"source_prefix"),yt.forEach(r),R=l(I," argument due to how it was trained. This prompt lets T5 know this is a summarization task."),I.forEach(r),y=f(C),b(g.$$.fragment,C),this.h()},h(){p(c,"href","https://huggingface.co/docs/datasets/"),p(c,"rel","nofollow"),p($,"href","https://huggingface.co/docs/transformers/main_classes/trainer"),p($,"rel","nofollow"),p(U,"href","https://huggingface.co/t5-small"),p(U,"rel","nofollow"),p(S,"href","https://huggingface.co/datasets/cnn_dailymail"),p(S,"rel","nofollow")},m(C,I){u(C,m,I),t(m,w),t(m,c),t(c,v),t(m,q),t(m,$),t($,O),t(m,j),t(m,U),t(U,F),t(m,A),t(m,S),t(S,P),t(m,D),t(m,N),t(N,L),t(m,R),u(C,y,I),x(g,C,I),G=!0},p:ri,i(C){G||(z(g.$$.fragment,C),G=!0)},o(C){T(g.$$.fragment,C),G=!1},d(C){C&&r(m),C&&r(y),k(g,C)}}}function Gu(H){let m,w;return m=new ai({props:{$$slots:{default:[Hu]},$$scope:{ctx:H}}}),{c(){E(m.$$.fragment)},l(c){b(m.$$.fragment,c)},m(c,v){x(m,c,v),w=!0},p(c,v){const q={};v&2&&(q.$$scope={dirty:v,ctx:c}),m.$set(q)},i(c){w||(z(m.$$.fragment,c),w=!0)},o(c){T(m.$$.fragment,c),w=!1},d(c){k(m,c)}}}function Ju(H){let m,w,c,v,q,$,O,j,U,F,A,S,P,D,N,L,R;return L=new M({props:{code:`python examples/tensorflow/summarization/run_summarization.py  \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --output_dir /tmp/tst-summarization  \\
    --per_device_train_batch_size 8 \\
    --per_device_eval_batch_size 16 \\
    --num_train_epochs 3 \\
    --do_train \\
    --do_eval`,highlighted:`python examples/tensorflow/summarization/run_summarization.py  \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --output_dir /tmp/tst-summarization  \\
    --per_device_train_batch_size 8 \\
    --per_device_eval_batch_size 16 \\
    --num_train_epochs 3 \\
    --do_train \\
    --do_eval`}}),{c(){m=a("p"),w=s("The example script downloads and preprocesses a dataset from the \u{1F917} "),c=a("a"),v=s("Datasets"),q=s(" library. Then the script fine-tunes a dataset using Keras on an architecture that supports summarization. The following example shows how to fine-tune "),$=a("a"),O=s("T5-small"),j=s(" on the "),U=a("a"),F=s("CNN/DailyMail"),A=s(" dataset. The T5 model requires an additional "),S=a("code"),P=s("source_prefix"),D=s(" argument due to how it was trained. This prompt lets T5 know this is a summarization task."),N=h(),E(L.$$.fragment),this.h()},l(y){m=o(y,"P",{});var g=i(m);w=l(g,"The example script downloads and preprocesses a dataset from the \u{1F917} "),c=o(g,"A",{href:!0,rel:!0});var G=i(c);v=l(G,"Datasets"),G.forEach(r),q=l(g," library. Then the script fine-tunes a dataset using Keras on an architecture that supports summarization. The following example shows how to fine-tune "),$=o(g,"A",{href:!0,rel:!0});var C=i($);O=l(C,"T5-small"),C.forEach(r),j=l(g," on the "),U=o(g,"A",{href:!0,rel:!0});var I=i(U);F=l(I,"CNN/DailyMail"),I.forEach(r),A=l(g," dataset. The T5 model requires an additional "),S=o(g,"CODE",{});var B=i(S);P=l(B,"source_prefix"),B.forEach(r),D=l(g," argument due to how it was trained. This prompt lets T5 know this is a summarization task."),g.forEach(r),N=f(y),b(L.$$.fragment,y),this.h()},h(){p(c,"href","https://huggingface.co/docs/datasets/"),p(c,"rel","nofollow"),p($,"href","https://huggingface.co/t5-small"),p($,"rel","nofollow"),p(U,"href","https://huggingface.co/datasets/cnn_dailymail"),p(U,"rel","nofollow")},m(y,g){u(y,m,g),t(m,w),t(m,c),t(c,v),t(m,q),t(m,$),t($,O),t(m,j),t(m,U),t(U,F),t(m,A),t(m,S),t(S,P),t(m,D),u(y,N,g),x(L,y,g),R=!0},p:ri,i(y){R||(z(L.$$.fragment,y),R=!0)},o(y){T(L.$$.fragment,y),R=!1},d(y){y&&r(m),y&&r(N),k(L,y)}}}function Bu(H){let m,w;return m=new ai({props:{$$slots:{default:[Ju]},$$scope:{ctx:H}}}),{c(){E(m.$$.fragment)},l(c){b(m.$$.fragment,c)},m(c,v){x(m,c,v),w=!0},p(c,v){const q={};v&2&&(q.$$scope={dirty:v,ctx:c}),m.$set(q)},i(c){w||(z(m.$$.fragment,c),w=!0)},o(c){T(m.$$.fragment,c),w=!1},d(c){k(m,c)}}}function Wu(H){let m,w,c,v,q,$,O,j,U,F,A,S,P,D,N,L,R;return L=new M({props:{code:`python xla_spawn.py --num_cores 8 \\
    summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`,highlighted:`python xla_spawn.py --num_cores 8 \\
    summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`}}),{c(){m=a("p"),w=s("Tensor Processing Units (TPUs) are specifically designed to accelerate performance. PyTorch supports TPUs with the "),c=a("a"),v=s("XLA"),q=s(" deep learning compiler (see "),$=a("a"),O=s("here"),j=s(" for more details). To use a TPU, launch the "),U=a("code"),F=s("xla_spawn.py"),A=s(" script and use the "),S=a("code"),P=s("num_cores"),D=s(" argument to set the number of TPU cores you want to use."),N=h(),E(L.$$.fragment),this.h()},l(y){m=o(y,"P",{});var g=i(m);w=l(g,"Tensor Processing Units (TPUs) are specifically designed to accelerate performance. PyTorch supports TPUs with the "),c=o(g,"A",{href:!0,rel:!0});var G=i(c);v=l(G,"XLA"),G.forEach(r),q=l(g," deep learning compiler (see "),$=o(g,"A",{href:!0,rel:!0});var C=i($);O=l(C,"here"),C.forEach(r),j=l(g," for more details). To use a TPU, launch the "),U=o(g,"CODE",{});var I=i(U);F=l(I,"xla_spawn.py"),I.forEach(r),A=l(g," script and use the "),S=o(g,"CODE",{});var B=i(S);P=l(B,"num_cores"),B.forEach(r),D=l(g," argument to set the number of TPU cores you want to use."),g.forEach(r),N=f(y),b(L.$$.fragment,y),this.h()},h(){p(c,"href","https://www.tensorflow.org/xla"),p(c,"rel","nofollow"),p($,"href","https://github.com/pytorch/xla/blob/master/README.md"),p($,"rel","nofollow")},m(y,g){u(y,m,g),t(m,w),t(m,c),t(c,v),t(m,q),t(m,$),t($,O),t(m,j),t(m,U),t(U,F),t(m,A),t(m,S),t(S,P),t(m,D),u(y,N,g),x(L,y,g),R=!0},p:ri,i(y){R||(z(L.$$.fragment,y),R=!0)},o(y){T(L.$$.fragment,y),R=!1},d(y){y&&r(m),y&&r(N),k(L,y)}}}function Xu(H){let m,w;return m=new ai({props:{$$slots:{default:[Wu]},$$scope:{ctx:H}}}),{c(){E(m.$$.fragment)},l(c){b(m.$$.fragment,c)},m(c,v){x(m,c,v),w=!0},p(c,v){const q={};v&2&&(q.$$scope={dirty:v,ctx:c}),m.$set(q)},i(c){w||(z(m.$$.fragment,c),w=!0)},o(c){T(m.$$.fragment,c),w=!1},d(c){k(m,c)}}}function Yu(H){let m,w,c,v,q,$,O,j,U,F,A,S;return A=new M({props:{code:`python run_summarization.py  \\
    --tpu name_of_tpu_resource \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --output_dir /tmp/tst-summarization  \\
    --per_device_train_batch_size 8 \\
    --per_device_eval_batch_size 16 \\
    --num_train_epochs 3 \\
    --do_train \\
    --do_eval`,highlighted:`python run_summarization.py  \\
    --tpu name_of_tpu_resource \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --output_dir /tmp/tst-summarization  \\
    --per_device_train_batch_size 8 \\
    --per_device_eval_batch_size 16 \\
    --num_train_epochs 3 \\
    --do_train \\
    --do_eval`}}),{c(){m=a("p"),w=s("Tensor Processing Units (TPUs) are specifically designed to accelerate performance. TensorFlow scripts utilize a "),c=a("a"),v=a("code"),q=s("TPUStrategy"),$=s(" for training on TPUs. To use a TPU, pass the name of the TPU resource to the "),O=a("code"),j=s("tpu"),U=s(" argument."),F=h(),E(A.$$.fragment),this.h()},l(P){m=o(P,"P",{});var D=i(m);w=l(D,"Tensor Processing Units (TPUs) are specifically designed to accelerate performance. TensorFlow scripts utilize a "),c=o(D,"A",{href:!0,rel:!0});var N=i(c);v=o(N,"CODE",{});var L=i(v);q=l(L,"TPUStrategy"),L.forEach(r),N.forEach(r),$=l(D," for training on TPUs. To use a TPU, pass the name of the TPU resource to the "),O=o(D,"CODE",{});var R=i(O);j=l(R,"tpu"),R.forEach(r),U=l(D," argument."),D.forEach(r),F=f(P),b(A.$$.fragment,P),this.h()},h(){p(c,"href","https://www.tensorflow.org/guide/distributed_training#tpustrategy"),p(c,"rel","nofollow")},m(P,D){u(P,m,D),t(m,w),t(m,c),t(c,v),t(v,q),t(m,$),t(m,O),t(O,j),t(m,U),u(P,F,D),x(A,P,D),S=!0},p:ri,i(P){S||(z(A.$$.fragment,P),S=!0)},o(P){T(A.$$.fragment,P),S=!1},d(P){P&&r(m),P&&r(F),k(A,P)}}}function Ku(H){let m,w;return m=new ai({props:{$$slots:{default:[Yu]},$$scope:{ctx:H}}}),{c(){E(m.$$.fragment)},l(c){b(m.$$.fragment,c)},m(c,v){x(m,c,v),w=!0},p(c,v){const q={};v&2&&(q.$$scope={dirty:v,ctx:c}),m.$set(q)},i(c){w||(z(m.$$.fragment,c),w=!0)},o(c){T(m.$$.fragment,c),w=!1},d(c){k(m,c)}}}function Vu(H){let m,w,c,v,q,$,O,j,U,F,A,S,P,D,N,L,R,y,g,G,C,I,B,wt,De,J,yt,Ce,oi,ii,Ne,si,li,Sa,$t,ni,Da,Y,pi,Oe,ui,mi,je,hi,fi,Ca,K,ci,Fe,_i,di,Re,vi,gi,Na,ae,he,cr,Me,wi,_r,yi,Oa,fe,$i,dr,Ei,bi,ja,He,Fa,Et,xi,Ra,ce,vr,zi,Ti,_,gr,bt,ki,Ai,wr,xt,Pi,qi,yr,zt,Li,Ii,$r,Tt,Ui,Si,Er,kt,Di,Ci,br,At,Ni,Oi,xr,Pt,ji,Fi,zr,qt,Ri,Mi,Tr,Lt,Hi,Gi,kr,It,Ji,Bi,Ar,Ut,Wi,Xi,Pr,St,Yi,Ki,qr,Dt,Vi,Qi,Lr,Ct,Zi,es,Ir,Nt,ts,rs,Ur,Ot,as,os,Sr,jt,is,ss,Dr,Ft,ls,ns,Cr,Rt,ps,us,Nr,Mt,ms,hs,Or,Ht,fs,cs,jr,Gt,_s,ds,Fr,Jt,vs,gs,Rr,Bt,ws,ys,Mr,Wt,$s,Es,Hr,Xt,bs,xs,Gr,Yt,zs,Ma,Kt,Ts,Ha,Ge,Ga,Vt,ks,Ja,Je,Ba,oe,_e,Jr,Be,As,Br,Ps,Wa,de,Xa,ie,ve,Wr,We,qs,Xr,Ls,Ya,ge,Is,Xe,Us,Ss,Ka,we,Ye,Ds,Yr,Cs,Ns,Os,Ke,js,Kr,Fs,Rs,Va,Ve,Qa,ye,Ms,Qe,Vr,Hs,Gs,Za,se,$e,Qr,Ze,Js,Zr,Bs,eo,Ee,to,le,be,ea,et,Ws,ta,Xs,ro,xe,Ys,tt,Ks,Vs,ao,rt,oo,W,Qs,ra,Zs,el,aa,tl,rl,oa,al,ol,io,at,so,Qt,il,lo,ot,no,Zt,sl,po,it,uo,ne,ze,ia,st,ll,sa,nl,mo,er,pl,ho,V,Te,la,ul,ml,na,hl,fl,cl,tr,pa,_l,dl,vl,rr,ua,gl,wl,fo,ar,yl,co,lt,_o,pe,ke,ma,nt,$l,ha,El,vo,or,bl,go,Q,fa,ca,xl,zl,_a,da,Tl,kl,va,ga,Al,wo,pt,yo,Z,Pl,wa,ql,Ll,ya,Il,Ul,$o,ut,Eo,ue,Ae,$a,mt,Sl,Ea,Dl,bo,ir,Cl,xo,X,Nl,ba,Ol,jl,xa,Fl,Rl,za,Ml,Hl,zo,ht,To,Pe,Gl,Ta,Jl,Bl,ko,ft,Ao,me,qe,ka,ct,Wl,Aa,Xl,Po,Le,Yl,_t,Kl,Vl,qo,dt,Lo,ee,Ql,Pa,Zl,en,qa,tn,rn,Io,Ie,an,La,on,sn,Uo,sr,ln,So,vt,Do;return $=new re({}),Me=new re({}),He=new M({props:{code:`git clone https://github.com/huggingface/transformers
cd transformers
pip install .`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/huggingface/transformers
<span class="hljs-built_in">cd</span> transformers
pip install .`}}),Ge=new M({props:{code:"git checkout tags/v3.5.1",highlighted:"git checkout tags/v3.5.1"}}),Je=new M({props:{code:"pip install -r requirements.txt",highlighted:"pip install -r requirements.txt"}}),Be=new re({}),de=new Nu({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Bu],pytorch:[Gu]},$$scope:{ctx:H}}}),We=new re({}),Ve=new M({props:{code:`python -m torch.distributed.launch \\
    --nproc_per_node 8 pytorch/summarization/run_summarization.py \\
    --fp16 \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`,highlighted:`python -m torch.distributed.launch \\
    --nproc_per_node 8 pytorch/summarization/run_summarization.py \\
    --fp16 \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`}}),Ze=new re({}),Ee=new Nu({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Ku],pytorch:[Xu]},$$scope:{ctx:H}}}),et=new re({}),rt=new M({props:{code:"pip install accelerate",highlighted:"pip install accelerate"}}),at=new M({props:{code:"accelerate config",highlighted:"accelerate config"}}),ot=new M({props:{code:"accelerate test",highlighted:'accelerate <span class="hljs-built_in">test</span>'}}),it=new M({props:{code:`accelerate launch run_summarization_no_trainer.py \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir ~/tmp/tst-summarization`,highlighted:`accelerate launch run_summarization_no_trainer.py \\
    --model_name_or_path t5-small \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir ~/tmp/tst-summarization`}}),st=new re({}),lt=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --train_file path_to_csv_or_jsonlines_file \\
    --validation_file path_to_csv_or_jsonlines_file \\
    --text_column text_column_name \\
    --summary_column summary_column_name \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --overwrite_output_dir \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --train_file path_to_csv_or_jsonlines_file \\
    --validation_file path_to_csv_or_jsonlines_file \\
    --text_column text_column_name \\
    --summary_column summary_column_name \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --overwrite_output_dir \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --predict_with_generate`}}),nt=new re({}),pt=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --max_train_samples 50 \\
    --max_eval_samples 50 \\
    --max_predict_samples 50 \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py \\
    --model_name_or_path t5-small \\
    --max_train_samples 50 \\
    --max_eval_samples 50 \\
    --max_predict_samples 50 \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`}}),ut=new M({props:{code:"examples/pytorch/summarization/run_summarization.py -h",highlighted:"examples/pytorch/summarization/run_summarization.py -h"}}),mt=new re({}),ht=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --output_dir previous_output_dir \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --output_dir previous_output_dir \\
    --predict_with_generate`}}),ft=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --resume_from_checkpoint path_to_specific_checkpoint \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --resume_from_checkpoint path_to_specific_checkpoint \\
    --predict_with_generate`}}),ct=new re({}),dt=new M({props:{code:"huggingface-cli login",highlighted:"huggingface-cli login"}}),vt=new M({props:{code:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config "3.0.0" \\
    --source_prefix "summarize: " \\
    --push_to_hub \\
    --push_to_hub_model_id finetuned-t5-cnn_dailymail \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`,highlighted:`python examples/pytorch/summarization/run_summarization.py
    --model_name_or_path t5-small \\
    --do_train \\
    --do_eval \\
    --dataset_name cnn_dailymail \\
    --dataset_config <span class="hljs-string">&quot;3.0.0&quot;</span> \\
    --source_prefix <span class="hljs-string">&quot;summarize: &quot;</span> \\
    --push_to_hub \\
    --push_to_hub_model_id finetuned-t5-cnn_dailymail \\
    --output_dir /tmp/tst-summarization \\
    --per_device_train_batch_size=4 \\
    --per_device_eval_batch_size=4 \\
    --overwrite_output_dir \\
    --predict_with_generate`}}),{c(){m=a("meta"),w=h(),c=a("h1"),v=a("a"),q=a("span"),E($.$$.fragment),O=h(),j=a("span"),U=s("Train with a script"),F=h(),A=a("p"),S=s("Along with the \u{1F917} Transformers "),P=a("a"),D=s("notebooks"),N=s(", there are also example scripts demonstrating how to train a model for a task with "),L=a("a"),R=s("PyTorch"),y=s(", "),g=a("a"),G=s("TensorFlow"),C=s(", or "),I=a("a"),B=s("JAX/Flax"),wt=s("."),De=h(),J=a("p"),yt=s("You will also find scripts we\u2019ve used in our "),Ce=a("a"),oi=s("research projects"),ii=s(" and "),Ne=a("a"),si=s("legacy examples"),li=s(" which are mostly community contributed. These scripts are not actively maintained and require a specific version of \u{1F917} Transformers that will most likely be incompatible with the latest version of the library."),Sa=h(),$t=a("p"),ni=s("The example scripts are not expected to work out-of-the-box on every problem, and you may need to adapt the script to the problem you\u2019re trying to solve. To help you with this, most of the scripts fully expose how data is preprocessed, allowing you to edit it as necessary for your use case."),Da=h(),Y=a("p"),pi=s("For any feature you\u2019d like to implement in an example script, please discuss it on the "),Oe=a("a"),ui=s("forum"),mi=s(" or in an "),je=a("a"),hi=s("issue"),fi=s(" before submitting a Pull Request. While we welcome bug fixes, it is unlikely we will merge a Pull Request that adds more functionality at the cost of readability."),Ca=h(),K=a("p"),ci=s("This guide will show you how to run an example summarization training script in "),Fe=a("a"),_i=s("PyTorch"),di=s(" and "),Re=a("a"),vi=s("TensorFlow"),gi=s(". All examples are expected to work with both frameworks unless otherwise specified."),Na=h(),ae=a("h2"),he=a("a"),cr=a("span"),E(Me.$$.fragment),wi=h(),_r=a("span"),yi=s("Setup"),Oa=h(),fe=a("p"),$i=s("To successfully run the latest version of the example scripts, you have to "),dr=a("strong"),Ei=s("install \u{1F917} Transformers from source"),bi=s(" in a new virtual environment:"),ja=h(),E(He.$$.fragment),Fa=h(),Et=a("p"),xi=s("For older versions of the example scripts, click on the toggle below:"),Ra=h(),ce=a("details"),vr=a("summary"),zi=s("Examples for older versions of \u{1F917} Transformers"),Ti=h(),_=a("ul"),gr=a("li"),bt=a("a"),ki=s("v4.5.1"),Ai=h(),wr=a("li"),xt=a("a"),Pi=s("v4.4.2"),qi=h(),yr=a("li"),zt=a("a"),Li=s("v4.3.3"),Ii=h(),$r=a("li"),Tt=a("a"),Ui=s("v4.2.2"),Si=h(),Er=a("li"),kt=a("a"),Di=s("v4.1.1"),Ci=h(),br=a("li"),At=a("a"),Ni=s("v4.0.1"),Oi=h(),xr=a("li"),Pt=a("a"),ji=s("v3.5.1"),Fi=h(),zr=a("li"),qt=a("a"),Ri=s("v3.4.0"),Mi=h(),Tr=a("li"),Lt=a("a"),Hi=s("v3.3.1"),Gi=h(),kr=a("li"),It=a("a"),Ji=s("v3.2.0"),Bi=h(),Ar=a("li"),Ut=a("a"),Wi=s("v3.1.0"),Xi=h(),Pr=a("li"),St=a("a"),Yi=s("v3.0.2"),Ki=h(),qr=a("li"),Dt=a("a"),Vi=s("v2.11.0"),Qi=h(),Lr=a("li"),Ct=a("a"),Zi=s("v2.10.0"),es=h(),Ir=a("li"),Nt=a("a"),ts=s("v2.9.1"),rs=h(),Ur=a("li"),Ot=a("a"),as=s("v2.8.0"),os=h(),Sr=a("li"),jt=a("a"),is=s("v2.7.0"),ss=h(),Dr=a("li"),Ft=a("a"),ls=s("v2.6.0"),ns=h(),Cr=a("li"),Rt=a("a"),ps=s("v2.5.1"),us=h(),Nr=a("li"),Mt=a("a"),ms=s("v2.4.0"),hs=h(),Or=a("li"),Ht=a("a"),fs=s("v2.3.0"),cs=h(),jr=a("li"),Gt=a("a"),_s=s("v2.2.0"),ds=h(),Fr=a("li"),Jt=a("a"),vs=s("v2.1.1"),gs=h(),Rr=a("li"),Bt=a("a"),ws=s("v2.0.0"),ys=h(),Mr=a("li"),Wt=a("a"),$s=s("v1.2.0"),Es=h(),Hr=a("li"),Xt=a("a"),bs=s("v1.1.0"),xs=h(),Gr=a("li"),Yt=a("a"),zs=s("v1.0.0"),Ma=h(),Kt=a("p"),Ts=s("Then switch your current clone of \u{1F917} Transformers to a specific version, like v3.5.1 for example:"),Ha=h(),E(Ge.$$.fragment),Ga=h(),Vt=a("p"),ks=s("After you\u2019ve setup the correct library version, navigate to the example folder of your choice and install the example specific requirements:"),Ja=h(),E(Je.$$.fragment),Ba=h(),oe=a("h2"),_e=a("a"),Jr=a("span"),E(Be.$$.fragment),As=h(),Br=a("span"),Ps=s("Run a script"),Wa=h(),E(de.$$.fragment),Xa=h(),ie=a("h2"),ve=a("a"),Wr=a("span"),E(We.$$.fragment),qs=h(),Xr=a("span"),Ls=s("Distributed training and mixed precision"),Ya=h(),ge=a("p"),Is=s("The "),Xe=a("a"),Us=s("Trainer"),Ss=s(" supports distributed training and mixed precision, which means you can also use it in a script. To enable both of these features:"),Ka=h(),we=a("ul"),Ye=a("li"),Ds=s("Add the "),Yr=a("code"),Cs=s("fp16"),Ns=s(" argument to enable mixed precision."),Os=h(),Ke=a("li"),js=s("Set the number of GPUs to use with the "),Kr=a("code"),Fs=s("nproc_per_node"),Rs=s(" argument."),Va=h(),E(Ve.$$.fragment),Qa=h(),ye=a("p"),Ms=s("TensorFlow scripts utilize a "),Qe=a("a"),Vr=a("code"),Hs=s("MirroredStrategy"),Gs=s(" for distributed training, and you don\u2019t need to add any additional arguments to the training script. The TensorFlow script will use multiple GPUs by default if they are available."),Za=h(),se=a("h2"),$e=a("a"),Qr=a("span"),E(Ze.$$.fragment),Js=h(),Zr=a("span"),Bs=s("Run a script on a TPU"),eo=h(),E(Ee.$$.fragment),to=h(),le=a("h2"),be=a("a"),ea=a("span"),E(et.$$.fragment),Ws=h(),ta=a("span"),Xs=s("Run a script with \u{1F917} Accelerate"),ro=h(),xe=a("p"),Ys=s("\u{1F917} "),tt=a("a"),Ks=s("Accelerate"),Vs=s(" is a PyTorch-only library that offers a unified method for training a model on several types of setups (CPU-only, multiple GPUs, TPUs) while maintaining complete visibility into the PyTorch training loop. Make sure you have \u{1F917} Accelerate installed if you don\u2019t already have it:"),ao=h(),E(rt.$$.fragment),oo=h(),W=a("p"),Qs=s("Instead of the "),ra=a("code"),Zs=s("run_summarization.py"),el=s(" script, you need to use the "),aa=a("code"),tl=s("run_summarization_no_trainer.py"),rl=s(" script. \u{1F917} Accelerate supported scripts will have a "),oa=a("code"),al=s("task_no_trainer.py"),ol=s(" file in the folder. Begin by running the following command to create and save a configuration file:"),io=h(),E(at.$$.fragment),so=h(),Qt=a("p"),il=s("Test your setup to make sure it is configured correctly:"),lo=h(),E(ot.$$.fragment),no=h(),Zt=a("p"),sl=s("Now you are ready to launch the training:"),po=h(),E(it.$$.fragment),uo=h(),ne=a("h2"),ze=a("a"),ia=a("span"),E(st.$$.fragment),ll=h(),sa=a("span"),nl=s("Use a custom dataset"),mo=h(),er=a("p"),pl=s("The summarization script supports custom datasets as long as they are a CSV or JSON Line file. When you use your own dataset, you need to specify several additional arguments:"),ho=h(),V=a("ul"),Te=a("li"),la=a("code"),ul=s("train_file"),ml=s(" and "),na=a("code"),hl=s("validation_file"),fl=s(" specify the path to your training and validation files."),cl=h(),tr=a("li"),pa=a("code"),_l=s("text_column"),dl=s(" is the input text to summarize."),vl=h(),rr=a("li"),ua=a("code"),gl=s("summary_column"),wl=s(" is the target text to output."),fo=h(),ar=a("p"),yl=s("A summarization script using a custom dataset would look like this:"),co=h(),E(lt.$$.fragment),_o=h(),pe=a("h2"),ke=a("a"),ma=a("span"),E(nt.$$.fragment),$l=h(),ha=a("span"),El=s("Test a script"),vo=h(),or=a("p"),bl=s("It is often a good idea to run your script on a smaller number of dataset examples to ensure everything works as expected before committing to an entire dataset which may take hours to complete. Use the following arguments to truncate the dataset to a maximum number of samples:"),go=h(),Q=a("ul"),fa=a("li"),ca=a("code"),xl=s("max_train_samples"),zl=h(),_a=a("li"),da=a("code"),Tl=s("max_eval_samples"),kl=h(),va=a("li"),ga=a("code"),Al=s("max_predict_samples"),wo=h(),E(pt.$$.fragment),yo=h(),Z=a("p"),Pl=s("Not all example scripts support the "),wa=a("code"),ql=s("max_predict_samples"),Ll=s(" argument. If you aren\u2019t sure whether your script supports this argument, add the "),ya=a("code"),Il=s("-h"),Ul=s(" argument to check:"),$o=h(),E(ut.$$.fragment),Eo=h(),ue=a("h2"),Ae=a("a"),$a=a("span"),E(mt.$$.fragment),Sl=h(),Ea=a("span"),Dl=s("Resume training from checkpoint"),bo=h(),ir=a("p"),Cl=s("Another helpful option to enable is resuming training from a previous checkpoint. This will ensure you can pick up where you left off without starting over if your training gets interrupted. There are two methods to resume training from a checkpoint."),xo=h(),X=a("p"),Nl=s("The first method uses the "),ba=a("code"),Ol=s("output_dir previous_output_dir"),jl=s(" argument to resume training from the latest checkpoint stored in "),xa=a("code"),Fl=s("output_dir"),Rl=s(". In this case, you should remove "),za=a("code"),Ml=s("overwrite_output_dir"),Hl=s(":"),zo=h(),E(ht.$$.fragment),To=h(),Pe=a("p"),Gl=s("The second method uses the "),Ta=a("code"),Jl=s("resume_from_checkpoint path_to_specific_checkpoint"),Bl=s(" argument to resume training from a specific checkpoint folder."),ko=h(),E(ft.$$.fragment),Ao=h(),me=a("h2"),qe=a("a"),ka=a("span"),E(ct.$$.fragment),Wl=h(),Aa=a("span"),Xl=s("Share your model"),Po=h(),Le=a("p"),Yl=s("All scripts can upload your final model to the "),_t=a("a"),Kl=s("Model Hub"),Vl=s(". Make sure you are logged into Hugging Face before you begin:"),qo=h(),E(dt.$$.fragment),Lo=h(),ee=a("p"),Ql=s("Then add the "),Pa=a("code"),Zl=s("push_to_hub"),en=s(" argument to the script. This argument will create a repository with your Hugging Face username and the folder name specified in "),qa=a("code"),tn=s("output_dir"),rn=s("."),Io=h(),Ie=a("p"),an=s("To give your repository a specific name, use the "),La=a("code"),on=s("push_to_hub_model_id"),sn=s(" argument to add it. The repository will be automatically listed under your namespace."),Uo=h(),sr=a("p"),ln=s("The following example shows how to upload a model with a specific repository name:"),So=h(),E(vt.$$.fragment),this.h()},l(e){const n=Ru('[data-svelte="svelte-1phssyn"]',document.head);m=o(n,"META",{name:!0,content:!0}),n.forEach(r),w=f(e),c=o(e,"H1",{class:!0});var gt=i(c);v=o(gt,"A",{id:!0,class:!0,href:!0});var Ia=i(v);q=o(Ia,"SPAN",{});var un=i(q);b($.$$.fragment,un),un.forEach(r),Ia.forEach(r),O=f(gt),j=o(gt,"SPAN",{});var mn=i(j);U=l(mn,"Train with a script"),mn.forEach(r),gt.forEach(r),F=f(e),A=o(e,"P",{});var te=i(A);S=l(te,"Along with the \u{1F917} Transformers "),P=o(te,"A",{href:!0});var hn=i(P);D=l(hn,"notebooks"),hn.forEach(r),N=l(te,", there are also example scripts demonstrating how to train a model for a task with "),L=o(te,"A",{href:!0,rel:!0});var fn=i(L);R=l(fn,"PyTorch"),fn.forEach(r),y=l(te,", "),g=o(te,"A",{href:!0,rel:!0});var cn=i(g);G=l(cn,"TensorFlow"),cn.forEach(r),C=l(te,", or "),I=o(te,"A",{href:!0,rel:!0});var _n=i(I);B=l(_n,"JAX/Flax"),_n.forEach(r),wt=l(te,"."),te.forEach(r),De=f(e),J=o(e,"P",{});var lr=i(J);yt=l(lr,"You will also find scripts we\u2019ve used in our "),Ce=o(lr,"A",{href:!0,rel:!0});var dn=i(Ce);oi=l(dn,"research projects"),dn.forEach(r),ii=l(lr," and "),Ne=o(lr,"A",{href:!0,rel:!0});var vn=i(Ne);si=l(vn,"legacy examples"),vn.forEach(r),li=l(lr," which are mostly community contributed. These scripts are not actively maintained and require a specific version of \u{1F917} Transformers that will most likely be incompatible with the latest version of the library."),lr.forEach(r),Sa=f(e),$t=o(e,"P",{});var gn=i($t);ni=l(gn,"The example scripts are not expected to work out-of-the-box on every problem, and you may need to adapt the script to the problem you\u2019re trying to solve. To help you with this, most of the scripts fully expose how data is preprocessed, allowing you to edit it as necessary for your use case."),gn.forEach(r),Da=f(e),Y=o(e,"P",{});var nr=i(Y);pi=l(nr,"For any feature you\u2019d like to implement in an example script, please discuss it on the "),Oe=o(nr,"A",{href:!0,rel:!0});var wn=i(Oe);ui=l(wn,"forum"),wn.forEach(r),mi=l(nr," or in an "),je=o(nr,"A",{href:!0,rel:!0});var yn=i(je);hi=l(yn,"issue"),yn.forEach(r),fi=l(nr," before submitting a Pull Request. While we welcome bug fixes, it is unlikely we will merge a Pull Request that adds more functionality at the cost of readability."),nr.forEach(r),Ca=f(e),K=o(e,"P",{});var pr=i(K);ci=l(pr,"This guide will show you how to run an example summarization training script in "),Fe=o(pr,"A",{href:!0,rel:!0});var $n=i(Fe);_i=l($n,"PyTorch"),$n.forEach(r),di=l(pr," and "),Re=o(pr,"A",{href:!0,rel:!0});var En=i(Re);vi=l(En,"TensorFlow"),En.forEach(r),gi=l(pr,". All examples are expected to work with both frameworks unless otherwise specified."),pr.forEach(r),Na=f(e),ae=o(e,"H2",{class:!0});var Co=i(ae);he=o(Co,"A",{id:!0,class:!0,href:!0});var bn=i(he);cr=o(bn,"SPAN",{});var xn=i(cr);b(Me.$$.fragment,xn),xn.forEach(r),bn.forEach(r),wi=f(Co),_r=o(Co,"SPAN",{});var zn=i(_r);yi=l(zn,"Setup"),zn.forEach(r),Co.forEach(r),Oa=f(e),fe=o(e,"P",{});var No=i(fe);$i=l(No,"To successfully run the latest version of the example scripts, you have to "),dr=o(No,"STRONG",{});var Tn=i(dr);Ei=l(Tn,"install \u{1F917} Transformers from source"),Tn.forEach(r),bi=l(No," in a new virtual environment:"),No.forEach(r),ja=f(e),b(He.$$.fragment,e),Fa=f(e),Et=o(e,"P",{});var kn=i(Et);xi=l(kn,"For older versions of the example scripts, click on the toggle below:"),kn.forEach(r),Ra=f(e),ce=o(e,"DETAILS",{});var Oo=i(ce);vr=o(Oo,"SUMMARY",{});var An=i(vr);zi=l(An,"Examples for older versions of \u{1F917} Transformers"),An.forEach(r),Ti=f(Oo),_=o(Oo,"UL",{});var d=i(_);gr=o(d,"LI",{});var Pn=i(gr);bt=o(Pn,"A",{href:!0});var qn=i(bt);ki=l(qn,"v4.5.1"),qn.forEach(r),Pn.forEach(r),Ai=f(d),wr=o(d,"LI",{});var Ln=i(wr);xt=o(Ln,"A",{href:!0});var In=i(xt);Pi=l(In,"v4.4.2"),In.forEach(r),Ln.forEach(r),qi=f(d),yr=o(d,"LI",{});var Un=i(yr);zt=o(Un,"A",{href:!0});var Sn=i(zt);Li=l(Sn,"v4.3.3"),Sn.forEach(r),Un.forEach(r),Ii=f(d),$r=o(d,"LI",{});var Dn=i($r);Tt=o(Dn,"A",{href:!0});var Cn=i(Tt);Ui=l(Cn,"v4.2.2"),Cn.forEach(r),Dn.forEach(r),Si=f(d),Er=o(d,"LI",{});var Nn=i(Er);kt=o(Nn,"A",{href:!0});var On=i(kt);Di=l(On,"v4.1.1"),On.forEach(r),Nn.forEach(r),Ci=f(d),br=o(d,"LI",{});var jn=i(br);At=o(jn,"A",{href:!0});var Fn=i(At);Ni=l(Fn,"v4.0.1"),Fn.forEach(r),jn.forEach(r),Oi=f(d),xr=o(d,"LI",{});var Rn=i(xr);Pt=o(Rn,"A",{href:!0});var Mn=i(Pt);ji=l(Mn,"v3.5.1"),Mn.forEach(r),Rn.forEach(r),Fi=f(d),zr=o(d,"LI",{});var Hn=i(zr);qt=o(Hn,"A",{href:!0});var Gn=i(qt);Ri=l(Gn,"v3.4.0"),Gn.forEach(r),Hn.forEach(r),Mi=f(d),Tr=o(d,"LI",{});var Jn=i(Tr);Lt=o(Jn,"A",{href:!0});var Bn=i(Lt);Hi=l(Bn,"v3.3.1"),Bn.forEach(r),Jn.forEach(r),Gi=f(d),kr=o(d,"LI",{});var Wn=i(kr);It=o(Wn,"A",{href:!0});var Xn=i(It);Ji=l(Xn,"v3.2.0"),Xn.forEach(r),Wn.forEach(r),Bi=f(d),Ar=o(d,"LI",{});var Yn=i(Ar);Ut=o(Yn,"A",{href:!0});var Kn=i(Ut);Wi=l(Kn,"v3.1.0"),Kn.forEach(r),Yn.forEach(r),Xi=f(d),Pr=o(d,"LI",{});var Vn=i(Pr);St=o(Vn,"A",{href:!0});var Qn=i(St);Yi=l(Qn,"v3.0.2"),Qn.forEach(r),Vn.forEach(r),Ki=f(d),qr=o(d,"LI",{});var Zn=i(qr);Dt=o(Zn,"A",{href:!0});var ep=i(Dt);Vi=l(ep,"v2.11.0"),ep.forEach(r),Zn.forEach(r),Qi=f(d),Lr=o(d,"LI",{});var tp=i(Lr);Ct=o(tp,"A",{href:!0});var rp=i(Ct);Zi=l(rp,"v2.10.0"),rp.forEach(r),tp.forEach(r),es=f(d),Ir=o(d,"LI",{});var ap=i(Ir);Nt=o(ap,"A",{href:!0});var op=i(Nt);ts=l(op,"v2.9.1"),op.forEach(r),ap.forEach(r),rs=f(d),Ur=o(d,"LI",{});var ip=i(Ur);Ot=o(ip,"A",{href:!0});var sp=i(Ot);as=l(sp,"v2.8.0"),sp.forEach(r),ip.forEach(r),os=f(d),Sr=o(d,"LI",{});var lp=i(Sr);jt=o(lp,"A",{href:!0});var np=i(jt);is=l(np,"v2.7.0"),np.forEach(r),lp.forEach(r),ss=f(d),Dr=o(d,"LI",{});var pp=i(Dr);Ft=o(pp,"A",{href:!0});var up=i(Ft);ls=l(up,"v2.6.0"),up.forEach(r),pp.forEach(r),ns=f(d),Cr=o(d,"LI",{});var mp=i(Cr);Rt=o(mp,"A",{href:!0});var hp=i(Rt);ps=l(hp,"v2.5.1"),hp.forEach(r),mp.forEach(r),us=f(d),Nr=o(d,"LI",{});var fp=i(Nr);Mt=o(fp,"A",{href:!0});var cp=i(Mt);ms=l(cp,"v2.4.0"),cp.forEach(r),fp.forEach(r),hs=f(d),Or=o(d,"LI",{});var _p=i(Or);Ht=o(_p,"A",{href:!0});var dp=i(Ht);fs=l(dp,"v2.3.0"),dp.forEach(r),_p.forEach(r),cs=f(d),jr=o(d,"LI",{});var vp=i(jr);Gt=o(vp,"A",{href:!0});var gp=i(Gt);_s=l(gp,"v2.2.0"),gp.forEach(r),vp.forEach(r),ds=f(d),Fr=o(d,"LI",{});var wp=i(Fr);Jt=o(wp,"A",{href:!0});var yp=i(Jt);vs=l(yp,"v2.1.1"),yp.forEach(r),wp.forEach(r),gs=f(d),Rr=o(d,"LI",{});var $p=i(Rr);Bt=o($p,"A",{href:!0});var Ep=i(Bt);ws=l(Ep,"v2.0.0"),Ep.forEach(r),$p.forEach(r),ys=f(d),Mr=o(d,"LI",{});var bp=i(Mr);Wt=o(bp,"A",{href:!0});var xp=i(Wt);$s=l(xp,"v1.2.0"),xp.forEach(r),bp.forEach(r),Es=f(d),Hr=o(d,"LI",{});var zp=i(Hr);Xt=o(zp,"A",{href:!0});var Tp=i(Xt);bs=l(Tp,"v1.1.0"),Tp.forEach(r),zp.forEach(r),xs=f(d),Gr=o(d,"LI",{});var kp=i(Gr);Yt=o(kp,"A",{href:!0});var Ap=i(Yt);zs=l(Ap,"v1.0.0"),Ap.forEach(r),kp.forEach(r),d.forEach(r),Oo.forEach(r),Ma=f(e),Kt=o(e,"P",{});var Pp=i(Kt);Ts=l(Pp,"Then switch your current clone of \u{1F917} Transformers to a specific version, like v3.5.1 for example:"),Pp.forEach(r),Ha=f(e),b(Ge.$$.fragment,e),Ga=f(e),Vt=o(e,"P",{});var qp=i(Vt);ks=l(qp,"After you\u2019ve setup the correct library version, navigate to the example folder of your choice and install the example specific requirements:"),qp.forEach(r),Ja=f(e),b(Je.$$.fragment,e),Ba=f(e),oe=o(e,"H2",{class:!0});var jo=i(oe);_e=o(jo,"A",{id:!0,class:!0,href:!0});var Lp=i(_e);Jr=o(Lp,"SPAN",{});var Ip=i(Jr);b(Be.$$.fragment,Ip),Ip.forEach(r),Lp.forEach(r),As=f(jo),Br=o(jo,"SPAN",{});var Up=i(Br);Ps=l(Up,"Run a script"),Up.forEach(r),jo.forEach(r),Wa=f(e),b(de.$$.fragment,e),Xa=f(e),ie=o(e,"H2",{class:!0});var Fo=i(ie);ve=o(Fo,"A",{id:!0,class:!0,href:!0});var Sp=i(ve);Wr=o(Sp,"SPAN",{});var Dp=i(Wr);b(We.$$.fragment,Dp),Dp.forEach(r),Sp.forEach(r),qs=f(Fo),Xr=o(Fo,"SPAN",{});var Cp=i(Xr);Ls=l(Cp,"Distributed training and mixed precision"),Cp.forEach(r),Fo.forEach(r),Ya=f(e),ge=o(e,"P",{});var Ro=i(ge);Is=l(Ro,"The "),Xe=o(Ro,"A",{href:!0,rel:!0});var Np=i(Xe);Us=l(Np,"Trainer"),Np.forEach(r),Ss=l(Ro," supports distributed training and mixed precision, which means you can also use it in a script. To enable both of these features:"),Ro.forEach(r),Ka=f(e),we=o(e,"UL",{});var Mo=i(we);Ye=o(Mo,"LI",{});var Ho=i(Ye);Ds=l(Ho,"Add the "),Yr=o(Ho,"CODE",{});var Op=i(Yr);Cs=l(Op,"fp16"),Op.forEach(r),Ns=l(Ho," argument to enable mixed precision."),Ho.forEach(r),Os=f(Mo),Ke=o(Mo,"LI",{});var Go=i(Ke);js=l(Go,"Set the number of GPUs to use with the "),Kr=o(Go,"CODE",{});var jp=i(Kr);Fs=l(jp,"nproc_per_node"),jp.forEach(r),Rs=l(Go," argument."),Go.forEach(r),Mo.forEach(r),Va=f(e),b(Ve.$$.fragment,e),Qa=f(e),ye=o(e,"P",{});var Jo=i(ye);Ms=l(Jo,"TensorFlow scripts utilize a "),Qe=o(Jo,"A",{href:!0,rel:!0});var Fp=i(Qe);Vr=o(Fp,"CODE",{});var Rp=i(Vr);Hs=l(Rp,"MirroredStrategy"),Rp.forEach(r),Fp.forEach(r),Gs=l(Jo," for distributed training, and you don\u2019t need to add any additional arguments to the training script. The TensorFlow script will use multiple GPUs by default if they are available."),Jo.forEach(r),Za=f(e),se=o(e,"H2",{class:!0});var Bo=i(se);$e=o(Bo,"A",{id:!0,class:!0,href:!0});var Mp=i($e);Qr=o(Mp,"SPAN",{});var Hp=i(Qr);b(Ze.$$.fragment,Hp),Hp.forEach(r),Mp.forEach(r),Js=f(Bo),Zr=o(Bo,"SPAN",{});var Gp=i(Zr);Bs=l(Gp,"Run a script on a TPU"),Gp.forEach(r),Bo.forEach(r),eo=f(e),b(Ee.$$.fragment,e),to=f(e),le=o(e,"H2",{class:!0});var Wo=i(le);be=o(Wo,"A",{id:!0,class:!0,href:!0});var Jp=i(be);ea=o(Jp,"SPAN",{});var Bp=i(ea);b(et.$$.fragment,Bp),Bp.forEach(r),Jp.forEach(r),Ws=f(Wo),ta=o(Wo,"SPAN",{});var Wp=i(ta);Xs=l(Wp,"Run a script with \u{1F917} Accelerate"),Wp.forEach(r),Wo.forEach(r),ro=f(e),xe=o(e,"P",{});var Xo=i(xe);Ys=l(Xo,"\u{1F917} "),tt=o(Xo,"A",{href:!0,rel:!0});var Xp=i(tt);Ks=l(Xp,"Accelerate"),Xp.forEach(r),Vs=l(Xo," is a PyTorch-only library that offers a unified method for training a model on several types of setups (CPU-only, multiple GPUs, TPUs) while maintaining complete visibility into the PyTorch training loop. Make sure you have \u{1F917} Accelerate installed if you don\u2019t already have it:"),Xo.forEach(r),ao=f(e),b(rt.$$.fragment,e),oo=f(e),W=o(e,"P",{});var Ue=i(W);Qs=l(Ue,"Instead of the "),ra=o(Ue,"CODE",{});var Yp=i(ra);Zs=l(Yp,"run_summarization.py"),Yp.forEach(r),el=l(Ue," script, you need to use the "),aa=o(Ue,"CODE",{});var Kp=i(aa);tl=l(Kp,"run_summarization_no_trainer.py"),Kp.forEach(r),rl=l(Ue," script. \u{1F917} Accelerate supported scripts will have a "),oa=o(Ue,"CODE",{});var Vp=i(oa);al=l(Vp,"task_no_trainer.py"),Vp.forEach(r),ol=l(Ue," file in the folder. Begin by running the following command to create and save a configuration file:"),Ue.forEach(r),io=f(e),b(at.$$.fragment,e),so=f(e),Qt=o(e,"P",{});var Qp=i(Qt);il=l(Qp,"Test your setup to make sure it is configured correctly:"),Qp.forEach(r),lo=f(e),b(ot.$$.fragment,e),no=f(e),Zt=o(e,"P",{});var Zp=i(Zt);sl=l(Zp,"Now you are ready to launch the training:"),Zp.forEach(r),po=f(e),b(it.$$.fragment,e),uo=f(e),ne=o(e,"H2",{class:!0});var Yo=i(ne);ze=o(Yo,"A",{id:!0,class:!0,href:!0});var eu=i(ze);ia=o(eu,"SPAN",{});var tu=i(ia);b(st.$$.fragment,tu),tu.forEach(r),eu.forEach(r),ll=f(Yo),sa=o(Yo,"SPAN",{});var ru=i(sa);nl=l(ru,"Use a custom dataset"),ru.forEach(r),Yo.forEach(r),mo=f(e),er=o(e,"P",{});var au=i(er);pl=l(au,"The summarization script supports custom datasets as long as they are a CSV or JSON Line file. When you use your own dataset, you need to specify several additional arguments:"),au.forEach(r),ho=f(e),V=o(e,"UL",{});var ur=i(V);Te=o(ur,"LI",{});var Ua=i(Te);la=o(Ua,"CODE",{});var ou=i(la);ul=l(ou,"train_file"),ou.forEach(r),ml=l(Ua," and "),na=o(Ua,"CODE",{});var iu=i(na);hl=l(iu,"validation_file"),iu.forEach(r),fl=l(Ua," specify the path to your training and validation files."),Ua.forEach(r),cl=f(ur),tr=o(ur,"LI",{});var nn=i(tr);pa=o(nn,"CODE",{});var su=i(pa);_l=l(su,"text_column"),su.forEach(r),dl=l(nn," is the input text to summarize."),nn.forEach(r),vl=f(ur),rr=o(ur,"LI",{});var pn=i(rr);ua=o(pn,"CODE",{});var lu=i(ua);gl=l(lu,"summary_column"),lu.forEach(r),wl=l(pn," is the target text to output."),pn.forEach(r),ur.forEach(r),fo=f(e),ar=o(e,"P",{});var nu=i(ar);yl=l(nu,"A summarization script using a custom dataset would look like this:"),nu.forEach(r),co=f(e),b(lt.$$.fragment,e),_o=f(e),pe=o(e,"H2",{class:!0});var Ko=i(pe);ke=o(Ko,"A",{id:!0,class:!0,href:!0});var pu=i(ke);ma=o(pu,"SPAN",{});var uu=i(ma);b(nt.$$.fragment,uu),uu.forEach(r),pu.forEach(r),$l=f(Ko),ha=o(Ko,"SPAN",{});var mu=i(ha);El=l(mu,"Test a script"),mu.forEach(r),Ko.forEach(r),vo=f(e),or=o(e,"P",{});var hu=i(or);bl=l(hu,"It is often a good idea to run your script on a smaller number of dataset examples to ensure everything works as expected before committing to an entire dataset which may take hours to complete. Use the following arguments to truncate the dataset to a maximum number of samples:"),hu.forEach(r),go=f(e),Q=o(e,"UL",{});var mr=i(Q);fa=o(mr,"LI",{});var fu=i(fa);ca=o(fu,"CODE",{});var cu=i(ca);xl=l(cu,"max_train_samples"),cu.forEach(r),fu.forEach(r),zl=f(mr),_a=o(mr,"LI",{});var _u=i(_a);da=o(_u,"CODE",{});var du=i(da);Tl=l(du,"max_eval_samples"),du.forEach(r),_u.forEach(r),kl=f(mr),va=o(mr,"LI",{});var vu=i(va);ga=o(vu,"CODE",{});var gu=i(ga);Al=l(gu,"max_predict_samples"),gu.forEach(r),vu.forEach(r),mr.forEach(r),wo=f(e),b(pt.$$.fragment,e),yo=f(e),Z=o(e,"P",{});var hr=i(Z);Pl=l(hr,"Not all example scripts support the "),wa=o(hr,"CODE",{});var wu=i(wa);ql=l(wu,"max_predict_samples"),wu.forEach(r),Ll=l(hr," argument. If you aren\u2019t sure whether your script supports this argument, add the "),ya=o(hr,"CODE",{});var yu=i(ya);Il=l(yu,"-h"),yu.forEach(r),Ul=l(hr," argument to check:"),hr.forEach(r),$o=f(e),b(ut.$$.fragment,e),Eo=f(e),ue=o(e,"H2",{class:!0});var Vo=i(ue);Ae=o(Vo,"A",{id:!0,class:!0,href:!0});var $u=i(Ae);$a=o($u,"SPAN",{});var Eu=i($a);b(mt.$$.fragment,Eu),Eu.forEach(r),$u.forEach(r),Sl=f(Vo),Ea=o(Vo,"SPAN",{});var bu=i(Ea);Dl=l(bu,"Resume training from checkpoint"),bu.forEach(r),Vo.forEach(r),bo=f(e),ir=o(e,"P",{});var xu=i(ir);Cl=l(xu,"Another helpful option to enable is resuming training from a previous checkpoint. This will ensure you can pick up where you left off without starting over if your training gets interrupted. There are two methods to resume training from a checkpoint."),xu.forEach(r),xo=f(e),X=o(e,"P",{});var Se=i(X);Nl=l(Se,"The first method uses the "),ba=o(Se,"CODE",{});var zu=i(ba);Ol=l(zu,"output_dir previous_output_dir"),zu.forEach(r),jl=l(Se," argument to resume training from the latest checkpoint stored in "),xa=o(Se,"CODE",{});var Tu=i(xa);Fl=l(Tu,"output_dir"),Tu.forEach(r),Rl=l(Se,". In this case, you should remove "),za=o(Se,"CODE",{});var ku=i(za);Ml=l(ku,"overwrite_output_dir"),ku.forEach(r),Hl=l(Se,":"),Se.forEach(r),zo=f(e),b(ht.$$.fragment,e),To=f(e),Pe=o(e,"P",{});var Qo=i(Pe);Gl=l(Qo,"The second method uses the "),Ta=o(Qo,"CODE",{});var Au=i(Ta);Jl=l(Au,"resume_from_checkpoint path_to_specific_checkpoint"),Au.forEach(r),Bl=l(Qo," argument to resume training from a specific checkpoint folder."),Qo.forEach(r),ko=f(e),b(ft.$$.fragment,e),Ao=f(e),me=o(e,"H2",{class:!0});var Zo=i(me);qe=o(Zo,"A",{id:!0,class:!0,href:!0});var Pu=i(qe);ka=o(Pu,"SPAN",{});var qu=i(ka);b(ct.$$.fragment,qu),qu.forEach(r),Pu.forEach(r),Wl=f(Zo),Aa=o(Zo,"SPAN",{});var Lu=i(Aa);Xl=l(Lu,"Share your model"),Lu.forEach(r),Zo.forEach(r),Po=f(e),Le=o(e,"P",{});var ei=i(Le);Yl=l(ei,"All scripts can upload your final model to the "),_t=o(ei,"A",{href:!0,rel:!0});var Iu=i(_t);Kl=l(Iu,"Model Hub"),Iu.forEach(r),Vl=l(ei,". Make sure you are logged into Hugging Face before you begin:"),ei.forEach(r),qo=f(e),b(dt.$$.fragment,e),Lo=f(e),ee=o(e,"P",{});var fr=i(ee);Ql=l(fr,"Then add the "),Pa=o(fr,"CODE",{});var Uu=i(Pa);Zl=l(Uu,"push_to_hub"),Uu.forEach(r),en=l(fr," argument to the script. This argument will create a repository with your Hugging Face username and the folder name specified in "),qa=o(fr,"CODE",{});var Su=i(qa);tn=l(Su,"output_dir"),Su.forEach(r),rn=l(fr,"."),fr.forEach(r),Io=f(e),Ie=o(e,"P",{});var ti=i(Ie);an=l(ti,"To give your repository a specific name, use the "),La=o(ti,"CODE",{});var Du=i(La);on=l(Du,"push_to_hub_model_id"),Du.forEach(r),sn=l(ti," argument to add it. The repository will be automatically listed under your namespace."),ti.forEach(r),Uo=f(e),sr=o(e,"P",{});var Cu=i(sr);ln=l(Cu,"The following example shows how to upload a model with a specific repository name:"),Cu.forEach(r),So=f(e),b(vt.$$.fragment,e),this.h()},h(){p(m,"name","hf:doc:metadata"),p(m,"content",JSON.stringify(Qu)),p(v,"id","train-with-a-script"),p(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(v,"href","#train-with-a-script"),p(c,"class","relative group"),p(P,"href","./noteboks/README"),p(L,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch"),p(L,"rel","nofollow"),p(g,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow"),p(g,"rel","nofollow"),p(I,"href","https://github.com/huggingface/transformers/tree/main/examples/flax"),p(I,"rel","nofollow"),p(Ce,"href","https://github.com/huggingface/transformers/tree/main/examples/research_projects"),p(Ce,"rel","nofollow"),p(Ne,"href","https://github.com/huggingface/transformers/tree/main/examples/legacy"),p(Ne,"rel","nofollow"),p(Oe,"href","https://discuss.huggingface.co/"),p(Oe,"rel","nofollow"),p(je,"href","https://github.com/huggingface/transformers/issues"),p(je,"rel","nofollow"),p(Fe,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/summarization"),p(Fe,"rel","nofollow"),p(Re,"href","https://github.com/huggingface/transformers/tree/main/examples/tensorflow/summarization"),p(Re,"rel","nofollow"),p(he,"id","setup"),p(he,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(he,"href","#setup"),p(ae,"class","relative group"),p(bt,"href","https://github.com/huggingface/transformers/tree/v4.5.1/examples"),p(xt,"href","https://github.com/huggingface/transformers/tree/v4.4.2/examples"),p(zt,"href","https://github.com/huggingface/transformers/tree/v4.3.3/examples"),p(Tt,"href","https://github.com/huggingface/transformers/tree/v4.2.2/examples"),p(kt,"href","https://github.com/huggingface/transformers/tree/v4.1.1/examples"),p(At,"href","https://github.com/huggingface/transformers/tree/v4.0.1/examples"),p(Pt,"href","https://github.com/huggingface/transformers/tree/v3.5.1/examples"),p(qt,"href","https://github.com/huggingface/transformers/tree/v3.4.0/examples"),p(Lt,"href","https://github.com/huggingface/transformers/tree/v3.3.1/examples"),p(It,"href","https://github.com/huggingface/transformers/tree/v3.2.0/examples"),p(Ut,"href","https://github.com/huggingface/transformers/tree/v3.1.0/examples"),p(St,"href","https://github.com/huggingface/transformers/tree/v3.0.2/examples"),p(Dt,"href","https://github.com/huggingface/transformers/tree/v2.11.0/examples"),p(Ct,"href","https://github.com/huggingface/transformers/tree/v2.10.0/examples"),p(Nt,"href","https://github.com/huggingface/transformers/tree/v2.9.1/examples"),p(Ot,"href","https://github.com/huggingface/transformers/tree/v2.8.0/examples"),p(jt,"href","https://github.com/huggingface/transformers/tree/v2.7.0/examples"),p(Ft,"href","https://github.com/huggingface/transformers/tree/v2.6.0/examples"),p(Rt,"href","https://github.com/huggingface/transformers/tree/v2.5.1/examples"),p(Mt,"href","https://github.com/huggingface/transformers/tree/v2.4.0/examples"),p(Ht,"href","https://github.com/huggingface/transformers/tree/v2.3.0/examples"),p(Gt,"href","https://github.com/huggingface/transformers/tree/v2.2.0/examples"),p(Jt,"href","https://github.com/huggingface/transformers/tree/v2.1.0/examples"),p(Bt,"href","https://github.com/huggingface/transformers/tree/v2.0.0/examples"),p(Wt,"href","https://github.com/huggingface/transformers/tree/v1.2.0/examples"),p(Xt,"href","https://github.com/huggingface/transformers/tree/v1.1.0/examples"),p(Yt,"href","https://github.com/huggingface/transformers/tree/v1.0.0/examples"),p(_e,"id","run-a-script"),p(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(_e,"href","#run-a-script"),p(oe,"class","relative group"),p(ve,"id","distributed-training-and-mixed-precision"),p(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ve,"href","#distributed-training-and-mixed-precision"),p(ie,"class","relative group"),p(Xe,"href","https://huggingface.co/docs/transformers/main_classes/trainer"),p(Xe,"rel","nofollow"),p(Qe,"href","https://www.tensorflow.org/guide/distributed_training#mirroredstrategy"),p(Qe,"rel","nofollow"),p($e,"id","run-a-script-on-a-tpu"),p($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p($e,"href","#run-a-script-on-a-tpu"),p(se,"class","relative group"),p(be,"id","run-a-script-with-accelerate"),p(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(be,"href","#run-a-script-with-accelerate"),p(le,"class","relative group"),p(tt,"href","https://huggingface.co/docs/accelerate/index.html"),p(tt,"rel","nofollow"),p(ze,"id","use-a-custom-dataset"),p(ze,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ze,"href","#use-a-custom-dataset"),p(ne,"class","relative group"),p(ke,"id","test-a-script"),p(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(ke,"href","#test-a-script"),p(pe,"class","relative group"),p(Ae,"id","resume-training-from-checkpoint"),p(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(Ae,"href","#resume-training-from-checkpoint"),p(ue,"class","relative group"),p(qe,"id","share-your-model"),p(qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),p(qe,"href","#share-your-model"),p(me,"class","relative group"),p(_t,"href","https://huggingface.co/models"),p(_t,"rel","nofollow")},m(e,n){t(document.head,m),u(e,w,n),u(e,c,n),t(c,v),t(v,q),x($,q,null),t(c,O),t(c,j),t(j,U),u(e,F,n),u(e,A,n),t(A,S),t(A,P),t(P,D),t(A,N),t(A,L),t(L,R),t(A,y),t(A,g),t(g,G),t(A,C),t(A,I),t(I,B),t(A,wt),u(e,De,n),u(e,J,n),t(J,yt),t(J,Ce),t(Ce,oi),t(J,ii),t(J,Ne),t(Ne,si),t(J,li),u(e,Sa,n),u(e,$t,n),t($t,ni),u(e,Da,n),u(e,Y,n),t(Y,pi),t(Y,Oe),t(Oe,ui),t(Y,mi),t(Y,je),t(je,hi),t(Y,fi),u(e,Ca,n),u(e,K,n),t(K,ci),t(K,Fe),t(Fe,_i),t(K,di),t(K,Re),t(Re,vi),t(K,gi),u(e,Na,n),u(e,ae,n),t(ae,he),t(he,cr),x(Me,cr,null),t(ae,wi),t(ae,_r),t(_r,yi),u(e,Oa,n),u(e,fe,n),t(fe,$i),t(fe,dr),t(dr,Ei),t(fe,bi),u(e,ja,n),x(He,e,n),u(e,Fa,n),u(e,Et,n),t(Et,xi),u(e,Ra,n),u(e,ce,n),t(ce,vr),t(vr,zi),t(ce,Ti),t(ce,_),t(_,gr),t(gr,bt),t(bt,ki),t(_,Ai),t(_,wr),t(wr,xt),t(xt,Pi),t(_,qi),t(_,yr),t(yr,zt),t(zt,Li),t(_,Ii),t(_,$r),t($r,Tt),t(Tt,Ui),t(_,Si),t(_,Er),t(Er,kt),t(kt,Di),t(_,Ci),t(_,br),t(br,At),t(At,Ni),t(_,Oi),t(_,xr),t(xr,Pt),t(Pt,ji),t(_,Fi),t(_,zr),t(zr,qt),t(qt,Ri),t(_,Mi),t(_,Tr),t(Tr,Lt),t(Lt,Hi),t(_,Gi),t(_,kr),t(kr,It),t(It,Ji),t(_,Bi),t(_,Ar),t(Ar,Ut),t(Ut,Wi),t(_,Xi),t(_,Pr),t(Pr,St),t(St,Yi),t(_,Ki),t(_,qr),t(qr,Dt),t(Dt,Vi),t(_,Qi),t(_,Lr),t(Lr,Ct),t(Ct,Zi),t(_,es),t(_,Ir),t(Ir,Nt),t(Nt,ts),t(_,rs),t(_,Ur),t(Ur,Ot),t(Ot,as),t(_,os),t(_,Sr),t(Sr,jt),t(jt,is),t(_,ss),t(_,Dr),t(Dr,Ft),t(Ft,ls),t(_,ns),t(_,Cr),t(Cr,Rt),t(Rt,ps),t(_,us),t(_,Nr),t(Nr,Mt),t(Mt,ms),t(_,hs),t(_,Or),t(Or,Ht),t(Ht,fs),t(_,cs),t(_,jr),t(jr,Gt),t(Gt,_s),t(_,ds),t(_,Fr),t(Fr,Jt),t(Jt,vs),t(_,gs),t(_,Rr),t(Rr,Bt),t(Bt,ws),t(_,ys),t(_,Mr),t(Mr,Wt),t(Wt,$s),t(_,Es),t(_,Hr),t(Hr,Xt),t(Xt,bs),t(_,xs),t(_,Gr),t(Gr,Yt),t(Yt,zs),u(e,Ma,n),u(e,Kt,n),t(Kt,Ts),u(e,Ha,n),x(Ge,e,n),u(e,Ga,n),u(e,Vt,n),t(Vt,ks),u(e,Ja,n),x(Je,e,n),u(e,Ba,n),u(e,oe,n),t(oe,_e),t(_e,Jr),x(Be,Jr,null),t(oe,As),t(oe,Br),t(Br,Ps),u(e,Wa,n),x(de,e,n),u(e,Xa,n),u(e,ie,n),t(ie,ve),t(ve,Wr),x(We,Wr,null),t(ie,qs),t(ie,Xr),t(Xr,Ls),u(e,Ya,n),u(e,ge,n),t(ge,Is),t(ge,Xe),t(Xe,Us),t(ge,Ss),u(e,Ka,n),u(e,we,n),t(we,Ye),t(Ye,Ds),t(Ye,Yr),t(Yr,Cs),t(Ye,Ns),t(we,Os),t(we,Ke),t(Ke,js),t(Ke,Kr),t(Kr,Fs),t(Ke,Rs),u(e,Va,n),x(Ve,e,n),u(e,Qa,n),u(e,ye,n),t(ye,Ms),t(ye,Qe),t(Qe,Vr),t(Vr,Hs),t(ye,Gs),u(e,Za,n),u(e,se,n),t(se,$e),t($e,Qr),x(Ze,Qr,null),t(se,Js),t(se,Zr),t(Zr,Bs),u(e,eo,n),x(Ee,e,n),u(e,to,n),u(e,le,n),t(le,be),t(be,ea),x(et,ea,null),t(le,Ws),t(le,ta),t(ta,Xs),u(e,ro,n),u(e,xe,n),t(xe,Ys),t(xe,tt),t(tt,Ks),t(xe,Vs),u(e,ao,n),x(rt,e,n),u(e,oo,n),u(e,W,n),t(W,Qs),t(W,ra),t(ra,Zs),t(W,el),t(W,aa),t(aa,tl),t(W,rl),t(W,oa),t(oa,al),t(W,ol),u(e,io,n),x(at,e,n),u(e,so,n),u(e,Qt,n),t(Qt,il),u(e,lo,n),x(ot,e,n),u(e,no,n),u(e,Zt,n),t(Zt,sl),u(e,po,n),x(it,e,n),u(e,uo,n),u(e,ne,n),t(ne,ze),t(ze,ia),x(st,ia,null),t(ne,ll),t(ne,sa),t(sa,nl),u(e,mo,n),u(e,er,n),t(er,pl),u(e,ho,n),u(e,V,n),t(V,Te),t(Te,la),t(la,ul),t(Te,ml),t(Te,na),t(na,hl),t(Te,fl),t(V,cl),t(V,tr),t(tr,pa),t(pa,_l),t(tr,dl),t(V,vl),t(V,rr),t(rr,ua),t(ua,gl),t(rr,wl),u(e,fo,n),u(e,ar,n),t(ar,yl),u(e,co,n),x(lt,e,n),u(e,_o,n),u(e,pe,n),t(pe,ke),t(ke,ma),x(nt,ma,null),t(pe,$l),t(pe,ha),t(ha,El),u(e,vo,n),u(e,or,n),t(or,bl),u(e,go,n),u(e,Q,n),t(Q,fa),t(fa,ca),t(ca,xl),t(Q,zl),t(Q,_a),t(_a,da),t(da,Tl),t(Q,kl),t(Q,va),t(va,ga),t(ga,Al),u(e,wo,n),x(pt,e,n),u(e,yo,n),u(e,Z,n),t(Z,Pl),t(Z,wa),t(wa,ql),t(Z,Ll),t(Z,ya),t(ya,Il),t(Z,Ul),u(e,$o,n),x(ut,e,n),u(e,Eo,n),u(e,ue,n),t(ue,Ae),t(Ae,$a),x(mt,$a,null),t(ue,Sl),t(ue,Ea),t(Ea,Dl),u(e,bo,n),u(e,ir,n),t(ir,Cl),u(e,xo,n),u(e,X,n),t(X,Nl),t(X,ba),t(ba,Ol),t(X,jl),t(X,xa),t(xa,Fl),t(X,Rl),t(X,za),t(za,Ml),t(X,Hl),u(e,zo,n),x(ht,e,n),u(e,To,n),u(e,Pe,n),t(Pe,Gl),t(Pe,Ta),t(Ta,Jl),t(Pe,Bl),u(e,ko,n),x(ft,e,n),u(e,Ao,n),u(e,me,n),t(me,qe),t(qe,ka),x(ct,ka,null),t(me,Wl),t(me,Aa),t(Aa,Xl),u(e,Po,n),u(e,Le,n),t(Le,Yl),t(Le,_t),t(_t,Kl),t(Le,Vl),u(e,qo,n),x(dt,e,n),u(e,Lo,n),u(e,ee,n),t(ee,Ql),t(ee,Pa),t(Pa,Zl),t(ee,en),t(ee,qa),t(qa,tn),t(ee,rn),u(e,Io,n),u(e,Ie,n),t(Ie,an),t(Ie,La),t(La,on),t(Ie,sn),u(e,Uo,n),u(e,sr,n),t(sr,ln),u(e,So,n),x(vt,e,n),Do=!0},p(e,[n]){const gt={};n&2&&(gt.$$scope={dirty:n,ctx:e}),de.$set(gt);const Ia={};n&2&&(Ia.$$scope={dirty:n,ctx:e}),Ee.$set(Ia)},i(e){Do||(z($.$$.fragment,e),z(Me.$$.fragment,e),z(He.$$.fragment,e),z(Ge.$$.fragment,e),z(Je.$$.fragment,e),z(Be.$$.fragment,e),z(de.$$.fragment,e),z(We.$$.fragment,e),z(Ve.$$.fragment,e),z(Ze.$$.fragment,e),z(Ee.$$.fragment,e),z(et.$$.fragment,e),z(rt.$$.fragment,e),z(at.$$.fragment,e),z(ot.$$.fragment,e),z(it.$$.fragment,e),z(st.$$.fragment,e),z(lt.$$.fragment,e),z(nt.$$.fragment,e),z(pt.$$.fragment,e),z(ut.$$.fragment,e),z(mt.$$.fragment,e),z(ht.$$.fragment,e),z(ft.$$.fragment,e),z(ct.$$.fragment,e),z(dt.$$.fragment,e),z(vt.$$.fragment,e),Do=!0)},o(e){T($.$$.fragment,e),T(Me.$$.fragment,e),T(He.$$.fragment,e),T(Ge.$$.fragment,e),T(Je.$$.fragment,e),T(Be.$$.fragment,e),T(de.$$.fragment,e),T(We.$$.fragment,e),T(Ve.$$.fragment,e),T(Ze.$$.fragment,e),T(Ee.$$.fragment,e),T(et.$$.fragment,e),T(rt.$$.fragment,e),T(at.$$.fragment,e),T(ot.$$.fragment,e),T(it.$$.fragment,e),T(st.$$.fragment,e),T(lt.$$.fragment,e),T(nt.$$.fragment,e),T(pt.$$.fragment,e),T(ut.$$.fragment,e),T(mt.$$.fragment,e),T(ht.$$.fragment,e),T(ft.$$.fragment,e),T(ct.$$.fragment,e),T(dt.$$.fragment,e),T(vt.$$.fragment,e),Do=!1},d(e){r(m),e&&r(w),e&&r(c),k($),e&&r(F),e&&r(A),e&&r(De),e&&r(J),e&&r(Sa),e&&r($t),e&&r(Da),e&&r(Y),e&&r(Ca),e&&r(K),e&&r(Na),e&&r(ae),k(Me),e&&r(Oa),e&&r(fe),e&&r(ja),k(He,e),e&&r(Fa),e&&r(Et),e&&r(Ra),e&&r(ce),e&&r(Ma),e&&r(Kt),e&&r(Ha),k(Ge,e),e&&r(Ga),e&&r(Vt),e&&r(Ja),k(Je,e),e&&r(Ba),e&&r(oe),k(Be),e&&r(Wa),k(de,e),e&&r(Xa),e&&r(ie),k(We),e&&r(Ya),e&&r(ge),e&&r(Ka),e&&r(we),e&&r(Va),k(Ve,e),e&&r(Qa),e&&r(ye),e&&r(Za),e&&r(se),k(Ze),e&&r(eo),k(Ee,e),e&&r(to),e&&r(le),k(et),e&&r(ro),e&&r(xe),e&&r(ao),k(rt,e),e&&r(oo),e&&r(W),e&&r(io),k(at,e),e&&r(so),e&&r(Qt),e&&r(lo),k(ot,e),e&&r(no),e&&r(Zt),e&&r(po),k(it,e),e&&r(uo),e&&r(ne),k(st),e&&r(mo),e&&r(er),e&&r(ho),e&&r(V),e&&r(fo),e&&r(ar),e&&r(co),k(lt,e),e&&r(_o),e&&r(pe),k(nt),e&&r(vo),e&&r(or),e&&r(go),e&&r(Q),e&&r(wo),k(pt,e),e&&r(yo),e&&r(Z),e&&r($o),k(ut,e),e&&r(Eo),e&&r(ue),k(mt),e&&r(bo),e&&r(ir),e&&r(xo),e&&r(X),e&&r(zo),k(ht,e),e&&r(To),e&&r(Pe),e&&r(ko),k(ft,e),e&&r(Ao),e&&r(me),k(ct),e&&r(Po),e&&r(Le),e&&r(qo),k(dt,e),e&&r(Lo),e&&r(ee),e&&r(Io),e&&r(Ie),e&&r(Uo),e&&r(sr),e&&r(So),k(vt,e)}}}const Qu={local:"train-with-a-script",sections:[{local:"setup",title:"Setup"},{local:"run-a-script",title:"Run a script"},{local:"distributed-training-and-mixed-precision",title:"Distributed training and mixed precision"},{local:"run-a-script-on-a-tpu",title:"Run a script on a TPU"},{local:"run-a-script-with-accelerate",title:"Run a script with \u{1F917} Accelerate"},{local:"use-a-custom-dataset",title:"Use a custom dataset"},{local:"test-a-script",title:"Test a script"},{local:"resume-training-from-checkpoint",title:"Resume training from checkpoint"},{local:"share-your-model",title:"Share your model"}],title:"Train with a script"};function Zu(H){return Mu(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class om extends Ou{constructor(m){super();ju(this,m,Zu,Vu,Fu,{})}}export{om as default,Qu as metadata};
