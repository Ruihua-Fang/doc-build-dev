import{S as JMt,i as YMt,s as KMt,e as a,k as l,w as f,t as o,M as ZMt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as e4t}from"../../chunks/vendor-6b77c823.js";import{T as $Rr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function o4t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,pE,Nf,xe,co,ji,Gn,_E,On,Vn,uE,Di,Xn,bE,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),pE=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),_E=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),uE=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),bE=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var l9=s(de);Ce=r(l9,"NewModelConfig"),l9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var i9=s(Ii);qf=r(i9,"model_type"),i9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var d9=s(qi);Ni=r(d9,'"new-model"'),d9.forEach(t),pE=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),_E=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var c9=s(On);Vn=r(c9,"PreTrainedModel"),c9.forEach(t),uE=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),bE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var f9=s(Gi);jf=r(f9,"NewModelConfig"),f9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,pE),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,_E),e(xe,On),e(On,Vn),e(xe,uE),e(xe,Di),e(Di,Xn),e(xe,bE),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function r4t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function t4t(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function a4t(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,pE,Nf,xe,co,ji,Gn,_E,On,Vn,uE,Di,Xn,bE,Gi,jf,Da,fo,_e,l9,Oi,i9,d9,zo,Ga,c9,Df,f9,J$e,qSe,Vi,Gf,jJ,FE,Y$e,DJ,K$e,NSe,zn,Z$e,GJ,eIe,oIe,OJ,rIe,tIe,jSe,vE,DSe,m9,aIe,GSe,Of,OSe,Xi,Vf,VJ,TE,nIe,XJ,sIe,VSe,Qo,ME,lIe,EE,iIe,g9,dIe,cIe,fIe,CE,mIe,zJ,gIe,hIe,pIe,mo,wE,_Ie,QJ,uIe,bIe,zi,FIe,WJ,vIe,TIe,HJ,MIe,EIe,CIe,F,Xf,UJ,wIe,AIe,h9,yIe,LIe,xIe,zf,JJ,kIe,SIe,p9,RIe,BIe,PIe,Qf,YJ,$Ie,IIe,_9,qIe,NIe,jIe,Wf,KJ,DIe,GIe,u9,OIe,VIe,XIe,Hf,ZJ,zIe,QIe,b9,WIe,HIe,UIe,Uf,eY,JIe,YIe,F9,KIe,ZIe,eqe,Jf,oY,oqe,rqe,v9,tqe,aqe,nqe,Yf,rY,sqe,lqe,T9,iqe,dqe,cqe,Kf,tY,fqe,mqe,M9,gqe,hqe,pqe,Zf,aY,_qe,uqe,E9,bqe,Fqe,vqe,em,nY,Tqe,Mqe,C9,Eqe,Cqe,wqe,om,sY,Aqe,yqe,w9,Lqe,xqe,kqe,rm,lY,Sqe,Rqe,A9,Bqe,Pqe,$qe,tm,iY,Iqe,qqe,y9,Nqe,jqe,Dqe,am,dY,Gqe,Oqe,L9,Vqe,Xqe,zqe,nm,cY,Qqe,Wqe,x9,Hqe,Uqe,Jqe,sm,fY,Yqe,Kqe,k9,Zqe,eNe,oNe,lm,mY,rNe,tNe,S9,aNe,nNe,sNe,im,gY,lNe,iNe,R9,dNe,cNe,fNe,dm,hY,mNe,gNe,B9,hNe,pNe,_Ne,cm,pY,uNe,bNe,P9,FNe,vNe,TNe,fm,_Y,MNe,ENe,$9,CNe,wNe,ANe,mm,uY,yNe,LNe,I9,xNe,kNe,SNe,gm,bY,RNe,BNe,q9,PNe,$Ne,INe,hm,FY,qNe,NNe,N9,jNe,DNe,GNe,pm,vY,ONe,VNe,j9,XNe,zNe,QNe,_m,TY,WNe,HNe,D9,UNe,JNe,YNe,um,MY,KNe,ZNe,G9,eje,oje,rje,bm,EY,tje,aje,O9,nje,sje,lje,Fm,CY,ije,dje,V9,cje,fje,mje,vm,wY,gje,hje,X9,pje,_je,uje,Tm,AY,bje,Fje,z9,vje,Tje,Mje,Mm,yY,Eje,Cje,Q9,wje,Aje,yje,Em,LY,Lje,xje,W9,kje,Sje,Rje,Cm,xY,Bje,Pje,H9,$je,Ije,qje,wm,kY,Nje,jje,U9,Dje,Gje,Oje,Am,SY,Vje,Xje,J9,zje,Qje,Wje,ym,RY,Hje,Uje,Y9,Jje,Yje,Kje,Lm,BY,Zje,eDe,K9,oDe,rDe,tDe,xm,PY,aDe,nDe,Z9,sDe,lDe,iDe,km,$Y,dDe,cDe,ex,fDe,mDe,gDe,Sm,IY,hDe,pDe,ox,_De,uDe,bDe,Rm,qY,FDe,vDe,rx,TDe,MDe,EDe,Bm,NY,CDe,wDe,tx,ADe,yDe,LDe,Pm,jY,xDe,kDe,ax,SDe,RDe,BDe,$m,DY,PDe,$De,nx,IDe,qDe,NDe,Im,GY,jDe,DDe,sx,GDe,ODe,VDe,qm,OY,XDe,zDe,lx,QDe,WDe,HDe,Nm,VY,UDe,JDe,ix,YDe,KDe,ZDe,jm,XY,eGe,oGe,dx,rGe,tGe,aGe,Dm,zY,nGe,sGe,cx,lGe,iGe,dGe,Gm,QY,cGe,fGe,fx,mGe,gGe,hGe,Om,WY,pGe,_Ge,mx,uGe,bGe,FGe,Vm,HY,vGe,TGe,gx,MGe,EGe,CGe,Xm,UY,wGe,AGe,hx,yGe,LGe,xGe,zm,JY,kGe,SGe,px,RGe,BGe,PGe,Qm,YY,$Ge,IGe,_x,qGe,NGe,jGe,Wm,KY,DGe,GGe,ux,OGe,VGe,XGe,Hm,ZY,zGe,QGe,bx,WGe,HGe,UGe,Um,eK,JGe,YGe,Fx,KGe,ZGe,eOe,Jm,oK,oOe,rOe,vx,tOe,aOe,nOe,Ym,rK,sOe,lOe,Tx,iOe,dOe,cOe,Km,tK,fOe,mOe,Mx,gOe,hOe,pOe,Zm,aK,_Oe,uOe,Ex,bOe,FOe,vOe,eg,nK,TOe,MOe,Cx,EOe,COe,wOe,og,sK,AOe,yOe,wx,LOe,xOe,kOe,rg,lK,SOe,ROe,Ax,BOe,POe,$Oe,tg,iK,IOe,qOe,yx,NOe,jOe,DOe,ag,dK,GOe,OOe,Lx,VOe,XOe,zOe,ng,cK,QOe,WOe,xx,HOe,UOe,JOe,sg,fK,YOe,KOe,kx,ZOe,eVe,oVe,lg,mK,rVe,tVe,Sx,aVe,nVe,sVe,ig,gK,lVe,iVe,Rx,dVe,cVe,fVe,dg,hK,mVe,gVe,Bx,hVe,pVe,_Ve,cg,pK,uVe,bVe,Px,FVe,vVe,TVe,fg,_K,MVe,EVe,$x,CVe,wVe,AVe,mg,uK,yVe,LVe,Ix,xVe,kVe,SVe,gg,bK,RVe,BVe,qx,PVe,$Ve,IVe,hg,FK,qVe,NVe,Nx,jVe,DVe,GVe,pg,vK,OVe,VVe,jx,XVe,zVe,QVe,_g,TK,WVe,HVe,Dx,UVe,JVe,YVe,ug,MK,KVe,ZVe,Gx,eXe,oXe,rXe,bg,EK,tXe,aXe,Ox,nXe,sXe,lXe,Fg,CK,iXe,dXe,Vx,cXe,fXe,mXe,vg,wK,gXe,hXe,Xx,pXe,_Xe,uXe,Tg,AK,bXe,FXe,zx,vXe,TXe,MXe,Mg,yK,EXe,CXe,Qx,wXe,AXe,yXe,Eg,LK,LXe,xXe,Wx,kXe,SXe,RXe,Cg,xK,BXe,PXe,Hx,$Xe,IXe,qXe,wg,kK,NXe,jXe,Ux,DXe,GXe,OXe,Ag,SK,VXe,XXe,Jx,zXe,QXe,WXe,yg,RK,HXe,UXe,Yx,JXe,YXe,KXe,Lg,BK,ZXe,eze,Kx,oze,rze,tze,xg,PK,aze,nze,Zx,sze,lze,ize,kg,$K,dze,cze,ek,fze,mze,gze,Sg,IK,hze,pze,ok,_ze,uze,bze,Rg,qK,Fze,vze,rk,Tze,Mze,Eze,Bg,NK,Cze,wze,tk,Aze,yze,Lze,Pg,jK,xze,kze,ak,Sze,Rze,Bze,DK,Pze,$ze,AE,Ize,$g,yE,qze,GK,Nze,XSe,Qi,Ig,OK,LE,jze,VK,Dze,zSe,Wo,xE,Gze,kE,Oze,nk,Vze,Xze,zze,SE,Qze,XK,Wze,Hze,Uze,go,RE,Jze,zK,Yze,Kze,Oa,Zze,QK,eQe,oQe,WK,rQe,tQe,HK,aQe,nQe,sQe,C,Qn,UK,lQe,iQe,sk,dQe,cQe,lk,fQe,mQe,gQe,Wn,JK,hQe,pQe,ik,_Qe,uQe,dk,bQe,FQe,vQe,Hn,YK,TQe,MQe,ck,EQe,CQe,fk,wQe,AQe,yQe,qg,KK,LQe,xQe,mk,kQe,SQe,RQe,Un,ZK,BQe,PQe,gk,$Qe,IQe,hk,qQe,NQe,jQe,Ng,eZ,DQe,GQe,pk,OQe,VQe,XQe,jg,oZ,zQe,QQe,_k,WQe,HQe,UQe,Dg,rZ,JQe,YQe,uk,KQe,ZQe,eWe,Jn,tZ,oWe,rWe,bk,tWe,aWe,Fk,nWe,sWe,lWe,Yn,aZ,iWe,dWe,vk,cWe,fWe,Tk,mWe,gWe,hWe,Kn,nZ,pWe,_We,Mk,uWe,bWe,Ek,FWe,vWe,TWe,Gg,sZ,MWe,EWe,Ck,CWe,wWe,AWe,Og,lZ,yWe,LWe,wk,xWe,kWe,SWe,Zn,iZ,RWe,BWe,Ak,PWe,$We,yk,IWe,qWe,NWe,Vg,dZ,jWe,DWe,Lk,GWe,OWe,VWe,es,cZ,XWe,zWe,xk,QWe,WWe,kk,HWe,UWe,JWe,os,fZ,YWe,KWe,Sk,ZWe,eHe,Rk,oHe,rHe,tHe,rs,mZ,aHe,nHe,Bk,sHe,lHe,gZ,iHe,dHe,cHe,Xg,hZ,fHe,mHe,Pk,gHe,hHe,pHe,ts,pZ,_He,uHe,$k,bHe,FHe,Ik,vHe,THe,MHe,zg,_Z,EHe,CHe,qk,wHe,AHe,yHe,as,uZ,LHe,xHe,Nk,kHe,SHe,jk,RHe,BHe,PHe,ns,bZ,$He,IHe,Dk,qHe,NHe,Gk,jHe,DHe,GHe,ss,FZ,OHe,VHe,Ok,XHe,zHe,Vk,QHe,WHe,HHe,Qg,vZ,UHe,JHe,Xk,YHe,KHe,ZHe,ls,TZ,eUe,oUe,zk,rUe,tUe,Qk,aUe,nUe,sUe,Wg,MZ,lUe,iUe,Wk,dUe,cUe,fUe,is,EZ,mUe,gUe,Hk,hUe,pUe,Uk,_Ue,uUe,bUe,ds,CZ,FUe,vUe,Jk,TUe,MUe,Yk,EUe,CUe,wUe,cs,wZ,AUe,yUe,Kk,LUe,xUe,Zk,kUe,SUe,RUe,fs,AZ,BUe,PUe,eS,$Ue,IUe,oS,qUe,NUe,jUe,Hg,yZ,DUe,GUe,rS,OUe,VUe,XUe,ms,LZ,zUe,QUe,tS,WUe,HUe,aS,UUe,JUe,YUe,gs,xZ,KUe,ZUe,nS,eJe,oJe,sS,rJe,tJe,aJe,hs,kZ,nJe,sJe,lS,lJe,iJe,iS,dJe,cJe,fJe,ps,SZ,mJe,gJe,dS,hJe,pJe,cS,_Je,uJe,bJe,_s,RZ,FJe,vJe,fS,TJe,MJe,mS,EJe,CJe,wJe,us,BZ,AJe,yJe,gS,LJe,xJe,hS,kJe,SJe,RJe,Ug,PZ,BJe,PJe,pS,$Je,IJe,qJe,bs,$Z,NJe,jJe,_S,DJe,GJe,uS,OJe,VJe,XJe,Jg,IZ,zJe,QJe,bS,WJe,HJe,UJe,Yg,qZ,JJe,YJe,FS,KJe,ZJe,eYe,Fs,NZ,oYe,rYe,vS,tYe,aYe,TS,nYe,sYe,lYe,vs,jZ,iYe,dYe,MS,cYe,fYe,ES,mYe,gYe,hYe,Kg,DZ,pYe,_Ye,CS,uYe,bYe,FYe,Ts,GZ,vYe,TYe,wS,MYe,EYe,AS,CYe,wYe,AYe,Ms,OZ,yYe,LYe,yS,xYe,kYe,LS,SYe,RYe,BYe,Es,VZ,PYe,$Ye,xS,IYe,qYe,kS,NYe,jYe,DYe,Cs,XZ,GYe,OYe,SS,VYe,XYe,RS,zYe,QYe,WYe,ws,zZ,HYe,UYe,BS,JYe,YYe,PS,KYe,ZYe,eKe,Zg,QZ,oKe,rKe,$S,tKe,aKe,nKe,eh,WZ,sKe,lKe,IS,iKe,dKe,cKe,oh,HZ,fKe,mKe,qS,gKe,hKe,pKe,rh,UZ,_Ke,uKe,NS,bKe,FKe,vKe,As,JZ,TKe,MKe,jS,EKe,CKe,DS,wKe,AKe,yKe,th,YZ,LKe,xKe,GS,kKe,SKe,RKe,ys,KZ,BKe,PKe,OS,$Ke,IKe,VS,qKe,NKe,jKe,Ls,ZZ,DKe,GKe,XS,OKe,VKe,zS,XKe,zKe,QKe,xs,eee,WKe,HKe,QS,UKe,JKe,WS,YKe,KKe,ZKe,ks,oee,eZe,oZe,HS,rZe,tZe,US,aZe,nZe,sZe,Ss,ree,lZe,iZe,JS,dZe,cZe,YS,fZe,mZe,gZe,Rs,tee,hZe,pZe,KS,_Ze,uZe,ZS,bZe,FZe,vZe,ah,aee,TZe,MZe,eR,EZe,CZe,wZe,nh,nee,AZe,yZe,oR,LZe,xZe,kZe,Bs,see,SZe,RZe,rR,BZe,PZe,tR,$Ze,IZe,qZe,Ps,lee,NZe,jZe,aR,DZe,GZe,nR,OZe,VZe,XZe,$s,iee,zZe,QZe,sR,WZe,HZe,lR,UZe,JZe,YZe,sh,dee,KZe,ZZe,iR,eeo,oeo,reo,lh,cee,teo,aeo,dR,neo,seo,leo,ih,fee,ieo,deo,cR,ceo,feo,meo,dh,mee,geo,heo,fR,peo,_eo,ueo,Is,gee,beo,Feo,mR,veo,Teo,gR,Meo,Eeo,Ceo,ch,hee,weo,Aeo,hR,yeo,Leo,xeo,fh,pee,keo,Seo,pR,Reo,Beo,Peo,qs,_ee,$eo,Ieo,_R,qeo,Neo,uR,jeo,Deo,Geo,Ns,uee,Oeo,Veo,bR,Xeo,zeo,FR,Qeo,Weo,Heo,bee,Ueo,Jeo,BE,Yeo,mh,PE,Keo,Fee,Zeo,QSe,Wi,gh,vee,$E,eoo,Tee,ooo,WSe,Ho,IE,roo,qE,too,vR,aoo,noo,soo,NE,loo,Mee,ioo,doo,coo,$e,jE,foo,Eee,moo,goo,Va,hoo,Cee,poo,_oo,wee,uoo,boo,Aee,Foo,voo,Too,te,hh,yee,Moo,Eoo,TR,Coo,woo,Aoo,ph,Lee,yoo,Loo,MR,xoo,koo,Soo,_h,xee,Roo,Boo,ER,Poo,$oo,Ioo,uh,kee,qoo,Noo,CR,joo,Doo,Goo,bh,See,Ooo,Voo,wR,Xoo,zoo,Qoo,Fh,Ree,Woo,Hoo,AR,Uoo,Joo,Yoo,vh,Bee,Koo,Zoo,yR,ero,oro,rro,Th,Pee,tro,aro,LR,nro,sro,lro,Mh,$ee,iro,dro,xR,cro,fro,mro,Eh,Iee,gro,hro,kR,pro,_ro,uro,Ch,qee,bro,Fro,SR,vro,Tro,Mro,wh,Nee,Ero,Cro,RR,wro,Aro,yro,Ah,jee,Lro,xro,BR,kro,Sro,Rro,yh,Dee,Bro,Pro,PR,$ro,Iro,qro,Lh,Gee,Nro,jro,$R,Dro,Gro,Oro,xh,Oee,Vro,Xro,IR,zro,Qro,Wro,kh,Vee,Hro,Uro,qR,Jro,Yro,Kro,Sh,Xee,Zro,eto,NR,oto,rto,tto,Rh,ato,zee,nto,sto,DE,lto,Bh,GE,ito,Qee,dto,HSe,Hi,Ph,Wee,OE,cto,Hee,fto,USe,Uo,VE,mto,XE,gto,jR,hto,pto,_to,zE,uto,Uee,bto,Fto,vto,Ie,QE,Tto,Jee,Mto,Eto,Ui,Cto,Yee,wto,Ato,Kee,yto,Lto,xto,ke,$h,Zee,kto,Sto,DR,Rto,Bto,Pto,Ih,eoe,$to,Ito,GR,qto,Nto,jto,qh,ooe,Dto,Gto,OR,Oto,Vto,Xto,Nh,roe,zto,Qto,VR,Wto,Hto,Uto,jh,toe,Jto,Yto,XR,Kto,Zto,eao,Dh,aoe,oao,rao,zR,tao,aao,nao,Gh,noe,sao,lao,QR,iao,dao,cao,Oh,soe,fao,mao,WR,gao,hao,pao,Vh,_ao,loe,uao,bao,WE,Fao,Xh,HE,vao,ioe,Tao,JSe,Ji,zh,doe,UE,Mao,coe,Eao,YSe,Jo,JE,Cao,Yi,wao,HR,Aao,yao,UR,Lao,xao,kao,YE,Sao,foe,Rao,Bao,Pao,Xr,KE,$ao,moe,Iao,qao,Ki,Nao,goe,jao,Dao,JR,Gao,Oao,Vao,hoe,Xao,zao,ZE,Qao,qe,eC,Wao,poe,Hao,Uao,Xa,Jao,_oe,Yao,Kao,uoe,Zao,eno,boe,ono,rno,tno,T,Qh,Foe,ano,nno,YR,sno,lno,ino,Wh,voe,dno,cno,KR,fno,mno,gno,Hh,Toe,hno,pno,ZR,_no,uno,bno,Uh,Moe,Fno,vno,eB,Tno,Mno,Eno,Jh,Eoe,Cno,wno,oB,Ano,yno,Lno,Yh,Coe,xno,kno,rB,Sno,Rno,Bno,Kh,woe,Pno,$no,tB,Ino,qno,Nno,Zh,Aoe,jno,Dno,aB,Gno,Ono,Vno,ep,yoe,Xno,zno,nB,Qno,Wno,Hno,op,Loe,Uno,Jno,sB,Yno,Kno,Zno,rp,xoe,eso,oso,lB,rso,tso,aso,tp,koe,nso,sso,iB,lso,iso,dso,ap,Soe,cso,fso,dB,mso,gso,hso,np,Roe,pso,_so,cB,uso,bso,Fso,sp,Boe,vso,Tso,fB,Mso,Eso,Cso,lp,Poe,wso,Aso,mB,yso,Lso,xso,ip,$oe,kso,Sso,gB,Rso,Bso,Pso,dp,Ioe,$so,Iso,hB,qso,Nso,jso,cp,qoe,Dso,Gso,pB,Oso,Vso,Xso,fp,Noe,zso,Qso,_B,Wso,Hso,Uso,mp,joe,Jso,Yso,uB,Kso,Zso,elo,gp,Doe,olo,rlo,bB,tlo,alo,nlo,hp,Goe,slo,llo,FB,ilo,dlo,clo,pp,Ooe,flo,mlo,vB,glo,hlo,plo,_p,Voe,_lo,ulo,TB,blo,Flo,vlo,up,Xoe,Tlo,Mlo,MB,Elo,Clo,wlo,bp,zoe,Alo,ylo,EB,Llo,xlo,klo,Fp,Qoe,Slo,Rlo,CB,Blo,Plo,$lo,vp,Woe,Ilo,qlo,wB,Nlo,jlo,Dlo,js,Hoe,Glo,Olo,AB,Vlo,Xlo,yB,zlo,Qlo,Wlo,Tp,Uoe,Hlo,Ulo,LB,Jlo,Ylo,Klo,Mp,Joe,Zlo,eio,xB,oio,rio,tio,Ep,Yoe,aio,nio,kB,sio,lio,iio,Cp,Koe,dio,cio,SB,fio,mio,gio,wp,Zoe,hio,pio,RB,_io,uio,bio,Ap,ere,Fio,vio,BB,Tio,Mio,Eio,yp,ore,Cio,wio,PB,Aio,yio,Lio,Lp,rre,xio,kio,$B,Sio,Rio,Bio,xp,tre,Pio,$io,IB,Iio,qio,Nio,kp,are,jio,Dio,qB,Gio,Oio,Vio,Sp,nre,Xio,zio,NB,Qio,Wio,Hio,Rp,sre,Uio,Jio,jB,Yio,Kio,Zio,Bp,lre,edo,odo,DB,rdo,tdo,ado,Pp,ire,ndo,sdo,GB,ldo,ido,ddo,$p,dre,cdo,fdo,OB,mdo,gdo,hdo,Ip,cre,pdo,_do,VB,udo,bdo,Fdo,qp,fre,vdo,Tdo,XB,Mdo,Edo,Cdo,Np,mre,wdo,Ado,zB,ydo,Ldo,xdo,jp,gre,kdo,Sdo,QB,Rdo,Bdo,Pdo,Dp,hre,$do,Ido,WB,qdo,Ndo,jdo,Gp,pre,Ddo,Gdo,HB,Odo,Vdo,Xdo,Op,_re,zdo,Qdo,UB,Wdo,Hdo,Udo,Vp,ure,Jdo,Ydo,JB,Kdo,Zdo,eco,Xp,bre,oco,rco,YB,tco,aco,nco,zp,Fre,sco,lco,KB,ico,dco,cco,Qp,vre,fco,mco,ZB,gco,hco,pco,Wp,Tre,_co,uco,eP,bco,Fco,vco,Hp,Mre,Tco,Mco,oP,Eco,Cco,wco,Up,Ere,Aco,yco,rP,Lco,xco,kco,Jp,Cre,Sco,Rco,tP,Bco,Pco,$co,Yp,wre,Ico,qco,aP,Nco,jco,Dco,Kp,Are,Gco,Oco,nP,Vco,Xco,zco,Zp,yre,Qco,Wco,sP,Hco,Uco,Jco,e_,Lre,Yco,Kco,lP,Zco,efo,ofo,o_,xre,rfo,tfo,iP,afo,nfo,sfo,r_,kre,lfo,ifo,dP,dfo,cfo,ffo,t_,Sre,mfo,gfo,cP,hfo,pfo,_fo,a_,Rre,ufo,bfo,fP,Ffo,vfo,Tfo,n_,Bre,Mfo,Efo,mP,Cfo,wfo,Afo,s_,Pre,yfo,Lfo,gP,xfo,kfo,Sfo,l_,$re,Rfo,Bfo,hP,Pfo,$fo,Ifo,i_,Ire,qfo,Nfo,pP,jfo,Dfo,Gfo,d_,qre,Ofo,Vfo,_P,Xfo,zfo,Qfo,c_,Nre,Wfo,Hfo,uP,Ufo,Jfo,Yfo,f_,jre,Kfo,Zfo,bP,emo,omo,rmo,m_,Dre,tmo,amo,FP,nmo,smo,lmo,g_,Gre,imo,dmo,vP,cmo,fmo,mmo,h_,Ore,gmo,hmo,TP,pmo,_mo,umo,p_,Vre,bmo,Fmo,MP,vmo,Tmo,Mmo,__,Xre,Emo,Cmo,EP,wmo,Amo,ymo,u_,zre,Lmo,xmo,CP,kmo,Smo,Rmo,b_,Qre,Bmo,Pmo,wP,$mo,Imo,qmo,F_,Wre,Nmo,jmo,AP,Dmo,Gmo,Omo,v_,Hre,Vmo,Xmo,yP,zmo,Qmo,Wmo,T_,Ure,Hmo,Umo,LP,Jmo,Ymo,Kmo,M_,Jre,Zmo,ego,xP,ogo,rgo,tgo,E_,Yre,ago,ngo,kP,sgo,lgo,igo,C_,Kre,dgo,cgo,SP,fgo,mgo,ggo,w_,Zre,hgo,pgo,RP,_go,ugo,bgo,A_,ete,Fgo,vgo,BP,Tgo,Mgo,Ego,y_,ote,Cgo,wgo,PP,Ago,ygo,Lgo,L_,rte,xgo,kgo,$P,Sgo,Rgo,Bgo,x_,Pgo,tte,$go,Igo,ate,qgo,Ngo,nte,jgo,Dgo,oC,KSe,Zi,k_,ste,rC,Ggo,lte,Ogo,ZSe,Yo,tC,Vgo,ed,Xgo,IP,zgo,Qgo,qP,Wgo,Hgo,Ugo,aC,Jgo,ite,Ygo,Kgo,Zgo,zr,nC,eho,dte,oho,rho,od,tho,cte,aho,nho,NP,sho,lho,iho,fte,dho,cho,sC,fho,Ne,lC,mho,mte,gho,hho,za,pho,gte,_ho,uho,hte,bho,Fho,pte,vho,Tho,Mho,S,S_,_te,Eho,Cho,jP,who,Aho,yho,R_,ute,Lho,xho,DP,kho,Sho,Rho,B_,bte,Bho,Pho,GP,$ho,Iho,qho,P_,Fte,Nho,jho,OP,Dho,Gho,Oho,$_,vte,Vho,Xho,VP,zho,Qho,Who,I_,Tte,Hho,Uho,XP,Jho,Yho,Kho,q_,Mte,Zho,epo,zP,opo,rpo,tpo,N_,Ete,apo,npo,QP,spo,lpo,ipo,j_,Cte,dpo,cpo,WP,fpo,mpo,gpo,D_,wte,hpo,ppo,HP,_po,upo,bpo,G_,Ate,Fpo,vpo,UP,Tpo,Mpo,Epo,O_,yte,Cpo,wpo,JP,Apo,ypo,Lpo,V_,Lte,xpo,kpo,YP,Spo,Rpo,Bpo,X_,xte,Ppo,$po,KP,Ipo,qpo,Npo,z_,kte,jpo,Dpo,ZP,Gpo,Opo,Vpo,Q_,Ste,Xpo,zpo,e$,Qpo,Wpo,Hpo,W_,Rte,Upo,Jpo,o$,Ypo,Kpo,Zpo,H_,Bte,e_o,o_o,r$,r_o,t_o,a_o,U_,Pte,n_o,s_o,t$,l_o,i_o,d_o,J_,$te,c_o,f_o,a$,m_o,g_o,h_o,Y_,Ite,p_o,__o,n$,u_o,b_o,F_o,K_,qte,v_o,T_o,s$,M_o,E_o,C_o,Z_,Nte,w_o,A_o,l$,y_o,L_o,x_o,eu,jte,k_o,S_o,i$,R_o,B_o,P_o,ou,Dte,$_o,I_o,d$,q_o,N_o,j_o,ru,Gte,D_o,G_o,c$,O_o,V_o,X_o,tu,Ote,z_o,Q_o,f$,W_o,H_o,U_o,au,Vte,J_o,Y_o,m$,K_o,Z_o,euo,nu,Xte,ouo,ruo,g$,tuo,auo,nuo,su,zte,suo,luo,h$,iuo,duo,cuo,lu,Qte,fuo,muo,p$,guo,huo,puo,iu,Wte,_uo,uuo,_$,buo,Fuo,vuo,du,Hte,Tuo,Muo,u$,Euo,Cuo,wuo,cu,Ute,Auo,yuo,b$,Luo,xuo,kuo,fu,Jte,Suo,Ruo,F$,Buo,Puo,$uo,mu,Yte,Iuo,quo,v$,Nuo,juo,Duo,gu,Kte,Guo,Ouo,T$,Vuo,Xuo,zuo,hu,Zte,Quo,Wuo,M$,Huo,Uuo,Juo,pu,eae,Yuo,Kuo,E$,Zuo,e1o,o1o,_u,r1o,oae,t1o,a1o,rae,n1o,s1o,tae,l1o,i1o,iC,eRe,rd,uu,aae,dC,d1o,nae,c1o,oRe,Ko,cC,f1o,td,m1o,C$,g1o,h1o,w$,p1o,_1o,u1o,fC,b1o,sae,F1o,v1o,T1o,Qr,mC,M1o,lae,E1o,C1o,ad,w1o,iae,A1o,y1o,A$,L1o,x1o,k1o,dae,S1o,R1o,gC,B1o,je,hC,P1o,cae,$1o,I1o,Qa,q1o,fae,N1o,j1o,mae,D1o,G1o,gae,O1o,V1o,X1o,$,bu,hae,z1o,Q1o,y$,W1o,H1o,U1o,Fu,pae,J1o,Y1o,L$,K1o,Z1o,ebo,vu,_ae,obo,rbo,x$,tbo,abo,nbo,Tu,uae,sbo,lbo,k$,ibo,dbo,cbo,Mu,bae,fbo,mbo,S$,gbo,hbo,pbo,Eu,Fae,_bo,ubo,R$,bbo,Fbo,vbo,Cu,vae,Tbo,Mbo,B$,Ebo,Cbo,wbo,wu,Tae,Abo,ybo,P$,Lbo,xbo,kbo,Au,Mae,Sbo,Rbo,$$,Bbo,Pbo,$bo,yu,Eae,Ibo,qbo,I$,Nbo,jbo,Dbo,Lu,Cae,Gbo,Obo,q$,Vbo,Xbo,zbo,xu,wae,Qbo,Wbo,N$,Hbo,Ubo,Jbo,ku,Aae,Ybo,Kbo,j$,Zbo,e5o,o5o,Su,yae,r5o,t5o,D$,a5o,n5o,s5o,Ru,Lae,l5o,i5o,G$,d5o,c5o,f5o,Bu,xae,m5o,g5o,O$,h5o,p5o,_5o,Pu,kae,u5o,b5o,V$,F5o,v5o,T5o,$u,Sae,M5o,E5o,X$,C5o,w5o,A5o,Iu,Rae,y5o,L5o,z$,x5o,k5o,S5o,qu,Bae,R5o,B5o,Q$,P5o,$5o,I5o,Nu,Pae,q5o,N5o,W$,j5o,D5o,G5o,ju,$ae,O5o,V5o,H$,X5o,z5o,Q5o,Du,Iae,W5o,H5o,U$,U5o,J5o,Y5o,Gu,qae,K5o,Z5o,J$,e3o,o3o,r3o,Ou,Nae,t3o,a3o,Y$,n3o,s3o,l3o,Vu,jae,i3o,d3o,K$,c3o,f3o,m3o,Xu,Dae,g3o,h3o,Z$,p3o,_3o,u3o,zu,Gae,b3o,F3o,eI,v3o,T3o,M3o,Qu,Oae,E3o,C3o,oI,w3o,A3o,y3o,Wu,Vae,L3o,x3o,rI,k3o,S3o,R3o,Hu,Xae,B3o,P3o,tI,$3o,I3o,q3o,Uu,zae,N3o,j3o,aI,D3o,G3o,O3o,Ju,Qae,V3o,X3o,nI,z3o,Q3o,W3o,Yu,Wae,H3o,U3o,sI,J3o,Y3o,K3o,Ku,Hae,Z3o,e2o,lI,o2o,r2o,t2o,Zu,a2o,Uae,n2o,s2o,Jae,l2o,i2o,Yae,d2o,c2o,pC,rRe,nd,e1,Kae,_C,f2o,Zae,m2o,tRe,Zo,uC,g2o,sd,h2o,iI,p2o,_2o,dI,u2o,b2o,F2o,bC,v2o,ene,T2o,M2o,E2o,Wr,FC,C2o,one,w2o,A2o,ld,y2o,rne,L2o,x2o,cI,k2o,S2o,R2o,tne,B2o,P2o,vC,$2o,De,TC,I2o,ane,q2o,N2o,Wa,j2o,nne,D2o,G2o,sne,O2o,V2o,lne,X2o,z2o,Q2o,I,o1,ine,W2o,H2o,fI,U2o,J2o,Y2o,r1,dne,K2o,Z2o,mI,eFo,oFo,rFo,t1,cne,tFo,aFo,gI,nFo,sFo,lFo,a1,fne,iFo,dFo,hI,cFo,fFo,mFo,n1,mne,gFo,hFo,pI,pFo,_Fo,uFo,s1,gne,bFo,FFo,_I,vFo,TFo,MFo,l1,hne,EFo,CFo,uI,wFo,AFo,yFo,i1,pne,LFo,xFo,bI,kFo,SFo,RFo,d1,_ne,BFo,PFo,FI,$Fo,IFo,qFo,c1,une,NFo,jFo,vI,DFo,GFo,OFo,f1,bne,VFo,XFo,TI,zFo,QFo,WFo,m1,Fne,HFo,UFo,MI,JFo,YFo,KFo,g1,vne,ZFo,evo,EI,ovo,rvo,tvo,h1,Tne,avo,nvo,CI,svo,lvo,ivo,p1,Mne,dvo,cvo,wI,fvo,mvo,gvo,_1,Ene,hvo,pvo,AI,_vo,uvo,bvo,u1,Cne,Fvo,vvo,yI,Tvo,Mvo,Evo,b1,wne,Cvo,wvo,LI,Avo,yvo,Lvo,F1,Ane,xvo,kvo,xI,Svo,Rvo,Bvo,v1,yne,Pvo,$vo,kI,Ivo,qvo,Nvo,T1,Lne,jvo,Dvo,SI,Gvo,Ovo,Vvo,M1,xne,Xvo,zvo,RI,Qvo,Wvo,Hvo,E1,kne,Uvo,Jvo,BI,Yvo,Kvo,Zvo,C1,Sne,e6o,o6o,PI,r6o,t6o,a6o,w1,Rne,n6o,s6o,$I,l6o,i6o,d6o,A1,Bne,c6o,f6o,II,m6o,g6o,h6o,y1,Pne,p6o,_6o,qI,u6o,b6o,F6o,L1,$ne,v6o,T6o,NI,M6o,E6o,C6o,x1,Ine,w6o,A6o,jI,y6o,L6o,x6o,k1,qne,k6o,S6o,DI,R6o,B6o,P6o,S1,Nne,$6o,I6o,jne,q6o,N6o,j6o,R1,Dne,D6o,G6o,GI,O6o,V6o,X6o,B1,Gne,z6o,Q6o,OI,W6o,H6o,U6o,P1,One,J6o,Y6o,VI,K6o,Z6o,eTo,$1,Vne,oTo,rTo,XI,tTo,aTo,nTo,I1,sTo,Xne,lTo,iTo,zne,dTo,cTo,Qne,fTo,mTo,MC,aRe,id,q1,Wne,EC,gTo,Hne,hTo,nRe,er,CC,pTo,dd,_To,zI,uTo,bTo,QI,FTo,vTo,TTo,wC,MTo,Une,ETo,CTo,wTo,Hr,AC,ATo,Jne,yTo,LTo,cd,xTo,Yne,kTo,STo,WI,RTo,BTo,PTo,Kne,$To,ITo,yC,qTo,Ge,LC,NTo,Zne,jTo,DTo,Ha,GTo,ese,OTo,VTo,ose,XTo,zTo,rse,QTo,WTo,HTo,se,N1,tse,UTo,JTo,HI,YTo,KTo,ZTo,j1,ase,e7o,o7o,UI,r7o,t7o,a7o,D1,nse,n7o,s7o,JI,l7o,i7o,d7o,G1,sse,c7o,f7o,YI,m7o,g7o,h7o,O1,lse,p7o,_7o,KI,u7o,b7o,F7o,V1,ise,v7o,T7o,ZI,M7o,E7o,C7o,X1,dse,w7o,A7o,eq,y7o,L7o,x7o,z1,cse,k7o,S7o,oq,R7o,B7o,P7o,Q1,fse,$7o,I7o,rq,q7o,N7o,j7o,W1,mse,D7o,G7o,tq,O7o,V7o,X7o,H1,gse,z7o,Q7o,aq,W7o,H7o,U7o,U1,hse,J7o,Y7o,nq,K7o,Z7o,eMo,J1,pse,oMo,rMo,sq,tMo,aMo,nMo,Y1,_se,sMo,lMo,lq,iMo,dMo,cMo,K1,use,fMo,mMo,iq,gMo,hMo,pMo,Z1,bse,_Mo,uMo,dq,bMo,FMo,vMo,eb,TMo,Fse,MMo,EMo,vse,CMo,wMo,Tse,AMo,yMo,xC,sRe,fd,ob,Mse,kC,LMo,Ese,xMo,lRe,or,SC,kMo,md,SMo,cq,RMo,BMo,fq,PMo,$Mo,IMo,RC,qMo,Cse,NMo,jMo,DMo,Ur,BC,GMo,wse,OMo,VMo,gd,XMo,Ase,zMo,QMo,mq,WMo,HMo,UMo,yse,JMo,YMo,PC,KMo,Oe,$C,ZMo,Lse,e4o,o4o,Ua,r4o,xse,t4o,a4o,kse,n4o,s4o,Sse,l4o,i4o,d4o,y,rb,Rse,c4o,f4o,gq,m4o,g4o,h4o,tb,Bse,p4o,_4o,hq,u4o,b4o,F4o,ab,Pse,v4o,T4o,pq,M4o,E4o,C4o,nb,$se,w4o,A4o,_q,y4o,L4o,x4o,sb,Ise,k4o,S4o,uq,R4o,B4o,P4o,lb,qse,$4o,I4o,bq,q4o,N4o,j4o,ib,Nse,D4o,G4o,Fq,O4o,V4o,X4o,db,jse,z4o,Q4o,vq,W4o,H4o,U4o,cb,Dse,J4o,Y4o,Tq,K4o,Z4o,eEo,fb,Gse,oEo,rEo,Mq,tEo,aEo,nEo,mb,Ose,sEo,lEo,Eq,iEo,dEo,cEo,gb,Vse,fEo,mEo,Cq,gEo,hEo,pEo,hb,Xse,_Eo,uEo,wq,bEo,FEo,vEo,pb,zse,TEo,MEo,Aq,EEo,CEo,wEo,_b,Qse,AEo,yEo,yq,LEo,xEo,kEo,ub,Wse,SEo,REo,Lq,BEo,PEo,$Eo,bb,Hse,IEo,qEo,xq,NEo,jEo,DEo,Fb,Use,GEo,OEo,kq,VEo,XEo,zEo,vb,Jse,QEo,WEo,Sq,HEo,UEo,JEo,Tb,Yse,YEo,KEo,Rq,ZEo,eCo,oCo,Mb,Kse,rCo,tCo,Bq,aCo,nCo,sCo,Eb,Zse,lCo,iCo,Pq,dCo,cCo,fCo,Cb,ele,mCo,gCo,$q,hCo,pCo,_Co,wb,ole,uCo,bCo,Iq,FCo,vCo,TCo,Ab,rle,MCo,ECo,qq,CCo,wCo,ACo,yb,tle,yCo,LCo,Nq,xCo,kCo,SCo,Lb,ale,RCo,BCo,jq,PCo,$Co,ICo,xb,nle,qCo,NCo,Dq,jCo,DCo,GCo,kb,sle,OCo,VCo,Gq,XCo,zCo,QCo,Sb,lle,WCo,HCo,Oq,UCo,JCo,YCo,Rb,ile,KCo,ZCo,Vq,ewo,owo,rwo,Bb,dle,two,awo,Xq,nwo,swo,lwo,Pb,cle,iwo,dwo,zq,cwo,fwo,mwo,$b,fle,gwo,hwo,Qq,pwo,_wo,uwo,Ib,mle,bwo,Fwo,Wq,vwo,Two,Mwo,qb,gle,Ewo,Cwo,Hq,wwo,Awo,ywo,Nb,hle,Lwo,xwo,Uq,kwo,Swo,Rwo,jb,ple,Bwo,Pwo,Jq,$wo,Iwo,qwo,Db,_le,Nwo,jwo,Yq,Dwo,Gwo,Owo,Gb,ule,Vwo,Xwo,Kq,zwo,Qwo,Wwo,Ob,ble,Hwo,Uwo,Zq,Jwo,Ywo,Kwo,Vb,Fle,Zwo,eAo,eN,oAo,rAo,tAo,Xb,vle,aAo,nAo,oN,sAo,lAo,iAo,zb,Tle,dAo,cAo,rN,fAo,mAo,gAo,Qb,Mle,hAo,pAo,tN,_Ao,uAo,bAo,Wb,Ele,FAo,vAo,aN,TAo,MAo,EAo,Hb,CAo,Cle,wAo,AAo,wle,yAo,LAo,Ale,xAo,kAo,IC,iRe,hd,Ub,yle,qC,SAo,Lle,RAo,dRe,rr,NC,BAo,pd,PAo,nN,$Ao,IAo,sN,qAo,NAo,jAo,jC,DAo,xle,GAo,OAo,VAo,Jr,DC,XAo,kle,zAo,QAo,_d,WAo,Sle,HAo,UAo,lN,JAo,YAo,KAo,Rle,ZAo,e0o,GC,o0o,Ve,OC,r0o,Ble,t0o,a0o,Ja,n0o,Ple,s0o,l0o,$le,i0o,d0o,Ile,c0o,f0o,m0o,G,Jb,qle,g0o,h0o,iN,p0o,_0o,u0o,Yb,Nle,b0o,F0o,dN,v0o,T0o,M0o,Kb,jle,E0o,C0o,cN,w0o,A0o,y0o,Zb,Dle,L0o,x0o,fN,k0o,S0o,R0o,e5,Gle,B0o,P0o,mN,$0o,I0o,q0o,o5,Ole,N0o,j0o,gN,D0o,G0o,O0o,r5,Vle,V0o,X0o,hN,z0o,Q0o,W0o,t5,Xle,H0o,U0o,pN,J0o,Y0o,K0o,a5,zle,Z0o,eyo,_N,oyo,ryo,tyo,n5,Qle,ayo,nyo,uN,syo,lyo,iyo,s5,Wle,dyo,cyo,bN,fyo,myo,gyo,l5,Hle,hyo,pyo,FN,_yo,uyo,byo,i5,Ule,Fyo,vyo,vN,Tyo,Myo,Eyo,d5,Jle,Cyo,wyo,TN,Ayo,yyo,Lyo,c5,Yle,xyo,kyo,MN,Syo,Ryo,Byo,f5,Kle,Pyo,$yo,EN,Iyo,qyo,Nyo,m5,Zle,jyo,Dyo,CN,Gyo,Oyo,Vyo,g5,eie,Xyo,zyo,wN,Qyo,Wyo,Hyo,h5,oie,Uyo,Jyo,AN,Yyo,Kyo,Zyo,p5,rie,eLo,oLo,yN,rLo,tLo,aLo,_5,tie,nLo,sLo,LN,lLo,iLo,dLo,u5,aie,cLo,fLo,xN,mLo,gLo,hLo,b5,nie,pLo,_Lo,kN,uLo,bLo,FLo,F5,sie,vLo,TLo,SN,MLo,ELo,CLo,v5,lie,wLo,ALo,RN,yLo,LLo,xLo,T5,iie,kLo,SLo,BN,RLo,BLo,PLo,M5,die,$Lo,ILo,PN,qLo,NLo,jLo,E5,cie,DLo,GLo,$N,OLo,VLo,XLo,C5,zLo,fie,QLo,WLo,mie,HLo,ULo,gie,JLo,YLo,VC,cRe,ud,w5,hie,XC,KLo,pie,ZLo,fRe,tr,zC,e8o,bd,o8o,IN,r8o,t8o,qN,a8o,n8o,s8o,QC,l8o,_ie,i8o,d8o,c8o,Yr,WC,f8o,uie,m8o,g8o,Fd,h8o,bie,p8o,_8o,NN,u8o,b8o,F8o,Fie,v8o,T8o,HC,M8o,Xe,UC,E8o,vie,C8o,w8o,Ya,A8o,Tie,y8o,L8o,Mie,x8o,k8o,Eie,S8o,R8o,B8o,da,A5,Cie,P8o,$8o,jN,I8o,q8o,N8o,y5,wie,j8o,D8o,DN,G8o,O8o,V8o,L5,Aie,X8o,z8o,GN,Q8o,W8o,H8o,x5,yie,U8o,J8o,ON,Y8o,K8o,Z8o,k5,Lie,e9o,o9o,VN,r9o,t9o,a9o,S5,n9o,xie,s9o,l9o,kie,i9o,d9o,Sie,c9o,f9o,JC,mRe,vd,R5,Rie,YC,m9o,Bie,g9o,gRe,ar,KC,h9o,Td,p9o,XN,_9o,u9o,zN,b9o,F9o,v9o,ZC,T9o,Pie,M9o,E9o,C9o,Kr,ew,w9o,$ie,A9o,y9o,Md,L9o,Iie,x9o,k9o,QN,S9o,R9o,B9o,qie,P9o,$9o,ow,I9o,ze,rw,q9o,Nie,N9o,j9o,Ka,D9o,jie,G9o,O9o,Die,V9o,X9o,Gie,z9o,Q9o,W9o,j,B5,Oie,H9o,U9o,WN,J9o,Y9o,K9o,P5,Vie,Z9o,exo,HN,oxo,rxo,txo,$5,Xie,axo,nxo,UN,sxo,lxo,ixo,I5,zie,dxo,cxo,JN,fxo,mxo,gxo,q5,Qie,hxo,pxo,YN,_xo,uxo,bxo,N5,Wie,Fxo,vxo,KN,Txo,Mxo,Exo,j5,Hie,Cxo,wxo,ZN,Axo,yxo,Lxo,D5,Uie,xxo,kxo,ej,Sxo,Rxo,Bxo,G5,Jie,Pxo,$xo,oj,Ixo,qxo,Nxo,O5,Yie,jxo,Dxo,rj,Gxo,Oxo,Vxo,V5,Kie,Xxo,zxo,tj,Qxo,Wxo,Hxo,X5,Zie,Uxo,Jxo,aj,Yxo,Kxo,Zxo,z5,ede,eko,oko,nj,rko,tko,ako,Q5,ode,nko,sko,sj,lko,iko,dko,W5,rde,cko,fko,lj,mko,gko,hko,H5,tde,pko,_ko,ij,uko,bko,Fko,U5,ade,vko,Tko,dj,Mko,Eko,Cko,J5,nde,wko,Ako,cj,yko,Lko,xko,Y5,sde,kko,Sko,fj,Rko,Bko,Pko,K5,lde,$ko,Iko,mj,qko,Nko,jko,Z5,ide,Dko,Gko,gj,Oko,Vko,Xko,e3,dde,zko,Qko,hj,Wko,Hko,Uko,o3,cde,Jko,Yko,pj,Kko,Zko,eSo,r3,fde,oSo,rSo,_j,tSo,aSo,nSo,t3,mde,sSo,lSo,uj,iSo,dSo,cSo,a3,gde,fSo,mSo,bj,gSo,hSo,pSo,n3,hde,_So,uSo,Fj,bSo,FSo,vSo,s3,pde,TSo,MSo,vj,ESo,CSo,wSo,l3,_de,ASo,ySo,Tj,LSo,xSo,kSo,i3,ude,SSo,RSo,Mj,BSo,PSo,$So,d3,bde,ISo,qSo,Ej,NSo,jSo,DSo,c3,Fde,GSo,OSo,Cj,VSo,XSo,zSo,f3,vde,QSo,WSo,wj,HSo,USo,JSo,m3,YSo,Tde,KSo,ZSo,Mde,eRo,oRo,Ede,rRo,tRo,tw,hRe,Ed,g3,Cde,aw,aRo,wde,nRo,pRe,nr,nw,sRo,Cd,lRo,Aj,iRo,dRo,yj,cRo,fRo,mRo,sw,gRo,Ade,hRo,pRo,_Ro,Zr,lw,uRo,yde,bRo,FRo,wd,vRo,Lde,TRo,MRo,Lj,ERo,CRo,wRo,xde,ARo,yRo,iw,LRo,Qe,dw,xRo,kde,kRo,SRo,Za,RRo,Sde,BRo,PRo,Rde,$Ro,IRo,Bde,qRo,NRo,jRo,R,h3,Pde,DRo,GRo,xj,ORo,VRo,XRo,p3,$de,zRo,QRo,kj,WRo,HRo,URo,_3,Ide,JRo,YRo,Sj,KRo,ZRo,eBo,u3,qde,oBo,rBo,Rj,tBo,aBo,nBo,b3,Nde,sBo,lBo,Bj,iBo,dBo,cBo,F3,jde,fBo,mBo,Pj,gBo,hBo,pBo,v3,Dde,_Bo,uBo,$j,bBo,FBo,vBo,T3,Gde,TBo,MBo,Ij,EBo,CBo,wBo,M3,Ode,ABo,yBo,qj,LBo,xBo,kBo,E3,Vde,SBo,RBo,Nj,BBo,PBo,$Bo,C3,Xde,IBo,qBo,jj,NBo,jBo,DBo,w3,zde,GBo,OBo,Dj,VBo,XBo,zBo,A3,Qde,QBo,WBo,Gj,HBo,UBo,JBo,y3,Wde,YBo,KBo,Oj,ZBo,ePo,oPo,L3,Hde,rPo,tPo,Vj,aPo,nPo,sPo,x3,Ude,lPo,iPo,Xj,dPo,cPo,fPo,k3,Jde,mPo,gPo,zj,hPo,pPo,_Po,S3,Yde,uPo,bPo,Qj,FPo,vPo,TPo,R3,Kde,MPo,EPo,Wj,CPo,wPo,APo,B3,Zde,yPo,LPo,Hj,xPo,kPo,SPo,P3,ece,RPo,BPo,Uj,PPo,$Po,IPo,$3,oce,qPo,NPo,Jj,jPo,DPo,GPo,I3,rce,OPo,VPo,Yj,XPo,zPo,QPo,q3,tce,WPo,HPo,Kj,UPo,JPo,YPo,N3,ace,KPo,ZPo,Zj,e$o,o$o,r$o,j3,nce,t$o,a$o,eD,n$o,s$o,l$o,D3,sce,i$o,d$o,oD,c$o,f$o,m$o,G3,lce,g$o,h$o,rD,p$o,_$o,u$o,O3,ice,b$o,F$o,tD,v$o,T$o,M$o,V3,dce,E$o,C$o,aD,w$o,A$o,y$o,X3,cce,L$o,x$o,nD,k$o,S$o,R$o,z3,fce,B$o,P$o,sD,$$o,I$o,q$o,Q3,mce,N$o,j$o,lD,D$o,G$o,O$o,W3,gce,V$o,X$o,iD,z$o,Q$o,W$o,H3,hce,H$o,U$o,dD,J$o,Y$o,K$o,U3,pce,Z$o,eIo,cD,oIo,rIo,tIo,J3,_ce,aIo,nIo,fD,sIo,lIo,iIo,Y3,uce,dIo,cIo,mD,fIo,mIo,gIo,K3,bce,hIo,pIo,gD,_Io,uIo,bIo,Z3,FIo,Fce,vIo,TIo,vce,MIo,EIo,Tce,CIo,wIo,cw,_Re,Ad,e2,Mce,fw,AIo,Ece,yIo,uRe,sr,mw,LIo,yd,xIo,hD,kIo,SIo,pD,RIo,BIo,PIo,gw,$Io,Cce,IIo,qIo,NIo,et,hw,jIo,wce,DIo,GIo,Ld,OIo,Ace,VIo,XIo,_D,zIo,QIo,WIo,yce,HIo,UIo,pw,JIo,We,_w,YIo,Lce,KIo,ZIo,en,eqo,xce,oqo,rqo,kce,tqo,aqo,Sce,nqo,sqo,lqo,Rce,o2,Bce,iqo,dqo,uD,cqo,fqo,mqo,r2,gqo,Pce,hqo,pqo,$ce,_qo,uqo,Ice,bqo,Fqo,uw,bRe,xd,t2,qce,bw,vqo,Nce,Tqo,FRe,lr,Fw,Mqo,kd,Eqo,bD,Cqo,wqo,FD,Aqo,yqo,Lqo,vw,xqo,jce,kqo,Sqo,Rqo,ot,Tw,Bqo,Dce,Pqo,$qo,Sd,Iqo,Gce,qqo,Nqo,vD,jqo,Dqo,Gqo,Oce,Oqo,Vqo,Mw,Xqo,He,Ew,zqo,Vce,Qqo,Wqo,on,Hqo,Xce,Uqo,Jqo,zce,Yqo,Kqo,Qce,Zqo,eNo,oNo,ge,a2,Wce,rNo,tNo,TD,aNo,nNo,sNo,n2,Hce,lNo,iNo,MD,dNo,cNo,fNo,Ds,Uce,mNo,gNo,ED,hNo,pNo,CD,_No,uNo,bNo,s2,Jce,FNo,vNo,wD,TNo,MNo,ENo,ma,Yce,CNo,wNo,AD,ANo,yNo,yD,LNo,xNo,LD,kNo,SNo,RNo,l2,Kce,BNo,PNo,xD,$No,INo,qNo,i2,Zce,NNo,jNo,kD,DNo,GNo,ONo,d2,efe,VNo,XNo,SD,zNo,QNo,WNo,c2,ofe,HNo,UNo,RD,JNo,YNo,KNo,f2,rfe,ZNo,ejo,BD,ojo,rjo,tjo,m2,tfe,ajo,njo,PD,sjo,ljo,ijo,g2,djo,afe,cjo,fjo,nfe,mjo,gjo,sfe,hjo,pjo,Cw,vRe,Rd,h2,lfe,ww,_jo,ife,ujo,TRe,ir,Aw,bjo,Bd,Fjo,$D,vjo,Tjo,ID,Mjo,Ejo,Cjo,yw,wjo,dfe,Ajo,yjo,Ljo,rt,Lw,xjo,cfe,kjo,Sjo,Pd,Rjo,ffe,Bjo,Pjo,qD,$jo,Ijo,qjo,mfe,Njo,jjo,xw,Djo,Ue,kw,Gjo,gfe,Ojo,Vjo,rn,Xjo,hfe,zjo,Qjo,pfe,Wjo,Hjo,_fe,Ujo,Jjo,Yjo,ufe,p2,bfe,Kjo,Zjo,ND,eDo,oDo,rDo,_2,tDo,Ffe,aDo,nDo,vfe,sDo,lDo,Tfe,iDo,dDo,Sw,MRe,$d,u2,Mfe,Rw,cDo,Efe,fDo,ERe,dr,Bw,mDo,Id,gDo,jD,hDo,pDo,DD,_Do,uDo,bDo,Pw,FDo,Cfe,vDo,TDo,MDo,tt,$w,EDo,wfe,CDo,wDo,qd,ADo,Afe,yDo,LDo,GD,xDo,kDo,SDo,yfe,RDo,BDo,Iw,PDo,Je,qw,$Do,Lfe,IDo,qDo,tn,NDo,xfe,jDo,DDo,kfe,GDo,ODo,Sfe,VDo,XDo,zDo,Se,b2,Rfe,QDo,WDo,OD,HDo,UDo,JDo,F2,Bfe,YDo,KDo,VD,ZDo,eGo,oGo,v2,Pfe,rGo,tGo,XD,aGo,nGo,sGo,T2,$fe,lGo,iGo,zD,dGo,cGo,fGo,M2,Ife,mGo,gGo,QD,hGo,pGo,_Go,E2,qfe,uGo,bGo,WD,FGo,vGo,TGo,C2,Nfe,MGo,EGo,HD,CGo,wGo,AGo,w2,jfe,yGo,LGo,UD,xGo,kGo,SGo,A2,RGo,Dfe,BGo,PGo,Gfe,$Go,IGo,Ofe,qGo,NGo,Nw,CRe,Nd,y2,Vfe,jw,jGo,Xfe,DGo,wRe,cr,Dw,GGo,jd,OGo,JD,VGo,XGo,YD,zGo,QGo,WGo,Gw,HGo,zfe,UGo,JGo,YGo,at,Ow,KGo,Qfe,ZGo,eOo,Dd,oOo,Wfe,rOo,tOo,KD,aOo,nOo,sOo,Hfe,lOo,iOo,Vw,dOo,Ye,Xw,cOo,Ufe,fOo,mOo,an,gOo,Jfe,hOo,pOo,Yfe,_Oo,uOo,Kfe,bOo,FOo,vOo,nn,L2,Zfe,TOo,MOo,ZD,EOo,COo,wOo,x2,eme,AOo,yOo,eG,LOo,xOo,kOo,k2,ome,SOo,ROo,oG,BOo,POo,$Oo,S2,rme,IOo,qOo,rG,NOo,jOo,DOo,R2,GOo,tme,OOo,VOo,ame,XOo,zOo,nme,QOo,WOo,zw,ARe,Gd,B2,sme,Qw,HOo,lme,UOo,yRe,fr,Ww,JOo,Od,YOo,tG,KOo,ZOo,aG,eVo,oVo,rVo,Hw,tVo,ime,aVo,nVo,sVo,nt,Uw,lVo,dme,iVo,dVo,Vd,cVo,cme,fVo,mVo,nG,gVo,hVo,pVo,fme,_Vo,uVo,Jw,bVo,Ke,Yw,FVo,mme,vVo,TVo,sn,MVo,gme,EVo,CVo,hme,wVo,AVo,pme,yVo,LVo,xVo,Re,P2,_me,kVo,SVo,sG,RVo,BVo,PVo,$2,ume,$Vo,IVo,lG,qVo,NVo,jVo,I2,bme,DVo,GVo,iG,OVo,VVo,XVo,q2,Fme,zVo,QVo,dG,WVo,HVo,UVo,N2,vme,JVo,YVo,cG,KVo,ZVo,eXo,j2,Tme,oXo,rXo,fG,tXo,aXo,nXo,D2,Mme,sXo,lXo,mG,iXo,dXo,cXo,G2,Eme,fXo,mXo,gG,gXo,hXo,pXo,O2,_Xo,Cme,uXo,bXo,wme,FXo,vXo,Ame,TXo,MXo,Kw,LRe,Xd,V2,yme,Zw,EXo,Lme,CXo,xRe,mr,eA,wXo,zd,AXo,hG,yXo,LXo,pG,xXo,kXo,SXo,oA,RXo,xme,BXo,PXo,$Xo,st,rA,IXo,kme,qXo,NXo,Qd,jXo,Sme,DXo,GXo,_G,OXo,VXo,XXo,Rme,zXo,QXo,tA,WXo,Ze,aA,HXo,Bme,UXo,JXo,ln,YXo,Pme,KXo,ZXo,$me,ezo,ozo,Ime,rzo,tzo,azo,nA,X2,qme,nzo,szo,uG,lzo,izo,dzo,z2,Nme,czo,fzo,bG,mzo,gzo,hzo,Q2,pzo,jme,_zo,uzo,Dme,bzo,Fzo,Gme,vzo,Tzo,sA,kRe,Wd,W2,Ome,lA,Mzo,Vme,Ezo,SRe,gr,iA,Czo,Hd,wzo,FG,Azo,yzo,vG,Lzo,xzo,kzo,dA,Szo,Xme,Rzo,Bzo,Pzo,lt,cA,$zo,zme,Izo,qzo,Ud,Nzo,Qme,jzo,Dzo,TG,Gzo,Ozo,Vzo,Wme,Xzo,zzo,fA,Qzo,eo,mA,Wzo,Hme,Hzo,Uzo,dn,Jzo,Ume,Yzo,Kzo,Jme,Zzo,eQo,Yme,oQo,rQo,tQo,cn,H2,Kme,aQo,nQo,MG,sQo,lQo,iQo,U2,Zme,dQo,cQo,EG,fQo,mQo,gQo,J2,ege,hQo,pQo,CG,_Qo,uQo,bQo,Y2,oge,FQo,vQo,wG,TQo,MQo,EQo,K2,CQo,rge,wQo,AQo,tge,yQo,LQo,age,xQo,kQo,gA,RRe,Jd,Z2,nge,hA,SQo,sge,RQo,BRe,hr,pA,BQo,Yd,PQo,AG,$Qo,IQo,yG,qQo,NQo,jQo,_A,DQo,lge,GQo,OQo,VQo,it,uA,XQo,ige,zQo,QQo,Kd,WQo,dge,HQo,UQo,LG,JQo,YQo,KQo,cge,ZQo,eWo,bA,oWo,oo,FA,rWo,fge,tWo,aWo,fn,nWo,mge,sWo,lWo,gge,iWo,dWo,hge,cWo,fWo,mWo,Zd,eF,pge,gWo,hWo,xG,pWo,_Wo,uWo,oF,_ge,bWo,FWo,kG,vWo,TWo,MWo,rF,uge,EWo,CWo,SG,wWo,AWo,yWo,tF,LWo,bge,xWo,kWo,Fge,SWo,RWo,vge,BWo,PWo,vA,PRe,ec,aF,Tge,TA,$Wo,Mge,IWo,$Re,pr,MA,qWo,oc,NWo,RG,jWo,DWo,BG,GWo,OWo,VWo,EA,XWo,Ege,zWo,QWo,WWo,dt,CA,HWo,Cge,UWo,JWo,rc,YWo,wge,KWo,ZWo,PG,eHo,oHo,rHo,Age,tHo,aHo,wA,nHo,ro,AA,sHo,yge,lHo,iHo,mn,dHo,Lge,cHo,fHo,xge,mHo,gHo,kge,hHo,pHo,_Ho,Sge,nF,Rge,uHo,bHo,$G,FHo,vHo,THo,sF,MHo,Bge,EHo,CHo,Pge,wHo,AHo,$ge,yHo,LHo,yA,IRe,tc,lF,Ige,LA,xHo,qge,kHo,qRe,_r,xA,SHo,ac,RHo,IG,BHo,PHo,qG,$Ho,IHo,qHo,kA,NHo,Nge,jHo,DHo,GHo,ct,SA,OHo,jge,VHo,XHo,nc,zHo,Dge,QHo,WHo,NG,HHo,UHo,JHo,Gge,YHo,KHo,RA,ZHo,to,BA,eUo,Oge,oUo,rUo,gn,tUo,Vge,aUo,nUo,Xge,sUo,lUo,zge,iUo,dUo,cUo,Qge,iF,Wge,fUo,mUo,jG,gUo,hUo,pUo,dF,_Uo,Hge,uUo,bUo,Uge,FUo,vUo,Jge,TUo,MUo,PA,NRe,sc,cF,Yge,$A,EUo,Kge,CUo,jRe,ur,IA,wUo,lc,AUo,DG,yUo,LUo,GG,xUo,kUo,SUo,qA,RUo,Zge,BUo,PUo,$Uo,ft,NA,IUo,ehe,qUo,NUo,ic,jUo,ohe,DUo,GUo,OG,OUo,VUo,XUo,rhe,zUo,QUo,jA,WUo,ao,DA,HUo,the,UUo,JUo,hn,YUo,ahe,KUo,ZUo,nhe,eJo,oJo,she,rJo,tJo,aJo,dc,fF,lhe,nJo,sJo,VG,lJo,iJo,dJo,mF,ihe,cJo,fJo,XG,mJo,gJo,hJo,gF,dhe,pJo,_Jo,zG,uJo,bJo,FJo,hF,vJo,che,TJo,MJo,fhe,EJo,CJo,mhe,wJo,AJo,GA,DRe,cc,pF,ghe,OA,yJo,hhe,LJo,GRe,br,VA,xJo,fc,kJo,QG,SJo,RJo,WG,BJo,PJo,$Jo,XA,IJo,phe,qJo,NJo,jJo,mt,zA,DJo,_he,GJo,OJo,mc,VJo,uhe,XJo,zJo,HG,QJo,WJo,HJo,bhe,UJo,JJo,QA,YJo,no,WA,KJo,Fhe,ZJo,eYo,pn,oYo,vhe,rYo,tYo,The,aYo,nYo,Mhe,sYo,lYo,iYo,Ehe,_F,Che,dYo,cYo,UG,fYo,mYo,gYo,uF,hYo,whe,pYo,_Yo,Ahe,uYo,bYo,yhe,FYo,vYo,HA,ORe,gc,bF,Lhe,UA,TYo,xhe,MYo,VRe,Fr,JA,EYo,hc,CYo,JG,wYo,AYo,YG,yYo,LYo,xYo,YA,kYo,khe,SYo,RYo,BYo,gt,KA,PYo,She,$Yo,IYo,pc,qYo,Rhe,NYo,jYo,KG,DYo,GYo,OYo,Bhe,VYo,XYo,ZA,zYo,ho,e0,QYo,Phe,WYo,HYo,_n,UYo,$he,JYo,YYo,Ihe,KYo,ZYo,qhe,eKo,oKo,rKo,x,FF,Nhe,tKo,aKo,ZG,nKo,sKo,lKo,vF,jhe,iKo,dKo,eO,cKo,fKo,mKo,TF,Dhe,gKo,hKo,oO,pKo,_Ko,uKo,MF,Ghe,bKo,FKo,rO,vKo,TKo,MKo,EF,Ohe,EKo,CKo,tO,wKo,AKo,yKo,CF,Vhe,LKo,xKo,aO,kKo,SKo,RKo,wF,Xhe,BKo,PKo,nO,$Ko,IKo,qKo,AF,zhe,NKo,jKo,sO,DKo,GKo,OKo,yF,Qhe,VKo,XKo,lO,zKo,QKo,WKo,LF,Whe,HKo,UKo,iO,JKo,YKo,KKo,xF,Hhe,ZKo,eZo,dO,oZo,rZo,tZo,kF,Uhe,aZo,nZo,cO,sZo,lZo,iZo,SF,Jhe,dZo,cZo,fO,fZo,mZo,gZo,RF,Yhe,hZo,pZo,mO,_Zo,uZo,bZo,BF,Khe,FZo,vZo,gO,TZo,MZo,EZo,PF,Zhe,CZo,wZo,hO,AZo,yZo,LZo,Gs,epe,xZo,kZo,pO,SZo,RZo,_O,BZo,PZo,$Zo,$F,ope,IZo,qZo,uO,NZo,jZo,DZo,IF,rpe,GZo,OZo,bO,VZo,XZo,zZo,qF,tpe,QZo,WZo,FO,HZo,UZo,JZo,NF,ape,YZo,KZo,vO,ZZo,eer,oer,jF,npe,rer,ter,TO,aer,ner,ser,DF,spe,ler,ier,MO,der,cer,fer,GF,lpe,mer,ger,EO,her,per,_er,OF,ipe,uer,ber,CO,Fer,ver,Ter,VF,dpe,Mer,Eer,wO,Cer,wer,Aer,XF,cpe,yer,Ler,AO,xer,ker,Ser,zF,fpe,Rer,Ber,yO,Per,$er,Ier,QF,mpe,qer,Ner,LO,jer,Der,Ger,WF,gpe,Oer,Ver,xO,Xer,zer,Qer,HF,hpe,Wer,Her,kO,Uer,Jer,Yer,UF,ppe,Ker,Zer,SO,eor,oor,ror,JF,_pe,tor,aor,RO,nor,sor,lor,YF,upe,ior,dor,BO,cor,mor,gor,KF,bpe,hor,por,PO,_or,uor,bor,ZF,Fpe,For,vor,$O,Tor,Mor,Eor,ev,vpe,Cor,wor,IO,Aor,yor,Lor,ov,Tpe,xor,kor,qO,Sor,Ror,Bor,rv,Mpe,Por,$or,NO,Ior,qor,Nor,tv,Epe,jor,Dor,jO,Gor,Oor,Vor,av,Cpe,Xor,zor,DO,Qor,Wor,Hor,nv,wpe,Uor,Jor,GO,Yor,Kor,Zor,sv,Ape,err,orr,OO,rrr,trr,arr,lv,ype,nrr,srr,VO,lrr,irr,drr,Lpe,crr,frr,o0,XRe,_c,iv,xpe,r0,mrr,kpe,grr,zRe,vr,t0,hrr,uc,prr,XO,_rr,urr,zO,brr,Frr,vrr,a0,Trr,Spe,Mrr,Err,Crr,ht,n0,wrr,Rpe,Arr,yrr,bc,Lrr,Bpe,xrr,krr,QO,Srr,Rrr,Brr,Ppe,Prr,$rr,s0,Irr,po,l0,qrr,$pe,Nrr,jrr,un,Drr,Ipe,Grr,Orr,qpe,Vrr,Xrr,Npe,zrr,Qrr,Wrr,H,dv,jpe,Hrr,Urr,WO,Jrr,Yrr,Krr,cv,Dpe,Zrr,etr,HO,otr,rtr,ttr,fv,Gpe,atr,ntr,UO,str,ltr,itr,mv,Ope,dtr,ctr,JO,ftr,mtr,gtr,gv,Vpe,htr,ptr,YO,_tr,utr,btr,hv,Xpe,Ftr,vtr,KO,Ttr,Mtr,Etr,pv,zpe,Ctr,wtr,ZO,Atr,ytr,Ltr,_v,Qpe,xtr,ktr,eV,Str,Rtr,Btr,uv,Wpe,Ptr,$tr,oV,Itr,qtr,Ntr,bv,Hpe,jtr,Dtr,rV,Gtr,Otr,Vtr,Fv,Upe,Xtr,ztr,tV,Qtr,Wtr,Htr,vv,Jpe,Utr,Jtr,aV,Ytr,Ktr,Ztr,Tv,Ype,ear,oar,nV,rar,tar,aar,Mv,Kpe,nar,sar,sV,lar,iar,dar,Ev,Zpe,car,far,lV,mar,gar,har,Cv,e_e,par,_ar,iV,uar,bar,Far,wv,o_e,Tar,Mar,dV,Ear,Car,war,Av,r_e,Aar,yar,cV,Lar,xar,kar,yv,t_e,Sar,Rar,fV,Bar,Par,$ar,Lv,a_e,Iar,qar,mV,Nar,jar,Dar,xv,n_e,Gar,Oar,gV,Var,Xar,zar,kv,s_e,Qar,War,hV,Har,Uar,Jar,Sv,l_e,Yar,Kar,pV,Zar,enr,onr,i_e,rnr,tnr,i0,QRe,Fc,Rv,d_e,d0,anr,c_e,nnr,WRe,Tr,c0,snr,vc,lnr,_V,inr,dnr,uV,cnr,fnr,mnr,f0,gnr,f_e,hnr,pnr,_nr,pt,m0,unr,m_e,bnr,Fnr,Tc,vnr,g_e,Tnr,Mnr,bV,Enr,Cnr,wnr,h_e,Anr,ynr,g0,Lnr,_o,h0,xnr,p_e,knr,Snr,bn,Rnr,__e,Bnr,Pnr,u_e,$nr,Inr,b_e,qnr,Nnr,jnr,ce,Bv,F_e,Dnr,Gnr,FV,Onr,Vnr,Xnr,Pv,v_e,znr,Qnr,vV,Wnr,Hnr,Unr,$v,T_e,Jnr,Ynr,TV,Knr,Znr,esr,Iv,M_e,osr,rsr,MV,tsr,asr,nsr,qv,E_e,ssr,lsr,EV,isr,dsr,csr,Nv,C_e,fsr,msr,CV,gsr,hsr,psr,jv,w_e,_sr,usr,wV,bsr,Fsr,vsr,Dv,A_e,Tsr,Msr,AV,Esr,Csr,wsr,Gv,y_e,Asr,ysr,yV,Lsr,xsr,ksr,Ov,L_e,Ssr,Rsr,LV,Bsr,Psr,$sr,Vv,x_e,Isr,qsr,xV,Nsr,jsr,Dsr,Xv,k_e,Gsr,Osr,kV,Vsr,Xsr,zsr,S_e,Qsr,Wsr,p0,HRe,Mc,zv,R_e,_0,Hsr,B_e,Usr,URe,Mr,u0,Jsr,Ec,Ysr,SV,Ksr,Zsr,RV,elr,olr,rlr,b0,tlr,P_e,alr,nlr,slr,_t,F0,llr,$_e,ilr,dlr,Cc,clr,I_e,flr,mlr,BV,glr,hlr,plr,q_e,_lr,ulr,v0,blr,uo,T0,Flr,N_e,vlr,Tlr,Fn,Mlr,j_e,Elr,Clr,D_e,wlr,Alr,G_e,ylr,Llr,xlr,M0,Qv,O_e,klr,Slr,PV,Rlr,Blr,Plr,Wv,V_e,$lr,Ilr,$V,qlr,Nlr,jlr,X_e,Dlr,Glr,E0,JRe,wc,Hv,z_e,C0,Olr,Q_e,Vlr,YRe,Er,w0,Xlr,Ac,zlr,IV,Qlr,Wlr,qV,Hlr,Ulr,Jlr,A0,Ylr,W_e,Klr,Zlr,eir,ut,y0,oir,H_e,rir,tir,yc,air,U_e,nir,sir,NV,lir,iir,dir,J_e,cir,fir,L0,mir,bo,x0,gir,Y_e,hir,pir,vn,_ir,K_e,uir,bir,Z_e,Fir,vir,eue,Tir,Mir,Eir,J,Uv,oue,Cir,wir,jV,Air,yir,Lir,Jv,rue,xir,kir,DV,Sir,Rir,Bir,Yv,tue,Pir,$ir,GV,Iir,qir,Nir,Kv,aue,jir,Dir,OV,Gir,Oir,Vir,Zv,nue,Xir,zir,VV,Qir,Wir,Hir,e6,sue,Uir,Jir,XV,Yir,Kir,Zir,o6,lue,edr,odr,zV,rdr,tdr,adr,r6,iue,ndr,sdr,QV,ldr,idr,ddr,t6,due,cdr,fdr,WV,mdr,gdr,hdr,a6,cue,pdr,_dr,HV,udr,bdr,Fdr,n6,fue,vdr,Tdr,UV,Mdr,Edr,Cdr,s6,mue,wdr,Adr,JV,ydr,Ldr,xdr,l6,gue,kdr,Sdr,YV,Rdr,Bdr,Pdr,i6,hue,$dr,Idr,KV,qdr,Ndr,jdr,d6,pue,Ddr,Gdr,ZV,Odr,Vdr,Xdr,c6,_ue,zdr,Qdr,eX,Wdr,Hdr,Udr,f6,uue,Jdr,Ydr,oX,Kdr,Zdr,ecr,m6,bue,ocr,rcr,rX,tcr,acr,ncr,g6,Fue,scr,lcr,tX,icr,dcr,ccr,h6,vue,fcr,mcr,aX,gcr,hcr,pcr,Tue,_cr,ucr,k0,KRe,Lc,p6,Mue,S0,bcr,Eue,Fcr,ZRe,Cr,R0,vcr,xc,Tcr,nX,Mcr,Ecr,sX,Ccr,wcr,Acr,B0,ycr,Cue,Lcr,xcr,kcr,bt,P0,Scr,wue,Rcr,Bcr,kc,Pcr,Aue,$cr,Icr,lX,qcr,Ncr,jcr,yue,Dcr,Gcr,$0,Ocr,Fo,I0,Vcr,Lue,Xcr,zcr,Tn,Qcr,xue,Wcr,Hcr,kue,Ucr,Jcr,Sue,Ycr,Kcr,Zcr,ue,_6,Rue,efr,ofr,iX,rfr,tfr,afr,u6,Bue,nfr,sfr,dX,lfr,ifr,dfr,b6,Pue,cfr,ffr,cX,mfr,gfr,hfr,F6,$ue,pfr,_fr,fX,ufr,bfr,Ffr,v6,Iue,vfr,Tfr,mX,Mfr,Efr,Cfr,T6,que,wfr,Afr,gX,yfr,Lfr,xfr,M6,Nue,kfr,Sfr,hX,Rfr,Bfr,Pfr,E6,jue,$fr,Ifr,pX,qfr,Nfr,jfr,C6,Due,Dfr,Gfr,_X,Ofr,Vfr,Xfr,w6,Gue,zfr,Qfr,uX,Wfr,Hfr,Ufr,Oue,Jfr,Yfr,q0,eBe,Sc,A6,Vue,N0,Kfr,Xue,Zfr,oBe,wr,j0,emr,Rc,omr,bX,rmr,tmr,FX,amr,nmr,smr,D0,lmr,zue,imr,dmr,cmr,Ft,G0,fmr,Que,mmr,gmr,Bc,hmr,Wue,pmr,_mr,vX,umr,bmr,Fmr,Hue,vmr,Tmr,O0,Mmr,vo,V0,Emr,Uue,Cmr,wmr,Mn,Amr,Jue,ymr,Lmr,Yue,xmr,kmr,Kue,Smr,Rmr,Bmr,V,y6,Zue,Pmr,$mr,TX,Imr,qmr,Nmr,L6,e1e,jmr,Dmr,MX,Gmr,Omr,Vmr,x6,o1e,Xmr,zmr,EX,Qmr,Wmr,Hmr,k6,r1e,Umr,Jmr,CX,Ymr,Kmr,Zmr,S6,t1e,egr,ogr,wX,rgr,tgr,agr,R6,a1e,ngr,sgr,AX,lgr,igr,dgr,B6,n1e,cgr,fgr,yX,mgr,ggr,hgr,P6,s1e,pgr,_gr,LX,ugr,bgr,Fgr,$6,l1e,vgr,Tgr,xX,Mgr,Egr,Cgr,I6,i1e,wgr,Agr,kX,ygr,Lgr,xgr,q6,d1e,kgr,Sgr,SX,Rgr,Bgr,Pgr,N6,c1e,$gr,Igr,RX,qgr,Ngr,jgr,j6,f1e,Dgr,Ggr,BX,Ogr,Vgr,Xgr,D6,m1e,zgr,Qgr,PX,Wgr,Hgr,Ugr,G6,g1e,Jgr,Ygr,$X,Kgr,Zgr,ehr,O6,h1e,ohr,rhr,IX,thr,ahr,nhr,V6,p1e,shr,lhr,qX,ihr,dhr,chr,X6,_1e,fhr,mhr,NX,ghr,hhr,phr,z6,u1e,_hr,uhr,jX,bhr,Fhr,vhr,Q6,b1e,Thr,Mhr,DX,Ehr,Chr,whr,W6,F1e,Ahr,yhr,GX,Lhr,xhr,khr,H6,v1e,Shr,Rhr,OX,Bhr,Phr,$hr,U6,T1e,Ihr,qhr,VX,Nhr,jhr,Dhr,J6,M1e,Ghr,Ohr,XX,Vhr,Xhr,zhr,Y6,E1e,Qhr,Whr,zX,Hhr,Uhr,Jhr,K6,C1e,Yhr,Khr,QX,Zhr,epr,opr,w1e,rpr,tpr,X0,rBe,Pc,Z6,A1e,z0,apr,y1e,npr,tBe,Ar,Q0,spr,$c,lpr,WX,ipr,dpr,HX,cpr,fpr,mpr,W0,gpr,L1e,hpr,ppr,_pr,vt,H0,upr,x1e,bpr,Fpr,Ic,vpr,k1e,Tpr,Mpr,UX,Epr,Cpr,wpr,S1e,Apr,ypr,U0,Lpr,To,J0,xpr,R1e,kpr,Spr,En,Rpr,B1e,Bpr,Ppr,P1e,$pr,Ipr,$1e,qpr,Npr,jpr,ae,eT,I1e,Dpr,Gpr,JX,Opr,Vpr,Xpr,oT,q1e,zpr,Qpr,YX,Wpr,Hpr,Upr,rT,N1e,Jpr,Ypr,KX,Kpr,Zpr,e_r,tT,j1e,o_r,r_r,ZX,t_r,a_r,n_r,aT,D1e,s_r,l_r,ez,i_r,d_r,c_r,nT,G1e,f_r,m_r,oz,g_r,h_r,p_r,sT,O1e,__r,u_r,rz,b_r,F_r,v_r,lT,V1e,T_r,M_r,tz,E_r,C_r,w_r,iT,X1e,A_r,y_r,az,L_r,x_r,k_r,dT,z1e,S_r,R_r,nz,B_r,P_r,$_r,cT,Q1e,I_r,q_r,sz,N_r,j_r,D_r,fT,W1e,G_r,O_r,lz,V_r,X_r,z_r,mT,H1e,Q_r,W_r,iz,H_r,U_r,J_r,gT,U1e,Y_r,K_r,dz,Z_r,eur,our,hT,J1e,rur,tur,cz,aur,nur,sur,pT,Y1e,lur,iur,fz,dur,cur,fur,_T,K1e,mur,gur,mz,hur,pur,_ur,Z1e,uur,bur,Y0,aBe,qc,uT,ebe,K0,Fur,obe,vur,nBe,yr,Z0,Tur,Nc,Mur,gz,Eur,Cur,hz,wur,Aur,yur,ey,Lur,rbe,xur,kur,Sur,Tt,oy,Rur,tbe,Bur,Pur,jc,$ur,abe,Iur,qur,pz,Nur,jur,Dur,nbe,Gur,Our,ry,Vur,Mo,ty,Xur,sbe,zur,Qur,Cn,Wur,lbe,Hur,Uur,ibe,Jur,Yur,dbe,Kur,Zur,e1r,cbe,bT,fbe,o1r,r1r,_z,t1r,a1r,n1r,mbe,s1r,l1r,ay,sBe,Dc,FT,gbe,ny,i1r,hbe,d1r,lBe,Lr,sy,c1r,Gc,f1r,uz,m1r,g1r,bz,h1r,p1r,_1r,ly,u1r,pbe,b1r,F1r,v1r,Mt,iy,T1r,_be,M1r,E1r,Oc,C1r,ube,w1r,A1r,Fz,y1r,L1r,x1r,bbe,k1r,S1r,dy,R1r,Eo,cy,B1r,Fbe,P1r,$1r,wn,I1r,vbe,q1r,N1r,Tbe,j1r,D1r,Mbe,G1r,O1r,V1r,Y,vT,Ebe,X1r,z1r,vz,Q1r,W1r,H1r,TT,Cbe,U1r,J1r,Tz,Y1r,K1r,Z1r,MT,wbe,ebr,obr,Mz,rbr,tbr,abr,ET,Abe,nbr,sbr,Ez,lbr,ibr,dbr,CT,ybe,cbr,fbr,Cz,mbr,gbr,hbr,wT,Lbe,pbr,_br,wz,ubr,bbr,Fbr,AT,xbe,vbr,Tbr,Az,Mbr,Ebr,Cbr,yT,kbe,wbr,Abr,yz,ybr,Lbr,xbr,LT,Sbe,kbr,Sbr,Lz,Rbr,Bbr,Pbr,xT,Rbe,$br,Ibr,xz,qbr,Nbr,jbr,kT,Bbe,Dbr,Gbr,kz,Obr,Vbr,Xbr,ST,Pbe,zbr,Qbr,Sz,Wbr,Hbr,Ubr,RT,$be,Jbr,Ybr,Rz,Kbr,Zbr,e5r,BT,Ibe,o5r,r5r,Bz,t5r,a5r,n5r,PT,qbe,s5r,l5r,Pz,i5r,d5r,c5r,$T,Nbe,f5r,m5r,$z,g5r,h5r,p5r,IT,jbe,_5r,u5r,Iz,b5r,F5r,v5r,qT,Dbe,T5r,M5r,qz,E5r,C5r,w5r,NT,Gbe,A5r,y5r,Nz,L5r,x5r,k5r,jT,Obe,S5r,R5r,jz,B5r,P5r,$5r,Vbe,I5r,q5r,fy,iBe,Vc,DT,Xbe,my,N5r,zbe,j5r,dBe,xr,gy,D5r,Xc,G5r,Dz,O5r,V5r,Gz,X5r,z5r,Q5r,hy,W5r,Qbe,H5r,U5r,J5r,Et,py,Y5r,Wbe,K5r,Z5r,zc,e3r,Hbe,o3r,r3r,Oz,t3r,a3r,n3r,Ube,s3r,l3r,_y,i3r,Co,uy,d3r,Jbe,c3r,f3r,An,m3r,Ybe,g3r,h3r,Kbe,p3r,_3r,Zbe,u3r,b3r,F3r,K,GT,e5e,v3r,T3r,Vz,M3r,E3r,C3r,OT,o5e,w3r,A3r,Xz,y3r,L3r,x3r,VT,r5e,k3r,S3r,zz,R3r,B3r,P3r,XT,t5e,$3r,I3r,Qz,q3r,N3r,j3r,zT,a5e,D3r,G3r,Wz,O3r,V3r,X3r,QT,n5e,z3r,Q3r,Hz,W3r,H3r,U3r,WT,s5e,J3r,Y3r,Uz,K3r,Z3r,e2r,HT,l5e,o2r,r2r,Jz,t2r,a2r,n2r,UT,i5e,s2r,l2r,Yz,i2r,d2r,c2r,JT,d5e,f2r,m2r,Kz,g2r,h2r,p2r,YT,c5e,_2r,u2r,Zz,b2r,F2r,v2r,KT,f5e,T2r,M2r,eQ,E2r,C2r,w2r,ZT,m5e,A2r,y2r,oQ,L2r,x2r,k2r,e7,g5e,S2r,R2r,rQ,B2r,P2r,$2r,o7,h5e,I2r,q2r,tQ,N2r,j2r,D2r,r7,p5e,G2r,O2r,aQ,V2r,X2r,z2r,t7,_5e,Q2r,W2r,nQ,H2r,U2r,J2r,a7,u5e,Y2r,K2r,sQ,Z2r,eFr,oFr,n7,b5e,rFr,tFr,lQ,aFr,nFr,sFr,s7,F5e,lFr,iFr,iQ,dFr,cFr,fFr,v5e,mFr,gFr,by,cBe,Qc,l7,T5e,Fy,hFr,M5e,pFr,fBe,kr,vy,_Fr,Wc,uFr,dQ,bFr,FFr,cQ,vFr,TFr,MFr,Ty,EFr,E5e,CFr,wFr,AFr,Ct,My,yFr,C5e,LFr,xFr,Hc,kFr,w5e,SFr,RFr,fQ,BFr,PFr,$Fr,A5e,IFr,qFr,Ey,NFr,wo,Cy,jFr,y5e,DFr,GFr,yn,OFr,L5e,VFr,XFr,x5e,zFr,QFr,k5e,WFr,HFr,UFr,S5e,i7,R5e,JFr,YFr,mQ,KFr,ZFr,evr,B5e,ovr,rvr,wy,mBe,Uc,d7,P5e,Ay,tvr,$5e,avr,gBe,Sr,yy,nvr,Jc,svr,gQ,lvr,ivr,hQ,dvr,cvr,fvr,Ly,mvr,I5e,gvr,hvr,pvr,wt,xy,_vr,q5e,uvr,bvr,Yc,Fvr,N5e,vvr,Tvr,pQ,Mvr,Evr,Cvr,j5e,wvr,Avr,ky,yvr,Ao,Sy,Lvr,D5e,xvr,kvr,Ln,Svr,G5e,Rvr,Bvr,O5e,Pvr,$vr,V5e,Ivr,qvr,Nvr,X5e,c7,z5e,jvr,Dvr,_Q,Gvr,Ovr,Vvr,Q5e,Xvr,zvr,Ry,hBe,Kc,f7,W5e,By,Qvr,H5e,Wvr,pBe,Rr,Py,Hvr,Zc,Uvr,uQ,Jvr,Yvr,bQ,Kvr,Zvr,e6r,$y,o6r,U5e,r6r,t6r,a6r,At,Iy,n6r,J5e,s6r,l6r,ef,i6r,Y5e,d6r,c6r,FQ,f6r,m6r,g6r,K5e,h6r,p6r,qy,_6r,yo,Ny,u6r,Z5e,b6r,F6r,xn,v6r,e3e,T6r,M6r,o3e,E6r,C6r,r3e,w6r,A6r,y6r,z,m7,t3e,L6r,x6r,vQ,k6r,S6r,R6r,g7,a3e,B6r,P6r,TQ,$6r,I6r,q6r,h7,n3e,N6r,j6r,MQ,D6r,G6r,O6r,p7,s3e,V6r,X6r,EQ,z6r,Q6r,W6r,_7,l3e,H6r,U6r,CQ,J6r,Y6r,K6r,u7,i3e,Z6r,eTr,wQ,oTr,rTr,tTr,b7,d3e,aTr,nTr,AQ,sTr,lTr,iTr,F7,c3e,dTr,cTr,yQ,fTr,mTr,gTr,v7,f3e,hTr,pTr,LQ,_Tr,uTr,bTr,T7,m3e,FTr,vTr,xQ,TTr,MTr,ETr,M7,g3e,CTr,wTr,kQ,ATr,yTr,LTr,E7,h3e,xTr,kTr,SQ,STr,RTr,BTr,C7,p3e,PTr,$Tr,RQ,ITr,qTr,NTr,w7,_3e,jTr,DTr,BQ,GTr,OTr,VTr,A7,u3e,XTr,zTr,PQ,QTr,WTr,HTr,y7,b3e,UTr,JTr,$Q,YTr,KTr,ZTr,L7,F3e,e7r,o7r,IQ,r7r,t7r,a7r,x7,v3e,n7r,s7r,qQ,l7r,i7r,d7r,k7,T3e,c7r,f7r,NQ,m7r,g7r,h7r,S7,M3e,p7r,_7r,jQ,u7r,b7r,F7r,R7,E3e,v7r,T7r,DQ,M7r,E7r,C7r,B7,C3e,w7r,A7r,GQ,y7r,L7r,x7r,P7,w3e,k7r,S7r,OQ,R7r,B7r,P7r,$7,A3e,$7r,I7r,VQ,q7r,N7r,j7r,I7,y3e,D7r,G7r,XQ,O7r,V7r,X7r,L3e,z7r,Q7r,jy,_Be,of,q7,x3e,Dy,W7r,k3e,H7r,uBe,Br,Gy,U7r,rf,J7r,zQ,Y7r,K7r,QQ,Z7r,eMr,oMr,Oy,rMr,S3e,tMr,aMr,nMr,yt,Vy,sMr,R3e,lMr,iMr,tf,dMr,B3e,cMr,fMr,WQ,mMr,gMr,hMr,P3e,pMr,_Mr,Xy,uMr,Lo,zy,bMr,$3e,FMr,vMr,kn,TMr,I3e,MMr,EMr,q3e,CMr,wMr,N3e,AMr,yMr,LMr,ca,N7,j3e,xMr,kMr,HQ,SMr,RMr,BMr,j7,D3e,PMr,$Mr,UQ,IMr,qMr,NMr,D7,G3e,jMr,DMr,JQ,GMr,OMr,VMr,G7,O3e,XMr,zMr,YQ,QMr,WMr,HMr,O7,V3e,UMr,JMr,KQ,YMr,KMr,ZMr,X3e,e4r,o4r,Qy,bBe,af,V7,z3e,Wy,r4r,Q3e,t4r,FBe,Pr,Hy,a4r,nf,n4r,ZQ,s4r,l4r,eW,i4r,d4r,c4r,Uy,f4r,W3e,m4r,g4r,h4r,Lt,Jy,p4r,H3e,_4r,u4r,sf,b4r,U3e,F4r,v4r,oW,T4r,M4r,E4r,J3e,C4r,w4r,Yy,A4r,xo,Ky,y4r,Y3e,L4r,x4r,Sn,k4r,K3e,S4r,R4r,Z3e,B4r,P4r,e2e,$4r,I4r,q4r,fe,X7,o2e,N4r,j4r,rW,D4r,G4r,O4r,z7,r2e,V4r,X4r,tW,z4r,Q4r,W4r,Q7,t2e,H4r,U4r,aW,J4r,Y4r,K4r,W7,a2e,Z4r,eEr,nW,oEr,rEr,tEr,H7,n2e,aEr,nEr,sW,sEr,lEr,iEr,U7,s2e,dEr,cEr,lW,fEr,mEr,gEr,J7,l2e,hEr,pEr,iW,_Er,uEr,bEr,Y7,i2e,FEr,vEr,dW,TEr,MEr,EEr,K7,d2e,CEr,wEr,cW,AEr,yEr,LEr,Z7,c2e,xEr,kEr,fW,SEr,REr,BEr,eM,f2e,PEr,$Er,mW,IEr,qEr,NEr,oM,m2e,jEr,DEr,gW,GEr,OEr,VEr,g2e,XEr,zEr,Zy,vBe,lf,rM,h2e,eL,QEr,p2e,WEr,TBe,$r,oL,HEr,df,UEr,hW,JEr,YEr,pW,KEr,ZEr,eCr,rL,oCr,_2e,rCr,tCr,aCr,xt,tL,nCr,u2e,sCr,lCr,cf,iCr,b2e,dCr,cCr,_W,fCr,mCr,gCr,F2e,hCr,pCr,aL,_Cr,ko,nL,uCr,v2e,bCr,FCr,Rn,vCr,T2e,TCr,MCr,M2e,ECr,CCr,E2e,wCr,ACr,yCr,be,tM,C2e,LCr,xCr,uW,kCr,SCr,RCr,aM,w2e,BCr,PCr,bW,$Cr,ICr,qCr,nM,A2e,NCr,jCr,FW,DCr,GCr,OCr,sM,y2e,VCr,XCr,vW,zCr,QCr,WCr,lM,L2e,HCr,UCr,TW,JCr,YCr,KCr,iM,x2e,ZCr,ewr,MW,owr,rwr,twr,dM,k2e,awr,nwr,EW,swr,lwr,iwr,cM,S2e,dwr,cwr,CW,fwr,mwr,gwr,fM,R2e,hwr,pwr,wW,_wr,uwr,bwr,mM,B2e,Fwr,vwr,AW,Twr,Mwr,Ewr,P2e,Cwr,wwr,sL,MBe,ff,gM,$2e,lL,Awr,I2e,ywr,EBe,Ir,iL,Lwr,mf,xwr,yW,kwr,Swr,LW,Rwr,Bwr,Pwr,dL,$wr,q2e,Iwr,qwr,Nwr,kt,cL,jwr,N2e,Dwr,Gwr,gf,Owr,j2e,Vwr,Xwr,xW,zwr,Qwr,Wwr,D2e,Hwr,Uwr,fL,Jwr,So,mL,Ywr,G2e,Kwr,Zwr,Bn,eAr,O2e,oAr,rAr,V2e,tAr,aAr,X2e,nAr,sAr,lAr,Ee,hM,z2e,iAr,dAr,kW,cAr,fAr,mAr,pM,Q2e,gAr,hAr,SW,pAr,_Ar,uAr,_M,W2e,bAr,FAr,RW,vAr,TAr,MAr,uM,H2e,EAr,CAr,BW,wAr,AAr,yAr,bM,U2e,LAr,xAr,PW,kAr,SAr,RAr,FM,J2e,BAr,PAr,$W,$Ar,IAr,qAr,vM,Y2e,NAr,jAr,IW,DAr,GAr,OAr,TM,K2e,VAr,XAr,qW,zAr,QAr,WAr,MM,Z2e,HAr,UAr,NW,JAr,YAr,KAr,eFe,ZAr,e0r,gL,CBe,hf,EM,oFe,hL,o0r,rFe,r0r,wBe,qr,pL,t0r,pf,a0r,jW,n0r,s0r,DW,l0r,i0r,d0r,_L,c0r,tFe,f0r,m0r,g0r,St,uL,h0r,aFe,p0r,_0r,_f,u0r,nFe,b0r,F0r,GW,v0r,T0r,M0r,sFe,E0r,C0r,bL,w0r,Ro,FL,A0r,lFe,y0r,L0r,Pn,x0r,iFe,k0r,S0r,dFe,R0r,B0r,cFe,P0r,$0r,I0r,Fe,CM,fFe,q0r,N0r,OW,j0r,D0r,G0r,wM,mFe,O0r,V0r,VW,X0r,z0r,Q0r,AM,gFe,W0r,H0r,XW,U0r,J0r,Y0r,yM,hFe,K0r,Z0r,zW,eyr,oyr,ryr,LM,pFe,tyr,ayr,QW,nyr,syr,lyr,xM,_Fe,iyr,dyr,WW,cyr,fyr,myr,kM,uFe,gyr,hyr,HW,pyr,_yr,uyr,SM,bFe,byr,Fyr,UW,vyr,Tyr,Myr,RM,FFe,Eyr,Cyr,JW,wyr,Ayr,yyr,BM,vFe,Lyr,xyr,YW,kyr,Syr,Ryr,TFe,Byr,Pyr,vL,ABe,uf,PM,MFe,TL,$yr,EFe,Iyr,yBe,Nr,ML,qyr,bf,Nyr,KW,jyr,Dyr,ZW,Gyr,Oyr,Vyr,EL,Xyr,CFe,zyr,Qyr,Wyr,Rt,CL,Hyr,wFe,Uyr,Jyr,Ff,Yyr,AFe,Kyr,Zyr,eH,eLr,oLr,rLr,yFe,tLr,aLr,wL,nLr,Bo,AL,sLr,LFe,lLr,iLr,$n,dLr,xFe,cLr,fLr,kFe,mLr,gLr,SFe,hLr,pLr,_Lr,ve,$M,RFe,uLr,bLr,oH,FLr,vLr,TLr,IM,BFe,MLr,ELr,rH,CLr,wLr,ALr,qM,PFe,yLr,LLr,tH,xLr,kLr,SLr,NM,$Fe,RLr,BLr,aH,PLr,$Lr,ILr,jM,IFe,qLr,NLr,nH,jLr,DLr,GLr,DM,qFe,OLr,VLr,sH,XLr,zLr,QLr,GM,NFe,WLr,HLr,lH,ULr,JLr,YLr,OM,jFe,KLr,ZLr,iH,e8r,o8r,r8r,VM,DFe,t8r,a8r,dH,n8r,s8r,l8r,XM,GFe,i8r,d8r,cH,c8r,f8r,m8r,OFe,g8r,h8r,yL,LBe,vf,zM,VFe,LL,p8r,XFe,_8r,xBe,jr,xL,u8r,Tf,b8r,fH,F8r,v8r,mH,T8r,M8r,E8r,kL,C8r,zFe,w8r,A8r,y8r,Bt,SL,L8r,QFe,x8r,k8r,Mf,S8r,WFe,R8r,B8r,gH,P8r,$8r,I8r,HFe,q8r,N8r,RL,j8r,Po,BL,D8r,UFe,G8r,O8r,In,V8r,JFe,X8r,z8r,YFe,Q8r,W8r,KFe,H8r,U8r,J8r,Be,QM,ZFe,Y8r,K8r,hH,Z8r,e9r,o9r,WM,eve,r9r,t9r,pH,a9r,n9r,s9r,HM,ove,l9r,i9r,_H,d9r,c9r,f9r,UM,rve,m9r,g9r,uH,h9r,p9r,_9r,JM,tve,u9r,b9r,bH,F9r,v9r,T9r,YM,ave,M9r,E9r,FH,C9r,w9r,A9r,KM,nve,y9r,L9r,vH,x9r,k9r,S9r,ZM,sve,R9r,B9r,TH,P9r,$9r,I9r,lve,q9r,N9r,PL,kBe,Ef,e4,ive,$L,j9r,dve,D9r,SBe,Dr,IL,G9r,Cf,O9r,MH,V9r,X9r,EH,z9r,Q9r,W9r,qL,H9r,cve,U9r,J9r,Y9r,Pt,NL,K9r,fve,Z9r,exr,wf,oxr,mve,rxr,txr,CH,axr,nxr,sxr,gve,lxr,ixr,jL,dxr,$o,DL,cxr,hve,fxr,mxr,qn,gxr,pve,hxr,pxr,_ve,_xr,uxr,uve,bxr,Fxr,vxr,Pe,o4,bve,Txr,Mxr,wH,Exr,Cxr,wxr,r4,Fve,Axr,yxr,AH,Lxr,xxr,kxr,t4,vve,Sxr,Rxr,yH,Bxr,Pxr,$xr,a4,Tve,Ixr,qxr,LH,Nxr,jxr,Dxr,n4,Mve,Gxr,Oxr,xH,Vxr,Xxr,zxr,s4,Eve,Qxr,Wxr,kH,Hxr,Uxr,Jxr,l4,Cve,Yxr,Kxr,SH,Zxr,ekr,okr,i4,wve,rkr,tkr,RH,akr,nkr,skr,Ave,lkr,ikr,GL,RBe,Af,d4,yve,OL,dkr,Lve,ckr,BBe,Gr,VL,fkr,yf,mkr,BH,gkr,hkr,PH,pkr,_kr,ukr,XL,bkr,xve,Fkr,vkr,Tkr,$t,zL,Mkr,kve,Ekr,Ckr,Lf,wkr,Sve,Akr,ykr,$H,Lkr,xkr,kkr,Rve,Skr,Rkr,QL,Bkr,Io,WL,Pkr,Bve,$kr,Ikr,Nn,qkr,Pve,Nkr,jkr,$ve,Dkr,Gkr,Ive,Okr,Vkr,Xkr,qve,c4,Nve,zkr,Qkr,IH,Wkr,Hkr,Ukr,jve,Jkr,Ykr,HL,PBe,xf,f4,Dve,UL,Kkr,Gve,Zkr,$Be,Or,JL,eSr,kf,oSr,qH,rSr,tSr,NH,aSr,nSr,sSr,YL,lSr,Ove,iSr,dSr,cSr,It,KL,fSr,Vve,mSr,gSr,Sf,hSr,Xve,pSr,_Sr,jH,uSr,bSr,FSr,zve,vSr,TSr,ZL,MSr,qo,e8,ESr,Qve,CSr,wSr,jn,ASr,Wve,ySr,LSr,Hve,xSr,kSr,Uve,SSr,RSr,BSr,o8,m4,Jve,PSr,$Sr,DH,ISr,qSr,NSr,g4,Yve,jSr,DSr,GH,GSr,OSr,VSr,Kve,XSr,zSr,r8,IBe,Rf,h4,Zve,t8,QSr,e6e,WSr,qBe,Vr,a8,HSr,Bf,USr,OH,JSr,YSr,VH,KSr,ZSr,eRr,n8,oRr,o6e,rRr,tRr,aRr,qt,s8,nRr,r6e,sRr,lRr,Pf,iRr,t6e,dRr,cRr,XH,fRr,mRr,gRr,a6e,hRr,pRr,l8,_Rr,No,i8,uRr,n6e,bRr,FRr,Dn,vRr,s6e,TRr,MRr,l6e,ERr,CRr,i6e,wRr,ARr,yRr,d6e,p4,c6e,LRr,xRr,zH,kRr,SRr,RRr,f6e,BRr,PRr,d8,NBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),FE=new X({}),vE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new $Rr({props:{warning:!0,$$slots:{default:[o4t]},$$scope:{ctx:If}}}),TE=new X({}),ME=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/configuration_auto.py#L541"}}),wE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),AE=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),yE=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),LE=new X({}),xE=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/tokenization_auto.py#L351"}}),RE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16537/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),BE=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),PE=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),$E=new X({}),IE=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),jE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16537/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new $Rr({props:{$$slots:{default:[r4t]},$$scope:{ctx:If}}}),DE=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),GE=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),OE=new X({}),VE=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/processing_auto.py#L70"}}),QE=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new $Rr({props:{$$slots:{default:[t4t]},$$scope:{ctx:If}}}),WE=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),HE=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),UE=new X({}),JE=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L707"}}),KE=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ZE=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),eC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oC=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rC=new X({}),tC=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L714"}}),nC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),lC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dC=new X({}),cC=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L729"}}),mC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),hC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pC=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_C=new X({}),uC=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L736"}}),FC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),TC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EC=new X({}),CC=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L743"}}),AC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),yC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),LC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kC=new X({}),SC=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L752"}}),BC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),PC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),$C=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qC=new X({}),NC=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L786"}}),DC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),GC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),OC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XC=new X({}),zC=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L793"}}),WC=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),HC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),UC=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YC=new X({}),KC=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L779"}}),ew=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),rw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aw=new X({}),nw=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L761"}}),lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),dw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fw=new X({}),mw=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L768"}}),hw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),_w=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),Fw=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L802"}}),Tw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L841"}}),Lw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),kw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L848"}}),$w=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),qw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L871"}}),Ow=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Xw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L855"}}),Uw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Yw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),eA=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L862"}}),rA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),aA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lA=new X({}),iA=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L880"}}),cA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),mA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hA=new X({}),pA=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L887"}}),uA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),FA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TA=new X({}),MA=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L834"}}),CA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),AA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LA=new X({}),xA=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L809"}}),SA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),RA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),BA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L816"}}),NA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),jA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),DA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_auto.py#L825"}}),zA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),QA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),WA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),KA=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ZA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),e0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),o0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new X({}),t0=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),n0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),s0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),l0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),i0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new X({}),c0=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),m0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),h0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),p0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_0=new X({}),u0=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),F0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),T0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C0=new X({}),w0=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),y0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),x0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S0=new X({}),R0=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),P0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),$0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),I0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N0=new X({}),j0=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),G0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),O0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),V0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z0=new X({}),Q0=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),H0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),U0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),J0=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K0=new X({}),Z0=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),oy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ty=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ny=new X({}),sy=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),iy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),cy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),my=new X({}),gy=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),py=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),uy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new X({}),vy=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),My=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Cy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ay=new X({}),yy=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),xy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Sy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),By=new X({}),Py=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Iy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Ny=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),Gy=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Vy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),zy=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Hy=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Jy=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Ky=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eL=new X({}),oL=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),tL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),nL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lL=new X({}),iL=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),cL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),mL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),pL=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),uL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),FL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TL=new X({}),ML=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),CL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),AL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LL=new X({}),xL=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),SL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),RL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),BL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$L=new X({}),IL=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),NL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),DL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),GL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OL=new X({}),VL=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),zL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),WL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UL=new X({}),JL=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),KL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),e8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t8=new X({}),a8=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),s8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),l8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),i8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16537/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16537/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16537/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),pE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),_E=o("AutoConfig"),On=o(", "),Vn=a("a"),uE=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),bE=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),l9=o("will create a model that is an instance of "),Oi=a("a"),i9=o("BertModel"),d9=o("."),zo=l(),Ga=a("p"),c9=o("There is one class of "),Df=a("code"),f9=o("AutoModel"),J$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),qSe=l(),Vi=a("h2"),Gf=a("a"),jJ=a("span"),f(FE.$$.fragment),Y$e=l(),DJ=a("span"),K$e=o("Extending the Auto Classes"),NSe=l(),zn=a("p"),Z$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GJ=a("code"),eIe=o("NewModel"),oIe=o(", make sure you have a "),OJ=a("code"),rIe=o("NewModelConfig"),tIe=o(` then you can add those to the auto
classes like this:`),jSe=l(),f(vE.$$.fragment),DSe=l(),m9=a("p"),aIe=o("You will then be able to use the auto classes like you would usually do!"),GSe=l(),f(Of.$$.fragment),OSe=l(),Xi=a("h2"),Vf=a("a"),VJ=a("span"),f(TE.$$.fragment),nIe=l(),XJ=a("span"),sIe=o("AutoConfig"),VSe=l(),Qo=a("div"),f(ME.$$.fragment),lIe=l(),EE=a("p"),iIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g9=a("a"),dIe=o("from_pretrained()"),cIe=o(" class method."),fIe=l(),CE=a("p"),mIe=o("This class cannot be instantiated directly using "),zJ=a("code"),gIe=o("__init__()"),hIe=o(" (throws an error)."),pIe=l(),mo=a("div"),f(wE.$$.fragment),_Ie=l(),QJ=a("p"),uIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bIe=l(),zi=a("p"),FIe=o("The configuration class to instantiate is selected based on the "),WJ=a("code"),vIe=o("model_type"),TIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HJ=a("code"),MIe=o("pretrained_model_name_or_path"),EIe=o(":"),CIe=l(),F=a("ul"),Xf=a("li"),UJ=a("strong"),wIe=o("albert"),AIe=o(" \u2014 "),h9=a("a"),yIe=o("AlbertConfig"),LIe=o(" (ALBERT model)"),xIe=l(),zf=a("li"),JJ=a("strong"),kIe=o("bart"),SIe=o(" \u2014 "),p9=a("a"),RIe=o("BartConfig"),BIe=o(" (BART model)"),PIe=l(),Qf=a("li"),YJ=a("strong"),$Ie=o("beit"),IIe=o(" \u2014 "),_9=a("a"),qIe=o("BeitConfig"),NIe=o(" (BEiT model)"),jIe=l(),Wf=a("li"),KJ=a("strong"),DIe=o("bert"),GIe=o(" \u2014 "),u9=a("a"),OIe=o("BertConfig"),VIe=o(" (BERT model)"),XIe=l(),Hf=a("li"),ZJ=a("strong"),zIe=o("bert-generation"),QIe=o(" \u2014 "),b9=a("a"),WIe=o("BertGenerationConfig"),HIe=o(" (Bert Generation model)"),UIe=l(),Uf=a("li"),eY=a("strong"),JIe=o("big_bird"),YIe=o(" \u2014 "),F9=a("a"),KIe=o("BigBirdConfig"),ZIe=o(" (BigBird model)"),eqe=l(),Jf=a("li"),oY=a("strong"),oqe=o("bigbird_pegasus"),rqe=o(" \u2014 "),v9=a("a"),tqe=o("BigBirdPegasusConfig"),aqe=o(" (BigBirdPegasus model)"),nqe=l(),Yf=a("li"),rY=a("strong"),sqe=o("blenderbot"),lqe=o(" \u2014 "),T9=a("a"),iqe=o("BlenderbotConfig"),dqe=o(" (Blenderbot model)"),cqe=l(),Kf=a("li"),tY=a("strong"),fqe=o("blenderbot-small"),mqe=o(" \u2014 "),M9=a("a"),gqe=o("BlenderbotSmallConfig"),hqe=o(" (BlenderbotSmall model)"),pqe=l(),Zf=a("li"),aY=a("strong"),_qe=o("camembert"),uqe=o(" \u2014 "),E9=a("a"),bqe=o("CamembertConfig"),Fqe=o(" (CamemBERT model)"),vqe=l(),em=a("li"),nY=a("strong"),Tqe=o("canine"),Mqe=o(" \u2014 "),C9=a("a"),Eqe=o("CanineConfig"),Cqe=o(" (Canine model)"),wqe=l(),om=a("li"),sY=a("strong"),Aqe=o("clip"),yqe=o(" \u2014 "),w9=a("a"),Lqe=o("CLIPConfig"),xqe=o(" (CLIP model)"),kqe=l(),rm=a("li"),lY=a("strong"),Sqe=o("convbert"),Rqe=o(" \u2014 "),A9=a("a"),Bqe=o("ConvBertConfig"),Pqe=o(" (ConvBERT model)"),$qe=l(),tm=a("li"),iY=a("strong"),Iqe=o("convnext"),qqe=o(" \u2014 "),y9=a("a"),Nqe=o("ConvNextConfig"),jqe=o(" (ConvNext model)"),Dqe=l(),am=a("li"),dY=a("strong"),Gqe=o("ctrl"),Oqe=o(" \u2014 "),L9=a("a"),Vqe=o("CTRLConfig"),Xqe=o(" (CTRL model)"),zqe=l(),nm=a("li"),cY=a("strong"),Qqe=o("data2vec-audio"),Wqe=o(" \u2014 "),x9=a("a"),Hqe=o("Data2VecAudioConfig"),Uqe=o(" (Data2VecAudio model)"),Jqe=l(),sm=a("li"),fY=a("strong"),Yqe=o("data2vec-text"),Kqe=o(" \u2014 "),k9=a("a"),Zqe=o("Data2VecTextConfig"),eNe=o(" (Data2VecText model)"),oNe=l(),lm=a("li"),mY=a("strong"),rNe=o("deberta"),tNe=o(" \u2014 "),S9=a("a"),aNe=o("DebertaConfig"),nNe=o(" (DeBERTa model)"),sNe=l(),im=a("li"),gY=a("strong"),lNe=o("deberta-v2"),iNe=o(" \u2014 "),R9=a("a"),dNe=o("DebertaV2Config"),cNe=o(" (DeBERTa-v2 model)"),fNe=l(),dm=a("li"),hY=a("strong"),mNe=o("decision_transformer"),gNe=o(" \u2014 "),B9=a("a"),hNe=o("DecisionTransformerConfig"),pNe=o(" (Decision Transformer model)"),_Ne=l(),cm=a("li"),pY=a("strong"),uNe=o("deit"),bNe=o(" \u2014 "),P9=a("a"),FNe=o("DeiTConfig"),vNe=o(" (DeiT model)"),TNe=l(),fm=a("li"),_Y=a("strong"),MNe=o("detr"),ENe=o(" \u2014 "),$9=a("a"),CNe=o("DetrConfig"),wNe=o(" (DETR model)"),ANe=l(),mm=a("li"),uY=a("strong"),yNe=o("distilbert"),LNe=o(" \u2014 "),I9=a("a"),xNe=o("DistilBertConfig"),kNe=o(" (DistilBERT model)"),SNe=l(),gm=a("li"),bY=a("strong"),RNe=o("dpr"),BNe=o(" \u2014 "),q9=a("a"),PNe=o("DPRConfig"),$Ne=o(" (DPR model)"),INe=l(),hm=a("li"),FY=a("strong"),qNe=o("dpt"),NNe=o(" \u2014 "),N9=a("a"),jNe=o("DPTConfig"),DNe=o(" (DPT model)"),GNe=l(),pm=a("li"),vY=a("strong"),ONe=o("electra"),VNe=o(" \u2014 "),j9=a("a"),XNe=o("ElectraConfig"),zNe=o(" (ELECTRA model)"),QNe=l(),_m=a("li"),TY=a("strong"),WNe=o("encoder-decoder"),HNe=o(" \u2014 "),D9=a("a"),UNe=o("EncoderDecoderConfig"),JNe=o(" (Encoder decoder model)"),YNe=l(),um=a("li"),MY=a("strong"),KNe=o("flaubert"),ZNe=o(" \u2014 "),G9=a("a"),eje=o("FlaubertConfig"),oje=o(" (FlauBERT model)"),rje=l(),bm=a("li"),EY=a("strong"),tje=o("fnet"),aje=o(" \u2014 "),O9=a("a"),nje=o("FNetConfig"),sje=o(" (FNet model)"),lje=l(),Fm=a("li"),CY=a("strong"),ije=o("fsmt"),dje=o(" \u2014 "),V9=a("a"),cje=o("FSMTConfig"),fje=o(" (FairSeq Machine-Translation model)"),mje=l(),vm=a("li"),wY=a("strong"),gje=o("funnel"),hje=o(" \u2014 "),X9=a("a"),pje=o("FunnelConfig"),_je=o(" (Funnel Transformer model)"),uje=l(),Tm=a("li"),AY=a("strong"),bje=o("glpn"),Fje=o(" \u2014 "),z9=a("a"),vje=o("GLPNConfig"),Tje=o(" (GLPN model)"),Mje=l(),Mm=a("li"),yY=a("strong"),Eje=o("gpt2"),Cje=o(" \u2014 "),Q9=a("a"),wje=o("GPT2Config"),Aje=o(" (OpenAI GPT-2 model)"),yje=l(),Em=a("li"),LY=a("strong"),Lje=o("gpt_neo"),xje=o(" \u2014 "),W9=a("a"),kje=o("GPTNeoConfig"),Sje=o(" (GPT Neo model)"),Rje=l(),Cm=a("li"),xY=a("strong"),Bje=o("gptj"),Pje=o(" \u2014 "),H9=a("a"),$je=o("GPTJConfig"),Ije=o(" (GPT-J model)"),qje=l(),wm=a("li"),kY=a("strong"),Nje=o("hubert"),jje=o(" \u2014 "),U9=a("a"),Dje=o("HubertConfig"),Gje=o(" (Hubert model)"),Oje=l(),Am=a("li"),SY=a("strong"),Vje=o("ibert"),Xje=o(" \u2014 "),J9=a("a"),zje=o("IBertConfig"),Qje=o(" (I-BERT model)"),Wje=l(),ym=a("li"),RY=a("strong"),Hje=o("imagegpt"),Uje=o(" \u2014 "),Y9=a("a"),Jje=o("ImageGPTConfig"),Yje=o(" (ImageGPT model)"),Kje=l(),Lm=a("li"),BY=a("strong"),Zje=o("layoutlm"),eDe=o(" \u2014 "),K9=a("a"),oDe=o("LayoutLMConfig"),rDe=o(" (LayoutLM model)"),tDe=l(),xm=a("li"),PY=a("strong"),aDe=o("layoutlmv2"),nDe=o(" \u2014 "),Z9=a("a"),sDe=o("LayoutLMv2Config"),lDe=o(" (LayoutLMv2 model)"),iDe=l(),km=a("li"),$Y=a("strong"),dDe=o("led"),cDe=o(" \u2014 "),ex=a("a"),fDe=o("LEDConfig"),mDe=o(" (LED model)"),gDe=l(),Sm=a("li"),IY=a("strong"),hDe=o("longformer"),pDe=o(" \u2014 "),ox=a("a"),_De=o("LongformerConfig"),uDe=o(" (Longformer model)"),bDe=l(),Rm=a("li"),qY=a("strong"),FDe=o("luke"),vDe=o(" \u2014 "),rx=a("a"),TDe=o("LukeConfig"),MDe=o(" (LUKE model)"),EDe=l(),Bm=a("li"),NY=a("strong"),CDe=o("lxmert"),wDe=o(" \u2014 "),tx=a("a"),ADe=o("LxmertConfig"),yDe=o(" (LXMERT model)"),LDe=l(),Pm=a("li"),jY=a("strong"),xDe=o("m2m_100"),kDe=o(" \u2014 "),ax=a("a"),SDe=o("M2M100Config"),RDe=o(" (M2M100 model)"),BDe=l(),$m=a("li"),DY=a("strong"),PDe=o("marian"),$De=o(" \u2014 "),nx=a("a"),IDe=o("MarianConfig"),qDe=o(" (Marian model)"),NDe=l(),Im=a("li"),GY=a("strong"),jDe=o("maskformer"),DDe=o(" \u2014 "),sx=a("a"),GDe=o("MaskFormerConfig"),ODe=o(" (MaskFormer model)"),VDe=l(),qm=a("li"),OY=a("strong"),XDe=o("mbart"),zDe=o(" \u2014 "),lx=a("a"),QDe=o("MBartConfig"),WDe=o(" (mBART model)"),HDe=l(),Nm=a("li"),VY=a("strong"),UDe=o("megatron-bert"),JDe=o(" \u2014 "),ix=a("a"),YDe=o("MegatronBertConfig"),KDe=o(" (MegatronBert model)"),ZDe=l(),jm=a("li"),XY=a("strong"),eGe=o("mobilebert"),oGe=o(" \u2014 "),dx=a("a"),rGe=o("MobileBertConfig"),tGe=o(" (MobileBERT model)"),aGe=l(),Dm=a("li"),zY=a("strong"),nGe=o("mpnet"),sGe=o(" \u2014 "),cx=a("a"),lGe=o("MPNetConfig"),iGe=o(" (MPNet model)"),dGe=l(),Gm=a("li"),QY=a("strong"),cGe=o("mt5"),fGe=o(" \u2014 "),fx=a("a"),mGe=o("MT5Config"),gGe=o(" (mT5 model)"),hGe=l(),Om=a("li"),WY=a("strong"),pGe=o("nystromformer"),_Ge=o(" \u2014 "),mx=a("a"),uGe=o("NystromformerConfig"),bGe=o(" (Nystromformer model)"),FGe=l(),Vm=a("li"),HY=a("strong"),vGe=o("openai-gpt"),TGe=o(" \u2014 "),gx=a("a"),MGe=o("OpenAIGPTConfig"),EGe=o(" (OpenAI GPT model)"),CGe=l(),Xm=a("li"),UY=a("strong"),wGe=o("pegasus"),AGe=o(" \u2014 "),hx=a("a"),yGe=o("PegasusConfig"),LGe=o(" (Pegasus model)"),xGe=l(),zm=a("li"),JY=a("strong"),kGe=o("perceiver"),SGe=o(" \u2014 "),px=a("a"),RGe=o("PerceiverConfig"),BGe=o(" (Perceiver model)"),PGe=l(),Qm=a("li"),YY=a("strong"),$Ge=o("plbart"),IGe=o(" \u2014 "),_x=a("a"),qGe=o("PLBartConfig"),NGe=o(" (PLBart model)"),jGe=l(),Wm=a("li"),KY=a("strong"),DGe=o("poolformer"),GGe=o(" \u2014 "),ux=a("a"),OGe=o("PoolFormerConfig"),VGe=o(" (PoolFormer model)"),XGe=l(),Hm=a("li"),ZY=a("strong"),zGe=o("prophetnet"),QGe=o(" \u2014 "),bx=a("a"),WGe=o("ProphetNetConfig"),HGe=o(" (ProphetNet model)"),UGe=l(),Um=a("li"),eK=a("strong"),JGe=o("qdqbert"),YGe=o(" \u2014 "),Fx=a("a"),KGe=o("QDQBertConfig"),ZGe=o(" (QDQBert model)"),eOe=l(),Jm=a("li"),oK=a("strong"),oOe=o("rag"),rOe=o(" \u2014 "),vx=a("a"),tOe=o("RagConfig"),aOe=o(" (RAG model)"),nOe=l(),Ym=a("li"),rK=a("strong"),sOe=o("realm"),lOe=o(" \u2014 "),Tx=a("a"),iOe=o("RealmConfig"),dOe=o(" (Realm model)"),cOe=l(),Km=a("li"),tK=a("strong"),fOe=o("reformer"),mOe=o(" \u2014 "),Mx=a("a"),gOe=o("ReformerConfig"),hOe=o(" (Reformer model)"),pOe=l(),Zm=a("li"),aK=a("strong"),_Oe=o("rembert"),uOe=o(" \u2014 "),Ex=a("a"),bOe=o("RemBertConfig"),FOe=o(" (RemBERT model)"),vOe=l(),eg=a("li"),nK=a("strong"),TOe=o("resnet"),MOe=o(" \u2014 "),Cx=a("a"),EOe=o("ResNetConfig"),COe=o(" (ResNet model)"),wOe=l(),og=a("li"),sK=a("strong"),AOe=o("retribert"),yOe=o(" \u2014 "),wx=a("a"),LOe=o("RetriBertConfig"),xOe=o(" (RetriBERT model)"),kOe=l(),rg=a("li"),lK=a("strong"),SOe=o("roberta"),ROe=o(" \u2014 "),Ax=a("a"),BOe=o("RobertaConfig"),POe=o(" (RoBERTa model)"),$Oe=l(),tg=a("li"),iK=a("strong"),IOe=o("roformer"),qOe=o(" \u2014 "),yx=a("a"),NOe=o("RoFormerConfig"),jOe=o(" (RoFormer model)"),DOe=l(),ag=a("li"),dK=a("strong"),GOe=o("segformer"),OOe=o(" \u2014 "),Lx=a("a"),VOe=o("SegformerConfig"),XOe=o(" (SegFormer model)"),zOe=l(),ng=a("li"),cK=a("strong"),QOe=o("sew"),WOe=o(" \u2014 "),xx=a("a"),HOe=o("SEWConfig"),UOe=o(" (SEW model)"),JOe=l(),sg=a("li"),fK=a("strong"),YOe=o("sew-d"),KOe=o(" \u2014 "),kx=a("a"),ZOe=o("SEWDConfig"),eVe=o(" (SEW-D model)"),oVe=l(),lg=a("li"),mK=a("strong"),rVe=o("speech-encoder-decoder"),tVe=o(" \u2014 "),Sx=a("a"),aVe=o("SpeechEncoderDecoderConfig"),nVe=o(" (Speech Encoder decoder model)"),sVe=l(),ig=a("li"),gK=a("strong"),lVe=o("speech_to_text"),iVe=o(" \u2014 "),Rx=a("a"),dVe=o("Speech2TextConfig"),cVe=o(" (Speech2Text model)"),fVe=l(),dg=a("li"),hK=a("strong"),mVe=o("speech_to_text_2"),gVe=o(" \u2014 "),Bx=a("a"),hVe=o("Speech2Text2Config"),pVe=o(" (Speech2Text2 model)"),_Ve=l(),cg=a("li"),pK=a("strong"),uVe=o("splinter"),bVe=o(" \u2014 "),Px=a("a"),FVe=o("SplinterConfig"),vVe=o(" (Splinter model)"),TVe=l(),fg=a("li"),_K=a("strong"),MVe=o("squeezebert"),EVe=o(" \u2014 "),$x=a("a"),CVe=o("SqueezeBertConfig"),wVe=o(" (SqueezeBERT model)"),AVe=l(),mg=a("li"),uK=a("strong"),yVe=o("swin"),LVe=o(" \u2014 "),Ix=a("a"),xVe=o("SwinConfig"),kVe=o(" (Swin model)"),SVe=l(),gg=a("li"),bK=a("strong"),RVe=o("t5"),BVe=o(" \u2014 "),qx=a("a"),PVe=o("T5Config"),$Ve=o(" (T5 model)"),IVe=l(),hg=a("li"),FK=a("strong"),qVe=o("tapas"),NVe=o(" \u2014 "),Nx=a("a"),jVe=o("TapasConfig"),DVe=o(" (TAPAS model)"),GVe=l(),pg=a("li"),vK=a("strong"),OVe=o("transfo-xl"),VVe=o(" \u2014 "),jx=a("a"),XVe=o("TransfoXLConfig"),zVe=o(" (Transformer-XL model)"),QVe=l(),_g=a("li"),TK=a("strong"),WVe=o("trocr"),HVe=o(" \u2014 "),Dx=a("a"),UVe=o("TrOCRConfig"),JVe=o(" (TrOCR model)"),YVe=l(),ug=a("li"),MK=a("strong"),KVe=o("unispeech"),ZVe=o(" \u2014 "),Gx=a("a"),eXe=o("UniSpeechConfig"),oXe=o(" (UniSpeech model)"),rXe=l(),bg=a("li"),EK=a("strong"),tXe=o("unispeech-sat"),aXe=o(" \u2014 "),Ox=a("a"),nXe=o("UniSpeechSatConfig"),sXe=o(" (UniSpeechSat model)"),lXe=l(),Fg=a("li"),CK=a("strong"),iXe=o("van"),dXe=o(" \u2014 "),Vx=a("a"),cXe=o("VanConfig"),fXe=o(" (VAN model)"),mXe=l(),vg=a("li"),wK=a("strong"),gXe=o("vilt"),hXe=o(" \u2014 "),Xx=a("a"),pXe=o("ViltConfig"),_Xe=o(" (ViLT model)"),uXe=l(),Tg=a("li"),AK=a("strong"),bXe=o("vision-encoder-decoder"),FXe=o(" \u2014 "),zx=a("a"),vXe=o("VisionEncoderDecoderConfig"),TXe=o(" (Vision Encoder decoder model)"),MXe=l(),Mg=a("li"),yK=a("strong"),EXe=o("vision-text-dual-encoder"),CXe=o(" \u2014 "),Qx=a("a"),wXe=o("VisionTextDualEncoderConfig"),AXe=o(" (VisionTextDualEncoder model)"),yXe=l(),Eg=a("li"),LK=a("strong"),LXe=o("visual_bert"),xXe=o(" \u2014 "),Wx=a("a"),kXe=o("VisualBertConfig"),SXe=o(" (VisualBert model)"),RXe=l(),Cg=a("li"),xK=a("strong"),BXe=o("vit"),PXe=o(" \u2014 "),Hx=a("a"),$Xe=o("ViTConfig"),IXe=o(" (ViT model)"),qXe=l(),wg=a("li"),kK=a("strong"),NXe=o("vit_mae"),jXe=o(" \u2014 "),Ux=a("a"),DXe=o("ViTMAEConfig"),GXe=o(" (ViTMAE model)"),OXe=l(),Ag=a("li"),SK=a("strong"),VXe=o("wav2vec2"),XXe=o(" \u2014 "),Jx=a("a"),zXe=o("Wav2Vec2Config"),QXe=o(" (Wav2Vec2 model)"),WXe=l(),yg=a("li"),RK=a("strong"),HXe=o("wavlm"),UXe=o(" \u2014 "),Yx=a("a"),JXe=o("WavLMConfig"),YXe=o(" (WavLM model)"),KXe=l(),Lg=a("li"),BK=a("strong"),ZXe=o("xglm"),eze=o(" \u2014 "),Kx=a("a"),oze=o("XGLMConfig"),rze=o(" (XGLM model)"),tze=l(),xg=a("li"),PK=a("strong"),aze=o("xlm"),nze=o(" \u2014 "),Zx=a("a"),sze=o("XLMConfig"),lze=o(" (XLM model)"),ize=l(),kg=a("li"),$K=a("strong"),dze=o("xlm-prophetnet"),cze=o(" \u2014 "),ek=a("a"),fze=o("XLMProphetNetConfig"),mze=o(" (XLMProphetNet model)"),gze=l(),Sg=a("li"),IK=a("strong"),hze=o("xlm-roberta"),pze=o(" \u2014 "),ok=a("a"),_ze=o("XLMRobertaConfig"),uze=o(" (XLM-RoBERTa model)"),bze=l(),Rg=a("li"),qK=a("strong"),Fze=o("xlm-roberta-xl"),vze=o(" \u2014 "),rk=a("a"),Tze=o("XLMRobertaXLConfig"),Mze=o(" (XLM-RoBERTa-XL model)"),Eze=l(),Bg=a("li"),NK=a("strong"),Cze=o("xlnet"),wze=o(" \u2014 "),tk=a("a"),Aze=o("XLNetConfig"),yze=o(" (XLNet model)"),Lze=l(),Pg=a("li"),jK=a("strong"),xze=o("yoso"),kze=o(" \u2014 "),ak=a("a"),Sze=o("YosoConfig"),Rze=o(" (YOSO model)"),Bze=l(),DK=a("p"),Pze=o("Examples:"),$ze=l(),f(AE.$$.fragment),Ize=l(),$g=a("div"),f(yE.$$.fragment),qze=l(),GK=a("p"),Nze=o("Register a new configuration for this class."),XSe=l(),Qi=a("h2"),Ig=a("a"),OK=a("span"),f(LE.$$.fragment),jze=l(),VK=a("span"),Dze=o("AutoTokenizer"),zSe=l(),Wo=a("div"),f(xE.$$.fragment),Gze=l(),kE=a("p"),Oze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nk=a("a"),Vze=o("AutoTokenizer.from_pretrained()"),Xze=o(" class method."),zze=l(),SE=a("p"),Qze=o("This class cannot be instantiated directly using "),XK=a("code"),Wze=o("__init__()"),Hze=o(" (throws an error)."),Uze=l(),go=a("div"),f(RE.$$.fragment),Jze=l(),zK=a("p"),Yze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Kze=l(),Oa=a("p"),Zze=o("The tokenizer class to instantiate is selected based on the "),QK=a("code"),eQe=o("model_type"),oQe=o(` property of the config object (either
passed as an argument or loaded from `),WK=a("code"),rQe=o("pretrained_model_name_or_path"),tQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HK=a("code"),aQe=o("pretrained_model_name_or_path"),nQe=o(":"),sQe=l(),C=a("ul"),Qn=a("li"),UK=a("strong"),lQe=o("albert"),iQe=o(" \u2014 "),sk=a("a"),dQe=o("AlbertTokenizer"),cQe=o(" or "),lk=a("a"),fQe=o("AlbertTokenizerFast"),mQe=o(" (ALBERT model)"),gQe=l(),Wn=a("li"),JK=a("strong"),hQe=o("bart"),pQe=o(" \u2014 "),ik=a("a"),_Qe=o("BartTokenizer"),uQe=o(" or "),dk=a("a"),bQe=o("BartTokenizerFast"),FQe=o(" (BART model)"),vQe=l(),Hn=a("li"),YK=a("strong"),TQe=o("barthez"),MQe=o(" \u2014 "),ck=a("a"),EQe=o("BarthezTokenizer"),CQe=o(" or "),fk=a("a"),wQe=o("BarthezTokenizerFast"),AQe=o(" (BARThez model)"),yQe=l(),qg=a("li"),KK=a("strong"),LQe=o("bartpho"),xQe=o(" \u2014 "),mk=a("a"),kQe=o("BartphoTokenizer"),SQe=o(" (BARTpho model)"),RQe=l(),Un=a("li"),ZK=a("strong"),BQe=o("bert"),PQe=o(" \u2014 "),gk=a("a"),$Qe=o("BertTokenizer"),IQe=o(" or "),hk=a("a"),qQe=o("BertTokenizerFast"),NQe=o(" (BERT model)"),jQe=l(),Ng=a("li"),eZ=a("strong"),DQe=o("bert-generation"),GQe=o(" \u2014 "),pk=a("a"),OQe=o("BertGenerationTokenizer"),VQe=o(" (Bert Generation model)"),XQe=l(),jg=a("li"),oZ=a("strong"),zQe=o("bert-japanese"),QQe=o(" \u2014 "),_k=a("a"),WQe=o("BertJapaneseTokenizer"),HQe=o(" (BertJapanese model)"),UQe=l(),Dg=a("li"),rZ=a("strong"),JQe=o("bertweet"),YQe=o(" \u2014 "),uk=a("a"),KQe=o("BertweetTokenizer"),ZQe=o(" (Bertweet model)"),eWe=l(),Jn=a("li"),tZ=a("strong"),oWe=o("big_bird"),rWe=o(" \u2014 "),bk=a("a"),tWe=o("BigBirdTokenizer"),aWe=o(" or "),Fk=a("a"),nWe=o("BigBirdTokenizerFast"),sWe=o(" (BigBird model)"),lWe=l(),Yn=a("li"),aZ=a("strong"),iWe=o("bigbird_pegasus"),dWe=o(" \u2014 "),vk=a("a"),cWe=o("PegasusTokenizer"),fWe=o(" or "),Tk=a("a"),mWe=o("PegasusTokenizerFast"),gWe=o(" (BigBirdPegasus model)"),hWe=l(),Kn=a("li"),nZ=a("strong"),pWe=o("blenderbot"),_We=o(" \u2014 "),Mk=a("a"),uWe=o("BlenderbotTokenizer"),bWe=o(" or "),Ek=a("a"),FWe=o("BlenderbotTokenizerFast"),vWe=o(" (Blenderbot model)"),TWe=l(),Gg=a("li"),sZ=a("strong"),MWe=o("blenderbot-small"),EWe=o(" \u2014 "),Ck=a("a"),CWe=o("BlenderbotSmallTokenizer"),wWe=o(" (BlenderbotSmall model)"),AWe=l(),Og=a("li"),lZ=a("strong"),yWe=o("byt5"),LWe=o(" \u2014 "),wk=a("a"),xWe=o("ByT5Tokenizer"),kWe=o(" (ByT5 model)"),SWe=l(),Zn=a("li"),iZ=a("strong"),RWe=o("camembert"),BWe=o(" \u2014 "),Ak=a("a"),PWe=o("CamembertTokenizer"),$We=o(" or "),yk=a("a"),IWe=o("CamembertTokenizerFast"),qWe=o(" (CamemBERT model)"),NWe=l(),Vg=a("li"),dZ=a("strong"),jWe=o("canine"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("CanineTokenizer"),OWe=o(" (Canine model)"),VWe=l(),es=a("li"),cZ=a("strong"),XWe=o("clip"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("CLIPTokenizer"),WWe=o(" or "),kk=a("a"),HWe=o("CLIPTokenizerFast"),UWe=o(" (CLIP model)"),JWe=l(),os=a("li"),fZ=a("strong"),YWe=o("convbert"),KWe=o(" \u2014 "),Sk=a("a"),ZWe=o("ConvBertTokenizer"),eHe=o(" or "),Rk=a("a"),oHe=o("ConvBertTokenizerFast"),rHe=o(" (ConvBERT model)"),tHe=l(),rs=a("li"),mZ=a("strong"),aHe=o("cpm"),nHe=o(" \u2014 "),Bk=a("a"),sHe=o("CpmTokenizer"),lHe=o(" or "),gZ=a("code"),iHe=o("CpmTokenizerFast"),dHe=o(" (CPM model)"),cHe=l(),Xg=a("li"),hZ=a("strong"),fHe=o("ctrl"),mHe=o(" \u2014 "),Pk=a("a"),gHe=o("CTRLTokenizer"),hHe=o(" (CTRL model)"),pHe=l(),ts=a("li"),pZ=a("strong"),_He=o("deberta"),uHe=o(" \u2014 "),$k=a("a"),bHe=o("DebertaTokenizer"),FHe=o(" or "),Ik=a("a"),vHe=o("DebertaTokenizerFast"),THe=o(" (DeBERTa model)"),MHe=l(),zg=a("li"),_Z=a("strong"),EHe=o("deberta-v2"),CHe=o(" \u2014 "),qk=a("a"),wHe=o("DebertaV2Tokenizer"),AHe=o(" (DeBERTa-v2 model)"),yHe=l(),as=a("li"),uZ=a("strong"),LHe=o("distilbert"),xHe=o(" \u2014 "),Nk=a("a"),kHe=o("DistilBertTokenizer"),SHe=o(" or "),jk=a("a"),RHe=o("DistilBertTokenizerFast"),BHe=o(" (DistilBERT model)"),PHe=l(),ns=a("li"),bZ=a("strong"),$He=o("dpr"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("DPRQuestionEncoderTokenizer"),NHe=o(" or "),Gk=a("a"),jHe=o("DPRQuestionEncoderTokenizerFast"),DHe=o(" (DPR model)"),GHe=l(),ss=a("li"),FZ=a("strong"),OHe=o("electra"),VHe=o(" \u2014 "),Ok=a("a"),XHe=o("ElectraTokenizer"),zHe=o(" or "),Vk=a("a"),QHe=o("ElectraTokenizerFast"),WHe=o(" (ELECTRA model)"),HHe=l(),Qg=a("li"),vZ=a("strong"),UHe=o("flaubert"),JHe=o(" \u2014 "),Xk=a("a"),YHe=o("FlaubertTokenizer"),KHe=o(" (FlauBERT model)"),ZHe=l(),ls=a("li"),TZ=a("strong"),eUe=o("fnet"),oUe=o(" \u2014 "),zk=a("a"),rUe=o("FNetTokenizer"),tUe=o(" or "),Qk=a("a"),aUe=o("FNetTokenizerFast"),nUe=o(" (FNet model)"),sUe=l(),Wg=a("li"),MZ=a("strong"),lUe=o("fsmt"),iUe=o(" \u2014 "),Wk=a("a"),dUe=o("FSMTTokenizer"),cUe=o(" (FairSeq Machine-Translation model)"),fUe=l(),is=a("li"),EZ=a("strong"),mUe=o("funnel"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("FunnelTokenizer"),pUe=o(" or "),Uk=a("a"),_Ue=o("FunnelTokenizerFast"),uUe=o(" (Funnel Transformer model)"),bUe=l(),ds=a("li"),CZ=a("strong"),FUe=o("gpt2"),vUe=o(" \u2014 "),Jk=a("a"),TUe=o("GPT2Tokenizer"),MUe=o(" or "),Yk=a("a"),EUe=o("GPT2TokenizerFast"),CUe=o(" (OpenAI GPT-2 model)"),wUe=l(),cs=a("li"),wZ=a("strong"),AUe=o("gpt_neo"),yUe=o(" \u2014 "),Kk=a("a"),LUe=o("GPT2Tokenizer"),xUe=o(" or "),Zk=a("a"),kUe=o("GPT2TokenizerFast"),SUe=o(" (GPT Neo model)"),RUe=l(),fs=a("li"),AZ=a("strong"),BUe=o("herbert"),PUe=o(" \u2014 "),eS=a("a"),$Ue=o("HerbertTokenizer"),IUe=o(" or "),oS=a("a"),qUe=o("HerbertTokenizerFast"),NUe=o(" (HerBERT model)"),jUe=l(),Hg=a("li"),yZ=a("strong"),DUe=o("hubert"),GUe=o(" \u2014 "),rS=a("a"),OUe=o("Wav2Vec2CTCTokenizer"),VUe=o(" (Hubert model)"),XUe=l(),ms=a("li"),LZ=a("strong"),zUe=o("ibert"),QUe=o(" \u2014 "),tS=a("a"),WUe=o("RobertaTokenizer"),HUe=o(" or "),aS=a("a"),UUe=o("RobertaTokenizerFast"),JUe=o(" (I-BERT model)"),YUe=l(),gs=a("li"),xZ=a("strong"),KUe=o("layoutlm"),ZUe=o(" \u2014 "),nS=a("a"),eJe=o("LayoutLMTokenizer"),oJe=o(" or "),sS=a("a"),rJe=o("LayoutLMTokenizerFast"),tJe=o(" (LayoutLM model)"),aJe=l(),hs=a("li"),kZ=a("strong"),nJe=o("layoutlmv2"),sJe=o(" \u2014 "),lS=a("a"),lJe=o("LayoutLMv2Tokenizer"),iJe=o(" or "),iS=a("a"),dJe=o("LayoutLMv2TokenizerFast"),cJe=o(" (LayoutLMv2 model)"),fJe=l(),ps=a("li"),SZ=a("strong"),mJe=o("layoutxlm"),gJe=o(" \u2014 "),dS=a("a"),hJe=o("LayoutXLMTokenizer"),pJe=o(" or "),cS=a("a"),_Je=o("LayoutXLMTokenizerFast"),uJe=o(" (LayoutXLM model)"),bJe=l(),_s=a("li"),RZ=a("strong"),FJe=o("led"),vJe=o(" \u2014 "),fS=a("a"),TJe=o("LEDTokenizer"),MJe=o(" or "),mS=a("a"),EJe=o("LEDTokenizerFast"),CJe=o(" (LED model)"),wJe=l(),us=a("li"),BZ=a("strong"),AJe=o("longformer"),yJe=o(" \u2014 "),gS=a("a"),LJe=o("LongformerTokenizer"),xJe=o(" or "),hS=a("a"),kJe=o("LongformerTokenizerFast"),SJe=o(" (Longformer model)"),RJe=l(),Ug=a("li"),PZ=a("strong"),BJe=o("luke"),PJe=o(" \u2014 "),pS=a("a"),$Je=o("LukeTokenizer"),IJe=o(" (LUKE model)"),qJe=l(),bs=a("li"),$Z=a("strong"),NJe=o("lxmert"),jJe=o(" \u2014 "),_S=a("a"),DJe=o("LxmertTokenizer"),GJe=o(" or "),uS=a("a"),OJe=o("LxmertTokenizerFast"),VJe=o(" (LXMERT model)"),XJe=l(),Jg=a("li"),IZ=a("strong"),zJe=o("m2m_100"),QJe=o(" \u2014 "),bS=a("a"),WJe=o("M2M100Tokenizer"),HJe=o(" (M2M100 model)"),UJe=l(),Yg=a("li"),qZ=a("strong"),JJe=o("marian"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("MarianTokenizer"),ZJe=o(" (Marian model)"),eYe=l(),Fs=a("li"),NZ=a("strong"),oYe=o("mbart"),rYe=o(" \u2014 "),vS=a("a"),tYe=o("MBartTokenizer"),aYe=o(" or "),TS=a("a"),nYe=o("MBartTokenizerFast"),sYe=o(" (mBART model)"),lYe=l(),vs=a("li"),jZ=a("strong"),iYe=o("mbart50"),dYe=o(" \u2014 "),MS=a("a"),cYe=o("MBart50Tokenizer"),fYe=o(" or "),ES=a("a"),mYe=o("MBart50TokenizerFast"),gYe=o(" (mBART-50 model)"),hYe=l(),Kg=a("li"),DZ=a("strong"),pYe=o("mluke"),_Ye=o(" \u2014 "),CS=a("a"),uYe=o("MLukeTokenizer"),bYe=o(" (mLUKE model)"),FYe=l(),Ts=a("li"),GZ=a("strong"),vYe=o("mobilebert"),TYe=o(" \u2014 "),wS=a("a"),MYe=o("MobileBertTokenizer"),EYe=o(" or "),AS=a("a"),CYe=o("MobileBertTokenizerFast"),wYe=o(" (MobileBERT model)"),AYe=l(),Ms=a("li"),OZ=a("strong"),yYe=o("mpnet"),LYe=o(" \u2014 "),yS=a("a"),xYe=o("MPNetTokenizer"),kYe=o(" or "),LS=a("a"),SYe=o("MPNetTokenizerFast"),RYe=o(" (MPNet model)"),BYe=l(),Es=a("li"),VZ=a("strong"),PYe=o("mt5"),$Ye=o(" \u2014 "),xS=a("a"),IYe=o("MT5Tokenizer"),qYe=o(" or "),kS=a("a"),NYe=o("MT5TokenizerFast"),jYe=o(" (mT5 model)"),DYe=l(),Cs=a("li"),XZ=a("strong"),GYe=o("openai-gpt"),OYe=o(" \u2014 "),SS=a("a"),VYe=o("OpenAIGPTTokenizer"),XYe=o(" or "),RS=a("a"),zYe=o("OpenAIGPTTokenizerFast"),QYe=o(" (OpenAI GPT model)"),WYe=l(),ws=a("li"),zZ=a("strong"),HYe=o("pegasus"),UYe=o(" \u2014 "),BS=a("a"),JYe=o("PegasusTokenizer"),YYe=o(" or "),PS=a("a"),KYe=o("PegasusTokenizerFast"),ZYe=o(" (Pegasus model)"),eKe=l(),Zg=a("li"),QZ=a("strong"),oKe=o("perceiver"),rKe=o(" \u2014 "),$S=a("a"),tKe=o("PerceiverTokenizer"),aKe=o(" (Perceiver model)"),nKe=l(),eh=a("li"),WZ=a("strong"),sKe=o("phobert"),lKe=o(" \u2014 "),IS=a("a"),iKe=o("PhobertTokenizer"),dKe=o(" (PhoBERT model)"),cKe=l(),oh=a("li"),HZ=a("strong"),fKe=o("plbart"),mKe=o(" \u2014 "),qS=a("a"),gKe=o("PLBartTokenizer"),hKe=o(" (PLBart model)"),pKe=l(),rh=a("li"),UZ=a("strong"),_Ke=o("prophetnet"),uKe=o(" \u2014 "),NS=a("a"),bKe=o("ProphetNetTokenizer"),FKe=o(" (ProphetNet model)"),vKe=l(),As=a("li"),JZ=a("strong"),TKe=o("qdqbert"),MKe=o(" \u2014 "),jS=a("a"),EKe=o("BertTokenizer"),CKe=o(" or "),DS=a("a"),wKe=o("BertTokenizerFast"),AKe=o(" (QDQBert model)"),yKe=l(),th=a("li"),YZ=a("strong"),LKe=o("rag"),xKe=o(" \u2014 "),GS=a("a"),kKe=o("RagTokenizer"),SKe=o(" (RAG model)"),RKe=l(),ys=a("li"),KZ=a("strong"),BKe=o("realm"),PKe=o(" \u2014 "),OS=a("a"),$Ke=o("RealmTokenizer"),IKe=o(" or "),VS=a("a"),qKe=o("RealmTokenizerFast"),NKe=o(" (Realm model)"),jKe=l(),Ls=a("li"),ZZ=a("strong"),DKe=o("reformer"),GKe=o(" \u2014 "),XS=a("a"),OKe=o("ReformerTokenizer"),VKe=o(" or "),zS=a("a"),XKe=o("ReformerTokenizerFast"),zKe=o(" (Reformer model)"),QKe=l(),xs=a("li"),eee=a("strong"),WKe=o("rembert"),HKe=o(" \u2014 "),QS=a("a"),UKe=o("RemBertTokenizer"),JKe=o(" or "),WS=a("a"),YKe=o("RemBertTokenizerFast"),KKe=o(" (RemBERT model)"),ZKe=l(),ks=a("li"),oee=a("strong"),eZe=o("retribert"),oZe=o(" \u2014 "),HS=a("a"),rZe=o("RetriBertTokenizer"),tZe=o(" or "),US=a("a"),aZe=o("RetriBertTokenizerFast"),nZe=o(" (RetriBERT model)"),sZe=l(),Ss=a("li"),ree=a("strong"),lZe=o("roberta"),iZe=o(" \u2014 "),JS=a("a"),dZe=o("RobertaTokenizer"),cZe=o(" or "),YS=a("a"),fZe=o("RobertaTokenizerFast"),mZe=o(" (RoBERTa model)"),gZe=l(),Rs=a("li"),tee=a("strong"),hZe=o("roformer"),pZe=o(" \u2014 "),KS=a("a"),_Ze=o("RoFormerTokenizer"),uZe=o(" or "),ZS=a("a"),bZe=o("RoFormerTokenizerFast"),FZe=o(" (RoFormer model)"),vZe=l(),ah=a("li"),aee=a("strong"),TZe=o("speech_to_text"),MZe=o(" \u2014 "),eR=a("a"),EZe=o("Speech2TextTokenizer"),CZe=o(" (Speech2Text model)"),wZe=l(),nh=a("li"),nee=a("strong"),AZe=o("speech_to_text_2"),yZe=o(" \u2014 "),oR=a("a"),LZe=o("Speech2Text2Tokenizer"),xZe=o(" (Speech2Text2 model)"),kZe=l(),Bs=a("li"),see=a("strong"),SZe=o("splinter"),RZe=o(" \u2014 "),rR=a("a"),BZe=o("SplinterTokenizer"),PZe=o(" or "),tR=a("a"),$Ze=o("SplinterTokenizerFast"),IZe=o(" (Splinter model)"),qZe=l(),Ps=a("li"),lee=a("strong"),NZe=o("squeezebert"),jZe=o(" \u2014 "),aR=a("a"),DZe=o("SqueezeBertTokenizer"),GZe=o(" or "),nR=a("a"),OZe=o("SqueezeBertTokenizerFast"),VZe=o(" (SqueezeBERT model)"),XZe=l(),$s=a("li"),iee=a("strong"),zZe=o("t5"),QZe=o(" \u2014 "),sR=a("a"),WZe=o("T5Tokenizer"),HZe=o(" or "),lR=a("a"),UZe=o("T5TokenizerFast"),JZe=o(" (T5 model)"),YZe=l(),sh=a("li"),dee=a("strong"),KZe=o("tapas"),ZZe=o(" \u2014 "),iR=a("a"),eeo=o("TapasTokenizer"),oeo=o(" (TAPAS model)"),reo=l(),lh=a("li"),cee=a("strong"),teo=o("transfo-xl"),aeo=o(" \u2014 "),dR=a("a"),neo=o("TransfoXLTokenizer"),seo=o(" (Transformer-XL model)"),leo=l(),ih=a("li"),fee=a("strong"),ieo=o("wav2vec2"),deo=o(" \u2014 "),cR=a("a"),ceo=o("Wav2Vec2CTCTokenizer"),feo=o(" (Wav2Vec2 model)"),meo=l(),dh=a("li"),mee=a("strong"),geo=o("wav2vec2_phoneme"),heo=o(" \u2014 "),fR=a("a"),peo=o("Wav2Vec2PhonemeCTCTokenizer"),_eo=o(" (Wav2Vec2Phoneme model)"),ueo=l(),Is=a("li"),gee=a("strong"),beo=o("xglm"),Feo=o(" \u2014 "),mR=a("a"),veo=o("XGLMTokenizer"),Teo=o(" or "),gR=a("a"),Meo=o("XGLMTokenizerFast"),Eeo=o(" (XGLM model)"),Ceo=l(),ch=a("li"),hee=a("strong"),weo=o("xlm"),Aeo=o(" \u2014 "),hR=a("a"),yeo=o("XLMTokenizer"),Leo=o(" (XLM model)"),xeo=l(),fh=a("li"),pee=a("strong"),keo=o("xlm-prophetnet"),Seo=o(" \u2014 "),pR=a("a"),Reo=o("XLMProphetNetTokenizer"),Beo=o(" (XLMProphetNet model)"),Peo=l(),qs=a("li"),_ee=a("strong"),$eo=o("xlm-roberta"),Ieo=o(" \u2014 "),_R=a("a"),qeo=o("XLMRobertaTokenizer"),Neo=o(" or "),uR=a("a"),jeo=o("XLMRobertaTokenizerFast"),Deo=o(" (XLM-RoBERTa model)"),Geo=l(),Ns=a("li"),uee=a("strong"),Oeo=o("xlnet"),Veo=o(" \u2014 "),bR=a("a"),Xeo=o("XLNetTokenizer"),zeo=o(" or "),FR=a("a"),Qeo=o("XLNetTokenizerFast"),Weo=o(" (XLNet model)"),Heo=l(),bee=a("p"),Ueo=o("Examples:"),Jeo=l(),f(BE.$$.fragment),Yeo=l(),mh=a("div"),f(PE.$$.fragment),Keo=l(),Fee=a("p"),Zeo=o("Register a new tokenizer in this mapping."),QSe=l(),Wi=a("h2"),gh=a("a"),vee=a("span"),f($E.$$.fragment),eoo=l(),Tee=a("span"),ooo=o("AutoFeatureExtractor"),WSe=l(),Ho=a("div"),f(IE.$$.fragment),roo=l(),qE=a("p"),too=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vR=a("a"),aoo=o("AutoFeatureExtractor.from_pretrained()"),noo=o(" class method."),soo=l(),NE=a("p"),loo=o("This class cannot be instantiated directly using "),Mee=a("code"),ioo=o("__init__()"),doo=o(" (throws an error)."),coo=l(),$e=a("div"),f(jE.$$.fragment),foo=l(),Eee=a("p"),moo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),goo=l(),Va=a("p"),hoo=o("The feature extractor class to instantiate is selected based on the "),Cee=a("code"),poo=o("model_type"),_oo=o(` property of the config object
(either passed as an argument or loaded from `),wee=a("code"),uoo=o("pretrained_model_name_or_path"),boo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Aee=a("code"),Foo=o("pretrained_model_name_or_path"),voo=o(":"),Too=l(),te=a("ul"),hh=a("li"),yee=a("strong"),Moo=o("beit"),Eoo=o(" \u2014 "),TR=a("a"),Coo=o("BeitFeatureExtractor"),woo=o(" (BEiT model)"),Aoo=l(),ph=a("li"),Lee=a("strong"),yoo=o("clip"),Loo=o(" \u2014 "),MR=a("a"),xoo=o("CLIPFeatureExtractor"),koo=o(" (CLIP model)"),Soo=l(),_h=a("li"),xee=a("strong"),Roo=o("convnext"),Boo=o(" \u2014 "),ER=a("a"),Poo=o("ConvNextFeatureExtractor"),$oo=o(" (ConvNext model)"),Ioo=l(),uh=a("li"),kee=a("strong"),qoo=o("deit"),Noo=o(" \u2014 "),CR=a("a"),joo=o("DeiTFeatureExtractor"),Doo=o(" (DeiT model)"),Goo=l(),bh=a("li"),See=a("strong"),Ooo=o("detr"),Voo=o(" \u2014 "),wR=a("a"),Xoo=o("DetrFeatureExtractor"),zoo=o(" (DETR model)"),Qoo=l(),Fh=a("li"),Ree=a("strong"),Woo=o("hubert"),Hoo=o(" \u2014 "),AR=a("a"),Uoo=o("Wav2Vec2FeatureExtractor"),Joo=o(" (Hubert model)"),Yoo=l(),vh=a("li"),Bee=a("strong"),Koo=o("layoutlmv2"),Zoo=o(" \u2014 "),yR=a("a"),ero=o("LayoutLMv2FeatureExtractor"),oro=o(" (LayoutLMv2 model)"),rro=l(),Th=a("li"),Pee=a("strong"),tro=o("maskformer"),aro=o(" \u2014 "),LR=a("a"),nro=o("MaskFormerFeatureExtractor"),sro=o(" (MaskFormer model)"),lro=l(),Mh=a("li"),$ee=a("strong"),iro=o("perceiver"),dro=o(" \u2014 "),xR=a("a"),cro=o("PerceiverFeatureExtractor"),fro=o(" (Perceiver model)"),mro=l(),Eh=a("li"),Iee=a("strong"),gro=o("poolformer"),hro=o(" \u2014 "),kR=a("a"),pro=o("PoolFormerFeatureExtractor"),_ro=o(" (PoolFormer model)"),uro=l(),Ch=a("li"),qee=a("strong"),bro=o("resnet"),Fro=o(" \u2014 "),SR=a("a"),vro=o("ConvNextFeatureExtractor"),Tro=o(" (ResNet model)"),Mro=l(),wh=a("li"),Nee=a("strong"),Ero=o("segformer"),Cro=o(" \u2014 "),RR=a("a"),wro=o("SegformerFeatureExtractor"),Aro=o(" (SegFormer model)"),yro=l(),Ah=a("li"),jee=a("strong"),Lro=o("speech_to_text"),xro=o(" \u2014 "),BR=a("a"),kro=o("Speech2TextFeatureExtractor"),Sro=o(" (Speech2Text model)"),Rro=l(),yh=a("li"),Dee=a("strong"),Bro=o("swin"),Pro=o(" \u2014 "),PR=a("a"),$ro=o("ViTFeatureExtractor"),Iro=o(" (Swin model)"),qro=l(),Lh=a("li"),Gee=a("strong"),Nro=o("van"),jro=o(" \u2014 "),$R=a("a"),Dro=o("ConvNextFeatureExtractor"),Gro=o(" (VAN model)"),Oro=l(),xh=a("li"),Oee=a("strong"),Vro=o("vit"),Xro=o(" \u2014 "),IR=a("a"),zro=o("ViTFeatureExtractor"),Qro=o(" (ViT model)"),Wro=l(),kh=a("li"),Vee=a("strong"),Hro=o("vit_mae"),Uro=o(" \u2014 "),qR=a("a"),Jro=o("ViTFeatureExtractor"),Yro=o(" (ViTMAE model)"),Kro=l(),Sh=a("li"),Xee=a("strong"),Zro=o("wav2vec2"),eto=o(" \u2014 "),NR=a("a"),oto=o("Wav2Vec2FeatureExtractor"),rto=o(" (Wav2Vec2 model)"),tto=l(),f(Rh.$$.fragment),ato=l(),zee=a("p"),nto=o("Examples:"),sto=l(),f(DE.$$.fragment),lto=l(),Bh=a("div"),f(GE.$$.fragment),ito=l(),Qee=a("p"),dto=o("Register a new feature extractor for this class."),HSe=l(),Hi=a("h2"),Ph=a("a"),Wee=a("span"),f(OE.$$.fragment),cto=l(),Hee=a("span"),fto=o("AutoProcessor"),USe=l(),Uo=a("div"),f(VE.$$.fragment),mto=l(),XE=a("p"),gto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=a("a"),hto=o("AutoProcessor.from_pretrained()"),pto=o(" class method."),_to=l(),zE=a("p"),uto=o("This class cannot be instantiated directly using "),Uee=a("code"),bto=o("__init__()"),Fto=o(" (throws an error)."),vto=l(),Ie=a("div"),f(QE.$$.fragment),Tto=l(),Jee=a("p"),Mto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Eto=l(),Ui=a("p"),Cto=o("The processor class to instantiate is selected based on the "),Yee=a("code"),wto=o("model_type"),Ato=o(` property of the config object (either
passed as an argument or loaded from `),Kee=a("code"),yto=o("pretrained_model_name_or_path"),Lto=o(" if possible):"),xto=l(),ke=a("ul"),$h=a("li"),Zee=a("strong"),kto=o("clip"),Sto=o(" \u2014 "),DR=a("a"),Rto=o("CLIPProcessor"),Bto=o(" (CLIP model)"),Pto=l(),Ih=a("li"),eoe=a("strong"),$to=o("layoutlmv2"),Ito=o(" \u2014 "),GR=a("a"),qto=o("LayoutLMv2Processor"),Nto=o(" (LayoutLMv2 model)"),jto=l(),qh=a("li"),ooe=a("strong"),Dto=o("layoutxlm"),Gto=o(" \u2014 "),OR=a("a"),Oto=o("LayoutXLMProcessor"),Vto=o(" (LayoutXLM model)"),Xto=l(),Nh=a("li"),roe=a("strong"),zto=o("speech_to_text"),Qto=o(" \u2014 "),VR=a("a"),Wto=o("Speech2TextProcessor"),Hto=o(" (Speech2Text model)"),Uto=l(),jh=a("li"),toe=a("strong"),Jto=o("speech_to_text_2"),Yto=o(" \u2014 "),XR=a("a"),Kto=o("Speech2Text2Processor"),Zto=o(" (Speech2Text2 model)"),eao=l(),Dh=a("li"),aoe=a("strong"),oao=o("trocr"),rao=o(" \u2014 "),zR=a("a"),tao=o("TrOCRProcessor"),aao=o(" (TrOCR model)"),nao=l(),Gh=a("li"),noe=a("strong"),sao=o("vision-text-dual-encoder"),lao=o(" \u2014 "),QR=a("a"),iao=o("VisionTextDualEncoderProcessor"),dao=o(" (VisionTextDualEncoder model)"),cao=l(),Oh=a("li"),soe=a("strong"),fao=o("wav2vec2"),mao=o(" \u2014 "),WR=a("a"),gao=o("Wav2Vec2Processor"),hao=o(" (Wav2Vec2 model)"),pao=l(),f(Vh.$$.fragment),_ao=l(),loe=a("p"),uao=o("Examples:"),bao=l(),f(WE.$$.fragment),Fao=l(),Xh=a("div"),f(HE.$$.fragment),vao=l(),ioe=a("p"),Tao=o("Register a new processor for this class."),JSe=l(),Ji=a("h2"),zh=a("a"),doe=a("span"),f(UE.$$.fragment),Mao=l(),coe=a("span"),Eao=o("AutoModel"),YSe=l(),Jo=a("div"),f(JE.$$.fragment),Cao=l(),Yi=a("p"),wao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=a("a"),Aao=o("from_pretrained()"),yao=o(" class method or the "),UR=a("a"),Lao=o("from_config()"),xao=o(` class
method.`),kao=l(),YE=a("p"),Sao=o("This class cannot be instantiated directly using "),foe=a("code"),Rao=o("__init__()"),Bao=o(" (throws an error)."),Pao=l(),Xr=a("div"),f(KE.$$.fragment),$ao=l(),moe=a("p"),Iao=o("Instantiates one of the base model classes of the library from a configuration."),qao=l(),Ki=a("p"),Nao=o(`Note:
Loading a model from its configuration file does `),goe=a("strong"),jao=o("not"),Dao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=a("a"),Gao=o("from_pretrained()"),Oao=o(" to load the model weights."),Vao=l(),hoe=a("p"),Xao=o("Examples:"),zao=l(),f(ZE.$$.fragment),Qao=l(),qe=a("div"),f(eC.$$.fragment),Wao=l(),poe=a("p"),Hao=o("Instantiate one of the base model classes of the library from a pretrained model."),Uao=l(),Xa=a("p"),Jao=o("The model class to instantiate is selected based on the "),_oe=a("code"),Yao=o("model_type"),Kao=o(` property of the config object (either
passed as an argument or loaded from `),uoe=a("code"),Zao=o("pretrained_model_name_or_path"),eno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),boe=a("code"),ono=o("pretrained_model_name_or_path"),rno=o(":"),tno=l(),T=a("ul"),Qh=a("li"),Foe=a("strong"),ano=o("albert"),nno=o(" \u2014 "),YR=a("a"),sno=o("AlbertModel"),lno=o(" (ALBERT model)"),ino=l(),Wh=a("li"),voe=a("strong"),dno=o("bart"),cno=o(" \u2014 "),KR=a("a"),fno=o("BartModel"),mno=o(" (BART model)"),gno=l(),Hh=a("li"),Toe=a("strong"),hno=o("beit"),pno=o(" \u2014 "),ZR=a("a"),_no=o("BeitModel"),uno=o(" (BEiT model)"),bno=l(),Uh=a("li"),Moe=a("strong"),Fno=o("bert"),vno=o(" \u2014 "),eB=a("a"),Tno=o("BertModel"),Mno=o(" (BERT model)"),Eno=l(),Jh=a("li"),Eoe=a("strong"),Cno=o("bert-generation"),wno=o(" \u2014 "),oB=a("a"),Ano=o("BertGenerationEncoder"),yno=o(" (Bert Generation model)"),Lno=l(),Yh=a("li"),Coe=a("strong"),xno=o("big_bird"),kno=o(" \u2014 "),rB=a("a"),Sno=o("BigBirdModel"),Rno=o(" (BigBird model)"),Bno=l(),Kh=a("li"),woe=a("strong"),Pno=o("bigbird_pegasus"),$no=o(" \u2014 "),tB=a("a"),Ino=o("BigBirdPegasusModel"),qno=o(" (BigBirdPegasus model)"),Nno=l(),Zh=a("li"),Aoe=a("strong"),jno=o("blenderbot"),Dno=o(" \u2014 "),aB=a("a"),Gno=o("BlenderbotModel"),Ono=o(" (Blenderbot model)"),Vno=l(),ep=a("li"),yoe=a("strong"),Xno=o("blenderbot-small"),zno=o(" \u2014 "),nB=a("a"),Qno=o("BlenderbotSmallModel"),Wno=o(" (BlenderbotSmall model)"),Hno=l(),op=a("li"),Loe=a("strong"),Uno=o("camembert"),Jno=o(" \u2014 "),sB=a("a"),Yno=o("CamembertModel"),Kno=o(" (CamemBERT model)"),Zno=l(),rp=a("li"),xoe=a("strong"),eso=o("canine"),oso=o(" \u2014 "),lB=a("a"),rso=o("CanineModel"),tso=o(" (Canine model)"),aso=l(),tp=a("li"),koe=a("strong"),nso=o("clip"),sso=o(" \u2014 "),iB=a("a"),lso=o("CLIPModel"),iso=o(" (CLIP model)"),dso=l(),ap=a("li"),Soe=a("strong"),cso=o("convbert"),fso=o(" \u2014 "),dB=a("a"),mso=o("ConvBertModel"),gso=o(" (ConvBERT model)"),hso=l(),np=a("li"),Roe=a("strong"),pso=o("convnext"),_so=o(" \u2014 "),cB=a("a"),uso=o("ConvNextModel"),bso=o(" (ConvNext model)"),Fso=l(),sp=a("li"),Boe=a("strong"),vso=o("ctrl"),Tso=o(" \u2014 "),fB=a("a"),Mso=o("CTRLModel"),Eso=o(" (CTRL model)"),Cso=l(),lp=a("li"),Poe=a("strong"),wso=o("data2vec-audio"),Aso=o(" \u2014 "),mB=a("a"),yso=o("Data2VecAudioModel"),Lso=o(" (Data2VecAudio model)"),xso=l(),ip=a("li"),$oe=a("strong"),kso=o("data2vec-text"),Sso=o(" \u2014 "),gB=a("a"),Rso=o("Data2VecTextModel"),Bso=o(" (Data2VecText model)"),Pso=l(),dp=a("li"),Ioe=a("strong"),$so=o("deberta"),Iso=o(" \u2014 "),hB=a("a"),qso=o("DebertaModel"),Nso=o(" (DeBERTa model)"),jso=l(),cp=a("li"),qoe=a("strong"),Dso=o("deberta-v2"),Gso=o(" \u2014 "),pB=a("a"),Oso=o("DebertaV2Model"),Vso=o(" (DeBERTa-v2 model)"),Xso=l(),fp=a("li"),Noe=a("strong"),zso=o("decision_transformer"),Qso=o(" \u2014 "),_B=a("a"),Wso=o("DecisionTransformerModel"),Hso=o(" (Decision Transformer model)"),Uso=l(),mp=a("li"),joe=a("strong"),Jso=o("deit"),Yso=o(" \u2014 "),uB=a("a"),Kso=o("DeiTModel"),Zso=o(" (DeiT model)"),elo=l(),gp=a("li"),Doe=a("strong"),olo=o("detr"),rlo=o(" \u2014 "),bB=a("a"),tlo=o("DetrModel"),alo=o(" (DETR model)"),nlo=l(),hp=a("li"),Goe=a("strong"),slo=o("distilbert"),llo=o(" \u2014 "),FB=a("a"),ilo=o("DistilBertModel"),dlo=o(" (DistilBERT model)"),clo=l(),pp=a("li"),Ooe=a("strong"),flo=o("dpr"),mlo=o(" \u2014 "),vB=a("a"),glo=o("DPRQuestionEncoder"),hlo=o(" (DPR model)"),plo=l(),_p=a("li"),Voe=a("strong"),_lo=o("dpt"),ulo=o(" \u2014 "),TB=a("a"),blo=o("DPTModel"),Flo=o(" (DPT model)"),vlo=l(),up=a("li"),Xoe=a("strong"),Tlo=o("electra"),Mlo=o(" \u2014 "),MB=a("a"),Elo=o("ElectraModel"),Clo=o(" (ELECTRA model)"),wlo=l(),bp=a("li"),zoe=a("strong"),Alo=o("flaubert"),ylo=o(" \u2014 "),EB=a("a"),Llo=o("FlaubertModel"),xlo=o(" (FlauBERT model)"),klo=l(),Fp=a("li"),Qoe=a("strong"),Slo=o("fnet"),Rlo=o(" \u2014 "),CB=a("a"),Blo=o("FNetModel"),Plo=o(" (FNet model)"),$lo=l(),vp=a("li"),Woe=a("strong"),Ilo=o("fsmt"),qlo=o(" \u2014 "),wB=a("a"),Nlo=o("FSMTModel"),jlo=o(" (FairSeq Machine-Translation model)"),Dlo=l(),js=a("li"),Hoe=a("strong"),Glo=o("funnel"),Olo=o(" \u2014 "),AB=a("a"),Vlo=o("FunnelModel"),Xlo=o(" or "),yB=a("a"),zlo=o("FunnelBaseModel"),Qlo=o(" (Funnel Transformer model)"),Wlo=l(),Tp=a("li"),Uoe=a("strong"),Hlo=o("glpn"),Ulo=o(" \u2014 "),LB=a("a"),Jlo=o("GLPNModel"),Ylo=o(" (GLPN model)"),Klo=l(),Mp=a("li"),Joe=a("strong"),Zlo=o("gpt2"),eio=o(" \u2014 "),xB=a("a"),oio=o("GPT2Model"),rio=o(" (OpenAI GPT-2 model)"),tio=l(),Ep=a("li"),Yoe=a("strong"),aio=o("gpt_neo"),nio=o(" \u2014 "),kB=a("a"),sio=o("GPTNeoModel"),lio=o(" (GPT Neo model)"),iio=l(),Cp=a("li"),Koe=a("strong"),dio=o("gptj"),cio=o(" \u2014 "),SB=a("a"),fio=o("GPTJModel"),mio=o(" (GPT-J model)"),gio=l(),wp=a("li"),Zoe=a("strong"),hio=o("hubert"),pio=o(" \u2014 "),RB=a("a"),_io=o("HubertModel"),uio=o(" (Hubert model)"),bio=l(),Ap=a("li"),ere=a("strong"),Fio=o("ibert"),vio=o(" \u2014 "),BB=a("a"),Tio=o("IBertModel"),Mio=o(" (I-BERT model)"),Eio=l(),yp=a("li"),ore=a("strong"),Cio=o("imagegpt"),wio=o(" \u2014 "),PB=a("a"),Aio=o("ImageGPTModel"),yio=o(" (ImageGPT model)"),Lio=l(),Lp=a("li"),rre=a("strong"),xio=o("layoutlm"),kio=o(" \u2014 "),$B=a("a"),Sio=o("LayoutLMModel"),Rio=o(" (LayoutLM model)"),Bio=l(),xp=a("li"),tre=a("strong"),Pio=o("layoutlmv2"),$io=o(" \u2014 "),IB=a("a"),Iio=o("LayoutLMv2Model"),qio=o(" (LayoutLMv2 model)"),Nio=l(),kp=a("li"),are=a("strong"),jio=o("led"),Dio=o(" \u2014 "),qB=a("a"),Gio=o("LEDModel"),Oio=o(" (LED model)"),Vio=l(),Sp=a("li"),nre=a("strong"),Xio=o("longformer"),zio=o(" \u2014 "),NB=a("a"),Qio=o("LongformerModel"),Wio=o(" (Longformer model)"),Hio=l(),Rp=a("li"),sre=a("strong"),Uio=o("luke"),Jio=o(" \u2014 "),jB=a("a"),Yio=o("LukeModel"),Kio=o(" (LUKE model)"),Zio=l(),Bp=a("li"),lre=a("strong"),edo=o("lxmert"),odo=o(" \u2014 "),DB=a("a"),rdo=o("LxmertModel"),tdo=o(" (LXMERT model)"),ado=l(),Pp=a("li"),ire=a("strong"),ndo=o("m2m_100"),sdo=o(" \u2014 "),GB=a("a"),ldo=o("M2M100Model"),ido=o(" (M2M100 model)"),ddo=l(),$p=a("li"),dre=a("strong"),cdo=o("marian"),fdo=o(" \u2014 "),OB=a("a"),mdo=o("MarianModel"),gdo=o(" (Marian model)"),hdo=l(),Ip=a("li"),cre=a("strong"),pdo=o("maskformer"),_do=o(" \u2014 "),VB=a("a"),udo=o("MaskFormerModel"),bdo=o(" (MaskFormer model)"),Fdo=l(),qp=a("li"),fre=a("strong"),vdo=o("mbart"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("MBartModel"),Edo=o(" (mBART model)"),Cdo=l(),Np=a("li"),mre=a("strong"),wdo=o("megatron-bert"),Ado=o(" \u2014 "),zB=a("a"),ydo=o("MegatronBertModel"),Ldo=o(" (MegatronBert model)"),xdo=l(),jp=a("li"),gre=a("strong"),kdo=o("mobilebert"),Sdo=o(" \u2014 "),QB=a("a"),Rdo=o("MobileBertModel"),Bdo=o(" (MobileBERT model)"),Pdo=l(),Dp=a("li"),hre=a("strong"),$do=o("mpnet"),Ido=o(" \u2014 "),WB=a("a"),qdo=o("MPNetModel"),Ndo=o(" (MPNet model)"),jdo=l(),Gp=a("li"),pre=a("strong"),Ddo=o("mt5"),Gdo=o(" \u2014 "),HB=a("a"),Odo=o("MT5Model"),Vdo=o(" (mT5 model)"),Xdo=l(),Op=a("li"),_re=a("strong"),zdo=o("nystromformer"),Qdo=o(" \u2014 "),UB=a("a"),Wdo=o("NystromformerModel"),Hdo=o(" (Nystromformer model)"),Udo=l(),Vp=a("li"),ure=a("strong"),Jdo=o("openai-gpt"),Ydo=o(" \u2014 "),JB=a("a"),Kdo=o("OpenAIGPTModel"),Zdo=o(" (OpenAI GPT model)"),eco=l(),Xp=a("li"),bre=a("strong"),oco=o("pegasus"),rco=o(" \u2014 "),YB=a("a"),tco=o("PegasusModel"),aco=o(" (Pegasus model)"),nco=l(),zp=a("li"),Fre=a("strong"),sco=o("perceiver"),lco=o(" \u2014 "),KB=a("a"),ico=o("PerceiverModel"),dco=o(" (Perceiver model)"),cco=l(),Qp=a("li"),vre=a("strong"),fco=o("plbart"),mco=o(" \u2014 "),ZB=a("a"),gco=o("PLBartModel"),hco=o(" (PLBart model)"),pco=l(),Wp=a("li"),Tre=a("strong"),_co=o("poolformer"),uco=o(" \u2014 "),eP=a("a"),bco=o("PoolFormerModel"),Fco=o(" (PoolFormer model)"),vco=l(),Hp=a("li"),Mre=a("strong"),Tco=o("prophetnet"),Mco=o(" \u2014 "),oP=a("a"),Eco=o("ProphetNetModel"),Cco=o(" (ProphetNet model)"),wco=l(),Up=a("li"),Ere=a("strong"),Aco=o("qdqbert"),yco=o(" \u2014 "),rP=a("a"),Lco=o("QDQBertModel"),xco=o(" (QDQBert model)"),kco=l(),Jp=a("li"),Cre=a("strong"),Sco=o("reformer"),Rco=o(" \u2014 "),tP=a("a"),Bco=o("ReformerModel"),Pco=o(" (Reformer model)"),$co=l(),Yp=a("li"),wre=a("strong"),Ico=o("rembert"),qco=o(" \u2014 "),aP=a("a"),Nco=o("RemBertModel"),jco=o(" (RemBERT model)"),Dco=l(),Kp=a("li"),Are=a("strong"),Gco=o("resnet"),Oco=o(" \u2014 "),nP=a("a"),Vco=o("ResNetModel"),Xco=o(" (ResNet model)"),zco=l(),Zp=a("li"),yre=a("strong"),Qco=o("retribert"),Wco=o(" \u2014 "),sP=a("a"),Hco=o("RetriBertModel"),Uco=o(" (RetriBERT model)"),Jco=l(),e_=a("li"),Lre=a("strong"),Yco=o("roberta"),Kco=o(" \u2014 "),lP=a("a"),Zco=o("RobertaModel"),efo=o(" (RoBERTa model)"),ofo=l(),o_=a("li"),xre=a("strong"),rfo=o("roformer"),tfo=o(" \u2014 "),iP=a("a"),afo=o("RoFormerModel"),nfo=o(" (RoFormer model)"),sfo=l(),r_=a("li"),kre=a("strong"),lfo=o("segformer"),ifo=o(" \u2014 "),dP=a("a"),dfo=o("SegformerModel"),cfo=o(" (SegFormer model)"),ffo=l(),t_=a("li"),Sre=a("strong"),mfo=o("sew"),gfo=o(" \u2014 "),cP=a("a"),hfo=o("SEWModel"),pfo=o(" (SEW model)"),_fo=l(),a_=a("li"),Rre=a("strong"),ufo=o("sew-d"),bfo=o(" \u2014 "),fP=a("a"),Ffo=o("SEWDModel"),vfo=o(" (SEW-D model)"),Tfo=l(),n_=a("li"),Bre=a("strong"),Mfo=o("speech_to_text"),Efo=o(" \u2014 "),mP=a("a"),Cfo=o("Speech2TextModel"),wfo=o(" (Speech2Text model)"),Afo=l(),s_=a("li"),Pre=a("strong"),yfo=o("splinter"),Lfo=o(" \u2014 "),gP=a("a"),xfo=o("SplinterModel"),kfo=o(" (Splinter model)"),Sfo=l(),l_=a("li"),$re=a("strong"),Rfo=o("squeezebert"),Bfo=o(" \u2014 "),hP=a("a"),Pfo=o("SqueezeBertModel"),$fo=o(" (SqueezeBERT model)"),Ifo=l(),i_=a("li"),Ire=a("strong"),qfo=o("swin"),Nfo=o(" \u2014 "),pP=a("a"),jfo=o("SwinModel"),Dfo=o(" (Swin model)"),Gfo=l(),d_=a("li"),qre=a("strong"),Ofo=o("t5"),Vfo=o(" \u2014 "),_P=a("a"),Xfo=o("T5Model"),zfo=o(" (T5 model)"),Qfo=l(),c_=a("li"),Nre=a("strong"),Wfo=o("tapas"),Hfo=o(" \u2014 "),uP=a("a"),Ufo=o("TapasModel"),Jfo=o(" (TAPAS model)"),Yfo=l(),f_=a("li"),jre=a("strong"),Kfo=o("transfo-xl"),Zfo=o(" \u2014 "),bP=a("a"),emo=o("TransfoXLModel"),omo=o(" (Transformer-XL model)"),rmo=l(),m_=a("li"),Dre=a("strong"),tmo=o("unispeech"),amo=o(" \u2014 "),FP=a("a"),nmo=o("UniSpeechModel"),smo=o(" (UniSpeech model)"),lmo=l(),g_=a("li"),Gre=a("strong"),imo=o("unispeech-sat"),dmo=o(" \u2014 "),vP=a("a"),cmo=o("UniSpeechSatModel"),fmo=o(" (UniSpeechSat model)"),mmo=l(),h_=a("li"),Ore=a("strong"),gmo=o("van"),hmo=o(" \u2014 "),TP=a("a"),pmo=o("VanModel"),_mo=o(" (VAN model)"),umo=l(),p_=a("li"),Vre=a("strong"),bmo=o("vilt"),Fmo=o(" \u2014 "),MP=a("a"),vmo=o("ViltModel"),Tmo=o(" (ViLT model)"),Mmo=l(),__=a("li"),Xre=a("strong"),Emo=o("vision-text-dual-encoder"),Cmo=o(" \u2014 "),EP=a("a"),wmo=o("VisionTextDualEncoderModel"),Amo=o(" (VisionTextDualEncoder model)"),ymo=l(),u_=a("li"),zre=a("strong"),Lmo=o("visual_bert"),xmo=o(" \u2014 "),CP=a("a"),kmo=o("VisualBertModel"),Smo=o(" (VisualBert model)"),Rmo=l(),b_=a("li"),Qre=a("strong"),Bmo=o("vit"),Pmo=o(" \u2014 "),wP=a("a"),$mo=o("ViTModel"),Imo=o(" (ViT model)"),qmo=l(),F_=a("li"),Wre=a("strong"),Nmo=o("vit_mae"),jmo=o(" \u2014 "),AP=a("a"),Dmo=o("ViTMAEModel"),Gmo=o(" (ViTMAE model)"),Omo=l(),v_=a("li"),Hre=a("strong"),Vmo=o("wav2vec2"),Xmo=o(" \u2014 "),yP=a("a"),zmo=o("Wav2Vec2Model"),Qmo=o(" (Wav2Vec2 model)"),Wmo=l(),T_=a("li"),Ure=a("strong"),Hmo=o("wavlm"),Umo=o(" \u2014 "),LP=a("a"),Jmo=o("WavLMModel"),Ymo=o(" (WavLM model)"),Kmo=l(),M_=a("li"),Jre=a("strong"),Zmo=o("xglm"),ego=o(" \u2014 "),xP=a("a"),ogo=o("XGLMModel"),rgo=o(" (XGLM model)"),tgo=l(),E_=a("li"),Yre=a("strong"),ago=o("xlm"),ngo=o(" \u2014 "),kP=a("a"),sgo=o("XLMModel"),lgo=o(" (XLM model)"),igo=l(),C_=a("li"),Kre=a("strong"),dgo=o("xlm-prophetnet"),cgo=o(" \u2014 "),SP=a("a"),fgo=o("XLMProphetNetModel"),mgo=o(" (XLMProphetNet model)"),ggo=l(),w_=a("li"),Zre=a("strong"),hgo=o("xlm-roberta"),pgo=o(" \u2014 "),RP=a("a"),_go=o("XLMRobertaModel"),ugo=o(" (XLM-RoBERTa model)"),bgo=l(),A_=a("li"),ete=a("strong"),Fgo=o("xlm-roberta-xl"),vgo=o(" \u2014 "),BP=a("a"),Tgo=o("XLMRobertaXLModel"),Mgo=o(" (XLM-RoBERTa-XL model)"),Ego=l(),y_=a("li"),ote=a("strong"),Cgo=o("xlnet"),wgo=o(" \u2014 "),PP=a("a"),Ago=o("XLNetModel"),ygo=o(" (XLNet model)"),Lgo=l(),L_=a("li"),rte=a("strong"),xgo=o("yoso"),kgo=o(" \u2014 "),$P=a("a"),Sgo=o("YosoModel"),Rgo=o(" (YOSO model)"),Bgo=l(),x_=a("p"),Pgo=o("The model is set in evaluation mode by default using "),tte=a("code"),$go=o("model.eval()"),Igo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=a("code"),qgo=o("model.train()"),Ngo=l(),nte=a("p"),jgo=o("Examples:"),Dgo=l(),f(oC.$$.fragment),KSe=l(),Zi=a("h2"),k_=a("a"),ste=a("span"),f(rC.$$.fragment),Ggo=l(),lte=a("span"),Ogo=o("AutoModelForPreTraining"),ZSe=l(),Yo=a("div"),f(tC.$$.fragment),Vgo=l(),ed=a("p"),Xgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=a("a"),zgo=o("from_pretrained()"),Qgo=o(" class method or the "),qP=a("a"),Wgo=o("from_config()"),Hgo=o(` class
method.`),Ugo=l(),aC=a("p"),Jgo=o("This class cannot be instantiated directly using "),ite=a("code"),Ygo=o("__init__()"),Kgo=o(" (throws an error)."),Zgo=l(),zr=a("div"),f(nC.$$.fragment),eho=l(),dte=a("p"),oho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rho=l(),od=a("p"),tho=o(`Note:
Loading a model from its configuration file does `),cte=a("strong"),aho=o("not"),nho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=a("a"),sho=o("from_pretrained()"),lho=o(" to load the model weights."),iho=l(),fte=a("p"),dho=o("Examples:"),cho=l(),f(sC.$$.fragment),fho=l(),Ne=a("div"),f(lC.$$.fragment),mho=l(),mte=a("p"),gho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hho=l(),za=a("p"),pho=o("The model class to instantiate is selected based on the "),gte=a("code"),_ho=o("model_type"),uho=o(` property of the config object (either
passed as an argument or loaded from `),hte=a("code"),bho=o("pretrained_model_name_or_path"),Fho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pte=a("code"),vho=o("pretrained_model_name_or_path"),Tho=o(":"),Mho=l(),S=a("ul"),S_=a("li"),_te=a("strong"),Eho=o("albert"),Cho=o(" \u2014 "),jP=a("a"),who=o("AlbertForPreTraining"),Aho=o(" (ALBERT model)"),yho=l(),R_=a("li"),ute=a("strong"),Lho=o("bart"),xho=o(" \u2014 "),DP=a("a"),kho=o("BartForConditionalGeneration"),Sho=o(" (BART model)"),Rho=l(),B_=a("li"),bte=a("strong"),Bho=o("bert"),Pho=o(" \u2014 "),GP=a("a"),$ho=o("BertForPreTraining"),Iho=o(" (BERT model)"),qho=l(),P_=a("li"),Fte=a("strong"),Nho=o("big_bird"),jho=o(" \u2014 "),OP=a("a"),Dho=o("BigBirdForPreTraining"),Gho=o(" (BigBird model)"),Oho=l(),$_=a("li"),vte=a("strong"),Vho=o("camembert"),Xho=o(" \u2014 "),VP=a("a"),zho=o("CamembertForMaskedLM"),Qho=o(" (CamemBERT model)"),Who=l(),I_=a("li"),Tte=a("strong"),Hho=o("ctrl"),Uho=o(" \u2014 "),XP=a("a"),Jho=o("CTRLLMHeadModel"),Yho=o(" (CTRL model)"),Kho=l(),q_=a("li"),Mte=a("strong"),Zho=o("data2vec-text"),epo=o(" \u2014 "),zP=a("a"),opo=o("Data2VecTextForMaskedLM"),rpo=o(" (Data2VecText model)"),tpo=l(),N_=a("li"),Ete=a("strong"),apo=o("deberta"),npo=o(" \u2014 "),QP=a("a"),spo=o("DebertaForMaskedLM"),lpo=o(" (DeBERTa model)"),ipo=l(),j_=a("li"),Cte=a("strong"),dpo=o("deberta-v2"),cpo=o(" \u2014 "),WP=a("a"),fpo=o("DebertaV2ForMaskedLM"),mpo=o(" (DeBERTa-v2 model)"),gpo=l(),D_=a("li"),wte=a("strong"),hpo=o("distilbert"),ppo=o(" \u2014 "),HP=a("a"),_po=o("DistilBertForMaskedLM"),upo=o(" (DistilBERT model)"),bpo=l(),G_=a("li"),Ate=a("strong"),Fpo=o("electra"),vpo=o(" \u2014 "),UP=a("a"),Tpo=o("ElectraForPreTraining"),Mpo=o(" (ELECTRA model)"),Epo=l(),O_=a("li"),yte=a("strong"),Cpo=o("flaubert"),wpo=o(" \u2014 "),JP=a("a"),Apo=o("FlaubertWithLMHeadModel"),ypo=o(" (FlauBERT model)"),Lpo=l(),V_=a("li"),Lte=a("strong"),xpo=o("fnet"),kpo=o(" \u2014 "),YP=a("a"),Spo=o("FNetForPreTraining"),Rpo=o(" (FNet model)"),Bpo=l(),X_=a("li"),xte=a("strong"),Ppo=o("fsmt"),$po=o(" \u2014 "),KP=a("a"),Ipo=o("FSMTForConditionalGeneration"),qpo=o(" (FairSeq Machine-Translation model)"),Npo=l(),z_=a("li"),kte=a("strong"),jpo=o("funnel"),Dpo=o(" \u2014 "),ZP=a("a"),Gpo=o("FunnelForPreTraining"),Opo=o(" (Funnel Transformer model)"),Vpo=l(),Q_=a("li"),Ste=a("strong"),Xpo=o("gpt2"),zpo=o(" \u2014 "),e$=a("a"),Qpo=o("GPT2LMHeadModel"),Wpo=o(" (OpenAI GPT-2 model)"),Hpo=l(),W_=a("li"),Rte=a("strong"),Upo=o("ibert"),Jpo=o(" \u2014 "),o$=a("a"),Ypo=o("IBertForMaskedLM"),Kpo=o(" (I-BERT model)"),Zpo=l(),H_=a("li"),Bte=a("strong"),e_o=o("layoutlm"),o_o=o(" \u2014 "),r$=a("a"),r_o=o("LayoutLMForMaskedLM"),t_o=o(" (LayoutLM model)"),a_o=l(),U_=a("li"),Pte=a("strong"),n_o=o("longformer"),s_o=o(" \u2014 "),t$=a("a"),l_o=o("LongformerForMaskedLM"),i_o=o(" (Longformer model)"),d_o=l(),J_=a("li"),$te=a("strong"),c_o=o("lxmert"),f_o=o(" \u2014 "),a$=a("a"),m_o=o("LxmertForPreTraining"),g_o=o(" (LXMERT model)"),h_o=l(),Y_=a("li"),Ite=a("strong"),p_o=o("megatron-bert"),__o=o(" \u2014 "),n$=a("a"),u_o=o("MegatronBertForPreTraining"),b_o=o(" (MegatronBert model)"),F_o=l(),K_=a("li"),qte=a("strong"),v_o=o("mobilebert"),T_o=o(" \u2014 "),s$=a("a"),M_o=o("MobileBertForPreTraining"),E_o=o(" (MobileBERT model)"),C_o=l(),Z_=a("li"),Nte=a("strong"),w_o=o("mpnet"),A_o=o(" \u2014 "),l$=a("a"),y_o=o("MPNetForMaskedLM"),L_o=o(" (MPNet model)"),x_o=l(),eu=a("li"),jte=a("strong"),k_o=o("openai-gpt"),S_o=o(" \u2014 "),i$=a("a"),R_o=o("OpenAIGPTLMHeadModel"),B_o=o(" (OpenAI GPT model)"),P_o=l(),ou=a("li"),Dte=a("strong"),$_o=o("retribert"),I_o=o(" \u2014 "),d$=a("a"),q_o=o("RetriBertModel"),N_o=o(" (RetriBERT model)"),j_o=l(),ru=a("li"),Gte=a("strong"),D_o=o("roberta"),G_o=o(" \u2014 "),c$=a("a"),O_o=o("RobertaForMaskedLM"),V_o=o(" (RoBERTa model)"),X_o=l(),tu=a("li"),Ote=a("strong"),z_o=o("squeezebert"),Q_o=o(" \u2014 "),f$=a("a"),W_o=o("SqueezeBertForMaskedLM"),H_o=o(" (SqueezeBERT model)"),U_o=l(),au=a("li"),Vte=a("strong"),J_o=o("t5"),Y_o=o(" \u2014 "),m$=a("a"),K_o=o("T5ForConditionalGeneration"),Z_o=o(" (T5 model)"),euo=l(),nu=a("li"),Xte=a("strong"),ouo=o("tapas"),ruo=o(" \u2014 "),g$=a("a"),tuo=o("TapasForMaskedLM"),auo=o(" (TAPAS model)"),nuo=l(),su=a("li"),zte=a("strong"),suo=o("transfo-xl"),luo=o(" \u2014 "),h$=a("a"),iuo=o("TransfoXLLMHeadModel"),duo=o(" (Transformer-XL model)"),cuo=l(),lu=a("li"),Qte=a("strong"),fuo=o("unispeech"),muo=o(" \u2014 "),p$=a("a"),guo=o("UniSpeechForPreTraining"),huo=o(" (UniSpeech model)"),puo=l(),iu=a("li"),Wte=a("strong"),_uo=o("unispeech-sat"),uuo=o(" \u2014 "),_$=a("a"),buo=o("UniSpeechSatForPreTraining"),Fuo=o(" (UniSpeechSat model)"),vuo=l(),du=a("li"),Hte=a("strong"),Tuo=o("visual_bert"),Muo=o(" \u2014 "),u$=a("a"),Euo=o("VisualBertForPreTraining"),Cuo=o(" (VisualBert model)"),wuo=l(),cu=a("li"),Ute=a("strong"),Auo=o("vit_mae"),yuo=o(" \u2014 "),b$=a("a"),Luo=o("ViTMAEForPreTraining"),xuo=o(" (ViTMAE model)"),kuo=l(),fu=a("li"),Jte=a("strong"),Suo=o("wav2vec2"),Ruo=o(" \u2014 "),F$=a("a"),Buo=o("Wav2Vec2ForPreTraining"),Puo=o(" (Wav2Vec2 model)"),$uo=l(),mu=a("li"),Yte=a("strong"),Iuo=o("xlm"),quo=o(" \u2014 "),v$=a("a"),Nuo=o("XLMWithLMHeadModel"),juo=o(" (XLM model)"),Duo=l(),gu=a("li"),Kte=a("strong"),Guo=o("xlm-roberta"),Ouo=o(" \u2014 "),T$=a("a"),Vuo=o("XLMRobertaForMaskedLM"),Xuo=o(" (XLM-RoBERTa model)"),zuo=l(),hu=a("li"),Zte=a("strong"),Quo=o("xlm-roberta-xl"),Wuo=o(" \u2014 "),M$=a("a"),Huo=o("XLMRobertaXLForMaskedLM"),Uuo=o(" (XLM-RoBERTa-XL model)"),Juo=l(),pu=a("li"),eae=a("strong"),Yuo=o("xlnet"),Kuo=o(" \u2014 "),E$=a("a"),Zuo=o("XLNetLMHeadModel"),e1o=o(" (XLNet model)"),o1o=l(),_u=a("p"),r1o=o("The model is set in evaluation mode by default using "),oae=a("code"),t1o=o("model.eval()"),a1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=a("code"),n1o=o("model.train()"),s1o=l(),tae=a("p"),l1o=o("Examples:"),i1o=l(),f(iC.$$.fragment),eRe=l(),rd=a("h2"),uu=a("a"),aae=a("span"),f(dC.$$.fragment),d1o=l(),nae=a("span"),c1o=o("AutoModelForCausalLM"),oRe=l(),Ko=a("div"),f(cC.$$.fragment),f1o=l(),td=a("p"),m1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=a("a"),g1o=o("from_pretrained()"),h1o=o(" class method or the "),w$=a("a"),p1o=o("from_config()"),_1o=o(` class
method.`),u1o=l(),fC=a("p"),b1o=o("This class cannot be instantiated directly using "),sae=a("code"),F1o=o("__init__()"),v1o=o(" (throws an error)."),T1o=l(),Qr=a("div"),f(mC.$$.fragment),M1o=l(),lae=a("p"),E1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C1o=l(),ad=a("p"),w1o=o(`Note:
Loading a model from its configuration file does `),iae=a("strong"),A1o=o("not"),y1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=a("a"),L1o=o("from_pretrained()"),x1o=o(" to load the model weights."),k1o=l(),dae=a("p"),S1o=o("Examples:"),R1o=l(),f(gC.$$.fragment),B1o=l(),je=a("div"),f(hC.$$.fragment),P1o=l(),cae=a("p"),$1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),I1o=l(),Qa=a("p"),q1o=o("The model class to instantiate is selected based on the "),fae=a("code"),N1o=o("model_type"),j1o=o(` property of the config object (either
passed as an argument or loaded from `),mae=a("code"),D1o=o("pretrained_model_name_or_path"),G1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=a("code"),O1o=o("pretrained_model_name_or_path"),V1o=o(":"),X1o=l(),$=a("ul"),bu=a("li"),hae=a("strong"),z1o=o("bart"),Q1o=o(" \u2014 "),y$=a("a"),W1o=o("BartForCausalLM"),H1o=o(" (BART model)"),U1o=l(),Fu=a("li"),pae=a("strong"),J1o=o("bert"),Y1o=o(" \u2014 "),L$=a("a"),K1o=o("BertLMHeadModel"),Z1o=o(" (BERT model)"),ebo=l(),vu=a("li"),_ae=a("strong"),obo=o("bert-generation"),rbo=o(" \u2014 "),x$=a("a"),tbo=o("BertGenerationDecoder"),abo=o(" (Bert Generation model)"),nbo=l(),Tu=a("li"),uae=a("strong"),sbo=o("big_bird"),lbo=o(" \u2014 "),k$=a("a"),ibo=o("BigBirdForCausalLM"),dbo=o(" (BigBird model)"),cbo=l(),Mu=a("li"),bae=a("strong"),fbo=o("bigbird_pegasus"),mbo=o(" \u2014 "),S$=a("a"),gbo=o("BigBirdPegasusForCausalLM"),hbo=o(" (BigBirdPegasus model)"),pbo=l(),Eu=a("li"),Fae=a("strong"),_bo=o("blenderbot"),ubo=o(" \u2014 "),R$=a("a"),bbo=o("BlenderbotForCausalLM"),Fbo=o(" (Blenderbot model)"),vbo=l(),Cu=a("li"),vae=a("strong"),Tbo=o("blenderbot-small"),Mbo=o(" \u2014 "),B$=a("a"),Ebo=o("BlenderbotSmallForCausalLM"),Cbo=o(" (BlenderbotSmall model)"),wbo=l(),wu=a("li"),Tae=a("strong"),Abo=o("camembert"),ybo=o(" \u2014 "),P$=a("a"),Lbo=o("CamembertForCausalLM"),xbo=o(" (CamemBERT model)"),kbo=l(),Au=a("li"),Mae=a("strong"),Sbo=o("ctrl"),Rbo=o(" \u2014 "),$$=a("a"),Bbo=o("CTRLLMHeadModel"),Pbo=o(" (CTRL model)"),$bo=l(),yu=a("li"),Eae=a("strong"),Ibo=o("data2vec-text"),qbo=o(" \u2014 "),I$=a("a"),Nbo=o("Data2VecTextForCausalLM"),jbo=o(" (Data2VecText model)"),Dbo=l(),Lu=a("li"),Cae=a("strong"),Gbo=o("electra"),Obo=o(" \u2014 "),q$=a("a"),Vbo=o("ElectraForCausalLM"),Xbo=o(" (ELECTRA model)"),zbo=l(),xu=a("li"),wae=a("strong"),Qbo=o("gpt2"),Wbo=o(" \u2014 "),N$=a("a"),Hbo=o("GPT2LMHeadModel"),Ubo=o(" (OpenAI GPT-2 model)"),Jbo=l(),ku=a("li"),Aae=a("strong"),Ybo=o("gpt_neo"),Kbo=o(" \u2014 "),j$=a("a"),Zbo=o("GPTNeoForCausalLM"),e5o=o(" (GPT Neo model)"),o5o=l(),Su=a("li"),yae=a("strong"),r5o=o("gptj"),t5o=o(" \u2014 "),D$=a("a"),a5o=o("GPTJForCausalLM"),n5o=o(" (GPT-J model)"),s5o=l(),Ru=a("li"),Lae=a("strong"),l5o=o("marian"),i5o=o(" \u2014 "),G$=a("a"),d5o=o("MarianForCausalLM"),c5o=o(" (Marian model)"),f5o=l(),Bu=a("li"),xae=a("strong"),m5o=o("mbart"),g5o=o(" \u2014 "),O$=a("a"),h5o=o("MBartForCausalLM"),p5o=o(" (mBART model)"),_5o=l(),Pu=a("li"),kae=a("strong"),u5o=o("megatron-bert"),b5o=o(" \u2014 "),V$=a("a"),F5o=o("MegatronBertForCausalLM"),v5o=o(" (MegatronBert model)"),T5o=l(),$u=a("li"),Sae=a("strong"),M5o=o("openai-gpt"),E5o=o(" \u2014 "),X$=a("a"),C5o=o("OpenAIGPTLMHeadModel"),w5o=o(" (OpenAI GPT model)"),A5o=l(),Iu=a("li"),Rae=a("strong"),y5o=o("pegasus"),L5o=o(" \u2014 "),z$=a("a"),x5o=o("PegasusForCausalLM"),k5o=o(" (Pegasus model)"),S5o=l(),qu=a("li"),Bae=a("strong"),R5o=o("plbart"),B5o=o(" \u2014 "),Q$=a("a"),P5o=o("PLBartForCausalLM"),$5o=o(" (PLBart model)"),I5o=l(),Nu=a("li"),Pae=a("strong"),q5o=o("prophetnet"),N5o=o(" \u2014 "),W$=a("a"),j5o=o("ProphetNetForCausalLM"),D5o=o(" (ProphetNet model)"),G5o=l(),ju=a("li"),$ae=a("strong"),O5o=o("qdqbert"),V5o=o(" \u2014 "),H$=a("a"),X5o=o("QDQBertLMHeadModel"),z5o=o(" (QDQBert model)"),Q5o=l(),Du=a("li"),Iae=a("strong"),W5o=o("reformer"),H5o=o(" \u2014 "),U$=a("a"),U5o=o("ReformerModelWithLMHead"),J5o=o(" (Reformer model)"),Y5o=l(),Gu=a("li"),qae=a("strong"),K5o=o("rembert"),Z5o=o(" \u2014 "),J$=a("a"),e3o=o("RemBertForCausalLM"),o3o=o(" (RemBERT model)"),r3o=l(),Ou=a("li"),Nae=a("strong"),t3o=o("roberta"),a3o=o(" \u2014 "),Y$=a("a"),n3o=o("RobertaForCausalLM"),s3o=o(" (RoBERTa model)"),l3o=l(),Vu=a("li"),jae=a("strong"),i3o=o("roformer"),d3o=o(" \u2014 "),K$=a("a"),c3o=o("RoFormerForCausalLM"),f3o=o(" (RoFormer model)"),m3o=l(),Xu=a("li"),Dae=a("strong"),g3o=o("speech_to_text_2"),h3o=o(" \u2014 "),Z$=a("a"),p3o=o("Speech2Text2ForCausalLM"),_3o=o(" (Speech2Text2 model)"),u3o=l(),zu=a("li"),Gae=a("strong"),b3o=o("transfo-xl"),F3o=o(" \u2014 "),eI=a("a"),v3o=o("TransfoXLLMHeadModel"),T3o=o(" (Transformer-XL model)"),M3o=l(),Qu=a("li"),Oae=a("strong"),E3o=o("trocr"),C3o=o(" \u2014 "),oI=a("a"),w3o=o("TrOCRForCausalLM"),A3o=o(" (TrOCR model)"),y3o=l(),Wu=a("li"),Vae=a("strong"),L3o=o("xglm"),x3o=o(" \u2014 "),rI=a("a"),k3o=o("XGLMForCausalLM"),S3o=o(" (XGLM model)"),R3o=l(),Hu=a("li"),Xae=a("strong"),B3o=o("xlm"),P3o=o(" \u2014 "),tI=a("a"),$3o=o("XLMWithLMHeadModel"),I3o=o(" (XLM model)"),q3o=l(),Uu=a("li"),zae=a("strong"),N3o=o("xlm-prophetnet"),j3o=o(" \u2014 "),aI=a("a"),D3o=o("XLMProphetNetForCausalLM"),G3o=o(" (XLMProphetNet model)"),O3o=l(),Ju=a("li"),Qae=a("strong"),V3o=o("xlm-roberta"),X3o=o(" \u2014 "),nI=a("a"),z3o=o("XLMRobertaForCausalLM"),Q3o=o(" (XLM-RoBERTa model)"),W3o=l(),Yu=a("li"),Wae=a("strong"),H3o=o("xlm-roberta-xl"),U3o=o(" \u2014 "),sI=a("a"),J3o=o("XLMRobertaXLForCausalLM"),Y3o=o(" (XLM-RoBERTa-XL model)"),K3o=l(),Ku=a("li"),Hae=a("strong"),Z3o=o("xlnet"),e2o=o(" \u2014 "),lI=a("a"),o2o=o("XLNetLMHeadModel"),r2o=o(" (XLNet model)"),t2o=l(),Zu=a("p"),a2o=o("The model is set in evaluation mode by default using "),Uae=a("code"),n2o=o("model.eval()"),s2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=a("code"),l2o=o("model.train()"),i2o=l(),Yae=a("p"),d2o=o("Examples:"),c2o=l(),f(pC.$$.fragment),rRe=l(),nd=a("h2"),e1=a("a"),Kae=a("span"),f(_C.$$.fragment),f2o=l(),Zae=a("span"),m2o=o("AutoModelForMaskedLM"),tRe=l(),Zo=a("div"),f(uC.$$.fragment),g2o=l(),sd=a("p"),h2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=a("a"),p2o=o("from_pretrained()"),_2o=o(" class method or the "),dI=a("a"),u2o=o("from_config()"),b2o=o(` class
method.`),F2o=l(),bC=a("p"),v2o=o("This class cannot be instantiated directly using "),ene=a("code"),T2o=o("__init__()"),M2o=o(" (throws an error)."),E2o=l(),Wr=a("div"),f(FC.$$.fragment),C2o=l(),one=a("p"),w2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A2o=l(),ld=a("p"),y2o=o(`Note:
Loading a model from its configuration file does `),rne=a("strong"),L2o=o("not"),x2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=a("a"),k2o=o("from_pretrained()"),S2o=o(" to load the model weights."),R2o=l(),tne=a("p"),B2o=o("Examples:"),P2o=l(),f(vC.$$.fragment),$2o=l(),De=a("div"),f(TC.$$.fragment),I2o=l(),ane=a("p"),q2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),N2o=l(),Wa=a("p"),j2o=o("The model class to instantiate is selected based on the "),nne=a("code"),D2o=o("model_type"),G2o=o(` property of the config object (either
passed as an argument or loaded from `),sne=a("code"),O2o=o("pretrained_model_name_or_path"),V2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=a("code"),X2o=o("pretrained_model_name_or_path"),z2o=o(":"),Q2o=l(),I=a("ul"),o1=a("li"),ine=a("strong"),W2o=o("albert"),H2o=o(" \u2014 "),fI=a("a"),U2o=o("AlbertForMaskedLM"),J2o=o(" (ALBERT model)"),Y2o=l(),r1=a("li"),dne=a("strong"),K2o=o("bart"),Z2o=o(" \u2014 "),mI=a("a"),eFo=o("BartForConditionalGeneration"),oFo=o(" (BART model)"),rFo=l(),t1=a("li"),cne=a("strong"),tFo=o("bert"),aFo=o(" \u2014 "),gI=a("a"),nFo=o("BertForMaskedLM"),sFo=o(" (BERT model)"),lFo=l(),a1=a("li"),fne=a("strong"),iFo=o("big_bird"),dFo=o(" \u2014 "),hI=a("a"),cFo=o("BigBirdForMaskedLM"),fFo=o(" (BigBird model)"),mFo=l(),n1=a("li"),mne=a("strong"),gFo=o("camembert"),hFo=o(" \u2014 "),pI=a("a"),pFo=o("CamembertForMaskedLM"),_Fo=o(" (CamemBERT model)"),uFo=l(),s1=a("li"),gne=a("strong"),bFo=o("convbert"),FFo=o(" \u2014 "),_I=a("a"),vFo=o("ConvBertForMaskedLM"),TFo=o(" (ConvBERT model)"),MFo=l(),l1=a("li"),hne=a("strong"),EFo=o("data2vec-text"),CFo=o(" \u2014 "),uI=a("a"),wFo=o("Data2VecTextForMaskedLM"),AFo=o(" (Data2VecText model)"),yFo=l(),i1=a("li"),pne=a("strong"),LFo=o("deberta"),xFo=o(" \u2014 "),bI=a("a"),kFo=o("DebertaForMaskedLM"),SFo=o(" (DeBERTa model)"),RFo=l(),d1=a("li"),_ne=a("strong"),BFo=o("deberta-v2"),PFo=o(" \u2014 "),FI=a("a"),$Fo=o("DebertaV2ForMaskedLM"),IFo=o(" (DeBERTa-v2 model)"),qFo=l(),c1=a("li"),une=a("strong"),NFo=o("distilbert"),jFo=o(" \u2014 "),vI=a("a"),DFo=o("DistilBertForMaskedLM"),GFo=o(" (DistilBERT model)"),OFo=l(),f1=a("li"),bne=a("strong"),VFo=o("electra"),XFo=o(" \u2014 "),TI=a("a"),zFo=o("ElectraForMaskedLM"),QFo=o(" (ELECTRA model)"),WFo=l(),m1=a("li"),Fne=a("strong"),HFo=o("flaubert"),UFo=o(" \u2014 "),MI=a("a"),JFo=o("FlaubertWithLMHeadModel"),YFo=o(" (FlauBERT model)"),KFo=l(),g1=a("li"),vne=a("strong"),ZFo=o("fnet"),evo=o(" \u2014 "),EI=a("a"),ovo=o("FNetForMaskedLM"),rvo=o(" (FNet model)"),tvo=l(),h1=a("li"),Tne=a("strong"),avo=o("funnel"),nvo=o(" \u2014 "),CI=a("a"),svo=o("FunnelForMaskedLM"),lvo=o(" (Funnel Transformer model)"),ivo=l(),p1=a("li"),Mne=a("strong"),dvo=o("ibert"),cvo=o(" \u2014 "),wI=a("a"),fvo=o("IBertForMaskedLM"),mvo=o(" (I-BERT model)"),gvo=l(),_1=a("li"),Ene=a("strong"),hvo=o("layoutlm"),pvo=o(" \u2014 "),AI=a("a"),_vo=o("LayoutLMForMaskedLM"),uvo=o(" (LayoutLM model)"),bvo=l(),u1=a("li"),Cne=a("strong"),Fvo=o("longformer"),vvo=o(" \u2014 "),yI=a("a"),Tvo=o("LongformerForMaskedLM"),Mvo=o(" (Longformer model)"),Evo=l(),b1=a("li"),wne=a("strong"),Cvo=o("mbart"),wvo=o(" \u2014 "),LI=a("a"),Avo=o("MBartForConditionalGeneration"),yvo=o(" (mBART model)"),Lvo=l(),F1=a("li"),Ane=a("strong"),xvo=o("megatron-bert"),kvo=o(" \u2014 "),xI=a("a"),Svo=o("MegatronBertForMaskedLM"),Rvo=o(" (MegatronBert model)"),Bvo=l(),v1=a("li"),yne=a("strong"),Pvo=o("mobilebert"),$vo=o(" \u2014 "),kI=a("a"),Ivo=o("MobileBertForMaskedLM"),qvo=o(" (MobileBERT model)"),Nvo=l(),T1=a("li"),Lne=a("strong"),jvo=o("mpnet"),Dvo=o(" \u2014 "),SI=a("a"),Gvo=o("MPNetForMaskedLM"),Ovo=o(" (MPNet model)"),Vvo=l(),M1=a("li"),xne=a("strong"),Xvo=o("nystromformer"),zvo=o(" \u2014 "),RI=a("a"),Qvo=o("NystromformerForMaskedLM"),Wvo=o(" (Nystromformer model)"),Hvo=l(),E1=a("li"),kne=a("strong"),Uvo=o("perceiver"),Jvo=o(" \u2014 "),BI=a("a"),Yvo=o("PerceiverForMaskedLM"),Kvo=o(" (Perceiver model)"),Zvo=l(),C1=a("li"),Sne=a("strong"),e6o=o("qdqbert"),o6o=o(" \u2014 "),PI=a("a"),r6o=o("QDQBertForMaskedLM"),t6o=o(" (QDQBert model)"),a6o=l(),w1=a("li"),Rne=a("strong"),n6o=o("reformer"),s6o=o(" \u2014 "),$I=a("a"),l6o=o("ReformerForMaskedLM"),i6o=o(" (Reformer model)"),d6o=l(),A1=a("li"),Bne=a("strong"),c6o=o("rembert"),f6o=o(" \u2014 "),II=a("a"),m6o=o("RemBertForMaskedLM"),g6o=o(" (RemBERT model)"),h6o=l(),y1=a("li"),Pne=a("strong"),p6o=o("roberta"),_6o=o(" \u2014 "),qI=a("a"),u6o=o("RobertaForMaskedLM"),b6o=o(" (RoBERTa model)"),F6o=l(),L1=a("li"),$ne=a("strong"),v6o=o("roformer"),T6o=o(" \u2014 "),NI=a("a"),M6o=o("RoFormerForMaskedLM"),E6o=o(" (RoFormer model)"),C6o=l(),x1=a("li"),Ine=a("strong"),w6o=o("squeezebert"),A6o=o(" \u2014 "),jI=a("a"),y6o=o("SqueezeBertForMaskedLM"),L6o=o(" (SqueezeBERT model)"),x6o=l(),k1=a("li"),qne=a("strong"),k6o=o("tapas"),S6o=o(" \u2014 "),DI=a("a"),R6o=o("TapasForMaskedLM"),B6o=o(" (TAPAS model)"),P6o=l(),S1=a("li"),Nne=a("strong"),$6o=o("wav2vec2"),I6o=o(" \u2014 "),jne=a("code"),q6o=o("Wav2Vec2ForMaskedLM"),N6o=o("(Wav2Vec2 model)"),j6o=l(),R1=a("li"),Dne=a("strong"),D6o=o("xlm"),G6o=o(" \u2014 "),GI=a("a"),O6o=o("XLMWithLMHeadModel"),V6o=o(" (XLM model)"),X6o=l(),B1=a("li"),Gne=a("strong"),z6o=o("xlm-roberta"),Q6o=o(" \u2014 "),OI=a("a"),W6o=o("XLMRobertaForMaskedLM"),H6o=o(" (XLM-RoBERTa model)"),U6o=l(),P1=a("li"),One=a("strong"),J6o=o("xlm-roberta-xl"),Y6o=o(" \u2014 "),VI=a("a"),K6o=o("XLMRobertaXLForMaskedLM"),Z6o=o(" (XLM-RoBERTa-XL model)"),eTo=l(),$1=a("li"),Vne=a("strong"),oTo=o("yoso"),rTo=o(" \u2014 "),XI=a("a"),tTo=o("YosoForMaskedLM"),aTo=o(" (YOSO model)"),nTo=l(),I1=a("p"),sTo=o("The model is set in evaluation mode by default using "),Xne=a("code"),lTo=o("model.eval()"),iTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),dTo=o("model.train()"),cTo=l(),Qne=a("p"),fTo=o("Examples:"),mTo=l(),f(MC.$$.fragment),aRe=l(),id=a("h2"),q1=a("a"),Wne=a("span"),f(EC.$$.fragment),gTo=l(),Hne=a("span"),hTo=o("AutoModelForSeq2SeqLM"),nRe=l(),er=a("div"),f(CC.$$.fragment),pTo=l(),dd=a("p"),_To=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=a("a"),uTo=o("from_pretrained()"),bTo=o(" class method or the "),QI=a("a"),FTo=o("from_config()"),vTo=o(` class
method.`),TTo=l(),wC=a("p"),MTo=o("This class cannot be instantiated directly using "),Une=a("code"),ETo=o("__init__()"),CTo=o(" (throws an error)."),wTo=l(),Hr=a("div"),f(AC.$$.fragment),ATo=l(),Jne=a("p"),yTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LTo=l(),cd=a("p"),xTo=o(`Note:
Loading a model from its configuration file does `),Yne=a("strong"),kTo=o("not"),STo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=a("a"),RTo=o("from_pretrained()"),BTo=o(" to load the model weights."),PTo=l(),Kne=a("p"),$To=o("Examples:"),ITo=l(),f(yC.$$.fragment),qTo=l(),Ge=a("div"),f(LC.$$.fragment),NTo=l(),Zne=a("p"),jTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),DTo=l(),Ha=a("p"),GTo=o("The model class to instantiate is selected based on the "),ese=a("code"),OTo=o("model_type"),VTo=o(` property of the config object (either
passed as an argument or loaded from `),ose=a("code"),XTo=o("pretrained_model_name_or_path"),zTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=a("code"),QTo=o("pretrained_model_name_or_path"),WTo=o(":"),HTo=l(),se=a("ul"),N1=a("li"),tse=a("strong"),UTo=o("bart"),JTo=o(" \u2014 "),HI=a("a"),YTo=o("BartForConditionalGeneration"),KTo=o(" (BART model)"),ZTo=l(),j1=a("li"),ase=a("strong"),e7o=o("bigbird_pegasus"),o7o=o(" \u2014 "),UI=a("a"),r7o=o("BigBirdPegasusForConditionalGeneration"),t7o=o(" (BigBirdPegasus model)"),a7o=l(),D1=a("li"),nse=a("strong"),n7o=o("blenderbot"),s7o=o(" \u2014 "),JI=a("a"),l7o=o("BlenderbotForConditionalGeneration"),i7o=o(" (Blenderbot model)"),d7o=l(),G1=a("li"),sse=a("strong"),c7o=o("blenderbot-small"),f7o=o(" \u2014 "),YI=a("a"),m7o=o("BlenderbotSmallForConditionalGeneration"),g7o=o(" (BlenderbotSmall model)"),h7o=l(),O1=a("li"),lse=a("strong"),p7o=o("encoder-decoder"),_7o=o(" \u2014 "),KI=a("a"),u7o=o("EncoderDecoderModel"),b7o=o(" (Encoder decoder model)"),F7o=l(),V1=a("li"),ise=a("strong"),v7o=o("fsmt"),T7o=o(" \u2014 "),ZI=a("a"),M7o=o("FSMTForConditionalGeneration"),E7o=o(" (FairSeq Machine-Translation model)"),C7o=l(),X1=a("li"),dse=a("strong"),w7o=o("led"),A7o=o(" \u2014 "),eq=a("a"),y7o=o("LEDForConditionalGeneration"),L7o=o(" (LED model)"),x7o=l(),z1=a("li"),cse=a("strong"),k7o=o("m2m_100"),S7o=o(" \u2014 "),oq=a("a"),R7o=o("M2M100ForConditionalGeneration"),B7o=o(" (M2M100 model)"),P7o=l(),Q1=a("li"),fse=a("strong"),$7o=o("marian"),I7o=o(" \u2014 "),rq=a("a"),q7o=o("MarianMTModel"),N7o=o(" (Marian model)"),j7o=l(),W1=a("li"),mse=a("strong"),D7o=o("mbart"),G7o=o(" \u2014 "),tq=a("a"),O7o=o("MBartForConditionalGeneration"),V7o=o(" (mBART model)"),X7o=l(),H1=a("li"),gse=a("strong"),z7o=o("mt5"),Q7o=o(" \u2014 "),aq=a("a"),W7o=o("MT5ForConditionalGeneration"),H7o=o(" (mT5 model)"),U7o=l(),U1=a("li"),hse=a("strong"),J7o=o("pegasus"),Y7o=o(" \u2014 "),nq=a("a"),K7o=o("PegasusForConditionalGeneration"),Z7o=o(" (Pegasus model)"),eMo=l(),J1=a("li"),pse=a("strong"),oMo=o("plbart"),rMo=o(" \u2014 "),sq=a("a"),tMo=o("PLBartForConditionalGeneration"),aMo=o(" (PLBart model)"),nMo=l(),Y1=a("li"),_se=a("strong"),sMo=o("prophetnet"),lMo=o(" \u2014 "),lq=a("a"),iMo=o("ProphetNetForConditionalGeneration"),dMo=o(" (ProphetNet model)"),cMo=l(),K1=a("li"),use=a("strong"),fMo=o("t5"),mMo=o(" \u2014 "),iq=a("a"),gMo=o("T5ForConditionalGeneration"),hMo=o(" (T5 model)"),pMo=l(),Z1=a("li"),bse=a("strong"),_Mo=o("xlm-prophetnet"),uMo=o(" \u2014 "),dq=a("a"),bMo=o("XLMProphetNetForConditionalGeneration"),FMo=o(" (XLMProphetNet model)"),vMo=l(),eb=a("p"),TMo=o("The model is set in evaluation mode by default using "),Fse=a("code"),MMo=o("model.eval()"),EMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vse=a("code"),CMo=o("model.train()"),wMo=l(),Tse=a("p"),AMo=o("Examples:"),yMo=l(),f(xC.$$.fragment),sRe=l(),fd=a("h2"),ob=a("a"),Mse=a("span"),f(kC.$$.fragment),LMo=l(),Ese=a("span"),xMo=o("AutoModelForSequenceClassification"),lRe=l(),or=a("div"),f(SC.$$.fragment),kMo=l(),md=a("p"),SMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=a("a"),RMo=o("from_pretrained()"),BMo=o(" class method or the "),fq=a("a"),PMo=o("from_config()"),$Mo=o(` class
method.`),IMo=l(),RC=a("p"),qMo=o("This class cannot be instantiated directly using "),Cse=a("code"),NMo=o("__init__()"),jMo=o(" (throws an error)."),DMo=l(),Ur=a("div"),f(BC.$$.fragment),GMo=l(),wse=a("p"),OMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VMo=l(),gd=a("p"),XMo=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),zMo=o("not"),QMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=a("a"),WMo=o("from_pretrained()"),HMo=o(" to load the model weights."),UMo=l(),yse=a("p"),JMo=o("Examples:"),YMo=l(),f(PC.$$.fragment),KMo=l(),Oe=a("div"),f($C.$$.fragment),ZMo=l(),Lse=a("p"),e4o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),o4o=l(),Ua=a("p"),r4o=o("The model class to instantiate is selected based on the "),xse=a("code"),t4o=o("model_type"),a4o=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),n4o=o("pretrained_model_name_or_path"),s4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),l4o=o("pretrained_model_name_or_path"),i4o=o(":"),d4o=l(),y=a("ul"),rb=a("li"),Rse=a("strong"),c4o=o("albert"),f4o=o(" \u2014 "),gq=a("a"),m4o=o("AlbertForSequenceClassification"),g4o=o(" (ALBERT model)"),h4o=l(),tb=a("li"),Bse=a("strong"),p4o=o("bart"),_4o=o(" \u2014 "),hq=a("a"),u4o=o("BartForSequenceClassification"),b4o=o(" (BART model)"),F4o=l(),ab=a("li"),Pse=a("strong"),v4o=o("bert"),T4o=o(" \u2014 "),pq=a("a"),M4o=o("BertForSequenceClassification"),E4o=o(" (BERT model)"),C4o=l(),nb=a("li"),$se=a("strong"),w4o=o("big_bird"),A4o=o(" \u2014 "),_q=a("a"),y4o=o("BigBirdForSequenceClassification"),L4o=o(" (BigBird model)"),x4o=l(),sb=a("li"),Ise=a("strong"),k4o=o("bigbird_pegasus"),S4o=o(" \u2014 "),uq=a("a"),R4o=o("BigBirdPegasusForSequenceClassification"),B4o=o(" (BigBirdPegasus model)"),P4o=l(),lb=a("li"),qse=a("strong"),$4o=o("camembert"),I4o=o(" \u2014 "),bq=a("a"),q4o=o("CamembertForSequenceClassification"),N4o=o(" (CamemBERT model)"),j4o=l(),ib=a("li"),Nse=a("strong"),D4o=o("canine"),G4o=o(" \u2014 "),Fq=a("a"),O4o=o("CanineForSequenceClassification"),V4o=o(" (Canine model)"),X4o=l(),db=a("li"),jse=a("strong"),z4o=o("convbert"),Q4o=o(" \u2014 "),vq=a("a"),W4o=o("ConvBertForSequenceClassification"),H4o=o(" (ConvBERT model)"),U4o=l(),cb=a("li"),Dse=a("strong"),J4o=o("ctrl"),Y4o=o(" \u2014 "),Tq=a("a"),K4o=o("CTRLForSequenceClassification"),Z4o=o(" (CTRL model)"),eEo=l(),fb=a("li"),Gse=a("strong"),oEo=o("data2vec-text"),rEo=o(" \u2014 "),Mq=a("a"),tEo=o("Data2VecTextForSequenceClassification"),aEo=o(" (Data2VecText model)"),nEo=l(),mb=a("li"),Ose=a("strong"),sEo=o("deberta"),lEo=o(" \u2014 "),Eq=a("a"),iEo=o("DebertaForSequenceClassification"),dEo=o(" (DeBERTa model)"),cEo=l(),gb=a("li"),Vse=a("strong"),fEo=o("deberta-v2"),mEo=o(" \u2014 "),Cq=a("a"),gEo=o("DebertaV2ForSequenceClassification"),hEo=o(" (DeBERTa-v2 model)"),pEo=l(),hb=a("li"),Xse=a("strong"),_Eo=o("distilbert"),uEo=o(" \u2014 "),wq=a("a"),bEo=o("DistilBertForSequenceClassification"),FEo=o(" (DistilBERT model)"),vEo=l(),pb=a("li"),zse=a("strong"),TEo=o("electra"),MEo=o(" \u2014 "),Aq=a("a"),EEo=o("ElectraForSequenceClassification"),CEo=o(" (ELECTRA model)"),wEo=l(),_b=a("li"),Qse=a("strong"),AEo=o("flaubert"),yEo=o(" \u2014 "),yq=a("a"),LEo=o("FlaubertForSequenceClassification"),xEo=o(" (FlauBERT model)"),kEo=l(),ub=a("li"),Wse=a("strong"),SEo=o("fnet"),REo=o(" \u2014 "),Lq=a("a"),BEo=o("FNetForSequenceClassification"),PEo=o(" (FNet model)"),$Eo=l(),bb=a("li"),Hse=a("strong"),IEo=o("funnel"),qEo=o(" \u2014 "),xq=a("a"),NEo=o("FunnelForSequenceClassification"),jEo=o(" (Funnel Transformer model)"),DEo=l(),Fb=a("li"),Use=a("strong"),GEo=o("gpt2"),OEo=o(" \u2014 "),kq=a("a"),VEo=o("GPT2ForSequenceClassification"),XEo=o(" (OpenAI GPT-2 model)"),zEo=l(),vb=a("li"),Jse=a("strong"),QEo=o("gpt_neo"),WEo=o(" \u2014 "),Sq=a("a"),HEo=o("GPTNeoForSequenceClassification"),UEo=o(" (GPT Neo model)"),JEo=l(),Tb=a("li"),Yse=a("strong"),YEo=o("gptj"),KEo=o(" \u2014 "),Rq=a("a"),ZEo=o("GPTJForSequenceClassification"),eCo=o(" (GPT-J model)"),oCo=l(),Mb=a("li"),Kse=a("strong"),rCo=o("ibert"),tCo=o(" \u2014 "),Bq=a("a"),aCo=o("IBertForSequenceClassification"),nCo=o(" (I-BERT model)"),sCo=l(),Eb=a("li"),Zse=a("strong"),lCo=o("layoutlm"),iCo=o(" \u2014 "),Pq=a("a"),dCo=o("LayoutLMForSequenceClassification"),cCo=o(" (LayoutLM model)"),fCo=l(),Cb=a("li"),ele=a("strong"),mCo=o("layoutlmv2"),gCo=o(" \u2014 "),$q=a("a"),hCo=o("LayoutLMv2ForSequenceClassification"),pCo=o(" (LayoutLMv2 model)"),_Co=l(),wb=a("li"),ole=a("strong"),uCo=o("led"),bCo=o(" \u2014 "),Iq=a("a"),FCo=o("LEDForSequenceClassification"),vCo=o(" (LED model)"),TCo=l(),Ab=a("li"),rle=a("strong"),MCo=o("longformer"),ECo=o(" \u2014 "),qq=a("a"),CCo=o("LongformerForSequenceClassification"),wCo=o(" (Longformer model)"),ACo=l(),yb=a("li"),tle=a("strong"),yCo=o("mbart"),LCo=o(" \u2014 "),Nq=a("a"),xCo=o("MBartForSequenceClassification"),kCo=o(" (mBART model)"),SCo=l(),Lb=a("li"),ale=a("strong"),RCo=o("megatron-bert"),BCo=o(" \u2014 "),jq=a("a"),PCo=o("MegatronBertForSequenceClassification"),$Co=o(" (MegatronBert model)"),ICo=l(),xb=a("li"),nle=a("strong"),qCo=o("mobilebert"),NCo=o(" \u2014 "),Dq=a("a"),jCo=o("MobileBertForSequenceClassification"),DCo=o(" (MobileBERT model)"),GCo=l(),kb=a("li"),sle=a("strong"),OCo=o("mpnet"),VCo=o(" \u2014 "),Gq=a("a"),XCo=o("MPNetForSequenceClassification"),zCo=o(" (MPNet model)"),QCo=l(),Sb=a("li"),lle=a("strong"),WCo=o("nystromformer"),HCo=o(" \u2014 "),Oq=a("a"),UCo=o("NystromformerForSequenceClassification"),JCo=o(" (Nystromformer model)"),YCo=l(),Rb=a("li"),ile=a("strong"),KCo=o("openai-gpt"),ZCo=o(" \u2014 "),Vq=a("a"),ewo=o("OpenAIGPTForSequenceClassification"),owo=o(" (OpenAI GPT model)"),rwo=l(),Bb=a("li"),dle=a("strong"),two=o("perceiver"),awo=o(" \u2014 "),Xq=a("a"),nwo=o("PerceiverForSequenceClassification"),swo=o(" (Perceiver model)"),lwo=l(),Pb=a("li"),cle=a("strong"),iwo=o("plbart"),dwo=o(" \u2014 "),zq=a("a"),cwo=o("PLBartForSequenceClassification"),fwo=o(" (PLBart model)"),mwo=l(),$b=a("li"),fle=a("strong"),gwo=o("qdqbert"),hwo=o(" \u2014 "),Qq=a("a"),pwo=o("QDQBertForSequenceClassification"),_wo=o(" (QDQBert model)"),uwo=l(),Ib=a("li"),mle=a("strong"),bwo=o("reformer"),Fwo=o(" \u2014 "),Wq=a("a"),vwo=o("ReformerForSequenceClassification"),Two=o(" (Reformer model)"),Mwo=l(),qb=a("li"),gle=a("strong"),Ewo=o("rembert"),Cwo=o(" \u2014 "),Hq=a("a"),wwo=o("RemBertForSequenceClassification"),Awo=o(" (RemBERT model)"),ywo=l(),Nb=a("li"),hle=a("strong"),Lwo=o("roberta"),xwo=o(" \u2014 "),Uq=a("a"),kwo=o("RobertaForSequenceClassification"),Swo=o(" (RoBERTa model)"),Rwo=l(),jb=a("li"),ple=a("strong"),Bwo=o("roformer"),Pwo=o(" \u2014 "),Jq=a("a"),$wo=o("RoFormerForSequenceClassification"),Iwo=o(" (RoFormer model)"),qwo=l(),Db=a("li"),_le=a("strong"),Nwo=o("squeezebert"),jwo=o(" \u2014 "),Yq=a("a"),Dwo=o("SqueezeBertForSequenceClassification"),Gwo=o(" (SqueezeBERT model)"),Owo=l(),Gb=a("li"),ule=a("strong"),Vwo=o("tapas"),Xwo=o(" \u2014 "),Kq=a("a"),zwo=o("TapasForSequenceClassification"),Qwo=o(" (TAPAS model)"),Wwo=l(),Ob=a("li"),ble=a("strong"),Hwo=o("transfo-xl"),Uwo=o(" \u2014 "),Zq=a("a"),Jwo=o("TransfoXLForSequenceClassification"),Ywo=o(" (Transformer-XL model)"),Kwo=l(),Vb=a("li"),Fle=a("strong"),Zwo=o("xlm"),eAo=o(" \u2014 "),eN=a("a"),oAo=o("XLMForSequenceClassification"),rAo=o(" (XLM model)"),tAo=l(),Xb=a("li"),vle=a("strong"),aAo=o("xlm-roberta"),nAo=o(" \u2014 "),oN=a("a"),sAo=o("XLMRobertaForSequenceClassification"),lAo=o(" (XLM-RoBERTa model)"),iAo=l(),zb=a("li"),Tle=a("strong"),dAo=o("xlm-roberta-xl"),cAo=o(" \u2014 "),rN=a("a"),fAo=o("XLMRobertaXLForSequenceClassification"),mAo=o(" (XLM-RoBERTa-XL model)"),gAo=l(),Qb=a("li"),Mle=a("strong"),hAo=o("xlnet"),pAo=o(" \u2014 "),tN=a("a"),_Ao=o("XLNetForSequenceClassification"),uAo=o(" (XLNet model)"),bAo=l(),Wb=a("li"),Ele=a("strong"),FAo=o("yoso"),vAo=o(" \u2014 "),aN=a("a"),TAo=o("YosoForSequenceClassification"),MAo=o(" (YOSO model)"),EAo=l(),Hb=a("p"),CAo=o("The model is set in evaluation mode by default using "),Cle=a("code"),wAo=o("model.eval()"),AAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wle=a("code"),yAo=o("model.train()"),LAo=l(),Ale=a("p"),xAo=o("Examples:"),kAo=l(),f(IC.$$.fragment),iRe=l(),hd=a("h2"),Ub=a("a"),yle=a("span"),f(qC.$$.fragment),SAo=l(),Lle=a("span"),RAo=o("AutoModelForMultipleChoice"),dRe=l(),rr=a("div"),f(NC.$$.fragment),BAo=l(),pd=a("p"),PAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=a("a"),$Ao=o("from_pretrained()"),IAo=o(" class method or the "),sN=a("a"),qAo=o("from_config()"),NAo=o(` class
method.`),jAo=l(),jC=a("p"),DAo=o("This class cannot be instantiated directly using "),xle=a("code"),GAo=o("__init__()"),OAo=o(" (throws an error)."),VAo=l(),Jr=a("div"),f(DC.$$.fragment),XAo=l(),kle=a("p"),zAo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),QAo=l(),_d=a("p"),WAo=o(`Note:
Loading a model from its configuration file does `),Sle=a("strong"),HAo=o("not"),UAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=a("a"),JAo=o("from_pretrained()"),YAo=o(" to load the model weights."),KAo=l(),Rle=a("p"),ZAo=o("Examples:"),e0o=l(),f(GC.$$.fragment),o0o=l(),Ve=a("div"),f(OC.$$.fragment),r0o=l(),Ble=a("p"),t0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a0o=l(),Ja=a("p"),n0o=o("The model class to instantiate is selected based on the "),Ple=a("code"),s0o=o("model_type"),l0o=o(` property of the config object (either
passed as an argument or loaded from `),$le=a("code"),i0o=o("pretrained_model_name_or_path"),d0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=a("code"),c0o=o("pretrained_model_name_or_path"),f0o=o(":"),m0o=l(),G=a("ul"),Jb=a("li"),qle=a("strong"),g0o=o("albert"),h0o=o(" \u2014 "),iN=a("a"),p0o=o("AlbertForMultipleChoice"),_0o=o(" (ALBERT model)"),u0o=l(),Yb=a("li"),Nle=a("strong"),b0o=o("bert"),F0o=o(" \u2014 "),dN=a("a"),v0o=o("BertForMultipleChoice"),T0o=o(" (BERT model)"),M0o=l(),Kb=a("li"),jle=a("strong"),E0o=o("big_bird"),C0o=o(" \u2014 "),cN=a("a"),w0o=o("BigBirdForMultipleChoice"),A0o=o(" (BigBird model)"),y0o=l(),Zb=a("li"),Dle=a("strong"),L0o=o("camembert"),x0o=o(" \u2014 "),fN=a("a"),k0o=o("CamembertForMultipleChoice"),S0o=o(" (CamemBERT model)"),R0o=l(),e5=a("li"),Gle=a("strong"),B0o=o("canine"),P0o=o(" \u2014 "),mN=a("a"),$0o=o("CanineForMultipleChoice"),I0o=o(" (Canine model)"),q0o=l(),o5=a("li"),Ole=a("strong"),N0o=o("convbert"),j0o=o(" \u2014 "),gN=a("a"),D0o=o("ConvBertForMultipleChoice"),G0o=o(" (ConvBERT model)"),O0o=l(),r5=a("li"),Vle=a("strong"),V0o=o("data2vec-text"),X0o=o(" \u2014 "),hN=a("a"),z0o=o("Data2VecTextForMultipleChoice"),Q0o=o(" (Data2VecText model)"),W0o=l(),t5=a("li"),Xle=a("strong"),H0o=o("distilbert"),U0o=o(" \u2014 "),pN=a("a"),J0o=o("DistilBertForMultipleChoice"),Y0o=o(" (DistilBERT model)"),K0o=l(),a5=a("li"),zle=a("strong"),Z0o=o("electra"),eyo=o(" \u2014 "),_N=a("a"),oyo=o("ElectraForMultipleChoice"),ryo=o(" (ELECTRA model)"),tyo=l(),n5=a("li"),Qle=a("strong"),ayo=o("flaubert"),nyo=o(" \u2014 "),uN=a("a"),syo=o("FlaubertForMultipleChoice"),lyo=o(" (FlauBERT model)"),iyo=l(),s5=a("li"),Wle=a("strong"),dyo=o("fnet"),cyo=o(" \u2014 "),bN=a("a"),fyo=o("FNetForMultipleChoice"),myo=o(" (FNet model)"),gyo=l(),l5=a("li"),Hle=a("strong"),hyo=o("funnel"),pyo=o(" \u2014 "),FN=a("a"),_yo=o("FunnelForMultipleChoice"),uyo=o(" (Funnel Transformer model)"),byo=l(),i5=a("li"),Ule=a("strong"),Fyo=o("ibert"),vyo=o(" \u2014 "),vN=a("a"),Tyo=o("IBertForMultipleChoice"),Myo=o(" (I-BERT model)"),Eyo=l(),d5=a("li"),Jle=a("strong"),Cyo=o("longformer"),wyo=o(" \u2014 "),TN=a("a"),Ayo=o("LongformerForMultipleChoice"),yyo=o(" (Longformer model)"),Lyo=l(),c5=a("li"),Yle=a("strong"),xyo=o("megatron-bert"),kyo=o(" \u2014 "),MN=a("a"),Syo=o("MegatronBertForMultipleChoice"),Ryo=o(" (MegatronBert model)"),Byo=l(),f5=a("li"),Kle=a("strong"),Pyo=o("mobilebert"),$yo=o(" \u2014 "),EN=a("a"),Iyo=o("MobileBertForMultipleChoice"),qyo=o(" (MobileBERT model)"),Nyo=l(),m5=a("li"),Zle=a("strong"),jyo=o("mpnet"),Dyo=o(" \u2014 "),CN=a("a"),Gyo=o("MPNetForMultipleChoice"),Oyo=o(" (MPNet model)"),Vyo=l(),g5=a("li"),eie=a("strong"),Xyo=o("nystromformer"),zyo=o(" \u2014 "),wN=a("a"),Qyo=o("NystromformerForMultipleChoice"),Wyo=o(" (Nystromformer model)"),Hyo=l(),h5=a("li"),oie=a("strong"),Uyo=o("qdqbert"),Jyo=o(" \u2014 "),AN=a("a"),Yyo=o("QDQBertForMultipleChoice"),Kyo=o(" (QDQBert model)"),Zyo=l(),p5=a("li"),rie=a("strong"),eLo=o("rembert"),oLo=o(" \u2014 "),yN=a("a"),rLo=o("RemBertForMultipleChoice"),tLo=o(" (RemBERT model)"),aLo=l(),_5=a("li"),tie=a("strong"),nLo=o("roberta"),sLo=o(" \u2014 "),LN=a("a"),lLo=o("RobertaForMultipleChoice"),iLo=o(" (RoBERTa model)"),dLo=l(),u5=a("li"),aie=a("strong"),cLo=o("roformer"),fLo=o(" \u2014 "),xN=a("a"),mLo=o("RoFormerForMultipleChoice"),gLo=o(" (RoFormer model)"),hLo=l(),b5=a("li"),nie=a("strong"),pLo=o("squeezebert"),_Lo=o(" \u2014 "),kN=a("a"),uLo=o("SqueezeBertForMultipleChoice"),bLo=o(" (SqueezeBERT model)"),FLo=l(),F5=a("li"),sie=a("strong"),vLo=o("xlm"),TLo=o(" \u2014 "),SN=a("a"),MLo=o("XLMForMultipleChoice"),ELo=o(" (XLM model)"),CLo=l(),v5=a("li"),lie=a("strong"),wLo=o("xlm-roberta"),ALo=o(" \u2014 "),RN=a("a"),yLo=o("XLMRobertaForMultipleChoice"),LLo=o(" (XLM-RoBERTa model)"),xLo=l(),T5=a("li"),iie=a("strong"),kLo=o("xlm-roberta-xl"),SLo=o(" \u2014 "),BN=a("a"),RLo=o("XLMRobertaXLForMultipleChoice"),BLo=o(" (XLM-RoBERTa-XL model)"),PLo=l(),M5=a("li"),die=a("strong"),$Lo=o("xlnet"),ILo=o(" \u2014 "),PN=a("a"),qLo=o("XLNetForMultipleChoice"),NLo=o(" (XLNet model)"),jLo=l(),E5=a("li"),cie=a("strong"),DLo=o("yoso"),GLo=o(" \u2014 "),$N=a("a"),OLo=o("YosoForMultipleChoice"),VLo=o(" (YOSO model)"),XLo=l(),C5=a("p"),zLo=o("The model is set in evaluation mode by default using "),fie=a("code"),QLo=o("model.eval()"),WLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),HLo=o("model.train()"),ULo=l(),gie=a("p"),JLo=o("Examples:"),YLo=l(),f(VC.$$.fragment),cRe=l(),ud=a("h2"),w5=a("a"),hie=a("span"),f(XC.$$.fragment),KLo=l(),pie=a("span"),ZLo=o("AutoModelForNextSentencePrediction"),fRe=l(),tr=a("div"),f(zC.$$.fragment),e8o=l(),bd=a("p"),o8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=a("a"),r8o=o("from_pretrained()"),t8o=o(" class method or the "),qN=a("a"),a8o=o("from_config()"),n8o=o(` class
method.`),s8o=l(),QC=a("p"),l8o=o("This class cannot be instantiated directly using "),_ie=a("code"),i8o=o("__init__()"),d8o=o(" (throws an error)."),c8o=l(),Yr=a("div"),f(WC.$$.fragment),f8o=l(),uie=a("p"),m8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),g8o=l(),Fd=a("p"),h8o=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),p8o=o("not"),_8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=a("a"),u8o=o("from_pretrained()"),b8o=o(" to load the model weights."),F8o=l(),Fie=a("p"),v8o=o("Examples:"),T8o=l(),f(HC.$$.fragment),M8o=l(),Xe=a("div"),f(UC.$$.fragment),E8o=l(),vie=a("p"),C8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),w8o=l(),Ya=a("p"),A8o=o("The model class to instantiate is selected based on the "),Tie=a("code"),y8o=o("model_type"),L8o=o(` property of the config object (either
passed as an argument or loaded from `),Mie=a("code"),x8o=o("pretrained_model_name_or_path"),k8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=a("code"),S8o=o("pretrained_model_name_or_path"),R8o=o(":"),B8o=l(),da=a("ul"),A5=a("li"),Cie=a("strong"),P8o=o("bert"),$8o=o(" \u2014 "),jN=a("a"),I8o=o("BertForNextSentencePrediction"),q8o=o(" (BERT model)"),N8o=l(),y5=a("li"),wie=a("strong"),j8o=o("fnet"),D8o=o(" \u2014 "),DN=a("a"),G8o=o("FNetForNextSentencePrediction"),O8o=o(" (FNet model)"),V8o=l(),L5=a("li"),Aie=a("strong"),X8o=o("megatron-bert"),z8o=o(" \u2014 "),GN=a("a"),Q8o=o("MegatronBertForNextSentencePrediction"),W8o=o(" (MegatronBert model)"),H8o=l(),x5=a("li"),yie=a("strong"),U8o=o("mobilebert"),J8o=o(" \u2014 "),ON=a("a"),Y8o=o("MobileBertForNextSentencePrediction"),K8o=o(" (MobileBERT model)"),Z8o=l(),k5=a("li"),Lie=a("strong"),e9o=o("qdqbert"),o9o=o(" \u2014 "),VN=a("a"),r9o=o("QDQBertForNextSentencePrediction"),t9o=o(" (QDQBert model)"),a9o=l(),S5=a("p"),n9o=o("The model is set in evaluation mode by default using "),xie=a("code"),s9o=o("model.eval()"),l9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=a("code"),i9o=o("model.train()"),d9o=l(),Sie=a("p"),c9o=o("Examples:"),f9o=l(),f(JC.$$.fragment),mRe=l(),vd=a("h2"),R5=a("a"),Rie=a("span"),f(YC.$$.fragment),m9o=l(),Bie=a("span"),g9o=o("AutoModelForTokenClassification"),gRe=l(),ar=a("div"),f(KC.$$.fragment),h9o=l(),Td=a("p"),p9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=a("a"),_9o=o("from_pretrained()"),u9o=o(" class method or the "),zN=a("a"),b9o=o("from_config()"),F9o=o(` class
method.`),v9o=l(),ZC=a("p"),T9o=o("This class cannot be instantiated directly using "),Pie=a("code"),M9o=o("__init__()"),E9o=o(" (throws an error)."),C9o=l(),Kr=a("div"),f(ew.$$.fragment),w9o=l(),$ie=a("p"),A9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),y9o=l(),Md=a("p"),L9o=o(`Note:
Loading a model from its configuration file does `),Iie=a("strong"),x9o=o("not"),k9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),S9o=o("from_pretrained()"),R9o=o(" to load the model weights."),B9o=l(),qie=a("p"),P9o=o("Examples:"),$9o=l(),f(ow.$$.fragment),I9o=l(),ze=a("div"),f(rw.$$.fragment),q9o=l(),Nie=a("p"),N9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j9o=l(),Ka=a("p"),D9o=o("The model class to instantiate is selected based on the "),jie=a("code"),G9o=o("model_type"),O9o=o(` property of the config object (either
passed as an argument or loaded from `),Die=a("code"),V9o=o("pretrained_model_name_or_path"),X9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=a("code"),z9o=o("pretrained_model_name_or_path"),Q9o=o(":"),W9o=l(),j=a("ul"),B5=a("li"),Oie=a("strong"),H9o=o("albert"),U9o=o(" \u2014 "),WN=a("a"),J9o=o("AlbertForTokenClassification"),Y9o=o(" (ALBERT model)"),K9o=l(),P5=a("li"),Vie=a("strong"),Z9o=o("bert"),exo=o(" \u2014 "),HN=a("a"),oxo=o("BertForTokenClassification"),rxo=o(" (BERT model)"),txo=l(),$5=a("li"),Xie=a("strong"),axo=o("big_bird"),nxo=o(" \u2014 "),UN=a("a"),sxo=o("BigBirdForTokenClassification"),lxo=o(" (BigBird model)"),ixo=l(),I5=a("li"),zie=a("strong"),dxo=o("camembert"),cxo=o(" \u2014 "),JN=a("a"),fxo=o("CamembertForTokenClassification"),mxo=o(" (CamemBERT model)"),gxo=l(),q5=a("li"),Qie=a("strong"),hxo=o("canine"),pxo=o(" \u2014 "),YN=a("a"),_xo=o("CanineForTokenClassification"),uxo=o(" (Canine model)"),bxo=l(),N5=a("li"),Wie=a("strong"),Fxo=o("convbert"),vxo=o(" \u2014 "),KN=a("a"),Txo=o("ConvBertForTokenClassification"),Mxo=o(" (ConvBERT model)"),Exo=l(),j5=a("li"),Hie=a("strong"),Cxo=o("data2vec-text"),wxo=o(" \u2014 "),ZN=a("a"),Axo=o("Data2VecTextForTokenClassification"),yxo=o(" (Data2VecText model)"),Lxo=l(),D5=a("li"),Uie=a("strong"),xxo=o("deberta"),kxo=o(" \u2014 "),ej=a("a"),Sxo=o("DebertaForTokenClassification"),Rxo=o(" (DeBERTa model)"),Bxo=l(),G5=a("li"),Jie=a("strong"),Pxo=o("deberta-v2"),$xo=o(" \u2014 "),oj=a("a"),Ixo=o("DebertaV2ForTokenClassification"),qxo=o(" (DeBERTa-v2 model)"),Nxo=l(),O5=a("li"),Yie=a("strong"),jxo=o("distilbert"),Dxo=o(" \u2014 "),rj=a("a"),Gxo=o("DistilBertForTokenClassification"),Oxo=o(" (DistilBERT model)"),Vxo=l(),V5=a("li"),Kie=a("strong"),Xxo=o("electra"),zxo=o(" \u2014 "),tj=a("a"),Qxo=o("ElectraForTokenClassification"),Wxo=o(" (ELECTRA model)"),Hxo=l(),X5=a("li"),Zie=a("strong"),Uxo=o("flaubert"),Jxo=o(" \u2014 "),aj=a("a"),Yxo=o("FlaubertForTokenClassification"),Kxo=o(" (FlauBERT model)"),Zxo=l(),z5=a("li"),ede=a("strong"),eko=o("fnet"),oko=o(" \u2014 "),nj=a("a"),rko=o("FNetForTokenClassification"),tko=o(" (FNet model)"),ako=l(),Q5=a("li"),ode=a("strong"),nko=o("funnel"),sko=o(" \u2014 "),sj=a("a"),lko=o("FunnelForTokenClassification"),iko=o(" (Funnel Transformer model)"),dko=l(),W5=a("li"),rde=a("strong"),cko=o("gpt2"),fko=o(" \u2014 "),lj=a("a"),mko=o("GPT2ForTokenClassification"),gko=o(" (OpenAI GPT-2 model)"),hko=l(),H5=a("li"),tde=a("strong"),pko=o("ibert"),_ko=o(" \u2014 "),ij=a("a"),uko=o("IBertForTokenClassification"),bko=o(" (I-BERT model)"),Fko=l(),U5=a("li"),ade=a("strong"),vko=o("layoutlm"),Tko=o(" \u2014 "),dj=a("a"),Mko=o("LayoutLMForTokenClassification"),Eko=o(" (LayoutLM model)"),Cko=l(),J5=a("li"),nde=a("strong"),wko=o("layoutlmv2"),Ako=o(" \u2014 "),cj=a("a"),yko=o("LayoutLMv2ForTokenClassification"),Lko=o(" (LayoutLMv2 model)"),xko=l(),Y5=a("li"),sde=a("strong"),kko=o("longformer"),Sko=o(" \u2014 "),fj=a("a"),Rko=o("LongformerForTokenClassification"),Bko=o(" (Longformer model)"),Pko=l(),K5=a("li"),lde=a("strong"),$ko=o("megatron-bert"),Iko=o(" \u2014 "),mj=a("a"),qko=o("MegatronBertForTokenClassification"),Nko=o(" (MegatronBert model)"),jko=l(),Z5=a("li"),ide=a("strong"),Dko=o("mobilebert"),Gko=o(" \u2014 "),gj=a("a"),Oko=o("MobileBertForTokenClassification"),Vko=o(" (MobileBERT model)"),Xko=l(),e3=a("li"),dde=a("strong"),zko=o("mpnet"),Qko=o(" \u2014 "),hj=a("a"),Wko=o("MPNetForTokenClassification"),Hko=o(" (MPNet model)"),Uko=l(),o3=a("li"),cde=a("strong"),Jko=o("nystromformer"),Yko=o(" \u2014 "),pj=a("a"),Kko=o("NystromformerForTokenClassification"),Zko=o(" (Nystromformer model)"),eSo=l(),r3=a("li"),fde=a("strong"),oSo=o("qdqbert"),rSo=o(" \u2014 "),_j=a("a"),tSo=o("QDQBertForTokenClassification"),aSo=o(" (QDQBert model)"),nSo=l(),t3=a("li"),mde=a("strong"),sSo=o("rembert"),lSo=o(" \u2014 "),uj=a("a"),iSo=o("RemBertForTokenClassification"),dSo=o(" (RemBERT model)"),cSo=l(),a3=a("li"),gde=a("strong"),fSo=o("roberta"),mSo=o(" \u2014 "),bj=a("a"),gSo=o("RobertaForTokenClassification"),hSo=o(" (RoBERTa model)"),pSo=l(),n3=a("li"),hde=a("strong"),_So=o("roformer"),uSo=o(" \u2014 "),Fj=a("a"),bSo=o("RoFormerForTokenClassification"),FSo=o(" (RoFormer model)"),vSo=l(),s3=a("li"),pde=a("strong"),TSo=o("squeezebert"),MSo=o(" \u2014 "),vj=a("a"),ESo=o("SqueezeBertForTokenClassification"),CSo=o(" (SqueezeBERT model)"),wSo=l(),l3=a("li"),_de=a("strong"),ASo=o("xlm"),ySo=o(" \u2014 "),Tj=a("a"),LSo=o("XLMForTokenClassification"),xSo=o(" (XLM model)"),kSo=l(),i3=a("li"),ude=a("strong"),SSo=o("xlm-roberta"),RSo=o(" \u2014 "),Mj=a("a"),BSo=o("XLMRobertaForTokenClassification"),PSo=o(" (XLM-RoBERTa model)"),$So=l(),d3=a("li"),bde=a("strong"),ISo=o("xlm-roberta-xl"),qSo=o(" \u2014 "),Ej=a("a"),NSo=o("XLMRobertaXLForTokenClassification"),jSo=o(" (XLM-RoBERTa-XL model)"),DSo=l(),c3=a("li"),Fde=a("strong"),GSo=o("xlnet"),OSo=o(" \u2014 "),Cj=a("a"),VSo=o("XLNetForTokenClassification"),XSo=o(" (XLNet model)"),zSo=l(),f3=a("li"),vde=a("strong"),QSo=o("yoso"),WSo=o(" \u2014 "),wj=a("a"),HSo=o("YosoForTokenClassification"),USo=o(" (YOSO model)"),JSo=l(),m3=a("p"),YSo=o("The model is set in evaluation mode by default using "),Tde=a("code"),KSo=o("model.eval()"),ZSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=a("code"),eRo=o("model.train()"),oRo=l(),Ede=a("p"),rRo=o("Examples:"),tRo=l(),f(tw.$$.fragment),hRe=l(),Ed=a("h2"),g3=a("a"),Cde=a("span"),f(aw.$$.fragment),aRo=l(),wde=a("span"),nRo=o("AutoModelForQuestionAnswering"),pRe=l(),nr=a("div"),f(nw.$$.fragment),sRo=l(),Cd=a("p"),lRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=a("a"),iRo=o("from_pretrained()"),dRo=o(" class method or the "),yj=a("a"),cRo=o("from_config()"),fRo=o(` class
method.`),mRo=l(),sw=a("p"),gRo=o("This class cannot be instantiated directly using "),Ade=a("code"),hRo=o("__init__()"),pRo=o(" (throws an error)."),_Ro=l(),Zr=a("div"),f(lw.$$.fragment),uRo=l(),yde=a("p"),bRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FRo=l(),wd=a("p"),vRo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),TRo=o("not"),MRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=a("a"),ERo=o("from_pretrained()"),CRo=o(" to load the model weights."),wRo=l(),xde=a("p"),ARo=o("Examples:"),yRo=l(),f(iw.$$.fragment),LRo=l(),Qe=a("div"),f(dw.$$.fragment),xRo=l(),kde=a("p"),kRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),SRo=l(),Za=a("p"),RRo=o("The model class to instantiate is selected based on the "),Sde=a("code"),BRo=o("model_type"),PRo=o(` property of the config object (either
passed as an argument or loaded from `),Rde=a("code"),$Ro=o("pretrained_model_name_or_path"),IRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=a("code"),qRo=o("pretrained_model_name_or_path"),NRo=o(":"),jRo=l(),R=a("ul"),h3=a("li"),Pde=a("strong"),DRo=o("albert"),GRo=o(" \u2014 "),xj=a("a"),ORo=o("AlbertForQuestionAnswering"),VRo=o(" (ALBERT model)"),XRo=l(),p3=a("li"),$de=a("strong"),zRo=o("bart"),QRo=o(" \u2014 "),kj=a("a"),WRo=o("BartForQuestionAnswering"),HRo=o(" (BART model)"),URo=l(),_3=a("li"),Ide=a("strong"),JRo=o("bert"),YRo=o(" \u2014 "),Sj=a("a"),KRo=o("BertForQuestionAnswering"),ZRo=o(" (BERT model)"),eBo=l(),u3=a("li"),qde=a("strong"),oBo=o("big_bird"),rBo=o(" \u2014 "),Rj=a("a"),tBo=o("BigBirdForQuestionAnswering"),aBo=o(" (BigBird model)"),nBo=l(),b3=a("li"),Nde=a("strong"),sBo=o("bigbird_pegasus"),lBo=o(" \u2014 "),Bj=a("a"),iBo=o("BigBirdPegasusForQuestionAnswering"),dBo=o(" (BigBirdPegasus model)"),cBo=l(),F3=a("li"),jde=a("strong"),fBo=o("camembert"),mBo=o(" \u2014 "),Pj=a("a"),gBo=o("CamembertForQuestionAnswering"),hBo=o(" (CamemBERT model)"),pBo=l(),v3=a("li"),Dde=a("strong"),_Bo=o("canine"),uBo=o(" \u2014 "),$j=a("a"),bBo=o("CanineForQuestionAnswering"),FBo=o(" (Canine model)"),vBo=l(),T3=a("li"),Gde=a("strong"),TBo=o("convbert"),MBo=o(" \u2014 "),Ij=a("a"),EBo=o("ConvBertForQuestionAnswering"),CBo=o(" (ConvBERT model)"),wBo=l(),M3=a("li"),Ode=a("strong"),ABo=o("data2vec-text"),yBo=o(" \u2014 "),qj=a("a"),LBo=o("Data2VecTextForQuestionAnswering"),xBo=o(" (Data2VecText model)"),kBo=l(),E3=a("li"),Vde=a("strong"),SBo=o("deberta"),RBo=o(" \u2014 "),Nj=a("a"),BBo=o("DebertaForQuestionAnswering"),PBo=o(" (DeBERTa model)"),$Bo=l(),C3=a("li"),Xde=a("strong"),IBo=o("deberta-v2"),qBo=o(" \u2014 "),jj=a("a"),NBo=o("DebertaV2ForQuestionAnswering"),jBo=o(" (DeBERTa-v2 model)"),DBo=l(),w3=a("li"),zde=a("strong"),GBo=o("distilbert"),OBo=o(" \u2014 "),Dj=a("a"),VBo=o("DistilBertForQuestionAnswering"),XBo=o(" (DistilBERT model)"),zBo=l(),A3=a("li"),Qde=a("strong"),QBo=o("electra"),WBo=o(" \u2014 "),Gj=a("a"),HBo=o("ElectraForQuestionAnswering"),UBo=o(" (ELECTRA model)"),JBo=l(),y3=a("li"),Wde=a("strong"),YBo=o("flaubert"),KBo=o(" \u2014 "),Oj=a("a"),ZBo=o("FlaubertForQuestionAnsweringSimple"),ePo=o(" (FlauBERT model)"),oPo=l(),L3=a("li"),Hde=a("strong"),rPo=o("fnet"),tPo=o(" \u2014 "),Vj=a("a"),aPo=o("FNetForQuestionAnswering"),nPo=o(" (FNet model)"),sPo=l(),x3=a("li"),Ude=a("strong"),lPo=o("funnel"),iPo=o(" \u2014 "),Xj=a("a"),dPo=o("FunnelForQuestionAnswering"),cPo=o(" (Funnel Transformer model)"),fPo=l(),k3=a("li"),Jde=a("strong"),mPo=o("gptj"),gPo=o(" \u2014 "),zj=a("a"),hPo=o("GPTJForQuestionAnswering"),pPo=o(" (GPT-J model)"),_Po=l(),S3=a("li"),Yde=a("strong"),uPo=o("ibert"),bPo=o(" \u2014 "),Qj=a("a"),FPo=o("IBertForQuestionAnswering"),vPo=o(" (I-BERT model)"),TPo=l(),R3=a("li"),Kde=a("strong"),MPo=o("layoutlmv2"),EPo=o(" \u2014 "),Wj=a("a"),CPo=o("LayoutLMv2ForQuestionAnswering"),wPo=o(" (LayoutLMv2 model)"),APo=l(),B3=a("li"),Zde=a("strong"),yPo=o("led"),LPo=o(" \u2014 "),Hj=a("a"),xPo=o("LEDForQuestionAnswering"),kPo=o(" (LED model)"),SPo=l(),P3=a("li"),ece=a("strong"),RPo=o("longformer"),BPo=o(" \u2014 "),Uj=a("a"),PPo=o("LongformerForQuestionAnswering"),$Po=o(" (Longformer model)"),IPo=l(),$3=a("li"),oce=a("strong"),qPo=o("lxmert"),NPo=o(" \u2014 "),Jj=a("a"),jPo=o("LxmertForQuestionAnswering"),DPo=o(" (LXMERT model)"),GPo=l(),I3=a("li"),rce=a("strong"),OPo=o("mbart"),VPo=o(" \u2014 "),Yj=a("a"),XPo=o("MBartForQuestionAnswering"),zPo=o(" (mBART model)"),QPo=l(),q3=a("li"),tce=a("strong"),WPo=o("megatron-bert"),HPo=o(" \u2014 "),Kj=a("a"),UPo=o("MegatronBertForQuestionAnswering"),JPo=o(" (MegatronBert model)"),YPo=l(),N3=a("li"),ace=a("strong"),KPo=o("mobilebert"),ZPo=o(" \u2014 "),Zj=a("a"),e$o=o("MobileBertForQuestionAnswering"),o$o=o(" (MobileBERT model)"),r$o=l(),j3=a("li"),nce=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),eD=a("a"),n$o=o("MPNetForQuestionAnswering"),s$o=o(" (MPNet model)"),l$o=l(),D3=a("li"),sce=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),oD=a("a"),c$o=o("NystromformerForQuestionAnswering"),f$o=o(" (Nystromformer model)"),m$o=l(),G3=a("li"),lce=a("strong"),g$o=o("qdqbert"),h$o=o(" \u2014 "),rD=a("a"),p$o=o("QDQBertForQuestionAnswering"),_$o=o(" (QDQBert model)"),u$o=l(),O3=a("li"),ice=a("strong"),b$o=o("reformer"),F$o=o(" \u2014 "),tD=a("a"),v$o=o("ReformerForQuestionAnswering"),T$o=o(" (Reformer model)"),M$o=l(),V3=a("li"),dce=a("strong"),E$o=o("rembert"),C$o=o(" \u2014 "),aD=a("a"),w$o=o("RemBertForQuestionAnswering"),A$o=o(" (RemBERT model)"),y$o=l(),X3=a("li"),cce=a("strong"),L$o=o("roberta"),x$o=o(" \u2014 "),nD=a("a"),k$o=o("RobertaForQuestionAnswering"),S$o=o(" (RoBERTa model)"),R$o=l(),z3=a("li"),fce=a("strong"),B$o=o("roformer"),P$o=o(" \u2014 "),sD=a("a"),$$o=o("RoFormerForQuestionAnswering"),I$o=o(" (RoFormer model)"),q$o=l(),Q3=a("li"),mce=a("strong"),N$o=o("splinter"),j$o=o(" \u2014 "),lD=a("a"),D$o=o("SplinterForQuestionAnswering"),G$o=o(" (Splinter model)"),O$o=l(),W3=a("li"),gce=a("strong"),V$o=o("squeezebert"),X$o=o(" \u2014 "),iD=a("a"),z$o=o("SqueezeBertForQuestionAnswering"),Q$o=o(" (SqueezeBERT model)"),W$o=l(),H3=a("li"),hce=a("strong"),H$o=o("xlm"),U$o=o(" \u2014 "),dD=a("a"),J$o=o("XLMForQuestionAnsweringSimple"),Y$o=o(" (XLM model)"),K$o=l(),U3=a("li"),pce=a("strong"),Z$o=o("xlm-roberta"),eIo=o(" \u2014 "),cD=a("a"),oIo=o("XLMRobertaForQuestionAnswering"),rIo=o(" (XLM-RoBERTa model)"),tIo=l(),J3=a("li"),_ce=a("strong"),aIo=o("xlm-roberta-xl"),nIo=o(" \u2014 "),fD=a("a"),sIo=o("XLMRobertaXLForQuestionAnswering"),lIo=o(" (XLM-RoBERTa-XL model)"),iIo=l(),Y3=a("li"),uce=a("strong"),dIo=o("xlnet"),cIo=o(" \u2014 "),mD=a("a"),fIo=o("XLNetForQuestionAnsweringSimple"),mIo=o(" (XLNet model)"),gIo=l(),K3=a("li"),bce=a("strong"),hIo=o("yoso"),pIo=o(" \u2014 "),gD=a("a"),_Io=o("YosoForQuestionAnswering"),uIo=o(" (YOSO model)"),bIo=l(),Z3=a("p"),FIo=o("The model is set in evaluation mode by default using "),Fce=a("code"),vIo=o("model.eval()"),TIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=a("code"),MIo=o("model.train()"),EIo=l(),Tce=a("p"),CIo=o("Examples:"),wIo=l(),f(cw.$$.fragment),_Re=l(),Ad=a("h2"),e2=a("a"),Mce=a("span"),f(fw.$$.fragment),AIo=l(),Ece=a("span"),yIo=o("AutoModelForTableQuestionAnswering"),uRe=l(),sr=a("div"),f(mw.$$.fragment),LIo=l(),yd=a("p"),xIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=a("a"),kIo=o("from_pretrained()"),SIo=o(" class method or the "),pD=a("a"),RIo=o("from_config()"),BIo=o(` class
method.`),PIo=l(),gw=a("p"),$Io=o("This class cannot be instantiated directly using "),Cce=a("code"),IIo=o("__init__()"),qIo=o(" (throws an error)."),NIo=l(),et=a("div"),f(hw.$$.fragment),jIo=l(),wce=a("p"),DIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GIo=l(),Ld=a("p"),OIo=o(`Note:
Loading a model from its configuration file does `),Ace=a("strong"),VIo=o("not"),XIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=a("a"),zIo=o("from_pretrained()"),QIo=o(" to load the model weights."),WIo=l(),yce=a("p"),HIo=o("Examples:"),UIo=l(),f(pw.$$.fragment),JIo=l(),We=a("div"),f(_w.$$.fragment),YIo=l(),Lce=a("p"),KIo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ZIo=l(),en=a("p"),eqo=o("The model class to instantiate is selected based on the "),xce=a("code"),oqo=o("model_type"),rqo=o(` property of the config object (either
passed as an argument or loaded from `),kce=a("code"),tqo=o("pretrained_model_name_or_path"),aqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=a("code"),nqo=o("pretrained_model_name_or_path"),sqo=o(":"),lqo=l(),Rce=a("ul"),o2=a("li"),Bce=a("strong"),iqo=o("tapas"),dqo=o(" \u2014 "),uD=a("a"),cqo=o("TapasForQuestionAnswering"),fqo=o(" (TAPAS model)"),mqo=l(),r2=a("p"),gqo=o("The model is set in evaluation mode by default using "),Pce=a("code"),hqo=o("model.eval()"),pqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),_qo=o("model.train()"),uqo=l(),Ice=a("p"),bqo=o("Examples:"),Fqo=l(),f(uw.$$.fragment),bRe=l(),xd=a("h2"),t2=a("a"),qce=a("span"),f(bw.$$.fragment),vqo=l(),Nce=a("span"),Tqo=o("AutoModelForImageClassification"),FRe=l(),lr=a("div"),f(Fw.$$.fragment),Mqo=l(),kd=a("p"),Eqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bD=a("a"),Cqo=o("from_pretrained()"),wqo=o(" class method or the "),FD=a("a"),Aqo=o("from_config()"),yqo=o(` class
method.`),Lqo=l(),vw=a("p"),xqo=o("This class cannot be instantiated directly using "),jce=a("code"),kqo=o("__init__()"),Sqo=o(" (throws an error)."),Rqo=l(),ot=a("div"),f(Tw.$$.fragment),Bqo=l(),Dce=a("p"),Pqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$qo=l(),Sd=a("p"),Iqo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),qqo=o("not"),Nqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=a("a"),jqo=o("from_pretrained()"),Dqo=o(" to load the model weights."),Gqo=l(),Oce=a("p"),Oqo=o("Examples:"),Vqo=l(),f(Mw.$$.fragment),Xqo=l(),He=a("div"),f(Ew.$$.fragment),zqo=l(),Vce=a("p"),Qqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wqo=l(),on=a("p"),Hqo=o("The model class to instantiate is selected based on the "),Xce=a("code"),Uqo=o("model_type"),Jqo=o(` property of the config object (either
passed as an argument or loaded from `),zce=a("code"),Yqo=o("pretrained_model_name_or_path"),Kqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),Zqo=o("pretrained_model_name_or_path"),eNo=o(":"),oNo=l(),ge=a("ul"),a2=a("li"),Wce=a("strong"),rNo=o("beit"),tNo=o(" \u2014 "),TD=a("a"),aNo=o("BeitForImageClassification"),nNo=o(" (BEiT model)"),sNo=l(),n2=a("li"),Hce=a("strong"),lNo=o("convnext"),iNo=o(" \u2014 "),MD=a("a"),dNo=o("ConvNextForImageClassification"),cNo=o(" (ConvNext model)"),fNo=l(),Ds=a("li"),Uce=a("strong"),mNo=o("deit"),gNo=o(" \u2014 "),ED=a("a"),hNo=o("DeiTForImageClassification"),pNo=o(" or "),CD=a("a"),_No=o("DeiTForImageClassificationWithTeacher"),uNo=o(" (DeiT model)"),bNo=l(),s2=a("li"),Jce=a("strong"),FNo=o("imagegpt"),vNo=o(" \u2014 "),wD=a("a"),TNo=o("ImageGPTForImageClassification"),MNo=o(" (ImageGPT model)"),ENo=l(),ma=a("li"),Yce=a("strong"),CNo=o("perceiver"),wNo=o(" \u2014 "),AD=a("a"),ANo=o("PerceiverForImageClassificationLearned"),yNo=o(" or "),yD=a("a"),LNo=o("PerceiverForImageClassificationFourier"),xNo=o(" or "),LD=a("a"),kNo=o("PerceiverForImageClassificationConvProcessing"),SNo=o(" (Perceiver model)"),RNo=l(),l2=a("li"),Kce=a("strong"),BNo=o("poolformer"),PNo=o(" \u2014 "),xD=a("a"),$No=o("PoolFormerForImageClassification"),INo=o(" (PoolFormer model)"),qNo=l(),i2=a("li"),Zce=a("strong"),NNo=o("resnet"),jNo=o(" \u2014 "),kD=a("a"),DNo=o("ResNetForImageClassification"),GNo=o(" (ResNet model)"),ONo=l(),d2=a("li"),efe=a("strong"),VNo=o("segformer"),XNo=o(" \u2014 "),SD=a("a"),zNo=o("SegformerForImageClassification"),QNo=o(" (SegFormer model)"),WNo=l(),c2=a("li"),ofe=a("strong"),HNo=o("swin"),UNo=o(" \u2014 "),RD=a("a"),JNo=o("SwinForImageClassification"),YNo=o(" (Swin model)"),KNo=l(),f2=a("li"),rfe=a("strong"),ZNo=o("van"),ejo=o(" \u2014 "),BD=a("a"),ojo=o("VanForImageClassification"),rjo=o(" (VAN model)"),tjo=l(),m2=a("li"),tfe=a("strong"),ajo=o("vit"),njo=o(" \u2014 "),PD=a("a"),sjo=o("ViTForImageClassification"),ljo=o(" (ViT model)"),ijo=l(),g2=a("p"),djo=o("The model is set in evaluation mode by default using "),afe=a("code"),cjo=o("model.eval()"),fjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=a("code"),mjo=o("model.train()"),gjo=l(),sfe=a("p"),hjo=o("Examples:"),pjo=l(),f(Cw.$$.fragment),vRe=l(),Rd=a("h2"),h2=a("a"),lfe=a("span"),f(ww.$$.fragment),_jo=l(),ife=a("span"),ujo=o("AutoModelForVision2Seq"),TRe=l(),ir=a("div"),f(Aw.$$.fragment),bjo=l(),Bd=a("p"),Fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=a("a"),vjo=o("from_pretrained()"),Tjo=o(" class method or the "),ID=a("a"),Mjo=o("from_config()"),Ejo=o(` class
method.`),Cjo=l(),yw=a("p"),wjo=o("This class cannot be instantiated directly using "),dfe=a("code"),Ajo=o("__init__()"),yjo=o(" (throws an error)."),Ljo=l(),rt=a("div"),f(Lw.$$.fragment),xjo=l(),cfe=a("p"),kjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sjo=l(),Pd=a("p"),Rjo=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),Bjo=o("not"),Pjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),$jo=o("from_pretrained()"),Ijo=o(" to load the model weights."),qjo=l(),mfe=a("p"),Njo=o("Examples:"),jjo=l(),f(xw.$$.fragment),Djo=l(),Ue=a("div"),f(kw.$$.fragment),Gjo=l(),gfe=a("p"),Ojo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vjo=l(),rn=a("p"),Xjo=o("The model class to instantiate is selected based on the "),hfe=a("code"),zjo=o("model_type"),Qjo=o(` property of the config object (either
passed as an argument or loaded from `),pfe=a("code"),Wjo=o("pretrained_model_name_or_path"),Hjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=a("code"),Ujo=o("pretrained_model_name_or_path"),Jjo=o(":"),Yjo=l(),ufe=a("ul"),p2=a("li"),bfe=a("strong"),Kjo=o("vision-encoder-decoder"),Zjo=o(" \u2014 "),ND=a("a"),eDo=o("VisionEncoderDecoderModel"),oDo=o(" (Vision Encoder decoder model)"),rDo=l(),_2=a("p"),tDo=o("The model is set in evaluation mode by default using "),Ffe=a("code"),aDo=o("model.eval()"),nDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),sDo=o("model.train()"),lDo=l(),Tfe=a("p"),iDo=o("Examples:"),dDo=l(),f(Sw.$$.fragment),MRe=l(),$d=a("h2"),u2=a("a"),Mfe=a("span"),f(Rw.$$.fragment),cDo=l(),Efe=a("span"),fDo=o("AutoModelForAudioClassification"),ERe=l(),dr=a("div"),f(Bw.$$.fragment),mDo=l(),Id=a("p"),gDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=a("a"),hDo=o("from_pretrained()"),pDo=o(" class method or the "),DD=a("a"),_Do=o("from_config()"),uDo=o(` class
method.`),bDo=l(),Pw=a("p"),FDo=o("This class cannot be instantiated directly using "),Cfe=a("code"),vDo=o("__init__()"),TDo=o(" (throws an error)."),MDo=l(),tt=a("div"),f($w.$$.fragment),EDo=l(),wfe=a("p"),CDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wDo=l(),qd=a("p"),ADo=o(`Note:
Loading a model from its configuration file does `),Afe=a("strong"),yDo=o("not"),LDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=a("a"),xDo=o("from_pretrained()"),kDo=o(" to load the model weights."),SDo=l(),yfe=a("p"),RDo=o("Examples:"),BDo=l(),f(Iw.$$.fragment),PDo=l(),Je=a("div"),f(qw.$$.fragment),$Do=l(),Lfe=a("p"),IDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qDo=l(),tn=a("p"),NDo=o("The model class to instantiate is selected based on the "),xfe=a("code"),jDo=o("model_type"),DDo=o(` property of the config object (either
passed as an argument or loaded from `),kfe=a("code"),GDo=o("pretrained_model_name_or_path"),ODo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=a("code"),VDo=o("pretrained_model_name_or_path"),XDo=o(":"),zDo=l(),Se=a("ul"),b2=a("li"),Rfe=a("strong"),QDo=o("data2vec-audio"),WDo=o(" \u2014 "),OD=a("a"),HDo=o("Data2VecAudioForSequenceClassification"),UDo=o(" (Data2VecAudio model)"),JDo=l(),F2=a("li"),Bfe=a("strong"),YDo=o("hubert"),KDo=o(" \u2014 "),VD=a("a"),ZDo=o("HubertForSequenceClassification"),eGo=o(" (Hubert model)"),oGo=l(),v2=a("li"),Pfe=a("strong"),rGo=o("sew"),tGo=o(" \u2014 "),XD=a("a"),aGo=o("SEWForSequenceClassification"),nGo=o(" (SEW model)"),sGo=l(),T2=a("li"),$fe=a("strong"),lGo=o("sew-d"),iGo=o(" \u2014 "),zD=a("a"),dGo=o("SEWDForSequenceClassification"),cGo=o(" (SEW-D model)"),fGo=l(),M2=a("li"),Ife=a("strong"),mGo=o("unispeech"),gGo=o(" \u2014 "),QD=a("a"),hGo=o("UniSpeechForSequenceClassification"),pGo=o(" (UniSpeech model)"),_Go=l(),E2=a("li"),qfe=a("strong"),uGo=o("unispeech-sat"),bGo=o(" \u2014 "),WD=a("a"),FGo=o("UniSpeechSatForSequenceClassification"),vGo=o(" (UniSpeechSat model)"),TGo=l(),C2=a("li"),Nfe=a("strong"),MGo=o("wav2vec2"),EGo=o(" \u2014 "),HD=a("a"),CGo=o("Wav2Vec2ForSequenceClassification"),wGo=o(" (Wav2Vec2 model)"),AGo=l(),w2=a("li"),jfe=a("strong"),yGo=o("wavlm"),LGo=o(" \u2014 "),UD=a("a"),xGo=o("WavLMForSequenceClassification"),kGo=o(" (WavLM model)"),SGo=l(),A2=a("p"),RGo=o("The model is set in evaluation mode by default using "),Dfe=a("code"),BGo=o("model.eval()"),PGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=a("code"),$Go=o("model.train()"),IGo=l(),Ofe=a("p"),qGo=o("Examples:"),NGo=l(),f(Nw.$$.fragment),CRe=l(),Nd=a("h2"),y2=a("a"),Vfe=a("span"),f(jw.$$.fragment),jGo=l(),Xfe=a("span"),DGo=o("AutoModelForAudioFrameClassification"),wRe=l(),cr=a("div"),f(Dw.$$.fragment),GGo=l(),jd=a("p"),OGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=a("a"),VGo=o("from_pretrained()"),XGo=o(" class method or the "),YD=a("a"),zGo=o("from_config()"),QGo=o(` class
method.`),WGo=l(),Gw=a("p"),HGo=o("This class cannot be instantiated directly using "),zfe=a("code"),UGo=o("__init__()"),JGo=o(" (throws an error)."),YGo=l(),at=a("div"),f(Ow.$$.fragment),KGo=l(),Qfe=a("p"),ZGo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),eOo=l(),Dd=a("p"),oOo=o(`Note:
Loading a model from its configuration file does `),Wfe=a("strong"),rOo=o("not"),tOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),aOo=o("from_pretrained()"),nOo=o(" to load the model weights."),sOo=l(),Hfe=a("p"),lOo=o("Examples:"),iOo=l(),f(Vw.$$.fragment),dOo=l(),Ye=a("div"),f(Xw.$$.fragment),cOo=l(),Ufe=a("p"),fOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mOo=l(),an=a("p"),gOo=o("The model class to instantiate is selected based on the "),Jfe=a("code"),hOo=o("model_type"),pOo=o(` property of the config object (either
passed as an argument or loaded from `),Yfe=a("code"),_Oo=o("pretrained_model_name_or_path"),uOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=a("code"),bOo=o("pretrained_model_name_or_path"),FOo=o(":"),vOo=l(),nn=a("ul"),L2=a("li"),Zfe=a("strong"),TOo=o("data2vec-audio"),MOo=o(" \u2014 "),ZD=a("a"),EOo=o("Data2VecAudioForAudioFrameClassification"),COo=o(" (Data2VecAudio model)"),wOo=l(),x2=a("li"),eme=a("strong"),AOo=o("unispeech-sat"),yOo=o(" \u2014 "),eG=a("a"),LOo=o("UniSpeechSatForAudioFrameClassification"),xOo=o(" (UniSpeechSat model)"),kOo=l(),k2=a("li"),ome=a("strong"),SOo=o("wav2vec2"),ROo=o(" \u2014 "),oG=a("a"),BOo=o("Wav2Vec2ForAudioFrameClassification"),POo=o(" (Wav2Vec2 model)"),$Oo=l(),S2=a("li"),rme=a("strong"),IOo=o("wavlm"),qOo=o(" \u2014 "),rG=a("a"),NOo=o("WavLMForAudioFrameClassification"),jOo=o(" (WavLM model)"),DOo=l(),R2=a("p"),GOo=o("The model is set in evaluation mode by default using "),tme=a("code"),OOo=o("model.eval()"),VOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=a("code"),XOo=o("model.train()"),zOo=l(),nme=a("p"),QOo=o("Examples:"),WOo=l(),f(zw.$$.fragment),ARe=l(),Gd=a("h2"),B2=a("a"),sme=a("span"),f(Qw.$$.fragment),HOo=l(),lme=a("span"),UOo=o("AutoModelForCTC"),yRe=l(),fr=a("div"),f(Ww.$$.fragment),JOo=l(),Od=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=a("a"),KOo=o("from_pretrained()"),ZOo=o(" class method or the "),aG=a("a"),eVo=o("from_config()"),oVo=o(` class
method.`),rVo=l(),Hw=a("p"),tVo=o("This class cannot be instantiated directly using "),ime=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),nt=a("div"),f(Uw.$$.fragment),lVo=l(),dme=a("p"),iVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),dVo=l(),Vd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),gVo=o("from_pretrained()"),hVo=o(" to load the model weights."),pVo=l(),fme=a("p"),_Vo=o("Examples:"),uVo=l(),f(Jw.$$.fragment),bVo=l(),Ke=a("div"),f(Yw.$$.fragment),FVo=l(),mme=a("p"),vVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),TVo=l(),sn=a("p"),MVo=o("The model class to instantiate is selected based on the "),gme=a("code"),EVo=o("model_type"),CVo=o(` property of the config object (either
passed as an argument or loaded from `),hme=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=a("code"),yVo=o("pretrained_model_name_or_path"),LVo=o(":"),xVo=l(),Re=a("ul"),P2=a("li"),_me=a("strong"),kVo=o("data2vec-audio"),SVo=o(" \u2014 "),sG=a("a"),RVo=o("Data2VecAudioForCTC"),BVo=o(" (Data2VecAudio model)"),PVo=l(),$2=a("li"),ume=a("strong"),$Vo=o("hubert"),IVo=o(" \u2014 "),lG=a("a"),qVo=o("HubertForCTC"),NVo=o(" (Hubert model)"),jVo=l(),I2=a("li"),bme=a("strong"),DVo=o("sew"),GVo=o(" \u2014 "),iG=a("a"),OVo=o("SEWForCTC"),VVo=o(" (SEW model)"),XVo=l(),q2=a("li"),Fme=a("strong"),zVo=o("sew-d"),QVo=o(" \u2014 "),dG=a("a"),WVo=o("SEWDForCTC"),HVo=o(" (SEW-D model)"),UVo=l(),N2=a("li"),vme=a("strong"),JVo=o("unispeech"),YVo=o(" \u2014 "),cG=a("a"),KVo=o("UniSpeechForCTC"),ZVo=o(" (UniSpeech model)"),eXo=l(),j2=a("li"),Tme=a("strong"),oXo=o("unispeech-sat"),rXo=o(" \u2014 "),fG=a("a"),tXo=o("UniSpeechSatForCTC"),aXo=o(" (UniSpeechSat model)"),nXo=l(),D2=a("li"),Mme=a("strong"),sXo=o("wav2vec2"),lXo=o(" \u2014 "),mG=a("a"),iXo=o("Wav2Vec2ForCTC"),dXo=o(" (Wav2Vec2 model)"),cXo=l(),G2=a("li"),Eme=a("strong"),fXo=o("wavlm"),mXo=o(" \u2014 "),gG=a("a"),gXo=o("WavLMForCTC"),hXo=o(" (WavLM model)"),pXo=l(),O2=a("p"),_Xo=o("The model is set in evaluation mode by default using "),Cme=a("code"),uXo=o("model.eval()"),bXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),FXo=o("model.train()"),vXo=l(),Ame=a("p"),TXo=o("Examples:"),MXo=l(),f(Kw.$$.fragment),LRe=l(),Xd=a("h2"),V2=a("a"),yme=a("span"),f(Zw.$$.fragment),EXo=l(),Lme=a("span"),CXo=o("AutoModelForSpeechSeq2Seq"),xRe=l(),mr=a("div"),f(eA.$$.fragment),wXo=l(),zd=a("p"),AXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=a("a"),yXo=o("from_pretrained()"),LXo=o(" class method or the "),pG=a("a"),xXo=o("from_config()"),kXo=o(` class
method.`),SXo=l(),oA=a("p"),RXo=o("This class cannot be instantiated directly using "),xme=a("code"),BXo=o("__init__()"),PXo=o(" (throws an error)."),$Xo=l(),st=a("div"),f(rA.$$.fragment),IXo=l(),kme=a("p"),qXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),NXo=l(),Qd=a("p"),jXo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),DXo=o("not"),GXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=a("a"),OXo=o("from_pretrained()"),VXo=o(" to load the model weights."),XXo=l(),Rme=a("p"),zXo=o("Examples:"),QXo=l(),f(tA.$$.fragment),WXo=l(),Ze=a("div"),f(aA.$$.fragment),HXo=l(),Bme=a("p"),UXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),JXo=l(),ln=a("p"),YXo=o("The model class to instantiate is selected based on the "),Pme=a("code"),KXo=o("model_type"),ZXo=o(` property of the config object (either
passed as an argument or loaded from `),$me=a("code"),ezo=o("pretrained_model_name_or_path"),ozo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(":"),azo=l(),nA=a("ul"),X2=a("li"),qme=a("strong"),nzo=o("speech-encoder-decoder"),szo=o(" \u2014 "),uG=a("a"),lzo=o("SpeechEncoderDecoderModel"),izo=o(" (Speech Encoder decoder model)"),dzo=l(),z2=a("li"),Nme=a("strong"),czo=o("speech_to_text"),fzo=o(" \u2014 "),bG=a("a"),mzo=o("Speech2TextForConditionalGeneration"),gzo=o(" (Speech2Text model)"),hzo=l(),Q2=a("p"),pzo=o("The model is set in evaluation mode by default using "),jme=a("code"),_zo=o("model.eval()"),uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),bzo=o("model.train()"),Fzo=l(),Gme=a("p"),vzo=o("Examples:"),Tzo=l(),f(sA.$$.fragment),kRe=l(),Wd=a("h2"),W2=a("a"),Ome=a("span"),f(lA.$$.fragment),Mzo=l(),Vme=a("span"),Ezo=o("AutoModelForAudioXVector"),SRe=l(),gr=a("div"),f(iA.$$.fragment),Czo=l(),Hd=a("p"),wzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FG=a("a"),Azo=o("from_pretrained()"),yzo=o(" class method or the "),vG=a("a"),Lzo=o("from_config()"),xzo=o(` class
method.`),kzo=l(),dA=a("p"),Szo=o("This class cannot be instantiated directly using "),Xme=a("code"),Rzo=o("__init__()"),Bzo=o(" (throws an error)."),Pzo=l(),lt=a("div"),f(cA.$$.fragment),$zo=l(),zme=a("p"),Izo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),qzo=l(),Ud=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" to load the model weights."),Vzo=l(),Wme=a("p"),Xzo=o("Examples:"),zzo=l(),f(fA.$$.fragment),Qzo=l(),eo=a("div"),f(mA.$$.fragment),Wzo=l(),Hme=a("p"),Hzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Uzo=l(),dn=a("p"),Jzo=o("The model class to instantiate is selected based on the "),Ume=a("code"),Yzo=o("model_type"),Kzo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),Zzo=o("pretrained_model_name_or_path"),eQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),oQo=o("pretrained_model_name_or_path"),rQo=o(":"),tQo=l(),cn=a("ul"),H2=a("li"),Kme=a("strong"),aQo=o("data2vec-audio"),nQo=o(" \u2014 "),MG=a("a"),sQo=o("Data2VecAudioForXVector"),lQo=o(" (Data2VecAudio model)"),iQo=l(),U2=a("li"),Zme=a("strong"),dQo=o("unispeech-sat"),cQo=o(" \u2014 "),EG=a("a"),fQo=o("UniSpeechSatForXVector"),mQo=o(" (UniSpeechSat model)"),gQo=l(),J2=a("li"),ege=a("strong"),hQo=o("wav2vec2"),pQo=o(" \u2014 "),CG=a("a"),_Qo=o("Wav2Vec2ForXVector"),uQo=o(" (Wav2Vec2 model)"),bQo=l(),Y2=a("li"),oge=a("strong"),FQo=o("wavlm"),vQo=o(" \u2014 "),wG=a("a"),TQo=o("WavLMForXVector"),MQo=o(" (WavLM model)"),EQo=l(),K2=a("p"),CQo=o("The model is set in evaluation mode by default using "),rge=a("code"),wQo=o("model.eval()"),AQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),yQo=o("model.train()"),LQo=l(),age=a("p"),xQo=o("Examples:"),kQo=l(),f(gA.$$.fragment),RRe=l(),Jd=a("h2"),Z2=a("a"),nge=a("span"),f(hA.$$.fragment),SQo=l(),sge=a("span"),RQo=o("AutoModelForMaskedImageModeling"),BRe=l(),hr=a("div"),f(pA.$$.fragment),BQo=l(),Yd=a("p"),PQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=a("a"),$Qo=o("from_pretrained()"),IQo=o(" class method or the "),yG=a("a"),qQo=o("from_config()"),NQo=o(` class
method.`),jQo=l(),_A=a("p"),DQo=o("This class cannot be instantiated directly using "),lge=a("code"),GQo=o("__init__()"),OQo=o(" (throws an error)."),VQo=l(),it=a("div"),f(uA.$$.fragment),XQo=l(),ige=a("p"),zQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),QQo=l(),Kd=a("p"),WQo=o(`Note:
Loading a model from its configuration file does `),dge=a("strong"),HQo=o("not"),UQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),JQo=o("from_pretrained()"),YQo=o(" to load the model weights."),KQo=l(),cge=a("p"),ZQo=o("Examples:"),eWo=l(),f(bA.$$.fragment),oWo=l(),oo=a("div"),f(FA.$$.fragment),rWo=l(),fge=a("p"),tWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aWo=l(),fn=a("p"),nWo=o("The model class to instantiate is selected based on the "),mge=a("code"),sWo=o("model_type"),lWo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(":"),mWo=l(),Zd=a("ul"),eF=a("li"),pge=a("strong"),gWo=o("deit"),hWo=o(" \u2014 "),xG=a("a"),pWo=o("DeiTForMaskedImageModeling"),_Wo=o(" (DeiT model)"),uWo=l(),oF=a("li"),_ge=a("strong"),bWo=o("swin"),FWo=o(" \u2014 "),kG=a("a"),vWo=o("SwinForMaskedImageModeling"),TWo=o(" (Swin model)"),MWo=l(),rF=a("li"),uge=a("strong"),EWo=o("vit"),CWo=o(" \u2014 "),SG=a("a"),wWo=o("ViTForMaskedImageModeling"),AWo=o(" (ViT model)"),yWo=l(),tF=a("p"),LWo=o("The model is set in evaluation mode by default using "),bge=a("code"),xWo=o("model.eval()"),kWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=a("code"),SWo=o("model.train()"),RWo=l(),vge=a("p"),BWo=o("Examples:"),PWo=l(),f(vA.$$.fragment),PRe=l(),ec=a("h2"),aF=a("a"),Tge=a("span"),f(TA.$$.fragment),$Wo=l(),Mge=a("span"),IWo=o("AutoModelForObjectDetection"),$Re=l(),pr=a("div"),f(MA.$$.fragment),qWo=l(),oc=a("p"),NWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=a("a"),jWo=o("from_pretrained()"),DWo=o(" class method or the "),BG=a("a"),GWo=o("from_config()"),OWo=o(` class
method.`),VWo=l(),EA=a("p"),XWo=o("This class cannot be instantiated directly using "),Ege=a("code"),zWo=o("__init__()"),QWo=o(" (throws an error)."),WWo=l(),dt=a("div"),f(CA.$$.fragment),HWo=l(),Cge=a("p"),UWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),JWo=l(),rc=a("p"),YWo=o(`Note:
Loading a model from its configuration file does `),wge=a("strong"),KWo=o("not"),ZWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),eHo=o("from_pretrained()"),oHo=o(" to load the model weights."),rHo=l(),Age=a("p"),tHo=o("Examples:"),aHo=l(),f(wA.$$.fragment),nHo=l(),ro=a("div"),f(AA.$$.fragment),sHo=l(),yge=a("p"),lHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),iHo=l(),mn=a("p"),dHo=o("The model class to instantiate is selected based on the "),Lge=a("code"),cHo=o("model_type"),fHo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),mHo=o("pretrained_model_name_or_path"),gHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=a("code"),hHo=o("pretrained_model_name_or_path"),pHo=o(":"),_Ho=l(),Sge=a("ul"),nF=a("li"),Rge=a("strong"),uHo=o("detr"),bHo=o(" \u2014 "),$G=a("a"),FHo=o("DetrForObjectDetection"),vHo=o(" (DETR model)"),THo=l(),sF=a("p"),MHo=o("The model is set in evaluation mode by default using "),Bge=a("code"),EHo=o("model.eval()"),CHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),wHo=o("model.train()"),AHo=l(),$ge=a("p"),yHo=o("Examples:"),LHo=l(),f(yA.$$.fragment),IRe=l(),tc=a("h2"),lF=a("a"),Ige=a("span"),f(LA.$$.fragment),xHo=l(),qge=a("span"),kHo=o("AutoModelForImageSegmentation"),qRe=l(),_r=a("div"),f(xA.$$.fragment),SHo=l(),ac=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=a("a"),BHo=o("from_pretrained()"),PHo=o(" class method or the "),qG=a("a"),$Ho=o("from_config()"),IHo=o(` class
method.`),qHo=l(),kA=a("p"),NHo=o("This class cannot be instantiated directly using "),Nge=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),ct=a("div"),f(SA.$$.fragment),OHo=l(),jge=a("p"),VHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),XHo=l(),nc=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),QHo=o("not"),WHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),Gge=a("p"),YHo=o("Examples:"),KHo=l(),f(RA.$$.fragment),ZHo=l(),to=a("div"),f(BA.$$.fragment),eUo=l(),Oge=a("p"),oUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),rUo=l(),gn=a("p"),tUo=o("The model class to instantiate is selected based on the "),Vge=a("code"),aUo=o("model_type"),nUo=o(` property of the config object (either
passed as an argument or loaded from `),Xge=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(":"),cUo=l(),Qge=a("ul"),iF=a("li"),Wge=a("strong"),fUo=o("detr"),mUo=o(" \u2014 "),jG=a("a"),gUo=o("DetrForSegmentation"),hUo=o(" (DETR model)"),pUo=l(),dF=a("p"),_Uo=o("The model is set in evaluation mode by default using "),Hge=a("code"),uUo=o("model.eval()"),bUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),FUo=o("model.train()"),vUo=l(),Jge=a("p"),TUo=o("Examples:"),MUo=l(),f(PA.$$.fragment),NRe=l(),sc=a("h2"),cF=a("a"),Yge=a("span"),f($A.$$.fragment),EUo=l(),Kge=a("span"),CUo=o("AutoModelForSemanticSegmentation"),jRe=l(),ur=a("div"),f(IA.$$.fragment),wUo=l(),lc=a("p"),AUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=a("a"),yUo=o("from_pretrained()"),LUo=o(" class method or the "),GG=a("a"),xUo=o("from_config()"),kUo=o(` class
method.`),SUo=l(),qA=a("p"),RUo=o("This class cannot be instantiated directly using "),Zge=a("code"),BUo=o("__init__()"),PUo=o(" (throws an error)."),$Uo=l(),ft=a("div"),f(NA.$$.fragment),IUo=l(),ehe=a("p"),qUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NUo=l(),ic=a("p"),jUo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),DUo=o("not"),GUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),OUo=o("from_pretrained()"),VUo=o(" to load the model weights."),XUo=l(),rhe=a("p"),zUo=o("Examples:"),QUo=l(),f(jA.$$.fragment),WUo=l(),ao=a("div"),f(DA.$$.fragment),HUo=l(),the=a("p"),UUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),JUo=l(),hn=a("p"),YUo=o("The model class to instantiate is selected based on the "),ahe=a("code"),KUo=o("model_type"),ZUo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),eJo=o("pretrained_model_name_or_path"),oJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),rJo=o("pretrained_model_name_or_path"),tJo=o(":"),aJo=l(),dc=a("ul"),fF=a("li"),lhe=a("strong"),nJo=o("beit"),sJo=o(" \u2014 "),VG=a("a"),lJo=o("BeitForSemanticSegmentation"),iJo=o(" (BEiT model)"),dJo=l(),mF=a("li"),ihe=a("strong"),cJo=o("dpt"),fJo=o(" \u2014 "),XG=a("a"),mJo=o("DPTForSemanticSegmentation"),gJo=o(" (DPT model)"),hJo=l(),gF=a("li"),dhe=a("strong"),pJo=o("segformer"),_Jo=o(" \u2014 "),zG=a("a"),uJo=o("SegformerForSemanticSegmentation"),bJo=o(" (SegFormer model)"),FJo=l(),hF=a("p"),vJo=o("The model is set in evaluation mode by default using "),che=a("code"),TJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),EJo=o("model.train()"),CJo=l(),mhe=a("p"),wJo=o("Examples:"),AJo=l(),f(GA.$$.fragment),DRe=l(),cc=a("h2"),pF=a("a"),ghe=a("span"),f(OA.$$.fragment),yJo=l(),hhe=a("span"),LJo=o("AutoModelForInstanceSegmentation"),GRe=l(),br=a("div"),f(VA.$$.fragment),xJo=l(),fc=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=a("a"),SJo=o("from_pretrained()"),RJo=o(" class method or the "),WG=a("a"),BJo=o("from_config()"),PJo=o(` class
method.`),$Jo=l(),XA=a("p"),IJo=o("This class cannot be instantiated directly using "),phe=a("code"),qJo=o("__init__()"),NJo=o(" (throws an error)."),jJo=l(),mt=a("div"),f(zA.$$.fragment),DJo=l(),_he=a("p"),GJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OJo=l(),mc=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),uhe=a("strong"),XJo=o("not"),zJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),QJo=o("from_pretrained()"),WJo=o(" to load the model weights."),HJo=l(),bhe=a("p"),UJo=o("Examples:"),JJo=l(),f(QA.$$.fragment),YJo=l(),no=a("div"),f(WA.$$.fragment),KJo=l(),Fhe=a("p"),ZJo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eYo=l(),pn=a("p"),oYo=o("The model class to instantiate is selected based on the "),vhe=a("code"),rYo=o("model_type"),tYo=o(` property of the config object (either
passed as an argument or loaded from `),The=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(":"),iYo=l(),Ehe=a("ul"),_F=a("li"),Che=a("strong"),dYo=o("maskformer"),cYo=o(" \u2014 "),UG=a("a"),fYo=o("MaskFormerForInstanceSegmentation"),mYo=o(" (MaskFormer model)"),gYo=l(),uF=a("p"),hYo=o("The model is set in evaluation mode by default using "),whe=a("code"),pYo=o("model.eval()"),_Yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=a("code"),uYo=o("model.train()"),bYo=l(),yhe=a("p"),FYo=o("Examples:"),vYo=l(),f(HA.$$.fragment),ORe=l(),gc=a("h2"),bF=a("a"),Lhe=a("span"),f(UA.$$.fragment),TYo=l(),xhe=a("span"),MYo=o("TFAutoModel"),VRe=l(),Fr=a("div"),f(JA.$$.fragment),EYo=l(),hc=a("p"),CYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=a("a"),wYo=o("from_pretrained()"),AYo=o(" class method or the "),YG=a("a"),yYo=o("from_config()"),LYo=o(` class
method.`),xYo=l(),YA=a("p"),kYo=o("This class cannot be instantiated directly using "),khe=a("code"),SYo=o("__init__()"),RYo=o(" (throws an error)."),BYo=l(),gt=a("div"),f(KA.$$.fragment),PYo=l(),She=a("p"),$Yo=o("Instantiates one of the base model classes of the library from a configuration."),IYo=l(),pc=a("p"),qYo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),NYo=o("not"),jYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),DYo=o("from_pretrained()"),GYo=o(" to load the model weights."),OYo=l(),Bhe=a("p"),VYo=o("Examples:"),XYo=l(),f(ZA.$$.fragment),zYo=l(),ho=a("div"),f(e0.$$.fragment),QYo=l(),Phe=a("p"),WYo=o("Instantiate one of the base model classes of the library from a pretrained model."),HYo=l(),_n=a("p"),UYo=o("The model class to instantiate is selected based on the "),$he=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),x=a("ul"),FF=a("li"),Nhe=a("strong"),tKo=o("albert"),aKo=o(" \u2014 "),ZG=a("a"),nKo=o("TFAlbertModel"),sKo=o(" (ALBERT model)"),lKo=l(),vF=a("li"),jhe=a("strong"),iKo=o("bart"),dKo=o(" \u2014 "),eO=a("a"),cKo=o("TFBartModel"),fKo=o(" (BART model)"),mKo=l(),TF=a("li"),Dhe=a("strong"),gKo=o("bert"),hKo=o(" \u2014 "),oO=a("a"),pKo=o("TFBertModel"),_Ko=o(" (BERT model)"),uKo=l(),MF=a("li"),Ghe=a("strong"),bKo=o("blenderbot"),FKo=o(" \u2014 "),rO=a("a"),vKo=o("TFBlenderbotModel"),TKo=o(" (Blenderbot model)"),MKo=l(),EF=a("li"),Ohe=a("strong"),EKo=o("blenderbot-small"),CKo=o(" \u2014 "),tO=a("a"),wKo=o("TFBlenderbotSmallModel"),AKo=o(" (BlenderbotSmall model)"),yKo=l(),CF=a("li"),Vhe=a("strong"),LKo=o("camembert"),xKo=o(" \u2014 "),aO=a("a"),kKo=o("TFCamembertModel"),SKo=o(" (CamemBERT model)"),RKo=l(),wF=a("li"),Xhe=a("strong"),BKo=o("clip"),PKo=o(" \u2014 "),nO=a("a"),$Ko=o("TFCLIPModel"),IKo=o(" (CLIP model)"),qKo=l(),AF=a("li"),zhe=a("strong"),NKo=o("convbert"),jKo=o(" \u2014 "),sO=a("a"),DKo=o("TFConvBertModel"),GKo=o(" (ConvBERT model)"),OKo=l(),yF=a("li"),Qhe=a("strong"),VKo=o("convnext"),XKo=o(" \u2014 "),lO=a("a"),zKo=o("TFConvNextModel"),QKo=o(" (ConvNext model)"),WKo=l(),LF=a("li"),Whe=a("strong"),HKo=o("ctrl"),UKo=o(" \u2014 "),iO=a("a"),JKo=o("TFCTRLModel"),YKo=o(" (CTRL model)"),KKo=l(),xF=a("li"),Hhe=a("strong"),ZKo=o("deberta"),eZo=o(" \u2014 "),dO=a("a"),oZo=o("TFDebertaModel"),rZo=o(" (DeBERTa model)"),tZo=l(),kF=a("li"),Uhe=a("strong"),aZo=o("deberta-v2"),nZo=o(" \u2014 "),cO=a("a"),sZo=o("TFDebertaV2Model"),lZo=o(" (DeBERTa-v2 model)"),iZo=l(),SF=a("li"),Jhe=a("strong"),dZo=o("distilbert"),cZo=o(" \u2014 "),fO=a("a"),fZo=o("TFDistilBertModel"),mZo=o(" (DistilBERT model)"),gZo=l(),RF=a("li"),Yhe=a("strong"),hZo=o("dpr"),pZo=o(" \u2014 "),mO=a("a"),_Zo=o("TFDPRQuestionEncoder"),uZo=o(" (DPR model)"),bZo=l(),BF=a("li"),Khe=a("strong"),FZo=o("electra"),vZo=o(" \u2014 "),gO=a("a"),TZo=o("TFElectraModel"),MZo=o(" (ELECTRA model)"),EZo=l(),PF=a("li"),Zhe=a("strong"),CZo=o("flaubert"),wZo=o(" \u2014 "),hO=a("a"),AZo=o("TFFlaubertModel"),yZo=o(" (FlauBERT model)"),LZo=l(),Gs=a("li"),epe=a("strong"),xZo=o("funnel"),kZo=o(" \u2014 "),pO=a("a"),SZo=o("TFFunnelModel"),RZo=o(" or "),_O=a("a"),BZo=o("TFFunnelBaseModel"),PZo=o(" (Funnel Transformer model)"),$Zo=l(),$F=a("li"),ope=a("strong"),IZo=o("gpt2"),qZo=o(" \u2014 "),uO=a("a"),NZo=o("TFGPT2Model"),jZo=o(" (OpenAI GPT-2 model)"),DZo=l(),IF=a("li"),rpe=a("strong"),GZo=o("gptj"),OZo=o(" \u2014 "),bO=a("a"),VZo=o("TFGPTJModel"),XZo=o(" (GPT-J model)"),zZo=l(),qF=a("li"),tpe=a("strong"),QZo=o("hubert"),WZo=o(" \u2014 "),FO=a("a"),HZo=o("TFHubertModel"),UZo=o(" (Hubert model)"),JZo=l(),NF=a("li"),ape=a("strong"),YZo=o("layoutlm"),KZo=o(" \u2014 "),vO=a("a"),ZZo=o("TFLayoutLMModel"),eer=o(" (LayoutLM model)"),oer=l(),jF=a("li"),npe=a("strong"),rer=o("led"),ter=o(" \u2014 "),TO=a("a"),aer=o("TFLEDModel"),ner=o(" (LED model)"),ser=l(),DF=a("li"),spe=a("strong"),ler=o("longformer"),ier=o(" \u2014 "),MO=a("a"),der=o("TFLongformerModel"),cer=o(" (Longformer model)"),fer=l(),GF=a("li"),lpe=a("strong"),mer=o("lxmert"),ger=o(" \u2014 "),EO=a("a"),her=o("TFLxmertModel"),per=o(" (LXMERT model)"),_er=l(),OF=a("li"),ipe=a("strong"),uer=o("marian"),ber=o(" \u2014 "),CO=a("a"),Fer=o("TFMarianModel"),ver=o(" (Marian model)"),Ter=l(),VF=a("li"),dpe=a("strong"),Mer=o("mbart"),Eer=o(" \u2014 "),wO=a("a"),Cer=o("TFMBartModel"),wer=o(" (mBART model)"),Aer=l(),XF=a("li"),cpe=a("strong"),yer=o("mobilebert"),Ler=o(" \u2014 "),AO=a("a"),xer=o("TFMobileBertModel"),ker=o(" (MobileBERT model)"),Ser=l(),zF=a("li"),fpe=a("strong"),Rer=o("mpnet"),Ber=o(" \u2014 "),yO=a("a"),Per=o("TFMPNetModel"),$er=o(" (MPNet model)"),Ier=l(),QF=a("li"),mpe=a("strong"),qer=o("mt5"),Ner=o(" \u2014 "),LO=a("a"),jer=o("TFMT5Model"),Der=o(" (mT5 model)"),Ger=l(),WF=a("li"),gpe=a("strong"),Oer=o("openai-gpt"),Ver=o(" \u2014 "),xO=a("a"),Xer=o("TFOpenAIGPTModel"),zer=o(" (OpenAI GPT model)"),Qer=l(),HF=a("li"),hpe=a("strong"),Wer=o("pegasus"),Her=o(" \u2014 "),kO=a("a"),Uer=o("TFPegasusModel"),Jer=o(" (Pegasus model)"),Yer=l(),UF=a("li"),ppe=a("strong"),Ker=o("rembert"),Zer=o(" \u2014 "),SO=a("a"),eor=o("TFRemBertModel"),oor=o(" (RemBERT model)"),ror=l(),JF=a("li"),_pe=a("strong"),tor=o("roberta"),aor=o(" \u2014 "),RO=a("a"),nor=o("TFRobertaModel"),sor=o(" (RoBERTa model)"),lor=l(),YF=a("li"),upe=a("strong"),ior=o("roformer"),dor=o(" \u2014 "),BO=a("a"),cor=o("TFRoFormerModel"),mor=o(" (RoFormer model)"),gor=l(),KF=a("li"),bpe=a("strong"),hor=o("speech_to_text"),por=o(" \u2014 "),PO=a("a"),_or=o("TFSpeech2TextModel"),uor=o(" (Speech2Text model)"),bor=l(),ZF=a("li"),Fpe=a("strong"),For=o("t5"),vor=o(" \u2014 "),$O=a("a"),Tor=o("TFT5Model"),Mor=o(" (T5 model)"),Eor=l(),ev=a("li"),vpe=a("strong"),Cor=o("tapas"),wor=o(" \u2014 "),IO=a("a"),Aor=o("TFTapasModel"),yor=o(" (TAPAS model)"),Lor=l(),ov=a("li"),Tpe=a("strong"),xor=o("transfo-xl"),kor=o(" \u2014 "),qO=a("a"),Sor=o("TFTransfoXLModel"),Ror=o(" (Transformer-XL model)"),Bor=l(),rv=a("li"),Mpe=a("strong"),Por=o("vit"),$or=o(" \u2014 "),NO=a("a"),Ior=o("TFViTModel"),qor=o(" (ViT model)"),Nor=l(),tv=a("li"),Epe=a("strong"),jor=o("vit_mae"),Dor=o(" \u2014 "),jO=a("a"),Gor=o("TFViTMAEModel"),Oor=o(" (ViTMAE model)"),Vor=l(),av=a("li"),Cpe=a("strong"),Xor=o("wav2vec2"),zor=o(" \u2014 "),DO=a("a"),Qor=o("TFWav2Vec2Model"),Wor=o(" (Wav2Vec2 model)"),Hor=l(),nv=a("li"),wpe=a("strong"),Uor=o("xlm"),Jor=o(" \u2014 "),GO=a("a"),Yor=o("TFXLMModel"),Kor=o(" (XLM model)"),Zor=l(),sv=a("li"),Ape=a("strong"),err=o("xlm-roberta"),orr=o(" \u2014 "),OO=a("a"),rrr=o("TFXLMRobertaModel"),trr=o(" (XLM-RoBERTa model)"),arr=l(),lv=a("li"),ype=a("strong"),nrr=o("xlnet"),srr=o(" \u2014 "),VO=a("a"),lrr=o("TFXLNetModel"),irr=o(" (XLNet model)"),drr=l(),Lpe=a("p"),crr=o("Examples:"),frr=l(),f(o0.$$.fragment),XRe=l(),_c=a("h2"),iv=a("a"),xpe=a("span"),f(r0.$$.fragment),mrr=l(),kpe=a("span"),grr=o("TFAutoModelForPreTraining"),zRe=l(),vr=a("div"),f(t0.$$.fragment),hrr=l(),uc=a("p"),prr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=a("a"),_rr=o("from_pretrained()"),urr=o(" class method or the "),zO=a("a"),brr=o("from_config()"),Frr=o(` class
method.`),vrr=l(),a0=a("p"),Trr=o("This class cannot be instantiated directly using "),Spe=a("code"),Mrr=o("__init__()"),Err=o(" (throws an error)."),Crr=l(),ht=a("div"),f(n0.$$.fragment),wrr=l(),Rpe=a("p"),Arr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),yrr=l(),bc=a("p"),Lrr=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),xrr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Brr=l(),Ppe=a("p"),Prr=o("Examples:"),$rr=l(),f(s0.$$.fragment),Irr=l(),po=a("div"),f(l0.$$.fragment),qrr=l(),$pe=a("p"),Nrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jrr=l(),un=a("p"),Drr=o("The model class to instantiate is selected based on the "),Ipe=a("code"),Grr=o("model_type"),Orr=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),Vrr=o("pretrained_model_name_or_path"),Xrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),zrr=o("pretrained_model_name_or_path"),Qrr=o(":"),Wrr=l(),H=a("ul"),dv=a("li"),jpe=a("strong"),Hrr=o("albert"),Urr=o(" \u2014 "),WO=a("a"),Jrr=o("TFAlbertForPreTraining"),Yrr=o(" (ALBERT model)"),Krr=l(),cv=a("li"),Dpe=a("strong"),Zrr=o("bart"),etr=o(" \u2014 "),HO=a("a"),otr=o("TFBartForConditionalGeneration"),rtr=o(" (BART model)"),ttr=l(),fv=a("li"),Gpe=a("strong"),atr=o("bert"),ntr=o(" \u2014 "),UO=a("a"),str=o("TFBertForPreTraining"),ltr=o(" (BERT model)"),itr=l(),mv=a("li"),Ope=a("strong"),dtr=o("camembert"),ctr=o(" \u2014 "),JO=a("a"),ftr=o("TFCamembertForMaskedLM"),mtr=o(" (CamemBERT model)"),gtr=l(),gv=a("li"),Vpe=a("strong"),htr=o("ctrl"),ptr=o(" \u2014 "),YO=a("a"),_tr=o("TFCTRLLMHeadModel"),utr=o(" (CTRL model)"),btr=l(),hv=a("li"),Xpe=a("strong"),Ftr=o("distilbert"),vtr=o(" \u2014 "),KO=a("a"),Ttr=o("TFDistilBertForMaskedLM"),Mtr=o(" (DistilBERT model)"),Etr=l(),pv=a("li"),zpe=a("strong"),Ctr=o("electra"),wtr=o(" \u2014 "),ZO=a("a"),Atr=o("TFElectraForPreTraining"),ytr=o(" (ELECTRA model)"),Ltr=l(),_v=a("li"),Qpe=a("strong"),xtr=o("flaubert"),ktr=o(" \u2014 "),eV=a("a"),Str=o("TFFlaubertWithLMHeadModel"),Rtr=o(" (FlauBERT model)"),Btr=l(),uv=a("li"),Wpe=a("strong"),Ptr=o("funnel"),$tr=o(" \u2014 "),oV=a("a"),Itr=o("TFFunnelForPreTraining"),qtr=o(" (Funnel Transformer model)"),Ntr=l(),bv=a("li"),Hpe=a("strong"),jtr=o("gpt2"),Dtr=o(" \u2014 "),rV=a("a"),Gtr=o("TFGPT2LMHeadModel"),Otr=o(" (OpenAI GPT-2 model)"),Vtr=l(),Fv=a("li"),Upe=a("strong"),Xtr=o("layoutlm"),ztr=o(" \u2014 "),tV=a("a"),Qtr=o("TFLayoutLMForMaskedLM"),Wtr=o(" (LayoutLM model)"),Htr=l(),vv=a("li"),Jpe=a("strong"),Utr=o("lxmert"),Jtr=o(" \u2014 "),aV=a("a"),Ytr=o("TFLxmertForPreTraining"),Ktr=o(" (LXMERT model)"),Ztr=l(),Tv=a("li"),Ype=a("strong"),ear=o("mobilebert"),oar=o(" \u2014 "),nV=a("a"),rar=o("TFMobileBertForPreTraining"),tar=o(" (MobileBERT model)"),aar=l(),Mv=a("li"),Kpe=a("strong"),nar=o("mpnet"),sar=o(" \u2014 "),sV=a("a"),lar=o("TFMPNetForMaskedLM"),iar=o(" (MPNet model)"),dar=l(),Ev=a("li"),Zpe=a("strong"),car=o("openai-gpt"),far=o(" \u2014 "),lV=a("a"),mar=o("TFOpenAIGPTLMHeadModel"),gar=o(" (OpenAI GPT model)"),har=l(),Cv=a("li"),e_e=a("strong"),par=o("roberta"),_ar=o(" \u2014 "),iV=a("a"),uar=o("TFRobertaForMaskedLM"),bar=o(" (RoBERTa model)"),Far=l(),wv=a("li"),o_e=a("strong"),Tar=o("t5"),Mar=o(" \u2014 "),dV=a("a"),Ear=o("TFT5ForConditionalGeneration"),Car=o(" (T5 model)"),war=l(),Av=a("li"),r_e=a("strong"),Aar=o("tapas"),yar=o(" \u2014 "),cV=a("a"),Lar=o("TFTapasForMaskedLM"),xar=o(" (TAPAS model)"),kar=l(),yv=a("li"),t_e=a("strong"),Sar=o("transfo-xl"),Rar=o(" \u2014 "),fV=a("a"),Bar=o("TFTransfoXLLMHeadModel"),Par=o(" (Transformer-XL model)"),$ar=l(),Lv=a("li"),a_e=a("strong"),Iar=o("vit_mae"),qar=o(" \u2014 "),mV=a("a"),Nar=o("TFViTMAEForPreTraining"),jar=o(" (ViTMAE model)"),Dar=l(),xv=a("li"),n_e=a("strong"),Gar=o("xlm"),Oar=o(" \u2014 "),gV=a("a"),Var=o("TFXLMWithLMHeadModel"),Xar=o(" (XLM model)"),zar=l(),kv=a("li"),s_e=a("strong"),Qar=o("xlm-roberta"),War=o(" \u2014 "),hV=a("a"),Har=o("TFXLMRobertaForMaskedLM"),Uar=o(" (XLM-RoBERTa model)"),Jar=l(),Sv=a("li"),l_e=a("strong"),Yar=o("xlnet"),Kar=o(" \u2014 "),pV=a("a"),Zar=o("TFXLNetLMHeadModel"),enr=o(" (XLNet model)"),onr=l(),i_e=a("p"),rnr=o("Examples:"),tnr=l(),f(i0.$$.fragment),QRe=l(),Fc=a("h2"),Rv=a("a"),d_e=a("span"),f(d0.$$.fragment),anr=l(),c_e=a("span"),nnr=o("TFAutoModelForCausalLM"),WRe=l(),Tr=a("div"),f(c0.$$.fragment),snr=l(),vc=a("p"),lnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_V=a("a"),inr=o("from_pretrained()"),dnr=o(" class method or the "),uV=a("a"),cnr=o("from_config()"),fnr=o(` class
method.`),mnr=l(),f0=a("p"),gnr=o("This class cannot be instantiated directly using "),f_e=a("code"),hnr=o("__init__()"),pnr=o(" (throws an error)."),_nr=l(),pt=a("div"),f(m0.$$.fragment),unr=l(),m_e=a("p"),bnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fnr=l(),Tc=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),Tnr=o("not"),Mnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=a("a"),Enr=o("from_pretrained()"),Cnr=o(" to load the model weights."),wnr=l(),h_e=a("p"),Anr=o("Examples:"),ynr=l(),f(g0.$$.fragment),Lnr=l(),_o=a("div"),f(h0.$$.fragment),xnr=l(),p_e=a("p"),knr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Snr=l(),bn=a("p"),Rnr=o("The model class to instantiate is selected based on the "),__e=a("code"),Bnr=o("model_type"),Pnr=o(` property of the config object (either
passed as an argument or loaded from `),u_e=a("code"),$nr=o("pretrained_model_name_or_path"),Inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=a("code"),qnr=o("pretrained_model_name_or_path"),Nnr=o(":"),jnr=l(),ce=a("ul"),Bv=a("li"),F_e=a("strong"),Dnr=o("bert"),Gnr=o(" \u2014 "),FV=a("a"),Onr=o("TFBertLMHeadModel"),Vnr=o(" (BERT model)"),Xnr=l(),Pv=a("li"),v_e=a("strong"),znr=o("camembert"),Qnr=o(" \u2014 "),vV=a("a"),Wnr=o("TFCamembertForCausalLM"),Hnr=o(" (CamemBERT model)"),Unr=l(),$v=a("li"),T_e=a("strong"),Jnr=o("ctrl"),Ynr=o(" \u2014 "),TV=a("a"),Knr=o("TFCTRLLMHeadModel"),Znr=o(" (CTRL model)"),esr=l(),Iv=a("li"),M_e=a("strong"),osr=o("gpt2"),rsr=o(" \u2014 "),MV=a("a"),tsr=o("TFGPT2LMHeadModel"),asr=o(" (OpenAI GPT-2 model)"),nsr=l(),qv=a("li"),E_e=a("strong"),ssr=o("gptj"),lsr=o(" \u2014 "),EV=a("a"),isr=o("TFGPTJForCausalLM"),dsr=o(" (GPT-J model)"),csr=l(),Nv=a("li"),C_e=a("strong"),fsr=o("openai-gpt"),msr=o(" \u2014 "),CV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),psr=l(),jv=a("li"),w_e=a("strong"),_sr=o("rembert"),usr=o(" \u2014 "),wV=a("a"),bsr=o("TFRemBertForCausalLM"),Fsr=o(" (RemBERT model)"),vsr=l(),Dv=a("li"),A_e=a("strong"),Tsr=o("roberta"),Msr=o(" \u2014 "),AV=a("a"),Esr=o("TFRobertaForCausalLM"),Csr=o(" (RoBERTa model)"),wsr=l(),Gv=a("li"),y_e=a("strong"),Asr=o("roformer"),ysr=o(" \u2014 "),yV=a("a"),Lsr=o("TFRoFormerForCausalLM"),xsr=o(" (RoFormer model)"),ksr=l(),Ov=a("li"),L_e=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),LV=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),Vv=a("li"),x_e=a("strong"),Isr=o("xlm"),qsr=o(" \u2014 "),xV=a("a"),Nsr=o("TFXLMWithLMHeadModel"),jsr=o(" (XLM model)"),Dsr=l(),Xv=a("li"),k_e=a("strong"),Gsr=o("xlnet"),Osr=o(" \u2014 "),kV=a("a"),Vsr=o("TFXLNetLMHeadModel"),Xsr=o(" (XLNet model)"),zsr=l(),S_e=a("p"),Qsr=o("Examples:"),Wsr=l(),f(p0.$$.fragment),HRe=l(),Mc=a("h2"),zv=a("a"),R_e=a("span"),f(_0.$$.fragment),Hsr=l(),B_e=a("span"),Usr=o("TFAutoModelForImageClassification"),URe=l(),Mr=a("div"),f(u0.$$.fragment),Jsr=l(),Ec=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SV=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),RV=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),b0=a("p"),tlr=o("This class cannot be instantiated directly using "),P_e=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),_t=a("div"),f(F0.$$.fragment),llr=l(),$_e=a("p"),ilr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dlr=l(),Cc=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),I_e=a("strong"),flr=o("not"),mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),plr=l(),q_e=a("p"),_lr=o("Examples:"),ulr=l(),f(v0.$$.fragment),blr=l(),uo=a("div"),f(T0.$$.fragment),Flr=l(),N_e=a("p"),vlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tlr=l(),Fn=a("p"),Mlr=o("The model class to instantiate is selected based on the "),j_e=a("code"),Elr=o("model_type"),Clr=o(` property of the config object (either
passed as an argument or loaded from `),D_e=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=a("code"),ylr=o("pretrained_model_name_or_path"),Llr=o(":"),xlr=l(),M0=a("ul"),Qv=a("li"),O_e=a("strong"),klr=o("convnext"),Slr=o(" \u2014 "),PV=a("a"),Rlr=o("TFConvNextForImageClassification"),Blr=o(" (ConvNext model)"),Plr=l(),Wv=a("li"),V_e=a("strong"),$lr=o("vit"),Ilr=o(" \u2014 "),$V=a("a"),qlr=o("TFViTForImageClassification"),Nlr=o(" (ViT model)"),jlr=l(),X_e=a("p"),Dlr=o("Examples:"),Glr=l(),f(E0.$$.fragment),JRe=l(),wc=a("h2"),Hv=a("a"),z_e=a("span"),f(C0.$$.fragment),Olr=l(),Q_e=a("span"),Vlr=o("TFAutoModelForMaskedLM"),YRe=l(),Er=a("div"),f(w0.$$.fragment),Xlr=l(),Ac=a("p"),zlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IV=a("a"),Qlr=o("from_pretrained()"),Wlr=o(" class method or the "),qV=a("a"),Hlr=o("from_config()"),Ulr=o(` class
method.`),Jlr=l(),A0=a("p"),Ylr=o("This class cannot be instantiated directly using "),W_e=a("code"),Klr=o("__init__()"),Zlr=o(" (throws an error)."),eir=l(),ut=a("div"),f(y0.$$.fragment),oir=l(),H_e=a("p"),rir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tir=l(),yc=a("p"),air=o(`Note:
Loading a model from its configuration file does `),U_e=a("strong"),nir=o("not"),sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=a("a"),lir=o("from_pretrained()"),iir=o(" to load the model weights."),dir=l(),J_e=a("p"),cir=o("Examples:"),fir=l(),f(L0.$$.fragment),mir=l(),bo=a("div"),f(x0.$$.fragment),gir=l(),Y_e=a("p"),hir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pir=l(),vn=a("p"),_ir=o("The model class to instantiate is selected based on the "),K_e=a("code"),uir=o("model_type"),bir=o(` property of the config object (either
passed as an argument or loaded from `),Z_e=a("code"),Fir=o("pretrained_model_name_or_path"),vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(":"),Eir=l(),J=a("ul"),Uv=a("li"),oue=a("strong"),Cir=o("albert"),wir=o(" \u2014 "),jV=a("a"),Air=o("TFAlbertForMaskedLM"),yir=o(" (ALBERT model)"),Lir=l(),Jv=a("li"),rue=a("strong"),xir=o("bert"),kir=o(" \u2014 "),DV=a("a"),Sir=o("TFBertForMaskedLM"),Rir=o(" (BERT model)"),Bir=l(),Yv=a("li"),tue=a("strong"),Pir=o("camembert"),$ir=o(" \u2014 "),GV=a("a"),Iir=o("TFCamembertForMaskedLM"),qir=o(" (CamemBERT model)"),Nir=l(),Kv=a("li"),aue=a("strong"),jir=o("convbert"),Dir=o(" \u2014 "),OV=a("a"),Gir=o("TFConvBertForMaskedLM"),Oir=o(" (ConvBERT model)"),Vir=l(),Zv=a("li"),nue=a("strong"),Xir=o("deberta"),zir=o(" \u2014 "),VV=a("a"),Qir=o("TFDebertaForMaskedLM"),Wir=o(" (DeBERTa model)"),Hir=l(),e6=a("li"),sue=a("strong"),Uir=o("deberta-v2"),Jir=o(" \u2014 "),XV=a("a"),Yir=o("TFDebertaV2ForMaskedLM"),Kir=o(" (DeBERTa-v2 model)"),Zir=l(),o6=a("li"),lue=a("strong"),edr=o("distilbert"),odr=o(" \u2014 "),zV=a("a"),rdr=o("TFDistilBertForMaskedLM"),tdr=o(" (DistilBERT model)"),adr=l(),r6=a("li"),iue=a("strong"),ndr=o("electra"),sdr=o(" \u2014 "),QV=a("a"),ldr=o("TFElectraForMaskedLM"),idr=o(" (ELECTRA model)"),ddr=l(),t6=a("li"),due=a("strong"),cdr=o("flaubert"),fdr=o(" \u2014 "),WV=a("a"),mdr=o("TFFlaubertWithLMHeadModel"),gdr=o(" (FlauBERT model)"),hdr=l(),a6=a("li"),cue=a("strong"),pdr=o("funnel"),_dr=o(" \u2014 "),HV=a("a"),udr=o("TFFunnelForMaskedLM"),bdr=o(" (Funnel Transformer model)"),Fdr=l(),n6=a("li"),fue=a("strong"),vdr=o("layoutlm"),Tdr=o(" \u2014 "),UV=a("a"),Mdr=o("TFLayoutLMForMaskedLM"),Edr=o(" (LayoutLM model)"),Cdr=l(),s6=a("li"),mue=a("strong"),wdr=o("longformer"),Adr=o(" \u2014 "),JV=a("a"),ydr=o("TFLongformerForMaskedLM"),Ldr=o(" (Longformer model)"),xdr=l(),l6=a("li"),gue=a("strong"),kdr=o("mobilebert"),Sdr=o(" \u2014 "),YV=a("a"),Rdr=o("TFMobileBertForMaskedLM"),Bdr=o(" (MobileBERT model)"),Pdr=l(),i6=a("li"),hue=a("strong"),$dr=o("mpnet"),Idr=o(" \u2014 "),KV=a("a"),qdr=o("TFMPNetForMaskedLM"),Ndr=o(" (MPNet model)"),jdr=l(),d6=a("li"),pue=a("strong"),Ddr=o("rembert"),Gdr=o(" \u2014 "),ZV=a("a"),Odr=o("TFRemBertForMaskedLM"),Vdr=o(" (RemBERT model)"),Xdr=l(),c6=a("li"),_ue=a("strong"),zdr=o("roberta"),Qdr=o(" \u2014 "),eX=a("a"),Wdr=o("TFRobertaForMaskedLM"),Hdr=o(" (RoBERTa model)"),Udr=l(),f6=a("li"),uue=a("strong"),Jdr=o("roformer"),Ydr=o(" \u2014 "),oX=a("a"),Kdr=o("TFRoFormerForMaskedLM"),Zdr=o(" (RoFormer model)"),ecr=l(),m6=a("li"),bue=a("strong"),ocr=o("tapas"),rcr=o(" \u2014 "),rX=a("a"),tcr=o("TFTapasForMaskedLM"),acr=o(" (TAPAS model)"),ncr=l(),g6=a("li"),Fue=a("strong"),scr=o("xlm"),lcr=o(" \u2014 "),tX=a("a"),icr=o("TFXLMWithLMHeadModel"),dcr=o(" (XLM model)"),ccr=l(),h6=a("li"),vue=a("strong"),fcr=o("xlm-roberta"),mcr=o(" \u2014 "),aX=a("a"),gcr=o("TFXLMRobertaForMaskedLM"),hcr=o(" (XLM-RoBERTa model)"),pcr=l(),Tue=a("p"),_cr=o("Examples:"),ucr=l(),f(k0.$$.fragment),KRe=l(),Lc=a("h2"),p6=a("a"),Mue=a("span"),f(S0.$$.fragment),bcr=l(),Eue=a("span"),Fcr=o("TFAutoModelForSeq2SeqLM"),ZRe=l(),Cr=a("div"),f(R0.$$.fragment),vcr=l(),xc=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nX=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" class method or the "),sX=a("a"),Ccr=o("from_config()"),wcr=o(` class
method.`),Acr=l(),B0=a("p"),ycr=o("This class cannot be instantiated directly using "),Cue=a("code"),Lcr=o("__init__()"),xcr=o(" (throws an error)."),kcr=l(),bt=a("div"),f(P0.$$.fragment),Scr=l(),wue=a("p"),Rcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bcr=l(),kc=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),Aue=a("strong"),$cr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=a("a"),qcr=o("from_pretrained()"),Ncr=o(" to load the model weights."),jcr=l(),yue=a("p"),Dcr=o("Examples:"),Gcr=l(),f($0.$$.fragment),Ocr=l(),Fo=a("div"),f(I0.$$.fragment),Vcr=l(),Lue=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zcr=l(),Tn=a("p"),Qcr=o("The model class to instantiate is selected based on the "),xue=a("code"),Wcr=o("model_type"),Hcr=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),Ycr=o("pretrained_model_name_or_path"),Kcr=o(":"),Zcr=l(),ue=a("ul"),_6=a("li"),Rue=a("strong"),efr=o("bart"),ofr=o(" \u2014 "),iX=a("a"),rfr=o("TFBartForConditionalGeneration"),tfr=o(" (BART model)"),afr=l(),u6=a("li"),Bue=a("strong"),nfr=o("blenderbot"),sfr=o(" \u2014 "),dX=a("a"),lfr=o("TFBlenderbotForConditionalGeneration"),ifr=o(" (Blenderbot model)"),dfr=l(),b6=a("li"),Pue=a("strong"),cfr=o("blenderbot-small"),ffr=o(" \u2014 "),cX=a("a"),mfr=o("TFBlenderbotSmallForConditionalGeneration"),gfr=o(" (BlenderbotSmall model)"),hfr=l(),F6=a("li"),$ue=a("strong"),pfr=o("encoder-decoder"),_fr=o(" \u2014 "),fX=a("a"),ufr=o("TFEncoderDecoderModel"),bfr=o(" (Encoder decoder model)"),Ffr=l(),v6=a("li"),Iue=a("strong"),vfr=o("led"),Tfr=o(" \u2014 "),mX=a("a"),Mfr=o("TFLEDForConditionalGeneration"),Efr=o(" (LED model)"),Cfr=l(),T6=a("li"),que=a("strong"),wfr=o("marian"),Afr=o(" \u2014 "),gX=a("a"),yfr=o("TFMarianMTModel"),Lfr=o(" (Marian model)"),xfr=l(),M6=a("li"),Nue=a("strong"),kfr=o("mbart"),Sfr=o(" \u2014 "),hX=a("a"),Rfr=o("TFMBartForConditionalGeneration"),Bfr=o(" (mBART model)"),Pfr=l(),E6=a("li"),jue=a("strong"),$fr=o("mt5"),Ifr=o(" \u2014 "),pX=a("a"),qfr=o("TFMT5ForConditionalGeneration"),Nfr=o(" (mT5 model)"),jfr=l(),C6=a("li"),Due=a("strong"),Dfr=o("pegasus"),Gfr=o(" \u2014 "),_X=a("a"),Ofr=o("TFPegasusForConditionalGeneration"),Vfr=o(" (Pegasus model)"),Xfr=l(),w6=a("li"),Gue=a("strong"),zfr=o("t5"),Qfr=o(" \u2014 "),uX=a("a"),Wfr=o("TFT5ForConditionalGeneration"),Hfr=o(" (T5 model)"),Ufr=l(),Oue=a("p"),Jfr=o("Examples:"),Yfr=l(),f(q0.$$.fragment),eBe=l(),Sc=a("h2"),A6=a("a"),Vue=a("span"),f(N0.$$.fragment),Kfr=l(),Xue=a("span"),Zfr=o("TFAutoModelForSequenceClassification"),oBe=l(),wr=a("div"),f(j0.$$.fragment),emr=l(),Rc=a("p"),omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bX=a("a"),rmr=o("from_pretrained()"),tmr=o(" class method or the "),FX=a("a"),amr=o("from_config()"),nmr=o(` class
method.`),smr=l(),D0=a("p"),lmr=o("This class cannot be instantiated directly using "),zue=a("code"),imr=o("__init__()"),dmr=o(" (throws an error)."),cmr=l(),Ft=a("div"),f(G0.$$.fragment),fmr=l(),Que=a("p"),mmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gmr=l(),Bc=a("p"),hmr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),pmr=o("not"),_mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),umr=o("from_pretrained()"),bmr=o(" to load the model weights."),Fmr=l(),Hue=a("p"),vmr=o("Examples:"),Tmr=l(),f(O0.$$.fragment),Mmr=l(),vo=a("div"),f(V0.$$.fragment),Emr=l(),Uue=a("p"),Cmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wmr=l(),Mn=a("p"),Amr=o("The model class to instantiate is selected based on the "),Jue=a("code"),ymr=o("model_type"),Lmr=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),xmr=o("pretrained_model_name_or_path"),kmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(":"),Bmr=l(),V=a("ul"),y6=a("li"),Zue=a("strong"),Pmr=o("albert"),$mr=o(" \u2014 "),TX=a("a"),Imr=o("TFAlbertForSequenceClassification"),qmr=o(" (ALBERT model)"),Nmr=l(),L6=a("li"),e1e=a("strong"),jmr=o("bert"),Dmr=o(" \u2014 "),MX=a("a"),Gmr=o("TFBertForSequenceClassification"),Omr=o(" (BERT model)"),Vmr=l(),x6=a("li"),o1e=a("strong"),Xmr=o("camembert"),zmr=o(" \u2014 "),EX=a("a"),Qmr=o("TFCamembertForSequenceClassification"),Wmr=o(" (CamemBERT model)"),Hmr=l(),k6=a("li"),r1e=a("strong"),Umr=o("convbert"),Jmr=o(" \u2014 "),CX=a("a"),Ymr=o("TFConvBertForSequenceClassification"),Kmr=o(" (ConvBERT model)"),Zmr=l(),S6=a("li"),t1e=a("strong"),egr=o("ctrl"),ogr=o(" \u2014 "),wX=a("a"),rgr=o("TFCTRLForSequenceClassification"),tgr=o(" (CTRL model)"),agr=l(),R6=a("li"),a1e=a("strong"),ngr=o("deberta"),sgr=o(" \u2014 "),AX=a("a"),lgr=o("TFDebertaForSequenceClassification"),igr=o(" (DeBERTa model)"),dgr=l(),B6=a("li"),n1e=a("strong"),cgr=o("deberta-v2"),fgr=o(" \u2014 "),yX=a("a"),mgr=o("TFDebertaV2ForSequenceClassification"),ggr=o(" (DeBERTa-v2 model)"),hgr=l(),P6=a("li"),s1e=a("strong"),pgr=o("distilbert"),_gr=o(" \u2014 "),LX=a("a"),ugr=o("TFDistilBertForSequenceClassification"),bgr=o(" (DistilBERT model)"),Fgr=l(),$6=a("li"),l1e=a("strong"),vgr=o("electra"),Tgr=o(" \u2014 "),xX=a("a"),Mgr=o("TFElectraForSequenceClassification"),Egr=o(" (ELECTRA model)"),Cgr=l(),I6=a("li"),i1e=a("strong"),wgr=o("flaubert"),Agr=o(" \u2014 "),kX=a("a"),ygr=o("TFFlaubertForSequenceClassification"),Lgr=o(" (FlauBERT model)"),xgr=l(),q6=a("li"),d1e=a("strong"),kgr=o("funnel"),Sgr=o(" \u2014 "),SX=a("a"),Rgr=o("TFFunnelForSequenceClassification"),Bgr=o(" (Funnel Transformer model)"),Pgr=l(),N6=a("li"),c1e=a("strong"),$gr=o("gpt2"),Igr=o(" \u2014 "),RX=a("a"),qgr=o("TFGPT2ForSequenceClassification"),Ngr=o(" (OpenAI GPT-2 model)"),jgr=l(),j6=a("li"),f1e=a("strong"),Dgr=o("gptj"),Ggr=o(" \u2014 "),BX=a("a"),Ogr=o("TFGPTJForSequenceClassification"),Vgr=o(" (GPT-J model)"),Xgr=l(),D6=a("li"),m1e=a("strong"),zgr=o("layoutlm"),Qgr=o(" \u2014 "),PX=a("a"),Wgr=o("TFLayoutLMForSequenceClassification"),Hgr=o(" (LayoutLM model)"),Ugr=l(),G6=a("li"),g1e=a("strong"),Jgr=o("longformer"),Ygr=o(" \u2014 "),$X=a("a"),Kgr=o("TFLongformerForSequenceClassification"),Zgr=o(" (Longformer model)"),ehr=l(),O6=a("li"),h1e=a("strong"),ohr=o("mobilebert"),rhr=o(" \u2014 "),IX=a("a"),thr=o("TFMobileBertForSequenceClassification"),ahr=o(" (MobileBERT model)"),nhr=l(),V6=a("li"),p1e=a("strong"),shr=o("mpnet"),lhr=o(" \u2014 "),qX=a("a"),ihr=o("TFMPNetForSequenceClassification"),dhr=o(" (MPNet model)"),chr=l(),X6=a("li"),_1e=a("strong"),fhr=o("openai-gpt"),mhr=o(" \u2014 "),NX=a("a"),ghr=o("TFOpenAIGPTForSequenceClassification"),hhr=o(" (OpenAI GPT model)"),phr=l(),z6=a("li"),u1e=a("strong"),_hr=o("rembert"),uhr=o(" \u2014 "),jX=a("a"),bhr=o("TFRemBertForSequenceClassification"),Fhr=o(" (RemBERT model)"),vhr=l(),Q6=a("li"),b1e=a("strong"),Thr=o("roberta"),Mhr=o(" \u2014 "),DX=a("a"),Ehr=o("TFRobertaForSequenceClassification"),Chr=o(" (RoBERTa model)"),whr=l(),W6=a("li"),F1e=a("strong"),Ahr=o("roformer"),yhr=o(" \u2014 "),GX=a("a"),Lhr=o("TFRoFormerForSequenceClassification"),xhr=o(" (RoFormer model)"),khr=l(),H6=a("li"),v1e=a("strong"),Shr=o("tapas"),Rhr=o(" \u2014 "),OX=a("a"),Bhr=o("TFTapasForSequenceClassification"),Phr=o(" (TAPAS model)"),$hr=l(),U6=a("li"),T1e=a("strong"),Ihr=o("transfo-xl"),qhr=o(" \u2014 "),VX=a("a"),Nhr=o("TFTransfoXLForSequenceClassification"),jhr=o(" (Transformer-XL model)"),Dhr=l(),J6=a("li"),M1e=a("strong"),Ghr=o("xlm"),Ohr=o(" \u2014 "),XX=a("a"),Vhr=o("TFXLMForSequenceClassification"),Xhr=o(" (XLM model)"),zhr=l(),Y6=a("li"),E1e=a("strong"),Qhr=o("xlm-roberta"),Whr=o(" \u2014 "),zX=a("a"),Hhr=o("TFXLMRobertaForSequenceClassification"),Uhr=o(" (XLM-RoBERTa model)"),Jhr=l(),K6=a("li"),C1e=a("strong"),Yhr=o("xlnet"),Khr=o(" \u2014 "),QX=a("a"),Zhr=o("TFXLNetForSequenceClassification"),epr=o(" (XLNet model)"),opr=l(),w1e=a("p"),rpr=o("Examples:"),tpr=l(),f(X0.$$.fragment),rBe=l(),Pc=a("h2"),Z6=a("a"),A1e=a("span"),f(z0.$$.fragment),apr=l(),y1e=a("span"),npr=o("TFAutoModelForMultipleChoice"),tBe=l(),Ar=a("div"),f(Q0.$$.fragment),spr=l(),$c=a("p"),lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=a("a"),ipr=o("from_pretrained()"),dpr=o(" class method or the "),HX=a("a"),cpr=o("from_config()"),fpr=o(` class
method.`),mpr=l(),W0=a("p"),gpr=o("This class cannot be instantiated directly using "),L1e=a("code"),hpr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),vt=a("div"),f(H0.$$.fragment),upr=l(),x1e=a("p"),bpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fpr=l(),Ic=a("p"),vpr=o(`Note:
Loading a model from its configuration file does `),k1e=a("strong"),Tpr=o("not"),Mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Epr=o("from_pretrained()"),Cpr=o(" to load the model weights."),wpr=l(),S1e=a("p"),Apr=o("Examples:"),ypr=l(),f(U0.$$.fragment),Lpr=l(),To=a("div"),f(J0.$$.fragment),xpr=l(),R1e=a("p"),kpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Spr=l(),En=a("p"),Rpr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Bpr=o("model_type"),Ppr=o(` property of the config object (either
passed as an argument or loaded from `),P1e=a("code"),$pr=o("pretrained_model_name_or_path"),Ipr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(":"),jpr=l(),ae=a("ul"),eT=a("li"),I1e=a("strong"),Dpr=o("albert"),Gpr=o(" \u2014 "),JX=a("a"),Opr=o("TFAlbertForMultipleChoice"),Vpr=o(" (ALBERT model)"),Xpr=l(),oT=a("li"),q1e=a("strong"),zpr=o("bert"),Qpr=o(" \u2014 "),YX=a("a"),Wpr=o("TFBertForMultipleChoice"),Hpr=o(" (BERT model)"),Upr=l(),rT=a("li"),N1e=a("strong"),Jpr=o("camembert"),Ypr=o(" \u2014 "),KX=a("a"),Kpr=o("TFCamembertForMultipleChoice"),Zpr=o(" (CamemBERT model)"),e_r=l(),tT=a("li"),j1e=a("strong"),o_r=o("convbert"),r_r=o(" \u2014 "),ZX=a("a"),t_r=o("TFConvBertForMultipleChoice"),a_r=o(" (ConvBERT model)"),n_r=l(),aT=a("li"),D1e=a("strong"),s_r=o("distilbert"),l_r=o(" \u2014 "),ez=a("a"),i_r=o("TFDistilBertForMultipleChoice"),d_r=o(" (DistilBERT model)"),c_r=l(),nT=a("li"),G1e=a("strong"),f_r=o("electra"),m_r=o(" \u2014 "),oz=a("a"),g_r=o("TFElectraForMultipleChoice"),h_r=o(" (ELECTRA model)"),p_r=l(),sT=a("li"),O1e=a("strong"),__r=o("flaubert"),u_r=o(" \u2014 "),rz=a("a"),b_r=o("TFFlaubertForMultipleChoice"),F_r=o(" (FlauBERT model)"),v_r=l(),lT=a("li"),V1e=a("strong"),T_r=o("funnel"),M_r=o(" \u2014 "),tz=a("a"),E_r=o("TFFunnelForMultipleChoice"),C_r=o(" (Funnel Transformer model)"),w_r=l(),iT=a("li"),X1e=a("strong"),A_r=o("longformer"),y_r=o(" \u2014 "),az=a("a"),L_r=o("TFLongformerForMultipleChoice"),x_r=o(" (Longformer model)"),k_r=l(),dT=a("li"),z1e=a("strong"),S_r=o("mobilebert"),R_r=o(" \u2014 "),nz=a("a"),B_r=o("TFMobileBertForMultipleChoice"),P_r=o(" (MobileBERT model)"),$_r=l(),cT=a("li"),Q1e=a("strong"),I_r=o("mpnet"),q_r=o(" \u2014 "),sz=a("a"),N_r=o("TFMPNetForMultipleChoice"),j_r=o(" (MPNet model)"),D_r=l(),fT=a("li"),W1e=a("strong"),G_r=o("rembert"),O_r=o(" \u2014 "),lz=a("a"),V_r=o("TFRemBertForMultipleChoice"),X_r=o(" (RemBERT model)"),z_r=l(),mT=a("li"),H1e=a("strong"),Q_r=o("roberta"),W_r=o(" \u2014 "),iz=a("a"),H_r=o("TFRobertaForMultipleChoice"),U_r=o(" (RoBERTa model)"),J_r=l(),gT=a("li"),U1e=a("strong"),Y_r=o("roformer"),K_r=o(" \u2014 "),dz=a("a"),Z_r=o("TFRoFormerForMultipleChoice"),eur=o(" (RoFormer model)"),our=l(),hT=a("li"),J1e=a("strong"),rur=o("xlm"),tur=o(" \u2014 "),cz=a("a"),aur=o("TFXLMForMultipleChoice"),nur=o(" (XLM model)"),sur=l(),pT=a("li"),Y1e=a("strong"),lur=o("xlm-roberta"),iur=o(" \u2014 "),fz=a("a"),dur=o("TFXLMRobertaForMultipleChoice"),cur=o(" (XLM-RoBERTa model)"),fur=l(),_T=a("li"),K1e=a("strong"),mur=o("xlnet"),gur=o(" \u2014 "),mz=a("a"),hur=o("TFXLNetForMultipleChoice"),pur=o(" (XLNet model)"),_ur=l(),Z1e=a("p"),uur=o("Examples:"),bur=l(),f(Y0.$$.fragment),aBe=l(),qc=a("h2"),uT=a("a"),ebe=a("span"),f(K0.$$.fragment),Fur=l(),obe=a("span"),vur=o("TFAutoModelForTableQuestionAnswering"),nBe=l(),yr=a("div"),f(Z0.$$.fragment),Tur=l(),Nc=a("p"),Mur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=a("a"),Eur=o("from_pretrained()"),Cur=o(" class method or the "),hz=a("a"),wur=o("from_config()"),Aur=o(` class
method.`),yur=l(),ey=a("p"),Lur=o("This class cannot be instantiated directly using "),rbe=a("code"),xur=o("__init__()"),kur=o(" (throws an error)."),Sur=l(),Tt=a("div"),f(oy.$$.fragment),Rur=l(),tbe=a("p"),Bur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Pur=l(),jc=a("p"),$ur=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),Iur=o("not"),qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=a("a"),Nur=o("from_pretrained()"),jur=o(" to load the model weights."),Dur=l(),nbe=a("p"),Gur=o("Examples:"),Our=l(),f(ry.$$.fragment),Vur=l(),Mo=a("div"),f(ty.$$.fragment),Xur=l(),sbe=a("p"),zur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Qur=l(),Cn=a("p"),Wur=o("The model class to instantiate is selected based on the "),lbe=a("code"),Hur=o("model_type"),Uur=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),Jur=o("pretrained_model_name_or_path"),Yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(":"),e1r=l(),cbe=a("ul"),bT=a("li"),fbe=a("strong"),o1r=o("tapas"),r1r=o(" \u2014 "),_z=a("a"),t1r=o("TFTapasForQuestionAnswering"),a1r=o(" (TAPAS model)"),n1r=l(),mbe=a("p"),s1r=o("Examples:"),l1r=l(),f(ay.$$.fragment),sBe=l(),Dc=a("h2"),FT=a("a"),gbe=a("span"),f(ny.$$.fragment),i1r=l(),hbe=a("span"),d1r=o("TFAutoModelForTokenClassification"),lBe=l(),Lr=a("div"),f(sy.$$.fragment),c1r=l(),Gc=a("p"),f1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uz=a("a"),m1r=o("from_pretrained()"),g1r=o(" class method or the "),bz=a("a"),h1r=o("from_config()"),p1r=o(` class
method.`),_1r=l(),ly=a("p"),u1r=o("This class cannot be instantiated directly using "),pbe=a("code"),b1r=o("__init__()"),F1r=o(" (throws an error)."),v1r=l(),Mt=a("div"),f(iy.$$.fragment),T1r=l(),_be=a("p"),M1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E1r=l(),Oc=a("p"),C1r=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),w1r=o("not"),A1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),y1r=o("from_pretrained()"),L1r=o(" to load the model weights."),x1r=l(),bbe=a("p"),k1r=o("Examples:"),S1r=l(),f(dy.$$.fragment),R1r=l(),Eo=a("div"),f(cy.$$.fragment),B1r=l(),Fbe=a("p"),P1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$1r=l(),wn=a("p"),I1r=o("The model class to instantiate is selected based on the "),vbe=a("code"),q1r=o("model_type"),N1r=o(` property of the config object (either
passed as an argument or loaded from `),Tbe=a("code"),j1r=o("pretrained_model_name_or_path"),D1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=a("code"),G1r=o("pretrained_model_name_or_path"),O1r=o(":"),V1r=l(),Y=a("ul"),vT=a("li"),Ebe=a("strong"),X1r=o("albert"),z1r=o(" \u2014 "),vz=a("a"),Q1r=o("TFAlbertForTokenClassification"),W1r=o(" (ALBERT model)"),H1r=l(),TT=a("li"),Cbe=a("strong"),U1r=o("bert"),J1r=o(" \u2014 "),Tz=a("a"),Y1r=o("TFBertForTokenClassification"),K1r=o(" (BERT model)"),Z1r=l(),MT=a("li"),wbe=a("strong"),ebr=o("camembert"),obr=o(" \u2014 "),Mz=a("a"),rbr=o("TFCamembertForTokenClassification"),tbr=o(" (CamemBERT model)"),abr=l(),ET=a("li"),Abe=a("strong"),nbr=o("convbert"),sbr=o(" \u2014 "),Ez=a("a"),lbr=o("TFConvBertForTokenClassification"),ibr=o(" (ConvBERT model)"),dbr=l(),CT=a("li"),ybe=a("strong"),cbr=o("deberta"),fbr=o(" \u2014 "),Cz=a("a"),mbr=o("TFDebertaForTokenClassification"),gbr=o(" (DeBERTa model)"),hbr=l(),wT=a("li"),Lbe=a("strong"),pbr=o("deberta-v2"),_br=o(" \u2014 "),wz=a("a"),ubr=o("TFDebertaV2ForTokenClassification"),bbr=o(" (DeBERTa-v2 model)"),Fbr=l(),AT=a("li"),xbe=a("strong"),vbr=o("distilbert"),Tbr=o(" \u2014 "),Az=a("a"),Mbr=o("TFDistilBertForTokenClassification"),Ebr=o(" (DistilBERT model)"),Cbr=l(),yT=a("li"),kbe=a("strong"),wbr=o("electra"),Abr=o(" \u2014 "),yz=a("a"),ybr=o("TFElectraForTokenClassification"),Lbr=o(" (ELECTRA model)"),xbr=l(),LT=a("li"),Sbe=a("strong"),kbr=o("flaubert"),Sbr=o(" \u2014 "),Lz=a("a"),Rbr=o("TFFlaubertForTokenClassification"),Bbr=o(" (FlauBERT model)"),Pbr=l(),xT=a("li"),Rbe=a("strong"),$br=o("funnel"),Ibr=o(" \u2014 "),xz=a("a"),qbr=o("TFFunnelForTokenClassification"),Nbr=o(" (Funnel Transformer model)"),jbr=l(),kT=a("li"),Bbe=a("strong"),Dbr=o("layoutlm"),Gbr=o(" \u2014 "),kz=a("a"),Obr=o("TFLayoutLMForTokenClassification"),Vbr=o(" (LayoutLM model)"),Xbr=l(),ST=a("li"),Pbe=a("strong"),zbr=o("longformer"),Qbr=o(" \u2014 "),Sz=a("a"),Wbr=o("TFLongformerForTokenClassification"),Hbr=o(" (Longformer model)"),Ubr=l(),RT=a("li"),$be=a("strong"),Jbr=o("mobilebert"),Ybr=o(" \u2014 "),Rz=a("a"),Kbr=o("TFMobileBertForTokenClassification"),Zbr=o(" (MobileBERT model)"),e5r=l(),BT=a("li"),Ibe=a("strong"),o5r=o("mpnet"),r5r=o(" \u2014 "),Bz=a("a"),t5r=o("TFMPNetForTokenClassification"),a5r=o(" (MPNet model)"),n5r=l(),PT=a("li"),qbe=a("strong"),s5r=o("rembert"),l5r=o(" \u2014 "),Pz=a("a"),i5r=o("TFRemBertForTokenClassification"),d5r=o(" (RemBERT model)"),c5r=l(),$T=a("li"),Nbe=a("strong"),f5r=o("roberta"),m5r=o(" \u2014 "),$z=a("a"),g5r=o("TFRobertaForTokenClassification"),h5r=o(" (RoBERTa model)"),p5r=l(),IT=a("li"),jbe=a("strong"),_5r=o("roformer"),u5r=o(" \u2014 "),Iz=a("a"),b5r=o("TFRoFormerForTokenClassification"),F5r=o(" (RoFormer model)"),v5r=l(),qT=a("li"),Dbe=a("strong"),T5r=o("xlm"),M5r=o(" \u2014 "),qz=a("a"),E5r=o("TFXLMForTokenClassification"),C5r=o(" (XLM model)"),w5r=l(),NT=a("li"),Gbe=a("strong"),A5r=o("xlm-roberta"),y5r=o(" \u2014 "),Nz=a("a"),L5r=o("TFXLMRobertaForTokenClassification"),x5r=o(" (XLM-RoBERTa model)"),k5r=l(),jT=a("li"),Obe=a("strong"),S5r=o("xlnet"),R5r=o(" \u2014 "),jz=a("a"),B5r=o("TFXLNetForTokenClassification"),P5r=o(" (XLNet model)"),$5r=l(),Vbe=a("p"),I5r=o("Examples:"),q5r=l(),f(fy.$$.fragment),iBe=l(),Vc=a("h2"),DT=a("a"),Xbe=a("span"),f(my.$$.fragment),N5r=l(),zbe=a("span"),j5r=o("TFAutoModelForQuestionAnswering"),dBe=l(),xr=a("div"),f(gy.$$.fragment),D5r=l(),Xc=a("p"),G5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dz=a("a"),O5r=o("from_pretrained()"),V5r=o(" class method or the "),Gz=a("a"),X5r=o("from_config()"),z5r=o(` class
method.`),Q5r=l(),hy=a("p"),W5r=o("This class cannot be instantiated directly using "),Qbe=a("code"),H5r=o("__init__()"),U5r=o(" (throws an error)."),J5r=l(),Et=a("div"),f(py.$$.fragment),Y5r=l(),Wbe=a("p"),K5r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z5r=l(),zc=a("p"),e3r=o(`Note:
Loading a model from its configuration file does `),Hbe=a("strong"),o3r=o("not"),r3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),t3r=o("from_pretrained()"),a3r=o(" to load the model weights."),n3r=l(),Ube=a("p"),s3r=o("Examples:"),l3r=l(),f(_y.$$.fragment),i3r=l(),Co=a("div"),f(uy.$$.fragment),d3r=l(),Jbe=a("p"),c3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f3r=l(),An=a("p"),m3r=o("The model class to instantiate is selected based on the "),Ybe=a("code"),g3r=o("model_type"),h3r=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),p3r=o("pretrained_model_name_or_path"),_3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),u3r=o("pretrained_model_name_or_path"),b3r=o(":"),F3r=l(),K=a("ul"),GT=a("li"),e5e=a("strong"),v3r=o("albert"),T3r=o(" \u2014 "),Vz=a("a"),M3r=o("TFAlbertForQuestionAnswering"),E3r=o(" (ALBERT model)"),C3r=l(),OT=a("li"),o5e=a("strong"),w3r=o("bert"),A3r=o(" \u2014 "),Xz=a("a"),y3r=o("TFBertForQuestionAnswering"),L3r=o(" (BERT model)"),x3r=l(),VT=a("li"),r5e=a("strong"),k3r=o("camembert"),S3r=o(" \u2014 "),zz=a("a"),R3r=o("TFCamembertForQuestionAnswering"),B3r=o(" (CamemBERT model)"),P3r=l(),XT=a("li"),t5e=a("strong"),$3r=o("convbert"),I3r=o(" \u2014 "),Qz=a("a"),q3r=o("TFConvBertForQuestionAnswering"),N3r=o(" (ConvBERT model)"),j3r=l(),zT=a("li"),a5e=a("strong"),D3r=o("deberta"),G3r=o(" \u2014 "),Wz=a("a"),O3r=o("TFDebertaForQuestionAnswering"),V3r=o(" (DeBERTa model)"),X3r=l(),QT=a("li"),n5e=a("strong"),z3r=o("deberta-v2"),Q3r=o(" \u2014 "),Hz=a("a"),W3r=o("TFDebertaV2ForQuestionAnswering"),H3r=o(" (DeBERTa-v2 model)"),U3r=l(),WT=a("li"),s5e=a("strong"),J3r=o("distilbert"),Y3r=o(" \u2014 "),Uz=a("a"),K3r=o("TFDistilBertForQuestionAnswering"),Z3r=o(" (DistilBERT model)"),e2r=l(),HT=a("li"),l5e=a("strong"),o2r=o("electra"),r2r=o(" \u2014 "),Jz=a("a"),t2r=o("TFElectraForQuestionAnswering"),a2r=o(" (ELECTRA model)"),n2r=l(),UT=a("li"),i5e=a("strong"),s2r=o("flaubert"),l2r=o(" \u2014 "),Yz=a("a"),i2r=o("TFFlaubertForQuestionAnsweringSimple"),d2r=o(" (FlauBERT model)"),c2r=l(),JT=a("li"),d5e=a("strong"),f2r=o("funnel"),m2r=o(" \u2014 "),Kz=a("a"),g2r=o("TFFunnelForQuestionAnswering"),h2r=o(" (Funnel Transformer model)"),p2r=l(),YT=a("li"),c5e=a("strong"),_2r=o("gptj"),u2r=o(" \u2014 "),Zz=a("a"),b2r=o("TFGPTJForQuestionAnswering"),F2r=o(" (GPT-J model)"),v2r=l(),KT=a("li"),f5e=a("strong"),T2r=o("longformer"),M2r=o(" \u2014 "),eQ=a("a"),E2r=o("TFLongformerForQuestionAnswering"),C2r=o(" (Longformer model)"),w2r=l(),ZT=a("li"),m5e=a("strong"),A2r=o("mobilebert"),y2r=o(" \u2014 "),oQ=a("a"),L2r=o("TFMobileBertForQuestionAnswering"),x2r=o(" (MobileBERT model)"),k2r=l(),e7=a("li"),g5e=a("strong"),S2r=o("mpnet"),R2r=o(" \u2014 "),rQ=a("a"),B2r=o("TFMPNetForQuestionAnswering"),P2r=o(" (MPNet model)"),$2r=l(),o7=a("li"),h5e=a("strong"),I2r=o("rembert"),q2r=o(" \u2014 "),tQ=a("a"),N2r=o("TFRemBertForQuestionAnswering"),j2r=o(" (RemBERT model)"),D2r=l(),r7=a("li"),p5e=a("strong"),G2r=o("roberta"),O2r=o(" \u2014 "),aQ=a("a"),V2r=o("TFRobertaForQuestionAnswering"),X2r=o(" (RoBERTa model)"),z2r=l(),t7=a("li"),_5e=a("strong"),Q2r=o("roformer"),W2r=o(" \u2014 "),nQ=a("a"),H2r=o("TFRoFormerForQuestionAnswering"),U2r=o(" (RoFormer model)"),J2r=l(),a7=a("li"),u5e=a("strong"),Y2r=o("xlm"),K2r=o(" \u2014 "),sQ=a("a"),Z2r=o("TFXLMForQuestionAnsweringSimple"),eFr=o(" (XLM model)"),oFr=l(),n7=a("li"),b5e=a("strong"),rFr=o("xlm-roberta"),tFr=o(" \u2014 "),lQ=a("a"),aFr=o("TFXLMRobertaForQuestionAnswering"),nFr=o(" (XLM-RoBERTa model)"),sFr=l(),s7=a("li"),F5e=a("strong"),lFr=o("xlnet"),iFr=o(" \u2014 "),iQ=a("a"),dFr=o("TFXLNetForQuestionAnsweringSimple"),cFr=o(" (XLNet model)"),fFr=l(),v5e=a("p"),mFr=o("Examples:"),gFr=l(),f(by.$$.fragment),cBe=l(),Qc=a("h2"),l7=a("a"),T5e=a("span"),f(Fy.$$.fragment),hFr=l(),M5e=a("span"),pFr=o("TFAutoModelForVision2Seq"),fBe=l(),kr=a("div"),f(vy.$$.fragment),_Fr=l(),Wc=a("p"),uFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=a("a"),bFr=o("from_pretrained()"),FFr=o(" class method or the "),cQ=a("a"),vFr=o("from_config()"),TFr=o(` class
method.`),MFr=l(),Ty=a("p"),EFr=o("This class cannot be instantiated directly using "),E5e=a("code"),CFr=o("__init__()"),wFr=o(" (throws an error)."),AFr=l(),Ct=a("div"),f(My.$$.fragment),yFr=l(),C5e=a("p"),LFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xFr=l(),Hc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),w5e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),BFr=o("from_pretrained()"),PFr=o(" to load the model weights."),$Fr=l(),A5e=a("p"),IFr=o("Examples:"),qFr=l(),f(Ey.$$.fragment),NFr=l(),wo=a("div"),f(Cy.$$.fragment),jFr=l(),y5e=a("p"),DFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GFr=l(),yn=a("p"),OFr=o("The model class to instantiate is selected based on the "),L5e=a("code"),VFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),x5e=a("code"),zFr=o("pretrained_model_name_or_path"),QFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),WFr=o("pretrained_model_name_or_path"),HFr=o(":"),UFr=l(),S5e=a("ul"),i7=a("li"),R5e=a("strong"),JFr=o("vision-encoder-decoder"),YFr=o(" \u2014 "),mQ=a("a"),KFr=o("TFVisionEncoderDecoderModel"),ZFr=o(" (Vision Encoder decoder model)"),evr=l(),B5e=a("p"),ovr=o("Examples:"),rvr=l(),f(wy.$$.fragment),mBe=l(),Uc=a("h2"),d7=a("a"),P5e=a("span"),f(Ay.$$.fragment),tvr=l(),$5e=a("span"),avr=o("TFAutoModelForSpeechSeq2Seq"),gBe=l(),Sr=a("div"),f(yy.$$.fragment),nvr=l(),Jc=a("p"),svr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gQ=a("a"),lvr=o("from_pretrained()"),ivr=o(" class method or the "),hQ=a("a"),dvr=o("from_config()"),cvr=o(` class
method.`),fvr=l(),Ly=a("p"),mvr=o("This class cannot be instantiated directly using "),I5e=a("code"),gvr=o("__init__()"),hvr=o(" (throws an error)."),pvr=l(),wt=a("div"),f(xy.$$.fragment),_vr=l(),q5e=a("p"),uvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bvr=l(),Yc=a("p"),Fvr=o(`Note:
Loading a model from its configuration file does `),N5e=a("strong"),vvr=o("not"),Tvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Mvr=o("from_pretrained()"),Evr=o(" to load the model weights."),Cvr=l(),j5e=a("p"),wvr=o("Examples:"),Avr=l(),f(ky.$$.fragment),yvr=l(),Ao=a("div"),f(Sy.$$.fragment),Lvr=l(),D5e=a("p"),xvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kvr=l(),Ln=a("p"),Svr=o("The model class to instantiate is selected based on the "),G5e=a("code"),Rvr=o("model_type"),Bvr=o(` property of the config object (either
passed as an argument or loaded from `),O5e=a("code"),Pvr=o("pretrained_model_name_or_path"),$vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=a("code"),Ivr=o("pretrained_model_name_or_path"),qvr=o(":"),Nvr=l(),X5e=a("ul"),c7=a("li"),z5e=a("strong"),jvr=o("speech_to_text"),Dvr=o(" \u2014 "),_Q=a("a"),Gvr=o("TFSpeech2TextForConditionalGeneration"),Ovr=o(" (Speech2Text model)"),Vvr=l(),Q5e=a("p"),Xvr=o("Examples:"),zvr=l(),f(Ry.$$.fragment),hBe=l(),Kc=a("h2"),f7=a("a"),W5e=a("span"),f(By.$$.fragment),Qvr=l(),H5e=a("span"),Wvr=o("FlaxAutoModel"),pBe=l(),Rr=a("div"),f(Py.$$.fragment),Hvr=l(),Zc=a("p"),Uvr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uQ=a("a"),Jvr=o("from_pretrained()"),Yvr=o(" class method or the "),bQ=a("a"),Kvr=o("from_config()"),Zvr=o(` class
method.`),e6r=l(),$y=a("p"),o6r=o("This class cannot be instantiated directly using "),U5e=a("code"),r6r=o("__init__()"),t6r=o(" (throws an error)."),a6r=l(),At=a("div"),f(Iy.$$.fragment),n6r=l(),J5e=a("p"),s6r=o("Instantiates one of the base model classes of the library from a configuration."),l6r=l(),ef=a("p"),i6r=o(`Note:
Loading a model from its configuration file does `),Y5e=a("strong"),d6r=o("not"),c6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),f6r=o("from_pretrained()"),m6r=o(" to load the model weights."),g6r=l(),K5e=a("p"),h6r=o("Examples:"),p6r=l(),f(qy.$$.fragment),_6r=l(),yo=a("div"),f(Ny.$$.fragment),u6r=l(),Z5e=a("p"),b6r=o("Instantiate one of the base model classes of the library from a pretrained model."),F6r=l(),xn=a("p"),v6r=o("The model class to instantiate is selected based on the "),e3e=a("code"),T6r=o("model_type"),M6r=o(` property of the config object (either
passed as an argument or loaded from `),o3e=a("code"),E6r=o("pretrained_model_name_or_path"),C6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=a("code"),w6r=o("pretrained_model_name_or_path"),A6r=o(":"),y6r=l(),z=a("ul"),m7=a("li"),t3e=a("strong"),L6r=o("albert"),x6r=o(" \u2014 "),vQ=a("a"),k6r=o("FlaxAlbertModel"),S6r=o(" (ALBERT model)"),R6r=l(),g7=a("li"),a3e=a("strong"),B6r=o("bart"),P6r=o(" \u2014 "),TQ=a("a"),$6r=o("FlaxBartModel"),I6r=o(" (BART model)"),q6r=l(),h7=a("li"),n3e=a("strong"),N6r=o("beit"),j6r=o(" \u2014 "),MQ=a("a"),D6r=o("FlaxBeitModel"),G6r=o(" (BEiT model)"),O6r=l(),p7=a("li"),s3e=a("strong"),V6r=o("bert"),X6r=o(" \u2014 "),EQ=a("a"),z6r=o("FlaxBertModel"),Q6r=o(" (BERT model)"),W6r=l(),_7=a("li"),l3e=a("strong"),H6r=o("big_bird"),U6r=o(" \u2014 "),CQ=a("a"),J6r=o("FlaxBigBirdModel"),Y6r=o(" (BigBird model)"),K6r=l(),u7=a("li"),i3e=a("strong"),Z6r=o("blenderbot"),eTr=o(" \u2014 "),wQ=a("a"),oTr=o("FlaxBlenderbotModel"),rTr=o(" (Blenderbot model)"),tTr=l(),b7=a("li"),d3e=a("strong"),aTr=o("blenderbot-small"),nTr=o(" \u2014 "),AQ=a("a"),sTr=o("FlaxBlenderbotSmallModel"),lTr=o(" (BlenderbotSmall model)"),iTr=l(),F7=a("li"),c3e=a("strong"),dTr=o("clip"),cTr=o(" \u2014 "),yQ=a("a"),fTr=o("FlaxCLIPModel"),mTr=o(" (CLIP model)"),gTr=l(),v7=a("li"),f3e=a("strong"),hTr=o("distilbert"),pTr=o(" \u2014 "),LQ=a("a"),_Tr=o("FlaxDistilBertModel"),uTr=o(" (DistilBERT model)"),bTr=l(),T7=a("li"),m3e=a("strong"),FTr=o("electra"),vTr=o(" \u2014 "),xQ=a("a"),TTr=o("FlaxElectraModel"),MTr=o(" (ELECTRA model)"),ETr=l(),M7=a("li"),g3e=a("strong"),CTr=o("gpt2"),wTr=o(" \u2014 "),kQ=a("a"),ATr=o("FlaxGPT2Model"),yTr=o(" (OpenAI GPT-2 model)"),LTr=l(),E7=a("li"),h3e=a("strong"),xTr=o("gpt_neo"),kTr=o(" \u2014 "),SQ=a("a"),STr=o("FlaxGPTNeoModel"),RTr=o(" (GPT Neo model)"),BTr=l(),C7=a("li"),p3e=a("strong"),PTr=o("gptj"),$Tr=o(" \u2014 "),RQ=a("a"),ITr=o("FlaxGPTJModel"),qTr=o(" (GPT-J model)"),NTr=l(),w7=a("li"),_3e=a("strong"),jTr=o("marian"),DTr=o(" \u2014 "),BQ=a("a"),GTr=o("FlaxMarianModel"),OTr=o(" (Marian model)"),VTr=l(),A7=a("li"),u3e=a("strong"),XTr=o("mbart"),zTr=o(" \u2014 "),PQ=a("a"),QTr=o("FlaxMBartModel"),WTr=o(" (mBART model)"),HTr=l(),y7=a("li"),b3e=a("strong"),UTr=o("mt5"),JTr=o(" \u2014 "),$Q=a("a"),YTr=o("FlaxMT5Model"),KTr=o(" (mT5 model)"),ZTr=l(),L7=a("li"),F3e=a("strong"),e7r=o("pegasus"),o7r=o(" \u2014 "),IQ=a("a"),r7r=o("FlaxPegasusModel"),t7r=o(" (Pegasus model)"),a7r=l(),x7=a("li"),v3e=a("strong"),n7r=o("roberta"),s7r=o(" \u2014 "),qQ=a("a"),l7r=o("FlaxRobertaModel"),i7r=o(" (RoBERTa model)"),d7r=l(),k7=a("li"),T3e=a("strong"),c7r=o("roformer"),f7r=o(" \u2014 "),NQ=a("a"),m7r=o("FlaxRoFormerModel"),g7r=o(" (RoFormer model)"),h7r=l(),S7=a("li"),M3e=a("strong"),p7r=o("t5"),_7r=o(" \u2014 "),jQ=a("a"),u7r=o("FlaxT5Model"),b7r=o(" (T5 model)"),F7r=l(),R7=a("li"),E3e=a("strong"),v7r=o("vision-text-dual-encoder"),T7r=o(" \u2014 "),DQ=a("a"),M7r=o("FlaxVisionTextDualEncoderModel"),E7r=o(" (VisionTextDualEncoder model)"),C7r=l(),B7=a("li"),C3e=a("strong"),w7r=o("vit"),A7r=o(" \u2014 "),GQ=a("a"),y7r=o("FlaxViTModel"),L7r=o(" (ViT model)"),x7r=l(),P7=a("li"),w3e=a("strong"),k7r=o("wav2vec2"),S7r=o(" \u2014 "),OQ=a("a"),R7r=o("FlaxWav2Vec2Model"),B7r=o(" (Wav2Vec2 model)"),P7r=l(),$7=a("li"),A3e=a("strong"),$7r=o("xglm"),I7r=o(" \u2014 "),VQ=a("a"),q7r=o("FlaxXGLMModel"),N7r=o(" (XGLM model)"),j7r=l(),I7=a("li"),y3e=a("strong"),D7r=o("xlm-roberta"),G7r=o(" \u2014 "),XQ=a("a"),O7r=o("FlaxXLMRobertaModel"),V7r=o(" (XLM-RoBERTa model)"),X7r=l(),L3e=a("p"),z7r=o("Examples:"),Q7r=l(),f(jy.$$.fragment),_Be=l(),of=a("h2"),q7=a("a"),x3e=a("span"),f(Dy.$$.fragment),W7r=l(),k3e=a("span"),H7r=o("FlaxAutoModelForCausalLM"),uBe=l(),Br=a("div"),f(Gy.$$.fragment),U7r=l(),rf=a("p"),J7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=a("a"),Y7r=o("from_pretrained()"),K7r=o(" class method or the "),QQ=a("a"),Z7r=o("from_config()"),eMr=o(` class
method.`),oMr=l(),Oy=a("p"),rMr=o("This class cannot be instantiated directly using "),S3e=a("code"),tMr=o("__init__()"),aMr=o(" (throws an error)."),nMr=l(),yt=a("div"),f(Vy.$$.fragment),sMr=l(),R3e=a("p"),lMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iMr=l(),tf=a("p"),dMr=o(`Note:
Loading a model from its configuration file does `),B3e=a("strong"),cMr=o("not"),fMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=a("a"),mMr=o("from_pretrained()"),gMr=o(" to load the model weights."),hMr=l(),P3e=a("p"),pMr=o("Examples:"),_Mr=l(),f(Xy.$$.fragment),uMr=l(),Lo=a("div"),f(zy.$$.fragment),bMr=l(),$3e=a("p"),FMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vMr=l(),kn=a("p"),TMr=o("The model class to instantiate is selected based on the "),I3e=a("code"),MMr=o("model_type"),EMr=o(` property of the config object (either
passed as an argument or loaded from `),q3e=a("code"),CMr=o("pretrained_model_name_or_path"),wMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=a("code"),AMr=o("pretrained_model_name_or_path"),yMr=o(":"),LMr=l(),ca=a("ul"),N7=a("li"),j3e=a("strong"),xMr=o("bart"),kMr=o(" \u2014 "),HQ=a("a"),SMr=o("FlaxBartForCausalLM"),RMr=o(" (BART model)"),BMr=l(),j7=a("li"),D3e=a("strong"),PMr=o("gpt2"),$Mr=o(" \u2014 "),UQ=a("a"),IMr=o("FlaxGPT2LMHeadModel"),qMr=o(" (OpenAI GPT-2 model)"),NMr=l(),D7=a("li"),G3e=a("strong"),jMr=o("gpt_neo"),DMr=o(" \u2014 "),JQ=a("a"),GMr=o("FlaxGPTNeoForCausalLM"),OMr=o(" (GPT Neo model)"),VMr=l(),G7=a("li"),O3e=a("strong"),XMr=o("gptj"),zMr=o(" \u2014 "),YQ=a("a"),QMr=o("FlaxGPTJForCausalLM"),WMr=o(" (GPT-J model)"),HMr=l(),O7=a("li"),V3e=a("strong"),UMr=o("xglm"),JMr=o(" \u2014 "),KQ=a("a"),YMr=o("FlaxXGLMForCausalLM"),KMr=o(" (XGLM model)"),ZMr=l(),X3e=a("p"),e4r=o("Examples:"),o4r=l(),f(Qy.$$.fragment),bBe=l(),af=a("h2"),V7=a("a"),z3e=a("span"),f(Wy.$$.fragment),r4r=l(),Q3e=a("span"),t4r=o("FlaxAutoModelForPreTraining"),FBe=l(),Pr=a("div"),f(Hy.$$.fragment),a4r=l(),nf=a("p"),n4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=a("a"),s4r=o("from_pretrained()"),l4r=o(" class method or the "),eW=a("a"),i4r=o("from_config()"),d4r=o(` class
method.`),c4r=l(),Uy=a("p"),f4r=o("This class cannot be instantiated directly using "),W3e=a("code"),m4r=o("__init__()"),g4r=o(" (throws an error)."),h4r=l(),Lt=a("div"),f(Jy.$$.fragment),p4r=l(),H3e=a("p"),_4r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),u4r=l(),sf=a("p"),b4r=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),F4r=o("not"),v4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=a("a"),T4r=o("from_pretrained()"),M4r=o(" to load the model weights."),E4r=l(),J3e=a("p"),C4r=o("Examples:"),w4r=l(),f(Yy.$$.fragment),A4r=l(),xo=a("div"),f(Ky.$$.fragment),y4r=l(),Y3e=a("p"),L4r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x4r=l(),Sn=a("p"),k4r=o("The model class to instantiate is selected based on the "),K3e=a("code"),S4r=o("model_type"),R4r=o(` property of the config object (either
passed as an argument or loaded from `),Z3e=a("code"),B4r=o("pretrained_model_name_or_path"),P4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=a("code"),$4r=o("pretrained_model_name_or_path"),I4r=o(":"),q4r=l(),fe=a("ul"),X7=a("li"),o2e=a("strong"),N4r=o("albert"),j4r=o(" \u2014 "),rW=a("a"),D4r=o("FlaxAlbertForPreTraining"),G4r=o(" (ALBERT model)"),O4r=l(),z7=a("li"),r2e=a("strong"),V4r=o("bart"),X4r=o(" \u2014 "),tW=a("a"),z4r=o("FlaxBartForConditionalGeneration"),Q4r=o(" (BART model)"),W4r=l(),Q7=a("li"),t2e=a("strong"),H4r=o("bert"),U4r=o(" \u2014 "),aW=a("a"),J4r=o("FlaxBertForPreTraining"),Y4r=o(" (BERT model)"),K4r=l(),W7=a("li"),a2e=a("strong"),Z4r=o("big_bird"),eEr=o(" \u2014 "),nW=a("a"),oEr=o("FlaxBigBirdForPreTraining"),rEr=o(" (BigBird model)"),tEr=l(),H7=a("li"),n2e=a("strong"),aEr=o("electra"),nEr=o(" \u2014 "),sW=a("a"),sEr=o("FlaxElectraForPreTraining"),lEr=o(" (ELECTRA model)"),iEr=l(),U7=a("li"),s2e=a("strong"),dEr=o("mbart"),cEr=o(" \u2014 "),lW=a("a"),fEr=o("FlaxMBartForConditionalGeneration"),mEr=o(" (mBART model)"),gEr=l(),J7=a("li"),l2e=a("strong"),hEr=o("mt5"),pEr=o(" \u2014 "),iW=a("a"),_Er=o("FlaxMT5ForConditionalGeneration"),uEr=o(" (mT5 model)"),bEr=l(),Y7=a("li"),i2e=a("strong"),FEr=o("roberta"),vEr=o(" \u2014 "),dW=a("a"),TEr=o("FlaxRobertaForMaskedLM"),MEr=o(" (RoBERTa model)"),EEr=l(),K7=a("li"),d2e=a("strong"),CEr=o("roformer"),wEr=o(" \u2014 "),cW=a("a"),AEr=o("FlaxRoFormerForMaskedLM"),yEr=o(" (RoFormer model)"),LEr=l(),Z7=a("li"),c2e=a("strong"),xEr=o("t5"),kEr=o(" \u2014 "),fW=a("a"),SEr=o("FlaxT5ForConditionalGeneration"),REr=o(" (T5 model)"),BEr=l(),eM=a("li"),f2e=a("strong"),PEr=o("wav2vec2"),$Er=o(" \u2014 "),mW=a("a"),IEr=o("FlaxWav2Vec2ForPreTraining"),qEr=o(" (Wav2Vec2 model)"),NEr=l(),oM=a("li"),m2e=a("strong"),jEr=o("xlm-roberta"),DEr=o(" \u2014 "),gW=a("a"),GEr=o("FlaxXLMRobertaForMaskedLM"),OEr=o(" (XLM-RoBERTa model)"),VEr=l(),g2e=a("p"),XEr=o("Examples:"),zEr=l(),f(Zy.$$.fragment),vBe=l(),lf=a("h2"),rM=a("a"),h2e=a("span"),f(eL.$$.fragment),QEr=l(),p2e=a("span"),WEr=o("FlaxAutoModelForMaskedLM"),TBe=l(),$r=a("div"),f(oL.$$.fragment),HEr=l(),df=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hW=a("a"),JEr=o("from_pretrained()"),YEr=o(" class method or the "),pW=a("a"),KEr=o("from_config()"),ZEr=o(` class
method.`),eCr=l(),rL=a("p"),oCr=o("This class cannot be instantiated directly using "),_2e=a("code"),rCr=o("__init__()"),tCr=o(" (throws an error)."),aCr=l(),xt=a("div"),f(tL.$$.fragment),nCr=l(),u2e=a("p"),sCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lCr=l(),cf=a("p"),iCr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),dCr=o("not"),cCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),fCr=o("from_pretrained()"),mCr=o(" to load the model weights."),gCr=l(),F2e=a("p"),hCr=o("Examples:"),pCr=l(),f(aL.$$.fragment),_Cr=l(),ko=a("div"),f(nL.$$.fragment),uCr=l(),v2e=a("p"),bCr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FCr=l(),Rn=a("p"),vCr=o("The model class to instantiate is selected based on the "),T2e=a("code"),TCr=o("model_type"),MCr=o(` property of the config object (either
passed as an argument or loaded from `),M2e=a("code"),ECr=o("pretrained_model_name_or_path"),CCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(":"),yCr=l(),be=a("ul"),tM=a("li"),C2e=a("strong"),LCr=o("albert"),xCr=o(" \u2014 "),uW=a("a"),kCr=o("FlaxAlbertForMaskedLM"),SCr=o(" (ALBERT model)"),RCr=l(),aM=a("li"),w2e=a("strong"),BCr=o("bart"),PCr=o(" \u2014 "),bW=a("a"),$Cr=o("FlaxBartForConditionalGeneration"),ICr=o(" (BART model)"),qCr=l(),nM=a("li"),A2e=a("strong"),NCr=o("bert"),jCr=o(" \u2014 "),FW=a("a"),DCr=o("FlaxBertForMaskedLM"),GCr=o(" (BERT model)"),OCr=l(),sM=a("li"),y2e=a("strong"),VCr=o("big_bird"),XCr=o(" \u2014 "),vW=a("a"),zCr=o("FlaxBigBirdForMaskedLM"),QCr=o(" (BigBird model)"),WCr=l(),lM=a("li"),L2e=a("strong"),HCr=o("distilbert"),UCr=o(" \u2014 "),TW=a("a"),JCr=o("FlaxDistilBertForMaskedLM"),YCr=o(" (DistilBERT model)"),KCr=l(),iM=a("li"),x2e=a("strong"),ZCr=o("electra"),ewr=o(" \u2014 "),MW=a("a"),owr=o("FlaxElectraForMaskedLM"),rwr=o(" (ELECTRA model)"),twr=l(),dM=a("li"),k2e=a("strong"),awr=o("mbart"),nwr=o(" \u2014 "),EW=a("a"),swr=o("FlaxMBartForConditionalGeneration"),lwr=o(" (mBART model)"),iwr=l(),cM=a("li"),S2e=a("strong"),dwr=o("roberta"),cwr=o(" \u2014 "),CW=a("a"),fwr=o("FlaxRobertaForMaskedLM"),mwr=o(" (RoBERTa model)"),gwr=l(),fM=a("li"),R2e=a("strong"),hwr=o("roformer"),pwr=o(" \u2014 "),wW=a("a"),_wr=o("FlaxRoFormerForMaskedLM"),uwr=o(" (RoFormer model)"),bwr=l(),mM=a("li"),B2e=a("strong"),Fwr=o("xlm-roberta"),vwr=o(" \u2014 "),AW=a("a"),Twr=o("FlaxXLMRobertaForMaskedLM"),Mwr=o(" (XLM-RoBERTa model)"),Ewr=l(),P2e=a("p"),Cwr=o("Examples:"),wwr=l(),f(sL.$$.fragment),MBe=l(),ff=a("h2"),gM=a("a"),$2e=a("span"),f(lL.$$.fragment),Awr=l(),I2e=a("span"),ywr=o("FlaxAutoModelForSeq2SeqLM"),EBe=l(),Ir=a("div"),f(iL.$$.fragment),Lwr=l(),mf=a("p"),xwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=a("a"),kwr=o("from_pretrained()"),Swr=o(" class method or the "),LW=a("a"),Rwr=o("from_config()"),Bwr=o(` class
method.`),Pwr=l(),dL=a("p"),$wr=o("This class cannot be instantiated directly using "),q2e=a("code"),Iwr=o("__init__()"),qwr=o(" (throws an error)."),Nwr=l(),kt=a("div"),f(cL.$$.fragment),jwr=l(),N2e=a("p"),Dwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gwr=l(),gf=a("p"),Owr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),Vwr=o("not"),Xwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),zwr=o("from_pretrained()"),Qwr=o(" to load the model weights."),Wwr=l(),D2e=a("p"),Hwr=o("Examples:"),Uwr=l(),f(fL.$$.fragment),Jwr=l(),So=a("div"),f(mL.$$.fragment),Ywr=l(),G2e=a("p"),Kwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zwr=l(),Bn=a("p"),eAr=o("The model class to instantiate is selected based on the "),O2e=a("code"),oAr=o("model_type"),rAr=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),tAr=o("pretrained_model_name_or_path"),aAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),nAr=o("pretrained_model_name_or_path"),sAr=o(":"),lAr=l(),Ee=a("ul"),hM=a("li"),z2e=a("strong"),iAr=o("bart"),dAr=o(" \u2014 "),kW=a("a"),cAr=o("FlaxBartForConditionalGeneration"),fAr=o(" (BART model)"),mAr=l(),pM=a("li"),Q2e=a("strong"),gAr=o("blenderbot"),hAr=o(" \u2014 "),SW=a("a"),pAr=o("FlaxBlenderbotForConditionalGeneration"),_Ar=o(" (Blenderbot model)"),uAr=l(),_M=a("li"),W2e=a("strong"),bAr=o("blenderbot-small"),FAr=o(" \u2014 "),RW=a("a"),vAr=o("FlaxBlenderbotSmallForConditionalGeneration"),TAr=o(" (BlenderbotSmall model)"),MAr=l(),uM=a("li"),H2e=a("strong"),EAr=o("encoder-decoder"),CAr=o(" \u2014 "),BW=a("a"),wAr=o("FlaxEncoderDecoderModel"),AAr=o(" (Encoder decoder model)"),yAr=l(),bM=a("li"),U2e=a("strong"),LAr=o("marian"),xAr=o(" \u2014 "),PW=a("a"),kAr=o("FlaxMarianMTModel"),SAr=o(" (Marian model)"),RAr=l(),FM=a("li"),J2e=a("strong"),BAr=o("mbart"),PAr=o(" \u2014 "),$W=a("a"),$Ar=o("FlaxMBartForConditionalGeneration"),IAr=o(" (mBART model)"),qAr=l(),vM=a("li"),Y2e=a("strong"),NAr=o("mt5"),jAr=o(" \u2014 "),IW=a("a"),DAr=o("FlaxMT5ForConditionalGeneration"),GAr=o(" (mT5 model)"),OAr=l(),TM=a("li"),K2e=a("strong"),VAr=o("pegasus"),XAr=o(" \u2014 "),qW=a("a"),zAr=o("FlaxPegasusForConditionalGeneration"),QAr=o(" (Pegasus model)"),WAr=l(),MM=a("li"),Z2e=a("strong"),HAr=o("t5"),UAr=o(" \u2014 "),NW=a("a"),JAr=o("FlaxT5ForConditionalGeneration"),YAr=o(" (T5 model)"),KAr=l(),eFe=a("p"),ZAr=o("Examples:"),e0r=l(),f(gL.$$.fragment),CBe=l(),hf=a("h2"),EM=a("a"),oFe=a("span"),f(hL.$$.fragment),o0r=l(),rFe=a("span"),r0r=o("FlaxAutoModelForSequenceClassification"),wBe=l(),qr=a("div"),f(pL.$$.fragment),t0r=l(),pf=a("p"),a0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=a("a"),n0r=o("from_pretrained()"),s0r=o(" class method or the "),DW=a("a"),l0r=o("from_config()"),i0r=o(` class
method.`),d0r=l(),_L=a("p"),c0r=o("This class cannot be instantiated directly using "),tFe=a("code"),f0r=o("__init__()"),m0r=o(" (throws an error)."),g0r=l(),St=a("div"),f(uL.$$.fragment),h0r=l(),aFe=a("p"),p0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_0r=l(),_f=a("p"),u0r=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),b0r=o("not"),F0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),v0r=o("from_pretrained()"),T0r=o(" to load the model weights."),M0r=l(),sFe=a("p"),E0r=o("Examples:"),C0r=l(),f(bL.$$.fragment),w0r=l(),Ro=a("div"),f(FL.$$.fragment),A0r=l(),lFe=a("p"),y0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L0r=l(),Pn=a("p"),x0r=o("The model class to instantiate is selected based on the "),iFe=a("code"),k0r=o("model_type"),S0r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),R0r=o("pretrained_model_name_or_path"),B0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),P0r=o("pretrained_model_name_or_path"),$0r=o(":"),I0r=l(),Fe=a("ul"),CM=a("li"),fFe=a("strong"),q0r=o("albert"),N0r=o(" \u2014 "),OW=a("a"),j0r=o("FlaxAlbertForSequenceClassification"),D0r=o(" (ALBERT model)"),G0r=l(),wM=a("li"),mFe=a("strong"),O0r=o("bart"),V0r=o(" \u2014 "),VW=a("a"),X0r=o("FlaxBartForSequenceClassification"),z0r=o(" (BART model)"),Q0r=l(),AM=a("li"),gFe=a("strong"),W0r=o("bert"),H0r=o(" \u2014 "),XW=a("a"),U0r=o("FlaxBertForSequenceClassification"),J0r=o(" (BERT model)"),Y0r=l(),yM=a("li"),hFe=a("strong"),K0r=o("big_bird"),Z0r=o(" \u2014 "),zW=a("a"),eyr=o("FlaxBigBirdForSequenceClassification"),oyr=o(" (BigBird model)"),ryr=l(),LM=a("li"),pFe=a("strong"),tyr=o("distilbert"),ayr=o(" \u2014 "),QW=a("a"),nyr=o("FlaxDistilBertForSequenceClassification"),syr=o(" (DistilBERT model)"),lyr=l(),xM=a("li"),_Fe=a("strong"),iyr=o("electra"),dyr=o(" \u2014 "),WW=a("a"),cyr=o("FlaxElectraForSequenceClassification"),fyr=o(" (ELECTRA model)"),myr=l(),kM=a("li"),uFe=a("strong"),gyr=o("mbart"),hyr=o(" \u2014 "),HW=a("a"),pyr=o("FlaxMBartForSequenceClassification"),_yr=o(" (mBART model)"),uyr=l(),SM=a("li"),bFe=a("strong"),byr=o("roberta"),Fyr=o(" \u2014 "),UW=a("a"),vyr=o("FlaxRobertaForSequenceClassification"),Tyr=o(" (RoBERTa model)"),Myr=l(),RM=a("li"),FFe=a("strong"),Eyr=o("roformer"),Cyr=o(" \u2014 "),JW=a("a"),wyr=o("FlaxRoFormerForSequenceClassification"),Ayr=o(" (RoFormer model)"),yyr=l(),BM=a("li"),vFe=a("strong"),Lyr=o("xlm-roberta"),xyr=o(" \u2014 "),YW=a("a"),kyr=o("FlaxXLMRobertaForSequenceClassification"),Syr=o(" (XLM-RoBERTa model)"),Ryr=l(),TFe=a("p"),Byr=o("Examples:"),Pyr=l(),f(vL.$$.fragment),ABe=l(),uf=a("h2"),PM=a("a"),MFe=a("span"),f(TL.$$.fragment),$yr=l(),EFe=a("span"),Iyr=o("FlaxAutoModelForQuestionAnswering"),yBe=l(),Nr=a("div"),f(ML.$$.fragment),qyr=l(),bf=a("p"),Nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=a("a"),jyr=o("from_pretrained()"),Dyr=o(" class method or the "),ZW=a("a"),Gyr=o("from_config()"),Oyr=o(` class
method.`),Vyr=l(),EL=a("p"),Xyr=o("This class cannot be instantiated directly using "),CFe=a("code"),zyr=o("__init__()"),Qyr=o(" (throws an error)."),Wyr=l(),Rt=a("div"),f(CL.$$.fragment),Hyr=l(),wFe=a("p"),Uyr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jyr=l(),Ff=a("p"),Yyr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),Kyr=o("not"),Zyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),eLr=o("from_pretrained()"),oLr=o(" to load the model weights."),rLr=l(),yFe=a("p"),tLr=o("Examples:"),aLr=l(),f(wL.$$.fragment),nLr=l(),Bo=a("div"),f(AL.$$.fragment),sLr=l(),LFe=a("p"),lLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iLr=l(),$n=a("p"),dLr=o("The model class to instantiate is selected based on the "),xFe=a("code"),cLr=o("model_type"),fLr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),mLr=o("pretrained_model_name_or_path"),gLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),hLr=o("pretrained_model_name_or_path"),pLr=o(":"),_Lr=l(),ve=a("ul"),$M=a("li"),RFe=a("strong"),uLr=o("albert"),bLr=o(" \u2014 "),oH=a("a"),FLr=o("FlaxAlbertForQuestionAnswering"),vLr=o(" (ALBERT model)"),TLr=l(),IM=a("li"),BFe=a("strong"),MLr=o("bart"),ELr=o(" \u2014 "),rH=a("a"),CLr=o("FlaxBartForQuestionAnswering"),wLr=o(" (BART model)"),ALr=l(),qM=a("li"),PFe=a("strong"),yLr=o("bert"),LLr=o(" \u2014 "),tH=a("a"),xLr=o("FlaxBertForQuestionAnswering"),kLr=o(" (BERT model)"),SLr=l(),NM=a("li"),$Fe=a("strong"),RLr=o("big_bird"),BLr=o(" \u2014 "),aH=a("a"),PLr=o("FlaxBigBirdForQuestionAnswering"),$Lr=o(" (BigBird model)"),ILr=l(),jM=a("li"),IFe=a("strong"),qLr=o("distilbert"),NLr=o(" \u2014 "),nH=a("a"),jLr=o("FlaxDistilBertForQuestionAnswering"),DLr=o(" (DistilBERT model)"),GLr=l(),DM=a("li"),qFe=a("strong"),OLr=o("electra"),VLr=o(" \u2014 "),sH=a("a"),XLr=o("FlaxElectraForQuestionAnswering"),zLr=o(" (ELECTRA model)"),QLr=l(),GM=a("li"),NFe=a("strong"),WLr=o("mbart"),HLr=o(" \u2014 "),lH=a("a"),ULr=o("FlaxMBartForQuestionAnswering"),JLr=o(" (mBART model)"),YLr=l(),OM=a("li"),jFe=a("strong"),KLr=o("roberta"),ZLr=o(" \u2014 "),iH=a("a"),e8r=o("FlaxRobertaForQuestionAnswering"),o8r=o(" (RoBERTa model)"),r8r=l(),VM=a("li"),DFe=a("strong"),t8r=o("roformer"),a8r=o(" \u2014 "),dH=a("a"),n8r=o("FlaxRoFormerForQuestionAnswering"),s8r=o(" (RoFormer model)"),l8r=l(),XM=a("li"),GFe=a("strong"),i8r=o("xlm-roberta"),d8r=o(" \u2014 "),cH=a("a"),c8r=o("FlaxXLMRobertaForQuestionAnswering"),f8r=o(" (XLM-RoBERTa model)"),m8r=l(),OFe=a("p"),g8r=o("Examples:"),h8r=l(),f(yL.$$.fragment),LBe=l(),vf=a("h2"),zM=a("a"),VFe=a("span"),f(LL.$$.fragment),p8r=l(),XFe=a("span"),_8r=o("FlaxAutoModelForTokenClassification"),xBe=l(),jr=a("div"),f(xL.$$.fragment),u8r=l(),Tf=a("p"),b8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=a("a"),F8r=o("from_pretrained()"),v8r=o(" class method or the "),mH=a("a"),T8r=o("from_config()"),M8r=o(` class
method.`),E8r=l(),kL=a("p"),C8r=o("This class cannot be instantiated directly using "),zFe=a("code"),w8r=o("__init__()"),A8r=o(" (throws an error)."),y8r=l(),Bt=a("div"),f(SL.$$.fragment),L8r=l(),QFe=a("p"),x8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k8r=l(),Mf=a("p"),S8r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),R8r=o("not"),B8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),P8r=o("from_pretrained()"),$8r=o(" to load the model weights."),I8r=l(),HFe=a("p"),q8r=o("Examples:"),N8r=l(),f(RL.$$.fragment),j8r=l(),Po=a("div"),f(BL.$$.fragment),D8r=l(),UFe=a("p"),G8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O8r=l(),In=a("p"),V8r=o("The model class to instantiate is selected based on the "),JFe=a("code"),X8r=o("model_type"),z8r=o(` property of the config object (either
passed as an argument or loaded from `),YFe=a("code"),Q8r=o("pretrained_model_name_or_path"),W8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=a("code"),H8r=o("pretrained_model_name_or_path"),U8r=o(":"),J8r=l(),Be=a("ul"),QM=a("li"),ZFe=a("strong"),Y8r=o("albert"),K8r=o(" \u2014 "),hH=a("a"),Z8r=o("FlaxAlbertForTokenClassification"),e9r=o(" (ALBERT model)"),o9r=l(),WM=a("li"),eve=a("strong"),r9r=o("bert"),t9r=o(" \u2014 "),pH=a("a"),a9r=o("FlaxBertForTokenClassification"),n9r=o(" (BERT model)"),s9r=l(),HM=a("li"),ove=a("strong"),l9r=o("big_bird"),i9r=o(" \u2014 "),_H=a("a"),d9r=o("FlaxBigBirdForTokenClassification"),c9r=o(" (BigBird model)"),f9r=l(),UM=a("li"),rve=a("strong"),m9r=o("distilbert"),g9r=o(" \u2014 "),uH=a("a"),h9r=o("FlaxDistilBertForTokenClassification"),p9r=o(" (DistilBERT model)"),_9r=l(),JM=a("li"),tve=a("strong"),u9r=o("electra"),b9r=o(" \u2014 "),bH=a("a"),F9r=o("FlaxElectraForTokenClassification"),v9r=o(" (ELECTRA model)"),T9r=l(),YM=a("li"),ave=a("strong"),M9r=o("roberta"),E9r=o(" \u2014 "),FH=a("a"),C9r=o("FlaxRobertaForTokenClassification"),w9r=o(" (RoBERTa model)"),A9r=l(),KM=a("li"),nve=a("strong"),y9r=o("roformer"),L9r=o(" \u2014 "),vH=a("a"),x9r=o("FlaxRoFormerForTokenClassification"),k9r=o(" (RoFormer model)"),S9r=l(),ZM=a("li"),sve=a("strong"),R9r=o("xlm-roberta"),B9r=o(" \u2014 "),TH=a("a"),P9r=o("FlaxXLMRobertaForTokenClassification"),$9r=o(" (XLM-RoBERTa model)"),I9r=l(),lve=a("p"),q9r=o("Examples:"),N9r=l(),f(PL.$$.fragment),kBe=l(),Ef=a("h2"),e4=a("a"),ive=a("span"),f($L.$$.fragment),j9r=l(),dve=a("span"),D9r=o("FlaxAutoModelForMultipleChoice"),SBe=l(),Dr=a("div"),f(IL.$$.fragment),G9r=l(),Cf=a("p"),O9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=a("a"),V9r=o("from_pretrained()"),X9r=o(" class method or the "),EH=a("a"),z9r=o("from_config()"),Q9r=o(` class
method.`),W9r=l(),qL=a("p"),H9r=o("This class cannot be instantiated directly using "),cve=a("code"),U9r=o("__init__()"),J9r=o(" (throws an error)."),Y9r=l(),Pt=a("div"),f(NL.$$.fragment),K9r=l(),fve=a("p"),Z9r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),exr=l(),wf=a("p"),oxr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),rxr=o("not"),txr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),axr=o("from_pretrained()"),nxr=o(" to load the model weights."),sxr=l(),gve=a("p"),lxr=o("Examples:"),ixr=l(),f(jL.$$.fragment),dxr=l(),$o=a("div"),f(DL.$$.fragment),cxr=l(),hve=a("p"),fxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mxr=l(),qn=a("p"),gxr=o("The model class to instantiate is selected based on the "),pve=a("code"),hxr=o("model_type"),pxr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),_xr=o("pretrained_model_name_or_path"),uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),bxr=o("pretrained_model_name_or_path"),Fxr=o(":"),vxr=l(),Pe=a("ul"),o4=a("li"),bve=a("strong"),Txr=o("albert"),Mxr=o(" \u2014 "),wH=a("a"),Exr=o("FlaxAlbertForMultipleChoice"),Cxr=o(" (ALBERT model)"),wxr=l(),r4=a("li"),Fve=a("strong"),Axr=o("bert"),yxr=o(" \u2014 "),AH=a("a"),Lxr=o("FlaxBertForMultipleChoice"),xxr=o(" (BERT model)"),kxr=l(),t4=a("li"),vve=a("strong"),Sxr=o("big_bird"),Rxr=o(" \u2014 "),yH=a("a"),Bxr=o("FlaxBigBirdForMultipleChoice"),Pxr=o(" (BigBird model)"),$xr=l(),a4=a("li"),Tve=a("strong"),Ixr=o("distilbert"),qxr=o(" \u2014 "),LH=a("a"),Nxr=o("FlaxDistilBertForMultipleChoice"),jxr=o(" (DistilBERT model)"),Dxr=l(),n4=a("li"),Mve=a("strong"),Gxr=o("electra"),Oxr=o(" \u2014 "),xH=a("a"),Vxr=o("FlaxElectraForMultipleChoice"),Xxr=o(" (ELECTRA model)"),zxr=l(),s4=a("li"),Eve=a("strong"),Qxr=o("roberta"),Wxr=o(" \u2014 "),kH=a("a"),Hxr=o("FlaxRobertaForMultipleChoice"),Uxr=o(" (RoBERTa model)"),Jxr=l(),l4=a("li"),Cve=a("strong"),Yxr=o("roformer"),Kxr=o(" \u2014 "),SH=a("a"),Zxr=o("FlaxRoFormerForMultipleChoice"),ekr=o(" (RoFormer model)"),okr=l(),i4=a("li"),wve=a("strong"),rkr=o("xlm-roberta"),tkr=o(" \u2014 "),RH=a("a"),akr=o("FlaxXLMRobertaForMultipleChoice"),nkr=o(" (XLM-RoBERTa model)"),skr=l(),Ave=a("p"),lkr=o("Examples:"),ikr=l(),f(GL.$$.fragment),RBe=l(),Af=a("h2"),d4=a("a"),yve=a("span"),f(OL.$$.fragment),dkr=l(),Lve=a("span"),ckr=o("FlaxAutoModelForNextSentencePrediction"),BBe=l(),Gr=a("div"),f(VL.$$.fragment),fkr=l(),yf=a("p"),mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BH=a("a"),gkr=o("from_pretrained()"),hkr=o(" class method or the "),PH=a("a"),pkr=o("from_config()"),_kr=o(` class
method.`),ukr=l(),XL=a("p"),bkr=o("This class cannot be instantiated directly using "),xve=a("code"),Fkr=o("__init__()"),vkr=o(" (throws an error)."),Tkr=l(),$t=a("div"),f(zL.$$.fragment),Mkr=l(),kve=a("p"),Ekr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ckr=l(),Lf=a("p"),wkr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Akr=o("not"),ykr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=a("a"),Lkr=o("from_pretrained()"),xkr=o(" to load the model weights."),kkr=l(),Rve=a("p"),Skr=o("Examples:"),Rkr=l(),f(QL.$$.fragment),Bkr=l(),Io=a("div"),f(WL.$$.fragment),Pkr=l(),Bve=a("p"),$kr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Ikr=l(),Nn=a("p"),qkr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Nkr=o("model_type"),jkr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Dkr=o("pretrained_model_name_or_path"),Gkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Okr=o("pretrained_model_name_or_path"),Vkr=o(":"),Xkr=l(),qve=a("ul"),c4=a("li"),Nve=a("strong"),zkr=o("bert"),Qkr=o(" \u2014 "),IH=a("a"),Wkr=o("FlaxBertForNextSentencePrediction"),Hkr=o(" (BERT model)"),Ukr=l(),jve=a("p"),Jkr=o("Examples:"),Ykr=l(),f(HL.$$.fragment),PBe=l(),xf=a("h2"),f4=a("a"),Dve=a("span"),f(UL.$$.fragment),Kkr=l(),Gve=a("span"),Zkr=o("FlaxAutoModelForImageClassification"),$Be=l(),Or=a("div"),f(JL.$$.fragment),eSr=l(),kf=a("p"),oSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=a("a"),rSr=o("from_pretrained()"),tSr=o(" class method or the "),NH=a("a"),aSr=o("from_config()"),nSr=o(` class
method.`),sSr=l(),YL=a("p"),lSr=o("This class cannot be instantiated directly using "),Ove=a("code"),iSr=o("__init__()"),dSr=o(" (throws an error)."),cSr=l(),It=a("div"),f(KL.$$.fragment),fSr=l(),Vve=a("p"),mSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gSr=l(),Sf=a("p"),hSr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),pSr=o("not"),_Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),uSr=o("from_pretrained()"),bSr=o(" to load the model weights."),FSr=l(),zve=a("p"),vSr=o("Examples:"),TSr=l(),f(ZL.$$.fragment),MSr=l(),qo=a("div"),f(e8.$$.fragment),ESr=l(),Qve=a("p"),CSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wSr=l(),jn=a("p"),ASr=o("The model class to instantiate is selected based on the "),Wve=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),Hve=a("code"),xSr=o("pretrained_model_name_or_path"),kSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(":"),BSr=l(),o8=a("ul"),m4=a("li"),Jve=a("strong"),PSr=o("beit"),$Sr=o(" \u2014 "),DH=a("a"),ISr=o("FlaxBeitForImageClassification"),qSr=o(" (BEiT model)"),NSr=l(),g4=a("li"),Yve=a("strong"),jSr=o("vit"),DSr=o(" \u2014 "),GH=a("a"),GSr=o("FlaxViTForImageClassification"),OSr=o(" (ViT model)"),VSr=l(),Kve=a("p"),XSr=o("Examples:"),zSr=l(),f(r8.$$.fragment),IBe=l(),Rf=a("h2"),h4=a("a"),Zve=a("span"),f(t8.$$.fragment),QSr=l(),e6e=a("span"),WSr=o("FlaxAutoModelForVision2Seq"),qBe=l(),Vr=a("div"),f(a8.$$.fragment),HSr=l(),Bf=a("p"),USr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=a("a"),JSr=o("from_pretrained()"),YSr=o(" class method or the "),VH=a("a"),KSr=o("from_config()"),ZSr=o(` class
method.`),eRr=l(),n8=a("p"),oRr=o("This class cannot be instantiated directly using "),o6e=a("code"),rRr=o("__init__()"),tRr=o(" (throws an error)."),aRr=l(),qt=a("div"),f(s8.$$.fragment),nRr=l(),r6e=a("p"),sRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lRr=l(),Pf=a("p"),iRr=o(`Note:
Loading a model from its configuration file does `),t6e=a("strong"),dRr=o("not"),cRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),fRr=o("from_pretrained()"),mRr=o(" to load the model weights."),gRr=l(),a6e=a("p"),hRr=o("Examples:"),pRr=l(),f(l8.$$.fragment),_Rr=l(),No=a("div"),f(i8.$$.fragment),uRr=l(),n6e=a("p"),bRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FRr=l(),Dn=a("p"),vRr=o("The model class to instantiate is selected based on the "),s6e=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),l6e=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),d6e=a("ul"),p4=a("li"),c6e=a("strong"),LRr=o("vision-encoder-decoder"),xRr=o(" \u2014 "),zH=a("a"),kRr=o("FlaxVisionEncoderDecoderModel"),SRr=o(" (Vision Encoder decoder model)"),RRr=l(),f6e=a("p"),BRr=o("Examples:"),PRr=l(),f(d8.$$.fragment),this.h()},l(c){const u=ZMt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var c8=s(de);Ce=n(c8,"A",{id:!0,class:!0,href:!0});var m6e=s(Ce);lo=n(m6e,"SPAN",{});var g6e=s(lo);m(me.$$.fragment,g6e),g6e.forEach(t),m6e.forEach(t),Me=i(c8),Xo=n(c8,"SPAN",{});var IRr=s(Xo);Ii=r(IRr,"Auto Classes"),IRr.forEach(t),c8.forEach(t),qf=i(c),fa=n(c,"P",{});var jBe=s(fa);qi=r(jBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(jBe,"CODE",{});var qRr=s(Ni);pE=r(qRr,"from_pretrained()"),qRr.forEach(t),Nf=r(jBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),jBe.forEach(t),xe=i(c),co=n(c,"P",{});var _4=s(co);ji=r(_4,"Instantiating one of "),Gn=n(_4,"A",{href:!0});var NRr=s(Gn);_E=r(NRr,"AutoConfig"),NRr.forEach(t),On=r(_4,", "),Vn=n(_4,"A",{href:!0});var jRr=s(Vn);uE=r(jRr,"AutoModel"),jRr.forEach(t),Di=r(_4,`, and
`),Xn=n(_4,"A",{href:!0});var DRr=s(Xn);bE=r(DRr,"AutoTokenizer"),DRr.forEach(t),Gi=r(_4," will directly create a class of the relevant architecture. For instance"),_4.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var DBe=s(_e);l9=r(DBe,"will create a model that is an instance of "),Oi=n(DBe,"A",{href:!0});var GRr=s(Oi);i9=r(GRr,"BertModel"),GRr.forEach(t),d9=r(DBe,"."),DBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var GBe=s(Ga);c9=r(GBe,"There is one class of "),Df=n(GBe,"CODE",{});var ORr=s(Df);f9=r(ORr,"AutoModel"),ORr.forEach(t),J$e=r(GBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GBe.forEach(t),qSe=i(c),Vi=n(c,"H2",{class:!0});var OBe=s(Vi);Gf=n(OBe,"A",{id:!0,class:!0,href:!0});var VRr=s(Gf);jJ=n(VRr,"SPAN",{});var XRr=s(jJ);m(FE.$$.fragment,XRr),XRr.forEach(t),VRr.forEach(t),Y$e=i(OBe),DJ=n(OBe,"SPAN",{});var zRr=s(DJ);K$e=r(zRr,"Extending the Auto Classes"),zRr.forEach(t),OBe.forEach(t),NSe=i(c),zn=n(c,"P",{});var QH=s(zn);Z$e=r(QH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GJ=n(QH,"CODE",{});var QRr=s(GJ);eIe=r(QRr,"NewModel"),QRr.forEach(t),oIe=r(QH,", make sure you have a "),OJ=n(QH,"CODE",{});var WRr=s(OJ);rIe=r(WRr,"NewModelConfig"),WRr.forEach(t),tIe=r(QH,` then you can add those to the auto
classes like this:`),QH.forEach(t),jSe=i(c),m(vE.$$.fragment,c),DSe=i(c),m9=n(c,"P",{});var HRr=s(m9);aIe=r(HRr,"You will then be able to use the auto classes like you would usually do!"),HRr.forEach(t),GSe=i(c),m(Of.$$.fragment,c),OSe=i(c),Xi=n(c,"H2",{class:!0});var VBe=s(Xi);Vf=n(VBe,"A",{id:!0,class:!0,href:!0});var URr=s(Vf);VJ=n(URr,"SPAN",{});var JRr=s(VJ);m(TE.$$.fragment,JRr),JRr.forEach(t),URr.forEach(t),nIe=i(VBe),XJ=n(VBe,"SPAN",{});var YRr=s(XJ);sIe=r(YRr,"AutoConfig"),YRr.forEach(t),VBe.forEach(t),VSe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(ME.$$.fragment,Os),lIe=i(Os),EE=n(Os,"P",{});var XBe=s(EE);iIe=r(XBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),g9=n(XBe,"A",{href:!0});var KRr=s(g9);dIe=r(KRr,"from_pretrained()"),KRr.forEach(t),cIe=r(XBe," class method."),XBe.forEach(t),fIe=i(Os),CE=n(Os,"P",{});var zBe=s(CE);mIe=r(zBe,"This class cannot be instantiated directly using "),zJ=n(zBe,"CODE",{});var ZRr=s(zJ);gIe=r(ZRr,"__init__()"),ZRr.forEach(t),hIe=r(zBe," (throws an error)."),zBe.forEach(t),pIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(wE.$$.fragment,ga),_Ie=i(ga),QJ=n(ga,"P",{});var eBr=s(QJ);uIe=r(eBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),eBr.forEach(t),bIe=i(ga),zi=n(ga,"P",{});var WH=s(zi);FIe=r(WH,"The configuration class to instantiate is selected based on the "),WJ=n(WH,"CODE",{});var oBr=s(WJ);vIe=r(oBr,"model_type"),oBr.forEach(t),TIe=r(WH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HJ=n(WH,"CODE",{});var rBr=s(HJ);MIe=r(rBr,"pretrained_model_name_or_path"),rBr.forEach(t),EIe=r(WH,":"),WH.forEach(t),CIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var h6e=s(Xf);UJ=n(h6e,"STRONG",{});var tBr=s(UJ);wIe=r(tBr,"albert"),tBr.forEach(t),AIe=r(h6e," \u2014 "),h9=n(h6e,"A",{href:!0});var aBr=s(h9);yIe=r(aBr,"AlbertConfig"),aBr.forEach(t),LIe=r(h6e," (ALBERT model)"),h6e.forEach(t),xIe=i(v),zf=n(v,"LI",{});var p6e=s(zf);JJ=n(p6e,"STRONG",{});var nBr=s(JJ);kIe=r(nBr,"bart"),nBr.forEach(t),SIe=r(p6e," \u2014 "),p9=n(p6e,"A",{href:!0});var sBr=s(p9);RIe=r(sBr,"BartConfig"),sBr.forEach(t),BIe=r(p6e," (BART model)"),p6e.forEach(t),PIe=i(v),Qf=n(v,"LI",{});var _6e=s(Qf);YJ=n(_6e,"STRONG",{});var lBr=s(YJ);$Ie=r(lBr,"beit"),lBr.forEach(t),IIe=r(_6e," \u2014 "),_9=n(_6e,"A",{href:!0});var iBr=s(_9);qIe=r(iBr,"BeitConfig"),iBr.forEach(t),NIe=r(_6e," (BEiT model)"),_6e.forEach(t),jIe=i(v),Wf=n(v,"LI",{});var u6e=s(Wf);KJ=n(u6e,"STRONG",{});var dBr=s(KJ);DIe=r(dBr,"bert"),dBr.forEach(t),GIe=r(u6e," \u2014 "),u9=n(u6e,"A",{href:!0});var cBr=s(u9);OIe=r(cBr,"BertConfig"),cBr.forEach(t),VIe=r(u6e," (BERT model)"),u6e.forEach(t),XIe=i(v),Hf=n(v,"LI",{});var b6e=s(Hf);ZJ=n(b6e,"STRONG",{});var fBr=s(ZJ);zIe=r(fBr,"bert-generation"),fBr.forEach(t),QIe=r(b6e," \u2014 "),b9=n(b6e,"A",{href:!0});var mBr=s(b9);WIe=r(mBr,"BertGenerationConfig"),mBr.forEach(t),HIe=r(b6e," (Bert Generation model)"),b6e.forEach(t),UIe=i(v),Uf=n(v,"LI",{});var F6e=s(Uf);eY=n(F6e,"STRONG",{});var gBr=s(eY);JIe=r(gBr,"big_bird"),gBr.forEach(t),YIe=r(F6e," \u2014 "),F9=n(F6e,"A",{href:!0});var hBr=s(F9);KIe=r(hBr,"BigBirdConfig"),hBr.forEach(t),ZIe=r(F6e," (BigBird model)"),F6e.forEach(t),eqe=i(v),Jf=n(v,"LI",{});var v6e=s(Jf);oY=n(v6e,"STRONG",{});var pBr=s(oY);oqe=r(pBr,"bigbird_pegasus"),pBr.forEach(t),rqe=r(v6e," \u2014 "),v9=n(v6e,"A",{href:!0});var _Br=s(v9);tqe=r(_Br,"BigBirdPegasusConfig"),_Br.forEach(t),aqe=r(v6e," (BigBirdPegasus model)"),v6e.forEach(t),nqe=i(v),Yf=n(v,"LI",{});var T6e=s(Yf);rY=n(T6e,"STRONG",{});var uBr=s(rY);sqe=r(uBr,"blenderbot"),uBr.forEach(t),lqe=r(T6e," \u2014 "),T9=n(T6e,"A",{href:!0});var bBr=s(T9);iqe=r(bBr,"BlenderbotConfig"),bBr.forEach(t),dqe=r(T6e," (Blenderbot model)"),T6e.forEach(t),cqe=i(v),Kf=n(v,"LI",{});var M6e=s(Kf);tY=n(M6e,"STRONG",{});var FBr=s(tY);fqe=r(FBr,"blenderbot-small"),FBr.forEach(t),mqe=r(M6e," \u2014 "),M9=n(M6e,"A",{href:!0});var vBr=s(M9);gqe=r(vBr,"BlenderbotSmallConfig"),vBr.forEach(t),hqe=r(M6e," (BlenderbotSmall model)"),M6e.forEach(t),pqe=i(v),Zf=n(v,"LI",{});var E6e=s(Zf);aY=n(E6e,"STRONG",{});var TBr=s(aY);_qe=r(TBr,"camembert"),TBr.forEach(t),uqe=r(E6e," \u2014 "),E9=n(E6e,"A",{href:!0});var MBr=s(E9);bqe=r(MBr,"CamembertConfig"),MBr.forEach(t),Fqe=r(E6e," (CamemBERT model)"),E6e.forEach(t),vqe=i(v),em=n(v,"LI",{});var C6e=s(em);nY=n(C6e,"STRONG",{});var EBr=s(nY);Tqe=r(EBr,"canine"),EBr.forEach(t),Mqe=r(C6e," \u2014 "),C9=n(C6e,"A",{href:!0});var CBr=s(C9);Eqe=r(CBr,"CanineConfig"),CBr.forEach(t),Cqe=r(C6e," (Canine model)"),C6e.forEach(t),wqe=i(v),om=n(v,"LI",{});var w6e=s(om);sY=n(w6e,"STRONG",{});var wBr=s(sY);Aqe=r(wBr,"clip"),wBr.forEach(t),yqe=r(w6e," \u2014 "),w9=n(w6e,"A",{href:!0});var ABr=s(w9);Lqe=r(ABr,"CLIPConfig"),ABr.forEach(t),xqe=r(w6e," (CLIP model)"),w6e.forEach(t),kqe=i(v),rm=n(v,"LI",{});var A6e=s(rm);lY=n(A6e,"STRONG",{});var yBr=s(lY);Sqe=r(yBr,"convbert"),yBr.forEach(t),Rqe=r(A6e," \u2014 "),A9=n(A6e,"A",{href:!0});var LBr=s(A9);Bqe=r(LBr,"ConvBertConfig"),LBr.forEach(t),Pqe=r(A6e," (ConvBERT model)"),A6e.forEach(t),$qe=i(v),tm=n(v,"LI",{});var y6e=s(tm);iY=n(y6e,"STRONG",{});var xBr=s(iY);Iqe=r(xBr,"convnext"),xBr.forEach(t),qqe=r(y6e," \u2014 "),y9=n(y6e,"A",{href:!0});var kBr=s(y9);Nqe=r(kBr,"ConvNextConfig"),kBr.forEach(t),jqe=r(y6e," (ConvNext model)"),y6e.forEach(t),Dqe=i(v),am=n(v,"LI",{});var L6e=s(am);dY=n(L6e,"STRONG",{});var SBr=s(dY);Gqe=r(SBr,"ctrl"),SBr.forEach(t),Oqe=r(L6e," \u2014 "),L9=n(L6e,"A",{href:!0});var RBr=s(L9);Vqe=r(RBr,"CTRLConfig"),RBr.forEach(t),Xqe=r(L6e," (CTRL model)"),L6e.forEach(t),zqe=i(v),nm=n(v,"LI",{});var x6e=s(nm);cY=n(x6e,"STRONG",{});var BBr=s(cY);Qqe=r(BBr,"data2vec-audio"),BBr.forEach(t),Wqe=r(x6e," \u2014 "),x9=n(x6e,"A",{href:!0});var PBr=s(x9);Hqe=r(PBr,"Data2VecAudioConfig"),PBr.forEach(t),Uqe=r(x6e," (Data2VecAudio model)"),x6e.forEach(t),Jqe=i(v),sm=n(v,"LI",{});var k6e=s(sm);fY=n(k6e,"STRONG",{});var $Br=s(fY);Yqe=r($Br,"data2vec-text"),$Br.forEach(t),Kqe=r(k6e," \u2014 "),k9=n(k6e,"A",{href:!0});var IBr=s(k9);Zqe=r(IBr,"Data2VecTextConfig"),IBr.forEach(t),eNe=r(k6e," (Data2VecText model)"),k6e.forEach(t),oNe=i(v),lm=n(v,"LI",{});var S6e=s(lm);mY=n(S6e,"STRONG",{});var qBr=s(mY);rNe=r(qBr,"deberta"),qBr.forEach(t),tNe=r(S6e," \u2014 "),S9=n(S6e,"A",{href:!0});var NBr=s(S9);aNe=r(NBr,"DebertaConfig"),NBr.forEach(t),nNe=r(S6e," (DeBERTa model)"),S6e.forEach(t),sNe=i(v),im=n(v,"LI",{});var R6e=s(im);gY=n(R6e,"STRONG",{});var jBr=s(gY);lNe=r(jBr,"deberta-v2"),jBr.forEach(t),iNe=r(R6e," \u2014 "),R9=n(R6e,"A",{href:!0});var DBr=s(R9);dNe=r(DBr,"DebertaV2Config"),DBr.forEach(t),cNe=r(R6e," (DeBERTa-v2 model)"),R6e.forEach(t),fNe=i(v),dm=n(v,"LI",{});var B6e=s(dm);hY=n(B6e,"STRONG",{});var GBr=s(hY);mNe=r(GBr,"decision_transformer"),GBr.forEach(t),gNe=r(B6e," \u2014 "),B9=n(B6e,"A",{href:!0});var OBr=s(B9);hNe=r(OBr,"DecisionTransformerConfig"),OBr.forEach(t),pNe=r(B6e," (Decision Transformer model)"),B6e.forEach(t),_Ne=i(v),cm=n(v,"LI",{});var P6e=s(cm);pY=n(P6e,"STRONG",{});var VBr=s(pY);uNe=r(VBr,"deit"),VBr.forEach(t),bNe=r(P6e," \u2014 "),P9=n(P6e,"A",{href:!0});var XBr=s(P9);FNe=r(XBr,"DeiTConfig"),XBr.forEach(t),vNe=r(P6e," (DeiT model)"),P6e.forEach(t),TNe=i(v),fm=n(v,"LI",{});var $6e=s(fm);_Y=n($6e,"STRONG",{});var zBr=s(_Y);MNe=r(zBr,"detr"),zBr.forEach(t),ENe=r($6e," \u2014 "),$9=n($6e,"A",{href:!0});var QBr=s($9);CNe=r(QBr,"DetrConfig"),QBr.forEach(t),wNe=r($6e," (DETR model)"),$6e.forEach(t),ANe=i(v),mm=n(v,"LI",{});var I6e=s(mm);uY=n(I6e,"STRONG",{});var WBr=s(uY);yNe=r(WBr,"distilbert"),WBr.forEach(t),LNe=r(I6e," \u2014 "),I9=n(I6e,"A",{href:!0});var HBr=s(I9);xNe=r(HBr,"DistilBertConfig"),HBr.forEach(t),kNe=r(I6e," (DistilBERT model)"),I6e.forEach(t),SNe=i(v),gm=n(v,"LI",{});var q6e=s(gm);bY=n(q6e,"STRONG",{});var UBr=s(bY);RNe=r(UBr,"dpr"),UBr.forEach(t),BNe=r(q6e," \u2014 "),q9=n(q6e,"A",{href:!0});var JBr=s(q9);PNe=r(JBr,"DPRConfig"),JBr.forEach(t),$Ne=r(q6e," (DPR model)"),q6e.forEach(t),INe=i(v),hm=n(v,"LI",{});var N6e=s(hm);FY=n(N6e,"STRONG",{});var YBr=s(FY);qNe=r(YBr,"dpt"),YBr.forEach(t),NNe=r(N6e," \u2014 "),N9=n(N6e,"A",{href:!0});var KBr=s(N9);jNe=r(KBr,"DPTConfig"),KBr.forEach(t),DNe=r(N6e," (DPT model)"),N6e.forEach(t),GNe=i(v),pm=n(v,"LI",{});var j6e=s(pm);vY=n(j6e,"STRONG",{});var ZBr=s(vY);ONe=r(ZBr,"electra"),ZBr.forEach(t),VNe=r(j6e," \u2014 "),j9=n(j6e,"A",{href:!0});var ePr=s(j9);XNe=r(ePr,"ElectraConfig"),ePr.forEach(t),zNe=r(j6e," (ELECTRA model)"),j6e.forEach(t),QNe=i(v),_m=n(v,"LI",{});var D6e=s(_m);TY=n(D6e,"STRONG",{});var oPr=s(TY);WNe=r(oPr,"encoder-decoder"),oPr.forEach(t),HNe=r(D6e," \u2014 "),D9=n(D6e,"A",{href:!0});var rPr=s(D9);UNe=r(rPr,"EncoderDecoderConfig"),rPr.forEach(t),JNe=r(D6e," (Encoder decoder model)"),D6e.forEach(t),YNe=i(v),um=n(v,"LI",{});var G6e=s(um);MY=n(G6e,"STRONG",{});var tPr=s(MY);KNe=r(tPr,"flaubert"),tPr.forEach(t),ZNe=r(G6e," \u2014 "),G9=n(G6e,"A",{href:!0});var aPr=s(G9);eje=r(aPr,"FlaubertConfig"),aPr.forEach(t),oje=r(G6e," (FlauBERT model)"),G6e.forEach(t),rje=i(v),bm=n(v,"LI",{});var O6e=s(bm);EY=n(O6e,"STRONG",{});var nPr=s(EY);tje=r(nPr,"fnet"),nPr.forEach(t),aje=r(O6e," \u2014 "),O9=n(O6e,"A",{href:!0});var sPr=s(O9);nje=r(sPr,"FNetConfig"),sPr.forEach(t),sje=r(O6e," (FNet model)"),O6e.forEach(t),lje=i(v),Fm=n(v,"LI",{});var V6e=s(Fm);CY=n(V6e,"STRONG",{});var lPr=s(CY);ije=r(lPr,"fsmt"),lPr.forEach(t),dje=r(V6e," \u2014 "),V9=n(V6e,"A",{href:!0});var iPr=s(V9);cje=r(iPr,"FSMTConfig"),iPr.forEach(t),fje=r(V6e," (FairSeq Machine-Translation model)"),V6e.forEach(t),mje=i(v),vm=n(v,"LI",{});var X6e=s(vm);wY=n(X6e,"STRONG",{});var dPr=s(wY);gje=r(dPr,"funnel"),dPr.forEach(t),hje=r(X6e," \u2014 "),X9=n(X6e,"A",{href:!0});var cPr=s(X9);pje=r(cPr,"FunnelConfig"),cPr.forEach(t),_je=r(X6e," (Funnel Transformer model)"),X6e.forEach(t),uje=i(v),Tm=n(v,"LI",{});var z6e=s(Tm);AY=n(z6e,"STRONG",{});var fPr=s(AY);bje=r(fPr,"glpn"),fPr.forEach(t),Fje=r(z6e," \u2014 "),z9=n(z6e,"A",{href:!0});var mPr=s(z9);vje=r(mPr,"GLPNConfig"),mPr.forEach(t),Tje=r(z6e," (GLPN model)"),z6e.forEach(t),Mje=i(v),Mm=n(v,"LI",{});var Q6e=s(Mm);yY=n(Q6e,"STRONG",{});var gPr=s(yY);Eje=r(gPr,"gpt2"),gPr.forEach(t),Cje=r(Q6e," \u2014 "),Q9=n(Q6e,"A",{href:!0});var hPr=s(Q9);wje=r(hPr,"GPT2Config"),hPr.forEach(t),Aje=r(Q6e," (OpenAI GPT-2 model)"),Q6e.forEach(t),yje=i(v),Em=n(v,"LI",{});var W6e=s(Em);LY=n(W6e,"STRONG",{});var pPr=s(LY);Lje=r(pPr,"gpt_neo"),pPr.forEach(t),xje=r(W6e," \u2014 "),W9=n(W6e,"A",{href:!0});var _Pr=s(W9);kje=r(_Pr,"GPTNeoConfig"),_Pr.forEach(t),Sje=r(W6e," (GPT Neo model)"),W6e.forEach(t),Rje=i(v),Cm=n(v,"LI",{});var H6e=s(Cm);xY=n(H6e,"STRONG",{});var uPr=s(xY);Bje=r(uPr,"gptj"),uPr.forEach(t),Pje=r(H6e," \u2014 "),H9=n(H6e,"A",{href:!0});var bPr=s(H9);$je=r(bPr,"GPTJConfig"),bPr.forEach(t),Ije=r(H6e," (GPT-J model)"),H6e.forEach(t),qje=i(v),wm=n(v,"LI",{});var U6e=s(wm);kY=n(U6e,"STRONG",{});var FPr=s(kY);Nje=r(FPr,"hubert"),FPr.forEach(t),jje=r(U6e," \u2014 "),U9=n(U6e,"A",{href:!0});var vPr=s(U9);Dje=r(vPr,"HubertConfig"),vPr.forEach(t),Gje=r(U6e," (Hubert model)"),U6e.forEach(t),Oje=i(v),Am=n(v,"LI",{});var J6e=s(Am);SY=n(J6e,"STRONG",{});var TPr=s(SY);Vje=r(TPr,"ibert"),TPr.forEach(t),Xje=r(J6e," \u2014 "),J9=n(J6e,"A",{href:!0});var MPr=s(J9);zje=r(MPr,"IBertConfig"),MPr.forEach(t),Qje=r(J6e," (I-BERT model)"),J6e.forEach(t),Wje=i(v),ym=n(v,"LI",{});var Y6e=s(ym);RY=n(Y6e,"STRONG",{});var EPr=s(RY);Hje=r(EPr,"imagegpt"),EPr.forEach(t),Uje=r(Y6e," \u2014 "),Y9=n(Y6e,"A",{href:!0});var CPr=s(Y9);Jje=r(CPr,"ImageGPTConfig"),CPr.forEach(t),Yje=r(Y6e," (ImageGPT model)"),Y6e.forEach(t),Kje=i(v),Lm=n(v,"LI",{});var K6e=s(Lm);BY=n(K6e,"STRONG",{});var wPr=s(BY);Zje=r(wPr,"layoutlm"),wPr.forEach(t),eDe=r(K6e," \u2014 "),K9=n(K6e,"A",{href:!0});var APr=s(K9);oDe=r(APr,"LayoutLMConfig"),APr.forEach(t),rDe=r(K6e," (LayoutLM model)"),K6e.forEach(t),tDe=i(v),xm=n(v,"LI",{});var Z6e=s(xm);PY=n(Z6e,"STRONG",{});var yPr=s(PY);aDe=r(yPr,"layoutlmv2"),yPr.forEach(t),nDe=r(Z6e," \u2014 "),Z9=n(Z6e,"A",{href:!0});var LPr=s(Z9);sDe=r(LPr,"LayoutLMv2Config"),LPr.forEach(t),lDe=r(Z6e," (LayoutLMv2 model)"),Z6e.forEach(t),iDe=i(v),km=n(v,"LI",{});var eTe=s(km);$Y=n(eTe,"STRONG",{});var xPr=s($Y);dDe=r(xPr,"led"),xPr.forEach(t),cDe=r(eTe," \u2014 "),ex=n(eTe,"A",{href:!0});var kPr=s(ex);fDe=r(kPr,"LEDConfig"),kPr.forEach(t),mDe=r(eTe," (LED model)"),eTe.forEach(t),gDe=i(v),Sm=n(v,"LI",{});var oTe=s(Sm);IY=n(oTe,"STRONG",{});var SPr=s(IY);hDe=r(SPr,"longformer"),SPr.forEach(t),pDe=r(oTe," \u2014 "),ox=n(oTe,"A",{href:!0});var RPr=s(ox);_De=r(RPr,"LongformerConfig"),RPr.forEach(t),uDe=r(oTe," (Longformer model)"),oTe.forEach(t),bDe=i(v),Rm=n(v,"LI",{});var rTe=s(Rm);qY=n(rTe,"STRONG",{});var BPr=s(qY);FDe=r(BPr,"luke"),BPr.forEach(t),vDe=r(rTe," \u2014 "),rx=n(rTe,"A",{href:!0});var PPr=s(rx);TDe=r(PPr,"LukeConfig"),PPr.forEach(t),MDe=r(rTe," (LUKE model)"),rTe.forEach(t),EDe=i(v),Bm=n(v,"LI",{});var tTe=s(Bm);NY=n(tTe,"STRONG",{});var $Pr=s(NY);CDe=r($Pr,"lxmert"),$Pr.forEach(t),wDe=r(tTe," \u2014 "),tx=n(tTe,"A",{href:!0});var IPr=s(tx);ADe=r(IPr,"LxmertConfig"),IPr.forEach(t),yDe=r(tTe," (LXMERT model)"),tTe.forEach(t),LDe=i(v),Pm=n(v,"LI",{});var aTe=s(Pm);jY=n(aTe,"STRONG",{});var qPr=s(jY);xDe=r(qPr,"m2m_100"),qPr.forEach(t),kDe=r(aTe," \u2014 "),ax=n(aTe,"A",{href:!0});var NPr=s(ax);SDe=r(NPr,"M2M100Config"),NPr.forEach(t),RDe=r(aTe," (M2M100 model)"),aTe.forEach(t),BDe=i(v),$m=n(v,"LI",{});var nTe=s($m);DY=n(nTe,"STRONG",{});var jPr=s(DY);PDe=r(jPr,"marian"),jPr.forEach(t),$De=r(nTe," \u2014 "),nx=n(nTe,"A",{href:!0});var DPr=s(nx);IDe=r(DPr,"MarianConfig"),DPr.forEach(t),qDe=r(nTe," (Marian model)"),nTe.forEach(t),NDe=i(v),Im=n(v,"LI",{});var sTe=s(Im);GY=n(sTe,"STRONG",{});var GPr=s(GY);jDe=r(GPr,"maskformer"),GPr.forEach(t),DDe=r(sTe," \u2014 "),sx=n(sTe,"A",{href:!0});var OPr=s(sx);GDe=r(OPr,"MaskFormerConfig"),OPr.forEach(t),ODe=r(sTe," (MaskFormer model)"),sTe.forEach(t),VDe=i(v),qm=n(v,"LI",{});var lTe=s(qm);OY=n(lTe,"STRONG",{});var VPr=s(OY);XDe=r(VPr,"mbart"),VPr.forEach(t),zDe=r(lTe," \u2014 "),lx=n(lTe,"A",{href:!0});var XPr=s(lx);QDe=r(XPr,"MBartConfig"),XPr.forEach(t),WDe=r(lTe," (mBART model)"),lTe.forEach(t),HDe=i(v),Nm=n(v,"LI",{});var iTe=s(Nm);VY=n(iTe,"STRONG",{});var zPr=s(VY);UDe=r(zPr,"megatron-bert"),zPr.forEach(t),JDe=r(iTe," \u2014 "),ix=n(iTe,"A",{href:!0});var QPr=s(ix);YDe=r(QPr,"MegatronBertConfig"),QPr.forEach(t),KDe=r(iTe," (MegatronBert model)"),iTe.forEach(t),ZDe=i(v),jm=n(v,"LI",{});var dTe=s(jm);XY=n(dTe,"STRONG",{});var WPr=s(XY);eGe=r(WPr,"mobilebert"),WPr.forEach(t),oGe=r(dTe," \u2014 "),dx=n(dTe,"A",{href:!0});var HPr=s(dx);rGe=r(HPr,"MobileBertConfig"),HPr.forEach(t),tGe=r(dTe," (MobileBERT model)"),dTe.forEach(t),aGe=i(v),Dm=n(v,"LI",{});var cTe=s(Dm);zY=n(cTe,"STRONG",{});var UPr=s(zY);nGe=r(UPr,"mpnet"),UPr.forEach(t),sGe=r(cTe," \u2014 "),cx=n(cTe,"A",{href:!0});var JPr=s(cx);lGe=r(JPr,"MPNetConfig"),JPr.forEach(t),iGe=r(cTe," (MPNet model)"),cTe.forEach(t),dGe=i(v),Gm=n(v,"LI",{});var fTe=s(Gm);QY=n(fTe,"STRONG",{});var YPr=s(QY);cGe=r(YPr,"mt5"),YPr.forEach(t),fGe=r(fTe," \u2014 "),fx=n(fTe,"A",{href:!0});var KPr=s(fx);mGe=r(KPr,"MT5Config"),KPr.forEach(t),gGe=r(fTe," (mT5 model)"),fTe.forEach(t),hGe=i(v),Om=n(v,"LI",{});var mTe=s(Om);WY=n(mTe,"STRONG",{});var ZPr=s(WY);pGe=r(ZPr,"nystromformer"),ZPr.forEach(t),_Ge=r(mTe," \u2014 "),mx=n(mTe,"A",{href:!0});var e$r=s(mx);uGe=r(e$r,"NystromformerConfig"),e$r.forEach(t),bGe=r(mTe," (Nystromformer model)"),mTe.forEach(t),FGe=i(v),Vm=n(v,"LI",{});var gTe=s(Vm);HY=n(gTe,"STRONG",{});var o$r=s(HY);vGe=r(o$r,"openai-gpt"),o$r.forEach(t),TGe=r(gTe," \u2014 "),gx=n(gTe,"A",{href:!0});var r$r=s(gx);MGe=r(r$r,"OpenAIGPTConfig"),r$r.forEach(t),EGe=r(gTe," (OpenAI GPT model)"),gTe.forEach(t),CGe=i(v),Xm=n(v,"LI",{});var hTe=s(Xm);UY=n(hTe,"STRONG",{});var t$r=s(UY);wGe=r(t$r,"pegasus"),t$r.forEach(t),AGe=r(hTe," \u2014 "),hx=n(hTe,"A",{href:!0});var a$r=s(hx);yGe=r(a$r,"PegasusConfig"),a$r.forEach(t),LGe=r(hTe," (Pegasus model)"),hTe.forEach(t),xGe=i(v),zm=n(v,"LI",{});var pTe=s(zm);JY=n(pTe,"STRONG",{});var n$r=s(JY);kGe=r(n$r,"perceiver"),n$r.forEach(t),SGe=r(pTe," \u2014 "),px=n(pTe,"A",{href:!0});var s$r=s(px);RGe=r(s$r,"PerceiverConfig"),s$r.forEach(t),BGe=r(pTe," (Perceiver model)"),pTe.forEach(t),PGe=i(v),Qm=n(v,"LI",{});var _Te=s(Qm);YY=n(_Te,"STRONG",{});var l$r=s(YY);$Ge=r(l$r,"plbart"),l$r.forEach(t),IGe=r(_Te," \u2014 "),_x=n(_Te,"A",{href:!0});var i$r=s(_x);qGe=r(i$r,"PLBartConfig"),i$r.forEach(t),NGe=r(_Te," (PLBart model)"),_Te.forEach(t),jGe=i(v),Wm=n(v,"LI",{});var uTe=s(Wm);KY=n(uTe,"STRONG",{});var d$r=s(KY);DGe=r(d$r,"poolformer"),d$r.forEach(t),GGe=r(uTe," \u2014 "),ux=n(uTe,"A",{href:!0});var c$r=s(ux);OGe=r(c$r,"PoolFormerConfig"),c$r.forEach(t),VGe=r(uTe," (PoolFormer model)"),uTe.forEach(t),XGe=i(v),Hm=n(v,"LI",{});var bTe=s(Hm);ZY=n(bTe,"STRONG",{});var f$r=s(ZY);zGe=r(f$r,"prophetnet"),f$r.forEach(t),QGe=r(bTe," \u2014 "),bx=n(bTe,"A",{href:!0});var m$r=s(bx);WGe=r(m$r,"ProphetNetConfig"),m$r.forEach(t),HGe=r(bTe," (ProphetNet model)"),bTe.forEach(t),UGe=i(v),Um=n(v,"LI",{});var FTe=s(Um);eK=n(FTe,"STRONG",{});var g$r=s(eK);JGe=r(g$r,"qdqbert"),g$r.forEach(t),YGe=r(FTe," \u2014 "),Fx=n(FTe,"A",{href:!0});var h$r=s(Fx);KGe=r(h$r,"QDQBertConfig"),h$r.forEach(t),ZGe=r(FTe," (QDQBert model)"),FTe.forEach(t),eOe=i(v),Jm=n(v,"LI",{});var vTe=s(Jm);oK=n(vTe,"STRONG",{});var p$r=s(oK);oOe=r(p$r,"rag"),p$r.forEach(t),rOe=r(vTe," \u2014 "),vx=n(vTe,"A",{href:!0});var _$r=s(vx);tOe=r(_$r,"RagConfig"),_$r.forEach(t),aOe=r(vTe," (RAG model)"),vTe.forEach(t),nOe=i(v),Ym=n(v,"LI",{});var TTe=s(Ym);rK=n(TTe,"STRONG",{});var u$r=s(rK);sOe=r(u$r,"realm"),u$r.forEach(t),lOe=r(TTe," \u2014 "),Tx=n(TTe,"A",{href:!0});var b$r=s(Tx);iOe=r(b$r,"RealmConfig"),b$r.forEach(t),dOe=r(TTe," (Realm model)"),TTe.forEach(t),cOe=i(v),Km=n(v,"LI",{});var MTe=s(Km);tK=n(MTe,"STRONG",{});var F$r=s(tK);fOe=r(F$r,"reformer"),F$r.forEach(t),mOe=r(MTe," \u2014 "),Mx=n(MTe,"A",{href:!0});var v$r=s(Mx);gOe=r(v$r,"ReformerConfig"),v$r.forEach(t),hOe=r(MTe," (Reformer model)"),MTe.forEach(t),pOe=i(v),Zm=n(v,"LI",{});var ETe=s(Zm);aK=n(ETe,"STRONG",{});var T$r=s(aK);_Oe=r(T$r,"rembert"),T$r.forEach(t),uOe=r(ETe," \u2014 "),Ex=n(ETe,"A",{href:!0});var M$r=s(Ex);bOe=r(M$r,"RemBertConfig"),M$r.forEach(t),FOe=r(ETe," (RemBERT model)"),ETe.forEach(t),vOe=i(v),eg=n(v,"LI",{});var CTe=s(eg);nK=n(CTe,"STRONG",{});var E$r=s(nK);TOe=r(E$r,"resnet"),E$r.forEach(t),MOe=r(CTe," \u2014 "),Cx=n(CTe,"A",{href:!0});var C$r=s(Cx);EOe=r(C$r,"ResNetConfig"),C$r.forEach(t),COe=r(CTe," (ResNet model)"),CTe.forEach(t),wOe=i(v),og=n(v,"LI",{});var wTe=s(og);sK=n(wTe,"STRONG",{});var w$r=s(sK);AOe=r(w$r,"retribert"),w$r.forEach(t),yOe=r(wTe," \u2014 "),wx=n(wTe,"A",{href:!0});var A$r=s(wx);LOe=r(A$r,"RetriBertConfig"),A$r.forEach(t),xOe=r(wTe," (RetriBERT model)"),wTe.forEach(t),kOe=i(v),rg=n(v,"LI",{});var ATe=s(rg);lK=n(ATe,"STRONG",{});var y$r=s(lK);SOe=r(y$r,"roberta"),y$r.forEach(t),ROe=r(ATe," \u2014 "),Ax=n(ATe,"A",{href:!0});var L$r=s(Ax);BOe=r(L$r,"RobertaConfig"),L$r.forEach(t),POe=r(ATe," (RoBERTa model)"),ATe.forEach(t),$Oe=i(v),tg=n(v,"LI",{});var yTe=s(tg);iK=n(yTe,"STRONG",{});var x$r=s(iK);IOe=r(x$r,"roformer"),x$r.forEach(t),qOe=r(yTe," \u2014 "),yx=n(yTe,"A",{href:!0});var k$r=s(yx);NOe=r(k$r,"RoFormerConfig"),k$r.forEach(t),jOe=r(yTe," (RoFormer model)"),yTe.forEach(t),DOe=i(v),ag=n(v,"LI",{});var LTe=s(ag);dK=n(LTe,"STRONG",{});var S$r=s(dK);GOe=r(S$r,"segformer"),S$r.forEach(t),OOe=r(LTe," \u2014 "),Lx=n(LTe,"A",{href:!0});var R$r=s(Lx);VOe=r(R$r,"SegformerConfig"),R$r.forEach(t),XOe=r(LTe," (SegFormer model)"),LTe.forEach(t),zOe=i(v),ng=n(v,"LI",{});var xTe=s(ng);cK=n(xTe,"STRONG",{});var B$r=s(cK);QOe=r(B$r,"sew"),B$r.forEach(t),WOe=r(xTe," \u2014 "),xx=n(xTe,"A",{href:!0});var P$r=s(xx);HOe=r(P$r,"SEWConfig"),P$r.forEach(t),UOe=r(xTe," (SEW model)"),xTe.forEach(t),JOe=i(v),sg=n(v,"LI",{});var kTe=s(sg);fK=n(kTe,"STRONG",{});var $$r=s(fK);YOe=r($$r,"sew-d"),$$r.forEach(t),KOe=r(kTe," \u2014 "),kx=n(kTe,"A",{href:!0});var I$r=s(kx);ZOe=r(I$r,"SEWDConfig"),I$r.forEach(t),eVe=r(kTe," (SEW-D model)"),kTe.forEach(t),oVe=i(v),lg=n(v,"LI",{});var STe=s(lg);mK=n(STe,"STRONG",{});var q$r=s(mK);rVe=r(q$r,"speech-encoder-decoder"),q$r.forEach(t),tVe=r(STe," \u2014 "),Sx=n(STe,"A",{href:!0});var N$r=s(Sx);aVe=r(N$r,"SpeechEncoderDecoderConfig"),N$r.forEach(t),nVe=r(STe," (Speech Encoder decoder model)"),STe.forEach(t),sVe=i(v),ig=n(v,"LI",{});var RTe=s(ig);gK=n(RTe,"STRONG",{});var j$r=s(gK);lVe=r(j$r,"speech_to_text"),j$r.forEach(t),iVe=r(RTe," \u2014 "),Rx=n(RTe,"A",{href:!0});var D$r=s(Rx);dVe=r(D$r,"Speech2TextConfig"),D$r.forEach(t),cVe=r(RTe," (Speech2Text model)"),RTe.forEach(t),fVe=i(v),dg=n(v,"LI",{});var BTe=s(dg);hK=n(BTe,"STRONG",{});var G$r=s(hK);mVe=r(G$r,"speech_to_text_2"),G$r.forEach(t),gVe=r(BTe," \u2014 "),Bx=n(BTe,"A",{href:!0});var O$r=s(Bx);hVe=r(O$r,"Speech2Text2Config"),O$r.forEach(t),pVe=r(BTe," (Speech2Text2 model)"),BTe.forEach(t),_Ve=i(v),cg=n(v,"LI",{});var PTe=s(cg);pK=n(PTe,"STRONG",{});var V$r=s(pK);uVe=r(V$r,"splinter"),V$r.forEach(t),bVe=r(PTe," \u2014 "),Px=n(PTe,"A",{href:!0});var X$r=s(Px);FVe=r(X$r,"SplinterConfig"),X$r.forEach(t),vVe=r(PTe," (Splinter model)"),PTe.forEach(t),TVe=i(v),fg=n(v,"LI",{});var $Te=s(fg);_K=n($Te,"STRONG",{});var z$r=s(_K);MVe=r(z$r,"squeezebert"),z$r.forEach(t),EVe=r($Te," \u2014 "),$x=n($Te,"A",{href:!0});var Q$r=s($x);CVe=r(Q$r,"SqueezeBertConfig"),Q$r.forEach(t),wVe=r($Te," (SqueezeBERT model)"),$Te.forEach(t),AVe=i(v),mg=n(v,"LI",{});var ITe=s(mg);uK=n(ITe,"STRONG",{});var W$r=s(uK);yVe=r(W$r,"swin"),W$r.forEach(t),LVe=r(ITe," \u2014 "),Ix=n(ITe,"A",{href:!0});var H$r=s(Ix);xVe=r(H$r,"SwinConfig"),H$r.forEach(t),kVe=r(ITe," (Swin model)"),ITe.forEach(t),SVe=i(v),gg=n(v,"LI",{});var qTe=s(gg);bK=n(qTe,"STRONG",{});var U$r=s(bK);RVe=r(U$r,"t5"),U$r.forEach(t),BVe=r(qTe," \u2014 "),qx=n(qTe,"A",{href:!0});var J$r=s(qx);PVe=r(J$r,"T5Config"),J$r.forEach(t),$Ve=r(qTe," (T5 model)"),qTe.forEach(t),IVe=i(v),hg=n(v,"LI",{});var NTe=s(hg);FK=n(NTe,"STRONG",{});var Y$r=s(FK);qVe=r(Y$r,"tapas"),Y$r.forEach(t),NVe=r(NTe," \u2014 "),Nx=n(NTe,"A",{href:!0});var K$r=s(Nx);jVe=r(K$r,"TapasConfig"),K$r.forEach(t),DVe=r(NTe," (TAPAS model)"),NTe.forEach(t),GVe=i(v),pg=n(v,"LI",{});var jTe=s(pg);vK=n(jTe,"STRONG",{});var Z$r=s(vK);OVe=r(Z$r,"transfo-xl"),Z$r.forEach(t),VVe=r(jTe," \u2014 "),jx=n(jTe,"A",{href:!0});var eIr=s(jx);XVe=r(eIr,"TransfoXLConfig"),eIr.forEach(t),zVe=r(jTe," (Transformer-XL model)"),jTe.forEach(t),QVe=i(v),_g=n(v,"LI",{});var DTe=s(_g);TK=n(DTe,"STRONG",{});var oIr=s(TK);WVe=r(oIr,"trocr"),oIr.forEach(t),HVe=r(DTe," \u2014 "),Dx=n(DTe,"A",{href:!0});var rIr=s(Dx);UVe=r(rIr,"TrOCRConfig"),rIr.forEach(t),JVe=r(DTe," (TrOCR model)"),DTe.forEach(t),YVe=i(v),ug=n(v,"LI",{});var GTe=s(ug);MK=n(GTe,"STRONG",{});var tIr=s(MK);KVe=r(tIr,"unispeech"),tIr.forEach(t),ZVe=r(GTe," \u2014 "),Gx=n(GTe,"A",{href:!0});var aIr=s(Gx);eXe=r(aIr,"UniSpeechConfig"),aIr.forEach(t),oXe=r(GTe," (UniSpeech model)"),GTe.forEach(t),rXe=i(v),bg=n(v,"LI",{});var OTe=s(bg);EK=n(OTe,"STRONG",{});var nIr=s(EK);tXe=r(nIr,"unispeech-sat"),nIr.forEach(t),aXe=r(OTe," \u2014 "),Ox=n(OTe,"A",{href:!0});var sIr=s(Ox);nXe=r(sIr,"UniSpeechSatConfig"),sIr.forEach(t),sXe=r(OTe," (UniSpeechSat model)"),OTe.forEach(t),lXe=i(v),Fg=n(v,"LI",{});var VTe=s(Fg);CK=n(VTe,"STRONG",{});var lIr=s(CK);iXe=r(lIr,"van"),lIr.forEach(t),dXe=r(VTe," \u2014 "),Vx=n(VTe,"A",{href:!0});var iIr=s(Vx);cXe=r(iIr,"VanConfig"),iIr.forEach(t),fXe=r(VTe," (VAN model)"),VTe.forEach(t),mXe=i(v),vg=n(v,"LI",{});var XTe=s(vg);wK=n(XTe,"STRONG",{});var dIr=s(wK);gXe=r(dIr,"vilt"),dIr.forEach(t),hXe=r(XTe," \u2014 "),Xx=n(XTe,"A",{href:!0});var cIr=s(Xx);pXe=r(cIr,"ViltConfig"),cIr.forEach(t),_Xe=r(XTe," (ViLT model)"),XTe.forEach(t),uXe=i(v),Tg=n(v,"LI",{});var zTe=s(Tg);AK=n(zTe,"STRONG",{});var fIr=s(AK);bXe=r(fIr,"vision-encoder-decoder"),fIr.forEach(t),FXe=r(zTe," \u2014 "),zx=n(zTe,"A",{href:!0});var mIr=s(zx);vXe=r(mIr,"VisionEncoderDecoderConfig"),mIr.forEach(t),TXe=r(zTe," (Vision Encoder decoder model)"),zTe.forEach(t),MXe=i(v),Mg=n(v,"LI",{});var QTe=s(Mg);yK=n(QTe,"STRONG",{});var gIr=s(yK);EXe=r(gIr,"vision-text-dual-encoder"),gIr.forEach(t),CXe=r(QTe," \u2014 "),Qx=n(QTe,"A",{href:!0});var hIr=s(Qx);wXe=r(hIr,"VisionTextDualEncoderConfig"),hIr.forEach(t),AXe=r(QTe," (VisionTextDualEncoder model)"),QTe.forEach(t),yXe=i(v),Eg=n(v,"LI",{});var WTe=s(Eg);LK=n(WTe,"STRONG",{});var pIr=s(LK);LXe=r(pIr,"visual_bert"),pIr.forEach(t),xXe=r(WTe," \u2014 "),Wx=n(WTe,"A",{href:!0});var _Ir=s(Wx);kXe=r(_Ir,"VisualBertConfig"),_Ir.forEach(t),SXe=r(WTe," (VisualBert model)"),WTe.forEach(t),RXe=i(v),Cg=n(v,"LI",{});var HTe=s(Cg);xK=n(HTe,"STRONG",{});var uIr=s(xK);BXe=r(uIr,"vit"),uIr.forEach(t),PXe=r(HTe," \u2014 "),Hx=n(HTe,"A",{href:!0});var bIr=s(Hx);$Xe=r(bIr,"ViTConfig"),bIr.forEach(t),IXe=r(HTe," (ViT model)"),HTe.forEach(t),qXe=i(v),wg=n(v,"LI",{});var UTe=s(wg);kK=n(UTe,"STRONG",{});var FIr=s(kK);NXe=r(FIr,"vit_mae"),FIr.forEach(t),jXe=r(UTe," \u2014 "),Ux=n(UTe,"A",{href:!0});var vIr=s(Ux);DXe=r(vIr,"ViTMAEConfig"),vIr.forEach(t),GXe=r(UTe," (ViTMAE model)"),UTe.forEach(t),OXe=i(v),Ag=n(v,"LI",{});var JTe=s(Ag);SK=n(JTe,"STRONG",{});var TIr=s(SK);VXe=r(TIr,"wav2vec2"),TIr.forEach(t),XXe=r(JTe," \u2014 "),Jx=n(JTe,"A",{href:!0});var MIr=s(Jx);zXe=r(MIr,"Wav2Vec2Config"),MIr.forEach(t),QXe=r(JTe," (Wav2Vec2 model)"),JTe.forEach(t),WXe=i(v),yg=n(v,"LI",{});var YTe=s(yg);RK=n(YTe,"STRONG",{});var EIr=s(RK);HXe=r(EIr,"wavlm"),EIr.forEach(t),UXe=r(YTe," \u2014 "),Yx=n(YTe,"A",{href:!0});var CIr=s(Yx);JXe=r(CIr,"WavLMConfig"),CIr.forEach(t),YXe=r(YTe," (WavLM model)"),YTe.forEach(t),KXe=i(v),Lg=n(v,"LI",{});var KTe=s(Lg);BK=n(KTe,"STRONG",{});var wIr=s(BK);ZXe=r(wIr,"xglm"),wIr.forEach(t),eze=r(KTe," \u2014 "),Kx=n(KTe,"A",{href:!0});var AIr=s(Kx);oze=r(AIr,"XGLMConfig"),AIr.forEach(t),rze=r(KTe," (XGLM model)"),KTe.forEach(t),tze=i(v),xg=n(v,"LI",{});var ZTe=s(xg);PK=n(ZTe,"STRONG",{});var yIr=s(PK);aze=r(yIr,"xlm"),yIr.forEach(t),nze=r(ZTe," \u2014 "),Zx=n(ZTe,"A",{href:!0});var LIr=s(Zx);sze=r(LIr,"XLMConfig"),LIr.forEach(t),lze=r(ZTe," (XLM model)"),ZTe.forEach(t),ize=i(v),kg=n(v,"LI",{});var e7e=s(kg);$K=n(e7e,"STRONG",{});var xIr=s($K);dze=r(xIr,"xlm-prophetnet"),xIr.forEach(t),cze=r(e7e," \u2014 "),ek=n(e7e,"A",{href:!0});var kIr=s(ek);fze=r(kIr,"XLMProphetNetConfig"),kIr.forEach(t),mze=r(e7e," (XLMProphetNet model)"),e7e.forEach(t),gze=i(v),Sg=n(v,"LI",{});var o7e=s(Sg);IK=n(o7e,"STRONG",{});var SIr=s(IK);hze=r(SIr,"xlm-roberta"),SIr.forEach(t),pze=r(o7e," \u2014 "),ok=n(o7e,"A",{href:!0});var RIr=s(ok);_ze=r(RIr,"XLMRobertaConfig"),RIr.forEach(t),uze=r(o7e," (XLM-RoBERTa model)"),o7e.forEach(t),bze=i(v),Rg=n(v,"LI",{});var r7e=s(Rg);qK=n(r7e,"STRONG",{});var BIr=s(qK);Fze=r(BIr,"xlm-roberta-xl"),BIr.forEach(t),vze=r(r7e," \u2014 "),rk=n(r7e,"A",{href:!0});var PIr=s(rk);Tze=r(PIr,"XLMRobertaXLConfig"),PIr.forEach(t),Mze=r(r7e," (XLM-RoBERTa-XL model)"),r7e.forEach(t),Eze=i(v),Bg=n(v,"LI",{});var t7e=s(Bg);NK=n(t7e,"STRONG",{});var $Ir=s(NK);Cze=r($Ir,"xlnet"),$Ir.forEach(t),wze=r(t7e," \u2014 "),tk=n(t7e,"A",{href:!0});var IIr=s(tk);Aze=r(IIr,"XLNetConfig"),IIr.forEach(t),yze=r(t7e," (XLNet model)"),t7e.forEach(t),Lze=i(v),Pg=n(v,"LI",{});var a7e=s(Pg);jK=n(a7e,"STRONG",{});var qIr=s(jK);xze=r(qIr,"yoso"),qIr.forEach(t),kze=r(a7e," \u2014 "),ak=n(a7e,"A",{href:!0});var NIr=s(ak);Sze=r(NIr,"YosoConfig"),NIr.forEach(t),Rze=r(a7e," (YOSO model)"),a7e.forEach(t),v.forEach(t),Bze=i(ga),DK=n(ga,"P",{});var jIr=s(DK);Pze=r(jIr,"Examples:"),jIr.forEach(t),$ze=i(ga),m(AE.$$.fragment,ga),ga.forEach(t),Ize=i(Os),$g=n(Os,"DIV",{class:!0});var QBe=s($g);m(yE.$$.fragment,QBe),qze=i(QBe),GK=n(QBe,"P",{});var DIr=s(GK);Nze=r(DIr,"Register a new configuration for this class."),DIr.forEach(t),QBe.forEach(t),Os.forEach(t),XSe=i(c),Qi=n(c,"H2",{class:!0});var WBe=s(Qi);Ig=n(WBe,"A",{id:!0,class:!0,href:!0});var GIr=s(Ig);OK=n(GIr,"SPAN",{});var OIr=s(OK);m(LE.$$.fragment,OIr),OIr.forEach(t),GIr.forEach(t),jze=i(WBe),VK=n(WBe,"SPAN",{});var VIr=s(VK);Dze=r(VIr,"AutoTokenizer"),VIr.forEach(t),WBe.forEach(t),zSe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(xE.$$.fragment,Vs),Gze=i(Vs),kE=n(Vs,"P",{});var HBe=s(kE);Oze=r(HBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),nk=n(HBe,"A",{href:!0});var XIr=s(nk);Vze=r(XIr,"AutoTokenizer.from_pretrained()"),XIr.forEach(t),Xze=r(HBe," class method."),HBe.forEach(t),zze=i(Vs),SE=n(Vs,"P",{});var UBe=s(SE);Qze=r(UBe,"This class cannot be instantiated directly using "),XK=n(UBe,"CODE",{});var zIr=s(XK);Wze=r(zIr,"__init__()"),zIr.forEach(t),Hze=r(UBe," (throws an error)."),UBe.forEach(t),Uze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(RE.$$.fragment,ha),Jze=i(ha),zK=n(ha,"P",{});var QIr=s(zK);Yze=r(QIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QIr.forEach(t),Kze=i(ha),Oa=n(ha,"P",{});var u4=s(Oa);Zze=r(u4,"The tokenizer class to instantiate is selected based on the "),QK=n(u4,"CODE",{});var WIr=s(QK);eQe=r(WIr,"model_type"),WIr.forEach(t),oQe=r(u4,` property of the config object (either
passed as an argument or loaded from `),WK=n(u4,"CODE",{});var HIr=s(WK);rQe=r(HIr,"pretrained_model_name_or_path"),HIr.forEach(t),tQe=r(u4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HK=n(u4,"CODE",{});var UIr=s(HK);aQe=r(UIr,"pretrained_model_name_or_path"),UIr.forEach(t),nQe=r(u4,":"),u4.forEach(t),sQe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var f8=s(Qn);UK=n(f8,"STRONG",{});var JIr=s(UK);lQe=r(JIr,"albert"),JIr.forEach(t),iQe=r(f8," \u2014 "),sk=n(f8,"A",{href:!0});var YIr=s(sk);dQe=r(YIr,"AlbertTokenizer"),YIr.forEach(t),cQe=r(f8," or "),lk=n(f8,"A",{href:!0});var KIr=s(lk);fQe=r(KIr,"AlbertTokenizerFast"),KIr.forEach(t),mQe=r(f8," (ALBERT model)"),f8.forEach(t),gQe=i(w),Wn=n(w,"LI",{});var m8=s(Wn);JK=n(m8,"STRONG",{});var ZIr=s(JK);hQe=r(ZIr,"bart"),ZIr.forEach(t),pQe=r(m8," \u2014 "),ik=n(m8,"A",{href:!0});var eqr=s(ik);_Qe=r(eqr,"BartTokenizer"),eqr.forEach(t),uQe=r(m8," or "),dk=n(m8,"A",{href:!0});var oqr=s(dk);bQe=r(oqr,"BartTokenizerFast"),oqr.forEach(t),FQe=r(m8," (BART model)"),m8.forEach(t),vQe=i(w),Hn=n(w,"LI",{});var g8=s(Hn);YK=n(g8,"STRONG",{});var rqr=s(YK);TQe=r(rqr,"barthez"),rqr.forEach(t),MQe=r(g8," \u2014 "),ck=n(g8,"A",{href:!0});var tqr=s(ck);EQe=r(tqr,"BarthezTokenizer"),tqr.forEach(t),CQe=r(g8," or "),fk=n(g8,"A",{href:!0});var aqr=s(fk);wQe=r(aqr,"BarthezTokenizerFast"),aqr.forEach(t),AQe=r(g8," (BARThez model)"),g8.forEach(t),yQe=i(w),qg=n(w,"LI",{});var n7e=s(qg);KK=n(n7e,"STRONG",{});var nqr=s(KK);LQe=r(nqr,"bartpho"),nqr.forEach(t),xQe=r(n7e," \u2014 "),mk=n(n7e,"A",{href:!0});var sqr=s(mk);kQe=r(sqr,"BartphoTokenizer"),sqr.forEach(t),SQe=r(n7e," (BARTpho model)"),n7e.forEach(t),RQe=i(w),Un=n(w,"LI",{});var h8=s(Un);ZK=n(h8,"STRONG",{});var lqr=s(ZK);BQe=r(lqr,"bert"),lqr.forEach(t),PQe=r(h8," \u2014 "),gk=n(h8,"A",{href:!0});var iqr=s(gk);$Qe=r(iqr,"BertTokenizer"),iqr.forEach(t),IQe=r(h8," or "),hk=n(h8,"A",{href:!0});var dqr=s(hk);qQe=r(dqr,"BertTokenizerFast"),dqr.forEach(t),NQe=r(h8," (BERT model)"),h8.forEach(t),jQe=i(w),Ng=n(w,"LI",{});var s7e=s(Ng);eZ=n(s7e,"STRONG",{});var cqr=s(eZ);DQe=r(cqr,"bert-generation"),cqr.forEach(t),GQe=r(s7e," \u2014 "),pk=n(s7e,"A",{href:!0});var fqr=s(pk);OQe=r(fqr,"BertGenerationTokenizer"),fqr.forEach(t),VQe=r(s7e," (Bert Generation model)"),s7e.forEach(t),XQe=i(w),jg=n(w,"LI",{});var l7e=s(jg);oZ=n(l7e,"STRONG",{});var mqr=s(oZ);zQe=r(mqr,"bert-japanese"),mqr.forEach(t),QQe=r(l7e," \u2014 "),_k=n(l7e,"A",{href:!0});var gqr=s(_k);WQe=r(gqr,"BertJapaneseTokenizer"),gqr.forEach(t),HQe=r(l7e," (BertJapanese model)"),l7e.forEach(t),UQe=i(w),Dg=n(w,"LI",{});var i7e=s(Dg);rZ=n(i7e,"STRONG",{});var hqr=s(rZ);JQe=r(hqr,"bertweet"),hqr.forEach(t),YQe=r(i7e," \u2014 "),uk=n(i7e,"A",{href:!0});var pqr=s(uk);KQe=r(pqr,"BertweetTokenizer"),pqr.forEach(t),ZQe=r(i7e," (Bertweet model)"),i7e.forEach(t),eWe=i(w),Jn=n(w,"LI",{});var p8=s(Jn);tZ=n(p8,"STRONG",{});var _qr=s(tZ);oWe=r(_qr,"big_bird"),_qr.forEach(t),rWe=r(p8," \u2014 "),bk=n(p8,"A",{href:!0});var uqr=s(bk);tWe=r(uqr,"BigBirdTokenizer"),uqr.forEach(t),aWe=r(p8," or "),Fk=n(p8,"A",{href:!0});var bqr=s(Fk);nWe=r(bqr,"BigBirdTokenizerFast"),bqr.forEach(t),sWe=r(p8," (BigBird model)"),p8.forEach(t),lWe=i(w),Yn=n(w,"LI",{});var _8=s(Yn);aZ=n(_8,"STRONG",{});var Fqr=s(aZ);iWe=r(Fqr,"bigbird_pegasus"),Fqr.forEach(t),dWe=r(_8," \u2014 "),vk=n(_8,"A",{href:!0});var vqr=s(vk);cWe=r(vqr,"PegasusTokenizer"),vqr.forEach(t),fWe=r(_8," or "),Tk=n(_8,"A",{href:!0});var Tqr=s(Tk);mWe=r(Tqr,"PegasusTokenizerFast"),Tqr.forEach(t),gWe=r(_8," (BigBirdPegasus model)"),_8.forEach(t),hWe=i(w),Kn=n(w,"LI",{});var u8=s(Kn);nZ=n(u8,"STRONG",{});var Mqr=s(nZ);pWe=r(Mqr,"blenderbot"),Mqr.forEach(t),_We=r(u8," \u2014 "),Mk=n(u8,"A",{href:!0});var Eqr=s(Mk);uWe=r(Eqr,"BlenderbotTokenizer"),Eqr.forEach(t),bWe=r(u8," or "),Ek=n(u8,"A",{href:!0});var Cqr=s(Ek);FWe=r(Cqr,"BlenderbotTokenizerFast"),Cqr.forEach(t),vWe=r(u8," (Blenderbot model)"),u8.forEach(t),TWe=i(w),Gg=n(w,"LI",{});var d7e=s(Gg);sZ=n(d7e,"STRONG",{});var wqr=s(sZ);MWe=r(wqr,"blenderbot-small"),wqr.forEach(t),EWe=r(d7e," \u2014 "),Ck=n(d7e,"A",{href:!0});var Aqr=s(Ck);CWe=r(Aqr,"BlenderbotSmallTokenizer"),Aqr.forEach(t),wWe=r(d7e," (BlenderbotSmall model)"),d7e.forEach(t),AWe=i(w),Og=n(w,"LI",{});var c7e=s(Og);lZ=n(c7e,"STRONG",{});var yqr=s(lZ);yWe=r(yqr,"byt5"),yqr.forEach(t),LWe=r(c7e," \u2014 "),wk=n(c7e,"A",{href:!0});var Lqr=s(wk);xWe=r(Lqr,"ByT5Tokenizer"),Lqr.forEach(t),kWe=r(c7e," (ByT5 model)"),c7e.forEach(t),SWe=i(w),Zn=n(w,"LI",{});var b8=s(Zn);iZ=n(b8,"STRONG",{});var xqr=s(iZ);RWe=r(xqr,"camembert"),xqr.forEach(t),BWe=r(b8," \u2014 "),Ak=n(b8,"A",{href:!0});var kqr=s(Ak);PWe=r(kqr,"CamembertTokenizer"),kqr.forEach(t),$We=r(b8," or "),yk=n(b8,"A",{href:!0});var Sqr=s(yk);IWe=r(Sqr,"CamembertTokenizerFast"),Sqr.forEach(t),qWe=r(b8," (CamemBERT model)"),b8.forEach(t),NWe=i(w),Vg=n(w,"LI",{});var f7e=s(Vg);dZ=n(f7e,"STRONG",{});var Rqr=s(dZ);jWe=r(Rqr,"canine"),Rqr.forEach(t),DWe=r(f7e," \u2014 "),Lk=n(f7e,"A",{href:!0});var Bqr=s(Lk);GWe=r(Bqr,"CanineTokenizer"),Bqr.forEach(t),OWe=r(f7e," (Canine model)"),f7e.forEach(t),VWe=i(w),es=n(w,"LI",{});var F8=s(es);cZ=n(F8,"STRONG",{});var Pqr=s(cZ);XWe=r(Pqr,"clip"),Pqr.forEach(t),zWe=r(F8," \u2014 "),xk=n(F8,"A",{href:!0});var $qr=s(xk);QWe=r($qr,"CLIPTokenizer"),$qr.forEach(t),WWe=r(F8," or "),kk=n(F8,"A",{href:!0});var Iqr=s(kk);HWe=r(Iqr,"CLIPTokenizerFast"),Iqr.forEach(t),UWe=r(F8," (CLIP model)"),F8.forEach(t),JWe=i(w),os=n(w,"LI",{});var v8=s(os);fZ=n(v8,"STRONG",{});var qqr=s(fZ);YWe=r(qqr,"convbert"),qqr.forEach(t),KWe=r(v8," \u2014 "),Sk=n(v8,"A",{href:!0});var Nqr=s(Sk);ZWe=r(Nqr,"ConvBertTokenizer"),Nqr.forEach(t),eHe=r(v8," or "),Rk=n(v8,"A",{href:!0});var jqr=s(Rk);oHe=r(jqr,"ConvBertTokenizerFast"),jqr.forEach(t),rHe=r(v8," (ConvBERT model)"),v8.forEach(t),tHe=i(w),rs=n(w,"LI",{});var T8=s(rs);mZ=n(T8,"STRONG",{});var Dqr=s(mZ);aHe=r(Dqr,"cpm"),Dqr.forEach(t),nHe=r(T8," \u2014 "),Bk=n(T8,"A",{href:!0});var Gqr=s(Bk);sHe=r(Gqr,"CpmTokenizer"),Gqr.forEach(t),lHe=r(T8," or "),gZ=n(T8,"CODE",{});var Oqr=s(gZ);iHe=r(Oqr,"CpmTokenizerFast"),Oqr.forEach(t),dHe=r(T8," (CPM model)"),T8.forEach(t),cHe=i(w),Xg=n(w,"LI",{});var m7e=s(Xg);hZ=n(m7e,"STRONG",{});var Vqr=s(hZ);fHe=r(Vqr,"ctrl"),Vqr.forEach(t),mHe=r(m7e," \u2014 "),Pk=n(m7e,"A",{href:!0});var Xqr=s(Pk);gHe=r(Xqr,"CTRLTokenizer"),Xqr.forEach(t),hHe=r(m7e," (CTRL model)"),m7e.forEach(t),pHe=i(w),ts=n(w,"LI",{});var M8=s(ts);pZ=n(M8,"STRONG",{});var zqr=s(pZ);_He=r(zqr,"deberta"),zqr.forEach(t),uHe=r(M8," \u2014 "),$k=n(M8,"A",{href:!0});var Qqr=s($k);bHe=r(Qqr,"DebertaTokenizer"),Qqr.forEach(t),FHe=r(M8," or "),Ik=n(M8,"A",{href:!0});var Wqr=s(Ik);vHe=r(Wqr,"DebertaTokenizerFast"),Wqr.forEach(t),THe=r(M8," (DeBERTa model)"),M8.forEach(t),MHe=i(w),zg=n(w,"LI",{});var g7e=s(zg);_Z=n(g7e,"STRONG",{});var Hqr=s(_Z);EHe=r(Hqr,"deberta-v2"),Hqr.forEach(t),CHe=r(g7e," \u2014 "),qk=n(g7e,"A",{href:!0});var Uqr=s(qk);wHe=r(Uqr,"DebertaV2Tokenizer"),Uqr.forEach(t),AHe=r(g7e," (DeBERTa-v2 model)"),g7e.forEach(t),yHe=i(w),as=n(w,"LI",{});var E8=s(as);uZ=n(E8,"STRONG",{});var Jqr=s(uZ);LHe=r(Jqr,"distilbert"),Jqr.forEach(t),xHe=r(E8," \u2014 "),Nk=n(E8,"A",{href:!0});var Yqr=s(Nk);kHe=r(Yqr,"DistilBertTokenizer"),Yqr.forEach(t),SHe=r(E8," or "),jk=n(E8,"A",{href:!0});var Kqr=s(jk);RHe=r(Kqr,"DistilBertTokenizerFast"),Kqr.forEach(t),BHe=r(E8," (DistilBERT model)"),E8.forEach(t),PHe=i(w),ns=n(w,"LI",{});var C8=s(ns);bZ=n(C8,"STRONG",{});var Zqr=s(bZ);$He=r(Zqr,"dpr"),Zqr.forEach(t),IHe=r(C8," \u2014 "),Dk=n(C8,"A",{href:!0});var eNr=s(Dk);qHe=r(eNr,"DPRQuestionEncoderTokenizer"),eNr.forEach(t),NHe=r(C8," or "),Gk=n(C8,"A",{href:!0});var oNr=s(Gk);jHe=r(oNr,"DPRQuestionEncoderTokenizerFast"),oNr.forEach(t),DHe=r(C8," (DPR model)"),C8.forEach(t),GHe=i(w),ss=n(w,"LI",{});var w8=s(ss);FZ=n(w8,"STRONG",{});var rNr=s(FZ);OHe=r(rNr,"electra"),rNr.forEach(t),VHe=r(w8," \u2014 "),Ok=n(w8,"A",{href:!0});var tNr=s(Ok);XHe=r(tNr,"ElectraTokenizer"),tNr.forEach(t),zHe=r(w8," or "),Vk=n(w8,"A",{href:!0});var aNr=s(Vk);QHe=r(aNr,"ElectraTokenizerFast"),aNr.forEach(t),WHe=r(w8," (ELECTRA model)"),w8.forEach(t),HHe=i(w),Qg=n(w,"LI",{});var h7e=s(Qg);vZ=n(h7e,"STRONG",{});var nNr=s(vZ);UHe=r(nNr,"flaubert"),nNr.forEach(t),JHe=r(h7e," \u2014 "),Xk=n(h7e,"A",{href:!0});var sNr=s(Xk);YHe=r(sNr,"FlaubertTokenizer"),sNr.forEach(t),KHe=r(h7e," (FlauBERT model)"),h7e.forEach(t),ZHe=i(w),ls=n(w,"LI",{});var A8=s(ls);TZ=n(A8,"STRONG",{});var lNr=s(TZ);eUe=r(lNr,"fnet"),lNr.forEach(t),oUe=r(A8," \u2014 "),zk=n(A8,"A",{href:!0});var iNr=s(zk);rUe=r(iNr,"FNetTokenizer"),iNr.forEach(t),tUe=r(A8," or "),Qk=n(A8,"A",{href:!0});var dNr=s(Qk);aUe=r(dNr,"FNetTokenizerFast"),dNr.forEach(t),nUe=r(A8," (FNet model)"),A8.forEach(t),sUe=i(w),Wg=n(w,"LI",{});var p7e=s(Wg);MZ=n(p7e,"STRONG",{});var cNr=s(MZ);lUe=r(cNr,"fsmt"),cNr.forEach(t),iUe=r(p7e," \u2014 "),Wk=n(p7e,"A",{href:!0});var fNr=s(Wk);dUe=r(fNr,"FSMTTokenizer"),fNr.forEach(t),cUe=r(p7e," (FairSeq Machine-Translation model)"),p7e.forEach(t),fUe=i(w),is=n(w,"LI",{});var y8=s(is);EZ=n(y8,"STRONG",{});var mNr=s(EZ);mUe=r(mNr,"funnel"),mNr.forEach(t),gUe=r(y8," \u2014 "),Hk=n(y8,"A",{href:!0});var gNr=s(Hk);hUe=r(gNr,"FunnelTokenizer"),gNr.forEach(t),pUe=r(y8," or "),Uk=n(y8,"A",{href:!0});var hNr=s(Uk);_Ue=r(hNr,"FunnelTokenizerFast"),hNr.forEach(t),uUe=r(y8," (Funnel Transformer model)"),y8.forEach(t),bUe=i(w),ds=n(w,"LI",{});var L8=s(ds);CZ=n(L8,"STRONG",{});var pNr=s(CZ);FUe=r(pNr,"gpt2"),pNr.forEach(t),vUe=r(L8," \u2014 "),Jk=n(L8,"A",{href:!0});var _Nr=s(Jk);TUe=r(_Nr,"GPT2Tokenizer"),_Nr.forEach(t),MUe=r(L8," or "),Yk=n(L8,"A",{href:!0});var uNr=s(Yk);EUe=r(uNr,"GPT2TokenizerFast"),uNr.forEach(t),CUe=r(L8," (OpenAI GPT-2 model)"),L8.forEach(t),wUe=i(w),cs=n(w,"LI",{});var x8=s(cs);wZ=n(x8,"STRONG",{});var bNr=s(wZ);AUe=r(bNr,"gpt_neo"),bNr.forEach(t),yUe=r(x8," \u2014 "),Kk=n(x8,"A",{href:!0});var FNr=s(Kk);LUe=r(FNr,"GPT2Tokenizer"),FNr.forEach(t),xUe=r(x8," or "),Zk=n(x8,"A",{href:!0});var vNr=s(Zk);kUe=r(vNr,"GPT2TokenizerFast"),vNr.forEach(t),SUe=r(x8," (GPT Neo model)"),x8.forEach(t),RUe=i(w),fs=n(w,"LI",{});var k8=s(fs);AZ=n(k8,"STRONG",{});var TNr=s(AZ);BUe=r(TNr,"herbert"),TNr.forEach(t),PUe=r(k8," \u2014 "),eS=n(k8,"A",{href:!0});var MNr=s(eS);$Ue=r(MNr,"HerbertTokenizer"),MNr.forEach(t),IUe=r(k8," or "),oS=n(k8,"A",{href:!0});var ENr=s(oS);qUe=r(ENr,"HerbertTokenizerFast"),ENr.forEach(t),NUe=r(k8," (HerBERT model)"),k8.forEach(t),jUe=i(w),Hg=n(w,"LI",{});var _7e=s(Hg);yZ=n(_7e,"STRONG",{});var CNr=s(yZ);DUe=r(CNr,"hubert"),CNr.forEach(t),GUe=r(_7e," \u2014 "),rS=n(_7e,"A",{href:!0});var wNr=s(rS);OUe=r(wNr,"Wav2Vec2CTCTokenizer"),wNr.forEach(t),VUe=r(_7e," (Hubert model)"),_7e.forEach(t),XUe=i(w),ms=n(w,"LI",{});var S8=s(ms);LZ=n(S8,"STRONG",{});var ANr=s(LZ);zUe=r(ANr,"ibert"),ANr.forEach(t),QUe=r(S8," \u2014 "),tS=n(S8,"A",{href:!0});var yNr=s(tS);WUe=r(yNr,"RobertaTokenizer"),yNr.forEach(t),HUe=r(S8," or "),aS=n(S8,"A",{href:!0});var LNr=s(aS);UUe=r(LNr,"RobertaTokenizerFast"),LNr.forEach(t),JUe=r(S8," (I-BERT model)"),S8.forEach(t),YUe=i(w),gs=n(w,"LI",{});var R8=s(gs);xZ=n(R8,"STRONG",{});var xNr=s(xZ);KUe=r(xNr,"layoutlm"),xNr.forEach(t),ZUe=r(R8," \u2014 "),nS=n(R8,"A",{href:!0});var kNr=s(nS);eJe=r(kNr,"LayoutLMTokenizer"),kNr.forEach(t),oJe=r(R8," or "),sS=n(R8,"A",{href:!0});var SNr=s(sS);rJe=r(SNr,"LayoutLMTokenizerFast"),SNr.forEach(t),tJe=r(R8," (LayoutLM model)"),R8.forEach(t),aJe=i(w),hs=n(w,"LI",{});var B8=s(hs);kZ=n(B8,"STRONG",{});var RNr=s(kZ);nJe=r(RNr,"layoutlmv2"),RNr.forEach(t),sJe=r(B8," \u2014 "),lS=n(B8,"A",{href:!0});var BNr=s(lS);lJe=r(BNr,"LayoutLMv2Tokenizer"),BNr.forEach(t),iJe=r(B8," or "),iS=n(B8,"A",{href:!0});var PNr=s(iS);dJe=r(PNr,"LayoutLMv2TokenizerFast"),PNr.forEach(t),cJe=r(B8," (LayoutLMv2 model)"),B8.forEach(t),fJe=i(w),ps=n(w,"LI",{});var P8=s(ps);SZ=n(P8,"STRONG",{});var $Nr=s(SZ);mJe=r($Nr,"layoutxlm"),$Nr.forEach(t),gJe=r(P8," \u2014 "),dS=n(P8,"A",{href:!0});var INr=s(dS);hJe=r(INr,"LayoutXLMTokenizer"),INr.forEach(t),pJe=r(P8," or "),cS=n(P8,"A",{href:!0});var qNr=s(cS);_Je=r(qNr,"LayoutXLMTokenizerFast"),qNr.forEach(t),uJe=r(P8," (LayoutXLM model)"),P8.forEach(t),bJe=i(w),_s=n(w,"LI",{});var $8=s(_s);RZ=n($8,"STRONG",{});var NNr=s(RZ);FJe=r(NNr,"led"),NNr.forEach(t),vJe=r($8," \u2014 "),fS=n($8,"A",{href:!0});var jNr=s(fS);TJe=r(jNr,"LEDTokenizer"),jNr.forEach(t),MJe=r($8," or "),mS=n($8,"A",{href:!0});var DNr=s(mS);EJe=r(DNr,"LEDTokenizerFast"),DNr.forEach(t),CJe=r($8," (LED model)"),$8.forEach(t),wJe=i(w),us=n(w,"LI",{});var I8=s(us);BZ=n(I8,"STRONG",{});var GNr=s(BZ);AJe=r(GNr,"longformer"),GNr.forEach(t),yJe=r(I8," \u2014 "),gS=n(I8,"A",{href:!0});var ONr=s(gS);LJe=r(ONr,"LongformerTokenizer"),ONr.forEach(t),xJe=r(I8," or "),hS=n(I8,"A",{href:!0});var VNr=s(hS);kJe=r(VNr,"LongformerTokenizerFast"),VNr.forEach(t),SJe=r(I8," (Longformer model)"),I8.forEach(t),RJe=i(w),Ug=n(w,"LI",{});var u7e=s(Ug);PZ=n(u7e,"STRONG",{});var XNr=s(PZ);BJe=r(XNr,"luke"),XNr.forEach(t),PJe=r(u7e," \u2014 "),pS=n(u7e,"A",{href:!0});var zNr=s(pS);$Je=r(zNr,"LukeTokenizer"),zNr.forEach(t),IJe=r(u7e," (LUKE model)"),u7e.forEach(t),qJe=i(w),bs=n(w,"LI",{});var q8=s(bs);$Z=n(q8,"STRONG",{});var QNr=s($Z);NJe=r(QNr,"lxmert"),QNr.forEach(t),jJe=r(q8," \u2014 "),_S=n(q8,"A",{href:!0});var WNr=s(_S);DJe=r(WNr,"LxmertTokenizer"),WNr.forEach(t),GJe=r(q8," or "),uS=n(q8,"A",{href:!0});var HNr=s(uS);OJe=r(HNr,"LxmertTokenizerFast"),HNr.forEach(t),VJe=r(q8," (LXMERT model)"),q8.forEach(t),XJe=i(w),Jg=n(w,"LI",{});var b7e=s(Jg);IZ=n(b7e,"STRONG",{});var UNr=s(IZ);zJe=r(UNr,"m2m_100"),UNr.forEach(t),QJe=r(b7e," \u2014 "),bS=n(b7e,"A",{href:!0});var JNr=s(bS);WJe=r(JNr,"M2M100Tokenizer"),JNr.forEach(t),HJe=r(b7e," (M2M100 model)"),b7e.forEach(t),UJe=i(w),Yg=n(w,"LI",{});var F7e=s(Yg);qZ=n(F7e,"STRONG",{});var YNr=s(qZ);JJe=r(YNr,"marian"),YNr.forEach(t),YJe=r(F7e," \u2014 "),FS=n(F7e,"A",{href:!0});var KNr=s(FS);KJe=r(KNr,"MarianTokenizer"),KNr.forEach(t),ZJe=r(F7e," (Marian model)"),F7e.forEach(t),eYe=i(w),Fs=n(w,"LI",{});var N8=s(Fs);NZ=n(N8,"STRONG",{});var ZNr=s(NZ);oYe=r(ZNr,"mbart"),ZNr.forEach(t),rYe=r(N8," \u2014 "),vS=n(N8,"A",{href:!0});var ejr=s(vS);tYe=r(ejr,"MBartTokenizer"),ejr.forEach(t),aYe=r(N8," or "),TS=n(N8,"A",{href:!0});var ojr=s(TS);nYe=r(ojr,"MBartTokenizerFast"),ojr.forEach(t),sYe=r(N8," (mBART model)"),N8.forEach(t),lYe=i(w),vs=n(w,"LI",{});var j8=s(vs);jZ=n(j8,"STRONG",{});var rjr=s(jZ);iYe=r(rjr,"mbart50"),rjr.forEach(t),dYe=r(j8," \u2014 "),MS=n(j8,"A",{href:!0});var tjr=s(MS);cYe=r(tjr,"MBart50Tokenizer"),tjr.forEach(t),fYe=r(j8," or "),ES=n(j8,"A",{href:!0});var ajr=s(ES);mYe=r(ajr,"MBart50TokenizerFast"),ajr.forEach(t),gYe=r(j8," (mBART-50 model)"),j8.forEach(t),hYe=i(w),Kg=n(w,"LI",{});var v7e=s(Kg);DZ=n(v7e,"STRONG",{});var njr=s(DZ);pYe=r(njr,"mluke"),njr.forEach(t),_Ye=r(v7e," \u2014 "),CS=n(v7e,"A",{href:!0});var sjr=s(CS);uYe=r(sjr,"MLukeTokenizer"),sjr.forEach(t),bYe=r(v7e," (mLUKE model)"),v7e.forEach(t),FYe=i(w),Ts=n(w,"LI",{});var D8=s(Ts);GZ=n(D8,"STRONG",{});var ljr=s(GZ);vYe=r(ljr,"mobilebert"),ljr.forEach(t),TYe=r(D8," \u2014 "),wS=n(D8,"A",{href:!0});var ijr=s(wS);MYe=r(ijr,"MobileBertTokenizer"),ijr.forEach(t),EYe=r(D8," or "),AS=n(D8,"A",{href:!0});var djr=s(AS);CYe=r(djr,"MobileBertTokenizerFast"),djr.forEach(t),wYe=r(D8," (MobileBERT model)"),D8.forEach(t),AYe=i(w),Ms=n(w,"LI",{});var G8=s(Ms);OZ=n(G8,"STRONG",{});var cjr=s(OZ);yYe=r(cjr,"mpnet"),cjr.forEach(t),LYe=r(G8," \u2014 "),yS=n(G8,"A",{href:!0});var fjr=s(yS);xYe=r(fjr,"MPNetTokenizer"),fjr.forEach(t),kYe=r(G8," or "),LS=n(G8,"A",{href:!0});var mjr=s(LS);SYe=r(mjr,"MPNetTokenizerFast"),mjr.forEach(t),RYe=r(G8," (MPNet model)"),G8.forEach(t),BYe=i(w),Es=n(w,"LI",{});var O8=s(Es);VZ=n(O8,"STRONG",{});var gjr=s(VZ);PYe=r(gjr,"mt5"),gjr.forEach(t),$Ye=r(O8," \u2014 "),xS=n(O8,"A",{href:!0});var hjr=s(xS);IYe=r(hjr,"MT5Tokenizer"),hjr.forEach(t),qYe=r(O8," or "),kS=n(O8,"A",{href:!0});var pjr=s(kS);NYe=r(pjr,"MT5TokenizerFast"),pjr.forEach(t),jYe=r(O8," (mT5 model)"),O8.forEach(t),DYe=i(w),Cs=n(w,"LI",{});var V8=s(Cs);XZ=n(V8,"STRONG",{});var _jr=s(XZ);GYe=r(_jr,"openai-gpt"),_jr.forEach(t),OYe=r(V8," \u2014 "),SS=n(V8,"A",{href:!0});var ujr=s(SS);VYe=r(ujr,"OpenAIGPTTokenizer"),ujr.forEach(t),XYe=r(V8," or "),RS=n(V8,"A",{href:!0});var bjr=s(RS);zYe=r(bjr,"OpenAIGPTTokenizerFast"),bjr.forEach(t),QYe=r(V8," (OpenAI GPT model)"),V8.forEach(t),WYe=i(w),ws=n(w,"LI",{});var X8=s(ws);zZ=n(X8,"STRONG",{});var Fjr=s(zZ);HYe=r(Fjr,"pegasus"),Fjr.forEach(t),UYe=r(X8," \u2014 "),BS=n(X8,"A",{href:!0});var vjr=s(BS);JYe=r(vjr,"PegasusTokenizer"),vjr.forEach(t),YYe=r(X8," or "),PS=n(X8,"A",{href:!0});var Tjr=s(PS);KYe=r(Tjr,"PegasusTokenizerFast"),Tjr.forEach(t),ZYe=r(X8," (Pegasus model)"),X8.forEach(t),eKe=i(w),Zg=n(w,"LI",{});var T7e=s(Zg);QZ=n(T7e,"STRONG",{});var Mjr=s(QZ);oKe=r(Mjr,"perceiver"),Mjr.forEach(t),rKe=r(T7e," \u2014 "),$S=n(T7e,"A",{href:!0});var Ejr=s($S);tKe=r(Ejr,"PerceiverTokenizer"),Ejr.forEach(t),aKe=r(T7e," (Perceiver model)"),T7e.forEach(t),nKe=i(w),eh=n(w,"LI",{});var M7e=s(eh);WZ=n(M7e,"STRONG",{});var Cjr=s(WZ);sKe=r(Cjr,"phobert"),Cjr.forEach(t),lKe=r(M7e," \u2014 "),IS=n(M7e,"A",{href:!0});var wjr=s(IS);iKe=r(wjr,"PhobertTokenizer"),wjr.forEach(t),dKe=r(M7e," (PhoBERT model)"),M7e.forEach(t),cKe=i(w),oh=n(w,"LI",{});var E7e=s(oh);HZ=n(E7e,"STRONG",{});var Ajr=s(HZ);fKe=r(Ajr,"plbart"),Ajr.forEach(t),mKe=r(E7e," \u2014 "),qS=n(E7e,"A",{href:!0});var yjr=s(qS);gKe=r(yjr,"PLBartTokenizer"),yjr.forEach(t),hKe=r(E7e," (PLBart model)"),E7e.forEach(t),pKe=i(w),rh=n(w,"LI",{});var C7e=s(rh);UZ=n(C7e,"STRONG",{});var Ljr=s(UZ);_Ke=r(Ljr,"prophetnet"),Ljr.forEach(t),uKe=r(C7e," \u2014 "),NS=n(C7e,"A",{href:!0});var xjr=s(NS);bKe=r(xjr,"ProphetNetTokenizer"),xjr.forEach(t),FKe=r(C7e," (ProphetNet model)"),C7e.forEach(t),vKe=i(w),As=n(w,"LI",{});var z8=s(As);JZ=n(z8,"STRONG",{});var kjr=s(JZ);TKe=r(kjr,"qdqbert"),kjr.forEach(t),MKe=r(z8," \u2014 "),jS=n(z8,"A",{href:!0});var Sjr=s(jS);EKe=r(Sjr,"BertTokenizer"),Sjr.forEach(t),CKe=r(z8," or "),DS=n(z8,"A",{href:!0});var Rjr=s(DS);wKe=r(Rjr,"BertTokenizerFast"),Rjr.forEach(t),AKe=r(z8," (QDQBert model)"),z8.forEach(t),yKe=i(w),th=n(w,"LI",{});var w7e=s(th);YZ=n(w7e,"STRONG",{});var Bjr=s(YZ);LKe=r(Bjr,"rag"),Bjr.forEach(t),xKe=r(w7e," \u2014 "),GS=n(w7e,"A",{href:!0});var Pjr=s(GS);kKe=r(Pjr,"RagTokenizer"),Pjr.forEach(t),SKe=r(w7e," (RAG model)"),w7e.forEach(t),RKe=i(w),ys=n(w,"LI",{});var Q8=s(ys);KZ=n(Q8,"STRONG",{});var $jr=s(KZ);BKe=r($jr,"realm"),$jr.forEach(t),PKe=r(Q8," \u2014 "),OS=n(Q8,"A",{href:!0});var Ijr=s(OS);$Ke=r(Ijr,"RealmTokenizer"),Ijr.forEach(t),IKe=r(Q8," or "),VS=n(Q8,"A",{href:!0});var qjr=s(VS);qKe=r(qjr,"RealmTokenizerFast"),qjr.forEach(t),NKe=r(Q8," (Realm model)"),Q8.forEach(t),jKe=i(w),Ls=n(w,"LI",{});var W8=s(Ls);ZZ=n(W8,"STRONG",{});var Njr=s(ZZ);DKe=r(Njr,"reformer"),Njr.forEach(t),GKe=r(W8," \u2014 "),XS=n(W8,"A",{href:!0});var jjr=s(XS);OKe=r(jjr,"ReformerTokenizer"),jjr.forEach(t),VKe=r(W8," or "),zS=n(W8,"A",{href:!0});var Djr=s(zS);XKe=r(Djr,"ReformerTokenizerFast"),Djr.forEach(t),zKe=r(W8," (Reformer model)"),W8.forEach(t),QKe=i(w),xs=n(w,"LI",{});var H8=s(xs);eee=n(H8,"STRONG",{});var Gjr=s(eee);WKe=r(Gjr,"rembert"),Gjr.forEach(t),HKe=r(H8," \u2014 "),QS=n(H8,"A",{href:!0});var Ojr=s(QS);UKe=r(Ojr,"RemBertTokenizer"),Ojr.forEach(t),JKe=r(H8," or "),WS=n(H8,"A",{href:!0});var Vjr=s(WS);YKe=r(Vjr,"RemBertTokenizerFast"),Vjr.forEach(t),KKe=r(H8," (RemBERT model)"),H8.forEach(t),ZKe=i(w),ks=n(w,"LI",{});var U8=s(ks);oee=n(U8,"STRONG",{});var Xjr=s(oee);eZe=r(Xjr,"retribert"),Xjr.forEach(t),oZe=r(U8," \u2014 "),HS=n(U8,"A",{href:!0});var zjr=s(HS);rZe=r(zjr,"RetriBertTokenizer"),zjr.forEach(t),tZe=r(U8," or "),US=n(U8,"A",{href:!0});var Qjr=s(US);aZe=r(Qjr,"RetriBertTokenizerFast"),Qjr.forEach(t),nZe=r(U8," (RetriBERT model)"),U8.forEach(t),sZe=i(w),Ss=n(w,"LI",{});var J8=s(Ss);ree=n(J8,"STRONG",{});var Wjr=s(ree);lZe=r(Wjr,"roberta"),Wjr.forEach(t),iZe=r(J8," \u2014 "),JS=n(J8,"A",{href:!0});var Hjr=s(JS);dZe=r(Hjr,"RobertaTokenizer"),Hjr.forEach(t),cZe=r(J8," or "),YS=n(J8,"A",{href:!0});var Ujr=s(YS);fZe=r(Ujr,"RobertaTokenizerFast"),Ujr.forEach(t),mZe=r(J8," (RoBERTa model)"),J8.forEach(t),gZe=i(w),Rs=n(w,"LI",{});var Y8=s(Rs);tee=n(Y8,"STRONG",{});var Jjr=s(tee);hZe=r(Jjr,"roformer"),Jjr.forEach(t),pZe=r(Y8," \u2014 "),KS=n(Y8,"A",{href:!0});var Yjr=s(KS);_Ze=r(Yjr,"RoFormerTokenizer"),Yjr.forEach(t),uZe=r(Y8," or "),ZS=n(Y8,"A",{href:!0});var Kjr=s(ZS);bZe=r(Kjr,"RoFormerTokenizerFast"),Kjr.forEach(t),FZe=r(Y8," (RoFormer model)"),Y8.forEach(t),vZe=i(w),ah=n(w,"LI",{});var A7e=s(ah);aee=n(A7e,"STRONG",{});var Zjr=s(aee);TZe=r(Zjr,"speech_to_text"),Zjr.forEach(t),MZe=r(A7e," \u2014 "),eR=n(A7e,"A",{href:!0});var eDr=s(eR);EZe=r(eDr,"Speech2TextTokenizer"),eDr.forEach(t),CZe=r(A7e," (Speech2Text model)"),A7e.forEach(t),wZe=i(w),nh=n(w,"LI",{});var y7e=s(nh);nee=n(y7e,"STRONG",{});var oDr=s(nee);AZe=r(oDr,"speech_to_text_2"),oDr.forEach(t),yZe=r(y7e," \u2014 "),oR=n(y7e,"A",{href:!0});var rDr=s(oR);LZe=r(rDr,"Speech2Text2Tokenizer"),rDr.forEach(t),xZe=r(y7e," (Speech2Text2 model)"),y7e.forEach(t),kZe=i(w),Bs=n(w,"LI",{});var K8=s(Bs);see=n(K8,"STRONG",{});var tDr=s(see);SZe=r(tDr,"splinter"),tDr.forEach(t),RZe=r(K8," \u2014 "),rR=n(K8,"A",{href:!0});var aDr=s(rR);BZe=r(aDr,"SplinterTokenizer"),aDr.forEach(t),PZe=r(K8," or "),tR=n(K8,"A",{href:!0});var nDr=s(tR);$Ze=r(nDr,"SplinterTokenizerFast"),nDr.forEach(t),IZe=r(K8," (Splinter model)"),K8.forEach(t),qZe=i(w),Ps=n(w,"LI",{});var Z8=s(Ps);lee=n(Z8,"STRONG",{});var sDr=s(lee);NZe=r(sDr,"squeezebert"),sDr.forEach(t),jZe=r(Z8," \u2014 "),aR=n(Z8,"A",{href:!0});var lDr=s(aR);DZe=r(lDr,"SqueezeBertTokenizer"),lDr.forEach(t),GZe=r(Z8," or "),nR=n(Z8,"A",{href:!0});var iDr=s(nR);OZe=r(iDr,"SqueezeBertTokenizerFast"),iDr.forEach(t),VZe=r(Z8," (SqueezeBERT model)"),Z8.forEach(t),XZe=i(w),$s=n(w,"LI",{});var e9=s($s);iee=n(e9,"STRONG",{});var dDr=s(iee);zZe=r(dDr,"t5"),dDr.forEach(t),QZe=r(e9," \u2014 "),sR=n(e9,"A",{href:!0});var cDr=s(sR);WZe=r(cDr,"T5Tokenizer"),cDr.forEach(t),HZe=r(e9," or "),lR=n(e9,"A",{href:!0});var fDr=s(lR);UZe=r(fDr,"T5TokenizerFast"),fDr.forEach(t),JZe=r(e9," (T5 model)"),e9.forEach(t),YZe=i(w),sh=n(w,"LI",{});var L7e=s(sh);dee=n(L7e,"STRONG",{});var mDr=s(dee);KZe=r(mDr,"tapas"),mDr.forEach(t),ZZe=r(L7e," \u2014 "),iR=n(L7e,"A",{href:!0});var gDr=s(iR);eeo=r(gDr,"TapasTokenizer"),gDr.forEach(t),oeo=r(L7e," (TAPAS model)"),L7e.forEach(t),reo=i(w),lh=n(w,"LI",{});var x7e=s(lh);cee=n(x7e,"STRONG",{});var hDr=s(cee);teo=r(hDr,"transfo-xl"),hDr.forEach(t),aeo=r(x7e," \u2014 "),dR=n(x7e,"A",{href:!0});var pDr=s(dR);neo=r(pDr,"TransfoXLTokenizer"),pDr.forEach(t),seo=r(x7e," (Transformer-XL model)"),x7e.forEach(t),leo=i(w),ih=n(w,"LI",{});var k7e=s(ih);fee=n(k7e,"STRONG",{});var _Dr=s(fee);ieo=r(_Dr,"wav2vec2"),_Dr.forEach(t),deo=r(k7e," \u2014 "),cR=n(k7e,"A",{href:!0});var uDr=s(cR);ceo=r(uDr,"Wav2Vec2CTCTokenizer"),uDr.forEach(t),feo=r(k7e," (Wav2Vec2 model)"),k7e.forEach(t),meo=i(w),dh=n(w,"LI",{});var S7e=s(dh);mee=n(S7e,"STRONG",{});var bDr=s(mee);geo=r(bDr,"wav2vec2_phoneme"),bDr.forEach(t),heo=r(S7e," \u2014 "),fR=n(S7e,"A",{href:!0});var FDr=s(fR);peo=r(FDr,"Wav2Vec2PhonemeCTCTokenizer"),FDr.forEach(t),_eo=r(S7e," (Wav2Vec2Phoneme model)"),S7e.forEach(t),ueo=i(w),Is=n(w,"LI",{});var o9=s(Is);gee=n(o9,"STRONG",{});var vDr=s(gee);beo=r(vDr,"xglm"),vDr.forEach(t),Feo=r(o9," \u2014 "),mR=n(o9,"A",{href:!0});var TDr=s(mR);veo=r(TDr,"XGLMTokenizer"),TDr.forEach(t),Teo=r(o9," or "),gR=n(o9,"A",{href:!0});var MDr=s(gR);Meo=r(MDr,"XGLMTokenizerFast"),MDr.forEach(t),Eeo=r(o9," (XGLM model)"),o9.forEach(t),Ceo=i(w),ch=n(w,"LI",{});var R7e=s(ch);hee=n(R7e,"STRONG",{});var EDr=s(hee);weo=r(EDr,"xlm"),EDr.forEach(t),Aeo=r(R7e," \u2014 "),hR=n(R7e,"A",{href:!0});var CDr=s(hR);yeo=r(CDr,"XLMTokenizer"),CDr.forEach(t),Leo=r(R7e," (XLM model)"),R7e.forEach(t),xeo=i(w),fh=n(w,"LI",{});var B7e=s(fh);pee=n(B7e,"STRONG",{});var wDr=s(pee);keo=r(wDr,"xlm-prophetnet"),wDr.forEach(t),Seo=r(B7e," \u2014 "),pR=n(B7e,"A",{href:!0});var ADr=s(pR);Reo=r(ADr,"XLMProphetNetTokenizer"),ADr.forEach(t),Beo=r(B7e," (XLMProphetNet model)"),B7e.forEach(t),Peo=i(w),qs=n(w,"LI",{});var r9=s(qs);_ee=n(r9,"STRONG",{});var yDr=s(_ee);$eo=r(yDr,"xlm-roberta"),yDr.forEach(t),Ieo=r(r9," \u2014 "),_R=n(r9,"A",{href:!0});var LDr=s(_R);qeo=r(LDr,"XLMRobertaTokenizer"),LDr.forEach(t),Neo=r(r9," or "),uR=n(r9,"A",{href:!0});var xDr=s(uR);jeo=r(xDr,"XLMRobertaTokenizerFast"),xDr.forEach(t),Deo=r(r9," (XLM-RoBERTa model)"),r9.forEach(t),Geo=i(w),Ns=n(w,"LI",{});var t9=s(Ns);uee=n(t9,"STRONG",{});var kDr=s(uee);Oeo=r(kDr,"xlnet"),kDr.forEach(t),Veo=r(t9," \u2014 "),bR=n(t9,"A",{href:!0});var SDr=s(bR);Xeo=r(SDr,"XLNetTokenizer"),SDr.forEach(t),zeo=r(t9," or "),FR=n(t9,"A",{href:!0});var RDr=s(FR);Qeo=r(RDr,"XLNetTokenizerFast"),RDr.forEach(t),Weo=r(t9," (XLNet model)"),t9.forEach(t),w.forEach(t),Heo=i(ha),bee=n(ha,"P",{});var BDr=s(bee);Ueo=r(BDr,"Examples:"),BDr.forEach(t),Jeo=i(ha),m(BE.$$.fragment,ha),ha.forEach(t),Yeo=i(Vs),mh=n(Vs,"DIV",{class:!0});var JBe=s(mh);m(PE.$$.fragment,JBe),Keo=i(JBe),Fee=n(JBe,"P",{});var PDr=s(Fee);Zeo=r(PDr,"Register a new tokenizer in this mapping."),PDr.forEach(t),JBe.forEach(t),Vs.forEach(t),QSe=i(c),Wi=n(c,"H2",{class:!0});var YBe=s(Wi);gh=n(YBe,"A",{id:!0,class:!0,href:!0});var $Dr=s(gh);vee=n($Dr,"SPAN",{});var IDr=s(vee);m($E.$$.fragment,IDr),IDr.forEach(t),$Dr.forEach(t),eoo=i(YBe),Tee=n(YBe,"SPAN",{});var qDr=s(Tee);ooo=r(qDr,"AutoFeatureExtractor"),qDr.forEach(t),YBe.forEach(t),WSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(IE.$$.fragment,Xs),roo=i(Xs),qE=n(Xs,"P",{});var KBe=s(qE);too=r(KBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),vR=n(KBe,"A",{href:!0});var NDr=s(vR);aoo=r(NDr,"AutoFeatureExtractor.from_pretrained()"),NDr.forEach(t),noo=r(KBe," class method."),KBe.forEach(t),soo=i(Xs),NE=n(Xs,"P",{});var ZBe=s(NE);loo=r(ZBe,"This class cannot be instantiated directly using "),Mee=n(ZBe,"CODE",{});var jDr=s(Mee);ioo=r(jDr,"__init__()"),jDr.forEach(t),doo=r(ZBe," (throws an error)."),ZBe.forEach(t),coo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(jE.$$.fragment,Nt),foo=i(Nt),Eee=n(Nt,"P",{});var DDr=s(Eee);moo=r(DDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DDr.forEach(t),goo=i(Nt),Va=n(Nt,"P",{});var b4=s(Va);hoo=r(b4,"The feature extractor class to instantiate is selected based on the "),Cee=n(b4,"CODE",{});var GDr=s(Cee);poo=r(GDr,"model_type"),GDr.forEach(t),_oo=r(b4,` property of the config object
(either passed as an argument or loaded from `),wee=n(b4,"CODE",{});var ODr=s(wee);uoo=r(ODr,"pretrained_model_name_or_path"),ODr.forEach(t),boo=r(b4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Aee=n(b4,"CODE",{});var VDr=s(Aee);Foo=r(VDr,"pretrained_model_name_or_path"),VDr.forEach(t),voo=r(b4,":"),b4.forEach(t),Too=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var P7e=s(hh);yee=n(P7e,"STRONG",{});var XDr=s(yee);Moo=r(XDr,"beit"),XDr.forEach(t),Eoo=r(P7e," \u2014 "),TR=n(P7e,"A",{href:!0});var zDr=s(TR);Coo=r(zDr,"BeitFeatureExtractor"),zDr.forEach(t),woo=r(P7e," (BEiT model)"),P7e.forEach(t),Aoo=i(ne),ph=n(ne,"LI",{});var $7e=s(ph);Lee=n($7e,"STRONG",{});var QDr=s(Lee);yoo=r(QDr,"clip"),QDr.forEach(t),Loo=r($7e," \u2014 "),MR=n($7e,"A",{href:!0});var WDr=s(MR);xoo=r(WDr,"CLIPFeatureExtractor"),WDr.forEach(t),koo=r($7e," (CLIP model)"),$7e.forEach(t),Soo=i(ne),_h=n(ne,"LI",{});var I7e=s(_h);xee=n(I7e,"STRONG",{});var HDr=s(xee);Roo=r(HDr,"convnext"),HDr.forEach(t),Boo=r(I7e," \u2014 "),ER=n(I7e,"A",{href:!0});var UDr=s(ER);Poo=r(UDr,"ConvNextFeatureExtractor"),UDr.forEach(t),$oo=r(I7e," (ConvNext model)"),I7e.forEach(t),Ioo=i(ne),uh=n(ne,"LI",{});var q7e=s(uh);kee=n(q7e,"STRONG",{});var JDr=s(kee);qoo=r(JDr,"deit"),JDr.forEach(t),Noo=r(q7e," \u2014 "),CR=n(q7e,"A",{href:!0});var YDr=s(CR);joo=r(YDr,"DeiTFeatureExtractor"),YDr.forEach(t),Doo=r(q7e," (DeiT model)"),q7e.forEach(t),Goo=i(ne),bh=n(ne,"LI",{});var N7e=s(bh);See=n(N7e,"STRONG",{});var KDr=s(See);Ooo=r(KDr,"detr"),KDr.forEach(t),Voo=r(N7e," \u2014 "),wR=n(N7e,"A",{href:!0});var ZDr=s(wR);Xoo=r(ZDr,"DetrFeatureExtractor"),ZDr.forEach(t),zoo=r(N7e," (DETR model)"),N7e.forEach(t),Qoo=i(ne),Fh=n(ne,"LI",{});var j7e=s(Fh);Ree=n(j7e,"STRONG",{});var eGr=s(Ree);Woo=r(eGr,"hubert"),eGr.forEach(t),Hoo=r(j7e," \u2014 "),AR=n(j7e,"A",{href:!0});var oGr=s(AR);Uoo=r(oGr,"Wav2Vec2FeatureExtractor"),oGr.forEach(t),Joo=r(j7e," (Hubert model)"),j7e.forEach(t),Yoo=i(ne),vh=n(ne,"LI",{});var D7e=s(vh);Bee=n(D7e,"STRONG",{});var rGr=s(Bee);Koo=r(rGr,"layoutlmv2"),rGr.forEach(t),Zoo=r(D7e," \u2014 "),yR=n(D7e,"A",{href:!0});var tGr=s(yR);ero=r(tGr,"LayoutLMv2FeatureExtractor"),tGr.forEach(t),oro=r(D7e," (LayoutLMv2 model)"),D7e.forEach(t),rro=i(ne),Th=n(ne,"LI",{});var G7e=s(Th);Pee=n(G7e,"STRONG",{});var aGr=s(Pee);tro=r(aGr,"maskformer"),aGr.forEach(t),aro=r(G7e," \u2014 "),LR=n(G7e,"A",{href:!0});var nGr=s(LR);nro=r(nGr,"MaskFormerFeatureExtractor"),nGr.forEach(t),sro=r(G7e," (MaskFormer model)"),G7e.forEach(t),lro=i(ne),Mh=n(ne,"LI",{});var O7e=s(Mh);$ee=n(O7e,"STRONG",{});var sGr=s($ee);iro=r(sGr,"perceiver"),sGr.forEach(t),dro=r(O7e," \u2014 "),xR=n(O7e,"A",{href:!0});var lGr=s(xR);cro=r(lGr,"PerceiverFeatureExtractor"),lGr.forEach(t),fro=r(O7e," (Perceiver model)"),O7e.forEach(t),mro=i(ne),Eh=n(ne,"LI",{});var V7e=s(Eh);Iee=n(V7e,"STRONG",{});var iGr=s(Iee);gro=r(iGr,"poolformer"),iGr.forEach(t),hro=r(V7e," \u2014 "),kR=n(V7e,"A",{href:!0});var dGr=s(kR);pro=r(dGr,"PoolFormerFeatureExtractor"),dGr.forEach(t),_ro=r(V7e," (PoolFormer model)"),V7e.forEach(t),uro=i(ne),Ch=n(ne,"LI",{});var X7e=s(Ch);qee=n(X7e,"STRONG",{});var cGr=s(qee);bro=r(cGr,"resnet"),cGr.forEach(t),Fro=r(X7e," \u2014 "),SR=n(X7e,"A",{href:!0});var fGr=s(SR);vro=r(fGr,"ConvNextFeatureExtractor"),fGr.forEach(t),Tro=r(X7e," (ResNet model)"),X7e.forEach(t),Mro=i(ne),wh=n(ne,"LI",{});var z7e=s(wh);Nee=n(z7e,"STRONG",{});var mGr=s(Nee);Ero=r(mGr,"segformer"),mGr.forEach(t),Cro=r(z7e," \u2014 "),RR=n(z7e,"A",{href:!0});var gGr=s(RR);wro=r(gGr,"SegformerFeatureExtractor"),gGr.forEach(t),Aro=r(z7e," (SegFormer model)"),z7e.forEach(t),yro=i(ne),Ah=n(ne,"LI",{});var Q7e=s(Ah);jee=n(Q7e,"STRONG",{});var hGr=s(jee);Lro=r(hGr,"speech_to_text"),hGr.forEach(t),xro=r(Q7e," \u2014 "),BR=n(Q7e,"A",{href:!0});var pGr=s(BR);kro=r(pGr,"Speech2TextFeatureExtractor"),pGr.forEach(t),Sro=r(Q7e," (Speech2Text model)"),Q7e.forEach(t),Rro=i(ne),yh=n(ne,"LI",{});var W7e=s(yh);Dee=n(W7e,"STRONG",{});var _Gr=s(Dee);Bro=r(_Gr,"swin"),_Gr.forEach(t),Pro=r(W7e," \u2014 "),PR=n(W7e,"A",{href:!0});var uGr=s(PR);$ro=r(uGr,"ViTFeatureExtractor"),uGr.forEach(t),Iro=r(W7e," (Swin model)"),W7e.forEach(t),qro=i(ne),Lh=n(ne,"LI",{});var H7e=s(Lh);Gee=n(H7e,"STRONG",{});var bGr=s(Gee);Nro=r(bGr,"van"),bGr.forEach(t),jro=r(H7e," \u2014 "),$R=n(H7e,"A",{href:!0});var FGr=s($R);Dro=r(FGr,"ConvNextFeatureExtractor"),FGr.forEach(t),Gro=r(H7e," (VAN model)"),H7e.forEach(t),Oro=i(ne),xh=n(ne,"LI",{});var U7e=s(xh);Oee=n(U7e,"STRONG",{});var vGr=s(Oee);Vro=r(vGr,"vit"),vGr.forEach(t),Xro=r(U7e," \u2014 "),IR=n(U7e,"A",{href:!0});var TGr=s(IR);zro=r(TGr,"ViTFeatureExtractor"),TGr.forEach(t),Qro=r(U7e," (ViT model)"),U7e.forEach(t),Wro=i(ne),kh=n(ne,"LI",{});var J7e=s(kh);Vee=n(J7e,"STRONG",{});var MGr=s(Vee);Hro=r(MGr,"vit_mae"),MGr.forEach(t),Uro=r(J7e," \u2014 "),qR=n(J7e,"A",{href:!0});var EGr=s(qR);Jro=r(EGr,"ViTFeatureExtractor"),EGr.forEach(t),Yro=r(J7e," (ViTMAE model)"),J7e.forEach(t),Kro=i(ne),Sh=n(ne,"LI",{});var Y7e=s(Sh);Xee=n(Y7e,"STRONG",{});var CGr=s(Xee);Zro=r(CGr,"wav2vec2"),CGr.forEach(t),eto=r(Y7e," \u2014 "),NR=n(Y7e,"A",{href:!0});var wGr=s(NR);oto=r(wGr,"Wav2Vec2FeatureExtractor"),wGr.forEach(t),rto=r(Y7e," (Wav2Vec2 model)"),Y7e.forEach(t),ne.forEach(t),tto=i(Nt),m(Rh.$$.fragment,Nt),ato=i(Nt),zee=n(Nt,"P",{});var AGr=s(zee);nto=r(AGr,"Examples:"),AGr.forEach(t),sto=i(Nt),m(DE.$$.fragment,Nt),Nt.forEach(t),lto=i(Xs),Bh=n(Xs,"DIV",{class:!0});var ePe=s(Bh);m(GE.$$.fragment,ePe),ito=i(ePe),Qee=n(ePe,"P",{});var yGr=s(Qee);dto=r(yGr,"Register a new feature extractor for this class."),yGr.forEach(t),ePe.forEach(t),Xs.forEach(t),HSe=i(c),Hi=n(c,"H2",{class:!0});var oPe=s(Hi);Ph=n(oPe,"A",{id:!0,class:!0,href:!0});var LGr=s(Ph);Wee=n(LGr,"SPAN",{});var xGr=s(Wee);m(OE.$$.fragment,xGr),xGr.forEach(t),LGr.forEach(t),cto=i(oPe),Hee=n(oPe,"SPAN",{});var kGr=s(Hee);fto=r(kGr,"AutoProcessor"),kGr.forEach(t),oPe.forEach(t),USe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(VE.$$.fragment,zs),mto=i(zs),XE=n(zs,"P",{});var rPe=s(XE);gto=r(rPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),jR=n(rPe,"A",{href:!0});var SGr=s(jR);hto=r(SGr,"AutoProcessor.from_pretrained()"),SGr.forEach(t),pto=r(rPe," class method."),rPe.forEach(t),_to=i(zs),zE=n(zs,"P",{});var tPe=s(zE);uto=r(tPe,"This class cannot be instantiated directly using "),Uee=n(tPe,"CODE",{});var RGr=s(Uee);bto=r(RGr,"__init__()"),RGr.forEach(t),Fto=r(tPe," (throws an error)."),tPe.forEach(t),vto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(QE.$$.fragment,jt),Tto=i(jt),Jee=n(jt,"P",{});var BGr=s(Jee);Mto=r(BGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),BGr.forEach(t),Eto=i(jt),Ui=n(jt,"P",{});var HH=s(Ui);Cto=r(HH,"The processor class to instantiate is selected based on the "),Yee=n(HH,"CODE",{});var PGr=s(Yee);wto=r(PGr,"model_type"),PGr.forEach(t),Ato=r(HH,` property of the config object (either
passed as an argument or loaded from `),Kee=n(HH,"CODE",{});var $Gr=s(Kee);yto=r($Gr,"pretrained_model_name_or_path"),$Gr.forEach(t),Lto=r(HH," if possible):"),HH.forEach(t),xto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var K7e=s($h);Zee=n(K7e,"STRONG",{});var IGr=s(Zee);kto=r(IGr,"clip"),IGr.forEach(t),Sto=r(K7e," \u2014 "),DR=n(K7e,"A",{href:!0});var qGr=s(DR);Rto=r(qGr,"CLIPProcessor"),qGr.forEach(t),Bto=r(K7e," (CLIP model)"),K7e.forEach(t),Pto=i(jo),Ih=n(jo,"LI",{});var Z7e=s(Ih);eoe=n(Z7e,"STRONG",{});var NGr=s(eoe);$to=r(NGr,"layoutlmv2"),NGr.forEach(t),Ito=r(Z7e," \u2014 "),GR=n(Z7e,"A",{href:!0});var jGr=s(GR);qto=r(jGr,"LayoutLMv2Processor"),jGr.forEach(t),Nto=r(Z7e," (LayoutLMv2 model)"),Z7e.forEach(t),jto=i(jo),qh=n(jo,"LI",{});var eMe=s(qh);ooe=n(eMe,"STRONG",{});var DGr=s(ooe);Dto=r(DGr,"layoutxlm"),DGr.forEach(t),Gto=r(eMe," \u2014 "),OR=n(eMe,"A",{href:!0});var GGr=s(OR);Oto=r(GGr,"LayoutXLMProcessor"),GGr.forEach(t),Vto=r(eMe," (LayoutXLM model)"),eMe.forEach(t),Xto=i(jo),Nh=n(jo,"LI",{});var oMe=s(Nh);roe=n(oMe,"STRONG",{});var OGr=s(roe);zto=r(OGr,"speech_to_text"),OGr.forEach(t),Qto=r(oMe," \u2014 "),VR=n(oMe,"A",{href:!0});var VGr=s(VR);Wto=r(VGr,"Speech2TextProcessor"),VGr.forEach(t),Hto=r(oMe," (Speech2Text model)"),oMe.forEach(t),Uto=i(jo),jh=n(jo,"LI",{});var rMe=s(jh);toe=n(rMe,"STRONG",{});var XGr=s(toe);Jto=r(XGr,"speech_to_text_2"),XGr.forEach(t),Yto=r(rMe," \u2014 "),XR=n(rMe,"A",{href:!0});var zGr=s(XR);Kto=r(zGr,"Speech2Text2Processor"),zGr.forEach(t),Zto=r(rMe," (Speech2Text2 model)"),rMe.forEach(t),eao=i(jo),Dh=n(jo,"LI",{});var tMe=s(Dh);aoe=n(tMe,"STRONG",{});var QGr=s(aoe);oao=r(QGr,"trocr"),QGr.forEach(t),rao=r(tMe," \u2014 "),zR=n(tMe,"A",{href:!0});var WGr=s(zR);tao=r(WGr,"TrOCRProcessor"),WGr.forEach(t),aao=r(tMe," (TrOCR model)"),tMe.forEach(t),nao=i(jo),Gh=n(jo,"LI",{});var aMe=s(Gh);noe=n(aMe,"STRONG",{});var HGr=s(noe);sao=r(HGr,"vision-text-dual-encoder"),HGr.forEach(t),lao=r(aMe," \u2014 "),QR=n(aMe,"A",{href:!0});var UGr=s(QR);iao=r(UGr,"VisionTextDualEncoderProcessor"),UGr.forEach(t),dao=r(aMe," (VisionTextDualEncoder model)"),aMe.forEach(t),cao=i(jo),Oh=n(jo,"LI",{});var nMe=s(Oh);soe=n(nMe,"STRONG",{});var JGr=s(soe);fao=r(JGr,"wav2vec2"),JGr.forEach(t),mao=r(nMe," \u2014 "),WR=n(nMe,"A",{href:!0});var YGr=s(WR);gao=r(YGr,"Wav2Vec2Processor"),YGr.forEach(t),hao=r(nMe," (Wav2Vec2 model)"),nMe.forEach(t),jo.forEach(t),pao=i(jt),m(Vh.$$.fragment,jt),_ao=i(jt),loe=n(jt,"P",{});var KGr=s(loe);uao=r(KGr,"Examples:"),KGr.forEach(t),bao=i(jt),m(WE.$$.fragment,jt),jt.forEach(t),Fao=i(zs),Xh=n(zs,"DIV",{class:!0});var aPe=s(Xh);m(HE.$$.fragment,aPe),vao=i(aPe),ioe=n(aPe,"P",{});var ZGr=s(ioe);Tao=r(ZGr,"Register a new processor for this class."),ZGr.forEach(t),aPe.forEach(t),zs.forEach(t),JSe=i(c),Ji=n(c,"H2",{class:!0});var nPe=s(Ji);zh=n(nPe,"A",{id:!0,class:!0,href:!0});var eOr=s(zh);doe=n(eOr,"SPAN",{});var oOr=s(doe);m(UE.$$.fragment,oOr),oOr.forEach(t),eOr.forEach(t),Mao=i(nPe),coe=n(nPe,"SPAN",{});var rOr=s(coe);Eao=r(rOr,"AutoModel"),rOr.forEach(t),nPe.forEach(t),YSe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(JE.$$.fragment,Qs),Cao=i(Qs),Yi=n(Qs,"P",{});var UH=s(Yi);wao=r(UH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HR=n(UH,"A",{href:!0});var tOr=s(HR);Aao=r(tOr,"from_pretrained()"),tOr.forEach(t),yao=r(UH," class method or the "),UR=n(UH,"A",{href:!0});var aOr=s(UR);Lao=r(aOr,"from_config()"),aOr.forEach(t),xao=r(UH,` class
method.`),UH.forEach(t),kao=i(Qs),YE=n(Qs,"P",{});var sPe=s(YE);Sao=r(sPe,"This class cannot be instantiated directly using "),foe=n(sPe,"CODE",{});var nOr=s(foe);Rao=r(nOr,"__init__()"),nOr.forEach(t),Bao=r(sPe," (throws an error)."),sPe.forEach(t),Pao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(KE.$$.fragment,Ws),$ao=i(Ws),moe=n(Ws,"P",{});var sOr=s(moe);Iao=r(sOr,"Instantiates one of the base model classes of the library from a configuration."),sOr.forEach(t),qao=i(Ws),Ki=n(Ws,"P",{});var JH=s(Ki);Nao=r(JH,`Note:
Loading a model from its configuration file does `),goe=n(JH,"STRONG",{});var lOr=s(goe);jao=r(lOr,"not"),lOr.forEach(t),Dao=r(JH,` load the model weights. It only affects the
model\u2019s configuration. Use `),JR=n(JH,"A",{href:!0});var iOr=s(JR);Gao=r(iOr,"from_pretrained()"),iOr.forEach(t),Oao=r(JH," to load the model weights."),JH.forEach(t),Vao=i(Ws),hoe=n(Ws,"P",{});var dOr=s(hoe);Xao=r(dOr,"Examples:"),dOr.forEach(t),zao=i(Ws),m(ZE.$$.fragment,Ws),Ws.forEach(t),Qao=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(eC.$$.fragment,Dt),Wao=i(Dt),poe=n(Dt,"P",{});var cOr=s(poe);Hao=r(cOr,"Instantiate one of the base model classes of the library from a pretrained model."),cOr.forEach(t),Uao=i(Dt),Xa=n(Dt,"P",{});var F4=s(Xa);Jao=r(F4,"The model class to instantiate is selected based on the "),_oe=n(F4,"CODE",{});var fOr=s(_oe);Yao=r(fOr,"model_type"),fOr.forEach(t),Kao=r(F4,` property of the config object (either
passed as an argument or loaded from `),uoe=n(F4,"CODE",{});var mOr=s(uoe);Zao=r(mOr,"pretrained_model_name_or_path"),mOr.forEach(t),eno=r(F4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),boe=n(F4,"CODE",{});var gOr=s(boe);ono=r(gOr,"pretrained_model_name_or_path"),gOr.forEach(t),rno=r(F4,":"),F4.forEach(t),tno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var sMe=s(Qh);Foe=n(sMe,"STRONG",{});var hOr=s(Foe);ano=r(hOr,"albert"),hOr.forEach(t),nno=r(sMe," \u2014 "),YR=n(sMe,"A",{href:!0});var pOr=s(YR);sno=r(pOr,"AlbertModel"),pOr.forEach(t),lno=r(sMe," (ALBERT model)"),sMe.forEach(t),ino=i(M),Wh=n(M,"LI",{});var lMe=s(Wh);voe=n(lMe,"STRONG",{});var _Or=s(voe);dno=r(_Or,"bart"),_Or.forEach(t),cno=r(lMe," \u2014 "),KR=n(lMe,"A",{href:!0});var uOr=s(KR);fno=r(uOr,"BartModel"),uOr.forEach(t),mno=r(lMe," (BART model)"),lMe.forEach(t),gno=i(M),Hh=n(M,"LI",{});var iMe=s(Hh);Toe=n(iMe,"STRONG",{});var bOr=s(Toe);hno=r(bOr,"beit"),bOr.forEach(t),pno=r(iMe," \u2014 "),ZR=n(iMe,"A",{href:!0});var FOr=s(ZR);_no=r(FOr,"BeitModel"),FOr.forEach(t),uno=r(iMe," (BEiT model)"),iMe.forEach(t),bno=i(M),Uh=n(M,"LI",{});var dMe=s(Uh);Moe=n(dMe,"STRONG",{});var vOr=s(Moe);Fno=r(vOr,"bert"),vOr.forEach(t),vno=r(dMe," \u2014 "),eB=n(dMe,"A",{href:!0});var TOr=s(eB);Tno=r(TOr,"BertModel"),TOr.forEach(t),Mno=r(dMe," (BERT model)"),dMe.forEach(t),Eno=i(M),Jh=n(M,"LI",{});var cMe=s(Jh);Eoe=n(cMe,"STRONG",{});var MOr=s(Eoe);Cno=r(MOr,"bert-generation"),MOr.forEach(t),wno=r(cMe," \u2014 "),oB=n(cMe,"A",{href:!0});var EOr=s(oB);Ano=r(EOr,"BertGenerationEncoder"),EOr.forEach(t),yno=r(cMe," (Bert Generation model)"),cMe.forEach(t),Lno=i(M),Yh=n(M,"LI",{});var fMe=s(Yh);Coe=n(fMe,"STRONG",{});var COr=s(Coe);xno=r(COr,"big_bird"),COr.forEach(t),kno=r(fMe," \u2014 "),rB=n(fMe,"A",{href:!0});var wOr=s(rB);Sno=r(wOr,"BigBirdModel"),wOr.forEach(t),Rno=r(fMe," (BigBird model)"),fMe.forEach(t),Bno=i(M),Kh=n(M,"LI",{});var mMe=s(Kh);woe=n(mMe,"STRONG",{});var AOr=s(woe);Pno=r(AOr,"bigbird_pegasus"),AOr.forEach(t),$no=r(mMe," \u2014 "),tB=n(mMe,"A",{href:!0});var yOr=s(tB);Ino=r(yOr,"BigBirdPegasusModel"),yOr.forEach(t),qno=r(mMe," (BigBirdPegasus model)"),mMe.forEach(t),Nno=i(M),Zh=n(M,"LI",{});var gMe=s(Zh);Aoe=n(gMe,"STRONG",{});var LOr=s(Aoe);jno=r(LOr,"blenderbot"),LOr.forEach(t),Dno=r(gMe," \u2014 "),aB=n(gMe,"A",{href:!0});var xOr=s(aB);Gno=r(xOr,"BlenderbotModel"),xOr.forEach(t),Ono=r(gMe," (Blenderbot model)"),gMe.forEach(t),Vno=i(M),ep=n(M,"LI",{});var hMe=s(ep);yoe=n(hMe,"STRONG",{});var kOr=s(yoe);Xno=r(kOr,"blenderbot-small"),kOr.forEach(t),zno=r(hMe," \u2014 "),nB=n(hMe,"A",{href:!0});var SOr=s(nB);Qno=r(SOr,"BlenderbotSmallModel"),SOr.forEach(t),Wno=r(hMe," (BlenderbotSmall model)"),hMe.forEach(t),Hno=i(M),op=n(M,"LI",{});var pMe=s(op);Loe=n(pMe,"STRONG",{});var ROr=s(Loe);Uno=r(ROr,"camembert"),ROr.forEach(t),Jno=r(pMe," \u2014 "),sB=n(pMe,"A",{href:!0});var BOr=s(sB);Yno=r(BOr,"CamembertModel"),BOr.forEach(t),Kno=r(pMe," (CamemBERT model)"),pMe.forEach(t),Zno=i(M),rp=n(M,"LI",{});var _Me=s(rp);xoe=n(_Me,"STRONG",{});var POr=s(xoe);eso=r(POr,"canine"),POr.forEach(t),oso=r(_Me," \u2014 "),lB=n(_Me,"A",{href:!0});var $Or=s(lB);rso=r($Or,"CanineModel"),$Or.forEach(t),tso=r(_Me," (Canine model)"),_Me.forEach(t),aso=i(M),tp=n(M,"LI",{});var uMe=s(tp);koe=n(uMe,"STRONG",{});var IOr=s(koe);nso=r(IOr,"clip"),IOr.forEach(t),sso=r(uMe," \u2014 "),iB=n(uMe,"A",{href:!0});var qOr=s(iB);lso=r(qOr,"CLIPModel"),qOr.forEach(t),iso=r(uMe," (CLIP model)"),uMe.forEach(t),dso=i(M),ap=n(M,"LI",{});var bMe=s(ap);Soe=n(bMe,"STRONG",{});var NOr=s(Soe);cso=r(NOr,"convbert"),NOr.forEach(t),fso=r(bMe," \u2014 "),dB=n(bMe,"A",{href:!0});var jOr=s(dB);mso=r(jOr,"ConvBertModel"),jOr.forEach(t),gso=r(bMe," (ConvBERT model)"),bMe.forEach(t),hso=i(M),np=n(M,"LI",{});var FMe=s(np);Roe=n(FMe,"STRONG",{});var DOr=s(Roe);pso=r(DOr,"convnext"),DOr.forEach(t),_so=r(FMe," \u2014 "),cB=n(FMe,"A",{href:!0});var GOr=s(cB);uso=r(GOr,"ConvNextModel"),GOr.forEach(t),bso=r(FMe," (ConvNext model)"),FMe.forEach(t),Fso=i(M),sp=n(M,"LI",{});var vMe=s(sp);Boe=n(vMe,"STRONG",{});var OOr=s(Boe);vso=r(OOr,"ctrl"),OOr.forEach(t),Tso=r(vMe," \u2014 "),fB=n(vMe,"A",{href:!0});var VOr=s(fB);Mso=r(VOr,"CTRLModel"),VOr.forEach(t),Eso=r(vMe," (CTRL model)"),vMe.forEach(t),Cso=i(M),lp=n(M,"LI",{});var TMe=s(lp);Poe=n(TMe,"STRONG",{});var XOr=s(Poe);wso=r(XOr,"data2vec-audio"),XOr.forEach(t),Aso=r(TMe," \u2014 "),mB=n(TMe,"A",{href:!0});var zOr=s(mB);yso=r(zOr,"Data2VecAudioModel"),zOr.forEach(t),Lso=r(TMe," (Data2VecAudio model)"),TMe.forEach(t),xso=i(M),ip=n(M,"LI",{});var MMe=s(ip);$oe=n(MMe,"STRONG",{});var QOr=s($oe);kso=r(QOr,"data2vec-text"),QOr.forEach(t),Sso=r(MMe," \u2014 "),gB=n(MMe,"A",{href:!0});var WOr=s(gB);Rso=r(WOr,"Data2VecTextModel"),WOr.forEach(t),Bso=r(MMe," (Data2VecText model)"),MMe.forEach(t),Pso=i(M),dp=n(M,"LI",{});var EMe=s(dp);Ioe=n(EMe,"STRONG",{});var HOr=s(Ioe);$so=r(HOr,"deberta"),HOr.forEach(t),Iso=r(EMe," \u2014 "),hB=n(EMe,"A",{href:!0});var UOr=s(hB);qso=r(UOr,"DebertaModel"),UOr.forEach(t),Nso=r(EMe," (DeBERTa model)"),EMe.forEach(t),jso=i(M),cp=n(M,"LI",{});var CMe=s(cp);qoe=n(CMe,"STRONG",{});var JOr=s(qoe);Dso=r(JOr,"deberta-v2"),JOr.forEach(t),Gso=r(CMe," \u2014 "),pB=n(CMe,"A",{href:!0});var YOr=s(pB);Oso=r(YOr,"DebertaV2Model"),YOr.forEach(t),Vso=r(CMe," (DeBERTa-v2 model)"),CMe.forEach(t),Xso=i(M),fp=n(M,"LI",{});var wMe=s(fp);Noe=n(wMe,"STRONG",{});var KOr=s(Noe);zso=r(KOr,"decision_transformer"),KOr.forEach(t),Qso=r(wMe," \u2014 "),_B=n(wMe,"A",{href:!0});var ZOr=s(_B);Wso=r(ZOr,"DecisionTransformerModel"),ZOr.forEach(t),Hso=r(wMe," (Decision Transformer model)"),wMe.forEach(t),Uso=i(M),mp=n(M,"LI",{});var AMe=s(mp);joe=n(AMe,"STRONG",{});var eVr=s(joe);Jso=r(eVr,"deit"),eVr.forEach(t),Yso=r(AMe," \u2014 "),uB=n(AMe,"A",{href:!0});var oVr=s(uB);Kso=r(oVr,"DeiTModel"),oVr.forEach(t),Zso=r(AMe," (DeiT model)"),AMe.forEach(t),elo=i(M),gp=n(M,"LI",{});var yMe=s(gp);Doe=n(yMe,"STRONG",{});var rVr=s(Doe);olo=r(rVr,"detr"),rVr.forEach(t),rlo=r(yMe," \u2014 "),bB=n(yMe,"A",{href:!0});var tVr=s(bB);tlo=r(tVr,"DetrModel"),tVr.forEach(t),alo=r(yMe," (DETR model)"),yMe.forEach(t),nlo=i(M),hp=n(M,"LI",{});var LMe=s(hp);Goe=n(LMe,"STRONG",{});var aVr=s(Goe);slo=r(aVr,"distilbert"),aVr.forEach(t),llo=r(LMe," \u2014 "),FB=n(LMe,"A",{href:!0});var nVr=s(FB);ilo=r(nVr,"DistilBertModel"),nVr.forEach(t),dlo=r(LMe," (DistilBERT model)"),LMe.forEach(t),clo=i(M),pp=n(M,"LI",{});var xMe=s(pp);Ooe=n(xMe,"STRONG",{});var sVr=s(Ooe);flo=r(sVr,"dpr"),sVr.forEach(t),mlo=r(xMe," \u2014 "),vB=n(xMe,"A",{href:!0});var lVr=s(vB);glo=r(lVr,"DPRQuestionEncoder"),lVr.forEach(t),hlo=r(xMe," (DPR model)"),xMe.forEach(t),plo=i(M),_p=n(M,"LI",{});var kMe=s(_p);Voe=n(kMe,"STRONG",{});var iVr=s(Voe);_lo=r(iVr,"dpt"),iVr.forEach(t),ulo=r(kMe," \u2014 "),TB=n(kMe,"A",{href:!0});var dVr=s(TB);blo=r(dVr,"DPTModel"),dVr.forEach(t),Flo=r(kMe," (DPT model)"),kMe.forEach(t),vlo=i(M),up=n(M,"LI",{});var SMe=s(up);Xoe=n(SMe,"STRONG",{});var cVr=s(Xoe);Tlo=r(cVr,"electra"),cVr.forEach(t),Mlo=r(SMe," \u2014 "),MB=n(SMe,"A",{href:!0});var fVr=s(MB);Elo=r(fVr,"ElectraModel"),fVr.forEach(t),Clo=r(SMe," (ELECTRA model)"),SMe.forEach(t),wlo=i(M),bp=n(M,"LI",{});var RMe=s(bp);zoe=n(RMe,"STRONG",{});var mVr=s(zoe);Alo=r(mVr,"flaubert"),mVr.forEach(t),ylo=r(RMe," \u2014 "),EB=n(RMe,"A",{href:!0});var gVr=s(EB);Llo=r(gVr,"FlaubertModel"),gVr.forEach(t),xlo=r(RMe," (FlauBERT model)"),RMe.forEach(t),klo=i(M),Fp=n(M,"LI",{});var BMe=s(Fp);Qoe=n(BMe,"STRONG",{});var hVr=s(Qoe);Slo=r(hVr,"fnet"),hVr.forEach(t),Rlo=r(BMe," \u2014 "),CB=n(BMe,"A",{href:!0});var pVr=s(CB);Blo=r(pVr,"FNetModel"),pVr.forEach(t),Plo=r(BMe," (FNet model)"),BMe.forEach(t),$lo=i(M),vp=n(M,"LI",{});var PMe=s(vp);Woe=n(PMe,"STRONG",{});var _Vr=s(Woe);Ilo=r(_Vr,"fsmt"),_Vr.forEach(t),qlo=r(PMe," \u2014 "),wB=n(PMe,"A",{href:!0});var uVr=s(wB);Nlo=r(uVr,"FSMTModel"),uVr.forEach(t),jlo=r(PMe," (FairSeq Machine-Translation model)"),PMe.forEach(t),Dlo=i(M),js=n(M,"LI",{});var a9=s(js);Hoe=n(a9,"STRONG",{});var bVr=s(Hoe);Glo=r(bVr,"funnel"),bVr.forEach(t),Olo=r(a9," \u2014 "),AB=n(a9,"A",{href:!0});var FVr=s(AB);Vlo=r(FVr,"FunnelModel"),FVr.forEach(t),Xlo=r(a9," or "),yB=n(a9,"A",{href:!0});var vVr=s(yB);zlo=r(vVr,"FunnelBaseModel"),vVr.forEach(t),Qlo=r(a9," (Funnel Transformer model)"),a9.forEach(t),Wlo=i(M),Tp=n(M,"LI",{});var $Me=s(Tp);Uoe=n($Me,"STRONG",{});var TVr=s(Uoe);Hlo=r(TVr,"glpn"),TVr.forEach(t),Ulo=r($Me," \u2014 "),LB=n($Me,"A",{href:!0});var MVr=s(LB);Jlo=r(MVr,"GLPNModel"),MVr.forEach(t),Ylo=r($Me," (GLPN model)"),$Me.forEach(t),Klo=i(M),Mp=n(M,"LI",{});var IMe=s(Mp);Joe=n(IMe,"STRONG",{});var EVr=s(Joe);Zlo=r(EVr,"gpt2"),EVr.forEach(t),eio=r(IMe," \u2014 "),xB=n(IMe,"A",{href:!0});var CVr=s(xB);oio=r(CVr,"GPT2Model"),CVr.forEach(t),rio=r(IMe," (OpenAI GPT-2 model)"),IMe.forEach(t),tio=i(M),Ep=n(M,"LI",{});var qMe=s(Ep);Yoe=n(qMe,"STRONG",{});var wVr=s(Yoe);aio=r(wVr,"gpt_neo"),wVr.forEach(t),nio=r(qMe," \u2014 "),kB=n(qMe,"A",{href:!0});var AVr=s(kB);sio=r(AVr,"GPTNeoModel"),AVr.forEach(t),lio=r(qMe," (GPT Neo model)"),qMe.forEach(t),iio=i(M),Cp=n(M,"LI",{});var NMe=s(Cp);Koe=n(NMe,"STRONG",{});var yVr=s(Koe);dio=r(yVr,"gptj"),yVr.forEach(t),cio=r(NMe," \u2014 "),SB=n(NMe,"A",{href:!0});var LVr=s(SB);fio=r(LVr,"GPTJModel"),LVr.forEach(t),mio=r(NMe," (GPT-J model)"),NMe.forEach(t),gio=i(M),wp=n(M,"LI",{});var jMe=s(wp);Zoe=n(jMe,"STRONG",{});var xVr=s(Zoe);hio=r(xVr,"hubert"),xVr.forEach(t),pio=r(jMe," \u2014 "),RB=n(jMe,"A",{href:!0});var kVr=s(RB);_io=r(kVr,"HubertModel"),kVr.forEach(t),uio=r(jMe," (Hubert model)"),jMe.forEach(t),bio=i(M),Ap=n(M,"LI",{});var DMe=s(Ap);ere=n(DMe,"STRONG",{});var SVr=s(ere);Fio=r(SVr,"ibert"),SVr.forEach(t),vio=r(DMe," \u2014 "),BB=n(DMe,"A",{href:!0});var RVr=s(BB);Tio=r(RVr,"IBertModel"),RVr.forEach(t),Mio=r(DMe," (I-BERT model)"),DMe.forEach(t),Eio=i(M),yp=n(M,"LI",{});var GMe=s(yp);ore=n(GMe,"STRONG",{});var BVr=s(ore);Cio=r(BVr,"imagegpt"),BVr.forEach(t),wio=r(GMe," \u2014 "),PB=n(GMe,"A",{href:!0});var PVr=s(PB);Aio=r(PVr,"ImageGPTModel"),PVr.forEach(t),yio=r(GMe," (ImageGPT model)"),GMe.forEach(t),Lio=i(M),Lp=n(M,"LI",{});var OMe=s(Lp);rre=n(OMe,"STRONG",{});var $Vr=s(rre);xio=r($Vr,"layoutlm"),$Vr.forEach(t),kio=r(OMe," \u2014 "),$B=n(OMe,"A",{href:!0});var IVr=s($B);Sio=r(IVr,"LayoutLMModel"),IVr.forEach(t),Rio=r(OMe," (LayoutLM model)"),OMe.forEach(t),Bio=i(M),xp=n(M,"LI",{});var VMe=s(xp);tre=n(VMe,"STRONG",{});var qVr=s(tre);Pio=r(qVr,"layoutlmv2"),qVr.forEach(t),$io=r(VMe," \u2014 "),IB=n(VMe,"A",{href:!0});var NVr=s(IB);Iio=r(NVr,"LayoutLMv2Model"),NVr.forEach(t),qio=r(VMe," (LayoutLMv2 model)"),VMe.forEach(t),Nio=i(M),kp=n(M,"LI",{});var XMe=s(kp);are=n(XMe,"STRONG",{});var jVr=s(are);jio=r(jVr,"led"),jVr.forEach(t),Dio=r(XMe," \u2014 "),qB=n(XMe,"A",{href:!0});var DVr=s(qB);Gio=r(DVr,"LEDModel"),DVr.forEach(t),Oio=r(XMe," (LED model)"),XMe.forEach(t),Vio=i(M),Sp=n(M,"LI",{});var zMe=s(Sp);nre=n(zMe,"STRONG",{});var GVr=s(nre);Xio=r(GVr,"longformer"),GVr.forEach(t),zio=r(zMe," \u2014 "),NB=n(zMe,"A",{href:!0});var OVr=s(NB);Qio=r(OVr,"LongformerModel"),OVr.forEach(t),Wio=r(zMe," (Longformer model)"),zMe.forEach(t),Hio=i(M),Rp=n(M,"LI",{});var QMe=s(Rp);sre=n(QMe,"STRONG",{});var VVr=s(sre);Uio=r(VVr,"luke"),VVr.forEach(t),Jio=r(QMe," \u2014 "),jB=n(QMe,"A",{href:!0});var XVr=s(jB);Yio=r(XVr,"LukeModel"),XVr.forEach(t),Kio=r(QMe," (LUKE model)"),QMe.forEach(t),Zio=i(M),Bp=n(M,"LI",{});var WMe=s(Bp);lre=n(WMe,"STRONG",{});var zVr=s(lre);edo=r(zVr,"lxmert"),zVr.forEach(t),odo=r(WMe," \u2014 "),DB=n(WMe,"A",{href:!0});var QVr=s(DB);rdo=r(QVr,"LxmertModel"),QVr.forEach(t),tdo=r(WMe," (LXMERT model)"),WMe.forEach(t),ado=i(M),Pp=n(M,"LI",{});var HMe=s(Pp);ire=n(HMe,"STRONG",{});var WVr=s(ire);ndo=r(WVr,"m2m_100"),WVr.forEach(t),sdo=r(HMe," \u2014 "),GB=n(HMe,"A",{href:!0});var HVr=s(GB);ldo=r(HVr,"M2M100Model"),HVr.forEach(t),ido=r(HMe," (M2M100 model)"),HMe.forEach(t),ddo=i(M),$p=n(M,"LI",{});var UMe=s($p);dre=n(UMe,"STRONG",{});var UVr=s(dre);cdo=r(UVr,"marian"),UVr.forEach(t),fdo=r(UMe," \u2014 "),OB=n(UMe,"A",{href:!0});var JVr=s(OB);mdo=r(JVr,"MarianModel"),JVr.forEach(t),gdo=r(UMe," (Marian model)"),UMe.forEach(t),hdo=i(M),Ip=n(M,"LI",{});var JMe=s(Ip);cre=n(JMe,"STRONG",{});var YVr=s(cre);pdo=r(YVr,"maskformer"),YVr.forEach(t),_do=r(JMe," \u2014 "),VB=n(JMe,"A",{href:!0});var KVr=s(VB);udo=r(KVr,"MaskFormerModel"),KVr.forEach(t),bdo=r(JMe," (MaskFormer model)"),JMe.forEach(t),Fdo=i(M),qp=n(M,"LI",{});var YMe=s(qp);fre=n(YMe,"STRONG",{});var ZVr=s(fre);vdo=r(ZVr,"mbart"),ZVr.forEach(t),Tdo=r(YMe," \u2014 "),XB=n(YMe,"A",{href:!0});var eXr=s(XB);Mdo=r(eXr,"MBartModel"),eXr.forEach(t),Edo=r(YMe," (mBART model)"),YMe.forEach(t),Cdo=i(M),Np=n(M,"LI",{});var KMe=s(Np);mre=n(KMe,"STRONG",{});var oXr=s(mre);wdo=r(oXr,"megatron-bert"),oXr.forEach(t),Ado=r(KMe," \u2014 "),zB=n(KMe,"A",{href:!0});var rXr=s(zB);ydo=r(rXr,"MegatronBertModel"),rXr.forEach(t),Ldo=r(KMe," (MegatronBert model)"),KMe.forEach(t),xdo=i(M),jp=n(M,"LI",{});var ZMe=s(jp);gre=n(ZMe,"STRONG",{});var tXr=s(gre);kdo=r(tXr,"mobilebert"),tXr.forEach(t),Sdo=r(ZMe," \u2014 "),QB=n(ZMe,"A",{href:!0});var aXr=s(QB);Rdo=r(aXr,"MobileBertModel"),aXr.forEach(t),Bdo=r(ZMe," (MobileBERT model)"),ZMe.forEach(t),Pdo=i(M),Dp=n(M,"LI",{});var e4e=s(Dp);hre=n(e4e,"STRONG",{});var nXr=s(hre);$do=r(nXr,"mpnet"),nXr.forEach(t),Ido=r(e4e," \u2014 "),WB=n(e4e,"A",{href:!0});var sXr=s(WB);qdo=r(sXr,"MPNetModel"),sXr.forEach(t),Ndo=r(e4e," (MPNet model)"),e4e.forEach(t),jdo=i(M),Gp=n(M,"LI",{});var o4e=s(Gp);pre=n(o4e,"STRONG",{});var lXr=s(pre);Ddo=r(lXr,"mt5"),lXr.forEach(t),Gdo=r(o4e," \u2014 "),HB=n(o4e,"A",{href:!0});var iXr=s(HB);Odo=r(iXr,"MT5Model"),iXr.forEach(t),Vdo=r(o4e," (mT5 model)"),o4e.forEach(t),Xdo=i(M),Op=n(M,"LI",{});var r4e=s(Op);_re=n(r4e,"STRONG",{});var dXr=s(_re);zdo=r(dXr,"nystromformer"),dXr.forEach(t),Qdo=r(r4e," \u2014 "),UB=n(r4e,"A",{href:!0});var cXr=s(UB);Wdo=r(cXr,"NystromformerModel"),cXr.forEach(t),Hdo=r(r4e," (Nystromformer model)"),r4e.forEach(t),Udo=i(M),Vp=n(M,"LI",{});var t4e=s(Vp);ure=n(t4e,"STRONG",{});var fXr=s(ure);Jdo=r(fXr,"openai-gpt"),fXr.forEach(t),Ydo=r(t4e," \u2014 "),JB=n(t4e,"A",{href:!0});var mXr=s(JB);Kdo=r(mXr,"OpenAIGPTModel"),mXr.forEach(t),Zdo=r(t4e," (OpenAI GPT model)"),t4e.forEach(t),eco=i(M),Xp=n(M,"LI",{});var a4e=s(Xp);bre=n(a4e,"STRONG",{});var gXr=s(bre);oco=r(gXr,"pegasus"),gXr.forEach(t),rco=r(a4e," \u2014 "),YB=n(a4e,"A",{href:!0});var hXr=s(YB);tco=r(hXr,"PegasusModel"),hXr.forEach(t),aco=r(a4e," (Pegasus model)"),a4e.forEach(t),nco=i(M),zp=n(M,"LI",{});var n4e=s(zp);Fre=n(n4e,"STRONG",{});var pXr=s(Fre);sco=r(pXr,"perceiver"),pXr.forEach(t),lco=r(n4e," \u2014 "),KB=n(n4e,"A",{href:!0});var _Xr=s(KB);ico=r(_Xr,"PerceiverModel"),_Xr.forEach(t),dco=r(n4e," (Perceiver model)"),n4e.forEach(t),cco=i(M),Qp=n(M,"LI",{});var s4e=s(Qp);vre=n(s4e,"STRONG",{});var uXr=s(vre);fco=r(uXr,"plbart"),uXr.forEach(t),mco=r(s4e," \u2014 "),ZB=n(s4e,"A",{href:!0});var bXr=s(ZB);gco=r(bXr,"PLBartModel"),bXr.forEach(t),hco=r(s4e," (PLBart model)"),s4e.forEach(t),pco=i(M),Wp=n(M,"LI",{});var l4e=s(Wp);Tre=n(l4e,"STRONG",{});var FXr=s(Tre);_co=r(FXr,"poolformer"),FXr.forEach(t),uco=r(l4e," \u2014 "),eP=n(l4e,"A",{href:!0});var vXr=s(eP);bco=r(vXr,"PoolFormerModel"),vXr.forEach(t),Fco=r(l4e," (PoolFormer model)"),l4e.forEach(t),vco=i(M),Hp=n(M,"LI",{});var i4e=s(Hp);Mre=n(i4e,"STRONG",{});var TXr=s(Mre);Tco=r(TXr,"prophetnet"),TXr.forEach(t),Mco=r(i4e," \u2014 "),oP=n(i4e,"A",{href:!0});var MXr=s(oP);Eco=r(MXr,"ProphetNetModel"),MXr.forEach(t),Cco=r(i4e," (ProphetNet model)"),i4e.forEach(t),wco=i(M),Up=n(M,"LI",{});var d4e=s(Up);Ere=n(d4e,"STRONG",{});var EXr=s(Ere);Aco=r(EXr,"qdqbert"),EXr.forEach(t),yco=r(d4e," \u2014 "),rP=n(d4e,"A",{href:!0});var CXr=s(rP);Lco=r(CXr,"QDQBertModel"),CXr.forEach(t),xco=r(d4e," (QDQBert model)"),d4e.forEach(t),kco=i(M),Jp=n(M,"LI",{});var c4e=s(Jp);Cre=n(c4e,"STRONG",{});var wXr=s(Cre);Sco=r(wXr,"reformer"),wXr.forEach(t),Rco=r(c4e," \u2014 "),tP=n(c4e,"A",{href:!0});var AXr=s(tP);Bco=r(AXr,"ReformerModel"),AXr.forEach(t),Pco=r(c4e," (Reformer model)"),c4e.forEach(t),$co=i(M),Yp=n(M,"LI",{});var f4e=s(Yp);wre=n(f4e,"STRONG",{});var yXr=s(wre);Ico=r(yXr,"rembert"),yXr.forEach(t),qco=r(f4e," \u2014 "),aP=n(f4e,"A",{href:!0});var LXr=s(aP);Nco=r(LXr,"RemBertModel"),LXr.forEach(t),jco=r(f4e," (RemBERT model)"),f4e.forEach(t),Dco=i(M),Kp=n(M,"LI",{});var m4e=s(Kp);Are=n(m4e,"STRONG",{});var xXr=s(Are);Gco=r(xXr,"resnet"),xXr.forEach(t),Oco=r(m4e," \u2014 "),nP=n(m4e,"A",{href:!0});var kXr=s(nP);Vco=r(kXr,"ResNetModel"),kXr.forEach(t),Xco=r(m4e," (ResNet model)"),m4e.forEach(t),zco=i(M),Zp=n(M,"LI",{});var g4e=s(Zp);yre=n(g4e,"STRONG",{});var SXr=s(yre);Qco=r(SXr,"retribert"),SXr.forEach(t),Wco=r(g4e," \u2014 "),sP=n(g4e,"A",{href:!0});var RXr=s(sP);Hco=r(RXr,"RetriBertModel"),RXr.forEach(t),Uco=r(g4e," (RetriBERT model)"),g4e.forEach(t),Jco=i(M),e_=n(M,"LI",{});var h4e=s(e_);Lre=n(h4e,"STRONG",{});var BXr=s(Lre);Yco=r(BXr,"roberta"),BXr.forEach(t),Kco=r(h4e," \u2014 "),lP=n(h4e,"A",{href:!0});var PXr=s(lP);Zco=r(PXr,"RobertaModel"),PXr.forEach(t),efo=r(h4e," (RoBERTa model)"),h4e.forEach(t),ofo=i(M),o_=n(M,"LI",{});var p4e=s(o_);xre=n(p4e,"STRONG",{});var $Xr=s(xre);rfo=r($Xr,"roformer"),$Xr.forEach(t),tfo=r(p4e," \u2014 "),iP=n(p4e,"A",{href:!0});var IXr=s(iP);afo=r(IXr,"RoFormerModel"),IXr.forEach(t),nfo=r(p4e," (RoFormer model)"),p4e.forEach(t),sfo=i(M),r_=n(M,"LI",{});var _4e=s(r_);kre=n(_4e,"STRONG",{});var qXr=s(kre);lfo=r(qXr,"segformer"),qXr.forEach(t),ifo=r(_4e," \u2014 "),dP=n(_4e,"A",{href:!0});var NXr=s(dP);dfo=r(NXr,"SegformerModel"),NXr.forEach(t),cfo=r(_4e," (SegFormer model)"),_4e.forEach(t),ffo=i(M),t_=n(M,"LI",{});var u4e=s(t_);Sre=n(u4e,"STRONG",{});var jXr=s(Sre);mfo=r(jXr,"sew"),jXr.forEach(t),gfo=r(u4e," \u2014 "),cP=n(u4e,"A",{href:!0});var DXr=s(cP);hfo=r(DXr,"SEWModel"),DXr.forEach(t),pfo=r(u4e," (SEW model)"),u4e.forEach(t),_fo=i(M),a_=n(M,"LI",{});var b4e=s(a_);Rre=n(b4e,"STRONG",{});var GXr=s(Rre);ufo=r(GXr,"sew-d"),GXr.forEach(t),bfo=r(b4e," \u2014 "),fP=n(b4e,"A",{href:!0});var OXr=s(fP);Ffo=r(OXr,"SEWDModel"),OXr.forEach(t),vfo=r(b4e," (SEW-D model)"),b4e.forEach(t),Tfo=i(M),n_=n(M,"LI",{});var F4e=s(n_);Bre=n(F4e,"STRONG",{});var VXr=s(Bre);Mfo=r(VXr,"speech_to_text"),VXr.forEach(t),Efo=r(F4e," \u2014 "),mP=n(F4e,"A",{href:!0});var XXr=s(mP);Cfo=r(XXr,"Speech2TextModel"),XXr.forEach(t),wfo=r(F4e," (Speech2Text model)"),F4e.forEach(t),Afo=i(M),s_=n(M,"LI",{});var v4e=s(s_);Pre=n(v4e,"STRONG",{});var zXr=s(Pre);yfo=r(zXr,"splinter"),zXr.forEach(t),Lfo=r(v4e," \u2014 "),gP=n(v4e,"A",{href:!0});var QXr=s(gP);xfo=r(QXr,"SplinterModel"),QXr.forEach(t),kfo=r(v4e," (Splinter model)"),v4e.forEach(t),Sfo=i(M),l_=n(M,"LI",{});var T4e=s(l_);$re=n(T4e,"STRONG",{});var WXr=s($re);Rfo=r(WXr,"squeezebert"),WXr.forEach(t),Bfo=r(T4e," \u2014 "),hP=n(T4e,"A",{href:!0});var HXr=s(hP);Pfo=r(HXr,"SqueezeBertModel"),HXr.forEach(t),$fo=r(T4e," (SqueezeBERT model)"),T4e.forEach(t),Ifo=i(M),i_=n(M,"LI",{});var M4e=s(i_);Ire=n(M4e,"STRONG",{});var UXr=s(Ire);qfo=r(UXr,"swin"),UXr.forEach(t),Nfo=r(M4e," \u2014 "),pP=n(M4e,"A",{href:!0});var JXr=s(pP);jfo=r(JXr,"SwinModel"),JXr.forEach(t),Dfo=r(M4e," (Swin model)"),M4e.forEach(t),Gfo=i(M),d_=n(M,"LI",{});var E4e=s(d_);qre=n(E4e,"STRONG",{});var YXr=s(qre);Ofo=r(YXr,"t5"),YXr.forEach(t),Vfo=r(E4e," \u2014 "),_P=n(E4e,"A",{href:!0});var KXr=s(_P);Xfo=r(KXr,"T5Model"),KXr.forEach(t),zfo=r(E4e," (T5 model)"),E4e.forEach(t),Qfo=i(M),c_=n(M,"LI",{});var C4e=s(c_);Nre=n(C4e,"STRONG",{});var ZXr=s(Nre);Wfo=r(ZXr,"tapas"),ZXr.forEach(t),Hfo=r(C4e," \u2014 "),uP=n(C4e,"A",{href:!0});var ezr=s(uP);Ufo=r(ezr,"TapasModel"),ezr.forEach(t),Jfo=r(C4e," (TAPAS model)"),C4e.forEach(t),Yfo=i(M),f_=n(M,"LI",{});var w4e=s(f_);jre=n(w4e,"STRONG",{});var ozr=s(jre);Kfo=r(ozr,"transfo-xl"),ozr.forEach(t),Zfo=r(w4e," \u2014 "),bP=n(w4e,"A",{href:!0});var rzr=s(bP);emo=r(rzr,"TransfoXLModel"),rzr.forEach(t),omo=r(w4e," (Transformer-XL model)"),w4e.forEach(t),rmo=i(M),m_=n(M,"LI",{});var A4e=s(m_);Dre=n(A4e,"STRONG",{});var tzr=s(Dre);tmo=r(tzr,"unispeech"),tzr.forEach(t),amo=r(A4e," \u2014 "),FP=n(A4e,"A",{href:!0});var azr=s(FP);nmo=r(azr,"UniSpeechModel"),azr.forEach(t),smo=r(A4e," (UniSpeech model)"),A4e.forEach(t),lmo=i(M),g_=n(M,"LI",{});var y4e=s(g_);Gre=n(y4e,"STRONG",{});var nzr=s(Gre);imo=r(nzr,"unispeech-sat"),nzr.forEach(t),dmo=r(y4e," \u2014 "),vP=n(y4e,"A",{href:!0});var szr=s(vP);cmo=r(szr,"UniSpeechSatModel"),szr.forEach(t),fmo=r(y4e," (UniSpeechSat model)"),y4e.forEach(t),mmo=i(M),h_=n(M,"LI",{});var L4e=s(h_);Ore=n(L4e,"STRONG",{});var lzr=s(Ore);gmo=r(lzr,"van"),lzr.forEach(t),hmo=r(L4e," \u2014 "),TP=n(L4e,"A",{href:!0});var izr=s(TP);pmo=r(izr,"VanModel"),izr.forEach(t),_mo=r(L4e," (VAN model)"),L4e.forEach(t),umo=i(M),p_=n(M,"LI",{});var x4e=s(p_);Vre=n(x4e,"STRONG",{});var dzr=s(Vre);bmo=r(dzr,"vilt"),dzr.forEach(t),Fmo=r(x4e," \u2014 "),MP=n(x4e,"A",{href:!0});var czr=s(MP);vmo=r(czr,"ViltModel"),czr.forEach(t),Tmo=r(x4e," (ViLT model)"),x4e.forEach(t),Mmo=i(M),__=n(M,"LI",{});var k4e=s(__);Xre=n(k4e,"STRONG",{});var fzr=s(Xre);Emo=r(fzr,"vision-text-dual-encoder"),fzr.forEach(t),Cmo=r(k4e," \u2014 "),EP=n(k4e,"A",{href:!0});var mzr=s(EP);wmo=r(mzr,"VisionTextDualEncoderModel"),mzr.forEach(t),Amo=r(k4e," (VisionTextDualEncoder model)"),k4e.forEach(t),ymo=i(M),u_=n(M,"LI",{});var S4e=s(u_);zre=n(S4e,"STRONG",{});var gzr=s(zre);Lmo=r(gzr,"visual_bert"),gzr.forEach(t),xmo=r(S4e," \u2014 "),CP=n(S4e,"A",{href:!0});var hzr=s(CP);kmo=r(hzr,"VisualBertModel"),hzr.forEach(t),Smo=r(S4e," (VisualBert model)"),S4e.forEach(t),Rmo=i(M),b_=n(M,"LI",{});var R4e=s(b_);Qre=n(R4e,"STRONG",{});var pzr=s(Qre);Bmo=r(pzr,"vit"),pzr.forEach(t),Pmo=r(R4e," \u2014 "),wP=n(R4e,"A",{href:!0});var _zr=s(wP);$mo=r(_zr,"ViTModel"),_zr.forEach(t),Imo=r(R4e," (ViT model)"),R4e.forEach(t),qmo=i(M),F_=n(M,"LI",{});var B4e=s(F_);Wre=n(B4e,"STRONG",{});var uzr=s(Wre);Nmo=r(uzr,"vit_mae"),uzr.forEach(t),jmo=r(B4e," \u2014 "),AP=n(B4e,"A",{href:!0});var bzr=s(AP);Dmo=r(bzr,"ViTMAEModel"),bzr.forEach(t),Gmo=r(B4e," (ViTMAE model)"),B4e.forEach(t),Omo=i(M),v_=n(M,"LI",{});var P4e=s(v_);Hre=n(P4e,"STRONG",{});var Fzr=s(Hre);Vmo=r(Fzr,"wav2vec2"),Fzr.forEach(t),Xmo=r(P4e," \u2014 "),yP=n(P4e,"A",{href:!0});var vzr=s(yP);zmo=r(vzr,"Wav2Vec2Model"),vzr.forEach(t),Qmo=r(P4e," (Wav2Vec2 model)"),P4e.forEach(t),Wmo=i(M),T_=n(M,"LI",{});var $4e=s(T_);Ure=n($4e,"STRONG",{});var Tzr=s(Ure);Hmo=r(Tzr,"wavlm"),Tzr.forEach(t),Umo=r($4e," \u2014 "),LP=n($4e,"A",{href:!0});var Mzr=s(LP);Jmo=r(Mzr,"WavLMModel"),Mzr.forEach(t),Ymo=r($4e," (WavLM model)"),$4e.forEach(t),Kmo=i(M),M_=n(M,"LI",{});var I4e=s(M_);Jre=n(I4e,"STRONG",{});var Ezr=s(Jre);Zmo=r(Ezr,"xglm"),Ezr.forEach(t),ego=r(I4e," \u2014 "),xP=n(I4e,"A",{href:!0});var Czr=s(xP);ogo=r(Czr,"XGLMModel"),Czr.forEach(t),rgo=r(I4e," (XGLM model)"),I4e.forEach(t),tgo=i(M),E_=n(M,"LI",{});var q4e=s(E_);Yre=n(q4e,"STRONG",{});var wzr=s(Yre);ago=r(wzr,"xlm"),wzr.forEach(t),ngo=r(q4e," \u2014 "),kP=n(q4e,"A",{href:!0});var Azr=s(kP);sgo=r(Azr,"XLMModel"),Azr.forEach(t),lgo=r(q4e," (XLM model)"),q4e.forEach(t),igo=i(M),C_=n(M,"LI",{});var N4e=s(C_);Kre=n(N4e,"STRONG",{});var yzr=s(Kre);dgo=r(yzr,"xlm-prophetnet"),yzr.forEach(t),cgo=r(N4e," \u2014 "),SP=n(N4e,"A",{href:!0});var Lzr=s(SP);fgo=r(Lzr,"XLMProphetNetModel"),Lzr.forEach(t),mgo=r(N4e," (XLMProphetNet model)"),N4e.forEach(t),ggo=i(M),w_=n(M,"LI",{});var j4e=s(w_);Zre=n(j4e,"STRONG",{});var xzr=s(Zre);hgo=r(xzr,"xlm-roberta"),xzr.forEach(t),pgo=r(j4e," \u2014 "),RP=n(j4e,"A",{href:!0});var kzr=s(RP);_go=r(kzr,"XLMRobertaModel"),kzr.forEach(t),ugo=r(j4e," (XLM-RoBERTa model)"),j4e.forEach(t),bgo=i(M),A_=n(M,"LI",{});var D4e=s(A_);ete=n(D4e,"STRONG",{});var Szr=s(ete);Fgo=r(Szr,"xlm-roberta-xl"),Szr.forEach(t),vgo=r(D4e," \u2014 "),BP=n(D4e,"A",{href:!0});var Rzr=s(BP);Tgo=r(Rzr,"XLMRobertaXLModel"),Rzr.forEach(t),Mgo=r(D4e," (XLM-RoBERTa-XL model)"),D4e.forEach(t),Ego=i(M),y_=n(M,"LI",{});var G4e=s(y_);ote=n(G4e,"STRONG",{});var Bzr=s(ote);Cgo=r(Bzr,"xlnet"),Bzr.forEach(t),wgo=r(G4e," \u2014 "),PP=n(G4e,"A",{href:!0});var Pzr=s(PP);Ago=r(Pzr,"XLNetModel"),Pzr.forEach(t),ygo=r(G4e," (XLNet model)"),G4e.forEach(t),Lgo=i(M),L_=n(M,"LI",{});var O4e=s(L_);rte=n(O4e,"STRONG",{});var $zr=s(rte);xgo=r($zr,"yoso"),$zr.forEach(t),kgo=r(O4e," \u2014 "),$P=n(O4e,"A",{href:!0});var Izr=s($P);Sgo=r(Izr,"YosoModel"),Izr.forEach(t),Rgo=r(O4e," (YOSO model)"),O4e.forEach(t),M.forEach(t),Bgo=i(Dt),x_=n(Dt,"P",{});var V4e=s(x_);Pgo=r(V4e,"The model is set in evaluation mode by default using "),tte=n(V4e,"CODE",{});var qzr=s(tte);$go=r(qzr,"model.eval()"),qzr.forEach(t),Igo=r(V4e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ate=n(V4e,"CODE",{});var Nzr=s(ate);qgo=r(Nzr,"model.train()"),Nzr.forEach(t),V4e.forEach(t),Ngo=i(Dt),nte=n(Dt,"P",{});var jzr=s(nte);jgo=r(jzr,"Examples:"),jzr.forEach(t),Dgo=i(Dt),m(oC.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),KSe=i(c),Zi=n(c,"H2",{class:!0});var lPe=s(Zi);k_=n(lPe,"A",{id:!0,class:!0,href:!0});var Dzr=s(k_);ste=n(Dzr,"SPAN",{});var Gzr=s(ste);m(rC.$$.fragment,Gzr),Gzr.forEach(t),Dzr.forEach(t),Ggo=i(lPe),lte=n(lPe,"SPAN",{});var Ozr=s(lte);Ogo=r(Ozr,"AutoModelForPreTraining"),Ozr.forEach(t),lPe.forEach(t),ZSe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(tC.$$.fragment,Hs),Vgo=i(Hs),ed=n(Hs,"P",{});var YH=s(ed);Xgo=r(YH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),IP=n(YH,"A",{href:!0});var Vzr=s(IP);zgo=r(Vzr,"from_pretrained()"),Vzr.forEach(t),Qgo=r(YH," class method or the "),qP=n(YH,"A",{href:!0});var Xzr=s(qP);Wgo=r(Xzr,"from_config()"),Xzr.forEach(t),Hgo=r(YH,` class
method.`),YH.forEach(t),Ugo=i(Hs),aC=n(Hs,"P",{});var iPe=s(aC);Jgo=r(iPe,"This class cannot be instantiated directly using "),ite=n(iPe,"CODE",{});var zzr=s(ite);Ygo=r(zzr,"__init__()"),zzr.forEach(t),Kgo=r(iPe," (throws an error)."),iPe.forEach(t),Zgo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(nC.$$.fragment,Us),eho=i(Us),dte=n(Us,"P",{});var Qzr=s(dte);oho=r(Qzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qzr.forEach(t),rho=i(Us),od=n(Us,"P",{});var KH=s(od);tho=r(KH,`Note:
Loading a model from its configuration file does `),cte=n(KH,"STRONG",{});var Wzr=s(cte);aho=r(Wzr,"not"),Wzr.forEach(t),nho=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),NP=n(KH,"A",{href:!0});var Hzr=s(NP);sho=r(Hzr,"from_pretrained()"),Hzr.forEach(t),lho=r(KH," to load the model weights."),KH.forEach(t),iho=i(Us),fte=n(Us,"P",{});var Uzr=s(fte);dho=r(Uzr,"Examples:"),Uzr.forEach(t),cho=i(Us),m(sC.$$.fragment,Us),Us.forEach(t),fho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(lC.$$.fragment,Gt),mho=i(Gt),mte=n(Gt,"P",{});var Jzr=s(mte);gho=r(Jzr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jzr.forEach(t),hho=i(Gt),za=n(Gt,"P",{});var v4=s(za);pho=r(v4,"The model class to instantiate is selected based on the "),gte=n(v4,"CODE",{});var Yzr=s(gte);_ho=r(Yzr,"model_type"),Yzr.forEach(t),uho=r(v4,` property of the config object (either
passed as an argument or loaded from `),hte=n(v4,"CODE",{});var Kzr=s(hte);bho=r(Kzr,"pretrained_model_name_or_path"),Kzr.forEach(t),Fho=r(v4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pte=n(v4,"CODE",{});var Zzr=s(pte);vho=r(Zzr,"pretrained_model_name_or_path"),Zzr.forEach(t),Tho=r(v4,":"),v4.forEach(t),Mho=i(Gt),S=n(Gt,"UL",{});var B=s(S);S_=n(B,"LI",{});var X4e=s(S_);_te=n(X4e,"STRONG",{});var eQr=s(_te);Eho=r(eQr,"albert"),eQr.forEach(t),Cho=r(X4e," \u2014 "),jP=n(X4e,"A",{href:!0});var oQr=s(jP);who=r(oQr,"AlbertForPreTraining"),oQr.forEach(t),Aho=r(X4e," (ALBERT model)"),X4e.forEach(t),yho=i(B),R_=n(B,"LI",{});var z4e=s(R_);ute=n(z4e,"STRONG",{});var rQr=s(ute);Lho=r(rQr,"bart"),rQr.forEach(t),xho=r(z4e," \u2014 "),DP=n(z4e,"A",{href:!0});var tQr=s(DP);kho=r(tQr,"BartForConditionalGeneration"),tQr.forEach(t),Sho=r(z4e," (BART model)"),z4e.forEach(t),Rho=i(B),B_=n(B,"LI",{});var Q4e=s(B_);bte=n(Q4e,"STRONG",{});var aQr=s(bte);Bho=r(aQr,"bert"),aQr.forEach(t),Pho=r(Q4e," \u2014 "),GP=n(Q4e,"A",{href:!0});var nQr=s(GP);$ho=r(nQr,"BertForPreTraining"),nQr.forEach(t),Iho=r(Q4e," (BERT model)"),Q4e.forEach(t),qho=i(B),P_=n(B,"LI",{});var W4e=s(P_);Fte=n(W4e,"STRONG",{});var sQr=s(Fte);Nho=r(sQr,"big_bird"),sQr.forEach(t),jho=r(W4e," \u2014 "),OP=n(W4e,"A",{href:!0});var lQr=s(OP);Dho=r(lQr,"BigBirdForPreTraining"),lQr.forEach(t),Gho=r(W4e," (BigBird model)"),W4e.forEach(t),Oho=i(B),$_=n(B,"LI",{});var H4e=s($_);vte=n(H4e,"STRONG",{});var iQr=s(vte);Vho=r(iQr,"camembert"),iQr.forEach(t),Xho=r(H4e," \u2014 "),VP=n(H4e,"A",{href:!0});var dQr=s(VP);zho=r(dQr,"CamembertForMaskedLM"),dQr.forEach(t),Qho=r(H4e," (CamemBERT model)"),H4e.forEach(t),Who=i(B),I_=n(B,"LI",{});var U4e=s(I_);Tte=n(U4e,"STRONG",{});var cQr=s(Tte);Hho=r(cQr,"ctrl"),cQr.forEach(t),Uho=r(U4e," \u2014 "),XP=n(U4e,"A",{href:!0});var fQr=s(XP);Jho=r(fQr,"CTRLLMHeadModel"),fQr.forEach(t),Yho=r(U4e," (CTRL model)"),U4e.forEach(t),Kho=i(B),q_=n(B,"LI",{});var J4e=s(q_);Mte=n(J4e,"STRONG",{});var mQr=s(Mte);Zho=r(mQr,"data2vec-text"),mQr.forEach(t),epo=r(J4e," \u2014 "),zP=n(J4e,"A",{href:!0});var gQr=s(zP);opo=r(gQr,"Data2VecTextForMaskedLM"),gQr.forEach(t),rpo=r(J4e," (Data2VecText model)"),J4e.forEach(t),tpo=i(B),N_=n(B,"LI",{});var Y4e=s(N_);Ete=n(Y4e,"STRONG",{});var hQr=s(Ete);apo=r(hQr,"deberta"),hQr.forEach(t),npo=r(Y4e," \u2014 "),QP=n(Y4e,"A",{href:!0});var pQr=s(QP);spo=r(pQr,"DebertaForMaskedLM"),pQr.forEach(t),lpo=r(Y4e," (DeBERTa model)"),Y4e.forEach(t),ipo=i(B),j_=n(B,"LI",{});var K4e=s(j_);Cte=n(K4e,"STRONG",{});var _Qr=s(Cte);dpo=r(_Qr,"deberta-v2"),_Qr.forEach(t),cpo=r(K4e," \u2014 "),WP=n(K4e,"A",{href:!0});var uQr=s(WP);fpo=r(uQr,"DebertaV2ForMaskedLM"),uQr.forEach(t),mpo=r(K4e," (DeBERTa-v2 model)"),K4e.forEach(t),gpo=i(B),D_=n(B,"LI",{});var Z4e=s(D_);wte=n(Z4e,"STRONG",{});var bQr=s(wte);hpo=r(bQr,"distilbert"),bQr.forEach(t),ppo=r(Z4e," \u2014 "),HP=n(Z4e,"A",{href:!0});var FQr=s(HP);_po=r(FQr,"DistilBertForMaskedLM"),FQr.forEach(t),upo=r(Z4e," (DistilBERT model)"),Z4e.forEach(t),bpo=i(B),G_=n(B,"LI",{});var eEe=s(G_);Ate=n(eEe,"STRONG",{});var vQr=s(Ate);Fpo=r(vQr,"electra"),vQr.forEach(t),vpo=r(eEe," \u2014 "),UP=n(eEe,"A",{href:!0});var TQr=s(UP);Tpo=r(TQr,"ElectraForPreTraining"),TQr.forEach(t),Mpo=r(eEe," (ELECTRA model)"),eEe.forEach(t),Epo=i(B),O_=n(B,"LI",{});var oEe=s(O_);yte=n(oEe,"STRONG",{});var MQr=s(yte);Cpo=r(MQr,"flaubert"),MQr.forEach(t),wpo=r(oEe," \u2014 "),JP=n(oEe,"A",{href:!0});var EQr=s(JP);Apo=r(EQr,"FlaubertWithLMHeadModel"),EQr.forEach(t),ypo=r(oEe," (FlauBERT model)"),oEe.forEach(t),Lpo=i(B),V_=n(B,"LI",{});var rEe=s(V_);Lte=n(rEe,"STRONG",{});var CQr=s(Lte);xpo=r(CQr,"fnet"),CQr.forEach(t),kpo=r(rEe," \u2014 "),YP=n(rEe,"A",{href:!0});var wQr=s(YP);Spo=r(wQr,"FNetForPreTraining"),wQr.forEach(t),Rpo=r(rEe," (FNet model)"),rEe.forEach(t),Bpo=i(B),X_=n(B,"LI",{});var tEe=s(X_);xte=n(tEe,"STRONG",{});var AQr=s(xte);Ppo=r(AQr,"fsmt"),AQr.forEach(t),$po=r(tEe," \u2014 "),KP=n(tEe,"A",{href:!0});var yQr=s(KP);Ipo=r(yQr,"FSMTForConditionalGeneration"),yQr.forEach(t),qpo=r(tEe," (FairSeq Machine-Translation model)"),tEe.forEach(t),Npo=i(B),z_=n(B,"LI",{});var aEe=s(z_);kte=n(aEe,"STRONG",{});var LQr=s(kte);jpo=r(LQr,"funnel"),LQr.forEach(t),Dpo=r(aEe," \u2014 "),ZP=n(aEe,"A",{href:!0});var xQr=s(ZP);Gpo=r(xQr,"FunnelForPreTraining"),xQr.forEach(t),Opo=r(aEe," (Funnel Transformer model)"),aEe.forEach(t),Vpo=i(B),Q_=n(B,"LI",{});var nEe=s(Q_);Ste=n(nEe,"STRONG",{});var kQr=s(Ste);Xpo=r(kQr,"gpt2"),kQr.forEach(t),zpo=r(nEe," \u2014 "),e$=n(nEe,"A",{href:!0});var SQr=s(e$);Qpo=r(SQr,"GPT2LMHeadModel"),SQr.forEach(t),Wpo=r(nEe," (OpenAI GPT-2 model)"),nEe.forEach(t),Hpo=i(B),W_=n(B,"LI",{});var sEe=s(W_);Rte=n(sEe,"STRONG",{});var RQr=s(Rte);Upo=r(RQr,"ibert"),RQr.forEach(t),Jpo=r(sEe," \u2014 "),o$=n(sEe,"A",{href:!0});var BQr=s(o$);Ypo=r(BQr,"IBertForMaskedLM"),BQr.forEach(t),Kpo=r(sEe," (I-BERT model)"),sEe.forEach(t),Zpo=i(B),H_=n(B,"LI",{});var lEe=s(H_);Bte=n(lEe,"STRONG",{});var PQr=s(Bte);e_o=r(PQr,"layoutlm"),PQr.forEach(t),o_o=r(lEe," \u2014 "),r$=n(lEe,"A",{href:!0});var $Qr=s(r$);r_o=r($Qr,"LayoutLMForMaskedLM"),$Qr.forEach(t),t_o=r(lEe," (LayoutLM model)"),lEe.forEach(t),a_o=i(B),U_=n(B,"LI",{});var iEe=s(U_);Pte=n(iEe,"STRONG",{});var IQr=s(Pte);n_o=r(IQr,"longformer"),IQr.forEach(t),s_o=r(iEe," \u2014 "),t$=n(iEe,"A",{href:!0});var qQr=s(t$);l_o=r(qQr,"LongformerForMaskedLM"),qQr.forEach(t),i_o=r(iEe," (Longformer model)"),iEe.forEach(t),d_o=i(B),J_=n(B,"LI",{});var dEe=s(J_);$te=n(dEe,"STRONG",{});var NQr=s($te);c_o=r(NQr,"lxmert"),NQr.forEach(t),f_o=r(dEe," \u2014 "),a$=n(dEe,"A",{href:!0});var jQr=s(a$);m_o=r(jQr,"LxmertForPreTraining"),jQr.forEach(t),g_o=r(dEe," (LXMERT model)"),dEe.forEach(t),h_o=i(B),Y_=n(B,"LI",{});var cEe=s(Y_);Ite=n(cEe,"STRONG",{});var DQr=s(Ite);p_o=r(DQr,"megatron-bert"),DQr.forEach(t),__o=r(cEe," \u2014 "),n$=n(cEe,"A",{href:!0});var GQr=s(n$);u_o=r(GQr,"MegatronBertForPreTraining"),GQr.forEach(t),b_o=r(cEe," (MegatronBert model)"),cEe.forEach(t),F_o=i(B),K_=n(B,"LI",{});var fEe=s(K_);qte=n(fEe,"STRONG",{});var OQr=s(qte);v_o=r(OQr,"mobilebert"),OQr.forEach(t),T_o=r(fEe," \u2014 "),s$=n(fEe,"A",{href:!0});var VQr=s(s$);M_o=r(VQr,"MobileBertForPreTraining"),VQr.forEach(t),E_o=r(fEe," (MobileBERT model)"),fEe.forEach(t),C_o=i(B),Z_=n(B,"LI",{});var mEe=s(Z_);Nte=n(mEe,"STRONG",{});var XQr=s(Nte);w_o=r(XQr,"mpnet"),XQr.forEach(t),A_o=r(mEe," \u2014 "),l$=n(mEe,"A",{href:!0});var zQr=s(l$);y_o=r(zQr,"MPNetForMaskedLM"),zQr.forEach(t),L_o=r(mEe," (MPNet model)"),mEe.forEach(t),x_o=i(B),eu=n(B,"LI",{});var gEe=s(eu);jte=n(gEe,"STRONG",{});var QQr=s(jte);k_o=r(QQr,"openai-gpt"),QQr.forEach(t),S_o=r(gEe," \u2014 "),i$=n(gEe,"A",{href:!0});var WQr=s(i$);R_o=r(WQr,"OpenAIGPTLMHeadModel"),WQr.forEach(t),B_o=r(gEe," (OpenAI GPT model)"),gEe.forEach(t),P_o=i(B),ou=n(B,"LI",{});var hEe=s(ou);Dte=n(hEe,"STRONG",{});var HQr=s(Dte);$_o=r(HQr,"retribert"),HQr.forEach(t),I_o=r(hEe," \u2014 "),d$=n(hEe,"A",{href:!0});var UQr=s(d$);q_o=r(UQr,"RetriBertModel"),UQr.forEach(t),N_o=r(hEe," (RetriBERT model)"),hEe.forEach(t),j_o=i(B),ru=n(B,"LI",{});var pEe=s(ru);Gte=n(pEe,"STRONG",{});var JQr=s(Gte);D_o=r(JQr,"roberta"),JQr.forEach(t),G_o=r(pEe," \u2014 "),c$=n(pEe,"A",{href:!0});var YQr=s(c$);O_o=r(YQr,"RobertaForMaskedLM"),YQr.forEach(t),V_o=r(pEe," (RoBERTa model)"),pEe.forEach(t),X_o=i(B),tu=n(B,"LI",{});var _Ee=s(tu);Ote=n(_Ee,"STRONG",{});var KQr=s(Ote);z_o=r(KQr,"squeezebert"),KQr.forEach(t),Q_o=r(_Ee," \u2014 "),f$=n(_Ee,"A",{href:!0});var ZQr=s(f$);W_o=r(ZQr,"SqueezeBertForMaskedLM"),ZQr.forEach(t),H_o=r(_Ee," (SqueezeBERT model)"),_Ee.forEach(t),U_o=i(B),au=n(B,"LI",{});var uEe=s(au);Vte=n(uEe,"STRONG",{});var eWr=s(Vte);J_o=r(eWr,"t5"),eWr.forEach(t),Y_o=r(uEe," \u2014 "),m$=n(uEe,"A",{href:!0});var oWr=s(m$);K_o=r(oWr,"T5ForConditionalGeneration"),oWr.forEach(t),Z_o=r(uEe," (T5 model)"),uEe.forEach(t),euo=i(B),nu=n(B,"LI",{});var bEe=s(nu);Xte=n(bEe,"STRONG",{});var rWr=s(Xte);ouo=r(rWr,"tapas"),rWr.forEach(t),ruo=r(bEe," \u2014 "),g$=n(bEe,"A",{href:!0});var tWr=s(g$);tuo=r(tWr,"TapasForMaskedLM"),tWr.forEach(t),auo=r(bEe," (TAPAS model)"),bEe.forEach(t),nuo=i(B),su=n(B,"LI",{});var FEe=s(su);zte=n(FEe,"STRONG",{});var aWr=s(zte);suo=r(aWr,"transfo-xl"),aWr.forEach(t),luo=r(FEe," \u2014 "),h$=n(FEe,"A",{href:!0});var nWr=s(h$);iuo=r(nWr,"TransfoXLLMHeadModel"),nWr.forEach(t),duo=r(FEe," (Transformer-XL model)"),FEe.forEach(t),cuo=i(B),lu=n(B,"LI",{});var vEe=s(lu);Qte=n(vEe,"STRONG",{});var sWr=s(Qte);fuo=r(sWr,"unispeech"),sWr.forEach(t),muo=r(vEe," \u2014 "),p$=n(vEe,"A",{href:!0});var lWr=s(p$);guo=r(lWr,"UniSpeechForPreTraining"),lWr.forEach(t),huo=r(vEe," (UniSpeech model)"),vEe.forEach(t),puo=i(B),iu=n(B,"LI",{});var TEe=s(iu);Wte=n(TEe,"STRONG",{});var iWr=s(Wte);_uo=r(iWr,"unispeech-sat"),iWr.forEach(t),uuo=r(TEe," \u2014 "),_$=n(TEe,"A",{href:!0});var dWr=s(_$);buo=r(dWr,"UniSpeechSatForPreTraining"),dWr.forEach(t),Fuo=r(TEe," (UniSpeechSat model)"),TEe.forEach(t),vuo=i(B),du=n(B,"LI",{});var MEe=s(du);Hte=n(MEe,"STRONG",{});var cWr=s(Hte);Tuo=r(cWr,"visual_bert"),cWr.forEach(t),Muo=r(MEe," \u2014 "),u$=n(MEe,"A",{href:!0});var fWr=s(u$);Euo=r(fWr,"VisualBertForPreTraining"),fWr.forEach(t),Cuo=r(MEe," (VisualBert model)"),MEe.forEach(t),wuo=i(B),cu=n(B,"LI",{});var EEe=s(cu);Ute=n(EEe,"STRONG",{});var mWr=s(Ute);Auo=r(mWr,"vit_mae"),mWr.forEach(t),yuo=r(EEe," \u2014 "),b$=n(EEe,"A",{href:!0});var gWr=s(b$);Luo=r(gWr,"ViTMAEForPreTraining"),gWr.forEach(t),xuo=r(EEe," (ViTMAE model)"),EEe.forEach(t),kuo=i(B),fu=n(B,"LI",{});var CEe=s(fu);Jte=n(CEe,"STRONG",{});var hWr=s(Jte);Suo=r(hWr,"wav2vec2"),hWr.forEach(t),Ruo=r(CEe," \u2014 "),F$=n(CEe,"A",{href:!0});var pWr=s(F$);Buo=r(pWr,"Wav2Vec2ForPreTraining"),pWr.forEach(t),Puo=r(CEe," (Wav2Vec2 model)"),CEe.forEach(t),$uo=i(B),mu=n(B,"LI",{});var wEe=s(mu);Yte=n(wEe,"STRONG",{});var _Wr=s(Yte);Iuo=r(_Wr,"xlm"),_Wr.forEach(t),quo=r(wEe," \u2014 "),v$=n(wEe,"A",{href:!0});var uWr=s(v$);Nuo=r(uWr,"XLMWithLMHeadModel"),uWr.forEach(t),juo=r(wEe," (XLM model)"),wEe.forEach(t),Duo=i(B),gu=n(B,"LI",{});var AEe=s(gu);Kte=n(AEe,"STRONG",{});var bWr=s(Kte);Guo=r(bWr,"xlm-roberta"),bWr.forEach(t),Ouo=r(AEe," \u2014 "),T$=n(AEe,"A",{href:!0});var FWr=s(T$);Vuo=r(FWr,"XLMRobertaForMaskedLM"),FWr.forEach(t),Xuo=r(AEe," (XLM-RoBERTa model)"),AEe.forEach(t),zuo=i(B),hu=n(B,"LI",{});var yEe=s(hu);Zte=n(yEe,"STRONG",{});var vWr=s(Zte);Quo=r(vWr,"xlm-roberta-xl"),vWr.forEach(t),Wuo=r(yEe," \u2014 "),M$=n(yEe,"A",{href:!0});var TWr=s(M$);Huo=r(TWr,"XLMRobertaXLForMaskedLM"),TWr.forEach(t),Uuo=r(yEe," (XLM-RoBERTa-XL model)"),yEe.forEach(t),Juo=i(B),pu=n(B,"LI",{});var LEe=s(pu);eae=n(LEe,"STRONG",{});var MWr=s(eae);Yuo=r(MWr,"xlnet"),MWr.forEach(t),Kuo=r(LEe," \u2014 "),E$=n(LEe,"A",{href:!0});var EWr=s(E$);Zuo=r(EWr,"XLNetLMHeadModel"),EWr.forEach(t),e1o=r(LEe," (XLNet model)"),LEe.forEach(t),B.forEach(t),o1o=i(Gt),_u=n(Gt,"P",{});var xEe=s(_u);r1o=r(xEe,"The model is set in evaluation mode by default using "),oae=n(xEe,"CODE",{});var CWr=s(oae);t1o=r(CWr,"model.eval()"),CWr.forEach(t),a1o=r(xEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rae=n(xEe,"CODE",{});var wWr=s(rae);n1o=r(wWr,"model.train()"),wWr.forEach(t),xEe.forEach(t),s1o=i(Gt),tae=n(Gt,"P",{});var AWr=s(tae);l1o=r(AWr,"Examples:"),AWr.forEach(t),i1o=i(Gt),m(iC.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),eRe=i(c),rd=n(c,"H2",{class:!0});var dPe=s(rd);uu=n(dPe,"A",{id:!0,class:!0,href:!0});var yWr=s(uu);aae=n(yWr,"SPAN",{});var LWr=s(aae);m(dC.$$.fragment,LWr),LWr.forEach(t),yWr.forEach(t),d1o=i(dPe),nae=n(dPe,"SPAN",{});var xWr=s(nae);c1o=r(xWr,"AutoModelForCausalLM"),xWr.forEach(t),dPe.forEach(t),oRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(cC.$$.fragment,Js),f1o=i(Js),td=n(Js,"P",{});var ZH=s(td);m1o=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),C$=n(ZH,"A",{href:!0});var kWr=s(C$);g1o=r(kWr,"from_pretrained()"),kWr.forEach(t),h1o=r(ZH," class method or the "),w$=n(ZH,"A",{href:!0});var SWr=s(w$);p1o=r(SWr,"from_config()"),SWr.forEach(t),_1o=r(ZH,` class
method.`),ZH.forEach(t),u1o=i(Js),fC=n(Js,"P",{});var cPe=s(fC);b1o=r(cPe,"This class cannot be instantiated directly using "),sae=n(cPe,"CODE",{});var RWr=s(sae);F1o=r(RWr,"__init__()"),RWr.forEach(t),v1o=r(cPe," (throws an error)."),cPe.forEach(t),T1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(mC.$$.fragment,Ys),M1o=i(Ys),lae=n(Ys,"P",{});var BWr=s(lae);E1o=r(BWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),BWr.forEach(t),C1o=i(Ys),ad=n(Ys,"P",{});var eU=s(ad);w1o=r(eU,`Note:
Loading a model from its configuration file does `),iae=n(eU,"STRONG",{});var PWr=s(iae);A1o=r(PWr,"not"),PWr.forEach(t),y1o=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),A$=n(eU,"A",{href:!0});var $Wr=s(A$);L1o=r($Wr,"from_pretrained()"),$Wr.forEach(t),x1o=r(eU," to load the model weights."),eU.forEach(t),k1o=i(Ys),dae=n(Ys,"P",{});var IWr=s(dae);S1o=r(IWr,"Examples:"),IWr.forEach(t),R1o=i(Ys),m(gC.$$.fragment,Ys),Ys.forEach(t),B1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(hC.$$.fragment,Ot),P1o=i(Ot),cae=n(Ot,"P",{});var qWr=s(cae);$1o=r(qWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qWr.forEach(t),I1o=i(Ot),Qa=n(Ot,"P",{});var T4=s(Qa);q1o=r(T4,"The model class to instantiate is selected based on the "),fae=n(T4,"CODE",{});var NWr=s(fae);N1o=r(NWr,"model_type"),NWr.forEach(t),j1o=r(T4,` property of the config object (either
passed as an argument or loaded from `),mae=n(T4,"CODE",{});var jWr=s(mae);D1o=r(jWr,"pretrained_model_name_or_path"),jWr.forEach(t),G1o=r(T4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gae=n(T4,"CODE",{});var DWr=s(gae);O1o=r(DWr,"pretrained_model_name_or_path"),DWr.forEach(t),V1o=r(T4,":"),T4.forEach(t),X1o=i(Ot),$=n(Ot,"UL",{});var q=s($);bu=n(q,"LI",{});var kEe=s(bu);hae=n(kEe,"STRONG",{});var GWr=s(hae);z1o=r(GWr,"bart"),GWr.forEach(t),Q1o=r(kEe," \u2014 "),y$=n(kEe,"A",{href:!0});var OWr=s(y$);W1o=r(OWr,"BartForCausalLM"),OWr.forEach(t),H1o=r(kEe," (BART model)"),kEe.forEach(t),U1o=i(q),Fu=n(q,"LI",{});var SEe=s(Fu);pae=n(SEe,"STRONG",{});var VWr=s(pae);J1o=r(VWr,"bert"),VWr.forEach(t),Y1o=r(SEe," \u2014 "),L$=n(SEe,"A",{href:!0});var XWr=s(L$);K1o=r(XWr,"BertLMHeadModel"),XWr.forEach(t),Z1o=r(SEe," (BERT model)"),SEe.forEach(t),ebo=i(q),vu=n(q,"LI",{});var REe=s(vu);_ae=n(REe,"STRONG",{});var zWr=s(_ae);obo=r(zWr,"bert-generation"),zWr.forEach(t),rbo=r(REe," \u2014 "),x$=n(REe,"A",{href:!0});var QWr=s(x$);tbo=r(QWr,"BertGenerationDecoder"),QWr.forEach(t),abo=r(REe," (Bert Generation model)"),REe.forEach(t),nbo=i(q),Tu=n(q,"LI",{});var BEe=s(Tu);uae=n(BEe,"STRONG",{});var WWr=s(uae);sbo=r(WWr,"big_bird"),WWr.forEach(t),lbo=r(BEe," \u2014 "),k$=n(BEe,"A",{href:!0});var HWr=s(k$);ibo=r(HWr,"BigBirdForCausalLM"),HWr.forEach(t),dbo=r(BEe," (BigBird model)"),BEe.forEach(t),cbo=i(q),Mu=n(q,"LI",{});var PEe=s(Mu);bae=n(PEe,"STRONG",{});var UWr=s(bae);fbo=r(UWr,"bigbird_pegasus"),UWr.forEach(t),mbo=r(PEe," \u2014 "),S$=n(PEe,"A",{href:!0});var JWr=s(S$);gbo=r(JWr,"BigBirdPegasusForCausalLM"),JWr.forEach(t),hbo=r(PEe," (BigBirdPegasus model)"),PEe.forEach(t),pbo=i(q),Eu=n(q,"LI",{});var $Ee=s(Eu);Fae=n($Ee,"STRONG",{});var YWr=s(Fae);_bo=r(YWr,"blenderbot"),YWr.forEach(t),ubo=r($Ee," \u2014 "),R$=n($Ee,"A",{href:!0});var KWr=s(R$);bbo=r(KWr,"BlenderbotForCausalLM"),KWr.forEach(t),Fbo=r($Ee," (Blenderbot model)"),$Ee.forEach(t),vbo=i(q),Cu=n(q,"LI",{});var IEe=s(Cu);vae=n(IEe,"STRONG",{});var ZWr=s(vae);Tbo=r(ZWr,"blenderbot-small"),ZWr.forEach(t),Mbo=r(IEe," \u2014 "),B$=n(IEe,"A",{href:!0});var eHr=s(B$);Ebo=r(eHr,"BlenderbotSmallForCausalLM"),eHr.forEach(t),Cbo=r(IEe," (BlenderbotSmall model)"),IEe.forEach(t),wbo=i(q),wu=n(q,"LI",{});var qEe=s(wu);Tae=n(qEe,"STRONG",{});var oHr=s(Tae);Abo=r(oHr,"camembert"),oHr.forEach(t),ybo=r(qEe," \u2014 "),P$=n(qEe,"A",{href:!0});var rHr=s(P$);Lbo=r(rHr,"CamembertForCausalLM"),rHr.forEach(t),xbo=r(qEe," (CamemBERT model)"),qEe.forEach(t),kbo=i(q),Au=n(q,"LI",{});var NEe=s(Au);Mae=n(NEe,"STRONG",{});var tHr=s(Mae);Sbo=r(tHr,"ctrl"),tHr.forEach(t),Rbo=r(NEe," \u2014 "),$$=n(NEe,"A",{href:!0});var aHr=s($$);Bbo=r(aHr,"CTRLLMHeadModel"),aHr.forEach(t),Pbo=r(NEe," (CTRL model)"),NEe.forEach(t),$bo=i(q),yu=n(q,"LI",{});var jEe=s(yu);Eae=n(jEe,"STRONG",{});var nHr=s(Eae);Ibo=r(nHr,"data2vec-text"),nHr.forEach(t),qbo=r(jEe," \u2014 "),I$=n(jEe,"A",{href:!0});var sHr=s(I$);Nbo=r(sHr,"Data2VecTextForCausalLM"),sHr.forEach(t),jbo=r(jEe," (Data2VecText model)"),jEe.forEach(t),Dbo=i(q),Lu=n(q,"LI",{});var DEe=s(Lu);Cae=n(DEe,"STRONG",{});var lHr=s(Cae);Gbo=r(lHr,"electra"),lHr.forEach(t),Obo=r(DEe," \u2014 "),q$=n(DEe,"A",{href:!0});var iHr=s(q$);Vbo=r(iHr,"ElectraForCausalLM"),iHr.forEach(t),Xbo=r(DEe," (ELECTRA model)"),DEe.forEach(t),zbo=i(q),xu=n(q,"LI",{});var GEe=s(xu);wae=n(GEe,"STRONG",{});var dHr=s(wae);Qbo=r(dHr,"gpt2"),dHr.forEach(t),Wbo=r(GEe," \u2014 "),N$=n(GEe,"A",{href:!0});var cHr=s(N$);Hbo=r(cHr,"GPT2LMHeadModel"),cHr.forEach(t),Ubo=r(GEe," (OpenAI GPT-2 model)"),GEe.forEach(t),Jbo=i(q),ku=n(q,"LI",{});var OEe=s(ku);Aae=n(OEe,"STRONG",{});var fHr=s(Aae);Ybo=r(fHr,"gpt_neo"),fHr.forEach(t),Kbo=r(OEe," \u2014 "),j$=n(OEe,"A",{href:!0});var mHr=s(j$);Zbo=r(mHr,"GPTNeoForCausalLM"),mHr.forEach(t),e5o=r(OEe," (GPT Neo model)"),OEe.forEach(t),o5o=i(q),Su=n(q,"LI",{});var VEe=s(Su);yae=n(VEe,"STRONG",{});var gHr=s(yae);r5o=r(gHr,"gptj"),gHr.forEach(t),t5o=r(VEe," \u2014 "),D$=n(VEe,"A",{href:!0});var hHr=s(D$);a5o=r(hHr,"GPTJForCausalLM"),hHr.forEach(t),n5o=r(VEe," (GPT-J model)"),VEe.forEach(t),s5o=i(q),Ru=n(q,"LI",{});var XEe=s(Ru);Lae=n(XEe,"STRONG",{});var pHr=s(Lae);l5o=r(pHr,"marian"),pHr.forEach(t),i5o=r(XEe," \u2014 "),G$=n(XEe,"A",{href:!0});var _Hr=s(G$);d5o=r(_Hr,"MarianForCausalLM"),_Hr.forEach(t),c5o=r(XEe," (Marian model)"),XEe.forEach(t),f5o=i(q),Bu=n(q,"LI",{});var zEe=s(Bu);xae=n(zEe,"STRONG",{});var uHr=s(xae);m5o=r(uHr,"mbart"),uHr.forEach(t),g5o=r(zEe," \u2014 "),O$=n(zEe,"A",{href:!0});var bHr=s(O$);h5o=r(bHr,"MBartForCausalLM"),bHr.forEach(t),p5o=r(zEe," (mBART model)"),zEe.forEach(t),_5o=i(q),Pu=n(q,"LI",{});var QEe=s(Pu);kae=n(QEe,"STRONG",{});var FHr=s(kae);u5o=r(FHr,"megatron-bert"),FHr.forEach(t),b5o=r(QEe," \u2014 "),V$=n(QEe,"A",{href:!0});var vHr=s(V$);F5o=r(vHr,"MegatronBertForCausalLM"),vHr.forEach(t),v5o=r(QEe," (MegatronBert model)"),QEe.forEach(t),T5o=i(q),$u=n(q,"LI",{});var WEe=s($u);Sae=n(WEe,"STRONG",{});var THr=s(Sae);M5o=r(THr,"openai-gpt"),THr.forEach(t),E5o=r(WEe," \u2014 "),X$=n(WEe,"A",{href:!0});var MHr=s(X$);C5o=r(MHr,"OpenAIGPTLMHeadModel"),MHr.forEach(t),w5o=r(WEe," (OpenAI GPT model)"),WEe.forEach(t),A5o=i(q),Iu=n(q,"LI",{});var HEe=s(Iu);Rae=n(HEe,"STRONG",{});var EHr=s(Rae);y5o=r(EHr,"pegasus"),EHr.forEach(t),L5o=r(HEe," \u2014 "),z$=n(HEe,"A",{href:!0});var CHr=s(z$);x5o=r(CHr,"PegasusForCausalLM"),CHr.forEach(t),k5o=r(HEe," (Pegasus model)"),HEe.forEach(t),S5o=i(q),qu=n(q,"LI",{});var UEe=s(qu);Bae=n(UEe,"STRONG",{});var wHr=s(Bae);R5o=r(wHr,"plbart"),wHr.forEach(t),B5o=r(UEe," \u2014 "),Q$=n(UEe,"A",{href:!0});var AHr=s(Q$);P5o=r(AHr,"PLBartForCausalLM"),AHr.forEach(t),$5o=r(UEe," (PLBart model)"),UEe.forEach(t),I5o=i(q),Nu=n(q,"LI",{});var JEe=s(Nu);Pae=n(JEe,"STRONG",{});var yHr=s(Pae);q5o=r(yHr,"prophetnet"),yHr.forEach(t),N5o=r(JEe," \u2014 "),W$=n(JEe,"A",{href:!0});var LHr=s(W$);j5o=r(LHr,"ProphetNetForCausalLM"),LHr.forEach(t),D5o=r(JEe," (ProphetNet model)"),JEe.forEach(t),G5o=i(q),ju=n(q,"LI",{});var YEe=s(ju);$ae=n(YEe,"STRONG",{});var xHr=s($ae);O5o=r(xHr,"qdqbert"),xHr.forEach(t),V5o=r(YEe," \u2014 "),H$=n(YEe,"A",{href:!0});var kHr=s(H$);X5o=r(kHr,"QDQBertLMHeadModel"),kHr.forEach(t),z5o=r(YEe," (QDQBert model)"),YEe.forEach(t),Q5o=i(q),Du=n(q,"LI",{});var KEe=s(Du);Iae=n(KEe,"STRONG",{});var SHr=s(Iae);W5o=r(SHr,"reformer"),SHr.forEach(t),H5o=r(KEe," \u2014 "),U$=n(KEe,"A",{href:!0});var RHr=s(U$);U5o=r(RHr,"ReformerModelWithLMHead"),RHr.forEach(t),J5o=r(KEe," (Reformer model)"),KEe.forEach(t),Y5o=i(q),Gu=n(q,"LI",{});var ZEe=s(Gu);qae=n(ZEe,"STRONG",{});var BHr=s(qae);K5o=r(BHr,"rembert"),BHr.forEach(t),Z5o=r(ZEe," \u2014 "),J$=n(ZEe,"A",{href:!0});var PHr=s(J$);e3o=r(PHr,"RemBertForCausalLM"),PHr.forEach(t),o3o=r(ZEe," (RemBERT model)"),ZEe.forEach(t),r3o=i(q),Ou=n(q,"LI",{});var eCe=s(Ou);Nae=n(eCe,"STRONG",{});var $Hr=s(Nae);t3o=r($Hr,"roberta"),$Hr.forEach(t),a3o=r(eCe," \u2014 "),Y$=n(eCe,"A",{href:!0});var IHr=s(Y$);n3o=r(IHr,"RobertaForCausalLM"),IHr.forEach(t),s3o=r(eCe," (RoBERTa model)"),eCe.forEach(t),l3o=i(q),Vu=n(q,"LI",{});var oCe=s(Vu);jae=n(oCe,"STRONG",{});var qHr=s(jae);i3o=r(qHr,"roformer"),qHr.forEach(t),d3o=r(oCe," \u2014 "),K$=n(oCe,"A",{href:!0});var NHr=s(K$);c3o=r(NHr,"RoFormerForCausalLM"),NHr.forEach(t),f3o=r(oCe," (RoFormer model)"),oCe.forEach(t),m3o=i(q),Xu=n(q,"LI",{});var rCe=s(Xu);Dae=n(rCe,"STRONG",{});var jHr=s(Dae);g3o=r(jHr,"speech_to_text_2"),jHr.forEach(t),h3o=r(rCe," \u2014 "),Z$=n(rCe,"A",{href:!0});var DHr=s(Z$);p3o=r(DHr,"Speech2Text2ForCausalLM"),DHr.forEach(t),_3o=r(rCe," (Speech2Text2 model)"),rCe.forEach(t),u3o=i(q),zu=n(q,"LI",{});var tCe=s(zu);Gae=n(tCe,"STRONG",{});var GHr=s(Gae);b3o=r(GHr,"transfo-xl"),GHr.forEach(t),F3o=r(tCe," \u2014 "),eI=n(tCe,"A",{href:!0});var OHr=s(eI);v3o=r(OHr,"TransfoXLLMHeadModel"),OHr.forEach(t),T3o=r(tCe," (Transformer-XL model)"),tCe.forEach(t),M3o=i(q),Qu=n(q,"LI",{});var aCe=s(Qu);Oae=n(aCe,"STRONG",{});var VHr=s(Oae);E3o=r(VHr,"trocr"),VHr.forEach(t),C3o=r(aCe," \u2014 "),oI=n(aCe,"A",{href:!0});var XHr=s(oI);w3o=r(XHr,"TrOCRForCausalLM"),XHr.forEach(t),A3o=r(aCe," (TrOCR model)"),aCe.forEach(t),y3o=i(q),Wu=n(q,"LI",{});var nCe=s(Wu);Vae=n(nCe,"STRONG",{});var zHr=s(Vae);L3o=r(zHr,"xglm"),zHr.forEach(t),x3o=r(nCe," \u2014 "),rI=n(nCe,"A",{href:!0});var QHr=s(rI);k3o=r(QHr,"XGLMForCausalLM"),QHr.forEach(t),S3o=r(nCe," (XGLM model)"),nCe.forEach(t),R3o=i(q),Hu=n(q,"LI",{});var sCe=s(Hu);Xae=n(sCe,"STRONG",{});var WHr=s(Xae);B3o=r(WHr,"xlm"),WHr.forEach(t),P3o=r(sCe," \u2014 "),tI=n(sCe,"A",{href:!0});var HHr=s(tI);$3o=r(HHr,"XLMWithLMHeadModel"),HHr.forEach(t),I3o=r(sCe," (XLM model)"),sCe.forEach(t),q3o=i(q),Uu=n(q,"LI",{});var lCe=s(Uu);zae=n(lCe,"STRONG",{});var UHr=s(zae);N3o=r(UHr,"xlm-prophetnet"),UHr.forEach(t),j3o=r(lCe," \u2014 "),aI=n(lCe,"A",{href:!0});var JHr=s(aI);D3o=r(JHr,"XLMProphetNetForCausalLM"),JHr.forEach(t),G3o=r(lCe," (XLMProphetNet model)"),lCe.forEach(t),O3o=i(q),Ju=n(q,"LI",{});var iCe=s(Ju);Qae=n(iCe,"STRONG",{});var YHr=s(Qae);V3o=r(YHr,"xlm-roberta"),YHr.forEach(t),X3o=r(iCe," \u2014 "),nI=n(iCe,"A",{href:!0});var KHr=s(nI);z3o=r(KHr,"XLMRobertaForCausalLM"),KHr.forEach(t),Q3o=r(iCe," (XLM-RoBERTa model)"),iCe.forEach(t),W3o=i(q),Yu=n(q,"LI",{});var dCe=s(Yu);Wae=n(dCe,"STRONG",{});var ZHr=s(Wae);H3o=r(ZHr,"xlm-roberta-xl"),ZHr.forEach(t),U3o=r(dCe," \u2014 "),sI=n(dCe,"A",{href:!0});var eUr=s(sI);J3o=r(eUr,"XLMRobertaXLForCausalLM"),eUr.forEach(t),Y3o=r(dCe," (XLM-RoBERTa-XL model)"),dCe.forEach(t),K3o=i(q),Ku=n(q,"LI",{});var cCe=s(Ku);Hae=n(cCe,"STRONG",{});var oUr=s(Hae);Z3o=r(oUr,"xlnet"),oUr.forEach(t),e2o=r(cCe," \u2014 "),lI=n(cCe,"A",{href:!0});var rUr=s(lI);o2o=r(rUr,"XLNetLMHeadModel"),rUr.forEach(t),r2o=r(cCe," (XLNet model)"),cCe.forEach(t),q.forEach(t),t2o=i(Ot),Zu=n(Ot,"P",{});var fCe=s(Zu);a2o=r(fCe,"The model is set in evaluation mode by default using "),Uae=n(fCe,"CODE",{});var tUr=s(Uae);n2o=r(tUr,"model.eval()"),tUr.forEach(t),s2o=r(fCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jae=n(fCe,"CODE",{});var aUr=s(Jae);l2o=r(aUr,"model.train()"),aUr.forEach(t),fCe.forEach(t),i2o=i(Ot),Yae=n(Ot,"P",{});var nUr=s(Yae);d2o=r(nUr,"Examples:"),nUr.forEach(t),c2o=i(Ot),m(pC.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),rRe=i(c),nd=n(c,"H2",{class:!0});var fPe=s(nd);e1=n(fPe,"A",{id:!0,class:!0,href:!0});var sUr=s(e1);Kae=n(sUr,"SPAN",{});var lUr=s(Kae);m(_C.$$.fragment,lUr),lUr.forEach(t),sUr.forEach(t),f2o=i(fPe),Zae=n(fPe,"SPAN",{});var iUr=s(Zae);m2o=r(iUr,"AutoModelForMaskedLM"),iUr.forEach(t),fPe.forEach(t),tRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(uC.$$.fragment,Ks),g2o=i(Ks),sd=n(Ks,"P",{});var oU=s(sd);h2o=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),iI=n(oU,"A",{href:!0});var dUr=s(iI);p2o=r(dUr,"from_pretrained()"),dUr.forEach(t),_2o=r(oU," class method or the "),dI=n(oU,"A",{href:!0});var cUr=s(dI);u2o=r(cUr,"from_config()"),cUr.forEach(t),b2o=r(oU,` class
method.`),oU.forEach(t),F2o=i(Ks),bC=n(Ks,"P",{});var mPe=s(bC);v2o=r(mPe,"This class cannot be instantiated directly using "),ene=n(mPe,"CODE",{});var fUr=s(ene);T2o=r(fUr,"__init__()"),fUr.forEach(t),M2o=r(mPe," (throws an error)."),mPe.forEach(t),E2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(FC.$$.fragment,Zs),C2o=i(Zs),one=n(Zs,"P",{});var mUr=s(one);w2o=r(mUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mUr.forEach(t),A2o=i(Zs),ld=n(Zs,"P",{});var rU=s(ld);y2o=r(rU,`Note:
Loading a model from its configuration file does `),rne=n(rU,"STRONG",{});var gUr=s(rne);L2o=r(gUr,"not"),gUr.forEach(t),x2o=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cI=n(rU,"A",{href:!0});var hUr=s(cI);k2o=r(hUr,"from_pretrained()"),hUr.forEach(t),S2o=r(rU," to load the model weights."),rU.forEach(t),R2o=i(Zs),tne=n(Zs,"P",{});var pUr=s(tne);B2o=r(pUr,"Examples:"),pUr.forEach(t),P2o=i(Zs),m(vC.$$.fragment,Zs),Zs.forEach(t),$2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(TC.$$.fragment,Vt),I2o=i(Vt),ane=n(Vt,"P",{});var _Ur=s(ane);q2o=r(_Ur,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Ur.forEach(t),N2o=i(Vt),Wa=n(Vt,"P",{});var M4=s(Wa);j2o=r(M4,"The model class to instantiate is selected based on the "),nne=n(M4,"CODE",{});var uUr=s(nne);D2o=r(uUr,"model_type"),uUr.forEach(t),G2o=r(M4,` property of the config object (either
passed as an argument or loaded from `),sne=n(M4,"CODE",{});var bUr=s(sne);O2o=r(bUr,"pretrained_model_name_or_path"),bUr.forEach(t),V2o=r(M4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lne=n(M4,"CODE",{});var FUr=s(lne);X2o=r(FUr,"pretrained_model_name_or_path"),FUr.forEach(t),z2o=r(M4,":"),M4.forEach(t),Q2o=i(Vt),I=n(Vt,"UL",{});var N=s(I);o1=n(N,"LI",{});var mCe=s(o1);ine=n(mCe,"STRONG",{});var vUr=s(ine);W2o=r(vUr,"albert"),vUr.forEach(t),H2o=r(mCe," \u2014 "),fI=n(mCe,"A",{href:!0});var TUr=s(fI);U2o=r(TUr,"AlbertForMaskedLM"),TUr.forEach(t),J2o=r(mCe," (ALBERT model)"),mCe.forEach(t),Y2o=i(N),r1=n(N,"LI",{});var gCe=s(r1);dne=n(gCe,"STRONG",{});var MUr=s(dne);K2o=r(MUr,"bart"),MUr.forEach(t),Z2o=r(gCe," \u2014 "),mI=n(gCe,"A",{href:!0});var EUr=s(mI);eFo=r(EUr,"BartForConditionalGeneration"),EUr.forEach(t),oFo=r(gCe," (BART model)"),gCe.forEach(t),rFo=i(N),t1=n(N,"LI",{});var hCe=s(t1);cne=n(hCe,"STRONG",{});var CUr=s(cne);tFo=r(CUr,"bert"),CUr.forEach(t),aFo=r(hCe," \u2014 "),gI=n(hCe,"A",{href:!0});var wUr=s(gI);nFo=r(wUr,"BertForMaskedLM"),wUr.forEach(t),sFo=r(hCe," (BERT model)"),hCe.forEach(t),lFo=i(N),a1=n(N,"LI",{});var pCe=s(a1);fne=n(pCe,"STRONG",{});var AUr=s(fne);iFo=r(AUr,"big_bird"),AUr.forEach(t),dFo=r(pCe," \u2014 "),hI=n(pCe,"A",{href:!0});var yUr=s(hI);cFo=r(yUr,"BigBirdForMaskedLM"),yUr.forEach(t),fFo=r(pCe," (BigBird model)"),pCe.forEach(t),mFo=i(N),n1=n(N,"LI",{});var _Ce=s(n1);mne=n(_Ce,"STRONG",{});var LUr=s(mne);gFo=r(LUr,"camembert"),LUr.forEach(t),hFo=r(_Ce," \u2014 "),pI=n(_Ce,"A",{href:!0});var xUr=s(pI);pFo=r(xUr,"CamembertForMaskedLM"),xUr.forEach(t),_Fo=r(_Ce," (CamemBERT model)"),_Ce.forEach(t),uFo=i(N),s1=n(N,"LI",{});var uCe=s(s1);gne=n(uCe,"STRONG",{});var kUr=s(gne);bFo=r(kUr,"convbert"),kUr.forEach(t),FFo=r(uCe," \u2014 "),_I=n(uCe,"A",{href:!0});var SUr=s(_I);vFo=r(SUr,"ConvBertForMaskedLM"),SUr.forEach(t),TFo=r(uCe," (ConvBERT model)"),uCe.forEach(t),MFo=i(N),l1=n(N,"LI",{});var bCe=s(l1);hne=n(bCe,"STRONG",{});var RUr=s(hne);EFo=r(RUr,"data2vec-text"),RUr.forEach(t),CFo=r(bCe," \u2014 "),uI=n(bCe,"A",{href:!0});var BUr=s(uI);wFo=r(BUr,"Data2VecTextForMaskedLM"),BUr.forEach(t),AFo=r(bCe," (Data2VecText model)"),bCe.forEach(t),yFo=i(N),i1=n(N,"LI",{});var FCe=s(i1);pne=n(FCe,"STRONG",{});var PUr=s(pne);LFo=r(PUr,"deberta"),PUr.forEach(t),xFo=r(FCe," \u2014 "),bI=n(FCe,"A",{href:!0});var $Ur=s(bI);kFo=r($Ur,"DebertaForMaskedLM"),$Ur.forEach(t),SFo=r(FCe," (DeBERTa model)"),FCe.forEach(t),RFo=i(N),d1=n(N,"LI",{});var vCe=s(d1);_ne=n(vCe,"STRONG",{});var IUr=s(_ne);BFo=r(IUr,"deberta-v2"),IUr.forEach(t),PFo=r(vCe," \u2014 "),FI=n(vCe,"A",{href:!0});var qUr=s(FI);$Fo=r(qUr,"DebertaV2ForMaskedLM"),qUr.forEach(t),IFo=r(vCe," (DeBERTa-v2 model)"),vCe.forEach(t),qFo=i(N),c1=n(N,"LI",{});var TCe=s(c1);une=n(TCe,"STRONG",{});var NUr=s(une);NFo=r(NUr,"distilbert"),NUr.forEach(t),jFo=r(TCe," \u2014 "),vI=n(TCe,"A",{href:!0});var jUr=s(vI);DFo=r(jUr,"DistilBertForMaskedLM"),jUr.forEach(t),GFo=r(TCe," (DistilBERT model)"),TCe.forEach(t),OFo=i(N),f1=n(N,"LI",{});var MCe=s(f1);bne=n(MCe,"STRONG",{});var DUr=s(bne);VFo=r(DUr,"electra"),DUr.forEach(t),XFo=r(MCe," \u2014 "),TI=n(MCe,"A",{href:!0});var GUr=s(TI);zFo=r(GUr,"ElectraForMaskedLM"),GUr.forEach(t),QFo=r(MCe," (ELECTRA model)"),MCe.forEach(t),WFo=i(N),m1=n(N,"LI",{});var ECe=s(m1);Fne=n(ECe,"STRONG",{});var OUr=s(Fne);HFo=r(OUr,"flaubert"),OUr.forEach(t),UFo=r(ECe," \u2014 "),MI=n(ECe,"A",{href:!0});var VUr=s(MI);JFo=r(VUr,"FlaubertWithLMHeadModel"),VUr.forEach(t),YFo=r(ECe," (FlauBERT model)"),ECe.forEach(t),KFo=i(N),g1=n(N,"LI",{});var CCe=s(g1);vne=n(CCe,"STRONG",{});var XUr=s(vne);ZFo=r(XUr,"fnet"),XUr.forEach(t),evo=r(CCe," \u2014 "),EI=n(CCe,"A",{href:!0});var zUr=s(EI);ovo=r(zUr,"FNetForMaskedLM"),zUr.forEach(t),rvo=r(CCe," (FNet model)"),CCe.forEach(t),tvo=i(N),h1=n(N,"LI",{});var wCe=s(h1);Tne=n(wCe,"STRONG",{});var QUr=s(Tne);avo=r(QUr,"funnel"),QUr.forEach(t),nvo=r(wCe," \u2014 "),CI=n(wCe,"A",{href:!0});var WUr=s(CI);svo=r(WUr,"FunnelForMaskedLM"),WUr.forEach(t),lvo=r(wCe," (Funnel Transformer model)"),wCe.forEach(t),ivo=i(N),p1=n(N,"LI",{});var ACe=s(p1);Mne=n(ACe,"STRONG",{});var HUr=s(Mne);dvo=r(HUr,"ibert"),HUr.forEach(t),cvo=r(ACe," \u2014 "),wI=n(ACe,"A",{href:!0});var UUr=s(wI);fvo=r(UUr,"IBertForMaskedLM"),UUr.forEach(t),mvo=r(ACe," (I-BERT model)"),ACe.forEach(t),gvo=i(N),_1=n(N,"LI",{});var yCe=s(_1);Ene=n(yCe,"STRONG",{});var JUr=s(Ene);hvo=r(JUr,"layoutlm"),JUr.forEach(t),pvo=r(yCe," \u2014 "),AI=n(yCe,"A",{href:!0});var YUr=s(AI);_vo=r(YUr,"LayoutLMForMaskedLM"),YUr.forEach(t),uvo=r(yCe," (LayoutLM model)"),yCe.forEach(t),bvo=i(N),u1=n(N,"LI",{});var LCe=s(u1);Cne=n(LCe,"STRONG",{});var KUr=s(Cne);Fvo=r(KUr,"longformer"),KUr.forEach(t),vvo=r(LCe," \u2014 "),yI=n(LCe,"A",{href:!0});var ZUr=s(yI);Tvo=r(ZUr,"LongformerForMaskedLM"),ZUr.forEach(t),Mvo=r(LCe," (Longformer model)"),LCe.forEach(t),Evo=i(N),b1=n(N,"LI",{});var xCe=s(b1);wne=n(xCe,"STRONG",{});var eJr=s(wne);Cvo=r(eJr,"mbart"),eJr.forEach(t),wvo=r(xCe," \u2014 "),LI=n(xCe,"A",{href:!0});var oJr=s(LI);Avo=r(oJr,"MBartForConditionalGeneration"),oJr.forEach(t),yvo=r(xCe," (mBART model)"),xCe.forEach(t),Lvo=i(N),F1=n(N,"LI",{});var kCe=s(F1);Ane=n(kCe,"STRONG",{});var rJr=s(Ane);xvo=r(rJr,"megatron-bert"),rJr.forEach(t),kvo=r(kCe," \u2014 "),xI=n(kCe,"A",{href:!0});var tJr=s(xI);Svo=r(tJr,"MegatronBertForMaskedLM"),tJr.forEach(t),Rvo=r(kCe," (MegatronBert model)"),kCe.forEach(t),Bvo=i(N),v1=n(N,"LI",{});var SCe=s(v1);yne=n(SCe,"STRONG",{});var aJr=s(yne);Pvo=r(aJr,"mobilebert"),aJr.forEach(t),$vo=r(SCe," \u2014 "),kI=n(SCe,"A",{href:!0});var nJr=s(kI);Ivo=r(nJr,"MobileBertForMaskedLM"),nJr.forEach(t),qvo=r(SCe," (MobileBERT model)"),SCe.forEach(t),Nvo=i(N),T1=n(N,"LI",{});var RCe=s(T1);Lne=n(RCe,"STRONG",{});var sJr=s(Lne);jvo=r(sJr,"mpnet"),sJr.forEach(t),Dvo=r(RCe," \u2014 "),SI=n(RCe,"A",{href:!0});var lJr=s(SI);Gvo=r(lJr,"MPNetForMaskedLM"),lJr.forEach(t),Ovo=r(RCe," (MPNet model)"),RCe.forEach(t),Vvo=i(N),M1=n(N,"LI",{});var BCe=s(M1);xne=n(BCe,"STRONG",{});var iJr=s(xne);Xvo=r(iJr,"nystromformer"),iJr.forEach(t),zvo=r(BCe," \u2014 "),RI=n(BCe,"A",{href:!0});var dJr=s(RI);Qvo=r(dJr,"NystromformerForMaskedLM"),dJr.forEach(t),Wvo=r(BCe," (Nystromformer model)"),BCe.forEach(t),Hvo=i(N),E1=n(N,"LI",{});var PCe=s(E1);kne=n(PCe,"STRONG",{});var cJr=s(kne);Uvo=r(cJr,"perceiver"),cJr.forEach(t),Jvo=r(PCe," \u2014 "),BI=n(PCe,"A",{href:!0});var fJr=s(BI);Yvo=r(fJr,"PerceiverForMaskedLM"),fJr.forEach(t),Kvo=r(PCe," (Perceiver model)"),PCe.forEach(t),Zvo=i(N),C1=n(N,"LI",{});var $Ce=s(C1);Sne=n($Ce,"STRONG",{});var mJr=s(Sne);e6o=r(mJr,"qdqbert"),mJr.forEach(t),o6o=r($Ce," \u2014 "),PI=n($Ce,"A",{href:!0});var gJr=s(PI);r6o=r(gJr,"QDQBertForMaskedLM"),gJr.forEach(t),t6o=r($Ce," (QDQBert model)"),$Ce.forEach(t),a6o=i(N),w1=n(N,"LI",{});var ICe=s(w1);Rne=n(ICe,"STRONG",{});var hJr=s(Rne);n6o=r(hJr,"reformer"),hJr.forEach(t),s6o=r(ICe," \u2014 "),$I=n(ICe,"A",{href:!0});var pJr=s($I);l6o=r(pJr,"ReformerForMaskedLM"),pJr.forEach(t),i6o=r(ICe," (Reformer model)"),ICe.forEach(t),d6o=i(N),A1=n(N,"LI",{});var qCe=s(A1);Bne=n(qCe,"STRONG",{});var _Jr=s(Bne);c6o=r(_Jr,"rembert"),_Jr.forEach(t),f6o=r(qCe," \u2014 "),II=n(qCe,"A",{href:!0});var uJr=s(II);m6o=r(uJr,"RemBertForMaskedLM"),uJr.forEach(t),g6o=r(qCe," (RemBERT model)"),qCe.forEach(t),h6o=i(N),y1=n(N,"LI",{});var NCe=s(y1);Pne=n(NCe,"STRONG",{});var bJr=s(Pne);p6o=r(bJr,"roberta"),bJr.forEach(t),_6o=r(NCe," \u2014 "),qI=n(NCe,"A",{href:!0});var FJr=s(qI);u6o=r(FJr,"RobertaForMaskedLM"),FJr.forEach(t),b6o=r(NCe," (RoBERTa model)"),NCe.forEach(t),F6o=i(N),L1=n(N,"LI",{});var jCe=s(L1);$ne=n(jCe,"STRONG",{});var vJr=s($ne);v6o=r(vJr,"roformer"),vJr.forEach(t),T6o=r(jCe," \u2014 "),NI=n(jCe,"A",{href:!0});var TJr=s(NI);M6o=r(TJr,"RoFormerForMaskedLM"),TJr.forEach(t),E6o=r(jCe," (RoFormer model)"),jCe.forEach(t),C6o=i(N),x1=n(N,"LI",{});var DCe=s(x1);Ine=n(DCe,"STRONG",{});var MJr=s(Ine);w6o=r(MJr,"squeezebert"),MJr.forEach(t),A6o=r(DCe," \u2014 "),jI=n(DCe,"A",{href:!0});var EJr=s(jI);y6o=r(EJr,"SqueezeBertForMaskedLM"),EJr.forEach(t),L6o=r(DCe," (SqueezeBERT model)"),DCe.forEach(t),x6o=i(N),k1=n(N,"LI",{});var GCe=s(k1);qne=n(GCe,"STRONG",{});var CJr=s(qne);k6o=r(CJr,"tapas"),CJr.forEach(t),S6o=r(GCe," \u2014 "),DI=n(GCe,"A",{href:!0});var wJr=s(DI);R6o=r(wJr,"TapasForMaskedLM"),wJr.forEach(t),B6o=r(GCe," (TAPAS model)"),GCe.forEach(t),P6o=i(N),S1=n(N,"LI",{});var OCe=s(S1);Nne=n(OCe,"STRONG",{});var AJr=s(Nne);$6o=r(AJr,"wav2vec2"),AJr.forEach(t),I6o=r(OCe," \u2014 "),jne=n(OCe,"CODE",{});var yJr=s(jne);q6o=r(yJr,"Wav2Vec2ForMaskedLM"),yJr.forEach(t),N6o=r(OCe,"(Wav2Vec2 model)"),OCe.forEach(t),j6o=i(N),R1=n(N,"LI",{});var VCe=s(R1);Dne=n(VCe,"STRONG",{});var LJr=s(Dne);D6o=r(LJr,"xlm"),LJr.forEach(t),G6o=r(VCe," \u2014 "),GI=n(VCe,"A",{href:!0});var xJr=s(GI);O6o=r(xJr,"XLMWithLMHeadModel"),xJr.forEach(t),V6o=r(VCe," (XLM model)"),VCe.forEach(t),X6o=i(N),B1=n(N,"LI",{});var XCe=s(B1);Gne=n(XCe,"STRONG",{});var kJr=s(Gne);z6o=r(kJr,"xlm-roberta"),kJr.forEach(t),Q6o=r(XCe," \u2014 "),OI=n(XCe,"A",{href:!0});var SJr=s(OI);W6o=r(SJr,"XLMRobertaForMaskedLM"),SJr.forEach(t),H6o=r(XCe," (XLM-RoBERTa model)"),XCe.forEach(t),U6o=i(N),P1=n(N,"LI",{});var zCe=s(P1);One=n(zCe,"STRONG",{});var RJr=s(One);J6o=r(RJr,"xlm-roberta-xl"),RJr.forEach(t),Y6o=r(zCe," \u2014 "),VI=n(zCe,"A",{href:!0});var BJr=s(VI);K6o=r(BJr,"XLMRobertaXLForMaskedLM"),BJr.forEach(t),Z6o=r(zCe," (XLM-RoBERTa-XL model)"),zCe.forEach(t),eTo=i(N),$1=n(N,"LI",{});var QCe=s($1);Vne=n(QCe,"STRONG",{});var PJr=s(Vne);oTo=r(PJr,"yoso"),PJr.forEach(t),rTo=r(QCe," \u2014 "),XI=n(QCe,"A",{href:!0});var $Jr=s(XI);tTo=r($Jr,"YosoForMaskedLM"),$Jr.forEach(t),aTo=r(QCe," (YOSO model)"),QCe.forEach(t),N.forEach(t),nTo=i(Vt),I1=n(Vt,"P",{});var WCe=s(I1);sTo=r(WCe,"The model is set in evaluation mode by default using "),Xne=n(WCe,"CODE",{});var IJr=s(Xne);lTo=r(IJr,"model.eval()"),IJr.forEach(t),iTo=r(WCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(WCe,"CODE",{});var qJr=s(zne);dTo=r(qJr,"model.train()"),qJr.forEach(t),WCe.forEach(t),cTo=i(Vt),Qne=n(Vt,"P",{});var NJr=s(Qne);fTo=r(NJr,"Examples:"),NJr.forEach(t),mTo=i(Vt),m(MC.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),aRe=i(c),id=n(c,"H2",{class:!0});var gPe=s(id);q1=n(gPe,"A",{id:!0,class:!0,href:!0});var jJr=s(q1);Wne=n(jJr,"SPAN",{});var DJr=s(Wne);m(EC.$$.fragment,DJr),DJr.forEach(t),jJr.forEach(t),gTo=i(gPe),Hne=n(gPe,"SPAN",{});var GJr=s(Hne);hTo=r(GJr,"AutoModelForSeq2SeqLM"),GJr.forEach(t),gPe.forEach(t),nRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(CC.$$.fragment,el),pTo=i(el),dd=n(el,"P",{});var tU=s(dd);_To=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zI=n(tU,"A",{href:!0});var OJr=s(zI);uTo=r(OJr,"from_pretrained()"),OJr.forEach(t),bTo=r(tU," class method or the "),QI=n(tU,"A",{href:!0});var VJr=s(QI);FTo=r(VJr,"from_config()"),VJr.forEach(t),vTo=r(tU,` class
method.`),tU.forEach(t),TTo=i(el),wC=n(el,"P",{});var hPe=s(wC);MTo=r(hPe,"This class cannot be instantiated directly using "),Une=n(hPe,"CODE",{});var XJr=s(Une);ETo=r(XJr,"__init__()"),XJr.forEach(t),CTo=r(hPe," (throws an error)."),hPe.forEach(t),wTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(AC.$$.fragment,ol),ATo=i(ol),Jne=n(ol,"P",{});var zJr=s(Jne);yTo=r(zJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zJr.forEach(t),LTo=i(ol),cd=n(ol,"P",{});var aU=s(cd);xTo=r(aU,`Note:
Loading a model from its configuration file does `),Yne=n(aU,"STRONG",{});var QJr=s(Yne);kTo=r(QJr,"not"),QJr.forEach(t),STo=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WI=n(aU,"A",{href:!0});var WJr=s(WI);RTo=r(WJr,"from_pretrained()"),WJr.forEach(t),BTo=r(aU," to load the model weights."),aU.forEach(t),PTo=i(ol),Kne=n(ol,"P",{});var HJr=s(Kne);$To=r(HJr,"Examples:"),HJr.forEach(t),ITo=i(ol),m(yC.$$.fragment,ol),ol.forEach(t),qTo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(LC.$$.fragment,Xt),NTo=i(Xt),Zne=n(Xt,"P",{});var UJr=s(Zne);jTo=r(UJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UJr.forEach(t),DTo=i(Xt),Ha=n(Xt,"P",{});var E4=s(Ha);GTo=r(E4,"The model class to instantiate is selected based on the "),ese=n(E4,"CODE",{});var JJr=s(ese);OTo=r(JJr,"model_type"),JJr.forEach(t),VTo=r(E4,` property of the config object (either
passed as an argument or loaded from `),ose=n(E4,"CODE",{});var YJr=s(ose);XTo=r(YJr,"pretrained_model_name_or_path"),YJr.forEach(t),zTo=r(E4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rse=n(E4,"CODE",{});var KJr=s(rse);QTo=r(KJr,"pretrained_model_name_or_path"),KJr.forEach(t),WTo=r(E4,":"),E4.forEach(t),HTo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var HCe=s(N1);tse=n(HCe,"STRONG",{});var ZJr=s(tse);UTo=r(ZJr,"bart"),ZJr.forEach(t),JTo=r(HCe," \u2014 "),HI=n(HCe,"A",{href:!0});var eYr=s(HI);YTo=r(eYr,"BartForConditionalGeneration"),eYr.forEach(t),KTo=r(HCe," (BART model)"),HCe.forEach(t),ZTo=i(ie),j1=n(ie,"LI",{});var UCe=s(j1);ase=n(UCe,"STRONG",{});var oYr=s(ase);e7o=r(oYr,"bigbird_pegasus"),oYr.forEach(t),o7o=r(UCe," \u2014 "),UI=n(UCe,"A",{href:!0});var rYr=s(UI);r7o=r(rYr,"BigBirdPegasusForConditionalGeneration"),rYr.forEach(t),t7o=r(UCe," (BigBirdPegasus model)"),UCe.forEach(t),a7o=i(ie),D1=n(ie,"LI",{});var JCe=s(D1);nse=n(JCe,"STRONG",{});var tYr=s(nse);n7o=r(tYr,"blenderbot"),tYr.forEach(t),s7o=r(JCe," \u2014 "),JI=n(JCe,"A",{href:!0});var aYr=s(JI);l7o=r(aYr,"BlenderbotForConditionalGeneration"),aYr.forEach(t),i7o=r(JCe," (Blenderbot model)"),JCe.forEach(t),d7o=i(ie),G1=n(ie,"LI",{});var YCe=s(G1);sse=n(YCe,"STRONG",{});var nYr=s(sse);c7o=r(nYr,"blenderbot-small"),nYr.forEach(t),f7o=r(YCe," \u2014 "),YI=n(YCe,"A",{href:!0});var sYr=s(YI);m7o=r(sYr,"BlenderbotSmallForConditionalGeneration"),sYr.forEach(t),g7o=r(YCe," (BlenderbotSmall model)"),YCe.forEach(t),h7o=i(ie),O1=n(ie,"LI",{});var KCe=s(O1);lse=n(KCe,"STRONG",{});var lYr=s(lse);p7o=r(lYr,"encoder-decoder"),lYr.forEach(t),_7o=r(KCe," \u2014 "),KI=n(KCe,"A",{href:!0});var iYr=s(KI);u7o=r(iYr,"EncoderDecoderModel"),iYr.forEach(t),b7o=r(KCe," (Encoder decoder model)"),KCe.forEach(t),F7o=i(ie),V1=n(ie,"LI",{});var ZCe=s(V1);ise=n(ZCe,"STRONG",{});var dYr=s(ise);v7o=r(dYr,"fsmt"),dYr.forEach(t),T7o=r(ZCe," \u2014 "),ZI=n(ZCe,"A",{href:!0});var cYr=s(ZI);M7o=r(cYr,"FSMTForConditionalGeneration"),cYr.forEach(t),E7o=r(ZCe," (FairSeq Machine-Translation model)"),ZCe.forEach(t),C7o=i(ie),X1=n(ie,"LI",{});var ewe=s(X1);dse=n(ewe,"STRONG",{});var fYr=s(dse);w7o=r(fYr,"led"),fYr.forEach(t),A7o=r(ewe," \u2014 "),eq=n(ewe,"A",{href:!0});var mYr=s(eq);y7o=r(mYr,"LEDForConditionalGeneration"),mYr.forEach(t),L7o=r(ewe," (LED model)"),ewe.forEach(t),x7o=i(ie),z1=n(ie,"LI",{});var owe=s(z1);cse=n(owe,"STRONG",{});var gYr=s(cse);k7o=r(gYr,"m2m_100"),gYr.forEach(t),S7o=r(owe," \u2014 "),oq=n(owe,"A",{href:!0});var hYr=s(oq);R7o=r(hYr,"M2M100ForConditionalGeneration"),hYr.forEach(t),B7o=r(owe," (M2M100 model)"),owe.forEach(t),P7o=i(ie),Q1=n(ie,"LI",{});var rwe=s(Q1);fse=n(rwe,"STRONG",{});var pYr=s(fse);$7o=r(pYr,"marian"),pYr.forEach(t),I7o=r(rwe," \u2014 "),rq=n(rwe,"A",{href:!0});var _Yr=s(rq);q7o=r(_Yr,"MarianMTModel"),_Yr.forEach(t),N7o=r(rwe," (Marian model)"),rwe.forEach(t),j7o=i(ie),W1=n(ie,"LI",{});var twe=s(W1);mse=n(twe,"STRONG",{});var uYr=s(mse);D7o=r(uYr,"mbart"),uYr.forEach(t),G7o=r(twe," \u2014 "),tq=n(twe,"A",{href:!0});var bYr=s(tq);O7o=r(bYr,"MBartForConditionalGeneration"),bYr.forEach(t),V7o=r(twe," (mBART model)"),twe.forEach(t),X7o=i(ie),H1=n(ie,"LI",{});var awe=s(H1);gse=n(awe,"STRONG",{});var FYr=s(gse);z7o=r(FYr,"mt5"),FYr.forEach(t),Q7o=r(awe," \u2014 "),aq=n(awe,"A",{href:!0});var vYr=s(aq);W7o=r(vYr,"MT5ForConditionalGeneration"),vYr.forEach(t),H7o=r(awe," (mT5 model)"),awe.forEach(t),U7o=i(ie),U1=n(ie,"LI",{});var nwe=s(U1);hse=n(nwe,"STRONG",{});var TYr=s(hse);J7o=r(TYr,"pegasus"),TYr.forEach(t),Y7o=r(nwe," \u2014 "),nq=n(nwe,"A",{href:!0});var MYr=s(nq);K7o=r(MYr,"PegasusForConditionalGeneration"),MYr.forEach(t),Z7o=r(nwe," (Pegasus model)"),nwe.forEach(t),eMo=i(ie),J1=n(ie,"LI",{});var swe=s(J1);pse=n(swe,"STRONG",{});var EYr=s(pse);oMo=r(EYr,"plbart"),EYr.forEach(t),rMo=r(swe," \u2014 "),sq=n(swe,"A",{href:!0});var CYr=s(sq);tMo=r(CYr,"PLBartForConditionalGeneration"),CYr.forEach(t),aMo=r(swe," (PLBart model)"),swe.forEach(t),nMo=i(ie),Y1=n(ie,"LI",{});var lwe=s(Y1);_se=n(lwe,"STRONG",{});var wYr=s(_se);sMo=r(wYr,"prophetnet"),wYr.forEach(t),lMo=r(lwe," \u2014 "),lq=n(lwe,"A",{href:!0});var AYr=s(lq);iMo=r(AYr,"ProphetNetForConditionalGeneration"),AYr.forEach(t),dMo=r(lwe," (ProphetNet model)"),lwe.forEach(t),cMo=i(ie),K1=n(ie,"LI",{});var iwe=s(K1);use=n(iwe,"STRONG",{});var yYr=s(use);fMo=r(yYr,"t5"),yYr.forEach(t),mMo=r(iwe," \u2014 "),iq=n(iwe,"A",{href:!0});var LYr=s(iq);gMo=r(LYr,"T5ForConditionalGeneration"),LYr.forEach(t),hMo=r(iwe," (T5 model)"),iwe.forEach(t),pMo=i(ie),Z1=n(ie,"LI",{});var dwe=s(Z1);bse=n(dwe,"STRONG",{});var xYr=s(bse);_Mo=r(xYr,"xlm-prophetnet"),xYr.forEach(t),uMo=r(dwe," \u2014 "),dq=n(dwe,"A",{href:!0});var kYr=s(dq);bMo=r(kYr,"XLMProphetNetForConditionalGeneration"),kYr.forEach(t),FMo=r(dwe," (XLMProphetNet model)"),dwe.forEach(t),ie.forEach(t),vMo=i(Xt),eb=n(Xt,"P",{});var cwe=s(eb);TMo=r(cwe,"The model is set in evaluation mode by default using "),Fse=n(cwe,"CODE",{});var SYr=s(Fse);MMo=r(SYr,"model.eval()"),SYr.forEach(t),EMo=r(cwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vse=n(cwe,"CODE",{});var RYr=s(vse);CMo=r(RYr,"model.train()"),RYr.forEach(t),cwe.forEach(t),wMo=i(Xt),Tse=n(Xt,"P",{});var BYr=s(Tse);AMo=r(BYr,"Examples:"),BYr.forEach(t),yMo=i(Xt),m(xC.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),sRe=i(c),fd=n(c,"H2",{class:!0});var pPe=s(fd);ob=n(pPe,"A",{id:!0,class:!0,href:!0});var PYr=s(ob);Mse=n(PYr,"SPAN",{});var $Yr=s(Mse);m(kC.$$.fragment,$Yr),$Yr.forEach(t),PYr.forEach(t),LMo=i(pPe),Ese=n(pPe,"SPAN",{});var IYr=s(Ese);xMo=r(IYr,"AutoModelForSequenceClassification"),IYr.forEach(t),pPe.forEach(t),lRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(SC.$$.fragment,rl),kMo=i(rl),md=n(rl,"P",{});var nU=s(md);SMo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cq=n(nU,"A",{href:!0});var qYr=s(cq);RMo=r(qYr,"from_pretrained()"),qYr.forEach(t),BMo=r(nU," class method or the "),fq=n(nU,"A",{href:!0});var NYr=s(fq);PMo=r(NYr,"from_config()"),NYr.forEach(t),$Mo=r(nU,` class
method.`),nU.forEach(t),IMo=i(rl),RC=n(rl,"P",{});var _Pe=s(RC);qMo=r(_Pe,"This class cannot be instantiated directly using "),Cse=n(_Pe,"CODE",{});var jYr=s(Cse);NMo=r(jYr,"__init__()"),jYr.forEach(t),jMo=r(_Pe," (throws an error)."),_Pe.forEach(t),DMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(BC.$$.fragment,tl),GMo=i(tl),wse=n(tl,"P",{});var DYr=s(wse);OMo=r(DYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DYr.forEach(t),VMo=i(tl),gd=n(tl,"P",{});var sU=s(gd);XMo=r(sU,`Note:
Loading a model from its configuration file does `),Ase=n(sU,"STRONG",{});var GYr=s(Ase);zMo=r(GYr,"not"),GYr.forEach(t),QMo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mq=n(sU,"A",{href:!0});var OYr=s(mq);WMo=r(OYr,"from_pretrained()"),OYr.forEach(t),HMo=r(sU," to load the model weights."),sU.forEach(t),UMo=i(tl),yse=n(tl,"P",{});var VYr=s(yse);JMo=r(VYr,"Examples:"),VYr.forEach(t),YMo=i(tl),m(PC.$$.fragment,tl),tl.forEach(t),KMo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m($C.$$.fragment,zt),ZMo=i(zt),Lse=n(zt,"P",{});var XYr=s(Lse);e4o=r(XYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XYr.forEach(t),o4o=i(zt),Ua=n(zt,"P",{});var C4=s(Ua);r4o=r(C4,"The model class to instantiate is selected based on the "),xse=n(C4,"CODE",{});var zYr=s(xse);t4o=r(zYr,"model_type"),zYr.forEach(t),a4o=r(C4,` property of the config object (either
passed as an argument or loaded from `),kse=n(C4,"CODE",{});var QYr=s(kse);n4o=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),s4o=r(C4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(C4,"CODE",{});var WYr=s(Sse);l4o=r(WYr,"pretrained_model_name_or_path"),WYr.forEach(t),i4o=r(C4,":"),C4.forEach(t),d4o=i(zt),y=n(zt,"UL",{});var L=s(y);rb=n(L,"LI",{});var fwe=s(rb);Rse=n(fwe,"STRONG",{});var HYr=s(Rse);c4o=r(HYr,"albert"),HYr.forEach(t),f4o=r(fwe," \u2014 "),gq=n(fwe,"A",{href:!0});var UYr=s(gq);m4o=r(UYr,"AlbertForSequenceClassification"),UYr.forEach(t),g4o=r(fwe," (ALBERT model)"),fwe.forEach(t),h4o=i(L),tb=n(L,"LI",{});var mwe=s(tb);Bse=n(mwe,"STRONG",{});var JYr=s(Bse);p4o=r(JYr,"bart"),JYr.forEach(t),_4o=r(mwe," \u2014 "),hq=n(mwe,"A",{href:!0});var YYr=s(hq);u4o=r(YYr,"BartForSequenceClassification"),YYr.forEach(t),b4o=r(mwe," (BART model)"),mwe.forEach(t),F4o=i(L),ab=n(L,"LI",{});var gwe=s(ab);Pse=n(gwe,"STRONG",{});var KYr=s(Pse);v4o=r(KYr,"bert"),KYr.forEach(t),T4o=r(gwe," \u2014 "),pq=n(gwe,"A",{href:!0});var ZYr=s(pq);M4o=r(ZYr,"BertForSequenceClassification"),ZYr.forEach(t),E4o=r(gwe," (BERT model)"),gwe.forEach(t),C4o=i(L),nb=n(L,"LI",{});var hwe=s(nb);$se=n(hwe,"STRONG",{});var eKr=s($se);w4o=r(eKr,"big_bird"),eKr.forEach(t),A4o=r(hwe," \u2014 "),_q=n(hwe,"A",{href:!0});var oKr=s(_q);y4o=r(oKr,"BigBirdForSequenceClassification"),oKr.forEach(t),L4o=r(hwe," (BigBird model)"),hwe.forEach(t),x4o=i(L),sb=n(L,"LI",{});var pwe=s(sb);Ise=n(pwe,"STRONG",{});var rKr=s(Ise);k4o=r(rKr,"bigbird_pegasus"),rKr.forEach(t),S4o=r(pwe," \u2014 "),uq=n(pwe,"A",{href:!0});var tKr=s(uq);R4o=r(tKr,"BigBirdPegasusForSequenceClassification"),tKr.forEach(t),B4o=r(pwe," (BigBirdPegasus model)"),pwe.forEach(t),P4o=i(L),lb=n(L,"LI",{});var _we=s(lb);qse=n(_we,"STRONG",{});var aKr=s(qse);$4o=r(aKr,"camembert"),aKr.forEach(t),I4o=r(_we," \u2014 "),bq=n(_we,"A",{href:!0});var nKr=s(bq);q4o=r(nKr,"CamembertForSequenceClassification"),nKr.forEach(t),N4o=r(_we," (CamemBERT model)"),_we.forEach(t),j4o=i(L),ib=n(L,"LI",{});var uwe=s(ib);Nse=n(uwe,"STRONG",{});var sKr=s(Nse);D4o=r(sKr,"canine"),sKr.forEach(t),G4o=r(uwe," \u2014 "),Fq=n(uwe,"A",{href:!0});var lKr=s(Fq);O4o=r(lKr,"CanineForSequenceClassification"),lKr.forEach(t),V4o=r(uwe," (Canine model)"),uwe.forEach(t),X4o=i(L),db=n(L,"LI",{});var bwe=s(db);jse=n(bwe,"STRONG",{});var iKr=s(jse);z4o=r(iKr,"convbert"),iKr.forEach(t),Q4o=r(bwe," \u2014 "),vq=n(bwe,"A",{href:!0});var dKr=s(vq);W4o=r(dKr,"ConvBertForSequenceClassification"),dKr.forEach(t),H4o=r(bwe," (ConvBERT model)"),bwe.forEach(t),U4o=i(L),cb=n(L,"LI",{});var Fwe=s(cb);Dse=n(Fwe,"STRONG",{});var cKr=s(Dse);J4o=r(cKr,"ctrl"),cKr.forEach(t),Y4o=r(Fwe," \u2014 "),Tq=n(Fwe,"A",{href:!0});var fKr=s(Tq);K4o=r(fKr,"CTRLForSequenceClassification"),fKr.forEach(t),Z4o=r(Fwe," (CTRL model)"),Fwe.forEach(t),eEo=i(L),fb=n(L,"LI",{});var vwe=s(fb);Gse=n(vwe,"STRONG",{});var mKr=s(Gse);oEo=r(mKr,"data2vec-text"),mKr.forEach(t),rEo=r(vwe," \u2014 "),Mq=n(vwe,"A",{href:!0});var gKr=s(Mq);tEo=r(gKr,"Data2VecTextForSequenceClassification"),gKr.forEach(t),aEo=r(vwe," (Data2VecText model)"),vwe.forEach(t),nEo=i(L),mb=n(L,"LI",{});var Twe=s(mb);Ose=n(Twe,"STRONG",{});var hKr=s(Ose);sEo=r(hKr,"deberta"),hKr.forEach(t),lEo=r(Twe," \u2014 "),Eq=n(Twe,"A",{href:!0});var pKr=s(Eq);iEo=r(pKr,"DebertaForSequenceClassification"),pKr.forEach(t),dEo=r(Twe," (DeBERTa model)"),Twe.forEach(t),cEo=i(L),gb=n(L,"LI",{});var Mwe=s(gb);Vse=n(Mwe,"STRONG",{});var _Kr=s(Vse);fEo=r(_Kr,"deberta-v2"),_Kr.forEach(t),mEo=r(Mwe," \u2014 "),Cq=n(Mwe,"A",{href:!0});var uKr=s(Cq);gEo=r(uKr,"DebertaV2ForSequenceClassification"),uKr.forEach(t),hEo=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),pEo=i(L),hb=n(L,"LI",{});var Ewe=s(hb);Xse=n(Ewe,"STRONG",{});var bKr=s(Xse);_Eo=r(bKr,"distilbert"),bKr.forEach(t),uEo=r(Ewe," \u2014 "),wq=n(Ewe,"A",{href:!0});var FKr=s(wq);bEo=r(FKr,"DistilBertForSequenceClassification"),FKr.forEach(t),FEo=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),vEo=i(L),pb=n(L,"LI",{});var Cwe=s(pb);zse=n(Cwe,"STRONG",{});var vKr=s(zse);TEo=r(vKr,"electra"),vKr.forEach(t),MEo=r(Cwe," \u2014 "),Aq=n(Cwe,"A",{href:!0});var TKr=s(Aq);EEo=r(TKr,"ElectraForSequenceClassification"),TKr.forEach(t),CEo=r(Cwe," (ELECTRA model)"),Cwe.forEach(t),wEo=i(L),_b=n(L,"LI",{});var wwe=s(_b);Qse=n(wwe,"STRONG",{});var MKr=s(Qse);AEo=r(MKr,"flaubert"),MKr.forEach(t),yEo=r(wwe," \u2014 "),yq=n(wwe,"A",{href:!0});var EKr=s(yq);LEo=r(EKr,"FlaubertForSequenceClassification"),EKr.forEach(t),xEo=r(wwe," (FlauBERT model)"),wwe.forEach(t),kEo=i(L),ub=n(L,"LI",{});var Awe=s(ub);Wse=n(Awe,"STRONG",{});var CKr=s(Wse);SEo=r(CKr,"fnet"),CKr.forEach(t),REo=r(Awe," \u2014 "),Lq=n(Awe,"A",{href:!0});var wKr=s(Lq);BEo=r(wKr,"FNetForSequenceClassification"),wKr.forEach(t),PEo=r(Awe," (FNet model)"),Awe.forEach(t),$Eo=i(L),bb=n(L,"LI",{});var ywe=s(bb);Hse=n(ywe,"STRONG",{});var AKr=s(Hse);IEo=r(AKr,"funnel"),AKr.forEach(t),qEo=r(ywe," \u2014 "),xq=n(ywe,"A",{href:!0});var yKr=s(xq);NEo=r(yKr,"FunnelForSequenceClassification"),yKr.forEach(t),jEo=r(ywe," (Funnel Transformer model)"),ywe.forEach(t),DEo=i(L),Fb=n(L,"LI",{});var Lwe=s(Fb);Use=n(Lwe,"STRONG",{});var LKr=s(Use);GEo=r(LKr,"gpt2"),LKr.forEach(t),OEo=r(Lwe," \u2014 "),kq=n(Lwe,"A",{href:!0});var xKr=s(kq);VEo=r(xKr,"GPT2ForSequenceClassification"),xKr.forEach(t),XEo=r(Lwe," (OpenAI GPT-2 model)"),Lwe.forEach(t),zEo=i(L),vb=n(L,"LI",{});var xwe=s(vb);Jse=n(xwe,"STRONG",{});var kKr=s(Jse);QEo=r(kKr,"gpt_neo"),kKr.forEach(t),WEo=r(xwe," \u2014 "),Sq=n(xwe,"A",{href:!0});var SKr=s(Sq);HEo=r(SKr,"GPTNeoForSequenceClassification"),SKr.forEach(t),UEo=r(xwe," (GPT Neo model)"),xwe.forEach(t),JEo=i(L),Tb=n(L,"LI",{});var kwe=s(Tb);Yse=n(kwe,"STRONG",{});var RKr=s(Yse);YEo=r(RKr,"gptj"),RKr.forEach(t),KEo=r(kwe," \u2014 "),Rq=n(kwe,"A",{href:!0});var BKr=s(Rq);ZEo=r(BKr,"GPTJForSequenceClassification"),BKr.forEach(t),eCo=r(kwe," (GPT-J model)"),kwe.forEach(t),oCo=i(L),Mb=n(L,"LI",{});var Swe=s(Mb);Kse=n(Swe,"STRONG",{});var PKr=s(Kse);rCo=r(PKr,"ibert"),PKr.forEach(t),tCo=r(Swe," \u2014 "),Bq=n(Swe,"A",{href:!0});var $Kr=s(Bq);aCo=r($Kr,"IBertForSequenceClassification"),$Kr.forEach(t),nCo=r(Swe," (I-BERT model)"),Swe.forEach(t),sCo=i(L),Eb=n(L,"LI",{});var Rwe=s(Eb);Zse=n(Rwe,"STRONG",{});var IKr=s(Zse);lCo=r(IKr,"layoutlm"),IKr.forEach(t),iCo=r(Rwe," \u2014 "),Pq=n(Rwe,"A",{href:!0});var qKr=s(Pq);dCo=r(qKr,"LayoutLMForSequenceClassification"),qKr.forEach(t),cCo=r(Rwe," (LayoutLM model)"),Rwe.forEach(t),fCo=i(L),Cb=n(L,"LI",{});var Bwe=s(Cb);ele=n(Bwe,"STRONG",{});var NKr=s(ele);mCo=r(NKr,"layoutlmv2"),NKr.forEach(t),gCo=r(Bwe," \u2014 "),$q=n(Bwe,"A",{href:!0});var jKr=s($q);hCo=r(jKr,"LayoutLMv2ForSequenceClassification"),jKr.forEach(t),pCo=r(Bwe," (LayoutLMv2 model)"),Bwe.forEach(t),_Co=i(L),wb=n(L,"LI",{});var Pwe=s(wb);ole=n(Pwe,"STRONG",{});var DKr=s(ole);uCo=r(DKr,"led"),DKr.forEach(t),bCo=r(Pwe," \u2014 "),Iq=n(Pwe,"A",{href:!0});var GKr=s(Iq);FCo=r(GKr,"LEDForSequenceClassification"),GKr.forEach(t),vCo=r(Pwe," (LED model)"),Pwe.forEach(t),TCo=i(L),Ab=n(L,"LI",{});var $we=s(Ab);rle=n($we,"STRONG",{});var OKr=s(rle);MCo=r(OKr,"longformer"),OKr.forEach(t),ECo=r($we," \u2014 "),qq=n($we,"A",{href:!0});var VKr=s(qq);CCo=r(VKr,"LongformerForSequenceClassification"),VKr.forEach(t),wCo=r($we," (Longformer model)"),$we.forEach(t),ACo=i(L),yb=n(L,"LI",{});var Iwe=s(yb);tle=n(Iwe,"STRONG",{});var XKr=s(tle);yCo=r(XKr,"mbart"),XKr.forEach(t),LCo=r(Iwe," \u2014 "),Nq=n(Iwe,"A",{href:!0});var zKr=s(Nq);xCo=r(zKr,"MBartForSequenceClassification"),zKr.forEach(t),kCo=r(Iwe," (mBART model)"),Iwe.forEach(t),SCo=i(L),Lb=n(L,"LI",{});var qwe=s(Lb);ale=n(qwe,"STRONG",{});var QKr=s(ale);RCo=r(QKr,"megatron-bert"),QKr.forEach(t),BCo=r(qwe," \u2014 "),jq=n(qwe,"A",{href:!0});var WKr=s(jq);PCo=r(WKr,"MegatronBertForSequenceClassification"),WKr.forEach(t),$Co=r(qwe," (MegatronBert model)"),qwe.forEach(t),ICo=i(L),xb=n(L,"LI",{});var Nwe=s(xb);nle=n(Nwe,"STRONG",{});var HKr=s(nle);qCo=r(HKr,"mobilebert"),HKr.forEach(t),NCo=r(Nwe," \u2014 "),Dq=n(Nwe,"A",{href:!0});var UKr=s(Dq);jCo=r(UKr,"MobileBertForSequenceClassification"),UKr.forEach(t),DCo=r(Nwe," (MobileBERT model)"),Nwe.forEach(t),GCo=i(L),kb=n(L,"LI",{});var jwe=s(kb);sle=n(jwe,"STRONG",{});var JKr=s(sle);OCo=r(JKr,"mpnet"),JKr.forEach(t),VCo=r(jwe," \u2014 "),Gq=n(jwe,"A",{href:!0});var YKr=s(Gq);XCo=r(YKr,"MPNetForSequenceClassification"),YKr.forEach(t),zCo=r(jwe," (MPNet model)"),jwe.forEach(t),QCo=i(L),Sb=n(L,"LI",{});var Dwe=s(Sb);lle=n(Dwe,"STRONG",{});var KKr=s(lle);WCo=r(KKr,"nystromformer"),KKr.forEach(t),HCo=r(Dwe," \u2014 "),Oq=n(Dwe,"A",{href:!0});var ZKr=s(Oq);UCo=r(ZKr,"NystromformerForSequenceClassification"),ZKr.forEach(t),JCo=r(Dwe," (Nystromformer model)"),Dwe.forEach(t),YCo=i(L),Rb=n(L,"LI",{});var Gwe=s(Rb);ile=n(Gwe,"STRONG",{});var eZr=s(ile);KCo=r(eZr,"openai-gpt"),eZr.forEach(t),ZCo=r(Gwe," \u2014 "),Vq=n(Gwe,"A",{href:!0});var oZr=s(Vq);ewo=r(oZr,"OpenAIGPTForSequenceClassification"),oZr.forEach(t),owo=r(Gwe," (OpenAI GPT model)"),Gwe.forEach(t),rwo=i(L),Bb=n(L,"LI",{});var Owe=s(Bb);dle=n(Owe,"STRONG",{});var rZr=s(dle);two=r(rZr,"perceiver"),rZr.forEach(t),awo=r(Owe," \u2014 "),Xq=n(Owe,"A",{href:!0});var tZr=s(Xq);nwo=r(tZr,"PerceiverForSequenceClassification"),tZr.forEach(t),swo=r(Owe," (Perceiver model)"),Owe.forEach(t),lwo=i(L),Pb=n(L,"LI",{});var Vwe=s(Pb);cle=n(Vwe,"STRONG",{});var aZr=s(cle);iwo=r(aZr,"plbart"),aZr.forEach(t),dwo=r(Vwe," \u2014 "),zq=n(Vwe,"A",{href:!0});var nZr=s(zq);cwo=r(nZr,"PLBartForSequenceClassification"),nZr.forEach(t),fwo=r(Vwe," (PLBart model)"),Vwe.forEach(t),mwo=i(L),$b=n(L,"LI",{});var Xwe=s($b);fle=n(Xwe,"STRONG",{});var sZr=s(fle);gwo=r(sZr,"qdqbert"),sZr.forEach(t),hwo=r(Xwe," \u2014 "),Qq=n(Xwe,"A",{href:!0});var lZr=s(Qq);pwo=r(lZr,"QDQBertForSequenceClassification"),lZr.forEach(t),_wo=r(Xwe," (QDQBert model)"),Xwe.forEach(t),uwo=i(L),Ib=n(L,"LI",{});var zwe=s(Ib);mle=n(zwe,"STRONG",{});var iZr=s(mle);bwo=r(iZr,"reformer"),iZr.forEach(t),Fwo=r(zwe," \u2014 "),Wq=n(zwe,"A",{href:!0});var dZr=s(Wq);vwo=r(dZr,"ReformerForSequenceClassification"),dZr.forEach(t),Two=r(zwe," (Reformer model)"),zwe.forEach(t),Mwo=i(L),qb=n(L,"LI",{});var Qwe=s(qb);gle=n(Qwe,"STRONG",{});var cZr=s(gle);Ewo=r(cZr,"rembert"),cZr.forEach(t),Cwo=r(Qwe," \u2014 "),Hq=n(Qwe,"A",{href:!0});var fZr=s(Hq);wwo=r(fZr,"RemBertForSequenceClassification"),fZr.forEach(t),Awo=r(Qwe," (RemBERT model)"),Qwe.forEach(t),ywo=i(L),Nb=n(L,"LI",{});var Wwe=s(Nb);hle=n(Wwe,"STRONG",{});var mZr=s(hle);Lwo=r(mZr,"roberta"),mZr.forEach(t),xwo=r(Wwe," \u2014 "),Uq=n(Wwe,"A",{href:!0});var gZr=s(Uq);kwo=r(gZr,"RobertaForSequenceClassification"),gZr.forEach(t),Swo=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),Rwo=i(L),jb=n(L,"LI",{});var Hwe=s(jb);ple=n(Hwe,"STRONG",{});var hZr=s(ple);Bwo=r(hZr,"roformer"),hZr.forEach(t),Pwo=r(Hwe," \u2014 "),Jq=n(Hwe,"A",{href:!0});var pZr=s(Jq);$wo=r(pZr,"RoFormerForSequenceClassification"),pZr.forEach(t),Iwo=r(Hwe," (RoFormer model)"),Hwe.forEach(t),qwo=i(L),Db=n(L,"LI",{});var Uwe=s(Db);_le=n(Uwe,"STRONG",{});var _Zr=s(_le);Nwo=r(_Zr,"squeezebert"),_Zr.forEach(t),jwo=r(Uwe," \u2014 "),Yq=n(Uwe,"A",{href:!0});var uZr=s(Yq);Dwo=r(uZr,"SqueezeBertForSequenceClassification"),uZr.forEach(t),Gwo=r(Uwe," (SqueezeBERT model)"),Uwe.forEach(t),Owo=i(L),Gb=n(L,"LI",{});var Jwe=s(Gb);ule=n(Jwe,"STRONG",{});var bZr=s(ule);Vwo=r(bZr,"tapas"),bZr.forEach(t),Xwo=r(Jwe," \u2014 "),Kq=n(Jwe,"A",{href:!0});var FZr=s(Kq);zwo=r(FZr,"TapasForSequenceClassification"),FZr.forEach(t),Qwo=r(Jwe," (TAPAS model)"),Jwe.forEach(t),Wwo=i(L),Ob=n(L,"LI",{});var Ywe=s(Ob);ble=n(Ywe,"STRONG",{});var vZr=s(ble);Hwo=r(vZr,"transfo-xl"),vZr.forEach(t),Uwo=r(Ywe," \u2014 "),Zq=n(Ywe,"A",{href:!0});var TZr=s(Zq);Jwo=r(TZr,"TransfoXLForSequenceClassification"),TZr.forEach(t),Ywo=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),Kwo=i(L),Vb=n(L,"LI",{});var Kwe=s(Vb);Fle=n(Kwe,"STRONG",{});var MZr=s(Fle);Zwo=r(MZr,"xlm"),MZr.forEach(t),eAo=r(Kwe," \u2014 "),eN=n(Kwe,"A",{href:!0});var EZr=s(eN);oAo=r(EZr,"XLMForSequenceClassification"),EZr.forEach(t),rAo=r(Kwe," (XLM model)"),Kwe.forEach(t),tAo=i(L),Xb=n(L,"LI",{});var Zwe=s(Xb);vle=n(Zwe,"STRONG",{});var CZr=s(vle);aAo=r(CZr,"xlm-roberta"),CZr.forEach(t),nAo=r(Zwe," \u2014 "),oN=n(Zwe,"A",{href:!0});var wZr=s(oN);sAo=r(wZr,"XLMRobertaForSequenceClassification"),wZr.forEach(t),lAo=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),iAo=i(L),zb=n(L,"LI",{});var eAe=s(zb);Tle=n(eAe,"STRONG",{});var AZr=s(Tle);dAo=r(AZr,"xlm-roberta-xl"),AZr.forEach(t),cAo=r(eAe," \u2014 "),rN=n(eAe,"A",{href:!0});var yZr=s(rN);fAo=r(yZr,"XLMRobertaXLForSequenceClassification"),yZr.forEach(t),mAo=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),gAo=i(L),Qb=n(L,"LI",{});var oAe=s(Qb);Mle=n(oAe,"STRONG",{});var LZr=s(Mle);hAo=r(LZr,"xlnet"),LZr.forEach(t),pAo=r(oAe," \u2014 "),tN=n(oAe,"A",{href:!0});var xZr=s(tN);_Ao=r(xZr,"XLNetForSequenceClassification"),xZr.forEach(t),uAo=r(oAe," (XLNet model)"),oAe.forEach(t),bAo=i(L),Wb=n(L,"LI",{});var rAe=s(Wb);Ele=n(rAe,"STRONG",{});var kZr=s(Ele);FAo=r(kZr,"yoso"),kZr.forEach(t),vAo=r(rAe," \u2014 "),aN=n(rAe,"A",{href:!0});var SZr=s(aN);TAo=r(SZr,"YosoForSequenceClassification"),SZr.forEach(t),MAo=r(rAe," (YOSO model)"),rAe.forEach(t),L.forEach(t),EAo=i(zt),Hb=n(zt,"P",{});var tAe=s(Hb);CAo=r(tAe,"The model is set in evaluation mode by default using "),Cle=n(tAe,"CODE",{});var RZr=s(Cle);wAo=r(RZr,"model.eval()"),RZr.forEach(t),AAo=r(tAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wle=n(tAe,"CODE",{});var BZr=s(wle);yAo=r(BZr,"model.train()"),BZr.forEach(t),tAe.forEach(t),LAo=i(zt),Ale=n(zt,"P",{});var PZr=s(Ale);xAo=r(PZr,"Examples:"),PZr.forEach(t),kAo=i(zt),m(IC.$$.fragment,zt),zt.forEach(t),rl.forEach(t),iRe=i(c),hd=n(c,"H2",{class:!0});var uPe=s(hd);Ub=n(uPe,"A",{id:!0,class:!0,href:!0});var $Zr=s(Ub);yle=n($Zr,"SPAN",{});var IZr=s(yle);m(qC.$$.fragment,IZr),IZr.forEach(t),$Zr.forEach(t),SAo=i(uPe),Lle=n(uPe,"SPAN",{});var qZr=s(Lle);RAo=r(qZr,"AutoModelForMultipleChoice"),qZr.forEach(t),uPe.forEach(t),dRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(NC.$$.fragment,al),BAo=i(al),pd=n(al,"P",{});var lU=s(pd);PAo=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nN=n(lU,"A",{href:!0});var NZr=s(nN);$Ao=r(NZr,"from_pretrained()"),NZr.forEach(t),IAo=r(lU," class method or the "),sN=n(lU,"A",{href:!0});var jZr=s(sN);qAo=r(jZr,"from_config()"),jZr.forEach(t),NAo=r(lU,` class
method.`),lU.forEach(t),jAo=i(al),jC=n(al,"P",{});var bPe=s(jC);DAo=r(bPe,"This class cannot be instantiated directly using "),xle=n(bPe,"CODE",{});var DZr=s(xle);GAo=r(DZr,"__init__()"),DZr.forEach(t),OAo=r(bPe," (throws an error)."),bPe.forEach(t),VAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(DC.$$.fragment,nl),XAo=i(nl),kle=n(nl,"P",{});var GZr=s(kle);zAo=r(GZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GZr.forEach(t),QAo=i(nl),_d=n(nl,"P",{});var iU=s(_d);WAo=r(iU,`Note:
Loading a model from its configuration file does `),Sle=n(iU,"STRONG",{});var OZr=s(Sle);HAo=r(OZr,"not"),OZr.forEach(t),UAo=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lN=n(iU,"A",{href:!0});var VZr=s(lN);JAo=r(VZr,"from_pretrained()"),VZr.forEach(t),YAo=r(iU," to load the model weights."),iU.forEach(t),KAo=i(nl),Rle=n(nl,"P",{});var XZr=s(Rle);ZAo=r(XZr,"Examples:"),XZr.forEach(t),e0o=i(nl),m(GC.$$.fragment,nl),nl.forEach(t),o0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(OC.$$.fragment,Qt),r0o=i(Qt),Ble=n(Qt,"P",{});var zZr=s(Ble);t0o=r(zZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zZr.forEach(t),a0o=i(Qt),Ja=n(Qt,"P",{});var w4=s(Ja);n0o=r(w4,"The model class to instantiate is selected based on the "),Ple=n(w4,"CODE",{});var QZr=s(Ple);s0o=r(QZr,"model_type"),QZr.forEach(t),l0o=r(w4,` property of the config object (either
passed as an argument or loaded from `),$le=n(w4,"CODE",{});var WZr=s($le);i0o=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),d0o=r(w4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ile=n(w4,"CODE",{});var HZr=s(Ile);c0o=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),f0o=r(w4,":"),w4.forEach(t),m0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Jb=n(O,"LI",{});var aAe=s(Jb);qle=n(aAe,"STRONG",{});var UZr=s(qle);g0o=r(UZr,"albert"),UZr.forEach(t),h0o=r(aAe," \u2014 "),iN=n(aAe,"A",{href:!0});var JZr=s(iN);p0o=r(JZr,"AlbertForMultipleChoice"),JZr.forEach(t),_0o=r(aAe," (ALBERT model)"),aAe.forEach(t),u0o=i(O),Yb=n(O,"LI",{});var nAe=s(Yb);Nle=n(nAe,"STRONG",{});var YZr=s(Nle);b0o=r(YZr,"bert"),YZr.forEach(t),F0o=r(nAe," \u2014 "),dN=n(nAe,"A",{href:!0});var KZr=s(dN);v0o=r(KZr,"BertForMultipleChoice"),KZr.forEach(t),T0o=r(nAe," (BERT model)"),nAe.forEach(t),M0o=i(O),Kb=n(O,"LI",{});var sAe=s(Kb);jle=n(sAe,"STRONG",{});var ZZr=s(jle);E0o=r(ZZr,"big_bird"),ZZr.forEach(t),C0o=r(sAe," \u2014 "),cN=n(sAe,"A",{href:!0});var eet=s(cN);w0o=r(eet,"BigBirdForMultipleChoice"),eet.forEach(t),A0o=r(sAe," (BigBird model)"),sAe.forEach(t),y0o=i(O),Zb=n(O,"LI",{});var lAe=s(Zb);Dle=n(lAe,"STRONG",{});var oet=s(Dle);L0o=r(oet,"camembert"),oet.forEach(t),x0o=r(lAe," \u2014 "),fN=n(lAe,"A",{href:!0});var ret=s(fN);k0o=r(ret,"CamembertForMultipleChoice"),ret.forEach(t),S0o=r(lAe," (CamemBERT model)"),lAe.forEach(t),R0o=i(O),e5=n(O,"LI",{});var iAe=s(e5);Gle=n(iAe,"STRONG",{});var tet=s(Gle);B0o=r(tet,"canine"),tet.forEach(t),P0o=r(iAe," \u2014 "),mN=n(iAe,"A",{href:!0});var aet=s(mN);$0o=r(aet,"CanineForMultipleChoice"),aet.forEach(t),I0o=r(iAe," (Canine model)"),iAe.forEach(t),q0o=i(O),o5=n(O,"LI",{});var dAe=s(o5);Ole=n(dAe,"STRONG",{});var net=s(Ole);N0o=r(net,"convbert"),net.forEach(t),j0o=r(dAe," \u2014 "),gN=n(dAe,"A",{href:!0});var set=s(gN);D0o=r(set,"ConvBertForMultipleChoice"),set.forEach(t),G0o=r(dAe," (ConvBERT model)"),dAe.forEach(t),O0o=i(O),r5=n(O,"LI",{});var cAe=s(r5);Vle=n(cAe,"STRONG",{});var iet=s(Vle);V0o=r(iet,"data2vec-text"),iet.forEach(t),X0o=r(cAe," \u2014 "),hN=n(cAe,"A",{href:!0});var det=s(hN);z0o=r(det,"Data2VecTextForMultipleChoice"),det.forEach(t),Q0o=r(cAe," (Data2VecText model)"),cAe.forEach(t),W0o=i(O),t5=n(O,"LI",{});var fAe=s(t5);Xle=n(fAe,"STRONG",{});var cet=s(Xle);H0o=r(cet,"distilbert"),cet.forEach(t),U0o=r(fAe," \u2014 "),pN=n(fAe,"A",{href:!0});var fet=s(pN);J0o=r(fet,"DistilBertForMultipleChoice"),fet.forEach(t),Y0o=r(fAe," (DistilBERT model)"),fAe.forEach(t),K0o=i(O),a5=n(O,"LI",{});var mAe=s(a5);zle=n(mAe,"STRONG",{});var met=s(zle);Z0o=r(met,"electra"),met.forEach(t),eyo=r(mAe," \u2014 "),_N=n(mAe,"A",{href:!0});var get=s(_N);oyo=r(get,"ElectraForMultipleChoice"),get.forEach(t),ryo=r(mAe," (ELECTRA model)"),mAe.forEach(t),tyo=i(O),n5=n(O,"LI",{});var gAe=s(n5);Qle=n(gAe,"STRONG",{});var het=s(Qle);ayo=r(het,"flaubert"),het.forEach(t),nyo=r(gAe," \u2014 "),uN=n(gAe,"A",{href:!0});var pet=s(uN);syo=r(pet,"FlaubertForMultipleChoice"),pet.forEach(t),lyo=r(gAe," (FlauBERT model)"),gAe.forEach(t),iyo=i(O),s5=n(O,"LI",{});var hAe=s(s5);Wle=n(hAe,"STRONG",{});var _et=s(Wle);dyo=r(_et,"fnet"),_et.forEach(t),cyo=r(hAe," \u2014 "),bN=n(hAe,"A",{href:!0});var uet=s(bN);fyo=r(uet,"FNetForMultipleChoice"),uet.forEach(t),myo=r(hAe," (FNet model)"),hAe.forEach(t),gyo=i(O),l5=n(O,"LI",{});var pAe=s(l5);Hle=n(pAe,"STRONG",{});var bet=s(Hle);hyo=r(bet,"funnel"),bet.forEach(t),pyo=r(pAe," \u2014 "),FN=n(pAe,"A",{href:!0});var Fet=s(FN);_yo=r(Fet,"FunnelForMultipleChoice"),Fet.forEach(t),uyo=r(pAe," (Funnel Transformer model)"),pAe.forEach(t),byo=i(O),i5=n(O,"LI",{});var _Ae=s(i5);Ule=n(_Ae,"STRONG",{});var vet=s(Ule);Fyo=r(vet,"ibert"),vet.forEach(t),vyo=r(_Ae," \u2014 "),vN=n(_Ae,"A",{href:!0});var Tet=s(vN);Tyo=r(Tet,"IBertForMultipleChoice"),Tet.forEach(t),Myo=r(_Ae," (I-BERT model)"),_Ae.forEach(t),Eyo=i(O),d5=n(O,"LI",{});var uAe=s(d5);Jle=n(uAe,"STRONG",{});var Met=s(Jle);Cyo=r(Met,"longformer"),Met.forEach(t),wyo=r(uAe," \u2014 "),TN=n(uAe,"A",{href:!0});var Eet=s(TN);Ayo=r(Eet,"LongformerForMultipleChoice"),Eet.forEach(t),yyo=r(uAe," (Longformer model)"),uAe.forEach(t),Lyo=i(O),c5=n(O,"LI",{});var bAe=s(c5);Yle=n(bAe,"STRONG",{});var Cet=s(Yle);xyo=r(Cet,"megatron-bert"),Cet.forEach(t),kyo=r(bAe," \u2014 "),MN=n(bAe,"A",{href:!0});var wet=s(MN);Syo=r(wet,"MegatronBertForMultipleChoice"),wet.forEach(t),Ryo=r(bAe," (MegatronBert model)"),bAe.forEach(t),Byo=i(O),f5=n(O,"LI",{});var FAe=s(f5);Kle=n(FAe,"STRONG",{});var Aet=s(Kle);Pyo=r(Aet,"mobilebert"),Aet.forEach(t),$yo=r(FAe," \u2014 "),EN=n(FAe,"A",{href:!0});var yet=s(EN);Iyo=r(yet,"MobileBertForMultipleChoice"),yet.forEach(t),qyo=r(FAe," (MobileBERT model)"),FAe.forEach(t),Nyo=i(O),m5=n(O,"LI",{});var vAe=s(m5);Zle=n(vAe,"STRONG",{});var Let=s(Zle);jyo=r(Let,"mpnet"),Let.forEach(t),Dyo=r(vAe," \u2014 "),CN=n(vAe,"A",{href:!0});var xet=s(CN);Gyo=r(xet,"MPNetForMultipleChoice"),xet.forEach(t),Oyo=r(vAe," (MPNet model)"),vAe.forEach(t),Vyo=i(O),g5=n(O,"LI",{});var TAe=s(g5);eie=n(TAe,"STRONG",{});var ket=s(eie);Xyo=r(ket,"nystromformer"),ket.forEach(t),zyo=r(TAe," \u2014 "),wN=n(TAe,"A",{href:!0});var Set=s(wN);Qyo=r(Set,"NystromformerForMultipleChoice"),Set.forEach(t),Wyo=r(TAe," (Nystromformer model)"),TAe.forEach(t),Hyo=i(O),h5=n(O,"LI",{});var MAe=s(h5);oie=n(MAe,"STRONG",{});var Ret=s(oie);Uyo=r(Ret,"qdqbert"),Ret.forEach(t),Jyo=r(MAe," \u2014 "),AN=n(MAe,"A",{href:!0});var Bet=s(AN);Yyo=r(Bet,"QDQBertForMultipleChoice"),Bet.forEach(t),Kyo=r(MAe," (QDQBert model)"),MAe.forEach(t),Zyo=i(O),p5=n(O,"LI",{});var EAe=s(p5);rie=n(EAe,"STRONG",{});var Pet=s(rie);eLo=r(Pet,"rembert"),Pet.forEach(t),oLo=r(EAe," \u2014 "),yN=n(EAe,"A",{href:!0});var $et=s(yN);rLo=r($et,"RemBertForMultipleChoice"),$et.forEach(t),tLo=r(EAe," (RemBERT model)"),EAe.forEach(t),aLo=i(O),_5=n(O,"LI",{});var CAe=s(_5);tie=n(CAe,"STRONG",{});var Iet=s(tie);nLo=r(Iet,"roberta"),Iet.forEach(t),sLo=r(CAe," \u2014 "),LN=n(CAe,"A",{href:!0});var qet=s(LN);lLo=r(qet,"RobertaForMultipleChoice"),qet.forEach(t),iLo=r(CAe," (RoBERTa model)"),CAe.forEach(t),dLo=i(O),u5=n(O,"LI",{});var wAe=s(u5);aie=n(wAe,"STRONG",{});var Net=s(aie);cLo=r(Net,"roformer"),Net.forEach(t),fLo=r(wAe," \u2014 "),xN=n(wAe,"A",{href:!0});var jet=s(xN);mLo=r(jet,"RoFormerForMultipleChoice"),jet.forEach(t),gLo=r(wAe," (RoFormer model)"),wAe.forEach(t),hLo=i(O),b5=n(O,"LI",{});var AAe=s(b5);nie=n(AAe,"STRONG",{});var Det=s(nie);pLo=r(Det,"squeezebert"),Det.forEach(t),_Lo=r(AAe," \u2014 "),kN=n(AAe,"A",{href:!0});var Get=s(kN);uLo=r(Get,"SqueezeBertForMultipleChoice"),Get.forEach(t),bLo=r(AAe," (SqueezeBERT model)"),AAe.forEach(t),FLo=i(O),F5=n(O,"LI",{});var yAe=s(F5);sie=n(yAe,"STRONG",{});var Oet=s(sie);vLo=r(Oet,"xlm"),Oet.forEach(t),TLo=r(yAe," \u2014 "),SN=n(yAe,"A",{href:!0});var Vet=s(SN);MLo=r(Vet,"XLMForMultipleChoice"),Vet.forEach(t),ELo=r(yAe," (XLM model)"),yAe.forEach(t),CLo=i(O),v5=n(O,"LI",{});var LAe=s(v5);lie=n(LAe,"STRONG",{});var Xet=s(lie);wLo=r(Xet,"xlm-roberta"),Xet.forEach(t),ALo=r(LAe," \u2014 "),RN=n(LAe,"A",{href:!0});var zet=s(RN);yLo=r(zet,"XLMRobertaForMultipleChoice"),zet.forEach(t),LLo=r(LAe," (XLM-RoBERTa model)"),LAe.forEach(t),xLo=i(O),T5=n(O,"LI",{});var xAe=s(T5);iie=n(xAe,"STRONG",{});var Qet=s(iie);kLo=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),SLo=r(xAe," \u2014 "),BN=n(xAe,"A",{href:!0});var Wet=s(BN);RLo=r(Wet,"XLMRobertaXLForMultipleChoice"),Wet.forEach(t),BLo=r(xAe," (XLM-RoBERTa-XL model)"),xAe.forEach(t),PLo=i(O),M5=n(O,"LI",{});var kAe=s(M5);die=n(kAe,"STRONG",{});var Het=s(die);$Lo=r(Het,"xlnet"),Het.forEach(t),ILo=r(kAe," \u2014 "),PN=n(kAe,"A",{href:!0});var Uet=s(PN);qLo=r(Uet,"XLNetForMultipleChoice"),Uet.forEach(t),NLo=r(kAe," (XLNet model)"),kAe.forEach(t),jLo=i(O),E5=n(O,"LI",{});var SAe=s(E5);cie=n(SAe,"STRONG",{});var Jet=s(cie);DLo=r(Jet,"yoso"),Jet.forEach(t),GLo=r(SAe," \u2014 "),$N=n(SAe,"A",{href:!0});var Yet=s($N);OLo=r(Yet,"YosoForMultipleChoice"),Yet.forEach(t),VLo=r(SAe," (YOSO model)"),SAe.forEach(t),O.forEach(t),XLo=i(Qt),C5=n(Qt,"P",{});var RAe=s(C5);zLo=r(RAe,"The model is set in evaluation mode by default using "),fie=n(RAe,"CODE",{});var Ket=s(fie);QLo=r(Ket,"model.eval()"),Ket.forEach(t),WLo=r(RAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(RAe,"CODE",{});var Zet=s(mie);HLo=r(Zet,"model.train()"),Zet.forEach(t),RAe.forEach(t),ULo=i(Qt),gie=n(Qt,"P",{});var eot=s(gie);JLo=r(eot,"Examples:"),eot.forEach(t),YLo=i(Qt),m(VC.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),cRe=i(c),ud=n(c,"H2",{class:!0});var FPe=s(ud);w5=n(FPe,"A",{id:!0,class:!0,href:!0});var oot=s(w5);hie=n(oot,"SPAN",{});var rot=s(hie);m(XC.$$.fragment,rot),rot.forEach(t),oot.forEach(t),KLo=i(FPe),pie=n(FPe,"SPAN",{});var tot=s(pie);ZLo=r(tot,"AutoModelForNextSentencePrediction"),tot.forEach(t),FPe.forEach(t),fRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(zC.$$.fragment,sl),e8o=i(sl),bd=n(sl,"P",{});var dU=s(bd);o8o=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IN=n(dU,"A",{href:!0});var aot=s(IN);r8o=r(aot,"from_pretrained()"),aot.forEach(t),t8o=r(dU," class method or the "),qN=n(dU,"A",{href:!0});var not=s(qN);a8o=r(not,"from_config()"),not.forEach(t),n8o=r(dU,` class
method.`),dU.forEach(t),s8o=i(sl),QC=n(sl,"P",{});var vPe=s(QC);l8o=r(vPe,"This class cannot be instantiated directly using "),_ie=n(vPe,"CODE",{});var sot=s(_ie);i8o=r(sot,"__init__()"),sot.forEach(t),d8o=r(vPe," (throws an error)."),vPe.forEach(t),c8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(WC.$$.fragment,ll),f8o=i(ll),uie=n(ll,"P",{});var lot=s(uie);m8o=r(lot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lot.forEach(t),g8o=i(ll),Fd=n(ll,"P",{});var cU=s(Fd);h8o=r(cU,`Note:
Loading a model from its configuration file does `),bie=n(cU,"STRONG",{});var iot=s(bie);p8o=r(iot,"not"),iot.forEach(t),_8o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NN=n(cU,"A",{href:!0});var dot=s(NN);u8o=r(dot,"from_pretrained()"),dot.forEach(t),b8o=r(cU," to load the model weights."),cU.forEach(t),F8o=i(ll),Fie=n(ll,"P",{});var cot=s(Fie);v8o=r(cot,"Examples:"),cot.forEach(t),T8o=i(ll),m(HC.$$.fragment,ll),ll.forEach(t),M8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(UC.$$.fragment,Wt),E8o=i(Wt),vie=n(Wt,"P",{});var fot=s(vie);C8o=r(fot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fot.forEach(t),w8o=i(Wt),Ya=n(Wt,"P",{});var A4=s(Ya);A8o=r(A4,"The model class to instantiate is selected based on the "),Tie=n(A4,"CODE",{});var mot=s(Tie);y8o=r(mot,"model_type"),mot.forEach(t),L8o=r(A4,` property of the config object (either
passed as an argument or loaded from `),Mie=n(A4,"CODE",{});var got=s(Mie);x8o=r(got,"pretrained_model_name_or_path"),got.forEach(t),k8o=r(A4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Eie=n(A4,"CODE",{});var hot=s(Eie);S8o=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),R8o=r(A4,":"),A4.forEach(t),B8o=i(Wt),da=n(Wt,"UL",{});var il=s(da);A5=n(il,"LI",{});var BAe=s(A5);Cie=n(BAe,"STRONG",{});var pot=s(Cie);P8o=r(pot,"bert"),pot.forEach(t),$8o=r(BAe," \u2014 "),jN=n(BAe,"A",{href:!0});var _ot=s(jN);I8o=r(_ot,"BertForNextSentencePrediction"),_ot.forEach(t),q8o=r(BAe," (BERT model)"),BAe.forEach(t),N8o=i(il),y5=n(il,"LI",{});var PAe=s(y5);wie=n(PAe,"STRONG",{});var uot=s(wie);j8o=r(uot,"fnet"),uot.forEach(t),D8o=r(PAe," \u2014 "),DN=n(PAe,"A",{href:!0});var bot=s(DN);G8o=r(bot,"FNetForNextSentencePrediction"),bot.forEach(t),O8o=r(PAe," (FNet model)"),PAe.forEach(t),V8o=i(il),L5=n(il,"LI",{});var $Ae=s(L5);Aie=n($Ae,"STRONG",{});var Fot=s(Aie);X8o=r(Fot,"megatron-bert"),Fot.forEach(t),z8o=r($Ae," \u2014 "),GN=n($Ae,"A",{href:!0});var vot=s(GN);Q8o=r(vot,"MegatronBertForNextSentencePrediction"),vot.forEach(t),W8o=r($Ae," (MegatronBert model)"),$Ae.forEach(t),H8o=i(il),x5=n(il,"LI",{});var IAe=s(x5);yie=n(IAe,"STRONG",{});var Tot=s(yie);U8o=r(Tot,"mobilebert"),Tot.forEach(t),J8o=r(IAe," \u2014 "),ON=n(IAe,"A",{href:!0});var Mot=s(ON);Y8o=r(Mot,"MobileBertForNextSentencePrediction"),Mot.forEach(t),K8o=r(IAe," (MobileBERT model)"),IAe.forEach(t),Z8o=i(il),k5=n(il,"LI",{});var qAe=s(k5);Lie=n(qAe,"STRONG",{});var Eot=s(Lie);e9o=r(Eot,"qdqbert"),Eot.forEach(t),o9o=r(qAe," \u2014 "),VN=n(qAe,"A",{href:!0});var Cot=s(VN);r9o=r(Cot,"QDQBertForNextSentencePrediction"),Cot.forEach(t),t9o=r(qAe," (QDQBert model)"),qAe.forEach(t),il.forEach(t),a9o=i(Wt),S5=n(Wt,"P",{});var NAe=s(S5);n9o=r(NAe,"The model is set in evaluation mode by default using "),xie=n(NAe,"CODE",{});var wot=s(xie);s9o=r(wot,"model.eval()"),wot.forEach(t),l9o=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kie=n(NAe,"CODE",{});var Aot=s(kie);i9o=r(Aot,"model.train()"),Aot.forEach(t),NAe.forEach(t),d9o=i(Wt),Sie=n(Wt,"P",{});var yot=s(Sie);c9o=r(yot,"Examples:"),yot.forEach(t),f9o=i(Wt),m(JC.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),mRe=i(c),vd=n(c,"H2",{class:!0});var TPe=s(vd);R5=n(TPe,"A",{id:!0,class:!0,href:!0});var Lot=s(R5);Rie=n(Lot,"SPAN",{});var xot=s(Rie);m(YC.$$.fragment,xot),xot.forEach(t),Lot.forEach(t),m9o=i(TPe),Bie=n(TPe,"SPAN",{});var kot=s(Bie);g9o=r(kot,"AutoModelForTokenClassification"),kot.forEach(t),TPe.forEach(t),gRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(KC.$$.fragment,dl),h9o=i(dl),Td=n(dl,"P",{});var fU=s(Td);p9o=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XN=n(fU,"A",{href:!0});var Sot=s(XN);_9o=r(Sot,"from_pretrained()"),Sot.forEach(t),u9o=r(fU," class method or the "),zN=n(fU,"A",{href:!0});var Rot=s(zN);b9o=r(Rot,"from_config()"),Rot.forEach(t),F9o=r(fU,` class
method.`),fU.forEach(t),v9o=i(dl),ZC=n(dl,"P",{});var MPe=s(ZC);T9o=r(MPe,"This class cannot be instantiated directly using "),Pie=n(MPe,"CODE",{});var Bot=s(Pie);M9o=r(Bot,"__init__()"),Bot.forEach(t),E9o=r(MPe," (throws an error)."),MPe.forEach(t),C9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(ew.$$.fragment,cl),w9o=i(cl),$ie=n(cl,"P",{});var Pot=s($ie);A9o=r(Pot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pot.forEach(t),y9o=i(cl),Md=n(cl,"P",{});var mU=s(Md);L9o=r(mU,`Note:
Loading a model from its configuration file does `),Iie=n(mU,"STRONG",{});var $ot=s(Iie);x9o=r($ot,"not"),$ot.forEach(t),k9o=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(mU,"A",{href:!0});var Iot=s(QN);S9o=r(Iot,"from_pretrained()"),Iot.forEach(t),R9o=r(mU," to load the model weights."),mU.forEach(t),B9o=i(cl),qie=n(cl,"P",{});var qot=s(qie);P9o=r(qot,"Examples:"),qot.forEach(t),$9o=i(cl),m(ow.$$.fragment,cl),cl.forEach(t),I9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(rw.$$.fragment,Ht),q9o=i(Ht),Nie=n(Ht,"P",{});var Not=s(Nie);N9o=r(Not,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Not.forEach(t),j9o=i(Ht),Ka=n(Ht,"P",{});var y4=s(Ka);D9o=r(y4,"The model class to instantiate is selected based on the "),jie=n(y4,"CODE",{});var jot=s(jie);G9o=r(jot,"model_type"),jot.forEach(t),O9o=r(y4,` property of the config object (either
passed as an argument or loaded from `),Die=n(y4,"CODE",{});var Dot=s(Die);V9o=r(Dot,"pretrained_model_name_or_path"),Dot.forEach(t),X9o=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gie=n(y4,"CODE",{});var Got=s(Gie);z9o=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),Q9o=r(y4,":"),y4.forEach(t),W9o=i(Ht),j=n(Ht,"UL",{});var D=s(j);B5=n(D,"LI",{});var jAe=s(B5);Oie=n(jAe,"STRONG",{});var Oot=s(Oie);H9o=r(Oot,"albert"),Oot.forEach(t),U9o=r(jAe," \u2014 "),WN=n(jAe,"A",{href:!0});var Vot=s(WN);J9o=r(Vot,"AlbertForTokenClassification"),Vot.forEach(t),Y9o=r(jAe," (ALBERT model)"),jAe.forEach(t),K9o=i(D),P5=n(D,"LI",{});var DAe=s(P5);Vie=n(DAe,"STRONG",{});var Xot=s(Vie);Z9o=r(Xot,"bert"),Xot.forEach(t),exo=r(DAe," \u2014 "),HN=n(DAe,"A",{href:!0});var zot=s(HN);oxo=r(zot,"BertForTokenClassification"),zot.forEach(t),rxo=r(DAe," (BERT model)"),DAe.forEach(t),txo=i(D),$5=n(D,"LI",{});var GAe=s($5);Xie=n(GAe,"STRONG",{});var Qot=s(Xie);axo=r(Qot,"big_bird"),Qot.forEach(t),nxo=r(GAe," \u2014 "),UN=n(GAe,"A",{href:!0});var Wot=s(UN);sxo=r(Wot,"BigBirdForTokenClassification"),Wot.forEach(t),lxo=r(GAe," (BigBird model)"),GAe.forEach(t),ixo=i(D),I5=n(D,"LI",{});var OAe=s(I5);zie=n(OAe,"STRONG",{});var Hot=s(zie);dxo=r(Hot,"camembert"),Hot.forEach(t),cxo=r(OAe," \u2014 "),JN=n(OAe,"A",{href:!0});var Uot=s(JN);fxo=r(Uot,"CamembertForTokenClassification"),Uot.forEach(t),mxo=r(OAe," (CamemBERT model)"),OAe.forEach(t),gxo=i(D),q5=n(D,"LI",{});var VAe=s(q5);Qie=n(VAe,"STRONG",{});var Jot=s(Qie);hxo=r(Jot,"canine"),Jot.forEach(t),pxo=r(VAe," \u2014 "),YN=n(VAe,"A",{href:!0});var Yot=s(YN);_xo=r(Yot,"CanineForTokenClassification"),Yot.forEach(t),uxo=r(VAe," (Canine model)"),VAe.forEach(t),bxo=i(D),N5=n(D,"LI",{});var XAe=s(N5);Wie=n(XAe,"STRONG",{});var Kot=s(Wie);Fxo=r(Kot,"convbert"),Kot.forEach(t),vxo=r(XAe," \u2014 "),KN=n(XAe,"A",{href:!0});var Zot=s(KN);Txo=r(Zot,"ConvBertForTokenClassification"),Zot.forEach(t),Mxo=r(XAe," (ConvBERT model)"),XAe.forEach(t),Exo=i(D),j5=n(D,"LI",{});var zAe=s(j5);Hie=n(zAe,"STRONG",{});var ert=s(Hie);Cxo=r(ert,"data2vec-text"),ert.forEach(t),wxo=r(zAe," \u2014 "),ZN=n(zAe,"A",{href:!0});var ort=s(ZN);Axo=r(ort,"Data2VecTextForTokenClassification"),ort.forEach(t),yxo=r(zAe," (Data2VecText model)"),zAe.forEach(t),Lxo=i(D),D5=n(D,"LI",{});var QAe=s(D5);Uie=n(QAe,"STRONG",{});var rrt=s(Uie);xxo=r(rrt,"deberta"),rrt.forEach(t),kxo=r(QAe," \u2014 "),ej=n(QAe,"A",{href:!0});var trt=s(ej);Sxo=r(trt,"DebertaForTokenClassification"),trt.forEach(t),Rxo=r(QAe," (DeBERTa model)"),QAe.forEach(t),Bxo=i(D),G5=n(D,"LI",{});var WAe=s(G5);Jie=n(WAe,"STRONG",{});var art=s(Jie);Pxo=r(art,"deberta-v2"),art.forEach(t),$xo=r(WAe," \u2014 "),oj=n(WAe,"A",{href:!0});var nrt=s(oj);Ixo=r(nrt,"DebertaV2ForTokenClassification"),nrt.forEach(t),qxo=r(WAe," (DeBERTa-v2 model)"),WAe.forEach(t),Nxo=i(D),O5=n(D,"LI",{});var HAe=s(O5);Yie=n(HAe,"STRONG",{});var srt=s(Yie);jxo=r(srt,"distilbert"),srt.forEach(t),Dxo=r(HAe," \u2014 "),rj=n(HAe,"A",{href:!0});var lrt=s(rj);Gxo=r(lrt,"DistilBertForTokenClassification"),lrt.forEach(t),Oxo=r(HAe," (DistilBERT model)"),HAe.forEach(t),Vxo=i(D),V5=n(D,"LI",{});var UAe=s(V5);Kie=n(UAe,"STRONG",{});var irt=s(Kie);Xxo=r(irt,"electra"),irt.forEach(t),zxo=r(UAe," \u2014 "),tj=n(UAe,"A",{href:!0});var drt=s(tj);Qxo=r(drt,"ElectraForTokenClassification"),drt.forEach(t),Wxo=r(UAe," (ELECTRA model)"),UAe.forEach(t),Hxo=i(D),X5=n(D,"LI",{});var JAe=s(X5);Zie=n(JAe,"STRONG",{});var crt=s(Zie);Uxo=r(crt,"flaubert"),crt.forEach(t),Jxo=r(JAe," \u2014 "),aj=n(JAe,"A",{href:!0});var frt=s(aj);Yxo=r(frt,"FlaubertForTokenClassification"),frt.forEach(t),Kxo=r(JAe," (FlauBERT model)"),JAe.forEach(t),Zxo=i(D),z5=n(D,"LI",{});var YAe=s(z5);ede=n(YAe,"STRONG",{});var mrt=s(ede);eko=r(mrt,"fnet"),mrt.forEach(t),oko=r(YAe," \u2014 "),nj=n(YAe,"A",{href:!0});var grt=s(nj);rko=r(grt,"FNetForTokenClassification"),grt.forEach(t),tko=r(YAe," (FNet model)"),YAe.forEach(t),ako=i(D),Q5=n(D,"LI",{});var KAe=s(Q5);ode=n(KAe,"STRONG",{});var hrt=s(ode);nko=r(hrt,"funnel"),hrt.forEach(t),sko=r(KAe," \u2014 "),sj=n(KAe,"A",{href:!0});var prt=s(sj);lko=r(prt,"FunnelForTokenClassification"),prt.forEach(t),iko=r(KAe," (Funnel Transformer model)"),KAe.forEach(t),dko=i(D),W5=n(D,"LI",{});var ZAe=s(W5);rde=n(ZAe,"STRONG",{});var _rt=s(rde);cko=r(_rt,"gpt2"),_rt.forEach(t),fko=r(ZAe," \u2014 "),lj=n(ZAe,"A",{href:!0});var urt=s(lj);mko=r(urt,"GPT2ForTokenClassification"),urt.forEach(t),gko=r(ZAe," (OpenAI GPT-2 model)"),ZAe.forEach(t),hko=i(D),H5=n(D,"LI",{});var e0e=s(H5);tde=n(e0e,"STRONG",{});var brt=s(tde);pko=r(brt,"ibert"),brt.forEach(t),_ko=r(e0e," \u2014 "),ij=n(e0e,"A",{href:!0});var Frt=s(ij);uko=r(Frt,"IBertForTokenClassification"),Frt.forEach(t),bko=r(e0e," (I-BERT model)"),e0e.forEach(t),Fko=i(D),U5=n(D,"LI",{});var o0e=s(U5);ade=n(o0e,"STRONG",{});var vrt=s(ade);vko=r(vrt,"layoutlm"),vrt.forEach(t),Tko=r(o0e," \u2014 "),dj=n(o0e,"A",{href:!0});var Trt=s(dj);Mko=r(Trt,"LayoutLMForTokenClassification"),Trt.forEach(t),Eko=r(o0e," (LayoutLM model)"),o0e.forEach(t),Cko=i(D),J5=n(D,"LI",{});var r0e=s(J5);nde=n(r0e,"STRONG",{});var Mrt=s(nde);wko=r(Mrt,"layoutlmv2"),Mrt.forEach(t),Ako=r(r0e," \u2014 "),cj=n(r0e,"A",{href:!0});var Ert=s(cj);yko=r(Ert,"LayoutLMv2ForTokenClassification"),Ert.forEach(t),Lko=r(r0e," (LayoutLMv2 model)"),r0e.forEach(t),xko=i(D),Y5=n(D,"LI",{});var t0e=s(Y5);sde=n(t0e,"STRONG",{});var Crt=s(sde);kko=r(Crt,"longformer"),Crt.forEach(t),Sko=r(t0e," \u2014 "),fj=n(t0e,"A",{href:!0});var wrt=s(fj);Rko=r(wrt,"LongformerForTokenClassification"),wrt.forEach(t),Bko=r(t0e," (Longformer model)"),t0e.forEach(t),Pko=i(D),K5=n(D,"LI",{});var a0e=s(K5);lde=n(a0e,"STRONG",{});var Art=s(lde);$ko=r(Art,"megatron-bert"),Art.forEach(t),Iko=r(a0e," \u2014 "),mj=n(a0e,"A",{href:!0});var yrt=s(mj);qko=r(yrt,"MegatronBertForTokenClassification"),yrt.forEach(t),Nko=r(a0e," (MegatronBert model)"),a0e.forEach(t),jko=i(D),Z5=n(D,"LI",{});var n0e=s(Z5);ide=n(n0e,"STRONG",{});var Lrt=s(ide);Dko=r(Lrt,"mobilebert"),Lrt.forEach(t),Gko=r(n0e," \u2014 "),gj=n(n0e,"A",{href:!0});var xrt=s(gj);Oko=r(xrt,"MobileBertForTokenClassification"),xrt.forEach(t),Vko=r(n0e," (MobileBERT model)"),n0e.forEach(t),Xko=i(D),e3=n(D,"LI",{});var s0e=s(e3);dde=n(s0e,"STRONG",{});var krt=s(dde);zko=r(krt,"mpnet"),krt.forEach(t),Qko=r(s0e," \u2014 "),hj=n(s0e,"A",{href:!0});var Srt=s(hj);Wko=r(Srt,"MPNetForTokenClassification"),Srt.forEach(t),Hko=r(s0e," (MPNet model)"),s0e.forEach(t),Uko=i(D),o3=n(D,"LI",{});var l0e=s(o3);cde=n(l0e,"STRONG",{});var Rrt=s(cde);Jko=r(Rrt,"nystromformer"),Rrt.forEach(t),Yko=r(l0e," \u2014 "),pj=n(l0e,"A",{href:!0});var Brt=s(pj);Kko=r(Brt,"NystromformerForTokenClassification"),Brt.forEach(t),Zko=r(l0e," (Nystromformer model)"),l0e.forEach(t),eSo=i(D),r3=n(D,"LI",{});var i0e=s(r3);fde=n(i0e,"STRONG",{});var Prt=s(fde);oSo=r(Prt,"qdqbert"),Prt.forEach(t),rSo=r(i0e," \u2014 "),_j=n(i0e,"A",{href:!0});var $rt=s(_j);tSo=r($rt,"QDQBertForTokenClassification"),$rt.forEach(t),aSo=r(i0e," (QDQBert model)"),i0e.forEach(t),nSo=i(D),t3=n(D,"LI",{});var d0e=s(t3);mde=n(d0e,"STRONG",{});var Irt=s(mde);sSo=r(Irt,"rembert"),Irt.forEach(t),lSo=r(d0e," \u2014 "),uj=n(d0e,"A",{href:!0});var qrt=s(uj);iSo=r(qrt,"RemBertForTokenClassification"),qrt.forEach(t),dSo=r(d0e," (RemBERT model)"),d0e.forEach(t),cSo=i(D),a3=n(D,"LI",{});var c0e=s(a3);gde=n(c0e,"STRONG",{});var Nrt=s(gde);fSo=r(Nrt,"roberta"),Nrt.forEach(t),mSo=r(c0e," \u2014 "),bj=n(c0e,"A",{href:!0});var jrt=s(bj);gSo=r(jrt,"RobertaForTokenClassification"),jrt.forEach(t),hSo=r(c0e," (RoBERTa model)"),c0e.forEach(t),pSo=i(D),n3=n(D,"LI",{});var f0e=s(n3);hde=n(f0e,"STRONG",{});var Drt=s(hde);_So=r(Drt,"roformer"),Drt.forEach(t),uSo=r(f0e," \u2014 "),Fj=n(f0e,"A",{href:!0});var Grt=s(Fj);bSo=r(Grt,"RoFormerForTokenClassification"),Grt.forEach(t),FSo=r(f0e," (RoFormer model)"),f0e.forEach(t),vSo=i(D),s3=n(D,"LI",{});var m0e=s(s3);pde=n(m0e,"STRONG",{});var Ort=s(pde);TSo=r(Ort,"squeezebert"),Ort.forEach(t),MSo=r(m0e," \u2014 "),vj=n(m0e,"A",{href:!0});var Vrt=s(vj);ESo=r(Vrt,"SqueezeBertForTokenClassification"),Vrt.forEach(t),CSo=r(m0e," (SqueezeBERT model)"),m0e.forEach(t),wSo=i(D),l3=n(D,"LI",{});var g0e=s(l3);_de=n(g0e,"STRONG",{});var Xrt=s(_de);ASo=r(Xrt,"xlm"),Xrt.forEach(t),ySo=r(g0e," \u2014 "),Tj=n(g0e,"A",{href:!0});var zrt=s(Tj);LSo=r(zrt,"XLMForTokenClassification"),zrt.forEach(t),xSo=r(g0e," (XLM model)"),g0e.forEach(t),kSo=i(D),i3=n(D,"LI",{});var h0e=s(i3);ude=n(h0e,"STRONG",{});var Qrt=s(ude);SSo=r(Qrt,"xlm-roberta"),Qrt.forEach(t),RSo=r(h0e," \u2014 "),Mj=n(h0e,"A",{href:!0});var Wrt=s(Mj);BSo=r(Wrt,"XLMRobertaForTokenClassification"),Wrt.forEach(t),PSo=r(h0e," (XLM-RoBERTa model)"),h0e.forEach(t),$So=i(D),d3=n(D,"LI",{});var p0e=s(d3);bde=n(p0e,"STRONG",{});var Hrt=s(bde);ISo=r(Hrt,"xlm-roberta-xl"),Hrt.forEach(t),qSo=r(p0e," \u2014 "),Ej=n(p0e,"A",{href:!0});var Urt=s(Ej);NSo=r(Urt,"XLMRobertaXLForTokenClassification"),Urt.forEach(t),jSo=r(p0e," (XLM-RoBERTa-XL model)"),p0e.forEach(t),DSo=i(D),c3=n(D,"LI",{});var _0e=s(c3);Fde=n(_0e,"STRONG",{});var Jrt=s(Fde);GSo=r(Jrt,"xlnet"),Jrt.forEach(t),OSo=r(_0e," \u2014 "),Cj=n(_0e,"A",{href:!0});var Yrt=s(Cj);VSo=r(Yrt,"XLNetForTokenClassification"),Yrt.forEach(t),XSo=r(_0e," (XLNet model)"),_0e.forEach(t),zSo=i(D),f3=n(D,"LI",{});var u0e=s(f3);vde=n(u0e,"STRONG",{});var Krt=s(vde);QSo=r(Krt,"yoso"),Krt.forEach(t),WSo=r(u0e," \u2014 "),wj=n(u0e,"A",{href:!0});var Zrt=s(wj);HSo=r(Zrt,"YosoForTokenClassification"),Zrt.forEach(t),USo=r(u0e," (YOSO model)"),u0e.forEach(t),D.forEach(t),JSo=i(Ht),m3=n(Ht,"P",{});var b0e=s(m3);YSo=r(b0e,"The model is set in evaluation mode by default using "),Tde=n(b0e,"CODE",{});var ett=s(Tde);KSo=r(ett,"model.eval()"),ett.forEach(t),ZSo=r(b0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mde=n(b0e,"CODE",{});var ott=s(Mde);eRo=r(ott,"model.train()"),ott.forEach(t),b0e.forEach(t),oRo=i(Ht),Ede=n(Ht,"P",{});var rtt=s(Ede);rRo=r(rtt,"Examples:"),rtt.forEach(t),tRo=i(Ht),m(tw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),hRe=i(c),Ed=n(c,"H2",{class:!0});var EPe=s(Ed);g3=n(EPe,"A",{id:!0,class:!0,href:!0});var ttt=s(g3);Cde=n(ttt,"SPAN",{});var att=s(Cde);m(aw.$$.fragment,att),att.forEach(t),ttt.forEach(t),aRo=i(EPe),wde=n(EPe,"SPAN",{});var ntt=s(wde);nRo=r(ntt,"AutoModelForQuestionAnswering"),ntt.forEach(t),EPe.forEach(t),pRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(nw.$$.fragment,fl),sRo=i(fl),Cd=n(fl,"P",{});var gU=s(Cd);lRo=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Aj=n(gU,"A",{href:!0});var stt=s(Aj);iRo=r(stt,"from_pretrained()"),stt.forEach(t),dRo=r(gU," class method or the "),yj=n(gU,"A",{href:!0});var ltt=s(yj);cRo=r(ltt,"from_config()"),ltt.forEach(t),fRo=r(gU,` class
method.`),gU.forEach(t),mRo=i(fl),sw=n(fl,"P",{});var CPe=s(sw);gRo=r(CPe,"This class cannot be instantiated directly using "),Ade=n(CPe,"CODE",{});var itt=s(Ade);hRo=r(itt,"__init__()"),itt.forEach(t),pRo=r(CPe," (throws an error)."),CPe.forEach(t),_Ro=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(lw.$$.fragment,ml),uRo=i(ml),yde=n(ml,"P",{});var dtt=s(yde);bRo=r(dtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dtt.forEach(t),FRo=i(ml),wd=n(ml,"P",{});var hU=s(wd);vRo=r(hU,`Note:
Loading a model from its configuration file does `),Lde=n(hU,"STRONG",{});var ctt=s(Lde);TRo=r(ctt,"not"),ctt.forEach(t),MRo=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lj=n(hU,"A",{href:!0});var ftt=s(Lj);ERo=r(ftt,"from_pretrained()"),ftt.forEach(t),CRo=r(hU," to load the model weights."),hU.forEach(t),wRo=i(ml),xde=n(ml,"P",{});var mtt=s(xde);ARo=r(mtt,"Examples:"),mtt.forEach(t),yRo=i(ml),m(iw.$$.fragment,ml),ml.forEach(t),LRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(dw.$$.fragment,Ut),xRo=i(Ut),kde=n(Ut,"P",{});var gtt=s(kde);kRo=r(gtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gtt.forEach(t),SRo=i(Ut),Za=n(Ut,"P",{});var L4=s(Za);RRo=r(L4,"The model class to instantiate is selected based on the "),Sde=n(L4,"CODE",{});var htt=s(Sde);BRo=r(htt,"model_type"),htt.forEach(t),PRo=r(L4,` property of the config object (either
passed as an argument or loaded from `),Rde=n(L4,"CODE",{});var ptt=s(Rde);$Ro=r(ptt,"pretrained_model_name_or_path"),ptt.forEach(t),IRo=r(L4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bde=n(L4,"CODE",{});var _tt=s(Bde);qRo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),NRo=r(L4,":"),L4.forEach(t),jRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h3=n(P,"LI",{});var F0e=s(h3);Pde=n(F0e,"STRONG",{});var utt=s(Pde);DRo=r(utt,"albert"),utt.forEach(t),GRo=r(F0e," \u2014 "),xj=n(F0e,"A",{href:!0});var btt=s(xj);ORo=r(btt,"AlbertForQuestionAnswering"),btt.forEach(t),VRo=r(F0e," (ALBERT model)"),F0e.forEach(t),XRo=i(P),p3=n(P,"LI",{});var v0e=s(p3);$de=n(v0e,"STRONG",{});var Ftt=s($de);zRo=r(Ftt,"bart"),Ftt.forEach(t),QRo=r(v0e," \u2014 "),kj=n(v0e,"A",{href:!0});var vtt=s(kj);WRo=r(vtt,"BartForQuestionAnswering"),vtt.forEach(t),HRo=r(v0e," (BART model)"),v0e.forEach(t),URo=i(P),_3=n(P,"LI",{});var T0e=s(_3);Ide=n(T0e,"STRONG",{});var Ttt=s(Ide);JRo=r(Ttt,"bert"),Ttt.forEach(t),YRo=r(T0e," \u2014 "),Sj=n(T0e,"A",{href:!0});var Mtt=s(Sj);KRo=r(Mtt,"BertForQuestionAnswering"),Mtt.forEach(t),ZRo=r(T0e," (BERT model)"),T0e.forEach(t),eBo=i(P),u3=n(P,"LI",{});var M0e=s(u3);qde=n(M0e,"STRONG",{});var Ett=s(qde);oBo=r(Ett,"big_bird"),Ett.forEach(t),rBo=r(M0e," \u2014 "),Rj=n(M0e,"A",{href:!0});var Ctt=s(Rj);tBo=r(Ctt,"BigBirdForQuestionAnswering"),Ctt.forEach(t),aBo=r(M0e," (BigBird model)"),M0e.forEach(t),nBo=i(P),b3=n(P,"LI",{});var E0e=s(b3);Nde=n(E0e,"STRONG",{});var wtt=s(Nde);sBo=r(wtt,"bigbird_pegasus"),wtt.forEach(t),lBo=r(E0e," \u2014 "),Bj=n(E0e,"A",{href:!0});var Att=s(Bj);iBo=r(Att,"BigBirdPegasusForQuestionAnswering"),Att.forEach(t),dBo=r(E0e," (BigBirdPegasus model)"),E0e.forEach(t),cBo=i(P),F3=n(P,"LI",{});var C0e=s(F3);jde=n(C0e,"STRONG",{});var ytt=s(jde);fBo=r(ytt,"camembert"),ytt.forEach(t),mBo=r(C0e," \u2014 "),Pj=n(C0e,"A",{href:!0});var Ltt=s(Pj);gBo=r(Ltt,"CamembertForQuestionAnswering"),Ltt.forEach(t),hBo=r(C0e," (CamemBERT model)"),C0e.forEach(t),pBo=i(P),v3=n(P,"LI",{});var w0e=s(v3);Dde=n(w0e,"STRONG",{});var xtt=s(Dde);_Bo=r(xtt,"canine"),xtt.forEach(t),uBo=r(w0e," \u2014 "),$j=n(w0e,"A",{href:!0});var ktt=s($j);bBo=r(ktt,"CanineForQuestionAnswering"),ktt.forEach(t),FBo=r(w0e," (Canine model)"),w0e.forEach(t),vBo=i(P),T3=n(P,"LI",{});var A0e=s(T3);Gde=n(A0e,"STRONG",{});var Stt=s(Gde);TBo=r(Stt,"convbert"),Stt.forEach(t),MBo=r(A0e," \u2014 "),Ij=n(A0e,"A",{href:!0});var Rtt=s(Ij);EBo=r(Rtt,"ConvBertForQuestionAnswering"),Rtt.forEach(t),CBo=r(A0e," (ConvBERT model)"),A0e.forEach(t),wBo=i(P),M3=n(P,"LI",{});var y0e=s(M3);Ode=n(y0e,"STRONG",{});var Btt=s(Ode);ABo=r(Btt,"data2vec-text"),Btt.forEach(t),yBo=r(y0e," \u2014 "),qj=n(y0e,"A",{href:!0});var Ptt=s(qj);LBo=r(Ptt,"Data2VecTextForQuestionAnswering"),Ptt.forEach(t),xBo=r(y0e," (Data2VecText model)"),y0e.forEach(t),kBo=i(P),E3=n(P,"LI",{});var L0e=s(E3);Vde=n(L0e,"STRONG",{});var $tt=s(Vde);SBo=r($tt,"deberta"),$tt.forEach(t),RBo=r(L0e," \u2014 "),Nj=n(L0e,"A",{href:!0});var Itt=s(Nj);BBo=r(Itt,"DebertaForQuestionAnswering"),Itt.forEach(t),PBo=r(L0e," (DeBERTa model)"),L0e.forEach(t),$Bo=i(P),C3=n(P,"LI",{});var x0e=s(C3);Xde=n(x0e,"STRONG",{});var qtt=s(Xde);IBo=r(qtt,"deberta-v2"),qtt.forEach(t),qBo=r(x0e," \u2014 "),jj=n(x0e,"A",{href:!0});var Ntt=s(jj);NBo=r(Ntt,"DebertaV2ForQuestionAnswering"),Ntt.forEach(t),jBo=r(x0e," (DeBERTa-v2 model)"),x0e.forEach(t),DBo=i(P),w3=n(P,"LI",{});var k0e=s(w3);zde=n(k0e,"STRONG",{});var jtt=s(zde);GBo=r(jtt,"distilbert"),jtt.forEach(t),OBo=r(k0e," \u2014 "),Dj=n(k0e,"A",{href:!0});var Dtt=s(Dj);VBo=r(Dtt,"DistilBertForQuestionAnswering"),Dtt.forEach(t),XBo=r(k0e," (DistilBERT model)"),k0e.forEach(t),zBo=i(P),A3=n(P,"LI",{});var S0e=s(A3);Qde=n(S0e,"STRONG",{});var Gtt=s(Qde);QBo=r(Gtt,"electra"),Gtt.forEach(t),WBo=r(S0e," \u2014 "),Gj=n(S0e,"A",{href:!0});var Ott=s(Gj);HBo=r(Ott,"ElectraForQuestionAnswering"),Ott.forEach(t),UBo=r(S0e," (ELECTRA model)"),S0e.forEach(t),JBo=i(P),y3=n(P,"LI",{});var R0e=s(y3);Wde=n(R0e,"STRONG",{});var Vtt=s(Wde);YBo=r(Vtt,"flaubert"),Vtt.forEach(t),KBo=r(R0e," \u2014 "),Oj=n(R0e,"A",{href:!0});var Xtt=s(Oj);ZBo=r(Xtt,"FlaubertForQuestionAnsweringSimple"),Xtt.forEach(t),ePo=r(R0e," (FlauBERT model)"),R0e.forEach(t),oPo=i(P),L3=n(P,"LI",{});var B0e=s(L3);Hde=n(B0e,"STRONG",{});var ztt=s(Hde);rPo=r(ztt,"fnet"),ztt.forEach(t),tPo=r(B0e," \u2014 "),Vj=n(B0e,"A",{href:!0});var Qtt=s(Vj);aPo=r(Qtt,"FNetForQuestionAnswering"),Qtt.forEach(t),nPo=r(B0e," (FNet model)"),B0e.forEach(t),sPo=i(P),x3=n(P,"LI",{});var P0e=s(x3);Ude=n(P0e,"STRONG",{});var Wtt=s(Ude);lPo=r(Wtt,"funnel"),Wtt.forEach(t),iPo=r(P0e," \u2014 "),Xj=n(P0e,"A",{href:!0});var Htt=s(Xj);dPo=r(Htt,"FunnelForQuestionAnswering"),Htt.forEach(t),cPo=r(P0e," (Funnel Transformer model)"),P0e.forEach(t),fPo=i(P),k3=n(P,"LI",{});var $0e=s(k3);Jde=n($0e,"STRONG",{});var Utt=s(Jde);mPo=r(Utt,"gptj"),Utt.forEach(t),gPo=r($0e," \u2014 "),zj=n($0e,"A",{href:!0});var Jtt=s(zj);hPo=r(Jtt,"GPTJForQuestionAnswering"),Jtt.forEach(t),pPo=r($0e," (GPT-J model)"),$0e.forEach(t),_Po=i(P),S3=n(P,"LI",{});var I0e=s(S3);Yde=n(I0e,"STRONG",{});var Ytt=s(Yde);uPo=r(Ytt,"ibert"),Ytt.forEach(t),bPo=r(I0e," \u2014 "),Qj=n(I0e,"A",{href:!0});var Ktt=s(Qj);FPo=r(Ktt,"IBertForQuestionAnswering"),Ktt.forEach(t),vPo=r(I0e," (I-BERT model)"),I0e.forEach(t),TPo=i(P),R3=n(P,"LI",{});var q0e=s(R3);Kde=n(q0e,"STRONG",{});var Ztt=s(Kde);MPo=r(Ztt,"layoutlmv2"),Ztt.forEach(t),EPo=r(q0e," \u2014 "),Wj=n(q0e,"A",{href:!0});var eat=s(Wj);CPo=r(eat,"LayoutLMv2ForQuestionAnswering"),eat.forEach(t),wPo=r(q0e," (LayoutLMv2 model)"),q0e.forEach(t),APo=i(P),B3=n(P,"LI",{});var N0e=s(B3);Zde=n(N0e,"STRONG",{});var oat=s(Zde);yPo=r(oat,"led"),oat.forEach(t),LPo=r(N0e," \u2014 "),Hj=n(N0e,"A",{href:!0});var rat=s(Hj);xPo=r(rat,"LEDForQuestionAnswering"),rat.forEach(t),kPo=r(N0e," (LED model)"),N0e.forEach(t),SPo=i(P),P3=n(P,"LI",{});var j0e=s(P3);ece=n(j0e,"STRONG",{});var tat=s(ece);RPo=r(tat,"longformer"),tat.forEach(t),BPo=r(j0e," \u2014 "),Uj=n(j0e,"A",{href:!0});var aat=s(Uj);PPo=r(aat,"LongformerForQuestionAnswering"),aat.forEach(t),$Po=r(j0e," (Longformer model)"),j0e.forEach(t),IPo=i(P),$3=n(P,"LI",{});var D0e=s($3);oce=n(D0e,"STRONG",{});var nat=s(oce);qPo=r(nat,"lxmert"),nat.forEach(t),NPo=r(D0e," \u2014 "),Jj=n(D0e,"A",{href:!0});var sat=s(Jj);jPo=r(sat,"LxmertForQuestionAnswering"),sat.forEach(t),DPo=r(D0e," (LXMERT model)"),D0e.forEach(t),GPo=i(P),I3=n(P,"LI",{});var G0e=s(I3);rce=n(G0e,"STRONG",{});var lat=s(rce);OPo=r(lat,"mbart"),lat.forEach(t),VPo=r(G0e," \u2014 "),Yj=n(G0e,"A",{href:!0});var iat=s(Yj);XPo=r(iat,"MBartForQuestionAnswering"),iat.forEach(t),zPo=r(G0e," (mBART model)"),G0e.forEach(t),QPo=i(P),q3=n(P,"LI",{});var O0e=s(q3);tce=n(O0e,"STRONG",{});var dat=s(tce);WPo=r(dat,"megatron-bert"),dat.forEach(t),HPo=r(O0e," \u2014 "),Kj=n(O0e,"A",{href:!0});var cat=s(Kj);UPo=r(cat,"MegatronBertForQuestionAnswering"),cat.forEach(t),JPo=r(O0e," (MegatronBert model)"),O0e.forEach(t),YPo=i(P),N3=n(P,"LI",{});var V0e=s(N3);ace=n(V0e,"STRONG",{});var fat=s(ace);KPo=r(fat,"mobilebert"),fat.forEach(t),ZPo=r(V0e," \u2014 "),Zj=n(V0e,"A",{href:!0});var mat=s(Zj);e$o=r(mat,"MobileBertForQuestionAnswering"),mat.forEach(t),o$o=r(V0e," (MobileBERT model)"),V0e.forEach(t),r$o=i(P),j3=n(P,"LI",{});var X0e=s(j3);nce=n(X0e,"STRONG",{});var gat=s(nce);t$o=r(gat,"mpnet"),gat.forEach(t),a$o=r(X0e," \u2014 "),eD=n(X0e,"A",{href:!0});var hat=s(eD);n$o=r(hat,"MPNetForQuestionAnswering"),hat.forEach(t),s$o=r(X0e," (MPNet model)"),X0e.forEach(t),l$o=i(P),D3=n(P,"LI",{});var z0e=s(D3);sce=n(z0e,"STRONG",{});var pat=s(sce);i$o=r(pat,"nystromformer"),pat.forEach(t),d$o=r(z0e," \u2014 "),oD=n(z0e,"A",{href:!0});var _at=s(oD);c$o=r(_at,"NystromformerForQuestionAnswering"),_at.forEach(t),f$o=r(z0e," (Nystromformer model)"),z0e.forEach(t),m$o=i(P),G3=n(P,"LI",{});var Q0e=s(G3);lce=n(Q0e,"STRONG",{});var uat=s(lce);g$o=r(uat,"qdqbert"),uat.forEach(t),h$o=r(Q0e," \u2014 "),rD=n(Q0e,"A",{href:!0});var bat=s(rD);p$o=r(bat,"QDQBertForQuestionAnswering"),bat.forEach(t),_$o=r(Q0e," (QDQBert model)"),Q0e.forEach(t),u$o=i(P),O3=n(P,"LI",{});var W0e=s(O3);ice=n(W0e,"STRONG",{});var Fat=s(ice);b$o=r(Fat,"reformer"),Fat.forEach(t),F$o=r(W0e," \u2014 "),tD=n(W0e,"A",{href:!0});var vat=s(tD);v$o=r(vat,"ReformerForQuestionAnswering"),vat.forEach(t),T$o=r(W0e," (Reformer model)"),W0e.forEach(t),M$o=i(P),V3=n(P,"LI",{});var H0e=s(V3);dce=n(H0e,"STRONG",{});var Tat=s(dce);E$o=r(Tat,"rembert"),Tat.forEach(t),C$o=r(H0e," \u2014 "),aD=n(H0e,"A",{href:!0});var Mat=s(aD);w$o=r(Mat,"RemBertForQuestionAnswering"),Mat.forEach(t),A$o=r(H0e," (RemBERT model)"),H0e.forEach(t),y$o=i(P),X3=n(P,"LI",{});var U0e=s(X3);cce=n(U0e,"STRONG",{});var Eat=s(cce);L$o=r(Eat,"roberta"),Eat.forEach(t),x$o=r(U0e," \u2014 "),nD=n(U0e,"A",{href:!0});var Cat=s(nD);k$o=r(Cat,"RobertaForQuestionAnswering"),Cat.forEach(t),S$o=r(U0e," (RoBERTa model)"),U0e.forEach(t),R$o=i(P),z3=n(P,"LI",{});var J0e=s(z3);fce=n(J0e,"STRONG",{});var wat=s(fce);B$o=r(wat,"roformer"),wat.forEach(t),P$o=r(J0e," \u2014 "),sD=n(J0e,"A",{href:!0});var Aat=s(sD);$$o=r(Aat,"RoFormerForQuestionAnswering"),Aat.forEach(t),I$o=r(J0e," (RoFormer model)"),J0e.forEach(t),q$o=i(P),Q3=n(P,"LI",{});var Y0e=s(Q3);mce=n(Y0e,"STRONG",{});var yat=s(mce);N$o=r(yat,"splinter"),yat.forEach(t),j$o=r(Y0e," \u2014 "),lD=n(Y0e,"A",{href:!0});var Lat=s(lD);D$o=r(Lat,"SplinterForQuestionAnswering"),Lat.forEach(t),G$o=r(Y0e," (Splinter model)"),Y0e.forEach(t),O$o=i(P),W3=n(P,"LI",{});var K0e=s(W3);gce=n(K0e,"STRONG",{});var xat=s(gce);V$o=r(xat,"squeezebert"),xat.forEach(t),X$o=r(K0e," \u2014 "),iD=n(K0e,"A",{href:!0});var kat=s(iD);z$o=r(kat,"SqueezeBertForQuestionAnswering"),kat.forEach(t),Q$o=r(K0e," (SqueezeBERT model)"),K0e.forEach(t),W$o=i(P),H3=n(P,"LI",{});var Z0e=s(H3);hce=n(Z0e,"STRONG",{});var Sat=s(hce);H$o=r(Sat,"xlm"),Sat.forEach(t),U$o=r(Z0e," \u2014 "),dD=n(Z0e,"A",{href:!0});var Rat=s(dD);J$o=r(Rat,"XLMForQuestionAnsweringSimple"),Rat.forEach(t),Y$o=r(Z0e," (XLM model)"),Z0e.forEach(t),K$o=i(P),U3=n(P,"LI",{});var eye=s(U3);pce=n(eye,"STRONG",{});var Bat=s(pce);Z$o=r(Bat,"xlm-roberta"),Bat.forEach(t),eIo=r(eye," \u2014 "),cD=n(eye,"A",{href:!0});var Pat=s(cD);oIo=r(Pat,"XLMRobertaForQuestionAnswering"),Pat.forEach(t),rIo=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),tIo=i(P),J3=n(P,"LI",{});var oye=s(J3);_ce=n(oye,"STRONG",{});var $at=s(_ce);aIo=r($at,"xlm-roberta-xl"),$at.forEach(t),nIo=r(oye," \u2014 "),fD=n(oye,"A",{href:!0});var Iat=s(fD);sIo=r(Iat,"XLMRobertaXLForQuestionAnswering"),Iat.forEach(t),lIo=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),iIo=i(P),Y3=n(P,"LI",{});var rye=s(Y3);uce=n(rye,"STRONG",{});var qat=s(uce);dIo=r(qat,"xlnet"),qat.forEach(t),cIo=r(rye," \u2014 "),mD=n(rye,"A",{href:!0});var Nat=s(mD);fIo=r(Nat,"XLNetForQuestionAnsweringSimple"),Nat.forEach(t),mIo=r(rye," (XLNet model)"),rye.forEach(t),gIo=i(P),K3=n(P,"LI",{});var tye=s(K3);bce=n(tye,"STRONG",{});var jat=s(bce);hIo=r(jat,"yoso"),jat.forEach(t),pIo=r(tye," \u2014 "),gD=n(tye,"A",{href:!0});var Dat=s(gD);_Io=r(Dat,"YosoForQuestionAnswering"),Dat.forEach(t),uIo=r(tye," (YOSO model)"),tye.forEach(t),P.forEach(t),bIo=i(Ut),Z3=n(Ut,"P",{});var aye=s(Z3);FIo=r(aye,"The model is set in evaluation mode by default using "),Fce=n(aye,"CODE",{});var Gat=s(Fce);vIo=r(Gat,"model.eval()"),Gat.forEach(t),TIo=r(aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vce=n(aye,"CODE",{});var Oat=s(vce);MIo=r(Oat,"model.train()"),Oat.forEach(t),aye.forEach(t),EIo=i(Ut),Tce=n(Ut,"P",{});var Vat=s(Tce);CIo=r(Vat,"Examples:"),Vat.forEach(t),wIo=i(Ut),m(cw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),_Re=i(c),Ad=n(c,"H2",{class:!0});var wPe=s(Ad);e2=n(wPe,"A",{id:!0,class:!0,href:!0});var Xat=s(e2);Mce=n(Xat,"SPAN",{});var zat=s(Mce);m(fw.$$.fragment,zat),zat.forEach(t),Xat.forEach(t),AIo=i(wPe),Ece=n(wPe,"SPAN",{});var Qat=s(Ece);yIo=r(Qat,"AutoModelForTableQuestionAnswering"),Qat.forEach(t),wPe.forEach(t),uRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(mw.$$.fragment,gl),LIo=i(gl),yd=n(gl,"P",{});var pU=s(yd);xIo=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hD=n(pU,"A",{href:!0});var Wat=s(hD);kIo=r(Wat,"from_pretrained()"),Wat.forEach(t),SIo=r(pU," class method or the "),pD=n(pU,"A",{href:!0});var Hat=s(pD);RIo=r(Hat,"from_config()"),Hat.forEach(t),BIo=r(pU,` class
method.`),pU.forEach(t),PIo=i(gl),gw=n(gl,"P",{});var APe=s(gw);$Io=r(APe,"This class cannot be instantiated directly using "),Cce=n(APe,"CODE",{});var Uat=s(Cce);IIo=r(Uat,"__init__()"),Uat.forEach(t),qIo=r(APe," (throws an error)."),APe.forEach(t),NIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(hw.$$.fragment,hl),jIo=i(hl),wce=n(hl,"P",{});var Jat=s(wce);DIo=r(Jat,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jat.forEach(t),GIo=i(hl),Ld=n(hl,"P",{});var _U=s(Ld);OIo=r(_U,`Note:
Loading a model from its configuration file does `),Ace=n(_U,"STRONG",{});var Yat=s(Ace);VIo=r(Yat,"not"),Yat.forEach(t),XIo=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),_D=n(_U,"A",{href:!0});var Kat=s(_D);zIo=r(Kat,"from_pretrained()"),Kat.forEach(t),QIo=r(_U," to load the model weights."),_U.forEach(t),WIo=i(hl),yce=n(hl,"P",{});var Zat=s(yce);HIo=r(Zat,"Examples:"),Zat.forEach(t),UIo=i(hl),m(pw.$$.fragment,hl),hl.forEach(t),JIo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(_w.$$.fragment,Jt),YIo=i(Jt),Lce=n(Jt,"P",{});var ent=s(Lce);KIo=r(ent,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ent.forEach(t),ZIo=i(Jt),en=n(Jt,"P",{});var x4=s(en);eqo=r(x4,"The model class to instantiate is selected based on the "),xce=n(x4,"CODE",{});var ont=s(xce);oqo=r(ont,"model_type"),ont.forEach(t),rqo=r(x4,` property of the config object (either
passed as an argument or loaded from `),kce=n(x4,"CODE",{});var rnt=s(kce);tqo=r(rnt,"pretrained_model_name_or_path"),rnt.forEach(t),aqo=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sce=n(x4,"CODE",{});var tnt=s(Sce);nqo=r(tnt,"pretrained_model_name_or_path"),tnt.forEach(t),sqo=r(x4,":"),x4.forEach(t),lqo=i(Jt),Rce=n(Jt,"UL",{});var ant=s(Rce);o2=n(ant,"LI",{});var nye=s(o2);Bce=n(nye,"STRONG",{});var nnt=s(Bce);iqo=r(nnt,"tapas"),nnt.forEach(t),dqo=r(nye," \u2014 "),uD=n(nye,"A",{href:!0});var snt=s(uD);cqo=r(snt,"TapasForQuestionAnswering"),snt.forEach(t),fqo=r(nye," (TAPAS model)"),nye.forEach(t),ant.forEach(t),mqo=i(Jt),r2=n(Jt,"P",{});var sye=s(r2);gqo=r(sye,"The model is set in evaluation mode by default using "),Pce=n(sye,"CODE",{});var lnt=s(Pce);hqo=r(lnt,"model.eval()"),lnt.forEach(t),pqo=r(sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(sye,"CODE",{});var int=s($ce);_qo=r(int,"model.train()"),int.forEach(t),sye.forEach(t),uqo=i(Jt),Ice=n(Jt,"P",{});var dnt=s(Ice);bqo=r(dnt,"Examples:"),dnt.forEach(t),Fqo=i(Jt),m(uw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),bRe=i(c),xd=n(c,"H2",{class:!0});var yPe=s(xd);t2=n(yPe,"A",{id:!0,class:!0,href:!0});var cnt=s(t2);qce=n(cnt,"SPAN",{});var fnt=s(qce);m(bw.$$.fragment,fnt),fnt.forEach(t),cnt.forEach(t),vqo=i(yPe),Nce=n(yPe,"SPAN",{});var mnt=s(Nce);Tqo=r(mnt,"AutoModelForImageClassification"),mnt.forEach(t),yPe.forEach(t),FRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Fw.$$.fragment,pl),Mqo=i(pl),kd=n(pl,"P",{});var uU=s(kd);Eqo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bD=n(uU,"A",{href:!0});var gnt=s(bD);Cqo=r(gnt,"from_pretrained()"),gnt.forEach(t),wqo=r(uU," class method or the "),FD=n(uU,"A",{href:!0});var hnt=s(FD);Aqo=r(hnt,"from_config()"),hnt.forEach(t),yqo=r(uU,` class
method.`),uU.forEach(t),Lqo=i(pl),vw=n(pl,"P",{});var LPe=s(vw);xqo=r(LPe,"This class cannot be instantiated directly using "),jce=n(LPe,"CODE",{});var pnt=s(jce);kqo=r(pnt,"__init__()"),pnt.forEach(t),Sqo=r(LPe," (throws an error)."),LPe.forEach(t),Rqo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Tw.$$.fragment,_l),Bqo=i(_l),Dce=n(_l,"P",{});var _nt=s(Dce);Pqo=r(_nt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_nt.forEach(t),$qo=i(_l),Sd=n(_l,"P",{});var bU=s(Sd);Iqo=r(bU,`Note:
Loading a model from its configuration file does `),Gce=n(bU,"STRONG",{});var unt=s(Gce);qqo=r(unt,"not"),unt.forEach(t),Nqo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vD=n(bU,"A",{href:!0});var bnt=s(vD);jqo=r(bnt,"from_pretrained()"),bnt.forEach(t),Dqo=r(bU," to load the model weights."),bU.forEach(t),Gqo=i(_l),Oce=n(_l,"P",{});var Fnt=s(Oce);Oqo=r(Fnt,"Examples:"),Fnt.forEach(t),Vqo=i(_l),m(Mw.$$.fragment,_l),_l.forEach(t),Xqo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Ew.$$.fragment,Yt),zqo=i(Yt),Vce=n(Yt,"P",{});var vnt=s(Vce);Qqo=r(vnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vnt.forEach(t),Wqo=i(Yt),on=n(Yt,"P",{});var k4=s(on);Hqo=r(k4,"The model class to instantiate is selected based on the "),Xce=n(k4,"CODE",{});var Tnt=s(Xce);Uqo=r(Tnt,"model_type"),Tnt.forEach(t),Jqo=r(k4,` property of the config object (either
passed as an argument or loaded from `),zce=n(k4,"CODE",{});var Mnt=s(zce);Yqo=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),Kqo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(k4,"CODE",{});var Ent=s(Qce);Zqo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),eNo=r(k4,":"),k4.forEach(t),oNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);a2=n(Te,"LI",{});var lye=s(a2);Wce=n(lye,"STRONG",{});var Cnt=s(Wce);rNo=r(Cnt,"beit"),Cnt.forEach(t),tNo=r(lye," \u2014 "),TD=n(lye,"A",{href:!0});var wnt=s(TD);aNo=r(wnt,"BeitForImageClassification"),wnt.forEach(t),nNo=r(lye," (BEiT model)"),lye.forEach(t),sNo=i(Te),n2=n(Te,"LI",{});var iye=s(n2);Hce=n(iye,"STRONG",{});var Ant=s(Hce);lNo=r(Ant,"convnext"),Ant.forEach(t),iNo=r(iye," \u2014 "),MD=n(iye,"A",{href:!0});var ynt=s(MD);dNo=r(ynt,"ConvNextForImageClassification"),ynt.forEach(t),cNo=r(iye," (ConvNext model)"),iye.forEach(t),fNo=i(Te),Ds=n(Te,"LI",{});var n9=s(Ds);Uce=n(n9,"STRONG",{});var Lnt=s(Uce);mNo=r(Lnt,"deit"),Lnt.forEach(t),gNo=r(n9," \u2014 "),ED=n(n9,"A",{href:!0});var xnt=s(ED);hNo=r(xnt,"DeiTForImageClassification"),xnt.forEach(t),pNo=r(n9," or "),CD=n(n9,"A",{href:!0});var knt=s(CD);_No=r(knt,"DeiTForImageClassificationWithTeacher"),knt.forEach(t),uNo=r(n9," (DeiT model)"),n9.forEach(t),bNo=i(Te),s2=n(Te,"LI",{});var dye=s(s2);Jce=n(dye,"STRONG",{});var Snt=s(Jce);FNo=r(Snt,"imagegpt"),Snt.forEach(t),vNo=r(dye," \u2014 "),wD=n(dye,"A",{href:!0});var Rnt=s(wD);TNo=r(Rnt,"ImageGPTForImageClassification"),Rnt.forEach(t),MNo=r(dye," (ImageGPT model)"),dye.forEach(t),ENo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);Yce=n($f,"STRONG",{});var Bnt=s(Yce);CNo=r(Bnt,"perceiver"),Bnt.forEach(t),wNo=r($f," \u2014 "),AD=n($f,"A",{href:!0});var Pnt=s(AD);ANo=r(Pnt,"PerceiverForImageClassificationLearned"),Pnt.forEach(t),yNo=r($f," or "),yD=n($f,"A",{href:!0});var $nt=s(yD);LNo=r($nt,"PerceiverForImageClassificationFourier"),$nt.forEach(t),xNo=r($f," or "),LD=n($f,"A",{href:!0});var Int=s(LD);kNo=r(Int,"PerceiverForImageClassificationConvProcessing"),Int.forEach(t),SNo=r($f," (Perceiver model)"),$f.forEach(t),RNo=i(Te),l2=n(Te,"LI",{});var cye=s(l2);Kce=n(cye,"STRONG",{});var qnt=s(Kce);BNo=r(qnt,"poolformer"),qnt.forEach(t),PNo=r(cye," \u2014 "),xD=n(cye,"A",{href:!0});var Nnt=s(xD);$No=r(Nnt,"PoolFormerForImageClassification"),Nnt.forEach(t),INo=r(cye," (PoolFormer model)"),cye.forEach(t),qNo=i(Te),i2=n(Te,"LI",{});var fye=s(i2);Zce=n(fye,"STRONG",{});var jnt=s(Zce);NNo=r(jnt,"resnet"),jnt.forEach(t),jNo=r(fye," \u2014 "),kD=n(fye,"A",{href:!0});var Dnt=s(kD);DNo=r(Dnt,"ResNetForImageClassification"),Dnt.forEach(t),GNo=r(fye," (ResNet model)"),fye.forEach(t),ONo=i(Te),d2=n(Te,"LI",{});var mye=s(d2);efe=n(mye,"STRONG",{});var Gnt=s(efe);VNo=r(Gnt,"segformer"),Gnt.forEach(t),XNo=r(mye," \u2014 "),SD=n(mye,"A",{href:!0});var Ont=s(SD);zNo=r(Ont,"SegformerForImageClassification"),Ont.forEach(t),QNo=r(mye," (SegFormer model)"),mye.forEach(t),WNo=i(Te),c2=n(Te,"LI",{});var gye=s(c2);ofe=n(gye,"STRONG",{});var Vnt=s(ofe);HNo=r(Vnt,"swin"),Vnt.forEach(t),UNo=r(gye," \u2014 "),RD=n(gye,"A",{href:!0});var Xnt=s(RD);JNo=r(Xnt,"SwinForImageClassification"),Xnt.forEach(t),YNo=r(gye," (Swin model)"),gye.forEach(t),KNo=i(Te),f2=n(Te,"LI",{});var hye=s(f2);rfe=n(hye,"STRONG",{});var znt=s(rfe);ZNo=r(znt,"van"),znt.forEach(t),ejo=r(hye," \u2014 "),BD=n(hye,"A",{href:!0});var Qnt=s(BD);ojo=r(Qnt,"VanForImageClassification"),Qnt.forEach(t),rjo=r(hye," (VAN model)"),hye.forEach(t),tjo=i(Te),m2=n(Te,"LI",{});var pye=s(m2);tfe=n(pye,"STRONG",{});var Wnt=s(tfe);ajo=r(Wnt,"vit"),Wnt.forEach(t),njo=r(pye," \u2014 "),PD=n(pye,"A",{href:!0});var Hnt=s(PD);sjo=r(Hnt,"ViTForImageClassification"),Hnt.forEach(t),ljo=r(pye," (ViT model)"),pye.forEach(t),Te.forEach(t),ijo=i(Yt),g2=n(Yt,"P",{});var _ye=s(g2);djo=r(_ye,"The model is set in evaluation mode by default using "),afe=n(_ye,"CODE",{});var Unt=s(afe);cjo=r(Unt,"model.eval()"),Unt.forEach(t),fjo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nfe=n(_ye,"CODE",{});var Jnt=s(nfe);mjo=r(Jnt,"model.train()"),Jnt.forEach(t),_ye.forEach(t),gjo=i(Yt),sfe=n(Yt,"P",{});var Ynt=s(sfe);hjo=r(Ynt,"Examples:"),Ynt.forEach(t),pjo=i(Yt),m(Cw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),vRe=i(c),Rd=n(c,"H2",{class:!0});var xPe=s(Rd);h2=n(xPe,"A",{id:!0,class:!0,href:!0});var Knt=s(h2);lfe=n(Knt,"SPAN",{});var Znt=s(lfe);m(ww.$$.fragment,Znt),Znt.forEach(t),Knt.forEach(t),_jo=i(xPe),ife=n(xPe,"SPAN",{});var est=s(ife);ujo=r(est,"AutoModelForVision2Seq"),est.forEach(t),xPe.forEach(t),TRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(Aw.$$.fragment,ul),bjo=i(ul),Bd=n(ul,"P",{});var FU=s(Bd);Fjo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$D=n(FU,"A",{href:!0});var ost=s($D);vjo=r(ost,"from_pretrained()"),ost.forEach(t),Tjo=r(FU," class method or the "),ID=n(FU,"A",{href:!0});var rst=s(ID);Mjo=r(rst,"from_config()"),rst.forEach(t),Ejo=r(FU,` class
method.`),FU.forEach(t),Cjo=i(ul),yw=n(ul,"P",{});var kPe=s(yw);wjo=r(kPe,"This class cannot be instantiated directly using "),dfe=n(kPe,"CODE",{});var tst=s(dfe);Ajo=r(tst,"__init__()"),tst.forEach(t),yjo=r(kPe," (throws an error)."),kPe.forEach(t),Ljo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Lw.$$.fragment,bl),xjo=i(bl),cfe=n(bl,"P",{});var ast=s(cfe);kjo=r(ast,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ast.forEach(t),Sjo=i(bl),Pd=n(bl,"P",{});var vU=s(Pd);Rjo=r(vU,`Note:
Loading a model from its configuration file does `),ffe=n(vU,"STRONG",{});var nst=s(ffe);Bjo=r(nst,"not"),nst.forEach(t),Pjo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(vU,"A",{href:!0});var sst=s(qD);$jo=r(sst,"from_pretrained()"),sst.forEach(t),Ijo=r(vU," to load the model weights."),vU.forEach(t),qjo=i(bl),mfe=n(bl,"P",{});var lst=s(mfe);Njo=r(lst,"Examples:"),lst.forEach(t),jjo=i(bl),m(xw.$$.fragment,bl),bl.forEach(t),Djo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(kw.$$.fragment,Kt),Gjo=i(Kt),gfe=n(Kt,"P",{});var ist=s(gfe);Ojo=r(ist,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ist.forEach(t),Vjo=i(Kt),rn=n(Kt,"P",{});var S4=s(rn);Xjo=r(S4,"The model class to instantiate is selected based on the "),hfe=n(S4,"CODE",{});var dst=s(hfe);zjo=r(dst,"model_type"),dst.forEach(t),Qjo=r(S4,` property of the config object (either
passed as an argument or loaded from `),pfe=n(S4,"CODE",{});var cst=s(pfe);Wjo=r(cst,"pretrained_model_name_or_path"),cst.forEach(t),Hjo=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_fe=n(S4,"CODE",{});var fst=s(_fe);Ujo=r(fst,"pretrained_model_name_or_path"),fst.forEach(t),Jjo=r(S4,":"),S4.forEach(t),Yjo=i(Kt),ufe=n(Kt,"UL",{});var mst=s(ufe);p2=n(mst,"LI",{});var uye=s(p2);bfe=n(uye,"STRONG",{});var gst=s(bfe);Kjo=r(gst,"vision-encoder-decoder"),gst.forEach(t),Zjo=r(uye," \u2014 "),ND=n(uye,"A",{href:!0});var hst=s(ND);eDo=r(hst,"VisionEncoderDecoderModel"),hst.forEach(t),oDo=r(uye," (Vision Encoder decoder model)"),uye.forEach(t),mst.forEach(t),rDo=i(Kt),_2=n(Kt,"P",{});var bye=s(_2);tDo=r(bye,"The model is set in evaluation mode by default using "),Ffe=n(bye,"CODE",{});var pst=s(Ffe);aDo=r(pst,"model.eval()"),pst.forEach(t),nDo=r(bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(bye,"CODE",{});var _st=s(vfe);sDo=r(_st,"model.train()"),_st.forEach(t),bye.forEach(t),lDo=i(Kt),Tfe=n(Kt,"P",{});var ust=s(Tfe);iDo=r(ust,"Examples:"),ust.forEach(t),dDo=i(Kt),m(Sw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),MRe=i(c),$d=n(c,"H2",{class:!0});var SPe=s($d);u2=n(SPe,"A",{id:!0,class:!0,href:!0});var bst=s(u2);Mfe=n(bst,"SPAN",{});var Fst=s(Mfe);m(Rw.$$.fragment,Fst),Fst.forEach(t),bst.forEach(t),cDo=i(SPe),Efe=n(SPe,"SPAN",{});var vst=s(Efe);fDo=r(vst,"AutoModelForAudioClassification"),vst.forEach(t),SPe.forEach(t),ERe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Bw.$$.fragment,Fl),mDo=i(Fl),Id=n(Fl,"P",{});var TU=s(Id);gDo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jD=n(TU,"A",{href:!0});var Tst=s(jD);hDo=r(Tst,"from_pretrained()"),Tst.forEach(t),pDo=r(TU," class method or the "),DD=n(TU,"A",{href:!0});var Mst=s(DD);_Do=r(Mst,"from_config()"),Mst.forEach(t),uDo=r(TU,` class
method.`),TU.forEach(t),bDo=i(Fl),Pw=n(Fl,"P",{});var RPe=s(Pw);FDo=r(RPe,"This class cannot be instantiated directly using "),Cfe=n(RPe,"CODE",{});var Est=s(Cfe);vDo=r(Est,"__init__()"),Est.forEach(t),TDo=r(RPe," (throws an error)."),RPe.forEach(t),MDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m($w.$$.fragment,vl),EDo=i(vl),wfe=n(vl,"P",{});var Cst=s(wfe);CDo=r(Cst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cst.forEach(t),wDo=i(vl),qd=n(vl,"P",{});var MU=s(qd);ADo=r(MU,`Note:
Loading a model from its configuration file does `),Afe=n(MU,"STRONG",{});var wst=s(Afe);yDo=r(wst,"not"),wst.forEach(t),LDo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GD=n(MU,"A",{href:!0});var Ast=s(GD);xDo=r(Ast,"from_pretrained()"),Ast.forEach(t),kDo=r(MU," to load the model weights."),MU.forEach(t),SDo=i(vl),yfe=n(vl,"P",{});var yst=s(yfe);RDo=r(yst,"Examples:"),yst.forEach(t),BDo=i(vl),m(Iw.$$.fragment,vl),vl.forEach(t),PDo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(qw.$$.fragment,Zt),$Do=i(Zt),Lfe=n(Zt,"P",{});var Lst=s(Lfe);IDo=r(Lst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lst.forEach(t),qDo=i(Zt),tn=n(Zt,"P",{});var R4=s(tn);NDo=r(R4,"The model class to instantiate is selected based on the "),xfe=n(R4,"CODE",{});var xst=s(xfe);jDo=r(xst,"model_type"),xst.forEach(t),DDo=r(R4,` property of the config object (either
passed as an argument or loaded from `),kfe=n(R4,"CODE",{});var kst=s(kfe);GDo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),ODo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sfe=n(R4,"CODE",{});var Sst=s(Sfe);VDo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),XDo=r(R4,":"),R4.forEach(t),zDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);b2=n(Do,"LI",{});var Fye=s(b2);Rfe=n(Fye,"STRONG",{});var Rst=s(Rfe);QDo=r(Rst,"data2vec-audio"),Rst.forEach(t),WDo=r(Fye," \u2014 "),OD=n(Fye,"A",{href:!0});var Bst=s(OD);HDo=r(Bst,"Data2VecAudioForSequenceClassification"),Bst.forEach(t),UDo=r(Fye," (Data2VecAudio model)"),Fye.forEach(t),JDo=i(Do),F2=n(Do,"LI",{});var vye=s(F2);Bfe=n(vye,"STRONG",{});var Pst=s(Bfe);YDo=r(Pst,"hubert"),Pst.forEach(t),KDo=r(vye," \u2014 "),VD=n(vye,"A",{href:!0});var $st=s(VD);ZDo=r($st,"HubertForSequenceClassification"),$st.forEach(t),eGo=r(vye," (Hubert model)"),vye.forEach(t),oGo=i(Do),v2=n(Do,"LI",{});var Tye=s(v2);Pfe=n(Tye,"STRONG",{});var Ist=s(Pfe);rGo=r(Ist,"sew"),Ist.forEach(t),tGo=r(Tye," \u2014 "),XD=n(Tye,"A",{href:!0});var qst=s(XD);aGo=r(qst,"SEWForSequenceClassification"),qst.forEach(t),nGo=r(Tye," (SEW model)"),Tye.forEach(t),sGo=i(Do),T2=n(Do,"LI",{});var Mye=s(T2);$fe=n(Mye,"STRONG",{});var Nst=s($fe);lGo=r(Nst,"sew-d"),Nst.forEach(t),iGo=r(Mye," \u2014 "),zD=n(Mye,"A",{href:!0});var jst=s(zD);dGo=r(jst,"SEWDForSequenceClassification"),jst.forEach(t),cGo=r(Mye," (SEW-D model)"),Mye.forEach(t),fGo=i(Do),M2=n(Do,"LI",{});var Eye=s(M2);Ife=n(Eye,"STRONG",{});var Dst=s(Ife);mGo=r(Dst,"unispeech"),Dst.forEach(t),gGo=r(Eye," \u2014 "),QD=n(Eye,"A",{href:!0});var Gst=s(QD);hGo=r(Gst,"UniSpeechForSequenceClassification"),Gst.forEach(t),pGo=r(Eye," (UniSpeech model)"),Eye.forEach(t),_Go=i(Do),E2=n(Do,"LI",{});var Cye=s(E2);qfe=n(Cye,"STRONG",{});var Ost=s(qfe);uGo=r(Ost,"unispeech-sat"),Ost.forEach(t),bGo=r(Cye," \u2014 "),WD=n(Cye,"A",{href:!0});var Vst=s(WD);FGo=r(Vst,"UniSpeechSatForSequenceClassification"),Vst.forEach(t),vGo=r(Cye," (UniSpeechSat model)"),Cye.forEach(t),TGo=i(Do),C2=n(Do,"LI",{});var wye=s(C2);Nfe=n(wye,"STRONG",{});var Xst=s(Nfe);MGo=r(Xst,"wav2vec2"),Xst.forEach(t),EGo=r(wye," \u2014 "),HD=n(wye,"A",{href:!0});var zst=s(HD);CGo=r(zst,"Wav2Vec2ForSequenceClassification"),zst.forEach(t),wGo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),AGo=i(Do),w2=n(Do,"LI",{});var Aye=s(w2);jfe=n(Aye,"STRONG",{});var Qst=s(jfe);yGo=r(Qst,"wavlm"),Qst.forEach(t),LGo=r(Aye," \u2014 "),UD=n(Aye,"A",{href:!0});var Wst=s(UD);xGo=r(Wst,"WavLMForSequenceClassification"),Wst.forEach(t),kGo=r(Aye," (WavLM model)"),Aye.forEach(t),Do.forEach(t),SGo=i(Zt),A2=n(Zt,"P",{});var yye=s(A2);RGo=r(yye,"The model is set in evaluation mode by default using "),Dfe=n(yye,"CODE",{});var Hst=s(Dfe);BGo=r(Hst,"model.eval()"),Hst.forEach(t),PGo=r(yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gfe=n(yye,"CODE",{});var Ust=s(Gfe);$Go=r(Ust,"model.train()"),Ust.forEach(t),yye.forEach(t),IGo=i(Zt),Ofe=n(Zt,"P",{});var Jst=s(Ofe);qGo=r(Jst,"Examples:"),Jst.forEach(t),NGo=i(Zt),m(Nw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),CRe=i(c),Nd=n(c,"H2",{class:!0});var BPe=s(Nd);y2=n(BPe,"A",{id:!0,class:!0,href:!0});var Yst=s(y2);Vfe=n(Yst,"SPAN",{});var Kst=s(Vfe);m(jw.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),jGo=i(BPe),Xfe=n(BPe,"SPAN",{});var Zst=s(Xfe);DGo=r(Zst,"AutoModelForAudioFrameClassification"),Zst.forEach(t),BPe.forEach(t),wRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Dw.$$.fragment,Tl),GGo=i(Tl),jd=n(Tl,"P",{});var EU=s(jd);OGo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),JD=n(EU,"A",{href:!0});var elt=s(JD);VGo=r(elt,"from_pretrained()"),elt.forEach(t),XGo=r(EU," class method or the "),YD=n(EU,"A",{href:!0});var olt=s(YD);zGo=r(olt,"from_config()"),olt.forEach(t),QGo=r(EU,` class
method.`),EU.forEach(t),WGo=i(Tl),Gw=n(Tl,"P",{});var PPe=s(Gw);HGo=r(PPe,"This class cannot be instantiated directly using "),zfe=n(PPe,"CODE",{});var rlt=s(zfe);UGo=r(rlt,"__init__()"),rlt.forEach(t),JGo=r(PPe," (throws an error)."),PPe.forEach(t),YGo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Ow.$$.fragment,Ml),KGo=i(Ml),Qfe=n(Ml,"P",{});var tlt=s(Qfe);ZGo=r(tlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tlt.forEach(t),eOo=i(Ml),Dd=n(Ml,"P",{});var CU=s(Dd);oOo=r(CU,`Note:
Loading a model from its configuration file does `),Wfe=n(CU,"STRONG",{});var alt=s(Wfe);rOo=r(alt,"not"),alt.forEach(t),tOo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(CU,"A",{href:!0});var nlt=s(KD);aOo=r(nlt,"from_pretrained()"),nlt.forEach(t),nOo=r(CU," to load the model weights."),CU.forEach(t),sOo=i(Ml),Hfe=n(Ml,"P",{});var slt=s(Hfe);lOo=r(slt,"Examples:"),slt.forEach(t),iOo=i(Ml),m(Vw.$$.fragment,Ml),Ml.forEach(t),dOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Xw.$$.fragment,ea),cOo=i(ea),Ufe=n(ea,"P",{});var llt=s(Ufe);fOo=r(llt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),llt.forEach(t),mOo=i(ea),an=n(ea,"P",{});var B4=s(an);gOo=r(B4,"The model class to instantiate is selected based on the "),Jfe=n(B4,"CODE",{});var ilt=s(Jfe);hOo=r(ilt,"model_type"),ilt.forEach(t),pOo=r(B4,` property of the config object (either
passed as an argument or loaded from `),Yfe=n(B4,"CODE",{});var dlt=s(Yfe);_Oo=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),uOo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kfe=n(B4,"CODE",{});var clt=s(Kfe);bOo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),FOo=r(B4,":"),B4.forEach(t),vOo=i(ea),nn=n(ea,"UL",{});var P4=s(nn);L2=n(P4,"LI",{});var Lye=s(L2);Zfe=n(Lye,"STRONG",{});var flt=s(Zfe);TOo=r(flt,"data2vec-audio"),flt.forEach(t),MOo=r(Lye," \u2014 "),ZD=n(Lye,"A",{href:!0});var mlt=s(ZD);EOo=r(mlt,"Data2VecAudioForAudioFrameClassification"),mlt.forEach(t),COo=r(Lye," (Data2VecAudio model)"),Lye.forEach(t),wOo=i(P4),x2=n(P4,"LI",{});var xye=s(x2);eme=n(xye,"STRONG",{});var glt=s(eme);AOo=r(glt,"unispeech-sat"),glt.forEach(t),yOo=r(xye," \u2014 "),eG=n(xye,"A",{href:!0});var hlt=s(eG);LOo=r(hlt,"UniSpeechSatForAudioFrameClassification"),hlt.forEach(t),xOo=r(xye," (UniSpeechSat model)"),xye.forEach(t),kOo=i(P4),k2=n(P4,"LI",{});var kye=s(k2);ome=n(kye,"STRONG",{});var plt=s(ome);SOo=r(plt,"wav2vec2"),plt.forEach(t),ROo=r(kye," \u2014 "),oG=n(kye,"A",{href:!0});var _lt=s(oG);BOo=r(_lt,"Wav2Vec2ForAudioFrameClassification"),_lt.forEach(t),POo=r(kye," (Wav2Vec2 model)"),kye.forEach(t),$Oo=i(P4),S2=n(P4,"LI",{});var Sye=s(S2);rme=n(Sye,"STRONG",{});var ult=s(rme);IOo=r(ult,"wavlm"),ult.forEach(t),qOo=r(Sye," \u2014 "),rG=n(Sye,"A",{href:!0});var blt=s(rG);NOo=r(blt,"WavLMForAudioFrameClassification"),blt.forEach(t),jOo=r(Sye," (WavLM model)"),Sye.forEach(t),P4.forEach(t),DOo=i(ea),R2=n(ea,"P",{});var Rye=s(R2);GOo=r(Rye,"The model is set in evaluation mode by default using "),tme=n(Rye,"CODE",{});var Flt=s(tme);OOo=r(Flt,"model.eval()"),Flt.forEach(t),VOo=r(Rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ame=n(Rye,"CODE",{});var vlt=s(ame);XOo=r(vlt,"model.train()"),vlt.forEach(t),Rye.forEach(t),zOo=i(ea),nme=n(ea,"P",{});var Tlt=s(nme);QOo=r(Tlt,"Examples:"),Tlt.forEach(t),WOo=i(ea),m(zw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),ARe=i(c),Gd=n(c,"H2",{class:!0});var $Pe=s(Gd);B2=n($Pe,"A",{id:!0,class:!0,href:!0});var Mlt=s(B2);sme=n(Mlt,"SPAN",{});var Elt=s(sme);m(Qw.$$.fragment,Elt),Elt.forEach(t),Mlt.forEach(t),HOo=i($Pe),lme=n($Pe,"SPAN",{});var Clt=s(lme);UOo=r(Clt,"AutoModelForCTC"),Clt.forEach(t),$Pe.forEach(t),yRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Ww.$$.fragment,El),JOo=i(El),Od=n(El,"P",{});var wU=s(Od);YOo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),tG=n(wU,"A",{href:!0});var wlt=s(tG);KOo=r(wlt,"from_pretrained()"),wlt.forEach(t),ZOo=r(wU," class method or the "),aG=n(wU,"A",{href:!0});var Alt=s(aG);eVo=r(Alt,"from_config()"),Alt.forEach(t),oVo=r(wU,` class
method.`),wU.forEach(t),rVo=i(El),Hw=n(El,"P",{});var IPe=s(Hw);tVo=r(IPe,"This class cannot be instantiated directly using "),ime=n(IPe,"CODE",{});var ylt=s(ime);aVo=r(ylt,"__init__()"),ylt.forEach(t),nVo=r(IPe," (throws an error)."),IPe.forEach(t),sVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Uw.$$.fragment,Cl),lVo=i(Cl),dme=n(Cl,"P",{});var Llt=s(dme);iVo=r(Llt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Llt.forEach(t),dVo=i(Cl),Vd=n(Cl,"P",{});var AU=s(Vd);cVo=r(AU,`Note:
Loading a model from its configuration file does `),cme=n(AU,"STRONG",{});var xlt=s(cme);fVo=r(xlt,"not"),xlt.forEach(t),mVo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(AU,"A",{href:!0});var klt=s(nG);gVo=r(klt,"from_pretrained()"),klt.forEach(t),hVo=r(AU," to load the model weights."),AU.forEach(t),pVo=i(Cl),fme=n(Cl,"P",{});var Slt=s(fme);_Vo=r(Slt,"Examples:"),Slt.forEach(t),uVo=i(Cl),m(Jw.$$.fragment,Cl),Cl.forEach(t),bVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Yw.$$.fragment,oa),FVo=i(oa),mme=n(oa,"P",{});var Rlt=s(mme);vVo=r(Rlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rlt.forEach(t),TVo=i(oa),sn=n(oa,"P",{});var $4=s(sn);MVo=r($4,"The model class to instantiate is selected based on the "),gme=n($4,"CODE",{});var Blt=s(gme);EVo=r(Blt,"model_type"),Blt.forEach(t),CVo=r($4,` property of the config object (either
passed as an argument or loaded from `),hme=n($4,"CODE",{});var Plt=s(hme);wVo=r(Plt,"pretrained_model_name_or_path"),Plt.forEach(t),AVo=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pme=n($4,"CODE",{});var $lt=s(pme);yVo=r($lt,"pretrained_model_name_or_path"),$lt.forEach(t),LVo=r($4,":"),$4.forEach(t),xVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);P2=n(Go,"LI",{});var Bye=s(P2);_me=n(Bye,"STRONG",{});var Ilt=s(_me);kVo=r(Ilt,"data2vec-audio"),Ilt.forEach(t),SVo=r(Bye," \u2014 "),sG=n(Bye,"A",{href:!0});var qlt=s(sG);RVo=r(qlt,"Data2VecAudioForCTC"),qlt.forEach(t),BVo=r(Bye," (Data2VecAudio model)"),Bye.forEach(t),PVo=i(Go),$2=n(Go,"LI",{});var Pye=s($2);ume=n(Pye,"STRONG",{});var Nlt=s(ume);$Vo=r(Nlt,"hubert"),Nlt.forEach(t),IVo=r(Pye," \u2014 "),lG=n(Pye,"A",{href:!0});var jlt=s(lG);qVo=r(jlt,"HubertForCTC"),jlt.forEach(t),NVo=r(Pye," (Hubert model)"),Pye.forEach(t),jVo=i(Go),I2=n(Go,"LI",{});var $ye=s(I2);bme=n($ye,"STRONG",{});var Dlt=s(bme);DVo=r(Dlt,"sew"),Dlt.forEach(t),GVo=r($ye," \u2014 "),iG=n($ye,"A",{href:!0});var Glt=s(iG);OVo=r(Glt,"SEWForCTC"),Glt.forEach(t),VVo=r($ye," (SEW model)"),$ye.forEach(t),XVo=i(Go),q2=n(Go,"LI",{});var Iye=s(q2);Fme=n(Iye,"STRONG",{});var Olt=s(Fme);zVo=r(Olt,"sew-d"),Olt.forEach(t),QVo=r(Iye," \u2014 "),dG=n(Iye,"A",{href:!0});var Vlt=s(dG);WVo=r(Vlt,"SEWDForCTC"),Vlt.forEach(t),HVo=r(Iye," (SEW-D model)"),Iye.forEach(t),UVo=i(Go),N2=n(Go,"LI",{});var qye=s(N2);vme=n(qye,"STRONG",{});var Xlt=s(vme);JVo=r(Xlt,"unispeech"),Xlt.forEach(t),YVo=r(qye," \u2014 "),cG=n(qye,"A",{href:!0});var zlt=s(cG);KVo=r(zlt,"UniSpeechForCTC"),zlt.forEach(t),ZVo=r(qye," (UniSpeech model)"),qye.forEach(t),eXo=i(Go),j2=n(Go,"LI",{});var Nye=s(j2);Tme=n(Nye,"STRONG",{});var Qlt=s(Tme);oXo=r(Qlt,"unispeech-sat"),Qlt.forEach(t),rXo=r(Nye," \u2014 "),fG=n(Nye,"A",{href:!0});var Wlt=s(fG);tXo=r(Wlt,"UniSpeechSatForCTC"),Wlt.forEach(t),aXo=r(Nye," (UniSpeechSat model)"),Nye.forEach(t),nXo=i(Go),D2=n(Go,"LI",{});var jye=s(D2);Mme=n(jye,"STRONG",{});var Hlt=s(Mme);sXo=r(Hlt,"wav2vec2"),Hlt.forEach(t),lXo=r(jye," \u2014 "),mG=n(jye,"A",{href:!0});var Ult=s(mG);iXo=r(Ult,"Wav2Vec2ForCTC"),Ult.forEach(t),dXo=r(jye," (Wav2Vec2 model)"),jye.forEach(t),cXo=i(Go),G2=n(Go,"LI",{});var Dye=s(G2);Eme=n(Dye,"STRONG",{});var Jlt=s(Eme);fXo=r(Jlt,"wavlm"),Jlt.forEach(t),mXo=r(Dye," \u2014 "),gG=n(Dye,"A",{href:!0});var Ylt=s(gG);gXo=r(Ylt,"WavLMForCTC"),Ylt.forEach(t),hXo=r(Dye," (WavLM model)"),Dye.forEach(t),Go.forEach(t),pXo=i(oa),O2=n(oa,"P",{});var Gye=s(O2);_Xo=r(Gye,"The model is set in evaluation mode by default using "),Cme=n(Gye,"CODE",{});var Klt=s(Cme);uXo=r(Klt,"model.eval()"),Klt.forEach(t),bXo=r(Gye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(Gye,"CODE",{});var Zlt=s(wme);FXo=r(Zlt,"model.train()"),Zlt.forEach(t),Gye.forEach(t),vXo=i(oa),Ame=n(oa,"P",{});var eit=s(Ame);TXo=r(eit,"Examples:"),eit.forEach(t),MXo=i(oa),m(Kw.$$.fragment,oa),oa.forEach(t),El.forEach(t),LRe=i(c),Xd=n(c,"H2",{class:!0});var qPe=s(Xd);V2=n(qPe,"A",{id:!0,class:!0,href:!0});var oit=s(V2);yme=n(oit,"SPAN",{});var rit=s(yme);m(Zw.$$.fragment,rit),rit.forEach(t),oit.forEach(t),EXo=i(qPe),Lme=n(qPe,"SPAN",{});var tit=s(Lme);CXo=r(tit,"AutoModelForSpeechSeq2Seq"),tit.forEach(t),qPe.forEach(t),xRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(eA.$$.fragment,wl),wXo=i(wl),zd=n(wl,"P",{});var yU=s(zd);AXo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hG=n(yU,"A",{href:!0});var ait=s(hG);yXo=r(ait,"from_pretrained()"),ait.forEach(t),LXo=r(yU," class method or the "),pG=n(yU,"A",{href:!0});var nit=s(pG);xXo=r(nit,"from_config()"),nit.forEach(t),kXo=r(yU,` class
method.`),yU.forEach(t),SXo=i(wl),oA=n(wl,"P",{});var NPe=s(oA);RXo=r(NPe,"This class cannot be instantiated directly using "),xme=n(NPe,"CODE",{});var sit=s(xme);BXo=r(sit,"__init__()"),sit.forEach(t),PXo=r(NPe," (throws an error)."),NPe.forEach(t),$Xo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(rA.$$.fragment,Al),IXo=i(Al),kme=n(Al,"P",{});var lit=s(kme);qXo=r(lit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lit.forEach(t),NXo=i(Al),Qd=n(Al,"P",{});var LU=s(Qd);jXo=r(LU,`Note:
Loading a model from its configuration file does `),Sme=n(LU,"STRONG",{});var iit=s(Sme);DXo=r(iit,"not"),iit.forEach(t),GXo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_G=n(LU,"A",{href:!0});var dit=s(_G);OXo=r(dit,"from_pretrained()"),dit.forEach(t),VXo=r(LU," to load the model weights."),LU.forEach(t),XXo=i(Al),Rme=n(Al,"P",{});var cit=s(Rme);zXo=r(cit,"Examples:"),cit.forEach(t),QXo=i(Al),m(tA.$$.fragment,Al),Al.forEach(t),WXo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(aA.$$.fragment,ra),HXo=i(ra),Bme=n(ra,"P",{});var fit=s(Bme);UXo=r(fit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fit.forEach(t),JXo=i(ra),ln=n(ra,"P",{});var I4=s(ln);YXo=r(I4,"The model class to instantiate is selected based on the "),Pme=n(I4,"CODE",{});var mit=s(Pme);KXo=r(mit,"model_type"),mit.forEach(t),ZXo=r(I4,` property of the config object (either
passed as an argument or loaded from `),$me=n(I4,"CODE",{});var git=s($me);ezo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ozo=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n(I4,"CODE",{});var hit=s(Ime);rzo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),tzo=r(I4,":"),I4.forEach(t),azo=i(ra),nA=n(ra,"UL",{});var jPe=s(nA);X2=n(jPe,"LI",{});var Oye=s(X2);qme=n(Oye,"STRONG",{});var pit=s(qme);nzo=r(pit,"speech-encoder-decoder"),pit.forEach(t),szo=r(Oye," \u2014 "),uG=n(Oye,"A",{href:!0});var _it=s(uG);lzo=r(_it,"SpeechEncoderDecoderModel"),_it.forEach(t),izo=r(Oye," (Speech Encoder decoder model)"),Oye.forEach(t),dzo=i(jPe),z2=n(jPe,"LI",{});var Vye=s(z2);Nme=n(Vye,"STRONG",{});var uit=s(Nme);czo=r(uit,"speech_to_text"),uit.forEach(t),fzo=r(Vye," \u2014 "),bG=n(Vye,"A",{href:!0});var bit=s(bG);mzo=r(bit,"Speech2TextForConditionalGeneration"),bit.forEach(t),gzo=r(Vye," (Speech2Text model)"),Vye.forEach(t),jPe.forEach(t),hzo=i(ra),Q2=n(ra,"P",{});var Xye=s(Q2);pzo=r(Xye,"The model is set in evaluation mode by default using "),jme=n(Xye,"CODE",{});var Fit=s(jme);_zo=r(Fit,"model.eval()"),Fit.forEach(t),uzo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(Xye,"CODE",{});var vit=s(Dme);bzo=r(vit,"model.train()"),vit.forEach(t),Xye.forEach(t),Fzo=i(ra),Gme=n(ra,"P",{});var Tit=s(Gme);vzo=r(Tit,"Examples:"),Tit.forEach(t),Tzo=i(ra),m(sA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),kRe=i(c),Wd=n(c,"H2",{class:!0});var DPe=s(Wd);W2=n(DPe,"A",{id:!0,class:!0,href:!0});var Mit=s(W2);Ome=n(Mit,"SPAN",{});var Eit=s(Ome);m(lA.$$.fragment,Eit),Eit.forEach(t),Mit.forEach(t),Mzo=i(DPe),Vme=n(DPe,"SPAN",{});var Cit=s(Vme);Ezo=r(Cit,"AutoModelForAudioXVector"),Cit.forEach(t),DPe.forEach(t),SRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(iA.$$.fragment,yl),Czo=i(yl),Hd=n(yl,"P",{});var xU=s(Hd);wzo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),FG=n(xU,"A",{href:!0});var wit=s(FG);Azo=r(wit,"from_pretrained()"),wit.forEach(t),yzo=r(xU," class method or the "),vG=n(xU,"A",{href:!0});var Ait=s(vG);Lzo=r(Ait,"from_config()"),Ait.forEach(t),xzo=r(xU,` class
method.`),xU.forEach(t),kzo=i(yl),dA=n(yl,"P",{});var GPe=s(dA);Szo=r(GPe,"This class cannot be instantiated directly using "),Xme=n(GPe,"CODE",{});var yit=s(Xme);Rzo=r(yit,"__init__()"),yit.forEach(t),Bzo=r(GPe," (throws an error)."),GPe.forEach(t),Pzo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(cA.$$.fragment,Ll),$zo=i(Ll),zme=n(Ll,"P",{});var Lit=s(zme);Izo=r(Lit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Lit.forEach(t),qzo=i(Ll),Ud=n(Ll,"P",{});var kU=s(Ud);Nzo=r(kU,`Note:
Loading a model from its configuration file does `),Qme=n(kU,"STRONG",{});var xit=s(Qme);jzo=r(xit,"not"),xit.forEach(t),Dzo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(kU,"A",{href:!0});var kit=s(TG);Gzo=r(kit,"from_pretrained()"),kit.forEach(t),Ozo=r(kU," to load the model weights."),kU.forEach(t),Vzo=i(Ll),Wme=n(Ll,"P",{});var Sit=s(Wme);Xzo=r(Sit,"Examples:"),Sit.forEach(t),zzo=i(Ll),m(fA.$$.fragment,Ll),Ll.forEach(t),Qzo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(mA.$$.fragment,ta),Wzo=i(ta),Hme=n(ta,"P",{});var Rit=s(Hme);Hzo=r(Rit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rit.forEach(t),Uzo=i(ta),dn=n(ta,"P",{});var q4=s(dn);Jzo=r(q4,"The model class to instantiate is selected based on the "),Ume=n(q4,"CODE",{});var Bit=s(Ume);Yzo=r(Bit,"model_type"),Bit.forEach(t),Kzo=r(q4,` property of the config object (either
passed as an argument or loaded from `),Jme=n(q4,"CODE",{});var Pit=s(Jme);Zzo=r(Pit,"pretrained_model_name_or_path"),Pit.forEach(t),eQo=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(q4,"CODE",{});var $it=s(Yme);oQo=r($it,"pretrained_model_name_or_path"),$it.forEach(t),rQo=r(q4,":"),q4.forEach(t),tQo=i(ta),cn=n(ta,"UL",{});var N4=s(cn);H2=n(N4,"LI",{});var zye=s(H2);Kme=n(zye,"STRONG",{});var Iit=s(Kme);aQo=r(Iit,"data2vec-audio"),Iit.forEach(t),nQo=r(zye," \u2014 "),MG=n(zye,"A",{href:!0});var qit=s(MG);sQo=r(qit,"Data2VecAudioForXVector"),qit.forEach(t),lQo=r(zye," (Data2VecAudio model)"),zye.forEach(t),iQo=i(N4),U2=n(N4,"LI",{});var Qye=s(U2);Zme=n(Qye,"STRONG",{});var Nit=s(Zme);dQo=r(Nit,"unispeech-sat"),Nit.forEach(t),cQo=r(Qye," \u2014 "),EG=n(Qye,"A",{href:!0});var jit=s(EG);fQo=r(jit,"UniSpeechSatForXVector"),jit.forEach(t),mQo=r(Qye," (UniSpeechSat model)"),Qye.forEach(t),gQo=i(N4),J2=n(N4,"LI",{});var Wye=s(J2);ege=n(Wye,"STRONG",{});var Dit=s(ege);hQo=r(Dit,"wav2vec2"),Dit.forEach(t),pQo=r(Wye," \u2014 "),CG=n(Wye,"A",{href:!0});var Git=s(CG);_Qo=r(Git,"Wav2Vec2ForXVector"),Git.forEach(t),uQo=r(Wye," (Wav2Vec2 model)"),Wye.forEach(t),bQo=i(N4),Y2=n(N4,"LI",{});var Hye=s(Y2);oge=n(Hye,"STRONG",{});var Oit=s(oge);FQo=r(Oit,"wavlm"),Oit.forEach(t),vQo=r(Hye," \u2014 "),wG=n(Hye,"A",{href:!0});var Vit=s(wG);TQo=r(Vit,"WavLMForXVector"),Vit.forEach(t),MQo=r(Hye," (WavLM model)"),Hye.forEach(t),N4.forEach(t),EQo=i(ta),K2=n(ta,"P",{});var Uye=s(K2);CQo=r(Uye,"The model is set in evaluation mode by default using "),rge=n(Uye,"CODE",{});var Xit=s(rge);wQo=r(Xit,"model.eval()"),Xit.forEach(t),AQo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(Uye,"CODE",{});var zit=s(tge);yQo=r(zit,"model.train()"),zit.forEach(t),Uye.forEach(t),LQo=i(ta),age=n(ta,"P",{});var Qit=s(age);xQo=r(Qit,"Examples:"),Qit.forEach(t),kQo=i(ta),m(gA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),RRe=i(c),Jd=n(c,"H2",{class:!0});var OPe=s(Jd);Z2=n(OPe,"A",{id:!0,class:!0,href:!0});var Wit=s(Z2);nge=n(Wit,"SPAN",{});var Hit=s(nge);m(hA.$$.fragment,Hit),Hit.forEach(t),Wit.forEach(t),SQo=i(OPe),sge=n(OPe,"SPAN",{});var Uit=s(sge);RQo=r(Uit,"AutoModelForMaskedImageModeling"),Uit.forEach(t),OPe.forEach(t),BRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(pA.$$.fragment,xl),BQo=i(xl),Yd=n(xl,"P",{});var SU=s(Yd);PQo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),AG=n(SU,"A",{href:!0});var Jit=s(AG);$Qo=r(Jit,"from_pretrained()"),Jit.forEach(t),IQo=r(SU," class method or the "),yG=n(SU,"A",{href:!0});var Yit=s(yG);qQo=r(Yit,"from_config()"),Yit.forEach(t),NQo=r(SU,` class
method.`),SU.forEach(t),jQo=i(xl),_A=n(xl,"P",{});var VPe=s(_A);DQo=r(VPe,"This class cannot be instantiated directly using "),lge=n(VPe,"CODE",{});var Kit=s(lge);GQo=r(Kit,"__init__()"),Kit.forEach(t),OQo=r(VPe," (throws an error)."),VPe.forEach(t),VQo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(uA.$$.fragment,kl),XQo=i(kl),ige=n(kl,"P",{});var Zit=s(ige);zQo=r(Zit,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zit.forEach(t),QQo=i(kl),Kd=n(kl,"P",{});var RU=s(Kd);WQo=r(RU,`Note:
Loading a model from its configuration file does `),dge=n(RU,"STRONG",{});var edt=s(dge);HQo=r(edt,"not"),edt.forEach(t),UQo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(RU,"A",{href:!0});var odt=s(LG);JQo=r(odt,"from_pretrained()"),odt.forEach(t),YQo=r(RU," to load the model weights."),RU.forEach(t),KQo=i(kl),cge=n(kl,"P",{});var rdt=s(cge);ZQo=r(rdt,"Examples:"),rdt.forEach(t),eWo=i(kl),m(bA.$$.fragment,kl),kl.forEach(t),oWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(FA.$$.fragment,aa),rWo=i(aa),fge=n(aa,"P",{});var tdt=s(fge);tWo=r(tdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tdt.forEach(t),aWo=i(aa),fn=n(aa,"P",{});var j4=s(fn);nWo=r(j4,"The model class to instantiate is selected based on the "),mge=n(j4,"CODE",{});var adt=s(mge);sWo=r(adt,"model_type"),adt.forEach(t),lWo=r(j4,` property of the config object (either
passed as an argument or loaded from `),gge=n(j4,"CODE",{});var ndt=s(gge);iWo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),dWo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(j4,"CODE",{});var sdt=s(hge);cWo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),fWo=r(j4,":"),j4.forEach(t),mWo=i(aa),Zd=n(aa,"UL",{});var BU=s(Zd);eF=n(BU,"LI",{});var Jye=s(eF);pge=n(Jye,"STRONG",{});var ldt=s(pge);gWo=r(ldt,"deit"),ldt.forEach(t),hWo=r(Jye," \u2014 "),xG=n(Jye,"A",{href:!0});var idt=s(xG);pWo=r(idt,"DeiTForMaskedImageModeling"),idt.forEach(t),_Wo=r(Jye," (DeiT model)"),Jye.forEach(t),uWo=i(BU),oF=n(BU,"LI",{});var Yye=s(oF);_ge=n(Yye,"STRONG",{});var ddt=s(_ge);bWo=r(ddt,"swin"),ddt.forEach(t),FWo=r(Yye," \u2014 "),kG=n(Yye,"A",{href:!0});var cdt=s(kG);vWo=r(cdt,"SwinForMaskedImageModeling"),cdt.forEach(t),TWo=r(Yye," (Swin model)"),Yye.forEach(t),MWo=i(BU),rF=n(BU,"LI",{});var Kye=s(rF);uge=n(Kye,"STRONG",{});var fdt=s(uge);EWo=r(fdt,"vit"),fdt.forEach(t),CWo=r(Kye," \u2014 "),SG=n(Kye,"A",{href:!0});var mdt=s(SG);wWo=r(mdt,"ViTForMaskedImageModeling"),mdt.forEach(t),AWo=r(Kye," (ViT model)"),Kye.forEach(t),BU.forEach(t),yWo=i(aa),tF=n(aa,"P",{});var Zye=s(tF);LWo=r(Zye,"The model is set in evaluation mode by default using "),bge=n(Zye,"CODE",{});var gdt=s(bge);xWo=r(gdt,"model.eval()"),gdt.forEach(t),kWo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fge=n(Zye,"CODE",{});var hdt=s(Fge);SWo=r(hdt,"model.train()"),hdt.forEach(t),Zye.forEach(t),RWo=i(aa),vge=n(aa,"P",{});var pdt=s(vge);BWo=r(pdt,"Examples:"),pdt.forEach(t),PWo=i(aa),m(vA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),PRe=i(c),ec=n(c,"H2",{class:!0});var XPe=s(ec);aF=n(XPe,"A",{id:!0,class:!0,href:!0});var _dt=s(aF);Tge=n(_dt,"SPAN",{});var udt=s(Tge);m(TA.$$.fragment,udt),udt.forEach(t),_dt.forEach(t),$Wo=i(XPe),Mge=n(XPe,"SPAN",{});var bdt=s(Mge);IWo=r(bdt,"AutoModelForObjectDetection"),bdt.forEach(t),XPe.forEach(t),$Re=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(MA.$$.fragment,Sl),qWo=i(Sl),oc=n(Sl,"P",{});var PU=s(oc);NWo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),RG=n(PU,"A",{href:!0});var Fdt=s(RG);jWo=r(Fdt,"from_pretrained()"),Fdt.forEach(t),DWo=r(PU," class method or the "),BG=n(PU,"A",{href:!0});var vdt=s(BG);GWo=r(vdt,"from_config()"),vdt.forEach(t),OWo=r(PU,` class
method.`),PU.forEach(t),VWo=i(Sl),EA=n(Sl,"P",{});var zPe=s(EA);XWo=r(zPe,"This class cannot be instantiated directly using "),Ege=n(zPe,"CODE",{});var Tdt=s(Ege);zWo=r(Tdt,"__init__()"),Tdt.forEach(t),QWo=r(zPe," (throws an error)."),zPe.forEach(t),WWo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(CA.$$.fragment,Rl),HWo=i(Rl),Cge=n(Rl,"P",{});var Mdt=s(Cge);UWo=r(Mdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mdt.forEach(t),JWo=i(Rl),rc=n(Rl,"P",{});var $U=s(rc);YWo=r($U,`Note:
Loading a model from its configuration file does `),wge=n($U,"STRONG",{});var Edt=s(wge);KWo=r(Edt,"not"),Edt.forEach(t),ZWo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n($U,"A",{href:!0});var Cdt=s(PG);eHo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),oHo=r($U," to load the model weights."),$U.forEach(t),rHo=i(Rl),Age=n(Rl,"P",{});var wdt=s(Age);tHo=r(wdt,"Examples:"),wdt.forEach(t),aHo=i(Rl),m(wA.$$.fragment,Rl),Rl.forEach(t),nHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(AA.$$.fragment,na),sHo=i(na),yge=n(na,"P",{});var Adt=s(yge);lHo=r(Adt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Adt.forEach(t),iHo=i(na),mn=n(na,"P",{});var D4=s(mn);dHo=r(D4,"The model class to instantiate is selected based on the "),Lge=n(D4,"CODE",{});var ydt=s(Lge);cHo=r(ydt,"model_type"),ydt.forEach(t),fHo=r(D4,` property of the config object (either
passed as an argument or loaded from `),xge=n(D4,"CODE",{});var Ldt=s(xge);mHo=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),gHo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kge=n(D4,"CODE",{});var xdt=s(kge);hHo=r(xdt,"pretrained_model_name_or_path"),xdt.forEach(t),pHo=r(D4,":"),D4.forEach(t),_Ho=i(na),Sge=n(na,"UL",{});var kdt=s(Sge);nF=n(kdt,"LI",{});var eLe=s(nF);Rge=n(eLe,"STRONG",{});var Sdt=s(Rge);uHo=r(Sdt,"detr"),Sdt.forEach(t),bHo=r(eLe," \u2014 "),$G=n(eLe,"A",{href:!0});var Rdt=s($G);FHo=r(Rdt,"DetrForObjectDetection"),Rdt.forEach(t),vHo=r(eLe," (DETR model)"),eLe.forEach(t),kdt.forEach(t),THo=i(na),sF=n(na,"P",{});var oLe=s(sF);MHo=r(oLe,"The model is set in evaluation mode by default using "),Bge=n(oLe,"CODE",{});var Bdt=s(Bge);EHo=r(Bdt,"model.eval()"),Bdt.forEach(t),CHo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(oLe,"CODE",{});var Pdt=s(Pge);wHo=r(Pdt,"model.train()"),Pdt.forEach(t),oLe.forEach(t),AHo=i(na),$ge=n(na,"P",{});var $dt=s($ge);yHo=r($dt,"Examples:"),$dt.forEach(t),LHo=i(na),m(yA.$$.fragment,na),na.forEach(t),Sl.forEach(t),IRe=i(c),tc=n(c,"H2",{class:!0});var QPe=s(tc);lF=n(QPe,"A",{id:!0,class:!0,href:!0});var Idt=s(lF);Ige=n(Idt,"SPAN",{});var qdt=s(Ige);m(LA.$$.fragment,qdt),qdt.forEach(t),Idt.forEach(t),xHo=i(QPe),qge=n(QPe,"SPAN",{});var Ndt=s(qge);kHo=r(Ndt,"AutoModelForImageSegmentation"),Ndt.forEach(t),QPe.forEach(t),qRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(xA.$$.fragment,Bl),SHo=i(Bl),ac=n(Bl,"P",{});var IU=s(ac);RHo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),IG=n(IU,"A",{href:!0});var jdt=s(IG);BHo=r(jdt,"from_pretrained()"),jdt.forEach(t),PHo=r(IU," class method or the "),qG=n(IU,"A",{href:!0});var Ddt=s(qG);$Ho=r(Ddt,"from_config()"),Ddt.forEach(t),IHo=r(IU,` class
method.`),IU.forEach(t),qHo=i(Bl),kA=n(Bl,"P",{});var WPe=s(kA);NHo=r(WPe,"This class cannot be instantiated directly using "),Nge=n(WPe,"CODE",{});var Gdt=s(Nge);jHo=r(Gdt,"__init__()"),Gdt.forEach(t),DHo=r(WPe," (throws an error)."),WPe.forEach(t),GHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(SA.$$.fragment,Pl),OHo=i(Pl),jge=n(Pl,"P",{});var Odt=s(jge);VHo=r(Odt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Odt.forEach(t),XHo=i(Pl),nc=n(Pl,"P",{});var qU=s(nc);zHo=r(qU,`Note:
Loading a model from its configuration file does `),Dge=n(qU,"STRONG",{});var Vdt=s(Dge);QHo=r(Vdt,"not"),Vdt.forEach(t),WHo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NG=n(qU,"A",{href:!0});var Xdt=s(NG);HHo=r(Xdt,"from_pretrained()"),Xdt.forEach(t),UHo=r(qU," to load the model weights."),qU.forEach(t),JHo=i(Pl),Gge=n(Pl,"P",{});var zdt=s(Gge);YHo=r(zdt,"Examples:"),zdt.forEach(t),KHo=i(Pl),m(RA.$$.fragment,Pl),Pl.forEach(t),ZHo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(BA.$$.fragment,sa),eUo=i(sa),Oge=n(sa,"P",{});var Qdt=s(Oge);oUo=r(Qdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qdt.forEach(t),rUo=i(sa),gn=n(sa,"P",{});var G4=s(gn);tUo=r(G4,"The model class to instantiate is selected based on the "),Vge=n(G4,"CODE",{});var Wdt=s(Vge);aUo=r(Wdt,"model_type"),Wdt.forEach(t),nUo=r(G4,` property of the config object (either
passed as an argument or loaded from `),Xge=n(G4,"CODE",{});var Hdt=s(Xge);sUo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),lUo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zge=n(G4,"CODE",{});var Udt=s(zge);iUo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),dUo=r(G4,":"),G4.forEach(t),cUo=i(sa),Qge=n(sa,"UL",{});var Jdt=s(Qge);iF=n(Jdt,"LI",{});var rLe=s(iF);Wge=n(rLe,"STRONG",{});var Ydt=s(Wge);fUo=r(Ydt,"detr"),Ydt.forEach(t),mUo=r(rLe," \u2014 "),jG=n(rLe,"A",{href:!0});var Kdt=s(jG);gUo=r(Kdt,"DetrForSegmentation"),Kdt.forEach(t),hUo=r(rLe," (DETR model)"),rLe.forEach(t),Jdt.forEach(t),pUo=i(sa),dF=n(sa,"P",{});var tLe=s(dF);_Uo=r(tLe,"The model is set in evaluation mode by default using "),Hge=n(tLe,"CODE",{});var Zdt=s(Hge);uUo=r(Zdt,"model.eval()"),Zdt.forEach(t),bUo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(tLe,"CODE",{});var ect=s(Uge);FUo=r(ect,"model.train()"),ect.forEach(t),tLe.forEach(t),vUo=i(sa),Jge=n(sa,"P",{});var oct=s(Jge);TUo=r(oct,"Examples:"),oct.forEach(t),MUo=i(sa),m(PA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),NRe=i(c),sc=n(c,"H2",{class:!0});var HPe=s(sc);cF=n(HPe,"A",{id:!0,class:!0,href:!0});var rct=s(cF);Yge=n(rct,"SPAN",{});var tct=s(Yge);m($A.$$.fragment,tct),tct.forEach(t),rct.forEach(t),EUo=i(HPe),Kge=n(HPe,"SPAN",{});var act=s(Kge);CUo=r(act,"AutoModelForSemanticSegmentation"),act.forEach(t),HPe.forEach(t),jRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(IA.$$.fragment,$l),wUo=i($l),lc=n($l,"P",{});var NU=s(lc);AUo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),DG=n(NU,"A",{href:!0});var nct=s(DG);yUo=r(nct,"from_pretrained()"),nct.forEach(t),LUo=r(NU," class method or the "),GG=n(NU,"A",{href:!0});var sct=s(GG);xUo=r(sct,"from_config()"),sct.forEach(t),kUo=r(NU,` class
method.`),NU.forEach(t),SUo=i($l),qA=n($l,"P",{});var UPe=s(qA);RUo=r(UPe,"This class cannot be instantiated directly using "),Zge=n(UPe,"CODE",{});var lct=s(Zge);BUo=r(lct,"__init__()"),lct.forEach(t),PUo=r(UPe," (throws an error)."),UPe.forEach(t),$Uo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(NA.$$.fragment,Il),IUo=i(Il),ehe=n(Il,"P",{});var ict=s(ehe);qUo=r(ict,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ict.forEach(t),NUo=i(Il),ic=n(Il,"P",{});var jU=s(ic);jUo=r(jU,`Note:
Loading a model from its configuration file does `),ohe=n(jU,"STRONG",{});var dct=s(ohe);DUo=r(dct,"not"),dct.forEach(t),GUo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(jU,"A",{href:!0});var cct=s(OG);OUo=r(cct,"from_pretrained()"),cct.forEach(t),VUo=r(jU," to load the model weights."),jU.forEach(t),XUo=i(Il),rhe=n(Il,"P",{});var fct=s(rhe);zUo=r(fct,"Examples:"),fct.forEach(t),QUo=i(Il),m(jA.$$.fragment,Il),Il.forEach(t),WUo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(DA.$$.fragment,la),HUo=i(la),the=n(la,"P",{});var mct=s(the);UUo=r(mct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mct.forEach(t),JUo=i(la),hn=n(la,"P",{});var O4=s(hn);YUo=r(O4,"The model class to instantiate is selected based on the "),ahe=n(O4,"CODE",{});var gct=s(ahe);KUo=r(gct,"model_type"),gct.forEach(t),ZUo=r(O4,` property of the config object (either
passed as an argument or loaded from `),nhe=n(O4,"CODE",{});var hct=s(nhe);eJo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),oJo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(O4,"CODE",{});var pct=s(she);rJo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),tJo=r(O4,":"),O4.forEach(t),aJo=i(la),dc=n(la,"UL",{});var DU=s(dc);fF=n(DU,"LI",{});var aLe=s(fF);lhe=n(aLe,"STRONG",{});var _ct=s(lhe);nJo=r(_ct,"beit"),_ct.forEach(t),sJo=r(aLe," \u2014 "),VG=n(aLe,"A",{href:!0});var uct=s(VG);lJo=r(uct,"BeitForSemanticSegmentation"),uct.forEach(t),iJo=r(aLe," (BEiT model)"),aLe.forEach(t),dJo=i(DU),mF=n(DU,"LI",{});var nLe=s(mF);ihe=n(nLe,"STRONG",{});var bct=s(ihe);cJo=r(bct,"dpt"),bct.forEach(t),fJo=r(nLe," \u2014 "),XG=n(nLe,"A",{href:!0});var Fct=s(XG);mJo=r(Fct,"DPTForSemanticSegmentation"),Fct.forEach(t),gJo=r(nLe," (DPT model)"),nLe.forEach(t),hJo=i(DU),gF=n(DU,"LI",{});var sLe=s(gF);dhe=n(sLe,"STRONG",{});var vct=s(dhe);pJo=r(vct,"segformer"),vct.forEach(t),_Jo=r(sLe," \u2014 "),zG=n(sLe,"A",{href:!0});var Tct=s(zG);uJo=r(Tct,"SegformerForSemanticSegmentation"),Tct.forEach(t),bJo=r(sLe," (SegFormer model)"),sLe.forEach(t),DU.forEach(t),FJo=i(la),hF=n(la,"P",{});var lLe=s(hF);vJo=r(lLe,"The model is set in evaluation mode by default using "),che=n(lLe,"CODE",{});var Mct=s(che);TJo=r(Mct,"model.eval()"),Mct.forEach(t),MJo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(lLe,"CODE",{});var Ect=s(fhe);EJo=r(Ect,"model.train()"),Ect.forEach(t),lLe.forEach(t),CJo=i(la),mhe=n(la,"P",{});var Cct=s(mhe);wJo=r(Cct,"Examples:"),Cct.forEach(t),AJo=i(la),m(GA.$$.fragment,la),la.forEach(t),$l.forEach(t),DRe=i(c),cc=n(c,"H2",{class:!0});var JPe=s(cc);pF=n(JPe,"A",{id:!0,class:!0,href:!0});var wct=s(pF);ghe=n(wct,"SPAN",{});var Act=s(ghe);m(OA.$$.fragment,Act),Act.forEach(t),wct.forEach(t),yJo=i(JPe),hhe=n(JPe,"SPAN",{});var yct=s(hhe);LJo=r(yct,"AutoModelForInstanceSegmentation"),yct.forEach(t),JPe.forEach(t),GRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(VA.$$.fragment,ql),xJo=i(ql),fc=n(ql,"P",{});var GU=s(fc);kJo=r(GU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QG=n(GU,"A",{href:!0});var Lct=s(QG);SJo=r(Lct,"from_pretrained()"),Lct.forEach(t),RJo=r(GU," class method or the "),WG=n(GU,"A",{href:!0});var xct=s(WG);BJo=r(xct,"from_config()"),xct.forEach(t),PJo=r(GU,` class
method.`),GU.forEach(t),$Jo=i(ql),XA=n(ql,"P",{});var YPe=s(XA);IJo=r(YPe,"This class cannot be instantiated directly using "),phe=n(YPe,"CODE",{});var kct=s(phe);qJo=r(kct,"__init__()"),kct.forEach(t),NJo=r(YPe," (throws an error)."),YPe.forEach(t),jJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(zA.$$.fragment,Nl),DJo=i(Nl),_he=n(Nl,"P",{});var Sct=s(_he);GJo=r(Sct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Sct.forEach(t),OJo=i(Nl),mc=n(Nl,"P",{});var OU=s(mc);VJo=r(OU,`Note:
Loading a model from its configuration file does `),uhe=n(OU,"STRONG",{});var Rct=s(uhe);XJo=r(Rct,"not"),Rct.forEach(t),zJo=r(OU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(OU,"A",{href:!0});var Bct=s(HG);QJo=r(Bct,"from_pretrained()"),Bct.forEach(t),WJo=r(OU," to load the model weights."),OU.forEach(t),HJo=i(Nl),bhe=n(Nl,"P",{});var Pct=s(bhe);UJo=r(Pct,"Examples:"),Pct.forEach(t),JJo=i(Nl),m(QA.$$.fragment,Nl),Nl.forEach(t),YJo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(WA.$$.fragment,ia),KJo=i(ia),Fhe=n(ia,"P",{});var $ct=s(Fhe);ZJo=r($ct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),$ct.forEach(t),eYo=i(ia),pn=n(ia,"P",{});var V4=s(pn);oYo=r(V4,"The model class to instantiate is selected based on the "),vhe=n(V4,"CODE",{});var Ict=s(vhe);rYo=r(Ict,"model_type"),Ict.forEach(t),tYo=r(V4,` property of the config object (either
passed as an argument or loaded from `),The=n(V4,"CODE",{});var qct=s(The);aYo=r(qct,"pretrained_model_name_or_path"),qct.forEach(t),nYo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mhe=n(V4,"CODE",{});var Nct=s(Mhe);sYo=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),lYo=r(V4,":"),V4.forEach(t),iYo=i(ia),Ehe=n(ia,"UL",{});var jct=s(Ehe);_F=n(jct,"LI",{});var iLe=s(_F);Che=n(iLe,"STRONG",{});var Dct=s(Che);dYo=r(Dct,"maskformer"),Dct.forEach(t),cYo=r(iLe," \u2014 "),UG=n(iLe,"A",{href:!0});var Gct=s(UG);fYo=r(Gct,"MaskFormerForInstanceSegmentation"),Gct.forEach(t),mYo=r(iLe," (MaskFormer model)"),iLe.forEach(t),jct.forEach(t),gYo=i(ia),uF=n(ia,"P",{});var dLe=s(uF);hYo=r(dLe,"The model is set in evaluation mode by default using "),whe=n(dLe,"CODE",{});var Oct=s(whe);pYo=r(Oct,"model.eval()"),Oct.forEach(t),_Yo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ahe=n(dLe,"CODE",{});var Vct=s(Ahe);uYo=r(Vct,"model.train()"),Vct.forEach(t),dLe.forEach(t),bYo=i(ia),yhe=n(ia,"P",{});var Xct=s(yhe);FYo=r(Xct,"Examples:"),Xct.forEach(t),vYo=i(ia),m(HA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),ORe=i(c),gc=n(c,"H2",{class:!0});var KPe=s(gc);bF=n(KPe,"A",{id:!0,class:!0,href:!0});var zct=s(bF);Lhe=n(zct,"SPAN",{});var Qct=s(Lhe);m(UA.$$.fragment,Qct),Qct.forEach(t),zct.forEach(t),TYo=i(KPe),xhe=n(KPe,"SPAN",{});var Wct=s(xhe);MYo=r(Wct,"TFAutoModel"),Wct.forEach(t),KPe.forEach(t),VRe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(JA.$$.fragment,jl),EYo=i(jl),hc=n(jl,"P",{});var VU=s(hc);CYo=r(VU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JG=n(VU,"A",{href:!0});var Hct=s(JG);wYo=r(Hct,"from_pretrained()"),Hct.forEach(t),AYo=r(VU," class method or the "),YG=n(VU,"A",{href:!0});var Uct=s(YG);yYo=r(Uct,"from_config()"),Uct.forEach(t),LYo=r(VU,` class
method.`),VU.forEach(t),xYo=i(jl),YA=n(jl,"P",{});var ZPe=s(YA);kYo=r(ZPe,"This class cannot be instantiated directly using "),khe=n(ZPe,"CODE",{});var Jct=s(khe);SYo=r(Jct,"__init__()"),Jct.forEach(t),RYo=r(ZPe," (throws an error)."),ZPe.forEach(t),BYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(KA.$$.fragment,Dl),PYo=i(Dl),She=n(Dl,"P",{});var Yct=s(She);$Yo=r(Yct,"Instantiates one of the base model classes of the library from a configuration."),Yct.forEach(t),IYo=i(Dl),pc=n(Dl,"P",{});var XU=s(pc);qYo=r(XU,`Note:
Loading a model from its configuration file does `),Rhe=n(XU,"STRONG",{});var Kct=s(Rhe);NYo=r(Kct,"not"),Kct.forEach(t),jYo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(XU,"A",{href:!0});var Zct=s(KG);DYo=r(Zct,"from_pretrained()"),Zct.forEach(t),GYo=r(XU," to load the model weights."),XU.forEach(t),OYo=i(Dl),Bhe=n(Dl,"P",{});var eft=s(Bhe);VYo=r(eft,"Examples:"),eft.forEach(t),XYo=i(Dl),m(ZA.$$.fragment,Dl),Dl.forEach(t),zYo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(e0.$$.fragment,pa),QYo=i(pa),Phe=n(pa,"P",{});var oft=s(Phe);WYo=r(oft,"Instantiate one of the base model classes of the library from a pretrained model."),oft.forEach(t),HYo=i(pa),_n=n(pa,"P",{});var X4=s(_n);UYo=r(X4,"The model class to instantiate is selected based on the "),$he=n(X4,"CODE",{});var rft=s($he);JYo=r(rft,"model_type"),rft.forEach(t),YYo=r(X4,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(X4,"CODE",{});var tft=s(Ihe);KYo=r(tft,"pretrained_model_name_or_path"),tft.forEach(t),ZYo=r(X4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(X4,"CODE",{});var aft=s(qhe);eKo=r(aft,"pretrained_model_name_or_path"),aft.forEach(t),oKo=r(X4,":"),X4.forEach(t),rKo=i(pa),x=n(pa,"UL",{});var k=s(x);FF=n(k,"LI",{});var cLe=s(FF);Nhe=n(cLe,"STRONG",{});var nft=s(Nhe);tKo=r(nft,"albert"),nft.forEach(t),aKo=r(cLe," \u2014 "),ZG=n(cLe,"A",{href:!0});var sft=s(ZG);nKo=r(sft,"TFAlbertModel"),sft.forEach(t),sKo=r(cLe," (ALBERT model)"),cLe.forEach(t),lKo=i(k),vF=n(k,"LI",{});var fLe=s(vF);jhe=n(fLe,"STRONG",{});var lft=s(jhe);iKo=r(lft,"bart"),lft.forEach(t),dKo=r(fLe," \u2014 "),eO=n(fLe,"A",{href:!0});var ift=s(eO);cKo=r(ift,"TFBartModel"),ift.forEach(t),fKo=r(fLe," (BART model)"),fLe.forEach(t),mKo=i(k),TF=n(k,"LI",{});var mLe=s(TF);Dhe=n(mLe,"STRONG",{});var dft=s(Dhe);gKo=r(dft,"bert"),dft.forEach(t),hKo=r(mLe," \u2014 "),oO=n(mLe,"A",{href:!0});var cft=s(oO);pKo=r(cft,"TFBertModel"),cft.forEach(t),_Ko=r(mLe," (BERT model)"),mLe.forEach(t),uKo=i(k),MF=n(k,"LI",{});var gLe=s(MF);Ghe=n(gLe,"STRONG",{});var fft=s(Ghe);bKo=r(fft,"blenderbot"),fft.forEach(t),FKo=r(gLe," \u2014 "),rO=n(gLe,"A",{href:!0});var mft=s(rO);vKo=r(mft,"TFBlenderbotModel"),mft.forEach(t),TKo=r(gLe," (Blenderbot model)"),gLe.forEach(t),MKo=i(k),EF=n(k,"LI",{});var hLe=s(EF);Ohe=n(hLe,"STRONG",{});var gft=s(Ohe);EKo=r(gft,"blenderbot-small"),gft.forEach(t),CKo=r(hLe," \u2014 "),tO=n(hLe,"A",{href:!0});var hft=s(tO);wKo=r(hft,"TFBlenderbotSmallModel"),hft.forEach(t),AKo=r(hLe," (BlenderbotSmall model)"),hLe.forEach(t),yKo=i(k),CF=n(k,"LI",{});var pLe=s(CF);Vhe=n(pLe,"STRONG",{});var pft=s(Vhe);LKo=r(pft,"camembert"),pft.forEach(t),xKo=r(pLe," \u2014 "),aO=n(pLe,"A",{href:!0});var _ft=s(aO);kKo=r(_ft,"TFCamembertModel"),_ft.forEach(t),SKo=r(pLe," (CamemBERT model)"),pLe.forEach(t),RKo=i(k),wF=n(k,"LI",{});var _Le=s(wF);Xhe=n(_Le,"STRONG",{});var uft=s(Xhe);BKo=r(uft,"clip"),uft.forEach(t),PKo=r(_Le," \u2014 "),nO=n(_Le,"A",{href:!0});var bft=s(nO);$Ko=r(bft,"TFCLIPModel"),bft.forEach(t),IKo=r(_Le," (CLIP model)"),_Le.forEach(t),qKo=i(k),AF=n(k,"LI",{});var uLe=s(AF);zhe=n(uLe,"STRONG",{});var Fft=s(zhe);NKo=r(Fft,"convbert"),Fft.forEach(t),jKo=r(uLe," \u2014 "),sO=n(uLe,"A",{href:!0});var vft=s(sO);DKo=r(vft,"TFConvBertModel"),vft.forEach(t),GKo=r(uLe," (ConvBERT model)"),uLe.forEach(t),OKo=i(k),yF=n(k,"LI",{});var bLe=s(yF);Qhe=n(bLe,"STRONG",{});var Tft=s(Qhe);VKo=r(Tft,"convnext"),Tft.forEach(t),XKo=r(bLe," \u2014 "),lO=n(bLe,"A",{href:!0});var Mft=s(lO);zKo=r(Mft,"TFConvNextModel"),Mft.forEach(t),QKo=r(bLe," (ConvNext model)"),bLe.forEach(t),WKo=i(k),LF=n(k,"LI",{});var FLe=s(LF);Whe=n(FLe,"STRONG",{});var Eft=s(Whe);HKo=r(Eft,"ctrl"),Eft.forEach(t),UKo=r(FLe," \u2014 "),iO=n(FLe,"A",{href:!0});var Cft=s(iO);JKo=r(Cft,"TFCTRLModel"),Cft.forEach(t),YKo=r(FLe," (CTRL model)"),FLe.forEach(t),KKo=i(k),xF=n(k,"LI",{});var vLe=s(xF);Hhe=n(vLe,"STRONG",{});var wft=s(Hhe);ZKo=r(wft,"deberta"),wft.forEach(t),eZo=r(vLe," \u2014 "),dO=n(vLe,"A",{href:!0});var Aft=s(dO);oZo=r(Aft,"TFDebertaModel"),Aft.forEach(t),rZo=r(vLe," (DeBERTa model)"),vLe.forEach(t),tZo=i(k),kF=n(k,"LI",{});var TLe=s(kF);Uhe=n(TLe,"STRONG",{});var yft=s(Uhe);aZo=r(yft,"deberta-v2"),yft.forEach(t),nZo=r(TLe," \u2014 "),cO=n(TLe,"A",{href:!0});var Lft=s(cO);sZo=r(Lft,"TFDebertaV2Model"),Lft.forEach(t),lZo=r(TLe," (DeBERTa-v2 model)"),TLe.forEach(t),iZo=i(k),SF=n(k,"LI",{});var MLe=s(SF);Jhe=n(MLe,"STRONG",{});var xft=s(Jhe);dZo=r(xft,"distilbert"),xft.forEach(t),cZo=r(MLe," \u2014 "),fO=n(MLe,"A",{href:!0});var kft=s(fO);fZo=r(kft,"TFDistilBertModel"),kft.forEach(t),mZo=r(MLe," (DistilBERT model)"),MLe.forEach(t),gZo=i(k),RF=n(k,"LI",{});var ELe=s(RF);Yhe=n(ELe,"STRONG",{});var Sft=s(Yhe);hZo=r(Sft,"dpr"),Sft.forEach(t),pZo=r(ELe," \u2014 "),mO=n(ELe,"A",{href:!0});var Rft=s(mO);_Zo=r(Rft,"TFDPRQuestionEncoder"),Rft.forEach(t),uZo=r(ELe," (DPR model)"),ELe.forEach(t),bZo=i(k),BF=n(k,"LI",{});var CLe=s(BF);Khe=n(CLe,"STRONG",{});var Bft=s(Khe);FZo=r(Bft,"electra"),Bft.forEach(t),vZo=r(CLe," \u2014 "),gO=n(CLe,"A",{href:!0});var Pft=s(gO);TZo=r(Pft,"TFElectraModel"),Pft.forEach(t),MZo=r(CLe," (ELECTRA model)"),CLe.forEach(t),EZo=i(k),PF=n(k,"LI",{});var wLe=s(PF);Zhe=n(wLe,"STRONG",{});var $ft=s(Zhe);CZo=r($ft,"flaubert"),$ft.forEach(t),wZo=r(wLe," \u2014 "),hO=n(wLe,"A",{href:!0});var Ift=s(hO);AZo=r(Ift,"TFFlaubertModel"),Ift.forEach(t),yZo=r(wLe," (FlauBERT model)"),wLe.forEach(t),LZo=i(k),Gs=n(k,"LI",{});var s9=s(Gs);epe=n(s9,"STRONG",{});var qft=s(epe);xZo=r(qft,"funnel"),qft.forEach(t),kZo=r(s9," \u2014 "),pO=n(s9,"A",{href:!0});var Nft=s(pO);SZo=r(Nft,"TFFunnelModel"),Nft.forEach(t),RZo=r(s9," or "),_O=n(s9,"A",{href:!0});var jft=s(_O);BZo=r(jft,"TFFunnelBaseModel"),jft.forEach(t),PZo=r(s9," (Funnel Transformer model)"),s9.forEach(t),$Zo=i(k),$F=n(k,"LI",{});var ALe=s($F);ope=n(ALe,"STRONG",{});var Dft=s(ope);IZo=r(Dft,"gpt2"),Dft.forEach(t),qZo=r(ALe," \u2014 "),uO=n(ALe,"A",{href:!0});var Gft=s(uO);NZo=r(Gft,"TFGPT2Model"),Gft.forEach(t),jZo=r(ALe," (OpenAI GPT-2 model)"),ALe.forEach(t),DZo=i(k),IF=n(k,"LI",{});var yLe=s(IF);rpe=n(yLe,"STRONG",{});var Oft=s(rpe);GZo=r(Oft,"gptj"),Oft.forEach(t),OZo=r(yLe," \u2014 "),bO=n(yLe,"A",{href:!0});var Vft=s(bO);VZo=r(Vft,"TFGPTJModel"),Vft.forEach(t),XZo=r(yLe," (GPT-J model)"),yLe.forEach(t),zZo=i(k),qF=n(k,"LI",{});var LLe=s(qF);tpe=n(LLe,"STRONG",{});var Xft=s(tpe);QZo=r(Xft,"hubert"),Xft.forEach(t),WZo=r(LLe," \u2014 "),FO=n(LLe,"A",{href:!0});var zft=s(FO);HZo=r(zft,"TFHubertModel"),zft.forEach(t),UZo=r(LLe," (Hubert model)"),LLe.forEach(t),JZo=i(k),NF=n(k,"LI",{});var xLe=s(NF);ape=n(xLe,"STRONG",{});var Qft=s(ape);YZo=r(Qft,"layoutlm"),Qft.forEach(t),KZo=r(xLe," \u2014 "),vO=n(xLe,"A",{href:!0});var Wft=s(vO);ZZo=r(Wft,"TFLayoutLMModel"),Wft.forEach(t),eer=r(xLe," (LayoutLM model)"),xLe.forEach(t),oer=i(k),jF=n(k,"LI",{});var kLe=s(jF);npe=n(kLe,"STRONG",{});var Hft=s(npe);rer=r(Hft,"led"),Hft.forEach(t),ter=r(kLe," \u2014 "),TO=n(kLe,"A",{href:!0});var Uft=s(TO);aer=r(Uft,"TFLEDModel"),Uft.forEach(t),ner=r(kLe," (LED model)"),kLe.forEach(t),ser=i(k),DF=n(k,"LI",{});var SLe=s(DF);spe=n(SLe,"STRONG",{});var Jft=s(spe);ler=r(Jft,"longformer"),Jft.forEach(t),ier=r(SLe," \u2014 "),MO=n(SLe,"A",{href:!0});var Yft=s(MO);der=r(Yft,"TFLongformerModel"),Yft.forEach(t),cer=r(SLe," (Longformer model)"),SLe.forEach(t),fer=i(k),GF=n(k,"LI",{});var RLe=s(GF);lpe=n(RLe,"STRONG",{});var Kft=s(lpe);mer=r(Kft,"lxmert"),Kft.forEach(t),ger=r(RLe," \u2014 "),EO=n(RLe,"A",{href:!0});var Zft=s(EO);her=r(Zft,"TFLxmertModel"),Zft.forEach(t),per=r(RLe," (LXMERT model)"),RLe.forEach(t),_er=i(k),OF=n(k,"LI",{});var BLe=s(OF);ipe=n(BLe,"STRONG",{});var emt=s(ipe);uer=r(emt,"marian"),emt.forEach(t),ber=r(BLe," \u2014 "),CO=n(BLe,"A",{href:!0});var omt=s(CO);Fer=r(omt,"TFMarianModel"),omt.forEach(t),ver=r(BLe," (Marian model)"),BLe.forEach(t),Ter=i(k),VF=n(k,"LI",{});var PLe=s(VF);dpe=n(PLe,"STRONG",{});var rmt=s(dpe);Mer=r(rmt,"mbart"),rmt.forEach(t),Eer=r(PLe," \u2014 "),wO=n(PLe,"A",{href:!0});var tmt=s(wO);Cer=r(tmt,"TFMBartModel"),tmt.forEach(t),wer=r(PLe," (mBART model)"),PLe.forEach(t),Aer=i(k),XF=n(k,"LI",{});var $Le=s(XF);cpe=n($Le,"STRONG",{});var amt=s(cpe);yer=r(amt,"mobilebert"),amt.forEach(t),Ler=r($Le," \u2014 "),AO=n($Le,"A",{href:!0});var nmt=s(AO);xer=r(nmt,"TFMobileBertModel"),nmt.forEach(t),ker=r($Le," (MobileBERT model)"),$Le.forEach(t),Ser=i(k),zF=n(k,"LI",{});var ILe=s(zF);fpe=n(ILe,"STRONG",{});var smt=s(fpe);Rer=r(smt,"mpnet"),smt.forEach(t),Ber=r(ILe," \u2014 "),yO=n(ILe,"A",{href:!0});var lmt=s(yO);Per=r(lmt,"TFMPNetModel"),lmt.forEach(t),$er=r(ILe," (MPNet model)"),ILe.forEach(t),Ier=i(k),QF=n(k,"LI",{});var qLe=s(QF);mpe=n(qLe,"STRONG",{});var imt=s(mpe);qer=r(imt,"mt5"),imt.forEach(t),Ner=r(qLe," \u2014 "),LO=n(qLe,"A",{href:!0});var dmt=s(LO);jer=r(dmt,"TFMT5Model"),dmt.forEach(t),Der=r(qLe," (mT5 model)"),qLe.forEach(t),Ger=i(k),WF=n(k,"LI",{});var NLe=s(WF);gpe=n(NLe,"STRONG",{});var cmt=s(gpe);Oer=r(cmt,"openai-gpt"),cmt.forEach(t),Ver=r(NLe," \u2014 "),xO=n(NLe,"A",{href:!0});var fmt=s(xO);Xer=r(fmt,"TFOpenAIGPTModel"),fmt.forEach(t),zer=r(NLe," (OpenAI GPT model)"),NLe.forEach(t),Qer=i(k),HF=n(k,"LI",{});var jLe=s(HF);hpe=n(jLe,"STRONG",{});var mmt=s(hpe);Wer=r(mmt,"pegasus"),mmt.forEach(t),Her=r(jLe," \u2014 "),kO=n(jLe,"A",{href:!0});var gmt=s(kO);Uer=r(gmt,"TFPegasusModel"),gmt.forEach(t),Jer=r(jLe," (Pegasus model)"),jLe.forEach(t),Yer=i(k),UF=n(k,"LI",{});var DLe=s(UF);ppe=n(DLe,"STRONG",{});var hmt=s(ppe);Ker=r(hmt,"rembert"),hmt.forEach(t),Zer=r(DLe," \u2014 "),SO=n(DLe,"A",{href:!0});var pmt=s(SO);eor=r(pmt,"TFRemBertModel"),pmt.forEach(t),oor=r(DLe," (RemBERT model)"),DLe.forEach(t),ror=i(k),JF=n(k,"LI",{});var GLe=s(JF);_pe=n(GLe,"STRONG",{});var _mt=s(_pe);tor=r(_mt,"roberta"),_mt.forEach(t),aor=r(GLe," \u2014 "),RO=n(GLe,"A",{href:!0});var umt=s(RO);nor=r(umt,"TFRobertaModel"),umt.forEach(t),sor=r(GLe," (RoBERTa model)"),GLe.forEach(t),lor=i(k),YF=n(k,"LI",{});var OLe=s(YF);upe=n(OLe,"STRONG",{});var bmt=s(upe);ior=r(bmt,"roformer"),bmt.forEach(t),dor=r(OLe," \u2014 "),BO=n(OLe,"A",{href:!0});var Fmt=s(BO);cor=r(Fmt,"TFRoFormerModel"),Fmt.forEach(t),mor=r(OLe," (RoFormer model)"),OLe.forEach(t),gor=i(k),KF=n(k,"LI",{});var VLe=s(KF);bpe=n(VLe,"STRONG",{});var vmt=s(bpe);hor=r(vmt,"speech_to_text"),vmt.forEach(t),por=r(VLe," \u2014 "),PO=n(VLe,"A",{href:!0});var Tmt=s(PO);_or=r(Tmt,"TFSpeech2TextModel"),Tmt.forEach(t),uor=r(VLe," (Speech2Text model)"),VLe.forEach(t),bor=i(k),ZF=n(k,"LI",{});var XLe=s(ZF);Fpe=n(XLe,"STRONG",{});var Mmt=s(Fpe);For=r(Mmt,"t5"),Mmt.forEach(t),vor=r(XLe," \u2014 "),$O=n(XLe,"A",{href:!0});var Emt=s($O);Tor=r(Emt,"TFT5Model"),Emt.forEach(t),Mor=r(XLe," (T5 model)"),XLe.forEach(t),Eor=i(k),ev=n(k,"LI",{});var zLe=s(ev);vpe=n(zLe,"STRONG",{});var Cmt=s(vpe);Cor=r(Cmt,"tapas"),Cmt.forEach(t),wor=r(zLe," \u2014 "),IO=n(zLe,"A",{href:!0});var wmt=s(IO);Aor=r(wmt,"TFTapasModel"),wmt.forEach(t),yor=r(zLe," (TAPAS model)"),zLe.forEach(t),Lor=i(k),ov=n(k,"LI",{});var QLe=s(ov);Tpe=n(QLe,"STRONG",{});var Amt=s(Tpe);xor=r(Amt,"transfo-xl"),Amt.forEach(t),kor=r(QLe," \u2014 "),qO=n(QLe,"A",{href:!0});var ymt=s(qO);Sor=r(ymt,"TFTransfoXLModel"),ymt.forEach(t),Ror=r(QLe," (Transformer-XL model)"),QLe.forEach(t),Bor=i(k),rv=n(k,"LI",{});var WLe=s(rv);Mpe=n(WLe,"STRONG",{});var Lmt=s(Mpe);Por=r(Lmt,"vit"),Lmt.forEach(t),$or=r(WLe," \u2014 "),NO=n(WLe,"A",{href:!0});var xmt=s(NO);Ior=r(xmt,"TFViTModel"),xmt.forEach(t),qor=r(WLe," (ViT model)"),WLe.forEach(t),Nor=i(k),tv=n(k,"LI",{});var HLe=s(tv);Epe=n(HLe,"STRONG",{});var kmt=s(Epe);jor=r(kmt,"vit_mae"),kmt.forEach(t),Dor=r(HLe," \u2014 "),jO=n(HLe,"A",{href:!0});var Smt=s(jO);Gor=r(Smt,"TFViTMAEModel"),Smt.forEach(t),Oor=r(HLe," (ViTMAE model)"),HLe.forEach(t),Vor=i(k),av=n(k,"LI",{});var ULe=s(av);Cpe=n(ULe,"STRONG",{});var Rmt=s(Cpe);Xor=r(Rmt,"wav2vec2"),Rmt.forEach(t),zor=r(ULe," \u2014 "),DO=n(ULe,"A",{href:!0});var Bmt=s(DO);Qor=r(Bmt,"TFWav2Vec2Model"),Bmt.forEach(t),Wor=r(ULe," (Wav2Vec2 model)"),ULe.forEach(t),Hor=i(k),nv=n(k,"LI",{});var JLe=s(nv);wpe=n(JLe,"STRONG",{});var Pmt=s(wpe);Uor=r(Pmt,"xlm"),Pmt.forEach(t),Jor=r(JLe," \u2014 "),GO=n(JLe,"A",{href:!0});var $mt=s(GO);Yor=r($mt,"TFXLMModel"),$mt.forEach(t),Kor=r(JLe," (XLM model)"),JLe.forEach(t),Zor=i(k),sv=n(k,"LI",{});var YLe=s(sv);Ape=n(YLe,"STRONG",{});var Imt=s(Ape);err=r(Imt,"xlm-roberta"),Imt.forEach(t),orr=r(YLe," \u2014 "),OO=n(YLe,"A",{href:!0});var qmt=s(OO);rrr=r(qmt,"TFXLMRobertaModel"),qmt.forEach(t),trr=r(YLe," (XLM-RoBERTa model)"),YLe.forEach(t),arr=i(k),lv=n(k,"LI",{});var KLe=s(lv);ype=n(KLe,"STRONG",{});var Nmt=s(ype);nrr=r(Nmt,"xlnet"),Nmt.forEach(t),srr=r(KLe," \u2014 "),VO=n(KLe,"A",{href:!0});var jmt=s(VO);lrr=r(jmt,"TFXLNetModel"),jmt.forEach(t),irr=r(KLe," (XLNet model)"),KLe.forEach(t),k.forEach(t),drr=i(pa),Lpe=n(pa,"P",{});var Dmt=s(Lpe);crr=r(Dmt,"Examples:"),Dmt.forEach(t),frr=i(pa),m(o0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),XRe=i(c),_c=n(c,"H2",{class:!0});var e$e=s(_c);iv=n(e$e,"A",{id:!0,class:!0,href:!0});var Gmt=s(iv);xpe=n(Gmt,"SPAN",{});var Omt=s(xpe);m(r0.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),mrr=i(e$e),kpe=n(e$e,"SPAN",{});var Vmt=s(kpe);grr=r(Vmt,"TFAutoModelForPreTraining"),Vmt.forEach(t),e$e.forEach(t),zRe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(t0.$$.fragment,Gl),hrr=i(Gl),uc=n(Gl,"P",{});var zU=s(uc);prr=r(zU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XO=n(zU,"A",{href:!0});var Xmt=s(XO);_rr=r(Xmt,"from_pretrained()"),Xmt.forEach(t),urr=r(zU," class method or the "),zO=n(zU,"A",{href:!0});var zmt=s(zO);brr=r(zmt,"from_config()"),zmt.forEach(t),Frr=r(zU,` class
method.`),zU.forEach(t),vrr=i(Gl),a0=n(Gl,"P",{});var o$e=s(a0);Trr=r(o$e,"This class cannot be instantiated directly using "),Spe=n(o$e,"CODE",{});var Qmt=s(Spe);Mrr=r(Qmt,"__init__()"),Qmt.forEach(t),Err=r(o$e," (throws an error)."),o$e.forEach(t),Crr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(n0.$$.fragment,Ol),wrr=i(Ol),Rpe=n(Ol,"P",{});var Wmt=s(Rpe);Arr=r(Wmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wmt.forEach(t),yrr=i(Ol),bc=n(Ol,"P",{});var QU=s(bc);Lrr=r(QU,`Note:
Loading a model from its configuration file does `),Bpe=n(QU,"STRONG",{});var Hmt=s(Bpe);xrr=r(Hmt,"not"),Hmt.forEach(t),krr=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QO=n(QU,"A",{href:!0});var Umt=s(QO);Srr=r(Umt,"from_pretrained()"),Umt.forEach(t),Rrr=r(QU," to load the model weights."),QU.forEach(t),Brr=i(Ol),Ppe=n(Ol,"P",{});var Jmt=s(Ppe);Prr=r(Jmt,"Examples:"),Jmt.forEach(t),$rr=i(Ol),m(s0.$$.fragment,Ol),Ol.forEach(t),Irr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(l0.$$.fragment,_a),qrr=i(_a),$pe=n(_a,"P",{});var Ymt=s($pe);Nrr=r(Ymt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ymt.forEach(t),jrr=i(_a),un=n(_a,"P",{});var z4=s(un);Drr=r(z4,"The model class to instantiate is selected based on the "),Ipe=n(z4,"CODE",{});var Kmt=s(Ipe);Grr=r(Kmt,"model_type"),Kmt.forEach(t),Orr=r(z4,` property of the config object (either
passed as an argument or loaded from `),qpe=n(z4,"CODE",{});var Zmt=s(qpe);Vrr=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),Xrr=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(z4,"CODE",{});var egt=s(Npe);zrr=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),Qrr=r(z4,":"),z4.forEach(t),Wrr=i(_a),H=n(_a,"UL",{});var U=s(H);dv=n(U,"LI",{});var ZLe=s(dv);jpe=n(ZLe,"STRONG",{});var ogt=s(jpe);Hrr=r(ogt,"albert"),ogt.forEach(t),Urr=r(ZLe," \u2014 "),WO=n(ZLe,"A",{href:!0});var rgt=s(WO);Jrr=r(rgt,"TFAlbertForPreTraining"),rgt.forEach(t),Yrr=r(ZLe," (ALBERT model)"),ZLe.forEach(t),Krr=i(U),cv=n(U,"LI",{});var e8e=s(cv);Dpe=n(e8e,"STRONG",{});var tgt=s(Dpe);Zrr=r(tgt,"bart"),tgt.forEach(t),etr=r(e8e," \u2014 "),HO=n(e8e,"A",{href:!0});var agt=s(HO);otr=r(agt,"TFBartForConditionalGeneration"),agt.forEach(t),rtr=r(e8e," (BART model)"),e8e.forEach(t),ttr=i(U),fv=n(U,"LI",{});var o8e=s(fv);Gpe=n(o8e,"STRONG",{});var ngt=s(Gpe);atr=r(ngt,"bert"),ngt.forEach(t),ntr=r(o8e," \u2014 "),UO=n(o8e,"A",{href:!0});var sgt=s(UO);str=r(sgt,"TFBertForPreTraining"),sgt.forEach(t),ltr=r(o8e," (BERT model)"),o8e.forEach(t),itr=i(U),mv=n(U,"LI",{});var r8e=s(mv);Ope=n(r8e,"STRONG",{});var lgt=s(Ope);dtr=r(lgt,"camembert"),lgt.forEach(t),ctr=r(r8e," \u2014 "),JO=n(r8e,"A",{href:!0});var igt=s(JO);ftr=r(igt,"TFCamembertForMaskedLM"),igt.forEach(t),mtr=r(r8e," (CamemBERT model)"),r8e.forEach(t),gtr=i(U),gv=n(U,"LI",{});var t8e=s(gv);Vpe=n(t8e,"STRONG",{});var dgt=s(Vpe);htr=r(dgt,"ctrl"),dgt.forEach(t),ptr=r(t8e," \u2014 "),YO=n(t8e,"A",{href:!0});var cgt=s(YO);_tr=r(cgt,"TFCTRLLMHeadModel"),cgt.forEach(t),utr=r(t8e," (CTRL model)"),t8e.forEach(t),btr=i(U),hv=n(U,"LI",{});var a8e=s(hv);Xpe=n(a8e,"STRONG",{});var fgt=s(Xpe);Ftr=r(fgt,"distilbert"),fgt.forEach(t),vtr=r(a8e," \u2014 "),KO=n(a8e,"A",{href:!0});var mgt=s(KO);Ttr=r(mgt,"TFDistilBertForMaskedLM"),mgt.forEach(t),Mtr=r(a8e," (DistilBERT model)"),a8e.forEach(t),Etr=i(U),pv=n(U,"LI",{});var n8e=s(pv);zpe=n(n8e,"STRONG",{});var ggt=s(zpe);Ctr=r(ggt,"electra"),ggt.forEach(t),wtr=r(n8e," \u2014 "),ZO=n(n8e,"A",{href:!0});var hgt=s(ZO);Atr=r(hgt,"TFElectraForPreTraining"),hgt.forEach(t),ytr=r(n8e," (ELECTRA model)"),n8e.forEach(t),Ltr=i(U),_v=n(U,"LI",{});var s8e=s(_v);Qpe=n(s8e,"STRONG",{});var pgt=s(Qpe);xtr=r(pgt,"flaubert"),pgt.forEach(t),ktr=r(s8e," \u2014 "),eV=n(s8e,"A",{href:!0});var _gt=s(eV);Str=r(_gt,"TFFlaubertWithLMHeadModel"),_gt.forEach(t),Rtr=r(s8e," (FlauBERT model)"),s8e.forEach(t),Btr=i(U),uv=n(U,"LI",{});var l8e=s(uv);Wpe=n(l8e,"STRONG",{});var ugt=s(Wpe);Ptr=r(ugt,"funnel"),ugt.forEach(t),$tr=r(l8e," \u2014 "),oV=n(l8e,"A",{href:!0});var bgt=s(oV);Itr=r(bgt,"TFFunnelForPreTraining"),bgt.forEach(t),qtr=r(l8e," (Funnel Transformer model)"),l8e.forEach(t),Ntr=i(U),bv=n(U,"LI",{});var i8e=s(bv);Hpe=n(i8e,"STRONG",{});var Fgt=s(Hpe);jtr=r(Fgt,"gpt2"),Fgt.forEach(t),Dtr=r(i8e," \u2014 "),rV=n(i8e,"A",{href:!0});var vgt=s(rV);Gtr=r(vgt,"TFGPT2LMHeadModel"),vgt.forEach(t),Otr=r(i8e," (OpenAI GPT-2 model)"),i8e.forEach(t),Vtr=i(U),Fv=n(U,"LI",{});var d8e=s(Fv);Upe=n(d8e,"STRONG",{});var Tgt=s(Upe);Xtr=r(Tgt,"layoutlm"),Tgt.forEach(t),ztr=r(d8e," \u2014 "),tV=n(d8e,"A",{href:!0});var Mgt=s(tV);Qtr=r(Mgt,"TFLayoutLMForMaskedLM"),Mgt.forEach(t),Wtr=r(d8e," (LayoutLM model)"),d8e.forEach(t),Htr=i(U),vv=n(U,"LI",{});var c8e=s(vv);Jpe=n(c8e,"STRONG",{});var Egt=s(Jpe);Utr=r(Egt,"lxmert"),Egt.forEach(t),Jtr=r(c8e," \u2014 "),aV=n(c8e,"A",{href:!0});var Cgt=s(aV);Ytr=r(Cgt,"TFLxmertForPreTraining"),Cgt.forEach(t),Ktr=r(c8e," (LXMERT model)"),c8e.forEach(t),Ztr=i(U),Tv=n(U,"LI",{});var f8e=s(Tv);Ype=n(f8e,"STRONG",{});var wgt=s(Ype);ear=r(wgt,"mobilebert"),wgt.forEach(t),oar=r(f8e," \u2014 "),nV=n(f8e,"A",{href:!0});var Agt=s(nV);rar=r(Agt,"TFMobileBertForPreTraining"),Agt.forEach(t),tar=r(f8e," (MobileBERT model)"),f8e.forEach(t),aar=i(U),Mv=n(U,"LI",{});var m8e=s(Mv);Kpe=n(m8e,"STRONG",{});var ygt=s(Kpe);nar=r(ygt,"mpnet"),ygt.forEach(t),sar=r(m8e," \u2014 "),sV=n(m8e,"A",{href:!0});var Lgt=s(sV);lar=r(Lgt,"TFMPNetForMaskedLM"),Lgt.forEach(t),iar=r(m8e," (MPNet model)"),m8e.forEach(t),dar=i(U),Ev=n(U,"LI",{});var g8e=s(Ev);Zpe=n(g8e,"STRONG",{});var xgt=s(Zpe);car=r(xgt,"openai-gpt"),xgt.forEach(t),far=r(g8e," \u2014 "),lV=n(g8e,"A",{href:!0});var kgt=s(lV);mar=r(kgt,"TFOpenAIGPTLMHeadModel"),kgt.forEach(t),gar=r(g8e," (OpenAI GPT model)"),g8e.forEach(t),har=i(U),Cv=n(U,"LI",{});var h8e=s(Cv);e_e=n(h8e,"STRONG",{});var Sgt=s(e_e);par=r(Sgt,"roberta"),Sgt.forEach(t),_ar=r(h8e," \u2014 "),iV=n(h8e,"A",{href:!0});var Rgt=s(iV);uar=r(Rgt,"TFRobertaForMaskedLM"),Rgt.forEach(t),bar=r(h8e," (RoBERTa model)"),h8e.forEach(t),Far=i(U),wv=n(U,"LI",{});var p8e=s(wv);o_e=n(p8e,"STRONG",{});var Bgt=s(o_e);Tar=r(Bgt,"t5"),Bgt.forEach(t),Mar=r(p8e," \u2014 "),dV=n(p8e,"A",{href:!0});var Pgt=s(dV);Ear=r(Pgt,"TFT5ForConditionalGeneration"),Pgt.forEach(t),Car=r(p8e," (T5 model)"),p8e.forEach(t),war=i(U),Av=n(U,"LI",{});var _8e=s(Av);r_e=n(_8e,"STRONG",{});var $gt=s(r_e);Aar=r($gt,"tapas"),$gt.forEach(t),yar=r(_8e," \u2014 "),cV=n(_8e,"A",{href:!0});var Igt=s(cV);Lar=r(Igt,"TFTapasForMaskedLM"),Igt.forEach(t),xar=r(_8e," (TAPAS model)"),_8e.forEach(t),kar=i(U),yv=n(U,"LI",{});var u8e=s(yv);t_e=n(u8e,"STRONG",{});var qgt=s(t_e);Sar=r(qgt,"transfo-xl"),qgt.forEach(t),Rar=r(u8e," \u2014 "),fV=n(u8e,"A",{href:!0});var Ngt=s(fV);Bar=r(Ngt,"TFTransfoXLLMHeadModel"),Ngt.forEach(t),Par=r(u8e," (Transformer-XL model)"),u8e.forEach(t),$ar=i(U),Lv=n(U,"LI",{});var b8e=s(Lv);a_e=n(b8e,"STRONG",{});var jgt=s(a_e);Iar=r(jgt,"vit_mae"),jgt.forEach(t),qar=r(b8e," \u2014 "),mV=n(b8e,"A",{href:!0});var Dgt=s(mV);Nar=r(Dgt,"TFViTMAEForPreTraining"),Dgt.forEach(t),jar=r(b8e," (ViTMAE model)"),b8e.forEach(t),Dar=i(U),xv=n(U,"LI",{});var F8e=s(xv);n_e=n(F8e,"STRONG",{});var Ggt=s(n_e);Gar=r(Ggt,"xlm"),Ggt.forEach(t),Oar=r(F8e," \u2014 "),gV=n(F8e,"A",{href:!0});var Ogt=s(gV);Var=r(Ogt,"TFXLMWithLMHeadModel"),Ogt.forEach(t),Xar=r(F8e," (XLM model)"),F8e.forEach(t),zar=i(U),kv=n(U,"LI",{});var v8e=s(kv);s_e=n(v8e,"STRONG",{});var Vgt=s(s_e);Qar=r(Vgt,"xlm-roberta"),Vgt.forEach(t),War=r(v8e," \u2014 "),hV=n(v8e,"A",{href:!0});var Xgt=s(hV);Har=r(Xgt,"TFXLMRobertaForMaskedLM"),Xgt.forEach(t),Uar=r(v8e," (XLM-RoBERTa model)"),v8e.forEach(t),Jar=i(U),Sv=n(U,"LI",{});var T8e=s(Sv);l_e=n(T8e,"STRONG",{});var zgt=s(l_e);Yar=r(zgt,"xlnet"),zgt.forEach(t),Kar=r(T8e," \u2014 "),pV=n(T8e,"A",{href:!0});var Qgt=s(pV);Zar=r(Qgt,"TFXLNetLMHeadModel"),Qgt.forEach(t),enr=r(T8e," (XLNet model)"),T8e.forEach(t),U.forEach(t),onr=i(_a),i_e=n(_a,"P",{});var Wgt=s(i_e);rnr=r(Wgt,"Examples:"),Wgt.forEach(t),tnr=i(_a),m(i0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),QRe=i(c),Fc=n(c,"H2",{class:!0});var r$e=s(Fc);Rv=n(r$e,"A",{id:!0,class:!0,href:!0});var Hgt=s(Rv);d_e=n(Hgt,"SPAN",{});var Ugt=s(d_e);m(d0.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),anr=i(r$e),c_e=n(r$e,"SPAN",{});var Jgt=s(c_e);nnr=r(Jgt,"TFAutoModelForCausalLM"),Jgt.forEach(t),r$e.forEach(t),WRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(c0.$$.fragment,Vl),snr=i(Vl),vc=n(Vl,"P",{});var WU=s(vc);lnr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_V=n(WU,"A",{href:!0});var Ygt=s(_V);inr=r(Ygt,"from_pretrained()"),Ygt.forEach(t),dnr=r(WU," class method or the "),uV=n(WU,"A",{href:!0});var Kgt=s(uV);cnr=r(Kgt,"from_config()"),Kgt.forEach(t),fnr=r(WU,` class
method.`),WU.forEach(t),mnr=i(Vl),f0=n(Vl,"P",{});var t$e=s(f0);gnr=r(t$e,"This class cannot be instantiated directly using "),f_e=n(t$e,"CODE",{});var Zgt=s(f_e);hnr=r(Zgt,"__init__()"),Zgt.forEach(t),pnr=r(t$e," (throws an error)."),t$e.forEach(t),_nr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(m0.$$.fragment,Xl),unr=i(Xl),m_e=n(Xl,"P",{});var eht=s(m_e);bnr=r(eht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),eht.forEach(t),Fnr=i(Xl),Tc=n(Xl,"P",{});var HU=s(Tc);vnr=r(HU,`Note:
Loading a model from its configuration file does `),g_e=n(HU,"STRONG",{});var oht=s(g_e);Tnr=r(oht,"not"),oht.forEach(t),Mnr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=n(HU,"A",{href:!0});var rht=s(bV);Enr=r(rht,"from_pretrained()"),rht.forEach(t),Cnr=r(HU," to load the model weights."),HU.forEach(t),wnr=i(Xl),h_e=n(Xl,"P",{});var tht=s(h_e);Anr=r(tht,"Examples:"),tht.forEach(t),ynr=i(Xl),m(g0.$$.fragment,Xl),Xl.forEach(t),Lnr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(h0.$$.fragment,ua),xnr=i(ua),p_e=n(ua,"P",{});var aht=s(p_e);knr=r(aht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),aht.forEach(t),Snr=i(ua),bn=n(ua,"P",{});var Q4=s(bn);Rnr=r(Q4,"The model class to instantiate is selected based on the "),__e=n(Q4,"CODE",{});var nht=s(__e);Bnr=r(nht,"model_type"),nht.forEach(t),Pnr=r(Q4,` property of the config object (either
passed as an argument or loaded from `),u_e=n(Q4,"CODE",{});var sht=s(u_e);$nr=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),Inr=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b_e=n(Q4,"CODE",{});var lht=s(b_e);qnr=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),Nnr=r(Q4,":"),Q4.forEach(t),jnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);Bv=n(he,"LI",{});var M8e=s(Bv);F_e=n(M8e,"STRONG",{});var iht=s(F_e);Dnr=r(iht,"bert"),iht.forEach(t),Gnr=r(M8e," \u2014 "),FV=n(M8e,"A",{href:!0});var dht=s(FV);Onr=r(dht,"TFBertLMHeadModel"),dht.forEach(t),Vnr=r(M8e," (BERT model)"),M8e.forEach(t),Xnr=i(he),Pv=n(he,"LI",{});var E8e=s(Pv);v_e=n(E8e,"STRONG",{});var cht=s(v_e);znr=r(cht,"camembert"),cht.forEach(t),Qnr=r(E8e," \u2014 "),vV=n(E8e,"A",{href:!0});var fht=s(vV);Wnr=r(fht,"TFCamembertForCausalLM"),fht.forEach(t),Hnr=r(E8e," (CamemBERT model)"),E8e.forEach(t),Unr=i(he),$v=n(he,"LI",{});var C8e=s($v);T_e=n(C8e,"STRONG",{});var mht=s(T_e);Jnr=r(mht,"ctrl"),mht.forEach(t),Ynr=r(C8e," \u2014 "),TV=n(C8e,"A",{href:!0});var ght=s(TV);Knr=r(ght,"TFCTRLLMHeadModel"),ght.forEach(t),Znr=r(C8e," (CTRL model)"),C8e.forEach(t),esr=i(he),Iv=n(he,"LI",{});var w8e=s(Iv);M_e=n(w8e,"STRONG",{});var hht=s(M_e);osr=r(hht,"gpt2"),hht.forEach(t),rsr=r(w8e," \u2014 "),MV=n(w8e,"A",{href:!0});var pht=s(MV);tsr=r(pht,"TFGPT2LMHeadModel"),pht.forEach(t),asr=r(w8e," (OpenAI GPT-2 model)"),w8e.forEach(t),nsr=i(he),qv=n(he,"LI",{});var A8e=s(qv);E_e=n(A8e,"STRONG",{});var _ht=s(E_e);ssr=r(_ht,"gptj"),_ht.forEach(t),lsr=r(A8e," \u2014 "),EV=n(A8e,"A",{href:!0});var uht=s(EV);isr=r(uht,"TFGPTJForCausalLM"),uht.forEach(t),dsr=r(A8e," (GPT-J model)"),A8e.forEach(t),csr=i(he),Nv=n(he,"LI",{});var y8e=s(Nv);C_e=n(y8e,"STRONG",{});var bht=s(C_e);fsr=r(bht,"openai-gpt"),bht.forEach(t),msr=r(y8e," \u2014 "),CV=n(y8e,"A",{href:!0});var Fht=s(CV);gsr=r(Fht,"TFOpenAIGPTLMHeadModel"),Fht.forEach(t),hsr=r(y8e," (OpenAI GPT model)"),y8e.forEach(t),psr=i(he),jv=n(he,"LI",{});var L8e=s(jv);w_e=n(L8e,"STRONG",{});var vht=s(w_e);_sr=r(vht,"rembert"),vht.forEach(t),usr=r(L8e," \u2014 "),wV=n(L8e,"A",{href:!0});var Tht=s(wV);bsr=r(Tht,"TFRemBertForCausalLM"),Tht.forEach(t),Fsr=r(L8e," (RemBERT model)"),L8e.forEach(t),vsr=i(he),Dv=n(he,"LI",{});var x8e=s(Dv);A_e=n(x8e,"STRONG",{});var Mht=s(A_e);Tsr=r(Mht,"roberta"),Mht.forEach(t),Msr=r(x8e," \u2014 "),AV=n(x8e,"A",{href:!0});var Eht=s(AV);Esr=r(Eht,"TFRobertaForCausalLM"),Eht.forEach(t),Csr=r(x8e," (RoBERTa model)"),x8e.forEach(t),wsr=i(he),Gv=n(he,"LI",{});var k8e=s(Gv);y_e=n(k8e,"STRONG",{});var Cht=s(y_e);Asr=r(Cht,"roformer"),Cht.forEach(t),ysr=r(k8e," \u2014 "),yV=n(k8e,"A",{href:!0});var wht=s(yV);Lsr=r(wht,"TFRoFormerForCausalLM"),wht.forEach(t),xsr=r(k8e," (RoFormer model)"),k8e.forEach(t),ksr=i(he),Ov=n(he,"LI",{});var S8e=s(Ov);L_e=n(S8e,"STRONG",{});var Aht=s(L_e);Ssr=r(Aht,"transfo-xl"),Aht.forEach(t),Rsr=r(S8e," \u2014 "),LV=n(S8e,"A",{href:!0});var yht=s(LV);Bsr=r(yht,"TFTransfoXLLMHeadModel"),yht.forEach(t),Psr=r(S8e," (Transformer-XL model)"),S8e.forEach(t),$sr=i(he),Vv=n(he,"LI",{});var R8e=s(Vv);x_e=n(R8e,"STRONG",{});var Lht=s(x_e);Isr=r(Lht,"xlm"),Lht.forEach(t),qsr=r(R8e," \u2014 "),xV=n(R8e,"A",{href:!0});var xht=s(xV);Nsr=r(xht,"TFXLMWithLMHeadModel"),xht.forEach(t),jsr=r(R8e," (XLM model)"),R8e.forEach(t),Dsr=i(he),Xv=n(he,"LI",{});var B8e=s(Xv);k_e=n(B8e,"STRONG",{});var kht=s(k_e);Gsr=r(kht,"xlnet"),kht.forEach(t),Osr=r(B8e," \u2014 "),kV=n(B8e,"A",{href:!0});var Sht=s(kV);Vsr=r(Sht,"TFXLNetLMHeadModel"),Sht.forEach(t),Xsr=r(B8e," (XLNet model)"),B8e.forEach(t),he.forEach(t),zsr=i(ua),S_e=n(ua,"P",{});var Rht=s(S_e);Qsr=r(Rht,"Examples:"),Rht.forEach(t),Wsr=i(ua),m(p0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),HRe=i(c),Mc=n(c,"H2",{class:!0});var a$e=s(Mc);zv=n(a$e,"A",{id:!0,class:!0,href:!0});var Bht=s(zv);R_e=n(Bht,"SPAN",{});var Pht=s(R_e);m(_0.$$.fragment,Pht),Pht.forEach(t),Bht.forEach(t),Hsr=i(a$e),B_e=n(a$e,"SPAN",{});var $ht=s(B_e);Usr=r($ht,"TFAutoModelForImageClassification"),$ht.forEach(t),a$e.forEach(t),URe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(u0.$$.fragment,zl),Jsr=i(zl),Ec=n(zl,"P",{});var UU=s(Ec);Ysr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),SV=n(UU,"A",{href:!0});var Iht=s(SV);Ksr=r(Iht,"from_pretrained()"),Iht.forEach(t),Zsr=r(UU," class method or the "),RV=n(UU,"A",{href:!0});var qht=s(RV);elr=r(qht,"from_config()"),qht.forEach(t),olr=r(UU,` class
method.`),UU.forEach(t),rlr=i(zl),b0=n(zl,"P",{});var n$e=s(b0);tlr=r(n$e,"This class cannot be instantiated directly using "),P_e=n(n$e,"CODE",{});var Nht=s(P_e);alr=r(Nht,"__init__()"),Nht.forEach(t),nlr=r(n$e," (throws an error)."),n$e.forEach(t),slr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(F0.$$.fragment,Ql),llr=i(Ql),$_e=n(Ql,"P",{});var jht=s($_e);ilr=r(jht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jht.forEach(t),dlr=i(Ql),Cc=n(Ql,"P",{});var JU=s(Cc);clr=r(JU,`Note:
Loading a model from its configuration file does `),I_e=n(JU,"STRONG",{});var Dht=s(I_e);flr=r(Dht,"not"),Dht.forEach(t),mlr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(JU,"A",{href:!0});var Ght=s(BV);glr=r(Ght,"from_pretrained()"),Ght.forEach(t),hlr=r(JU," to load the model weights."),JU.forEach(t),plr=i(Ql),q_e=n(Ql,"P",{});var Oht=s(q_e);_lr=r(Oht,"Examples:"),Oht.forEach(t),ulr=i(Ql),m(v0.$$.fragment,Ql),Ql.forEach(t),blr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(T0.$$.fragment,ba),Flr=i(ba),N_e=n(ba,"P",{});var Vht=s(N_e);vlr=r(Vht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Vht.forEach(t),Tlr=i(ba),Fn=n(ba,"P",{});var W4=s(Fn);Mlr=r(W4,"The model class to instantiate is selected based on the "),j_e=n(W4,"CODE",{});var Xht=s(j_e);Elr=r(Xht,"model_type"),Xht.forEach(t),Clr=r(W4,` property of the config object (either
passed as an argument or loaded from `),D_e=n(W4,"CODE",{});var zht=s(D_e);wlr=r(zht,"pretrained_model_name_or_path"),zht.forEach(t),Alr=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G_e=n(W4,"CODE",{});var Qht=s(G_e);ylr=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),Llr=r(W4,":"),W4.forEach(t),xlr=i(ba),M0=n(ba,"UL",{});var s$e=s(M0);Qv=n(s$e,"LI",{});var P8e=s(Qv);O_e=n(P8e,"STRONG",{});var Wht=s(O_e);klr=r(Wht,"convnext"),Wht.forEach(t),Slr=r(P8e," \u2014 "),PV=n(P8e,"A",{href:!0});var Hht=s(PV);Rlr=r(Hht,"TFConvNextForImageClassification"),Hht.forEach(t),Blr=r(P8e," (ConvNext model)"),P8e.forEach(t),Plr=i(s$e),Wv=n(s$e,"LI",{});var $8e=s(Wv);V_e=n($8e,"STRONG",{});var Uht=s(V_e);$lr=r(Uht,"vit"),Uht.forEach(t),Ilr=r($8e," \u2014 "),$V=n($8e,"A",{href:!0});var Jht=s($V);qlr=r(Jht,"TFViTForImageClassification"),Jht.forEach(t),Nlr=r($8e," (ViT model)"),$8e.forEach(t),s$e.forEach(t),jlr=i(ba),X_e=n(ba,"P",{});var Yht=s(X_e);Dlr=r(Yht,"Examples:"),Yht.forEach(t),Glr=i(ba),m(E0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),JRe=i(c),wc=n(c,"H2",{class:!0});var l$e=s(wc);Hv=n(l$e,"A",{id:!0,class:!0,href:!0});var Kht=s(Hv);z_e=n(Kht,"SPAN",{});var Zht=s(z_e);m(C0.$$.fragment,Zht),Zht.forEach(t),Kht.forEach(t),Olr=i(l$e),Q_e=n(l$e,"SPAN",{});var ept=s(Q_e);Vlr=r(ept,"TFAutoModelForMaskedLM"),ept.forEach(t),l$e.forEach(t),YRe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(w0.$$.fragment,Wl),Xlr=i(Wl),Ac=n(Wl,"P",{});var YU=s(Ac);zlr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),IV=n(YU,"A",{href:!0});var opt=s(IV);Qlr=r(opt,"from_pretrained()"),opt.forEach(t),Wlr=r(YU," class method or the "),qV=n(YU,"A",{href:!0});var rpt=s(qV);Hlr=r(rpt,"from_config()"),rpt.forEach(t),Ulr=r(YU,` class
method.`),YU.forEach(t),Jlr=i(Wl),A0=n(Wl,"P",{});var i$e=s(A0);Ylr=r(i$e,"This class cannot be instantiated directly using "),W_e=n(i$e,"CODE",{});var tpt=s(W_e);Klr=r(tpt,"__init__()"),tpt.forEach(t),Zlr=r(i$e," (throws an error)."),i$e.forEach(t),eir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(y0.$$.fragment,Hl),oir=i(Hl),H_e=n(Hl,"P",{});var apt=s(H_e);rir=r(apt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),apt.forEach(t),tir=i(Hl),yc=n(Hl,"P",{});var KU=s(yc);air=r(KU,`Note:
Loading a model from its configuration file does `),U_e=n(KU,"STRONG",{});var npt=s(U_e);nir=r(npt,"not"),npt.forEach(t),sir=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),NV=n(KU,"A",{href:!0});var spt=s(NV);lir=r(spt,"from_pretrained()"),spt.forEach(t),iir=r(KU," to load the model weights."),KU.forEach(t),dir=i(Hl),J_e=n(Hl,"P",{});var lpt=s(J_e);cir=r(lpt,"Examples:"),lpt.forEach(t),fir=i(Hl),m(L0.$$.fragment,Hl),Hl.forEach(t),mir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(x0.$$.fragment,Fa),gir=i(Fa),Y_e=n(Fa,"P",{});var ipt=s(Y_e);hir=r(ipt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ipt.forEach(t),pir=i(Fa),vn=n(Fa,"P",{});var H4=s(vn);_ir=r(H4,"The model class to instantiate is selected based on the "),K_e=n(H4,"CODE",{});var dpt=s(K_e);uir=r(dpt,"model_type"),dpt.forEach(t),bir=r(H4,` property of the config object (either
passed as an argument or loaded from `),Z_e=n(H4,"CODE",{});var cpt=s(Z_e);Fir=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),vir=r(H4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eue=n(H4,"CODE",{});var fpt=s(eue);Tir=r(fpt,"pretrained_model_name_or_path"),fpt.forEach(t),Mir=r(H4,":"),H4.forEach(t),Eir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);Uv=n(ee,"LI",{});var I8e=s(Uv);oue=n(I8e,"STRONG",{});var mpt=s(oue);Cir=r(mpt,"albert"),mpt.forEach(t),wir=r(I8e," \u2014 "),jV=n(I8e,"A",{href:!0});var gpt=s(jV);Air=r(gpt,"TFAlbertForMaskedLM"),gpt.forEach(t),yir=r(I8e," (ALBERT model)"),I8e.forEach(t),Lir=i(ee),Jv=n(ee,"LI",{});var q8e=s(Jv);rue=n(q8e,"STRONG",{});var hpt=s(rue);xir=r(hpt,"bert"),hpt.forEach(t),kir=r(q8e," \u2014 "),DV=n(q8e,"A",{href:!0});var ppt=s(DV);Sir=r(ppt,"TFBertForMaskedLM"),ppt.forEach(t),Rir=r(q8e," (BERT model)"),q8e.forEach(t),Bir=i(ee),Yv=n(ee,"LI",{});var N8e=s(Yv);tue=n(N8e,"STRONG",{});var _pt=s(tue);Pir=r(_pt,"camembert"),_pt.forEach(t),$ir=r(N8e," \u2014 "),GV=n(N8e,"A",{href:!0});var upt=s(GV);Iir=r(upt,"TFCamembertForMaskedLM"),upt.forEach(t),qir=r(N8e," (CamemBERT model)"),N8e.forEach(t),Nir=i(ee),Kv=n(ee,"LI",{});var j8e=s(Kv);aue=n(j8e,"STRONG",{});var bpt=s(aue);jir=r(bpt,"convbert"),bpt.forEach(t),Dir=r(j8e," \u2014 "),OV=n(j8e,"A",{href:!0});var Fpt=s(OV);Gir=r(Fpt,"TFConvBertForMaskedLM"),Fpt.forEach(t),Oir=r(j8e," (ConvBERT model)"),j8e.forEach(t),Vir=i(ee),Zv=n(ee,"LI",{});var D8e=s(Zv);nue=n(D8e,"STRONG",{});var vpt=s(nue);Xir=r(vpt,"deberta"),vpt.forEach(t),zir=r(D8e," \u2014 "),VV=n(D8e,"A",{href:!0});var Tpt=s(VV);Qir=r(Tpt,"TFDebertaForMaskedLM"),Tpt.forEach(t),Wir=r(D8e," (DeBERTa model)"),D8e.forEach(t),Hir=i(ee),e6=n(ee,"LI",{});var G8e=s(e6);sue=n(G8e,"STRONG",{});var Mpt=s(sue);Uir=r(Mpt,"deberta-v2"),Mpt.forEach(t),Jir=r(G8e," \u2014 "),XV=n(G8e,"A",{href:!0});var Ept=s(XV);Yir=r(Ept,"TFDebertaV2ForMaskedLM"),Ept.forEach(t),Kir=r(G8e," (DeBERTa-v2 model)"),G8e.forEach(t),Zir=i(ee),o6=n(ee,"LI",{});var O8e=s(o6);lue=n(O8e,"STRONG",{});var Cpt=s(lue);edr=r(Cpt,"distilbert"),Cpt.forEach(t),odr=r(O8e," \u2014 "),zV=n(O8e,"A",{href:!0});var wpt=s(zV);rdr=r(wpt,"TFDistilBertForMaskedLM"),wpt.forEach(t),tdr=r(O8e," (DistilBERT model)"),O8e.forEach(t),adr=i(ee),r6=n(ee,"LI",{});var V8e=s(r6);iue=n(V8e,"STRONG",{});var Apt=s(iue);ndr=r(Apt,"electra"),Apt.forEach(t),sdr=r(V8e," \u2014 "),QV=n(V8e,"A",{href:!0});var ypt=s(QV);ldr=r(ypt,"TFElectraForMaskedLM"),ypt.forEach(t),idr=r(V8e," (ELECTRA model)"),V8e.forEach(t),ddr=i(ee),t6=n(ee,"LI",{});var X8e=s(t6);due=n(X8e,"STRONG",{});var Lpt=s(due);cdr=r(Lpt,"flaubert"),Lpt.forEach(t),fdr=r(X8e," \u2014 "),WV=n(X8e,"A",{href:!0});var xpt=s(WV);mdr=r(xpt,"TFFlaubertWithLMHeadModel"),xpt.forEach(t),gdr=r(X8e," (FlauBERT model)"),X8e.forEach(t),hdr=i(ee),a6=n(ee,"LI",{});var z8e=s(a6);cue=n(z8e,"STRONG",{});var kpt=s(cue);pdr=r(kpt,"funnel"),kpt.forEach(t),_dr=r(z8e," \u2014 "),HV=n(z8e,"A",{href:!0});var Spt=s(HV);udr=r(Spt,"TFFunnelForMaskedLM"),Spt.forEach(t),bdr=r(z8e," (Funnel Transformer model)"),z8e.forEach(t),Fdr=i(ee),n6=n(ee,"LI",{});var Q8e=s(n6);fue=n(Q8e,"STRONG",{});var Rpt=s(fue);vdr=r(Rpt,"layoutlm"),Rpt.forEach(t),Tdr=r(Q8e," \u2014 "),UV=n(Q8e,"A",{href:!0});var Bpt=s(UV);Mdr=r(Bpt,"TFLayoutLMForMaskedLM"),Bpt.forEach(t),Edr=r(Q8e," (LayoutLM model)"),Q8e.forEach(t),Cdr=i(ee),s6=n(ee,"LI",{});var W8e=s(s6);mue=n(W8e,"STRONG",{});var Ppt=s(mue);wdr=r(Ppt,"longformer"),Ppt.forEach(t),Adr=r(W8e," \u2014 "),JV=n(W8e,"A",{href:!0});var $pt=s(JV);ydr=r($pt,"TFLongformerForMaskedLM"),$pt.forEach(t),Ldr=r(W8e," (Longformer model)"),W8e.forEach(t),xdr=i(ee),l6=n(ee,"LI",{});var H8e=s(l6);gue=n(H8e,"STRONG",{});var Ipt=s(gue);kdr=r(Ipt,"mobilebert"),Ipt.forEach(t),Sdr=r(H8e," \u2014 "),YV=n(H8e,"A",{href:!0});var qpt=s(YV);Rdr=r(qpt,"TFMobileBertForMaskedLM"),qpt.forEach(t),Bdr=r(H8e," (MobileBERT model)"),H8e.forEach(t),Pdr=i(ee),i6=n(ee,"LI",{});var U8e=s(i6);hue=n(U8e,"STRONG",{});var Npt=s(hue);$dr=r(Npt,"mpnet"),Npt.forEach(t),Idr=r(U8e," \u2014 "),KV=n(U8e,"A",{href:!0});var jpt=s(KV);qdr=r(jpt,"TFMPNetForMaskedLM"),jpt.forEach(t),Ndr=r(U8e," (MPNet model)"),U8e.forEach(t),jdr=i(ee),d6=n(ee,"LI",{});var J8e=s(d6);pue=n(J8e,"STRONG",{});var Dpt=s(pue);Ddr=r(Dpt,"rembert"),Dpt.forEach(t),Gdr=r(J8e," \u2014 "),ZV=n(J8e,"A",{href:!0});var Gpt=s(ZV);Odr=r(Gpt,"TFRemBertForMaskedLM"),Gpt.forEach(t),Vdr=r(J8e," (RemBERT model)"),J8e.forEach(t),Xdr=i(ee),c6=n(ee,"LI",{});var Y8e=s(c6);_ue=n(Y8e,"STRONG",{});var Opt=s(_ue);zdr=r(Opt,"roberta"),Opt.forEach(t),Qdr=r(Y8e," \u2014 "),eX=n(Y8e,"A",{href:!0});var Vpt=s(eX);Wdr=r(Vpt,"TFRobertaForMaskedLM"),Vpt.forEach(t),Hdr=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),Udr=i(ee),f6=n(ee,"LI",{});var K8e=s(f6);uue=n(K8e,"STRONG",{});var Xpt=s(uue);Jdr=r(Xpt,"roformer"),Xpt.forEach(t),Ydr=r(K8e," \u2014 "),oX=n(K8e,"A",{href:!0});var zpt=s(oX);Kdr=r(zpt,"TFRoFormerForMaskedLM"),zpt.forEach(t),Zdr=r(K8e," (RoFormer model)"),K8e.forEach(t),ecr=i(ee),m6=n(ee,"LI",{});var Z8e=s(m6);bue=n(Z8e,"STRONG",{});var Qpt=s(bue);ocr=r(Qpt,"tapas"),Qpt.forEach(t),rcr=r(Z8e," \u2014 "),rX=n(Z8e,"A",{href:!0});var Wpt=s(rX);tcr=r(Wpt,"TFTapasForMaskedLM"),Wpt.forEach(t),acr=r(Z8e," (TAPAS model)"),Z8e.forEach(t),ncr=i(ee),g6=n(ee,"LI",{});var e9e=s(g6);Fue=n(e9e,"STRONG",{});var Hpt=s(Fue);scr=r(Hpt,"xlm"),Hpt.forEach(t),lcr=r(e9e," \u2014 "),tX=n(e9e,"A",{href:!0});var Upt=s(tX);icr=r(Upt,"TFXLMWithLMHeadModel"),Upt.forEach(t),dcr=r(e9e," (XLM model)"),e9e.forEach(t),ccr=i(ee),h6=n(ee,"LI",{});var o9e=s(h6);vue=n(o9e,"STRONG",{});var Jpt=s(vue);fcr=r(Jpt,"xlm-roberta"),Jpt.forEach(t),mcr=r(o9e," \u2014 "),aX=n(o9e,"A",{href:!0});var Ypt=s(aX);gcr=r(Ypt,"TFXLMRobertaForMaskedLM"),Ypt.forEach(t),hcr=r(o9e," (XLM-RoBERTa model)"),o9e.forEach(t),ee.forEach(t),pcr=i(Fa),Tue=n(Fa,"P",{});var Kpt=s(Tue);_cr=r(Kpt,"Examples:"),Kpt.forEach(t),ucr=i(Fa),m(k0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),KRe=i(c),Lc=n(c,"H2",{class:!0});var d$e=s(Lc);p6=n(d$e,"A",{id:!0,class:!0,href:!0});var Zpt=s(p6);Mue=n(Zpt,"SPAN",{});var e_t=s(Mue);m(S0.$$.fragment,e_t),e_t.forEach(t),Zpt.forEach(t),bcr=i(d$e),Eue=n(d$e,"SPAN",{});var o_t=s(Eue);Fcr=r(o_t,"TFAutoModelForSeq2SeqLM"),o_t.forEach(t),d$e.forEach(t),ZRe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(R0.$$.fragment,Ul),vcr=i(Ul),xc=n(Ul,"P",{});var ZU=s(xc);Tcr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nX=n(ZU,"A",{href:!0});var r_t=s(nX);Mcr=r(r_t,"from_pretrained()"),r_t.forEach(t),Ecr=r(ZU," class method or the "),sX=n(ZU,"A",{href:!0});var t_t=s(sX);Ccr=r(t_t,"from_config()"),t_t.forEach(t),wcr=r(ZU,` class
method.`),ZU.forEach(t),Acr=i(Ul),B0=n(Ul,"P",{});var c$e=s(B0);ycr=r(c$e,"This class cannot be instantiated directly using "),Cue=n(c$e,"CODE",{});var a_t=s(Cue);Lcr=r(a_t,"__init__()"),a_t.forEach(t),xcr=r(c$e," (throws an error)."),c$e.forEach(t),kcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(P0.$$.fragment,Jl),Scr=i(Jl),wue=n(Jl,"P",{});var n_t=s(wue);Rcr=r(n_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n_t.forEach(t),Bcr=i(Jl),kc=n(Jl,"P",{});var eJ=s(kc);Pcr=r(eJ,`Note:
Loading a model from its configuration file does `),Aue=n(eJ,"STRONG",{});var s_t=s(Aue);$cr=r(s_t,"not"),s_t.forEach(t),Icr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lX=n(eJ,"A",{href:!0});var l_t=s(lX);qcr=r(l_t,"from_pretrained()"),l_t.forEach(t),Ncr=r(eJ," to load the model weights."),eJ.forEach(t),jcr=i(Jl),yue=n(Jl,"P",{});var i_t=s(yue);Dcr=r(i_t,"Examples:"),i_t.forEach(t),Gcr=i(Jl),m($0.$$.fragment,Jl),Jl.forEach(t),Ocr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(I0.$$.fragment,va),Vcr=i(va),Lue=n(va,"P",{});var d_t=s(Lue);Xcr=r(d_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d_t.forEach(t),zcr=i(va),Tn=n(va,"P",{});var U4=s(Tn);Qcr=r(U4,"The model class to instantiate is selected based on the "),xue=n(U4,"CODE",{});var c_t=s(xue);Wcr=r(c_t,"model_type"),c_t.forEach(t),Hcr=r(U4,` property of the config object (either
passed as an argument or loaded from `),kue=n(U4,"CODE",{});var f_t=s(kue);Ucr=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),Jcr=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(U4,"CODE",{});var m_t=s(Sue);Ycr=r(m_t,"pretrained_model_name_or_path"),m_t.forEach(t),Kcr=r(U4,":"),U4.forEach(t),Zcr=i(va),ue=n(va,"UL",{});var we=s(ue);_6=n(we,"LI",{});var r9e=s(_6);Rue=n(r9e,"STRONG",{});var g_t=s(Rue);efr=r(g_t,"bart"),g_t.forEach(t),ofr=r(r9e," \u2014 "),iX=n(r9e,"A",{href:!0});var h_t=s(iX);rfr=r(h_t,"TFBartForConditionalGeneration"),h_t.forEach(t),tfr=r(r9e," (BART model)"),r9e.forEach(t),afr=i(we),u6=n(we,"LI",{});var t9e=s(u6);Bue=n(t9e,"STRONG",{});var p_t=s(Bue);nfr=r(p_t,"blenderbot"),p_t.forEach(t),sfr=r(t9e," \u2014 "),dX=n(t9e,"A",{href:!0});var __t=s(dX);lfr=r(__t,"TFBlenderbotForConditionalGeneration"),__t.forEach(t),ifr=r(t9e," (Blenderbot model)"),t9e.forEach(t),dfr=i(we),b6=n(we,"LI",{});var a9e=s(b6);Pue=n(a9e,"STRONG",{});var u_t=s(Pue);cfr=r(u_t,"blenderbot-small"),u_t.forEach(t),ffr=r(a9e," \u2014 "),cX=n(a9e,"A",{href:!0});var b_t=s(cX);mfr=r(b_t,"TFBlenderbotSmallForConditionalGeneration"),b_t.forEach(t),gfr=r(a9e," (BlenderbotSmall model)"),a9e.forEach(t),hfr=i(we),F6=n(we,"LI",{});var n9e=s(F6);$ue=n(n9e,"STRONG",{});var F_t=s($ue);pfr=r(F_t,"encoder-decoder"),F_t.forEach(t),_fr=r(n9e," \u2014 "),fX=n(n9e,"A",{href:!0});var v_t=s(fX);ufr=r(v_t,"TFEncoderDecoderModel"),v_t.forEach(t),bfr=r(n9e," (Encoder decoder model)"),n9e.forEach(t),Ffr=i(we),v6=n(we,"LI",{});var s9e=s(v6);Iue=n(s9e,"STRONG",{});var T_t=s(Iue);vfr=r(T_t,"led"),T_t.forEach(t),Tfr=r(s9e," \u2014 "),mX=n(s9e,"A",{href:!0});var M_t=s(mX);Mfr=r(M_t,"TFLEDForConditionalGeneration"),M_t.forEach(t),Efr=r(s9e," (LED model)"),s9e.forEach(t),Cfr=i(we),T6=n(we,"LI",{});var l9e=s(T6);que=n(l9e,"STRONG",{});var E_t=s(que);wfr=r(E_t,"marian"),E_t.forEach(t),Afr=r(l9e," \u2014 "),gX=n(l9e,"A",{href:!0});var C_t=s(gX);yfr=r(C_t,"TFMarianMTModel"),C_t.forEach(t),Lfr=r(l9e," (Marian model)"),l9e.forEach(t),xfr=i(we),M6=n(we,"LI",{});var i9e=s(M6);Nue=n(i9e,"STRONG",{});var w_t=s(Nue);kfr=r(w_t,"mbart"),w_t.forEach(t),Sfr=r(i9e," \u2014 "),hX=n(i9e,"A",{href:!0});var A_t=s(hX);Rfr=r(A_t,"TFMBartForConditionalGeneration"),A_t.forEach(t),Bfr=r(i9e," (mBART model)"),i9e.forEach(t),Pfr=i(we),E6=n(we,"LI",{});var d9e=s(E6);jue=n(d9e,"STRONG",{});var y_t=s(jue);$fr=r(y_t,"mt5"),y_t.forEach(t),Ifr=r(d9e," \u2014 "),pX=n(d9e,"A",{href:!0});var L_t=s(pX);qfr=r(L_t,"TFMT5ForConditionalGeneration"),L_t.forEach(t),Nfr=r(d9e," (mT5 model)"),d9e.forEach(t),jfr=i(we),C6=n(we,"LI",{});var c9e=s(C6);Due=n(c9e,"STRONG",{});var x_t=s(Due);Dfr=r(x_t,"pegasus"),x_t.forEach(t),Gfr=r(c9e," \u2014 "),_X=n(c9e,"A",{href:!0});var k_t=s(_X);Ofr=r(k_t,"TFPegasusForConditionalGeneration"),k_t.forEach(t),Vfr=r(c9e," (Pegasus model)"),c9e.forEach(t),Xfr=i(we),w6=n(we,"LI",{});var f9e=s(w6);Gue=n(f9e,"STRONG",{});var S_t=s(Gue);zfr=r(S_t,"t5"),S_t.forEach(t),Qfr=r(f9e," \u2014 "),uX=n(f9e,"A",{href:!0});var R_t=s(uX);Wfr=r(R_t,"TFT5ForConditionalGeneration"),R_t.forEach(t),Hfr=r(f9e," (T5 model)"),f9e.forEach(t),we.forEach(t),Ufr=i(va),Oue=n(va,"P",{});var B_t=s(Oue);Jfr=r(B_t,"Examples:"),B_t.forEach(t),Yfr=i(va),m(q0.$$.fragment,va),va.forEach(t),Ul.forEach(t),eBe=i(c),Sc=n(c,"H2",{class:!0});var f$e=s(Sc);A6=n(f$e,"A",{id:!0,class:!0,href:!0});var P_t=s(A6);Vue=n(P_t,"SPAN",{});var $_t=s(Vue);m(N0.$$.fragment,$_t),$_t.forEach(t),P_t.forEach(t),Kfr=i(f$e),Xue=n(f$e,"SPAN",{});var I_t=s(Xue);Zfr=r(I_t,"TFAutoModelForSequenceClassification"),I_t.forEach(t),f$e.forEach(t),oBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(j0.$$.fragment,Yl),emr=i(Yl),Rc=n(Yl,"P",{});var oJ=s(Rc);omr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bX=n(oJ,"A",{href:!0});var q_t=s(bX);rmr=r(q_t,"from_pretrained()"),q_t.forEach(t),tmr=r(oJ," class method or the "),FX=n(oJ,"A",{href:!0});var N_t=s(FX);amr=r(N_t,"from_config()"),N_t.forEach(t),nmr=r(oJ,` class
method.`),oJ.forEach(t),smr=i(Yl),D0=n(Yl,"P",{});var m$e=s(D0);lmr=r(m$e,"This class cannot be instantiated directly using "),zue=n(m$e,"CODE",{});var j_t=s(zue);imr=r(j_t,"__init__()"),j_t.forEach(t),dmr=r(m$e," (throws an error)."),m$e.forEach(t),cmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(G0.$$.fragment,Kl),fmr=i(Kl),Que=n(Kl,"P",{});var D_t=s(Que);mmr=r(D_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),D_t.forEach(t),gmr=i(Kl),Bc=n(Kl,"P",{});var rJ=s(Bc);hmr=r(rJ,`Note:
Loading a model from its configuration file does `),Wue=n(rJ,"STRONG",{});var G_t=s(Wue);pmr=r(G_t,"not"),G_t.forEach(t),_mr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(rJ,"A",{href:!0});var O_t=s(vX);umr=r(O_t,"from_pretrained()"),O_t.forEach(t),bmr=r(rJ," to load the model weights."),rJ.forEach(t),Fmr=i(Kl),Hue=n(Kl,"P",{});var V_t=s(Hue);vmr=r(V_t,"Examples:"),V_t.forEach(t),Tmr=i(Kl),m(O0.$$.fragment,Kl),Kl.forEach(t),Mmr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(V0.$$.fragment,Ta),Emr=i(Ta),Uue=n(Ta,"P",{});var X_t=s(Uue);Cmr=r(X_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X_t.forEach(t),wmr=i(Ta),Mn=n(Ta,"P",{});var J4=s(Mn);Amr=r(J4,"The model class to instantiate is selected based on the "),Jue=n(J4,"CODE",{});var z_t=s(Jue);ymr=r(z_t,"model_type"),z_t.forEach(t),Lmr=r(J4,` property of the config object (either
passed as an argument or loaded from `),Yue=n(J4,"CODE",{});var Q_t=s(Yue);xmr=r(Q_t,"pretrained_model_name_or_path"),Q_t.forEach(t),kmr=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(J4,"CODE",{});var W_t=s(Kue);Smr=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),Rmr=r(J4,":"),J4.forEach(t),Bmr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);y6=n(Q,"LI",{});var m9e=s(y6);Zue=n(m9e,"STRONG",{});var H_t=s(Zue);Pmr=r(H_t,"albert"),H_t.forEach(t),$mr=r(m9e," \u2014 "),TX=n(m9e,"A",{href:!0});var U_t=s(TX);Imr=r(U_t,"TFAlbertForSequenceClassification"),U_t.forEach(t),qmr=r(m9e," (ALBERT model)"),m9e.forEach(t),Nmr=i(Q),L6=n(Q,"LI",{});var g9e=s(L6);e1e=n(g9e,"STRONG",{});var J_t=s(e1e);jmr=r(J_t,"bert"),J_t.forEach(t),Dmr=r(g9e," \u2014 "),MX=n(g9e,"A",{href:!0});var Y_t=s(MX);Gmr=r(Y_t,"TFBertForSequenceClassification"),Y_t.forEach(t),Omr=r(g9e," (BERT model)"),g9e.forEach(t),Vmr=i(Q),x6=n(Q,"LI",{});var h9e=s(x6);o1e=n(h9e,"STRONG",{});var K_t=s(o1e);Xmr=r(K_t,"camembert"),K_t.forEach(t),zmr=r(h9e," \u2014 "),EX=n(h9e,"A",{href:!0});var Z_t=s(EX);Qmr=r(Z_t,"TFCamembertForSequenceClassification"),Z_t.forEach(t),Wmr=r(h9e," (CamemBERT model)"),h9e.forEach(t),Hmr=i(Q),k6=n(Q,"LI",{});var p9e=s(k6);r1e=n(p9e,"STRONG",{});var eut=s(r1e);Umr=r(eut,"convbert"),eut.forEach(t),Jmr=r(p9e," \u2014 "),CX=n(p9e,"A",{href:!0});var out=s(CX);Ymr=r(out,"TFConvBertForSequenceClassification"),out.forEach(t),Kmr=r(p9e," (ConvBERT model)"),p9e.forEach(t),Zmr=i(Q),S6=n(Q,"LI",{});var _9e=s(S6);t1e=n(_9e,"STRONG",{});var rut=s(t1e);egr=r(rut,"ctrl"),rut.forEach(t),ogr=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var tut=s(wX);rgr=r(tut,"TFCTRLForSequenceClassification"),tut.forEach(t),tgr=r(_9e," (CTRL model)"),_9e.forEach(t),agr=i(Q),R6=n(Q,"LI",{});var u9e=s(R6);a1e=n(u9e,"STRONG",{});var aut=s(a1e);ngr=r(aut,"deberta"),aut.forEach(t),sgr=r(u9e," \u2014 "),AX=n(u9e,"A",{href:!0});var nut=s(AX);lgr=r(nut,"TFDebertaForSequenceClassification"),nut.forEach(t),igr=r(u9e," (DeBERTa model)"),u9e.forEach(t),dgr=i(Q),B6=n(Q,"LI",{});var b9e=s(B6);n1e=n(b9e,"STRONG",{});var sut=s(n1e);cgr=r(sut,"deberta-v2"),sut.forEach(t),fgr=r(b9e," \u2014 "),yX=n(b9e,"A",{href:!0});var lut=s(yX);mgr=r(lut,"TFDebertaV2ForSequenceClassification"),lut.forEach(t),ggr=r(b9e," (DeBERTa-v2 model)"),b9e.forEach(t),hgr=i(Q),P6=n(Q,"LI",{});var F9e=s(P6);s1e=n(F9e,"STRONG",{});var iut=s(s1e);pgr=r(iut,"distilbert"),iut.forEach(t),_gr=r(F9e," \u2014 "),LX=n(F9e,"A",{href:!0});var dut=s(LX);ugr=r(dut,"TFDistilBertForSequenceClassification"),dut.forEach(t),bgr=r(F9e," (DistilBERT model)"),F9e.forEach(t),Fgr=i(Q),$6=n(Q,"LI",{});var v9e=s($6);l1e=n(v9e,"STRONG",{});var cut=s(l1e);vgr=r(cut,"electra"),cut.forEach(t),Tgr=r(v9e," \u2014 "),xX=n(v9e,"A",{href:!0});var fut=s(xX);Mgr=r(fut,"TFElectraForSequenceClassification"),fut.forEach(t),Egr=r(v9e," (ELECTRA model)"),v9e.forEach(t),Cgr=i(Q),I6=n(Q,"LI",{});var T9e=s(I6);i1e=n(T9e,"STRONG",{});var mut=s(i1e);wgr=r(mut,"flaubert"),mut.forEach(t),Agr=r(T9e," \u2014 "),kX=n(T9e,"A",{href:!0});var gut=s(kX);ygr=r(gut,"TFFlaubertForSequenceClassification"),gut.forEach(t),Lgr=r(T9e," (FlauBERT model)"),T9e.forEach(t),xgr=i(Q),q6=n(Q,"LI",{});var M9e=s(q6);d1e=n(M9e,"STRONG",{});var hut=s(d1e);kgr=r(hut,"funnel"),hut.forEach(t),Sgr=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var put=s(SX);Rgr=r(put,"TFFunnelForSequenceClassification"),put.forEach(t),Bgr=r(M9e," (Funnel Transformer model)"),M9e.forEach(t),Pgr=i(Q),N6=n(Q,"LI",{});var E9e=s(N6);c1e=n(E9e,"STRONG",{});var _ut=s(c1e);$gr=r(_ut,"gpt2"),_ut.forEach(t),Igr=r(E9e," \u2014 "),RX=n(E9e,"A",{href:!0});var uut=s(RX);qgr=r(uut,"TFGPT2ForSequenceClassification"),uut.forEach(t),Ngr=r(E9e," (OpenAI GPT-2 model)"),E9e.forEach(t),jgr=i(Q),j6=n(Q,"LI",{});var C9e=s(j6);f1e=n(C9e,"STRONG",{});var but=s(f1e);Dgr=r(but,"gptj"),but.forEach(t),Ggr=r(C9e," \u2014 "),BX=n(C9e,"A",{href:!0});var Fut=s(BX);Ogr=r(Fut,"TFGPTJForSequenceClassification"),Fut.forEach(t),Vgr=r(C9e," (GPT-J model)"),C9e.forEach(t),Xgr=i(Q),D6=n(Q,"LI",{});var w9e=s(D6);m1e=n(w9e,"STRONG",{});var vut=s(m1e);zgr=r(vut,"layoutlm"),vut.forEach(t),Qgr=r(w9e," \u2014 "),PX=n(w9e,"A",{href:!0});var Tut=s(PX);Wgr=r(Tut,"TFLayoutLMForSequenceClassification"),Tut.forEach(t),Hgr=r(w9e," (LayoutLM model)"),w9e.forEach(t),Ugr=i(Q),G6=n(Q,"LI",{});var A9e=s(G6);g1e=n(A9e,"STRONG",{});var Mut=s(g1e);Jgr=r(Mut,"longformer"),Mut.forEach(t),Ygr=r(A9e," \u2014 "),$X=n(A9e,"A",{href:!0});var Eut=s($X);Kgr=r(Eut,"TFLongformerForSequenceClassification"),Eut.forEach(t),Zgr=r(A9e," (Longformer model)"),A9e.forEach(t),ehr=i(Q),O6=n(Q,"LI",{});var y9e=s(O6);h1e=n(y9e,"STRONG",{});var Cut=s(h1e);ohr=r(Cut,"mobilebert"),Cut.forEach(t),rhr=r(y9e," \u2014 "),IX=n(y9e,"A",{href:!0});var wut=s(IX);thr=r(wut,"TFMobileBertForSequenceClassification"),wut.forEach(t),ahr=r(y9e," (MobileBERT model)"),y9e.forEach(t),nhr=i(Q),V6=n(Q,"LI",{});var L9e=s(V6);p1e=n(L9e,"STRONG",{});var Aut=s(p1e);shr=r(Aut,"mpnet"),Aut.forEach(t),lhr=r(L9e," \u2014 "),qX=n(L9e,"A",{href:!0});var yut=s(qX);ihr=r(yut,"TFMPNetForSequenceClassification"),yut.forEach(t),dhr=r(L9e," (MPNet model)"),L9e.forEach(t),chr=i(Q),X6=n(Q,"LI",{});var x9e=s(X6);_1e=n(x9e,"STRONG",{});var Lut=s(_1e);fhr=r(Lut,"openai-gpt"),Lut.forEach(t),mhr=r(x9e," \u2014 "),NX=n(x9e,"A",{href:!0});var xut=s(NX);ghr=r(xut,"TFOpenAIGPTForSequenceClassification"),xut.forEach(t),hhr=r(x9e," (OpenAI GPT model)"),x9e.forEach(t),phr=i(Q),z6=n(Q,"LI",{});var k9e=s(z6);u1e=n(k9e,"STRONG",{});var kut=s(u1e);_hr=r(kut,"rembert"),kut.forEach(t),uhr=r(k9e," \u2014 "),jX=n(k9e,"A",{href:!0});var Sut=s(jX);bhr=r(Sut,"TFRemBertForSequenceClassification"),Sut.forEach(t),Fhr=r(k9e," (RemBERT model)"),k9e.forEach(t),vhr=i(Q),Q6=n(Q,"LI",{});var S9e=s(Q6);b1e=n(S9e,"STRONG",{});var Rut=s(b1e);Thr=r(Rut,"roberta"),Rut.forEach(t),Mhr=r(S9e," \u2014 "),DX=n(S9e,"A",{href:!0});var But=s(DX);Ehr=r(But,"TFRobertaForSequenceClassification"),But.forEach(t),Chr=r(S9e," (RoBERTa model)"),S9e.forEach(t),whr=i(Q),W6=n(Q,"LI",{});var R9e=s(W6);F1e=n(R9e,"STRONG",{});var Put=s(F1e);Ahr=r(Put,"roformer"),Put.forEach(t),yhr=r(R9e," \u2014 "),GX=n(R9e,"A",{href:!0});var $ut=s(GX);Lhr=r($ut,"TFRoFormerForSequenceClassification"),$ut.forEach(t),xhr=r(R9e," (RoFormer model)"),R9e.forEach(t),khr=i(Q),H6=n(Q,"LI",{});var B9e=s(H6);v1e=n(B9e,"STRONG",{});var Iut=s(v1e);Shr=r(Iut,"tapas"),Iut.forEach(t),Rhr=r(B9e," \u2014 "),OX=n(B9e,"A",{href:!0});var qut=s(OX);Bhr=r(qut,"TFTapasForSequenceClassification"),qut.forEach(t),Phr=r(B9e," (TAPAS model)"),B9e.forEach(t),$hr=i(Q),U6=n(Q,"LI",{});var P9e=s(U6);T1e=n(P9e,"STRONG",{});var Nut=s(T1e);Ihr=r(Nut,"transfo-xl"),Nut.forEach(t),qhr=r(P9e," \u2014 "),VX=n(P9e,"A",{href:!0});var jut=s(VX);Nhr=r(jut,"TFTransfoXLForSequenceClassification"),jut.forEach(t),jhr=r(P9e," (Transformer-XL model)"),P9e.forEach(t),Dhr=i(Q),J6=n(Q,"LI",{});var $9e=s(J6);M1e=n($9e,"STRONG",{});var Dut=s(M1e);Ghr=r(Dut,"xlm"),Dut.forEach(t),Ohr=r($9e," \u2014 "),XX=n($9e,"A",{href:!0});var Gut=s(XX);Vhr=r(Gut,"TFXLMForSequenceClassification"),Gut.forEach(t),Xhr=r($9e," (XLM model)"),$9e.forEach(t),zhr=i(Q),Y6=n(Q,"LI",{});var I9e=s(Y6);E1e=n(I9e,"STRONG",{});var Out=s(E1e);Qhr=r(Out,"xlm-roberta"),Out.forEach(t),Whr=r(I9e," \u2014 "),zX=n(I9e,"A",{href:!0});var Vut=s(zX);Hhr=r(Vut,"TFXLMRobertaForSequenceClassification"),Vut.forEach(t),Uhr=r(I9e," (XLM-RoBERTa model)"),I9e.forEach(t),Jhr=i(Q),K6=n(Q,"LI",{});var q9e=s(K6);C1e=n(q9e,"STRONG",{});var Xut=s(C1e);Yhr=r(Xut,"xlnet"),Xut.forEach(t),Khr=r(q9e," \u2014 "),QX=n(q9e,"A",{href:!0});var zut=s(QX);Zhr=r(zut,"TFXLNetForSequenceClassification"),zut.forEach(t),epr=r(q9e," (XLNet model)"),q9e.forEach(t),Q.forEach(t),opr=i(Ta),w1e=n(Ta,"P",{});var Qut=s(w1e);rpr=r(Qut,"Examples:"),Qut.forEach(t),tpr=i(Ta),m(X0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),rBe=i(c),Pc=n(c,"H2",{class:!0});var g$e=s(Pc);Z6=n(g$e,"A",{id:!0,class:!0,href:!0});var Wut=s(Z6);A1e=n(Wut,"SPAN",{});var Hut=s(A1e);m(z0.$$.fragment,Hut),Hut.forEach(t),Wut.forEach(t),apr=i(g$e),y1e=n(g$e,"SPAN",{});var Uut=s(y1e);npr=r(Uut,"TFAutoModelForMultipleChoice"),Uut.forEach(t),g$e.forEach(t),tBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(Q0.$$.fragment,Zl),spr=i(Zl),$c=n(Zl,"P",{});var tJ=s($c);lpr=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WX=n(tJ,"A",{href:!0});var Jut=s(WX);ipr=r(Jut,"from_pretrained()"),Jut.forEach(t),dpr=r(tJ," class method or the "),HX=n(tJ,"A",{href:!0});var Yut=s(HX);cpr=r(Yut,"from_config()"),Yut.forEach(t),fpr=r(tJ,` class
method.`),tJ.forEach(t),mpr=i(Zl),W0=n(Zl,"P",{});var h$e=s(W0);gpr=r(h$e,"This class cannot be instantiated directly using "),L1e=n(h$e,"CODE",{});var Kut=s(L1e);hpr=r(Kut,"__init__()"),Kut.forEach(t),ppr=r(h$e," (throws an error)."),h$e.forEach(t),_pr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(H0.$$.fragment,ei),upr=i(ei),x1e=n(ei,"P",{});var Zut=s(x1e);bpr=r(Zut,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Zut.forEach(t),Fpr=i(ei),Ic=n(ei,"P",{});var aJ=s(Ic);vpr=r(aJ,`Note:
Loading a model from its configuration file does `),k1e=n(aJ,"STRONG",{});var e1t=s(k1e);Tpr=r(e1t,"not"),e1t.forEach(t),Mpr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(aJ,"A",{href:!0});var o1t=s(UX);Epr=r(o1t,"from_pretrained()"),o1t.forEach(t),Cpr=r(aJ," to load the model weights."),aJ.forEach(t),wpr=i(ei),S1e=n(ei,"P",{});var r1t=s(S1e);Apr=r(r1t,"Examples:"),r1t.forEach(t),ypr=i(ei),m(U0.$$.fragment,ei),ei.forEach(t),Lpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(J0.$$.fragment,Ma),xpr=i(Ma),R1e=n(Ma,"P",{});var t1t=s(R1e);kpr=r(t1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),t1t.forEach(t),Spr=i(Ma),En=n(Ma,"P",{});var Y4=s(En);Rpr=r(Y4,"The model class to instantiate is selected based on the "),B1e=n(Y4,"CODE",{});var a1t=s(B1e);Bpr=r(a1t,"model_type"),a1t.forEach(t),Ppr=r(Y4,` property of the config object (either
passed as an argument or loaded from `),P1e=n(Y4,"CODE",{});var n1t=s(P1e);$pr=r(n1t,"pretrained_model_name_or_path"),n1t.forEach(t),Ipr=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(Y4,"CODE",{});var s1t=s($1e);qpr=r(s1t,"pretrained_model_name_or_path"),s1t.forEach(t),Npr=r(Y4,":"),Y4.forEach(t),jpr=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);eT=n(le,"LI",{});var N9e=s(eT);I1e=n(N9e,"STRONG",{});var l1t=s(I1e);Dpr=r(l1t,"albert"),l1t.forEach(t),Gpr=r(N9e," \u2014 "),JX=n(N9e,"A",{href:!0});var i1t=s(JX);Opr=r(i1t,"TFAlbertForMultipleChoice"),i1t.forEach(t),Vpr=r(N9e," (ALBERT model)"),N9e.forEach(t),Xpr=i(le),oT=n(le,"LI",{});var j9e=s(oT);q1e=n(j9e,"STRONG",{});var d1t=s(q1e);zpr=r(d1t,"bert"),d1t.forEach(t),Qpr=r(j9e," \u2014 "),YX=n(j9e,"A",{href:!0});var c1t=s(YX);Wpr=r(c1t,"TFBertForMultipleChoice"),c1t.forEach(t),Hpr=r(j9e," (BERT model)"),j9e.forEach(t),Upr=i(le),rT=n(le,"LI",{});var D9e=s(rT);N1e=n(D9e,"STRONG",{});var f1t=s(N1e);Jpr=r(f1t,"camembert"),f1t.forEach(t),Ypr=r(D9e," \u2014 "),KX=n(D9e,"A",{href:!0});var m1t=s(KX);Kpr=r(m1t,"TFCamembertForMultipleChoice"),m1t.forEach(t),Zpr=r(D9e," (CamemBERT model)"),D9e.forEach(t),e_r=i(le),tT=n(le,"LI",{});var G9e=s(tT);j1e=n(G9e,"STRONG",{});var g1t=s(j1e);o_r=r(g1t,"convbert"),g1t.forEach(t),r_r=r(G9e," \u2014 "),ZX=n(G9e,"A",{href:!0});var h1t=s(ZX);t_r=r(h1t,"TFConvBertForMultipleChoice"),h1t.forEach(t),a_r=r(G9e," (ConvBERT model)"),G9e.forEach(t),n_r=i(le),aT=n(le,"LI",{});var O9e=s(aT);D1e=n(O9e,"STRONG",{});var p1t=s(D1e);s_r=r(p1t,"distilbert"),p1t.forEach(t),l_r=r(O9e," \u2014 "),ez=n(O9e,"A",{href:!0});var _1t=s(ez);i_r=r(_1t,"TFDistilBertForMultipleChoice"),_1t.forEach(t),d_r=r(O9e," (DistilBERT model)"),O9e.forEach(t),c_r=i(le),nT=n(le,"LI",{});var V9e=s(nT);G1e=n(V9e,"STRONG",{});var u1t=s(G1e);f_r=r(u1t,"electra"),u1t.forEach(t),m_r=r(V9e," \u2014 "),oz=n(V9e,"A",{href:!0});var b1t=s(oz);g_r=r(b1t,"TFElectraForMultipleChoice"),b1t.forEach(t),h_r=r(V9e," (ELECTRA model)"),V9e.forEach(t),p_r=i(le),sT=n(le,"LI",{});var X9e=s(sT);O1e=n(X9e,"STRONG",{});var F1t=s(O1e);__r=r(F1t,"flaubert"),F1t.forEach(t),u_r=r(X9e," \u2014 "),rz=n(X9e,"A",{href:!0});var v1t=s(rz);b_r=r(v1t,"TFFlaubertForMultipleChoice"),v1t.forEach(t),F_r=r(X9e," (FlauBERT model)"),X9e.forEach(t),v_r=i(le),lT=n(le,"LI",{});var z9e=s(lT);V1e=n(z9e,"STRONG",{});var T1t=s(V1e);T_r=r(T1t,"funnel"),T1t.forEach(t),M_r=r(z9e," \u2014 "),tz=n(z9e,"A",{href:!0});var M1t=s(tz);E_r=r(M1t,"TFFunnelForMultipleChoice"),M1t.forEach(t),C_r=r(z9e," (Funnel Transformer model)"),z9e.forEach(t),w_r=i(le),iT=n(le,"LI",{});var Q9e=s(iT);X1e=n(Q9e,"STRONG",{});var E1t=s(X1e);A_r=r(E1t,"longformer"),E1t.forEach(t),y_r=r(Q9e," \u2014 "),az=n(Q9e,"A",{href:!0});var C1t=s(az);L_r=r(C1t,"TFLongformerForMultipleChoice"),C1t.forEach(t),x_r=r(Q9e," (Longformer model)"),Q9e.forEach(t),k_r=i(le),dT=n(le,"LI",{});var W9e=s(dT);z1e=n(W9e,"STRONG",{});var w1t=s(z1e);S_r=r(w1t,"mobilebert"),w1t.forEach(t),R_r=r(W9e," \u2014 "),nz=n(W9e,"A",{href:!0});var A1t=s(nz);B_r=r(A1t,"TFMobileBertForMultipleChoice"),A1t.forEach(t),P_r=r(W9e," (MobileBERT model)"),W9e.forEach(t),$_r=i(le),cT=n(le,"LI",{});var H9e=s(cT);Q1e=n(H9e,"STRONG",{});var y1t=s(Q1e);I_r=r(y1t,"mpnet"),y1t.forEach(t),q_r=r(H9e," \u2014 "),sz=n(H9e,"A",{href:!0});var L1t=s(sz);N_r=r(L1t,"TFMPNetForMultipleChoice"),L1t.forEach(t),j_r=r(H9e," (MPNet model)"),H9e.forEach(t),D_r=i(le),fT=n(le,"LI",{});var U9e=s(fT);W1e=n(U9e,"STRONG",{});var x1t=s(W1e);G_r=r(x1t,"rembert"),x1t.forEach(t),O_r=r(U9e," \u2014 "),lz=n(U9e,"A",{href:!0});var k1t=s(lz);V_r=r(k1t,"TFRemBertForMultipleChoice"),k1t.forEach(t),X_r=r(U9e," (RemBERT model)"),U9e.forEach(t),z_r=i(le),mT=n(le,"LI",{});var J9e=s(mT);H1e=n(J9e,"STRONG",{});var S1t=s(H1e);Q_r=r(S1t,"roberta"),S1t.forEach(t),W_r=r(J9e," \u2014 "),iz=n(J9e,"A",{href:!0});var R1t=s(iz);H_r=r(R1t,"TFRobertaForMultipleChoice"),R1t.forEach(t),U_r=r(J9e," (RoBERTa model)"),J9e.forEach(t),J_r=i(le),gT=n(le,"LI",{});var Y9e=s(gT);U1e=n(Y9e,"STRONG",{});var B1t=s(U1e);Y_r=r(B1t,"roformer"),B1t.forEach(t),K_r=r(Y9e," \u2014 "),dz=n(Y9e,"A",{href:!0});var P1t=s(dz);Z_r=r(P1t,"TFRoFormerForMultipleChoice"),P1t.forEach(t),eur=r(Y9e," (RoFormer model)"),Y9e.forEach(t),our=i(le),hT=n(le,"LI",{});var K9e=s(hT);J1e=n(K9e,"STRONG",{});var $1t=s(J1e);rur=r($1t,"xlm"),$1t.forEach(t),tur=r(K9e," \u2014 "),cz=n(K9e,"A",{href:!0});var I1t=s(cz);aur=r(I1t,"TFXLMForMultipleChoice"),I1t.forEach(t),nur=r(K9e," (XLM model)"),K9e.forEach(t),sur=i(le),pT=n(le,"LI",{});var Z9e=s(pT);Y1e=n(Z9e,"STRONG",{});var q1t=s(Y1e);lur=r(q1t,"xlm-roberta"),q1t.forEach(t),iur=r(Z9e," \u2014 "),fz=n(Z9e,"A",{href:!0});var N1t=s(fz);dur=r(N1t,"TFXLMRobertaForMultipleChoice"),N1t.forEach(t),cur=r(Z9e," (XLM-RoBERTa model)"),Z9e.forEach(t),fur=i(le),_T=n(le,"LI",{});var exe=s(_T);K1e=n(exe,"STRONG",{});var j1t=s(K1e);mur=r(j1t,"xlnet"),j1t.forEach(t),gur=r(exe," \u2014 "),mz=n(exe,"A",{href:!0});var D1t=s(mz);hur=r(D1t,"TFXLNetForMultipleChoice"),D1t.forEach(t),pur=r(exe," (XLNet model)"),exe.forEach(t),le.forEach(t),_ur=i(Ma),Z1e=n(Ma,"P",{});var G1t=s(Z1e);uur=r(G1t,"Examples:"),G1t.forEach(t),bur=i(Ma),m(Y0.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),aBe=i(c),qc=n(c,"H2",{class:!0});var p$e=s(qc);uT=n(p$e,"A",{id:!0,class:!0,href:!0});var O1t=s(uT);ebe=n(O1t,"SPAN",{});var V1t=s(ebe);m(K0.$$.fragment,V1t),V1t.forEach(t),O1t.forEach(t),Fur=i(p$e),obe=n(p$e,"SPAN",{});var X1t=s(obe);vur=r(X1t,"TFAutoModelForTableQuestionAnswering"),X1t.forEach(t),p$e.forEach(t),nBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(Z0.$$.fragment,oi),Tur=i(oi),Nc=n(oi,"P",{});var nJ=s(Nc);Mur=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gz=n(nJ,"A",{href:!0});var z1t=s(gz);Eur=r(z1t,"from_pretrained()"),z1t.forEach(t),Cur=r(nJ," class method or the "),hz=n(nJ,"A",{href:!0});var Q1t=s(hz);wur=r(Q1t,"from_config()"),Q1t.forEach(t),Aur=r(nJ,` class
method.`),nJ.forEach(t),yur=i(oi),ey=n(oi,"P",{});var _$e=s(ey);Lur=r(_$e,"This class cannot be instantiated directly using "),rbe=n(_$e,"CODE",{});var W1t=s(rbe);xur=r(W1t,"__init__()"),W1t.forEach(t),kur=r(_$e," (throws an error)."),_$e.forEach(t),Sur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(oy.$$.fragment,ri),Rur=i(ri),tbe=n(ri,"P",{});var H1t=s(tbe);Bur=r(H1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),H1t.forEach(t),Pur=i(ri),jc=n(ri,"P",{});var sJ=s(jc);$ur=r(sJ,`Note:
Loading a model from its configuration file does `),abe=n(sJ,"STRONG",{});var U1t=s(abe);Iur=r(U1t,"not"),U1t.forEach(t),qur=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pz=n(sJ,"A",{href:!0});var J1t=s(pz);Nur=r(J1t,"from_pretrained()"),J1t.forEach(t),jur=r(sJ," to load the model weights."),sJ.forEach(t),Dur=i(ri),nbe=n(ri,"P",{});var Y1t=s(nbe);Gur=r(Y1t,"Examples:"),Y1t.forEach(t),Our=i(ri),m(ry.$$.fragment,ri),ri.forEach(t),Vur=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(ty.$$.fragment,Ea),Xur=i(Ea),sbe=n(Ea,"P",{});var K1t=s(sbe);zur=r(K1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),K1t.forEach(t),Qur=i(Ea),Cn=n(Ea,"P",{});var K4=s(Cn);Wur=r(K4,"The model class to instantiate is selected based on the "),lbe=n(K4,"CODE",{});var Z1t=s(lbe);Hur=r(Z1t,"model_type"),Z1t.forEach(t),Uur=r(K4,` property of the config object (either
passed as an argument or loaded from `),ibe=n(K4,"CODE",{});var ebt=s(ibe);Jur=r(ebt,"pretrained_model_name_or_path"),ebt.forEach(t),Yur=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(K4,"CODE",{});var obt=s(dbe);Kur=r(obt,"pretrained_model_name_or_path"),obt.forEach(t),Zur=r(K4,":"),K4.forEach(t),e1r=i(Ea),cbe=n(Ea,"UL",{});var rbt=s(cbe);bT=n(rbt,"LI",{});var oxe=s(bT);fbe=n(oxe,"STRONG",{});var tbt=s(fbe);o1r=r(tbt,"tapas"),tbt.forEach(t),r1r=r(oxe," \u2014 "),_z=n(oxe,"A",{href:!0});var abt=s(_z);t1r=r(abt,"TFTapasForQuestionAnswering"),abt.forEach(t),a1r=r(oxe," (TAPAS model)"),oxe.forEach(t),rbt.forEach(t),n1r=i(Ea),mbe=n(Ea,"P",{});var nbt=s(mbe);s1r=r(nbt,"Examples:"),nbt.forEach(t),l1r=i(Ea),m(ay.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),sBe=i(c),Dc=n(c,"H2",{class:!0});var u$e=s(Dc);FT=n(u$e,"A",{id:!0,class:!0,href:!0});var sbt=s(FT);gbe=n(sbt,"SPAN",{});var lbt=s(gbe);m(ny.$$.fragment,lbt),lbt.forEach(t),sbt.forEach(t),i1r=i(u$e),hbe=n(u$e,"SPAN",{});var ibt=s(hbe);d1r=r(ibt,"TFAutoModelForTokenClassification"),ibt.forEach(t),u$e.forEach(t),lBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(sy.$$.fragment,ti),c1r=i(ti),Gc=n(ti,"P",{});var lJ=s(Gc);f1r=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uz=n(lJ,"A",{href:!0});var dbt=s(uz);m1r=r(dbt,"from_pretrained()"),dbt.forEach(t),g1r=r(lJ," class method or the "),bz=n(lJ,"A",{href:!0});var cbt=s(bz);h1r=r(cbt,"from_config()"),cbt.forEach(t),p1r=r(lJ,` class
method.`),lJ.forEach(t),_1r=i(ti),ly=n(ti,"P",{});var b$e=s(ly);u1r=r(b$e,"This class cannot be instantiated directly using "),pbe=n(b$e,"CODE",{});var fbt=s(pbe);b1r=r(fbt,"__init__()"),fbt.forEach(t),F1r=r(b$e," (throws an error)."),b$e.forEach(t),v1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(iy.$$.fragment,ai),T1r=i(ai),_be=n(ai,"P",{});var mbt=s(_be);M1r=r(mbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mbt.forEach(t),E1r=i(ai),Oc=n(ai,"P",{});var iJ=s(Oc);C1r=r(iJ,`Note:
Loading a model from its configuration file does `),ube=n(iJ,"STRONG",{});var gbt=s(ube);w1r=r(gbt,"not"),gbt.forEach(t),A1r=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(iJ,"A",{href:!0});var hbt=s(Fz);y1r=r(hbt,"from_pretrained()"),hbt.forEach(t),L1r=r(iJ," to load the model weights."),iJ.forEach(t),x1r=i(ai),bbe=n(ai,"P",{});var pbt=s(bbe);k1r=r(pbt,"Examples:"),pbt.forEach(t),S1r=i(ai),m(dy.$$.fragment,ai),ai.forEach(t),R1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(cy.$$.fragment,Ca),B1r=i(Ca),Fbe=n(Ca,"P",{});var _bt=s(Fbe);P1r=r(_bt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_bt.forEach(t),$1r=i(Ca),wn=n(Ca,"P",{});var Z4=s(wn);I1r=r(Z4,"The model class to instantiate is selected based on the "),vbe=n(Z4,"CODE",{});var ubt=s(vbe);q1r=r(ubt,"model_type"),ubt.forEach(t),N1r=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Tbe=n(Z4,"CODE",{});var bbt=s(Tbe);j1r=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),D1r=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mbe=n(Z4,"CODE",{});var Fbt=s(Mbe);G1r=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),O1r=r(Z4,":"),Z4.forEach(t),V1r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);vT=n(oe,"LI",{});var rxe=s(vT);Ebe=n(rxe,"STRONG",{});var vbt=s(Ebe);X1r=r(vbt,"albert"),vbt.forEach(t),z1r=r(rxe," \u2014 "),vz=n(rxe,"A",{href:!0});var Tbt=s(vz);Q1r=r(Tbt,"TFAlbertForTokenClassification"),Tbt.forEach(t),W1r=r(rxe," (ALBERT model)"),rxe.forEach(t),H1r=i(oe),TT=n(oe,"LI",{});var txe=s(TT);Cbe=n(txe,"STRONG",{});var Mbt=s(Cbe);U1r=r(Mbt,"bert"),Mbt.forEach(t),J1r=r(txe," \u2014 "),Tz=n(txe,"A",{href:!0});var Ebt=s(Tz);Y1r=r(Ebt,"TFBertForTokenClassification"),Ebt.forEach(t),K1r=r(txe," (BERT model)"),txe.forEach(t),Z1r=i(oe),MT=n(oe,"LI",{});var axe=s(MT);wbe=n(axe,"STRONG",{});var Cbt=s(wbe);ebr=r(Cbt,"camembert"),Cbt.forEach(t),obr=r(axe," \u2014 "),Mz=n(axe,"A",{href:!0});var wbt=s(Mz);rbr=r(wbt,"TFCamembertForTokenClassification"),wbt.forEach(t),tbr=r(axe," (CamemBERT model)"),axe.forEach(t),abr=i(oe),ET=n(oe,"LI",{});var nxe=s(ET);Abe=n(nxe,"STRONG",{});var Abt=s(Abe);nbr=r(Abt,"convbert"),Abt.forEach(t),sbr=r(nxe," \u2014 "),Ez=n(nxe,"A",{href:!0});var ybt=s(Ez);lbr=r(ybt,"TFConvBertForTokenClassification"),ybt.forEach(t),ibr=r(nxe," (ConvBERT model)"),nxe.forEach(t),dbr=i(oe),CT=n(oe,"LI",{});var sxe=s(CT);ybe=n(sxe,"STRONG",{});var Lbt=s(ybe);cbr=r(Lbt,"deberta"),Lbt.forEach(t),fbr=r(sxe," \u2014 "),Cz=n(sxe,"A",{href:!0});var xbt=s(Cz);mbr=r(xbt,"TFDebertaForTokenClassification"),xbt.forEach(t),gbr=r(sxe," (DeBERTa model)"),sxe.forEach(t),hbr=i(oe),wT=n(oe,"LI",{});var lxe=s(wT);Lbe=n(lxe,"STRONG",{});var kbt=s(Lbe);pbr=r(kbt,"deberta-v2"),kbt.forEach(t),_br=r(lxe," \u2014 "),wz=n(lxe,"A",{href:!0});var Sbt=s(wz);ubr=r(Sbt,"TFDebertaV2ForTokenClassification"),Sbt.forEach(t),bbr=r(lxe," (DeBERTa-v2 model)"),lxe.forEach(t),Fbr=i(oe),AT=n(oe,"LI",{});var ixe=s(AT);xbe=n(ixe,"STRONG",{});var Rbt=s(xbe);vbr=r(Rbt,"distilbert"),Rbt.forEach(t),Tbr=r(ixe," \u2014 "),Az=n(ixe,"A",{href:!0});var Bbt=s(Az);Mbr=r(Bbt,"TFDistilBertForTokenClassification"),Bbt.forEach(t),Ebr=r(ixe," (DistilBERT model)"),ixe.forEach(t),Cbr=i(oe),yT=n(oe,"LI",{});var dxe=s(yT);kbe=n(dxe,"STRONG",{});var Pbt=s(kbe);wbr=r(Pbt,"electra"),Pbt.forEach(t),Abr=r(dxe," \u2014 "),yz=n(dxe,"A",{href:!0});var $bt=s(yz);ybr=r($bt,"TFElectraForTokenClassification"),$bt.forEach(t),Lbr=r(dxe," (ELECTRA model)"),dxe.forEach(t),xbr=i(oe),LT=n(oe,"LI",{});var cxe=s(LT);Sbe=n(cxe,"STRONG",{});var Ibt=s(Sbe);kbr=r(Ibt,"flaubert"),Ibt.forEach(t),Sbr=r(cxe," \u2014 "),Lz=n(cxe,"A",{href:!0});var qbt=s(Lz);Rbr=r(qbt,"TFFlaubertForTokenClassification"),qbt.forEach(t),Bbr=r(cxe," (FlauBERT model)"),cxe.forEach(t),Pbr=i(oe),xT=n(oe,"LI",{});var fxe=s(xT);Rbe=n(fxe,"STRONG",{});var Nbt=s(Rbe);$br=r(Nbt,"funnel"),Nbt.forEach(t),Ibr=r(fxe," \u2014 "),xz=n(fxe,"A",{href:!0});var jbt=s(xz);qbr=r(jbt,"TFFunnelForTokenClassification"),jbt.forEach(t),Nbr=r(fxe," (Funnel Transformer model)"),fxe.forEach(t),jbr=i(oe),kT=n(oe,"LI",{});var mxe=s(kT);Bbe=n(mxe,"STRONG",{});var Dbt=s(Bbe);Dbr=r(Dbt,"layoutlm"),Dbt.forEach(t),Gbr=r(mxe," \u2014 "),kz=n(mxe,"A",{href:!0});var Gbt=s(kz);Obr=r(Gbt,"TFLayoutLMForTokenClassification"),Gbt.forEach(t),Vbr=r(mxe," (LayoutLM model)"),mxe.forEach(t),Xbr=i(oe),ST=n(oe,"LI",{});var gxe=s(ST);Pbe=n(gxe,"STRONG",{});var Obt=s(Pbe);zbr=r(Obt,"longformer"),Obt.forEach(t),Qbr=r(gxe," \u2014 "),Sz=n(gxe,"A",{href:!0});var Vbt=s(Sz);Wbr=r(Vbt,"TFLongformerForTokenClassification"),Vbt.forEach(t),Hbr=r(gxe," (Longformer model)"),gxe.forEach(t),Ubr=i(oe),RT=n(oe,"LI",{});var hxe=s(RT);$be=n(hxe,"STRONG",{});var Xbt=s($be);Jbr=r(Xbt,"mobilebert"),Xbt.forEach(t),Ybr=r(hxe," \u2014 "),Rz=n(hxe,"A",{href:!0});var zbt=s(Rz);Kbr=r(zbt,"TFMobileBertForTokenClassification"),zbt.forEach(t),Zbr=r(hxe," (MobileBERT model)"),hxe.forEach(t),e5r=i(oe),BT=n(oe,"LI",{});var pxe=s(BT);Ibe=n(pxe,"STRONG",{});var Qbt=s(Ibe);o5r=r(Qbt,"mpnet"),Qbt.forEach(t),r5r=r(pxe," \u2014 "),Bz=n(pxe,"A",{href:!0});var Wbt=s(Bz);t5r=r(Wbt,"TFMPNetForTokenClassification"),Wbt.forEach(t),a5r=r(pxe," (MPNet model)"),pxe.forEach(t),n5r=i(oe),PT=n(oe,"LI",{});var _xe=s(PT);qbe=n(_xe,"STRONG",{});var Hbt=s(qbe);s5r=r(Hbt,"rembert"),Hbt.forEach(t),l5r=r(_xe," \u2014 "),Pz=n(_xe,"A",{href:!0});var Ubt=s(Pz);i5r=r(Ubt,"TFRemBertForTokenClassification"),Ubt.forEach(t),d5r=r(_xe," (RemBERT model)"),_xe.forEach(t),c5r=i(oe),$T=n(oe,"LI",{});var uxe=s($T);Nbe=n(uxe,"STRONG",{});var Jbt=s(Nbe);f5r=r(Jbt,"roberta"),Jbt.forEach(t),m5r=r(uxe," \u2014 "),$z=n(uxe,"A",{href:!0});var Ybt=s($z);g5r=r(Ybt,"TFRobertaForTokenClassification"),Ybt.forEach(t),h5r=r(uxe," (RoBERTa model)"),uxe.forEach(t),p5r=i(oe),IT=n(oe,"LI",{});var bxe=s(IT);jbe=n(bxe,"STRONG",{});var Kbt=s(jbe);_5r=r(Kbt,"roformer"),Kbt.forEach(t),u5r=r(bxe," \u2014 "),Iz=n(bxe,"A",{href:!0});var Zbt=s(Iz);b5r=r(Zbt,"TFRoFormerForTokenClassification"),Zbt.forEach(t),F5r=r(bxe," (RoFormer model)"),bxe.forEach(t),v5r=i(oe),qT=n(oe,"LI",{});var Fxe=s(qT);Dbe=n(Fxe,"STRONG",{});var e5t=s(Dbe);T5r=r(e5t,"xlm"),e5t.forEach(t),M5r=r(Fxe," \u2014 "),qz=n(Fxe,"A",{href:!0});var o5t=s(qz);E5r=r(o5t,"TFXLMForTokenClassification"),o5t.forEach(t),C5r=r(Fxe," (XLM model)"),Fxe.forEach(t),w5r=i(oe),NT=n(oe,"LI",{});var vxe=s(NT);Gbe=n(vxe,"STRONG",{});var r5t=s(Gbe);A5r=r(r5t,"xlm-roberta"),r5t.forEach(t),y5r=r(vxe," \u2014 "),Nz=n(vxe,"A",{href:!0});var t5t=s(Nz);L5r=r(t5t,"TFXLMRobertaForTokenClassification"),t5t.forEach(t),x5r=r(vxe," (XLM-RoBERTa model)"),vxe.forEach(t),k5r=i(oe),jT=n(oe,"LI",{});var Txe=s(jT);Obe=n(Txe,"STRONG",{});var a5t=s(Obe);S5r=r(a5t,"xlnet"),a5t.forEach(t),R5r=r(Txe," \u2014 "),jz=n(Txe,"A",{href:!0});var n5t=s(jz);B5r=r(n5t,"TFXLNetForTokenClassification"),n5t.forEach(t),P5r=r(Txe," (XLNet model)"),Txe.forEach(t),oe.forEach(t),$5r=i(Ca),Vbe=n(Ca,"P",{});var s5t=s(Vbe);I5r=r(s5t,"Examples:"),s5t.forEach(t),q5r=i(Ca),m(fy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),iBe=i(c),Vc=n(c,"H2",{class:!0});var F$e=s(Vc);DT=n(F$e,"A",{id:!0,class:!0,href:!0});var l5t=s(DT);Xbe=n(l5t,"SPAN",{});var i5t=s(Xbe);m(my.$$.fragment,i5t),i5t.forEach(t),l5t.forEach(t),N5r=i(F$e),zbe=n(F$e,"SPAN",{});var d5t=s(zbe);j5r=r(d5t,"TFAutoModelForQuestionAnswering"),d5t.forEach(t),F$e.forEach(t),dBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(gy.$$.fragment,ni),D5r=i(ni),Xc=n(ni,"P",{});var dJ=s(Xc);G5r=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Dz=n(dJ,"A",{href:!0});var c5t=s(Dz);O5r=r(c5t,"from_pretrained()"),c5t.forEach(t),V5r=r(dJ," class method or the "),Gz=n(dJ,"A",{href:!0});var f5t=s(Gz);X5r=r(f5t,"from_config()"),f5t.forEach(t),z5r=r(dJ,` class
method.`),dJ.forEach(t),Q5r=i(ni),hy=n(ni,"P",{});var v$e=s(hy);W5r=r(v$e,"This class cannot be instantiated directly using "),Qbe=n(v$e,"CODE",{});var m5t=s(Qbe);H5r=r(m5t,"__init__()"),m5t.forEach(t),U5r=r(v$e," (throws an error)."),v$e.forEach(t),J5r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(py.$$.fragment,si),Y5r=i(si),Wbe=n(si,"P",{});var g5t=s(Wbe);K5r=r(g5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g5t.forEach(t),Z5r=i(si),zc=n(si,"P",{});var cJ=s(zc);e3r=r(cJ,`Note:
Loading a model from its configuration file does `),Hbe=n(cJ,"STRONG",{});var h5t=s(Hbe);o3r=r(h5t,"not"),h5t.forEach(t),r3r=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(cJ,"A",{href:!0});var p5t=s(Oz);t3r=r(p5t,"from_pretrained()"),p5t.forEach(t),a3r=r(cJ," to load the model weights."),cJ.forEach(t),n3r=i(si),Ube=n(si,"P",{});var _5t=s(Ube);s3r=r(_5t,"Examples:"),_5t.forEach(t),l3r=i(si),m(_y.$$.fragment,si),si.forEach(t),i3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(uy.$$.fragment,wa),d3r=i(wa),Jbe=n(wa,"P",{});var u5t=s(Jbe);c3r=r(u5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),u5t.forEach(t),f3r=i(wa),An=n(wa,"P",{});var eE=s(An);m3r=r(eE,"The model class to instantiate is selected based on the "),Ybe=n(eE,"CODE",{});var b5t=s(Ybe);g3r=r(b5t,"model_type"),b5t.forEach(t),h3r=r(eE,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(eE,"CODE",{});var F5t=s(Kbe);p3r=r(F5t,"pretrained_model_name_or_path"),F5t.forEach(t),_3r=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(eE,"CODE",{});var v5t=s(Zbe);u3r=r(v5t,"pretrained_model_name_or_path"),v5t.forEach(t),b3r=r(eE,":"),eE.forEach(t),F3r=i(wa),K=n(wa,"UL",{});var re=s(K);GT=n(re,"LI",{});var Mxe=s(GT);e5e=n(Mxe,"STRONG",{});var T5t=s(e5e);v3r=r(T5t,"albert"),T5t.forEach(t),T3r=r(Mxe," \u2014 "),Vz=n(Mxe,"A",{href:!0});var M5t=s(Vz);M3r=r(M5t,"TFAlbertForQuestionAnswering"),M5t.forEach(t),E3r=r(Mxe," (ALBERT model)"),Mxe.forEach(t),C3r=i(re),OT=n(re,"LI",{});var Exe=s(OT);o5e=n(Exe,"STRONG",{});var E5t=s(o5e);w3r=r(E5t,"bert"),E5t.forEach(t),A3r=r(Exe," \u2014 "),Xz=n(Exe,"A",{href:!0});var C5t=s(Xz);y3r=r(C5t,"TFBertForQuestionAnswering"),C5t.forEach(t),L3r=r(Exe," (BERT model)"),Exe.forEach(t),x3r=i(re),VT=n(re,"LI",{});var Cxe=s(VT);r5e=n(Cxe,"STRONG",{});var w5t=s(r5e);k3r=r(w5t,"camembert"),w5t.forEach(t),S3r=r(Cxe," \u2014 "),zz=n(Cxe,"A",{href:!0});var A5t=s(zz);R3r=r(A5t,"TFCamembertForQuestionAnswering"),A5t.forEach(t),B3r=r(Cxe," (CamemBERT model)"),Cxe.forEach(t),P3r=i(re),XT=n(re,"LI",{});var wxe=s(XT);t5e=n(wxe,"STRONG",{});var y5t=s(t5e);$3r=r(y5t,"convbert"),y5t.forEach(t),I3r=r(wxe," \u2014 "),Qz=n(wxe,"A",{href:!0});var L5t=s(Qz);q3r=r(L5t,"TFConvBertForQuestionAnswering"),L5t.forEach(t),N3r=r(wxe," (ConvBERT model)"),wxe.forEach(t),j3r=i(re),zT=n(re,"LI",{});var Axe=s(zT);a5e=n(Axe,"STRONG",{});var x5t=s(a5e);D3r=r(x5t,"deberta"),x5t.forEach(t),G3r=r(Axe," \u2014 "),Wz=n(Axe,"A",{href:!0});var k5t=s(Wz);O3r=r(k5t,"TFDebertaForQuestionAnswering"),k5t.forEach(t),V3r=r(Axe," (DeBERTa model)"),Axe.forEach(t),X3r=i(re),QT=n(re,"LI",{});var yxe=s(QT);n5e=n(yxe,"STRONG",{});var S5t=s(n5e);z3r=r(S5t,"deberta-v2"),S5t.forEach(t),Q3r=r(yxe," \u2014 "),Hz=n(yxe,"A",{href:!0});var R5t=s(Hz);W3r=r(R5t,"TFDebertaV2ForQuestionAnswering"),R5t.forEach(t),H3r=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),U3r=i(re),WT=n(re,"LI",{});var Lxe=s(WT);s5e=n(Lxe,"STRONG",{});var B5t=s(s5e);J3r=r(B5t,"distilbert"),B5t.forEach(t),Y3r=r(Lxe," \u2014 "),Uz=n(Lxe,"A",{href:!0});var P5t=s(Uz);K3r=r(P5t,"TFDistilBertForQuestionAnswering"),P5t.forEach(t),Z3r=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),e2r=i(re),HT=n(re,"LI",{});var xxe=s(HT);l5e=n(xxe,"STRONG",{});var $5t=s(l5e);o2r=r($5t,"electra"),$5t.forEach(t),r2r=r(xxe," \u2014 "),Jz=n(xxe,"A",{href:!0});var I5t=s(Jz);t2r=r(I5t,"TFElectraForQuestionAnswering"),I5t.forEach(t),a2r=r(xxe," (ELECTRA model)"),xxe.forEach(t),n2r=i(re),UT=n(re,"LI",{});var kxe=s(UT);i5e=n(kxe,"STRONG",{});var q5t=s(i5e);s2r=r(q5t,"flaubert"),q5t.forEach(t),l2r=r(kxe," \u2014 "),Yz=n(kxe,"A",{href:!0});var N5t=s(Yz);i2r=r(N5t,"TFFlaubertForQuestionAnsweringSimple"),N5t.forEach(t),d2r=r(kxe," (FlauBERT model)"),kxe.forEach(t),c2r=i(re),JT=n(re,"LI",{});var Sxe=s(JT);d5e=n(Sxe,"STRONG",{});var j5t=s(d5e);f2r=r(j5t,"funnel"),j5t.forEach(t),m2r=r(Sxe," \u2014 "),Kz=n(Sxe,"A",{href:!0});var D5t=s(Kz);g2r=r(D5t,"TFFunnelForQuestionAnswering"),D5t.forEach(t),h2r=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),p2r=i(re),YT=n(re,"LI",{});var Rxe=s(YT);c5e=n(Rxe,"STRONG",{});var G5t=s(c5e);_2r=r(G5t,"gptj"),G5t.forEach(t),u2r=r(Rxe," \u2014 "),Zz=n(Rxe,"A",{href:!0});var O5t=s(Zz);b2r=r(O5t,"TFGPTJForQuestionAnswering"),O5t.forEach(t),F2r=r(Rxe," (GPT-J model)"),Rxe.forEach(t),v2r=i(re),KT=n(re,"LI",{});var Bxe=s(KT);f5e=n(Bxe,"STRONG",{});var V5t=s(f5e);T2r=r(V5t,"longformer"),V5t.forEach(t),M2r=r(Bxe," \u2014 "),eQ=n(Bxe,"A",{href:!0});var X5t=s(eQ);E2r=r(X5t,"TFLongformerForQuestionAnswering"),X5t.forEach(t),C2r=r(Bxe," (Longformer model)"),Bxe.forEach(t),w2r=i(re),ZT=n(re,"LI",{});var Pxe=s(ZT);m5e=n(Pxe,"STRONG",{});var z5t=s(m5e);A2r=r(z5t,"mobilebert"),z5t.forEach(t),y2r=r(Pxe," \u2014 "),oQ=n(Pxe,"A",{href:!0});var Q5t=s(oQ);L2r=r(Q5t,"TFMobileBertForQuestionAnswering"),Q5t.forEach(t),x2r=r(Pxe," (MobileBERT model)"),Pxe.forEach(t),k2r=i(re),e7=n(re,"LI",{});var $xe=s(e7);g5e=n($xe,"STRONG",{});var W5t=s(g5e);S2r=r(W5t,"mpnet"),W5t.forEach(t),R2r=r($xe," \u2014 "),rQ=n($xe,"A",{href:!0});var H5t=s(rQ);B2r=r(H5t,"TFMPNetForQuestionAnswering"),H5t.forEach(t),P2r=r($xe," (MPNet model)"),$xe.forEach(t),$2r=i(re),o7=n(re,"LI",{});var Ixe=s(o7);h5e=n(Ixe,"STRONG",{});var U5t=s(h5e);I2r=r(U5t,"rembert"),U5t.forEach(t),q2r=r(Ixe," \u2014 "),tQ=n(Ixe,"A",{href:!0});var J5t=s(tQ);N2r=r(J5t,"TFRemBertForQuestionAnswering"),J5t.forEach(t),j2r=r(Ixe," (RemBERT model)"),Ixe.forEach(t),D2r=i(re),r7=n(re,"LI",{});var qxe=s(r7);p5e=n(qxe,"STRONG",{});var Y5t=s(p5e);G2r=r(Y5t,"roberta"),Y5t.forEach(t),O2r=r(qxe," \u2014 "),aQ=n(qxe,"A",{href:!0});var K5t=s(aQ);V2r=r(K5t,"TFRobertaForQuestionAnswering"),K5t.forEach(t),X2r=r(qxe," (RoBERTa model)"),qxe.forEach(t),z2r=i(re),t7=n(re,"LI",{});var Nxe=s(t7);_5e=n(Nxe,"STRONG",{});var Z5t=s(_5e);Q2r=r(Z5t,"roformer"),Z5t.forEach(t),W2r=r(Nxe," \u2014 "),nQ=n(Nxe,"A",{href:!0});var e3t=s(nQ);H2r=r(e3t,"TFRoFormerForQuestionAnswering"),e3t.forEach(t),U2r=r(Nxe," (RoFormer model)"),Nxe.forEach(t),J2r=i(re),a7=n(re,"LI",{});var jxe=s(a7);u5e=n(jxe,"STRONG",{});var o3t=s(u5e);Y2r=r(o3t,"xlm"),o3t.forEach(t),K2r=r(jxe," \u2014 "),sQ=n(jxe,"A",{href:!0});var r3t=s(sQ);Z2r=r(r3t,"TFXLMForQuestionAnsweringSimple"),r3t.forEach(t),eFr=r(jxe," (XLM model)"),jxe.forEach(t),oFr=i(re),n7=n(re,"LI",{});var Dxe=s(n7);b5e=n(Dxe,"STRONG",{});var t3t=s(b5e);rFr=r(t3t,"xlm-roberta"),t3t.forEach(t),tFr=r(Dxe," \u2014 "),lQ=n(Dxe,"A",{href:!0});var a3t=s(lQ);aFr=r(a3t,"TFXLMRobertaForQuestionAnswering"),a3t.forEach(t),nFr=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),sFr=i(re),s7=n(re,"LI",{});var Gxe=s(s7);F5e=n(Gxe,"STRONG",{});var n3t=s(F5e);lFr=r(n3t,"xlnet"),n3t.forEach(t),iFr=r(Gxe," \u2014 "),iQ=n(Gxe,"A",{href:!0});var s3t=s(iQ);dFr=r(s3t,"TFXLNetForQuestionAnsweringSimple"),s3t.forEach(t),cFr=r(Gxe," (XLNet model)"),Gxe.forEach(t),re.forEach(t),fFr=i(wa),v5e=n(wa,"P",{});var l3t=s(v5e);mFr=r(l3t,"Examples:"),l3t.forEach(t),gFr=i(wa),m(by.$$.fragment,wa),wa.forEach(t),ni.forEach(t),cBe=i(c),Qc=n(c,"H2",{class:!0});var T$e=s(Qc);l7=n(T$e,"A",{id:!0,class:!0,href:!0});var i3t=s(l7);T5e=n(i3t,"SPAN",{});var d3t=s(T5e);m(Fy.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),hFr=i(T$e),M5e=n(T$e,"SPAN",{});var c3t=s(M5e);pFr=r(c3t,"TFAutoModelForVision2Seq"),c3t.forEach(t),T$e.forEach(t),fBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(vy.$$.fragment,li),_Fr=i(li),Wc=n(li,"P",{});var fJ=s(Wc);uFr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dQ=n(fJ,"A",{href:!0});var f3t=s(dQ);bFr=r(f3t,"from_pretrained()"),f3t.forEach(t),FFr=r(fJ," class method or the "),cQ=n(fJ,"A",{href:!0});var m3t=s(cQ);vFr=r(m3t,"from_config()"),m3t.forEach(t),TFr=r(fJ,` class
method.`),fJ.forEach(t),MFr=i(li),Ty=n(li,"P",{});var M$e=s(Ty);EFr=r(M$e,"This class cannot be instantiated directly using "),E5e=n(M$e,"CODE",{});var g3t=s(E5e);CFr=r(g3t,"__init__()"),g3t.forEach(t),wFr=r(M$e," (throws an error)."),M$e.forEach(t),AFr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(My.$$.fragment,ii),yFr=i(ii),C5e=n(ii,"P",{});var h3t=s(C5e);LFr=r(h3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),h3t.forEach(t),xFr=i(ii),Hc=n(ii,"P",{});var mJ=s(Hc);kFr=r(mJ,`Note:
Loading a model from its configuration file does `),w5e=n(mJ,"STRONG",{});var p3t=s(w5e);SFr=r(p3t,"not"),p3t.forEach(t),RFr=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(mJ,"A",{href:!0});var _3t=s(fQ);BFr=r(_3t,"from_pretrained()"),_3t.forEach(t),PFr=r(mJ," to load the model weights."),mJ.forEach(t),$Fr=i(ii),A5e=n(ii,"P",{});var u3t=s(A5e);IFr=r(u3t,"Examples:"),u3t.forEach(t),qFr=i(ii),m(Ey.$$.fragment,ii),ii.forEach(t),NFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(Cy.$$.fragment,Aa),jFr=i(Aa),y5e=n(Aa,"P",{});var b3t=s(y5e);DFr=r(b3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),b3t.forEach(t),GFr=i(Aa),yn=n(Aa,"P",{});var oE=s(yn);OFr=r(oE,"The model class to instantiate is selected based on the "),L5e=n(oE,"CODE",{});var F3t=s(L5e);VFr=r(F3t,"model_type"),F3t.forEach(t),XFr=r(oE,` property of the config object (either
passed as an argument or loaded from `),x5e=n(oE,"CODE",{});var v3t=s(x5e);zFr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),QFr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(oE,"CODE",{});var T3t=s(k5e);WFr=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),HFr=r(oE,":"),oE.forEach(t),UFr=i(Aa),S5e=n(Aa,"UL",{});var M3t=s(S5e);i7=n(M3t,"LI",{});var Oxe=s(i7);R5e=n(Oxe,"STRONG",{});var E3t=s(R5e);JFr=r(E3t,"vision-encoder-decoder"),E3t.forEach(t),YFr=r(Oxe," \u2014 "),mQ=n(Oxe,"A",{href:!0});var C3t=s(mQ);KFr=r(C3t,"TFVisionEncoderDecoderModel"),C3t.forEach(t),ZFr=r(Oxe," (Vision Encoder decoder model)"),Oxe.forEach(t),M3t.forEach(t),evr=i(Aa),B5e=n(Aa,"P",{});var w3t=s(B5e);ovr=r(w3t,"Examples:"),w3t.forEach(t),rvr=i(Aa),m(wy.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),mBe=i(c),Uc=n(c,"H2",{class:!0});var E$e=s(Uc);d7=n(E$e,"A",{id:!0,class:!0,href:!0});var A3t=s(d7);P5e=n(A3t,"SPAN",{});var y3t=s(P5e);m(Ay.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),tvr=i(E$e),$5e=n(E$e,"SPAN",{});var L3t=s($5e);avr=r(L3t,"TFAutoModelForSpeechSeq2Seq"),L3t.forEach(t),E$e.forEach(t),gBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(yy.$$.fragment,di),nvr=i(di),Jc=n(di,"P",{});var gJ=s(Jc);svr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gQ=n(gJ,"A",{href:!0});var x3t=s(gQ);lvr=r(x3t,"from_pretrained()"),x3t.forEach(t),ivr=r(gJ," class method or the "),hQ=n(gJ,"A",{href:!0});var k3t=s(hQ);dvr=r(k3t,"from_config()"),k3t.forEach(t),cvr=r(gJ,` class
method.`),gJ.forEach(t),fvr=i(di),Ly=n(di,"P",{});var C$e=s(Ly);mvr=r(C$e,"This class cannot be instantiated directly using "),I5e=n(C$e,"CODE",{});var S3t=s(I5e);gvr=r(S3t,"__init__()"),S3t.forEach(t),hvr=r(C$e," (throws an error)."),C$e.forEach(t),pvr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(xy.$$.fragment,ci),_vr=i(ci),q5e=n(ci,"P",{});var R3t=s(q5e);uvr=r(R3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R3t.forEach(t),bvr=i(ci),Yc=n(ci,"P",{});var hJ=s(Yc);Fvr=r(hJ,`Note:
Loading a model from its configuration file does `),N5e=n(hJ,"STRONG",{});var B3t=s(N5e);vvr=r(B3t,"not"),B3t.forEach(t),Tvr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(hJ,"A",{href:!0});var P3t=s(pQ);Mvr=r(P3t,"from_pretrained()"),P3t.forEach(t),Evr=r(hJ," to load the model weights."),hJ.forEach(t),Cvr=i(ci),j5e=n(ci,"P",{});var $3t=s(j5e);wvr=r($3t,"Examples:"),$3t.forEach(t),Avr=i(ci),m(ky.$$.fragment,ci),ci.forEach(t),yvr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Sy.$$.fragment,ya),Lvr=i(ya),D5e=n(ya,"P",{});var I3t=s(D5e);xvr=r(I3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),I3t.forEach(t),kvr=i(ya),Ln=n(ya,"P",{});var rE=s(Ln);Svr=r(rE,"The model class to instantiate is selected based on the "),G5e=n(rE,"CODE",{});var q3t=s(G5e);Rvr=r(q3t,"model_type"),q3t.forEach(t),Bvr=r(rE,` property of the config object (either
passed as an argument or loaded from `),O5e=n(rE,"CODE",{});var N3t=s(O5e);Pvr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),$vr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V5e=n(rE,"CODE",{});var j3t=s(V5e);Ivr=r(j3t,"pretrained_model_name_or_path"),j3t.forEach(t),qvr=r(rE,":"),rE.forEach(t),Nvr=i(ya),X5e=n(ya,"UL",{});var D3t=s(X5e);c7=n(D3t,"LI",{});var Vxe=s(c7);z5e=n(Vxe,"STRONG",{});var G3t=s(z5e);jvr=r(G3t,"speech_to_text"),G3t.forEach(t),Dvr=r(Vxe," \u2014 "),_Q=n(Vxe,"A",{href:!0});var O3t=s(_Q);Gvr=r(O3t,"TFSpeech2TextForConditionalGeneration"),O3t.forEach(t),Ovr=r(Vxe," (Speech2Text model)"),Vxe.forEach(t),D3t.forEach(t),Vvr=i(ya),Q5e=n(ya,"P",{});var V3t=s(Q5e);Xvr=r(V3t,"Examples:"),V3t.forEach(t),zvr=i(ya),m(Ry.$$.fragment,ya),ya.forEach(t),di.forEach(t),hBe=i(c),Kc=n(c,"H2",{class:!0});var w$e=s(Kc);f7=n(w$e,"A",{id:!0,class:!0,href:!0});var X3t=s(f7);W5e=n(X3t,"SPAN",{});var z3t=s(W5e);m(By.$$.fragment,z3t),z3t.forEach(t),X3t.forEach(t),Qvr=i(w$e),H5e=n(w$e,"SPAN",{});var Q3t=s(H5e);Wvr=r(Q3t,"FlaxAutoModel"),Q3t.forEach(t),w$e.forEach(t),pBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(Py.$$.fragment,fi),Hvr=i(fi),Zc=n(fi,"P",{});var pJ=s(Zc);Uvr=r(pJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uQ=n(pJ,"A",{href:!0});var W3t=s(uQ);Jvr=r(W3t,"from_pretrained()"),W3t.forEach(t),Yvr=r(pJ," class method or the "),bQ=n(pJ,"A",{href:!0});var H3t=s(bQ);Kvr=r(H3t,"from_config()"),H3t.forEach(t),Zvr=r(pJ,` class
method.`),pJ.forEach(t),e6r=i(fi),$y=n(fi,"P",{});var A$e=s($y);o6r=r(A$e,"This class cannot be instantiated directly using "),U5e=n(A$e,"CODE",{});var U3t=s(U5e);r6r=r(U3t,"__init__()"),U3t.forEach(t),t6r=r(A$e," (throws an error)."),A$e.forEach(t),a6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(Iy.$$.fragment,mi),n6r=i(mi),J5e=n(mi,"P",{});var J3t=s(J5e);s6r=r(J3t,"Instantiates one of the base model classes of the library from a configuration."),J3t.forEach(t),l6r=i(mi),ef=n(mi,"P",{});var _J=s(ef);i6r=r(_J,`Note:
Loading a model from its configuration file does `),Y5e=n(_J,"STRONG",{});var Y3t=s(Y5e);d6r=r(Y3t,"not"),Y3t.forEach(t),c6r=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(_J,"A",{href:!0});var K3t=s(FQ);f6r=r(K3t,"from_pretrained()"),K3t.forEach(t),m6r=r(_J," to load the model weights."),_J.forEach(t),g6r=i(mi),K5e=n(mi,"P",{});var Z3t=s(K5e);h6r=r(Z3t,"Examples:"),Z3t.forEach(t),p6r=i(mi),m(qy.$$.fragment,mi),mi.forEach(t),_6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Ny.$$.fragment,La),u6r=i(La),Z5e=n(La,"P",{});var e2t=s(Z5e);b6r=r(e2t,"Instantiate one of the base model classes of the library from a pretrained model."),e2t.forEach(t),F6r=i(La),xn=n(La,"P",{});var tE=s(xn);v6r=r(tE,"The model class to instantiate is selected based on the "),e3e=n(tE,"CODE",{});var o2t=s(e3e);T6r=r(o2t,"model_type"),o2t.forEach(t),M6r=r(tE,` property of the config object (either
passed as an argument or loaded from `),o3e=n(tE,"CODE",{});var r2t=s(o3e);E6r=r(r2t,"pretrained_model_name_or_path"),r2t.forEach(t),C6r=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r3e=n(tE,"CODE",{});var t2t=s(r3e);w6r=r(t2t,"pretrained_model_name_or_path"),t2t.forEach(t),A6r=r(tE,":"),tE.forEach(t),y6r=i(La),z=n(La,"UL",{});var W=s(z);m7=n(W,"LI",{});var Xxe=s(m7);t3e=n(Xxe,"STRONG",{});var a2t=s(t3e);L6r=r(a2t,"albert"),a2t.forEach(t),x6r=r(Xxe," \u2014 "),vQ=n(Xxe,"A",{href:!0});var n2t=s(vQ);k6r=r(n2t,"FlaxAlbertModel"),n2t.forEach(t),S6r=r(Xxe," (ALBERT model)"),Xxe.forEach(t),R6r=i(W),g7=n(W,"LI",{});var zxe=s(g7);a3e=n(zxe,"STRONG",{});var s2t=s(a3e);B6r=r(s2t,"bart"),s2t.forEach(t),P6r=r(zxe," \u2014 "),TQ=n(zxe,"A",{href:!0});var l2t=s(TQ);$6r=r(l2t,"FlaxBartModel"),l2t.forEach(t),I6r=r(zxe," (BART model)"),zxe.forEach(t),q6r=i(W),h7=n(W,"LI",{});var Qxe=s(h7);n3e=n(Qxe,"STRONG",{});var i2t=s(n3e);N6r=r(i2t,"beit"),i2t.forEach(t),j6r=r(Qxe," \u2014 "),MQ=n(Qxe,"A",{href:!0});var d2t=s(MQ);D6r=r(d2t,"FlaxBeitModel"),d2t.forEach(t),G6r=r(Qxe," (BEiT model)"),Qxe.forEach(t),O6r=i(W),p7=n(W,"LI",{});var Wxe=s(p7);s3e=n(Wxe,"STRONG",{});var c2t=s(s3e);V6r=r(c2t,"bert"),c2t.forEach(t),X6r=r(Wxe," \u2014 "),EQ=n(Wxe,"A",{href:!0});var f2t=s(EQ);z6r=r(f2t,"FlaxBertModel"),f2t.forEach(t),Q6r=r(Wxe," (BERT model)"),Wxe.forEach(t),W6r=i(W),_7=n(W,"LI",{});var Hxe=s(_7);l3e=n(Hxe,"STRONG",{});var m2t=s(l3e);H6r=r(m2t,"big_bird"),m2t.forEach(t),U6r=r(Hxe," \u2014 "),CQ=n(Hxe,"A",{href:!0});var g2t=s(CQ);J6r=r(g2t,"FlaxBigBirdModel"),g2t.forEach(t),Y6r=r(Hxe," (BigBird model)"),Hxe.forEach(t),K6r=i(W),u7=n(W,"LI",{});var Uxe=s(u7);i3e=n(Uxe,"STRONG",{});var h2t=s(i3e);Z6r=r(h2t,"blenderbot"),h2t.forEach(t),eTr=r(Uxe," \u2014 "),wQ=n(Uxe,"A",{href:!0});var p2t=s(wQ);oTr=r(p2t,"FlaxBlenderbotModel"),p2t.forEach(t),rTr=r(Uxe," (Blenderbot model)"),Uxe.forEach(t),tTr=i(W),b7=n(W,"LI",{});var Jxe=s(b7);d3e=n(Jxe,"STRONG",{});var _2t=s(d3e);aTr=r(_2t,"blenderbot-small"),_2t.forEach(t),nTr=r(Jxe," \u2014 "),AQ=n(Jxe,"A",{href:!0});var u2t=s(AQ);sTr=r(u2t,"FlaxBlenderbotSmallModel"),u2t.forEach(t),lTr=r(Jxe," (BlenderbotSmall model)"),Jxe.forEach(t),iTr=i(W),F7=n(W,"LI",{});var Yxe=s(F7);c3e=n(Yxe,"STRONG",{});var b2t=s(c3e);dTr=r(b2t,"clip"),b2t.forEach(t),cTr=r(Yxe," \u2014 "),yQ=n(Yxe,"A",{href:!0});var F2t=s(yQ);fTr=r(F2t,"FlaxCLIPModel"),F2t.forEach(t),mTr=r(Yxe," (CLIP model)"),Yxe.forEach(t),gTr=i(W),v7=n(W,"LI",{});var Kxe=s(v7);f3e=n(Kxe,"STRONG",{});var v2t=s(f3e);hTr=r(v2t,"distilbert"),v2t.forEach(t),pTr=r(Kxe," \u2014 "),LQ=n(Kxe,"A",{href:!0});var T2t=s(LQ);_Tr=r(T2t,"FlaxDistilBertModel"),T2t.forEach(t),uTr=r(Kxe," (DistilBERT model)"),Kxe.forEach(t),bTr=i(W),T7=n(W,"LI",{});var Zxe=s(T7);m3e=n(Zxe,"STRONG",{});var M2t=s(m3e);FTr=r(M2t,"electra"),M2t.forEach(t),vTr=r(Zxe," \u2014 "),xQ=n(Zxe,"A",{href:!0});var E2t=s(xQ);TTr=r(E2t,"FlaxElectraModel"),E2t.forEach(t),MTr=r(Zxe," (ELECTRA model)"),Zxe.forEach(t),ETr=i(W),M7=n(W,"LI",{});var eke=s(M7);g3e=n(eke,"STRONG",{});var C2t=s(g3e);CTr=r(C2t,"gpt2"),C2t.forEach(t),wTr=r(eke," \u2014 "),kQ=n(eke,"A",{href:!0});var w2t=s(kQ);ATr=r(w2t,"FlaxGPT2Model"),w2t.forEach(t),yTr=r(eke," (OpenAI GPT-2 model)"),eke.forEach(t),LTr=i(W),E7=n(W,"LI",{});var oke=s(E7);h3e=n(oke,"STRONG",{});var A2t=s(h3e);xTr=r(A2t,"gpt_neo"),A2t.forEach(t),kTr=r(oke," \u2014 "),SQ=n(oke,"A",{href:!0});var y2t=s(SQ);STr=r(y2t,"FlaxGPTNeoModel"),y2t.forEach(t),RTr=r(oke," (GPT Neo model)"),oke.forEach(t),BTr=i(W),C7=n(W,"LI",{});var rke=s(C7);p3e=n(rke,"STRONG",{});var L2t=s(p3e);PTr=r(L2t,"gptj"),L2t.forEach(t),$Tr=r(rke," \u2014 "),RQ=n(rke,"A",{href:!0});var x2t=s(RQ);ITr=r(x2t,"FlaxGPTJModel"),x2t.forEach(t),qTr=r(rke," (GPT-J model)"),rke.forEach(t),NTr=i(W),w7=n(W,"LI",{});var tke=s(w7);_3e=n(tke,"STRONG",{});var k2t=s(_3e);jTr=r(k2t,"marian"),k2t.forEach(t),DTr=r(tke," \u2014 "),BQ=n(tke,"A",{href:!0});var S2t=s(BQ);GTr=r(S2t,"FlaxMarianModel"),S2t.forEach(t),OTr=r(tke," (Marian model)"),tke.forEach(t),VTr=i(W),A7=n(W,"LI",{});var ake=s(A7);u3e=n(ake,"STRONG",{});var R2t=s(u3e);XTr=r(R2t,"mbart"),R2t.forEach(t),zTr=r(ake," \u2014 "),PQ=n(ake,"A",{href:!0});var B2t=s(PQ);QTr=r(B2t,"FlaxMBartModel"),B2t.forEach(t),WTr=r(ake," (mBART model)"),ake.forEach(t),HTr=i(W),y7=n(W,"LI",{});var nke=s(y7);b3e=n(nke,"STRONG",{});var P2t=s(b3e);UTr=r(P2t,"mt5"),P2t.forEach(t),JTr=r(nke," \u2014 "),$Q=n(nke,"A",{href:!0});var $2t=s($Q);YTr=r($2t,"FlaxMT5Model"),$2t.forEach(t),KTr=r(nke," (mT5 model)"),nke.forEach(t),ZTr=i(W),L7=n(W,"LI",{});var ske=s(L7);F3e=n(ske,"STRONG",{});var I2t=s(F3e);e7r=r(I2t,"pegasus"),I2t.forEach(t),o7r=r(ske," \u2014 "),IQ=n(ske,"A",{href:!0});var q2t=s(IQ);r7r=r(q2t,"FlaxPegasusModel"),q2t.forEach(t),t7r=r(ske," (Pegasus model)"),ske.forEach(t),a7r=i(W),x7=n(W,"LI",{});var lke=s(x7);v3e=n(lke,"STRONG",{});var N2t=s(v3e);n7r=r(N2t,"roberta"),N2t.forEach(t),s7r=r(lke," \u2014 "),qQ=n(lke,"A",{href:!0});var j2t=s(qQ);l7r=r(j2t,"FlaxRobertaModel"),j2t.forEach(t),i7r=r(lke," (RoBERTa model)"),lke.forEach(t),d7r=i(W),k7=n(W,"LI",{});var ike=s(k7);T3e=n(ike,"STRONG",{});var D2t=s(T3e);c7r=r(D2t,"roformer"),D2t.forEach(t),f7r=r(ike," \u2014 "),NQ=n(ike,"A",{href:!0});var G2t=s(NQ);m7r=r(G2t,"FlaxRoFormerModel"),G2t.forEach(t),g7r=r(ike," (RoFormer model)"),ike.forEach(t),h7r=i(W),S7=n(W,"LI",{});var dke=s(S7);M3e=n(dke,"STRONG",{});var O2t=s(M3e);p7r=r(O2t,"t5"),O2t.forEach(t),_7r=r(dke," \u2014 "),jQ=n(dke,"A",{href:!0});var V2t=s(jQ);u7r=r(V2t,"FlaxT5Model"),V2t.forEach(t),b7r=r(dke," (T5 model)"),dke.forEach(t),F7r=i(W),R7=n(W,"LI",{});var cke=s(R7);E3e=n(cke,"STRONG",{});var X2t=s(E3e);v7r=r(X2t,"vision-text-dual-encoder"),X2t.forEach(t),T7r=r(cke," \u2014 "),DQ=n(cke,"A",{href:!0});var z2t=s(DQ);M7r=r(z2t,"FlaxVisionTextDualEncoderModel"),z2t.forEach(t),E7r=r(cke," (VisionTextDualEncoder model)"),cke.forEach(t),C7r=i(W),B7=n(W,"LI",{});var fke=s(B7);C3e=n(fke,"STRONG",{});var Q2t=s(C3e);w7r=r(Q2t,"vit"),Q2t.forEach(t),A7r=r(fke," \u2014 "),GQ=n(fke,"A",{href:!0});var W2t=s(GQ);y7r=r(W2t,"FlaxViTModel"),W2t.forEach(t),L7r=r(fke," (ViT model)"),fke.forEach(t),x7r=i(W),P7=n(W,"LI",{});var mke=s(P7);w3e=n(mke,"STRONG",{});var H2t=s(w3e);k7r=r(H2t,"wav2vec2"),H2t.forEach(t),S7r=r(mke," \u2014 "),OQ=n(mke,"A",{href:!0});var U2t=s(OQ);R7r=r(U2t,"FlaxWav2Vec2Model"),U2t.forEach(t),B7r=r(mke," (Wav2Vec2 model)"),mke.forEach(t),P7r=i(W),$7=n(W,"LI",{});var gke=s($7);A3e=n(gke,"STRONG",{});var J2t=s(A3e);$7r=r(J2t,"xglm"),J2t.forEach(t),I7r=r(gke," \u2014 "),VQ=n(gke,"A",{href:!0});var Y2t=s(VQ);q7r=r(Y2t,"FlaxXGLMModel"),Y2t.forEach(t),N7r=r(gke," (XGLM model)"),gke.forEach(t),j7r=i(W),I7=n(W,"LI",{});var hke=s(I7);y3e=n(hke,"STRONG",{});var K2t=s(y3e);D7r=r(K2t,"xlm-roberta"),K2t.forEach(t),G7r=r(hke," \u2014 "),XQ=n(hke,"A",{href:!0});var Z2t=s(XQ);O7r=r(Z2t,"FlaxXLMRobertaModel"),Z2t.forEach(t),V7r=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),W.forEach(t),X7r=i(La),L3e=n(La,"P",{});var eFt=s(L3e);z7r=r(eFt,"Examples:"),eFt.forEach(t),Q7r=i(La),m(jy.$$.fragment,La),La.forEach(t),fi.forEach(t),_Be=i(c),of=n(c,"H2",{class:!0});var y$e=s(of);q7=n(y$e,"A",{id:!0,class:!0,href:!0});var oFt=s(q7);x3e=n(oFt,"SPAN",{});var rFt=s(x3e);m(Dy.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),W7r=i(y$e),k3e=n(y$e,"SPAN",{});var tFt=s(k3e);H7r=r(tFt,"FlaxAutoModelForCausalLM"),tFt.forEach(t),y$e.forEach(t),uBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Gy.$$.fragment,gi),U7r=i(gi),rf=n(gi,"P",{});var uJ=s(rf);J7r=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zQ=n(uJ,"A",{href:!0});var aFt=s(zQ);Y7r=r(aFt,"from_pretrained()"),aFt.forEach(t),K7r=r(uJ," class method or the "),QQ=n(uJ,"A",{href:!0});var nFt=s(QQ);Z7r=r(nFt,"from_config()"),nFt.forEach(t),eMr=r(uJ,` class
method.`),uJ.forEach(t),oMr=i(gi),Oy=n(gi,"P",{});var L$e=s(Oy);rMr=r(L$e,"This class cannot be instantiated directly using "),S3e=n(L$e,"CODE",{});var sFt=s(S3e);tMr=r(sFt,"__init__()"),sFt.forEach(t),aMr=r(L$e," (throws an error)."),L$e.forEach(t),nMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Vy.$$.fragment,hi),sMr=i(hi),R3e=n(hi,"P",{});var lFt=s(R3e);lMr=r(lFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lFt.forEach(t),iMr=i(hi),tf=n(hi,"P",{});var bJ=s(tf);dMr=r(bJ,`Note:
Loading a model from its configuration file does `),B3e=n(bJ,"STRONG",{});var iFt=s(B3e);cMr=r(iFt,"not"),iFt.forEach(t),fMr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WQ=n(bJ,"A",{href:!0});var dFt=s(WQ);mMr=r(dFt,"from_pretrained()"),dFt.forEach(t),gMr=r(bJ," to load the model weights."),bJ.forEach(t),hMr=i(hi),P3e=n(hi,"P",{});var cFt=s(P3e);pMr=r(cFt,"Examples:"),cFt.forEach(t),_Mr=i(hi),m(Xy.$$.fragment,hi),hi.forEach(t),uMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(zy.$$.fragment,xa),bMr=i(xa),$3e=n(xa,"P",{});var fFt=s($3e);FMr=r(fFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fFt.forEach(t),vMr=i(xa),kn=n(xa,"P",{});var aE=s(kn);TMr=r(aE,"The model class to instantiate is selected based on the "),I3e=n(aE,"CODE",{});var mFt=s(I3e);MMr=r(mFt,"model_type"),mFt.forEach(t),EMr=r(aE,` property of the config object (either
passed as an argument or loaded from `),q3e=n(aE,"CODE",{});var gFt=s(q3e);CMr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),wMr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N3e=n(aE,"CODE",{});var hFt=s(N3e);AMr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),yMr=r(aE,":"),aE.forEach(t),LMr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);N7=n(pi,"LI",{});var pke=s(N7);j3e=n(pke,"STRONG",{});var pFt=s(j3e);xMr=r(pFt,"bart"),pFt.forEach(t),kMr=r(pke," \u2014 "),HQ=n(pke,"A",{href:!0});var _Ft=s(HQ);SMr=r(_Ft,"FlaxBartForCausalLM"),_Ft.forEach(t),RMr=r(pke," (BART model)"),pke.forEach(t),BMr=i(pi),j7=n(pi,"LI",{});var _ke=s(j7);D3e=n(_ke,"STRONG",{});var uFt=s(D3e);PMr=r(uFt,"gpt2"),uFt.forEach(t),$Mr=r(_ke," \u2014 "),UQ=n(_ke,"A",{href:!0});var bFt=s(UQ);IMr=r(bFt,"FlaxGPT2LMHeadModel"),bFt.forEach(t),qMr=r(_ke," (OpenAI GPT-2 model)"),_ke.forEach(t),NMr=i(pi),D7=n(pi,"LI",{});var uke=s(D7);G3e=n(uke,"STRONG",{});var FFt=s(G3e);jMr=r(FFt,"gpt_neo"),FFt.forEach(t),DMr=r(uke," \u2014 "),JQ=n(uke,"A",{href:!0});var vFt=s(JQ);GMr=r(vFt,"FlaxGPTNeoForCausalLM"),vFt.forEach(t),OMr=r(uke," (GPT Neo model)"),uke.forEach(t),VMr=i(pi),G7=n(pi,"LI",{});var bke=s(G7);O3e=n(bke,"STRONG",{});var TFt=s(O3e);XMr=r(TFt,"gptj"),TFt.forEach(t),zMr=r(bke," \u2014 "),YQ=n(bke,"A",{href:!0});var MFt=s(YQ);QMr=r(MFt,"FlaxGPTJForCausalLM"),MFt.forEach(t),WMr=r(bke," (GPT-J model)"),bke.forEach(t),HMr=i(pi),O7=n(pi,"LI",{});var Fke=s(O7);V3e=n(Fke,"STRONG",{});var EFt=s(V3e);UMr=r(EFt,"xglm"),EFt.forEach(t),JMr=r(Fke," \u2014 "),KQ=n(Fke,"A",{href:!0});var CFt=s(KQ);YMr=r(CFt,"FlaxXGLMForCausalLM"),CFt.forEach(t),KMr=r(Fke," (XGLM model)"),Fke.forEach(t),pi.forEach(t),ZMr=i(xa),X3e=n(xa,"P",{});var wFt=s(X3e);e4r=r(wFt,"Examples:"),wFt.forEach(t),o4r=i(xa),m(Qy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),bBe=i(c),af=n(c,"H2",{class:!0});var x$e=s(af);V7=n(x$e,"A",{id:!0,class:!0,href:!0});var AFt=s(V7);z3e=n(AFt,"SPAN",{});var yFt=s(z3e);m(Wy.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),r4r=i(x$e),Q3e=n(x$e,"SPAN",{});var LFt=s(Q3e);t4r=r(LFt,"FlaxAutoModelForPreTraining"),LFt.forEach(t),x$e.forEach(t),FBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Hy.$$.fragment,_i),a4r=i(_i),nf=n(_i,"P",{});var FJ=s(nf);n4r=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZQ=n(FJ,"A",{href:!0});var xFt=s(ZQ);s4r=r(xFt,"from_pretrained()"),xFt.forEach(t),l4r=r(FJ," class method or the "),eW=n(FJ,"A",{href:!0});var kFt=s(eW);i4r=r(kFt,"from_config()"),kFt.forEach(t),d4r=r(FJ,` class
method.`),FJ.forEach(t),c4r=i(_i),Uy=n(_i,"P",{});var k$e=s(Uy);f4r=r(k$e,"This class cannot be instantiated directly using "),W3e=n(k$e,"CODE",{});var SFt=s(W3e);m4r=r(SFt,"__init__()"),SFt.forEach(t),g4r=r(k$e," (throws an error)."),k$e.forEach(t),h4r=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Jy.$$.fragment,ui),p4r=i(ui),H3e=n(ui,"P",{});var RFt=s(H3e);_4r=r(RFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),RFt.forEach(t),u4r=i(ui),sf=n(ui,"P",{});var vJ=s(sf);b4r=r(vJ,`Note:
Loading a model from its configuration file does `),U3e=n(vJ,"STRONG",{});var BFt=s(U3e);F4r=r(BFt,"not"),BFt.forEach(t),v4r=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oW=n(vJ,"A",{href:!0});var PFt=s(oW);T4r=r(PFt,"from_pretrained()"),PFt.forEach(t),M4r=r(vJ," to load the model weights."),vJ.forEach(t),E4r=i(ui),J3e=n(ui,"P",{});var $Ft=s(J3e);C4r=r($Ft,"Examples:"),$Ft.forEach(t),w4r=i(ui),m(Yy.$$.fragment,ui),ui.forEach(t),A4r=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(Ky.$$.fragment,ka),y4r=i(ka),Y3e=n(ka,"P",{});var IFt=s(Y3e);L4r=r(IFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),IFt.forEach(t),x4r=i(ka),Sn=n(ka,"P",{});var nE=s(Sn);k4r=r(nE,"The model class to instantiate is selected based on the "),K3e=n(nE,"CODE",{});var qFt=s(K3e);S4r=r(qFt,"model_type"),qFt.forEach(t),R4r=r(nE,` property of the config object (either
passed as an argument or loaded from `),Z3e=n(nE,"CODE",{});var NFt=s(Z3e);B4r=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),P4r=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e2e=n(nE,"CODE",{});var jFt=s(e2e);$4r=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),I4r=r(nE,":"),nE.forEach(t),q4r=i(ka),fe=n(ka,"UL",{});var pe=s(fe);X7=n(pe,"LI",{});var vke=s(X7);o2e=n(vke,"STRONG",{});var DFt=s(o2e);N4r=r(DFt,"albert"),DFt.forEach(t),j4r=r(vke," \u2014 "),rW=n(vke,"A",{href:!0});var GFt=s(rW);D4r=r(GFt,"FlaxAlbertForPreTraining"),GFt.forEach(t),G4r=r(vke," (ALBERT model)"),vke.forEach(t),O4r=i(pe),z7=n(pe,"LI",{});var Tke=s(z7);r2e=n(Tke,"STRONG",{});var OFt=s(r2e);V4r=r(OFt,"bart"),OFt.forEach(t),X4r=r(Tke," \u2014 "),tW=n(Tke,"A",{href:!0});var VFt=s(tW);z4r=r(VFt,"FlaxBartForConditionalGeneration"),VFt.forEach(t),Q4r=r(Tke," (BART model)"),Tke.forEach(t),W4r=i(pe),Q7=n(pe,"LI",{});var Mke=s(Q7);t2e=n(Mke,"STRONG",{});var XFt=s(t2e);H4r=r(XFt,"bert"),XFt.forEach(t),U4r=r(Mke," \u2014 "),aW=n(Mke,"A",{href:!0});var zFt=s(aW);J4r=r(zFt,"FlaxBertForPreTraining"),zFt.forEach(t),Y4r=r(Mke," (BERT model)"),Mke.forEach(t),K4r=i(pe),W7=n(pe,"LI",{});var Eke=s(W7);a2e=n(Eke,"STRONG",{});var QFt=s(a2e);Z4r=r(QFt,"big_bird"),QFt.forEach(t),eEr=r(Eke," \u2014 "),nW=n(Eke,"A",{href:!0});var WFt=s(nW);oEr=r(WFt,"FlaxBigBirdForPreTraining"),WFt.forEach(t),rEr=r(Eke," (BigBird model)"),Eke.forEach(t),tEr=i(pe),H7=n(pe,"LI",{});var Cke=s(H7);n2e=n(Cke,"STRONG",{});var HFt=s(n2e);aEr=r(HFt,"electra"),HFt.forEach(t),nEr=r(Cke," \u2014 "),sW=n(Cke,"A",{href:!0});var UFt=s(sW);sEr=r(UFt,"FlaxElectraForPreTraining"),UFt.forEach(t),lEr=r(Cke," (ELECTRA model)"),Cke.forEach(t),iEr=i(pe),U7=n(pe,"LI",{});var wke=s(U7);s2e=n(wke,"STRONG",{});var JFt=s(s2e);dEr=r(JFt,"mbart"),JFt.forEach(t),cEr=r(wke," \u2014 "),lW=n(wke,"A",{href:!0});var YFt=s(lW);fEr=r(YFt,"FlaxMBartForConditionalGeneration"),YFt.forEach(t),mEr=r(wke," (mBART model)"),wke.forEach(t),gEr=i(pe),J7=n(pe,"LI",{});var Ake=s(J7);l2e=n(Ake,"STRONG",{});var KFt=s(l2e);hEr=r(KFt,"mt5"),KFt.forEach(t),pEr=r(Ake," \u2014 "),iW=n(Ake,"A",{href:!0});var ZFt=s(iW);_Er=r(ZFt,"FlaxMT5ForConditionalGeneration"),ZFt.forEach(t),uEr=r(Ake," (mT5 model)"),Ake.forEach(t),bEr=i(pe),Y7=n(pe,"LI",{});var yke=s(Y7);i2e=n(yke,"STRONG",{});var evt=s(i2e);FEr=r(evt,"roberta"),evt.forEach(t),vEr=r(yke," \u2014 "),dW=n(yke,"A",{href:!0});var ovt=s(dW);TEr=r(ovt,"FlaxRobertaForMaskedLM"),ovt.forEach(t),MEr=r(yke," (RoBERTa model)"),yke.forEach(t),EEr=i(pe),K7=n(pe,"LI",{});var Lke=s(K7);d2e=n(Lke,"STRONG",{});var rvt=s(d2e);CEr=r(rvt,"roformer"),rvt.forEach(t),wEr=r(Lke," \u2014 "),cW=n(Lke,"A",{href:!0});var tvt=s(cW);AEr=r(tvt,"FlaxRoFormerForMaskedLM"),tvt.forEach(t),yEr=r(Lke," (RoFormer model)"),Lke.forEach(t),LEr=i(pe),Z7=n(pe,"LI",{});var xke=s(Z7);c2e=n(xke,"STRONG",{});var avt=s(c2e);xEr=r(avt,"t5"),avt.forEach(t),kEr=r(xke," \u2014 "),fW=n(xke,"A",{href:!0});var nvt=s(fW);SEr=r(nvt,"FlaxT5ForConditionalGeneration"),nvt.forEach(t),REr=r(xke," (T5 model)"),xke.forEach(t),BEr=i(pe),eM=n(pe,"LI",{});var kke=s(eM);f2e=n(kke,"STRONG",{});var svt=s(f2e);PEr=r(svt,"wav2vec2"),svt.forEach(t),$Er=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var lvt=s(mW);IEr=r(lvt,"FlaxWav2Vec2ForPreTraining"),lvt.forEach(t),qEr=r(kke," (Wav2Vec2 model)"),kke.forEach(t),NEr=i(pe),oM=n(pe,"LI",{});var Ske=s(oM);m2e=n(Ske,"STRONG",{});var ivt=s(m2e);jEr=r(ivt,"xlm-roberta"),ivt.forEach(t),DEr=r(Ske," \u2014 "),gW=n(Ske,"A",{href:!0});var dvt=s(gW);GEr=r(dvt,"FlaxXLMRobertaForMaskedLM"),dvt.forEach(t),OEr=r(Ske," (XLM-RoBERTa model)"),Ske.forEach(t),pe.forEach(t),VEr=i(ka),g2e=n(ka,"P",{});var cvt=s(g2e);XEr=r(cvt,"Examples:"),cvt.forEach(t),zEr=i(ka),m(Zy.$$.fragment,ka),ka.forEach(t),_i.forEach(t),vBe=i(c),lf=n(c,"H2",{class:!0});var S$e=s(lf);rM=n(S$e,"A",{id:!0,class:!0,href:!0});var fvt=s(rM);h2e=n(fvt,"SPAN",{});var mvt=s(h2e);m(eL.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),QEr=i(S$e),p2e=n(S$e,"SPAN",{});var gvt=s(p2e);WEr=r(gvt,"FlaxAutoModelForMaskedLM"),gvt.forEach(t),S$e.forEach(t),TBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(oL.$$.fragment,bi),HEr=i(bi),df=n(bi,"P",{});var TJ=s(df);UEr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hW=n(TJ,"A",{href:!0});var hvt=s(hW);JEr=r(hvt,"from_pretrained()"),hvt.forEach(t),YEr=r(TJ," class method or the "),pW=n(TJ,"A",{href:!0});var pvt=s(pW);KEr=r(pvt,"from_config()"),pvt.forEach(t),ZEr=r(TJ,` class
method.`),TJ.forEach(t),eCr=i(bi),rL=n(bi,"P",{});var R$e=s(rL);oCr=r(R$e,"This class cannot be instantiated directly using "),_2e=n(R$e,"CODE",{});var _vt=s(_2e);rCr=r(_vt,"__init__()"),_vt.forEach(t),tCr=r(R$e," (throws an error)."),R$e.forEach(t),aCr=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(tL.$$.fragment,Fi),nCr=i(Fi),u2e=n(Fi,"P",{});var uvt=s(u2e);sCr=r(uvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),uvt.forEach(t),lCr=i(Fi),cf=n(Fi,"P",{});var MJ=s(cf);iCr=r(MJ,`Note:
Loading a model from its configuration file does `),b2e=n(MJ,"STRONG",{});var bvt=s(b2e);dCr=r(bvt,"not"),bvt.forEach(t),cCr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(MJ,"A",{href:!0});var Fvt=s(_W);fCr=r(Fvt,"from_pretrained()"),Fvt.forEach(t),mCr=r(MJ," to load the model weights."),MJ.forEach(t),gCr=i(Fi),F2e=n(Fi,"P",{});var vvt=s(F2e);hCr=r(vvt,"Examples:"),vvt.forEach(t),pCr=i(Fi),m(aL.$$.fragment,Fi),Fi.forEach(t),_Cr=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(nL.$$.fragment,Sa),uCr=i(Sa),v2e=n(Sa,"P",{});var Tvt=s(v2e);bCr=r(Tvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Tvt.forEach(t),FCr=i(Sa),Rn=n(Sa,"P",{});var sE=s(Rn);vCr=r(sE,"The model class to instantiate is selected based on the "),T2e=n(sE,"CODE",{});var Mvt=s(T2e);TCr=r(Mvt,"model_type"),Mvt.forEach(t),MCr=r(sE,` property of the config object (either
passed as an argument or loaded from `),M2e=n(sE,"CODE",{});var Evt=s(M2e);ECr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),CCr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E2e=n(sE,"CODE",{});var Cvt=s(E2e);wCr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),ACr=r(sE,":"),sE.forEach(t),yCr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);tM=n(Ae,"LI",{});var Rke=s(tM);C2e=n(Rke,"STRONG",{});var wvt=s(C2e);LCr=r(wvt,"albert"),wvt.forEach(t),xCr=r(Rke," \u2014 "),uW=n(Rke,"A",{href:!0});var Avt=s(uW);kCr=r(Avt,"FlaxAlbertForMaskedLM"),Avt.forEach(t),SCr=r(Rke," (ALBERT model)"),Rke.forEach(t),RCr=i(Ae),aM=n(Ae,"LI",{});var Bke=s(aM);w2e=n(Bke,"STRONG",{});var yvt=s(w2e);BCr=r(yvt,"bart"),yvt.forEach(t),PCr=r(Bke," \u2014 "),bW=n(Bke,"A",{href:!0});var Lvt=s(bW);$Cr=r(Lvt,"FlaxBartForConditionalGeneration"),Lvt.forEach(t),ICr=r(Bke," (BART model)"),Bke.forEach(t),qCr=i(Ae),nM=n(Ae,"LI",{});var Pke=s(nM);A2e=n(Pke,"STRONG",{});var xvt=s(A2e);NCr=r(xvt,"bert"),xvt.forEach(t),jCr=r(Pke," \u2014 "),FW=n(Pke,"A",{href:!0});var kvt=s(FW);DCr=r(kvt,"FlaxBertForMaskedLM"),kvt.forEach(t),GCr=r(Pke," (BERT model)"),Pke.forEach(t),OCr=i(Ae),sM=n(Ae,"LI",{});var $ke=s(sM);y2e=n($ke,"STRONG",{});var Svt=s(y2e);VCr=r(Svt,"big_bird"),Svt.forEach(t),XCr=r($ke," \u2014 "),vW=n($ke,"A",{href:!0});var Rvt=s(vW);zCr=r(Rvt,"FlaxBigBirdForMaskedLM"),Rvt.forEach(t),QCr=r($ke," (BigBird model)"),$ke.forEach(t),WCr=i(Ae),lM=n(Ae,"LI",{});var Ike=s(lM);L2e=n(Ike,"STRONG",{});var Bvt=s(L2e);HCr=r(Bvt,"distilbert"),Bvt.forEach(t),UCr=r(Ike," \u2014 "),TW=n(Ike,"A",{href:!0});var Pvt=s(TW);JCr=r(Pvt,"FlaxDistilBertForMaskedLM"),Pvt.forEach(t),YCr=r(Ike," (DistilBERT model)"),Ike.forEach(t),KCr=i(Ae),iM=n(Ae,"LI",{});var qke=s(iM);x2e=n(qke,"STRONG",{});var $vt=s(x2e);ZCr=r($vt,"electra"),$vt.forEach(t),ewr=r(qke," \u2014 "),MW=n(qke,"A",{href:!0});var Ivt=s(MW);owr=r(Ivt,"FlaxElectraForMaskedLM"),Ivt.forEach(t),rwr=r(qke," (ELECTRA model)"),qke.forEach(t),twr=i(Ae),dM=n(Ae,"LI",{});var Nke=s(dM);k2e=n(Nke,"STRONG",{});var qvt=s(k2e);awr=r(qvt,"mbart"),qvt.forEach(t),nwr=r(Nke," \u2014 "),EW=n(Nke,"A",{href:!0});var Nvt=s(EW);swr=r(Nvt,"FlaxMBartForConditionalGeneration"),Nvt.forEach(t),lwr=r(Nke," (mBART model)"),Nke.forEach(t),iwr=i(Ae),cM=n(Ae,"LI",{});var jke=s(cM);S2e=n(jke,"STRONG",{});var jvt=s(S2e);dwr=r(jvt,"roberta"),jvt.forEach(t),cwr=r(jke," \u2014 "),CW=n(jke,"A",{href:!0});var Dvt=s(CW);fwr=r(Dvt,"FlaxRobertaForMaskedLM"),Dvt.forEach(t),mwr=r(jke," (RoBERTa model)"),jke.forEach(t),gwr=i(Ae),fM=n(Ae,"LI",{});var Dke=s(fM);R2e=n(Dke,"STRONG",{});var Gvt=s(R2e);hwr=r(Gvt,"roformer"),Gvt.forEach(t),pwr=r(Dke," \u2014 "),wW=n(Dke,"A",{href:!0});var Ovt=s(wW);_wr=r(Ovt,"FlaxRoFormerForMaskedLM"),Ovt.forEach(t),uwr=r(Dke," (RoFormer model)"),Dke.forEach(t),bwr=i(Ae),mM=n(Ae,"LI",{});var Gke=s(mM);B2e=n(Gke,"STRONG",{});var Vvt=s(B2e);Fwr=r(Vvt,"xlm-roberta"),Vvt.forEach(t),vwr=r(Gke," \u2014 "),AW=n(Gke,"A",{href:!0});var Xvt=s(AW);Twr=r(Xvt,"FlaxXLMRobertaForMaskedLM"),Xvt.forEach(t),Mwr=r(Gke," (XLM-RoBERTa model)"),Gke.forEach(t),Ae.forEach(t),Ewr=i(Sa),P2e=n(Sa,"P",{});var zvt=s(P2e);Cwr=r(zvt,"Examples:"),zvt.forEach(t),wwr=i(Sa),m(sL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),MBe=i(c),ff=n(c,"H2",{class:!0});var B$e=s(ff);gM=n(B$e,"A",{id:!0,class:!0,href:!0});var Qvt=s(gM);$2e=n(Qvt,"SPAN",{});var Wvt=s($2e);m(lL.$$.fragment,Wvt),Wvt.forEach(t),Qvt.forEach(t),Awr=i(B$e),I2e=n(B$e,"SPAN",{});var Hvt=s(I2e);ywr=r(Hvt,"FlaxAutoModelForSeq2SeqLM"),Hvt.forEach(t),B$e.forEach(t),EBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(iL.$$.fragment,vi),Lwr=i(vi),mf=n(vi,"P",{});var EJ=s(mf);xwr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yW=n(EJ,"A",{href:!0});var Uvt=s(yW);kwr=r(Uvt,"from_pretrained()"),Uvt.forEach(t),Swr=r(EJ," class method or the "),LW=n(EJ,"A",{href:!0});var Jvt=s(LW);Rwr=r(Jvt,"from_config()"),Jvt.forEach(t),Bwr=r(EJ,` class
method.`),EJ.forEach(t),Pwr=i(vi),dL=n(vi,"P",{});var P$e=s(dL);$wr=r(P$e,"This class cannot be instantiated directly using "),q2e=n(P$e,"CODE",{});var Yvt=s(q2e);Iwr=r(Yvt,"__init__()"),Yvt.forEach(t),qwr=r(P$e," (throws an error)."),P$e.forEach(t),Nwr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(cL.$$.fragment,Ti),jwr=i(Ti),N2e=n(Ti,"P",{});var Kvt=s(N2e);Dwr=r(Kvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kvt.forEach(t),Gwr=i(Ti),gf=n(Ti,"P",{});var CJ=s(gf);Owr=r(CJ,`Note:
Loading a model from its configuration file does `),j2e=n(CJ,"STRONG",{});var Zvt=s(j2e);Vwr=r(Zvt,"not"),Zvt.forEach(t),Xwr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(CJ,"A",{href:!0});var e6t=s(xW);zwr=r(e6t,"from_pretrained()"),e6t.forEach(t),Qwr=r(CJ," to load the model weights."),CJ.forEach(t),Wwr=i(Ti),D2e=n(Ti,"P",{});var o6t=s(D2e);Hwr=r(o6t,"Examples:"),o6t.forEach(t),Uwr=i(Ti),m(fL.$$.fragment,Ti),Ti.forEach(t),Jwr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(mL.$$.fragment,Ra),Ywr=i(Ra),G2e=n(Ra,"P",{});var r6t=s(G2e);Kwr=r(r6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r6t.forEach(t),Zwr=i(Ra),Bn=n(Ra,"P",{});var lE=s(Bn);eAr=r(lE,"The model class to instantiate is selected based on the "),O2e=n(lE,"CODE",{});var t6t=s(O2e);oAr=r(t6t,"model_type"),t6t.forEach(t),rAr=r(lE,` property of the config object (either
passed as an argument or loaded from `),V2e=n(lE,"CODE",{});var a6t=s(V2e);tAr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),aAr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(lE,"CODE",{});var n6t=s(X2e);nAr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),sAr=r(lE,":"),lE.forEach(t),lAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);hM=n(so,"LI",{});var Oke=s(hM);z2e=n(Oke,"STRONG",{});var s6t=s(z2e);iAr=r(s6t,"bart"),s6t.forEach(t),dAr=r(Oke," \u2014 "),kW=n(Oke,"A",{href:!0});var l6t=s(kW);cAr=r(l6t,"FlaxBartForConditionalGeneration"),l6t.forEach(t),fAr=r(Oke," (BART model)"),Oke.forEach(t),mAr=i(so),pM=n(so,"LI",{});var Vke=s(pM);Q2e=n(Vke,"STRONG",{});var i6t=s(Q2e);gAr=r(i6t,"blenderbot"),i6t.forEach(t),hAr=r(Vke," \u2014 "),SW=n(Vke,"A",{href:!0});var d6t=s(SW);pAr=r(d6t,"FlaxBlenderbotForConditionalGeneration"),d6t.forEach(t),_Ar=r(Vke," (Blenderbot model)"),Vke.forEach(t),uAr=i(so),_M=n(so,"LI",{});var Xke=s(_M);W2e=n(Xke,"STRONG",{});var c6t=s(W2e);bAr=r(c6t,"blenderbot-small"),c6t.forEach(t),FAr=r(Xke," \u2014 "),RW=n(Xke,"A",{href:!0});var f6t=s(RW);vAr=r(f6t,"FlaxBlenderbotSmallForConditionalGeneration"),f6t.forEach(t),TAr=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),MAr=i(so),uM=n(so,"LI",{});var zke=s(uM);H2e=n(zke,"STRONG",{});var m6t=s(H2e);EAr=r(m6t,"encoder-decoder"),m6t.forEach(t),CAr=r(zke," \u2014 "),BW=n(zke,"A",{href:!0});var g6t=s(BW);wAr=r(g6t,"FlaxEncoderDecoderModel"),g6t.forEach(t),AAr=r(zke," (Encoder decoder model)"),zke.forEach(t),yAr=i(so),bM=n(so,"LI",{});var Qke=s(bM);U2e=n(Qke,"STRONG",{});var h6t=s(U2e);LAr=r(h6t,"marian"),h6t.forEach(t),xAr=r(Qke," \u2014 "),PW=n(Qke,"A",{href:!0});var p6t=s(PW);kAr=r(p6t,"FlaxMarianMTModel"),p6t.forEach(t),SAr=r(Qke," (Marian model)"),Qke.forEach(t),RAr=i(so),FM=n(so,"LI",{});var Wke=s(FM);J2e=n(Wke,"STRONG",{});var _6t=s(J2e);BAr=r(_6t,"mbart"),_6t.forEach(t),PAr=r(Wke," \u2014 "),$W=n(Wke,"A",{href:!0});var u6t=s($W);$Ar=r(u6t,"FlaxMBartForConditionalGeneration"),u6t.forEach(t),IAr=r(Wke," (mBART model)"),Wke.forEach(t),qAr=i(so),vM=n(so,"LI",{});var Hke=s(vM);Y2e=n(Hke,"STRONG",{});var b6t=s(Y2e);NAr=r(b6t,"mt5"),b6t.forEach(t),jAr=r(Hke," \u2014 "),IW=n(Hke,"A",{href:!0});var F6t=s(IW);DAr=r(F6t,"FlaxMT5ForConditionalGeneration"),F6t.forEach(t),GAr=r(Hke," (mT5 model)"),Hke.forEach(t),OAr=i(so),TM=n(so,"LI",{});var Uke=s(TM);K2e=n(Uke,"STRONG",{});var v6t=s(K2e);VAr=r(v6t,"pegasus"),v6t.forEach(t),XAr=r(Uke," \u2014 "),qW=n(Uke,"A",{href:!0});var T6t=s(qW);zAr=r(T6t,"FlaxPegasusForConditionalGeneration"),T6t.forEach(t),QAr=r(Uke," (Pegasus model)"),Uke.forEach(t),WAr=i(so),MM=n(so,"LI",{});var Jke=s(MM);Z2e=n(Jke,"STRONG",{});var M6t=s(Z2e);HAr=r(M6t,"t5"),M6t.forEach(t),UAr=r(Jke," \u2014 "),NW=n(Jke,"A",{href:!0});var E6t=s(NW);JAr=r(E6t,"FlaxT5ForConditionalGeneration"),E6t.forEach(t),YAr=r(Jke," (T5 model)"),Jke.forEach(t),so.forEach(t),KAr=i(Ra),eFe=n(Ra,"P",{});var C6t=s(eFe);ZAr=r(C6t,"Examples:"),C6t.forEach(t),e0r=i(Ra),m(gL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),CBe=i(c),hf=n(c,"H2",{class:!0});var $$e=s(hf);EM=n($$e,"A",{id:!0,class:!0,href:!0});var w6t=s(EM);oFe=n(w6t,"SPAN",{});var A6t=s(oFe);m(hL.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),o0r=i($$e),rFe=n($$e,"SPAN",{});var y6t=s(rFe);r0r=r(y6t,"FlaxAutoModelForSequenceClassification"),y6t.forEach(t),$$e.forEach(t),wBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(pL.$$.fragment,Mi),t0r=i(Mi),pf=n(Mi,"P",{});var wJ=s(pf);a0r=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jW=n(wJ,"A",{href:!0});var L6t=s(jW);n0r=r(L6t,"from_pretrained()"),L6t.forEach(t),s0r=r(wJ," class method or the "),DW=n(wJ,"A",{href:!0});var x6t=s(DW);l0r=r(x6t,"from_config()"),x6t.forEach(t),i0r=r(wJ,` class
method.`),wJ.forEach(t),d0r=i(Mi),_L=n(Mi,"P",{});var I$e=s(_L);c0r=r(I$e,"This class cannot be instantiated directly using "),tFe=n(I$e,"CODE",{});var k6t=s(tFe);f0r=r(k6t,"__init__()"),k6t.forEach(t),m0r=r(I$e," (throws an error)."),I$e.forEach(t),g0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(uL.$$.fragment,Ei),h0r=i(Ei),aFe=n(Ei,"P",{});var S6t=s(aFe);p0r=r(S6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S6t.forEach(t),_0r=i(Ei),_f=n(Ei,"P",{});var AJ=s(_f);u0r=r(AJ,`Note:
Loading a model from its configuration file does `),nFe=n(AJ,"STRONG",{});var R6t=s(nFe);b0r=r(R6t,"not"),R6t.forEach(t),F0r=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(AJ,"A",{href:!0});var B6t=s(GW);v0r=r(B6t,"from_pretrained()"),B6t.forEach(t),T0r=r(AJ," to load the model weights."),AJ.forEach(t),M0r=i(Ei),sFe=n(Ei,"P",{});var P6t=s(sFe);E0r=r(P6t,"Examples:"),P6t.forEach(t),C0r=i(Ei),m(bL.$$.fragment,Ei),Ei.forEach(t),w0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(FL.$$.fragment,Ba),A0r=i(Ba),lFe=n(Ba,"P",{});var $6t=s(lFe);y0r=r($6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$6t.forEach(t),L0r=i(Ba),Pn=n(Ba,"P",{});var iE=s(Pn);x0r=r(iE,"The model class to instantiate is selected based on the "),iFe=n(iE,"CODE",{});var I6t=s(iFe);k0r=r(I6t,"model_type"),I6t.forEach(t),S0r=r(iE,` property of the config object (either
passed as an argument or loaded from `),dFe=n(iE,"CODE",{});var q6t=s(dFe);R0r=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),B0r=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(iE,"CODE",{});var N6t=s(cFe);P0r=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),$0r=r(iE,":"),iE.forEach(t),I0r=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);CM=n(ye,"LI",{});var Yke=s(CM);fFe=n(Yke,"STRONG",{});var j6t=s(fFe);q0r=r(j6t,"albert"),j6t.forEach(t),N0r=r(Yke," \u2014 "),OW=n(Yke,"A",{href:!0});var D6t=s(OW);j0r=r(D6t,"FlaxAlbertForSequenceClassification"),D6t.forEach(t),D0r=r(Yke," (ALBERT model)"),Yke.forEach(t),G0r=i(ye),wM=n(ye,"LI",{});var Kke=s(wM);mFe=n(Kke,"STRONG",{});var G6t=s(mFe);O0r=r(G6t,"bart"),G6t.forEach(t),V0r=r(Kke," \u2014 "),VW=n(Kke,"A",{href:!0});var O6t=s(VW);X0r=r(O6t,"FlaxBartForSequenceClassification"),O6t.forEach(t),z0r=r(Kke," (BART model)"),Kke.forEach(t),Q0r=i(ye),AM=n(ye,"LI",{});var Zke=s(AM);gFe=n(Zke,"STRONG",{});var V6t=s(gFe);W0r=r(V6t,"bert"),V6t.forEach(t),H0r=r(Zke," \u2014 "),XW=n(Zke,"A",{href:!0});var X6t=s(XW);U0r=r(X6t,"FlaxBertForSequenceClassification"),X6t.forEach(t),J0r=r(Zke," (BERT model)"),Zke.forEach(t),Y0r=i(ye),yM=n(ye,"LI",{});var eSe=s(yM);hFe=n(eSe,"STRONG",{});var z6t=s(hFe);K0r=r(z6t,"big_bird"),z6t.forEach(t),Z0r=r(eSe," \u2014 "),zW=n(eSe,"A",{href:!0});var Q6t=s(zW);eyr=r(Q6t,"FlaxBigBirdForSequenceClassification"),Q6t.forEach(t),oyr=r(eSe," (BigBird model)"),eSe.forEach(t),ryr=i(ye),LM=n(ye,"LI",{});var oSe=s(LM);pFe=n(oSe,"STRONG",{});var W6t=s(pFe);tyr=r(W6t,"distilbert"),W6t.forEach(t),ayr=r(oSe," \u2014 "),QW=n(oSe,"A",{href:!0});var H6t=s(QW);nyr=r(H6t,"FlaxDistilBertForSequenceClassification"),H6t.forEach(t),syr=r(oSe," (DistilBERT model)"),oSe.forEach(t),lyr=i(ye),xM=n(ye,"LI",{});var rSe=s(xM);_Fe=n(rSe,"STRONG",{});var U6t=s(_Fe);iyr=r(U6t,"electra"),U6t.forEach(t),dyr=r(rSe," \u2014 "),WW=n(rSe,"A",{href:!0});var J6t=s(WW);cyr=r(J6t,"FlaxElectraForSequenceClassification"),J6t.forEach(t),fyr=r(rSe," (ELECTRA model)"),rSe.forEach(t),myr=i(ye),kM=n(ye,"LI",{});var tSe=s(kM);uFe=n(tSe,"STRONG",{});var Y6t=s(uFe);gyr=r(Y6t,"mbart"),Y6t.forEach(t),hyr=r(tSe," \u2014 "),HW=n(tSe,"A",{href:!0});var K6t=s(HW);pyr=r(K6t,"FlaxMBartForSequenceClassification"),K6t.forEach(t),_yr=r(tSe," (mBART model)"),tSe.forEach(t),uyr=i(ye),SM=n(ye,"LI",{});var aSe=s(SM);bFe=n(aSe,"STRONG",{});var Z6t=s(bFe);byr=r(Z6t,"roberta"),Z6t.forEach(t),Fyr=r(aSe," \u2014 "),UW=n(aSe,"A",{href:!0});var eTt=s(UW);vyr=r(eTt,"FlaxRobertaForSequenceClassification"),eTt.forEach(t),Tyr=r(aSe," (RoBERTa model)"),aSe.forEach(t),Myr=i(ye),RM=n(ye,"LI",{});var nSe=s(RM);FFe=n(nSe,"STRONG",{});var oTt=s(FFe);Eyr=r(oTt,"roformer"),oTt.forEach(t),Cyr=r(nSe," \u2014 "),JW=n(nSe,"A",{href:!0});var rTt=s(JW);wyr=r(rTt,"FlaxRoFormerForSequenceClassification"),rTt.forEach(t),Ayr=r(nSe," (RoFormer model)"),nSe.forEach(t),yyr=i(ye),BM=n(ye,"LI",{});var sSe=s(BM);vFe=n(sSe,"STRONG",{});var tTt=s(vFe);Lyr=r(tTt,"xlm-roberta"),tTt.forEach(t),xyr=r(sSe," \u2014 "),YW=n(sSe,"A",{href:!0});var aTt=s(YW);kyr=r(aTt,"FlaxXLMRobertaForSequenceClassification"),aTt.forEach(t),Syr=r(sSe," (XLM-RoBERTa model)"),sSe.forEach(t),ye.forEach(t),Ryr=i(Ba),TFe=n(Ba,"P",{});var nTt=s(TFe);Byr=r(nTt,"Examples:"),nTt.forEach(t),Pyr=i(Ba),m(vL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),ABe=i(c),uf=n(c,"H2",{class:!0});var q$e=s(uf);PM=n(q$e,"A",{id:!0,class:!0,href:!0});var sTt=s(PM);MFe=n(sTt,"SPAN",{});var lTt=s(MFe);m(TL.$$.fragment,lTt),lTt.forEach(t),sTt.forEach(t),$yr=i(q$e),EFe=n(q$e,"SPAN",{});var iTt=s(EFe);Iyr=r(iTt,"FlaxAutoModelForQuestionAnswering"),iTt.forEach(t),q$e.forEach(t),yBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(ML.$$.fragment,Ci),qyr=i(Ci),bf=n(Ci,"P",{});var yJ=s(bf);Nyr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KW=n(yJ,"A",{href:!0});var dTt=s(KW);jyr=r(dTt,"from_pretrained()"),dTt.forEach(t),Dyr=r(yJ," class method or the "),ZW=n(yJ,"A",{href:!0});var cTt=s(ZW);Gyr=r(cTt,"from_config()"),cTt.forEach(t),Oyr=r(yJ,` class
method.`),yJ.forEach(t),Vyr=i(Ci),EL=n(Ci,"P",{});var N$e=s(EL);Xyr=r(N$e,"This class cannot be instantiated directly using "),CFe=n(N$e,"CODE",{});var fTt=s(CFe);zyr=r(fTt,"__init__()"),fTt.forEach(t),Qyr=r(N$e," (throws an error)."),N$e.forEach(t),Wyr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(CL.$$.fragment,wi),Hyr=i(wi),wFe=n(wi,"P",{});var mTt=s(wFe);Uyr=r(mTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),mTt.forEach(t),Jyr=i(wi),Ff=n(wi,"P",{});var LJ=s(Ff);Yyr=r(LJ,`Note:
Loading a model from its configuration file does `),AFe=n(LJ,"STRONG",{});var gTt=s(AFe);Kyr=r(gTt,"not"),gTt.forEach(t),Zyr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(LJ,"A",{href:!0});var hTt=s(eH);eLr=r(hTt,"from_pretrained()"),hTt.forEach(t),oLr=r(LJ," to load the model weights."),LJ.forEach(t),rLr=i(wi),yFe=n(wi,"P",{});var pTt=s(yFe);tLr=r(pTt,"Examples:"),pTt.forEach(t),aLr=i(wi),m(wL.$$.fragment,wi),wi.forEach(t),nLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(AL.$$.fragment,Pa),sLr=i(Pa),LFe=n(Pa,"P",{});var _Tt=s(LFe);lLr=r(_Tt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Tt.forEach(t),iLr=i(Pa),$n=n(Pa,"P",{});var dE=s($n);dLr=r(dE,"The model class to instantiate is selected based on the "),xFe=n(dE,"CODE",{});var uTt=s(xFe);cLr=r(uTt,"model_type"),uTt.forEach(t),fLr=r(dE,` property of the config object (either
passed as an argument or loaded from `),kFe=n(dE,"CODE",{});var bTt=s(kFe);mLr=r(bTt,"pretrained_model_name_or_path"),bTt.forEach(t),gLr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(dE,"CODE",{});var FTt=s(SFe);hLr=r(FTt,"pretrained_model_name_or_path"),FTt.forEach(t),pLr=r(dE,":"),dE.forEach(t),_Lr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);$M=n(Le,"LI",{});var lSe=s($M);RFe=n(lSe,"STRONG",{});var vTt=s(RFe);uLr=r(vTt,"albert"),vTt.forEach(t),bLr=r(lSe," \u2014 "),oH=n(lSe,"A",{href:!0});var TTt=s(oH);FLr=r(TTt,"FlaxAlbertForQuestionAnswering"),TTt.forEach(t),vLr=r(lSe," (ALBERT model)"),lSe.forEach(t),TLr=i(Le),IM=n(Le,"LI",{});var iSe=s(IM);BFe=n(iSe,"STRONG",{});var MTt=s(BFe);MLr=r(MTt,"bart"),MTt.forEach(t),ELr=r(iSe," \u2014 "),rH=n(iSe,"A",{href:!0});var ETt=s(rH);CLr=r(ETt,"FlaxBartForQuestionAnswering"),ETt.forEach(t),wLr=r(iSe," (BART model)"),iSe.forEach(t),ALr=i(Le),qM=n(Le,"LI",{});var dSe=s(qM);PFe=n(dSe,"STRONG",{});var CTt=s(PFe);yLr=r(CTt,"bert"),CTt.forEach(t),LLr=r(dSe," \u2014 "),tH=n(dSe,"A",{href:!0});var wTt=s(tH);xLr=r(wTt,"FlaxBertForQuestionAnswering"),wTt.forEach(t),kLr=r(dSe," (BERT model)"),dSe.forEach(t),SLr=i(Le),NM=n(Le,"LI",{});var cSe=s(NM);$Fe=n(cSe,"STRONG",{});var ATt=s($Fe);RLr=r(ATt,"big_bird"),ATt.forEach(t),BLr=r(cSe," \u2014 "),aH=n(cSe,"A",{href:!0});var yTt=s(aH);PLr=r(yTt,"FlaxBigBirdForQuestionAnswering"),yTt.forEach(t),$Lr=r(cSe," (BigBird model)"),cSe.forEach(t),ILr=i(Le),jM=n(Le,"LI",{});var fSe=s(jM);IFe=n(fSe,"STRONG",{});var LTt=s(IFe);qLr=r(LTt,"distilbert"),LTt.forEach(t),NLr=r(fSe," \u2014 "),nH=n(fSe,"A",{href:!0});var xTt=s(nH);jLr=r(xTt,"FlaxDistilBertForQuestionAnswering"),xTt.forEach(t),DLr=r(fSe," (DistilBERT model)"),fSe.forEach(t),GLr=i(Le),DM=n(Le,"LI",{});var mSe=s(DM);qFe=n(mSe,"STRONG",{});var kTt=s(qFe);OLr=r(kTt,"electra"),kTt.forEach(t),VLr=r(mSe," \u2014 "),sH=n(mSe,"A",{href:!0});var STt=s(sH);XLr=r(STt,"FlaxElectraForQuestionAnswering"),STt.forEach(t),zLr=r(mSe," (ELECTRA model)"),mSe.forEach(t),QLr=i(Le),GM=n(Le,"LI",{});var gSe=s(GM);NFe=n(gSe,"STRONG",{});var RTt=s(NFe);WLr=r(RTt,"mbart"),RTt.forEach(t),HLr=r(gSe," \u2014 "),lH=n(gSe,"A",{href:!0});var BTt=s(lH);ULr=r(BTt,"FlaxMBartForQuestionAnswering"),BTt.forEach(t),JLr=r(gSe," (mBART model)"),gSe.forEach(t),YLr=i(Le),OM=n(Le,"LI",{});var hSe=s(OM);jFe=n(hSe,"STRONG",{});var PTt=s(jFe);KLr=r(PTt,"roberta"),PTt.forEach(t),ZLr=r(hSe," \u2014 "),iH=n(hSe,"A",{href:!0});var $Tt=s(iH);e8r=r($Tt,"FlaxRobertaForQuestionAnswering"),$Tt.forEach(t),o8r=r(hSe," (RoBERTa model)"),hSe.forEach(t),r8r=i(Le),VM=n(Le,"LI",{});var pSe=s(VM);DFe=n(pSe,"STRONG",{});var ITt=s(DFe);t8r=r(ITt,"roformer"),ITt.forEach(t),a8r=r(pSe," \u2014 "),dH=n(pSe,"A",{href:!0});var qTt=s(dH);n8r=r(qTt,"FlaxRoFormerForQuestionAnswering"),qTt.forEach(t),s8r=r(pSe," (RoFormer model)"),pSe.forEach(t),l8r=i(Le),XM=n(Le,"LI",{});var _Se=s(XM);GFe=n(_Se,"STRONG",{});var NTt=s(GFe);i8r=r(NTt,"xlm-roberta"),NTt.forEach(t),d8r=r(_Se," \u2014 "),cH=n(_Se,"A",{href:!0});var jTt=s(cH);c8r=r(jTt,"FlaxXLMRobertaForQuestionAnswering"),jTt.forEach(t),f8r=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),Le.forEach(t),m8r=i(Pa),OFe=n(Pa,"P",{});var DTt=s(OFe);g8r=r(DTt,"Examples:"),DTt.forEach(t),h8r=i(Pa),m(yL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),LBe=i(c),vf=n(c,"H2",{class:!0});var j$e=s(vf);zM=n(j$e,"A",{id:!0,class:!0,href:!0});var GTt=s(zM);VFe=n(GTt,"SPAN",{});var OTt=s(VFe);m(LL.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),p8r=i(j$e),XFe=n(j$e,"SPAN",{});var VTt=s(XFe);_8r=r(VTt,"FlaxAutoModelForTokenClassification"),VTt.forEach(t),j$e.forEach(t),xBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(xL.$$.fragment,Ai),u8r=i(Ai),Tf=n(Ai,"P",{});var xJ=s(Tf);b8r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=n(xJ,"A",{href:!0});var XTt=s(fH);F8r=r(XTt,"from_pretrained()"),XTt.forEach(t),v8r=r(xJ," class method or the "),mH=n(xJ,"A",{href:!0});var zTt=s(mH);T8r=r(zTt,"from_config()"),zTt.forEach(t),M8r=r(xJ,` class
method.`),xJ.forEach(t),E8r=i(Ai),kL=n(Ai,"P",{});var D$e=s(kL);C8r=r(D$e,"This class cannot be instantiated directly using "),zFe=n(D$e,"CODE",{});var QTt=s(zFe);w8r=r(QTt,"__init__()"),QTt.forEach(t),A8r=r(D$e," (throws an error)."),D$e.forEach(t),y8r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(SL.$$.fragment,yi),L8r=i(yi),QFe=n(yi,"P",{});var WTt=s(QFe);x8r=r(WTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WTt.forEach(t),k8r=i(yi),Mf=n(yi,"P",{});var kJ=s(Mf);S8r=r(kJ,`Note:
Loading a model from its configuration file does `),WFe=n(kJ,"STRONG",{});var HTt=s(WFe);R8r=r(HTt,"not"),HTt.forEach(t),B8r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(kJ,"A",{href:!0});var UTt=s(gH);P8r=r(UTt,"from_pretrained()"),UTt.forEach(t),$8r=r(kJ," to load the model weights."),kJ.forEach(t),I8r=i(yi),HFe=n(yi,"P",{});var JTt=s(HFe);q8r=r(JTt,"Examples:"),JTt.forEach(t),N8r=i(yi),m(RL.$$.fragment,yi),yi.forEach(t),j8r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(BL.$$.fragment,$a),D8r=i($a),UFe=n($a,"P",{});var YTt=s(UFe);G8r=r(YTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YTt.forEach(t),O8r=i($a),In=n($a,"P",{});var cE=s(In);V8r=r(cE,"The model class to instantiate is selected based on the "),JFe=n(cE,"CODE",{});var KTt=s(JFe);X8r=r(KTt,"model_type"),KTt.forEach(t),z8r=r(cE,` property of the config object (either
passed as an argument or loaded from `),YFe=n(cE,"CODE",{});var ZTt=s(YFe);Q8r=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),W8r=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KFe=n(cE,"CODE",{});var e7t=s(KFe);H8r=r(e7t,"pretrained_model_name_or_path"),e7t.forEach(t),U8r=r(cE,":"),cE.forEach(t),J8r=i($a),Be=n($a,"UL",{});var Oo=s(Be);QM=n(Oo,"LI",{});var uSe=s(QM);ZFe=n(uSe,"STRONG",{});var o7t=s(ZFe);Y8r=r(o7t,"albert"),o7t.forEach(t),K8r=r(uSe," \u2014 "),hH=n(uSe,"A",{href:!0});var r7t=s(hH);Z8r=r(r7t,"FlaxAlbertForTokenClassification"),r7t.forEach(t),e9r=r(uSe," (ALBERT model)"),uSe.forEach(t),o9r=i(Oo),WM=n(Oo,"LI",{});var bSe=s(WM);eve=n(bSe,"STRONG",{});var t7t=s(eve);r9r=r(t7t,"bert"),t7t.forEach(t),t9r=r(bSe," \u2014 "),pH=n(bSe,"A",{href:!0});var a7t=s(pH);a9r=r(a7t,"FlaxBertForTokenClassification"),a7t.forEach(t),n9r=r(bSe," (BERT model)"),bSe.forEach(t),s9r=i(Oo),HM=n(Oo,"LI",{});var FSe=s(HM);ove=n(FSe,"STRONG",{});var n7t=s(ove);l9r=r(n7t,"big_bird"),n7t.forEach(t),i9r=r(FSe," \u2014 "),_H=n(FSe,"A",{href:!0});var s7t=s(_H);d9r=r(s7t,"FlaxBigBirdForTokenClassification"),s7t.forEach(t),c9r=r(FSe," (BigBird model)"),FSe.forEach(t),f9r=i(Oo),UM=n(Oo,"LI",{});var vSe=s(UM);rve=n(vSe,"STRONG",{});var l7t=s(rve);m9r=r(l7t,"distilbert"),l7t.forEach(t),g9r=r(vSe," \u2014 "),uH=n(vSe,"A",{href:!0});var i7t=s(uH);h9r=r(i7t,"FlaxDistilBertForTokenClassification"),i7t.forEach(t),p9r=r(vSe," (DistilBERT model)"),vSe.forEach(t),_9r=i(Oo),JM=n(Oo,"LI",{});var TSe=s(JM);tve=n(TSe,"STRONG",{});var d7t=s(tve);u9r=r(d7t,"electra"),d7t.forEach(t),b9r=r(TSe," \u2014 "),bH=n(TSe,"A",{href:!0});var c7t=s(bH);F9r=r(c7t,"FlaxElectraForTokenClassification"),c7t.forEach(t),v9r=r(TSe," (ELECTRA model)"),TSe.forEach(t),T9r=i(Oo),YM=n(Oo,"LI",{});var MSe=s(YM);ave=n(MSe,"STRONG",{});var f7t=s(ave);M9r=r(f7t,"roberta"),f7t.forEach(t),E9r=r(MSe," \u2014 "),FH=n(MSe,"A",{href:!0});var m7t=s(FH);C9r=r(m7t,"FlaxRobertaForTokenClassification"),m7t.forEach(t),w9r=r(MSe," (RoBERTa model)"),MSe.forEach(t),A9r=i(Oo),KM=n(Oo,"LI",{});var ESe=s(KM);nve=n(ESe,"STRONG",{});var g7t=s(nve);y9r=r(g7t,"roformer"),g7t.forEach(t),L9r=r(ESe," \u2014 "),vH=n(ESe,"A",{href:!0});var h7t=s(vH);x9r=r(h7t,"FlaxRoFormerForTokenClassification"),h7t.forEach(t),k9r=r(ESe," (RoFormer model)"),ESe.forEach(t),S9r=i(Oo),ZM=n(Oo,"LI",{});var CSe=s(ZM);sve=n(CSe,"STRONG",{});var p7t=s(sve);R9r=r(p7t,"xlm-roberta"),p7t.forEach(t),B9r=r(CSe," \u2014 "),TH=n(CSe,"A",{href:!0});var _7t=s(TH);P9r=r(_7t,"FlaxXLMRobertaForTokenClassification"),_7t.forEach(t),$9r=r(CSe," (XLM-RoBERTa model)"),CSe.forEach(t),Oo.forEach(t),I9r=i($a),lve=n($a,"P",{});var u7t=s(lve);q9r=r(u7t,"Examples:"),u7t.forEach(t),N9r=i($a),m(PL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),kBe=i(c),Ef=n(c,"H2",{class:!0});var G$e=s(Ef);e4=n(G$e,"A",{id:!0,class:!0,href:!0});var b7t=s(e4);ive=n(b7t,"SPAN",{});var F7t=s(ive);m($L.$$.fragment,F7t),F7t.forEach(t),b7t.forEach(t),j9r=i(G$e),dve=n(G$e,"SPAN",{});var v7t=s(dve);D9r=r(v7t,"FlaxAutoModelForMultipleChoice"),v7t.forEach(t),G$e.forEach(t),SBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(IL.$$.fragment,Li),G9r=i(Li),Cf=n(Li,"P",{});var SJ=s(Cf);O9r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MH=n(SJ,"A",{href:!0});var T7t=s(MH);V9r=r(T7t,"from_pretrained()"),T7t.forEach(t),X9r=r(SJ," class method or the "),EH=n(SJ,"A",{href:!0});var M7t=s(EH);z9r=r(M7t,"from_config()"),M7t.forEach(t),Q9r=r(SJ,` class
method.`),SJ.forEach(t),W9r=i(Li),qL=n(Li,"P",{});var O$e=s(qL);H9r=r(O$e,"This class cannot be instantiated directly using "),cve=n(O$e,"CODE",{});var E7t=s(cve);U9r=r(E7t,"__init__()"),E7t.forEach(t),J9r=r(O$e," (throws an error)."),O$e.forEach(t),Y9r=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(NL.$$.fragment,xi),K9r=i(xi),fve=n(xi,"P",{});var C7t=s(fve);Z9r=r(C7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),C7t.forEach(t),exr=i(xi),wf=n(xi,"P",{});var RJ=s(wf);oxr=r(RJ,`Note:
Loading a model from its configuration file does `),mve=n(RJ,"STRONG",{});var w7t=s(mve);rxr=r(w7t,"not"),w7t.forEach(t),txr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(RJ,"A",{href:!0});var A7t=s(CH);axr=r(A7t,"from_pretrained()"),A7t.forEach(t),nxr=r(RJ," to load the model weights."),RJ.forEach(t),sxr=i(xi),gve=n(xi,"P",{});var y7t=s(gve);lxr=r(y7t,"Examples:"),y7t.forEach(t),ixr=i(xi),m(jL.$$.fragment,xi),xi.forEach(t),dxr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(DL.$$.fragment,Ia),cxr=i(Ia),hve=n(Ia,"P",{});var L7t=s(hve);fxr=r(L7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L7t.forEach(t),mxr=i(Ia),qn=n(Ia,"P",{});var fE=s(qn);gxr=r(fE,"The model class to instantiate is selected based on the "),pve=n(fE,"CODE",{});var x7t=s(pve);hxr=r(x7t,"model_type"),x7t.forEach(t),pxr=r(fE,` property of the config object (either
passed as an argument or loaded from `),_ve=n(fE,"CODE",{});var k7t=s(_ve);_xr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),uxr=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(fE,"CODE",{});var S7t=s(uve);bxr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),Fxr=r(fE,":"),fE.forEach(t),vxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);o4=n(Vo,"LI",{});var wSe=s(o4);bve=n(wSe,"STRONG",{});var R7t=s(bve);Txr=r(R7t,"albert"),R7t.forEach(t),Mxr=r(wSe," \u2014 "),wH=n(wSe,"A",{href:!0});var B7t=s(wH);Exr=r(B7t,"FlaxAlbertForMultipleChoice"),B7t.forEach(t),Cxr=r(wSe," (ALBERT model)"),wSe.forEach(t),wxr=i(Vo),r4=n(Vo,"LI",{});var ASe=s(r4);Fve=n(ASe,"STRONG",{});var P7t=s(Fve);Axr=r(P7t,"bert"),P7t.forEach(t),yxr=r(ASe," \u2014 "),AH=n(ASe,"A",{href:!0});var $7t=s(AH);Lxr=r($7t,"FlaxBertForMultipleChoice"),$7t.forEach(t),xxr=r(ASe," (BERT model)"),ASe.forEach(t),kxr=i(Vo),t4=n(Vo,"LI",{});var ySe=s(t4);vve=n(ySe,"STRONG",{});var I7t=s(vve);Sxr=r(I7t,"big_bird"),I7t.forEach(t),Rxr=r(ySe," \u2014 "),yH=n(ySe,"A",{href:!0});var q7t=s(yH);Bxr=r(q7t,"FlaxBigBirdForMultipleChoice"),q7t.forEach(t),Pxr=r(ySe," (BigBird model)"),ySe.forEach(t),$xr=i(Vo),a4=n(Vo,"LI",{});var LSe=s(a4);Tve=n(LSe,"STRONG",{});var N7t=s(Tve);Ixr=r(N7t,"distilbert"),N7t.forEach(t),qxr=r(LSe," \u2014 "),LH=n(LSe,"A",{href:!0});var j7t=s(LH);Nxr=r(j7t,"FlaxDistilBertForMultipleChoice"),j7t.forEach(t),jxr=r(LSe," (DistilBERT model)"),LSe.forEach(t),Dxr=i(Vo),n4=n(Vo,"LI",{});var xSe=s(n4);Mve=n(xSe,"STRONG",{});var D7t=s(Mve);Gxr=r(D7t,"electra"),D7t.forEach(t),Oxr=r(xSe," \u2014 "),xH=n(xSe,"A",{href:!0});var G7t=s(xH);Vxr=r(G7t,"FlaxElectraForMultipleChoice"),G7t.forEach(t),Xxr=r(xSe," (ELECTRA model)"),xSe.forEach(t),zxr=i(Vo),s4=n(Vo,"LI",{});var kSe=s(s4);Eve=n(kSe,"STRONG",{});var O7t=s(Eve);Qxr=r(O7t,"roberta"),O7t.forEach(t),Wxr=r(kSe," \u2014 "),kH=n(kSe,"A",{href:!0});var V7t=s(kH);Hxr=r(V7t,"FlaxRobertaForMultipleChoice"),V7t.forEach(t),Uxr=r(kSe," (RoBERTa model)"),kSe.forEach(t),Jxr=i(Vo),l4=n(Vo,"LI",{});var SSe=s(l4);Cve=n(SSe,"STRONG",{});var X7t=s(Cve);Yxr=r(X7t,"roformer"),X7t.forEach(t),Kxr=r(SSe," \u2014 "),SH=n(SSe,"A",{href:!0});var z7t=s(SH);Zxr=r(z7t,"FlaxRoFormerForMultipleChoice"),z7t.forEach(t),ekr=r(SSe," (RoFormer model)"),SSe.forEach(t),okr=i(Vo),i4=n(Vo,"LI",{});var RSe=s(i4);wve=n(RSe,"STRONG",{});var Q7t=s(wve);rkr=r(Q7t,"xlm-roberta"),Q7t.forEach(t),tkr=r(RSe," \u2014 "),RH=n(RSe,"A",{href:!0});var W7t=s(RH);akr=r(W7t,"FlaxXLMRobertaForMultipleChoice"),W7t.forEach(t),nkr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),Vo.forEach(t),skr=i(Ia),Ave=n(Ia,"P",{});var H7t=s(Ave);lkr=r(H7t,"Examples:"),H7t.forEach(t),ikr=i(Ia),m(GL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),RBe=i(c),Af=n(c,"H2",{class:!0});var V$e=s(Af);d4=n(V$e,"A",{id:!0,class:!0,href:!0});var U7t=s(d4);yve=n(U7t,"SPAN",{});var J7t=s(yve);m(OL.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),dkr=i(V$e),Lve=n(V$e,"SPAN",{});var Y7t=s(Lve);ckr=r(Y7t,"FlaxAutoModelForNextSentencePrediction"),Y7t.forEach(t),V$e.forEach(t),BBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(VL.$$.fragment,ki),fkr=i(ki),yf=n(ki,"P",{});var BJ=s(yf);mkr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),BH=n(BJ,"A",{href:!0});var K7t=s(BH);gkr=r(K7t,"from_pretrained()"),K7t.forEach(t),hkr=r(BJ," class method or the "),PH=n(BJ,"A",{href:!0});var Z7t=s(PH);pkr=r(Z7t,"from_config()"),Z7t.forEach(t),_kr=r(BJ,` class
method.`),BJ.forEach(t),ukr=i(ki),XL=n(ki,"P",{});var X$e=s(XL);bkr=r(X$e,"This class cannot be instantiated directly using "),xve=n(X$e,"CODE",{});var eMt=s(xve);Fkr=r(eMt,"__init__()"),eMt.forEach(t),vkr=r(X$e," (throws an error)."),X$e.forEach(t),Tkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(zL.$$.fragment,Si),Mkr=i(Si),kve=n(Si,"P",{});var oMt=s(kve);Ekr=r(oMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oMt.forEach(t),Ckr=i(Si),Lf=n(Si,"P",{});var PJ=s(Lf);wkr=r(PJ,`Note:
Loading a model from its configuration file does `),Sve=n(PJ,"STRONG",{});var rMt=s(Sve);Akr=r(rMt,"not"),rMt.forEach(t),ykr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$H=n(PJ,"A",{href:!0});var tMt=s($H);Lkr=r(tMt,"from_pretrained()"),tMt.forEach(t),xkr=r(PJ," to load the model weights."),PJ.forEach(t),kkr=i(Si),Rve=n(Si,"P",{});var aMt=s(Rve);Skr=r(aMt,"Examples:"),aMt.forEach(t),Rkr=i(Si),m(QL.$$.fragment,Si),Si.forEach(t),Bkr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(WL.$$.fragment,qa),Pkr=i(qa),Bve=n(qa,"P",{});var nMt=s(Bve);$kr=r(nMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nMt.forEach(t),Ikr=i(qa),Nn=n(qa,"P",{});var mE=s(Nn);qkr=r(mE,"The model class to instantiate is selected based on the "),Pve=n(mE,"CODE",{});var sMt=s(Pve);Nkr=r(sMt,"model_type"),sMt.forEach(t),jkr=r(mE,` property of the config object (either
passed as an argument or loaded from `),$ve=n(mE,"CODE",{});var lMt=s($ve);Dkr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),Gkr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(mE,"CODE",{});var iMt=s(Ive);Okr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),Vkr=r(mE,":"),mE.forEach(t),Xkr=i(qa),qve=n(qa,"UL",{});var dMt=s(qve);c4=n(dMt,"LI",{});var BSe=s(c4);Nve=n(BSe,"STRONG",{});var cMt=s(Nve);zkr=r(cMt,"bert"),cMt.forEach(t),Qkr=r(BSe," \u2014 "),IH=n(BSe,"A",{href:!0});var fMt=s(IH);Wkr=r(fMt,"FlaxBertForNextSentencePrediction"),fMt.forEach(t),Hkr=r(BSe," (BERT model)"),BSe.forEach(t),dMt.forEach(t),Ukr=i(qa),jve=n(qa,"P",{});var mMt=s(jve);Jkr=r(mMt,"Examples:"),mMt.forEach(t),Ykr=i(qa),m(HL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),PBe=i(c),xf=n(c,"H2",{class:!0});var z$e=s(xf);f4=n(z$e,"A",{id:!0,class:!0,href:!0});var gMt=s(f4);Dve=n(gMt,"SPAN",{});var hMt=s(Dve);m(UL.$$.fragment,hMt),hMt.forEach(t),gMt.forEach(t),Kkr=i(z$e),Gve=n(z$e,"SPAN",{});var pMt=s(Gve);Zkr=r(pMt,"FlaxAutoModelForImageClassification"),pMt.forEach(t),z$e.forEach(t),$Be=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(JL.$$.fragment,Ri),eSr=i(Ri),kf=n(Ri,"P",{});var $J=s(kf);oSr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qH=n($J,"A",{href:!0});var _Mt=s(qH);rSr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),tSr=r($J," class method or the "),NH=n($J,"A",{href:!0});var uMt=s(NH);aSr=r(uMt,"from_config()"),uMt.forEach(t),nSr=r($J,` class
method.`),$J.forEach(t),sSr=i(Ri),YL=n(Ri,"P",{});var Q$e=s(YL);lSr=r(Q$e,"This class cannot be instantiated directly using "),Ove=n(Q$e,"CODE",{});var bMt=s(Ove);iSr=r(bMt,"__init__()"),bMt.forEach(t),dSr=r(Q$e," (throws an error)."),Q$e.forEach(t),cSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(KL.$$.fragment,Bi),fSr=i(Bi),Vve=n(Bi,"P",{});var FMt=s(Vve);mSr=r(FMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FMt.forEach(t),gSr=i(Bi),Sf=n(Bi,"P",{});var IJ=s(Sf);hSr=r(IJ,`Note:
Loading a model from its configuration file does `),Xve=n(IJ,"STRONG",{});var vMt=s(Xve);pSr=r(vMt,"not"),vMt.forEach(t),_Sr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(IJ,"A",{href:!0});var TMt=s(jH);uSr=r(TMt,"from_pretrained()"),TMt.forEach(t),bSr=r(IJ," to load the model weights."),IJ.forEach(t),FSr=i(Bi),zve=n(Bi,"P",{});var MMt=s(zve);vSr=r(MMt,"Examples:"),MMt.forEach(t),TSr=i(Bi),m(ZL.$$.fragment,Bi),Bi.forEach(t),MSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(e8.$$.fragment,Na),ESr=i(Na),Qve=n(Na,"P",{});var EMt=s(Qve);CSr=r(EMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EMt.forEach(t),wSr=i(Na),jn=n(Na,"P",{});var gE=s(jn);ASr=r(gE,"The model class to instantiate is selected based on the "),Wve=n(gE,"CODE",{});var CMt=s(Wve);ySr=r(CMt,"model_type"),CMt.forEach(t),LSr=r(gE,` property of the config object (either
passed as an argument or loaded from `),Hve=n(gE,"CODE",{});var wMt=s(Hve);xSr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),kSr=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uve=n(gE,"CODE",{});var AMt=s(Uve);SSr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),RSr=r(gE,":"),gE.forEach(t),BSr=i(Na),o8=n(Na,"UL",{});var W$e=s(o8);m4=n(W$e,"LI",{});var PSe=s(m4);Jve=n(PSe,"STRONG",{});var yMt=s(Jve);PSr=r(yMt,"beit"),yMt.forEach(t),$Sr=r(PSe," \u2014 "),DH=n(PSe,"A",{href:!0});var LMt=s(DH);ISr=r(LMt,"FlaxBeitForImageClassification"),LMt.forEach(t),qSr=r(PSe," (BEiT model)"),PSe.forEach(t),NSr=i(W$e),g4=n(W$e,"LI",{});var $Se=s(g4);Yve=n($Se,"STRONG",{});var xMt=s(Yve);jSr=r(xMt,"vit"),xMt.forEach(t),DSr=r($Se," \u2014 "),GH=n($Se,"A",{href:!0});var kMt=s(GH);GSr=r(kMt,"FlaxViTForImageClassification"),kMt.forEach(t),OSr=r($Se," (ViT model)"),$Se.forEach(t),W$e.forEach(t),VSr=i(Na),Kve=n(Na,"P",{});var SMt=s(Kve);XSr=r(SMt,"Examples:"),SMt.forEach(t),zSr=i(Na),m(r8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),IBe=i(c),Rf=n(c,"H2",{class:!0});var H$e=s(Rf);h4=n(H$e,"A",{id:!0,class:!0,href:!0});var RMt=s(h4);Zve=n(RMt,"SPAN",{});var BMt=s(Zve);m(t8.$$.fragment,BMt),BMt.forEach(t),RMt.forEach(t),QSr=i(H$e),e6e=n(H$e,"SPAN",{});var PMt=s(e6e);WSr=r(PMt,"FlaxAutoModelForVision2Seq"),PMt.forEach(t),H$e.forEach(t),qBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(a8.$$.fragment,Pi),HSr=i(Pi),Bf=n(Pi,"P",{});var qJ=s(Bf);USr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=n(qJ,"A",{href:!0});var $Mt=s(OH);JSr=r($Mt,"from_pretrained()"),$Mt.forEach(t),YSr=r(qJ," class method or the "),VH=n(qJ,"A",{href:!0});var IMt=s(VH);KSr=r(IMt,"from_config()"),IMt.forEach(t),ZSr=r(qJ,` class
method.`),qJ.forEach(t),eRr=i(Pi),n8=n(Pi,"P",{});var U$e=s(n8);oRr=r(U$e,"This class cannot be instantiated directly using "),o6e=n(U$e,"CODE",{});var qMt=s(o6e);rRr=r(qMt,"__init__()"),qMt.forEach(t),tRr=r(U$e," (throws an error)."),U$e.forEach(t),aRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(s8.$$.fragment,$i),nRr=i($i),r6e=n($i,"P",{});var NMt=s(r6e);sRr=r(NMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NMt.forEach(t),lRr=i($i),Pf=n($i,"P",{});var NJ=s(Pf);iRr=r(NJ,`Note:
Loading a model from its configuration file does `),t6e=n(NJ,"STRONG",{});var jMt=s(t6e);dRr=r(jMt,"not"),jMt.forEach(t),cRr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(NJ,"A",{href:!0});var DMt=s(XH);fRr=r(DMt,"from_pretrained()"),DMt.forEach(t),mRr=r(NJ," to load the model weights."),NJ.forEach(t),gRr=i($i),a6e=n($i,"P",{});var GMt=s(a6e);hRr=r(GMt,"Examples:"),GMt.forEach(t),pRr=i($i),m(l8.$$.fragment,$i),$i.forEach(t),_Rr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(i8.$$.fragment,ja),uRr=i(ja),n6e=n(ja,"P",{});var OMt=s(n6e);bRr=r(OMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OMt.forEach(t),FRr=i(ja),Dn=n(ja,"P",{});var hE=s(Dn);vRr=r(hE,"The model class to instantiate is selected based on the "),s6e=n(hE,"CODE",{});var VMt=s(s6e);TRr=r(VMt,"model_type"),VMt.forEach(t),MRr=r(hE,` property of the config object (either
passed as an argument or loaded from `),l6e=n(hE,"CODE",{});var XMt=s(l6e);ERr=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),CRr=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i6e=n(hE,"CODE",{});var zMt=s(i6e);wRr=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),ARr=r(hE,":"),hE.forEach(t),yRr=i(ja),d6e=n(ja,"UL",{});var QMt=s(d6e);p4=n(QMt,"LI",{});var ISe=s(p4);c6e=n(ISe,"STRONG",{});var WMt=s(c6e);LRr=r(WMt,"vision-encoder-decoder"),WMt.forEach(t),xRr=r(ISe," \u2014 "),zH=n(ISe,"A",{href:!0});var HMt=s(zH);kRr=r(HMt,"FlaxVisionEncoderDecoderModel"),HMt.forEach(t),SRr=r(ISe," (Vision Encoder decoder model)"),ISe.forEach(t),QMt.forEach(t),RRr=i(ja),f6e=n(ja,"P",{});var UMt=s(f6e);BRr=r(UMt,"Examples:"),UMt.forEach(t),PRr=i(ja),m(d8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(n4t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(g9,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(h9,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertConfig"),d(p9,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartConfig"),d(_9,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitConfig"),d(u9,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertConfig"),d(b9,"href","/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(F9,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdConfig"),d(v9,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(T9,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(M9,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(E9,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertConfig"),d(C9,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineConfig"),d(w9,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPConfig"),d(A9,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertConfig"),d(y9,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextConfig"),d(L9,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLConfig"),d(x9,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(k9,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(S9,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaConfig"),d(R9,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(B9,"href","/docs/transformers/pr_16537/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(P9,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTConfig"),d($9,"href","/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrConfig"),d(I9,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertConfig"),d(q9,"href","/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRConfig"),d(N9,"href","/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTConfig"),d(j9,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraConfig"),d(D9,"href","/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(G9,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertConfig"),d(O9,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetConfig"),d(V9,"href","/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTConfig"),d(X9,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelConfig"),d(z9,"href","/docs/transformers/pr_16537/en/model_doc/glpn#transformers.GLPNConfig"),d(Q9,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Config"),d(W9,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(H9,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJConfig"),d(U9,"href","/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertConfig"),d(J9,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertConfig"),d(Y9,"href","/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(K9,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Z9,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ex,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDConfig"),d(ox,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerConfig"),d(rx,"href","/docs/transformers/pr_16537/en/model_doc/luke#transformers.LukeConfig"),d(tx,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertConfig"),d(ax,"href","/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Config"),d(nx,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianConfig"),d(sx,"href","/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(lx,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartConfig"),d(ix,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(dx,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(cx,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetConfig"),d(fx,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Config"),d(mx,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(gx,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(hx,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusConfig"),d(px,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverConfig"),d(_x,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartConfig"),d(ux,"href","/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(bx,"href","/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Fx,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(vx,"href","/docs/transformers/pr_16537/en/model_doc/rag#transformers.RagConfig"),d(Tx,"href","/docs/transformers/pr_16537/en/model_doc/realm#transformers.RealmConfig"),d(Mx,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerConfig"),d(Ex,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertConfig"),d(Cx,"href","/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetConfig"),d(wx,"href","/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertConfig"),d(Ax,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaConfig"),d(yx,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerConfig"),d(Lx,"href","/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerConfig"),d(xx,"href","/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWConfig"),d(kx,"href","/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDConfig"),d(Sx,"href","/docs/transformers/pr_16537/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Rx,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Bx,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Px,"href","/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterConfig"),d($x,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ix,"href","/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinConfig"),d(qx,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Config"),d(Nx,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasConfig"),d(jx,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Dx,"href","/docs/transformers/pr_16537/en/model_doc/trocr#transformers.TrOCRConfig"),d(Gx,"href","/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Ox,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Vx,"href","/docs/transformers/pr_16537/en/model_doc/van#transformers.VanConfig"),d(Xx,"href","/docs/transformers/pr_16537/en/model_doc/vilt#transformers.ViltConfig"),d(zx,"href","/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Qx,"href","/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Wx,"href","/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Hx,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTConfig"),d(Ux,"href","/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Jx,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Yx,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMConfig"),d(Kx,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMConfig"),d(Zx,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMConfig"),d(ek,"href","/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ok,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(rk,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(tk,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetConfig"),d(ak,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(nk,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(sk,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertTokenizer"),d(lk,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ik,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartTokenizer"),d(dk,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartTokenizerFast"),d(ck,"href","/docs/transformers/pr_16537/en/model_doc/barthez#transformers.BarthezTokenizer"),d(fk,"href","/docs/transformers/pr_16537/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(mk,"href","/docs/transformers/pr_16537/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(gk,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertTokenizer"),d(hk,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertTokenizerFast"),d(pk,"href","/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(_k,"href","/docs/transformers/pr_16537/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(uk,"href","/docs/transformers/pr_16537/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(bk,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Fk,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(vk,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Tk,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ek,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(wk,"href","/docs/transformers/pr_16537/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ak,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertTokenizer"),d(yk,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineTokenizer"),d(xk,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPTokenizer"),d(kk,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Rk,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Bk,"href","/docs/transformers/pr_16537/en/model_doc/cpm#transformers.CpmTokenizer"),d(Pk,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLTokenizer"),d($k,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Ik,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(qk,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Nk,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(jk,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Gk,"href","/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraTokenizer"),d(Vk,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Xk,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(zk,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetTokenizer"),d(Qk,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Hk,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Uk,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Yk,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Kk,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Zk,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(eS,"href","/docs/transformers/pr_16537/en/model_doc/herbert#transformers.HerbertTokenizer"),d(oS,"href","/docs/transformers/pr_16537/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(rS,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(tS,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaTokenizer"),d(aS,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(nS,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(sS,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(lS,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(iS,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(dS,"href","/docs/transformers/pr_16537/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(cS,"href","/docs/transformers/pr_16537/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(fS,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDTokenizer"),d(mS,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDTokenizerFast"),d(gS,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerTokenizer"),d(hS,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(pS,"href","/docs/transformers/pr_16537/en/model_doc/luke#transformers.LukeTokenizer"),d(_S,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(uS,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(bS,"href","/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(FS,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianTokenizer"),d(vS,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartTokenizer"),d(TS,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(MS,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ES,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(CS,"href","/docs/transformers/pr_16537/en/model_doc/mluke#transformers.MLukeTokenizer"),d(wS,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(AS,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(yS,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(LS,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(xS,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.T5Tokenizer"),d(kS,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.T5TokenizerFast"),d(SS,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(RS,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(BS,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(PS,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d($S,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(IS,"href","/docs/transformers/pr_16537/en/model_doc/phobert#transformers.PhobertTokenizer"),d(qS,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartTokenizer"),d(NS,"href","/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(jS,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertTokenizer"),d(DS,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertTokenizerFast"),d(GS,"href","/docs/transformers/pr_16537/en/model_doc/rag#transformers.RagTokenizer"),d(OS,"href","/docs/transformers/pr_16537/en/model_doc/realm#transformers.RealmTokenizer"),d(VS,"href","/docs/transformers/pr_16537/en/model_doc/realm#transformers.RealmTokenizerFast"),d(XS,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerTokenizer"),d(zS,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(QS,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertTokenizer"),d(WS,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(HS,"href","/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(US,"href","/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(JS,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaTokenizer"),d(YS,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(KS,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(ZS,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(eR,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(oR,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(rR,"href","/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterTokenizer"),d(tR,"href","/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(aR,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(nR,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(sR,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.T5Tokenizer"),d(lR,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.T5TokenizerFast"),d(iR,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasTokenizer"),d(dR,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(cR,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fR,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mR,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gR,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hR,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMTokenizer"),d(pR,"href","/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(_R,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uR,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bR,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(FR,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Wo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(vR,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(TR,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(yR,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(LR,"href","/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTFeatureExtractor"),d($R,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(jR,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(DR,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPProcessor"),d(GR,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(OR,"href","/docs/transformers/pr_16537/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(VR,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(XR,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(zR,"href","/docs/transformers/pr_16537/en/model_doc/trocr#transformers.TrOCRProcessor"),d(QR,"href","/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(WR,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(HR,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UR,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JR,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(YR,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertModel"),d(KR,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartModel"),d(ZR,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitModel"),d(eB,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertModel"),d(oB,"href","/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(rB,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdModel"),d(tB,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(aB,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(nB,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(sB,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertModel"),d(lB,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineModel"),d(iB,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.CLIPModel"),d(dB,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertModel"),d(cB,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextModel"),d(fB,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLModel"),d(mB,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(gB,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(hB,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaModel"),d(pB,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(_B,"href","/docs/transformers/pr_16537/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(uB,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTModel"),d(bB,"href","/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrModel"),d(FB,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertModel"),d(vB,"href","/docs/transformers/pr_16537/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(TB,"href","/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTModel"),d(MB,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraModel"),d(EB,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertModel"),d(CB,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetModel"),d(wB,"href","/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTModel"),d(AB,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelModel"),d(yB,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelBaseModel"),d(LB,"href","/docs/transformers/pr_16537/en/model_doc/glpn#transformers.GLPNModel"),d(xB,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2Model"),d(kB,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(SB,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJModel"),d(RB,"href","/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertModel"),d(BB,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertModel"),d(PB,"href","/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTModel"),d($B,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(IB,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(qB,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDModel"),d(NB,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerModel"),d(jB,"href","/docs/transformers/pr_16537/en/model_doc/luke#transformers.LukeModel"),d(DB,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertModel"),d(GB,"href","/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100Model"),d(OB,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianModel"),d(VB,"href","/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerModel"),d(XB,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartModel"),d(zB,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(QB,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertModel"),d(WB,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetModel"),d(HB,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5Model"),d(UB,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerModel"),d(JB,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(YB,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusModel"),d(KB,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverModel"),d(ZB,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartModel"),d(eP,"href","/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerModel"),d(oP,"href","/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(rP,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertModel"),d(tP,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerModel"),d(aP,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertModel"),d(nP,"href","/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetModel"),d(sP,"href","/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertModel"),d(lP,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaModel"),d(iP,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerModel"),d(dP,"href","/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerModel"),d(cP,"href","/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWModel"),d(fP,"href","/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDModel"),d(mP,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(gP,"href","/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterModel"),d(hP,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(pP,"href","/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinModel"),d(_P,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5Model"),d(uP,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasModel"),d(bP,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(FP,"href","/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechModel"),d(vP,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(TP,"href","/docs/transformers/pr_16537/en/model_doc/van#transformers.VanModel"),d(MP,"href","/docs/transformers/pr_16537/en/model_doc/vilt#transformers.ViltModel"),d(EP,"href","/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(CP,"href","/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertModel"),d(wP,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTModel"),d(AP,"href","/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(yP,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(LP,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMModel"),d(xP,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMModel"),d(kP,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMModel"),d(SP,"href","/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(RP,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(BP,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(PP,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetModel"),d($P,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(k_,"id","transformers.AutoModelForPreTraining"),d(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(IP,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qP,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NP,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(jP,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForPreTraining"),d(DP,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(GP,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForPreTraining"),d(OP,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(VP,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(XP,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(zP,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(QP,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(WP,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(HP,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(UP,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForPreTraining"),d(JP,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(YP,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForPreTraining"),d(KP,"href","/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(ZP,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(e$,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(o$,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(r$,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(t$,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(a$,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(n$,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(s$,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(l$,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(i$,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(d$,"href","/docs/transformers/pr_16537/en/model_doc/retribert#transformers.RetriBertModel"),d(c$,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(f$,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(m$,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(g$,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(h$,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(p$,"href","/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(_$,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(u$,"href","/docs/transformers/pr_16537/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(b$,"href","/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(F$,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(v$,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(T$,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(M$,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(E$,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(C$,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(w$,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(A$,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(y$,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForCausalLM"),d(L$,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertLMHeadModel"),d(x$,"href","/docs/transformers/pr_16537/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(k$,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(S$,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(R$,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(B$,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(P$,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForCausalLM"),d($$,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(I$,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(q$,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForCausalLM"),d(N$,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(j$,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(D$,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(G$,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianForCausalLM"),d(O$,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForCausalLM"),d(V$,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(X$,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(z$,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(Q$,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(W$,"href","/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(H$,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(U$,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(J$,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(Y$,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(K$,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(Z$,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(eI,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(oI,"href","/docs/transformers/pr_16537/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(rI,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(tI,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aI,"href","/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(nI,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(sI,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(lI,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(iI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(fI,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(mI,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gI,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(pI,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(uI,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(bI,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(FI,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(vI,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(TI,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(MI,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(EI,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(CI,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(wI,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(AI,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(yI,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(LI,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(RI,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(BI,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(PI,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d($I,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(II,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(NI,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(jI,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(DI,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(GI,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(OI,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(VI,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(XI,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(q1,"id","transformers.AutoModelForSeq2SeqLM"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(zI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WI,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(HI,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(JI,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(ZI,"href","/docs/transformers/pr_16537/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16537/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.MarianMTModel"),d(tq,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16537/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16537/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(ob,"id","transformers.AutoModelForSequenceClassification"),d(ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ob,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(cq,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fq,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mq,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(gq,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(hq,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForSequenceClassification"),d(pq,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d($q,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16537/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(Ub,"id","transformers.AutoModelForMultipleChoice"),d(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ub,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(nN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(iN,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(dN,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d($N,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(w5,"id","transformers.AutoModelForNextSentencePrediction"),d(w5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w5,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(IN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(jN,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(DN,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(GN,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(ON,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(R5,"id","transformers.AutoModelForTokenClassification"),d(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R5,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(XN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QN,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(WN,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(HN,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForTokenClassification"),d(UN,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(JN,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(YN,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForTokenClassification"),d(KN,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(ej,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(oj,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(rj,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(tj,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(aj,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(sj,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(lj,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(ij,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(cj,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(fj,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(mj,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(pj,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(_j,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(vj,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(wj,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g3,"id","transformers.AutoModelForQuestionAnswering"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Aj,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yj,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lj,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(xj,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(kj,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16537/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16537/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Vj,"href","/docs/transformers/pr_16537/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16537/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16537/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16537/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16537/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16537/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16537/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16537/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16537/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(cD,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(gD,"href","/docs/transformers/pr_16537/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(e2,"id","transformers.AutoModelForTableQuestionAnswering"),d(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(hD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_D,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(uD,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(t2,"id","transformers.AutoModelForImageClassification"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(bD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(TD,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitForImageClassification"),d(MD,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(ED,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForImageClassification"),d(CD,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(wD,"href","/docs/transformers/pr_16537/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(AD,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(yD,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(LD,"href","/docs/transformers/pr_16537/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(xD,"href","/docs/transformers/pr_16537/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(kD,"href","/docs/transformers/pr_16537/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(SD,"href","/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(RD,"href","/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinForImageClassification"),d(BD,"href","/docs/transformers/pr_16537/en/model_doc/van#transformers.VanForImageClassification"),d(PD,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(h2,"id","transformers.AutoModelForVision2Seq"),d(h2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d($D,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ID,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(ND,"href","/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(u2,"id","transformers.AutoModelForAudioClassification"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(jD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(OD,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(VD,"href","/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(y2,"id","transformers.AutoModelForAudioFrameClassification"),d(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(JD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KD,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(ZD,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(eG,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(oG,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(rG,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(B2,"id","transformers.AutoModelForCTC"),d(B2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(tG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(sG,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(lG,"href","/docs/transformers/pr_16537/en/model_doc/hubert#transformers.HubertForCTC"),d(iG,"href","/docs/transformers/pr_16537/en/model_doc/sew#transformers.SEWForCTC"),d(dG,"href","/docs/transformers/pr_16537/en/model_doc/sew-d#transformers.SEWDForCTC"),d(cG,"href","/docs/transformers/pr_16537/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(fG,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(mG,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(gG,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(V2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(hG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_G,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(uG,"href","/docs/transformers/pr_16537/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(bG,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(W2,"id","transformers.AutoModelForAudioXVector"),d(W2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(FG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(MG,"href","/docs/transformers/pr_16537/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(EG,"href","/docs/transformers/pr_16537/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(CG,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(wG,"href","/docs/transformers/pr_16537/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(Z2,"id","transformers.AutoModelForMaskedImageModeling"),d(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z2,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(AG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(xG,"href","/docs/transformers/pr_16537/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(kG,"href","/docs/transformers/pr_16537/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(SG,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(aF,"id","transformers.AutoModelForObjectDetection"),d(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(RG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d($G,"href","/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(lF,"id","transformers.AutoModelForImageSegmentation"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(IG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(jG,"href","/docs/transformers/pr_16537/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(cF,"id","transformers.AutoModelForSemanticSegmentation"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(DG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(VG,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(XG,"href","/docs/transformers/pr_16537/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(zG,"href","/docs/transformers/pr_16537/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(pF,"id","transformers.AutoModelForInstanceSegmentation"),d(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(QG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(UG,"href","/docs/transformers/pr_16537/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(bF,"id","transformers.TFAutoModel"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(JG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(ZG,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertModel"),d(eO,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartModel"),d(oO,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertModel"),d(rO,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(tO,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(aO,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertModel"),d(nO,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.TFCLIPModel"),d(sO,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertModel"),d(lO,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.TFConvNextModel"),d(iO,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLModel"),d(dO,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaModel"),d(cO,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(fO,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(mO,"href","/docs/transformers/pr_16537/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(gO,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraModel"),d(hO,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(pO,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelModel"),d(_O,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(uO,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2Model"),d(bO,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJModel"),d(FO,"href","/docs/transformers/pr_16537/en/model_doc/hubert#transformers.TFHubertModel"),d(vO,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(TO,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.TFLEDModel"),d(MO,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerModel"),d(EO,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.TFLxmertModel"),d(CO,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.TFMarianModel"),d(wO,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.TFMBartModel"),d(AO,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(yO,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetModel"),d(LO,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.TFMT5Model"),d(xO,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(kO,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.TFPegasusModel"),d(SO,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertModel"),d(RO,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaModel"),d(BO,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerModel"),d(PO,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d($O,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5Model"),d(IO,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasModel"),d(qO,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(NO,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.TFViTModel"),d(jO,"href","/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(DO,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(GO,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMModel"),d(OO,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(VO,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(iv,"id","transformers.TFAutoModelForPreTraining"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(XO,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zO,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QO,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(WO,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(HO,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(UO,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForPreTraining"),d(JO,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(YO,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(KO,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(ZO,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(eV,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(oV,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(rV,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(tV,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(aV,"href","/docs/transformers/pr_16537/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(nV,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(sV,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(lV,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(iV,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(dV,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(cV,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(fV,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(mV,"href","/docs/transformers/pr_16537/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(gV,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(hV,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(pV,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(Rv,"id","transformers.TFAutoModelForCausalLM"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(_V,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(FV,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(vV,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(TV,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(MV,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(EV,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(CV,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(wV,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(AV,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(yV,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(LV,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(xV,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(kV,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(zv,"id","transformers.TFAutoModelForImageClassification"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(SV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(RV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(BV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(PV,"href","/docs/transformers/pr_16537/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d($V,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Hv,"id","transformers.TFAutoModelForMaskedLM"),d(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(IV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NV,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(jV,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(DV,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(GV,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(VV,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(XV,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(zV,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(QV,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(WV,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(HV,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(UV,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(JV,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(YV,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(eX,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(oX,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(rX,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(tX,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(aX,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(p6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(nX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(iX,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(dX,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(mX,"href","/docs/transformers/pr_16537/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.TFMarianMTModel"),d(hX,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(A6,"id","transformers.TFAutoModelForSequenceClassification"),d(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(bX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(TX,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(MX,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(EX,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(wX,"href","/docs/transformers/pr_16537/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d($X,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16537/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16537/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(Z6,"id","transformers.TFAutoModelForMultipleChoice"),d(Z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z6,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(WX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UX,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(JX,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(YX,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(KX,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(ZX,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(ez,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(az,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(uT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(gz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(_z,"href","/docs/transformers/pr_16537/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(FT,"id","transformers.TFAutoModelForTokenClassification"),d(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(uz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(vz,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Tz,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(wz,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Az,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(yz,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(kz,"href","/docs/transformers/pr_16537/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d($z,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(qz,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(jz,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(DT,"id","transformers.TFAutoModelForQuestionAnswering"),d(DT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Dz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Oz,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Vz,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Xz,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(zz,"href","/docs/transformers/pr_16537/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Qz,"href","/docs/transformers/pr_16537/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_16537/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_16537/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16537/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Kz,"href","/docs/transformers/pr_16537/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16537/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16537/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16537/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16537/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16537/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(lQ,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16537/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(l7,"id","transformers.TFAutoModelForVision2Seq"),d(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l7,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(dQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(mQ,"href","/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(d7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(gQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(_Q,"href","/docs/transformers/pr_16537/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(f7,"id","transformers.FlaxAutoModel"),d(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f7,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(vQ,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertModel"),d(TQ,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartModel"),d(MQ,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.FlaxBeitModel"),d(EQ,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertModel"),d(CQ,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(wQ,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(AQ,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(yQ,"href","/docs/transformers/pr_16537/en/model_doc/clip#transformers.FlaxCLIPModel"),d(LQ,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(xQ,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraModel"),d(kQ,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(SQ,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(RQ,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(BQ,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.FlaxMarianModel"),d(PQ,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartModel"),d($Q,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5Model"),d(IQ,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(qQ,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(NQ,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(jQ,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5Model"),d(DQ,"href","/docs/transformers/pr_16537/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(GQ,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.FlaxViTModel"),d(OQ,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(VQ,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(XQ,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(q7,"id","transformers.FlaxAutoModelForCausalLM"),d(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q7,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(zQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(HQ,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(UQ,"href","/docs/transformers/pr_16537/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(JQ,"href","/docs/transformers/pr_16537/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(YQ,"href","/docs/transformers/pr_16537/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(KQ,"href","/docs/transformers/pr_16537/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(V7,"id","transformers.FlaxAutoModelForPreTraining"),d(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V7,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(ZQ,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(rW,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(tW,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(aW,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(nW,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(sW,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(lW,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(iW,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(dW,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(cW,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(fW,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(mW,"href","/docs/transformers/pr_16537/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(gW,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(rM,"id","transformers.FlaxAutoModelForMaskedLM"),d(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(hW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_W,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(uW,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(bW,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(FW,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(vW,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(TW,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(MW,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(EW,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(CW,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(wW,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(AW,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(gM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(yW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(kW,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(SW,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16537/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16537/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(PW,"href","/docs/transformers/pr_16537/en/model_doc/marian#transformers.FlaxMarianMTModel"),d($W,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_16537/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16537/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16537/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(EM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(jW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(OW,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(VW,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(XW,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(zW,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(QW,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(HW,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(JW,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(PM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(KW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZW,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(oH,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(rH,"href","/docs/transformers/pr_16537/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(tH,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(aH,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_16537/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(zM,"id","transformers.FlaxAutoModelForTokenClassification"),d(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(fH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(hH,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(pH,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(_H,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(uH,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(bH,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(FH,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(vH,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(TH,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(e4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(MH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(wH,"href","/docs/transformers/pr_16537/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(AH,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(yH,"href","/docs/transformers/pr_16537/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(LH,"href","/docs/transformers/pr_16537/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(xH,"href","/docs/transformers/pr_16537/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(kH,"href","/docs/transformers/pr_16537/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(SH,"href","/docs/transformers/pr_16537/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(RH,"href","/docs/transformers/pr_16537/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(d4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(BH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($H,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(IH,"href","/docs/transformers/pr_16537/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(f4,"id","transformers.FlaxAutoModelForImageClassification"),d(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f4,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(qH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(DH,"href","/docs/transformers/pr_16537/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(GH,"href","/docs/transformers/pr_16537/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(h4,"id","transformers.FlaxAutoModelForVision2Seq"),d(h4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(OH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/pr_16537/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(zH,"href","/docs/transformers/pr_16537/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,pE),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,_E),e(co,On),e(co,Vn),e(Vn,uE),e(co,Di),e(co,Xn),e(Xn,bE),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,l9),e(_e,Oi),e(Oi,i9),e(_e,d9),b(c,zo,u),b(c,Ga,u),e(Ga,c9),e(Ga,Df),e(Df,f9),e(Ga,J$e),b(c,qSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,jJ),g(FE,jJ,null),e(Vi,Y$e),e(Vi,DJ),e(DJ,K$e),b(c,NSe,u),b(c,zn,u),e(zn,Z$e),e(zn,GJ),e(GJ,eIe),e(zn,oIe),e(zn,OJ),e(OJ,rIe),e(zn,tIe),b(c,jSe,u),g(vE,c,u),b(c,DSe,u),b(c,m9,u),e(m9,aIe),b(c,GSe,u),g(Of,c,u),b(c,OSe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,VJ),g(TE,VJ,null),e(Xi,nIe),e(Xi,XJ),e(XJ,sIe),b(c,VSe,u),b(c,Qo,u),g(ME,Qo,null),e(Qo,lIe),e(Qo,EE),e(EE,iIe),e(EE,g9),e(g9,dIe),e(EE,cIe),e(Qo,fIe),e(Qo,CE),e(CE,mIe),e(CE,zJ),e(zJ,gIe),e(CE,hIe),e(Qo,pIe),e(Qo,mo),g(wE,mo,null),e(mo,_Ie),e(mo,QJ),e(QJ,uIe),e(mo,bIe),e(mo,zi),e(zi,FIe),e(zi,WJ),e(WJ,vIe),e(zi,TIe),e(zi,HJ),e(HJ,MIe),e(zi,EIe),e(mo,CIe),e(mo,F),e(F,Xf),e(Xf,UJ),e(UJ,wIe),e(Xf,AIe),e(Xf,h9),e(h9,yIe),e(Xf,LIe),e(F,xIe),e(F,zf),e(zf,JJ),e(JJ,kIe),e(zf,SIe),e(zf,p9),e(p9,RIe),e(zf,BIe),e(F,PIe),e(F,Qf),e(Qf,YJ),e(YJ,$Ie),e(Qf,IIe),e(Qf,_9),e(_9,qIe),e(Qf,NIe),e(F,jIe),e(F,Wf),e(Wf,KJ),e(KJ,DIe),e(Wf,GIe),e(Wf,u9),e(u9,OIe),e(Wf,VIe),e(F,XIe),e(F,Hf),e(Hf,ZJ),e(ZJ,zIe),e(Hf,QIe),e(Hf,b9),e(b9,WIe),e(Hf,HIe),e(F,UIe),e(F,Uf),e(Uf,eY),e(eY,JIe),e(Uf,YIe),e(Uf,F9),e(F9,KIe),e(Uf,ZIe),e(F,eqe),e(F,Jf),e(Jf,oY),e(oY,oqe),e(Jf,rqe),e(Jf,v9),e(v9,tqe),e(Jf,aqe),e(F,nqe),e(F,Yf),e(Yf,rY),e(rY,sqe),e(Yf,lqe),e(Yf,T9),e(T9,iqe),e(Yf,dqe),e(F,cqe),e(F,Kf),e(Kf,tY),e(tY,fqe),e(Kf,mqe),e(Kf,M9),e(M9,gqe),e(Kf,hqe),e(F,pqe),e(F,Zf),e(Zf,aY),e(aY,_qe),e(Zf,uqe),e(Zf,E9),e(E9,bqe),e(Zf,Fqe),e(F,vqe),e(F,em),e(em,nY),e(nY,Tqe),e(em,Mqe),e(em,C9),e(C9,Eqe),e(em,Cqe),e(F,wqe),e(F,om),e(om,sY),e(sY,Aqe),e(om,yqe),e(om,w9),e(w9,Lqe),e(om,xqe),e(F,kqe),e(F,rm),e(rm,lY),e(lY,Sqe),e(rm,Rqe),e(rm,A9),e(A9,Bqe),e(rm,Pqe),e(F,$qe),e(F,tm),e(tm,iY),e(iY,Iqe),e(tm,qqe),e(tm,y9),e(y9,Nqe),e(tm,jqe),e(F,Dqe),e(F,am),e(am,dY),e(dY,Gqe),e(am,Oqe),e(am,L9),e(L9,Vqe),e(am,Xqe),e(F,zqe),e(F,nm),e(nm,cY),e(cY,Qqe),e(nm,Wqe),e(nm,x9),e(x9,Hqe),e(nm,Uqe),e(F,Jqe),e(F,sm),e(sm,fY),e(fY,Yqe),e(sm,Kqe),e(sm,k9),e(k9,Zqe),e(sm,eNe),e(F,oNe),e(F,lm),e(lm,mY),e(mY,rNe),e(lm,tNe),e(lm,S9),e(S9,aNe),e(lm,nNe),e(F,sNe),e(F,im),e(im,gY),e(gY,lNe),e(im,iNe),e(im,R9),e(R9,dNe),e(im,cNe),e(F,fNe),e(F,dm),e(dm,hY),e(hY,mNe),e(dm,gNe),e(dm,B9),e(B9,hNe),e(dm,pNe),e(F,_Ne),e(F,cm),e(cm,pY),e(pY,uNe),e(cm,bNe),e(cm,P9),e(P9,FNe),e(cm,vNe),e(F,TNe),e(F,fm),e(fm,_Y),e(_Y,MNe),e(fm,ENe),e(fm,$9),e($9,CNe),e(fm,wNe),e(F,ANe),e(F,mm),e(mm,uY),e(uY,yNe),e(mm,LNe),e(mm,I9),e(I9,xNe),e(mm,kNe),e(F,SNe),e(F,gm),e(gm,bY),e(bY,RNe),e(gm,BNe),e(gm,q9),e(q9,PNe),e(gm,$Ne),e(F,INe),e(F,hm),e(hm,FY),e(FY,qNe),e(hm,NNe),e(hm,N9),e(N9,jNe),e(hm,DNe),e(F,GNe),e(F,pm),e(pm,vY),e(vY,ONe),e(pm,VNe),e(pm,j9),e(j9,XNe),e(pm,zNe),e(F,QNe),e(F,_m),e(_m,TY),e(TY,WNe),e(_m,HNe),e(_m,D9),e(D9,UNe),e(_m,JNe),e(F,YNe),e(F,um),e(um,MY),e(MY,KNe),e(um,ZNe),e(um,G9),e(G9,eje),e(um,oje),e(F,rje),e(F,bm),e(bm,EY),e(EY,tje),e(bm,aje),e(bm,O9),e(O9,nje),e(bm,sje),e(F,lje),e(F,Fm),e(Fm,CY),e(CY,ije),e(Fm,dje),e(Fm,V9),e(V9,cje),e(Fm,fje),e(F,mje),e(F,vm),e(vm,wY),e(wY,gje),e(vm,hje),e(vm,X9),e(X9,pje),e(vm,_je),e(F,uje),e(F,Tm),e(Tm,AY),e(AY,bje),e(Tm,Fje),e(Tm,z9),e(z9,vje),e(Tm,Tje),e(F,Mje),e(F,Mm),e(Mm,yY),e(yY,Eje),e(Mm,Cje),e(Mm,Q9),e(Q9,wje),e(Mm,Aje),e(F,yje),e(F,Em),e(Em,LY),e(LY,Lje),e(Em,xje),e(Em,W9),e(W9,kje),e(Em,Sje),e(F,Rje),e(F,Cm),e(Cm,xY),e(xY,Bje),e(Cm,Pje),e(Cm,H9),e(H9,$je),e(Cm,Ije),e(F,qje),e(F,wm),e(wm,kY),e(kY,Nje),e(wm,jje),e(wm,U9),e(U9,Dje),e(wm,Gje),e(F,Oje),e(F,Am),e(Am,SY),e(SY,Vje),e(Am,Xje),e(Am,J9),e(J9,zje),e(Am,Qje),e(F,Wje),e(F,ym),e(ym,RY),e(RY,Hje),e(ym,Uje),e(ym,Y9),e(Y9,Jje),e(ym,Yje),e(F,Kje),e(F,Lm),e(Lm,BY),e(BY,Zje),e(Lm,eDe),e(Lm,K9),e(K9,oDe),e(Lm,rDe),e(F,tDe),e(F,xm),e(xm,PY),e(PY,aDe),e(xm,nDe),e(xm,Z9),e(Z9,sDe),e(xm,lDe),e(F,iDe),e(F,km),e(km,$Y),e($Y,dDe),e(km,cDe),e(km,ex),e(ex,fDe),e(km,mDe),e(F,gDe),e(F,Sm),e(Sm,IY),e(IY,hDe),e(Sm,pDe),e(Sm,ox),e(ox,_De),e(Sm,uDe),e(F,bDe),e(F,Rm),e(Rm,qY),e(qY,FDe),e(Rm,vDe),e(Rm,rx),e(rx,TDe),e(Rm,MDe),e(F,EDe),e(F,Bm),e(Bm,NY),e(NY,CDe),e(Bm,wDe),e(Bm,tx),e(tx,ADe),e(Bm,yDe),e(F,LDe),e(F,Pm),e(Pm,jY),e(jY,xDe),e(Pm,kDe),e(Pm,ax),e(ax,SDe),e(Pm,RDe),e(F,BDe),e(F,$m),e($m,DY),e(DY,PDe),e($m,$De),e($m,nx),e(nx,IDe),e($m,qDe),e(F,NDe),e(F,Im),e(Im,GY),e(GY,jDe),e(Im,DDe),e(Im,sx),e(sx,GDe),e(Im,ODe),e(F,VDe),e(F,qm),e(qm,OY),e(OY,XDe),e(qm,zDe),e(qm,lx),e(lx,QDe),e(qm,WDe),e(F,HDe),e(F,Nm),e(Nm,VY),e(VY,UDe),e(Nm,JDe),e(Nm,ix),e(ix,YDe),e(Nm,KDe),e(F,ZDe),e(F,jm),e(jm,XY),e(XY,eGe),e(jm,oGe),e(jm,dx),e(dx,rGe),e(jm,tGe),e(F,aGe),e(F,Dm),e(Dm,zY),e(zY,nGe),e(Dm,sGe),e(Dm,cx),e(cx,lGe),e(Dm,iGe),e(F,dGe),e(F,Gm),e(Gm,QY),e(QY,cGe),e(Gm,fGe),e(Gm,fx),e(fx,mGe),e(Gm,gGe),e(F,hGe),e(F,Om),e(Om,WY),e(WY,pGe),e(Om,_Ge),e(Om,mx),e(mx,uGe),e(Om,bGe),e(F,FGe),e(F,Vm),e(Vm,HY),e(HY,vGe),e(Vm,TGe),e(Vm,gx),e(gx,MGe),e(Vm,EGe),e(F,CGe),e(F,Xm),e(Xm,UY),e(UY,wGe),e(Xm,AGe),e(Xm,hx),e(hx,yGe),e(Xm,LGe),e(F,xGe),e(F,zm),e(zm,JY),e(JY,kGe),e(zm,SGe),e(zm,px),e(px,RGe),e(zm,BGe),e(F,PGe),e(F,Qm),e(Qm,YY),e(YY,$Ge),e(Qm,IGe),e(Qm,_x),e(_x,qGe),e(Qm,NGe),e(F,jGe),e(F,Wm),e(Wm,KY),e(KY,DGe),e(Wm,GGe),e(Wm,ux),e(ux,OGe),e(Wm,VGe),e(F,XGe),e(F,Hm),e(Hm,ZY),e(ZY,zGe),e(Hm,QGe),e(Hm,bx),e(bx,WGe),e(Hm,HGe),e(F,UGe),e(F,Um),e(Um,eK),e(eK,JGe),e(Um,YGe),e(Um,Fx),e(Fx,KGe),e(Um,ZGe),e(F,eOe),e(F,Jm),e(Jm,oK),e(oK,oOe),e(Jm,rOe),e(Jm,vx),e(vx,tOe),e(Jm,aOe),e(F,nOe),e(F,Ym),e(Ym,rK),e(rK,sOe),e(Ym,lOe),e(Ym,Tx),e(Tx,iOe),e(Ym,dOe),e(F,cOe),e(F,Km),e(Km,tK),e(tK,fOe),e(Km,mOe),e(Km,Mx),e(Mx,gOe),e(Km,hOe),e(F,pOe),e(F,Zm),e(Zm,aK),e(aK,_Oe),e(Zm,uOe),e(Zm,Ex),e(Ex,bOe),e(Zm,FOe),e(F,vOe),e(F,eg),e(eg,nK),e(nK,TOe),e(eg,MOe),e(eg,Cx),e(Cx,EOe),e(eg,COe),e(F,wOe),e(F,og),e(og,sK),e(sK,AOe),e(og,yOe),e(og,wx),e(wx,LOe),e(og,xOe),e(F,kOe),e(F,rg),e(rg,lK),e(lK,SOe),e(rg,ROe),e(rg,Ax),e(Ax,BOe),e(rg,POe),e(F,$Oe),e(F,tg),e(tg,iK),e(iK,IOe),e(tg,qOe),e(tg,yx),e(yx,NOe),e(tg,jOe),e(F,DOe),e(F,ag),e(ag,dK),e(dK,GOe),e(ag,OOe),e(ag,Lx),e(Lx,VOe),e(ag,XOe),e(F,zOe),e(F,ng),e(ng,cK),e(cK,QOe),e(ng,WOe),e(ng,xx),e(xx,HOe),e(ng,UOe),e(F,JOe),e(F,sg),e(sg,fK),e(fK,YOe),e(sg,KOe),e(sg,kx),e(kx,ZOe),e(sg,eVe),e(F,oVe),e(F,lg),e(lg,mK),e(mK,rVe),e(lg,tVe),e(lg,Sx),e(Sx,aVe),e(lg,nVe),e(F,sVe),e(F,ig),e(ig,gK),e(gK,lVe),e(ig,iVe),e(ig,Rx),e(Rx,dVe),e(ig,cVe),e(F,fVe),e(F,dg),e(dg,hK),e(hK,mVe),e(dg,gVe),e(dg,Bx),e(Bx,hVe),e(dg,pVe),e(F,_Ve),e(F,cg),e(cg,pK),e(pK,uVe),e(cg,bVe),e(cg,Px),e(Px,FVe),e(cg,vVe),e(F,TVe),e(F,fg),e(fg,_K),e(_K,MVe),e(fg,EVe),e(fg,$x),e($x,CVe),e(fg,wVe),e(F,AVe),e(F,mg),e(mg,uK),e(uK,yVe),e(mg,LVe),e(mg,Ix),e(Ix,xVe),e(mg,kVe),e(F,SVe),e(F,gg),e(gg,bK),e(bK,RVe),e(gg,BVe),e(gg,qx),e(qx,PVe),e(gg,$Ve),e(F,IVe),e(F,hg),e(hg,FK),e(FK,qVe),e(hg,NVe),e(hg,Nx),e(Nx,jVe),e(hg,DVe),e(F,GVe),e(F,pg),e(pg,vK),e(vK,OVe),e(pg,VVe),e(pg,jx),e(jx,XVe),e(pg,zVe),e(F,QVe),e(F,_g),e(_g,TK),e(TK,WVe),e(_g,HVe),e(_g,Dx),e(Dx,UVe),e(_g,JVe),e(F,YVe),e(F,ug),e(ug,MK),e(MK,KVe),e(ug,ZVe),e(ug,Gx),e(Gx,eXe),e(ug,oXe),e(F,rXe),e(F,bg),e(bg,EK),e(EK,tXe),e(bg,aXe),e(bg,Ox),e(Ox,nXe),e(bg,sXe),e(F,lXe),e(F,Fg),e(Fg,CK),e(CK,iXe),e(Fg,dXe),e(Fg,Vx),e(Vx,cXe),e(Fg,fXe),e(F,mXe),e(F,vg),e(vg,wK),e(wK,gXe),e(vg,hXe),e(vg,Xx),e(Xx,pXe),e(vg,_Xe),e(F,uXe),e(F,Tg),e(Tg,AK),e(AK,bXe),e(Tg,FXe),e(Tg,zx),e(zx,vXe),e(Tg,TXe),e(F,MXe),e(F,Mg),e(Mg,yK),e(yK,EXe),e(Mg,CXe),e(Mg,Qx),e(Qx,wXe),e(Mg,AXe),e(F,yXe),e(F,Eg),e(Eg,LK),e(LK,LXe),e(Eg,xXe),e(Eg,Wx),e(Wx,kXe),e(Eg,SXe),e(F,RXe),e(F,Cg),e(Cg,xK),e(xK,BXe),e(Cg,PXe),e(Cg,Hx),e(Hx,$Xe),e(Cg,IXe),e(F,qXe),e(F,wg),e(wg,kK),e(kK,NXe),e(wg,jXe),e(wg,Ux),e(Ux,DXe),e(wg,GXe),e(F,OXe),e(F,Ag),e(Ag,SK),e(SK,VXe),e(Ag,XXe),e(Ag,Jx),e(Jx,zXe),e(Ag,QXe),e(F,WXe),e(F,yg),e(yg,RK),e(RK,HXe),e(yg,UXe),e(yg,Yx),e(Yx,JXe),e(yg,YXe),e(F,KXe),e(F,Lg),e(Lg,BK),e(BK,ZXe),e(Lg,eze),e(Lg,Kx),e(Kx,oze),e(Lg,rze),e(F,tze),e(F,xg),e(xg,PK),e(PK,aze),e(xg,nze),e(xg,Zx),e(Zx,sze),e(xg,lze),e(F,ize),e(F,kg),e(kg,$K),e($K,dze),e(kg,cze),e(kg,ek),e(ek,fze),e(kg,mze),e(F,gze),e(F,Sg),e(Sg,IK),e(IK,hze),e(Sg,pze),e(Sg,ok),e(ok,_ze),e(Sg,uze),e(F,bze),e(F,Rg),e(Rg,qK),e(qK,Fze),e(Rg,vze),e(Rg,rk),e(rk,Tze),e(Rg,Mze),e(F,Eze),e(F,Bg),e(Bg,NK),e(NK,Cze),e(Bg,wze),e(Bg,tk),e(tk,Aze),e(Bg,yze),e(F,Lze),e(F,Pg),e(Pg,jK),e(jK,xze),e(Pg,kze),e(Pg,ak),e(ak,Sze),e(Pg,Rze),e(mo,Bze),e(mo,DK),e(DK,Pze),e(mo,$ze),g(AE,mo,null),e(Qo,Ize),e(Qo,$g),g(yE,$g,null),e($g,qze),e($g,GK),e(GK,Nze),b(c,XSe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,OK),g(LE,OK,null),e(Qi,jze),e(Qi,VK),e(VK,Dze),b(c,zSe,u),b(c,Wo,u),g(xE,Wo,null),e(Wo,Gze),e(Wo,kE),e(kE,Oze),e(kE,nk),e(nk,Vze),e(kE,Xze),e(Wo,zze),e(Wo,SE),e(SE,Qze),e(SE,XK),e(XK,Wze),e(SE,Hze),e(Wo,Uze),e(Wo,go),g(RE,go,null),e(go,Jze),e(go,zK),e(zK,Yze),e(go,Kze),e(go,Oa),e(Oa,Zze),e(Oa,QK),e(QK,eQe),e(Oa,oQe),e(Oa,WK),e(WK,rQe),e(Oa,tQe),e(Oa,HK),e(HK,aQe),e(Oa,nQe),e(go,sQe),e(go,C),e(C,Qn),e(Qn,UK),e(UK,lQe),e(Qn,iQe),e(Qn,sk),e(sk,dQe),e(Qn,cQe),e(Qn,lk),e(lk,fQe),e(Qn,mQe),e(C,gQe),e(C,Wn),e(Wn,JK),e(JK,hQe),e(Wn,pQe),e(Wn,ik),e(ik,_Qe),e(Wn,uQe),e(Wn,dk),e(dk,bQe),e(Wn,FQe),e(C,vQe),e(C,Hn),e(Hn,YK),e(YK,TQe),e(Hn,MQe),e(Hn,ck),e(ck,EQe),e(Hn,CQe),e(Hn,fk),e(fk,wQe),e(Hn,AQe),e(C,yQe),e(C,qg),e(qg,KK),e(KK,LQe),e(qg,xQe),e(qg,mk),e(mk,kQe),e(qg,SQe),e(C,RQe),e(C,Un),e(Un,ZK),e(ZK,BQe),e(Un,PQe),e(Un,gk),e(gk,$Qe),e(Un,IQe),e(Un,hk),e(hk,qQe),e(Un,NQe),e(C,jQe),e(C,Ng),e(Ng,eZ),e(eZ,DQe),e(Ng,GQe),e(Ng,pk),e(pk,OQe),e(Ng,VQe),e(C,XQe),e(C,jg),e(jg,oZ),e(oZ,zQe),e(jg,QQe),e(jg,_k),e(_k,WQe),e(jg,HQe),e(C,UQe),e(C,Dg),e(Dg,rZ),e(rZ,JQe),e(Dg,YQe),e(Dg,uk),e(uk,KQe),e(Dg,ZQe),e(C,eWe),e(C,Jn),e(Jn,tZ),e(tZ,oWe),e(Jn,rWe),e(Jn,bk),e(bk,tWe),e(Jn,aWe),e(Jn,Fk),e(Fk,nWe),e(Jn,sWe),e(C,lWe),e(C,Yn),e(Yn,aZ),e(aZ,iWe),e(Yn,dWe),e(Yn,vk),e(vk,cWe),e(Yn,fWe),e(Yn,Tk),e(Tk,mWe),e(Yn,gWe),e(C,hWe),e(C,Kn),e(Kn,nZ),e(nZ,pWe),e(Kn,_We),e(Kn,Mk),e(Mk,uWe),e(Kn,bWe),e(Kn,Ek),e(Ek,FWe),e(Kn,vWe),e(C,TWe),e(C,Gg),e(Gg,sZ),e(sZ,MWe),e(Gg,EWe),e(Gg,Ck),e(Ck,CWe),e(Gg,wWe),e(C,AWe),e(C,Og),e(Og,lZ),e(lZ,yWe),e(Og,LWe),e(Og,wk),e(wk,xWe),e(Og,kWe),e(C,SWe),e(C,Zn),e(Zn,iZ),e(iZ,RWe),e(Zn,BWe),e(Zn,Ak),e(Ak,PWe),e(Zn,$We),e(Zn,yk),e(yk,IWe),e(Zn,qWe),e(C,NWe),e(C,Vg),e(Vg,dZ),e(dZ,jWe),e(Vg,DWe),e(Vg,Lk),e(Lk,GWe),e(Vg,OWe),e(C,VWe),e(C,es),e(es,cZ),e(cZ,XWe),e(es,zWe),e(es,xk),e(xk,QWe),e(es,WWe),e(es,kk),e(kk,HWe),e(es,UWe),e(C,JWe),e(C,os),e(os,fZ),e(fZ,YWe),e(os,KWe),e(os,Sk),e(Sk,ZWe),e(os,eHe),e(os,Rk),e(Rk,oHe),e(os,rHe),e(C,tHe),e(C,rs),e(rs,mZ),e(mZ,aHe),e(rs,nHe),e(rs,Bk),e(Bk,sHe),e(rs,lHe),e(rs,gZ),e(gZ,iHe),e(rs,dHe),e(C,cHe),e(C,Xg),e(Xg,hZ),e(hZ,fHe),e(Xg,mHe),e(Xg,Pk),e(Pk,gHe),e(Xg,hHe),e(C,pHe),e(C,ts),e(ts,pZ),e(pZ,_He),e(ts,uHe),e(ts,$k),e($k,bHe),e(ts,FHe),e(ts,Ik),e(Ik,vHe),e(ts,THe),e(C,MHe),e(C,zg),e(zg,_Z),e(_Z,EHe),e(zg,CHe),e(zg,qk),e(qk,wHe),e(zg,AHe),e(C,yHe),e(C,as),e(as,uZ),e(uZ,LHe),e(as,xHe),e(as,Nk),e(Nk,kHe),e(as,SHe),e(as,jk),e(jk,RHe),e(as,BHe),e(C,PHe),e(C,ns),e(ns,bZ),e(bZ,$He),e(ns,IHe),e(ns,Dk),e(Dk,qHe),e(ns,NHe),e(ns,Gk),e(Gk,jHe),e(ns,DHe),e(C,GHe),e(C,ss),e(ss,FZ),e(FZ,OHe),e(ss,VHe),e(ss,Ok),e(Ok,XHe),e(ss,zHe),e(ss,Vk),e(Vk,QHe),e(ss,WHe),e(C,HHe),e(C,Qg),e(Qg,vZ),e(vZ,UHe),e(Qg,JHe),e(Qg,Xk),e(Xk,YHe),e(Qg,KHe),e(C,ZHe),e(C,ls),e(ls,TZ),e(TZ,eUe),e(ls,oUe),e(ls,zk),e(zk,rUe),e(ls,tUe),e(ls,Qk),e(Qk,aUe),e(ls,nUe),e(C,sUe),e(C,Wg),e(Wg,MZ),e(MZ,lUe),e(Wg,iUe),e(Wg,Wk),e(Wk,dUe),e(Wg,cUe),e(C,fUe),e(C,is),e(is,EZ),e(EZ,mUe),e(is,gUe),e(is,Hk),e(Hk,hUe),e(is,pUe),e(is,Uk),e(Uk,_Ue),e(is,uUe),e(C,bUe),e(C,ds),e(ds,CZ),e(CZ,FUe),e(ds,vUe),e(ds,Jk),e(Jk,TUe),e(ds,MUe),e(ds,Yk),e(Yk,EUe),e(ds,CUe),e(C,wUe),e(C,cs),e(cs,wZ),e(wZ,AUe),e(cs,yUe),e(cs,Kk),e(Kk,LUe),e(cs,xUe),e(cs,Zk),e(Zk,kUe),e(cs,SUe),e(C,RUe),e(C,fs),e(fs,AZ),e(AZ,BUe),e(fs,PUe),e(fs,eS),e(eS,$Ue),e(fs,IUe),e(fs,oS),e(oS,qUe),e(fs,NUe),e(C,jUe),e(C,Hg),e(Hg,yZ),e(yZ,DUe),e(Hg,GUe),e(Hg,rS),e(rS,OUe),e(Hg,VUe),e(C,XUe),e(C,ms),e(ms,LZ),e(LZ,zUe),e(ms,QUe),e(ms,tS),e(tS,WUe),e(ms,HUe),e(ms,aS),e(aS,UUe),e(ms,JUe),e(C,YUe),e(C,gs),e(gs,xZ),e(xZ,KUe),e(gs,ZUe),e(gs,nS),e(nS,eJe),e(gs,oJe),e(gs,sS),e(sS,rJe),e(gs,tJe),e(C,aJe),e(C,hs),e(hs,kZ),e(kZ,nJe),e(hs,sJe),e(hs,lS),e(lS,lJe),e(hs,iJe),e(hs,iS),e(iS,dJe),e(hs,cJe),e(C,fJe),e(C,ps),e(ps,SZ),e(SZ,mJe),e(ps,gJe),e(ps,dS),e(dS,hJe),e(ps,pJe),e(ps,cS),e(cS,_Je),e(ps,uJe),e(C,bJe),e(C,_s),e(_s,RZ),e(RZ,FJe),e(_s,vJe),e(_s,fS),e(fS,TJe),e(_s,MJe),e(_s,mS),e(mS,EJe),e(_s,CJe),e(C,wJe),e(C,us),e(us,BZ),e(BZ,AJe),e(us,yJe),e(us,gS),e(gS,LJe),e(us,xJe),e(us,hS),e(hS,kJe),e(us,SJe),e(C,RJe),e(C,Ug),e(Ug,PZ),e(PZ,BJe),e(Ug,PJe),e(Ug,pS),e(pS,$Je),e(Ug,IJe),e(C,qJe),e(C,bs),e(bs,$Z),e($Z,NJe),e(bs,jJe),e(bs,_S),e(_S,DJe),e(bs,GJe),e(bs,uS),e(uS,OJe),e(bs,VJe),e(C,XJe),e(C,Jg),e(Jg,IZ),e(IZ,zJe),e(Jg,QJe),e(Jg,bS),e(bS,WJe),e(Jg,HJe),e(C,UJe),e(C,Yg),e(Yg,qZ),e(qZ,JJe),e(Yg,YJe),e(Yg,FS),e(FS,KJe),e(Yg,ZJe),e(C,eYe),e(C,Fs),e(Fs,NZ),e(NZ,oYe),e(Fs,rYe),e(Fs,vS),e(vS,tYe),e(Fs,aYe),e(Fs,TS),e(TS,nYe),e(Fs,sYe),e(C,lYe),e(C,vs),e(vs,jZ),e(jZ,iYe),e(vs,dYe),e(vs,MS),e(MS,cYe),e(vs,fYe),e(vs,ES),e(ES,mYe),e(vs,gYe),e(C,hYe),e(C,Kg),e(Kg,DZ),e(DZ,pYe),e(Kg,_Ye),e(Kg,CS),e(CS,uYe),e(Kg,bYe),e(C,FYe),e(C,Ts),e(Ts,GZ),e(GZ,vYe),e(Ts,TYe),e(Ts,wS),e(wS,MYe),e(Ts,EYe),e(Ts,AS),e(AS,CYe),e(Ts,wYe),e(C,AYe),e(C,Ms),e(Ms,OZ),e(OZ,yYe),e(Ms,LYe),e(Ms,yS),e(yS,xYe),e(Ms,kYe),e(Ms,LS),e(LS,SYe),e(Ms,RYe),e(C,BYe),e(C,Es),e(Es,VZ),e(VZ,PYe),e(Es,$Ye),e(Es,xS),e(xS,IYe),e(Es,qYe),e(Es,kS),e(kS,NYe),e(Es,jYe),e(C,DYe),e(C,Cs),e(Cs,XZ),e(XZ,GYe),e(Cs,OYe),e(Cs,SS),e(SS,VYe),e(Cs,XYe),e(Cs,RS),e(RS,zYe),e(Cs,QYe),e(C,WYe),e(C,ws),e(ws,zZ),e(zZ,HYe),e(ws,UYe),e(ws,BS),e(BS,JYe),e(ws,YYe),e(ws,PS),e(PS,KYe),e(ws,ZYe),e(C,eKe),e(C,Zg),e(Zg,QZ),e(QZ,oKe),e(Zg,rKe),e(Zg,$S),e($S,tKe),e(Zg,aKe),e(C,nKe),e(C,eh),e(eh,WZ),e(WZ,sKe),e(eh,lKe),e(eh,IS),e(IS,iKe),e(eh,dKe),e(C,cKe),e(C,oh),e(oh,HZ),e(HZ,fKe),e(oh,mKe),e(oh,qS),e(qS,gKe),e(oh,hKe),e(C,pKe),e(C,rh),e(rh,UZ),e(UZ,_Ke),e(rh,uKe),e(rh,NS),e(NS,bKe),e(rh,FKe),e(C,vKe),e(C,As),e(As,JZ),e(JZ,TKe),e(As,MKe),e(As,jS),e(jS,EKe),e(As,CKe),e(As,DS),e(DS,wKe),e(As,AKe),e(C,yKe),e(C,th),e(th,YZ),e(YZ,LKe),e(th,xKe),e(th,GS),e(GS,kKe),e(th,SKe),e(C,RKe),e(C,ys),e(ys,KZ),e(KZ,BKe),e(ys,PKe),e(ys,OS),e(OS,$Ke),e(ys,IKe),e(ys,VS),e(VS,qKe),e(ys,NKe),e(C,jKe),e(C,Ls),e(Ls,ZZ),e(ZZ,DKe),e(Ls,GKe),e(Ls,XS),e(XS,OKe),e(Ls,VKe),e(Ls,zS),e(zS,XKe),e(Ls,zKe),e(C,QKe),e(C,xs),e(xs,eee),e(eee,WKe),e(xs,HKe),e(xs,QS),e(QS,UKe),e(xs,JKe),e(xs,WS),e(WS,YKe),e(xs,KKe),e(C,ZKe),e(C,ks),e(ks,oee),e(oee,eZe),e(ks,oZe),e(ks,HS),e(HS,rZe),e(ks,tZe),e(ks,US),e(US,aZe),e(ks,nZe),e(C,sZe),e(C,Ss),e(Ss,ree),e(ree,lZe),e(Ss,iZe),e(Ss,JS),e(JS,dZe),e(Ss,cZe),e(Ss,YS),e(YS,fZe),e(Ss,mZe),e(C,gZe),e(C,Rs),e(Rs,tee),e(tee,hZe),e(Rs,pZe),e(Rs,KS),e(KS,_Ze),e(Rs,uZe),e(Rs,ZS),e(ZS,bZe),e(Rs,FZe),e(C,vZe),e(C,ah),e(ah,aee),e(aee,TZe),e(ah,MZe),e(ah,eR),e(eR,EZe),e(ah,CZe),e(C,wZe),e(C,nh),e(nh,nee),e(nee,AZe),e(nh,yZe),e(nh,oR),e(oR,LZe),e(nh,xZe),e(C,kZe),e(C,Bs),e(Bs,see),e(see,SZe),e(Bs,RZe),e(Bs,rR),e(rR,BZe),e(Bs,PZe),e(Bs,tR),e(tR,$Ze),e(Bs,IZe),e(C,qZe),e(C,Ps),e(Ps,lee),e(lee,NZe),e(Ps,jZe),e(Ps,aR),e(aR,DZe),e(Ps,GZe),e(Ps,nR),e(nR,OZe),e(Ps,VZe),e(C,XZe),e(C,$s),e($s,iee),e(iee,zZe),e($s,QZe),e($s,sR),e(sR,WZe),e($s,HZe),e($s,lR),e(lR,UZe),e($s,JZe),e(C,YZe),e(C,sh),e(sh,dee),e(dee,KZe),e(sh,ZZe),e(sh,iR),e(iR,eeo),e(sh,oeo),e(C,reo),e(C,lh),e(lh,cee),e(cee,teo),e(lh,aeo),e(lh,dR),e(dR,neo),e(lh,seo),e(C,leo),e(C,ih),e(ih,fee),e(fee,ieo),e(ih,deo),e(ih,cR),e(cR,ceo),e(ih,feo),e(C,meo),e(C,dh),e(dh,mee),e(mee,geo),e(dh,heo),e(dh,fR),e(fR,peo),e(dh,_eo),e(C,ueo),e(C,Is),e(Is,gee),e(gee,beo),e(Is,Feo),e(Is,mR),e(mR,veo),e(Is,Teo),e(Is,gR),e(gR,Meo),e(Is,Eeo),e(C,Ceo),e(C,ch),e(ch,hee),e(hee,weo),e(ch,Aeo),e(ch,hR),e(hR,yeo),e(ch,Leo),e(C,xeo),e(C,fh),e(fh,pee),e(pee,keo),e(fh,Seo),e(fh,pR),e(pR,Reo),e(fh,Beo),e(C,Peo),e(C,qs),e(qs,_ee),e(_ee,$eo),e(qs,Ieo),e(qs,_R),e(_R,qeo),e(qs,Neo),e(qs,uR),e(uR,jeo),e(qs,Deo),e(C,Geo),e(C,Ns),e(Ns,uee),e(uee,Oeo),e(Ns,Veo),e(Ns,bR),e(bR,Xeo),e(Ns,zeo),e(Ns,FR),e(FR,Qeo),e(Ns,Weo),e(go,Heo),e(go,bee),e(bee,Ueo),e(go,Jeo),g(BE,go,null),e(Wo,Yeo),e(Wo,mh),g(PE,mh,null),e(mh,Keo),e(mh,Fee),e(Fee,Zeo),b(c,QSe,u),b(c,Wi,u),e(Wi,gh),e(gh,vee),g($E,vee,null),e(Wi,eoo),e(Wi,Tee),e(Tee,ooo),b(c,WSe,u),b(c,Ho,u),g(IE,Ho,null),e(Ho,roo),e(Ho,qE),e(qE,too),e(qE,vR),e(vR,aoo),e(qE,noo),e(Ho,soo),e(Ho,NE),e(NE,loo),e(NE,Mee),e(Mee,ioo),e(NE,doo),e(Ho,coo),e(Ho,$e),g(jE,$e,null),e($e,foo),e($e,Eee),e(Eee,moo),e($e,goo),e($e,Va),e(Va,hoo),e(Va,Cee),e(Cee,poo),e(Va,_oo),e(Va,wee),e(wee,uoo),e(Va,boo),e(Va,Aee),e(Aee,Foo),e(Va,voo),e($e,Too),e($e,te),e(te,hh),e(hh,yee),e(yee,Moo),e(hh,Eoo),e(hh,TR),e(TR,Coo),e(hh,woo),e(te,Aoo),e(te,ph),e(ph,Lee),e(Lee,yoo),e(ph,Loo),e(ph,MR),e(MR,xoo),e(ph,koo),e(te,Soo),e(te,_h),e(_h,xee),e(xee,Roo),e(_h,Boo),e(_h,ER),e(ER,Poo),e(_h,$oo),e(te,Ioo),e(te,uh),e(uh,kee),e(kee,qoo),e(uh,Noo),e(uh,CR),e(CR,joo),e(uh,Doo),e(te,Goo),e(te,bh),e(bh,See),e(See,Ooo),e(bh,Voo),e(bh,wR),e(wR,Xoo),e(bh,zoo),e(te,Qoo),e(te,Fh),e(Fh,Ree),e(Ree,Woo),e(Fh,Hoo),e(Fh,AR),e(AR,Uoo),e(Fh,Joo),e(te,Yoo),e(te,vh),e(vh,Bee),e(Bee,Koo),e(vh,Zoo),e(vh,yR),e(yR,ero),e(vh,oro),e(te,rro),e(te,Th),e(Th,Pee),e(Pee,tro),e(Th,aro),e(Th,LR),e(LR,nro),e(Th,sro),e(te,lro),e(te,Mh),e(Mh,$ee),e($ee,iro),e(Mh,dro),e(Mh,xR),e(xR,cro),e(Mh,fro),e(te,mro),e(te,Eh),e(Eh,Iee),e(Iee,gro),e(Eh,hro),e(Eh,kR),e(kR,pro),e(Eh,_ro),e(te,uro),e(te,Ch),e(Ch,qee),e(qee,bro),e(Ch,Fro),e(Ch,SR),e(SR,vro),e(Ch,Tro),e(te,Mro),e(te,wh),e(wh,Nee),e(Nee,Ero),e(wh,Cro),e(wh,RR),e(RR,wro),e(wh,Aro),e(te,yro),e(te,Ah),e(Ah,jee),e(jee,Lro),e(Ah,xro),e(Ah,BR),e(BR,kro),e(Ah,Sro),e(te,Rro),e(te,yh),e(yh,Dee),e(Dee,Bro),e(yh,Pro),e(yh,PR),e(PR,$ro),e(yh,Iro),e(te,qro),e(te,Lh),e(Lh,Gee),e(Gee,Nro),e(Lh,jro),e(Lh,$R),e($R,Dro),e(Lh,Gro),e(te,Oro),e(te,xh),e(xh,Oee),e(Oee,Vro),e(xh,Xro),e(xh,IR),e(IR,zro),e(xh,Qro),e(te,Wro),e(te,kh),e(kh,Vee),e(Vee,Hro),e(kh,Uro),e(kh,qR),e(qR,Jro),e(kh,Yro),e(te,Kro),e(te,Sh),e(Sh,Xee),e(Xee,Zro),e(Sh,eto),e(Sh,NR),e(NR,oto),e(Sh,rto),e($e,tto),g(Rh,$e,null),e($e,ato),e($e,zee),e(zee,nto),e($e,sto),g(DE,$e,null),e(Ho,lto),e(Ho,Bh),g(GE,Bh,null),e(Bh,ito),e(Bh,Qee),e(Qee,dto),b(c,HSe,u),b(c,Hi,u),e(Hi,Ph),e(Ph,Wee),g(OE,Wee,null),e(Hi,cto),e(Hi,Hee),e(Hee,fto),b(c,USe,u),b(c,Uo,u),g(VE,Uo,null),e(Uo,mto),e(Uo,XE),e(XE,gto),e(XE,jR),e(jR,hto),e(XE,pto),e(Uo,_to),e(Uo,zE),e(zE,uto),e(zE,Uee),e(Uee,bto),e(zE,Fto),e(Uo,vto),e(Uo,Ie),g(QE,Ie,null),e(Ie,Tto),e(Ie,Jee),e(Jee,Mto),e(Ie,Eto),e(Ie,Ui),e(Ui,Cto),e(Ui,Yee),e(Yee,wto),e(Ui,Ato),e(Ui,Kee),e(Kee,yto),e(Ui,Lto),e(Ie,xto),e(Ie,ke),e(ke,$h),e($h,Zee),e(Zee,kto),e($h,Sto),e($h,DR),e(DR,Rto),e($h,Bto),e(ke,Pto),e(ke,Ih),e(Ih,eoe),e(eoe,$to),e(Ih,Ito),e(Ih,GR),e(GR,qto),e(Ih,Nto),e(ke,jto),e(ke,qh),e(qh,ooe),e(ooe,Dto),e(qh,Gto),e(qh,OR),e(OR,Oto),e(qh,Vto),e(ke,Xto),e(ke,Nh),e(Nh,roe),e(roe,zto),e(Nh,Qto),e(Nh,VR),e(VR,Wto),e(Nh,Hto),e(ke,Uto),e(ke,jh),e(jh,toe),e(toe,Jto),e(jh,Yto),e(jh,XR),e(XR,Kto),e(jh,Zto),e(ke,eao),e(ke,Dh),e(Dh,aoe),e(aoe,oao),e(Dh,rao),e(Dh,zR),e(zR,tao),e(Dh,aao),e(ke,nao),e(ke,Gh),e(Gh,noe),e(noe,sao),e(Gh,lao),e(Gh,QR),e(QR,iao),e(Gh,dao),e(ke,cao),e(ke,Oh),e(Oh,soe),e(soe,fao),e(Oh,mao),e(Oh,WR),e(WR,gao),e(Oh,hao),e(Ie,pao),g(Vh,Ie,null),e(Ie,_ao),e(Ie,loe),e(loe,uao),e(Ie,bao),g(WE,Ie,null),e(Uo,Fao),e(Uo,Xh),g(HE,Xh,null),e(Xh,vao),e(Xh,ioe),e(ioe,Tao),b(c,JSe,u),b(c,Ji,u),e(Ji,zh),e(zh,doe),g(UE,doe,null),e(Ji,Mao),e(Ji,coe),e(coe,Eao),b(c,YSe,u),b(c,Jo,u),g(JE,Jo,null),e(Jo,Cao),e(Jo,Yi),e(Yi,wao),e(Yi,HR),e(HR,Aao),e(Yi,yao),e(Yi,UR),e(UR,Lao),e(Yi,xao),e(Jo,kao),e(Jo,YE),e(YE,Sao),e(YE,foe),e(foe,Rao),e(YE,Bao),e(Jo,Pao),e(Jo,Xr),g(KE,Xr,null),e(Xr,$ao),e(Xr,moe),e(moe,Iao),e(Xr,qao),e(Xr,Ki),e(Ki,Nao),e(Ki,goe),e(goe,jao),e(Ki,Dao),e(Ki,JR),e(JR,Gao),e(Ki,Oao),e(Xr,Vao),e(Xr,hoe),e(hoe,Xao),e(Xr,zao),g(ZE,Xr,null),e(Jo,Qao),e(Jo,qe),g(eC,qe,null),e(qe,Wao),e(qe,poe),e(poe,Hao),e(qe,Uao),e(qe,Xa),e(Xa,Jao),e(Xa,_oe),e(_oe,Yao),e(Xa,Kao),e(Xa,uoe),e(uoe,Zao),e(Xa,eno),e(Xa,boe),e(boe,ono),e(Xa,rno),e(qe,tno),e(qe,T),e(T,Qh),e(Qh,Foe),e(Foe,ano),e(Qh,nno),e(Qh,YR),e(YR,sno),e(Qh,lno),e(T,ino),e(T,Wh),e(Wh,voe),e(voe,dno),e(Wh,cno),e(Wh,KR),e(KR,fno),e(Wh,mno),e(T,gno),e(T,Hh),e(Hh,Toe),e(Toe,hno),e(Hh,pno),e(Hh,ZR),e(ZR,_no),e(Hh,uno),e(T,bno),e(T,Uh),e(Uh,Moe),e(Moe,Fno),e(Uh,vno),e(Uh,eB),e(eB,Tno),e(Uh,Mno),e(T,Eno),e(T,Jh),e(Jh,Eoe),e(Eoe,Cno),e(Jh,wno),e(Jh,oB),e(oB,Ano),e(Jh,yno),e(T,Lno),e(T,Yh),e(Yh,Coe),e(Coe,xno),e(Yh,kno),e(Yh,rB),e(rB,Sno),e(Yh,Rno),e(T,Bno),e(T,Kh),e(Kh,woe),e(woe,Pno),e(Kh,$no),e(Kh,tB),e(tB,Ino),e(Kh,qno),e(T,Nno),e(T,Zh),e(Zh,Aoe),e(Aoe,jno),e(Zh,Dno),e(Zh,aB),e(aB,Gno),e(Zh,Ono),e(T,Vno),e(T,ep),e(ep,yoe),e(yoe,Xno),e(ep,zno),e(ep,nB),e(nB,Qno),e(ep,Wno),e(T,Hno),e(T,op),e(op,Loe),e(Loe,Uno),e(op,Jno),e(op,sB),e(sB,Yno),e(op,Kno),e(T,Zno),e(T,rp),e(rp,xoe),e(xoe,eso),e(rp,oso),e(rp,lB),e(lB,rso),e(rp,tso),e(T,aso),e(T,tp),e(tp,koe),e(koe,nso),e(tp,sso),e(tp,iB),e(iB,lso),e(tp,iso),e(T,dso),e(T,ap),e(ap,Soe),e(Soe,cso),e(ap,fso),e(ap,dB),e(dB,mso),e(ap,gso),e(T,hso),e(T,np),e(np,Roe),e(Roe,pso),e(np,_so),e(np,cB),e(cB,uso),e(np,bso),e(T,Fso),e(T,sp),e(sp,Boe),e(Boe,vso),e(sp,Tso),e(sp,fB),e(fB,Mso),e(sp,Eso),e(T,Cso),e(T,lp),e(lp,Poe),e(Poe,wso),e(lp,Aso),e(lp,mB),e(mB,yso),e(lp,Lso),e(T,xso),e(T,ip),e(ip,$oe),e($oe,kso),e(ip,Sso),e(ip,gB),e(gB,Rso),e(ip,Bso),e(T,Pso),e(T,dp),e(dp,Ioe),e(Ioe,$so),e(dp,Iso),e(dp,hB),e(hB,qso),e(dp,Nso),e(T,jso),e(T,cp),e(cp,qoe),e(qoe,Dso),e(cp,Gso),e(cp,pB),e(pB,Oso),e(cp,Vso),e(T,Xso),e(T,fp),e(fp,Noe),e(Noe,zso),e(fp,Qso),e(fp,_B),e(_B,Wso),e(fp,Hso),e(T,Uso),e(T,mp),e(mp,joe),e(joe,Jso),e(mp,Yso),e(mp,uB),e(uB,Kso),e(mp,Zso),e(T,elo),e(T,gp),e(gp,Doe),e(Doe,olo),e(gp,rlo),e(gp,bB),e(bB,tlo),e(gp,alo),e(T,nlo),e(T,hp),e(hp,Goe),e(Goe,slo),e(hp,llo),e(hp,FB),e(FB,ilo),e(hp,dlo),e(T,clo),e(T,pp),e(pp,Ooe),e(Ooe,flo),e(pp,mlo),e(pp,vB),e(vB,glo),e(pp,hlo),e(T,plo),e(T,_p),e(_p,Voe),e(Voe,_lo),e(_p,ulo),e(_p,TB),e(TB,blo),e(_p,Flo),e(T,vlo),e(T,up),e(up,Xoe),e(Xoe,Tlo),e(up,Mlo),e(up,MB),e(MB,Elo),e(up,Clo),e(T,wlo),e(T,bp),e(bp,zoe),e(zoe,Alo),e(bp,ylo),e(bp,EB),e(EB,Llo),e(bp,xlo),e(T,klo),e(T,Fp),e(Fp,Qoe),e(Qoe,Slo),e(Fp,Rlo),e(Fp,CB),e(CB,Blo),e(Fp,Plo),e(T,$lo),e(T,vp),e(vp,Woe),e(Woe,Ilo),e(vp,qlo),e(vp,wB),e(wB,Nlo),e(vp,jlo),e(T,Dlo),e(T,js),e(js,Hoe),e(Hoe,Glo),e(js,Olo),e(js,AB),e(AB,Vlo),e(js,Xlo),e(js,yB),e(yB,zlo),e(js,Qlo),e(T,Wlo),e(T,Tp),e(Tp,Uoe),e(Uoe,Hlo),e(Tp,Ulo),e(Tp,LB),e(LB,Jlo),e(Tp,Ylo),e(T,Klo),e(T,Mp),e(Mp,Joe),e(Joe,Zlo),e(Mp,eio),e(Mp,xB),e(xB,oio),e(Mp,rio),e(T,tio),e(T,Ep),e(Ep,Yoe),e(Yoe,aio),e(Ep,nio),e(Ep,kB),e(kB,sio),e(Ep,lio),e(T,iio),e(T,Cp),e(Cp,Koe),e(Koe,dio),e(Cp,cio),e(Cp,SB),e(SB,fio),e(Cp,mio),e(T,gio),e(T,wp),e(wp,Zoe),e(Zoe,hio),e(wp,pio),e(wp,RB),e(RB,_io),e(wp,uio),e(T,bio),e(T,Ap),e(Ap,ere),e(ere,Fio),e(Ap,vio),e(Ap,BB),e(BB,Tio),e(Ap,Mio),e(T,Eio),e(T,yp),e(yp,ore),e(ore,Cio),e(yp,wio),e(yp,PB),e(PB,Aio),e(yp,yio),e(T,Lio),e(T,Lp),e(Lp,rre),e(rre,xio),e(Lp,kio),e(Lp,$B),e($B,Sio),e(Lp,Rio),e(T,Bio),e(T,xp),e(xp,tre),e(tre,Pio),e(xp,$io),e(xp,IB),e(IB,Iio),e(xp,qio),e(T,Nio),e(T,kp),e(kp,are),e(are,jio),e(kp,Dio),e(kp,qB),e(qB,Gio),e(kp,Oio),e(T,Vio),e(T,Sp),e(Sp,nre),e(nre,Xio),e(Sp,zio),e(Sp,NB),e(NB,Qio),e(Sp,Wio),e(T,Hio),e(T,Rp),e(Rp,sre),e(sre,Uio),e(Rp,Jio),e(Rp,jB),e(jB,Yio),e(Rp,Kio),e(T,Zio),e(T,Bp),e(Bp,lre),e(lre,edo),e(Bp,odo),e(Bp,DB),e(DB,rdo),e(Bp,tdo),e(T,ado),e(T,Pp),e(Pp,ire),e(ire,ndo),e(Pp,sdo),e(Pp,GB),e(GB,ldo),e(Pp,ido),e(T,ddo),e(T,$p),e($p,dre),e(dre,cdo),e($p,fdo),e($p,OB),e(OB,mdo),e($p,gdo),e(T,hdo),e(T,Ip),e(Ip,cre),e(cre,pdo),e(Ip,_do),e(Ip,VB),e(VB,udo),e(Ip,bdo),e(T,Fdo),e(T,qp),e(qp,fre),e(fre,vdo),e(qp,Tdo),e(qp,XB),e(XB,Mdo),e(qp,Edo),e(T,Cdo),e(T,Np),e(Np,mre),e(mre,wdo),e(Np,Ado),e(Np,zB),e(zB,ydo),e(Np,Ldo),e(T,xdo),e(T,jp),e(jp,gre),e(gre,kdo),e(jp,Sdo),e(jp,QB),e(QB,Rdo),e(jp,Bdo),e(T,Pdo),e(T,Dp),e(Dp,hre),e(hre,$do),e(Dp,Ido),e(Dp,WB),e(WB,qdo),e(Dp,Ndo),e(T,jdo),e(T,Gp),e(Gp,pre),e(pre,Ddo),e(Gp,Gdo),e(Gp,HB),e(HB,Odo),e(Gp,Vdo),e(T,Xdo),e(T,Op),e(Op,_re),e(_re,zdo),e(Op,Qdo),e(Op,UB),e(UB,Wdo),e(Op,Hdo),e(T,Udo),e(T,Vp),e(Vp,ure),e(ure,Jdo),e(Vp,Ydo),e(Vp,JB),e(JB,Kdo),e(Vp,Zdo),e(T,eco),e(T,Xp),e(Xp,bre),e(bre,oco),e(Xp,rco),e(Xp,YB),e(YB,tco),e(Xp,aco),e(T,nco),e(T,zp),e(zp,Fre),e(Fre,sco),e(zp,lco),e(zp,KB),e(KB,ico),e(zp,dco),e(T,cco),e(T,Qp),e(Qp,vre),e(vre,fco),e(Qp,mco),e(Qp,ZB),e(ZB,gco),e(Qp,hco),e(T,pco),e(T,Wp),e(Wp,Tre),e(Tre,_co),e(Wp,uco),e(Wp,eP),e(eP,bco),e(Wp,Fco),e(T,vco),e(T,Hp),e(Hp,Mre),e(Mre,Tco),e(Hp,Mco),e(Hp,oP),e(oP,Eco),e(Hp,Cco),e(T,wco),e(T,Up),e(Up,Ere),e(Ere,Aco),e(Up,yco),e(Up,rP),e(rP,Lco),e(Up,xco),e(T,kco),e(T,Jp),e(Jp,Cre),e(Cre,Sco),e(Jp,Rco),e(Jp,tP),e(tP,Bco),e(Jp,Pco),e(T,$co),e(T,Yp),e(Yp,wre),e(wre,Ico),e(Yp,qco),e(Yp,aP),e(aP,Nco),e(Yp,jco),e(T,Dco),e(T,Kp),e(Kp,Are),e(Are,Gco),e(Kp,Oco),e(Kp,nP),e(nP,Vco),e(Kp,Xco),e(T,zco),e(T,Zp),e(Zp,yre),e(yre,Qco),e(Zp,Wco),e(Zp,sP),e(sP,Hco),e(Zp,Uco),e(T,Jco),e(T,e_),e(e_,Lre),e(Lre,Yco),e(e_,Kco),e(e_,lP),e(lP,Zco),e(e_,efo),e(T,ofo),e(T,o_),e(o_,xre),e(xre,rfo),e(o_,tfo),e(o_,iP),e(iP,afo),e(o_,nfo),e(T,sfo),e(T,r_),e(r_,kre),e(kre,lfo),e(r_,ifo),e(r_,dP),e(dP,dfo),e(r_,cfo),e(T,ffo),e(T,t_),e(t_,Sre),e(Sre,mfo),e(t_,gfo),e(t_,cP),e(cP,hfo),e(t_,pfo),e(T,_fo),e(T,a_),e(a_,Rre),e(Rre,ufo),e(a_,bfo),e(a_,fP),e(fP,Ffo),e(a_,vfo),e(T,Tfo),e(T,n_),e(n_,Bre),e(Bre,Mfo),e(n_,Efo),e(n_,mP),e(mP,Cfo),e(n_,wfo),e(T,Afo),e(T,s_),e(s_,Pre),e(Pre,yfo),e(s_,Lfo),e(s_,gP),e(gP,xfo),e(s_,kfo),e(T,Sfo),e(T,l_),e(l_,$re),e($re,Rfo),e(l_,Bfo),e(l_,hP),e(hP,Pfo),e(l_,$fo),e(T,Ifo),e(T,i_),e(i_,Ire),e(Ire,qfo),e(i_,Nfo),e(i_,pP),e(pP,jfo),e(i_,Dfo),e(T,Gfo),e(T,d_),e(d_,qre),e(qre,Ofo),e(d_,Vfo),e(d_,_P),e(_P,Xfo),e(d_,zfo),e(T,Qfo),e(T,c_),e(c_,Nre),e(Nre,Wfo),e(c_,Hfo),e(c_,uP),e(uP,Ufo),e(c_,Jfo),e(T,Yfo),e(T,f_),e(f_,jre),e(jre,Kfo),e(f_,Zfo),e(f_,bP),e(bP,emo),e(f_,omo),e(T,rmo),e(T,m_),e(m_,Dre),e(Dre,tmo),e(m_,amo),e(m_,FP),e(FP,nmo),e(m_,smo),e(T,lmo),e(T,g_),e(g_,Gre),e(Gre,imo),e(g_,dmo),e(g_,vP),e(vP,cmo),e(g_,fmo),e(T,mmo),e(T,h_),e(h_,Ore),e(Ore,gmo),e(h_,hmo),e(h_,TP),e(TP,pmo),e(h_,_mo),e(T,umo),e(T,p_),e(p_,Vre),e(Vre,bmo),e(p_,Fmo),e(p_,MP),e(MP,vmo),e(p_,Tmo),e(T,Mmo),e(T,__),e(__,Xre),e(Xre,Emo),e(__,Cmo),e(__,EP),e(EP,wmo),e(__,Amo),e(T,ymo),e(T,u_),e(u_,zre),e(zre,Lmo),e(u_,xmo),e(u_,CP),e(CP,kmo),e(u_,Smo),e(T,Rmo),e(T,b_),e(b_,Qre),e(Qre,Bmo),e(b_,Pmo),e(b_,wP),e(wP,$mo),e(b_,Imo),e(T,qmo),e(T,F_),e(F_,Wre),e(Wre,Nmo),e(F_,jmo),e(F_,AP),e(AP,Dmo),e(F_,Gmo),e(T,Omo),e(T,v_),e(v_,Hre),e(Hre,Vmo),e(v_,Xmo),e(v_,yP),e(yP,zmo),e(v_,Qmo),e(T,Wmo),e(T,T_),e(T_,Ure),e(Ure,Hmo),e(T_,Umo),e(T_,LP),e(LP,Jmo),e(T_,Ymo),e(T,Kmo),e(T,M_),e(M_,Jre),e(Jre,Zmo),e(M_,ego),e(M_,xP),e(xP,ogo),e(M_,rgo),e(T,tgo),e(T,E_),e(E_,Yre),e(Yre,ago),e(E_,ngo),e(E_,kP),e(kP,sgo),e(E_,lgo),e(T,igo),e(T,C_),e(C_,Kre),e(Kre,dgo),e(C_,cgo),e(C_,SP),e(SP,fgo),e(C_,mgo),e(T,ggo),e(T,w_),e(w_,Zre),e(Zre,hgo),e(w_,pgo),e(w_,RP),e(RP,_go),e(w_,ugo),e(T,bgo),e(T,A_),e(A_,ete),e(ete,Fgo),e(A_,vgo),e(A_,BP),e(BP,Tgo),e(A_,Mgo),e(T,Ego),e(T,y_),e(y_,ote),e(ote,Cgo),e(y_,wgo),e(y_,PP),e(PP,Ago),e(y_,ygo),e(T,Lgo),e(T,L_),e(L_,rte),e(rte,xgo),e(L_,kgo),e(L_,$P),e($P,Sgo),e(L_,Rgo),e(qe,Bgo),e(qe,x_),e(x_,Pgo),e(x_,tte),e(tte,$go),e(x_,Igo),e(x_,ate),e(ate,qgo),e(qe,Ngo),e(qe,nte),e(nte,jgo),e(qe,Dgo),g(oC,qe,null),b(c,KSe,u),b(c,Zi,u),e(Zi,k_),e(k_,ste),g(rC,ste,null),e(Zi,Ggo),e(Zi,lte),e(lte,Ogo),b(c,ZSe,u),b(c,Yo,u),g(tC,Yo,null),e(Yo,Vgo),e(Yo,ed),e(ed,Xgo),e(ed,IP),e(IP,zgo),e(ed,Qgo),e(ed,qP),e(qP,Wgo),e(ed,Hgo),e(Yo,Ugo),e(Yo,aC),e(aC,Jgo),e(aC,ite),e(ite,Ygo),e(aC,Kgo),e(Yo,Zgo),e(Yo,zr),g(nC,zr,null),e(zr,eho),e(zr,dte),e(dte,oho),e(zr,rho),e(zr,od),e(od,tho),e(od,cte),e(cte,aho),e(od,nho),e(od,NP),e(NP,sho),e(od,lho),e(zr,iho),e(zr,fte),e(fte,dho),e(zr,cho),g(sC,zr,null),e(Yo,fho),e(Yo,Ne),g(lC,Ne,null),e(Ne,mho),e(Ne,mte),e(mte,gho),e(Ne,hho),e(Ne,za),e(za,pho),e(za,gte),e(gte,_ho),e(za,uho),e(za,hte),e(hte,bho),e(za,Fho),e(za,pte),e(pte,vho),e(za,Tho),e(Ne,Mho),e(Ne,S),e(S,S_),e(S_,_te),e(_te,Eho),e(S_,Cho),e(S_,jP),e(jP,who),e(S_,Aho),e(S,yho),e(S,R_),e(R_,ute),e(ute,Lho),e(R_,xho),e(R_,DP),e(DP,kho),e(R_,Sho),e(S,Rho),e(S,B_),e(B_,bte),e(bte,Bho),e(B_,Pho),e(B_,GP),e(GP,$ho),e(B_,Iho),e(S,qho),e(S,P_),e(P_,Fte),e(Fte,Nho),e(P_,jho),e(P_,OP),e(OP,Dho),e(P_,Gho),e(S,Oho),e(S,$_),e($_,vte),e(vte,Vho),e($_,Xho),e($_,VP),e(VP,zho),e($_,Qho),e(S,Who),e(S,I_),e(I_,Tte),e(Tte,Hho),e(I_,Uho),e(I_,XP),e(XP,Jho),e(I_,Yho),e(S,Kho),e(S,q_),e(q_,Mte),e(Mte,Zho),e(q_,epo),e(q_,zP),e(zP,opo),e(q_,rpo),e(S,tpo),e(S,N_),e(N_,Ete),e(Ete,apo),e(N_,npo),e(N_,QP),e(QP,spo),e(N_,lpo),e(S,ipo),e(S,j_),e(j_,Cte),e(Cte,dpo),e(j_,cpo),e(j_,WP),e(WP,fpo),e(j_,mpo),e(S,gpo),e(S,D_),e(D_,wte),e(wte,hpo),e(D_,ppo),e(D_,HP),e(HP,_po),e(D_,upo),e(S,bpo),e(S,G_),e(G_,Ate),e(Ate,Fpo),e(G_,vpo),e(G_,UP),e(UP,Tpo),e(G_,Mpo),e(S,Epo),e(S,O_),e(O_,yte),e(yte,Cpo),e(O_,wpo),e(O_,JP),e(JP,Apo),e(O_,ypo),e(S,Lpo),e(S,V_),e(V_,Lte),e(Lte,xpo),e(V_,kpo),e(V_,YP),e(YP,Spo),e(V_,Rpo),e(S,Bpo),e(S,X_),e(X_,xte),e(xte,Ppo),e(X_,$po),e(X_,KP),e(KP,Ipo),e(X_,qpo),e(S,Npo),e(S,z_),e(z_,kte),e(kte,jpo),e(z_,Dpo),e(z_,ZP),e(ZP,Gpo),e(z_,Opo),e(S,Vpo),e(S,Q_),e(Q_,Ste),e(Ste,Xpo),e(Q_,zpo),e(Q_,e$),e(e$,Qpo),e(Q_,Wpo),e(S,Hpo),e(S,W_),e(W_,Rte),e(Rte,Upo),e(W_,Jpo),e(W_,o$),e(o$,Ypo),e(W_,Kpo),e(S,Zpo),e(S,H_),e(H_,Bte),e(Bte,e_o),e(H_,o_o),e(H_,r$),e(r$,r_o),e(H_,t_o),e(S,a_o),e(S,U_),e(U_,Pte),e(Pte,n_o),e(U_,s_o),e(U_,t$),e(t$,l_o),e(U_,i_o),e(S,d_o),e(S,J_),e(J_,$te),e($te,c_o),e(J_,f_o),e(J_,a$),e(a$,m_o),e(J_,g_o),e(S,h_o),e(S,Y_),e(Y_,Ite),e(Ite,p_o),e(Y_,__o),e(Y_,n$),e(n$,u_o),e(Y_,b_o),e(S,F_o),e(S,K_),e(K_,qte),e(qte,v_o),e(K_,T_o),e(K_,s$),e(s$,M_o),e(K_,E_o),e(S,C_o),e(S,Z_),e(Z_,Nte),e(Nte,w_o),e(Z_,A_o),e(Z_,l$),e(l$,y_o),e(Z_,L_o),e(S,x_o),e(S,eu),e(eu,jte),e(jte,k_o),e(eu,S_o),e(eu,i$),e(i$,R_o),e(eu,B_o),e(S,P_o),e(S,ou),e(ou,Dte),e(Dte,$_o),e(ou,I_o),e(ou,d$),e(d$,q_o),e(ou,N_o),e(S,j_o),e(S,ru),e(ru,Gte),e(Gte,D_o),e(ru,G_o),e(ru,c$),e(c$,O_o),e(ru,V_o),e(S,X_o),e(S,tu),e(tu,Ote),e(Ote,z_o),e(tu,Q_o),e(tu,f$),e(f$,W_o),e(tu,H_o),e(S,U_o),e(S,au),e(au,Vte),e(Vte,J_o),e(au,Y_o),e(au,m$),e(m$,K_o),e(au,Z_o),e(S,euo),e(S,nu),e(nu,Xte),e(Xte,ouo),e(nu,ruo),e(nu,g$),e(g$,tuo),e(nu,auo),e(S,nuo),e(S,su),e(su,zte),e(zte,suo),e(su,luo),e(su,h$),e(h$,iuo),e(su,duo),e(S,cuo),e(S,lu),e(lu,Qte),e(Qte,fuo),e(lu,muo),e(lu,p$),e(p$,guo),e(lu,huo),e(S,puo),e(S,iu),e(iu,Wte),e(Wte,_uo),e(iu,uuo),e(iu,_$),e(_$,buo),e(iu,Fuo),e(S,vuo),e(S,du),e(du,Hte),e(Hte,Tuo),e(du,Muo),e(du,u$),e(u$,Euo),e(du,Cuo),e(S,wuo),e(S,cu),e(cu,Ute),e(Ute,Auo),e(cu,yuo),e(cu,b$),e(b$,Luo),e(cu,xuo),e(S,kuo),e(S,fu),e(fu,Jte),e(Jte,Suo),e(fu,Ruo),e(fu,F$),e(F$,Buo),e(fu,Puo),e(S,$uo),e(S,mu),e(mu,Yte),e(Yte,Iuo),e(mu,quo),e(mu,v$),e(v$,Nuo),e(mu,juo),e(S,Duo),e(S,gu),e(gu,Kte),e(Kte,Guo),e(gu,Ouo),e(gu,T$),e(T$,Vuo),e(gu,Xuo),e(S,zuo),e(S,hu),e(hu,Zte),e(Zte,Quo),e(hu,Wuo),e(hu,M$),e(M$,Huo),e(hu,Uuo),e(S,Juo),e(S,pu),e(pu,eae),e(eae,Yuo),e(pu,Kuo),e(pu,E$),e(E$,Zuo),e(pu,e1o),e(Ne,o1o),e(Ne,_u),e(_u,r1o),e(_u,oae),e(oae,t1o),e(_u,a1o),e(_u,rae),e(rae,n1o),e(Ne,s1o),e(Ne,tae),e(tae,l1o),e(Ne,i1o),g(iC,Ne,null),b(c,eRe,u),b(c,rd,u),e(rd,uu),e(uu,aae),g(dC,aae,null),e(rd,d1o),e(rd,nae),e(nae,c1o),b(c,oRe,u),b(c,Ko,u),g(cC,Ko,null),e(Ko,f1o),e(Ko,td),e(td,m1o),e(td,C$),e(C$,g1o),e(td,h1o),e(td,w$),e(w$,p1o),e(td,_1o),e(Ko,u1o),e(Ko,fC),e(fC,b1o),e(fC,sae),e(sae,F1o),e(fC,v1o),e(Ko,T1o),e(Ko,Qr),g(mC,Qr,null),e(Qr,M1o),e(Qr,lae),e(lae,E1o),e(Qr,C1o),e(Qr,ad),e(ad,w1o),e(ad,iae),e(iae,A1o),e(ad,y1o),e(ad,A$),e(A$,L1o),e(ad,x1o),e(Qr,k1o),e(Qr,dae),e(dae,S1o),e(Qr,R1o),g(gC,Qr,null),e(Ko,B1o),e(Ko,je),g(hC,je,null),e(je,P1o),e(je,cae),e(cae,$1o),e(je,I1o),e(je,Qa),e(Qa,q1o),e(Qa,fae),e(fae,N1o),e(Qa,j1o),e(Qa,mae),e(mae,D1o),e(Qa,G1o),e(Qa,gae),e(gae,O1o),e(Qa,V1o),e(je,X1o),e(je,$),e($,bu),e(bu,hae),e(hae,z1o),e(bu,Q1o),e(bu,y$),e(y$,W1o),e(bu,H1o),e($,U1o),e($,Fu),e(Fu,pae),e(pae,J1o),e(Fu,Y1o),e(Fu,L$),e(L$,K1o),e(Fu,Z1o),e($,ebo),e($,vu),e(vu,_ae),e(_ae,obo),e(vu,rbo),e(vu,x$),e(x$,tbo),e(vu,abo),e($,nbo),e($,Tu),e(Tu,uae),e(uae,sbo),e(Tu,lbo),e(Tu,k$),e(k$,ibo),e(Tu,dbo),e($,cbo),e($,Mu),e(Mu,bae),e(bae,fbo),e(Mu,mbo),e(Mu,S$),e(S$,gbo),e(Mu,hbo),e($,pbo),e($,Eu),e(Eu,Fae),e(Fae,_bo),e(Eu,ubo),e(Eu,R$),e(R$,bbo),e(Eu,Fbo),e($,vbo),e($,Cu),e(Cu,vae),e(vae,Tbo),e(Cu,Mbo),e(Cu,B$),e(B$,Ebo),e(Cu,Cbo),e($,wbo),e($,wu),e(wu,Tae),e(Tae,Abo),e(wu,ybo),e(wu,P$),e(P$,Lbo),e(wu,xbo),e($,kbo),e($,Au),e(Au,Mae),e(Mae,Sbo),e(Au,Rbo),e(Au,$$),e($$,Bbo),e(Au,Pbo),e($,$bo),e($,yu),e(yu,Eae),e(Eae,Ibo),e(yu,qbo),e(yu,I$),e(I$,Nbo),e(yu,jbo),e($,Dbo),e($,Lu),e(Lu,Cae),e(Cae,Gbo),e(Lu,Obo),e(Lu,q$),e(q$,Vbo),e(Lu,Xbo),e($,zbo),e($,xu),e(xu,wae),e(wae,Qbo),e(xu,Wbo),e(xu,N$),e(N$,Hbo),e(xu,Ubo),e($,Jbo),e($,ku),e(ku,Aae),e(Aae,Ybo),e(ku,Kbo),e(ku,j$),e(j$,Zbo),e(ku,e5o),e($,o5o),e($,Su),e(Su,yae),e(yae,r5o),e(Su,t5o),e(Su,D$),e(D$,a5o),e(Su,n5o),e($,s5o),e($,Ru),e(Ru,Lae),e(Lae,l5o),e(Ru,i5o),e(Ru,G$),e(G$,d5o),e(Ru,c5o),e($,f5o),e($,Bu),e(Bu,xae),e(xae,m5o),e(Bu,g5o),e(Bu,O$),e(O$,h5o),e(Bu,p5o),e($,_5o),e($,Pu),e(Pu,kae),e(kae,u5o),e(Pu,b5o),e(Pu,V$),e(V$,F5o),e(Pu,v5o),e($,T5o),e($,$u),e($u,Sae),e(Sae,M5o),e($u,E5o),e($u,X$),e(X$,C5o),e($u,w5o),e($,A5o),e($,Iu),e(Iu,Rae),e(Rae,y5o),e(Iu,L5o),e(Iu,z$),e(z$,x5o),e(Iu,k5o),e($,S5o),e($,qu),e(qu,Bae),e(Bae,R5o),e(qu,B5o),e(qu,Q$),e(Q$,P5o),e(qu,$5o),e($,I5o),e($,Nu),e(Nu,Pae),e(Pae,q5o),e(Nu,N5o),e(Nu,W$),e(W$,j5o),e(Nu,D5o),e($,G5o),e($,ju),e(ju,$ae),e($ae,O5o),e(ju,V5o),e(ju,H$),e(H$,X5o),e(ju,z5o),e($,Q5o),e($,Du),e(Du,Iae),e(Iae,W5o),e(Du,H5o),e(Du,U$),e(U$,U5o),e(Du,J5o),e($,Y5o),e($,Gu),e(Gu,qae),e(qae,K5o),e(Gu,Z5o),e(Gu,J$),e(J$,e3o),e(Gu,o3o),e($,r3o),e($,Ou),e(Ou,Nae),e(Nae,t3o),e(Ou,a3o),e(Ou,Y$),e(Y$,n3o),e(Ou,s3o),e($,l3o),e($,Vu),e(Vu,jae),e(jae,i3o),e(Vu,d3o),e(Vu,K$),e(K$,c3o),e(Vu,f3o),e($,m3o),e($,Xu),e(Xu,Dae),e(Dae,g3o),e(Xu,h3o),e(Xu,Z$),e(Z$,p3o),e(Xu,_3o),e($,u3o),e($,zu),e(zu,Gae),e(Gae,b3o),e(zu,F3o),e(zu,eI),e(eI,v3o),e(zu,T3o),e($,M3o),e($,Qu),e(Qu,Oae),e(Oae,E3o),e(Qu,C3o),e(Qu,oI),e(oI,w3o),e(Qu,A3o),e($,y3o),e($,Wu),e(Wu,Vae),e(Vae,L3o),e(Wu,x3o),e(Wu,rI),e(rI,k3o),e(Wu,S3o),e($,R3o),e($,Hu),e(Hu,Xae),e(Xae,B3o),e(Hu,P3o),e(Hu,tI),e(tI,$3o),e(Hu,I3o),e($,q3o),e($,Uu),e(Uu,zae),e(zae,N3o),e(Uu,j3o),e(Uu,aI),e(aI,D3o),e(Uu,G3o),e($,O3o),e($,Ju),e(Ju,Qae),e(Qae,V3o),e(Ju,X3o),e(Ju,nI),e(nI,z3o),e(Ju,Q3o),e($,W3o),e($,Yu),e(Yu,Wae),e(Wae,H3o),e(Yu,U3o),e(Yu,sI),e(sI,J3o),e(Yu,Y3o),e($,K3o),e($,Ku),e(Ku,Hae),e(Hae,Z3o),e(Ku,e2o),e(Ku,lI),e(lI,o2o),e(Ku,r2o),e(je,t2o),e(je,Zu),e(Zu,a2o),e(Zu,Uae),e(Uae,n2o),e(Zu,s2o),e(Zu,Jae),e(Jae,l2o),e(je,i2o),e(je,Yae),e(Yae,d2o),e(je,c2o),g(pC,je,null),b(c,rRe,u),b(c,nd,u),e(nd,e1),e(e1,Kae),g(_C,Kae,null),e(nd,f2o),e(nd,Zae),e(Zae,m2o),b(c,tRe,u),b(c,Zo,u),g(uC,Zo,null),e(Zo,g2o),e(Zo,sd),e(sd,h2o),e(sd,iI),e(iI,p2o),e(sd,_2o),e(sd,dI),e(dI,u2o),e(sd,b2o),e(Zo,F2o),e(Zo,bC),e(bC,v2o),e(bC,ene),e(ene,T2o),e(bC,M2o),e(Zo,E2o),e(Zo,Wr),g(FC,Wr,null),e(Wr,C2o),e(Wr,one),e(one,w2o),e(Wr,A2o),e(Wr,ld),e(ld,y2o),e(ld,rne),e(rne,L2o),e(ld,x2o),e(ld,cI),e(cI,k2o),e(ld,S2o),e(Wr,R2o),e(Wr,tne),e(tne,B2o),e(Wr,P2o),g(vC,Wr,null),e(Zo,$2o),e(Zo,De),g(TC,De,null),e(De,I2o),e(De,ane),e(ane,q2o),e(De,N2o),e(De,Wa),e(Wa,j2o),e(Wa,nne),e(nne,D2o),e(Wa,G2o),e(Wa,sne),e(sne,O2o),e(Wa,V2o),e(Wa,lne),e(lne,X2o),e(Wa,z2o),e(De,Q2o),e(De,I),e(I,o1),e(o1,ine),e(ine,W2o),e(o1,H2o),e(o1,fI),e(fI,U2o),e(o1,J2o),e(I,Y2o),e(I,r1),e(r1,dne),e(dne,K2o),e(r1,Z2o),e(r1,mI),e(mI,eFo),e(r1,oFo),e(I,rFo),e(I,t1),e(t1,cne),e(cne,tFo),e(t1,aFo),e(t1,gI),e(gI,nFo),e(t1,sFo),e(I,lFo),e(I,a1),e(a1,fne),e(fne,iFo),e(a1,dFo),e(a1,hI),e(hI,cFo),e(a1,fFo),e(I,mFo),e(I,n1),e(n1,mne),e(mne,gFo),e(n1,hFo),e(n1,pI),e(pI,pFo),e(n1,_Fo),e(I,uFo),e(I,s1),e(s1,gne),e(gne,bFo),e(s1,FFo),e(s1,_I),e(_I,vFo),e(s1,TFo),e(I,MFo),e(I,l1),e(l1,hne),e(hne,EFo),e(l1,CFo),e(l1,uI),e(uI,wFo),e(l1,AFo),e(I,yFo),e(I,i1),e(i1,pne),e(pne,LFo),e(i1,xFo),e(i1,bI),e(bI,kFo),e(i1,SFo),e(I,RFo),e(I,d1),e(d1,_ne),e(_ne,BFo),e(d1,PFo),e(d1,FI),e(FI,$Fo),e(d1,IFo),e(I,qFo),e(I,c1),e(c1,une),e(une,NFo),e(c1,jFo),e(c1,vI),e(vI,DFo),e(c1,GFo),e(I,OFo),e(I,f1),e(f1,bne),e(bne,VFo),e(f1,XFo),e(f1,TI),e(TI,zFo),e(f1,QFo),e(I,WFo),e(I,m1),e(m1,Fne),e(Fne,HFo),e(m1,UFo),e(m1,MI),e(MI,JFo),e(m1,YFo),e(I,KFo),e(I,g1),e(g1,vne),e(vne,ZFo),e(g1,evo),e(g1,EI),e(EI,ovo),e(g1,rvo),e(I,tvo),e(I,h1),e(h1,Tne),e(Tne,avo),e(h1,nvo),e(h1,CI),e(CI,svo),e(h1,lvo),e(I,ivo),e(I,p1),e(p1,Mne),e(Mne,dvo),e(p1,cvo),e(p1,wI),e(wI,fvo),e(p1,mvo),e(I,gvo),e(I,_1),e(_1,Ene),e(Ene,hvo),e(_1,pvo),e(_1,AI),e(AI,_vo),e(_1,uvo),e(I,bvo),e(I,u1),e(u1,Cne),e(Cne,Fvo),e(u1,vvo),e(u1,yI),e(yI,Tvo),e(u1,Mvo),e(I,Evo),e(I,b1),e(b1,wne),e(wne,Cvo),e(b1,wvo),e(b1,LI),e(LI,Avo),e(b1,yvo),e(I,Lvo),e(I,F1),e(F1,Ane),e(Ane,xvo),e(F1,kvo),e(F1,xI),e(xI,Svo),e(F1,Rvo),e(I,Bvo),e(I,v1),e(v1,yne),e(yne,Pvo),e(v1,$vo),e(v1,kI),e(kI,Ivo),e(v1,qvo),e(I,Nvo),e(I,T1),e(T1,Lne),e(Lne,jvo),e(T1,Dvo),e(T1,SI),e(SI,Gvo),e(T1,Ovo),e(I,Vvo),e(I,M1),e(M1,xne),e(xne,Xvo),e(M1,zvo),e(M1,RI),e(RI,Qvo),e(M1,Wvo),e(I,Hvo),e(I,E1),e(E1,kne),e(kne,Uvo),e(E1,Jvo),e(E1,BI),e(BI,Yvo),e(E1,Kvo),e(I,Zvo),e(I,C1),e(C1,Sne),e(Sne,e6o),e(C1,o6o),e(C1,PI),e(PI,r6o),e(C1,t6o),e(I,a6o),e(I,w1),e(w1,Rne),e(Rne,n6o),e(w1,s6o),e(w1,$I),e($I,l6o),e(w1,i6o),e(I,d6o),e(I,A1),e(A1,Bne),e(Bne,c6o),e(A1,f6o),e(A1,II),e(II,m6o),e(A1,g6o),e(I,h6o),e(I,y1),e(y1,Pne),e(Pne,p6o),e(y1,_6o),e(y1,qI),e(qI,u6o),e(y1,b6o),e(I,F6o),e(I,L1),e(L1,$ne),e($ne,v6o),e(L1,T6o),e(L1,NI),e(NI,M6o),e(L1,E6o),e(I,C6o),e(I,x1),e(x1,Ine),e(Ine,w6o),e(x1,A6o),e(x1,jI),e(jI,y6o),e(x1,L6o),e(I,x6o),e(I,k1),e(k1,qne),e(qne,k6o),e(k1,S6o),e(k1,DI),e(DI,R6o),e(k1,B6o),e(I,P6o),e(I,S1),e(S1,Nne),e(Nne,$6o),e(S1,I6o),e(S1,jne),e(jne,q6o),e(S1,N6o),e(I,j6o),e(I,R1),e(R1,Dne),e(Dne,D6o),e(R1,G6o),e(R1,GI),e(GI,O6o),e(R1,V6o),e(I,X6o),e(I,B1),e(B1,Gne),e(Gne,z6o),e(B1,Q6o),e(B1,OI),e(OI,W6o),e(B1,H6o),e(I,U6o),e(I,P1),e(P1,One),e(One,J6o),e(P1,Y6o),e(P1,VI),e(VI,K6o),e(P1,Z6o),e(I,eTo),e(I,$1),e($1,Vne),e(Vne,oTo),e($1,rTo),e($1,XI),e(XI,tTo),e($1,aTo),e(De,nTo),e(De,I1),e(I1,sTo),e(I1,Xne),e(Xne,lTo),e(I1,iTo),e(I1,zne),e(zne,dTo),e(De,cTo),e(De,Qne),e(Qne,fTo),e(De,mTo),g(MC,De,null),b(c,aRe,u),b(c,id,u),e(id,q1),e(q1,Wne),g(EC,Wne,null),e(id,gTo),e(id,Hne),e(Hne,hTo),b(c,nRe,u),b(c,er,u),g(CC,er,null),e(er,pTo),e(er,dd),e(dd,_To),e(dd,zI),e(zI,uTo),e(dd,bTo),e(dd,QI),e(QI,FTo),e(dd,vTo),e(er,TTo),e(er,wC),e(wC,MTo),e(wC,Une),e(Une,ETo),e(wC,CTo),e(er,wTo),e(er,Hr),g(AC,Hr,null),e(Hr,ATo),e(Hr,Jne),e(Jne,yTo),e(Hr,LTo),e(Hr,cd),e(cd,xTo),e(cd,Yne),e(Yne,kTo),e(cd,STo),e(cd,WI),e(WI,RTo),e(cd,BTo),e(Hr,PTo),e(Hr,Kne),e(Kne,$To),e(Hr,ITo),g(yC,Hr,null),e(er,qTo),e(er,Ge),g(LC,Ge,null),e(Ge,NTo),e(Ge,Zne),e(Zne,jTo),e(Ge,DTo),e(Ge,Ha),e(Ha,GTo),e(Ha,ese),e(ese,OTo),e(Ha,VTo),e(Ha,ose),e(ose,XTo),e(Ha,zTo),e(Ha,rse),e(rse,QTo),e(Ha,WTo),e(Ge,HTo),e(Ge,se),e(se,N1),e(N1,tse),e(tse,UTo),e(N1,JTo),e(N1,HI),e(HI,YTo),e(N1,KTo),e(se,ZTo),e(se,j1),e(j1,ase),e(ase,e7o),e(j1,o7o),e(j1,UI),e(UI,r7o),e(j1,t7o),e(se,a7o),e(se,D1),e(D1,nse),e(nse,n7o),e(D1,s7o),e(D1,JI),e(JI,l7o),e(D1,i7o),e(se,d7o),e(se,G1),e(G1,sse),e(sse,c7o),e(G1,f7o),e(G1,YI),e(YI,m7o),e(G1,g7o),e(se,h7o),e(se,O1),e(O1,lse),e(lse,p7o),e(O1,_7o),e(O1,KI),e(KI,u7o),e(O1,b7o),e(se,F7o),e(se,V1),e(V1,ise),e(ise,v7o),e(V1,T7o),e(V1,ZI),e(ZI,M7o),e(V1,E7o),e(se,C7o),e(se,X1),e(X1,dse),e(dse,w7o),e(X1,A7o),e(X1,eq),e(eq,y7o),e(X1,L7o),e(se,x7o),e(se,z1),e(z1,cse),e(cse,k7o),e(z1,S7o),e(z1,oq),e(oq,R7o),e(z1,B7o),e(se,P7o),e(se,Q1),e(Q1,fse),e(fse,$7o),e(Q1,I7o),e(Q1,rq),e(rq,q7o),e(Q1,N7o),e(se,j7o),e(se,W1),e(W1,mse),e(mse,D7o),e(W1,G7o),e(W1,tq),e(tq,O7o),e(W1,V7o),e(se,X7o),e(se,H1),e(H1,gse),e(gse,z7o),e(H1,Q7o),e(H1,aq),e(aq,W7o),e(H1,H7o),e(se,U7o),e(se,U1),e(U1,hse),e(hse,J7o),e(U1,Y7o),e(U1,nq),e(nq,K7o),e(U1,Z7o),e(se,eMo),e(se,J1),e(J1,pse),e(pse,oMo),e(J1,rMo),e(J1,sq),e(sq,tMo),e(J1,aMo),e(se,nMo),e(se,Y1),e(Y1,_se),e(_se,sMo),e(Y1,lMo),e(Y1,lq),e(lq,iMo),e(Y1,dMo),e(se,cMo),e(se,K1),e(K1,use),e(use,fMo),e(K1,mMo),e(K1,iq),e(iq,gMo),e(K1,hMo),e(se,pMo),e(se,Z1),e(Z1,bse),e(bse,_Mo),e(Z1,uMo),e(Z1,dq),e(dq,bMo),e(Z1,FMo),e(Ge,vMo),e(Ge,eb),e(eb,TMo),e(eb,Fse),e(Fse,MMo),e(eb,EMo),e(eb,vse),e(vse,CMo),e(Ge,wMo),e(Ge,Tse),e(Tse,AMo),e(Ge,yMo),g(xC,Ge,null),b(c,sRe,u),b(c,fd,u),e(fd,ob),e(ob,Mse),g(kC,Mse,null),e(fd,LMo),e(fd,Ese),e(Ese,xMo),b(c,lRe,u),b(c,or,u),g(SC,or,null),e(or,kMo),e(or,md),e(md,SMo),e(md,cq),e(cq,RMo),e(md,BMo),e(md,fq),e(fq,PMo),e(md,$Mo),e(or,IMo),e(or,RC),e(RC,qMo),e(RC,Cse),e(Cse,NMo),e(RC,jMo),e(or,DMo),e(or,Ur),g(BC,Ur,null),e(Ur,GMo),e(Ur,wse),e(wse,OMo),e(Ur,VMo),e(Ur,gd),e(gd,XMo),e(gd,Ase),e(Ase,zMo),e(gd,QMo),e(gd,mq),e(mq,WMo),e(gd,HMo),e(Ur,UMo),e(Ur,yse),e(yse,JMo),e(Ur,YMo),g(PC,Ur,null),e(or,KMo),e(or,Oe),g($C,Oe,null),e(Oe,ZMo),e(Oe,Lse),e(Lse,e4o),e(Oe,o4o),e(Oe,Ua),e(Ua,r4o),e(Ua,xse),e(xse,t4o),e(Ua,a4o),e(Ua,kse),e(kse,n4o),e(Ua,s4o),e(Ua,Sse),e(Sse,l4o),e(Ua,i4o),e(Oe,d4o),e(Oe,y),e(y,rb),e(rb,Rse),e(Rse,c4o),e(rb,f4o),e(rb,gq),e(gq,m4o),e(rb,g4o),e(y,h4o),e(y,tb),e(tb,Bse),e(Bse,p4o),e(tb,_4o),e(tb,hq),e(hq,u4o),e(tb,b4o),e(y,F4o),e(y,ab),e(ab,Pse),e(Pse,v4o),e(ab,T4o),e(ab,pq),e(pq,M4o),e(ab,E4o),e(y,C4o),e(y,nb),e(nb,$se),e($se,w4o),e(nb,A4o),e(nb,_q),e(_q,y4o),e(nb,L4o),e(y,x4o),e(y,sb),e(sb,Ise),e(Ise,k4o),e(sb,S4o),e(sb,uq),e(uq,R4o),e(sb,B4o),e(y,P4o),e(y,lb),e(lb,qse),e(qse,$4o),e(lb,I4o),e(lb,bq),e(bq,q4o),e(lb,N4o),e(y,j4o),e(y,ib),e(ib,Nse),e(Nse,D4o),e(ib,G4o),e(ib,Fq),e(Fq,O4o),e(ib,V4o),e(y,X4o),e(y,db),e(db,jse),e(jse,z4o),e(db,Q4o),e(db,vq),e(vq,W4o),e(db,H4o),e(y,U4o),e(y,cb),e(cb,Dse),e(Dse,J4o),e(cb,Y4o),e(cb,Tq),e(Tq,K4o),e(cb,Z4o),e(y,eEo),e(y,fb),e(fb,Gse),e(Gse,oEo),e(fb,rEo),e(fb,Mq),e(Mq,tEo),e(fb,aEo),e(y,nEo),e(y,mb),e(mb,Ose),e(Ose,sEo),e(mb,lEo),e(mb,Eq),e(Eq,iEo),e(mb,dEo),e(y,cEo),e(y,gb),e(gb,Vse),e(Vse,fEo),e(gb,mEo),e(gb,Cq),e(Cq,gEo),e(gb,hEo),e(y,pEo),e(y,hb),e(hb,Xse),e(Xse,_Eo),e(hb,uEo),e(hb,wq),e(wq,bEo),e(hb,FEo),e(y,vEo),e(y,pb),e(pb,zse),e(zse,TEo),e(pb,MEo),e(pb,Aq),e(Aq,EEo),e(pb,CEo),e(y,wEo),e(y,_b),e(_b,Qse),e(Qse,AEo),e(_b,yEo),e(_b,yq),e(yq,LEo),e(_b,xEo),e(y,kEo),e(y,ub),e(ub,Wse),e(Wse,SEo),e(ub,REo),e(ub,Lq),e(Lq,BEo),e(ub,PEo),e(y,$Eo),e(y,bb),e(bb,Hse),e(Hse,IEo),e(bb,qEo),e(bb,xq),e(xq,NEo),e(bb,jEo),e(y,DEo),e(y,Fb),e(Fb,Use),e(Use,GEo),e(Fb,OEo),e(Fb,kq),e(kq,VEo),e(Fb,XEo),e(y,zEo),e(y,vb),e(vb,Jse),e(Jse,QEo),e(vb,WEo),e(vb,Sq),e(Sq,HEo),e(vb,UEo),e(y,JEo),e(y,Tb),e(Tb,Yse),e(Yse,YEo),e(Tb,KEo),e(Tb,Rq),e(Rq,ZEo),e(Tb,eCo),e(y,oCo),e(y,Mb),e(Mb,Kse),e(Kse,rCo),e(Mb,tCo),e(Mb,Bq),e(Bq,aCo),e(Mb,nCo),e(y,sCo),e(y,Eb),e(Eb,Zse),e(Zse,lCo),e(Eb,iCo),e(Eb,Pq),e(Pq,dCo),e(Eb,cCo),e(y,fCo),e(y,Cb),e(Cb,ele),e(ele,mCo),e(Cb,gCo),e(Cb,$q),e($q,hCo),e(Cb,pCo),e(y,_Co),e(y,wb),e(wb,ole),e(ole,uCo),e(wb,bCo),e(wb,Iq),e(Iq,FCo),e(wb,vCo),e(y,TCo),e(y,Ab),e(Ab,rle),e(rle,MCo),e(Ab,ECo),e(Ab,qq),e(qq,CCo),e(Ab,wCo),e(y,ACo),e(y,yb),e(yb,tle),e(tle,yCo),e(yb,LCo),e(yb,Nq),e(Nq,xCo),e(yb,kCo),e(y,SCo),e(y,Lb),e(Lb,ale),e(ale,RCo),e(Lb,BCo),e(Lb,jq),e(jq,PCo),e(Lb,$Co),e(y,ICo),e(y,xb),e(xb,nle),e(nle,qCo),e(xb,NCo),e(xb,Dq),e(Dq,jCo),e(xb,DCo),e(y,GCo),e(y,kb),e(kb,sle),e(sle,OCo),e(kb,VCo),e(kb,Gq),e(Gq,XCo),e(kb,zCo),e(y,QCo),e(y,Sb),e(Sb,lle),e(lle,WCo),e(Sb,HCo),e(Sb,Oq),e(Oq,UCo),e(Sb,JCo),e(y,YCo),e(y,Rb),e(Rb,ile),e(ile,KCo),e(Rb,ZCo),e(Rb,Vq),e(Vq,ewo),e(Rb,owo),e(y,rwo),e(y,Bb),e(Bb,dle),e(dle,two),e(Bb,awo),e(Bb,Xq),e(Xq,nwo),e(Bb,swo),e(y,lwo),e(y,Pb),e(Pb,cle),e(cle,iwo),e(Pb,dwo),e(Pb,zq),e(zq,cwo),e(Pb,fwo),e(y,mwo),e(y,$b),e($b,fle),e(fle,gwo),e($b,hwo),e($b,Qq),e(Qq,pwo),e($b,_wo),e(y,uwo),e(y,Ib),e(Ib,mle),e(mle,bwo),e(Ib,Fwo),e(Ib,Wq),e(Wq,vwo),e(Ib,Two),e(y,Mwo),e(y,qb),e(qb,gle),e(gle,Ewo),e(qb,Cwo),e(qb,Hq),e(Hq,wwo),e(qb,Awo),e(y,ywo),e(y,Nb),e(Nb,hle),e(hle,Lwo),e(Nb,xwo),e(Nb,Uq),e(Uq,kwo),e(Nb,Swo),e(y,Rwo),e(y,jb),e(jb,ple),e(ple,Bwo),e(jb,Pwo),e(jb,Jq),e(Jq,$wo),e(jb,Iwo),e(y,qwo),e(y,Db),e(Db,_le),e(_le,Nwo),e(Db,jwo),e(Db,Yq),e(Yq,Dwo),e(Db,Gwo),e(y,Owo),e(y,Gb),e(Gb,ule),e(ule,Vwo),e(Gb,Xwo),e(Gb,Kq),e(Kq,zwo),e(Gb,Qwo),e(y,Wwo),e(y,Ob),e(Ob,ble),e(ble,Hwo),e(Ob,Uwo),e(Ob,Zq),e(Zq,Jwo),e(Ob,Ywo),e(y,Kwo),e(y,Vb),e(Vb,Fle),e(Fle,Zwo),e(Vb,eAo),e(Vb,eN),e(eN,oAo),e(Vb,rAo),e(y,tAo),e(y,Xb),e(Xb,vle),e(vle,aAo),e(Xb,nAo),e(Xb,oN),e(oN,sAo),e(Xb,lAo),e(y,iAo),e(y,zb),e(zb,Tle),e(Tle,dAo),e(zb,cAo),e(zb,rN),e(rN,fAo),e(zb,mAo),e(y,gAo),e(y,Qb),e(Qb,Mle),e(Mle,hAo),e(Qb,pAo),e(Qb,tN),e(tN,_Ao),e(Qb,uAo),e(y,bAo),e(y,Wb),e(Wb,Ele),e(Ele,FAo),e(Wb,vAo),e(Wb,aN),e(aN,TAo),e(Wb,MAo),e(Oe,EAo),e(Oe,Hb),e(Hb,CAo),e(Hb,Cle),e(Cle,wAo),e(Hb,AAo),e(Hb,wle),e(wle,yAo),e(Oe,LAo),e(Oe,Ale),e(Ale,xAo),e(Oe,kAo),g(IC,Oe,null),b(c,iRe,u),b(c,hd,u),e(hd,Ub),e(Ub,yle),g(qC,yle,null),e(hd,SAo),e(hd,Lle),e(Lle,RAo),b(c,dRe,u),b(c,rr,u),g(NC,rr,null),e(rr,BAo),e(rr,pd),e(pd,PAo),e(pd,nN),e(nN,$Ao),e(pd,IAo),e(pd,sN),e(sN,qAo),e(pd,NAo),e(rr,jAo),e(rr,jC),e(jC,DAo),e(jC,xle),e(xle,GAo),e(jC,OAo),e(rr,VAo),e(rr,Jr),g(DC,Jr,null),e(Jr,XAo),e(Jr,kle),e(kle,zAo),e(Jr,QAo),e(Jr,_d),e(_d,WAo),e(_d,Sle),e(Sle,HAo),e(_d,UAo),e(_d,lN),e(lN,JAo),e(_d,YAo),e(Jr,KAo),e(Jr,Rle),e(Rle,ZAo),e(Jr,e0o),g(GC,Jr,null),e(rr,o0o),e(rr,Ve),g(OC,Ve,null),e(Ve,r0o),e(Ve,Ble),e(Ble,t0o),e(Ve,a0o),e(Ve,Ja),e(Ja,n0o),e(Ja,Ple),e(Ple,s0o),e(Ja,l0o),e(Ja,$le),e($le,i0o),e(Ja,d0o),e(Ja,Ile),e(Ile,c0o),e(Ja,f0o),e(Ve,m0o),e(Ve,G),e(G,Jb),e(Jb,qle),e(qle,g0o),e(Jb,h0o),e(Jb,iN),e(iN,p0o),e(Jb,_0o),e(G,u0o),e(G,Yb),e(Yb,Nle),e(Nle,b0o),e(Yb,F0o),e(Yb,dN),e(dN,v0o),e(Yb,T0o),e(G,M0o),e(G,Kb),e(Kb,jle),e(jle,E0o),e(Kb,C0o),e(Kb,cN),e(cN,w0o),e(Kb,A0o),e(G,y0o),e(G,Zb),e(Zb,Dle),e(Dle,L0o),e(Zb,x0o),e(Zb,fN),e(fN,k0o),e(Zb,S0o),e(G,R0o),e(G,e5),e(e5,Gle),e(Gle,B0o),e(e5,P0o),e(e5,mN),e(mN,$0o),e(e5,I0o),e(G,q0o),e(G,o5),e(o5,Ole),e(Ole,N0o),e(o5,j0o),e(o5,gN),e(gN,D0o),e(o5,G0o),e(G,O0o),e(G,r5),e(r5,Vle),e(Vle,V0o),e(r5,X0o),e(r5,hN),e(hN,z0o),e(r5,Q0o),e(G,W0o),e(G,t5),e(t5,Xle),e(Xle,H0o),e(t5,U0o),e(t5,pN),e(pN,J0o),e(t5,Y0o),e(G,K0o),e(G,a5),e(a5,zle),e(zle,Z0o),e(a5,eyo),e(a5,_N),e(_N,oyo),e(a5,ryo),e(G,tyo),e(G,n5),e(n5,Qle),e(Qle,ayo),e(n5,nyo),e(n5,uN),e(uN,syo),e(n5,lyo),e(G,iyo),e(G,s5),e(s5,Wle),e(Wle,dyo),e(s5,cyo),e(s5,bN),e(bN,fyo),e(s5,myo),e(G,gyo),e(G,l5),e(l5,Hle),e(Hle,hyo),e(l5,pyo),e(l5,FN),e(FN,_yo),e(l5,uyo),e(G,byo),e(G,i5),e(i5,Ule),e(Ule,Fyo),e(i5,vyo),e(i5,vN),e(vN,Tyo),e(i5,Myo),e(G,Eyo),e(G,d5),e(d5,Jle),e(Jle,Cyo),e(d5,wyo),e(d5,TN),e(TN,Ayo),e(d5,yyo),e(G,Lyo),e(G,c5),e(c5,Yle),e(Yle,xyo),e(c5,kyo),e(c5,MN),e(MN,Syo),e(c5,Ryo),e(G,Byo),e(G,f5),e(f5,Kle),e(Kle,Pyo),e(f5,$yo),e(f5,EN),e(EN,Iyo),e(f5,qyo),e(G,Nyo),e(G,m5),e(m5,Zle),e(Zle,jyo),e(m5,Dyo),e(m5,CN),e(CN,Gyo),e(m5,Oyo),e(G,Vyo),e(G,g5),e(g5,eie),e(eie,Xyo),e(g5,zyo),e(g5,wN),e(wN,Qyo),e(g5,Wyo),e(G,Hyo),e(G,h5),e(h5,oie),e(oie,Uyo),e(h5,Jyo),e(h5,AN),e(AN,Yyo),e(h5,Kyo),e(G,Zyo),e(G,p5),e(p5,rie),e(rie,eLo),e(p5,oLo),e(p5,yN),e(yN,rLo),e(p5,tLo),e(G,aLo),e(G,_5),e(_5,tie),e(tie,nLo),e(_5,sLo),e(_5,LN),e(LN,lLo),e(_5,iLo),e(G,dLo),e(G,u5),e(u5,aie),e(aie,cLo),e(u5,fLo),e(u5,xN),e(xN,mLo),e(u5,gLo),e(G,hLo),e(G,b5),e(b5,nie),e(nie,pLo),e(b5,_Lo),e(b5,kN),e(kN,uLo),e(b5,bLo),e(G,FLo),e(G,F5),e(F5,sie),e(sie,vLo),e(F5,TLo),e(F5,SN),e(SN,MLo),e(F5,ELo),e(G,CLo),e(G,v5),e(v5,lie),e(lie,wLo),e(v5,ALo),e(v5,RN),e(RN,yLo),e(v5,LLo),e(G,xLo),e(G,T5),e(T5,iie),e(iie,kLo),e(T5,SLo),e(T5,BN),e(BN,RLo),e(T5,BLo),e(G,PLo),e(G,M5),e(M5,die),e(die,$Lo),e(M5,ILo),e(M5,PN),e(PN,qLo),e(M5,NLo),e(G,jLo),e(G,E5),e(E5,cie),e(cie,DLo),e(E5,GLo),e(E5,$N),e($N,OLo),e(E5,VLo),e(Ve,XLo),e(Ve,C5),e(C5,zLo),e(C5,fie),e(fie,QLo),e(C5,WLo),e(C5,mie),e(mie,HLo),e(Ve,ULo),e(Ve,gie),e(gie,JLo),e(Ve,YLo),g(VC,Ve,null),b(c,cRe,u),b(c,ud,u),e(ud,w5),e(w5,hie),g(XC,hie,null),e(ud,KLo),e(ud,pie),e(pie,ZLo),b(c,fRe,u),b(c,tr,u),g(zC,tr,null),e(tr,e8o),e(tr,bd),e(bd,o8o),e(bd,IN),e(IN,r8o),e(bd,t8o),e(bd,qN),e(qN,a8o),e(bd,n8o),e(tr,s8o),e(tr,QC),e(QC,l8o),e(QC,_ie),e(_ie,i8o),e(QC,d8o),e(tr,c8o),e(tr,Yr),g(WC,Yr,null),e(Yr,f8o),e(Yr,uie),e(uie,m8o),e(Yr,g8o),e(Yr,Fd),e(Fd,h8o),e(Fd,bie),e(bie,p8o),e(Fd,_8o),e(Fd,NN),e(NN,u8o),e(Fd,b8o),e(Yr,F8o),e(Yr,Fie),e(Fie,v8o),e(Yr,T8o),g(HC,Yr,null),e(tr,M8o),e(tr,Xe),g(UC,Xe,null),e(Xe,E8o),e(Xe,vie),e(vie,C8o),e(Xe,w8o),e(Xe,Ya),e(Ya,A8o),e(Ya,Tie),e(Tie,y8o),e(Ya,L8o),e(Ya,Mie),e(Mie,x8o),e(Ya,k8o),e(Ya,Eie),e(Eie,S8o),e(Ya,R8o),e(Xe,B8o),e(Xe,da),e(da,A5),e(A5,Cie),e(Cie,P8o),e(A5,$8o),e(A5,jN),e(jN,I8o),e(A5,q8o),e(da,N8o),e(da,y5),e(y5,wie),e(wie,j8o),e(y5,D8o),e(y5,DN),e(DN,G8o),e(y5,O8o),e(da,V8o),e(da,L5),e(L5,Aie),e(Aie,X8o),e(L5,z8o),e(L5,GN),e(GN,Q8o),e(L5,W8o),e(da,H8o),e(da,x5),e(x5,yie),e(yie,U8o),e(x5,J8o),e(x5,ON),e(ON,Y8o),e(x5,K8o),e(da,Z8o),e(da,k5),e(k5,Lie),e(Lie,e9o),e(k5,o9o),e(k5,VN),e(VN,r9o),e(k5,t9o),e(Xe,a9o),e(Xe,S5),e(S5,n9o),e(S5,xie),e(xie,s9o),e(S5,l9o),e(S5,kie),e(kie,i9o),e(Xe,d9o),e(Xe,Sie),e(Sie,c9o),e(Xe,f9o),g(JC,Xe,null),b(c,mRe,u),b(c,vd,u),e(vd,R5),e(R5,Rie),g(YC,Rie,null),e(vd,m9o),e(vd,Bie),e(Bie,g9o),b(c,gRe,u),b(c,ar,u),g(KC,ar,null),e(ar,h9o),e(ar,Td),e(Td,p9o),e(Td,XN),e(XN,_9o),e(Td,u9o),e(Td,zN),e(zN,b9o),e(Td,F9o),e(ar,v9o),e(ar,ZC),e(ZC,T9o),e(ZC,Pie),e(Pie,M9o),e(ZC,E9o),e(ar,C9o),e(ar,Kr),g(ew,Kr,null),e(Kr,w9o),e(Kr,$ie),e($ie,A9o),e(Kr,y9o),e(Kr,Md),e(Md,L9o),e(Md,Iie),e(Iie,x9o),e(Md,k9o),e(Md,QN),e(QN,S9o),e(Md,R9o),e(Kr,B9o),e(Kr,qie),e(qie,P9o),e(Kr,$9o),g(ow,Kr,null),e(ar,I9o),e(ar,ze),g(rw,ze,null),e(ze,q9o),e(ze,Nie),e(Nie,N9o),e(ze,j9o),e(ze,Ka),e(Ka,D9o),e(Ka,jie),e(jie,G9o),e(Ka,O9o),e(Ka,Die),e(Die,V9o),e(Ka,X9o),e(Ka,Gie),e(Gie,z9o),e(Ka,Q9o),e(ze,W9o),e(ze,j),e(j,B5),e(B5,Oie),e(Oie,H9o),e(B5,U9o),e(B5,WN),e(WN,J9o),e(B5,Y9o),e(j,K9o),e(j,P5),e(P5,Vie),e(Vie,Z9o),e(P5,exo),e(P5,HN),e(HN,oxo),e(P5,rxo),e(j,txo),e(j,$5),e($5,Xie),e(Xie,axo),e($5,nxo),e($5,UN),e(UN,sxo),e($5,lxo),e(j,ixo),e(j,I5),e(I5,zie),e(zie,dxo),e(I5,cxo),e(I5,JN),e(JN,fxo),e(I5,mxo),e(j,gxo),e(j,q5),e(q5,Qie),e(Qie,hxo),e(q5,pxo),e(q5,YN),e(YN,_xo),e(q5,uxo),e(j,bxo),e(j,N5),e(N5,Wie),e(Wie,Fxo),e(N5,vxo),e(N5,KN),e(KN,Txo),e(N5,Mxo),e(j,Exo),e(j,j5),e(j5,Hie),e(Hie,Cxo),e(j5,wxo),e(j5,ZN),e(ZN,Axo),e(j5,yxo),e(j,Lxo),e(j,D5),e(D5,Uie),e(Uie,xxo),e(D5,kxo),e(D5,ej),e(ej,Sxo),e(D5,Rxo),e(j,Bxo),e(j,G5),e(G5,Jie),e(Jie,Pxo),e(G5,$xo),e(G5,oj),e(oj,Ixo),e(G5,qxo),e(j,Nxo),e(j,O5),e(O5,Yie),e(Yie,jxo),e(O5,Dxo),e(O5,rj),e(rj,Gxo),e(O5,Oxo),e(j,Vxo),e(j,V5),e(V5,Kie),e(Kie,Xxo),e(V5,zxo),e(V5,tj),e(tj,Qxo),e(V5,Wxo),e(j,Hxo),e(j,X5),e(X5,Zie),e(Zie,Uxo),e(X5,Jxo),e(X5,aj),e(aj,Yxo),e(X5,Kxo),e(j,Zxo),e(j,z5),e(z5,ede),e(ede,eko),e(z5,oko),e(z5,nj),e(nj,rko),e(z5,tko),e(j,ako),e(j,Q5),e(Q5,ode),e(ode,nko),e(Q5,sko),e(Q5,sj),e(sj,lko),e(Q5,iko),e(j,dko),e(j,W5),e(W5,rde),e(rde,cko),e(W5,fko),e(W5,lj),e(lj,mko),e(W5,gko),e(j,hko),e(j,H5),e(H5,tde),e(tde,pko),e(H5,_ko),e(H5,ij),e(ij,uko),e(H5,bko),e(j,Fko),e(j,U5),e(U5,ade),e(ade,vko),e(U5,Tko),e(U5,dj),e(dj,Mko),e(U5,Eko),e(j,Cko),e(j,J5),e(J5,nde),e(nde,wko),e(J5,Ako),e(J5,cj),e(cj,yko),e(J5,Lko),e(j,xko),e(j,Y5),e(Y5,sde),e(sde,kko),e(Y5,Sko),e(Y5,fj),e(fj,Rko),e(Y5,Bko),e(j,Pko),e(j,K5),e(K5,lde),e(lde,$ko),e(K5,Iko),e(K5,mj),e(mj,qko),e(K5,Nko),e(j,jko),e(j,Z5),e(Z5,ide),e(ide,Dko),e(Z5,Gko),e(Z5,gj),e(gj,Oko),e(Z5,Vko),e(j,Xko),e(j,e3),e(e3,dde),e(dde,zko),e(e3,Qko),e(e3,hj),e(hj,Wko),e(e3,Hko),e(j,Uko),e(j,o3),e(o3,cde),e(cde,Jko),e(o3,Yko),e(o3,pj),e(pj,Kko),e(o3,Zko),e(j,eSo),e(j,r3),e(r3,fde),e(fde,oSo),e(r3,rSo),e(r3,_j),e(_j,tSo),e(r3,aSo),e(j,nSo),e(j,t3),e(t3,mde),e(mde,sSo),e(t3,lSo),e(t3,uj),e(uj,iSo),e(t3,dSo),e(j,cSo),e(j,a3),e(a3,gde),e(gde,fSo),e(a3,mSo),e(a3,bj),e(bj,gSo),e(a3,hSo),e(j,pSo),e(j,n3),e(n3,hde),e(hde,_So),e(n3,uSo),e(n3,Fj),e(Fj,bSo),e(n3,FSo),e(j,vSo),e(j,s3),e(s3,pde),e(pde,TSo),e(s3,MSo),e(s3,vj),e(vj,ESo),e(s3,CSo),e(j,wSo),e(j,l3),e(l3,_de),e(_de,ASo),e(l3,ySo),e(l3,Tj),e(Tj,LSo),e(l3,xSo),e(j,kSo),e(j,i3),e(i3,ude),e(ude,SSo),e(i3,RSo),e(i3,Mj),e(Mj,BSo),e(i3,PSo),e(j,$So),e(j,d3),e(d3,bde),e(bde,ISo),e(d3,qSo),e(d3,Ej),e(Ej,NSo),e(d3,jSo),e(j,DSo),e(j,c3),e(c3,Fde),e(Fde,GSo),e(c3,OSo),e(c3,Cj),e(Cj,VSo),e(c3,XSo),e(j,zSo),e(j,f3),e(f3,vde),e(vde,QSo),e(f3,WSo),e(f3,wj),e(wj,HSo),e(f3,USo),e(ze,JSo),e(ze,m3),e(m3,YSo),e(m3,Tde),e(Tde,KSo),e(m3,ZSo),e(m3,Mde),e(Mde,eRo),e(ze,oRo),e(ze,Ede),e(Ede,rRo),e(ze,tRo),g(tw,ze,null),b(c,hRe,u),b(c,Ed,u),e(Ed,g3),e(g3,Cde),g(aw,Cde,null),e(Ed,aRo),e(Ed,wde),e(wde,nRo),b(c,pRe,u),b(c,nr,u),g(nw,nr,null),e(nr,sRo),e(nr,Cd),e(Cd,lRo),e(Cd,Aj),e(Aj,iRo),e(Cd,dRo),e(Cd,yj),e(yj,cRo),e(Cd,fRo),e(nr,mRo),e(nr,sw),e(sw,gRo),e(sw,Ade),e(Ade,hRo),e(sw,pRo),e(nr,_Ro),e(nr,Zr),g(lw,Zr,null),e(Zr,uRo),e(Zr,yde),e(yde,bRo),e(Zr,FRo),e(Zr,wd),e(wd,vRo),e(wd,Lde),e(Lde,TRo),e(wd,MRo),e(wd,Lj),e(Lj,ERo),e(wd,CRo),e(Zr,wRo),e(Zr,xde),e(xde,ARo),e(Zr,yRo),g(iw,Zr,null),e(nr,LRo),e(nr,Qe),g(dw,Qe,null),e(Qe,xRo),e(Qe,kde),e(kde,kRo),e(Qe,SRo),e(Qe,Za),e(Za,RRo),e(Za,Sde),e(Sde,BRo),e(Za,PRo),e(Za,Rde),e(Rde,$Ro),e(Za,IRo),e(Za,Bde),e(Bde,qRo),e(Za,NRo),e(Qe,jRo),e(Qe,R),e(R,h3),e(h3,Pde),e(Pde,DRo),e(h3,GRo),e(h3,xj),e(xj,ORo),e(h3,VRo),e(R,XRo),e(R,p3),e(p3,$de),e($de,zRo),e(p3,QRo),e(p3,kj),e(kj,WRo),e(p3,HRo),e(R,URo),e(R,_3),e(_3,Ide),e(Ide,JRo),e(_3,YRo),e(_3,Sj),e(Sj,KRo),e(_3,ZRo),e(R,eBo),e(R,u3),e(u3,qde),e(qde,oBo),e(u3,rBo),e(u3,Rj),e(Rj,tBo),e(u3,aBo),e(R,nBo),e(R,b3),e(b3,Nde),e(Nde,sBo),e(b3,lBo),e(b3,Bj),e(Bj,iBo),e(b3,dBo),e(R,cBo),e(R,F3),e(F3,jde),e(jde,fBo),e(F3,mBo),e(F3,Pj),e(Pj,gBo),e(F3,hBo),e(R,pBo),e(R,v3),e(v3,Dde),e(Dde,_Bo),e(v3,uBo),e(v3,$j),e($j,bBo),e(v3,FBo),e(R,vBo),e(R,T3),e(T3,Gde),e(Gde,TBo),e(T3,MBo),e(T3,Ij),e(Ij,EBo),e(T3,CBo),e(R,wBo),e(R,M3),e(M3,Ode),e(Ode,ABo),e(M3,yBo),e(M3,qj),e(qj,LBo),e(M3,xBo),e(R,kBo),e(R,E3),e(E3,Vde),e(Vde,SBo),e(E3,RBo),e(E3,Nj),e(Nj,BBo),e(E3,PBo),e(R,$Bo),e(R,C3),e(C3,Xde),e(Xde,IBo),e(C3,qBo),e(C3,jj),e(jj,NBo),e(C3,jBo),e(R,DBo),e(R,w3),e(w3,zde),e(zde,GBo),e(w3,OBo),e(w3,Dj),e(Dj,VBo),e(w3,XBo),e(R,zBo),e(R,A3),e(A3,Qde),e(Qde,QBo),e(A3,WBo),e(A3,Gj),e(Gj,HBo),e(A3,UBo),e(R,JBo),e(R,y3),e(y3,Wde),e(Wde,YBo),e(y3,KBo),e(y3,Oj),e(Oj,ZBo),e(y3,ePo),e(R,oPo),e(R,L3),e(L3,Hde),e(Hde,rPo),e(L3,tPo),e(L3,Vj),e(Vj,aPo),e(L3,nPo),e(R,sPo),e(R,x3),e(x3,Ude),e(Ude,lPo),e(x3,iPo),e(x3,Xj),e(Xj,dPo),e(x3,cPo),e(R,fPo),e(R,k3),e(k3,Jde),e(Jde,mPo),e(k3,gPo),e(k3,zj),e(zj,hPo),e(k3,pPo),e(R,_Po),e(R,S3),e(S3,Yde),e(Yde,uPo),e(S3,bPo),e(S3,Qj),e(Qj,FPo),e(S3,vPo),e(R,TPo),e(R,R3),e(R3,Kde),e(Kde,MPo),e(R3,EPo),e(R3,Wj),e(Wj,CPo),e(R3,wPo),e(R,APo),e(R,B3),e(B3,Zde),e(Zde,yPo),e(B3,LPo),e(B3,Hj),e(Hj,xPo),e(B3,kPo),e(R,SPo),e(R,P3),e(P3,ece),e(ece,RPo),e(P3,BPo),e(P3,Uj),e(Uj,PPo),e(P3,$Po),e(R,IPo),e(R,$3),e($3,oce),e(oce,qPo),e($3,NPo),e($3,Jj),e(Jj,jPo),e($3,DPo),e(R,GPo),e(R,I3),e(I3,rce),e(rce,OPo),e(I3,VPo),e(I3,Yj),e(Yj,XPo),e(I3,zPo),e(R,QPo),e(R,q3),e(q3,tce),e(tce,WPo),e(q3,HPo),e(q3,Kj),e(Kj,UPo),e(q3,JPo),e(R,YPo),e(R,N3),e(N3,ace),e(ace,KPo),e(N3,ZPo),e(N3,Zj),e(Zj,e$o),e(N3,o$o),e(R,r$o),e(R,j3),e(j3,nce),e(nce,t$o),e(j3,a$o),e(j3,eD),e(eD,n$o),e(j3,s$o),e(R,l$o),e(R,D3),e(D3,sce),e(sce,i$o),e(D3,d$o),e(D3,oD),e(oD,c$o),e(D3,f$o),e(R,m$o),e(R,G3),e(G3,lce),e(lce,g$o),e(G3,h$o),e(G3,rD),e(rD,p$o),e(G3,_$o),e(R,u$o),e(R,O3),e(O3,ice),e(ice,b$o),e(O3,F$o),e(O3,tD),e(tD,v$o),e(O3,T$o),e(R,M$o),e(R,V3),e(V3,dce),e(dce,E$o),e(V3,C$o),e(V3,aD),e(aD,w$o),e(V3,A$o),e(R,y$o),e(R,X3),e(X3,cce),e(cce,L$o),e(X3,x$o),e(X3,nD),e(nD,k$o),e(X3,S$o),e(R,R$o),e(R,z3),e(z3,fce),e(fce,B$o),e(z3,P$o),e(z3,sD),e(sD,$$o),e(z3,I$o),e(R,q$o),e(R,Q3),e(Q3,mce),e(mce,N$o),e(Q3,j$o),e(Q3,lD),e(lD,D$o),e(Q3,G$o),e(R,O$o),e(R,W3),e(W3,gce),e(gce,V$o),e(W3,X$o),e(W3,iD),e(iD,z$o),e(W3,Q$o),e(R,W$o),e(R,H3),e(H3,hce),e(hce,H$o),e(H3,U$o),e(H3,dD),e(dD,J$o),e(H3,Y$o),e(R,K$o),e(R,U3),e(U3,pce),e(pce,Z$o),e(U3,eIo),e(U3,cD),e(cD,oIo),e(U3,rIo),e(R,tIo),e(R,J3),e(J3,_ce),e(_ce,aIo),e(J3,nIo),e(J3,fD),e(fD,sIo),e(J3,lIo),e(R,iIo),e(R,Y3),e(Y3,uce),e(uce,dIo),e(Y3,cIo),e(Y3,mD),e(mD,fIo),e(Y3,mIo),e(R,gIo),e(R,K3),e(K3,bce),e(bce,hIo),e(K3,pIo),e(K3,gD),e(gD,_Io),e(K3,uIo),e(Qe,bIo),e(Qe,Z3),e(Z3,FIo),e(Z3,Fce),e(Fce,vIo),e(Z3,TIo),e(Z3,vce),e(vce,MIo),e(Qe,EIo),e(Qe,Tce),e(Tce,CIo),e(Qe,wIo),g(cw,Qe,null),b(c,_Re,u),b(c,Ad,u),e(Ad,e2),e(e2,Mce),g(fw,Mce,null),e(Ad,AIo),e(Ad,Ece),e(Ece,yIo),b(c,uRe,u),b(c,sr,u),g(mw,sr,null),e(sr,LIo),e(sr,yd),e(yd,xIo),e(yd,hD),e(hD,kIo),e(yd,SIo),e(yd,pD),e(pD,RIo),e(yd,BIo),e(sr,PIo),e(sr,gw),e(gw,$Io),e(gw,Cce),e(Cce,IIo),e(gw,qIo),e(sr,NIo),e(sr,et),g(hw,et,null),e(et,jIo),e(et,wce),e(wce,DIo),e(et,GIo),e(et,Ld),e(Ld,OIo),e(Ld,Ace),e(Ace,VIo),e(Ld,XIo),e(Ld,_D),e(_D,zIo),e(Ld,QIo),e(et,WIo),e(et,yce),e(yce,HIo),e(et,UIo),g(pw,et,null),e(sr,JIo),e(sr,We),g(_w,We,null),e(We,YIo),e(We,Lce),e(Lce,KIo),e(We,ZIo),e(We,en),e(en,eqo),e(en,xce),e(xce,oqo),e(en,rqo),e(en,kce),e(kce,tqo),e(en,aqo),e(en,Sce),e(Sce,nqo),e(en,sqo),e(We,lqo),e(We,Rce),e(Rce,o2),e(o2,Bce),e(Bce,iqo),e(o2,dqo),e(o2,uD),e(uD,cqo),e(o2,fqo),e(We,mqo),e(We,r2),e(r2,gqo),e(r2,Pce),e(Pce,hqo),e(r2,pqo),e(r2,$ce),e($ce,_qo),e(We,uqo),e(We,Ice),e(Ice,bqo),e(We,Fqo),g(uw,We,null),b(c,bRe,u),b(c,xd,u),e(xd,t2),e(t2,qce),g(bw,qce,null),e(xd,vqo),e(xd,Nce),e(Nce,Tqo),b(c,FRe,u),b(c,lr,u),g(Fw,lr,null),e(lr,Mqo),e(lr,kd),e(kd,Eqo),e(kd,bD),e(bD,Cqo),e(kd,wqo),e(kd,FD),e(FD,Aqo),e(kd,yqo),e(lr,Lqo),e(lr,vw),e(vw,xqo),e(vw,jce),e(jce,kqo),e(vw,Sqo),e(lr,Rqo),e(lr,ot),g(Tw,ot,null),e(ot,Bqo),e(ot,Dce),e(Dce,Pqo),e(ot,$qo),e(ot,Sd),e(Sd,Iqo),e(Sd,Gce),e(Gce,qqo),e(Sd,Nqo),e(Sd,vD),e(vD,jqo),e(Sd,Dqo),e(ot,Gqo),e(ot,Oce),e(Oce,Oqo),e(ot,Vqo),g(Mw,ot,null),e(lr,Xqo),e(lr,He),g(Ew,He,null),e(He,zqo),e(He,Vce),e(Vce,Qqo),e(He,Wqo),e(He,on),e(on,Hqo),e(on,Xce),e(Xce,Uqo),e(on,Jqo),e(on,zce),e(zce,Yqo),e(on,Kqo),e(on,Qce),e(Qce,Zqo),e(on,eNo),e(He,oNo),e(He,ge),e(ge,a2),e(a2,Wce),e(Wce,rNo),e(a2,tNo),e(a2,TD),e(TD,aNo),e(a2,nNo),e(ge,sNo),e(ge,n2),e(n2,Hce),e(Hce,lNo),e(n2,iNo),e(n2,MD),e(MD,dNo),e(n2,cNo),e(ge,fNo),e(ge,Ds),e(Ds,Uce),e(Uce,mNo),e(Ds,gNo),e(Ds,ED),e(ED,hNo),e(Ds,pNo),e(Ds,CD),e(CD,_No),e(Ds,uNo),e(ge,bNo),e(ge,s2),e(s2,Jce),e(Jce,FNo),e(s2,vNo),e(s2,wD),e(wD,TNo),e(s2,MNo),e(ge,ENo),e(ge,ma),e(ma,Yce),e(Yce,CNo),e(ma,wNo),e(ma,AD),e(AD,ANo),e(ma,yNo),e(ma,yD),e(yD,LNo),e(ma,xNo),e(ma,LD),e(LD,kNo),e(ma,SNo),e(ge,RNo),e(ge,l2),e(l2,Kce),e(Kce,BNo),e(l2,PNo),e(l2,xD),e(xD,$No),e(l2,INo),e(ge,qNo),e(ge,i2),e(i2,Zce),e(Zce,NNo),e(i2,jNo),e(i2,kD),e(kD,DNo),e(i2,GNo),e(ge,ONo),e(ge,d2),e(d2,efe),e(efe,VNo),e(d2,XNo),e(d2,SD),e(SD,zNo),e(d2,QNo),e(ge,WNo),e(ge,c2),e(c2,ofe),e(ofe,HNo),e(c2,UNo),e(c2,RD),e(RD,JNo),e(c2,YNo),e(ge,KNo),e(ge,f2),e(f2,rfe),e(rfe,ZNo),e(f2,ejo),e(f2,BD),e(BD,ojo),e(f2,rjo),e(ge,tjo),e(ge,m2),e(m2,tfe),e(tfe,ajo),e(m2,njo),e(m2,PD),e(PD,sjo),e(m2,ljo),e(He,ijo),e(He,g2),e(g2,djo),e(g2,afe),e(afe,cjo),e(g2,fjo),e(g2,nfe),e(nfe,mjo),e(He,gjo),e(He,sfe),e(sfe,hjo),e(He,pjo),g(Cw,He,null),b(c,vRe,u),b(c,Rd,u),e(Rd,h2),e(h2,lfe),g(ww,lfe,null),e(Rd,_jo),e(Rd,ife),e(ife,ujo),b(c,TRe,u),b(c,ir,u),g(Aw,ir,null),e(ir,bjo),e(ir,Bd),e(Bd,Fjo),e(Bd,$D),e($D,vjo),e(Bd,Tjo),e(Bd,ID),e(ID,Mjo),e(Bd,Ejo),e(ir,Cjo),e(ir,yw),e(yw,wjo),e(yw,dfe),e(dfe,Ajo),e(yw,yjo),e(ir,Ljo),e(ir,rt),g(Lw,rt,null),e(rt,xjo),e(rt,cfe),e(cfe,kjo),e(rt,Sjo),e(rt,Pd),e(Pd,Rjo),e(Pd,ffe),e(ffe,Bjo),e(Pd,Pjo),e(Pd,qD),e(qD,$jo),e(Pd,Ijo),e(rt,qjo),e(rt,mfe),e(mfe,Njo),e(rt,jjo),g(xw,rt,null),e(ir,Djo),e(ir,Ue),g(kw,Ue,null),e(Ue,Gjo),e(Ue,gfe),e(gfe,Ojo),e(Ue,Vjo),e(Ue,rn),e(rn,Xjo),e(rn,hfe),e(hfe,zjo),e(rn,Qjo),e(rn,pfe),e(pfe,Wjo),e(rn,Hjo),e(rn,_fe),e(_fe,Ujo),e(rn,Jjo),e(Ue,Yjo),e(Ue,ufe),e(ufe,p2),e(p2,bfe),e(bfe,Kjo),e(p2,Zjo),e(p2,ND),e(ND,eDo),e(p2,oDo),e(Ue,rDo),e(Ue,_2),e(_2,tDo),e(_2,Ffe),e(Ffe,aDo),e(_2,nDo),e(_2,vfe),e(vfe,sDo),e(Ue,lDo),e(Ue,Tfe),e(Tfe,iDo),e(Ue,dDo),g(Sw,Ue,null),b(c,MRe,u),b(c,$d,u),e($d,u2),e(u2,Mfe),g(Rw,Mfe,null),e($d,cDo),e($d,Efe),e(Efe,fDo),b(c,ERe,u),b(c,dr,u),g(Bw,dr,null),e(dr,mDo),e(dr,Id),e(Id,gDo),e(Id,jD),e(jD,hDo),e(Id,pDo),e(Id,DD),e(DD,_Do),e(Id,uDo),e(dr,bDo),e(dr,Pw),e(Pw,FDo),e(Pw,Cfe),e(Cfe,vDo),e(Pw,TDo),e(dr,MDo),e(dr,tt),g($w,tt,null),e(tt,EDo),e(tt,wfe),e(wfe,CDo),e(tt,wDo),e(tt,qd),e(qd,ADo),e(qd,Afe),e(Afe,yDo),e(qd,LDo),e(qd,GD),e(GD,xDo),e(qd,kDo),e(tt,SDo),e(tt,yfe),e(yfe,RDo),e(tt,BDo),g(Iw,tt,null),e(dr,PDo),e(dr,Je),g(qw,Je,null),e(Je,$Do),e(Je,Lfe),e(Lfe,IDo),e(Je,qDo),e(Je,tn),e(tn,NDo),e(tn,xfe),e(xfe,jDo),e(tn,DDo),e(tn,kfe),e(kfe,GDo),e(tn,ODo),e(tn,Sfe),e(Sfe,VDo),e(tn,XDo),e(Je,zDo),e(Je,Se),e(Se,b2),e(b2,Rfe),e(Rfe,QDo),e(b2,WDo),e(b2,OD),e(OD,HDo),e(b2,UDo),e(Se,JDo),e(Se,F2),e(F2,Bfe),e(Bfe,YDo),e(F2,KDo),e(F2,VD),e(VD,ZDo),e(F2,eGo),e(Se,oGo),e(Se,v2),e(v2,Pfe),e(Pfe,rGo),e(v2,tGo),e(v2,XD),e(XD,aGo),e(v2,nGo),e(Se,sGo),e(Se,T2),e(T2,$fe),e($fe,lGo),e(T2,iGo),e(T2,zD),e(zD,dGo),e(T2,cGo),e(Se,fGo),e(Se,M2),e(M2,Ife),e(Ife,mGo),e(M2,gGo),e(M2,QD),e(QD,hGo),e(M2,pGo),e(Se,_Go),e(Se,E2),e(E2,qfe),e(qfe,uGo),e(E2,bGo),e(E2,WD),e(WD,FGo),e(E2,vGo),e(Se,TGo),e(Se,C2),e(C2,Nfe),e(Nfe,MGo),e(C2,EGo),e(C2,HD),e(HD,CGo),e(C2,wGo),e(Se,AGo),e(Se,w2),e(w2,jfe),e(jfe,yGo),e(w2,LGo),e(w2,UD),e(UD,xGo),e(w2,kGo),e(Je,SGo),e(Je,A2),e(A2,RGo),e(A2,Dfe),e(Dfe,BGo),e(A2,PGo),e(A2,Gfe),e(Gfe,$Go),e(Je,IGo),e(Je,Ofe),e(Ofe,qGo),e(Je,NGo),g(Nw,Je,null),b(c,CRe,u),b(c,Nd,u),e(Nd,y2),e(y2,Vfe),g(jw,Vfe,null),e(Nd,jGo),e(Nd,Xfe),e(Xfe,DGo),b(c,wRe,u),b(c,cr,u),g(Dw,cr,null),e(cr,GGo),e(cr,jd),e(jd,OGo),e(jd,JD),e(JD,VGo),e(jd,XGo),e(jd,YD),e(YD,zGo),e(jd,QGo),e(cr,WGo),e(cr,Gw),e(Gw,HGo),e(Gw,zfe),e(zfe,UGo),e(Gw,JGo),e(cr,YGo),e(cr,at),g(Ow,at,null),e(at,KGo),e(at,Qfe),e(Qfe,ZGo),e(at,eOo),e(at,Dd),e(Dd,oOo),e(Dd,Wfe),e(Wfe,rOo),e(Dd,tOo),e(Dd,KD),e(KD,aOo),e(Dd,nOo),e(at,sOo),e(at,Hfe),e(Hfe,lOo),e(at,iOo),g(Vw,at,null),e(cr,dOo),e(cr,Ye),g(Xw,Ye,null),e(Ye,cOo),e(Ye,Ufe),e(Ufe,fOo),e(Ye,mOo),e(Ye,an),e(an,gOo),e(an,Jfe),e(Jfe,hOo),e(an,pOo),e(an,Yfe),e(Yfe,_Oo),e(an,uOo),e(an,Kfe),e(Kfe,bOo),e(an,FOo),e(Ye,vOo),e(Ye,nn),e(nn,L2),e(L2,Zfe),e(Zfe,TOo),e(L2,MOo),e(L2,ZD),e(ZD,EOo),e(L2,COo),e(nn,wOo),e(nn,x2),e(x2,eme),e(eme,AOo),e(x2,yOo),e(x2,eG),e(eG,LOo),e(x2,xOo),e(nn,kOo),e(nn,k2),e(k2,ome),e(ome,SOo),e(k2,ROo),e(k2,oG),e(oG,BOo),e(k2,POo),e(nn,$Oo),e(nn,S2),e(S2,rme),e(rme,IOo),e(S2,qOo),e(S2,rG),e(rG,NOo),e(S2,jOo),e(Ye,DOo),e(Ye,R2),e(R2,GOo),e(R2,tme),e(tme,OOo),e(R2,VOo),e(R2,ame),e(ame,XOo),e(Ye,zOo),e(Ye,nme),e(nme,QOo),e(Ye,WOo),g(zw,Ye,null),b(c,ARe,u),b(c,Gd,u),e(Gd,B2),e(B2,sme),g(Qw,sme,null),e(Gd,HOo),e(Gd,lme),e(lme,UOo),b(c,yRe,u),b(c,fr,u),g(Ww,fr,null),e(fr,JOo),e(fr,Od),e(Od,YOo),e(Od,tG),e(tG,KOo),e(Od,ZOo),e(Od,aG),e(aG,eVo),e(Od,oVo),e(fr,rVo),e(fr,Hw),e(Hw,tVo),e(Hw,ime),e(ime,aVo),e(Hw,nVo),e(fr,sVo),e(fr,nt),g(Uw,nt,null),e(nt,lVo),e(nt,dme),e(dme,iVo),e(nt,dVo),e(nt,Vd),e(Vd,cVo),e(Vd,cme),e(cme,fVo),e(Vd,mVo),e(Vd,nG),e(nG,gVo),e(Vd,hVo),e(nt,pVo),e(nt,fme),e(fme,_Vo),e(nt,uVo),g(Jw,nt,null),e(fr,bVo),e(fr,Ke),g(Yw,Ke,null),e(Ke,FVo),e(Ke,mme),e(mme,vVo),e(Ke,TVo),e(Ke,sn),e(sn,MVo),e(sn,gme),e(gme,EVo),e(sn,CVo),e(sn,hme),e(hme,wVo),e(sn,AVo),e(sn,pme),e(pme,yVo),e(sn,LVo),e(Ke,xVo),e(Ke,Re),e(Re,P2),e(P2,_me),e(_me,kVo),e(P2,SVo),e(P2,sG),e(sG,RVo),e(P2,BVo),e(Re,PVo),e(Re,$2),e($2,ume),e(ume,$Vo),e($2,IVo),e($2,lG),e(lG,qVo),e($2,NVo),e(Re,jVo),e(Re,I2),e(I2,bme),e(bme,DVo),e(I2,GVo),e(I2,iG),e(iG,OVo),e(I2,VVo),e(Re,XVo),e(Re,q2),e(q2,Fme),e(Fme,zVo),e(q2,QVo),e(q2,dG),e(dG,WVo),e(q2,HVo),e(Re,UVo),e(Re,N2),e(N2,vme),e(vme,JVo),e(N2,YVo),e(N2,cG),e(cG,KVo),e(N2,ZVo),e(Re,eXo),e(Re,j2),e(j2,Tme),e(Tme,oXo),e(j2,rXo),e(j2,fG),e(fG,tXo),e(j2,aXo),e(Re,nXo),e(Re,D2),e(D2,Mme),e(Mme,sXo),e(D2,lXo),e(D2,mG),e(mG,iXo),e(D2,dXo),e(Re,cXo),e(Re,G2),e(G2,Eme),e(Eme,fXo),e(G2,mXo),e(G2,gG),e(gG,gXo),e(G2,hXo),e(Ke,pXo),e(Ke,O2),e(O2,_Xo),e(O2,Cme),e(Cme,uXo),e(O2,bXo),e(O2,wme),e(wme,FXo),e(Ke,vXo),e(Ke,Ame),e(Ame,TXo),e(Ke,MXo),g(Kw,Ke,null),b(c,LRe,u),b(c,Xd,u),e(Xd,V2),e(V2,yme),g(Zw,yme,null),e(Xd,EXo),e(Xd,Lme),e(Lme,CXo),b(c,xRe,u),b(c,mr,u),g(eA,mr,null),e(mr,wXo),e(mr,zd),e(zd,AXo),e(zd,hG),e(hG,yXo),e(zd,LXo),e(zd,pG),e(pG,xXo),e(zd,kXo),e(mr,SXo),e(mr,oA),e(oA,RXo),e(oA,xme),e(xme,BXo),e(oA,PXo),e(mr,$Xo),e(mr,st),g(rA,st,null),e(st,IXo),e(st,kme),e(kme,qXo),e(st,NXo),e(st,Qd),e(Qd,jXo),e(Qd,Sme),e(Sme,DXo),e(Qd,GXo),e(Qd,_G),e(_G,OXo),e(Qd,VXo),e(st,XXo),e(st,Rme),e(Rme,zXo),e(st,QXo),g(tA,st,null),e(mr,WXo),e(mr,Ze),g(aA,Ze,null),e(Ze,HXo),e(Ze,Bme),e(Bme,UXo),e(Ze,JXo),e(Ze,ln),e(ln,YXo),e(ln,Pme),e(Pme,KXo),e(ln,ZXo),e(ln,$me),e($me,ezo),e(ln,ozo),e(ln,Ime),e(Ime,rzo),e(ln,tzo),e(Ze,azo),e(Ze,nA),e(nA,X2),e(X2,qme),e(qme,nzo),e(X2,szo),e(X2,uG),e(uG,lzo),e(X2,izo),e(nA,dzo),e(nA,z2),e(z2,Nme),e(Nme,czo),e(z2,fzo),e(z2,bG),e(bG,mzo),e(z2,gzo),e(Ze,hzo),e(Ze,Q2),e(Q2,pzo),e(Q2,jme),e(jme,_zo),e(Q2,uzo),e(Q2,Dme),e(Dme,bzo),e(Ze,Fzo),e(Ze,Gme),e(Gme,vzo),e(Ze,Tzo),g(sA,Ze,null),b(c,kRe,u),b(c,Wd,u),e(Wd,W2),e(W2,Ome),g(lA,Ome,null),e(Wd,Mzo),e(Wd,Vme),e(Vme,Ezo),b(c,SRe,u),b(c,gr,u),g(iA,gr,null),e(gr,Czo),e(gr,Hd),e(Hd,wzo),e(Hd,FG),e(FG,Azo),e(Hd,yzo),e(Hd,vG),e(vG,Lzo),e(Hd,xzo),e(gr,kzo),e(gr,dA),e(dA,Szo),e(dA,Xme),e(Xme,Rzo),e(dA,Bzo),e(gr,Pzo),e(gr,lt),g(cA,lt,null),e(lt,$zo),e(lt,zme),e(zme,Izo),e(lt,qzo),e(lt,Ud),e(Ud,Nzo),e(Ud,Qme),e(Qme,jzo),e(Ud,Dzo),e(Ud,TG),e(TG,Gzo),e(Ud,Ozo),e(lt,Vzo),e(lt,Wme),e(Wme,Xzo),e(lt,zzo),g(fA,lt,null),e(gr,Qzo),e(gr,eo),g(mA,eo,null),e(eo,Wzo),e(eo,Hme),e(Hme,Hzo),e(eo,Uzo),e(eo,dn),e(dn,Jzo),e(dn,Ume),e(Ume,Yzo),e(dn,Kzo),e(dn,Jme),e(Jme,Zzo),e(dn,eQo),e(dn,Yme),e(Yme,oQo),e(dn,rQo),e(eo,tQo),e(eo,cn),e(cn,H2),e(H2,Kme),e(Kme,aQo),e(H2,nQo),e(H2,MG),e(MG,sQo),e(H2,lQo),e(cn,iQo),e(cn,U2),e(U2,Zme),e(Zme,dQo),e(U2,cQo),e(U2,EG),e(EG,fQo),e(U2,mQo),e(cn,gQo),e(cn,J2),e(J2,ege),e(ege,hQo),e(J2,pQo),e(J2,CG),e(CG,_Qo),e(J2,uQo),e(cn,bQo),e(cn,Y2),e(Y2,oge),e(oge,FQo),e(Y2,vQo),e(Y2,wG),e(wG,TQo),e(Y2,MQo),e(eo,EQo),e(eo,K2),e(K2,CQo),e(K2,rge),e(rge,wQo),e(K2,AQo),e(K2,tge),e(tge,yQo),e(eo,LQo),e(eo,age),e(age,xQo),e(eo,kQo),g(gA,eo,null),b(c,RRe,u),b(c,Jd,u),e(Jd,Z2),e(Z2,nge),g(hA,nge,null),e(Jd,SQo),e(Jd,sge),e(sge,RQo),b(c,BRe,u),b(c,hr,u),g(pA,hr,null),e(hr,BQo),e(hr,Yd),e(Yd,PQo),e(Yd,AG),e(AG,$Qo),e(Yd,IQo),e(Yd,yG),e(yG,qQo),e(Yd,NQo),e(hr,jQo),e(hr,_A),e(_A,DQo),e(_A,lge),e(lge,GQo),e(_A,OQo),e(hr,VQo),e(hr,it),g(uA,it,null),e(it,XQo),e(it,ige),e(ige,zQo),e(it,QQo),e(it,Kd),e(Kd,WQo),e(Kd,dge),e(dge,HQo),e(Kd,UQo),e(Kd,LG),e(LG,JQo),e(Kd,YQo),e(it,KQo),e(it,cge),e(cge,ZQo),e(it,eWo),g(bA,it,null),e(hr,oWo),e(hr,oo),g(FA,oo,null),e(oo,rWo),e(oo,fge),e(fge,tWo),e(oo,aWo),e(oo,fn),e(fn,nWo),e(fn,mge),e(mge,sWo),e(fn,lWo),e(fn,gge),e(gge,iWo),e(fn,dWo),e(fn,hge),e(hge,cWo),e(fn,fWo),e(oo,mWo),e(oo,Zd),e(Zd,eF),e(eF,pge),e(pge,gWo),e(eF,hWo),e(eF,xG),e(xG,pWo),e(eF,_Wo),e(Zd,uWo),e(Zd,oF),e(oF,_ge),e(_ge,bWo),e(oF,FWo),e(oF,kG),e(kG,vWo),e(oF,TWo),e(Zd,MWo),e(Zd,rF),e(rF,uge),e(uge,EWo),e(rF,CWo),e(rF,SG),e(SG,wWo),e(rF,AWo),e(oo,yWo),e(oo,tF),e(tF,LWo),e(tF,bge),e(bge,xWo),e(tF,kWo),e(tF,Fge),e(Fge,SWo),e(oo,RWo),e(oo,vge),e(vge,BWo),e(oo,PWo),g(vA,oo,null),b(c,PRe,u),b(c,ec,u),e(ec,aF),e(aF,Tge),g(TA,Tge,null),e(ec,$Wo),e(ec,Mge),e(Mge,IWo),b(c,$Re,u),b(c,pr,u),g(MA,pr,null),e(pr,qWo),e(pr,oc),e(oc,NWo),e(oc,RG),e(RG,jWo),e(oc,DWo),e(oc,BG),e(BG,GWo),e(oc,OWo),e(pr,VWo),e(pr,EA),e(EA,XWo),e(EA,Ege),e(Ege,zWo),e(EA,QWo),e(pr,WWo),e(pr,dt),g(CA,dt,null),e(dt,HWo),e(dt,Cge),e(Cge,UWo),e(dt,JWo),e(dt,rc),e(rc,YWo),e(rc,wge),e(wge,KWo),e(rc,ZWo),e(rc,PG),e(PG,eHo),e(rc,oHo),e(dt,rHo),e(dt,Age),e(Age,tHo),e(dt,aHo),g(wA,dt,null),e(pr,nHo),e(pr,ro),g(AA,ro,null),e(ro,sHo),e(ro,yge),e(yge,lHo),e(ro,iHo),e(ro,mn),e(mn,dHo),e(mn,Lge),e(Lge,cHo),e(mn,fHo),e(mn,xge),e(xge,mHo),e(mn,gHo),e(mn,kge),e(kge,hHo),e(mn,pHo),e(ro,_Ho),e(ro,Sge),e(Sge,nF),e(nF,Rge),e(Rge,uHo),e(nF,bHo),e(nF,$G),e($G,FHo),e(nF,vHo),e(ro,THo),e(ro,sF),e(sF,MHo),e(sF,Bge),e(Bge,EHo),e(sF,CHo),e(sF,Pge),e(Pge,wHo),e(ro,AHo),e(ro,$ge),e($ge,yHo),e(ro,LHo),g(yA,ro,null),b(c,IRe,u),b(c,tc,u),e(tc,lF),e(lF,Ige),g(LA,Ige,null),e(tc,xHo),e(tc,qge),e(qge,kHo),b(c,qRe,u),b(c,_r,u),g(xA,_r,null),e(_r,SHo),e(_r,ac),e(ac,RHo),e(ac,IG),e(IG,BHo),e(ac,PHo),e(ac,qG),e(qG,$Ho),e(ac,IHo),e(_r,qHo),e(_r,kA),e(kA,NHo),e(kA,Nge),e(Nge,jHo),e(kA,DHo),e(_r,GHo),e(_r,ct),g(SA,ct,null),e(ct,OHo),e(ct,jge),e(jge,VHo),e(ct,XHo),e(ct,nc),e(nc,zHo),e(nc,Dge),e(Dge,QHo),e(nc,WHo),e(nc,NG),e(NG,HHo),e(nc,UHo),e(ct,JHo),e(ct,Gge),e(Gge,YHo),e(ct,KHo),g(RA,ct,null),e(_r,ZHo),e(_r,to),g(BA,to,null),e(to,eUo),e(to,Oge),e(Oge,oUo),e(to,rUo),e(to,gn),e(gn,tUo),e(gn,Vge),e(Vge,aUo),e(gn,nUo),e(gn,Xge),e(Xge,sUo),e(gn,lUo),e(gn,zge),e(zge,iUo),e(gn,dUo),e(to,cUo),e(to,Qge),e(Qge,iF),e(iF,Wge),e(Wge,fUo),e(iF,mUo),e(iF,jG),e(jG,gUo),e(iF,hUo),e(to,pUo),e(to,dF),e(dF,_Uo),e(dF,Hge),e(Hge,uUo),e(dF,bUo),e(dF,Uge),e(Uge,FUo),e(to,vUo),e(to,Jge),e(Jge,TUo),e(to,MUo),g(PA,to,null),b(c,NRe,u),b(c,sc,u),e(sc,cF),e(cF,Yge),g($A,Yge,null),e(sc,EUo),e(sc,Kge),e(Kge,CUo),b(c,jRe,u),b(c,ur,u),g(IA,ur,null),e(ur,wUo),e(ur,lc),e(lc,AUo),e(lc,DG),e(DG,yUo),e(lc,LUo),e(lc,GG),e(GG,xUo),e(lc,kUo),e(ur,SUo),e(ur,qA),e(qA,RUo),e(qA,Zge),e(Zge,BUo),e(qA,PUo),e(ur,$Uo),e(ur,ft),g(NA,ft,null),e(ft,IUo),e(ft,ehe),e(ehe,qUo),e(ft,NUo),e(ft,ic),e(ic,jUo),e(ic,ohe),e(ohe,DUo),e(ic,GUo),e(ic,OG),e(OG,OUo),e(ic,VUo),e(ft,XUo),e(ft,rhe),e(rhe,zUo),e(ft,QUo),g(jA,ft,null),e(ur,WUo),e(ur,ao),g(DA,ao,null),e(ao,HUo),e(ao,the),e(the,UUo),e(ao,JUo),e(ao,hn),e(hn,YUo),e(hn,ahe),e(ahe,KUo),e(hn,ZUo),e(hn,nhe),e(nhe,eJo),e(hn,oJo),e(hn,she),e(she,rJo),e(hn,tJo),e(ao,aJo),e(ao,dc),e(dc,fF),e(fF,lhe),e(lhe,nJo),e(fF,sJo),e(fF,VG),e(VG,lJo),e(fF,iJo),e(dc,dJo),e(dc,mF),e(mF,ihe),e(ihe,cJo),e(mF,fJo),e(mF,XG),e(XG,mJo),e(mF,gJo),e(dc,hJo),e(dc,gF),e(gF,dhe),e(dhe,pJo),e(gF,_Jo),e(gF,zG),e(zG,uJo),e(gF,bJo),e(ao,FJo),e(ao,hF),e(hF,vJo),e(hF,che),e(che,TJo),e(hF,MJo),e(hF,fhe),e(fhe,EJo),e(ao,CJo),e(ao,mhe),e(mhe,wJo),e(ao,AJo),g(GA,ao,null),b(c,DRe,u),b(c,cc,u),e(cc,pF),e(pF,ghe),g(OA,ghe,null),e(cc,yJo),e(cc,hhe),e(hhe,LJo),b(c,GRe,u),b(c,br,u),g(VA,br,null),e(br,xJo),e(br,fc),e(fc,kJo),e(fc,QG),e(QG,SJo),e(fc,RJo),e(fc,WG),e(WG,BJo),e(fc,PJo),e(br,$Jo),e(br,XA),e(XA,IJo),e(XA,phe),e(phe,qJo),e(XA,NJo),e(br,jJo),e(br,mt),g(zA,mt,null),e(mt,DJo),e(mt,_he),e(_he,GJo),e(mt,OJo),e(mt,mc),e(mc,VJo),e(mc,uhe),e(uhe,XJo),e(mc,zJo),e(mc,HG),e(HG,QJo),e(mc,WJo),e(mt,HJo),e(mt,bhe),e(bhe,UJo),e(mt,JJo),g(QA,mt,null),e(br,YJo),e(br,no),g(WA,no,null),e(no,KJo),e(no,Fhe),e(Fhe,ZJo),e(no,eYo),e(no,pn),e(pn,oYo),e(pn,vhe),e(vhe,rYo),e(pn,tYo),e(pn,The),e(The,aYo),e(pn,nYo),e(pn,Mhe),e(Mhe,sYo),e(pn,lYo),e(no,iYo),e(no,Ehe),e(Ehe,_F),e(_F,Che),e(Che,dYo),e(_F,cYo),e(_F,UG),e(UG,fYo),e(_F,mYo),e(no,gYo),e(no,uF),e(uF,hYo),e(uF,whe),e(whe,pYo),e(uF,_Yo),e(uF,Ahe),e(Ahe,uYo),e(no,bYo),e(no,yhe),e(yhe,FYo),e(no,vYo),g(HA,no,null),b(c,ORe,u),b(c,gc,u),e(gc,bF),e(bF,Lhe),g(UA,Lhe,null),e(gc,TYo),e(gc,xhe),e(xhe,MYo),b(c,VRe,u),b(c,Fr,u),g(JA,Fr,null),e(Fr,EYo),e(Fr,hc),e(hc,CYo),e(hc,JG),e(JG,wYo),e(hc,AYo),e(hc,YG),e(YG,yYo),e(hc,LYo),e(Fr,xYo),e(Fr,YA),e(YA,kYo),e(YA,khe),e(khe,SYo),e(YA,RYo),e(Fr,BYo),e(Fr,gt),g(KA,gt,null),e(gt,PYo),e(gt,She),e(She,$Yo),e(gt,IYo),e(gt,pc),e(pc,qYo),e(pc,Rhe),e(Rhe,NYo),e(pc,jYo),e(pc,KG),e(KG,DYo),e(pc,GYo),e(gt,OYo),e(gt,Bhe),e(Bhe,VYo),e(gt,XYo),g(ZA,gt,null),e(Fr,zYo),e(Fr,ho),g(e0,ho,null),e(ho,QYo),e(ho,Phe),e(Phe,WYo),e(ho,HYo),e(ho,_n),e(_n,UYo),e(_n,$he),e($he,JYo),e(_n,YYo),e(_n,Ihe),e(Ihe,KYo),e(_n,ZYo),e(_n,qhe),e(qhe,eKo),e(_n,oKo),e(ho,rKo),e(ho,x),e(x,FF),e(FF,Nhe),e(Nhe,tKo),e(FF,aKo),e(FF,ZG),e(ZG,nKo),e(FF,sKo),e(x,lKo),e(x,vF),e(vF,jhe),e(jhe,iKo),e(vF,dKo),e(vF,eO),e(eO,cKo),e(vF,fKo),e(x,mKo),e(x,TF),e(TF,Dhe),e(Dhe,gKo),e(TF,hKo),e(TF,oO),e(oO,pKo),e(TF,_Ko),e(x,uKo),e(x,MF),e(MF,Ghe),e(Ghe,bKo),e(MF,FKo),e(MF,rO),e(rO,vKo),e(MF,TKo),e(x,MKo),e(x,EF),e(EF,Ohe),e(Ohe,EKo),e(EF,CKo),e(EF,tO),e(tO,wKo),e(EF,AKo),e(x,yKo),e(x,CF),e(CF,Vhe),e(Vhe,LKo),e(CF,xKo),e(CF,aO),e(aO,kKo),e(CF,SKo),e(x,RKo),e(x,wF),e(wF,Xhe),e(Xhe,BKo),e(wF,PKo),e(wF,nO),e(nO,$Ko),e(wF,IKo),e(x,qKo),e(x,AF),e(AF,zhe),e(zhe,NKo),e(AF,jKo),e(AF,sO),e(sO,DKo),e(AF,GKo),e(x,OKo),e(x,yF),e(yF,Qhe),e(Qhe,VKo),e(yF,XKo),e(yF,lO),e(lO,zKo),e(yF,QKo),e(x,WKo),e(x,LF),e(LF,Whe),e(Whe,HKo),e(LF,UKo),e(LF,iO),e(iO,JKo),e(LF,YKo),e(x,KKo),e(x,xF),e(xF,Hhe),e(Hhe,ZKo),e(xF,eZo),e(xF,dO),e(dO,oZo),e(xF,rZo),e(x,tZo),e(x,kF),e(kF,Uhe),e(Uhe,aZo),e(kF,nZo),e(kF,cO),e(cO,sZo),e(kF,lZo),e(x,iZo),e(x,SF),e(SF,Jhe),e(Jhe,dZo),e(SF,cZo),e(SF,fO),e(fO,fZo),e(SF,mZo),e(x,gZo),e(x,RF),e(RF,Yhe),e(Yhe,hZo),e(RF,pZo),e(RF,mO),e(mO,_Zo),e(RF,uZo),e(x,bZo),e(x,BF),e(BF,Khe),e(Khe,FZo),e(BF,vZo),e(BF,gO),e(gO,TZo),e(BF,MZo),e(x,EZo),e(x,PF),e(PF,Zhe),e(Zhe,CZo),e(PF,wZo),e(PF,hO),e(hO,AZo),e(PF,yZo),e(x,LZo),e(x,Gs),e(Gs,epe),e(epe,xZo),e(Gs,kZo),e(Gs,pO),e(pO,SZo),e(Gs,RZo),e(Gs,_O),e(_O,BZo),e(Gs,PZo),e(x,$Zo),e(x,$F),e($F,ope),e(ope,IZo),e($F,qZo),e($F,uO),e(uO,NZo),e($F,jZo),e(x,DZo),e(x,IF),e(IF,rpe),e(rpe,GZo),e(IF,OZo),e(IF,bO),e(bO,VZo),e(IF,XZo),e(x,zZo),e(x,qF),e(qF,tpe),e(tpe,QZo),e(qF,WZo),e(qF,FO),e(FO,HZo),e(qF,UZo),e(x,JZo),e(x,NF),e(NF,ape),e(ape,YZo),e(NF,KZo),e(NF,vO),e(vO,ZZo),e(NF,eer),e(x,oer),e(x,jF),e(jF,npe),e(npe,rer),e(jF,ter),e(jF,TO),e(TO,aer),e(jF,ner),e(x,ser),e(x,DF),e(DF,spe),e(spe,ler),e(DF,ier),e(DF,MO),e(MO,der),e(DF,cer),e(x,fer),e(x,GF),e(GF,lpe),e(lpe,mer),e(GF,ger),e(GF,EO),e(EO,her),e(GF,per),e(x,_er),e(x,OF),e(OF,ipe),e(ipe,uer),e(OF,ber),e(OF,CO),e(CO,Fer),e(OF,ver),e(x,Ter),e(x,VF),e(VF,dpe),e(dpe,Mer),e(VF,Eer),e(VF,wO),e(wO,Cer),e(VF,wer),e(x,Aer),e(x,XF),e(XF,cpe),e(cpe,yer),e(XF,Ler),e(XF,AO),e(AO,xer),e(XF,ker),e(x,Ser),e(x,zF),e(zF,fpe),e(fpe,Rer),e(zF,Ber),e(zF,yO),e(yO,Per),e(zF,$er),e(x,Ier),e(x,QF),e(QF,mpe),e(mpe,qer),e(QF,Ner),e(QF,LO),e(LO,jer),e(QF,Der),e(x,Ger),e(x,WF),e(WF,gpe),e(gpe,Oer),e(WF,Ver),e(WF,xO),e(xO,Xer),e(WF,zer),e(x,Qer),e(x,HF),e(HF,hpe),e(hpe,Wer),e(HF,Her),e(HF,kO),e(kO,Uer),e(HF,Jer),e(x,Yer),e(x,UF),e(UF,ppe),e(ppe,Ker),e(UF,Zer),e(UF,SO),e(SO,eor),e(UF,oor),e(x,ror),e(x,JF),e(JF,_pe),e(_pe,tor),e(JF,aor),e(JF,RO),e(RO,nor),e(JF,sor),e(x,lor),e(x,YF),e(YF,upe),e(upe,ior),e(YF,dor),e(YF,BO),e(BO,cor),e(YF,mor),e(x,gor),e(x,KF),e(KF,bpe),e(bpe,hor),e(KF,por),e(KF,PO),e(PO,_or),e(KF,uor),e(x,bor),e(x,ZF),e(ZF,Fpe),e(Fpe,For),e(ZF,vor),e(ZF,$O),e($O,Tor),e(ZF,Mor),e(x,Eor),e(x,ev),e(ev,vpe),e(vpe,Cor),e(ev,wor),e(ev,IO),e(IO,Aor),e(ev,yor),e(x,Lor),e(x,ov),e(ov,Tpe),e(Tpe,xor),e(ov,kor),e(ov,qO),e(qO,Sor),e(ov,Ror),e(x,Bor),e(x,rv),e(rv,Mpe),e(Mpe,Por),e(rv,$or),e(rv,NO),e(NO,Ior),e(rv,qor),e(x,Nor),e(x,tv),e(tv,Epe),e(Epe,jor),e(tv,Dor),e(tv,jO),e(jO,Gor),e(tv,Oor),e(x,Vor),e(x,av),e(av,Cpe),e(Cpe,Xor),e(av,zor),e(av,DO),e(DO,Qor),e(av,Wor),e(x,Hor),e(x,nv),e(nv,wpe),e(wpe,Uor),e(nv,Jor),e(nv,GO),e(GO,Yor),e(nv,Kor),e(x,Zor),e(x,sv),e(sv,Ape),e(Ape,err),e(sv,orr),e(sv,OO),e(OO,rrr),e(sv,trr),e(x,arr),e(x,lv),e(lv,ype),e(ype,nrr),e(lv,srr),e(lv,VO),e(VO,lrr),e(lv,irr),e(ho,drr),e(ho,Lpe),e(Lpe,crr),e(ho,frr),g(o0,ho,null),b(c,XRe,u),b(c,_c,u),e(_c,iv),e(iv,xpe),g(r0,xpe,null),e(_c,mrr),e(_c,kpe),e(kpe,grr),b(c,zRe,u),b(c,vr,u),g(t0,vr,null),e(vr,hrr),e(vr,uc),e(uc,prr),e(uc,XO),e(XO,_rr),e(uc,urr),e(uc,zO),e(zO,brr),e(uc,Frr),e(vr,vrr),e(vr,a0),e(a0,Trr),e(a0,Spe),e(Spe,Mrr),e(a0,Err),e(vr,Crr),e(vr,ht),g(n0,ht,null),e(ht,wrr),e(ht,Rpe),e(Rpe,Arr),e(ht,yrr),e(ht,bc),e(bc,Lrr),e(bc,Bpe),e(Bpe,xrr),e(bc,krr),e(bc,QO),e(QO,Srr),e(bc,Rrr),e(ht,Brr),e(ht,Ppe),e(Ppe,Prr),e(ht,$rr),g(s0,ht,null),e(vr,Irr),e(vr,po),g(l0,po,null),e(po,qrr),e(po,$pe),e($pe,Nrr),e(po,jrr),e(po,un),e(un,Drr),e(un,Ipe),e(Ipe,Grr),e(un,Orr),e(un,qpe),e(qpe,Vrr),e(un,Xrr),e(un,Npe),e(Npe,zrr),e(un,Qrr),e(po,Wrr),e(po,H),e(H,dv),e(dv,jpe),e(jpe,Hrr),e(dv,Urr),e(dv,WO),e(WO,Jrr),e(dv,Yrr),e(H,Krr),e(H,cv),e(cv,Dpe),e(Dpe,Zrr),e(cv,etr),e(cv,HO),e(HO,otr),e(cv,rtr),e(H,ttr),e(H,fv),e(fv,Gpe),e(Gpe,atr),e(fv,ntr),e(fv,UO),e(UO,str),e(fv,ltr),e(H,itr),e(H,mv),e(mv,Ope),e(Ope,dtr),e(mv,ctr),e(mv,JO),e(JO,ftr),e(mv,mtr),e(H,gtr),e(H,gv),e(gv,Vpe),e(Vpe,htr),e(gv,ptr),e(gv,YO),e(YO,_tr),e(gv,utr),e(H,btr),e(H,hv),e(hv,Xpe),e(Xpe,Ftr),e(hv,vtr),e(hv,KO),e(KO,Ttr),e(hv,Mtr),e(H,Etr),e(H,pv),e(pv,zpe),e(zpe,Ctr),e(pv,wtr),e(pv,ZO),e(ZO,Atr),e(pv,ytr),e(H,Ltr),e(H,_v),e(_v,Qpe),e(Qpe,xtr),e(_v,ktr),e(_v,eV),e(eV,Str),e(_v,Rtr),e(H,Btr),e(H,uv),e(uv,Wpe),e(Wpe,Ptr),e(uv,$tr),e(uv,oV),e(oV,Itr),e(uv,qtr),e(H,Ntr),e(H,bv),e(bv,Hpe),e(Hpe,jtr),e(bv,Dtr),e(bv,rV),e(rV,Gtr),e(bv,Otr),e(H,Vtr),e(H,Fv),e(Fv,Upe),e(Upe,Xtr),e(Fv,ztr),e(Fv,tV),e(tV,Qtr),e(Fv,Wtr),e(H,Htr),e(H,vv),e(vv,Jpe),e(Jpe,Utr),e(vv,Jtr),e(vv,aV),e(aV,Ytr),e(vv,Ktr),e(H,Ztr),e(H,Tv),e(Tv,Ype),e(Ype,ear),e(Tv,oar),e(Tv,nV),e(nV,rar),e(Tv,tar),e(H,aar),e(H,Mv),e(Mv,Kpe),e(Kpe,nar),e(Mv,sar),e(Mv,sV),e(sV,lar),e(Mv,iar),e(H,dar),e(H,Ev),e(Ev,Zpe),e(Zpe,car),e(Ev,far),e(Ev,lV),e(lV,mar),e(Ev,gar),e(H,har),e(H,Cv),e(Cv,e_e),e(e_e,par),e(Cv,_ar),e(Cv,iV),e(iV,uar),e(Cv,bar),e(H,Far),e(H,wv),e(wv,o_e),e(o_e,Tar),e(wv,Mar),e(wv,dV),e(dV,Ear),e(wv,Car),e(H,war),e(H,Av),e(Av,r_e),e(r_e,Aar),e(Av,yar),e(Av,cV),e(cV,Lar),e(Av,xar),e(H,kar),e(H,yv),e(yv,t_e),e(t_e,Sar),e(yv,Rar),e(yv,fV),e(fV,Bar),e(yv,Par),e(H,$ar),e(H,Lv),e(Lv,a_e),e(a_e,Iar),e(Lv,qar),e(Lv,mV),e(mV,Nar),e(Lv,jar),e(H,Dar),e(H,xv),e(xv,n_e),e(n_e,Gar),e(xv,Oar),e(xv,gV),e(gV,Var),e(xv,Xar),e(H,zar),e(H,kv),e(kv,s_e),e(s_e,Qar),e(kv,War),e(kv,hV),e(hV,Har),e(kv,Uar),e(H,Jar),e(H,Sv),e(Sv,l_e),e(l_e,Yar),e(Sv,Kar),e(Sv,pV),e(pV,Zar),e(Sv,enr),e(po,onr),e(po,i_e),e(i_e,rnr),e(po,tnr),g(i0,po,null),b(c,QRe,u),b(c,Fc,u),e(Fc,Rv),e(Rv,d_e),g(d0,d_e,null),e(Fc,anr),e(Fc,c_e),e(c_e,nnr),b(c,WRe,u),b(c,Tr,u),g(c0,Tr,null),e(Tr,snr),e(Tr,vc),e(vc,lnr),e(vc,_V),e(_V,inr),e(vc,dnr),e(vc,uV),e(uV,cnr),e(vc,fnr),e(Tr,mnr),e(Tr,f0),e(f0,gnr),e(f0,f_e),e(f_e,hnr),e(f0,pnr),e(Tr,_nr),e(Tr,pt),g(m0,pt,null),e(pt,unr),e(pt,m_e),e(m_e,bnr),e(pt,Fnr),e(pt,Tc),e(Tc,vnr),e(Tc,g_e),e(g_e,Tnr),e(Tc,Mnr),e(Tc,bV),e(bV,Enr),e(Tc,Cnr),e(pt,wnr),e(pt,h_e),e(h_e,Anr),e(pt,ynr),g(g0,pt,null),e(Tr,Lnr),e(Tr,_o),g(h0,_o,null),e(_o,xnr),e(_o,p_e),e(p_e,knr),e(_o,Snr),e(_o,bn),e(bn,Rnr),e(bn,__e),e(__e,Bnr),e(bn,Pnr),e(bn,u_e),e(u_e,$nr),e(bn,Inr),e(bn,b_e),e(b_e,qnr),e(bn,Nnr),e(_o,jnr),e(_o,ce),e(ce,Bv),e(Bv,F_e),e(F_e,Dnr),e(Bv,Gnr),e(Bv,FV),e(FV,Onr),e(Bv,Vnr),e(ce,Xnr),e(ce,Pv),e(Pv,v_e),e(v_e,znr),e(Pv,Qnr),e(Pv,vV),e(vV,Wnr),e(Pv,Hnr),e(ce,Unr),e(ce,$v),e($v,T_e),e(T_e,Jnr),e($v,Ynr),e($v,TV),e(TV,Knr),e($v,Znr),e(ce,esr),e(ce,Iv),e(Iv,M_e),e(M_e,osr),e(Iv,rsr),e(Iv,MV),e(MV,tsr),e(Iv,asr),e(ce,nsr),e(ce,qv),e(qv,E_e),e(E_e,ssr),e(qv,lsr),e(qv,EV),e(EV,isr),e(qv,dsr),e(ce,csr),e(ce,Nv),e(Nv,C_e),e(C_e,fsr),e(Nv,msr),e(Nv,CV),e(CV,gsr),e(Nv,hsr),e(ce,psr),e(ce,jv),e(jv,w_e),e(w_e,_sr),e(jv,usr),e(jv,wV),e(wV,bsr),e(jv,Fsr),e(ce,vsr),e(ce,Dv),e(Dv,A_e),e(A_e,Tsr),e(Dv,Msr),e(Dv,AV),e(AV,Esr),e(Dv,Csr),e(ce,wsr),e(ce,Gv),e(Gv,y_e),e(y_e,Asr),e(Gv,ysr),e(Gv,yV),e(yV,Lsr),e(Gv,xsr),e(ce,ksr),e(ce,Ov),e(Ov,L_e),e(L_e,Ssr),e(Ov,Rsr),e(Ov,LV),e(LV,Bsr),e(Ov,Psr),e(ce,$sr),e(ce,Vv),e(Vv,x_e),e(x_e,Isr),e(Vv,qsr),e(Vv,xV),e(xV,Nsr),e(Vv,jsr),e(ce,Dsr),e(ce,Xv),e(Xv,k_e),e(k_e,Gsr),e(Xv,Osr),e(Xv,kV),e(kV,Vsr),e(Xv,Xsr),e(_o,zsr),e(_o,S_e),e(S_e,Qsr),e(_o,Wsr),g(p0,_o,null),b(c,HRe,u),b(c,Mc,u),e(Mc,zv),e(zv,R_e),g(_0,R_e,null),e(Mc,Hsr),e(Mc,B_e),e(B_e,Usr),b(c,URe,u),b(c,Mr,u),g(u0,Mr,null),e(Mr,Jsr),e(Mr,Ec),e(Ec,Ysr),e(Ec,SV),e(SV,Ksr),e(Ec,Zsr),e(Ec,RV),e(RV,elr),e(Ec,olr),e(Mr,rlr),e(Mr,b0),e(b0,tlr),e(b0,P_e),e(P_e,alr),e(b0,nlr),e(Mr,slr),e(Mr,_t),g(F0,_t,null),e(_t,llr),e(_t,$_e),e($_e,ilr),e(_t,dlr),e(_t,Cc),e(Cc,clr),e(Cc,I_e),e(I_e,flr),e(Cc,mlr),e(Cc,BV),e(BV,glr),e(Cc,hlr),e(_t,plr),e(_t,q_e),e(q_e,_lr),e(_t,ulr),g(v0,_t,null),e(Mr,blr),e(Mr,uo),g(T0,uo,null),e(uo,Flr),e(uo,N_e),e(N_e,vlr),e(uo,Tlr),e(uo,Fn),e(Fn,Mlr),e(Fn,j_e),e(j_e,Elr),e(Fn,Clr),e(Fn,D_e),e(D_e,wlr),e(Fn,Alr),e(Fn,G_e),e(G_e,ylr),e(Fn,Llr),e(uo,xlr),e(uo,M0),e(M0,Qv),e(Qv,O_e),e(O_e,klr),e(Qv,Slr),e(Qv,PV),e(PV,Rlr),e(Qv,Blr),e(M0,Plr),e(M0,Wv),e(Wv,V_e),e(V_e,$lr),e(Wv,Ilr),e(Wv,$V),e($V,qlr),e(Wv,Nlr),e(uo,jlr),e(uo,X_e),e(X_e,Dlr),e(uo,Glr),g(E0,uo,null),b(c,JRe,u),b(c,wc,u),e(wc,Hv),e(Hv,z_e),g(C0,z_e,null),e(wc,Olr),e(wc,Q_e),e(Q_e,Vlr),b(c,YRe,u),b(c,Er,u),g(w0,Er,null),e(Er,Xlr),e(Er,Ac),e(Ac,zlr),e(Ac,IV),e(IV,Qlr),e(Ac,Wlr),e(Ac,qV),e(qV,Hlr),e(Ac,Ulr),e(Er,Jlr),e(Er,A0),e(A0,Ylr),e(A0,W_e),e(W_e,Klr),e(A0,Zlr),e(Er,eir),e(Er,ut),g(y0,ut,null),e(ut,oir),e(ut,H_e),e(H_e,rir),e(ut,tir),e(ut,yc),e(yc,air),e(yc,U_e),e(U_e,nir),e(yc,sir),e(yc,NV),e(NV,lir),e(yc,iir),e(ut,dir),e(ut,J_e),e(J_e,cir),e(ut,fir),g(L0,ut,null),e(Er,mir),e(Er,bo),g(x0,bo,null),e(bo,gir),e(bo,Y_e),e(Y_e,hir),e(bo,pir),e(bo,vn),e(vn,_ir),e(vn,K_e),e(K_e,uir),e(vn,bir),e(vn,Z_e),e(Z_e,Fir),e(vn,vir),e(vn,eue),e(eue,Tir),e(vn,Mir),e(bo,Eir),e(bo,J),e(J,Uv),e(Uv,oue),e(oue,Cir),e(Uv,wir),e(Uv,jV),e(jV,Air),e(Uv,yir),e(J,Lir),e(J,Jv),e(Jv,rue),e(rue,xir),e(Jv,kir),e(Jv,DV),e(DV,Sir),e(Jv,Rir),e(J,Bir),e(J,Yv),e(Yv,tue),e(tue,Pir),e(Yv,$ir),e(Yv,GV),e(GV,Iir),e(Yv,qir),e(J,Nir),e(J,Kv),e(Kv,aue),e(aue,jir),e(Kv,Dir),e(Kv,OV),e(OV,Gir),e(Kv,Oir),e(J,Vir),e(J,Zv),e(Zv,nue),e(nue,Xir),e(Zv,zir),e(Zv,VV),e(VV,Qir),e(Zv,Wir),e(J,Hir),e(J,e6),e(e6,sue),e(sue,Uir),e(e6,Jir),e(e6,XV),e(XV,Yir),e(e6,Kir),e(J,Zir),e(J,o6),e(o6,lue),e(lue,edr),e(o6,odr),e(o6,zV),e(zV,rdr),e(o6,tdr),e(J,adr),e(J,r6),e(r6,iue),e(iue,ndr),e(r6,sdr),e(r6,QV),e(QV,ldr),e(r6,idr),e(J,ddr),e(J,t6),e(t6,due),e(due,cdr),e(t6,fdr),e(t6,WV),e(WV,mdr),e(t6,gdr),e(J,hdr),e(J,a6),e(a6,cue),e(cue,pdr),e(a6,_dr),e(a6,HV),e(HV,udr),e(a6,bdr),e(J,Fdr),e(J,n6),e(n6,fue),e(fue,vdr),e(n6,Tdr),e(n6,UV),e(UV,Mdr),e(n6,Edr),e(J,Cdr),e(J,s6),e(s6,mue),e(mue,wdr),e(s6,Adr),e(s6,JV),e(JV,ydr),e(s6,Ldr),e(J,xdr),e(J,l6),e(l6,gue),e(gue,kdr),e(l6,Sdr),e(l6,YV),e(YV,Rdr),e(l6,Bdr),e(J,Pdr),e(J,i6),e(i6,hue),e(hue,$dr),e(i6,Idr),e(i6,KV),e(KV,qdr),e(i6,Ndr),e(J,jdr),e(J,d6),e(d6,pue),e(pue,Ddr),e(d6,Gdr),e(d6,ZV),e(ZV,Odr),e(d6,Vdr),e(J,Xdr),e(J,c6),e(c6,_ue),e(_ue,zdr),e(c6,Qdr),e(c6,eX),e(eX,Wdr),e(c6,Hdr),e(J,Udr),e(J,f6),e(f6,uue),e(uue,Jdr),e(f6,Ydr),e(f6,oX),e(oX,Kdr),e(f6,Zdr),e(J,ecr),e(J,m6),e(m6,bue),e(bue,ocr),e(m6,rcr),e(m6,rX),e(rX,tcr),e(m6,acr),e(J,ncr),e(J,g6),e(g6,Fue),e(Fue,scr),e(g6,lcr),e(g6,tX),e(tX,icr),e(g6,dcr),e(J,ccr),e(J,h6),e(h6,vue),e(vue,fcr),e(h6,mcr),e(h6,aX),e(aX,gcr),e(h6,hcr),e(bo,pcr),e(bo,Tue),e(Tue,_cr),e(bo,ucr),g(k0,bo,null),b(c,KRe,u),b(c,Lc,u),e(Lc,p6),e(p6,Mue),g(S0,Mue,null),e(Lc,bcr),e(Lc,Eue),e(Eue,Fcr),b(c,ZRe,u),b(c,Cr,u),g(R0,Cr,null),e(Cr,vcr),e(Cr,xc),e(xc,Tcr),e(xc,nX),e(nX,Mcr),e(xc,Ecr),e(xc,sX),e(sX,Ccr),e(xc,wcr),e(Cr,Acr),e(Cr,B0),e(B0,ycr),e(B0,Cue),e(Cue,Lcr),e(B0,xcr),e(Cr,kcr),e(Cr,bt),g(P0,bt,null),e(bt,Scr),e(bt,wue),e(wue,Rcr),e(bt,Bcr),e(bt,kc),e(kc,Pcr),e(kc,Aue),e(Aue,$cr),e(kc,Icr),e(kc,lX),e(lX,qcr),e(kc,Ncr),e(bt,jcr),e(bt,yue),e(yue,Dcr),e(bt,Gcr),g($0,bt,null),e(Cr,Ocr),e(Cr,Fo),g(I0,Fo,null),e(Fo,Vcr),e(Fo,Lue),e(Lue,Xcr),e(Fo,zcr),e(Fo,Tn),e(Tn,Qcr),e(Tn,xue),e(xue,Wcr),e(Tn,Hcr),e(Tn,kue),e(kue,Ucr),e(Tn,Jcr),e(Tn,Sue),e(Sue,Ycr),e(Tn,Kcr),e(Fo,Zcr),e(Fo,ue),e(ue,_6),e(_6,Rue),e(Rue,efr),e(_6,ofr),e(_6,iX),e(iX,rfr),e(_6,tfr),e(ue,afr),e(ue,u6),e(u6,Bue),e(Bue,nfr),e(u6,sfr),e(u6,dX),e(dX,lfr),e(u6,ifr),e(ue,dfr),e(ue,b6),e(b6,Pue),e(Pue,cfr),e(b6,ffr),e(b6,cX),e(cX,mfr),e(b6,gfr),e(ue,hfr),e(ue,F6),e(F6,$ue),e($ue,pfr),e(F6,_fr),e(F6,fX),e(fX,ufr),e(F6,bfr),e(ue,Ffr),e(ue,v6),e(v6,Iue),e(Iue,vfr),e(v6,Tfr),e(v6,mX),e(mX,Mfr),e(v6,Efr),e(ue,Cfr),e(ue,T6),e(T6,que),e(que,wfr),e(T6,Afr),e(T6,gX),e(gX,yfr),e(T6,Lfr),e(ue,xfr),e(ue,M6),e(M6,Nue),e(Nue,kfr),e(M6,Sfr),e(M6,hX),e(hX,Rfr),e(M6,Bfr),e(ue,Pfr),e(ue,E6),e(E6,jue),e(jue,$fr),e(E6,Ifr),e(E6,pX),e(pX,qfr),e(E6,Nfr),e(ue,jfr),e(ue,C6),e(C6,Due),e(Due,Dfr),e(C6,Gfr),e(C6,_X),e(_X,Ofr),e(C6,Vfr),e(ue,Xfr),e(ue,w6),e(w6,Gue),e(Gue,zfr),e(w6,Qfr),e(w6,uX),e(uX,Wfr),e(w6,Hfr),e(Fo,Ufr),e(Fo,Oue),e(Oue,Jfr),e(Fo,Yfr),g(q0,Fo,null),b(c,eBe,u),b(c,Sc,u),e(Sc,A6),e(A6,Vue),g(N0,Vue,null),e(Sc,Kfr),e(Sc,Xue),e(Xue,Zfr),b(c,oBe,u),b(c,wr,u),g(j0,wr,null),e(wr,emr),e(wr,Rc),e(Rc,omr),e(Rc,bX),e(bX,rmr),e(Rc,tmr),e(Rc,FX),e(FX,amr),e(Rc,nmr),e(wr,smr),e(wr,D0),e(D0,lmr),e(D0,zue),e(zue,imr),e(D0,dmr),e(wr,cmr),e(wr,Ft),g(G0,Ft,null),e(Ft,fmr),e(Ft,Que),e(Que,mmr),e(Ft,gmr),e(Ft,Bc),e(Bc,hmr),e(Bc,Wue),e(Wue,pmr),e(Bc,_mr),e(Bc,vX),e(vX,umr),e(Bc,bmr),e(Ft,Fmr),e(Ft,Hue),e(Hue,vmr),e(Ft,Tmr),g(O0,Ft,null),e(wr,Mmr),e(wr,vo),g(V0,vo,null),e(vo,Emr),e(vo,Uue),e(Uue,Cmr),e(vo,wmr),e(vo,Mn),e(Mn,Amr),e(Mn,Jue),e(Jue,ymr),e(Mn,Lmr),e(Mn,Yue),e(Yue,xmr),e(Mn,kmr),e(Mn,Kue),e(Kue,Smr),e(Mn,Rmr),e(vo,Bmr),e(vo,V),e(V,y6),e(y6,Zue),e(Zue,Pmr),e(y6,$mr),e(y6,TX),e(TX,Imr),e(y6,qmr),e(V,Nmr),e(V,L6),e(L6,e1e),e(e1e,jmr),e(L6,Dmr),e(L6,MX),e(MX,Gmr),e(L6,Omr),e(V,Vmr),e(V,x6),e(x6,o1e),e(o1e,Xmr),e(x6,zmr),e(x6,EX),e(EX,Qmr),e(x6,Wmr),e(V,Hmr),e(V,k6),e(k6,r1e),e(r1e,Umr),e(k6,Jmr),e(k6,CX),e(CX,Ymr),e(k6,Kmr),e(V,Zmr),e(V,S6),e(S6,t1e),e(t1e,egr),e(S6,ogr),e(S6,wX),e(wX,rgr),e(S6,tgr),e(V,agr),e(V,R6),e(R6,a1e),e(a1e,ngr),e(R6,sgr),e(R6,AX),e(AX,lgr),e(R6,igr),e(V,dgr),e(V,B6),e(B6,n1e),e(n1e,cgr),e(B6,fgr),e(B6,yX),e(yX,mgr),e(B6,ggr),e(V,hgr),e(V,P6),e(P6,s1e),e(s1e,pgr),e(P6,_gr),e(P6,LX),e(LX,ugr),e(P6,bgr),e(V,Fgr),e(V,$6),e($6,l1e),e(l1e,vgr),e($6,Tgr),e($6,xX),e(xX,Mgr),e($6,Egr),e(V,Cgr),e(V,I6),e(I6,i1e),e(i1e,wgr),e(I6,Agr),e(I6,kX),e(kX,ygr),e(I6,Lgr),e(V,xgr),e(V,q6),e(q6,d1e),e(d1e,kgr),e(q6,Sgr),e(q6,SX),e(SX,Rgr),e(q6,Bgr),e(V,Pgr),e(V,N6),e(N6,c1e),e(c1e,$gr),e(N6,Igr),e(N6,RX),e(RX,qgr),e(N6,Ngr),e(V,jgr),e(V,j6),e(j6,f1e),e(f1e,Dgr),e(j6,Ggr),e(j6,BX),e(BX,Ogr),e(j6,Vgr),e(V,Xgr),e(V,D6),e(D6,m1e),e(m1e,zgr),e(D6,Qgr),e(D6,PX),e(PX,Wgr),e(D6,Hgr),e(V,Ugr),e(V,G6),e(G6,g1e),e(g1e,Jgr),e(G6,Ygr),e(G6,$X),e($X,Kgr),e(G6,Zgr),e(V,ehr),e(V,O6),e(O6,h1e),e(h1e,ohr),e(O6,rhr),e(O6,IX),e(IX,thr),e(O6,ahr),e(V,nhr),e(V,V6),e(V6,p1e),e(p1e,shr),e(V6,lhr),e(V6,qX),e(qX,ihr),e(V6,dhr),e(V,chr),e(V,X6),e(X6,_1e),e(_1e,fhr),e(X6,mhr),e(X6,NX),e(NX,ghr),e(X6,hhr),e(V,phr),e(V,z6),e(z6,u1e),e(u1e,_hr),e(z6,uhr),e(z6,jX),e(jX,bhr),e(z6,Fhr),e(V,vhr),e(V,Q6),e(Q6,b1e),e(b1e,Thr),e(Q6,Mhr),e(Q6,DX),e(DX,Ehr),e(Q6,Chr),e(V,whr),e(V,W6),e(W6,F1e),e(F1e,Ahr),e(W6,yhr),e(W6,GX),e(GX,Lhr),e(W6,xhr),e(V,khr),e(V,H6),e(H6,v1e),e(v1e,Shr),e(H6,Rhr),e(H6,OX),e(OX,Bhr),e(H6,Phr),e(V,$hr),e(V,U6),e(U6,T1e),e(T1e,Ihr),e(U6,qhr),e(U6,VX),e(VX,Nhr),e(U6,jhr),e(V,Dhr),e(V,J6),e(J6,M1e),e(M1e,Ghr),e(J6,Ohr),e(J6,XX),e(XX,Vhr),e(J6,Xhr),e(V,zhr),e(V,Y6),e(Y6,E1e),e(E1e,Qhr),e(Y6,Whr),e(Y6,zX),e(zX,Hhr),e(Y6,Uhr),e(V,Jhr),e(V,K6),e(K6,C1e),e(C1e,Yhr),e(K6,Khr),e(K6,QX),e(QX,Zhr),e(K6,epr),e(vo,opr),e(vo,w1e),e(w1e,rpr),e(vo,tpr),g(X0,vo,null),b(c,rBe,u),b(c,Pc,u),e(Pc,Z6),e(Z6,A1e),g(z0,A1e,null),e(Pc,apr),e(Pc,y1e),e(y1e,npr),b(c,tBe,u),b(c,Ar,u),g(Q0,Ar,null),e(Ar,spr),e(Ar,$c),e($c,lpr),e($c,WX),e(WX,ipr),e($c,dpr),e($c,HX),e(HX,cpr),e($c,fpr),e(Ar,mpr),e(Ar,W0),e(W0,gpr),e(W0,L1e),e(L1e,hpr),e(W0,ppr),e(Ar,_pr),e(Ar,vt),g(H0,vt,null),e(vt,upr),e(vt,x1e),e(x1e,bpr),e(vt,Fpr),e(vt,Ic),e(Ic,vpr),e(Ic,k1e),e(k1e,Tpr),e(Ic,Mpr),e(Ic,UX),e(UX,Epr),e(Ic,Cpr),e(vt,wpr),e(vt,S1e),e(S1e,Apr),e(vt,ypr),g(U0,vt,null),e(Ar,Lpr),e(Ar,To),g(J0,To,null),e(To,xpr),e(To,R1e),e(R1e,kpr),e(To,Spr),e(To,En),e(En,Rpr),e(En,B1e),e(B1e,Bpr),e(En,Ppr),e(En,P1e),e(P1e,$pr),e(En,Ipr),e(En,$1e),e($1e,qpr),e(En,Npr),e(To,jpr),e(To,ae),e(ae,eT),e(eT,I1e),e(I1e,Dpr),e(eT,Gpr),e(eT,JX),e(JX,Opr),e(eT,Vpr),e(ae,Xpr),e(ae,oT),e(oT,q1e),e(q1e,zpr),e(oT,Qpr),e(oT,YX),e(YX,Wpr),e(oT,Hpr),e(ae,Upr),e(ae,rT),e(rT,N1e),e(N1e,Jpr),e(rT,Ypr),e(rT,KX),e(KX,Kpr),e(rT,Zpr),e(ae,e_r),e(ae,tT),e(tT,j1e),e(j1e,o_r),e(tT,r_r),e(tT,ZX),e(ZX,t_r),e(tT,a_r),e(ae,n_r),e(ae,aT),e(aT,D1e),e(D1e,s_r),e(aT,l_r),e(aT,ez),e(ez,i_r),e(aT,d_r),e(ae,c_r),e(ae,nT),e(nT,G1e),e(G1e,f_r),e(nT,m_r),e(nT,oz),e(oz,g_r),e(nT,h_r),e(ae,p_r),e(ae,sT),e(sT,O1e),e(O1e,__r),e(sT,u_r),e(sT,rz),e(rz,b_r),e(sT,F_r),e(ae,v_r),e(ae,lT),e(lT,V1e),e(V1e,T_r),e(lT,M_r),e(lT,tz),e(tz,E_r),e(lT,C_r),e(ae,w_r),e(ae,iT),e(iT,X1e),e(X1e,A_r),e(iT,y_r),e(iT,az),e(az,L_r),e(iT,x_r),e(ae,k_r),e(ae,dT),e(dT,z1e),e(z1e,S_r),e(dT,R_r),e(dT,nz),e(nz,B_r),e(dT,P_r),e(ae,$_r),e(ae,cT),e(cT,Q1e),e(Q1e,I_r),e(cT,q_r),e(cT,sz),e(sz,N_r),e(cT,j_r),e(ae,D_r),e(ae,fT),e(fT,W1e),e(W1e,G_r),e(fT,O_r),e(fT,lz),e(lz,V_r),e(fT,X_r),e(ae,z_r),e(ae,mT),e(mT,H1e),e(H1e,Q_r),e(mT,W_r),e(mT,iz),e(iz,H_r),e(mT,U_r),e(ae,J_r),e(ae,gT),e(gT,U1e),e(U1e,Y_r),e(gT,K_r),e(gT,dz),e(dz,Z_r),e(gT,eur),e(ae,our),e(ae,hT),e(hT,J1e),e(J1e,rur),e(hT,tur),e(hT,cz),e(cz,aur),e(hT,nur),e(ae,sur),e(ae,pT),e(pT,Y1e),e(Y1e,lur),e(pT,iur),e(pT,fz),e(fz,dur),e(pT,cur),e(ae,fur),e(ae,_T),e(_T,K1e),e(K1e,mur),e(_T,gur),e(_T,mz),e(mz,hur),e(_T,pur),e(To,_ur),e(To,Z1e),e(Z1e,uur),e(To,bur),g(Y0,To,null),b(c,aBe,u),b(c,qc,u),e(qc,uT),e(uT,ebe),g(K0,ebe,null),e(qc,Fur),e(qc,obe),e(obe,vur),b(c,nBe,u),b(c,yr,u),g(Z0,yr,null),e(yr,Tur),e(yr,Nc),e(Nc,Mur),e(Nc,gz),e(gz,Eur),e(Nc,Cur),e(Nc,hz),e(hz,wur),e(Nc,Aur),e(yr,yur),e(yr,ey),e(ey,Lur),e(ey,rbe),e(rbe,xur),e(ey,kur),e(yr,Sur),e(yr,Tt),g(oy,Tt,null),e(Tt,Rur),e(Tt,tbe),e(tbe,Bur),e(Tt,Pur),e(Tt,jc),e(jc,$ur),e(jc,abe),e(abe,Iur),e(jc,qur),e(jc,pz),e(pz,Nur),e(jc,jur),e(Tt,Dur),e(Tt,nbe),e(nbe,Gur),e(Tt,Our),g(ry,Tt,null),e(yr,Vur),e(yr,Mo),g(ty,Mo,null),e(Mo,Xur),e(Mo,sbe),e(sbe,zur),e(Mo,Qur),e(Mo,Cn),e(Cn,Wur),e(Cn,lbe),e(lbe,Hur),e(Cn,Uur),e(Cn,ibe),e(ibe,Jur),e(Cn,Yur),e(Cn,dbe),e(dbe,Kur),e(Cn,Zur),e(Mo,e1r),e(Mo,cbe),e(cbe,bT),e(bT,fbe),e(fbe,o1r),e(bT,r1r),e(bT,_z),e(_z,t1r),e(bT,a1r),e(Mo,n1r),e(Mo,mbe),e(mbe,s1r),e(Mo,l1r),g(ay,Mo,null),b(c,sBe,u),b(c,Dc,u),e(Dc,FT),e(FT,gbe),g(ny,gbe,null),e(Dc,i1r),e(Dc,hbe),e(hbe,d1r),b(c,lBe,u),b(c,Lr,u),g(sy,Lr,null),e(Lr,c1r),e(Lr,Gc),e(Gc,f1r),e(Gc,uz),e(uz,m1r),e(Gc,g1r),e(Gc,bz),e(bz,h1r),e(Gc,p1r),e(Lr,_1r),e(Lr,ly),e(ly,u1r),e(ly,pbe),e(pbe,b1r),e(ly,F1r),e(Lr,v1r),e(Lr,Mt),g(iy,Mt,null),e(Mt,T1r),e(Mt,_be),e(_be,M1r),e(Mt,E1r),e(Mt,Oc),e(Oc,C1r),e(Oc,ube),e(ube,w1r),e(Oc,A1r),e(Oc,Fz),e(Fz,y1r),e(Oc,L1r),e(Mt,x1r),e(Mt,bbe),e(bbe,k1r),e(Mt,S1r),g(dy,Mt,null),e(Lr,R1r),e(Lr,Eo),g(cy,Eo,null),e(Eo,B1r),e(Eo,Fbe),e(Fbe,P1r),e(Eo,$1r),e(Eo,wn),e(wn,I1r),e(wn,vbe),e(vbe,q1r),e(wn,N1r),e(wn,Tbe),e(Tbe,j1r),e(wn,D1r),e(wn,Mbe),e(Mbe,G1r),e(wn,O1r),e(Eo,V1r),e(Eo,Y),e(Y,vT),e(vT,Ebe),e(Ebe,X1r),e(vT,z1r),e(vT,vz),e(vz,Q1r),e(vT,W1r),e(Y,H1r),e(Y,TT),e(TT,Cbe),e(Cbe,U1r),e(TT,J1r),e(TT,Tz),e(Tz,Y1r),e(TT,K1r),e(Y,Z1r),e(Y,MT),e(MT,wbe),e(wbe,ebr),e(MT,obr),e(MT,Mz),e(Mz,rbr),e(MT,tbr),e(Y,abr),e(Y,ET),e(ET,Abe),e(Abe,nbr),e(ET,sbr),e(ET,Ez),e(Ez,lbr),e(ET,ibr),e(Y,dbr),e(Y,CT),e(CT,ybe),e(ybe,cbr),e(CT,fbr),e(CT,Cz),e(Cz,mbr),e(CT,gbr),e(Y,hbr),e(Y,wT),e(wT,Lbe),e(Lbe,pbr),e(wT,_br),e(wT,wz),e(wz,ubr),e(wT,bbr),e(Y,Fbr),e(Y,AT),e(AT,xbe),e(xbe,vbr),e(AT,Tbr),e(AT,Az),e(Az,Mbr),e(AT,Ebr),e(Y,Cbr),e(Y,yT),e(yT,kbe),e(kbe,wbr),e(yT,Abr),e(yT,yz),e(yz,ybr),e(yT,Lbr),e(Y,xbr),e(Y,LT),e(LT,Sbe),e(Sbe,kbr),e(LT,Sbr),e(LT,Lz),e(Lz,Rbr),e(LT,Bbr),e(Y,Pbr),e(Y,xT),e(xT,Rbe),e(Rbe,$br),e(xT,Ibr),e(xT,xz),e(xz,qbr),e(xT,Nbr),e(Y,jbr),e(Y,kT),e(kT,Bbe),e(Bbe,Dbr),e(kT,Gbr),e(kT,kz),e(kz,Obr),e(kT,Vbr),e(Y,Xbr),e(Y,ST),e(ST,Pbe),e(Pbe,zbr),e(ST,Qbr),e(ST,Sz),e(Sz,Wbr),e(ST,Hbr),e(Y,Ubr),e(Y,RT),e(RT,$be),e($be,Jbr),e(RT,Ybr),e(RT,Rz),e(Rz,Kbr),e(RT,Zbr),e(Y,e5r),e(Y,BT),e(BT,Ibe),e(Ibe,o5r),e(BT,r5r),e(BT,Bz),e(Bz,t5r),e(BT,a5r),e(Y,n5r),e(Y,PT),e(PT,qbe),e(qbe,s5r),e(PT,l5r),e(PT,Pz),e(Pz,i5r),e(PT,d5r),e(Y,c5r),e(Y,$T),e($T,Nbe),e(Nbe,f5r),e($T,m5r),e($T,$z),e($z,g5r),e($T,h5r),e(Y,p5r),e(Y,IT),e(IT,jbe),e(jbe,_5r),e(IT,u5r),e(IT,Iz),e(Iz,b5r),e(IT,F5r),e(Y,v5r),e(Y,qT),e(qT,Dbe),e(Dbe,T5r),e(qT,M5r),e(qT,qz),e(qz,E5r),e(qT,C5r),e(Y,w5r),e(Y,NT),e(NT,Gbe),e(Gbe,A5r),e(NT,y5r),e(NT,Nz),e(Nz,L5r),e(NT,x5r),e(Y,k5r),e(Y,jT),e(jT,Obe),e(Obe,S5r),e(jT,R5r),e(jT,jz),e(jz,B5r),e(jT,P5r),e(Eo,$5r),e(Eo,Vbe),e(Vbe,I5r),e(Eo,q5r),g(fy,Eo,null),b(c,iBe,u),b(c,Vc,u),e(Vc,DT),e(DT,Xbe),g(my,Xbe,null),e(Vc,N5r),e(Vc,zbe),e(zbe,j5r),b(c,dBe,u),b(c,xr,u),g(gy,xr,null),e(xr,D5r),e(xr,Xc),e(Xc,G5r),e(Xc,Dz),e(Dz,O5r),e(Xc,V5r),e(Xc,Gz),e(Gz,X5r),e(Xc,z5r),e(xr,Q5r),e(xr,hy),e(hy,W5r),e(hy,Qbe),e(Qbe,H5r),e(hy,U5r),e(xr,J5r),e(xr,Et),g(py,Et,null),e(Et,Y5r),e(Et,Wbe),e(Wbe,K5r),e(Et,Z5r),e(Et,zc),e(zc,e3r),e(zc,Hbe),e(Hbe,o3r),e(zc,r3r),e(zc,Oz),e(Oz,t3r),e(zc,a3r),e(Et,n3r),e(Et,Ube),e(Ube,s3r),e(Et,l3r),g(_y,Et,null),e(xr,i3r),e(xr,Co),g(uy,Co,null),e(Co,d3r),e(Co,Jbe),e(Jbe,c3r),e(Co,f3r),e(Co,An),e(An,m3r),e(An,Ybe),e(Ybe,g3r),e(An,h3r),e(An,Kbe),e(Kbe,p3r),e(An,_3r),e(An,Zbe),e(Zbe,u3r),e(An,b3r),e(Co,F3r),e(Co,K),e(K,GT),e(GT,e5e),e(e5e,v3r),e(GT,T3r),e(GT,Vz),e(Vz,M3r),e(GT,E3r),e(K,C3r),e(K,OT),e(OT,o5e),e(o5e,w3r),e(OT,A3r),e(OT,Xz),e(Xz,y3r),e(OT,L3r),e(K,x3r),e(K,VT),e(VT,r5e),e(r5e,k3r),e(VT,S3r),e(VT,zz),e(zz,R3r),e(VT,B3r),e(K,P3r),e(K,XT),e(XT,t5e),e(t5e,$3r),e(XT,I3r),e(XT,Qz),e(Qz,q3r),e(XT,N3r),e(K,j3r),e(K,zT),e(zT,a5e),e(a5e,D3r),e(zT,G3r),e(zT,Wz),e(Wz,O3r),e(zT,V3r),e(K,X3r),e(K,QT),e(QT,n5e),e(n5e,z3r),e(QT,Q3r),e(QT,Hz),e(Hz,W3r),e(QT,H3r),e(K,U3r),e(K,WT),e(WT,s5e),e(s5e,J3r),e(WT,Y3r),e(WT,Uz),e(Uz,K3r),e(WT,Z3r),e(K,e2r),e(K,HT),e(HT,l5e),e(l5e,o2r),e(HT,r2r),e(HT,Jz),e(Jz,t2r),e(HT,a2r),e(K,n2r),e(K,UT),e(UT,i5e),e(i5e,s2r),e(UT,l2r),e(UT,Yz),e(Yz,i2r),e(UT,d2r),e(K,c2r),e(K,JT),e(JT,d5e),e(d5e,f2r),e(JT,m2r),e(JT,Kz),e(Kz,g2r),e(JT,h2r),e(K,p2r),e(K,YT),e(YT,c5e),e(c5e,_2r),e(YT,u2r),e(YT,Zz),e(Zz,b2r),e(YT,F2r),e(K,v2r),e(K,KT),e(KT,f5e),e(f5e,T2r),e(KT,M2r),e(KT,eQ),e(eQ,E2r),e(KT,C2r),e(K,w2r),e(K,ZT),e(ZT,m5e),e(m5e,A2r),e(ZT,y2r),e(ZT,oQ),e(oQ,L2r),e(ZT,x2r),e(K,k2r),e(K,e7),e(e7,g5e),e(g5e,S2r),e(e7,R2r),e(e7,rQ),e(rQ,B2r),e(e7,P2r),e(K,$2r),e(K,o7),e(o7,h5e),e(h5e,I2r),e(o7,q2r),e(o7,tQ),e(tQ,N2r),e(o7,j2r),e(K,D2r),e(K,r7),e(r7,p5e),e(p5e,G2r),e(r7,O2r),e(r7,aQ),e(aQ,V2r),e(r7,X2r),e(K,z2r),e(K,t7),e(t7,_5e),e(_5e,Q2r),e(t7,W2r),e(t7,nQ),e(nQ,H2r),e(t7,U2r),e(K,J2r),e(K,a7),e(a7,u5e),e(u5e,Y2r),e(a7,K2r),e(a7,sQ),e(sQ,Z2r),e(a7,eFr),e(K,oFr),e(K,n7),e(n7,b5e),e(b5e,rFr),e(n7,tFr),e(n7,lQ),e(lQ,aFr),e(n7,nFr),e(K,sFr),e(K,s7),e(s7,F5e),e(F5e,lFr),e(s7,iFr),e(s7,iQ),e(iQ,dFr),e(s7,cFr),e(Co,fFr),e(Co,v5e),e(v5e,mFr),e(Co,gFr),g(by,Co,null),b(c,cBe,u),b(c,Qc,u),e(Qc,l7),e(l7,T5e),g(Fy,T5e,null),e(Qc,hFr),e(Qc,M5e),e(M5e,pFr),b(c,fBe,u),b(c,kr,u),g(vy,kr,null),e(kr,_Fr),e(kr,Wc),e(Wc,uFr),e(Wc,dQ),e(dQ,bFr),e(Wc,FFr),e(Wc,cQ),e(cQ,vFr),e(Wc,TFr),e(kr,MFr),e(kr,Ty),e(Ty,EFr),e(Ty,E5e),e(E5e,CFr),e(Ty,wFr),e(kr,AFr),e(kr,Ct),g(My,Ct,null),e(Ct,yFr),e(Ct,C5e),e(C5e,LFr),e(Ct,xFr),e(Ct,Hc),e(Hc,kFr),e(Hc,w5e),e(w5e,SFr),e(Hc,RFr),e(Hc,fQ),e(fQ,BFr),e(Hc,PFr),e(Ct,$Fr),e(Ct,A5e),e(A5e,IFr),e(Ct,qFr),g(Ey,Ct,null),e(kr,NFr),e(kr,wo),g(Cy,wo,null),e(wo,jFr),e(wo,y5e),e(y5e,DFr),e(wo,GFr),e(wo,yn),e(yn,OFr),e(yn,L5e),e(L5e,VFr),e(yn,XFr),e(yn,x5e),e(x5e,zFr),e(yn,QFr),e(yn,k5e),e(k5e,WFr),e(yn,HFr),e(wo,UFr),e(wo,S5e),e(S5e,i7),e(i7,R5e),e(R5e,JFr),e(i7,YFr),e(i7,mQ),e(mQ,KFr),e(i7,ZFr),e(wo,evr),e(wo,B5e),e(B5e,ovr),e(wo,rvr),g(wy,wo,null),b(c,mBe,u),b(c,Uc,u),e(Uc,d7),e(d7,P5e),g(Ay,P5e,null),e(Uc,tvr),e(Uc,$5e),e($5e,avr),b(c,gBe,u),b(c,Sr,u),g(yy,Sr,null),e(Sr,nvr),e(Sr,Jc),e(Jc,svr),e(Jc,gQ),e(gQ,lvr),e(Jc,ivr),e(Jc,hQ),e(hQ,dvr),e(Jc,cvr),e(Sr,fvr),e(Sr,Ly),e(Ly,mvr),e(Ly,I5e),e(I5e,gvr),e(Ly,hvr),e(Sr,pvr),e(Sr,wt),g(xy,wt,null),e(wt,_vr),e(wt,q5e),e(q5e,uvr),e(wt,bvr),e(wt,Yc),e(Yc,Fvr),e(Yc,N5e),e(N5e,vvr),e(Yc,Tvr),e(Yc,pQ),e(pQ,Mvr),e(Yc,Evr),e(wt,Cvr),e(wt,j5e),e(j5e,wvr),e(wt,Avr),g(ky,wt,null),e(Sr,yvr),e(Sr,Ao),g(Sy,Ao,null),e(Ao,Lvr),e(Ao,D5e),e(D5e,xvr),e(Ao,kvr),e(Ao,Ln),e(Ln,Svr),e(Ln,G5e),e(G5e,Rvr),e(Ln,Bvr),e(Ln,O5e),e(O5e,Pvr),e(Ln,$vr),e(Ln,V5e),e(V5e,Ivr),e(Ln,qvr),e(Ao,Nvr),e(Ao,X5e),e(X5e,c7),e(c7,z5e),e(z5e,jvr),e(c7,Dvr),e(c7,_Q),e(_Q,Gvr),e(c7,Ovr),e(Ao,Vvr),e(Ao,Q5e),e(Q5e,Xvr),e(Ao,zvr),g(Ry,Ao,null),b(c,hBe,u),b(c,Kc,u),e(Kc,f7),e(f7,W5e),g(By,W5e,null),e(Kc,Qvr),e(Kc,H5e),e(H5e,Wvr),b(c,pBe,u),b(c,Rr,u),g(Py,Rr,null),e(Rr,Hvr),e(Rr,Zc),e(Zc,Uvr),e(Zc,uQ),e(uQ,Jvr),e(Zc,Yvr),e(Zc,bQ),e(bQ,Kvr),e(Zc,Zvr),e(Rr,e6r),e(Rr,$y),e($y,o6r),e($y,U5e),e(U5e,r6r),e($y,t6r),e(Rr,a6r),e(Rr,At),g(Iy,At,null),e(At,n6r),e(At,J5e),e(J5e,s6r),e(At,l6r),e(At,ef),e(ef,i6r),e(ef,Y5e),e(Y5e,d6r),e(ef,c6r),e(ef,FQ),e(FQ,f6r),e(ef,m6r),e(At,g6r),e(At,K5e),e(K5e,h6r),e(At,p6r),g(qy,At,null),e(Rr,_6r),e(Rr,yo),g(Ny,yo,null),e(yo,u6r),e(yo,Z5e),e(Z5e,b6r),e(yo,F6r),e(yo,xn),e(xn,v6r),e(xn,e3e),e(e3e,T6r),e(xn,M6r),e(xn,o3e),e(o3e,E6r),e(xn,C6r),e(xn,r3e),e(r3e,w6r),e(xn,A6r),e(yo,y6r),e(yo,z),e(z,m7),e(m7,t3e),e(t3e,L6r),e(m7,x6r),e(m7,vQ),e(vQ,k6r),e(m7,S6r),e(z,R6r),e(z,g7),e(g7,a3e),e(a3e,B6r),e(g7,P6r),e(g7,TQ),e(TQ,$6r),e(g7,I6r),e(z,q6r),e(z,h7),e(h7,n3e),e(n3e,N6r),e(h7,j6r),e(h7,MQ),e(MQ,D6r),e(h7,G6r),e(z,O6r),e(z,p7),e(p7,s3e),e(s3e,V6r),e(p7,X6r),e(p7,EQ),e(EQ,z6r),e(p7,Q6r),e(z,W6r),e(z,_7),e(_7,l3e),e(l3e,H6r),e(_7,U6r),e(_7,CQ),e(CQ,J6r),e(_7,Y6r),e(z,K6r),e(z,u7),e(u7,i3e),e(i3e,Z6r),e(u7,eTr),e(u7,wQ),e(wQ,oTr),e(u7,rTr),e(z,tTr),e(z,b7),e(b7,d3e),e(d3e,aTr),e(b7,nTr),e(b7,AQ),e(AQ,sTr),e(b7,lTr),e(z,iTr),e(z,F7),e(F7,c3e),e(c3e,dTr),e(F7,cTr),e(F7,yQ),e(yQ,fTr),e(F7,mTr),e(z,gTr),e(z,v7),e(v7,f3e),e(f3e,hTr),e(v7,pTr),e(v7,LQ),e(LQ,_Tr),e(v7,uTr),e(z,bTr),e(z,T7),e(T7,m3e),e(m3e,FTr),e(T7,vTr),e(T7,xQ),e(xQ,TTr),e(T7,MTr),e(z,ETr),e(z,M7),e(M7,g3e),e(g3e,CTr),e(M7,wTr),e(M7,kQ),e(kQ,ATr),e(M7,yTr),e(z,LTr),e(z,E7),e(E7,h3e),e(h3e,xTr),e(E7,kTr),e(E7,SQ),e(SQ,STr),e(E7,RTr),e(z,BTr),e(z,C7),e(C7,p3e),e(p3e,PTr),e(C7,$Tr),e(C7,RQ),e(RQ,ITr),e(C7,qTr),e(z,NTr),e(z,w7),e(w7,_3e),e(_3e,jTr),e(w7,DTr),e(w7,BQ),e(BQ,GTr),e(w7,OTr),e(z,VTr),e(z,A7),e(A7,u3e),e(u3e,XTr),e(A7,zTr),e(A7,PQ),e(PQ,QTr),e(A7,WTr),e(z,HTr),e(z,y7),e(y7,b3e),e(b3e,UTr),e(y7,JTr),e(y7,$Q),e($Q,YTr),e(y7,KTr),e(z,ZTr),e(z,L7),e(L7,F3e),e(F3e,e7r),e(L7,o7r),e(L7,IQ),e(IQ,r7r),e(L7,t7r),e(z,a7r),e(z,x7),e(x7,v3e),e(v3e,n7r),e(x7,s7r),e(x7,qQ),e(qQ,l7r),e(x7,i7r),e(z,d7r),e(z,k7),e(k7,T3e),e(T3e,c7r),e(k7,f7r),e(k7,NQ),e(NQ,m7r),e(k7,g7r),e(z,h7r),e(z,S7),e(S7,M3e),e(M3e,p7r),e(S7,_7r),e(S7,jQ),e(jQ,u7r),e(S7,b7r),e(z,F7r),e(z,R7),e(R7,E3e),e(E3e,v7r),e(R7,T7r),e(R7,DQ),e(DQ,M7r),e(R7,E7r),e(z,C7r),e(z,B7),e(B7,C3e),e(C3e,w7r),e(B7,A7r),e(B7,GQ),e(GQ,y7r),e(B7,L7r),e(z,x7r),e(z,P7),e(P7,w3e),e(w3e,k7r),e(P7,S7r),e(P7,OQ),e(OQ,R7r),e(P7,B7r),e(z,P7r),e(z,$7),e($7,A3e),e(A3e,$7r),e($7,I7r),e($7,VQ),e(VQ,q7r),e($7,N7r),e(z,j7r),e(z,I7),e(I7,y3e),e(y3e,D7r),e(I7,G7r),e(I7,XQ),e(XQ,O7r),e(I7,V7r),e(yo,X7r),e(yo,L3e),e(L3e,z7r),e(yo,Q7r),g(jy,yo,null),b(c,_Be,u),b(c,of,u),e(of,q7),e(q7,x3e),g(Dy,x3e,null),e(of,W7r),e(of,k3e),e(k3e,H7r),b(c,uBe,u),b(c,Br,u),g(Gy,Br,null),e(Br,U7r),e(Br,rf),e(rf,J7r),e(rf,zQ),e(zQ,Y7r),e(rf,K7r),e(rf,QQ),e(QQ,Z7r),e(rf,eMr),e(Br,oMr),e(Br,Oy),e(Oy,rMr),e(Oy,S3e),e(S3e,tMr),e(Oy,aMr),e(Br,nMr),e(Br,yt),g(Vy,yt,null),e(yt,sMr),e(yt,R3e),e(R3e,lMr),e(yt,iMr),e(yt,tf),e(tf,dMr),e(tf,B3e),e(B3e,cMr),e(tf,fMr),e(tf,WQ),e(WQ,mMr),e(tf,gMr),e(yt,hMr),e(yt,P3e),e(P3e,pMr),e(yt,_Mr),g(Xy,yt,null),e(Br,uMr),e(Br,Lo),g(zy,Lo,null),e(Lo,bMr),e(Lo,$3e),e($3e,FMr),e(Lo,vMr),e(Lo,kn),e(kn,TMr),e(kn,I3e),e(I3e,MMr),e(kn,EMr),e(kn,q3e),e(q3e,CMr),e(kn,wMr),e(kn,N3e),e(N3e,AMr),e(kn,yMr),e(Lo,LMr),e(Lo,ca),e(ca,N7),e(N7,j3e),e(j3e,xMr),e(N7,kMr),e(N7,HQ),e(HQ,SMr),e(N7,RMr),e(ca,BMr),e(ca,j7),e(j7,D3e),e(D3e,PMr),e(j7,$Mr),e(j7,UQ),e(UQ,IMr),e(j7,qMr),e(ca,NMr),e(ca,D7),e(D7,G3e),e(G3e,jMr),e(D7,DMr),e(D7,JQ),e(JQ,GMr),e(D7,OMr),e(ca,VMr),e(ca,G7),e(G7,O3e),e(O3e,XMr),e(G7,zMr),e(G7,YQ),e(YQ,QMr),e(G7,WMr),e(ca,HMr),e(ca,O7),e(O7,V3e),e(V3e,UMr),e(O7,JMr),e(O7,KQ),e(KQ,YMr),e(O7,KMr),e(Lo,ZMr),e(Lo,X3e),e(X3e,e4r),e(Lo,o4r),g(Qy,Lo,null),b(c,bBe,u),b(c,af,u),e(af,V7),e(V7,z3e),g(Wy,z3e,null),e(af,r4r),e(af,Q3e),e(Q3e,t4r),b(c,FBe,u),b(c,Pr,u),g(Hy,Pr,null),e(Pr,a4r),e(Pr,nf),e(nf,n4r),e(nf,ZQ),e(ZQ,s4r),e(nf,l4r),e(nf,eW),e(eW,i4r),e(nf,d4r),e(Pr,c4r),e(Pr,Uy),e(Uy,f4r),e(Uy,W3e),e(W3e,m4r),e(Uy,g4r),e(Pr,h4r),e(Pr,Lt),g(Jy,Lt,null),e(Lt,p4r),e(Lt,H3e),e(H3e,_4r),e(Lt,u4r),e(Lt,sf),e(sf,b4r),e(sf,U3e),e(U3e,F4r),e(sf,v4r),e(sf,oW),e(oW,T4r),e(sf,M4r),e(Lt,E4r),e(Lt,J3e),e(J3e,C4r),e(Lt,w4r),g(Yy,Lt,null),e(Pr,A4r),e(Pr,xo),g(Ky,xo,null),e(xo,y4r),e(xo,Y3e),e(Y3e,L4r),e(xo,x4r),e(xo,Sn),e(Sn,k4r),e(Sn,K3e),e(K3e,S4r),e(Sn,R4r),e(Sn,Z3e),e(Z3e,B4r),e(Sn,P4r),e(Sn,e2e),e(e2e,$4r),e(Sn,I4r),e(xo,q4r),e(xo,fe),e(fe,X7),e(X7,o2e),e(o2e,N4r),e(X7,j4r),e(X7,rW),e(rW,D4r),e(X7,G4r),e(fe,O4r),e(fe,z7),e(z7,r2e),e(r2e,V4r),e(z7,X4r),e(z7,tW),e(tW,z4r),e(z7,Q4r),e(fe,W4r),e(fe,Q7),e(Q7,t2e),e(t2e,H4r),e(Q7,U4r),e(Q7,aW),e(aW,J4r),e(Q7,Y4r),e(fe,K4r),e(fe,W7),e(W7,a2e),e(a2e,Z4r),e(W7,eEr),e(W7,nW),e(nW,oEr),e(W7,rEr),e(fe,tEr),e(fe,H7),e(H7,n2e),e(n2e,aEr),e(H7,nEr),e(H7,sW),e(sW,sEr),e(H7,lEr),e(fe,iEr),e(fe,U7),e(U7,s2e),e(s2e,dEr),e(U7,cEr),e(U7,lW),e(lW,fEr),e(U7,mEr),e(fe,gEr),e(fe,J7),e(J7,l2e),e(l2e,hEr),e(J7,pEr),e(J7,iW),e(iW,_Er),e(J7,uEr),e(fe,bEr),e(fe,Y7),e(Y7,i2e),e(i2e,FEr),e(Y7,vEr),e(Y7,dW),e(dW,TEr),e(Y7,MEr),e(fe,EEr),e(fe,K7),e(K7,d2e),e(d2e,CEr),e(K7,wEr),e(K7,cW),e(cW,AEr),e(K7,yEr),e(fe,LEr),e(fe,Z7),e(Z7,c2e),e(c2e,xEr),e(Z7,kEr),e(Z7,fW),e(fW,SEr),e(Z7,REr),e(fe,BEr),e(fe,eM),e(eM,f2e),e(f2e,PEr),e(eM,$Er),e(eM,mW),e(mW,IEr),e(eM,qEr),e(fe,NEr),e(fe,oM),e(oM,m2e),e(m2e,jEr),e(oM,DEr),e(oM,gW),e(gW,GEr),e(oM,OEr),e(xo,VEr),e(xo,g2e),e(g2e,XEr),e(xo,zEr),g(Zy,xo,null),b(c,vBe,u),b(c,lf,u),e(lf,rM),e(rM,h2e),g(eL,h2e,null),e(lf,QEr),e(lf,p2e),e(p2e,WEr),b(c,TBe,u),b(c,$r,u),g(oL,$r,null),e($r,HEr),e($r,df),e(df,UEr),e(df,hW),e(hW,JEr),e(df,YEr),e(df,pW),e(pW,KEr),e(df,ZEr),e($r,eCr),e($r,rL),e(rL,oCr),e(rL,_2e),e(_2e,rCr),e(rL,tCr),e($r,aCr),e($r,xt),g(tL,xt,null),e(xt,nCr),e(xt,u2e),e(u2e,sCr),e(xt,lCr),e(xt,cf),e(cf,iCr),e(cf,b2e),e(b2e,dCr),e(cf,cCr),e(cf,_W),e(_W,fCr),e(cf,mCr),e(xt,gCr),e(xt,F2e),e(F2e,hCr),e(xt,pCr),g(aL,xt,null),e($r,_Cr),e($r,ko),g(nL,ko,null),e(ko,uCr),e(ko,v2e),e(v2e,bCr),e(ko,FCr),e(ko,Rn),e(Rn,vCr),e(Rn,T2e),e(T2e,TCr),e(Rn,MCr),e(Rn,M2e),e(M2e,ECr),e(Rn,CCr),e(Rn,E2e),e(E2e,wCr),e(Rn,ACr),e(ko,yCr),e(ko,be),e(be,tM),e(tM,C2e),e(C2e,LCr),e(tM,xCr),e(tM,uW),e(uW,kCr),e(tM,SCr),e(be,RCr),e(be,aM),e(aM,w2e),e(w2e,BCr),e(aM,PCr),e(aM,bW),e(bW,$Cr),e(aM,ICr),e(be,qCr),e(be,nM),e(nM,A2e),e(A2e,NCr),e(nM,jCr),e(nM,FW),e(FW,DCr),e(nM,GCr),e(be,OCr),e(be,sM),e(sM,y2e),e(y2e,VCr),e(sM,XCr),e(sM,vW),e(vW,zCr),e(sM,QCr),e(be,WCr),e(be,lM),e(lM,L2e),e(L2e,HCr),e(lM,UCr),e(lM,TW),e(TW,JCr),e(lM,YCr),e(be,KCr),e(be,iM),e(iM,x2e),e(x2e,ZCr),e(iM,ewr),e(iM,MW),e(MW,owr),e(iM,rwr),e(be,twr),e(be,dM),e(dM,k2e),e(k2e,awr),e(dM,nwr),e(dM,EW),e(EW,swr),e(dM,lwr),e(be,iwr),e(be,cM),e(cM,S2e),e(S2e,dwr),e(cM,cwr),e(cM,CW),e(CW,fwr),e(cM,mwr),e(be,gwr),e(be,fM),e(fM,R2e),e(R2e,hwr),e(fM,pwr),e(fM,wW),e(wW,_wr),e(fM,uwr),e(be,bwr),e(be,mM),e(mM,B2e),e(B2e,Fwr),e(mM,vwr),e(mM,AW),e(AW,Twr),e(mM,Mwr),e(ko,Ewr),e(ko,P2e),e(P2e,Cwr),e(ko,wwr),g(sL,ko,null),b(c,MBe,u),b(c,ff,u),e(ff,gM),e(gM,$2e),g(lL,$2e,null),e(ff,Awr),e(ff,I2e),e(I2e,ywr),b(c,EBe,u),b(c,Ir,u),g(iL,Ir,null),e(Ir,Lwr),e(Ir,mf),e(mf,xwr),e(mf,yW),e(yW,kwr),e(mf,Swr),e(mf,LW),e(LW,Rwr),e(mf,Bwr),e(Ir,Pwr),e(Ir,dL),e(dL,$wr),e(dL,q2e),e(q2e,Iwr),e(dL,qwr),e(Ir,Nwr),e(Ir,kt),g(cL,kt,null),e(kt,jwr),e(kt,N2e),e(N2e,Dwr),e(kt,Gwr),e(kt,gf),e(gf,Owr),e(gf,j2e),e(j2e,Vwr),e(gf,Xwr),e(gf,xW),e(xW,zwr),e(gf,Qwr),e(kt,Wwr),e(kt,D2e),e(D2e,Hwr),e(kt,Uwr),g(fL,kt,null),e(Ir,Jwr),e(Ir,So),g(mL,So,null),e(So,Ywr),e(So,G2e),e(G2e,Kwr),e(So,Zwr),e(So,Bn),e(Bn,eAr),e(Bn,O2e),e(O2e,oAr),e(Bn,rAr),e(Bn,V2e),e(V2e,tAr),e(Bn,aAr),e(Bn,X2e),e(X2e,nAr),e(Bn,sAr),e(So,lAr),e(So,Ee),e(Ee,hM),e(hM,z2e),e(z2e,iAr),e(hM,dAr),e(hM,kW),e(kW,cAr),e(hM,fAr),e(Ee,mAr),e(Ee,pM),e(pM,Q2e),e(Q2e,gAr),e(pM,hAr),e(pM,SW),e(SW,pAr),e(pM,_Ar),e(Ee,uAr),e(Ee,_M),e(_M,W2e),e(W2e,bAr),e(_M,FAr),e(_M,RW),e(RW,vAr),e(_M,TAr),e(Ee,MAr),e(Ee,uM),e(uM,H2e),e(H2e,EAr),e(uM,CAr),e(uM,BW),e(BW,wAr),e(uM,AAr),e(Ee,yAr),e(Ee,bM),e(bM,U2e),e(U2e,LAr),e(bM,xAr),e(bM,PW),e(PW,kAr),e(bM,SAr),e(Ee,RAr),e(Ee,FM),e(FM,J2e),e(J2e,BAr),e(FM,PAr),e(FM,$W),e($W,$Ar),e(FM,IAr),e(Ee,qAr),e(Ee,vM),e(vM,Y2e),e(Y2e,NAr),e(vM,jAr),e(vM,IW),e(IW,DAr),e(vM,GAr),e(Ee,OAr),e(Ee,TM),e(TM,K2e),e(K2e,VAr),e(TM,XAr),e(TM,qW),e(qW,zAr),e(TM,QAr),e(Ee,WAr),e(Ee,MM),e(MM,Z2e),e(Z2e,HAr),e(MM,UAr),e(MM,NW),e(NW,JAr),e(MM,YAr),e(So,KAr),e(So,eFe),e(eFe,ZAr),e(So,e0r),g(gL,So,null),b(c,CBe,u),b(c,hf,u),e(hf,EM),e(EM,oFe),g(hL,oFe,null),e(hf,o0r),e(hf,rFe),e(rFe,r0r),b(c,wBe,u),b(c,qr,u),g(pL,qr,null),e(qr,t0r),e(qr,pf),e(pf,a0r),e(pf,jW),e(jW,n0r),e(pf,s0r),e(pf,DW),e(DW,l0r),e(pf,i0r),e(qr,d0r),e(qr,_L),e(_L,c0r),e(_L,tFe),e(tFe,f0r),e(_L,m0r),e(qr,g0r),e(qr,St),g(uL,St,null),e(St,h0r),e(St,aFe),e(aFe,p0r),e(St,_0r),e(St,_f),e(_f,u0r),e(_f,nFe),e(nFe,b0r),e(_f,F0r),e(_f,GW),e(GW,v0r),e(_f,T0r),e(St,M0r),e(St,sFe),e(sFe,E0r),e(St,C0r),g(bL,St,null),e(qr,w0r),e(qr,Ro),g(FL,Ro,null),e(Ro,A0r),e(Ro,lFe),e(lFe,y0r),e(Ro,L0r),e(Ro,Pn),e(Pn,x0r),e(Pn,iFe),e(iFe,k0r),e(Pn,S0r),e(Pn,dFe),e(dFe,R0r),e(Pn,B0r),e(Pn,cFe),e(cFe,P0r),e(Pn,$0r),e(Ro,I0r),e(Ro,Fe),e(Fe,CM),e(CM,fFe),e(fFe,q0r),e(CM,N0r),e(CM,OW),e(OW,j0r),e(CM,D0r),e(Fe,G0r),e(Fe,wM),e(wM,mFe),e(mFe,O0r),e(wM,V0r),e(wM,VW),e(VW,X0r),e(wM,z0r),e(Fe,Q0r),e(Fe,AM),e(AM,gFe),e(gFe,W0r),e(AM,H0r),e(AM,XW),e(XW,U0r),e(AM,J0r),e(Fe,Y0r),e(Fe,yM),e(yM,hFe),e(hFe,K0r),e(yM,Z0r),e(yM,zW),e(zW,eyr),e(yM,oyr),e(Fe,ryr),e(Fe,LM),e(LM,pFe),e(pFe,tyr),e(LM,ayr),e(LM,QW),e(QW,nyr),e(LM,syr),e(Fe,lyr),e(Fe,xM),e(xM,_Fe),e(_Fe,iyr),e(xM,dyr),e(xM,WW),e(WW,cyr),e(xM,fyr),e(Fe,myr),e(Fe,kM),e(kM,uFe),e(uFe,gyr),e(kM,hyr),e(kM,HW),e(HW,pyr),e(kM,_yr),e(Fe,uyr),e(Fe,SM),e(SM,bFe),e(bFe,byr),e(SM,Fyr),e(SM,UW),e(UW,vyr),e(SM,Tyr),e(Fe,Myr),e(Fe,RM),e(RM,FFe),e(FFe,Eyr),e(RM,Cyr),e(RM,JW),e(JW,wyr),e(RM,Ayr),e(Fe,yyr),e(Fe,BM),e(BM,vFe),e(vFe,Lyr),e(BM,xyr),e(BM,YW),e(YW,kyr),e(BM,Syr),e(Ro,Ryr),e(Ro,TFe),e(TFe,Byr),e(Ro,Pyr),g(vL,Ro,null),b(c,ABe,u),b(c,uf,u),e(uf,PM),e(PM,MFe),g(TL,MFe,null),e(uf,$yr),e(uf,EFe),e(EFe,Iyr),b(c,yBe,u),b(c,Nr,u),g(ML,Nr,null),e(Nr,qyr),e(Nr,bf),e(bf,Nyr),e(bf,KW),e(KW,jyr),e(bf,Dyr),e(bf,ZW),e(ZW,Gyr),e(bf,Oyr),e(Nr,Vyr),e(Nr,EL),e(EL,Xyr),e(EL,CFe),e(CFe,zyr),e(EL,Qyr),e(Nr,Wyr),e(Nr,Rt),g(CL,Rt,null),e(Rt,Hyr),e(Rt,wFe),e(wFe,Uyr),e(Rt,Jyr),e(Rt,Ff),e(Ff,Yyr),e(Ff,AFe),e(AFe,Kyr),e(Ff,Zyr),e(Ff,eH),e(eH,eLr),e(Ff,oLr),e(Rt,rLr),e(Rt,yFe),e(yFe,tLr),e(Rt,aLr),g(wL,Rt,null),e(Nr,nLr),e(Nr,Bo),g(AL,Bo,null),e(Bo,sLr),e(Bo,LFe),e(LFe,lLr),e(Bo,iLr),e(Bo,$n),e($n,dLr),e($n,xFe),e(xFe,cLr),e($n,fLr),e($n,kFe),e(kFe,mLr),e($n,gLr),e($n,SFe),e(SFe,hLr),e($n,pLr),e(Bo,_Lr),e(Bo,ve),e(ve,$M),e($M,RFe),e(RFe,uLr),e($M,bLr),e($M,oH),e(oH,FLr),e($M,vLr),e(ve,TLr),e(ve,IM),e(IM,BFe),e(BFe,MLr),e(IM,ELr),e(IM,rH),e(rH,CLr),e(IM,wLr),e(ve,ALr),e(ve,qM),e(qM,PFe),e(PFe,yLr),e(qM,LLr),e(qM,tH),e(tH,xLr),e(qM,kLr),e(ve,SLr),e(ve,NM),e(NM,$Fe),e($Fe,RLr),e(NM,BLr),e(NM,aH),e(aH,PLr),e(NM,$Lr),e(ve,ILr),e(ve,jM),e(jM,IFe),e(IFe,qLr),e(jM,NLr),e(jM,nH),e(nH,jLr),e(jM,DLr),e(ve,GLr),e(ve,DM),e(DM,qFe),e(qFe,OLr),e(DM,VLr),e(DM,sH),e(sH,XLr),e(DM,zLr),e(ve,QLr),e(ve,GM),e(GM,NFe),e(NFe,WLr),e(GM,HLr),e(GM,lH),e(lH,ULr),e(GM,JLr),e(ve,YLr),e(ve,OM),e(OM,jFe),e(jFe,KLr),e(OM,ZLr),e(OM,iH),e(iH,e8r),e(OM,o8r),e(ve,r8r),e(ve,VM),e(VM,DFe),e(DFe,t8r),e(VM,a8r),e(VM,dH),e(dH,n8r),e(VM,s8r),e(ve,l8r),e(ve,XM),e(XM,GFe),e(GFe,i8r),e(XM,d8r),e(XM,cH),e(cH,c8r),e(XM,f8r),e(Bo,m8r),e(Bo,OFe),e(OFe,g8r),e(Bo,h8r),g(yL,Bo,null),b(c,LBe,u),b(c,vf,u),e(vf,zM),e(zM,VFe),g(LL,VFe,null),e(vf,p8r),e(vf,XFe),e(XFe,_8r),b(c,xBe,u),b(c,jr,u),g(xL,jr,null),e(jr,u8r),e(jr,Tf),e(Tf,b8r),e(Tf,fH),e(fH,F8r),e(Tf,v8r),e(Tf,mH),e(mH,T8r),e(Tf,M8r),e(jr,E8r),e(jr,kL),e(kL,C8r),e(kL,zFe),e(zFe,w8r),e(kL,A8r),e(jr,y8r),e(jr,Bt),g(SL,Bt,null),e(Bt,L8r),e(Bt,QFe),e(QFe,x8r),e(Bt,k8r),e(Bt,Mf),e(Mf,S8r),e(Mf,WFe),e(WFe,R8r),e(Mf,B8r),e(Mf,gH),e(gH,P8r),e(Mf,$8r),e(Bt,I8r),e(Bt,HFe),e(HFe,q8r),e(Bt,N8r),g(RL,Bt,null),e(jr,j8r),e(jr,Po),g(BL,Po,null),e(Po,D8r),e(Po,UFe),e(UFe,G8r),e(Po,O8r),e(Po,In),e(In,V8r),e(In,JFe),e(JFe,X8r),e(In,z8r),e(In,YFe),e(YFe,Q8r),e(In,W8r),e(In,KFe),e(KFe,H8r),e(In,U8r),e(Po,J8r),e(Po,Be),e(Be,QM),e(QM,ZFe),e(ZFe,Y8r),e(QM,K8r),e(QM,hH),e(hH,Z8r),e(QM,e9r),e(Be,o9r),e(Be,WM),e(WM,eve),e(eve,r9r),e(WM,t9r),e(WM,pH),e(pH,a9r),e(WM,n9r),e(Be,s9r),e(Be,HM),e(HM,ove),e(ove,l9r),e(HM,i9r),e(HM,_H),e(_H,d9r),e(HM,c9r),e(Be,f9r),e(Be,UM),e(UM,rve),e(rve,m9r),e(UM,g9r),e(UM,uH),e(uH,h9r),e(UM,p9r),e(Be,_9r),e(Be,JM),e(JM,tve),e(tve,u9r),e(JM,b9r),e(JM,bH),e(bH,F9r),e(JM,v9r),e(Be,T9r),e(Be,YM),e(YM,ave),e(ave,M9r),e(YM,E9r),e(YM,FH),e(FH,C9r),e(YM,w9r),e(Be,A9r),e(Be,KM),e(KM,nve),e(nve,y9r),e(KM,L9r),e(KM,vH),e(vH,x9r),e(KM,k9r),e(Be,S9r),e(Be,ZM),e(ZM,sve),e(sve,R9r),e(ZM,B9r),e(ZM,TH),e(TH,P9r),e(ZM,$9r),e(Po,I9r),e(Po,lve),e(lve,q9r),e(Po,N9r),g(PL,Po,null),b(c,kBe,u),b(c,Ef,u),e(Ef,e4),e(e4,ive),g($L,ive,null),e(Ef,j9r),e(Ef,dve),e(dve,D9r),b(c,SBe,u),b(c,Dr,u),g(IL,Dr,null),e(Dr,G9r),e(Dr,Cf),e(Cf,O9r),e(Cf,MH),e(MH,V9r),e(Cf,X9r),e(Cf,EH),e(EH,z9r),e(Cf,Q9r),e(Dr,W9r),e(Dr,qL),e(qL,H9r),e(qL,cve),e(cve,U9r),e(qL,J9r),e(Dr,Y9r),e(Dr,Pt),g(NL,Pt,null),e(Pt,K9r),e(Pt,fve),e(fve,Z9r),e(Pt,exr),e(Pt,wf),e(wf,oxr),e(wf,mve),e(mve,rxr),e(wf,txr),e(wf,CH),e(CH,axr),e(wf,nxr),e(Pt,sxr),e(Pt,gve),e(gve,lxr),e(Pt,ixr),g(jL,Pt,null),e(Dr,dxr),e(Dr,$o),g(DL,$o,null),e($o,cxr),e($o,hve),e(hve,fxr),e($o,mxr),e($o,qn),e(qn,gxr),e(qn,pve),e(pve,hxr),e(qn,pxr),e(qn,_ve),e(_ve,_xr),e(qn,uxr),e(qn,uve),e(uve,bxr),e(qn,Fxr),e($o,vxr),e($o,Pe),e(Pe,o4),e(o4,bve),e(bve,Txr),e(o4,Mxr),e(o4,wH),e(wH,Exr),e(o4,Cxr),e(Pe,wxr),e(Pe,r4),e(r4,Fve),e(Fve,Axr),e(r4,yxr),e(r4,AH),e(AH,Lxr),e(r4,xxr),e(Pe,kxr),e(Pe,t4),e(t4,vve),e(vve,Sxr),e(t4,Rxr),e(t4,yH),e(yH,Bxr),e(t4,Pxr),e(Pe,$xr),e(Pe,a4),e(a4,Tve),e(Tve,Ixr),e(a4,qxr),e(a4,LH),e(LH,Nxr),e(a4,jxr),e(Pe,Dxr),e(Pe,n4),e(n4,Mve),e(Mve,Gxr),e(n4,Oxr),e(n4,xH),e(xH,Vxr),e(n4,Xxr),e(Pe,zxr),e(Pe,s4),e(s4,Eve),e(Eve,Qxr),e(s4,Wxr),e(s4,kH),e(kH,Hxr),e(s4,Uxr),e(Pe,Jxr),e(Pe,l4),e(l4,Cve),e(Cve,Yxr),e(l4,Kxr),e(l4,SH),e(SH,Zxr),e(l4,ekr),e(Pe,okr),e(Pe,i4),e(i4,wve),e(wve,rkr),e(i4,tkr),e(i4,RH),e(RH,akr),e(i4,nkr),e($o,skr),e($o,Ave),e(Ave,lkr),e($o,ikr),g(GL,$o,null),b(c,RBe,u),b(c,Af,u),e(Af,d4),e(d4,yve),g(OL,yve,null),e(Af,dkr),e(Af,Lve),e(Lve,ckr),b(c,BBe,u),b(c,Gr,u),g(VL,Gr,null),e(Gr,fkr),e(Gr,yf),e(yf,mkr),e(yf,BH),e(BH,gkr),e(yf,hkr),e(yf,PH),e(PH,pkr),e(yf,_kr),e(Gr,ukr),e(Gr,XL),e(XL,bkr),e(XL,xve),e(xve,Fkr),e(XL,vkr),e(Gr,Tkr),e(Gr,$t),g(zL,$t,null),e($t,Mkr),e($t,kve),e(kve,Ekr),e($t,Ckr),e($t,Lf),e(Lf,wkr),e(Lf,Sve),e(Sve,Akr),e(Lf,ykr),e(Lf,$H),e($H,Lkr),e(Lf,xkr),e($t,kkr),e($t,Rve),e(Rve,Skr),e($t,Rkr),g(QL,$t,null),e(Gr,Bkr),e(Gr,Io),g(WL,Io,null),e(Io,Pkr),e(Io,Bve),e(Bve,$kr),e(Io,Ikr),e(Io,Nn),e(Nn,qkr),e(Nn,Pve),e(Pve,Nkr),e(Nn,jkr),e(Nn,$ve),e($ve,Dkr),e(Nn,Gkr),e(Nn,Ive),e(Ive,Okr),e(Nn,Vkr),e(Io,Xkr),e(Io,qve),e(qve,c4),e(c4,Nve),e(Nve,zkr),e(c4,Qkr),e(c4,IH),e(IH,Wkr),e(c4,Hkr),e(Io,Ukr),e(Io,jve),e(jve,Jkr),e(Io,Ykr),g(HL,Io,null),b(c,PBe,u),b(c,xf,u),e(xf,f4),e(f4,Dve),g(UL,Dve,null),e(xf,Kkr),e(xf,Gve),e(Gve,Zkr),b(c,$Be,u),b(c,Or,u),g(JL,Or,null),e(Or,eSr),e(Or,kf),e(kf,oSr),e(kf,qH),e(qH,rSr),e(kf,tSr),e(kf,NH),e(NH,aSr),e(kf,nSr),e(Or,sSr),e(Or,YL),e(YL,lSr),e(YL,Ove),e(Ove,iSr),e(YL,dSr),e(Or,cSr),e(Or,It),g(KL,It,null),e(It,fSr),e(It,Vve),e(Vve,mSr),e(It,gSr),e(It,Sf),e(Sf,hSr),e(Sf,Xve),e(Xve,pSr),e(Sf,_Sr),e(Sf,jH),e(jH,uSr),e(Sf,bSr),e(It,FSr),e(It,zve),e(zve,vSr),e(It,TSr),g(ZL,It,null),e(Or,MSr),e(Or,qo),g(e8,qo,null),e(qo,ESr),e(qo,Qve),e(Qve,CSr),e(qo,wSr),e(qo,jn),e(jn,ASr),e(jn,Wve),e(Wve,ySr),e(jn,LSr),e(jn,Hve),e(Hve,xSr),e(jn,kSr),e(jn,Uve),e(Uve,SSr),e(jn,RSr),e(qo,BSr),e(qo,o8),e(o8,m4),e(m4,Jve),e(Jve,PSr),e(m4,$Sr),e(m4,DH),e(DH,ISr),e(m4,qSr),e(o8,NSr),e(o8,g4),e(g4,Yve),e(Yve,jSr),e(g4,DSr),e(g4,GH),e(GH,GSr),e(g4,OSr),e(qo,VSr),e(qo,Kve),e(Kve,XSr),e(qo,zSr),g(r8,qo,null),b(c,IBe,u),b(c,Rf,u),e(Rf,h4),e(h4,Zve),g(t8,Zve,null),e(Rf,QSr),e(Rf,e6e),e(e6e,WSr),b(c,qBe,u),b(c,Vr,u),g(a8,Vr,null),e(Vr,HSr),e(Vr,Bf),e(Bf,USr),e(Bf,OH),e(OH,JSr),e(Bf,YSr),e(Bf,VH),e(VH,KSr),e(Bf,ZSr),e(Vr,eRr),e(Vr,n8),e(n8,oRr),e(n8,o6e),e(o6e,rRr),e(n8,tRr),e(Vr,aRr),e(Vr,qt),g(s8,qt,null),e(qt,nRr),e(qt,r6e),e(r6e,sRr),e(qt,lRr),e(qt,Pf),e(Pf,iRr),e(Pf,t6e),e(t6e,dRr),e(Pf,cRr),e(Pf,XH),e(XH,fRr),e(Pf,mRr),e(qt,gRr),e(qt,a6e),e(a6e,hRr),e(qt,pRr),g(l8,qt,null),e(Vr,_Rr),e(Vr,No),g(i8,No,null),e(No,uRr),e(No,n6e),e(n6e,bRr),e(No,FRr),e(No,Dn),e(Dn,vRr),e(Dn,s6e),e(s6e,TRr),e(Dn,MRr),e(Dn,l6e),e(l6e,ERr),e(Dn,CRr),e(Dn,i6e),e(i6e,wRr),e(Dn,ARr),e(No,yRr),e(No,d6e),e(d6e,p4),e(p4,c6e),e(c6e,LRr),e(p4,xRr),e(p4,zH),e(zH,kRr),e(p4,SRr),e(No,RRr),e(No,f6e),e(f6e,BRr),e(No,PRr),g(d8,No,null),NBe=!0},p(c,[u]){const c8={};u&2&&(c8.$$scope={dirty:u,ctx:c}),Of.$set(c8);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:c}),Rh.$set(m6e);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:c}),Vh.$set(g6e)},i(c){NBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(FE.$$.fragment,c),h(vE.$$.fragment,c),h(Of.$$.fragment,c),h(TE.$$.fragment,c),h(ME.$$.fragment,c),h(wE.$$.fragment,c),h(AE.$$.fragment,c),h(yE.$$.fragment,c),h(LE.$$.fragment,c),h(xE.$$.fragment,c),h(RE.$$.fragment,c),h(BE.$$.fragment,c),h(PE.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(jE.$$.fragment,c),h(Rh.$$.fragment,c),h(DE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(VE.$$.fragment,c),h(QE.$$.fragment,c),h(Vh.$$.fragment,c),h(WE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(FC.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),NBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(FE.$$.fragment,c),p(vE.$$.fragment,c),p(Of.$$.fragment,c),p(TE.$$.fragment,c),p(ME.$$.fragment,c),p(wE.$$.fragment,c),p(AE.$$.fragment,c),p(yE.$$.fragment,c),p(LE.$$.fragment,c),p(xE.$$.fragment,c),p(RE.$$.fragment,c),p(BE.$$.fragment,c),p(PE.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(jE.$$.fragment,c),p(Rh.$$.fragment,c),p(DE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(VE.$$.fragment,c),p(QE.$$.fragment,c),p(Vh.$$.fragment,c),p(WE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(FC.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),NBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(qSe),c&&t(Vi),_(FE),c&&t(NSe),c&&t(zn),c&&t(jSe),_(vE,c),c&&t(DSe),c&&t(m9),c&&t(GSe),_(Of,c),c&&t(OSe),c&&t(Xi),_(TE),c&&t(VSe),c&&t(Qo),_(ME),_(wE),_(AE),_(yE),c&&t(XSe),c&&t(Qi),_(LE),c&&t(zSe),c&&t(Wo),_(xE),_(RE),_(BE),_(PE),c&&t(QSe),c&&t(Wi),_($E),c&&t(WSe),c&&t(Ho),_(IE),_(jE),_(Rh),_(DE),_(GE),c&&t(HSe),c&&t(Hi),_(OE),c&&t(USe),c&&t(Uo),_(VE),_(QE),_(Vh),_(WE),_(HE),c&&t(JSe),c&&t(Ji),_(UE),c&&t(YSe),c&&t(Jo),_(JE),_(KE),_(ZE),_(eC),_(oC),c&&t(KSe),c&&t(Zi),_(rC),c&&t(ZSe),c&&t(Yo),_(tC),_(nC),_(sC),_(lC),_(iC),c&&t(eRe),c&&t(rd),_(dC),c&&t(oRe),c&&t(Ko),_(cC),_(mC),_(gC),_(hC),_(pC),c&&t(rRe),c&&t(nd),_(_C),c&&t(tRe),c&&t(Zo),_(uC),_(FC),_(vC),_(TC),_(MC),c&&t(aRe),c&&t(id),_(EC),c&&t(nRe),c&&t(er),_(CC),_(AC),_(yC),_(LC),_(xC),c&&t(sRe),c&&t(fd),_(kC),c&&t(lRe),c&&t(or),_(SC),_(BC),_(PC),_($C),_(IC),c&&t(iRe),c&&t(hd),_(qC),c&&t(dRe),c&&t(rr),_(NC),_(DC),_(GC),_(OC),_(VC),c&&t(cRe),c&&t(ud),_(XC),c&&t(fRe),c&&t(tr),_(zC),_(WC),_(HC),_(UC),_(JC),c&&t(mRe),c&&t(vd),_(YC),c&&t(gRe),c&&t(ar),_(KC),_(ew),_(ow),_(rw),_(tw),c&&t(hRe),c&&t(Ed),_(aw),c&&t(pRe),c&&t(nr),_(nw),_(lw),_(iw),_(dw),_(cw),c&&t(_Re),c&&t(Ad),_(fw),c&&t(uRe),c&&t(sr),_(mw),_(hw),_(pw),_(_w),_(uw),c&&t(bRe),c&&t(xd),_(bw),c&&t(FRe),c&&t(lr),_(Fw),_(Tw),_(Mw),_(Ew),_(Cw),c&&t(vRe),c&&t(Rd),_(ww),c&&t(TRe),c&&t(ir),_(Aw),_(Lw),_(xw),_(kw),_(Sw),c&&t(MRe),c&&t($d),_(Rw),c&&t(ERe),c&&t(dr),_(Bw),_($w),_(Iw),_(qw),_(Nw),c&&t(CRe),c&&t(Nd),_(jw),c&&t(wRe),c&&t(cr),_(Dw),_(Ow),_(Vw),_(Xw),_(zw),c&&t(ARe),c&&t(Gd),_(Qw),c&&t(yRe),c&&t(fr),_(Ww),_(Uw),_(Jw),_(Yw),_(Kw),c&&t(LRe),c&&t(Xd),_(Zw),c&&t(xRe),c&&t(mr),_(eA),_(rA),_(tA),_(aA),_(sA),c&&t(kRe),c&&t(Wd),_(lA),c&&t(SRe),c&&t(gr),_(iA),_(cA),_(fA),_(mA),_(gA),c&&t(RRe),c&&t(Jd),_(hA),c&&t(BRe),c&&t(hr),_(pA),_(uA),_(bA),_(FA),_(vA),c&&t(PRe),c&&t(ec),_(TA),c&&t($Re),c&&t(pr),_(MA),_(CA),_(wA),_(AA),_(yA),c&&t(IRe),c&&t(tc),_(LA),c&&t(qRe),c&&t(_r),_(xA),_(SA),_(RA),_(BA),_(PA),c&&t(NRe),c&&t(sc),_($A),c&&t(jRe),c&&t(ur),_(IA),_(NA),_(jA),_(DA),_(GA),c&&t(DRe),c&&t(cc),_(OA),c&&t(GRe),c&&t(br),_(VA),_(zA),_(QA),_(WA),_(HA),c&&t(ORe),c&&t(gc),_(UA),c&&t(VRe),c&&t(Fr),_(JA),_(KA),_(ZA),_(e0),_(o0),c&&t(XRe),c&&t(_c),_(r0),c&&t(zRe),c&&t(vr),_(t0),_(n0),_(s0),_(l0),_(i0),c&&t(QRe),c&&t(Fc),_(d0),c&&t(WRe),c&&t(Tr),_(c0),_(m0),_(g0),_(h0),_(p0),c&&t(HRe),c&&t(Mc),_(_0),c&&t(URe),c&&t(Mr),_(u0),_(F0),_(v0),_(T0),_(E0),c&&t(JRe),c&&t(wc),_(C0),c&&t(YRe),c&&t(Er),_(w0),_(y0),_(L0),_(x0),_(k0),c&&t(KRe),c&&t(Lc),_(S0),c&&t(ZRe),c&&t(Cr),_(R0),_(P0),_($0),_(I0),_(q0),c&&t(eBe),c&&t(Sc),_(N0),c&&t(oBe),c&&t(wr),_(j0),_(G0),_(O0),_(V0),_(X0),c&&t(rBe),c&&t(Pc),_(z0),c&&t(tBe),c&&t(Ar),_(Q0),_(H0),_(U0),_(J0),_(Y0),c&&t(aBe),c&&t(qc),_(K0),c&&t(nBe),c&&t(yr),_(Z0),_(oy),_(ry),_(ty),_(ay),c&&t(sBe),c&&t(Dc),_(ny),c&&t(lBe),c&&t(Lr),_(sy),_(iy),_(dy),_(cy),_(fy),c&&t(iBe),c&&t(Vc),_(my),c&&t(dBe),c&&t(xr),_(gy),_(py),_(_y),_(uy),_(by),c&&t(cBe),c&&t(Qc),_(Fy),c&&t(fBe),c&&t(kr),_(vy),_(My),_(Ey),_(Cy),_(wy),c&&t(mBe),c&&t(Uc),_(Ay),c&&t(gBe),c&&t(Sr),_(yy),_(xy),_(ky),_(Sy),_(Ry),c&&t(hBe),c&&t(Kc),_(By),c&&t(pBe),c&&t(Rr),_(Py),_(Iy),_(qy),_(Ny),_(jy),c&&t(_Be),c&&t(of),_(Dy),c&&t(uBe),c&&t(Br),_(Gy),_(Vy),_(Xy),_(zy),_(Qy),c&&t(bBe),c&&t(af),_(Wy),c&&t(FBe),c&&t(Pr),_(Hy),_(Jy),_(Yy),_(Ky),_(Zy),c&&t(vBe),c&&t(lf),_(eL),c&&t(TBe),c&&t($r),_(oL),_(tL),_(aL),_(nL),_(sL),c&&t(MBe),c&&t(ff),_(lL),c&&t(EBe),c&&t(Ir),_(iL),_(cL),_(fL),_(mL),_(gL),c&&t(CBe),c&&t(hf),_(hL),c&&t(wBe),c&&t(qr),_(pL),_(uL),_(bL),_(FL),_(vL),c&&t(ABe),c&&t(uf),_(TL),c&&t(yBe),c&&t(Nr),_(ML),_(CL),_(wL),_(AL),_(yL),c&&t(LBe),c&&t(vf),_(LL),c&&t(xBe),c&&t(jr),_(xL),_(SL),_(RL),_(BL),_(PL),c&&t(kBe),c&&t(Ef),_($L),c&&t(SBe),c&&t(Dr),_(IL),_(NL),_(jL),_(DL),_(GL),c&&t(RBe),c&&t(Af),_(OL),c&&t(BBe),c&&t(Gr),_(VL),_(zL),_(QL),_(WL),_(HL),c&&t(PBe),c&&t(xf),_(UL),c&&t($Be),c&&t(Or),_(JL),_(KL),_(ZL),_(e8),_(r8),c&&t(IBe),c&&t(Rf),_(t8),c&&t(qBe),c&&t(Vr),_(a8),_(s8),_(l8),_(i8),_(d8)}}}const n4t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function s4t(If){return e4t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class m4t extends JMt{constructor(Z){super();YMt(this,Z,s4t,a4t,KMt,{})}}export{m4t as default,n4t as metadata};
