import{S as E_,i as g_,s as L_,e as a,k as p,w as v,t as s,M as D_,c as i,d as t,m as f,a as o,x as P,h as r,b as d,N as K,F as l,g as h,y as w,L as G_,q as y,o as b,B as _}from"../chunks/vendor-22ad994f.js";import{I as O}from"../chunks/IconCopyLink-2eb9a001.js";import{C as Np}from"../chunks/CodeBlock-03069293.js";import"../chunks/CopyButton-f539c482.js";function U_(Rp){let $,yl,U,M,$i,He,Zp,xi,Cp,hr,Q,me,zi,Xe,jp,Ni,Fp,pr,bl,qp,fr,ve,Ri,Bp,Wp,Zi,Vp,dr,_l,Hp,cr,El,Xp,ur,ee,Pe,Ci,Ye,Yp,ji,Jp,mr,gl,Kp,vr,E,Fi,Qp,ef,qi,tf,lf,Bi,af,of,Wi,sf,rf,Vi,nf,Pr,te,we,Hi,Je,hf,Xi,pf,wr,x,ff,Yi,df,cf,Ji,uf,mf,yr,le,ye,Ki,Ke,vf,Qi,Pf,br,ae,wf,Qe,yf,bf,Ll,h1,_r,be,_f,eo,Ef,gf,Er,Dl,Lf,gr,et,Lr,Gl,Df,Dr,Ul,Gf,Gr,tt,Ur,kl,Uf,kr,Tl,kf,Tr,lt,Ir,Il,Tf,Sr,Sl,If,Ar,Al,Sf,Or,Ol,Af,Mr,Ml,Of,$r,$l,Mf,xr,xl,$f,zr,zl,xf,Nr,Nl,zf,Rr,z,to,Nf,Rf,lo,Zf,Cf,ao,jf,Zr,Rl,Ff,Cr,Zl,qf,jr,Cl,Bf,Fr,jl,Wf,qr,Fl,Vf,Br,N,ql,at,Hf,Xf,Yf,Bl,it,Jf,Kf,Qf,io,ot,oo,ed,td,Wr,ie,_e,so,st,ld,ro,ad,Vr,Ee,id,no,od,sd,Hr,Wl,rd,Xr,rt,Yr,Vl,nd,Jr,Hl,hd,Kr,Xl,pd,Qr,Yl,fd,en,ge,ho,dd,cd,po,ud,tn,Jl,md,ln,Le,vd,nt,Pd,wd,an,Kl,Ql,p1,on,ea,yd,sn,ta,bd,rn,R,_d,fo,Ed,gd,co,Ld,Dd,nn,De,Gd,uo,Ud,kd,hn,Ge,Td,mo,Id,Sd,pn,Z,Ad,vo,Od,Md,Po,$d,xd,fn,la,zd,dn,C,Nd,wo,Rd,Zd,yo,Cd,jd,cn,k,Fd,bo,qd,Bd,_o,Wd,Vd,Eo,Hd,Xd,un,aa,Yd,mn,ia,Jd,vn,T,go,Kd,Qd,Lo,ec,tc,Do,lc,ac,Go,ic,Pn,oa,oc,wn,Ue,Uo,sc,rc,ko,nc,yn,sa,hc,bn,I,ht,pc,To,fc,dc,cc,ra,uc,pt,mc,vc,Io,Pc,wc,So,yc,_n,na,bc,En,ha,_c,gn,u,ft,dt,Ec,gc,ct,Lc,Dc,Ao,ut,Gc,Uc,Oo,mt,kc,Tc,pa,vt,Ic,Sc,Ac,Mo,Pt,Oc,Mc,fa,wt,$c,xc,zc,da,yt,Nc,Rc,Ln,ke,Zc,$o,Cc,jc,Dn,ca,Fc,Gn,oe,qc,bt,Bc,Wc,ua,f1,Un,ma,Vc,kn,va,Hc,Tn,Te,Xc,xo,Yc,Jc,In,se,Ie,zo,_t,Kc,No,Qc,Sn,Pa,eu,An,j,tu,Et,lu,au,gt,iu,ou,On,F,su,Ro,ru,nu,Zo,hu,pu,Mn,g,fu,Co,du,cu,jo,uu,mu,Fo,vu,Pu,qo,wu,yu,$n,Lt,bu,wa,d1,xn,c,_u,Bo,Eu,gu,Wo,Lu,Du,Vo,Gu,Uu,Ho,ku,Tu,Xo,Iu,Su,Yo,Au,Ou,Jo,Mu,$u,ya,c1,zn,Dt,xu,ba,u1,Nn,Gt,zu,_a,m1,Rn,Ea,Nu,Zn,q,Ru,Ut,Zu,Cu,kt,ju,Fu,Cn,ga,qu,jn,La,Bu,Fn,Da,Ga,Wu,Tt,Vu,qn,Ua,Hu,Bn,S,ka,It,Xu,Yu,Ju,Ta,St,Ku,Qu,em,Ia,At,tm,lm,am,Sa,Ot,im,om,Wn,Aa,sm,Vn,B,Ko,rm,nm,Mt,hm,$t,pm,fm,dm,Oa,cm,xt,um,Hn,re,Se,Qo,zt,mm,es,vm,Xn,Ae,Pm,Nt,wm,ym,Yn,Ma,$a,v1,Jn,xa,bm,Kn,za,_m,Qn,Na,Em,eh,L,ts,Rt,gm,Lm,ls,Zt,Dm,Gm,as,Ct,Um,km,is,jt,Tm,Im,os,Ft,Sm,th,Ra,Am,lh,ne,Oe,ss,qt,Om,rs,Mm,ah,Za,$m,ih,Ca,ja,P1,oh,Me,xm,Bt,zm,Nm,sh,Fa,Rm,rh,qa,Zm,nh,D,Ba,Wt,Cm,jm,Fm,ns,Vt,qm,Bm,hs,Ht,Wm,Vm,ps,Xt,Hm,Xm,fs,Yt,Ym,hh,Wa,Jm,ph,he,$e,ds,Jt,Km,cs,Qm,fh,xe,ev,Va,tv,lv,dh,Ha,av,ch,Xa,iv,uh,ze,ov,us,sv,rv,mh,Ya,nv,vh,Ja,hv,Ph,Ka,pv,wh,Ne,ms,Kt,fv,dv,vs,Qt,cv,yh,Qa,uv,bh,pe,Re,Ps,el,mv,ws,vv,_h,tl,ll,Pv,wv,Eh,al,yv,il,bv,gh,ei,_v,Lh,A,ys,Ev,gv,bs,Lv,Dv,_s,Gv,Uv,Es,kv,Dh,ti,Tv,Gh,li,gs,Iv,Uh,ai,Sv,kh,ii,Ls,Av,Th,oi,Ov,Ih,si,Ds,Mv,Sh,ri,$v,Ah,ni,Gs,xv,Oh,hi,zv,Mh,pi,fi,w1,$h,di,Nv,xh,ci,Rv,zh,ui,Zv,Nh,Ze,Cv,ol,jv,Fv,Rh,fe,Ce,Us,sl,qv,ks,Bv,Zh,mi,Wv,Ch,vi,Ts,Vv,jh,W,rl,Is,Hv,Xv,Ss,As,Yv,Jv,nl,Os,Kv,Qv,hl,Ms,eP,tP,$s,lP,aP,xs,zs,iP,Fh,Pi,de,oP,pl,sP,rP,Ns,nP,hP,qh,wi,Rs,pP,Bh,V,fl,Zs,fP,dP,dl,Cs,cP,uP,js,mP,vP,cl,Fs,PP,wP,ce,qs,Bs,yP,bP,Ws,Vs,_P,EP,ue,Hs,gP,LP,Xs,DP,GP,Ys,UP,kP,ul,Js,TP,IP,ml,Ks,SP,AP,Qs,OP,Wh,yi,er,MP,Vh,je,vl,tr,$P,xP,Pl,lr,zP,NP,ar,RP,ZP,wl,ir,CP,jP,or,sr,FP,Hh;return He=new O({}),Xe=new O({}),Ye=new O({}),Je=new O({}),Ke=new O({}),et=new Np({props:{code:`La | Lb | Lc
---|----|---
a0 | b0 | c0
a1 | b1 | c1
a2 | b2 | c2,`,highlighted:`La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),tt=new Np({props:{code:`GPU0:
La | Lb | Lc
---|----|---
a0 | b0 | c0

GPU1:
La | Lb | Lc
---|----|---
a1 | b1 | c1

GPU2:
La | Lb | Lc
---|----|---
a2 | b2 | c2,`,highlighted:`GPU0:
La |<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a0 </span>|<span class="hljs-string"> b0 </span>|<span class="hljs-string"> c0

GPU1:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a1 </span>|<span class="hljs-string"> b1 </span>|<span class="hljs-string"> c1

GPU2:
La </span>|<span class="hljs-string"> Lb </span>|<span class="hljs-string"> Lc
---</span>|<span class="hljs-string">----</span>|<span class="hljs-string">---
a2 </span>|<span class="hljs-string"> b2 </span>|<span class="hljs-string"> c2</span>`}}),lt=new Np({props:{code:`x0 => GPU0
x1 => GPU1
x2 => GPU2,`,highlighted:`<span class="hljs-attribute">x0</span> <span class="hljs-operator">=</span>&gt; GPU0
<span class="hljs-attribute">x1</span> <span class="hljs-operator">=</span>&gt; GPU1
<span class="hljs-attribute">x2</span> <span class="hljs-operator">=</span>&gt; GPU2`}}),st=new O({}),rt=new Np({props:{code:`===================  ===================
|  0 | 1 | 2 | 3  |  |  4 | 5 | 6 | 7  |
===================  ===================
        gpu0                 gpu1,`,highlighted:`===================  ===================
|<span class="hljs-string">  0 </span>|<span class="hljs-string"> 1 </span>|<span class="hljs-string"> 2 </span>|<span class="hljs-string"> 3  </span>|<span class="hljs-string">  </span>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 5 </span>|<span class="hljs-string"> 6 </span>|<span class="hljs-string"> 7  </span>|
===================  ===================
        gpu0                 gpu1`}}),_t=new O({}),zt=new O({}),qt=new O({}),Jt=new O({}),el=new O({}),sl=new O({}),{c(){$=a("meta"),yl=p(),U=a("h1"),M=a("a"),$i=a("span"),v(He.$$.fragment),Zp=p(),xi=a("span"),Cp=s("Model Parallelism"),hr=p(),Q=a("h2"),me=a("a"),zi=a("span"),v(Xe.$$.fragment),jp=p(),Ni=a("span"),Fp=s("Parallelism overview"),pr=p(),bl=a("p"),qp=s("In the modern machine learning the various approaches to parallelism are used to:"),fr=p(),ve=a("ol"),Ri=a("li"),Bp=s("fit very large models onto limited hardware - e.g. t5-11b is 45GB in just model params"),Wp=p(),Zi=a("li"),Vp=s("significantly speed up training - finish training that would take a year in hours"),dr=p(),_l=a("p"),Hp=s("We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),cr=p(),El=a("p"),Xp=s("While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),ur=p(),ee=a("h2"),Pe=a("a"),Ci=a("span"),v(Ye.$$.fragment),Yp=p(),ji=a("span"),Jp=s("Concepts"),mr=p(),gl=a("p"),Kp=s("The following is the brief description of the main concepts that will be described later in depth in this document."),vr=p(),E=a("ol"),Fi=a("li"),Qp=s("DataParallel (DP) - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),ef=p(),qi=a("li"),tf=s("TensorParallel (TP) - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),lf=p(),Bi=a("li"),af=s("PipelineParallel (PP) - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),of=p(),Wi=a("li"),sf=s("Zero Redundancy Optimizer (ZeRO) - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),rf=p(),Vi=a("li"),nf=s("Sharded DDP - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),Pr=p(),te=a("h2"),we=a("a"),Hi=a("span"),v(Je.$$.fragment),hf=p(),Xi=a("span"),pf=s("Data Parallelism"),wr=p(),x=a("p"),ff=s("Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Yi=a("code"),df=s("DataParallel"),cf=s(" (DP) and "),Ji=a("code"),uf=s("DistributedDataParallel"),mf=s(" (DDP) that are almost trivial to use. This is a built-in feature of Pytorch."),yr=p(),le=a("h2"),ye=a("a"),Ki=a("span"),v(Ke.$$.fragment),vf=p(),Qi=a("span"),Pf=s("ZeRO Data Parallelism"),br=p(),ae=a("p"),wf=s("ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Qe=a("a"),yf=s("blog post"),bf=p(),Ll=a("img"),_r=p(),be=a("p"),_f=s("It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),eo=a("code"),Ef=s("DataParallel"),gf=s(" (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),Er=p(),Dl=a("p"),Lf=s("Consider this simple model with 3 layers, where each layer has 3 params:"),gr=p(),v(et.$$.fragment),Lr=p(),Gl=a("p"),Df=s("Layer La has weights a0, a1 and a2."),Dr=p(),Ul=a("p"),Gf=s("If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),Gr=p(),v(tt.$$.fragment),Ur=p(),kl=a("p"),Uf=s("In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),kr=p(),Tl=a("p"),kf=s("Now each of these GPUs will get the usual mini-batch as it works in DP:"),Tr=p(),v(lt.$$.fragment),Ir=p(),Il=a("p"),Tf=s("The inputs are unmodified - they think they are going to be processed by the normal model."),Sr=p(),Sl=a("p"),If=s("First, the inputs hit the layer La."),Ar=p(),Al=a("p"),Sf=s("Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),Or=p(),Ol=a("p"),Af=s("In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),Mr=p(),Ml=a("p"),Of=s("Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),$r=p(),$l=a("p"),Mf=s("All 3 GPUs get the full tensors reconstructed and a forward happens."),xr=p(),xl=a("p"),$f=s("As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),zr=p(),zl=a("p"),xf=s("And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),Nr=p(),Nl=a("p"),zf=s("To me this sounds like an efficient group backpacking weight distribution strategy:"),Rr=p(),z=a("ol"),to=a("li"),Nf=s("person A carries the tent"),Rf=p(),lo=a("li"),Zf=s("person B carries the stove"),Cf=p(),ao=a("li"),jf=s("person C carries the axe"),Zr=p(),Rl=a("p"),Ff=s("Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),Cr=p(),Zl=a("p"),qf=s("Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),jr=p(),Cl=a("p"),Bf=s("While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),Fr=p(),jl=a("p"),Wf=s("If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),qr=p(),Fl=a("p"),Vf=s("Implementations:"),Br=p(),N=a("ul"),ql=a("li"),at=a("a"),Hf=s("DeepSpeed"),Xf=s(" ZeRO-DP stages 1+2+3"),Yf=p(),Bl=a("li"),it=a("a"),Jf=s("Fairscale"),Kf=s(" ZeRO-DP stages 1+2+3"),Qf=p(),io=a("li"),ot=a("a"),oo=a("code"),ed=s("transformers"),td=s(" integration"),Wr=p(),ie=a("h2"),_e=a("a"),so=a("span"),v(st.$$.fragment),ld=p(),ro=a("span"),ad=s("Naive Model Parallelism (Vertical) and Pipeline Parallelism"),Vr=p(),Ee=a("p"),id=s("Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),no=a("code"),od=s(".to()"),sd=s(" the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),Hr=p(),Wl=a("p"),rd=s("We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),Xr=p(),v(rt.$$.fragment),Yr=p(),Vl=a("p"),nd=s("we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),Jr=p(),Hl=a("p"),hd=s("Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),Kr=p(),Xl=a("p"),pd=s("Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),Qr=p(),Yl=a("p"),fd=s("Problems:"),en=p(),ge=a("ul"),ho=a("li"),dd=s("the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),cd=p(),po=a("li"),ud=s("shared embeddings may need to get copied back and forth between GPUs."),tn=p(),Jl=a("p"),md=s("Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),ln=p(),Le=a("p"),vd=s("The following illustration from the "),nt=a("a"),Pd=s("GPipe paper"),wd=s(" shows the naive MP on the top, and PP on the bottom:"),an=p(),Kl=a("p"),Ql=a("img"),on=p(),ea=a("p"),yd=s("It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),sn=p(),ta=a("p"),bd=s("Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),rn=p(),R=a("p"),_d=s("PP introduces a new hyper-parameter to tune and it\u2019s "),fo=a("code"),Ed=s("chunks"),gd=s(" which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),co=a("code"),Ld=s("chunks=4"),Dd=s(". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),nn=p(),De=a("p"),Gd=s("Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),uo=a("code"),Ud=s("chunks"),kd=s(", whereas DeepSpeed refers to the same hyper-parameter as GAS."),hn=p(),Ge=a("p"),Td=s("Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),mo=a("code"),Id=s("chunks"),Sd=s(" (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),pn=p(),Z=a("p"),Ad=s("To calculate the global batch size of the DP + PP setup we then do: "),vo=a("code"),Od=s("mbs*chunks*dp_degree"),Md=s(" ("),Po=a("code"),$d=s("8*32*4=1024"),xd=s(")."),fn=p(),la=a("p"),zd=s("Let\u2019s go back to the diagram."),dn=p(),C=a("p"),Nd=s("With "),wo=a("code"),Rd=s("chunks=1"),Zd=s(" you end up with the naive MP, which is very inefficient. With a very large "),yo=a("code"),Cd=s("chunks"),jd=s(" value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),cn=p(),k=a("p"),Fd=s("While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),bo=a("code"),qd=s("forward"),Bd=s(" stage has to wait for "),_o=a("code"),Wd=s("backward"),Vd=s(" to complete the pipeline, the purpose of finding the best value for "),Eo=a("code"),Hd=s("chunks"),Xd=s(" is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),un=p(),aa=a("p"),Yd=s("There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),mn=p(),ia=a("p"),Jd=s("Traditional Pipeline API solutions:"),vn=p(),T=a("ul"),go=a("li"),Kd=s("PyTorch"),Qd=p(),Lo=a("li"),ec=s("FairScale"),tc=p(),Do=a("li"),lc=s("DeepSpeed"),ac=p(),Go=a("li"),ic=s("Megatron-LM"),Pn=p(),oa=a("p"),oc=s("Modern solutions:"),wn=p(),Ue=a("ul"),Uo=a("li"),sc=s("Varuna"),rc=p(),ko=a("li"),nc=s("Sagemaker"),yn=p(),sa=a("p"),hc=s("Problems with traditional Pipeline API solutions:"),bn=p(),I=a("ul"),ht=a("li"),pc=s("have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),To=a("code"),fc=s("nn.Sequential"),dc=s(" sequence of the same, which may require changes to the design of the model."),cc=p(),ra=a("li"),uc=s("currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),pt=a("a"),mc=s("https://github.com/pytorch/pytorch/pull/50693"),vc=p(),Io=a("li"),Pc=s("conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),wc=p(),So=a("li"),yc=s("have to arrange each layer so that the output of one model becomes an input to the other model."),_n=p(),na=a("p"),bc=s("We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),En=p(),ha=a("p"),_c=s("Implementations:"),gn=p(),u=a("ul"),ft=a("li"),dt=a("a"),Ec=s("Pytorch"),gc=s(" (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),ct=a("a"),Lc=s("examples"),Dc=p(),Ao=a("li"),ut=a("a"),Gc=s("FairScale"),Uc=p(),Oo=a("li"),mt=a("a"),kc=s("DeepSpeed"),Tc=p(),pa=a("li"),vt=a("a"),Ic=s("Megatron-LM"),Sc=s(" has an internal implementation - no API."),Ac=p(),Mo=a("li"),Pt=a("a"),Oc=s("Varuna"),Mc=p(),fa=a("li"),wt=a("a"),$c=s("SageMaker"),xc=s(" - this is a proprietary solution that can only be used on AWS."),zc=p(),da=a("li"),yt=a("a"),Nc=s("OSLO"),Rc=s(" - this is implemented based on the Hugging Face Transformers."),Ln=p(),ke=a("p"),Zc=s("\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),$o=a("code"),Cc=s("nn.Sequential"),jc=s(" and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),Dn=p(),ca=a("p"),Fc=s("Other approaches:"),Gn=p(),oe=a("p"),qc=s("DeepSpeed, Varuna and SageMaker use the concept of an "),bt=a("a"),Bc=s("Interleaved Pipeline"),Wc=p(),ua=a("img"),Un=p(),ma=a("p"),Vc=s("Here the bubble (idle time) is further minimized by prioritizing backward passes."),kn=p(),va=a("p"),Hc=s("Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),Tn=p(),Te=a("p"),Xc=s("OSLO has pipeline parallelism implementation based on the Transformers without "),xo=a("code"),Yc=s("nn.Sequential"),Jc=s(" converting."),In=p(),se=a("h2"),Ie=a("a"),zo=a("span"),v(_t.$$.fragment),Kc=p(),No=a("span"),Qc=s("Tensor Parallelism"),Sn=p(),Pa=a("p"),eu=s("In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),An=p(),j=a("p"),tu=s("In this section we use concepts and diagrams from the "),Et=a("a"),lu=s("Megatron-LM"),au=s(" paper: "),gt=a("a"),iu=s("Efficient Large-Scale Language Model Training on GPU Clusters"),ou=s("."),On=p(),F=a("p"),su=s("The main building block of any transformer is a fully connected "),Ro=a("code"),ru=s("nn.Linear"),nu=s(" followed by a nonlinear activation "),Zo=a("code"),hu=s("GeLU"),pu=s("."),Mn=p(),g=a("p"),fu=s("Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),Co=a("code"),du=s("Y = GeLU(XA)"),cu=s(", where "),jo=a("code"),uu=s("X"),mu=s(" and "),Fo=a("code"),vu=s("Y"),Pu=s(" are the input and output vectors, and "),qo=a("code"),wu=s("A"),yu=s(" is the weight matrix."),$n=p(),Lt=a("p"),bu=s(`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),wa=a("img"),xn=p(),c=a("p"),_u=s("If we split the weight matrix "),Bo=a("code"),Eu=s("A"),gu=s(" column-wise across "),Wo=a("code"),Lu=s("N"),Du=s(" GPUs and perform matrix multiplications "),Vo=a("code"),Gu=s("XA_1"),Uu=s(" through "),Ho=a("code"),ku=s("XA_n"),Tu=s(" in parallel, then we will end up with "),Xo=a("code"),Iu=s("N"),Su=s(" output vectors "),Yo=a("code"),Au=s("Y_1, Y_2, ..., Y_n"),Ou=s(" which can be fed into "),Jo=a("code"),Mu=s("GeLU"),$u=s(` independently:
`),ya=a("img"),zn=p(),Dt=a("p"),xu=s(`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),ba=a("img"),Nn=p(),Gt=a("p"),zu=s(`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),_a=a("img"),Rn=p(),Ea=a("p"),Nu=s("Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),Zn=p(),q=a("p"),Ru=s("This section is based on the original much more "),Ut=a("a"),Zu=s("detailed TP overview"),Cu=s(`.
by `),kt=a("a"),ju=s("@anton-l"),Fu=s("."),Cn=p(),ga=a("p"),qu=s("SageMaker combines TP with DP for a more efficient processing."),jn=p(),La=a("p"),Bu=s("Alternative names:"),Fn=p(),Da=a("ul"),Ga=a("li"),Wu=s("DeepSpeed calls it "),Tt=a("a"),Vu=s("tensor slicing"),qn=p(),Ua=a("p"),Hu=s("Implementations:"),Bn=p(),S=a("ul"),ka=a("li"),It=a("a"),Xu=s("Megatron-LM"),Yu=s(" has an internal implementation, as it\u2019s very model-specific"),Ju=p(),Ta=a("li"),St=a("a"),Ku=s("parallelformers"),Qu=s(" (only inference at the moment)"),em=p(),Ia=a("li"),At=a("a"),tm=s("SageMaker"),lm=s(" - this is a proprietary solution that can only be used on AWS."),am=p(),Sa=a("li"),Ot=a("a"),im=s("OSLO"),om=s(" has the tensor parallelism implementation based on the Transformers."),Wn=p(),Aa=a("p"),sm=s("\u{1F917} Transformers status:"),Vn=p(),B=a("ul"),Ko=a("li"),rm=s("core: not yet implemented in the core"),nm=p(),Mt=a("li"),hm=s("but if you want inference "),$t=a("a"),pm=s("parallelformers"),fm=s(" provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),dm=p(),Oa=a("li"),cm=s("Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),xt=a("a"),um=s("here"),Hn=p(),re=a("h2"),Se=a("a"),Qo=a("span"),v(zt.$$.fragment),mm=p(),es=a("span"),vm=s("DP+PP"),Xn=p(),Ae=a("p"),Pm=s("The following diagram from the DeepSpeed "),Nt=a("a"),wm=s("pipeline tutorial"),ym=s(" demonstrates how one combines DP with PP."),Yn=p(),Ma=a("p"),$a=a("img"),Jn=p(),xa=a("p"),bm=s("Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),Kn=p(),za=a("p"),_m=s("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),Qn=p(),Na=a("p"),Em=s("Implementations:"),eh=p(),L=a("ul"),ts=a("li"),Rt=a("a"),gm=s("DeepSpeed"),Lm=p(),ls=a("li"),Zt=a("a"),Dm=s("Megatron-LM"),Gm=p(),as=a("li"),Ct=a("a"),Um=s("Varuna"),km=p(),is=a("li"),jt=a("a"),Tm=s("SageMaker"),Im=p(),os=a("li"),Ft=a("a"),Sm=s("OSLO"),th=p(),Ra=a("p"),Am=s("\u{1F917} Transformers status: not yet implemented"),lh=p(),ne=a("h2"),Oe=a("a"),ss=a("span"),v(qt.$$.fragment),Om=p(),rs=a("span"),Mm=s("DP+PP+TP"),ah=p(),Za=a("p"),$m=s("To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),ih=p(),Ca=a("p"),ja=a("img"),oh=p(),Me=a("p"),xm=s("This diagram is from a blog post "),Bt=a("a"),zm=s("3D parallelism: Scaling to trillion-parameter models"),Nm=s(", which is a good read as well."),sh=p(),Fa=a("p"),Rm=s("Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),rh=p(),qa=a("p"),Zm=s("Implementations:"),nh=p(),D=a("ul"),Ba=a("li"),Wt=a("a"),Cm=s("DeepSpeed"),jm=s(" - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),Fm=p(),ns=a("li"),Vt=a("a"),qm=s("Megatron-LM"),Bm=p(),hs=a("li"),Ht=a("a"),Wm=s("Varuna"),Vm=p(),ps=a("li"),Xt=a("a"),Hm=s("SageMaker"),Xm=p(),fs=a("li"),Yt=a("a"),Ym=s("OSLO"),hh=p(),Wa=a("p"),Jm=s("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),ph=p(),he=a("h2"),$e=a("a"),ds=a("span"),v(Jt.$$.fragment),Km=p(),cs=a("span"),Qm=s("ZeRO DP+PP+TP"),fh=p(),xe=a("p"),ev=s("One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),Va=a("a"),tv=s("ZeRO Data Parallelism"),lv=s(". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),dh=p(),Ha=a("p"),av=s("When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),ch=p(),Xa=a("p"),iv=s("While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),uh=p(),ze=a("p"),ov=s("In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),us=a("code"),sv=s("1/PP"),rv=s(", and so gradient sharding savings on top of that are less significant than pure DP."),mh=p(),Ya=a("p"),nv=s("ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),vh=p(),Ja=a("p"),hv=s("And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),Ph=p(),Ka=a("p"),pv=s("Implementations:"),wh=p(),Ne=a("ul"),ms=a("li"),Kt=a("a"),fv=s("Megatron-DeepSpeed"),dv=p(),vs=a("li"),Qt=a("a"),cv=s("OSLO"),yh=p(),Qa=a("p"),uv=s("\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),bh=p(),pe=a("h2"),Re=a("a"),Ps=a("span"),v(el.$$.fragment),mv=p(),ws=a("span"),vv=s("FlexFlow"),_h=p(),tl=a("p"),ll=a("a"),Pv=s("FlexFlow"),wv=s(" also solves the parallelization problem in a slightly different approach."),Eh=p(),al=a("p"),yv=s("Paper: "),il=a("a"),bv=s("\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),gh=p(),ei=a("p"),_v=s("It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),Lh=p(),A=a("ol"),ys=a("li"),Ev=s("Sample = Data Parallelism (sample-wise parallel)"),gv=p(),bs=a("li"),Lv=s("Operator = Parallelize a single operation into several sub-operations"),Dv=p(),_s=a("li"),Gv=s("Attribute = Data Parallelism (length-wise parallel)"),Uv=p(),Es=a("li"),kv=s("Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),Dh=p(),ti=a("p"),Tv=s("Examples:"),Gh=p(),li=a("ul"),gs=a("li"),Iv=s("Sample"),Uh=p(),ai=a("p"),Sv=s("Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),kh=p(),ii=a("ul"),Ls=a("li"),Av=s("Operator"),Th=p(),oi=a("p"),Ov=s("If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),Ih=p(),si=a("ul"),Ds=a("li"),Mv=s("Attribute"),Sh=p(),ri=a("p"),$v=s("We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),Ah=p(),ni=a("ul"),Gs=a("li"),xv=s("Parameter"),Oh=p(),hi=a("p"),zv=s("It is similar with tensor model parallelism or naive layer-wise model parallelism."),Mh=p(),pi=a("p"),fi=a("img"),$h=p(),di=a("p"),Nv=s("The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),xh=p(),ci=a("p"),Rv=s("One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),zh=p(),ui=a("p"),Zv=s("So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),Nh=p(),Ze=a("p"),Cv=s("\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),ol=a("a"),jv=s("transformers.utils.fx"),Fv=s(", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Rh=p(),fe=a("h2"),Ce=a("a"),Us=a("span"),v(sl.$$.fragment),qv=p(),ks=a("span"),Bv=s("Which Strategy To Use When"),Zh=p(),mi=a("p"),Wv=s("Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),Ch=p(),vi=a("p"),Ts=a("strong"),Vv=s("\u21E8 Single GPU"),jh=p(),W=a("ul"),rl=a("li"),Is=a("p"),Hv=s("Model fits onto a single GPU:"),Xv=p(),Ss=a("ol"),As=a("li"),Yv=s("Normal use"),Jv=p(),nl=a("li"),Os=a("p"),Kv=s("Model doesn\u2019t fit onto a single GPU:"),Qv=p(),hl=a("ol"),Ms=a("li"),eP=s("ZeRO + Offload CPU and optionally NVMe"),tP=p(),$s=a("li"),lP=s("as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),aP=p(),xs=a("li"),zs=a("p"),iP=s("Largest Layer not fitting into a single GPU:"),Fh=p(),Pi=a("ol"),de=a("li"),oP=s("ZeRO - Enable "),pl=a("a"),sP=s("Memory Centric Tiling"),rP=s(" (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),Ns=a("code"),nP=s("torch.nn.Linear"),hP=s(" needs to be done by the user."),qh=p(),wi=a("p"),Rs=a("strong"),pP=s("\u21E8 Single Node / Multi-GPU"),Bh=p(),V=a("ul"),fl=a("li"),Zs=a("p"),fP=s("Model fits onto a single GPU:"),dP=p(),dl=a("ol"),Cs=a("li"),cP=s("DDP - Distributed DP"),uP=p(),js=a("li"),mP=s("ZeRO - may or may not be faster depending on the situation and configuration used"),vP=p(),cl=a("li"),Fs=a("p"),PP=s("Model doesn\u2019t fit onto a single GPU:"),wP=p(),ce=a("ol"),qs=a("li"),Bs=a("p"),yP=s("PP"),bP=p(),Ws=a("li"),Vs=a("p"),_P=s("ZeRO"),EP=p(),ue=a("li"),Hs=a("p"),gP=s("TP"),LP=p(),Xs=a("p"),DP=s("With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),GP=p(),Ys=a("p"),UP=s("TP is almost always used within a single node. That is TP size <= gpus per node."),kP=p(),ul=a("li"),Js=a("p"),TP=s("Largest Layer not fitting into a single GPU:"),IP=p(),ml=a("ol"),Ks=a("li"),SP=s("If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),AP=p(),Qs=a("li"),OP=s("With ZeRO see the same entry for \u201CSingle GPU\u201D above"),Wh=p(),yi=a("p"),er=a("strong"),MP=s("\u21E8 Multi-Node / Multi-GPU"),Vh=p(),je=a("ul"),vl=a("li"),tr=a("p"),$P=s("When you have fast inter-node connectivity:"),xP=p(),Pl=a("ol"),lr=a("li"),zP=s("ZeRO - as it requires close to no modifications to the model"),NP=p(),ar=a("li"),RP=s("PP+TP+DP - less communications, but requires massive changes to the model"),ZP=p(),wl=a("li"),ir=a("p"),CP=s("when you have slow inter-node connectivity and still low on GPU memory:"),jP=p(),or=a("ol"),sr=a("li"),FP=s("DP+PP+TP+ZeRO-1"),this.h()},l(e){const n=D_('[data-svelte="svelte-1phssyn"]',document.head);$=i(n,"META",{name:!0,content:!0}),n.forEach(t),yl=f(e),U=i(e,"H1",{class:!0});var Xh=o(U);M=i(Xh,"A",{id:!0,class:!0,href:!0});var y1=o(M);$i=i(y1,"SPAN",{});var b1=o($i);P(He.$$.fragment,b1),b1.forEach(t),y1.forEach(t),Zp=f(Xh),xi=i(Xh,"SPAN",{});var _1=o(xi);Cp=r(_1,"Model Parallelism"),_1.forEach(t),Xh.forEach(t),hr=f(e),Q=i(e,"H2",{class:!0});var Yh=o(Q);me=i(Yh,"A",{id:!0,class:!0,href:!0});var E1=o(me);zi=i(E1,"SPAN",{});var g1=o(zi);P(Xe.$$.fragment,g1),g1.forEach(t),E1.forEach(t),jp=f(Yh),Ni=i(Yh,"SPAN",{});var L1=o(Ni);Fp=r(L1,"Parallelism overview"),L1.forEach(t),Yh.forEach(t),pr=f(e),bl=i(e,"P",{});var D1=o(bl);qp=r(D1,"In the modern machine learning the various approaches to parallelism are used to:"),D1.forEach(t),fr=f(e),ve=i(e,"OL",{});var Jh=o(ve);Ri=i(Jh,"LI",{});var G1=o(Ri);Bp=r(G1,"fit very large models onto limited hardware - e.g. t5-11b is 45GB in just model params"),G1.forEach(t),Wp=f(Jh),Zi=i(Jh,"LI",{});var U1=o(Zi);Vp=r(U1,"significantly speed up training - finish training that would take a year in hours"),U1.forEach(t),Jh.forEach(t),dr=f(e),_l=i(e,"P",{});var k1=o(_l);Hp=r(k1,"We will first discuss in depth various 1D parallelism techniques and their pros and cons and then look at how they can be combined into 2D and 3D parallelism to enable an even faster training and to support even bigger models. Various other powerful alternative approaches will be presented."),k1.forEach(t),cr=f(e),El=i(e,"P",{});var T1=o(El);Xp=r(T1,"While the main concepts most likely will apply to any other framework, this article is focused on PyTorch-based implementations."),T1.forEach(t),ur=f(e),ee=i(e,"H2",{class:!0});var Kh=o(ee);Pe=i(Kh,"A",{id:!0,class:!0,href:!0});var I1=o(Pe);Ci=i(I1,"SPAN",{});var S1=o(Ci);P(Ye.$$.fragment,S1),S1.forEach(t),I1.forEach(t),Yp=f(Kh),ji=i(Kh,"SPAN",{});var A1=o(ji);Jp=r(A1,"Concepts"),A1.forEach(t),Kh.forEach(t),mr=f(e),gl=i(e,"P",{});var O1=o(gl);Kp=r(O1,"The following is the brief description of the main concepts that will be described later in depth in this document."),O1.forEach(t),vr=f(e),E=i(e,"OL",{});var H=o(E);Fi=i(H,"LI",{});var M1=o(Fi);Qp=r(M1,"DataParallel (DP) - the same setup is replicated multiple times, and each being fed a slice of the data. The processing is done in parallel and all setups are synchronized at the end of each training step."),M1.forEach(t),ef=f(H),qi=i(H,"LI",{});var $1=o(qi);tf=r($1,"TensorParallel (TP) - each tensor is split up into multiple chunks, so instead of having the whole tensor reside on a single gpu, each shard of the tensor resides on its designated gpu. During processing each shard gets processed separately and in parallel on different GPUs and the results are synced at the end of the step. This is what one may call horizontal parallelism, as the splitting happens on horizontal level."),$1.forEach(t),lf=f(H),Bi=i(H,"LI",{});var x1=o(Bi);af=r(x1,"PipelineParallel (PP) - the model is split up vertically (layer-level) across multiple GPUs, so that only one or several layers of the model are places on a single gpu. Each gpu processes in parallel different stages of the pipeline and working on a small chunk of the batch."),x1.forEach(t),of=f(H),Wi=i(H,"LI",{});var z1=o(Wi);sf=r(z1,"Zero Redundancy Optimizer (ZeRO) - Also performs sharding of the tensors somewhat similar to TP, except the whole tensor gets reconstructed in time for a forward or backward computation, therefore the model doesn\u2019t need to be modified. It also supports various offloading techniques to compensate for limited GPU memory."),z1.forEach(t),rf=f(H),Vi=i(H,"LI",{});var N1=o(Vi);nf=r(N1,"Sharded DDP - is another name for the foundational ZeRO concept as used by various other implementations of ZeRO."),N1.forEach(t),H.forEach(t),Pr=f(e),te=i(e,"H2",{class:!0});var Qh=o(te);we=i(Qh,"A",{id:!0,class:!0,href:!0});var R1=o(we);Hi=i(R1,"SPAN",{});var Z1=o(Hi);P(Je.$$.fragment,Z1),Z1.forEach(t),R1.forEach(t),hf=f(Qh),Xi=i(Qh,"SPAN",{});var C1=o(Xi);pf=r(C1,"Data Parallelism"),C1.forEach(t),Qh.forEach(t),wr=f(e),x=i(e,"P",{});var bi=o(x);ff=r(bi,"Most users with just 2 GPUs already enjoy the increased training speed up thanks to "),Yi=i(bi,"CODE",{});var j1=o(Yi);df=r(j1,"DataParallel"),j1.forEach(t),cf=r(bi," (DP) and "),Ji=i(bi,"CODE",{});var F1=o(Ji);uf=r(F1,"DistributedDataParallel"),F1.forEach(t),mf=r(bi," (DDP) that are almost trivial to use. This is a built-in feature of Pytorch."),bi.forEach(t),yr=f(e),le=i(e,"H2",{class:!0});var ep=o(le);ye=i(ep,"A",{id:!0,class:!0,href:!0});var q1=o(ye);Ki=i(q1,"SPAN",{});var B1=o(Ki);P(Ke.$$.fragment,B1),B1.forEach(t),q1.forEach(t),vf=f(ep),Qi=i(ep,"SPAN",{});var W1=o(Qi);Pf=r(W1,"ZeRO Data Parallelism"),W1.forEach(t),ep.forEach(t),br=f(e),ae=i(e,"P",{});var rr=o(ae);wf=r(rr,"ZeRO-powered data parallelism (ZeRO-DP) is described on the following diagram from this "),Qe=i(rr,"A",{href:!0,rel:!0});var V1=o(Qe);yf=r(V1,"blog post"),V1.forEach(t),bf=f(rr),Ll=i(rr,"IMG",{src:!0,alt:!0}),rr.forEach(t),_r=f(e),be=i(e,"P",{});var tp=o(be);_f=r(tp,"It can be difficult to wrap one\u2019s head around it, but in reality the concept is quite simple. This is just the usual "),eo=i(tp,"CODE",{});var H1=o(eo);Ef=r(H1,"DataParallel"),H1.forEach(t),gf=r(tp," (DP), except, instead of replicating the full model params, gradients and optimizer states, each GPU stores only a slice of it.  And then at run-time when the full layer params are needed just for the given layer, all GPUs synchronize to give each other parts that they miss - this is it."),tp.forEach(t),Er=f(e),Dl=i(e,"P",{});var X1=o(Dl);Lf=r(X1,"Consider this simple model with 3 layers, where each layer has 3 params:"),X1.forEach(t),gr=f(e),P(et.$$.fragment,e),Lr=f(e),Gl=i(e,"P",{});var Y1=o(Gl);Df=r(Y1,"Layer La has weights a0, a1 and a2."),Y1.forEach(t),Dr=f(e),Ul=i(e,"P",{});var J1=o(Ul);Gf=r(J1,"If we have 3 GPUs, the Sharded DDP (= Zero-DP) splits the model onto 3 GPUs like so:"),J1.forEach(t),Gr=f(e),P(tt.$$.fragment,e),Ur=f(e),kl=i(e,"P",{});var K1=o(kl);Uf=r(K1,"In a way this is the same horizontal slicing, as tensor parallelism, if you imagine the typical DNN diagram. Vertical slicing is where one puts whole layer-groups on different GPUs. But it\u2019s just the starting point."),K1.forEach(t),kr=f(e),Tl=i(e,"P",{});var Q1=o(Tl);kf=r(Q1,"Now each of these GPUs will get the usual mini-batch as it works in DP:"),Q1.forEach(t),Tr=f(e),P(lt.$$.fragment,e),Ir=f(e),Il=i(e,"P",{});var ew=o(Il);Tf=r(ew,"The inputs are unmodified - they think they are going to be processed by the normal model."),ew.forEach(t),Sr=f(e),Sl=i(e,"P",{});var tw=o(Sl);If=r(tw,"First, the inputs hit the layer La."),tw.forEach(t),Ar=f(e),Al=i(e,"P",{});var lw=o(Al);Sf=r(lw,"Let\u2019s focus just on GPU0: x0 needs a0, a1, a2 params to do its forward path, but GPU0 has only a0 - it gets sent a1 from GPU1 and a2 from GPU2, bringing all pieces of the model together."),lw.forEach(t),Or=f(e),Ol=i(e,"P",{});var aw=o(Ol);Af=r(aw,"In parallel, GPU1 gets mini-batch x1 and it only has a1, but needs a0 and a2 params, so it gets those from GPU0 and GPU2."),aw.forEach(t),Mr=f(e),Ml=i(e,"P",{});var iw=o(Ml);Of=r(iw,"Same happens to GPU2 that gets input x2. It gets a0 and a1 from GPU0 and GPU1, and with its a2 it reconstructs the full tensor."),iw.forEach(t),$r=f(e),$l=i(e,"P",{});var ow=o($l);Mf=r(ow,"All 3 GPUs get the full tensors reconstructed and a forward happens."),ow.forEach(t),xr=f(e),xl=i(e,"P",{});var sw=o(xl);$f=r(sw,"As soon as the calculation is done, the data that is no longer needed gets dropped - it\u2019s only used during the calculation. The reconstruction is done efficiently via a pre-fetch."),sw.forEach(t),zr=f(e),zl=i(e,"P",{});var rw=o(zl);xf=r(rw,"And the whole process is repeated for layer Lb, then Lc forward-wise, and then backward Lc -> Lb -> La."),rw.forEach(t),Nr=f(e),Nl=i(e,"P",{});var nw=o(Nl);zf=r(nw,"To me this sounds like an efficient group backpacking weight distribution strategy:"),nw.forEach(t),Rr=f(e),z=i(e,"OL",{});var _i=o(z);to=i(_i,"LI",{});var hw=o(to);Nf=r(hw,"person A carries the tent"),hw.forEach(t),Rf=f(_i),lo=i(_i,"LI",{});var pw=o(lo);Zf=r(pw,"person B carries the stove"),pw.forEach(t),Cf=f(_i),ao=i(_i,"LI",{});var fw=o(ao);jf=r(fw,"person C carries the axe"),fw.forEach(t),_i.forEach(t),Zr=f(e),Rl=i(e,"P",{});var dw=o(Rl);Ff=r(dw,"Now each night they all share what they have with others and get from others what they don\u2019t have, and in the morning they pack up their allocated type of gear and continue on their way. This is Sharded DDP / Zero DP."),dw.forEach(t),Cr=f(e),Zl=i(e,"P",{});var cw=o(Zl);qf=r(cw,"Compare this strategy to the simple one where each person has to carry their own tent, stove and axe, which would be far more inefficient. This is DataParallel (DP and DDP) in Pytorch."),cw.forEach(t),jr=f(e),Cl=i(e,"P",{});var uw=o(Cl);Bf=r(uw,"While reading the literature on this topic you may encounter the following synonyms: Sharded, Partitioned."),uw.forEach(t),Fr=f(e),jl=i(e,"P",{});var mw=o(jl);Wf=r(mw,"If you pay close attention the way ZeRO partitions the model\u2019s weights - it looks very similar to tensor parallelism which will be discussed later. This is because it partitions/shards each layer\u2019s weights, unlike vertical model parallelism which is discussed next."),mw.forEach(t),qr=f(e),Fl=i(e,"P",{});var vw=o(Fl);Vf=r(vw,"Implementations:"),vw.forEach(t),Br=f(e),N=i(e,"UL",{});var Ei=o(N);ql=i(Ei,"LI",{});var qP=o(ql);at=i(qP,"A",{href:!0,rel:!0});var Pw=o(at);Hf=r(Pw,"DeepSpeed"),Pw.forEach(t),Xf=r(qP," ZeRO-DP stages 1+2+3"),qP.forEach(t),Yf=f(Ei),Bl=i(Ei,"LI",{});var BP=o(Bl);it=i(BP,"A",{href:!0,rel:!0});var ww=o(it);Jf=r(ww,"Fairscale"),ww.forEach(t),Kf=r(BP," ZeRO-DP stages 1+2+3"),BP.forEach(t),Qf=f(Ei),io=i(Ei,"LI",{});var yw=o(io);ot=i(yw,"A",{href:!0});var WP=o(ot);oo=i(WP,"CODE",{});var bw=o(oo);ed=r(bw,"transformers"),bw.forEach(t),td=r(WP," integration"),WP.forEach(t),yw.forEach(t),Ei.forEach(t),Wr=f(e),ie=i(e,"H2",{class:!0});var lp=o(ie);_e=i(lp,"A",{id:!0,class:!0,href:!0});var _w=o(_e);so=i(_w,"SPAN",{});var Ew=o(so);P(st.$$.fragment,Ew),Ew.forEach(t),_w.forEach(t),ld=f(lp),ro=i(lp,"SPAN",{});var gw=o(ro);ad=r(gw,"Naive Model Parallelism (Vertical) and Pipeline Parallelism"),gw.forEach(t),lp.forEach(t),Vr=f(e),Ee=i(e,"P",{});var ap=o(Ee);id=r(ap,"Naive Model Parallelism (MP) is where one spreads groups of model layers across multiple GPUs. The mechanism is relatively simple - switch the desired layers "),no=i(ap,"CODE",{});var Lw=o(no);od=r(Lw,".to()"),Lw.forEach(t),sd=r(ap," the desired devices and now whenever the data goes in and out those layers switch the data to the same device as the layer and leave the rest unmodified."),ap.forEach(t),Hr=f(e),Wl=i(e,"P",{});var Dw=o(Wl);rd=r(Dw,"We refer to it as Vertical MP, because if you remember how most models are drawn, we slice the layers vertically. For example, if the following diagram shows an 8-layer model:"),Dw.forEach(t),Xr=f(e),P(rt.$$.fragment,e),Yr=f(e),Vl=i(e,"P",{});var Gw=o(Vl);nd=r(Gw,"we just sliced it in 2 vertically, placing layers 0-3 onto GPU0 and 4-7 to GPU1."),Gw.forEach(t),Jr=f(e),Hl=i(e,"P",{});var Uw=o(Hl);hd=r(Uw,"Now while data travels from layer 0 to 1, 1 to 2 and 2 to 3 this is just the normal model. But when data needs to pass from layer 3 to layer 4 it needs to travel from GPU0 to GPU1 which introduces a communication overhead. If the participating GPUs are on the same compute node (e.g. same physical machine) this copying is pretty fast, but if the GPUs are located on different compute nodes (e.g. multiple machines) the communication overhead could be significantly larger."),Uw.forEach(t),Kr=f(e),Xl=i(e,"P",{});var kw=o(Xl);pd=r(kw,"Then layers 4 to 5 to 6 to 7 are as a normal model would have and when the 7th layer completes we often need to send the data back to layer 0 where the labels are (or alternatively send the labels to the last layer). Now the loss can be computed and the optimizer can do its work."),kw.forEach(t),Qr=f(e),Yl=i(e,"P",{});var Tw=o(Yl);fd=r(Tw,"Problems:"),Tw.forEach(t),en=f(e),ge=i(e,"UL",{});var ip=o(ge);ho=i(ip,"LI",{});var Iw=o(ho);dd=r(Iw,"the main deficiency and why this one is called \u201Cnaive\u201D MP, is that all but one GPU is idle at any given moment. So if 4 GPUs are used, it\u2019s almost identical to quadrupling the amount of memory of a single GPU, and ignoring the rest of the hardware. Plus there is the overhead of copying the data between devices. So 4x 6GB cards will be able to accommodate the same size as 1x 24GB card using naive MP, except the latter will complete the training faster, since it doesn\u2019t have the data copying overhead. But, say, if you have 40GB cards and need to fit a 45GB model you can with 4x 40GB cards (but barely because of the gradient and optimizer states)"),Iw.forEach(t),cd=f(ip),po=i(ip,"LI",{});var Sw=o(po);ud=r(Sw,"shared embeddings may need to get copied back and forth between GPUs."),Sw.forEach(t),ip.forEach(t),tn=f(e),Jl=i(e,"P",{});var Aw=o(Jl);md=r(Aw,"Pipeline Parallelism (PP) is almost identical to a naive MP, but it solves the GPU idling problem, by chunking the incoming batch into micro-batches and artificially creating a pipeline, which allows different GPUs to concurrently participate in the computation process."),Aw.forEach(t),ln=f(e),Le=i(e,"P",{});var op=o(Le);vd=r(op,"The following illustration from the "),nt=i(op,"A",{href:!0,rel:!0});var Ow=o(nt);Pd=r(Ow,"GPipe paper"),Ow.forEach(t),wd=r(op," shows the naive MP on the top, and PP on the bottom:"),op.forEach(t),an=f(e),Kl=i(e,"P",{});var Mw=o(Kl);Ql=i(Mw,"IMG",{src:!0,alt:!0}),Mw.forEach(t),on=f(e),ea=i(e,"P",{});var $w=o(ea);yd=r($w,"It\u2019s easy to see from the bottom diagram how PP has less dead zones, where GPUs are idle. The idle parts are referred to as the \u201Cbubble\u201D."),$w.forEach(t),sn=f(e),ta=i(e,"P",{});var xw=o(ta);bd=r(xw,"Both parts of the diagram show a parallelism that is of degree 4. That is 4 GPUs are participating in the pipeline. So there is the forward path of 4 pipe stages F0, F1, F2 and F3 and then the return reverse order backward path of B3, B2, B1 and B0."),xw.forEach(t),rn=f(e),R=i(e,"P",{});var gi=o(R);_d=r(gi,"PP introduces a new hyper-parameter to tune and it\u2019s "),fo=i(gi,"CODE",{});var zw=o(fo);Ed=r(zw,"chunks"),zw.forEach(t),gd=r(gi," which defines how many chunks of data are sent in a sequence through the same pipe stage. For example, in the bottomw diagram you can see that "),co=i(gi,"CODE",{});var Nw=o(co);Ld=r(Nw,"chunks=4"),Nw.forEach(t),Dd=r(gi,". GPU0 performs the same forward path on chunk 0, 1, 2 and 3 (F0,0, F0,1, F0,2, F0,3) and then it waits for other GPUs to do their work and only when their work is starting to be complete, GPU0 starts to work again doing the backward path for chunks 3, 2, 1 and 0 (B0,3, B0,2, B0,1, B0,0)."),gi.forEach(t),nn=f(e),De=i(e,"P",{});var sp=o(De);Gd=r(sp,"Note that conceptually this is the same concept as gradient accumulation steps (GAS). Pytorch uses "),uo=i(sp,"CODE",{});var Rw=o(uo);Ud=r(Rw,"chunks"),Rw.forEach(t),kd=r(sp,", whereas DeepSpeed refers to the same hyper-parameter as GAS."),sp.forEach(t),hn=f(e),Ge=i(e,"P",{});var rp=o(Ge);Td=r(rp,"Because of the chunks, PP introduces the concept of micro-batches (MBS). DP splits the global data batch size into mini-batches, so if you have a DP degree of 4, a global batch size of 1024 gets split up into 4 mini-batches of 256 each (1024/4). And if the number of "),mo=i(rp,"CODE",{});var Zw=o(mo);Id=r(Zw,"chunks"),Zw.forEach(t),Sd=r(rp," (or GAS) is 32 we end up with a micro-batch size of 8 (256/32). Each Pipeline stage works with a single micro-batch at a time."),rp.forEach(t),pn=f(e),Z=i(e,"P",{});var Li=o(Z);Ad=r(Li,"To calculate the global batch size of the DP + PP setup we then do: "),vo=i(Li,"CODE",{});var Cw=o(vo);Od=r(Cw,"mbs*chunks*dp_degree"),Cw.forEach(t),Md=r(Li," ("),Po=i(Li,"CODE",{});var jw=o(Po);$d=r(jw,"8*32*4=1024"),jw.forEach(t),xd=r(Li,")."),Li.forEach(t),fn=f(e),la=i(e,"P",{});var Fw=o(la);zd=r(Fw,"Let\u2019s go back to the diagram."),Fw.forEach(t),dn=f(e),C=i(e,"P",{});var Di=o(C);Nd=r(Di,"With "),wo=i(Di,"CODE",{});var qw=o(wo);Rd=r(qw,"chunks=1"),qw.forEach(t),Zd=r(Di," you end up with the naive MP, which is very inefficient. With a very large "),yo=i(Di,"CODE",{});var Bw=o(yo);Cd=r(Bw,"chunks"),Bw.forEach(t),jd=r(Di," value you end up with tiny micro-batch sizes which could be not every efficient either. So one has to experiment to find the value that leads to the highest efficient utilization of the gpus."),Di.forEach(t),cn=f(e),k=i(e,"P",{});var Fe=o(k);Fd=r(Fe,"While the diagram shows that there is a bubble of \u201Cdead\u201D time that can\u2019t be parallelized because the last "),bo=i(Fe,"CODE",{});var Ww=o(bo);qd=r(Ww,"forward"),Ww.forEach(t),Bd=r(Fe," stage has to wait for "),_o=i(Fe,"CODE",{});var Vw=o(_o);Wd=r(Vw,"backward"),Vw.forEach(t),Vd=r(Fe," to complete the pipeline, the purpose of finding the best value for "),Eo=i(Fe,"CODE",{});var Hw=o(Eo);Hd=r(Hw,"chunks"),Hw.forEach(t),Xd=r(Fe," is to enable a high concurrent GPU utilization across all participating GPUs which translates to minimizing the size of the bubble."),Fe.forEach(t),un=f(e),aa=i(e,"P",{});var Xw=o(aa);Yd=r(Xw,"There are 2 groups of solutions - the traditional Pipeline API and the more modern solutions that make things much easier for the end user."),Xw.forEach(t),mn=f(e),ia=i(e,"P",{});var Yw=o(ia);Jd=r(Yw,"Traditional Pipeline API solutions:"),Yw.forEach(t),vn=f(e),T=i(e,"UL",{});var qe=o(T);go=i(qe,"LI",{});var Jw=o(go);Kd=r(Jw,"PyTorch"),Jw.forEach(t),Qd=f(qe),Lo=i(qe,"LI",{});var Kw=o(Lo);ec=r(Kw,"FairScale"),Kw.forEach(t),tc=f(qe),Do=i(qe,"LI",{});var Qw=o(Do);lc=r(Qw,"DeepSpeed"),Qw.forEach(t),ac=f(qe),Go=i(qe,"LI",{});var ey=o(Go);ic=r(ey,"Megatron-LM"),ey.forEach(t),qe.forEach(t),Pn=f(e),oa=i(e,"P",{});var ty=o(oa);oc=r(ty,"Modern solutions:"),ty.forEach(t),wn=f(e),Ue=i(e,"UL",{});var np=o(Ue);Uo=i(np,"LI",{});var ly=o(Uo);sc=r(ly,"Varuna"),ly.forEach(t),rc=f(np),ko=i(np,"LI",{});var ay=o(ko);nc=r(ay,"Sagemaker"),ay.forEach(t),np.forEach(t),yn=f(e),sa=i(e,"P",{});var iy=o(sa);hc=r(iy,"Problems with traditional Pipeline API solutions:"),iy.forEach(t),bn=f(e),I=i(e,"UL",{});var Be=o(I);ht=i(Be,"LI",{});var hp=o(ht);pc=r(hp,"have to modify the model quite heavily, because Pipeline requires one to rewrite the normal flow of modules into a "),To=i(hp,"CODE",{});var oy=o(To);fc=r(oy,"nn.Sequential"),oy.forEach(t),dc=r(hp," sequence of the same, which may require changes to the design of the model."),hp.forEach(t),cc=f(Be),ra=i(Be,"LI",{});var VP=o(ra);uc=r(VP,"currently the Pipeline API is very restricted. If you had a bunch of python variables being passed in the very first stage of the Pipeline, you will have to find a way around it. Currently, the pipeline interface requires either a single Tensor or a tuple of Tensors as the only input and output. These tensors must have a batch size as the very first dimension, since pipeline is going to chunk the mini batch into micro-batches. Possible improvements are being discussed here "),pt=i(VP,"A",{href:!0,rel:!0});var sy=o(pt);mc=r(sy,"https://github.com/pytorch/pytorch/pull/50693"),sy.forEach(t),VP.forEach(t),vc=f(Be),Io=i(Be,"LI",{});var ry=o(Io);Pc=r(ry,"conditional control flow at the level of pipe stages is not possible - e.g., Encoder-Decoder models like T5 require special workarounds to handle a conditional encoder stage."),ry.forEach(t),wc=f(Be),So=i(Be,"LI",{});var ny=o(So);yc=r(ny,"have to arrange each layer so that the output of one model becomes an input to the other model."),ny.forEach(t),Be.forEach(t),_n=f(e),na=i(e,"P",{});var hy=o(na);bc=r(hy,"We are yet to experiment with Varuna and SageMaker but their papers report that they have overcome the list of problems mentioned above and that they require much smaller changes to the user\u2019s model."),hy.forEach(t),En=f(e),ha=i(e,"P",{});var py=o(ha);_c=r(py,"Implementations:"),py.forEach(t),gn=f(e),u=i(e,"UL",{});var G=o(u);ft=i(G,"LI",{});var pp=o(ft);dt=i(pp,"A",{href:!0,rel:!0});var fy=o(dt);Ec=r(fy,"Pytorch"),fy.forEach(t),gc=r(pp," (initial support in pytorch-1.8, and progressively getting improved in 1.9 and more so in 1.10). Some "),ct=i(pp,"A",{href:!0,rel:!0});var dy=o(ct);Lc=r(dy,"examples"),dy.forEach(t),pp.forEach(t),Dc=f(G),Ao=i(G,"LI",{});var cy=o(Ao);ut=i(cy,"A",{href:!0,rel:!0});var uy=o(ut);Gc=r(uy,"FairScale"),uy.forEach(t),cy.forEach(t),Uc=f(G),Oo=i(G,"LI",{});var my=o(Oo);mt=i(my,"A",{href:!0,rel:!0});var vy=o(mt);kc=r(vy,"DeepSpeed"),vy.forEach(t),my.forEach(t),Tc=f(G),pa=i(G,"LI",{});var HP=o(pa);vt=i(HP,"A",{href:!0,rel:!0});var Py=o(vt);Ic=r(Py,"Megatron-LM"),Py.forEach(t),Sc=r(HP," has an internal implementation - no API."),HP.forEach(t),Ac=f(G),Mo=i(G,"LI",{});var wy=o(Mo);Pt=i(wy,"A",{href:!0,rel:!0});var yy=o(Pt);Oc=r(yy,"Varuna"),yy.forEach(t),wy.forEach(t),Mc=f(G),fa=i(G,"LI",{});var XP=o(fa);wt=i(XP,"A",{href:!0,rel:!0});var by=o(wt);$c=r(by,"SageMaker"),by.forEach(t),xc=r(XP," - this is a proprietary solution that can only be used on AWS."),XP.forEach(t),zc=f(G),da=i(G,"LI",{});var YP=o(da);yt=i(YP,"A",{href:!0,rel:!0});var _y=o(yt);Nc=r(_y,"OSLO"),_y.forEach(t),Rc=r(YP," - this is implemented based on the Hugging Face Transformers."),YP.forEach(t),G.forEach(t),Ln=f(e),ke=i(e,"P",{});var fp=o(ke);Zc=r(fp,"\u{1F917} Transformers status: as of this writing none of the models supports full-PP. GPT2 and T5 models have naive MP support. The main obstacle is being unable to convert the models to "),$o=i(fp,"CODE",{});var Ey=o($o);Cc=r(Ey,"nn.Sequential"),Ey.forEach(t),jc=r(fp," and have all the inputs to be Tensors. This is because currently the models include many features that make the conversion very complicated, and will need to be removed to accomplish that."),fp.forEach(t),Dn=f(e),ca=i(e,"P",{});var gy=o(ca);Fc=r(gy,"Other approaches:"),gy.forEach(t),Gn=f(e),oe=i(e,"P",{});var nr=o(oe);qc=r(nr,"DeepSpeed, Varuna and SageMaker use the concept of an "),bt=i(nr,"A",{href:!0,rel:!0});var Ly=o(bt);Bc=r(Ly,"Interleaved Pipeline"),Ly.forEach(t),Wc=f(nr),ua=i(nr,"IMG",{src:!0,alt:!0}),nr.forEach(t),Un=f(e),ma=i(e,"P",{});var Dy=o(ma);Vc=r(Dy,"Here the bubble (idle time) is further minimized by prioritizing backward passes."),Dy.forEach(t),kn=f(e),va=i(e,"P",{});var Gy=o(va);Hc=r(Gy,"Varuna further tries to improve the schedule by using simulations to discover the most efficient scheduling."),Gy.forEach(t),Tn=f(e),Te=i(e,"P",{});var dp=o(Te);Xc=r(dp,"OSLO has pipeline parallelism implementation based on the Transformers without "),xo=i(dp,"CODE",{});var Uy=o(xo);Yc=r(Uy,"nn.Sequential"),Uy.forEach(t),Jc=r(dp," converting."),dp.forEach(t),In=f(e),se=i(e,"H2",{class:!0});var cp=o(se);Ie=i(cp,"A",{id:!0,class:!0,href:!0});var ky=o(Ie);zo=i(ky,"SPAN",{});var Ty=o(zo);P(_t.$$.fragment,Ty),Ty.forEach(t),ky.forEach(t),Kc=f(cp),No=i(cp,"SPAN",{});var Iy=o(No);Qc=r(Iy,"Tensor Parallelism"),Iy.forEach(t),cp.forEach(t),Sn=f(e),Pa=i(e,"P",{});var Sy=o(Pa);eu=r(Sy,"In Tensor Parallelism each GPU processes only a slice of a tensor and only aggregates the full tensor for operations that require the whole thing."),Sy.forEach(t),An=f(e),j=i(e,"P",{});var Gi=o(j);tu=r(Gi,"In this section we use concepts and diagrams from the "),Et=i(Gi,"A",{href:!0,rel:!0});var Ay=o(Et);lu=r(Ay,"Megatron-LM"),Ay.forEach(t),au=r(Gi," paper: "),gt=i(Gi,"A",{href:!0,rel:!0});var Oy=o(gt);iu=r(Oy,"Efficient Large-Scale Language Model Training on GPU Clusters"),Oy.forEach(t),ou=r(Gi,"."),Gi.forEach(t),On=f(e),F=i(e,"P",{});var Ui=o(F);su=r(Ui,"The main building block of any transformer is a fully connected "),Ro=i(Ui,"CODE",{});var My=o(Ro);ru=r(My,"nn.Linear"),My.forEach(t),nu=r(Ui," followed by a nonlinear activation "),Zo=i(Ui,"CODE",{});var $y=o(Zo);hu=r($y,"GeLU"),$y.forEach(t),pu=r(Ui,"."),Ui.forEach(t),Mn=f(e),g=i(e,"P",{});var X=o(g);fu=r(X,"Following the Megatron\u2019s paper notation, we can write the dot-product part of it as "),Co=i(X,"CODE",{});var xy=o(Co);du=r(xy,"Y = GeLU(XA)"),xy.forEach(t),cu=r(X,", where "),jo=i(X,"CODE",{});var zy=o(jo);uu=r(zy,"X"),zy.forEach(t),mu=r(X," and "),Fo=i(X,"CODE",{});var Ny=o(Fo);vu=r(Ny,"Y"),Ny.forEach(t),Pu=r(X," are the input and output vectors, and "),qo=i(X,"CODE",{});var Ry=o(qo);wu=r(Ry,"A"),Ry.forEach(t),yu=r(X," is the weight matrix."),X.forEach(t),$n=f(e),Lt=i(e,"P",{});var JP=o(Lt);bu=r(JP,`If we look at the computation in matrix form, it\u2019s easy to see how the matrix multiplication can be split between multiple GPUs:
`),wa=i(JP,"IMG",{src:!0,alt:!0}),JP.forEach(t),xn=f(e),c=i(e,"P",{});var m=o(c);_u=r(m,"If we split the weight matrix "),Bo=i(m,"CODE",{});var Zy=o(Bo);Eu=r(Zy,"A"),Zy.forEach(t),gu=r(m," column-wise across "),Wo=i(m,"CODE",{});var Cy=o(Wo);Lu=r(Cy,"N"),Cy.forEach(t),Du=r(m," GPUs and perform matrix multiplications "),Vo=i(m,"CODE",{});var jy=o(Vo);Gu=r(jy,"XA_1"),jy.forEach(t),Uu=r(m," through "),Ho=i(m,"CODE",{});var Fy=o(Ho);ku=r(Fy,"XA_n"),Fy.forEach(t),Tu=r(m," in parallel, then we will end up with "),Xo=i(m,"CODE",{});var qy=o(Xo);Iu=r(qy,"N"),qy.forEach(t),Su=r(m," output vectors "),Yo=i(m,"CODE",{});var By=o(Yo);Au=r(By,"Y_1, Y_2, ..., Y_n"),By.forEach(t),Ou=r(m," which can be fed into "),Jo=i(m,"CODE",{});var Wy=o(Jo);Mu=r(Wy,"GeLU"),Wy.forEach(t),$u=r(m,` independently:
`),ya=i(m,"IMG",{src:!0,alt:!0}),m.forEach(t),zn=f(e),Dt=i(e,"P",{});var KP=o(Dt);xu=r(KP,`Using this principle, we can update an MLP of arbitrary depth, without the need for any synchronization between GPUs until the very end, where we need to reconstruct the output vector from shards. The Megatron-LM paper authors provide a helpful illustration for that:
`),ba=i(KP,"IMG",{src:!0,alt:!0}),KP.forEach(t),Nn=f(e),Gt=i(e,"P",{});var QP=o(Gt);zu=r(QP,`Parallelizing the multi-headed attention layers is even simpler, since they are already inherently parallel, due to having multiple independent heads!
`),_a=i(QP,"IMG",{src:!0,alt:!0}),QP.forEach(t),Rn=f(e),Ea=i(e,"P",{});var Vy=o(Ea);Nu=r(Vy,"Special considerations: TP requires very fast network, and therefore it\u2019s not advisable to do TP across more than one node. Practically, if a node has 4 GPUs, the highest TP degree is therefore 4. If you need a TP degree of 8, you need to use nodes that have at least 8 GPUs."),Vy.forEach(t),Zn=f(e),q=i(e,"P",{});var ki=o(q);Ru=r(ki,"This section is based on the original much more "),Ut=i(ki,"A",{href:!0,rel:!0});var Hy=o(Ut);Zu=r(Hy,"detailed TP overview"),Hy.forEach(t),Cu=r(ki,`.
by `),kt=i(ki,"A",{href:!0,rel:!0});var Xy=o(kt);ju=r(Xy,"@anton-l"),Xy.forEach(t),Fu=r(ki,"."),ki.forEach(t),Cn=f(e),ga=i(e,"P",{});var Yy=o(ga);qu=r(Yy,"SageMaker combines TP with DP for a more efficient processing."),Yy.forEach(t),jn=f(e),La=i(e,"P",{});var Jy=o(La);Bu=r(Jy,"Alternative names:"),Jy.forEach(t),Fn=f(e),Da=i(e,"UL",{});var Ky=o(Da);Ga=i(Ky,"LI",{});var e1=o(Ga);Wu=r(e1,"DeepSpeed calls it "),Tt=i(e1,"A",{href:!0,rel:!0});var Qy=o(Tt);Vu=r(Qy,"tensor slicing"),Qy.forEach(t),e1.forEach(t),Ky.forEach(t),qn=f(e),Ua=i(e,"P",{});var e2=o(Ua);Hu=r(e2,"Implementations:"),e2.forEach(t),Bn=f(e),S=i(e,"UL",{});var We=o(S);ka=i(We,"LI",{});var t1=o(ka);It=i(t1,"A",{href:!0,rel:!0});var t2=o(It);Xu=r(t2,"Megatron-LM"),t2.forEach(t),Yu=r(t1," has an internal implementation, as it\u2019s very model-specific"),t1.forEach(t),Ju=f(We),Ta=i(We,"LI",{});var l1=o(Ta);St=i(l1,"A",{href:!0,rel:!0});var l2=o(St);Ku=r(l2,"parallelformers"),l2.forEach(t),Qu=r(l1," (only inference at the moment)"),l1.forEach(t),em=f(We),Ia=i(We,"LI",{});var a1=o(Ia);At=i(a1,"A",{href:!0,rel:!0});var a2=o(At);tm=r(a2,"SageMaker"),a2.forEach(t),lm=r(a1," - this is a proprietary solution that can only be used on AWS."),a1.forEach(t),am=f(We),Sa=i(We,"LI",{});var i1=o(Sa);Ot=i(i1,"A",{href:!0,rel:!0});var i2=o(Ot);im=r(i2,"OSLO"),i2.forEach(t),om=r(i1," has the tensor parallelism implementation based on the Transformers."),i1.forEach(t),We.forEach(t),Wn=f(e),Aa=i(e,"P",{});var o2=o(Aa);sm=r(o2,"\u{1F917} Transformers status:"),o2.forEach(t),Vn=f(e),B=i(e,"UL",{});var Ti=o(B);Ko=i(Ti,"LI",{});var s2=o(Ko);rm=r(s2,"core: not yet implemented in the core"),s2.forEach(t),nm=f(Ti),Mt=i(Ti,"LI",{});var up=o(Mt);hm=r(up,"but if you want inference "),$t=i(up,"A",{href:!0,rel:!0});var r2=o($t);pm=r(r2,"parallelformers"),r2.forEach(t),fm=r(up," provides this support for most of our models. So until this is implemented in the core you can use theirs. And hopefully training mode will be supported too."),up.forEach(t),dm=f(Ti),Oa=i(Ti,"LI",{});var o1=o(Oa);cm=r(o1,"Deepspeed-Inference also supports our BERT, GPT-2, and GPT-Neo models in their super-fast CUDA-kernel-based inference mode, see more "),xt=i(o1,"A",{href:!0,rel:!0});var n2=o(xt);um=r(n2,"here"),n2.forEach(t),o1.forEach(t),Ti.forEach(t),Hn=f(e),re=i(e,"H2",{class:!0});var mp=o(re);Se=i(mp,"A",{id:!0,class:!0,href:!0});var h2=o(Se);Qo=i(h2,"SPAN",{});var p2=o(Qo);P(zt.$$.fragment,p2),p2.forEach(t),h2.forEach(t),mm=f(mp),es=i(mp,"SPAN",{});var f2=o(es);vm=r(f2,"DP+PP"),f2.forEach(t),mp.forEach(t),Xn=f(e),Ae=i(e,"P",{});var vp=o(Ae);Pm=r(vp,"The following diagram from the DeepSpeed "),Nt=i(vp,"A",{href:!0,rel:!0});var d2=o(Nt);wm=r(d2,"pipeline tutorial"),d2.forEach(t),ym=r(vp," demonstrates how one combines DP with PP."),vp.forEach(t),Yn=f(e),Ma=i(e,"P",{});var c2=o(Ma);$a=i(c2,"IMG",{src:!0,alt:!0}),c2.forEach(t),Jn=f(e),xa=i(e,"P",{});var u2=o(xa);bm=r(u2,"Here it\u2019s important to see how DP rank 0 doesn\u2019t see GPU2 and DP rank 1 doesn\u2019t see GPU3. To DP there is just GPUs 0 and 1 where it feeds data as if there were just 2 GPUs. GPU0 \u201Csecretly\u201D offloads some of its load to GPU2 using PP. And GPU1 does the same by enlisting GPU3 to its aid."),u2.forEach(t),Kn=f(e),za=i(e,"P",{});var m2=o(za);_m=r(m2,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 4 GPUs."),m2.forEach(t),Qn=f(e),Na=i(e,"P",{});var v2=o(Na);Em=r(v2,"Implementations:"),v2.forEach(t),eh=f(e),L=i(e,"UL",{});var Y=o(L);ts=i(Y,"LI",{});var P2=o(ts);Rt=i(P2,"A",{href:!0,rel:!0});var w2=o(Rt);gm=r(w2,"DeepSpeed"),w2.forEach(t),P2.forEach(t),Lm=f(Y),ls=i(Y,"LI",{});var y2=o(ls);Zt=i(y2,"A",{href:!0,rel:!0});var b2=o(Zt);Dm=r(b2,"Megatron-LM"),b2.forEach(t),y2.forEach(t),Gm=f(Y),as=i(Y,"LI",{});var _2=o(as);Ct=i(_2,"A",{href:!0,rel:!0});var E2=o(Ct);Um=r(E2,"Varuna"),E2.forEach(t),_2.forEach(t),km=f(Y),is=i(Y,"LI",{});var g2=o(is);jt=i(g2,"A",{href:!0,rel:!0});var L2=o(jt);Tm=r(L2,"SageMaker"),L2.forEach(t),g2.forEach(t),Im=f(Y),os=i(Y,"LI",{});var D2=o(os);Ft=i(D2,"A",{href:!0,rel:!0});var G2=o(Ft);Sm=r(G2,"OSLO"),G2.forEach(t),D2.forEach(t),Y.forEach(t),th=f(e),Ra=i(e,"P",{});var U2=o(Ra);Am=r(U2,"\u{1F917} Transformers status: not yet implemented"),U2.forEach(t),lh=f(e),ne=i(e,"H2",{class:!0});var Pp=o(ne);Oe=i(Pp,"A",{id:!0,class:!0,href:!0});var k2=o(Oe);ss=i(k2,"SPAN",{});var T2=o(ss);P(qt.$$.fragment,T2),T2.forEach(t),k2.forEach(t),Om=f(Pp),rs=i(Pp,"SPAN",{});var I2=o(rs);Mm=r(I2,"DP+PP+TP"),I2.forEach(t),Pp.forEach(t),ah=f(e),Za=i(e,"P",{});var S2=o(Za);$m=r(S2,"To get an even more efficient training a 3D parallelism is used where PP is combined with TP and DP. This can be seen in the following diagram."),S2.forEach(t),ih=f(e),Ca=i(e,"P",{});var A2=o(Ca);ja=i(A2,"IMG",{src:!0,alt:!0}),A2.forEach(t),oh=f(e),Me=i(e,"P",{});var wp=o(Me);xm=r(wp,"This diagram is from a blog post "),Bt=i(wp,"A",{href:!0,rel:!0});var O2=o(Bt);zm=r(O2,"3D parallelism: Scaling to trillion-parameter models"),O2.forEach(t),Nm=r(wp,", which is a good read as well."),wp.forEach(t),sh=f(e),Fa=i(e,"P",{});var M2=o(Fa);Rm=r(M2,"Since each dimension requires at least 2 GPUs, here you\u2019d need at least 8 GPUs."),M2.forEach(t),rh=f(e),qa=i(e,"P",{});var $2=o(qa);Zm=r($2,"Implementations:"),$2.forEach(t),nh=f(e),D=i(e,"UL",{});var J=o(D);Ba=i(J,"LI",{});var s1=o(Ba);Wt=i(s1,"A",{href:!0,rel:!0});var x2=o(Wt);Cm=r(x2,"DeepSpeed"),x2.forEach(t),jm=r(s1," - DeepSpeed also includes an even more efficient DP, which they call ZeRO-DP."),s1.forEach(t),Fm=f(J),ns=i(J,"LI",{});var z2=o(ns);Vt=i(z2,"A",{href:!0,rel:!0});var N2=o(Vt);qm=r(N2,"Megatron-LM"),N2.forEach(t),z2.forEach(t),Bm=f(J),hs=i(J,"LI",{});var R2=o(hs);Ht=i(R2,"A",{href:!0,rel:!0});var Z2=o(Ht);Wm=r(Z2,"Varuna"),Z2.forEach(t),R2.forEach(t),Vm=f(J),ps=i(J,"LI",{});var C2=o(ps);Xt=i(C2,"A",{href:!0,rel:!0});var j2=o(Xt);Hm=r(j2,"SageMaker"),j2.forEach(t),C2.forEach(t),Xm=f(J),fs=i(J,"LI",{});var F2=o(fs);Yt=i(F2,"A",{href:!0,rel:!0});var q2=o(Yt);Ym=r(q2,"OSLO"),q2.forEach(t),F2.forEach(t),J.forEach(t),hh=f(e),Wa=i(e,"P",{});var B2=o(Wa);Jm=r(B2,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),B2.forEach(t),ph=f(e),he=i(e,"H2",{class:!0});var yp=o(he);$e=i(yp,"A",{id:!0,class:!0,href:!0});var W2=o($e);ds=i(W2,"SPAN",{});var V2=o(ds);P(Jt.$$.fragment,V2),V2.forEach(t),W2.forEach(t),Km=f(yp),cs=i(yp,"SPAN",{});var H2=o(cs);Qm=r(H2,"ZeRO DP+PP+TP"),H2.forEach(t),yp.forEach(t),fh=f(e),xe=i(e,"P",{});var bp=o(xe);ev=r(bp,"One of the main features of DeepSpeed is ZeRO, which is a super-scalable extension of DP. It has already been discussed in "),Va=i(bp,"A",{href:!0});var X2=o(Va);tv=r(X2,"ZeRO Data Parallelism"),X2.forEach(t),lv=r(bp,". Normally it\u2019s a standalone feature that doesn\u2019t require PP or TP. But it can be combined with PP and TP."),bp.forEach(t),dh=f(e),Ha=i(e,"P",{});var Y2=o(Ha);av=r(Y2,"When ZeRO-DP is combined with PP (and optionally TP) it typically enables only ZeRO stage 1 (optimizer sharding)."),Y2.forEach(t),ch=f(e),Xa=i(e,"P",{});var J2=o(Xa);iv=r(J2,"While it\u2019s theoretically possible to use ZeRO stage 2 (gradient sharding) with Pipeline Parallelism, it will have bad performance impacts. There would need to be an additional reduce-scatter collective for every micro-batch to aggregate the gradients before sharding, which adds a potentially significant communication overhead. By nature of Pipeline Parallelism, small micro-batches are used and instead the focus is on trying to balance arithmetic intensity (micro-batch size) with minimizing the Pipeline bubble (number of micro-batches). Therefore those communication costs are going to hurt."),J2.forEach(t),uh=f(e),ze=i(e,"P",{});var _p=o(ze);ov=r(_p,"In addition, There are already fewer layers than normal due to PP and so the memory savings won\u2019t be huge. PP already reduces gradient size by "),us=i(_p,"CODE",{});var K2=o(us);sv=r(K2,"1/PP"),K2.forEach(t),rv=r(_p,", and so gradient sharding savings on top of that are less significant than pure DP."),_p.forEach(t),mh=f(e),Ya=i(e,"P",{});var Q2=o(Ya);nv=r(Q2,"ZeRO stage 3 is not a good choice either for the same reason - more inter-node communications required."),Q2.forEach(t),vh=f(e),Ja=i(e,"P",{});var eb=o(Ja);hv=r(eb,"And since we have ZeRO, the other benefit is ZeRO-Offload. Since this is stage 1 optimizer states can be offloaded to CPU."),eb.forEach(t),Ph=f(e),Ka=i(e,"P",{});var tb=o(Ka);pv=r(tb,"Implementations:"),tb.forEach(t),wh=f(e),Ne=i(e,"UL",{});var Ep=o(Ne);ms=i(Ep,"LI",{});var lb=o(ms);Kt=i(lb,"A",{href:!0,rel:!0});var ab=o(Kt);fv=r(ab,"Megatron-DeepSpeed"),ab.forEach(t),lb.forEach(t),dv=f(Ep),vs=i(Ep,"LI",{});var ib=o(vs);Qt=i(ib,"A",{href:!0,rel:!0});var ob=o(Qt);cv=r(ob,"OSLO"),ob.forEach(t),ib.forEach(t),Ep.forEach(t),yh=f(e),Qa=i(e,"P",{});var sb=o(Qa);uv=r(sb,"\u{1F917} Transformers status: not yet implemented, since we have no PP and TP."),sb.forEach(t),bh=f(e),pe=i(e,"H2",{class:!0});var gp=o(pe);Re=i(gp,"A",{id:!0,class:!0,href:!0});var rb=o(Re);Ps=i(rb,"SPAN",{});var nb=o(Ps);P(el.$$.fragment,nb),nb.forEach(t),rb.forEach(t),mv=f(gp),ws=i(gp,"SPAN",{});var hb=o(ws);vv=r(hb,"FlexFlow"),hb.forEach(t),gp.forEach(t),_h=f(e),tl=i(e,"P",{});var r1=o(tl);ll=i(r1,"A",{href:!0,rel:!0});var pb=o(ll);Pv=r(pb,"FlexFlow"),pb.forEach(t),wv=r(r1," also solves the parallelization problem in a slightly different approach."),r1.forEach(t),Eh=f(e),al=i(e,"P",{});var n1=o(al);yv=r(n1,"Paper: "),il=i(n1,"A",{href:!0,rel:!0});var fb=o(il);bv=r(fb,"\u201CBeyond Data and Model Parallelism for Deep Neural Networks\u201D by Zhihao Jia, Matei Zaharia, Alex Aiken"),fb.forEach(t),n1.forEach(t),gh=f(e),ei=i(e,"P",{});var db=o(ei);_v=r(db,"It performs a sort of 4D Parallelism over Sample-Operator-Attribute-Parameter."),db.forEach(t),Lh=f(e),A=i(e,"OL",{});var Ve=o(A);ys=i(Ve,"LI",{});var cb=o(ys);Ev=r(cb,"Sample = Data Parallelism (sample-wise parallel)"),cb.forEach(t),gv=f(Ve),bs=i(Ve,"LI",{});var ub=o(bs);Lv=r(ub,"Operator = Parallelize a single operation into several sub-operations"),ub.forEach(t),Dv=f(Ve),_s=i(Ve,"LI",{});var mb=o(_s);Gv=r(mb,"Attribute = Data Parallelism (length-wise parallel)"),mb.forEach(t),Uv=f(Ve),Es=i(Ve,"LI",{});var vb=o(Es);kv=r(vb,"Parameter = Model Parallelism (regardless of dimension - horizontal or vertical)"),vb.forEach(t),Ve.forEach(t),Dh=f(e),ti=i(e,"P",{});var Pb=o(ti);Tv=r(Pb,"Examples:"),Pb.forEach(t),Gh=f(e),li=i(e,"UL",{});var wb=o(li);gs=i(wb,"LI",{});var yb=o(gs);Iv=r(yb,"Sample"),yb.forEach(t),wb.forEach(t),Uh=f(e),ai=i(e,"P",{});var bb=o(ai);Sv=r(bb,"Let\u2019s take 10 batches of sequence length 512. If we parallelize them by sample dimension into 2 devices, we get 10 x 512 which becomes be 5 x 2 x 512."),bb.forEach(t),kh=f(e),ii=i(e,"UL",{});var _b=o(ii);Ls=i(_b,"LI",{});var Eb=o(Ls);Av=r(Eb,"Operator"),Eb.forEach(t),_b.forEach(t),Th=f(e),oi=i(e,"P",{});var gb=o(oi);Ov=r(gb,"If we perform layer normalization, we compute std first and mean second, and then we can normalize data. Operator parallelism allows computing std and mean in parallel. So if we parallelize them by operator dimension into 2 devices (cuda:0, cuda:1), first we copy input data into both devices, and cuda:0 computes std, cuda:1 computes mean at the same time."),gb.forEach(t),Ih=f(e),si=i(e,"UL",{});var Lb=o(si);Ds=i(Lb,"LI",{});var Db=o(Ds);Mv=r(Db,"Attribute"),Db.forEach(t),Lb.forEach(t),Sh=f(e),ri=i(e,"P",{});var Gb=o(ri);$v=r(Gb,"We have 10 batches of 512 length. If we parallelize them by attribute dimension into 2 devices, 10 x 512 will be 10 x 2 x 256."),Gb.forEach(t),Ah=f(e),ni=i(e,"UL",{});var Ub=o(ni);Gs=i(Ub,"LI",{});var kb=o(Gs);xv=r(kb,"Parameter"),kb.forEach(t),Ub.forEach(t),Oh=f(e),hi=i(e,"P",{});var Tb=o(hi);zv=r(Tb,"It is similar with tensor model parallelism or naive layer-wise model parallelism."),Tb.forEach(t),Mh=f(e),pi=i(e,"P",{});var Ib=o(pi);fi=i(Ib,"IMG",{src:!0,alt:!0}),Ib.forEach(t),$h=f(e),di=i(e,"P",{});var Sb=o(di);Nv=r(Sb,"The significance of this framework is that it takes resources like (1) GPU/TPU/CPU vs. (2) RAM/DRAM vs. (3) fast-intra-connect/slow-inter-connect and it automatically optimizes all these  algorithmically deciding which parallelisation to use where."),Sb.forEach(t),xh=f(e),ci=i(e,"P",{});var Ab=o(ci);Rv=r(Ab,"One very important aspect is that FlexFlow is designed for optimizing DNN parallelizations for models with static and fixed workloads, since models with dynamic behavior may prefer different parallelization strategies across iterations."),Ab.forEach(t),zh=f(e),ui=i(e,"P",{});var Ob=o(ui);Zv=r(Ob,"So the promise is very attractive - it runs a 30min simulation on the cluster of choice and it comes up with the best strategy to utilise this specific environment. If you add/remove/replace any parts it\u2019ll run and re-optimize the plan for that. And then you can train. A different setup will have its own custom optimization."),Ob.forEach(t),Nh=f(e),Ze=i(e,"P",{});var Lp=o(Ze);Cv=r(Lp,"\u{1F917} Transformers status: not yet integrated. We already have our models FX-trace-able via "),ol=i(Lp,"A",{href:!0,rel:!0});var Mb=o(ol);jv=r(Mb,"transformers.utils.fx"),Mb.forEach(t),Fv=r(Lp,", which is a prerequisite for FlexFlow, so someone needs to figure out what needs to be done to make FlexFlow work with our models."),Lp.forEach(t),Rh=f(e),fe=i(e,"H2",{class:!0});var Dp=o(fe);Ce=i(Dp,"A",{id:!0,class:!0,href:!0});var $b=o(Ce);Us=i($b,"SPAN",{});var xb=o(Us);P(sl.$$.fragment,xb),xb.forEach(t),$b.forEach(t),qv=f(Dp),ks=i(Dp,"SPAN",{});var zb=o(ks);Bv=r(zb,"Which Strategy To Use When"),zb.forEach(t),Dp.forEach(t),Zh=f(e),mi=i(e,"P",{});var Nb=o(mi);Wv=r(Nb,"Here is a very rough outline at which parallelism strategy to use when. The first on each list is typically faster."),Nb.forEach(t),Ch=f(e),vi=i(e,"P",{});var Rb=o(vi);Ts=i(Rb,"STRONG",{});var Zb=o(Ts);Vv=r(Zb,"\u21E8 Single GPU"),Zb.forEach(t),Rb.forEach(t),jh=f(e),W=i(e,"UL",{});var Ii=o(W);rl=i(Ii,"LI",{});var Gp=o(rl);Is=i(Gp,"P",{});var Cb=o(Is);Hv=r(Cb,"Model fits onto a single GPU:"),Cb.forEach(t),Xv=f(Gp),Ss=i(Gp,"OL",{});var jb=o(Ss);As=i(jb,"LI",{});var Fb=o(As);Yv=r(Fb,"Normal use"),Fb.forEach(t),jb.forEach(t),Gp.forEach(t),Jv=f(Ii),nl=i(Ii,"LI",{});var Up=o(nl);Os=i(Up,"P",{});var qb=o(Os);Kv=r(qb,"Model doesn\u2019t fit onto a single GPU:"),qb.forEach(t),Qv=f(Up),hl=i(Up,"OL",{});var kp=o(hl);Ms=i(kp,"LI",{});var Bb=o(Ms);eP=r(Bb,"ZeRO + Offload CPU and optionally NVMe"),Bb.forEach(t),tP=f(kp),$s=i(kp,"LI",{});var Wb=o($s);lP=r(Wb,"as above plus Memory Centric Tiling (see below for details) if the largest layer can\u2019t fit into a single GPU"),Wb.forEach(t),kp.forEach(t),Up.forEach(t),aP=f(Ii),xs=i(Ii,"LI",{});var Vb=o(xs);zs=i(Vb,"P",{});var Hb=o(zs);iP=r(Hb,"Largest Layer not fitting into a single GPU:"),Hb.forEach(t),Vb.forEach(t),Ii.forEach(t),Fh=f(e),Pi=i(e,"OL",{});var Xb=o(Pi);de=i(Xb,"LI",{});var Si=o(de);oP=r(Si,"ZeRO - Enable "),pl=i(Si,"A",{href:!0,rel:!0});var Yb=o(pl);sP=r(Yb,"Memory Centric Tiling"),Yb.forEach(t),rP=r(Si," (MCT). It allows you to run arbitrarily large layers by automatically splitting them and executing them sequentially. MCT reduces the number of parameters that are live on a GPU, but it does not affect the activation memory. As this need is very rare as of this writing a manual override of "),Ns=i(Si,"CODE",{});var Jb=o(Ns);nP=r(Jb,"torch.nn.Linear"),Jb.forEach(t),hP=r(Si," needs to be done by the user."),Si.forEach(t),Xb.forEach(t),qh=f(e),wi=i(e,"P",{});var Kb=o(wi);Rs=i(Kb,"STRONG",{});var Qb=o(Rs);pP=r(Qb,"\u21E8 Single Node / Multi-GPU"),Qb.forEach(t),Kb.forEach(t),Bh=f(e),V=i(e,"UL",{});var Ai=o(V);fl=i(Ai,"LI",{});var Tp=o(fl);Zs=i(Tp,"P",{});var e_=o(Zs);fP=r(e_,"Model fits onto a single GPU:"),e_.forEach(t),dP=f(Tp),dl=i(Tp,"OL",{});var Ip=o(dl);Cs=i(Ip,"LI",{});var t_=o(Cs);cP=r(t_,"DDP - Distributed DP"),t_.forEach(t),uP=f(Ip),js=i(Ip,"LI",{});var l_=o(js);mP=r(l_,"ZeRO - may or may not be faster depending on the situation and configuration used"),l_.forEach(t),Ip.forEach(t),Tp.forEach(t),vP=f(Ai),cl=i(Ai,"LI",{});var Sp=o(cl);Fs=i(Sp,"P",{});var a_=o(Fs);PP=r(a_,"Model doesn\u2019t fit onto a single GPU:"),a_.forEach(t),wP=f(Sp),ce=i(Sp,"OL",{});var Oi=o(ce);qs=i(Oi,"LI",{});var i_=o(qs);Bs=i(i_,"P",{});var o_=o(Bs);yP=r(o_,"PP"),o_.forEach(t),i_.forEach(t),bP=f(Oi),Ws=i(Oi,"LI",{});var s_=o(Ws);Vs=i(s_,"P",{});var r_=o(Vs);_P=r(r_,"ZeRO"),r_.forEach(t),s_.forEach(t),EP=f(Oi),ue=i(Oi,"LI",{});var Mi=o(ue);Hs=i(Mi,"P",{});var n_=o(Hs);gP=r(n_,"TP"),n_.forEach(t),LP=f(Mi),Xs=i(Mi,"P",{});var h_=o(Xs);DP=r(h_,"With very fast intra-node connectivity of NVLINK or NVSwitch all three should be mostly on par, without these PP will be faster than TP or ZeRO. The degree of TP may also make a difference. Best to experiment to find the winner on your particular setup."),h_.forEach(t),GP=f(Mi),Ys=i(Mi,"P",{});var p_=o(Ys);UP=r(p_,"TP is almost always used within a single node. That is TP size <= gpus per node."),p_.forEach(t),Mi.forEach(t),Oi.forEach(t),Sp.forEach(t),kP=f(Ai),ul=i(Ai,"LI",{});var Ap=o(ul);Js=i(Ap,"P",{});var f_=o(Js);TP=r(f_,"Largest Layer not fitting into a single GPU:"),f_.forEach(t),IP=f(Ap),ml=i(Ap,"OL",{});var Op=o(ml);Ks=i(Op,"LI",{});var d_=o(Ks);SP=r(d_,"If not using ZeRO - must use TP, as PP alone won\u2019t be able to fit."),d_.forEach(t),AP=f(Op),Qs=i(Op,"LI",{});var c_=o(Qs);OP=r(c_,"With ZeRO see the same entry for \u201CSingle GPU\u201D above"),c_.forEach(t),Op.forEach(t),Ap.forEach(t),Ai.forEach(t),Wh=f(e),yi=i(e,"P",{});var u_=o(yi);er=i(u_,"STRONG",{});var m_=o(er);MP=r(m_,"\u21E8 Multi-Node / Multi-GPU"),m_.forEach(t),u_.forEach(t),Vh=f(e),je=i(e,"UL",{});var Mp=o(je);vl=i(Mp,"LI",{});var $p=o(vl);tr=i($p,"P",{});var v_=o(tr);$P=r(v_,"When you have fast inter-node connectivity:"),v_.forEach(t),xP=f($p),Pl=i($p,"OL",{});var xp=o(Pl);lr=i(xp,"LI",{});var P_=o(lr);zP=r(P_,"ZeRO - as it requires close to no modifications to the model"),P_.forEach(t),NP=f(xp),ar=i(xp,"LI",{});var w_=o(ar);RP=r(w_,"PP+TP+DP - less communications, but requires massive changes to the model"),w_.forEach(t),xp.forEach(t),$p.forEach(t),ZP=f(Mp),wl=i(Mp,"LI",{});var zp=o(wl);ir=i(zp,"P",{});var y_=o(ir);CP=r(y_,"when you have slow inter-node connectivity and still low on GPU memory:"),y_.forEach(t),jP=f(zp),or=i(zp,"OL",{});var b_=o(or);sr=i(b_,"LI",{});var __=o(sr);FP=r(__,"DP+PP+TP+ZeRO-1"),__.forEach(t),b_.forEach(t),zp.forEach(t),Mp.forEach(t),this.h()},h(){d($,"name","hf:doc:metadata"),d($,"content",JSON.stringify(k_)),d(M,"id","model-parallelism"),d(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M,"href","#model-parallelism"),d(U,"class","relative group"),d(me,"id","parallelism-overview"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#parallelism-overview"),d(Q,"class","relative group"),d(Pe,"id","concepts"),d(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pe,"href","#concepts"),d(ee,"class","relative group"),d(we,"id","data-parallelism"),d(we,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(we,"href","#data-parallelism"),d(te,"class","relative group"),d(ye,"id","zero-data-parallelism"),d(ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ye,"href","#zero-data-parallelism"),d(le,"class","relative group"),d(Qe,"href","https://www.microsoft.com/en-us/research/blog/zero-deepspeed-new-system-optimizations-enable-training-models-with-over-100-billion-parameters/"),d(Qe,"rel","nofollow"),K(Ll.src,h1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero.png")||d(Ll,"src",h1),d(Ll,"alt","DeepSpeed-Image-1"),d(at,"href","https://www.deepspeed.ai/features/#the-zero-redundancy-optimizer"),d(at,"rel","nofollow"),d(it,"href","https://github.com/facebookresearch/fairscale/#optimizer-state-sharding-zero"),d(it,"rel","nofollow"),d(ot,"href","main_classes/trainer#trainer-integrations"),d(_e,"id","naive-model-parallelism-vertical-and-pipeline-parallelism"),d(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_e,"href","#naive-model-parallelism-vertical-and-pipeline-parallelism"),d(ie,"class","relative group"),d(nt,"href","https://ai.googleblog.com/2019/03/introducing-gpipe-open-source-library.html"),d(nt,"rel","nofollow"),K(Ql.src,p1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-gpipe-bubble.png")||d(Ql,"src",p1),d(Ql,"alt","mp-pp"),d(pt,"href","https://github.com/pytorch/pytorch/pull/50693"),d(pt,"rel","nofollow"),d(dt,"href","https://pytorch.org/docs/stable/pipeline.html"),d(dt,"rel","nofollow"),d(ct,"href","https://github.com/pytorch/pytorch/blob/master/benchmarks/distributed/pipeline/pipe.py"),d(ct,"rel","nofollow"),d(ut,"href","https://fairscale.readthedocs.io/en/latest/tutorials/pipe.html"),d(ut,"rel","nofollow"),d(mt,"href","https://www.deepspeed.ai/tutorials/pipeline/"),d(mt,"rel","nofollow"),d(vt,"href","https://github.com/NVIDIA/Megatron-LM"),d(vt,"rel","nofollow"),d(Pt,"href","https://github.com/microsoft/varuna"),d(Pt,"rel","nofollow"),d(wt,"href","https://arxiv.org/abs/2111.05972"),d(wt,"rel","nofollow"),d(yt,"href","https://github.com/tunib-ai/oslo"),d(yt,"rel","nofollow"),d(bt,"href","https://docs.aws.amazon.com/sagemaker/latest/dg/model-parallel-core-features.html"),d(bt,"rel","nofollow"),K(ua.src,f1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-sagemaker-interleaved-pipeline.png")||d(ua,"src",f1),d(ua,"alt","interleaved-pipeline-execution"),d(Ie,"id","tensor-parallelism"),d(Ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ie,"href","#tensor-parallelism"),d(se,"class","relative group"),d(Et,"href","https://github.com/NVIDIA/Megatron-LM"),d(Et,"rel","nofollow"),d(gt,"href","https://arxiv.org/abs/2104.04473"),d(gt,"rel","nofollow"),K(wa.src,d1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_gemm.png")||d(wa,"src",d1),d(wa,"alt","Parallel GEMM"),K(ya.src,c1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-independent-gelu.png")||d(ya,"src",c1),d(ya,"alt","independent GeLU"),K(ba.src,u1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_shard_processing.png")||d(ba,"src",u1),d(ba,"alt","parallel shard processing"),K(_a.src,m1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-tp-parallel_self_attention.png")||d(_a,"src",m1),d(_a,"alt","parallel self-attention"),d(Ut,"href","https://github.com/huggingface/transformers/issues/10321#issuecomment-783543530"),d(Ut,"rel","nofollow"),d(kt,"href","https://github.com/anton-l"),d(kt,"rel","nofollow"),d(Tt,"href","https://www.deepspeed.ai/features/#model-parallelism"),d(Tt,"rel","nofollow"),d(It,"href","https://github.com/NVIDIA/Megatron-LM"),d(It,"rel","nofollow"),d(St,"href","https://github.com/tunib-ai/parallelformers"),d(St,"rel","nofollow"),d(At,"href","https://arxiv.org/abs/2111.05972"),d(At,"rel","nofollow"),d(Ot,"href","https://github.com/tunib-ai/oslo"),d(Ot,"rel","nofollow"),d($t,"href","https://github.com/tunib-ai/parallelformers"),d($t,"rel","nofollow"),d(xt,"href","https://www.deepspeed.ai/tutorials/inference-tutorial/"),d(xt,"rel","nofollow"),d(Se,"id","dppp"),d(Se,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Se,"href","#dppp"),d(re,"class","relative group"),d(Nt,"href","https://www.deepspeed.ai/tutorials/pipeline/"),d(Nt,"rel","nofollow"),K($a.src,v1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-zero-dp-pp.png")||d($a,"src",v1),d($a,"alt","dp-pp-2d"),d(Rt,"href","https://github.com/microsoft/DeepSpeed"),d(Rt,"rel","nofollow"),d(Zt,"href","https://github.com/NVIDIA/Megatron-LM"),d(Zt,"rel","nofollow"),d(Ct,"href","https://github.com/microsoft/varuna"),d(Ct,"rel","nofollow"),d(jt,"href","https://arxiv.org/abs/2111.05972"),d(jt,"rel","nofollow"),d(Ft,"href","https://github.com/tunib-ai/oslo"),d(Ft,"rel","nofollow"),d(Oe,"id","dppptp"),d(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oe,"href","#dppptp"),d(ne,"class","relative group"),K(ja.src,P1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-deepspeed-3d.png")||d(ja,"src",P1),d(ja,"alt","dp-pp-tp-3d"),d(Bt,"href","https://www.microsoft.com/en-us/research/blog/deepspeed-extreme-scale-model-training-for-everyone/"),d(Bt,"rel","nofollow"),d(Wt,"href","https://github.com/microsoft/DeepSpeed"),d(Wt,"rel","nofollow"),d(Vt,"href","https://github.com/NVIDIA/Megatron-LM"),d(Vt,"rel","nofollow"),d(Ht,"href","https://github.com/microsoft/varuna"),d(Ht,"rel","nofollow"),d(Xt,"href","https://arxiv.org/abs/2111.05972"),d(Xt,"rel","nofollow"),d(Yt,"href","https://github.com/tunib-ai/oslo"),d(Yt,"rel","nofollow"),d($e,"id","zero-dppptp"),d($e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($e,"href","#zero-dppptp"),d(he,"class","relative group"),d(Va,"href","#zero-data-parallelism"),d(Kt,"href","https://github.com/microsoft/Megatron-DeepSpeed"),d(Kt,"rel","nofollow"),d(Qt,"href","https://github.com/tunib-ai/oslo"),d(Qt,"rel","nofollow"),d(Re,"id","flexflow"),d(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Re,"href","#flexflow"),d(pe,"class","relative group"),d(ll,"href","https://github.com/flexflow/FlexFlow"),d(ll,"rel","nofollow"),d(il,"href","https://arxiv.org/abs/1807.05358"),d(il,"rel","nofollow"),K(fi.src,w1="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/parallelism-flexflow.jpeg")||d(fi,"src",w1),d(fi,"alt","flex-flow-soap"),d(ol,"href","https://github.com/huggingface/transformers/blob/master/src/transformers/utils/fx.py"),d(ol,"rel","nofollow"),d(Ce,"id","which-strategy-to-use-when"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#which-strategy-to-use-when"),d(fe,"class","relative group"),d(pl,"href","https://deepspeed.readthedocs.io/en/latest/zero3.html#memory-centric-tiling"),d(pl,"rel","nofollow")},m(e,n){l(document.head,$),h(e,yl,n),h(e,U,n),l(U,M),l(M,$i),w(He,$i,null),l(U,Zp),l(U,xi),l(xi,Cp),h(e,hr,n),h(e,Q,n),l(Q,me),l(me,zi),w(Xe,zi,null),l(Q,jp),l(Q,Ni),l(Ni,Fp),h(e,pr,n),h(e,bl,n),l(bl,qp),h(e,fr,n),h(e,ve,n),l(ve,Ri),l(Ri,Bp),l(ve,Wp),l(ve,Zi),l(Zi,Vp),h(e,dr,n),h(e,_l,n),l(_l,Hp),h(e,cr,n),h(e,El,n),l(El,Xp),h(e,ur,n),h(e,ee,n),l(ee,Pe),l(Pe,Ci),w(Ye,Ci,null),l(ee,Yp),l(ee,ji),l(ji,Jp),h(e,mr,n),h(e,gl,n),l(gl,Kp),h(e,vr,n),h(e,E,n),l(E,Fi),l(Fi,Qp),l(E,ef),l(E,qi),l(qi,tf),l(E,lf),l(E,Bi),l(Bi,af),l(E,of),l(E,Wi),l(Wi,sf),l(E,rf),l(E,Vi),l(Vi,nf),h(e,Pr,n),h(e,te,n),l(te,we),l(we,Hi),w(Je,Hi,null),l(te,hf),l(te,Xi),l(Xi,pf),h(e,wr,n),h(e,x,n),l(x,ff),l(x,Yi),l(Yi,df),l(x,cf),l(x,Ji),l(Ji,uf),l(x,mf),h(e,yr,n),h(e,le,n),l(le,ye),l(ye,Ki),w(Ke,Ki,null),l(le,vf),l(le,Qi),l(Qi,Pf),h(e,br,n),h(e,ae,n),l(ae,wf),l(ae,Qe),l(Qe,yf),l(ae,bf),l(ae,Ll),h(e,_r,n),h(e,be,n),l(be,_f),l(be,eo),l(eo,Ef),l(be,gf),h(e,Er,n),h(e,Dl,n),l(Dl,Lf),h(e,gr,n),w(et,e,n),h(e,Lr,n),h(e,Gl,n),l(Gl,Df),h(e,Dr,n),h(e,Ul,n),l(Ul,Gf),h(e,Gr,n),w(tt,e,n),h(e,Ur,n),h(e,kl,n),l(kl,Uf),h(e,kr,n),h(e,Tl,n),l(Tl,kf),h(e,Tr,n),w(lt,e,n),h(e,Ir,n),h(e,Il,n),l(Il,Tf),h(e,Sr,n),h(e,Sl,n),l(Sl,If),h(e,Ar,n),h(e,Al,n),l(Al,Sf),h(e,Or,n),h(e,Ol,n),l(Ol,Af),h(e,Mr,n),h(e,Ml,n),l(Ml,Of),h(e,$r,n),h(e,$l,n),l($l,Mf),h(e,xr,n),h(e,xl,n),l(xl,$f),h(e,zr,n),h(e,zl,n),l(zl,xf),h(e,Nr,n),h(e,Nl,n),l(Nl,zf),h(e,Rr,n),h(e,z,n),l(z,to),l(to,Nf),l(z,Rf),l(z,lo),l(lo,Zf),l(z,Cf),l(z,ao),l(ao,jf),h(e,Zr,n),h(e,Rl,n),l(Rl,Ff),h(e,Cr,n),h(e,Zl,n),l(Zl,qf),h(e,jr,n),h(e,Cl,n),l(Cl,Bf),h(e,Fr,n),h(e,jl,n),l(jl,Wf),h(e,qr,n),h(e,Fl,n),l(Fl,Vf),h(e,Br,n),h(e,N,n),l(N,ql),l(ql,at),l(at,Hf),l(ql,Xf),l(N,Yf),l(N,Bl),l(Bl,it),l(it,Jf),l(Bl,Kf),l(N,Qf),l(N,io),l(io,ot),l(ot,oo),l(oo,ed),l(ot,td),h(e,Wr,n),h(e,ie,n),l(ie,_e),l(_e,so),w(st,so,null),l(ie,ld),l(ie,ro),l(ro,ad),h(e,Vr,n),h(e,Ee,n),l(Ee,id),l(Ee,no),l(no,od),l(Ee,sd),h(e,Hr,n),h(e,Wl,n),l(Wl,rd),h(e,Xr,n),w(rt,e,n),h(e,Yr,n),h(e,Vl,n),l(Vl,nd),h(e,Jr,n),h(e,Hl,n),l(Hl,hd),h(e,Kr,n),h(e,Xl,n),l(Xl,pd),h(e,Qr,n),h(e,Yl,n),l(Yl,fd),h(e,en,n),h(e,ge,n),l(ge,ho),l(ho,dd),l(ge,cd),l(ge,po),l(po,ud),h(e,tn,n),h(e,Jl,n),l(Jl,md),h(e,ln,n),h(e,Le,n),l(Le,vd),l(Le,nt),l(nt,Pd),l(Le,wd),h(e,an,n),h(e,Kl,n),l(Kl,Ql),h(e,on,n),h(e,ea,n),l(ea,yd),h(e,sn,n),h(e,ta,n),l(ta,bd),h(e,rn,n),h(e,R,n),l(R,_d),l(R,fo),l(fo,Ed),l(R,gd),l(R,co),l(co,Ld),l(R,Dd),h(e,nn,n),h(e,De,n),l(De,Gd),l(De,uo),l(uo,Ud),l(De,kd),h(e,hn,n),h(e,Ge,n),l(Ge,Td),l(Ge,mo),l(mo,Id),l(Ge,Sd),h(e,pn,n),h(e,Z,n),l(Z,Ad),l(Z,vo),l(vo,Od),l(Z,Md),l(Z,Po),l(Po,$d),l(Z,xd),h(e,fn,n),h(e,la,n),l(la,zd),h(e,dn,n),h(e,C,n),l(C,Nd),l(C,wo),l(wo,Rd),l(C,Zd),l(C,yo),l(yo,Cd),l(C,jd),h(e,cn,n),h(e,k,n),l(k,Fd),l(k,bo),l(bo,qd),l(k,Bd),l(k,_o),l(_o,Wd),l(k,Vd),l(k,Eo),l(Eo,Hd),l(k,Xd),h(e,un,n),h(e,aa,n),l(aa,Yd),h(e,mn,n),h(e,ia,n),l(ia,Jd),h(e,vn,n),h(e,T,n),l(T,go),l(go,Kd),l(T,Qd),l(T,Lo),l(Lo,ec),l(T,tc),l(T,Do),l(Do,lc),l(T,ac),l(T,Go),l(Go,ic),h(e,Pn,n),h(e,oa,n),l(oa,oc),h(e,wn,n),h(e,Ue,n),l(Ue,Uo),l(Uo,sc),l(Ue,rc),l(Ue,ko),l(ko,nc),h(e,yn,n),h(e,sa,n),l(sa,hc),h(e,bn,n),h(e,I,n),l(I,ht),l(ht,pc),l(ht,To),l(To,fc),l(ht,dc),l(I,cc),l(I,ra),l(ra,uc),l(ra,pt),l(pt,mc),l(I,vc),l(I,Io),l(Io,Pc),l(I,wc),l(I,So),l(So,yc),h(e,_n,n),h(e,na,n),l(na,bc),h(e,En,n),h(e,ha,n),l(ha,_c),h(e,gn,n),h(e,u,n),l(u,ft),l(ft,dt),l(dt,Ec),l(ft,gc),l(ft,ct),l(ct,Lc),l(u,Dc),l(u,Ao),l(Ao,ut),l(ut,Gc),l(u,Uc),l(u,Oo),l(Oo,mt),l(mt,kc),l(u,Tc),l(u,pa),l(pa,vt),l(vt,Ic),l(pa,Sc),l(u,Ac),l(u,Mo),l(Mo,Pt),l(Pt,Oc),l(u,Mc),l(u,fa),l(fa,wt),l(wt,$c),l(fa,xc),l(u,zc),l(u,da),l(da,yt),l(yt,Nc),l(da,Rc),h(e,Ln,n),h(e,ke,n),l(ke,Zc),l(ke,$o),l($o,Cc),l(ke,jc),h(e,Dn,n),h(e,ca,n),l(ca,Fc),h(e,Gn,n),h(e,oe,n),l(oe,qc),l(oe,bt),l(bt,Bc),l(oe,Wc),l(oe,ua),h(e,Un,n),h(e,ma,n),l(ma,Vc),h(e,kn,n),h(e,va,n),l(va,Hc),h(e,Tn,n),h(e,Te,n),l(Te,Xc),l(Te,xo),l(xo,Yc),l(Te,Jc),h(e,In,n),h(e,se,n),l(se,Ie),l(Ie,zo),w(_t,zo,null),l(se,Kc),l(se,No),l(No,Qc),h(e,Sn,n),h(e,Pa,n),l(Pa,eu),h(e,An,n),h(e,j,n),l(j,tu),l(j,Et),l(Et,lu),l(j,au),l(j,gt),l(gt,iu),l(j,ou),h(e,On,n),h(e,F,n),l(F,su),l(F,Ro),l(Ro,ru),l(F,nu),l(F,Zo),l(Zo,hu),l(F,pu),h(e,Mn,n),h(e,g,n),l(g,fu),l(g,Co),l(Co,du),l(g,cu),l(g,jo),l(jo,uu),l(g,mu),l(g,Fo),l(Fo,vu),l(g,Pu),l(g,qo),l(qo,wu),l(g,yu),h(e,$n,n),h(e,Lt,n),l(Lt,bu),l(Lt,wa),h(e,xn,n),h(e,c,n),l(c,_u),l(c,Bo),l(Bo,Eu),l(c,gu),l(c,Wo),l(Wo,Lu),l(c,Du),l(c,Vo),l(Vo,Gu),l(c,Uu),l(c,Ho),l(Ho,ku),l(c,Tu),l(c,Xo),l(Xo,Iu),l(c,Su),l(c,Yo),l(Yo,Au),l(c,Ou),l(c,Jo),l(Jo,Mu),l(c,$u),l(c,ya),h(e,zn,n),h(e,Dt,n),l(Dt,xu),l(Dt,ba),h(e,Nn,n),h(e,Gt,n),l(Gt,zu),l(Gt,_a),h(e,Rn,n),h(e,Ea,n),l(Ea,Nu),h(e,Zn,n),h(e,q,n),l(q,Ru),l(q,Ut),l(Ut,Zu),l(q,Cu),l(q,kt),l(kt,ju),l(q,Fu),h(e,Cn,n),h(e,ga,n),l(ga,qu),h(e,jn,n),h(e,La,n),l(La,Bu),h(e,Fn,n),h(e,Da,n),l(Da,Ga),l(Ga,Wu),l(Ga,Tt),l(Tt,Vu),h(e,qn,n),h(e,Ua,n),l(Ua,Hu),h(e,Bn,n),h(e,S,n),l(S,ka),l(ka,It),l(It,Xu),l(ka,Yu),l(S,Ju),l(S,Ta),l(Ta,St),l(St,Ku),l(Ta,Qu),l(S,em),l(S,Ia),l(Ia,At),l(At,tm),l(Ia,lm),l(S,am),l(S,Sa),l(Sa,Ot),l(Ot,im),l(Sa,om),h(e,Wn,n),h(e,Aa,n),l(Aa,sm),h(e,Vn,n),h(e,B,n),l(B,Ko),l(Ko,rm),l(B,nm),l(B,Mt),l(Mt,hm),l(Mt,$t),l($t,pm),l(Mt,fm),l(B,dm),l(B,Oa),l(Oa,cm),l(Oa,xt),l(xt,um),h(e,Hn,n),h(e,re,n),l(re,Se),l(Se,Qo),w(zt,Qo,null),l(re,mm),l(re,es),l(es,vm),h(e,Xn,n),h(e,Ae,n),l(Ae,Pm),l(Ae,Nt),l(Nt,wm),l(Ae,ym),h(e,Yn,n),h(e,Ma,n),l(Ma,$a),h(e,Jn,n),h(e,xa,n),l(xa,bm),h(e,Kn,n),h(e,za,n),l(za,_m),h(e,Qn,n),h(e,Na,n),l(Na,Em),h(e,eh,n),h(e,L,n),l(L,ts),l(ts,Rt),l(Rt,gm),l(L,Lm),l(L,ls),l(ls,Zt),l(Zt,Dm),l(L,Gm),l(L,as),l(as,Ct),l(Ct,Um),l(L,km),l(L,is),l(is,jt),l(jt,Tm),l(L,Im),l(L,os),l(os,Ft),l(Ft,Sm),h(e,th,n),h(e,Ra,n),l(Ra,Am),h(e,lh,n),h(e,ne,n),l(ne,Oe),l(Oe,ss),w(qt,ss,null),l(ne,Om),l(ne,rs),l(rs,Mm),h(e,ah,n),h(e,Za,n),l(Za,$m),h(e,ih,n),h(e,Ca,n),l(Ca,ja),h(e,oh,n),h(e,Me,n),l(Me,xm),l(Me,Bt),l(Bt,zm),l(Me,Nm),h(e,sh,n),h(e,Fa,n),l(Fa,Rm),h(e,rh,n),h(e,qa,n),l(qa,Zm),h(e,nh,n),h(e,D,n),l(D,Ba),l(Ba,Wt),l(Wt,Cm),l(Ba,jm),l(D,Fm),l(D,ns),l(ns,Vt),l(Vt,qm),l(D,Bm),l(D,hs),l(hs,Ht),l(Ht,Wm),l(D,Vm),l(D,ps),l(ps,Xt),l(Xt,Hm),l(D,Xm),l(D,fs),l(fs,Yt),l(Yt,Ym),h(e,hh,n),h(e,Wa,n),l(Wa,Jm),h(e,ph,n),h(e,he,n),l(he,$e),l($e,ds),w(Jt,ds,null),l(he,Km),l(he,cs),l(cs,Qm),h(e,fh,n),h(e,xe,n),l(xe,ev),l(xe,Va),l(Va,tv),l(xe,lv),h(e,dh,n),h(e,Ha,n),l(Ha,av),h(e,ch,n),h(e,Xa,n),l(Xa,iv),h(e,uh,n),h(e,ze,n),l(ze,ov),l(ze,us),l(us,sv),l(ze,rv),h(e,mh,n),h(e,Ya,n),l(Ya,nv),h(e,vh,n),h(e,Ja,n),l(Ja,hv),h(e,Ph,n),h(e,Ka,n),l(Ka,pv),h(e,wh,n),h(e,Ne,n),l(Ne,ms),l(ms,Kt),l(Kt,fv),l(Ne,dv),l(Ne,vs),l(vs,Qt),l(Qt,cv),h(e,yh,n),h(e,Qa,n),l(Qa,uv),h(e,bh,n),h(e,pe,n),l(pe,Re),l(Re,Ps),w(el,Ps,null),l(pe,mv),l(pe,ws),l(ws,vv),h(e,_h,n),h(e,tl,n),l(tl,ll),l(ll,Pv),l(tl,wv),h(e,Eh,n),h(e,al,n),l(al,yv),l(al,il),l(il,bv),h(e,gh,n),h(e,ei,n),l(ei,_v),h(e,Lh,n),h(e,A,n),l(A,ys),l(ys,Ev),l(A,gv),l(A,bs),l(bs,Lv),l(A,Dv),l(A,_s),l(_s,Gv),l(A,Uv),l(A,Es),l(Es,kv),h(e,Dh,n),h(e,ti,n),l(ti,Tv),h(e,Gh,n),h(e,li,n),l(li,gs),l(gs,Iv),h(e,Uh,n),h(e,ai,n),l(ai,Sv),h(e,kh,n),h(e,ii,n),l(ii,Ls),l(Ls,Av),h(e,Th,n),h(e,oi,n),l(oi,Ov),h(e,Ih,n),h(e,si,n),l(si,Ds),l(Ds,Mv),h(e,Sh,n),h(e,ri,n),l(ri,$v),h(e,Ah,n),h(e,ni,n),l(ni,Gs),l(Gs,xv),h(e,Oh,n),h(e,hi,n),l(hi,zv),h(e,Mh,n),h(e,pi,n),l(pi,fi),h(e,$h,n),h(e,di,n),l(di,Nv),h(e,xh,n),h(e,ci,n),l(ci,Rv),h(e,zh,n),h(e,ui,n),l(ui,Zv),h(e,Nh,n),h(e,Ze,n),l(Ze,Cv),l(Ze,ol),l(ol,jv),l(Ze,Fv),h(e,Rh,n),h(e,fe,n),l(fe,Ce),l(Ce,Us),w(sl,Us,null),l(fe,qv),l(fe,ks),l(ks,Bv),h(e,Zh,n),h(e,mi,n),l(mi,Wv),h(e,Ch,n),h(e,vi,n),l(vi,Ts),l(Ts,Vv),h(e,jh,n),h(e,W,n),l(W,rl),l(rl,Is),l(Is,Hv),l(rl,Xv),l(rl,Ss),l(Ss,As),l(As,Yv),l(W,Jv),l(W,nl),l(nl,Os),l(Os,Kv),l(nl,Qv),l(nl,hl),l(hl,Ms),l(Ms,eP),l(hl,tP),l(hl,$s),l($s,lP),l(W,aP),l(W,xs),l(xs,zs),l(zs,iP),h(e,Fh,n),h(e,Pi,n),l(Pi,de),l(de,oP),l(de,pl),l(pl,sP),l(de,rP),l(de,Ns),l(Ns,nP),l(de,hP),h(e,qh,n),h(e,wi,n),l(wi,Rs),l(Rs,pP),h(e,Bh,n),h(e,V,n),l(V,fl),l(fl,Zs),l(Zs,fP),l(fl,dP),l(fl,dl),l(dl,Cs),l(Cs,cP),l(dl,uP),l(dl,js),l(js,mP),l(V,vP),l(V,cl),l(cl,Fs),l(Fs,PP),l(cl,wP),l(cl,ce),l(ce,qs),l(qs,Bs),l(Bs,yP),l(ce,bP),l(ce,Ws),l(Ws,Vs),l(Vs,_P),l(ce,EP),l(ce,ue),l(ue,Hs),l(Hs,gP),l(ue,LP),l(ue,Xs),l(Xs,DP),l(ue,GP),l(ue,Ys),l(Ys,UP),l(V,kP),l(V,ul),l(ul,Js),l(Js,TP),l(ul,IP),l(ul,ml),l(ml,Ks),l(Ks,SP),l(ml,AP),l(ml,Qs),l(Qs,OP),h(e,Wh,n),h(e,yi,n),l(yi,er),l(er,MP),h(e,Vh,n),h(e,je,n),l(je,vl),l(vl,tr),l(tr,$P),l(vl,xP),l(vl,Pl),l(Pl,lr),l(lr,zP),l(Pl,NP),l(Pl,ar),l(ar,RP),l(je,ZP),l(je,wl),l(wl,ir),l(ir,CP),l(wl,jP),l(wl,or),l(or,sr),l(sr,FP),Hh=!0},p:G_,i(e){Hh||(y(He.$$.fragment,e),y(Xe.$$.fragment,e),y(Ye.$$.fragment,e),y(Je.$$.fragment,e),y(Ke.$$.fragment,e),y(et.$$.fragment,e),y(tt.$$.fragment,e),y(lt.$$.fragment,e),y(st.$$.fragment,e),y(rt.$$.fragment,e),y(_t.$$.fragment,e),y(zt.$$.fragment,e),y(qt.$$.fragment,e),y(Jt.$$.fragment,e),y(el.$$.fragment,e),y(sl.$$.fragment,e),Hh=!0)},o(e){b(He.$$.fragment,e),b(Xe.$$.fragment,e),b(Ye.$$.fragment,e),b(Je.$$.fragment,e),b(Ke.$$.fragment,e),b(et.$$.fragment,e),b(tt.$$.fragment,e),b(lt.$$.fragment,e),b(st.$$.fragment,e),b(rt.$$.fragment,e),b(_t.$$.fragment,e),b(zt.$$.fragment,e),b(qt.$$.fragment,e),b(Jt.$$.fragment,e),b(el.$$.fragment,e),b(sl.$$.fragment,e),Hh=!1},d(e){t($),e&&t(yl),e&&t(U),_(He),e&&t(hr),e&&t(Q),_(Xe),e&&t(pr),e&&t(bl),e&&t(fr),e&&t(ve),e&&t(dr),e&&t(_l),e&&t(cr),e&&t(El),e&&t(ur),e&&t(ee),_(Ye),e&&t(mr),e&&t(gl),e&&t(vr),e&&t(E),e&&t(Pr),e&&t(te),_(Je),e&&t(wr),e&&t(x),e&&t(yr),e&&t(le),_(Ke),e&&t(br),e&&t(ae),e&&t(_r),e&&t(be),e&&t(Er),e&&t(Dl),e&&t(gr),_(et,e),e&&t(Lr),e&&t(Gl),e&&t(Dr),e&&t(Ul),e&&t(Gr),_(tt,e),e&&t(Ur),e&&t(kl),e&&t(kr),e&&t(Tl),e&&t(Tr),_(lt,e),e&&t(Ir),e&&t(Il),e&&t(Sr),e&&t(Sl),e&&t(Ar),e&&t(Al),e&&t(Or),e&&t(Ol),e&&t(Mr),e&&t(Ml),e&&t($r),e&&t($l),e&&t(xr),e&&t(xl),e&&t(zr),e&&t(zl),e&&t(Nr),e&&t(Nl),e&&t(Rr),e&&t(z),e&&t(Zr),e&&t(Rl),e&&t(Cr),e&&t(Zl),e&&t(jr),e&&t(Cl),e&&t(Fr),e&&t(jl),e&&t(qr),e&&t(Fl),e&&t(Br),e&&t(N),e&&t(Wr),e&&t(ie),_(st),e&&t(Vr),e&&t(Ee),e&&t(Hr),e&&t(Wl),e&&t(Xr),_(rt,e),e&&t(Yr),e&&t(Vl),e&&t(Jr),e&&t(Hl),e&&t(Kr),e&&t(Xl),e&&t(Qr),e&&t(Yl),e&&t(en),e&&t(ge),e&&t(tn),e&&t(Jl),e&&t(ln),e&&t(Le),e&&t(an),e&&t(Kl),e&&t(on),e&&t(ea),e&&t(sn),e&&t(ta),e&&t(rn),e&&t(R),e&&t(nn),e&&t(De),e&&t(hn),e&&t(Ge),e&&t(pn),e&&t(Z),e&&t(fn),e&&t(la),e&&t(dn),e&&t(C),e&&t(cn),e&&t(k),e&&t(un),e&&t(aa),e&&t(mn),e&&t(ia),e&&t(vn),e&&t(T),e&&t(Pn),e&&t(oa),e&&t(wn),e&&t(Ue),e&&t(yn),e&&t(sa),e&&t(bn),e&&t(I),e&&t(_n),e&&t(na),e&&t(En),e&&t(ha),e&&t(gn),e&&t(u),e&&t(Ln),e&&t(ke),e&&t(Dn),e&&t(ca),e&&t(Gn),e&&t(oe),e&&t(Un),e&&t(ma),e&&t(kn),e&&t(va),e&&t(Tn),e&&t(Te),e&&t(In),e&&t(se),_(_t),e&&t(Sn),e&&t(Pa),e&&t(An),e&&t(j),e&&t(On),e&&t(F),e&&t(Mn),e&&t(g),e&&t($n),e&&t(Lt),e&&t(xn),e&&t(c),e&&t(zn),e&&t(Dt),e&&t(Nn),e&&t(Gt),e&&t(Rn),e&&t(Ea),e&&t(Zn),e&&t(q),e&&t(Cn),e&&t(ga),e&&t(jn),e&&t(La),e&&t(Fn),e&&t(Da),e&&t(qn),e&&t(Ua),e&&t(Bn),e&&t(S),e&&t(Wn),e&&t(Aa),e&&t(Vn),e&&t(B),e&&t(Hn),e&&t(re),_(zt),e&&t(Xn),e&&t(Ae),e&&t(Yn),e&&t(Ma),e&&t(Jn),e&&t(xa),e&&t(Kn),e&&t(za),e&&t(Qn),e&&t(Na),e&&t(eh),e&&t(L),e&&t(th),e&&t(Ra),e&&t(lh),e&&t(ne),_(qt),e&&t(ah),e&&t(Za),e&&t(ih),e&&t(Ca),e&&t(oh),e&&t(Me),e&&t(sh),e&&t(Fa),e&&t(rh),e&&t(qa),e&&t(nh),e&&t(D),e&&t(hh),e&&t(Wa),e&&t(ph),e&&t(he),_(Jt),e&&t(fh),e&&t(xe),e&&t(dh),e&&t(Ha),e&&t(ch),e&&t(Xa),e&&t(uh),e&&t(ze),e&&t(mh),e&&t(Ya),e&&t(vh),e&&t(Ja),e&&t(Ph),e&&t(Ka),e&&t(wh),e&&t(Ne),e&&t(yh),e&&t(Qa),e&&t(bh),e&&t(pe),_(el),e&&t(_h),e&&t(tl),e&&t(Eh),e&&t(al),e&&t(gh),e&&t(ei),e&&t(Lh),e&&t(A),e&&t(Dh),e&&t(ti),e&&t(Gh),e&&t(li),e&&t(Uh),e&&t(ai),e&&t(kh),e&&t(ii),e&&t(Th),e&&t(oi),e&&t(Ih),e&&t(si),e&&t(Sh),e&&t(ri),e&&t(Ah),e&&t(ni),e&&t(Oh),e&&t(hi),e&&t(Mh),e&&t(pi),e&&t($h),e&&t(di),e&&t(xh),e&&t(ci),e&&t(zh),e&&t(ui),e&&t(Nh),e&&t(Ze),e&&t(Rh),e&&t(fe),_(sl),e&&t(Zh),e&&t(mi),e&&t(Ch),e&&t(vi),e&&t(jh),e&&t(W),e&&t(Fh),e&&t(Pi),e&&t(qh),e&&t(wi),e&&t(Bh),e&&t(V),e&&t(Wh),e&&t(yi),e&&t(Vh),e&&t(je)}}}const k_={local:"model-parallelism",sections:[{local:"parallelism-overview",title:"Parallelism overview"},{local:"concepts",title:"Concepts"},{local:"data-parallelism",title:"Data Parallelism"},{local:"zero-data-parallelism",title:"ZeRO Data Parallelism"},{local:"naive-model-parallelism-vertical-and-pipeline-parallelism",title:"Naive Model Parallelism (Vertical) and Pipeline Parallelism"},{local:"tensor-parallelism",title:"Tensor Parallelism"},{local:"dppp",title:"DP+PP"},{local:"dppptp",title:"DP+PP+TP"},{local:"zero-dppptp",title:"ZeRO DP+PP+TP"},{local:"flexflow",title:"FlexFlow"},{local:"which-strategy-to-use-when",title:"Which Strategy To Use When"}],title:"Model Parallelism"};function T_(Rp,$,yl){let{fw:U}=$;return Rp.$$set=M=>{"fw"in M&&yl(0,U=M.fw)},[U]}class M_ extends E_{constructor($){super();g_(this,$,T_,U_,L_,{fw:0})}}export{M_ as default,k_ as metadata};
