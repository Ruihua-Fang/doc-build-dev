import{S as omt,i as rmt,s as tmt,e as a,k as l,w as f,t as o,M as amt,c as n,d as t,m as i,a as s,x as m,h as r,b as c,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-22ad994f.js";import{T as DCr}from"../../chunks/Tip-540f533b.js";import{D as y}from"../../chunks/Docstring-3bc3620c.js";import{C as w}from"../../chunks/CodeBlock-03069293.js";import{I as V}from"../../chunks/IconCopyLink-2eb9a001.js";import"../../chunks/CopyButton-f539c482.js";function nmt(fi){let J,Ae,ie,me,ro,ce,ue,jo,mi,tf,Zt,gi,hi,AC,af,ye,lo,pi,En,LC,yn,wn,BC,_i,An,kC,ui,nf,Aa;return{c(){J=a("p"),Ae=o("If your "),ie=a("code"),me=o("NewModelConfig"),ro=o(" is a subclass of "),ce=a("code"),ue=o("PretrainedConfig"),jo=o(`, make sure its
`),mi=a("code"),tf=o("model_type"),Zt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),AC=o(")."),af=l(),ye=a("p"),lo=o("Likewise, if your "),pi=a("code"),En=o("NewModel"),LC=o(" is a subclass of "),yn=a("a"),wn=o("PreTrainedModel"),BC=o(`, make sure its
`),_i=a("code"),An=o("config_class"),kC=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),nf=o("NewModelConfig"),Aa=o(")."),this.h()},l(io){J=n(io,"P",{});var ge=s(J);Ae=r(ge,"If your "),ie=n(ge,"CODE",{});var J0=s(ie);me=r(J0,"NewModelConfig"),J0.forEach(t),ro=r(ge," is a subclass of "),ce=n(ge,"CODE",{});var bi=s(ce);ue=r(bi,"PretrainedConfig"),bi.forEach(t),jo=r(ge,`, make sure its
`),mi=n(ge,"CODE",{});var Y0=s(mi);tf=r(Y0,"model_type"),Y0.forEach(t),Zt=r(ge," attribute is set to the same key you use when registering the config (here "),gi=n(ge,"CODE",{});var K0=s(gi);hi=r(K0,'"new-model"'),K0.forEach(t),AC=r(ge,")."),ge.forEach(t),af=i(io),ye=n(io,"P",{});var No=s(ye);lo=r(No,"Likewise, if your "),pi=n(No,"CODE",{});var La=s(pi);En=r(La,"NewModel"),La.forEach(t),LC=r(No," is a subclass of "),yn=n(No,"A",{href:!0});var Z0=s(yn);wn=r(Z0,"PreTrainedModel"),Z0.forEach(t),BC=r(No,`, make sure its
`),_i=n(No,"CODE",{});var sf=s(_i);An=r(sf,"config_class"),sf.forEach(t),kC=r(No,` attribute is set to the same class you use when registering the model (here
`),ui=n(No,"CODE",{});var e6=s(ui);nf=r(e6,"NewModelConfig"),e6.forEach(t),Aa=r(No,")."),No.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel")},m(io,ge){b(io,J,ge),e(J,Ae),e(J,ie),e(ie,me),e(J,ro),e(J,ce),e(ce,ue),e(J,jo),e(J,mi),e(mi,tf),e(J,Zt),e(J,gi),e(gi,hi),e(J,AC),b(io,af,ge),b(io,ye,ge),e(ye,lo),e(ye,pi),e(pi,En),e(ye,LC),e(ye,yn),e(yn,wn),e(ye,BC),e(ye,_i),e(_i,An),e(ye,kC),e(ye,ui),e(ui,nf),e(ye,Aa)},d(io){io&&t(J),io&&t(af),io&&t(ye)}}}function smt(fi){let J,Ae,ie,me,ro;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),ro=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var jo=s(ie);me=r(jo,"use_auth_token=True"),jo.forEach(t),ro=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,ro)},d(ce){ce&&t(J)}}}function lmt(fi){let J,Ae,ie,me,ro;return{c(){J=a("p"),Ae=o("Passing "),ie=a("code"),me=o("use_auth_token=True"),ro=o(" is required when you want to use a private model.")},l(ce){J=n(ce,"P",{});var ue=s(J);Ae=r(ue,"Passing "),ie=n(ue,"CODE",{});var jo=s(ie);me=r(jo,"use_auth_token=True"),jo.forEach(t),ro=r(ue," is required when you want to use a private model."),ue.forEach(t)},m(ce,ue){b(ce,J,ue),e(J,Ae),e(J,ie),e(ie,me),e(J,ro)},d(ce){ce&&t(J)}}}function imt(fi){let J,Ae,ie,me,ro,ce,ue,jo,mi,tf,Zt,gi,hi,AC,af,ye,lo,pi,En,LC,yn,wn,BC,_i,An,kC,ui,nf,Aa,io,ge,J0,bi,Y0,K0,No,La,Z0,sf,e6,MBe,M0e,vi,lf,bz,xC,EBe,vz,yBe,E0e,Ln,wBe,Tz,ABe,LBe,Fz,BBe,kBe,y0e,RC,w0e,o6,xBe,A0e,df,L0e,Ti,cf,Cz,SC,RBe,Mz,SBe,B0e,Do,PC,PBe,$C,$Be,r6,IBe,jBe,NBe,IC,DBe,Ez,qBe,OBe,GBe,co,jC,XBe,yz,zBe,VBe,Fi,WBe,wz,QBe,HBe,Az,UBe,JBe,YBe,v,ff,Lz,KBe,ZBe,t6,eke,oke,rke,mf,Bz,tke,ake,a6,nke,ske,lke,gf,kz,ike,dke,n6,cke,fke,mke,hf,xz,gke,hke,s6,pke,_ke,uke,pf,Rz,bke,vke,l6,Tke,Fke,Cke,_f,Sz,Mke,Eke,i6,yke,wke,Ake,uf,Pz,Lke,Bke,d6,kke,xke,Rke,bf,$z,Ske,Pke,c6,$ke,Ike,jke,vf,Iz,Nke,Dke,f6,qke,Oke,Gke,Tf,jz,Xke,zke,m6,Vke,Wke,Qke,Ff,Nz,Hke,Uke,g6,Jke,Yke,Kke,Cf,Dz,Zke,exe,h6,oxe,rxe,txe,Mf,qz,axe,nxe,p6,sxe,lxe,ixe,Ef,Oz,dxe,cxe,Gz,fxe,mxe,gxe,yf,Xz,hxe,pxe,_6,_xe,uxe,bxe,wf,zz,vxe,Txe,u6,Fxe,Cxe,Mxe,Af,Vz,Exe,yxe,b6,wxe,Axe,Lxe,Lf,Wz,Bxe,kxe,v6,xxe,Rxe,Sxe,Bf,Qz,Pxe,$xe,T6,Ixe,jxe,Nxe,kf,Hz,Dxe,qxe,F6,Oxe,Gxe,Xxe,xf,Uz,zxe,Vxe,C6,Wxe,Qxe,Hxe,Rf,Jz,Uxe,Jxe,M6,Yxe,Kxe,Zxe,Sf,Yz,eRe,oRe,E6,rRe,tRe,aRe,Pf,Kz,nRe,sRe,y6,lRe,iRe,dRe,$f,Zz,cRe,fRe,w6,mRe,gRe,hRe,If,eV,pRe,_Re,A6,uRe,bRe,vRe,jf,oV,TRe,FRe,L6,CRe,MRe,ERe,Nf,rV,yRe,wRe,B6,ARe,LRe,BRe,Df,tV,kRe,xRe,k6,RRe,SRe,PRe,qf,aV,$Re,IRe,x6,jRe,NRe,DRe,Of,nV,qRe,ORe,R6,GRe,XRe,zRe,Gf,sV,VRe,WRe,S6,QRe,HRe,URe,Xf,lV,JRe,YRe,P6,KRe,ZRe,eSe,zf,iV,oSe,rSe,$6,tSe,aSe,nSe,Vf,dV,sSe,lSe,I6,iSe,dSe,cSe,Wf,cV,fSe,mSe,j6,gSe,hSe,pSe,Qf,fV,_Se,uSe,N6,bSe,vSe,TSe,Hf,mV,FSe,CSe,D6,MSe,ESe,ySe,Uf,gV,wSe,ASe,q6,LSe,BSe,kSe,Jf,hV,xSe,RSe,O6,SSe,PSe,$Se,Yf,pV,ISe,jSe,G6,NSe,DSe,qSe,Kf,_V,OSe,GSe,X6,XSe,zSe,VSe,Zf,uV,WSe,QSe,z6,HSe,USe,JSe,em,bV,YSe,KSe,V6,ZSe,ePe,oPe,om,vV,rPe,tPe,W6,aPe,nPe,sPe,rm,TV,lPe,iPe,Q6,dPe,cPe,fPe,tm,FV,mPe,gPe,H6,hPe,pPe,_Pe,am,CV,uPe,bPe,U6,vPe,TPe,FPe,nm,MV,CPe,MPe,J6,EPe,yPe,wPe,sm,EV,APe,LPe,Y6,BPe,kPe,xPe,lm,yV,RPe,SPe,K6,PPe,$Pe,IPe,im,wV,jPe,NPe,Z6,DPe,qPe,OPe,dm,AV,GPe,XPe,eL,zPe,VPe,WPe,cm,LV,QPe,HPe,oL,UPe,JPe,YPe,fm,BV,KPe,ZPe,rL,e$e,o$e,r$e,mm,kV,t$e,a$e,tL,n$e,s$e,l$e,gm,xV,i$e,d$e,aL,c$e,f$e,m$e,hm,RV,g$e,h$e,nL,p$e,_$e,u$e,pm,SV,b$e,v$e,sL,T$e,F$e,C$e,_m,PV,M$e,E$e,lL,y$e,w$e,A$e,um,$V,L$e,B$e,iL,k$e,x$e,R$e,bm,IV,S$e,P$e,dL,$$e,I$e,j$e,vm,jV,N$e,D$e,cL,q$e,O$e,G$e,Tm,NV,X$e,z$e,fL,V$e,W$e,Q$e,Fm,DV,H$e,U$e,mL,J$e,Y$e,K$e,Cm,qV,Z$e,eIe,gL,oIe,rIe,tIe,Mm,OV,aIe,nIe,hL,sIe,lIe,iIe,Em,GV,dIe,cIe,pL,fIe,mIe,gIe,ym,XV,hIe,pIe,_L,_Ie,uIe,bIe,wm,zV,vIe,TIe,uL,FIe,CIe,MIe,Am,VV,EIe,yIe,bL,wIe,AIe,LIe,Lm,WV,BIe,kIe,vL,xIe,RIe,SIe,Bm,QV,PIe,$Ie,TL,IIe,jIe,NIe,km,HV,DIe,qIe,FL,OIe,GIe,XIe,xm,UV,zIe,VIe,CL,WIe,QIe,HIe,Rm,JV,UIe,JIe,ML,YIe,KIe,ZIe,Sm,YV,eje,oje,EL,rje,tje,aje,Pm,KV,nje,sje,yL,lje,ije,dje,$m,ZV,cje,fje,wL,mje,gje,hje,Im,eW,pje,_je,AL,uje,bje,vje,jm,oW,Tje,Fje,LL,Cje,Mje,Eje,Nm,rW,yje,wje,BL,Aje,Lje,Bje,Dm,tW,kje,xje,kL,Rje,Sje,Pje,qm,aW,$je,Ije,xL,jje,Nje,Dje,Om,nW,qje,Oje,sW,Gje,Xje,zje,Gm,lW,Vje,Wje,RL,Qje,Hje,Uje,Xm,iW,Jje,Yje,SL,Kje,Zje,eNe,zm,dW,oNe,rNe,PL,tNe,aNe,nNe,Vm,cW,sNe,lNe,fW,iNe,dNe,cNe,Wm,mW,fNe,mNe,$L,gNe,hNe,pNe,Qm,gW,_Ne,uNe,IL,bNe,vNe,TNe,hW,FNe,CNe,NC,MNe,Hm,DC,ENe,pW,yNe,k0e,Ci,Um,_W,qC,wNe,uW,ANe,x0e,qo,OC,LNe,GC,BNe,jL,kNe,xNe,RNe,XC,SNe,bW,PNe,$Ne,INe,fo,zC,jNe,vW,NNe,DNe,Ba,qNe,TW,ONe,GNe,FW,XNe,zNe,CW,VNe,WNe,QNe,M,Bn,MW,HNe,UNe,NL,JNe,YNe,DL,KNe,ZNe,eDe,kn,EW,oDe,rDe,qL,tDe,aDe,OL,nDe,sDe,lDe,xn,yW,iDe,dDe,GL,cDe,fDe,XL,mDe,gDe,hDe,Jm,wW,pDe,_De,zL,uDe,bDe,vDe,Rn,AW,TDe,FDe,VL,CDe,MDe,WL,EDe,yDe,wDe,Ym,LW,ADe,LDe,QL,BDe,kDe,xDe,Km,BW,RDe,SDe,HL,PDe,$De,IDe,Zm,kW,jDe,NDe,UL,DDe,qDe,ODe,Sn,xW,GDe,XDe,JL,zDe,VDe,YL,WDe,QDe,HDe,Pn,RW,UDe,JDe,KL,YDe,KDe,ZL,ZDe,eqe,oqe,$n,SW,rqe,tqe,e8,aqe,nqe,o8,sqe,lqe,iqe,eg,PW,dqe,cqe,r8,fqe,mqe,gqe,og,$W,hqe,pqe,t8,_qe,uqe,bqe,In,IW,vqe,Tqe,a8,Fqe,Cqe,n8,Mqe,Eqe,yqe,rg,jW,wqe,Aqe,s8,Lqe,Bqe,kqe,jn,NW,xqe,Rqe,l8,Sqe,Pqe,i8,$qe,Iqe,jqe,Nn,DW,Nqe,Dqe,d8,qqe,Oqe,c8,Gqe,Xqe,zqe,Dn,qW,Vqe,Wqe,f8,Qqe,Hqe,OW,Uqe,Jqe,Yqe,tg,GW,Kqe,Zqe,m8,eOe,oOe,rOe,qn,XW,tOe,aOe,g8,nOe,sOe,h8,lOe,iOe,dOe,ag,zW,cOe,fOe,p8,mOe,gOe,hOe,On,VW,pOe,_Oe,_8,uOe,bOe,u8,vOe,TOe,FOe,Gn,WW,COe,MOe,b8,EOe,yOe,v8,wOe,AOe,LOe,Xn,QW,BOe,kOe,T8,xOe,ROe,F8,SOe,POe,$Oe,ng,HW,IOe,jOe,C8,NOe,DOe,qOe,zn,UW,OOe,GOe,M8,XOe,zOe,E8,VOe,WOe,QOe,sg,JW,HOe,UOe,y8,JOe,YOe,KOe,Vn,YW,ZOe,eGe,w8,oGe,rGe,A8,tGe,aGe,nGe,Wn,KW,sGe,lGe,L8,iGe,dGe,B8,cGe,fGe,mGe,Qn,ZW,gGe,hGe,k8,pGe,_Ge,x8,uGe,bGe,vGe,Hn,eQ,TGe,FGe,R8,CGe,MGe,S8,EGe,yGe,wGe,lg,oQ,AGe,LGe,P8,BGe,kGe,xGe,Un,rQ,RGe,SGe,$8,PGe,$Ge,I8,IGe,jGe,NGe,Jn,tQ,DGe,qGe,j8,OGe,GGe,N8,XGe,zGe,VGe,Yn,aQ,WGe,QGe,D8,HGe,UGe,q8,JGe,YGe,KGe,Kn,nQ,ZGe,eXe,O8,oXe,rXe,G8,tXe,aXe,nXe,Zn,sQ,sXe,lXe,X8,iXe,dXe,z8,cXe,fXe,mXe,es,lQ,gXe,hXe,V8,pXe,_Xe,W8,uXe,bXe,vXe,ig,iQ,TXe,FXe,Q8,CXe,MXe,EXe,os,dQ,yXe,wXe,H8,AXe,LXe,U8,BXe,kXe,xXe,dg,cQ,RXe,SXe,J8,PXe,$Xe,IXe,cg,fQ,jXe,NXe,Y8,DXe,qXe,OXe,rs,mQ,GXe,XXe,K8,zXe,VXe,Z8,WXe,QXe,HXe,ts,gQ,UXe,JXe,eB,YXe,KXe,oB,ZXe,eze,oze,fg,hQ,rze,tze,rB,aze,nze,sze,as,pQ,lze,ize,tB,dze,cze,aB,fze,mze,gze,ns,_Q,hze,pze,nB,_ze,uze,sB,bze,vze,Tze,ss,uQ,Fze,Cze,lB,Mze,Eze,iB,yze,wze,Aze,ls,bQ,Lze,Bze,dB,kze,xze,cB,Rze,Sze,Pze,is,vQ,$ze,Ize,fB,jze,Nze,mB,Dze,qze,Oze,mg,TQ,Gze,Xze,gB,zze,Vze,Wze,gg,FQ,Qze,Hze,hB,Uze,Jze,Yze,hg,CQ,Kze,Zze,pB,eVe,oVe,rVe,pg,MQ,tVe,aVe,_B,nVe,sVe,lVe,ds,EQ,iVe,dVe,uB,cVe,fVe,bB,mVe,gVe,hVe,_g,yQ,pVe,_Ve,vB,uVe,bVe,vVe,cs,wQ,TVe,FVe,TB,CVe,MVe,FB,EVe,yVe,wVe,fs,AQ,AVe,LVe,CB,BVe,kVe,MB,xVe,RVe,SVe,ms,LQ,PVe,$Ve,EB,IVe,jVe,yB,NVe,DVe,qVe,gs,BQ,OVe,GVe,wB,XVe,zVe,AB,VVe,WVe,QVe,hs,kQ,HVe,UVe,LB,JVe,YVe,BB,KVe,ZVe,eWe,ug,xQ,oWe,rWe,kB,tWe,aWe,nWe,bg,RQ,sWe,lWe,xB,iWe,dWe,cWe,ps,SQ,fWe,mWe,RB,gWe,hWe,SB,pWe,_We,uWe,_s,PQ,bWe,vWe,PB,TWe,FWe,$B,CWe,MWe,EWe,us,$Q,yWe,wWe,IB,AWe,LWe,jB,BWe,kWe,xWe,vg,IQ,RWe,SWe,NB,PWe,$We,IWe,Tg,jQ,jWe,NWe,DB,DWe,qWe,OWe,Fg,NQ,GWe,XWe,qB,zWe,VWe,WWe,Cg,DQ,QWe,HWe,OB,UWe,JWe,YWe,bs,qQ,KWe,ZWe,OQ,eQe,oQe,GQ,rQe,tQe,aQe,Mg,XQ,nQe,sQe,GB,lQe,iQe,dQe,Eg,zQ,cQe,fQe,XB,mQe,gQe,hQe,vs,VQ,pQe,_Qe,zB,uQe,bQe,VB,vQe,TQe,FQe,Ts,WQ,CQe,MQe,WB,EQe,yQe,QB,wQe,AQe,LQe,QQ,BQe,kQe,VC,xQe,yg,WC,RQe,HQ,SQe,R0e,Mi,wg,UQ,QC,PQe,JQ,$Qe,S0e,Oo,HC,IQe,UC,jQe,HB,NQe,DQe,qQe,JC,OQe,YQ,GQe,XQe,zQe,Le,YC,VQe,KQ,WQe,QQe,ka,HQe,ZQ,UQe,JQe,eH,YQe,KQe,oH,ZQe,eHe,oHe,se,Ag,rH,rHe,tHe,UB,aHe,nHe,sHe,Lg,tH,lHe,iHe,JB,dHe,cHe,fHe,Bg,aH,mHe,gHe,nH,hHe,pHe,_He,kg,sH,uHe,bHe,YB,vHe,THe,FHe,xg,lH,CHe,MHe,KB,EHe,yHe,wHe,Rg,iH,AHe,LHe,ZB,BHe,kHe,xHe,Sg,dH,RHe,SHe,ek,PHe,$He,IHe,Pg,cH,jHe,NHe,ok,DHe,qHe,OHe,$g,fH,GHe,XHe,rk,zHe,VHe,WHe,Ig,mH,QHe,HHe,tk,UHe,JHe,YHe,jg,gH,KHe,ZHe,ak,eUe,oUe,rUe,Ng,hH,tUe,aUe,nk,nUe,sUe,lUe,Dg,pH,iUe,dUe,sk,cUe,fUe,mUe,qg,_H,gUe,hUe,lk,pUe,_Ue,uUe,Og,uH,bUe,vUe,ik,TUe,FUe,CUe,Gg,MUe,bH,EUe,yUe,KC,wUe,Xg,ZC,AUe,vH,LUe,P0e,Ei,zg,TH,eM,BUe,FH,kUe,$0e,Go,oM,xUe,rM,RUe,dk,SUe,PUe,$Ue,tM,IUe,CH,jUe,NUe,DUe,Be,aM,qUe,MH,OUe,GUe,yi,XUe,EH,zUe,VUe,yH,WUe,QUe,HUe,we,Vg,wH,UUe,JUe,ck,YUe,KUe,ZUe,Wg,AH,eJe,oJe,fk,rJe,tJe,aJe,Qg,LH,nJe,sJe,mk,lJe,iJe,dJe,Hg,BH,cJe,fJe,gk,mJe,gJe,hJe,Ug,kH,pJe,_Je,hk,uJe,bJe,vJe,Jg,xH,TJe,FJe,pk,CJe,MJe,EJe,Yg,RH,yJe,wJe,_k,AJe,LJe,BJe,Kg,SH,kJe,xJe,uk,RJe,SJe,PJe,Zg,$Je,PH,IJe,jJe,nM,NJe,eh,sM,DJe,$H,qJe,I0e,wi,oh,IH,lM,OJe,jH,GJe,j0e,Xo,iM,XJe,Ai,zJe,NH,VJe,WJe,DH,QJe,HJe,UJe,dM,JJe,qH,YJe,KJe,ZJe,Pr,cM,eYe,OH,oYe,rYe,Li,tYe,GH,aYe,nYe,XH,sYe,lYe,iYe,zH,dYe,cYe,fM,fYe,ke,mM,mYe,VH,gYe,hYe,xa,pYe,WH,_Ye,uYe,QH,bYe,vYe,HH,TYe,FYe,CYe,F,rh,UH,MYe,EYe,bk,yYe,wYe,AYe,th,JH,LYe,BYe,vk,kYe,xYe,RYe,ah,YH,SYe,PYe,Tk,$Ye,IYe,jYe,nh,KH,NYe,DYe,Fk,qYe,OYe,GYe,sh,ZH,XYe,zYe,Ck,VYe,WYe,QYe,lh,eU,HYe,UYe,Mk,JYe,YYe,KYe,ih,oU,ZYe,eKe,Ek,oKe,rKe,tKe,dh,rU,aKe,nKe,yk,sKe,lKe,iKe,ch,tU,dKe,cKe,wk,fKe,mKe,gKe,fh,aU,hKe,pKe,Ak,_Ke,uKe,bKe,mh,nU,vKe,TKe,Lk,FKe,CKe,MKe,gh,sU,EKe,yKe,Bk,wKe,AKe,LKe,hh,lU,BKe,kKe,kk,xKe,RKe,SKe,ph,iU,PKe,$Ke,dU,IKe,jKe,NKe,_h,cU,DKe,qKe,xk,OKe,GKe,XKe,uh,fU,zKe,VKe,Rk,WKe,QKe,HKe,bh,mU,UKe,JKe,Sk,YKe,KKe,ZKe,vh,gU,eZe,oZe,Pk,rZe,tZe,aZe,Th,hU,nZe,sZe,$k,lZe,iZe,dZe,Fh,pU,cZe,fZe,Ik,mZe,gZe,hZe,Ch,_U,pZe,_Ze,jk,uZe,bZe,vZe,Mh,uU,TZe,FZe,Nk,CZe,MZe,EZe,Eh,bU,yZe,wZe,Dk,AZe,LZe,BZe,yh,vU,kZe,xZe,qk,RZe,SZe,PZe,wh,TU,$Ze,IZe,Ok,jZe,NZe,DZe,Fs,FU,qZe,OZe,Gk,GZe,XZe,Xk,zZe,VZe,WZe,Ah,CU,QZe,HZe,zk,UZe,JZe,YZe,Lh,MU,KZe,ZZe,Vk,eeo,oeo,reo,Bh,EU,teo,aeo,Wk,neo,seo,leo,kh,yU,ieo,deo,Qk,ceo,feo,meo,xh,wU,geo,heo,Hk,peo,_eo,ueo,Rh,AU,beo,veo,Uk,Teo,Feo,Ceo,Sh,LU,Meo,Eeo,Jk,yeo,weo,Aeo,Ph,BU,Leo,Beo,Yk,keo,xeo,Reo,$h,kU,Seo,Peo,Kk,$eo,Ieo,jeo,Ih,xU,Neo,Deo,Zk,qeo,Oeo,Geo,jh,RU,Xeo,zeo,ex,Veo,Weo,Qeo,Nh,SU,Heo,Ueo,ox,Jeo,Yeo,Keo,Dh,PU,Zeo,eoo,rx,ooo,roo,too,qh,$U,aoo,noo,tx,soo,loo,ioo,Oh,IU,doo,coo,ax,foo,moo,goo,Gh,jU,hoo,poo,nx,_oo,uoo,boo,Xh,NU,voo,Too,sx,Foo,Coo,Moo,zh,DU,Eoo,yoo,lx,woo,Aoo,Loo,Vh,qU,Boo,koo,ix,xoo,Roo,Soo,Wh,OU,Poo,$oo,dx,Ioo,joo,Noo,Qh,GU,Doo,qoo,cx,Ooo,Goo,Xoo,Hh,XU,zoo,Voo,fx,Woo,Qoo,Hoo,Uh,zU,Uoo,Joo,mx,Yoo,Koo,Zoo,Jh,VU,ero,oro,gx,rro,tro,aro,Yh,WU,nro,sro,hx,lro,iro,dro,Kh,QU,cro,fro,px,mro,gro,hro,Zh,HU,pro,_ro,_x,uro,bro,vro,ep,UU,Tro,Fro,ux,Cro,Mro,Ero,op,JU,yro,wro,bx,Aro,Lro,Bro,rp,YU,kro,xro,vx,Rro,Sro,Pro,tp,KU,$ro,Iro,Tx,jro,Nro,Dro,ap,ZU,qro,Oro,Fx,Gro,Xro,zro,np,eJ,Vro,Wro,Cx,Qro,Hro,Uro,sp,oJ,Jro,Yro,Mx,Kro,Zro,eto,lp,rJ,oto,rto,Ex,tto,ato,nto,ip,tJ,sto,lto,yx,ito,dto,cto,dp,aJ,fto,mto,wx,gto,hto,pto,cp,nJ,_to,uto,Ax,bto,vto,Tto,fp,sJ,Fto,Cto,Lx,Mto,Eto,yto,mp,lJ,wto,Ato,Bx,Lto,Bto,kto,gp,iJ,xto,Rto,kx,Sto,Pto,$to,hp,dJ,Ito,jto,xx,Nto,Dto,qto,pp,cJ,Oto,Gto,Rx,Xto,zto,Vto,_p,fJ,Wto,Qto,Sx,Hto,Uto,Jto,up,mJ,Yto,Kto,Px,Zto,eao,oao,bp,gJ,rao,tao,$x,aao,nao,sao,vp,hJ,lao,iao,Ix,dao,cao,fao,Tp,pJ,mao,gao,jx,hao,pao,_ao,Fp,_J,uao,bao,Nx,vao,Tao,Fao,Cp,uJ,Cao,Mao,Dx,Eao,yao,wao,Mp,bJ,Aao,Lao,qx,Bao,kao,xao,Ep,vJ,Rao,Sao,TJ,Pao,$ao,Iao,yp,FJ,jao,Nao,Ox,Dao,qao,Oao,wp,CJ,Gao,Xao,Gx,zao,Vao,Wao,Ap,MJ,Qao,Hao,Xx,Uao,Jao,Yao,Lp,EJ,Kao,Zao,yJ,eno,ono,rno,Bp,wJ,tno,ano,zx,nno,sno,lno,kp,AJ,ino,dno,Vx,cno,fno,mno,xp,gno,LJ,hno,pno,BJ,_no,uno,kJ,bno,vno,gM,N0e,Bi,Rp,xJ,hM,Tno,RJ,Fno,D0e,zo,pM,Cno,ki,Mno,SJ,Eno,yno,PJ,wno,Ano,Lno,_M,Bno,$J,kno,xno,Rno,$r,uM,Sno,IJ,Pno,$no,xi,Ino,jJ,jno,Nno,NJ,Dno,qno,Ono,DJ,Gno,Xno,bM,zno,xe,vM,Vno,qJ,Wno,Qno,Ra,Hno,OJ,Uno,Jno,GJ,Yno,Kno,XJ,Zno,eso,oso,x,Sp,zJ,rso,tso,Wx,aso,nso,sso,Pp,VJ,lso,iso,Qx,dso,cso,fso,$p,WJ,mso,gso,Hx,hso,pso,_so,Ip,QJ,uso,bso,Ux,vso,Tso,Fso,jp,HJ,Cso,Mso,Jx,Eso,yso,wso,Np,UJ,Aso,Lso,Yx,Bso,kso,xso,Dp,JJ,Rso,Sso,Kx,Pso,$so,Iso,qp,YJ,jso,Nso,Zx,Dso,qso,Oso,Op,KJ,Gso,Xso,eR,zso,Vso,Wso,Gp,ZJ,Qso,Hso,oR,Uso,Jso,Yso,Xp,eY,Kso,Zso,rR,elo,olo,rlo,zp,oY,tlo,alo,tR,nlo,slo,llo,Vp,rY,ilo,dlo,aR,clo,flo,mlo,Wp,tY,glo,hlo,nR,plo,_lo,ulo,Qp,aY,blo,vlo,sR,Tlo,Flo,Clo,Hp,nY,Mlo,Elo,lR,ylo,wlo,Alo,Up,sY,Llo,Blo,iR,klo,xlo,Rlo,Jp,lY,Slo,Plo,dR,$lo,Ilo,jlo,Yp,iY,Nlo,Dlo,cR,qlo,Olo,Glo,Kp,dY,Xlo,zlo,fR,Vlo,Wlo,Qlo,Zp,cY,Hlo,Ulo,mR,Jlo,Ylo,Klo,e_,fY,Zlo,eio,gR,oio,rio,tio,o_,mY,aio,nio,hR,sio,lio,iio,r_,gY,dio,cio,pR,fio,mio,gio,t_,hY,hio,pio,_R,_io,uio,bio,a_,pY,vio,Tio,uR,Fio,Cio,Mio,n_,_Y,Eio,yio,bR,wio,Aio,Lio,s_,uY,Bio,kio,vR,xio,Rio,Sio,l_,bY,Pio,$io,TR,Iio,jio,Nio,i_,vY,Dio,qio,FR,Oio,Gio,Xio,d_,TY,zio,Vio,CR,Wio,Qio,Hio,c_,FY,Uio,Jio,MR,Yio,Kio,Zio,f_,CY,edo,odo,ER,rdo,tdo,ado,m_,MY,ndo,sdo,yR,ldo,ido,ddo,g_,EY,cdo,fdo,wR,mdo,gdo,hdo,h_,yY,pdo,_do,AR,udo,bdo,vdo,p_,wY,Tdo,Fdo,AY,Cdo,Mdo,Edo,__,LY,ydo,wdo,LR,Ado,Ldo,Bdo,u_,kdo,BY,xdo,Rdo,kY,Sdo,Pdo,xY,$do,Ido,TM,q0e,Ri,b_,RY,FM,jdo,SY,Ndo,O0e,Vo,CM,Ddo,Si,qdo,PY,Odo,Gdo,$Y,Xdo,zdo,Vdo,MM,Wdo,IY,Qdo,Hdo,Udo,Ir,EM,Jdo,jY,Ydo,Kdo,Pi,Zdo,NY,eco,oco,DY,rco,tco,aco,qY,nco,sco,yM,lco,Re,wM,ico,OY,dco,cco,Sa,fco,GY,mco,gco,XY,hco,pco,zY,_co,uco,bco,$,v_,VY,vco,Tco,BR,Fco,Cco,Mco,T_,WY,Eco,yco,kR,wco,Aco,Lco,F_,QY,Bco,kco,xR,xco,Rco,Sco,C_,HY,Pco,$co,RR,Ico,jco,Nco,M_,UY,Dco,qco,SR,Oco,Gco,Xco,E_,JY,zco,Vco,PR,Wco,Qco,Hco,y_,YY,Uco,Jco,$R,Yco,Kco,Zco,w_,KY,efo,ofo,IR,rfo,tfo,afo,A_,ZY,nfo,sfo,jR,lfo,ifo,dfo,L_,eK,cfo,ffo,NR,mfo,gfo,hfo,B_,oK,pfo,_fo,DR,ufo,bfo,vfo,k_,rK,Tfo,Ffo,qR,Cfo,Mfo,Efo,x_,tK,yfo,wfo,OR,Afo,Lfo,Bfo,R_,aK,kfo,xfo,GR,Rfo,Sfo,Pfo,S_,nK,$fo,Ifo,XR,jfo,Nfo,Dfo,P_,sK,qfo,Ofo,zR,Gfo,Xfo,zfo,$_,lK,Vfo,Wfo,VR,Qfo,Hfo,Ufo,I_,iK,Jfo,Yfo,WR,Kfo,Zfo,emo,j_,dK,omo,rmo,QR,tmo,amo,nmo,N_,cK,smo,lmo,HR,imo,dmo,cmo,D_,fK,fmo,mmo,UR,gmo,hmo,pmo,q_,mK,_mo,umo,JR,bmo,vmo,Tmo,O_,gK,Fmo,Cmo,YR,Mmo,Emo,ymo,G_,hK,wmo,Amo,KR,Lmo,Bmo,kmo,X_,pK,xmo,Rmo,ZR,Smo,Pmo,$mo,z_,_K,Imo,jmo,eS,Nmo,Dmo,qmo,V_,uK,Omo,Gmo,oS,Xmo,zmo,Vmo,W_,bK,Wmo,Qmo,rS,Hmo,Umo,Jmo,Q_,vK,Ymo,Kmo,TK,Zmo,ego,ogo,H_,FK,rgo,tgo,tS,ago,ngo,sgo,U_,CK,lgo,igo,aS,dgo,cgo,fgo,J_,MK,mgo,ggo,nS,hgo,pgo,_go,Y_,EK,ugo,bgo,yK,vgo,Tgo,Fgo,K_,wK,Cgo,Mgo,sS,Ego,ygo,wgo,Z_,Ago,AK,Lgo,Bgo,LK,kgo,xgo,BK,Rgo,Sgo,AM,G0e,$i,eu,kK,LM,Pgo,xK,$go,X0e,Wo,BM,Igo,Ii,jgo,RK,Ngo,Dgo,SK,qgo,Ogo,Ggo,kM,Xgo,PK,zgo,Vgo,Wgo,jr,xM,Qgo,$K,Hgo,Ugo,ji,Jgo,IK,Ygo,Kgo,jK,Zgo,eho,oho,NK,rho,tho,RM,aho,Se,SM,nho,DK,sho,lho,Pa,iho,qK,dho,cho,OK,fho,mho,GK,gho,hho,pho,I,ou,XK,_ho,uho,lS,bho,vho,Tho,ru,zK,Fho,Cho,iS,Mho,Eho,yho,tu,VK,who,Aho,dS,Lho,Bho,kho,au,WK,xho,Rho,cS,Sho,Pho,$ho,nu,QK,Iho,jho,fS,Nho,Dho,qho,su,HK,Oho,Gho,mS,Xho,zho,Vho,lu,UK,Who,Qho,gS,Hho,Uho,Jho,iu,JK,Yho,Kho,hS,Zho,epo,opo,du,YK,rpo,tpo,pS,apo,npo,spo,cu,KK,lpo,ipo,_S,dpo,cpo,fpo,fu,ZK,mpo,gpo,uS,hpo,ppo,_po,mu,eZ,upo,bpo,bS,vpo,Tpo,Fpo,gu,oZ,Cpo,Mpo,vS,Epo,ypo,wpo,hu,rZ,Apo,Lpo,TS,Bpo,kpo,xpo,pu,tZ,Rpo,Spo,FS,Ppo,$po,Ipo,_u,aZ,jpo,Npo,CS,Dpo,qpo,Opo,uu,nZ,Gpo,Xpo,MS,zpo,Vpo,Wpo,bu,sZ,Qpo,Hpo,ES,Upo,Jpo,Ypo,vu,lZ,Kpo,Zpo,yS,e_o,o_o,r_o,Tu,iZ,t_o,a_o,wS,n_o,s_o,l_o,Fu,dZ,i_o,d_o,AS,c_o,f_o,m_o,Cu,cZ,g_o,h_o,LS,p_o,__o,u_o,Mu,fZ,b_o,v_o,BS,T_o,F_o,C_o,Eu,mZ,M_o,E_o,kS,y_o,w_o,A_o,yu,gZ,L_o,B_o,xS,k_o,x_o,R_o,wu,hZ,S_o,P_o,RS,$_o,I_o,j_o,Au,pZ,N_o,D_o,SS,q_o,O_o,G_o,Lu,_Z,X_o,z_o,PS,V_o,W_o,Q_o,Bu,uZ,H_o,U_o,$S,J_o,Y_o,K_o,ku,bZ,Z_o,euo,vZ,ouo,ruo,tuo,xu,TZ,auo,nuo,IS,suo,luo,iuo,Ru,FZ,duo,cuo,jS,fuo,muo,guo,Su,CZ,huo,puo,MZ,_uo,uuo,buo,Pu,EZ,vuo,Tuo,NS,Fuo,Cuo,Muo,$u,Euo,yZ,yuo,wuo,wZ,Auo,Luo,AZ,Buo,kuo,PM,z0e,Ni,Iu,LZ,$M,xuo,BZ,Ruo,V0e,Qo,IM,Suo,Di,Puo,kZ,$uo,Iuo,xZ,juo,Nuo,Duo,jM,quo,RZ,Ouo,Guo,Xuo,Nr,NM,zuo,SZ,Vuo,Wuo,qi,Quo,PZ,Huo,Uuo,$Z,Juo,Yuo,Kuo,IZ,Zuo,e1o,DM,o1o,Pe,qM,r1o,jZ,t1o,a1o,$a,n1o,NZ,s1o,l1o,DZ,i1o,d1o,qZ,c1o,f1o,m1o,ae,ju,OZ,g1o,h1o,DS,p1o,_1o,u1o,Nu,GZ,b1o,v1o,qS,T1o,F1o,C1o,Du,XZ,M1o,E1o,OS,y1o,w1o,A1o,qu,zZ,L1o,B1o,GS,k1o,x1o,R1o,Ou,VZ,S1o,P1o,XS,$1o,I1o,j1o,Gu,WZ,N1o,D1o,zS,q1o,O1o,G1o,Xu,QZ,X1o,z1o,VS,V1o,W1o,Q1o,zu,HZ,H1o,U1o,WS,J1o,Y1o,K1o,Vu,UZ,Z1o,e4o,QS,o4o,r4o,t4o,Wu,JZ,a4o,n4o,HS,s4o,l4o,i4o,Qu,YZ,d4o,c4o,US,f4o,m4o,g4o,Hu,KZ,h4o,p4o,JS,_4o,u4o,b4o,Uu,ZZ,v4o,T4o,YS,F4o,C4o,M4o,Ju,eee,E4o,y4o,KS,w4o,A4o,L4o,Yu,oee,B4o,k4o,ZS,x4o,R4o,S4o,Ku,ree,P4o,$4o,eP,I4o,j4o,N4o,Zu,D4o,tee,q4o,O4o,aee,G4o,X4o,nee,z4o,V4o,OM,W0e,Oi,e1,see,GM,W4o,lee,Q4o,Q0e,Ho,XM,H4o,Gi,U4o,iee,J4o,Y4o,dee,K4o,Z4o,ebo,zM,obo,cee,rbo,tbo,abo,Dr,VM,nbo,fee,sbo,lbo,Xi,ibo,mee,dbo,cbo,gee,fbo,mbo,gbo,hee,hbo,pbo,WM,_bo,$e,QM,ubo,pee,bbo,vbo,Ia,Tbo,_ee,Fbo,Cbo,uee,Mbo,Ebo,bee,ybo,wbo,Abo,A,o1,vee,Lbo,Bbo,oP,kbo,xbo,Rbo,r1,Tee,Sbo,Pbo,rP,$bo,Ibo,jbo,t1,Fee,Nbo,Dbo,tP,qbo,Obo,Gbo,a1,Cee,Xbo,zbo,aP,Vbo,Wbo,Qbo,n1,Mee,Hbo,Ubo,nP,Jbo,Ybo,Kbo,s1,Eee,Zbo,e5o,sP,o5o,r5o,t5o,l1,yee,a5o,n5o,lP,s5o,l5o,i5o,i1,wee,d5o,c5o,iP,f5o,m5o,g5o,d1,Aee,h5o,p5o,dP,_5o,u5o,b5o,c1,Lee,v5o,T5o,cP,F5o,C5o,M5o,f1,Bee,E5o,y5o,fP,w5o,A5o,L5o,m1,kee,B5o,k5o,mP,x5o,R5o,S5o,g1,xee,P5o,$5o,gP,I5o,j5o,N5o,h1,Ree,D5o,q5o,hP,O5o,G5o,X5o,p1,See,z5o,V5o,pP,W5o,Q5o,H5o,_1,Pee,U5o,J5o,_P,Y5o,K5o,Z5o,u1,$ee,e2o,o2o,uP,r2o,t2o,a2o,b1,Iee,n2o,s2o,bP,l2o,i2o,d2o,v1,jee,c2o,f2o,vP,m2o,g2o,h2o,T1,Nee,p2o,_2o,TP,u2o,b2o,v2o,F1,Dee,T2o,F2o,FP,C2o,M2o,E2o,C1,qee,y2o,w2o,CP,A2o,L2o,B2o,M1,Oee,k2o,x2o,MP,R2o,S2o,P2o,E1,Gee,$2o,I2o,EP,j2o,N2o,D2o,y1,Xee,q2o,O2o,yP,G2o,X2o,z2o,w1,zee,V2o,W2o,wP,Q2o,H2o,U2o,A1,Vee,J2o,Y2o,AP,K2o,Z2o,evo,L1,Wee,ovo,rvo,LP,tvo,avo,nvo,B1,Qee,svo,lvo,BP,ivo,dvo,cvo,k1,Hee,fvo,mvo,kP,gvo,hvo,pvo,x1,Uee,_vo,uvo,xP,bvo,vvo,Tvo,R1,Jee,Fvo,Cvo,RP,Mvo,Evo,yvo,S1,Yee,wvo,Avo,SP,Lvo,Bvo,kvo,P1,Kee,xvo,Rvo,PP,Svo,Pvo,$vo,$1,Zee,Ivo,jvo,$P,Nvo,Dvo,qvo,I1,eoe,Ovo,Gvo,IP,Xvo,zvo,Vvo,j1,ooe,Wvo,Qvo,jP,Hvo,Uvo,Jvo,N1,roe,Yvo,Kvo,NP,Zvo,eTo,oTo,D1,toe,rTo,tTo,DP,aTo,nTo,sTo,q1,aoe,lTo,iTo,qP,dTo,cTo,fTo,O1,noe,mTo,gTo,OP,hTo,pTo,_To,G1,soe,uTo,bTo,GP,vTo,TTo,FTo,X1,loe,CTo,MTo,ioe,ETo,yTo,wTo,z1,doe,ATo,LTo,XP,BTo,kTo,xTo,V1,coe,RTo,STo,zP,PTo,$To,ITo,W1,jTo,foe,NTo,DTo,moe,qTo,OTo,goe,GTo,XTo,HM,H0e,zi,Q1,hoe,UM,zTo,poe,VTo,U0e,Uo,JM,WTo,Vi,QTo,_oe,HTo,UTo,uoe,JTo,YTo,KTo,YM,ZTo,boe,e7o,o7o,r7o,qr,KM,t7o,voe,a7o,n7o,Wi,s7o,Toe,l7o,i7o,Foe,d7o,c7o,f7o,Coe,m7o,g7o,ZM,h7o,Ie,eE,p7o,Moe,_7o,u7o,ja,b7o,Eoe,v7o,T7o,yoe,F7o,C7o,woe,M7o,E7o,y7o,O,H1,Aoe,w7o,A7o,VP,L7o,B7o,k7o,U1,Loe,x7o,R7o,WP,S7o,P7o,$7o,J1,Boe,I7o,j7o,QP,N7o,D7o,q7o,Y1,koe,O7o,G7o,HP,X7o,z7o,V7o,K1,xoe,W7o,Q7o,UP,H7o,U7o,J7o,Z1,Roe,Y7o,K7o,JP,Z7o,eFo,oFo,e4,Soe,rFo,tFo,YP,aFo,nFo,sFo,o4,Poe,lFo,iFo,KP,dFo,cFo,fFo,r4,$oe,mFo,gFo,ZP,hFo,pFo,_Fo,t4,Ioe,uFo,bFo,e$,vFo,TFo,FFo,a4,joe,CFo,MFo,o$,EFo,yFo,wFo,n4,Noe,AFo,LFo,r$,BFo,kFo,xFo,s4,Doe,RFo,SFo,t$,PFo,$Fo,IFo,l4,qoe,jFo,NFo,a$,DFo,qFo,OFo,i4,Ooe,GFo,XFo,n$,zFo,VFo,WFo,d4,Goe,QFo,HFo,s$,UFo,JFo,YFo,c4,Xoe,KFo,ZFo,l$,e9o,o9o,r9o,f4,zoe,t9o,a9o,i$,n9o,s9o,l9o,m4,Voe,i9o,d9o,d$,c9o,f9o,m9o,g4,Woe,g9o,h9o,c$,p9o,_9o,u9o,h4,Qoe,b9o,v9o,f$,T9o,F9o,C9o,p4,Hoe,M9o,E9o,m$,y9o,w9o,A9o,_4,Uoe,L9o,B9o,g$,k9o,x9o,R9o,u4,Joe,S9o,P9o,h$,$9o,I9o,j9o,b4,Yoe,N9o,D9o,Koe,q9o,O9o,G9o,v4,Zoe,X9o,z9o,p$,V9o,W9o,Q9o,T4,ere,H9o,U9o,_$,J9o,Y9o,K9o,F4,Z9o,ore,eCo,oCo,rre,rCo,tCo,tre,aCo,nCo,oE,J0e,Qi,C4,are,rE,sCo,nre,lCo,Y0e,Jo,tE,iCo,Hi,dCo,sre,cCo,fCo,lre,mCo,gCo,hCo,aE,pCo,ire,_Co,uCo,bCo,Or,nE,vCo,dre,TCo,FCo,Ui,CCo,cre,MCo,ECo,fre,yCo,wCo,ACo,mre,LCo,BCo,sE,kCo,je,lE,xCo,gre,RCo,SCo,Na,PCo,hre,$Co,ICo,pre,jCo,NCo,_re,DCo,qCo,OCo,Kt,M4,ure,GCo,XCo,u$,zCo,VCo,WCo,E4,bre,QCo,HCo,b$,UCo,JCo,YCo,y4,vre,KCo,ZCo,v$,eMo,oMo,rMo,w4,Tre,tMo,aMo,T$,nMo,sMo,lMo,A4,Fre,iMo,dMo,F$,cMo,fMo,mMo,L4,gMo,Cre,hMo,pMo,Mre,_Mo,uMo,Ere,bMo,vMo,iE,K0e,Ji,B4,yre,dE,TMo,wre,FMo,Z0e,Yo,cE,CMo,Yi,MMo,Are,EMo,yMo,Lre,wMo,AMo,LMo,fE,BMo,Bre,kMo,xMo,RMo,Gr,mE,SMo,kre,PMo,$Mo,Ki,IMo,xre,jMo,NMo,Rre,DMo,qMo,OMo,Sre,GMo,XMo,gE,zMo,Ne,hE,VMo,Pre,WMo,QMo,Da,HMo,$re,UMo,JMo,Ire,YMo,KMo,jre,ZMo,eEo,oEo,D,k4,Nre,rEo,tEo,C$,aEo,nEo,sEo,x4,Dre,lEo,iEo,M$,dEo,cEo,fEo,R4,qre,mEo,gEo,E$,hEo,pEo,_Eo,S4,Ore,uEo,bEo,y$,vEo,TEo,FEo,P4,Gre,CEo,MEo,w$,EEo,yEo,wEo,$4,Xre,AEo,LEo,A$,BEo,kEo,xEo,I4,zre,REo,SEo,L$,PEo,$Eo,IEo,j4,Vre,jEo,NEo,B$,DEo,qEo,OEo,N4,Wre,GEo,XEo,k$,zEo,VEo,WEo,D4,Qre,QEo,HEo,x$,UEo,JEo,YEo,q4,Hre,KEo,ZEo,R$,e3o,o3o,r3o,O4,Ure,t3o,a3o,S$,n3o,s3o,l3o,G4,Jre,i3o,d3o,P$,c3o,f3o,m3o,X4,Yre,g3o,h3o,$$,p3o,_3o,u3o,z4,Kre,b3o,v3o,I$,T3o,F3o,C3o,V4,Zre,M3o,E3o,j$,y3o,w3o,A3o,W4,ete,L3o,B3o,N$,k3o,x3o,R3o,Q4,ote,S3o,P3o,D$,$3o,I3o,j3o,H4,rte,N3o,D3o,q$,q3o,O3o,G3o,U4,tte,X3o,z3o,O$,V3o,W3o,Q3o,J4,ate,H3o,U3o,G$,J3o,Y3o,K3o,Y4,nte,Z3o,eyo,X$,oyo,ryo,tyo,K4,ste,ayo,nyo,z$,syo,lyo,iyo,Z4,lte,dyo,cyo,V$,fyo,myo,gyo,eb,ite,hyo,pyo,W$,_yo,uyo,byo,ob,dte,vyo,Tyo,Q$,Fyo,Cyo,Myo,rb,cte,Eyo,yyo,H$,wyo,Ayo,Lyo,tb,fte,Byo,kyo,U$,xyo,Ryo,Syo,ab,mte,Pyo,$yo,J$,Iyo,jyo,Nyo,nb,gte,Dyo,qyo,hte,Oyo,Gyo,Xyo,sb,pte,zyo,Vyo,Y$,Wyo,Qyo,Hyo,lb,_te,Uyo,Jyo,K$,Yyo,Kyo,Zyo,ib,ewo,ute,owo,rwo,bte,two,awo,vte,nwo,swo,pE,e6e,Zi,db,Tte,_E,lwo,Fte,iwo,o6e,Ko,uE,dwo,ed,cwo,Cte,fwo,mwo,Mte,gwo,hwo,pwo,bE,_wo,Ete,uwo,bwo,vwo,Xr,vE,Two,yte,Fwo,Cwo,od,Mwo,wte,Ewo,ywo,Ate,wwo,Awo,Lwo,Lte,Bwo,kwo,TE,xwo,De,FE,Rwo,Bte,Swo,Pwo,qa,$wo,kte,Iwo,jwo,xte,Nwo,Dwo,Rte,qwo,Owo,Gwo,R,cb,Ste,Xwo,zwo,Z$,Vwo,Wwo,Qwo,fb,Pte,Hwo,Uwo,eI,Jwo,Ywo,Kwo,mb,$te,Zwo,eAo,oI,oAo,rAo,tAo,gb,Ite,aAo,nAo,rI,sAo,lAo,iAo,hb,jte,dAo,cAo,tI,fAo,mAo,gAo,pb,Nte,hAo,pAo,aI,_Ao,uAo,bAo,_b,Dte,vAo,TAo,nI,FAo,CAo,MAo,ub,qte,EAo,yAo,sI,wAo,AAo,LAo,bb,Ote,BAo,kAo,lI,xAo,RAo,SAo,vb,Gte,PAo,$Ao,iI,IAo,jAo,NAo,Tb,Xte,DAo,qAo,dI,OAo,GAo,XAo,Fb,zte,zAo,VAo,cI,WAo,QAo,HAo,Cb,Vte,UAo,JAo,fI,YAo,KAo,ZAo,Mb,Wte,e0o,o0o,mI,r0o,t0o,a0o,Eb,Qte,n0o,s0o,gI,l0o,i0o,d0o,yb,Hte,c0o,f0o,hI,m0o,g0o,h0o,wb,Ute,p0o,_0o,pI,u0o,b0o,v0o,Ab,Jte,T0o,F0o,_I,C0o,M0o,E0o,Lb,Yte,y0o,w0o,uI,A0o,L0o,B0o,Bb,Kte,k0o,x0o,bI,R0o,S0o,P0o,kb,Zte,$0o,I0o,vI,j0o,N0o,D0o,xb,eae,q0o,O0o,TI,G0o,X0o,z0o,Rb,oae,V0o,W0o,FI,Q0o,H0o,U0o,Sb,rae,J0o,Y0o,CI,K0o,Z0o,e6o,Pb,tae,o6o,r6o,MI,t6o,a6o,n6o,$b,aae,s6o,l6o,EI,i6o,d6o,c6o,Ib,nae,f6o,m6o,yI,g6o,h6o,p6o,jb,sae,_6o,u6o,wI,b6o,v6o,T6o,Nb,lae,F6o,C6o,AI,M6o,E6o,y6o,Db,iae,w6o,A6o,LI,L6o,B6o,k6o,qb,dae,x6o,R6o,BI,S6o,P6o,$6o,Ob,cae,I6o,j6o,kI,N6o,D6o,q6o,Gb,fae,O6o,G6o,xI,X6o,z6o,V6o,Xb,mae,W6o,Q6o,RI,H6o,U6o,J6o,zb,gae,Y6o,K6o,SI,Z6o,eLo,oLo,Vb,hae,rLo,tLo,pae,aLo,nLo,sLo,Wb,_ae,lLo,iLo,PI,dLo,cLo,fLo,Qb,uae,mLo,gLo,$I,hLo,pLo,_Lo,Hb,uLo,bae,bLo,vLo,vae,TLo,FLo,Tae,CLo,MLo,CE,r6e,rd,Ub,Fae,ME,ELo,Cae,yLo,t6e,Zo,EE,wLo,td,ALo,Mae,LLo,BLo,Eae,kLo,xLo,RLo,yE,SLo,yae,PLo,$Lo,ILo,zr,wE,jLo,wae,NLo,DLo,ad,qLo,Aae,OLo,GLo,Lae,XLo,zLo,VLo,Bae,WLo,QLo,AE,HLo,qe,LE,ULo,kae,JLo,YLo,Oa,KLo,xae,ZLo,e8o,Rae,o8o,r8o,Sae,t8o,a8o,n8o,Pae,Jb,$ae,s8o,l8o,II,i8o,d8o,c8o,Yb,f8o,Iae,m8o,g8o,jae,h8o,p8o,Nae,_8o,u8o,BE,a6e,nd,Kb,Dae,kE,b8o,qae,v8o,n6e,er,xE,T8o,sd,F8o,Oae,C8o,M8o,Gae,E8o,y8o,w8o,RE,A8o,Xae,L8o,B8o,k8o,Vr,SE,x8o,zae,R8o,S8o,ld,P8o,Vae,$8o,I8o,Wae,j8o,N8o,D8o,Qae,q8o,O8o,PE,G8o,Oe,$E,X8o,Hae,z8o,V8o,Ga,W8o,Uae,Q8o,H8o,Jae,U8o,J8o,Yae,Y8o,K8o,Z8o,be,Zb,Kae,eBo,oBo,jI,rBo,tBo,aBo,e5,Zae,nBo,sBo,ene,lBo,iBo,dBo,Cs,one,cBo,fBo,NI,mBo,gBo,DI,hBo,pBo,_Bo,o5,rne,uBo,bBo,qI,vBo,TBo,FBo,ea,tne,CBo,MBo,OI,EBo,yBo,GI,wBo,ABo,XI,LBo,BBo,kBo,r5,ane,xBo,RBo,zI,SBo,PBo,$Bo,t5,nne,IBo,jBo,VI,NBo,DBo,qBo,a5,sne,OBo,GBo,WI,XBo,zBo,VBo,n5,lne,WBo,QBo,QI,HBo,UBo,JBo,s5,YBo,ine,KBo,ZBo,dne,eko,oko,cne,rko,tko,IE,s6e,id,l5,fne,jE,ako,mne,nko,l6e,or,NE,sko,dd,lko,gne,iko,dko,hne,cko,fko,mko,DE,gko,pne,hko,pko,_ko,Wr,qE,uko,_ne,bko,vko,cd,Tko,une,Fko,Cko,bne,Mko,Eko,yko,vne,wko,Ako,OE,Lko,Ge,GE,Bko,Tne,kko,xko,Xa,Rko,Fne,Sko,Pko,Cne,$ko,Iko,Mne,jko,Nko,Dko,Ene,i5,yne,qko,Oko,HI,Gko,Xko,zko,d5,Vko,wne,Wko,Qko,Ane,Hko,Uko,Lne,Jko,Yko,XE,i6e,fd,c5,Bne,zE,Kko,kne,Zko,d6e,rr,VE,exo,md,oxo,xne,rxo,txo,Rne,axo,nxo,sxo,WE,lxo,Sne,ixo,dxo,cxo,Qr,QE,fxo,Pne,mxo,gxo,gd,hxo,$ne,pxo,_xo,Ine,uxo,bxo,vxo,jne,Txo,Fxo,HE,Cxo,Xe,UE,Mxo,Nne,Exo,yxo,za,wxo,Dne,Axo,Lxo,qne,Bxo,kxo,One,xxo,Rxo,Sxo,to,f5,Gne,Pxo,$xo,UI,Ixo,jxo,Nxo,m5,Xne,Dxo,qxo,JI,Oxo,Gxo,Xxo,g5,zne,zxo,Vxo,YI,Wxo,Qxo,Hxo,h5,Vne,Uxo,Jxo,KI,Yxo,Kxo,Zxo,p5,Wne,eRo,oRo,ZI,rRo,tRo,aRo,_5,Qne,nRo,sRo,ej,lRo,iRo,dRo,u5,Hne,cRo,fRo,oj,mRo,gRo,hRo,b5,pRo,Une,_Ro,uRo,Jne,bRo,vRo,Yne,TRo,FRo,JE,c6e,hd,v5,Kne,YE,CRo,Zne,MRo,f6e,tr,KE,ERo,pd,yRo,ese,wRo,ARo,ose,LRo,BRo,kRo,ZE,xRo,rse,RRo,SRo,PRo,Hr,e3,$Ro,tse,IRo,jRo,_d,NRo,ase,DRo,qRo,nse,ORo,GRo,XRo,sse,zRo,VRo,o3,WRo,ze,r3,QRo,lse,HRo,URo,Va,JRo,ise,YRo,KRo,dse,ZRo,eSo,cse,oSo,rSo,tSo,ud,T5,fse,aSo,nSo,rj,sSo,lSo,iSo,F5,mse,dSo,cSo,tj,fSo,mSo,gSo,C5,gse,hSo,pSo,aj,_So,uSo,bSo,M5,vSo,hse,TSo,FSo,pse,CSo,MSo,_se,ESo,ySo,t3,m6e,bd,E5,use,a3,wSo,bse,ASo,g6e,ar,n3,LSo,vd,BSo,vse,kSo,xSo,Tse,RSo,SSo,PSo,s3,$So,Fse,ISo,jSo,NSo,Ur,l3,DSo,Cse,qSo,OSo,Td,GSo,Mse,XSo,zSo,Ese,VSo,WSo,QSo,yse,HSo,USo,i3,JSo,Ve,d3,YSo,wse,KSo,ZSo,Wa,ePo,Ase,oPo,rPo,Lse,tPo,aPo,Bse,nPo,sPo,lPo,ao,y5,kse,iPo,dPo,nj,cPo,fPo,mPo,w5,xse,gPo,hPo,sj,pPo,_Po,uPo,A5,Rse,bPo,vPo,lj,TPo,FPo,CPo,L5,Sse,MPo,EPo,ij,yPo,wPo,APo,B5,Pse,LPo,BPo,dj,kPo,xPo,RPo,k5,$se,SPo,PPo,cj,$Po,IPo,jPo,x5,Ise,NPo,DPo,fj,qPo,OPo,GPo,R5,XPo,jse,zPo,VPo,Nse,WPo,QPo,Dse,HPo,UPo,c3,h6e,Fd,S5,qse,f3,JPo,Ose,YPo,p6e,nr,m3,KPo,Cd,ZPo,Gse,e$o,o$o,Xse,r$o,t$o,a$o,g3,n$o,zse,s$o,l$o,i$o,Jr,h3,d$o,Vse,c$o,f$o,Md,m$o,Wse,g$o,h$o,Qse,p$o,_$o,u$o,Hse,b$o,v$o,p3,T$o,We,_3,F$o,Use,C$o,M$o,Qa,E$o,Jse,y$o,w$o,Yse,A$o,L$o,Kse,B$o,k$o,x$o,u3,P5,Zse,R$o,S$o,mj,P$o,$$o,I$o,$5,ele,j$o,N$o,gj,D$o,q$o,O$o,I5,G$o,ole,X$o,z$o,rle,V$o,W$o,tle,Q$o,H$o,b3,_6e,Ed,j5,ale,v3,U$o,nle,J$o,u6e,sr,T3,Y$o,yd,K$o,sle,Z$o,eIo,lle,oIo,rIo,tIo,F3,aIo,ile,nIo,sIo,lIo,Yr,C3,iIo,dle,dIo,cIo,wd,fIo,cle,mIo,gIo,fle,hIo,pIo,_Io,mle,uIo,bIo,M3,vIo,Qe,E3,TIo,gle,FIo,CIo,Ha,MIo,hle,EIo,yIo,ple,wIo,AIo,_le,LIo,BIo,kIo,Ad,N5,ule,xIo,RIo,hj,SIo,PIo,$Io,D5,ble,IIo,jIo,pj,NIo,DIo,qIo,q5,vle,OIo,GIo,_j,XIo,zIo,VIo,O5,WIo,Tle,QIo,HIo,Fle,UIo,JIo,Cle,YIo,KIo,y3,b6e,Ld,G5,Mle,w3,ZIo,Ele,ejo,v6e,lr,A3,ojo,Bd,rjo,yle,tjo,ajo,wle,njo,sjo,ljo,L3,ijo,Ale,djo,cjo,fjo,Kr,B3,mjo,Lle,gjo,hjo,kd,pjo,Ble,_jo,ujo,kle,bjo,vjo,Tjo,xle,Fjo,Cjo,k3,Mjo,He,x3,Ejo,Rle,yjo,wjo,Ua,Ajo,Sle,Ljo,Bjo,Ple,kjo,xjo,$le,Rjo,Sjo,Pjo,xd,X5,Ile,$jo,Ijo,uj,jjo,Njo,Djo,z5,jle,qjo,Ojo,bj,Gjo,Xjo,zjo,V5,Nle,Vjo,Wjo,vj,Qjo,Hjo,Ujo,W5,Jjo,Dle,Yjo,Kjo,qle,Zjo,eNo,Ole,oNo,rNo,R3,T6e,Rd,Q5,Gle,S3,tNo,Xle,aNo,F6e,ir,P3,nNo,Sd,sNo,zle,lNo,iNo,Vle,dNo,cNo,fNo,$3,mNo,Wle,gNo,hNo,pNo,Zr,I3,_No,Qle,uNo,bNo,Pd,vNo,Hle,TNo,FNo,Ule,CNo,MNo,ENo,Jle,yNo,wNo,j3,ANo,Ue,N3,LNo,Yle,BNo,kNo,Ja,xNo,Kle,RNo,SNo,Zle,PNo,$No,eie,INo,jNo,NNo,oie,H5,rie,DNo,qNo,Tj,ONo,GNo,XNo,U5,zNo,tie,VNo,WNo,aie,QNo,HNo,nie,UNo,JNo,D3,C6e,$d,J5,sie,q3,YNo,lie,KNo,M6e,dr,O3,ZNo,Id,eDo,iie,oDo,rDo,die,tDo,aDo,nDo,G3,sDo,cie,lDo,iDo,dDo,et,X3,cDo,fie,fDo,mDo,jd,gDo,mie,hDo,pDo,gie,_Do,uDo,bDo,hie,vDo,TDo,z3,FDo,Je,V3,CDo,pie,MDo,EDo,Ya,yDo,_ie,wDo,ADo,uie,LDo,BDo,bie,kDo,xDo,RDo,vie,Y5,Tie,SDo,PDo,Fj,$Do,IDo,jDo,K5,NDo,Fie,DDo,qDo,Cie,ODo,GDo,Mie,XDo,zDo,W3,E6e,Nd,Z5,Eie,Q3,VDo,yie,WDo,y6e,cr,H3,QDo,Dd,HDo,wie,UDo,JDo,Aie,YDo,KDo,ZDo,U3,eqo,Lie,oqo,rqo,tqo,ot,J3,aqo,Bie,nqo,sqo,qd,lqo,kie,iqo,dqo,xie,cqo,fqo,mqo,Rie,gqo,hqo,Y3,pqo,mo,K3,_qo,Sie,uqo,bqo,Ka,vqo,Pie,Tqo,Fqo,$ie,Cqo,Mqo,Iie,Eqo,yqo,wqo,B,e2,jie,Aqo,Lqo,Cj,Bqo,kqo,xqo,o2,Nie,Rqo,Sqo,Mj,Pqo,$qo,Iqo,r2,Die,jqo,Nqo,Ej,Dqo,qqo,Oqo,t2,qie,Gqo,Xqo,yj,zqo,Vqo,Wqo,a2,Oie,Qqo,Hqo,wj,Uqo,Jqo,Yqo,n2,Gie,Kqo,Zqo,Aj,eOo,oOo,rOo,s2,Xie,tOo,aOo,Lj,nOo,sOo,lOo,l2,zie,iOo,dOo,Bj,cOo,fOo,mOo,i2,Vie,gOo,hOo,kj,pOo,_Oo,uOo,d2,Wie,bOo,vOo,xj,TOo,FOo,COo,c2,Qie,MOo,EOo,Rj,yOo,wOo,AOo,f2,Hie,LOo,BOo,Sj,kOo,xOo,ROo,m2,Uie,SOo,POo,Pj,$Oo,IOo,jOo,g2,Jie,NOo,DOo,$j,qOo,OOo,GOo,h2,Yie,XOo,zOo,Ij,VOo,WOo,QOo,Ms,Kie,HOo,UOo,jj,JOo,YOo,Nj,KOo,ZOo,eGo,p2,Zie,oGo,rGo,Dj,tGo,aGo,nGo,_2,ede,sGo,lGo,qj,iGo,dGo,cGo,u2,ode,fGo,mGo,Oj,gGo,hGo,pGo,b2,rde,_Go,uGo,Gj,bGo,vGo,TGo,v2,tde,FGo,CGo,Xj,MGo,EGo,yGo,T2,ade,wGo,AGo,zj,LGo,BGo,kGo,F2,nde,xGo,RGo,Vj,SGo,PGo,$Go,C2,sde,IGo,jGo,Wj,NGo,DGo,qGo,M2,lde,OGo,GGo,Qj,XGo,zGo,VGo,E2,ide,WGo,QGo,Hj,HGo,UGo,JGo,y2,dde,YGo,KGo,Uj,ZGo,eXo,oXo,w2,cde,rXo,tXo,Jj,aXo,nXo,sXo,A2,fde,lXo,iXo,Yj,dXo,cXo,fXo,L2,mde,mXo,gXo,Kj,hXo,pXo,_Xo,B2,gde,uXo,bXo,Zj,vXo,TXo,FXo,k2,hde,CXo,MXo,eN,EXo,yXo,wXo,x2,pde,AXo,LXo,_de,BXo,kXo,xXo,R2,ude,RXo,SXo,oN,PXo,$Xo,IXo,S2,bde,jXo,NXo,rN,DXo,qXo,OXo,P2,vde,GXo,XXo,tN,zXo,VXo,WXo,$2,Tde,QXo,HXo,aN,UXo,JXo,YXo,I2,Fde,KXo,ZXo,nN,ezo,ozo,rzo,j2,Cde,tzo,azo,sN,nzo,szo,lzo,N2,Mde,izo,dzo,lN,czo,fzo,mzo,D2,Ede,gzo,hzo,iN,pzo,_zo,uzo,yde,bzo,vzo,Z3,w6e,Od,q2,wde,ey,Tzo,Ade,Fzo,A6e,fr,oy,Czo,Gd,Mzo,Lde,Ezo,yzo,Bde,wzo,Azo,Lzo,ry,Bzo,kde,kzo,xzo,Rzo,rt,ty,Szo,xde,Pzo,$zo,Xd,Izo,Rde,jzo,Nzo,Sde,Dzo,qzo,Ozo,Pde,Gzo,Xzo,ay,zzo,go,ny,Vzo,$de,Wzo,Qzo,Za,Hzo,Ide,Uzo,Jzo,jde,Yzo,Kzo,Nde,Zzo,eVo,oVo,H,O2,Dde,rVo,tVo,dN,aVo,nVo,sVo,G2,qde,lVo,iVo,cN,dVo,cVo,fVo,X2,Ode,mVo,gVo,fN,hVo,pVo,_Vo,z2,Gde,uVo,bVo,mN,vVo,TVo,FVo,V2,Xde,CVo,MVo,gN,EVo,yVo,wVo,W2,zde,AVo,LVo,hN,BVo,kVo,xVo,Q2,Vde,RVo,SVo,pN,PVo,$Vo,IVo,H2,Wde,jVo,NVo,_N,DVo,qVo,OVo,U2,Qde,GVo,XVo,uN,zVo,VVo,WVo,J2,Hde,QVo,HVo,bN,UVo,JVo,YVo,Y2,Ude,KVo,ZVo,vN,eWo,oWo,rWo,K2,Jde,tWo,aWo,TN,nWo,sWo,lWo,Z2,Yde,iWo,dWo,FN,cWo,fWo,mWo,ev,Kde,gWo,hWo,CN,pWo,_Wo,uWo,ov,Zde,bWo,vWo,MN,TWo,FWo,CWo,rv,ece,MWo,EWo,EN,yWo,wWo,AWo,tv,oce,LWo,BWo,yN,kWo,xWo,RWo,av,rce,SWo,PWo,wN,$Wo,IWo,jWo,nv,tce,NWo,DWo,AN,qWo,OWo,GWo,sv,ace,XWo,zWo,LN,VWo,WWo,QWo,lv,nce,HWo,UWo,BN,JWo,YWo,KWo,iv,sce,ZWo,eQo,kN,oQo,rQo,tQo,lce,aQo,nQo,sy,L6e,zd,dv,ice,ly,sQo,dce,lQo,B6e,mr,iy,iQo,Vd,dQo,cce,cQo,fQo,fce,mQo,gQo,hQo,dy,pQo,mce,_Qo,uQo,bQo,tt,cy,vQo,gce,TQo,FQo,Wd,CQo,hce,MQo,EQo,pce,yQo,wQo,AQo,_ce,LQo,BQo,fy,kQo,ho,my,xQo,uce,RQo,SQo,en,PQo,bce,$Qo,IQo,vce,jQo,NQo,Tce,DQo,qQo,OQo,he,cv,Fce,GQo,XQo,xN,zQo,VQo,WQo,fv,Cce,QQo,HQo,RN,UQo,JQo,YQo,mv,Mce,KQo,ZQo,SN,eHo,oHo,rHo,gv,Ece,tHo,aHo,PN,nHo,sHo,lHo,hv,yce,iHo,dHo,$N,cHo,fHo,mHo,pv,wce,gHo,hHo,IN,pHo,_Ho,uHo,_v,Ace,bHo,vHo,jN,THo,FHo,CHo,uv,Lce,MHo,EHo,NN,yHo,wHo,AHo,bv,Bce,LHo,BHo,DN,kHo,xHo,RHo,vv,kce,SHo,PHo,qN,$Ho,IHo,jHo,xce,NHo,DHo,gy,k6e,Qd,Tv,Rce,hy,qHo,Sce,OHo,x6e,gr,py,GHo,Hd,XHo,Pce,zHo,VHo,$ce,WHo,QHo,HHo,_y,UHo,Ice,JHo,YHo,KHo,at,uy,ZHo,jce,eUo,oUo,Ud,rUo,Nce,tUo,aUo,Dce,nUo,sUo,lUo,qce,iUo,dUo,by,cUo,po,vy,fUo,Oce,mUo,gUo,on,hUo,Gce,pUo,_Uo,Xce,uUo,bUo,zce,vUo,TUo,FUo,Vce,Fv,Wce,CUo,MUo,ON,EUo,yUo,wUo,Qce,AUo,LUo,Ty,R6e,Jd,Cv,Hce,Fy,BUo,Uce,kUo,S6e,hr,Cy,xUo,Yd,RUo,Jce,SUo,PUo,Yce,$Uo,IUo,jUo,My,NUo,Kce,DUo,qUo,OUo,nt,Ey,GUo,Zce,XUo,zUo,Kd,VUo,efe,WUo,QUo,ofe,HUo,UUo,JUo,rfe,YUo,KUo,yy,ZUo,_o,wy,eJo,tfe,oJo,rJo,rn,tJo,afe,aJo,nJo,nfe,sJo,lJo,sfe,iJo,dJo,cJo,Y,Mv,lfe,fJo,mJo,GN,gJo,hJo,pJo,Ev,ife,_Jo,uJo,XN,bJo,vJo,TJo,yv,dfe,FJo,CJo,zN,MJo,EJo,yJo,wv,cfe,wJo,AJo,VN,LJo,BJo,kJo,Av,ffe,xJo,RJo,WN,SJo,PJo,$Jo,Lv,mfe,IJo,jJo,QN,NJo,DJo,qJo,Bv,gfe,OJo,GJo,HN,XJo,zJo,VJo,kv,hfe,WJo,QJo,UN,HJo,UJo,JJo,xv,pfe,YJo,KJo,JN,ZJo,eYo,oYo,Rv,_fe,rYo,tYo,YN,aYo,nYo,sYo,Sv,ufe,lYo,iYo,KN,dYo,cYo,fYo,Pv,bfe,mYo,gYo,ZN,hYo,pYo,_Yo,$v,vfe,uYo,bYo,eD,vYo,TYo,FYo,Iv,Tfe,CYo,MYo,oD,EYo,yYo,wYo,jv,Ffe,AYo,LYo,rD,BYo,kYo,xYo,Nv,Cfe,RYo,SYo,tD,PYo,$Yo,IYo,Dv,Mfe,jYo,NYo,aD,DYo,qYo,OYo,qv,Efe,GYo,XYo,nD,zYo,VYo,WYo,Ov,yfe,QYo,HYo,sD,UYo,JYo,YYo,Gv,wfe,KYo,ZYo,lD,eKo,oKo,rKo,Afe,tKo,aKo,Ay,P6e,Zd,Xv,Lfe,Ly,nKo,Bfe,sKo,$6e,pr,By,lKo,ec,iKo,kfe,dKo,cKo,xfe,fKo,mKo,gKo,ky,hKo,Rfe,pKo,_Ko,uKo,st,xy,bKo,Sfe,vKo,TKo,oc,FKo,Pfe,CKo,MKo,$fe,EKo,yKo,wKo,Ife,AKo,LKo,Ry,BKo,uo,Sy,kKo,jfe,xKo,RKo,tn,SKo,Nfe,PKo,$Ko,Dfe,IKo,jKo,qfe,NKo,DKo,qKo,pe,zv,Ofe,OKo,GKo,iD,XKo,zKo,VKo,Vv,Gfe,WKo,QKo,dD,HKo,UKo,JKo,Wv,Xfe,YKo,KKo,cD,ZKo,eZo,oZo,Qv,zfe,rZo,tZo,fD,aZo,nZo,sZo,Hv,Vfe,lZo,iZo,mD,dZo,cZo,fZo,Uv,Wfe,mZo,gZo,gD,hZo,pZo,_Zo,Jv,Qfe,uZo,bZo,hD,vZo,TZo,FZo,Yv,Hfe,CZo,MZo,pD,EZo,yZo,wZo,Kv,Ufe,AZo,LZo,_D,BZo,kZo,xZo,Zv,Jfe,RZo,SZo,uD,PZo,$Zo,IZo,Yfe,jZo,NZo,Py,I6e,rc,eT,Kfe,$y,DZo,Zfe,qZo,j6e,_r,Iy,OZo,tc,GZo,eme,XZo,zZo,ome,VZo,WZo,QZo,jy,HZo,rme,UZo,JZo,YZo,lt,Ny,KZo,tme,ZZo,eer,ac,oer,ame,rer,ter,nme,aer,ner,ser,sme,ler,ier,Dy,der,bo,qy,cer,lme,fer,mer,an,ger,ime,her,per,dme,_er,uer,cme,ber,ver,Ter,X,oT,fme,Fer,Cer,bD,Mer,Eer,yer,rT,mme,wer,Aer,vD,Ler,Ber,ker,tT,gme,xer,Rer,TD,Ser,Per,$er,aT,hme,Ier,jer,FD,Ner,Der,qer,nT,pme,Oer,Ger,CD,Xer,zer,Ver,sT,_me,Wer,Qer,MD,Her,Uer,Jer,lT,ume,Yer,Ker,ED,Zer,eor,oor,iT,bme,ror,tor,yD,aor,nor,sor,dT,vme,lor,ior,wD,dor,cor,mor,cT,Tme,gor,hor,AD,por,_or,uor,fT,Fme,bor,vor,LD,Tor,For,Cor,mT,Cme,Mor,Eor,BD,yor,wor,Aor,gT,Mme,Lor,Bor,kD,kor,xor,Ror,hT,Eme,Sor,Por,xD,$or,Ior,jor,pT,yme,Nor,Dor,RD,qor,Oor,Gor,_T,wme,Xor,zor,SD,Vor,Wor,Qor,uT,Ame,Hor,Uor,PD,Jor,Yor,Kor,bT,Lme,Zor,err,$D,orr,rrr,trr,vT,Bme,arr,nrr,ID,srr,lrr,irr,TT,kme,drr,crr,jD,frr,mrr,grr,FT,xme,hrr,prr,ND,_rr,urr,brr,CT,Rme,vrr,Trr,DD,Frr,Crr,Mrr,MT,Sme,Err,yrr,qD,wrr,Arr,Lrr,ET,Pme,Brr,krr,OD,xrr,Rrr,Srr,yT,$me,Prr,$rr,GD,Irr,jrr,Nrr,Ime,Drr,qrr,Oy,N6e,nc,wT,jme,Gy,Orr,Nme,Grr,D6e,ur,Xy,Xrr,sc,zrr,Dme,Vrr,Wrr,qme,Qrr,Hrr,Urr,zy,Jrr,Ome,Yrr,Krr,Zrr,it,Vy,etr,Gme,otr,rtr,lc,ttr,Xme,atr,ntr,zme,str,ltr,itr,Vme,dtr,ctr,Wy,ftr,vo,Qy,mtr,Wme,gtr,htr,nn,ptr,Qme,_tr,utr,Hme,btr,vtr,Ume,Ttr,Ftr,Ctr,te,AT,Jme,Mtr,Etr,XD,ytr,wtr,Atr,LT,Yme,Ltr,Btr,zD,ktr,xtr,Rtr,BT,Kme,Str,Ptr,VD,$tr,Itr,jtr,kT,Zme,Ntr,Dtr,WD,qtr,Otr,Gtr,xT,ege,Xtr,ztr,QD,Vtr,Wtr,Qtr,RT,oge,Htr,Utr,HD,Jtr,Ytr,Ktr,ST,rge,Ztr,ear,UD,oar,rar,tar,PT,tge,aar,nar,JD,sar,lar,iar,$T,age,dar,car,YD,far,mar,gar,IT,nge,har,par,KD,_ar,uar,bar,jT,sge,Tar,Far,ZD,Car,Mar,Ear,NT,lge,yar,war,eq,Aar,Lar,Bar,DT,ige,kar,xar,oq,Rar,Sar,Par,qT,dge,$ar,Iar,rq,jar,Nar,Dar,OT,cge,qar,Oar,tq,Gar,Xar,zar,GT,fge,Var,War,aq,Qar,Har,Uar,XT,mge,Jar,Yar,nq,Kar,Zar,enr,gge,onr,rnr,Hy,q6e,ic,zT,hge,Uy,tnr,pge,anr,O6e,br,Jy,nnr,dc,snr,_ge,lnr,inr,uge,dnr,cnr,fnr,Yy,mnr,bge,gnr,hnr,pnr,dt,Ky,_nr,vge,unr,bnr,cc,vnr,Tge,Tnr,Fnr,Fge,Cnr,Mnr,Enr,Cge,ynr,wnr,Zy,Anr,To,ew,Lnr,Mge,Bnr,knr,sn,xnr,Ege,Rnr,Snr,yge,Pnr,$nr,wge,Inr,jnr,Nnr,Age,VT,Lge,Dnr,qnr,sq,Onr,Gnr,Xnr,Bge,znr,Vnr,ow,G6e,fc,WT,kge,rw,Wnr,xge,Qnr,X6e,vr,tw,Hnr,mc,Unr,Rge,Jnr,Ynr,Sge,Knr,Znr,esr,aw,osr,Pge,rsr,tsr,asr,ct,nw,nsr,$ge,ssr,lsr,gc,isr,Ige,dsr,csr,jge,fsr,msr,gsr,Nge,hsr,psr,sw,_sr,Fo,lw,usr,Dge,bsr,vsr,ln,Tsr,qge,Fsr,Csr,Oge,Msr,Esr,Gge,ysr,wsr,Asr,K,QT,Xge,Lsr,Bsr,lq,ksr,xsr,Rsr,HT,zge,Ssr,Psr,iq,$sr,Isr,jsr,UT,Vge,Nsr,Dsr,dq,qsr,Osr,Gsr,JT,Wge,Xsr,zsr,cq,Vsr,Wsr,Qsr,YT,Qge,Hsr,Usr,fq,Jsr,Ysr,Ksr,KT,Hge,Zsr,elr,mq,olr,rlr,tlr,ZT,Uge,alr,nlr,gq,slr,llr,ilr,e7,Jge,dlr,clr,hq,flr,mlr,glr,o7,Yge,hlr,plr,pq,_lr,ulr,blr,r7,Kge,vlr,Tlr,_q,Flr,Clr,Mlr,t7,Zge,Elr,ylr,uq,wlr,Alr,Llr,a7,ehe,Blr,klr,bq,xlr,Rlr,Slr,n7,ohe,Plr,$lr,vq,Ilr,jlr,Nlr,s7,rhe,Dlr,qlr,Tq,Olr,Glr,Xlr,l7,the,zlr,Vlr,Fq,Wlr,Qlr,Hlr,i7,ahe,Ulr,Jlr,Cq,Ylr,Klr,Zlr,d7,nhe,eir,oir,Mq,rir,tir,air,c7,she,nir,sir,Eq,lir,iir,dir,f7,lhe,cir,fir,yq,mir,gir,hir,m7,ihe,pir,_ir,wq,uir,bir,vir,dhe,Tir,Fir,iw,z6e,hc,g7,che,dw,Cir,fhe,Mir,V6e,Tr,cw,Eir,pc,yir,mhe,wir,Air,ghe,Lir,Bir,kir,fw,xir,hhe,Rir,Sir,Pir,ft,mw,$ir,phe,Iir,jir,_c,Nir,_he,Dir,qir,uhe,Oir,Gir,Xir,bhe,zir,Vir,gw,Wir,Co,hw,Qir,vhe,Hir,Uir,dn,Jir,The,Yir,Kir,Fhe,Zir,edr,Che,odr,rdr,tdr,Z,h7,Mhe,adr,ndr,Aq,sdr,ldr,idr,p7,Ehe,ddr,cdr,Lq,fdr,mdr,gdr,_7,yhe,hdr,pdr,Bq,_dr,udr,bdr,u7,whe,vdr,Tdr,kq,Fdr,Cdr,Mdr,b7,Ahe,Edr,ydr,xq,wdr,Adr,Ldr,v7,Lhe,Bdr,kdr,Rq,xdr,Rdr,Sdr,T7,Bhe,Pdr,$dr,Sq,Idr,jdr,Ndr,F7,khe,Ddr,qdr,Pq,Odr,Gdr,Xdr,C7,xhe,zdr,Vdr,$q,Wdr,Qdr,Hdr,M7,Rhe,Udr,Jdr,Iq,Ydr,Kdr,Zdr,E7,She,ecr,ocr,jq,rcr,tcr,acr,y7,Phe,ncr,scr,Nq,lcr,icr,dcr,w7,$he,ccr,fcr,Dq,mcr,gcr,hcr,A7,Ihe,pcr,_cr,qq,ucr,bcr,vcr,L7,jhe,Tcr,Fcr,Oq,Ccr,Mcr,Ecr,B7,Nhe,ycr,wcr,Gq,Acr,Lcr,Bcr,k7,Dhe,kcr,xcr,Xq,Rcr,Scr,Pcr,x7,qhe,$cr,Icr,zq,jcr,Ncr,Dcr,R7,Ohe,qcr,Ocr,Vq,Gcr,Xcr,zcr,Ghe,Vcr,Wcr,pw,W6e,uc,S7,Xhe,_w,Qcr,zhe,Hcr,Q6e,Fr,uw,Ucr,bc,Jcr,Vhe,Ycr,Kcr,Whe,Zcr,efr,ofr,bw,rfr,Qhe,tfr,afr,nfr,mt,vw,sfr,Hhe,lfr,ifr,vc,dfr,Uhe,cfr,ffr,Jhe,mfr,gfr,hfr,Yhe,pfr,_fr,Tw,ufr,Mo,Fw,bfr,Khe,vfr,Tfr,cn,Ffr,Zhe,Cfr,Mfr,epe,Efr,yfr,ope,wfr,Afr,Lfr,rpe,P7,tpe,Bfr,kfr,Wq,xfr,Rfr,Sfr,ape,Pfr,$fr,Cw,H6e,Tc,$7,npe,Mw,Ifr,spe,jfr,U6e,Cr,Ew,Nfr,Fc,Dfr,lpe,qfr,Ofr,ipe,Gfr,Xfr,zfr,yw,Vfr,dpe,Wfr,Qfr,Hfr,gt,ww,Ufr,cpe,Jfr,Yfr,Cc,Kfr,fpe,Zfr,emr,mpe,omr,rmr,tmr,gpe,amr,nmr,Aw,smr,Eo,Lw,lmr,hpe,imr,dmr,fn,cmr,ppe,fmr,mmr,_pe,gmr,hmr,upe,pmr,_mr,umr,z,I7,bpe,bmr,vmr,Qq,Tmr,Fmr,Cmr,j7,vpe,Mmr,Emr,Hq,ymr,wmr,Amr,N7,Tpe,Lmr,Bmr,Uq,kmr,xmr,Rmr,D7,Fpe,Smr,Pmr,Jq,$mr,Imr,jmr,q7,Cpe,Nmr,Dmr,Yq,qmr,Omr,Gmr,O7,Mpe,Xmr,zmr,Kq,Vmr,Wmr,Qmr,G7,Epe,Hmr,Umr,Zq,Jmr,Ymr,Kmr,X7,ype,Zmr,egr,eO,ogr,rgr,tgr,z7,wpe,agr,ngr,oO,sgr,lgr,igr,V7,Ape,dgr,cgr,rO,fgr,mgr,ggr,W7,Lpe,hgr,pgr,tO,_gr,ugr,bgr,Q7,Bpe,vgr,Tgr,aO,Fgr,Cgr,Mgr,H7,kpe,Egr,ygr,nO,wgr,Agr,Lgr,U7,xpe,Bgr,kgr,sO,xgr,Rgr,Sgr,J7,Rpe,Pgr,$gr,lO,Igr,jgr,Ngr,Y7,Spe,Dgr,qgr,iO,Ogr,Ggr,Xgr,K7,Ppe,zgr,Vgr,dO,Wgr,Qgr,Hgr,Z7,$pe,Ugr,Jgr,cO,Ygr,Kgr,Zgr,eF,Ipe,ehr,ohr,fO,rhr,thr,ahr,oF,jpe,nhr,shr,mO,lhr,ihr,dhr,rF,Npe,chr,fhr,gO,mhr,ghr,hhr,tF,Dpe,phr,_hr,hO,uhr,bhr,vhr,aF,qpe,Thr,Fhr,pO,Chr,Mhr,Ehr,nF,Ope,yhr,whr,Gpe,Ahr,Lhr,Bhr,Xpe,khr,xhr,Bw,J6e,Mc,sF,zpe,kw,Rhr,Vpe,Shr,Y6e,Mr,xw,Phr,Ec,$hr,Wpe,Ihr,jhr,Qpe,Nhr,Dhr,qhr,Rw,Ohr,Hpe,Ghr,Xhr,zhr,ht,Sw,Vhr,Upe,Whr,Qhr,yc,Hhr,Jpe,Uhr,Jhr,Ype,Yhr,Khr,Zhr,Kpe,epr,opr,Pw,rpr,yo,$w,tpr,Zpe,apr,npr,mn,spr,e_e,lpr,ipr,o_e,dpr,cpr,r_e,fpr,mpr,gpr,gn,lF,t_e,hpr,ppr,_O,_pr,upr,bpr,iF,a_e,vpr,Tpr,uO,Fpr,Cpr,Mpr,dF,n_e,Epr,ypr,bO,wpr,Apr,Lpr,cF,s_e,Bpr,kpr,l_e,xpr,Rpr,Spr,i_e,Ppr,$pr,Iw,K6e,wc,fF,d_e,jw,Ipr,c_e,jpr,Z6e,Er,Nw,Npr,Ac,Dpr,f_e,qpr,Opr,m_e,Gpr,Xpr,zpr,Dw,Vpr,g_e,Wpr,Qpr,Hpr,pt,qw,Upr,h_e,Jpr,Ypr,Lc,Kpr,p_e,Zpr,e_r,__e,o_r,r_r,t_r,u_e,a_r,n_r,Ow,s_r,wo,Gw,l_r,b_e,i_r,d_r,hn,c_r,v_e,f_r,m_r,T_e,g_r,h_r,F_e,p_r,__r,u_r,fe,mF,C_e,b_r,v_r,vO,T_r,F_r,C_r,gF,M_e,M_r,E_r,TO,y_r,w_r,A_r,hF,E_e,L_r,B_r,FO,k_r,x_r,R_r,pF,y_e,S_r,P_r,CO,$_r,I_r,j_r,_F,w_e,N_r,D_r,MO,q_r,O_r,G_r,uF,A_e,X_r,z_r,EO,V_r,W_r,Q_r,bF,L_e,H_r,U_r,yO,J_r,Y_r,K_r,vF,B_e,Z_r,eur,wO,our,rur,tur,TF,k_e,aur,nur,AO,sur,lur,iur,FF,x_e,dur,cur,LO,fur,mur,gur,CF,R_e,hur,pur,BO,_ur,uur,bur,S_e,vur,Tur,Xw,eLe,Bc,MF,P_e,zw,Fur,$_e,Cur,oLe,yr,Vw,Mur,kc,Eur,I_e,yur,wur,j_e,Aur,Lur,Bur,Ww,kur,N_e,xur,Rur,Sur,_t,Qw,Pur,D_e,$ur,Iur,xc,jur,q_e,Nur,Dur,O_e,qur,Our,Gur,G_e,Xur,zur,Hw,Vur,Ao,Uw,Wur,X_e,Qur,Hur,pn,Uur,z_e,Jur,Yur,V_e,Kur,Zur,W_e,e1r,o1r,r1r,ve,EF,Q_e,t1r,a1r,kO,n1r,s1r,l1r,yF,H_e,i1r,d1r,xO,c1r,f1r,m1r,wF,U_e,g1r,h1r,RO,p1r,_1r,u1r,AF,J_e,b1r,v1r,SO,T1r,F1r,C1r,LF,Y_e,M1r,E1r,PO,y1r,w1r,A1r,BF,K_e,L1r,B1r,$O,k1r,x1r,R1r,kF,Z_e,S1r,P1r,IO,$1r,I1r,j1r,xF,eue,N1r,D1r,jO,q1r,O1r,G1r,RF,oue,X1r,z1r,NO,V1r,W1r,Q1r,rue,H1r,U1r,Jw,rLe,Rc,SF,tue,Yw,J1r,aue,Y1r,tLe,wr,Kw,K1r,Sc,Z1r,nue,e4r,o4r,sue,r4r,t4r,a4r,Zw,n4r,lue,s4r,l4r,i4r,ut,eA,d4r,iue,c4r,f4r,Pc,m4r,due,g4r,h4r,cue,p4r,_4r,u4r,fue,b4r,v4r,oA,T4r,Lo,rA,F4r,mue,C4r,M4r,_n,E4r,gue,y4r,w4r,hue,A4r,L4r,pue,B4r,k4r,x4r,Te,PF,_ue,R4r,S4r,DO,P4r,$4r,I4r,$F,uue,j4r,N4r,qO,D4r,q4r,O4r,IF,bue,G4r,X4r,OO,z4r,V4r,W4r,jF,vue,Q4r,H4r,GO,U4r,J4r,Y4r,NF,Tue,K4r,Z4r,XO,ebr,obr,rbr,DF,Fue,tbr,abr,zO,nbr,sbr,lbr,qF,Cue,ibr,dbr,VO,cbr,fbr,mbr,OF,Mue,gbr,hbr,WO,pbr,_br,ubr,GF,Eue,bbr,vbr,QO,Tbr,Fbr,Cbr,yue,Mbr,Ebr,tA,aLe,$c,XF,wue,aA,ybr,Aue,wbr,nLe,Ar,nA,Abr,Ic,Lbr,Lue,Bbr,kbr,Bue,xbr,Rbr,Sbr,sA,Pbr,kue,$br,Ibr,jbr,bt,lA,Nbr,xue,Dbr,qbr,jc,Obr,Rue,Gbr,Xbr,Sue,zbr,Vbr,Wbr,Pue,Qbr,Hbr,iA,Ubr,Bo,dA,Jbr,$ue,Ybr,Kbr,un,Zbr,Iue,e5r,o5r,jue,r5r,t5r,Nue,a5r,n5r,s5r,Fe,zF,Due,l5r,i5r,HO,d5r,c5r,f5r,VF,que,m5r,g5r,UO,h5r,p5r,_5r,WF,Oue,u5r,b5r,JO,v5r,T5r,F5r,QF,Gue,C5r,M5r,YO,E5r,y5r,w5r,HF,Xue,A5r,L5r,KO,B5r,k5r,x5r,UF,zue,R5r,S5r,ZO,P5r,$5r,I5r,JF,Vue,j5r,N5r,eG,D5r,q5r,O5r,YF,Wue,G5r,X5r,oG,z5r,V5r,W5r,KF,Que,Q5r,H5r,rG,U5r,J5r,Y5r,Hue,K5r,Z5r,cA,sLe,Nc,ZF,Uue,fA,e2r,Jue,o2r,lLe,Lr,mA,r2r,Dc,t2r,Yue,a2r,n2r,Kue,s2r,l2r,i2r,gA,d2r,Zue,c2r,f2r,m2r,vt,hA,g2r,e1e,h2r,p2r,qc,_2r,o1e,u2r,b2r,r1e,v2r,T2r,F2r,t1e,C2r,M2r,pA,E2r,ko,_A,y2r,a1e,w2r,A2r,bn,L2r,n1e,B2r,k2r,s1e,x2r,R2r,l1e,S2r,P2r,$2r,Ce,e9,i1e,I2r,j2r,tG,N2r,D2r,q2r,o9,d1e,O2r,G2r,aG,X2r,z2r,V2r,r9,c1e,W2r,Q2r,nG,H2r,U2r,J2r,t9,f1e,Y2r,K2r,sG,Z2r,evr,ovr,a9,m1e,rvr,tvr,lG,avr,nvr,svr,n9,g1e,lvr,ivr,iG,dvr,cvr,fvr,s9,h1e,mvr,gvr,dG,hvr,pvr,_vr,l9,p1e,uvr,bvr,cG,vvr,Tvr,Fvr,i9,_1e,Cvr,Mvr,fG,Evr,yvr,wvr,u1e,Avr,Lvr,uA,iLe,Oc,d9,b1e,bA,Bvr,v1e,kvr,dLe,Br,vA,xvr,Gc,Rvr,T1e,Svr,Pvr,F1e,$vr,Ivr,jvr,TA,Nvr,C1e,Dvr,qvr,Ovr,Tt,FA,Gvr,M1e,Xvr,zvr,Xc,Vvr,E1e,Wvr,Qvr,y1e,Hvr,Uvr,Jvr,w1e,Yvr,Kvr,CA,Zvr,xo,MA,eTr,A1e,oTr,rTr,vn,tTr,L1e,aTr,nTr,B1e,sTr,lTr,k1e,iTr,dTr,cTr,no,c9,x1e,fTr,mTr,mG,gTr,hTr,pTr,f9,R1e,_Tr,uTr,gG,bTr,vTr,TTr,m9,S1e,FTr,CTr,hG,MTr,ETr,yTr,g9,P1e,wTr,ATr,pG,LTr,BTr,kTr,h9,$1e,xTr,RTr,_G,STr,PTr,$Tr,p9,I1e,ITr,jTr,uG,NTr,DTr,qTr,_9,j1e,OTr,GTr,bG,XTr,zTr,VTr,N1e,WTr,QTr,EA,cLe,zc,u9,D1e,yA,HTr,q1e,UTr,fLe,kr,wA,JTr,Vc,YTr,O1e,KTr,ZTr,G1e,e7r,o7r,r7r,AA,t7r,X1e,a7r,n7r,s7r,Ft,LA,l7r,z1e,i7r,d7r,Wc,c7r,V1e,f7r,m7r,W1e,g7r,h7r,p7r,Q1e,_7r,u7r,BA,b7r,Ro,kA,v7r,H1e,T7r,F7r,Tn,C7r,U1e,M7r,E7r,J1e,y7r,w7r,Y1e,A7r,L7r,B7r,so,b9,K1e,k7r,x7r,vG,R7r,S7r,P7r,v9,Z1e,$7r,I7r,TG,j7r,N7r,D7r,T9,e4e,q7r,O7r,FG,G7r,X7r,z7r,F9,o4e,V7r,W7r,CG,Q7r,H7r,U7r,C9,r4e,J7r,Y7r,MG,K7r,Z7r,eFr,M9,t4e,oFr,rFr,EG,tFr,aFr,nFr,E9,a4e,sFr,lFr,yG,iFr,dFr,cFr,n4e,fFr,mFr,xA,mLe,Qc,y9,s4e,RA,gFr,l4e,hFr,gLe,xr,SA,pFr,Hc,_Fr,i4e,uFr,bFr,d4e,vFr,TFr,FFr,PA,CFr,c4e,MFr,EFr,yFr,Ct,$A,wFr,f4e,AFr,LFr,Uc,BFr,m4e,kFr,xFr,g4e,RFr,SFr,PFr,h4e,$Fr,IFr,IA,jFr,So,jA,NFr,p4e,DFr,qFr,Fn,OFr,_4e,GFr,XFr,u4e,zFr,VFr,b4e,WFr,QFr,HFr,v4e,w9,T4e,UFr,JFr,wG,YFr,KFr,ZFr,F4e,e9r,o9r,NA,hLe,Jc,A9,C4e,DA,r9r,M4e,t9r,pLe,Rr,qA,a9r,Yc,n9r,E4e,s9r,l9r,y4e,i9r,d9r,c9r,OA,f9r,w4e,m9r,g9r,h9r,Mt,GA,p9r,A4e,_9r,u9r,Kc,b9r,L4e,v9r,T9r,B4e,F9r,C9r,M9r,k4e,E9r,y9r,XA,w9r,Po,zA,A9r,x4e,L9r,B9r,Cn,k9r,R4e,x9r,R9r,S4e,S9r,P9r,P4e,$9r,I9r,j9r,VA,L9,$4e,N9r,D9r,AG,q9r,O9r,G9r,B9,I4e,X9r,z9r,LG,V9r,W9r,Q9r,j4e,H9r,U9r,WA,_Le,Zc,k9,N4e,QA,J9r,D4e,Y9r,uLe,Sr,HA,K9r,ef,Z9r,q4e,eCr,oCr,O4e,rCr,tCr,aCr,UA,nCr,G4e,sCr,lCr,iCr,Et,JA,dCr,X4e,cCr,fCr,of,mCr,z4e,gCr,hCr,V4e,pCr,_Cr,uCr,W4e,bCr,vCr,YA,TCr,$o,KA,FCr,Q4e,CCr,MCr,Mn,ECr,H4e,yCr,wCr,U4e,ACr,LCr,J4e,BCr,kCr,xCr,Y4e,x9,K4e,RCr,SCr,BG,PCr,$Cr,ICr,Z4e,jCr,NCr,ZA,bLe;return ce=new V({}),Aa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased"),',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xC=new V({}),RC=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel),`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new DCr({props:{warning:"&lcub;true}",$$slots:{default:[nmt]},$$scope:{ctx:fi}}}),SC=new V({}),PC=new y({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/configuration_auto.py#L515"}}),jC=new y({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/configuration_auto.py#L538",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),NC=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),DC=new y({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/configuration_auto.py#L660",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),qC=new V({}),OC=new y({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/tokenization_auto.py#L351"}}),zC=new y({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/tokenization_auto.py#L365",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15794/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),VC=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),WC=new y({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/tokenization_auto.py#L561",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),QC=new V({}),HC=new y({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/feature_extraction_auto.py#L169"}}),YC=new y({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/feature_extraction_auto.py#L183",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15794/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Gg=new DCr({props:{$$slots:{default:[smt]},$$scope:{ctx:fi}}}),KC=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),ZC=new y({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/feature_extraction_auto.py#L310",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),eM=new V({}),oM=new y({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/processing_auto.py#L71"}}),aM=new y({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Zg=new DCr({props:{$$slots:{default:[lmt]},$$scope:{ctx:fi}}}),nM=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),sM=new y({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),lM=new V({}),iM=new y({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L672"}}),cM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><code>ConvNextConfig</code>configuration class: <code>ConvNextModel</code>(ConvNext model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><code>XGLMConfig</code>configuration class: <code>XGLMModel</code>(XGLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLModel</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),mM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gM=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hM=new V({}),pM=new y({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L679"}}),uM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForMaskedLM</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),bM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),vM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TM=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FM=new V({}),CM=new y({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L694"}}),EM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><code>XGLMConfig</code>configuration class: <code>XGLMForCausalLM</code>(XGLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForCausalLM</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),yM=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),wM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),AM=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LM=new V({}),BM=new y({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L701"}}),xM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForMaskedLM</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),RM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),SM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),PM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$M=new V({}),IM=new y({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L708"}}),NM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),DM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),qM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GM=new V({}),XM=new y({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L717"}}),VM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForSequenceClassification</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),WM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),QM=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),HM=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UM=new V({}),JM=new y({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L751"}}),KM=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForMultipleChoice</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),ZM=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),eE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oE=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rE=new V({}),tE=new y({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L758"}}),nE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),sE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),lE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dE=new V({}),cE=new y({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L744"}}),mE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForTokenClassification</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),gE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),hE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_E=new V({}),uE=new y({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L726"}}),vE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><code>XLMRobertaXLConfig</code>configuration class: <code>XLMRobertaXLForQuestionAnswering</code>(XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),TE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),FE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CE=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ME=new V({}),EE=new y({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L733"}}),wE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),AE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),LE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),BE=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kE=new V({}),xE=new y({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L767"}}),SE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><code>ConvNextConfig</code>configuration class: <code>ConvNextForImageClassification</code>(ConvNext model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),PE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),$E=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),IE=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jE=new V({}),NE=new y({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L797"}}),qE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),OE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),GE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zE=new V({}),VE=new y({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L804"}}),QE=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),UE=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new V({}),KE=new y({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L827"}}),e3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),o3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),r3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a3=new V({}),n3=new y({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L811"}}),l3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),i3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),d3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c3=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f3=new V({}),m3=new y({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L818"}}),h3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),p3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),_3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b3=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),v3=new V({}),T3=new y({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L836"}}),C3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),M3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),E3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y3=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w3=new V({}),A3=new y({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L843"}}),B3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),k3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),x3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R3=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S3=new V({}),P3=new y({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L790"}}),I3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),j3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),N3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D3=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new V({}),O3=new y({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_auto.py#L774"}}),X3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),z3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),V3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W3=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q3=new V({}),H3=new y({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L371"}}),J3=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <code>TFSpeech2TextModel</code>(Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Y3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),K3=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z3=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new V({}),oy=new y({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L378"}}),ty=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),ay=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),ny=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new V({}),iy=new y({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L393"}}),cy=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),fy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),my=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new V({}),py=new y({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L400"}}),uy=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),by=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),vy=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fy=new V({}),Cy=new y({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L414"}}),Ey=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),yy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),wy=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ay=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new V({}),By=new y({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),xy=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),Ry=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Sy=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Py=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new V({}),Iy=new y({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),Ny=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Dy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),qy=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new V({}),Xy=new y({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Vy=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Wy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Qy=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new V({}),Jy=new y({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),Ky=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),Zy=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ew=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new V({}),tw=new y({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),nw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),lw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new V({}),cw=new y({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L439"}}),mw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),hw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new V({}),uw=new y({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_tf_auto.py#L407"}}),vw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Tw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Fw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Cw=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Mw=new V({}),Ew=new y({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L220"}}),ww=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><code>XGLMConfig</code>configuration class: <code>FlaxXGLMModel</code>(XGLM model)</li>
</ul>`,name:"config"}]}}),Aw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Lw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Bw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new V({}),xw=new y({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L234"}}),Sw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><code>XGLMConfig</code>configuration class: <code>FlaxXGLMForCausalLM</code>(XGLM model)</li>
</ul>`,name:"config"}]}}),Pw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),$w=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new V({}),Nw=new y({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L227"}}),qw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
</ul>`,name:"config"}]}}),Ow=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Gw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new V({}),Vw=new y({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),Qw=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Uw=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new V({}),Kw=new y({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),eA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),rA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new V({}),nA=new y({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),lA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),dA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new V({}),mA=new y({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L266"}}),hA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),_A=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new V({}),vA=new y({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L273"}}),FA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),MA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new V({}),wA=new y({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L282"}}),LA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
</ul>`,name:"config"}]}}),BA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),kA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new V({}),SA=new y({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),$A=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),IA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),jA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new V({}),qA=new y({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L298"}}),GA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),XA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),zA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),WA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new V({}),HA=new y({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/modeling_flax_auto.py#L307"}}),JA=new y({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),KA=new y({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision(str,",description:`<strong>revision(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision(str,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZA=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),Ae=l(),ie=a("h1"),me=a("a"),ro=a("span"),f(ce.$$.fragment),ue=l(),jo=a("span"),mi=o("Auto Classes"),tf=l(),Zt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),AC=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ye=l(),lo=a("p"),pi=o("Instantiating one of "),En=a("a"),LC=o("AutoConfig"),yn=o(", "),wn=a("a"),BC=o("AutoModel"),_i=o(`, and
`),An=a("a"),kC=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),f(Aa.$$.fragment),io=l(),ge=a("p"),J0=o("will create a model that is an instance of "),bi=a("a"),Y0=o("BertModel"),K0=o("."),No=l(),La=a("p"),Z0=o("There is one class of "),sf=a("code"),e6=o("AutoModel"),MBe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),M0e=l(),vi=a("h2"),lf=a("a"),bz=a("span"),f(xC.$$.fragment),EBe=l(),vz=a("span"),yBe=o("Extending the Auto Classes"),E0e=l(),Ln=a("p"),wBe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Tz=a("code"),ABe=o("NewModel"),LBe=o(", make sure you have a "),Fz=a("code"),BBe=o("NewModelConfig"),kBe=o(` then you can add those to the auto
classes like this:`),y0e=l(),f(RC.$$.fragment),w0e=l(),o6=a("p"),xBe=o("You will then be able to use the auto classes like you would usually do!"),A0e=l(),f(df.$$.fragment),L0e=l(),Ti=a("h2"),cf=a("a"),Cz=a("span"),f(SC.$$.fragment),RBe=l(),Mz=a("span"),SBe=o("AutoConfig"),B0e=l(),Do=a("div"),f(PC.$$.fragment),PBe=l(),$C=a("p"),$Be=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r6=a("a"),IBe=o("from_pretrained()"),jBe=o(" class method."),NBe=l(),IC=a("p"),DBe=o("This class cannot be instantiated directly using "),Ez=a("code"),qBe=o("__init__()"),OBe=o(" (throws an error)."),GBe=l(),co=a("div"),f(jC.$$.fragment),XBe=l(),yz=a("p"),zBe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),VBe=l(),Fi=a("p"),WBe=o("The configuration class to instantiate is selected based on the "),wz=a("code"),QBe=o("model_type"),HBe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Az=a("code"),UBe=o("pretrained_model_name_or_path"),JBe=o(":"),YBe=l(),v=a("ul"),ff=a("li"),Lz=a("strong"),KBe=o("albert"),ZBe=o(" \u2014 "),t6=a("a"),eke=o("AlbertConfig"),oke=o(" (ALBERT model)"),rke=l(),mf=a("li"),Bz=a("strong"),tke=o("bart"),ake=o(" \u2014 "),a6=a("a"),nke=o("BartConfig"),ske=o(" (BART model)"),lke=l(),gf=a("li"),kz=a("strong"),ike=o("beit"),dke=o(" \u2014 "),n6=a("a"),cke=o("BeitConfig"),fke=o(" (BEiT model)"),mke=l(),hf=a("li"),xz=a("strong"),gke=o("bert"),hke=o(" \u2014 "),s6=a("a"),pke=o("BertConfig"),_ke=o(" (BERT model)"),uke=l(),pf=a("li"),Rz=a("strong"),bke=o("bert-generation"),vke=o(" \u2014 "),l6=a("a"),Tke=o("BertGenerationConfig"),Fke=o(" (Bert Generation model)"),Cke=l(),_f=a("li"),Sz=a("strong"),Mke=o("big_bird"),Eke=o(" \u2014 "),i6=a("a"),yke=o("BigBirdConfig"),wke=o(" (BigBird model)"),Ake=l(),uf=a("li"),Pz=a("strong"),Lke=o("bigbird_pegasus"),Bke=o(" \u2014 "),d6=a("a"),kke=o("BigBirdPegasusConfig"),xke=o(" (BigBirdPegasus model)"),Rke=l(),bf=a("li"),$z=a("strong"),Ske=o("blenderbot"),Pke=o(" \u2014 "),c6=a("a"),$ke=o("BlenderbotConfig"),Ike=o(" (Blenderbot model)"),jke=l(),vf=a("li"),Iz=a("strong"),Nke=o("blenderbot-small"),Dke=o(" \u2014 "),f6=a("a"),qke=o("BlenderbotSmallConfig"),Oke=o(" (BlenderbotSmall model)"),Gke=l(),Tf=a("li"),jz=a("strong"),Xke=o("camembert"),zke=o(" \u2014 "),m6=a("a"),Vke=o("CamembertConfig"),Wke=o(" (CamemBERT model)"),Qke=l(),Ff=a("li"),Nz=a("strong"),Hke=o("canine"),Uke=o(" \u2014 "),g6=a("a"),Jke=o("CanineConfig"),Yke=o(" (Canine model)"),Kke=l(),Cf=a("li"),Dz=a("strong"),Zke=o("clip"),exe=o(" \u2014 "),h6=a("a"),oxe=o("CLIPConfig"),rxe=o(" (CLIP model)"),txe=l(),Mf=a("li"),qz=a("strong"),axe=o("convbert"),nxe=o(" \u2014 "),p6=a("a"),sxe=o("ConvBertConfig"),lxe=o(" (ConvBERT model)"),ixe=l(),Ef=a("li"),Oz=a("strong"),dxe=o("convnext"),cxe=o(" \u2014 "),Gz=a("code"),fxe=o("ConvNextConfig"),mxe=o("(ConvNext model)"),gxe=l(),yf=a("li"),Xz=a("strong"),hxe=o("ctrl"),pxe=o(" \u2014 "),_6=a("a"),_xe=o("CTRLConfig"),uxe=o(" (CTRL model)"),bxe=l(),wf=a("li"),zz=a("strong"),vxe=o("deberta"),Txe=o(" \u2014 "),u6=a("a"),Fxe=o("DebertaConfig"),Cxe=o(" (DeBERTa model)"),Mxe=l(),Af=a("li"),Vz=a("strong"),Exe=o("deberta-v2"),yxe=o(" \u2014 "),b6=a("a"),wxe=o("DebertaV2Config"),Axe=o(" (DeBERTa-v2 model)"),Lxe=l(),Lf=a("li"),Wz=a("strong"),Bxe=o("deit"),kxe=o(" \u2014 "),v6=a("a"),xxe=o("DeiTConfig"),Rxe=o(" (DeiT model)"),Sxe=l(),Bf=a("li"),Qz=a("strong"),Pxe=o("detr"),$xe=o(" \u2014 "),T6=a("a"),Ixe=o("DetrConfig"),jxe=o(" (DETR model)"),Nxe=l(),kf=a("li"),Hz=a("strong"),Dxe=o("distilbert"),qxe=o(" \u2014 "),F6=a("a"),Oxe=o("DistilBertConfig"),Gxe=o(" (DistilBERT model)"),Xxe=l(),xf=a("li"),Uz=a("strong"),zxe=o("dpr"),Vxe=o(" \u2014 "),C6=a("a"),Wxe=o("DPRConfig"),Qxe=o(" (DPR model)"),Hxe=l(),Rf=a("li"),Jz=a("strong"),Uxe=o("electra"),Jxe=o(" \u2014 "),M6=a("a"),Yxe=o("ElectraConfig"),Kxe=o(" (ELECTRA model)"),Zxe=l(),Sf=a("li"),Yz=a("strong"),eRe=o("encoder-decoder"),oRe=o(" \u2014 "),E6=a("a"),rRe=o("EncoderDecoderConfig"),tRe=o(" (Encoder decoder model)"),aRe=l(),Pf=a("li"),Kz=a("strong"),nRe=o("flaubert"),sRe=o(" \u2014 "),y6=a("a"),lRe=o("FlaubertConfig"),iRe=o(" (FlauBERT model)"),dRe=l(),$f=a("li"),Zz=a("strong"),cRe=o("fnet"),fRe=o(" \u2014 "),w6=a("a"),mRe=o("FNetConfig"),gRe=o(" (FNet model)"),hRe=l(),If=a("li"),eV=a("strong"),pRe=o("fsmt"),_Re=o(" \u2014 "),A6=a("a"),uRe=o("FSMTConfig"),bRe=o(" (FairSeq Machine-Translation model)"),vRe=l(),jf=a("li"),oV=a("strong"),TRe=o("funnel"),FRe=o(" \u2014 "),L6=a("a"),CRe=o("FunnelConfig"),MRe=o(" (Funnel Transformer model)"),ERe=l(),Nf=a("li"),rV=a("strong"),yRe=o("gpt2"),wRe=o(" \u2014 "),B6=a("a"),ARe=o("GPT2Config"),LRe=o(" (OpenAI GPT-2 model)"),BRe=l(),Df=a("li"),tV=a("strong"),kRe=o("gpt_neo"),xRe=o(" \u2014 "),k6=a("a"),RRe=o("GPTNeoConfig"),SRe=o(" (GPT Neo model)"),PRe=l(),qf=a("li"),aV=a("strong"),$Re=o("gptj"),IRe=o(" \u2014 "),x6=a("a"),jRe=o("GPTJConfig"),NRe=o(" (GPT-J model)"),DRe=l(),Of=a("li"),nV=a("strong"),qRe=o("hubert"),ORe=o(" \u2014 "),R6=a("a"),GRe=o("HubertConfig"),XRe=o(" (Hubert model)"),zRe=l(),Gf=a("li"),sV=a("strong"),VRe=o("ibert"),WRe=o(" \u2014 "),S6=a("a"),QRe=o("IBertConfig"),HRe=o(" (I-BERT model)"),URe=l(),Xf=a("li"),lV=a("strong"),JRe=o("imagegpt"),YRe=o(" \u2014 "),P6=a("a"),KRe=o("ImageGPTConfig"),ZRe=o(" (ImageGPT model)"),eSe=l(),zf=a("li"),iV=a("strong"),oSe=o("layoutlm"),rSe=o(" \u2014 "),$6=a("a"),tSe=o("LayoutLMConfig"),aSe=o(" (LayoutLM model)"),nSe=l(),Vf=a("li"),dV=a("strong"),sSe=o("layoutlmv2"),lSe=o(" \u2014 "),I6=a("a"),iSe=o("LayoutLMv2Config"),dSe=o(" (LayoutLMv2 model)"),cSe=l(),Wf=a("li"),cV=a("strong"),fSe=o("led"),mSe=o(" \u2014 "),j6=a("a"),gSe=o("LEDConfig"),hSe=o(" (LED model)"),pSe=l(),Qf=a("li"),fV=a("strong"),_Se=o("longformer"),uSe=o(" \u2014 "),N6=a("a"),bSe=o("LongformerConfig"),vSe=o(" (Longformer model)"),TSe=l(),Hf=a("li"),mV=a("strong"),FSe=o("luke"),CSe=o(" \u2014 "),D6=a("a"),MSe=o("LukeConfig"),ESe=o(" (LUKE model)"),ySe=l(),Uf=a("li"),gV=a("strong"),wSe=o("lxmert"),ASe=o(" \u2014 "),q6=a("a"),LSe=o("LxmertConfig"),BSe=o(" (LXMERT model)"),kSe=l(),Jf=a("li"),hV=a("strong"),xSe=o("m2m_100"),RSe=o(" \u2014 "),O6=a("a"),SSe=o("M2M100Config"),PSe=o(" (M2M100 model)"),$Se=l(),Yf=a("li"),pV=a("strong"),ISe=o("marian"),jSe=o(" \u2014 "),G6=a("a"),NSe=o("MarianConfig"),DSe=o(" (Marian model)"),qSe=l(),Kf=a("li"),_V=a("strong"),OSe=o("mbart"),GSe=o(" \u2014 "),X6=a("a"),XSe=o("MBartConfig"),zSe=o(" (mBART model)"),VSe=l(),Zf=a("li"),uV=a("strong"),WSe=o("megatron-bert"),QSe=o(" \u2014 "),z6=a("a"),HSe=o("MegatronBertConfig"),USe=o(" (MegatronBert model)"),JSe=l(),em=a("li"),bV=a("strong"),YSe=o("mobilebert"),KSe=o(" \u2014 "),V6=a("a"),ZSe=o("MobileBertConfig"),ePe=o(" (MobileBERT model)"),oPe=l(),om=a("li"),vV=a("strong"),rPe=o("mpnet"),tPe=o(" \u2014 "),W6=a("a"),aPe=o("MPNetConfig"),nPe=o(" (MPNet model)"),sPe=l(),rm=a("li"),TV=a("strong"),lPe=o("mt5"),iPe=o(" \u2014 "),Q6=a("a"),dPe=o("MT5Config"),cPe=o(" (mT5 model)"),fPe=l(),tm=a("li"),FV=a("strong"),mPe=o("nystromformer"),gPe=o(" \u2014 "),H6=a("a"),hPe=o("NystromformerConfig"),pPe=o(" (Nystromformer model)"),_Pe=l(),am=a("li"),CV=a("strong"),uPe=o("openai-gpt"),bPe=o(" \u2014 "),U6=a("a"),vPe=o("OpenAIGPTConfig"),TPe=o(" (OpenAI GPT model)"),FPe=l(),nm=a("li"),MV=a("strong"),CPe=o("pegasus"),MPe=o(" \u2014 "),J6=a("a"),EPe=o("PegasusConfig"),yPe=o(" (Pegasus model)"),wPe=l(),sm=a("li"),EV=a("strong"),APe=o("perceiver"),LPe=o(" \u2014 "),Y6=a("a"),BPe=o("PerceiverConfig"),kPe=o(" (Perceiver model)"),xPe=l(),lm=a("li"),yV=a("strong"),RPe=o("plbart"),SPe=o(" \u2014 "),K6=a("a"),PPe=o("PLBartConfig"),$Pe=o(" (PLBart model)"),IPe=l(),im=a("li"),wV=a("strong"),jPe=o("poolformer"),NPe=o(" \u2014 "),Z6=a("a"),DPe=o("PoolFormerConfig"),qPe=o(" (PoolFormer model)"),OPe=l(),dm=a("li"),AV=a("strong"),GPe=o("prophetnet"),XPe=o(" \u2014 "),eL=a("a"),zPe=o("ProphetNetConfig"),VPe=o(" (ProphetNet model)"),WPe=l(),cm=a("li"),LV=a("strong"),QPe=o("qdqbert"),HPe=o(" \u2014 "),oL=a("a"),UPe=o("QDQBertConfig"),JPe=o(" (QDQBert model)"),YPe=l(),fm=a("li"),BV=a("strong"),KPe=o("rag"),ZPe=o(" \u2014 "),rL=a("a"),e$e=o("RagConfig"),o$e=o(" (RAG model)"),r$e=l(),mm=a("li"),kV=a("strong"),t$e=o("realm"),a$e=o(" \u2014 "),tL=a("a"),n$e=o("RealmConfig"),s$e=o(" (Realm model)"),l$e=l(),gm=a("li"),xV=a("strong"),i$e=o("reformer"),d$e=o(" \u2014 "),aL=a("a"),c$e=o("ReformerConfig"),f$e=o(" (Reformer model)"),m$e=l(),hm=a("li"),RV=a("strong"),g$e=o("rembert"),h$e=o(" \u2014 "),nL=a("a"),p$e=o("RemBertConfig"),_$e=o(" (RemBERT model)"),u$e=l(),pm=a("li"),SV=a("strong"),b$e=o("retribert"),v$e=o(" \u2014 "),sL=a("a"),T$e=o("RetriBertConfig"),F$e=o(" (RetriBERT model)"),C$e=l(),_m=a("li"),PV=a("strong"),M$e=o("roberta"),E$e=o(" \u2014 "),lL=a("a"),y$e=o("RobertaConfig"),w$e=o(" (RoBERTa model)"),A$e=l(),um=a("li"),$V=a("strong"),L$e=o("roformer"),B$e=o(" \u2014 "),iL=a("a"),k$e=o("RoFormerConfig"),x$e=o(" (RoFormer model)"),R$e=l(),bm=a("li"),IV=a("strong"),S$e=o("segformer"),P$e=o(" \u2014 "),dL=a("a"),$$e=o("SegformerConfig"),I$e=o(" (SegFormer model)"),j$e=l(),vm=a("li"),jV=a("strong"),N$e=o("sew"),D$e=o(" \u2014 "),cL=a("a"),q$e=o("SEWConfig"),O$e=o(" (SEW model)"),G$e=l(),Tm=a("li"),NV=a("strong"),X$e=o("sew-d"),z$e=o(" \u2014 "),fL=a("a"),V$e=o("SEWDConfig"),W$e=o(" (SEW-D model)"),Q$e=l(),Fm=a("li"),DV=a("strong"),H$e=o("speech-encoder-decoder"),U$e=o(" \u2014 "),mL=a("a"),J$e=o("SpeechEncoderDecoderConfig"),Y$e=o(" (Speech Encoder decoder model)"),K$e=l(),Cm=a("li"),qV=a("strong"),Z$e=o("speech_to_text"),eIe=o(" \u2014 "),gL=a("a"),oIe=o("Speech2TextConfig"),rIe=o(" (Speech2Text model)"),tIe=l(),Mm=a("li"),OV=a("strong"),aIe=o("speech_to_text_2"),nIe=o(" \u2014 "),hL=a("a"),sIe=o("Speech2Text2Config"),lIe=o(" (Speech2Text2 model)"),iIe=l(),Em=a("li"),GV=a("strong"),dIe=o("splinter"),cIe=o(" \u2014 "),pL=a("a"),fIe=o("SplinterConfig"),mIe=o(" (Splinter model)"),gIe=l(),ym=a("li"),XV=a("strong"),hIe=o("squeezebert"),pIe=o(" \u2014 "),_L=a("a"),_Ie=o("SqueezeBertConfig"),uIe=o(" (SqueezeBERT model)"),bIe=l(),wm=a("li"),zV=a("strong"),vIe=o("swin"),TIe=o(" \u2014 "),uL=a("a"),FIe=o("SwinConfig"),CIe=o(" (Swin model)"),MIe=l(),Am=a("li"),VV=a("strong"),EIe=o("t5"),yIe=o(" \u2014 "),bL=a("a"),wIe=o("T5Config"),AIe=o(" (T5 model)"),LIe=l(),Lm=a("li"),WV=a("strong"),BIe=o("tapas"),kIe=o(" \u2014 "),vL=a("a"),xIe=o("TapasConfig"),RIe=o(" (TAPAS model)"),SIe=l(),Bm=a("li"),QV=a("strong"),PIe=o("transfo-xl"),$Ie=o(" \u2014 "),TL=a("a"),IIe=o("TransfoXLConfig"),jIe=o(" (Transformer-XL model)"),NIe=l(),km=a("li"),HV=a("strong"),DIe=o("trocr"),qIe=o(" \u2014 "),FL=a("a"),OIe=o("TrOCRConfig"),GIe=o(" (TrOCR model)"),XIe=l(),xm=a("li"),UV=a("strong"),zIe=o("unispeech"),VIe=o(" \u2014 "),CL=a("a"),WIe=o("UniSpeechConfig"),QIe=o(" (UniSpeech model)"),HIe=l(),Rm=a("li"),JV=a("strong"),UIe=o("unispeech-sat"),JIe=o(" \u2014 "),ML=a("a"),YIe=o("UniSpeechSatConfig"),KIe=o(" (UniSpeechSat model)"),ZIe=l(),Sm=a("li"),YV=a("strong"),eje=o("vilt"),oje=o(" \u2014 "),EL=a("a"),rje=o("ViltConfig"),tje=o(" (ViLT model)"),aje=l(),Pm=a("li"),KV=a("strong"),nje=o("vision-encoder-decoder"),sje=o(" \u2014 "),yL=a("a"),lje=o("VisionEncoderDecoderConfig"),ije=o(" (Vision Encoder decoder model)"),dje=l(),$m=a("li"),ZV=a("strong"),cje=o("vision-text-dual-encoder"),fje=o(" \u2014 "),wL=a("a"),mje=o("VisionTextDualEncoderConfig"),gje=o(" (VisionTextDualEncoder model)"),hje=l(),Im=a("li"),eW=a("strong"),pje=o("visual_bert"),_je=o(" \u2014 "),AL=a("a"),uje=o("VisualBertConfig"),bje=o(" (VisualBert model)"),vje=l(),jm=a("li"),oW=a("strong"),Tje=o("vit"),Fje=o(" \u2014 "),LL=a("a"),Cje=o("ViTConfig"),Mje=o(" (ViT model)"),Eje=l(),Nm=a("li"),rW=a("strong"),yje=o("vit_mae"),wje=o(" \u2014 "),BL=a("a"),Aje=o("ViTMAEConfig"),Lje=o(" (ViTMAE model)"),Bje=l(),Dm=a("li"),tW=a("strong"),kje=o("wav2vec2"),xje=o(" \u2014 "),kL=a("a"),Rje=o("Wav2Vec2Config"),Sje=o(" (Wav2Vec2 model)"),Pje=l(),qm=a("li"),aW=a("strong"),$je=o("wavlm"),Ije=o(" \u2014 "),xL=a("a"),jje=o("WavLMConfig"),Nje=o(" (WavLM model)"),Dje=l(),Om=a("li"),nW=a("strong"),qje=o("xglm"),Oje=o(" \u2014 "),sW=a("code"),Gje=o("XGLMConfig"),Xje=o("(XGLM model)"),zje=l(),Gm=a("li"),lW=a("strong"),Vje=o("xlm"),Wje=o(" \u2014 "),RL=a("a"),Qje=o("XLMConfig"),Hje=o(" (XLM model)"),Uje=l(),Xm=a("li"),iW=a("strong"),Jje=o("xlm-prophetnet"),Yje=o(" \u2014 "),SL=a("a"),Kje=o("XLMProphetNetConfig"),Zje=o(" (XLMProphetNet model)"),eNe=l(),zm=a("li"),dW=a("strong"),oNe=o("xlm-roberta"),rNe=o(" \u2014 "),PL=a("a"),tNe=o("XLMRobertaConfig"),aNe=o(" (XLM-RoBERTa model)"),nNe=l(),Vm=a("li"),cW=a("strong"),sNe=o("xlm-roberta-xl"),lNe=o(" \u2014 "),fW=a("code"),iNe=o("XLMRobertaXLConfig"),dNe=o("(XLM-RoBERTa-XL model)"),cNe=l(),Wm=a("li"),mW=a("strong"),fNe=o("xlnet"),mNe=o(" \u2014 "),$L=a("a"),gNe=o("XLNetConfig"),hNe=o(" (XLNet model)"),pNe=l(),Qm=a("li"),gW=a("strong"),_Ne=o("yoso"),uNe=o(" \u2014 "),IL=a("a"),bNe=o("YosoConfig"),vNe=o(" (YOSO model)"),TNe=l(),hW=a("p"),FNe=o("Examples:"),CNe=l(),f(NC.$$.fragment),MNe=l(),Hm=a("div"),f(DC.$$.fragment),ENe=l(),pW=a("p"),yNe=o("Register a new configuration for this class."),k0e=l(),Ci=a("h2"),Um=a("a"),_W=a("span"),f(qC.$$.fragment),wNe=l(),uW=a("span"),ANe=o("AutoTokenizer"),x0e=l(),qo=a("div"),f(OC.$$.fragment),LNe=l(),GC=a("p"),BNe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),jL=a("a"),kNe=o("AutoTokenizer.from_pretrained()"),xNe=o(" class method."),RNe=l(),XC=a("p"),SNe=o("This class cannot be instantiated directly using "),bW=a("code"),PNe=o("__init__()"),$Ne=o(" (throws an error)."),INe=l(),fo=a("div"),f(zC.$$.fragment),jNe=l(),vW=a("p"),NNe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),DNe=l(),Ba=a("p"),qNe=o("The tokenizer class to instantiate is selected based on the "),TW=a("code"),ONe=o("model_type"),GNe=o(` property of the config object (either
passed as an argument or loaded from `),FW=a("code"),XNe=o("pretrained_model_name_or_path"),zNe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CW=a("code"),VNe=o("pretrained_model_name_or_path"),WNe=o(":"),QNe=l(),M=a("ul"),Bn=a("li"),MW=a("strong"),HNe=o("albert"),UNe=o(" \u2014 "),NL=a("a"),JNe=o("AlbertTokenizer"),YNe=o(" or "),DL=a("a"),KNe=o("AlbertTokenizerFast"),ZNe=o(" (ALBERT model)"),eDe=l(),kn=a("li"),EW=a("strong"),oDe=o("bart"),rDe=o(" \u2014 "),qL=a("a"),tDe=o("BartTokenizer"),aDe=o(" or "),OL=a("a"),nDe=o("BartTokenizerFast"),sDe=o(" (BART model)"),lDe=l(),xn=a("li"),yW=a("strong"),iDe=o("barthez"),dDe=o(" \u2014 "),GL=a("a"),cDe=o("BarthezTokenizer"),fDe=o(" or "),XL=a("a"),mDe=o("BarthezTokenizerFast"),gDe=o(" (BARThez model)"),hDe=l(),Jm=a("li"),wW=a("strong"),pDe=o("bartpho"),_De=o(" \u2014 "),zL=a("a"),uDe=o("BartphoTokenizer"),bDe=o(" (BARTpho model)"),vDe=l(),Rn=a("li"),AW=a("strong"),TDe=o("bert"),FDe=o(" \u2014 "),VL=a("a"),CDe=o("BertTokenizer"),MDe=o(" or "),WL=a("a"),EDe=o("BertTokenizerFast"),yDe=o(" (BERT model)"),wDe=l(),Ym=a("li"),LW=a("strong"),ADe=o("bert-generation"),LDe=o(" \u2014 "),QL=a("a"),BDe=o("BertGenerationTokenizer"),kDe=o(" (Bert Generation model)"),xDe=l(),Km=a("li"),BW=a("strong"),RDe=o("bert-japanese"),SDe=o(" \u2014 "),HL=a("a"),PDe=o("BertJapaneseTokenizer"),$De=o(" (BertJapanese model)"),IDe=l(),Zm=a("li"),kW=a("strong"),jDe=o("bertweet"),NDe=o(" \u2014 "),UL=a("a"),DDe=o("BertweetTokenizer"),qDe=o(" (Bertweet model)"),ODe=l(),Sn=a("li"),xW=a("strong"),GDe=o("big_bird"),XDe=o(" \u2014 "),JL=a("a"),zDe=o("BigBirdTokenizer"),VDe=o(" or "),YL=a("a"),WDe=o("BigBirdTokenizerFast"),QDe=o(" (BigBird model)"),HDe=l(),Pn=a("li"),RW=a("strong"),UDe=o("bigbird_pegasus"),JDe=o(" \u2014 "),KL=a("a"),YDe=o("PegasusTokenizer"),KDe=o(" or "),ZL=a("a"),ZDe=o("PegasusTokenizerFast"),eqe=o(" (BigBirdPegasus model)"),oqe=l(),$n=a("li"),SW=a("strong"),rqe=o("blenderbot"),tqe=o(" \u2014 "),e8=a("a"),aqe=o("BlenderbotTokenizer"),nqe=o(" or "),o8=a("a"),sqe=o("BlenderbotTokenizerFast"),lqe=o(" (Blenderbot model)"),iqe=l(),eg=a("li"),PW=a("strong"),dqe=o("blenderbot-small"),cqe=o(" \u2014 "),r8=a("a"),fqe=o("BlenderbotSmallTokenizer"),mqe=o(" (BlenderbotSmall model)"),gqe=l(),og=a("li"),$W=a("strong"),hqe=o("byt5"),pqe=o(" \u2014 "),t8=a("a"),_qe=o("ByT5Tokenizer"),uqe=o(" (ByT5 model)"),bqe=l(),In=a("li"),IW=a("strong"),vqe=o("camembert"),Tqe=o(" \u2014 "),a8=a("a"),Fqe=o("CamembertTokenizer"),Cqe=o(" or "),n8=a("a"),Mqe=o("CamembertTokenizerFast"),Eqe=o(" (CamemBERT model)"),yqe=l(),rg=a("li"),jW=a("strong"),wqe=o("canine"),Aqe=o(" \u2014 "),s8=a("a"),Lqe=o("CanineTokenizer"),Bqe=o(" (Canine model)"),kqe=l(),jn=a("li"),NW=a("strong"),xqe=o("clip"),Rqe=o(" \u2014 "),l8=a("a"),Sqe=o("CLIPTokenizer"),Pqe=o(" or "),i8=a("a"),$qe=o("CLIPTokenizerFast"),Iqe=o(" (CLIP model)"),jqe=l(),Nn=a("li"),DW=a("strong"),Nqe=o("convbert"),Dqe=o(" \u2014 "),d8=a("a"),qqe=o("ConvBertTokenizer"),Oqe=o(" or "),c8=a("a"),Gqe=o("ConvBertTokenizerFast"),Xqe=o(" (ConvBERT model)"),zqe=l(),Dn=a("li"),qW=a("strong"),Vqe=o("cpm"),Wqe=o(" \u2014 "),f8=a("a"),Qqe=o("CpmTokenizer"),Hqe=o(" or "),OW=a("code"),Uqe=o("CpmTokenizerFast"),Jqe=o(" (CPM model)"),Yqe=l(),tg=a("li"),GW=a("strong"),Kqe=o("ctrl"),Zqe=o(" \u2014 "),m8=a("a"),eOe=o("CTRLTokenizer"),oOe=o(" (CTRL model)"),rOe=l(),qn=a("li"),XW=a("strong"),tOe=o("deberta"),aOe=o(" \u2014 "),g8=a("a"),nOe=o("DebertaTokenizer"),sOe=o(" or "),h8=a("a"),lOe=o("DebertaTokenizerFast"),iOe=o(" (DeBERTa model)"),dOe=l(),ag=a("li"),zW=a("strong"),cOe=o("deberta-v2"),fOe=o(" \u2014 "),p8=a("a"),mOe=o("DebertaV2Tokenizer"),gOe=o(" (DeBERTa-v2 model)"),hOe=l(),On=a("li"),VW=a("strong"),pOe=o("distilbert"),_Oe=o(" \u2014 "),_8=a("a"),uOe=o("DistilBertTokenizer"),bOe=o(" or "),u8=a("a"),vOe=o("DistilBertTokenizerFast"),TOe=o(" (DistilBERT model)"),FOe=l(),Gn=a("li"),WW=a("strong"),COe=o("dpr"),MOe=o(" \u2014 "),b8=a("a"),EOe=o("DPRQuestionEncoderTokenizer"),yOe=o(" or "),v8=a("a"),wOe=o("DPRQuestionEncoderTokenizerFast"),AOe=o(" (DPR model)"),LOe=l(),Xn=a("li"),QW=a("strong"),BOe=o("electra"),kOe=o(" \u2014 "),T8=a("a"),xOe=o("ElectraTokenizer"),ROe=o(" or "),F8=a("a"),SOe=o("ElectraTokenizerFast"),POe=o(" (ELECTRA model)"),$Oe=l(),ng=a("li"),HW=a("strong"),IOe=o("flaubert"),jOe=o(" \u2014 "),C8=a("a"),NOe=o("FlaubertTokenizer"),DOe=o(" (FlauBERT model)"),qOe=l(),zn=a("li"),UW=a("strong"),OOe=o("fnet"),GOe=o(" \u2014 "),M8=a("a"),XOe=o("FNetTokenizer"),zOe=o(" or "),E8=a("a"),VOe=o("FNetTokenizerFast"),WOe=o(" (FNet model)"),QOe=l(),sg=a("li"),JW=a("strong"),HOe=o("fsmt"),UOe=o(" \u2014 "),y8=a("a"),JOe=o("FSMTTokenizer"),YOe=o(" (FairSeq Machine-Translation model)"),KOe=l(),Vn=a("li"),YW=a("strong"),ZOe=o("funnel"),eGe=o(" \u2014 "),w8=a("a"),oGe=o("FunnelTokenizer"),rGe=o(" or "),A8=a("a"),tGe=o("FunnelTokenizerFast"),aGe=o(" (Funnel Transformer model)"),nGe=l(),Wn=a("li"),KW=a("strong"),sGe=o("gpt2"),lGe=o(" \u2014 "),L8=a("a"),iGe=o("GPT2Tokenizer"),dGe=o(" or "),B8=a("a"),cGe=o("GPT2TokenizerFast"),fGe=o(" (OpenAI GPT-2 model)"),mGe=l(),Qn=a("li"),ZW=a("strong"),gGe=o("gpt_neo"),hGe=o(" \u2014 "),k8=a("a"),pGe=o("GPT2Tokenizer"),_Ge=o(" or "),x8=a("a"),uGe=o("GPT2TokenizerFast"),bGe=o(" (GPT Neo model)"),vGe=l(),Hn=a("li"),eQ=a("strong"),TGe=o("herbert"),FGe=o(" \u2014 "),R8=a("a"),CGe=o("HerbertTokenizer"),MGe=o(" or "),S8=a("a"),EGe=o("HerbertTokenizerFast"),yGe=o(" (HerBERT model)"),wGe=l(),lg=a("li"),oQ=a("strong"),AGe=o("hubert"),LGe=o(" \u2014 "),P8=a("a"),BGe=o("Wav2Vec2CTCTokenizer"),kGe=o(" (Hubert model)"),xGe=l(),Un=a("li"),rQ=a("strong"),RGe=o("ibert"),SGe=o(" \u2014 "),$8=a("a"),PGe=o("RobertaTokenizer"),$Ge=o(" or "),I8=a("a"),IGe=o("RobertaTokenizerFast"),jGe=o(" (I-BERT model)"),NGe=l(),Jn=a("li"),tQ=a("strong"),DGe=o("layoutlm"),qGe=o(" \u2014 "),j8=a("a"),OGe=o("LayoutLMTokenizer"),GGe=o(" or "),N8=a("a"),XGe=o("LayoutLMTokenizerFast"),zGe=o(" (LayoutLM model)"),VGe=l(),Yn=a("li"),aQ=a("strong"),WGe=o("layoutlmv2"),QGe=o(" \u2014 "),D8=a("a"),HGe=o("LayoutLMv2Tokenizer"),UGe=o(" or "),q8=a("a"),JGe=o("LayoutLMv2TokenizerFast"),YGe=o(" (LayoutLMv2 model)"),KGe=l(),Kn=a("li"),nQ=a("strong"),ZGe=o("layoutxlm"),eXe=o(" \u2014 "),O8=a("a"),oXe=o("LayoutXLMTokenizer"),rXe=o(" or "),G8=a("a"),tXe=o("LayoutXLMTokenizerFast"),aXe=o(" (LayoutXLM model)"),nXe=l(),Zn=a("li"),sQ=a("strong"),sXe=o("led"),lXe=o(" \u2014 "),X8=a("a"),iXe=o("LEDTokenizer"),dXe=o(" or "),z8=a("a"),cXe=o("LEDTokenizerFast"),fXe=o(" (LED model)"),mXe=l(),es=a("li"),lQ=a("strong"),gXe=o("longformer"),hXe=o(" \u2014 "),V8=a("a"),pXe=o("LongformerTokenizer"),_Xe=o(" or "),W8=a("a"),uXe=o("LongformerTokenizerFast"),bXe=o(" (Longformer model)"),vXe=l(),ig=a("li"),iQ=a("strong"),TXe=o("luke"),FXe=o(" \u2014 "),Q8=a("a"),CXe=o("LukeTokenizer"),MXe=o(" (LUKE model)"),EXe=l(),os=a("li"),dQ=a("strong"),yXe=o("lxmert"),wXe=o(" \u2014 "),H8=a("a"),AXe=o("LxmertTokenizer"),LXe=o(" or "),U8=a("a"),BXe=o("LxmertTokenizerFast"),kXe=o(" (LXMERT model)"),xXe=l(),dg=a("li"),cQ=a("strong"),RXe=o("m2m_100"),SXe=o(" \u2014 "),J8=a("a"),PXe=o("M2M100Tokenizer"),$Xe=o(" (M2M100 model)"),IXe=l(),cg=a("li"),fQ=a("strong"),jXe=o("marian"),NXe=o(" \u2014 "),Y8=a("a"),DXe=o("MarianTokenizer"),qXe=o(" (Marian model)"),OXe=l(),rs=a("li"),mQ=a("strong"),GXe=o("mbart"),XXe=o(" \u2014 "),K8=a("a"),zXe=o("MBartTokenizer"),VXe=o(" or "),Z8=a("a"),WXe=o("MBartTokenizerFast"),QXe=o(" (mBART model)"),HXe=l(),ts=a("li"),gQ=a("strong"),UXe=o("mbart50"),JXe=o(" \u2014 "),eB=a("a"),YXe=o("MBart50Tokenizer"),KXe=o(" or "),oB=a("a"),ZXe=o("MBart50TokenizerFast"),eze=o(" (mBART-50 model)"),oze=l(),fg=a("li"),hQ=a("strong"),rze=o("mluke"),tze=o(" \u2014 "),rB=a("a"),aze=o("MLukeTokenizer"),nze=o(" (mLUKE model)"),sze=l(),as=a("li"),pQ=a("strong"),lze=o("mobilebert"),ize=o(" \u2014 "),tB=a("a"),dze=o("MobileBertTokenizer"),cze=o(" or "),aB=a("a"),fze=o("MobileBertTokenizerFast"),mze=o(" (MobileBERT model)"),gze=l(),ns=a("li"),_Q=a("strong"),hze=o("mpnet"),pze=o(" \u2014 "),nB=a("a"),_ze=o("MPNetTokenizer"),uze=o(" or "),sB=a("a"),bze=o("MPNetTokenizerFast"),vze=o(" (MPNet model)"),Tze=l(),ss=a("li"),uQ=a("strong"),Fze=o("mt5"),Cze=o(" \u2014 "),lB=a("a"),Mze=o("MT5Tokenizer"),Eze=o(" or "),iB=a("a"),yze=o("MT5TokenizerFast"),wze=o(" (mT5 model)"),Aze=l(),ls=a("li"),bQ=a("strong"),Lze=o("openai-gpt"),Bze=o(" \u2014 "),dB=a("a"),kze=o("OpenAIGPTTokenizer"),xze=o(" or "),cB=a("a"),Rze=o("OpenAIGPTTokenizerFast"),Sze=o(" (OpenAI GPT model)"),Pze=l(),is=a("li"),vQ=a("strong"),$ze=o("pegasus"),Ize=o(" \u2014 "),fB=a("a"),jze=o("PegasusTokenizer"),Nze=o(" or "),mB=a("a"),Dze=o("PegasusTokenizerFast"),qze=o(" (Pegasus model)"),Oze=l(),mg=a("li"),TQ=a("strong"),Gze=o("perceiver"),Xze=o(" \u2014 "),gB=a("a"),zze=o("PerceiverTokenizer"),Vze=o(" (Perceiver model)"),Wze=l(),gg=a("li"),FQ=a("strong"),Qze=o("phobert"),Hze=o(" \u2014 "),hB=a("a"),Uze=o("PhobertTokenizer"),Jze=o(" (PhoBERT model)"),Yze=l(),hg=a("li"),CQ=a("strong"),Kze=o("plbart"),Zze=o(" \u2014 "),pB=a("a"),eVe=o("PLBartTokenizer"),oVe=o(" (PLBart model)"),rVe=l(),pg=a("li"),MQ=a("strong"),tVe=o("prophetnet"),aVe=o(" \u2014 "),_B=a("a"),nVe=o("ProphetNetTokenizer"),sVe=o(" (ProphetNet model)"),lVe=l(),ds=a("li"),EQ=a("strong"),iVe=o("qdqbert"),dVe=o(" \u2014 "),uB=a("a"),cVe=o("BertTokenizer"),fVe=o(" or "),bB=a("a"),mVe=o("BertTokenizerFast"),gVe=o(" (QDQBert model)"),hVe=l(),_g=a("li"),yQ=a("strong"),pVe=o("rag"),_Ve=o(" \u2014 "),vB=a("a"),uVe=o("RagTokenizer"),bVe=o(" (RAG model)"),vVe=l(),cs=a("li"),wQ=a("strong"),TVe=o("reformer"),FVe=o(" \u2014 "),TB=a("a"),CVe=o("ReformerTokenizer"),MVe=o(" or "),FB=a("a"),EVe=o("ReformerTokenizerFast"),yVe=o(" (Reformer model)"),wVe=l(),fs=a("li"),AQ=a("strong"),AVe=o("rembert"),LVe=o(" \u2014 "),CB=a("a"),BVe=o("RemBertTokenizer"),kVe=o(" or "),MB=a("a"),xVe=o("RemBertTokenizerFast"),RVe=o(" (RemBERT model)"),SVe=l(),ms=a("li"),LQ=a("strong"),PVe=o("retribert"),$Ve=o(" \u2014 "),EB=a("a"),IVe=o("RetriBertTokenizer"),jVe=o(" or "),yB=a("a"),NVe=o("RetriBertTokenizerFast"),DVe=o(" (RetriBERT model)"),qVe=l(),gs=a("li"),BQ=a("strong"),OVe=o("roberta"),GVe=o(" \u2014 "),wB=a("a"),XVe=o("RobertaTokenizer"),zVe=o(" or "),AB=a("a"),VVe=o("RobertaTokenizerFast"),WVe=o(" (RoBERTa model)"),QVe=l(),hs=a("li"),kQ=a("strong"),HVe=o("roformer"),UVe=o(" \u2014 "),LB=a("a"),JVe=o("RoFormerTokenizer"),YVe=o(" or "),BB=a("a"),KVe=o("RoFormerTokenizerFast"),ZVe=o(" (RoFormer model)"),eWe=l(),ug=a("li"),xQ=a("strong"),oWe=o("speech_to_text"),rWe=o(" \u2014 "),kB=a("a"),tWe=o("Speech2TextTokenizer"),aWe=o(" (Speech2Text model)"),nWe=l(),bg=a("li"),RQ=a("strong"),sWe=o("speech_to_text_2"),lWe=o(" \u2014 "),xB=a("a"),iWe=o("Speech2Text2Tokenizer"),dWe=o(" (Speech2Text2 model)"),cWe=l(),ps=a("li"),SQ=a("strong"),fWe=o("splinter"),mWe=o(" \u2014 "),RB=a("a"),gWe=o("SplinterTokenizer"),hWe=o(" or "),SB=a("a"),pWe=o("SplinterTokenizerFast"),_We=o(" (Splinter model)"),uWe=l(),_s=a("li"),PQ=a("strong"),bWe=o("squeezebert"),vWe=o(" \u2014 "),PB=a("a"),TWe=o("SqueezeBertTokenizer"),FWe=o(" or "),$B=a("a"),CWe=o("SqueezeBertTokenizerFast"),MWe=o(" (SqueezeBERT model)"),EWe=l(),us=a("li"),$Q=a("strong"),yWe=o("t5"),wWe=o(" \u2014 "),IB=a("a"),AWe=o("T5Tokenizer"),LWe=o(" or "),jB=a("a"),BWe=o("T5TokenizerFast"),kWe=o(" (T5 model)"),xWe=l(),vg=a("li"),IQ=a("strong"),RWe=o("tapas"),SWe=o(" \u2014 "),NB=a("a"),PWe=o("TapasTokenizer"),$We=o(" (TAPAS model)"),IWe=l(),Tg=a("li"),jQ=a("strong"),jWe=o("transfo-xl"),NWe=o(" \u2014 "),DB=a("a"),DWe=o("TransfoXLTokenizer"),qWe=o(" (Transformer-XL model)"),OWe=l(),Fg=a("li"),NQ=a("strong"),GWe=o("wav2vec2"),XWe=o(" \u2014 "),qB=a("a"),zWe=o("Wav2Vec2CTCTokenizer"),VWe=o(" (Wav2Vec2 model)"),WWe=l(),Cg=a("li"),DQ=a("strong"),QWe=o("wav2vec2_phoneme"),HWe=o(" \u2014 "),OB=a("a"),UWe=o("Wav2Vec2PhonemeCTCTokenizer"),JWe=o(" (Wav2Vec2Phoneme model)"),YWe=l(),bs=a("li"),qQ=a("strong"),KWe=o("xglm"),ZWe=o(" \u2014 "),OQ=a("code"),eQe=o("XGLMTokenizer"),oQe=o("or "),GQ=a("code"),rQe=o("XGLMTokenizerFast"),tQe=o("(XGLM model)"),aQe=l(),Mg=a("li"),XQ=a("strong"),nQe=o("xlm"),sQe=o(" \u2014 "),GB=a("a"),lQe=o("XLMTokenizer"),iQe=o(" (XLM model)"),dQe=l(),Eg=a("li"),zQ=a("strong"),cQe=o("xlm-prophetnet"),fQe=o(" \u2014 "),XB=a("a"),mQe=o("XLMProphetNetTokenizer"),gQe=o(" (XLMProphetNet model)"),hQe=l(),vs=a("li"),VQ=a("strong"),pQe=o("xlm-roberta"),_Qe=o(" \u2014 "),zB=a("a"),uQe=o("XLMRobertaTokenizer"),bQe=o(" or "),VB=a("a"),vQe=o("XLMRobertaTokenizerFast"),TQe=o(" (XLM-RoBERTa model)"),FQe=l(),Ts=a("li"),WQ=a("strong"),CQe=o("xlnet"),MQe=o(" \u2014 "),WB=a("a"),EQe=o("XLNetTokenizer"),yQe=o(" or "),QB=a("a"),wQe=o("XLNetTokenizerFast"),AQe=o(" (XLNet model)"),LQe=l(),QQ=a("p"),BQe=o("Examples:"),kQe=l(),f(VC.$$.fragment),xQe=l(),yg=a("div"),f(WC.$$.fragment),RQe=l(),HQ=a("p"),SQe=o("Register a new tokenizer in this mapping."),R0e=l(),Mi=a("h2"),wg=a("a"),UQ=a("span"),f(QC.$$.fragment),PQe=l(),JQ=a("span"),$Qe=o("AutoFeatureExtractor"),S0e=l(),Oo=a("div"),f(HC.$$.fragment),IQe=l(),UC=a("p"),jQe=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=a("a"),NQe=o("AutoFeatureExtractor.from_pretrained()"),DQe=o(" class method."),qQe=l(),JC=a("p"),OQe=o("This class cannot be instantiated directly using "),YQ=a("code"),GQe=o("__init__()"),XQe=o(" (throws an error)."),zQe=l(),Le=a("div"),f(YC.$$.fragment),VQe=l(),KQ=a("p"),WQe=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),QQe=l(),ka=a("p"),HQe=o("The feature extractor class to instantiate is selected based on the "),ZQ=a("code"),UQe=o("model_type"),JQe=o(` property of the config object
(either passed as an argument or loaded from `),eH=a("code"),YQe=o("pretrained_model_name_or_path"),KQe=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oH=a("code"),ZQe=o("pretrained_model_name_or_path"),eHe=o(":"),oHe=l(),se=a("ul"),Ag=a("li"),rH=a("strong"),rHe=o("beit"),tHe=o(" \u2014 "),UB=a("a"),aHe=o("BeitFeatureExtractor"),nHe=o(" (BEiT model)"),sHe=l(),Lg=a("li"),tH=a("strong"),lHe=o("clip"),iHe=o(" \u2014 "),JB=a("a"),dHe=o("CLIPFeatureExtractor"),cHe=o(" (CLIP model)"),fHe=l(),Bg=a("li"),aH=a("strong"),mHe=o("convnext"),gHe=o(" \u2014 "),nH=a("code"),hHe=o("ConvNextFeatureExtractor"),pHe=o("(ConvNext model)"),_He=l(),kg=a("li"),sH=a("strong"),uHe=o("deit"),bHe=o(" \u2014 "),YB=a("a"),vHe=o("DeiTFeatureExtractor"),THe=o(" (DeiT model)"),FHe=l(),xg=a("li"),lH=a("strong"),CHe=o("detr"),MHe=o(" \u2014 "),KB=a("a"),EHe=o("DetrFeatureExtractor"),yHe=o(" (DETR model)"),wHe=l(),Rg=a("li"),iH=a("strong"),AHe=o("hubert"),LHe=o(" \u2014 "),ZB=a("a"),BHe=o("Wav2Vec2FeatureExtractor"),kHe=o(" (Hubert model)"),xHe=l(),Sg=a("li"),dH=a("strong"),RHe=o("layoutlmv2"),SHe=o(" \u2014 "),ek=a("a"),PHe=o("LayoutLMv2FeatureExtractor"),$He=o(" (LayoutLMv2 model)"),IHe=l(),Pg=a("li"),cH=a("strong"),jHe=o("perceiver"),NHe=o(" \u2014 "),ok=a("a"),DHe=o("PerceiverFeatureExtractor"),qHe=o(" (Perceiver model)"),OHe=l(),$g=a("li"),fH=a("strong"),GHe=o("poolformer"),XHe=o(" \u2014 "),rk=a("a"),zHe=o("PoolFormerFeatureExtractor"),VHe=o(" (PoolFormer model)"),WHe=l(),Ig=a("li"),mH=a("strong"),QHe=o("segformer"),HHe=o(" \u2014 "),tk=a("a"),UHe=o("SegformerFeatureExtractor"),JHe=o(" (SegFormer model)"),YHe=l(),jg=a("li"),gH=a("strong"),KHe=o("speech_to_text"),ZHe=o(" \u2014 "),ak=a("a"),eUe=o("Speech2TextFeatureExtractor"),oUe=o(" (Speech2Text model)"),rUe=l(),Ng=a("li"),hH=a("strong"),tUe=o("swin"),aUe=o(" \u2014 "),nk=a("a"),nUe=o("ViTFeatureExtractor"),sUe=o(" (Swin model)"),lUe=l(),Dg=a("li"),pH=a("strong"),iUe=o("vit"),dUe=o(" \u2014 "),sk=a("a"),cUe=o("ViTFeatureExtractor"),fUe=o(" (ViT model)"),mUe=l(),qg=a("li"),_H=a("strong"),gUe=o("vit_mae"),hUe=o(" \u2014 "),lk=a("a"),pUe=o("ViTFeatureExtractor"),_Ue=o(" (ViTMAE model)"),uUe=l(),Og=a("li"),uH=a("strong"),bUe=o("wav2vec2"),vUe=o(" \u2014 "),ik=a("a"),TUe=o("Wav2Vec2FeatureExtractor"),FUe=o(" (Wav2Vec2 model)"),CUe=l(),f(Gg.$$.fragment),MUe=l(),bH=a("p"),EUe=o("Examples:"),yUe=l(),f(KC.$$.fragment),wUe=l(),Xg=a("div"),f(ZC.$$.fragment),AUe=l(),vH=a("p"),LUe=o("Register a new feature extractor for this class."),P0e=l(),Ei=a("h2"),zg=a("a"),TH=a("span"),f(eM.$$.fragment),BUe=l(),FH=a("span"),kUe=o("AutoProcessor"),$0e=l(),Go=a("div"),f(oM.$$.fragment),xUe=l(),rM=a("p"),RUe=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dk=a("a"),SUe=o("AutoProcessor.from_pretrained()"),PUe=o(" class method."),$Ue=l(),tM=a("p"),IUe=o("This class cannot be instantiated directly using "),CH=a("code"),jUe=o("__init__()"),NUe=o(" (throws an error)."),DUe=l(),Be=a("div"),f(aM.$$.fragment),qUe=l(),MH=a("p"),OUe=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),GUe=l(),yi=a("p"),XUe=o("The processor class to instantiate is selected based on the "),EH=a("code"),zUe=o("model_type"),VUe=o(` property of the config object (either
passed as an argument or loaded from `),yH=a("code"),WUe=o("pretrained_model_name_or_path"),QUe=o(" if possible):"),HUe=l(),we=a("ul"),Vg=a("li"),wH=a("strong"),UUe=o("clip"),JUe=o(" \u2014 "),ck=a("a"),YUe=o("CLIPProcessor"),KUe=o(" (CLIP model)"),ZUe=l(),Wg=a("li"),AH=a("strong"),eJe=o("layoutlmv2"),oJe=o(" \u2014 "),fk=a("a"),rJe=o("LayoutLMv2Processor"),tJe=o(" (LayoutLMv2 model)"),aJe=l(),Qg=a("li"),LH=a("strong"),nJe=o("layoutxlm"),sJe=o(" \u2014 "),mk=a("a"),lJe=o("LayoutXLMProcessor"),iJe=o(" (LayoutXLM model)"),dJe=l(),Hg=a("li"),BH=a("strong"),cJe=o("speech_to_text"),fJe=o(" \u2014 "),gk=a("a"),mJe=o("Speech2TextProcessor"),gJe=o(" (Speech2Text model)"),hJe=l(),Ug=a("li"),kH=a("strong"),pJe=o("speech_to_text_2"),_Je=o(" \u2014 "),hk=a("a"),uJe=o("Speech2Text2Processor"),bJe=o(" (Speech2Text2 model)"),vJe=l(),Jg=a("li"),xH=a("strong"),TJe=o("trocr"),FJe=o(" \u2014 "),pk=a("a"),CJe=o("TrOCRProcessor"),MJe=o(" (TrOCR model)"),EJe=l(),Yg=a("li"),RH=a("strong"),yJe=o("vision-text-dual-encoder"),wJe=o(" \u2014 "),_k=a("a"),AJe=o("VisionTextDualEncoderProcessor"),LJe=o(" (VisionTextDualEncoder model)"),BJe=l(),Kg=a("li"),SH=a("strong"),kJe=o("wav2vec2"),xJe=o(" \u2014 "),uk=a("a"),RJe=o("Wav2Vec2Processor"),SJe=o(" (Wav2Vec2 model)"),PJe=l(),f(Zg.$$.fragment),$Je=l(),PH=a("p"),IJe=o("Examples:"),jJe=l(),f(nM.$$.fragment),NJe=l(),eh=a("div"),f(sM.$$.fragment),DJe=l(),$H=a("p"),qJe=o("Register a new processor for this class."),I0e=l(),wi=a("h2"),oh=a("a"),IH=a("span"),f(lM.$$.fragment),OJe=l(),jH=a("span"),GJe=o("AutoModel"),j0e=l(),Xo=a("div"),f(iM.$$.fragment),XJe=l(),Ai=a("p"),zJe=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NH=a("code"),VJe=o("from_pretrained()"),WJe=o("class method or the "),DH=a("code"),QJe=o("from_config()"),HJe=o(`class
method.`),UJe=l(),dM=a("p"),JJe=o("This class cannot be instantiated directly using "),qH=a("code"),YJe=o("__init__()"),KJe=o(" (throws an error)."),ZJe=l(),Pr=a("div"),f(cM.$$.fragment),eYe=l(),OH=a("p"),oYe=o("Instantiates one of the base model classes of the library from a configuration."),rYe=l(),Li=a("p"),tYe=o(`Note:
Loading a model from its configuration file does `),GH=a("strong"),aYe=o("not"),nYe=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("code"),sYe=o("from_pretrained()"),lYe=o("to load the model weights."),iYe=l(),zH=a("p"),dYe=o("Examples:"),cYe=l(),f(fM.$$.fragment),fYe=l(),ke=a("div"),f(mM.$$.fragment),mYe=l(),VH=a("p"),gYe=o("Instantiate one of the base model classes of the library from a pretrained model."),hYe=l(),xa=a("p"),pYe=o("The model class to instantiate is selected based on the "),WH=a("code"),_Ye=o("model_type"),uYe=o(` property of the config object (either
passed as an argument or loaded from `),QH=a("code"),bYe=o("pretrained_model_name_or_path"),vYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HH=a("code"),TYe=o("pretrained_model_name_or_path"),FYe=o(":"),CYe=l(),F=a("ul"),rh=a("li"),UH=a("strong"),MYe=o("albert"),EYe=o(" \u2014 "),bk=a("a"),yYe=o("AlbertModel"),wYe=o(" (ALBERT model)"),AYe=l(),th=a("li"),JH=a("strong"),LYe=o("bart"),BYe=o(" \u2014 "),vk=a("a"),kYe=o("BartModel"),xYe=o(" (BART model)"),RYe=l(),ah=a("li"),YH=a("strong"),SYe=o("beit"),PYe=o(" \u2014 "),Tk=a("a"),$Ye=o("BeitModel"),IYe=o(" (BEiT model)"),jYe=l(),nh=a("li"),KH=a("strong"),NYe=o("bert"),DYe=o(" \u2014 "),Fk=a("a"),qYe=o("BertModel"),OYe=o(" (BERT model)"),GYe=l(),sh=a("li"),ZH=a("strong"),XYe=o("bert-generation"),zYe=o(" \u2014 "),Ck=a("a"),VYe=o("BertGenerationEncoder"),WYe=o(" (Bert Generation model)"),QYe=l(),lh=a("li"),eU=a("strong"),HYe=o("big_bird"),UYe=o(" \u2014 "),Mk=a("a"),JYe=o("BigBirdModel"),YYe=o(" (BigBird model)"),KYe=l(),ih=a("li"),oU=a("strong"),ZYe=o("bigbird_pegasus"),eKe=o(" \u2014 "),Ek=a("a"),oKe=o("BigBirdPegasusModel"),rKe=o(" (BigBirdPegasus model)"),tKe=l(),dh=a("li"),rU=a("strong"),aKe=o("blenderbot"),nKe=o(" \u2014 "),yk=a("a"),sKe=o("BlenderbotModel"),lKe=o(" (Blenderbot model)"),iKe=l(),ch=a("li"),tU=a("strong"),dKe=o("blenderbot-small"),cKe=o(" \u2014 "),wk=a("a"),fKe=o("BlenderbotSmallModel"),mKe=o(" (BlenderbotSmall model)"),gKe=l(),fh=a("li"),aU=a("strong"),hKe=o("camembert"),pKe=o(" \u2014 "),Ak=a("a"),_Ke=o("CamembertModel"),uKe=o(" (CamemBERT model)"),bKe=l(),mh=a("li"),nU=a("strong"),vKe=o("canine"),TKe=o(" \u2014 "),Lk=a("a"),FKe=o("CanineModel"),CKe=o(" (Canine model)"),MKe=l(),gh=a("li"),sU=a("strong"),EKe=o("clip"),yKe=o(" \u2014 "),Bk=a("a"),wKe=o("CLIPModel"),AKe=o(" (CLIP model)"),LKe=l(),hh=a("li"),lU=a("strong"),BKe=o("convbert"),kKe=o(" \u2014 "),kk=a("a"),xKe=o("ConvBertModel"),RKe=o(" (ConvBERT model)"),SKe=l(),ph=a("li"),iU=a("strong"),PKe=o("convnext"),$Ke=o(" \u2014 "),dU=a("code"),IKe=o("ConvNextModel"),jKe=o("(ConvNext model)"),NKe=l(),_h=a("li"),cU=a("strong"),DKe=o("ctrl"),qKe=o(" \u2014 "),xk=a("a"),OKe=o("CTRLModel"),GKe=o(" (CTRL model)"),XKe=l(),uh=a("li"),fU=a("strong"),zKe=o("deberta"),VKe=o(" \u2014 "),Rk=a("a"),WKe=o("DebertaModel"),QKe=o(" (DeBERTa model)"),HKe=l(),bh=a("li"),mU=a("strong"),UKe=o("deberta-v2"),JKe=o(" \u2014 "),Sk=a("a"),YKe=o("DebertaV2Model"),KKe=o(" (DeBERTa-v2 model)"),ZKe=l(),vh=a("li"),gU=a("strong"),eZe=o("deit"),oZe=o(" \u2014 "),Pk=a("a"),rZe=o("DeiTModel"),tZe=o(" (DeiT model)"),aZe=l(),Th=a("li"),hU=a("strong"),nZe=o("detr"),sZe=o(" \u2014 "),$k=a("a"),lZe=o("DetrModel"),iZe=o(" (DETR model)"),dZe=l(),Fh=a("li"),pU=a("strong"),cZe=o("distilbert"),fZe=o(" \u2014 "),Ik=a("a"),mZe=o("DistilBertModel"),gZe=o(" (DistilBERT model)"),hZe=l(),Ch=a("li"),_U=a("strong"),pZe=o("dpr"),_Ze=o(" \u2014 "),jk=a("a"),uZe=o("DPRQuestionEncoder"),bZe=o(" (DPR model)"),vZe=l(),Mh=a("li"),uU=a("strong"),TZe=o("electra"),FZe=o(" \u2014 "),Nk=a("a"),CZe=o("ElectraModel"),MZe=o(" (ELECTRA model)"),EZe=l(),Eh=a("li"),bU=a("strong"),yZe=o("flaubert"),wZe=o(" \u2014 "),Dk=a("a"),AZe=o("FlaubertModel"),LZe=o(" (FlauBERT model)"),BZe=l(),yh=a("li"),vU=a("strong"),kZe=o("fnet"),xZe=o(" \u2014 "),qk=a("a"),RZe=o("FNetModel"),SZe=o(" (FNet model)"),PZe=l(),wh=a("li"),TU=a("strong"),$Ze=o("fsmt"),IZe=o(" \u2014 "),Ok=a("a"),jZe=o("FSMTModel"),NZe=o(" (FairSeq Machine-Translation model)"),DZe=l(),Fs=a("li"),FU=a("strong"),qZe=o("funnel"),OZe=o(" \u2014 "),Gk=a("a"),GZe=o("FunnelModel"),XZe=o(" or "),Xk=a("a"),zZe=o("FunnelBaseModel"),VZe=o(" (Funnel Transformer model)"),WZe=l(),Ah=a("li"),CU=a("strong"),QZe=o("gpt2"),HZe=o(" \u2014 "),zk=a("a"),UZe=o("GPT2Model"),JZe=o(" (OpenAI GPT-2 model)"),YZe=l(),Lh=a("li"),MU=a("strong"),KZe=o("gpt_neo"),ZZe=o(" \u2014 "),Vk=a("a"),eeo=o("GPTNeoModel"),oeo=o(" (GPT Neo model)"),reo=l(),Bh=a("li"),EU=a("strong"),teo=o("gptj"),aeo=o(" \u2014 "),Wk=a("a"),neo=o("GPTJModel"),seo=o(" (GPT-J model)"),leo=l(),kh=a("li"),yU=a("strong"),ieo=o("hubert"),deo=o(" \u2014 "),Qk=a("a"),ceo=o("HubertModel"),feo=o(" (Hubert model)"),meo=l(),xh=a("li"),wU=a("strong"),geo=o("ibert"),heo=o(" \u2014 "),Hk=a("a"),peo=o("IBertModel"),_eo=o(" (I-BERT model)"),ueo=l(),Rh=a("li"),AU=a("strong"),beo=o("imagegpt"),veo=o(" \u2014 "),Uk=a("a"),Teo=o("ImageGPTModel"),Feo=o(" (ImageGPT model)"),Ceo=l(),Sh=a("li"),LU=a("strong"),Meo=o("layoutlm"),Eeo=o(" \u2014 "),Jk=a("a"),yeo=o("LayoutLMModel"),weo=o(" (LayoutLM model)"),Aeo=l(),Ph=a("li"),BU=a("strong"),Leo=o("layoutlmv2"),Beo=o(" \u2014 "),Yk=a("a"),keo=o("LayoutLMv2Model"),xeo=o(" (LayoutLMv2 model)"),Reo=l(),$h=a("li"),kU=a("strong"),Seo=o("led"),Peo=o(" \u2014 "),Kk=a("a"),$eo=o("LEDModel"),Ieo=o(" (LED model)"),jeo=l(),Ih=a("li"),xU=a("strong"),Neo=o("longformer"),Deo=o(" \u2014 "),Zk=a("a"),qeo=o("LongformerModel"),Oeo=o(" (Longformer model)"),Geo=l(),jh=a("li"),RU=a("strong"),Xeo=o("luke"),zeo=o(" \u2014 "),ex=a("a"),Veo=o("LukeModel"),Weo=o(" (LUKE model)"),Qeo=l(),Nh=a("li"),SU=a("strong"),Heo=o("lxmert"),Ueo=o(" \u2014 "),ox=a("a"),Jeo=o("LxmertModel"),Yeo=o(" (LXMERT model)"),Keo=l(),Dh=a("li"),PU=a("strong"),Zeo=o("m2m_100"),eoo=o(" \u2014 "),rx=a("a"),ooo=o("M2M100Model"),roo=o(" (M2M100 model)"),too=l(),qh=a("li"),$U=a("strong"),aoo=o("marian"),noo=o(" \u2014 "),tx=a("a"),soo=o("MarianModel"),loo=o(" (Marian model)"),ioo=l(),Oh=a("li"),IU=a("strong"),doo=o("mbart"),coo=o(" \u2014 "),ax=a("a"),foo=o("MBartModel"),moo=o(" (mBART model)"),goo=l(),Gh=a("li"),jU=a("strong"),hoo=o("megatron-bert"),poo=o(" \u2014 "),nx=a("a"),_oo=o("MegatronBertModel"),uoo=o(" (MegatronBert model)"),boo=l(),Xh=a("li"),NU=a("strong"),voo=o("mobilebert"),Too=o(" \u2014 "),sx=a("a"),Foo=o("MobileBertModel"),Coo=o(" (MobileBERT model)"),Moo=l(),zh=a("li"),DU=a("strong"),Eoo=o("mpnet"),yoo=o(" \u2014 "),lx=a("a"),woo=o("MPNetModel"),Aoo=o(" (MPNet model)"),Loo=l(),Vh=a("li"),qU=a("strong"),Boo=o("mt5"),koo=o(" \u2014 "),ix=a("a"),xoo=o("MT5Model"),Roo=o(" (mT5 model)"),Soo=l(),Wh=a("li"),OU=a("strong"),Poo=o("nystromformer"),$oo=o(" \u2014 "),dx=a("a"),Ioo=o("NystromformerModel"),joo=o(" (Nystromformer model)"),Noo=l(),Qh=a("li"),GU=a("strong"),Doo=o("openai-gpt"),qoo=o(" \u2014 "),cx=a("a"),Ooo=o("OpenAIGPTModel"),Goo=o(" (OpenAI GPT model)"),Xoo=l(),Hh=a("li"),XU=a("strong"),zoo=o("pegasus"),Voo=o(" \u2014 "),fx=a("a"),Woo=o("PegasusModel"),Qoo=o(" (Pegasus model)"),Hoo=l(),Uh=a("li"),zU=a("strong"),Uoo=o("perceiver"),Joo=o(" \u2014 "),mx=a("a"),Yoo=o("PerceiverModel"),Koo=o(" (Perceiver model)"),Zoo=l(),Jh=a("li"),VU=a("strong"),ero=o("plbart"),oro=o(" \u2014 "),gx=a("a"),rro=o("PLBartModel"),tro=o(" (PLBart model)"),aro=l(),Yh=a("li"),WU=a("strong"),nro=o("poolformer"),sro=o(" \u2014 "),hx=a("a"),lro=o("PoolFormerModel"),iro=o(" (PoolFormer model)"),dro=l(),Kh=a("li"),QU=a("strong"),cro=o("prophetnet"),fro=o(" \u2014 "),px=a("a"),mro=o("ProphetNetModel"),gro=o(" (ProphetNet model)"),hro=l(),Zh=a("li"),HU=a("strong"),pro=o("qdqbert"),_ro=o(" \u2014 "),_x=a("a"),uro=o("QDQBertModel"),bro=o(" (QDQBert model)"),vro=l(),ep=a("li"),UU=a("strong"),Tro=o("reformer"),Fro=o(" \u2014 "),ux=a("a"),Cro=o("ReformerModel"),Mro=o(" (Reformer model)"),Ero=l(),op=a("li"),JU=a("strong"),yro=o("rembert"),wro=o(" \u2014 "),bx=a("a"),Aro=o("RemBertModel"),Lro=o(" (RemBERT model)"),Bro=l(),rp=a("li"),YU=a("strong"),kro=o("retribert"),xro=o(" \u2014 "),vx=a("a"),Rro=o("RetriBertModel"),Sro=o(" (RetriBERT model)"),Pro=l(),tp=a("li"),KU=a("strong"),$ro=o("roberta"),Iro=o(" \u2014 "),Tx=a("a"),jro=o("RobertaModel"),Nro=o(" (RoBERTa model)"),Dro=l(),ap=a("li"),ZU=a("strong"),qro=o("roformer"),Oro=o(" \u2014 "),Fx=a("a"),Gro=o("RoFormerModel"),Xro=o(" (RoFormer model)"),zro=l(),np=a("li"),eJ=a("strong"),Vro=o("segformer"),Wro=o(" \u2014 "),Cx=a("a"),Qro=o("SegformerModel"),Hro=o(" (SegFormer model)"),Uro=l(),sp=a("li"),oJ=a("strong"),Jro=o("sew"),Yro=o(" \u2014 "),Mx=a("a"),Kro=o("SEWModel"),Zro=o(" (SEW model)"),eto=l(),lp=a("li"),rJ=a("strong"),oto=o("sew-d"),rto=o(" \u2014 "),Ex=a("a"),tto=o("SEWDModel"),ato=o(" (SEW-D model)"),nto=l(),ip=a("li"),tJ=a("strong"),sto=o("speech_to_text"),lto=o(" \u2014 "),yx=a("a"),ito=o("Speech2TextModel"),dto=o(" (Speech2Text model)"),cto=l(),dp=a("li"),aJ=a("strong"),fto=o("splinter"),mto=o(" \u2014 "),wx=a("a"),gto=o("SplinterModel"),hto=o(" (Splinter model)"),pto=l(),cp=a("li"),nJ=a("strong"),_to=o("squeezebert"),uto=o(" \u2014 "),Ax=a("a"),bto=o("SqueezeBertModel"),vto=o(" (SqueezeBERT model)"),Tto=l(),fp=a("li"),sJ=a("strong"),Fto=o("swin"),Cto=o(" \u2014 "),Lx=a("a"),Mto=o("SwinModel"),Eto=o(" (Swin model)"),yto=l(),mp=a("li"),lJ=a("strong"),wto=o("t5"),Ato=o(" \u2014 "),Bx=a("a"),Lto=o("T5Model"),Bto=o(" (T5 model)"),kto=l(),gp=a("li"),iJ=a("strong"),xto=o("tapas"),Rto=o(" \u2014 "),kx=a("a"),Sto=o("TapasModel"),Pto=o(" (TAPAS model)"),$to=l(),hp=a("li"),dJ=a("strong"),Ito=o("transfo-xl"),jto=o(" \u2014 "),xx=a("a"),Nto=o("TransfoXLModel"),Dto=o(" (Transformer-XL model)"),qto=l(),pp=a("li"),cJ=a("strong"),Oto=o("unispeech"),Gto=o(" \u2014 "),Rx=a("a"),Xto=o("UniSpeechModel"),zto=o(" (UniSpeech model)"),Vto=l(),_p=a("li"),fJ=a("strong"),Wto=o("unispeech-sat"),Qto=o(" \u2014 "),Sx=a("a"),Hto=o("UniSpeechSatModel"),Uto=o(" (UniSpeechSat model)"),Jto=l(),up=a("li"),mJ=a("strong"),Yto=o("vilt"),Kto=o(" \u2014 "),Px=a("a"),Zto=o("ViltModel"),eao=o(" (ViLT model)"),oao=l(),bp=a("li"),gJ=a("strong"),rao=o("vision-text-dual-encoder"),tao=o(" \u2014 "),$x=a("a"),aao=o("VisionTextDualEncoderModel"),nao=o(" (VisionTextDualEncoder model)"),sao=l(),vp=a("li"),hJ=a("strong"),lao=o("visual_bert"),iao=o(" \u2014 "),Ix=a("a"),dao=o("VisualBertModel"),cao=o(" (VisualBert model)"),fao=l(),Tp=a("li"),pJ=a("strong"),mao=o("vit"),gao=o(" \u2014 "),jx=a("a"),hao=o("ViTModel"),pao=o(" (ViT model)"),_ao=l(),Fp=a("li"),_J=a("strong"),uao=o("vit_mae"),bao=o(" \u2014 "),Nx=a("a"),vao=o("ViTMAEModel"),Tao=o(" (ViTMAE model)"),Fao=l(),Cp=a("li"),uJ=a("strong"),Cao=o("wav2vec2"),Mao=o(" \u2014 "),Dx=a("a"),Eao=o("Wav2Vec2Model"),yao=o(" (Wav2Vec2 model)"),wao=l(),Mp=a("li"),bJ=a("strong"),Aao=o("wavlm"),Lao=o(" \u2014 "),qx=a("a"),Bao=o("WavLMModel"),kao=o(" (WavLM model)"),xao=l(),Ep=a("li"),vJ=a("strong"),Rao=o("xglm"),Sao=o(" \u2014 "),TJ=a("code"),Pao=o("XGLMModel"),$ao=o("(XGLM model)"),Iao=l(),yp=a("li"),FJ=a("strong"),jao=o("xlm"),Nao=o(" \u2014 "),Ox=a("a"),Dao=o("XLMModel"),qao=o(" (XLM model)"),Oao=l(),wp=a("li"),CJ=a("strong"),Gao=o("xlm-prophetnet"),Xao=o(" \u2014 "),Gx=a("a"),zao=o("XLMProphetNetModel"),Vao=o(" (XLMProphetNet model)"),Wao=l(),Ap=a("li"),MJ=a("strong"),Qao=o("xlm-roberta"),Hao=o(" \u2014 "),Xx=a("a"),Uao=o("XLMRobertaModel"),Jao=o(" (XLM-RoBERTa model)"),Yao=l(),Lp=a("li"),EJ=a("strong"),Kao=o("xlm-roberta-xl"),Zao=o(" \u2014 "),yJ=a("code"),eno=o("XLMRobertaXLModel"),ono=o("(XLM-RoBERTa-XL model)"),rno=l(),Bp=a("li"),wJ=a("strong"),tno=o("xlnet"),ano=o(" \u2014 "),zx=a("a"),nno=o("XLNetModel"),sno=o(" (XLNet model)"),lno=l(),kp=a("li"),AJ=a("strong"),ino=o("yoso"),dno=o(" \u2014 "),Vx=a("a"),cno=o("YosoModel"),fno=o(" (YOSO model)"),mno=l(),xp=a("p"),gno=o("The model is set in evaluation mode by default using "),LJ=a("code"),hno=o("model.eval()"),pno=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BJ=a("code"),_no=o("model.train()"),uno=l(),kJ=a("p"),bno=o("Examples:"),vno=l(),f(gM.$$.fragment),N0e=l(),Bi=a("h2"),Rp=a("a"),xJ=a("span"),f(hM.$$.fragment),Tno=l(),RJ=a("span"),Fno=o("AutoModelForPreTraining"),D0e=l(),zo=a("div"),f(pM.$$.fragment),Cno=l(),ki=a("p"),Mno=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SJ=a("code"),Eno=o("from_pretrained()"),yno=o("class method or the "),PJ=a("code"),wno=o("from_config()"),Ano=o(`class
method.`),Lno=l(),_M=a("p"),Bno=o("This class cannot be instantiated directly using "),$J=a("code"),kno=o("__init__()"),xno=o(" (throws an error)."),Rno=l(),$r=a("div"),f(uM.$$.fragment),Sno=l(),IJ=a("p"),Pno=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$no=l(),xi=a("p"),Ino=o(`Note:
Loading a model from its configuration file does `),jJ=a("strong"),jno=o("not"),Nno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("code"),Dno=o("from_pretrained()"),qno=o("to load the model weights."),Ono=l(),DJ=a("p"),Gno=o("Examples:"),Xno=l(),f(bM.$$.fragment),zno=l(),xe=a("div"),f(vM.$$.fragment),Vno=l(),qJ=a("p"),Wno=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qno=l(),Ra=a("p"),Hno=o("The model class to instantiate is selected based on the "),OJ=a("code"),Uno=o("model_type"),Jno=o(` property of the config object (either
passed as an argument or loaded from `),GJ=a("code"),Yno=o("pretrained_model_name_or_path"),Kno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XJ=a("code"),Zno=o("pretrained_model_name_or_path"),eso=o(":"),oso=l(),x=a("ul"),Sp=a("li"),zJ=a("strong"),rso=o("albert"),tso=o(" \u2014 "),Wx=a("a"),aso=o("AlbertForPreTraining"),nso=o(" (ALBERT model)"),sso=l(),Pp=a("li"),VJ=a("strong"),lso=o("bart"),iso=o(" \u2014 "),Qx=a("a"),dso=o("BartForConditionalGeneration"),cso=o(" (BART model)"),fso=l(),$p=a("li"),WJ=a("strong"),mso=o("bert"),gso=o(" \u2014 "),Hx=a("a"),hso=o("BertForPreTraining"),pso=o(" (BERT model)"),_so=l(),Ip=a("li"),QJ=a("strong"),uso=o("big_bird"),bso=o(" \u2014 "),Ux=a("a"),vso=o("BigBirdForPreTraining"),Tso=o(" (BigBird model)"),Fso=l(),jp=a("li"),HJ=a("strong"),Cso=o("camembert"),Mso=o(" \u2014 "),Jx=a("a"),Eso=o("CamembertForMaskedLM"),yso=o(" (CamemBERT model)"),wso=l(),Np=a("li"),UJ=a("strong"),Aso=o("ctrl"),Lso=o(" \u2014 "),Yx=a("a"),Bso=o("CTRLLMHeadModel"),kso=o(" (CTRL model)"),xso=l(),Dp=a("li"),JJ=a("strong"),Rso=o("deberta"),Sso=o(" \u2014 "),Kx=a("a"),Pso=o("DebertaForMaskedLM"),$so=o(" (DeBERTa model)"),Iso=l(),qp=a("li"),YJ=a("strong"),jso=o("deberta-v2"),Nso=o(" \u2014 "),Zx=a("a"),Dso=o("DebertaV2ForMaskedLM"),qso=o(" (DeBERTa-v2 model)"),Oso=l(),Op=a("li"),KJ=a("strong"),Gso=o("distilbert"),Xso=o(" \u2014 "),eR=a("a"),zso=o("DistilBertForMaskedLM"),Vso=o(" (DistilBERT model)"),Wso=l(),Gp=a("li"),ZJ=a("strong"),Qso=o("electra"),Hso=o(" \u2014 "),oR=a("a"),Uso=o("ElectraForPreTraining"),Jso=o(" (ELECTRA model)"),Yso=l(),Xp=a("li"),eY=a("strong"),Kso=o("flaubert"),Zso=o(" \u2014 "),rR=a("a"),elo=o("FlaubertWithLMHeadModel"),olo=o(" (FlauBERT model)"),rlo=l(),zp=a("li"),oY=a("strong"),tlo=o("fnet"),alo=o(" \u2014 "),tR=a("a"),nlo=o("FNetForPreTraining"),slo=o(" (FNet model)"),llo=l(),Vp=a("li"),rY=a("strong"),ilo=o("fsmt"),dlo=o(" \u2014 "),aR=a("a"),clo=o("FSMTForConditionalGeneration"),flo=o(" (FairSeq Machine-Translation model)"),mlo=l(),Wp=a("li"),tY=a("strong"),glo=o("funnel"),hlo=o(" \u2014 "),nR=a("a"),plo=o("FunnelForPreTraining"),_lo=o(" (Funnel Transformer model)"),ulo=l(),Qp=a("li"),aY=a("strong"),blo=o("gpt2"),vlo=o(" \u2014 "),sR=a("a"),Tlo=o("GPT2LMHeadModel"),Flo=o(" (OpenAI GPT-2 model)"),Clo=l(),Hp=a("li"),nY=a("strong"),Mlo=o("ibert"),Elo=o(" \u2014 "),lR=a("a"),ylo=o("IBertForMaskedLM"),wlo=o(" (I-BERT model)"),Alo=l(),Up=a("li"),sY=a("strong"),Llo=o("layoutlm"),Blo=o(" \u2014 "),iR=a("a"),klo=o("LayoutLMForMaskedLM"),xlo=o(" (LayoutLM model)"),Rlo=l(),Jp=a("li"),lY=a("strong"),Slo=o("longformer"),Plo=o(" \u2014 "),dR=a("a"),$lo=o("LongformerForMaskedLM"),Ilo=o(" (Longformer model)"),jlo=l(),Yp=a("li"),iY=a("strong"),Nlo=o("lxmert"),Dlo=o(" \u2014 "),cR=a("a"),qlo=o("LxmertForPreTraining"),Olo=o(" (LXMERT model)"),Glo=l(),Kp=a("li"),dY=a("strong"),Xlo=o("megatron-bert"),zlo=o(" \u2014 "),fR=a("a"),Vlo=o("MegatronBertForPreTraining"),Wlo=o(" (MegatronBert model)"),Qlo=l(),Zp=a("li"),cY=a("strong"),Hlo=o("mobilebert"),Ulo=o(" \u2014 "),mR=a("a"),Jlo=o("MobileBertForPreTraining"),Ylo=o(" (MobileBERT model)"),Klo=l(),e_=a("li"),fY=a("strong"),Zlo=o("mpnet"),eio=o(" \u2014 "),gR=a("a"),oio=o("MPNetForMaskedLM"),rio=o(" (MPNet model)"),tio=l(),o_=a("li"),mY=a("strong"),aio=o("openai-gpt"),nio=o(" \u2014 "),hR=a("a"),sio=o("OpenAIGPTLMHeadModel"),lio=o(" (OpenAI GPT model)"),iio=l(),r_=a("li"),gY=a("strong"),dio=o("retribert"),cio=o(" \u2014 "),pR=a("a"),fio=o("RetriBertModel"),mio=o(" (RetriBERT model)"),gio=l(),t_=a("li"),hY=a("strong"),hio=o("roberta"),pio=o(" \u2014 "),_R=a("a"),_io=o("RobertaForMaskedLM"),uio=o(" (RoBERTa model)"),bio=l(),a_=a("li"),pY=a("strong"),vio=o("squeezebert"),Tio=o(" \u2014 "),uR=a("a"),Fio=o("SqueezeBertForMaskedLM"),Cio=o(" (SqueezeBERT model)"),Mio=l(),n_=a("li"),_Y=a("strong"),Eio=o("t5"),yio=o(" \u2014 "),bR=a("a"),wio=o("T5ForConditionalGeneration"),Aio=o(" (T5 model)"),Lio=l(),s_=a("li"),uY=a("strong"),Bio=o("tapas"),kio=o(" \u2014 "),vR=a("a"),xio=o("TapasForMaskedLM"),Rio=o(" (TAPAS model)"),Sio=l(),l_=a("li"),bY=a("strong"),Pio=o("transfo-xl"),$io=o(" \u2014 "),TR=a("a"),Iio=o("TransfoXLLMHeadModel"),jio=o(" (Transformer-XL model)"),Nio=l(),i_=a("li"),vY=a("strong"),Dio=o("unispeech"),qio=o(" \u2014 "),FR=a("a"),Oio=o("UniSpeechForPreTraining"),Gio=o(" (UniSpeech model)"),Xio=l(),d_=a("li"),TY=a("strong"),zio=o("unispeech-sat"),Vio=o(" \u2014 "),CR=a("a"),Wio=o("UniSpeechSatForPreTraining"),Qio=o(" (UniSpeechSat model)"),Hio=l(),c_=a("li"),FY=a("strong"),Uio=o("visual_bert"),Jio=o(" \u2014 "),MR=a("a"),Yio=o("VisualBertForPreTraining"),Kio=o(" (VisualBert model)"),Zio=l(),f_=a("li"),CY=a("strong"),edo=o("vit_mae"),odo=o(" \u2014 "),ER=a("a"),rdo=o("ViTMAEForPreTraining"),tdo=o(" (ViTMAE model)"),ado=l(),m_=a("li"),MY=a("strong"),ndo=o("wav2vec2"),sdo=o(" \u2014 "),yR=a("a"),ldo=o("Wav2Vec2ForPreTraining"),ido=o(" (Wav2Vec2 model)"),ddo=l(),g_=a("li"),EY=a("strong"),cdo=o("xlm"),fdo=o(" \u2014 "),wR=a("a"),mdo=o("XLMWithLMHeadModel"),gdo=o(" (XLM model)"),hdo=l(),h_=a("li"),yY=a("strong"),pdo=o("xlm-roberta"),_do=o(" \u2014 "),AR=a("a"),udo=o("XLMRobertaForMaskedLM"),bdo=o(" (XLM-RoBERTa model)"),vdo=l(),p_=a("li"),wY=a("strong"),Tdo=o("xlm-roberta-xl"),Fdo=o(" \u2014 "),AY=a("code"),Cdo=o("XLMRobertaXLForMaskedLM"),Mdo=o("(XLM-RoBERTa-XL model)"),Edo=l(),__=a("li"),LY=a("strong"),ydo=o("xlnet"),wdo=o(" \u2014 "),LR=a("a"),Ado=o("XLNetLMHeadModel"),Ldo=o(" (XLNet model)"),Bdo=l(),u_=a("p"),kdo=o("The model is set in evaluation mode by default using "),BY=a("code"),xdo=o("model.eval()"),Rdo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kY=a("code"),Sdo=o("model.train()"),Pdo=l(),xY=a("p"),$do=o("Examples:"),Ido=l(),f(TM.$$.fragment),q0e=l(),Ri=a("h2"),b_=a("a"),RY=a("span"),f(FM.$$.fragment),jdo=l(),SY=a("span"),Ndo=o("AutoModelForCausalLM"),O0e=l(),Vo=a("div"),f(CM.$$.fragment),Ddo=l(),Si=a("p"),qdo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PY=a("code"),Odo=o("from_pretrained()"),Gdo=o("class method or the "),$Y=a("code"),Xdo=o("from_config()"),zdo=o(`class
method.`),Vdo=l(),MM=a("p"),Wdo=o("This class cannot be instantiated directly using "),IY=a("code"),Qdo=o("__init__()"),Hdo=o(" (throws an error)."),Udo=l(),Ir=a("div"),f(EM.$$.fragment),Jdo=l(),jY=a("p"),Ydo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Kdo=l(),Pi=a("p"),Zdo=o(`Note:
Loading a model from its configuration file does `),NY=a("strong"),eco=o("not"),oco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("code"),rco=o("from_pretrained()"),tco=o("to load the model weights."),aco=l(),qY=a("p"),nco=o("Examples:"),sco=l(),f(yM.$$.fragment),lco=l(),Re=a("div"),f(wM.$$.fragment),ico=l(),OY=a("p"),dco=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),cco=l(),Sa=a("p"),fco=o("The model class to instantiate is selected based on the "),GY=a("code"),mco=o("model_type"),gco=o(` property of the config object (either
passed as an argument or loaded from `),XY=a("code"),hco=o("pretrained_model_name_or_path"),pco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zY=a("code"),_co=o("pretrained_model_name_or_path"),uco=o(":"),bco=l(),$=a("ul"),v_=a("li"),VY=a("strong"),vco=o("bart"),Tco=o(" \u2014 "),BR=a("a"),Fco=o("BartForCausalLM"),Cco=o(" (BART model)"),Mco=l(),T_=a("li"),WY=a("strong"),Eco=o("bert"),yco=o(" \u2014 "),kR=a("a"),wco=o("BertLMHeadModel"),Aco=o(" (BERT model)"),Lco=l(),F_=a("li"),QY=a("strong"),Bco=o("bert-generation"),kco=o(" \u2014 "),xR=a("a"),xco=o("BertGenerationDecoder"),Rco=o(" (Bert Generation model)"),Sco=l(),C_=a("li"),HY=a("strong"),Pco=o("big_bird"),$co=o(" \u2014 "),RR=a("a"),Ico=o("BigBirdForCausalLM"),jco=o(" (BigBird model)"),Nco=l(),M_=a("li"),UY=a("strong"),Dco=o("bigbird_pegasus"),qco=o(" \u2014 "),SR=a("a"),Oco=o("BigBirdPegasusForCausalLM"),Gco=o(" (BigBirdPegasus model)"),Xco=l(),E_=a("li"),JY=a("strong"),zco=o("blenderbot"),Vco=o(" \u2014 "),PR=a("a"),Wco=o("BlenderbotForCausalLM"),Qco=o(" (Blenderbot model)"),Hco=l(),y_=a("li"),YY=a("strong"),Uco=o("blenderbot-small"),Jco=o(" \u2014 "),$R=a("a"),Yco=o("BlenderbotSmallForCausalLM"),Kco=o(" (BlenderbotSmall model)"),Zco=l(),w_=a("li"),KY=a("strong"),efo=o("camembert"),ofo=o(" \u2014 "),IR=a("a"),rfo=o("CamembertForCausalLM"),tfo=o(" (CamemBERT model)"),afo=l(),A_=a("li"),ZY=a("strong"),nfo=o("ctrl"),sfo=o(" \u2014 "),jR=a("a"),lfo=o("CTRLLMHeadModel"),ifo=o(" (CTRL model)"),dfo=l(),L_=a("li"),eK=a("strong"),cfo=o("electra"),ffo=o(" \u2014 "),NR=a("a"),mfo=o("ElectraForCausalLM"),gfo=o(" (ELECTRA model)"),hfo=l(),B_=a("li"),oK=a("strong"),pfo=o("gpt2"),_fo=o(" \u2014 "),DR=a("a"),ufo=o("GPT2LMHeadModel"),bfo=o(" (OpenAI GPT-2 model)"),vfo=l(),k_=a("li"),rK=a("strong"),Tfo=o("gpt_neo"),Ffo=o(" \u2014 "),qR=a("a"),Cfo=o("GPTNeoForCausalLM"),Mfo=o(" (GPT Neo model)"),Efo=l(),x_=a("li"),tK=a("strong"),yfo=o("gptj"),wfo=o(" \u2014 "),OR=a("a"),Afo=o("GPTJForCausalLM"),Lfo=o(" (GPT-J model)"),Bfo=l(),R_=a("li"),aK=a("strong"),kfo=o("marian"),xfo=o(" \u2014 "),GR=a("a"),Rfo=o("MarianForCausalLM"),Sfo=o(" (Marian model)"),Pfo=l(),S_=a("li"),nK=a("strong"),$fo=o("mbart"),Ifo=o(" \u2014 "),XR=a("a"),jfo=o("MBartForCausalLM"),Nfo=o(" (mBART model)"),Dfo=l(),P_=a("li"),sK=a("strong"),qfo=o("megatron-bert"),Ofo=o(" \u2014 "),zR=a("a"),Gfo=o("MegatronBertForCausalLM"),Xfo=o(" (MegatronBert model)"),zfo=l(),$_=a("li"),lK=a("strong"),Vfo=o("openai-gpt"),Wfo=o(" \u2014 "),VR=a("a"),Qfo=o("OpenAIGPTLMHeadModel"),Hfo=o(" (OpenAI GPT model)"),Ufo=l(),I_=a("li"),iK=a("strong"),Jfo=o("pegasus"),Yfo=o(" \u2014 "),WR=a("a"),Kfo=o("PegasusForCausalLM"),Zfo=o(" (Pegasus model)"),emo=l(),j_=a("li"),dK=a("strong"),omo=o("plbart"),rmo=o(" \u2014 "),QR=a("a"),tmo=o("PLBartForCausalLM"),amo=o(" (PLBart model)"),nmo=l(),N_=a("li"),cK=a("strong"),smo=o("prophetnet"),lmo=o(" \u2014 "),HR=a("a"),imo=o("ProphetNetForCausalLM"),dmo=o(" (ProphetNet model)"),cmo=l(),D_=a("li"),fK=a("strong"),fmo=o("qdqbert"),mmo=o(" \u2014 "),UR=a("a"),gmo=o("QDQBertLMHeadModel"),hmo=o(" (QDQBert model)"),pmo=l(),q_=a("li"),mK=a("strong"),_mo=o("reformer"),umo=o(" \u2014 "),JR=a("a"),bmo=o("ReformerModelWithLMHead"),vmo=o(" (Reformer model)"),Tmo=l(),O_=a("li"),gK=a("strong"),Fmo=o("rembert"),Cmo=o(" \u2014 "),YR=a("a"),Mmo=o("RemBertForCausalLM"),Emo=o(" (RemBERT model)"),ymo=l(),G_=a("li"),hK=a("strong"),wmo=o("roberta"),Amo=o(" \u2014 "),KR=a("a"),Lmo=o("RobertaForCausalLM"),Bmo=o(" (RoBERTa model)"),kmo=l(),X_=a("li"),pK=a("strong"),xmo=o("roformer"),Rmo=o(" \u2014 "),ZR=a("a"),Smo=o("RoFormerForCausalLM"),Pmo=o(" (RoFormer model)"),$mo=l(),z_=a("li"),_K=a("strong"),Imo=o("speech_to_text_2"),jmo=o(" \u2014 "),eS=a("a"),Nmo=o("Speech2Text2ForCausalLM"),Dmo=o(" (Speech2Text2 model)"),qmo=l(),V_=a("li"),uK=a("strong"),Omo=o("transfo-xl"),Gmo=o(" \u2014 "),oS=a("a"),Xmo=o("TransfoXLLMHeadModel"),zmo=o(" (Transformer-XL model)"),Vmo=l(),W_=a("li"),bK=a("strong"),Wmo=o("trocr"),Qmo=o(" \u2014 "),rS=a("a"),Hmo=o("TrOCRForCausalLM"),Umo=o(" (TrOCR model)"),Jmo=l(),Q_=a("li"),vK=a("strong"),Ymo=o("xglm"),Kmo=o(" \u2014 "),TK=a("code"),Zmo=o("XGLMForCausalLM"),ego=o("(XGLM model)"),ogo=l(),H_=a("li"),FK=a("strong"),rgo=o("xlm"),tgo=o(" \u2014 "),tS=a("a"),ago=o("XLMWithLMHeadModel"),ngo=o(" (XLM model)"),sgo=l(),U_=a("li"),CK=a("strong"),lgo=o("xlm-prophetnet"),igo=o(" \u2014 "),aS=a("a"),dgo=o("XLMProphetNetForCausalLM"),cgo=o(" (XLMProphetNet model)"),fgo=l(),J_=a("li"),MK=a("strong"),mgo=o("xlm-roberta"),ggo=o(" \u2014 "),nS=a("a"),hgo=o("XLMRobertaForCausalLM"),pgo=o(" (XLM-RoBERTa model)"),_go=l(),Y_=a("li"),EK=a("strong"),ugo=o("xlm-roberta-xl"),bgo=o(" \u2014 "),yK=a("code"),vgo=o("XLMRobertaXLForCausalLM"),Tgo=o("(XLM-RoBERTa-XL model)"),Fgo=l(),K_=a("li"),wK=a("strong"),Cgo=o("xlnet"),Mgo=o(" \u2014 "),sS=a("a"),Ego=o("XLNetLMHeadModel"),ygo=o(" (XLNet model)"),wgo=l(),Z_=a("p"),Ago=o("The model is set in evaluation mode by default using "),AK=a("code"),Lgo=o("model.eval()"),Bgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=a("code"),kgo=o("model.train()"),xgo=l(),BK=a("p"),Rgo=o("Examples:"),Sgo=l(),f(AM.$$.fragment),G0e=l(),$i=a("h2"),eu=a("a"),kK=a("span"),f(LM.$$.fragment),Pgo=l(),xK=a("span"),$go=o("AutoModelForMaskedLM"),X0e=l(),Wo=a("div"),f(BM.$$.fragment),Igo=l(),Ii=a("p"),jgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=a("code"),Ngo=o("from_pretrained()"),Dgo=o("class method or the "),SK=a("code"),qgo=o("from_config()"),Ogo=o(`class
method.`),Ggo=l(),kM=a("p"),Xgo=o("This class cannot be instantiated directly using "),PK=a("code"),zgo=o("__init__()"),Vgo=o(" (throws an error)."),Wgo=l(),jr=a("div"),f(xM.$$.fragment),Qgo=l(),$K=a("p"),Hgo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ugo=l(),ji=a("p"),Jgo=o(`Note:
Loading a model from its configuration file does `),IK=a("strong"),Ygo=o("not"),Kgo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("code"),Zgo=o("from_pretrained()"),eho=o("to load the model weights."),oho=l(),NK=a("p"),rho=o("Examples:"),tho=l(),f(RM.$$.fragment),aho=l(),Se=a("div"),f(SM.$$.fragment),nho=l(),DK=a("p"),sho=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lho=l(),Pa=a("p"),iho=o("The model class to instantiate is selected based on the "),qK=a("code"),dho=o("model_type"),cho=o(` property of the config object (either
passed as an argument or loaded from `),OK=a("code"),fho=o("pretrained_model_name_or_path"),mho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=a("code"),gho=o("pretrained_model_name_or_path"),hho=o(":"),pho=l(),I=a("ul"),ou=a("li"),XK=a("strong"),_ho=o("albert"),uho=o(" \u2014 "),lS=a("a"),bho=o("AlbertForMaskedLM"),vho=o(" (ALBERT model)"),Tho=l(),ru=a("li"),zK=a("strong"),Fho=o("bart"),Cho=o(" \u2014 "),iS=a("a"),Mho=o("BartForConditionalGeneration"),Eho=o(" (BART model)"),yho=l(),tu=a("li"),VK=a("strong"),who=o("bert"),Aho=o(" \u2014 "),dS=a("a"),Lho=o("BertForMaskedLM"),Bho=o(" (BERT model)"),kho=l(),au=a("li"),WK=a("strong"),xho=o("big_bird"),Rho=o(" \u2014 "),cS=a("a"),Sho=o("BigBirdForMaskedLM"),Pho=o(" (BigBird model)"),$ho=l(),nu=a("li"),QK=a("strong"),Iho=o("camembert"),jho=o(" \u2014 "),fS=a("a"),Nho=o("CamembertForMaskedLM"),Dho=o(" (CamemBERT model)"),qho=l(),su=a("li"),HK=a("strong"),Oho=o("convbert"),Gho=o(" \u2014 "),mS=a("a"),Xho=o("ConvBertForMaskedLM"),zho=o(" (ConvBERT model)"),Vho=l(),lu=a("li"),UK=a("strong"),Who=o("deberta"),Qho=o(" \u2014 "),gS=a("a"),Hho=o("DebertaForMaskedLM"),Uho=o(" (DeBERTa model)"),Jho=l(),iu=a("li"),JK=a("strong"),Yho=o("deberta-v2"),Kho=o(" \u2014 "),hS=a("a"),Zho=o("DebertaV2ForMaskedLM"),epo=o(" (DeBERTa-v2 model)"),opo=l(),du=a("li"),YK=a("strong"),rpo=o("distilbert"),tpo=o(" \u2014 "),pS=a("a"),apo=o("DistilBertForMaskedLM"),npo=o(" (DistilBERT model)"),spo=l(),cu=a("li"),KK=a("strong"),lpo=o("electra"),ipo=o(" \u2014 "),_S=a("a"),dpo=o("ElectraForMaskedLM"),cpo=o(" (ELECTRA model)"),fpo=l(),fu=a("li"),ZK=a("strong"),mpo=o("flaubert"),gpo=o(" \u2014 "),uS=a("a"),hpo=o("FlaubertWithLMHeadModel"),ppo=o(" (FlauBERT model)"),_po=l(),mu=a("li"),eZ=a("strong"),upo=o("fnet"),bpo=o(" \u2014 "),bS=a("a"),vpo=o("FNetForMaskedLM"),Tpo=o(" (FNet model)"),Fpo=l(),gu=a("li"),oZ=a("strong"),Cpo=o("funnel"),Mpo=o(" \u2014 "),vS=a("a"),Epo=o("FunnelForMaskedLM"),ypo=o(" (Funnel Transformer model)"),wpo=l(),hu=a("li"),rZ=a("strong"),Apo=o("ibert"),Lpo=o(" \u2014 "),TS=a("a"),Bpo=o("IBertForMaskedLM"),kpo=o(" (I-BERT model)"),xpo=l(),pu=a("li"),tZ=a("strong"),Rpo=o("layoutlm"),Spo=o(" \u2014 "),FS=a("a"),Ppo=o("LayoutLMForMaskedLM"),$po=o(" (LayoutLM model)"),Ipo=l(),_u=a("li"),aZ=a("strong"),jpo=o("longformer"),Npo=o(" \u2014 "),CS=a("a"),Dpo=o("LongformerForMaskedLM"),qpo=o(" (Longformer model)"),Opo=l(),uu=a("li"),nZ=a("strong"),Gpo=o("mbart"),Xpo=o(" \u2014 "),MS=a("a"),zpo=o("MBartForConditionalGeneration"),Vpo=o(" (mBART model)"),Wpo=l(),bu=a("li"),sZ=a("strong"),Qpo=o("megatron-bert"),Hpo=o(" \u2014 "),ES=a("a"),Upo=o("MegatronBertForMaskedLM"),Jpo=o(" (MegatronBert model)"),Ypo=l(),vu=a("li"),lZ=a("strong"),Kpo=o("mobilebert"),Zpo=o(" \u2014 "),yS=a("a"),e_o=o("MobileBertForMaskedLM"),o_o=o(" (MobileBERT model)"),r_o=l(),Tu=a("li"),iZ=a("strong"),t_o=o("mpnet"),a_o=o(" \u2014 "),wS=a("a"),n_o=o("MPNetForMaskedLM"),s_o=o(" (MPNet model)"),l_o=l(),Fu=a("li"),dZ=a("strong"),i_o=o("nystromformer"),d_o=o(" \u2014 "),AS=a("a"),c_o=o("NystromformerForMaskedLM"),f_o=o(" (Nystromformer model)"),m_o=l(),Cu=a("li"),cZ=a("strong"),g_o=o("perceiver"),h_o=o(" \u2014 "),LS=a("a"),p_o=o("PerceiverForMaskedLM"),__o=o(" (Perceiver model)"),u_o=l(),Mu=a("li"),fZ=a("strong"),b_o=o("qdqbert"),v_o=o(" \u2014 "),BS=a("a"),T_o=o("QDQBertForMaskedLM"),F_o=o(" (QDQBert model)"),C_o=l(),Eu=a("li"),mZ=a("strong"),M_o=o("reformer"),E_o=o(" \u2014 "),kS=a("a"),y_o=o("ReformerForMaskedLM"),w_o=o(" (Reformer model)"),A_o=l(),yu=a("li"),gZ=a("strong"),L_o=o("rembert"),B_o=o(" \u2014 "),xS=a("a"),k_o=o("RemBertForMaskedLM"),x_o=o(" (RemBERT model)"),R_o=l(),wu=a("li"),hZ=a("strong"),S_o=o("roberta"),P_o=o(" \u2014 "),RS=a("a"),$_o=o("RobertaForMaskedLM"),I_o=o(" (RoBERTa model)"),j_o=l(),Au=a("li"),pZ=a("strong"),N_o=o("roformer"),D_o=o(" \u2014 "),SS=a("a"),q_o=o("RoFormerForMaskedLM"),O_o=o(" (RoFormer model)"),G_o=l(),Lu=a("li"),_Z=a("strong"),X_o=o("squeezebert"),z_o=o(" \u2014 "),PS=a("a"),V_o=o("SqueezeBertForMaskedLM"),W_o=o(" (SqueezeBERT model)"),Q_o=l(),Bu=a("li"),uZ=a("strong"),H_o=o("tapas"),U_o=o(" \u2014 "),$S=a("a"),J_o=o("TapasForMaskedLM"),Y_o=o(" (TAPAS model)"),K_o=l(),ku=a("li"),bZ=a("strong"),Z_o=o("wav2vec2"),euo=o(" \u2014 "),vZ=a("code"),ouo=o("Wav2Vec2ForMaskedLM"),ruo=o("(Wav2Vec2 model)"),tuo=l(),xu=a("li"),TZ=a("strong"),auo=o("xlm"),nuo=o(" \u2014 "),IS=a("a"),suo=o("XLMWithLMHeadModel"),luo=o(" (XLM model)"),iuo=l(),Ru=a("li"),FZ=a("strong"),duo=o("xlm-roberta"),cuo=o(" \u2014 "),jS=a("a"),fuo=o("XLMRobertaForMaskedLM"),muo=o(" (XLM-RoBERTa model)"),guo=l(),Su=a("li"),CZ=a("strong"),huo=o("xlm-roberta-xl"),puo=o(" \u2014 "),MZ=a("code"),_uo=o("XLMRobertaXLForMaskedLM"),uuo=o("(XLM-RoBERTa-XL model)"),buo=l(),Pu=a("li"),EZ=a("strong"),vuo=o("yoso"),Tuo=o(" \u2014 "),NS=a("a"),Fuo=o("YosoForMaskedLM"),Cuo=o(" (YOSO model)"),Muo=l(),$u=a("p"),Euo=o("The model is set in evaluation mode by default using "),yZ=a("code"),yuo=o("model.eval()"),wuo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wZ=a("code"),Auo=o("model.train()"),Luo=l(),AZ=a("p"),Buo=o("Examples:"),kuo=l(),f(PM.$$.fragment),z0e=l(),Ni=a("h2"),Iu=a("a"),LZ=a("span"),f($M.$$.fragment),xuo=l(),BZ=a("span"),Ruo=o("AutoModelForSeq2SeqLM"),V0e=l(),Qo=a("div"),f(IM.$$.fragment),Suo=l(),Di=a("p"),Puo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kZ=a("code"),$uo=o("from_pretrained()"),Iuo=o("class method or the "),xZ=a("code"),juo=o("from_config()"),Nuo=o(`class
method.`),Duo=l(),jM=a("p"),quo=o("This class cannot be instantiated directly using "),RZ=a("code"),Ouo=o("__init__()"),Guo=o(" (throws an error)."),Xuo=l(),Nr=a("div"),f(NM.$$.fragment),zuo=l(),SZ=a("p"),Vuo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Wuo=l(),qi=a("p"),Quo=o(`Note:
Loading a model from its configuration file does `),PZ=a("strong"),Huo=o("not"),Uuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=a("code"),Juo=o("from_pretrained()"),Yuo=o("to load the model weights."),Kuo=l(),IZ=a("p"),Zuo=o("Examples:"),e1o=l(),f(DM.$$.fragment),o1o=l(),Pe=a("div"),f(qM.$$.fragment),r1o=l(),jZ=a("p"),t1o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a1o=l(),$a=a("p"),n1o=o("The model class to instantiate is selected based on the "),NZ=a("code"),s1o=o("model_type"),l1o=o(` property of the config object (either
passed as an argument or loaded from `),DZ=a("code"),i1o=o("pretrained_model_name_or_path"),d1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qZ=a("code"),c1o=o("pretrained_model_name_or_path"),f1o=o(":"),m1o=l(),ae=a("ul"),ju=a("li"),OZ=a("strong"),g1o=o("bart"),h1o=o(" \u2014 "),DS=a("a"),p1o=o("BartForConditionalGeneration"),_1o=o(" (BART model)"),u1o=l(),Nu=a("li"),GZ=a("strong"),b1o=o("bigbird_pegasus"),v1o=o(" \u2014 "),qS=a("a"),T1o=o("BigBirdPegasusForConditionalGeneration"),F1o=o(" (BigBirdPegasus model)"),C1o=l(),Du=a("li"),XZ=a("strong"),M1o=o("blenderbot"),E1o=o(" \u2014 "),OS=a("a"),y1o=o("BlenderbotForConditionalGeneration"),w1o=o(" (Blenderbot model)"),A1o=l(),qu=a("li"),zZ=a("strong"),L1o=o("blenderbot-small"),B1o=o(" \u2014 "),GS=a("a"),k1o=o("BlenderbotSmallForConditionalGeneration"),x1o=o(" (BlenderbotSmall model)"),R1o=l(),Ou=a("li"),VZ=a("strong"),S1o=o("encoder-decoder"),P1o=o(" \u2014 "),XS=a("a"),$1o=o("EncoderDecoderModel"),I1o=o(" (Encoder decoder model)"),j1o=l(),Gu=a("li"),WZ=a("strong"),N1o=o("fsmt"),D1o=o(" \u2014 "),zS=a("a"),q1o=o("FSMTForConditionalGeneration"),O1o=o(" (FairSeq Machine-Translation model)"),G1o=l(),Xu=a("li"),QZ=a("strong"),X1o=o("led"),z1o=o(" \u2014 "),VS=a("a"),V1o=o("LEDForConditionalGeneration"),W1o=o(" (LED model)"),Q1o=l(),zu=a("li"),HZ=a("strong"),H1o=o("m2m_100"),U1o=o(" \u2014 "),WS=a("a"),J1o=o("M2M100ForConditionalGeneration"),Y1o=o(" (M2M100 model)"),K1o=l(),Vu=a("li"),UZ=a("strong"),Z1o=o("marian"),e4o=o(" \u2014 "),QS=a("a"),o4o=o("MarianMTModel"),r4o=o(" (Marian model)"),t4o=l(),Wu=a("li"),JZ=a("strong"),a4o=o("mbart"),n4o=o(" \u2014 "),HS=a("a"),s4o=o("MBartForConditionalGeneration"),l4o=o(" (mBART model)"),i4o=l(),Qu=a("li"),YZ=a("strong"),d4o=o("mt5"),c4o=o(" \u2014 "),US=a("a"),f4o=o("MT5ForConditionalGeneration"),m4o=o(" (mT5 model)"),g4o=l(),Hu=a("li"),KZ=a("strong"),h4o=o("pegasus"),p4o=o(" \u2014 "),JS=a("a"),_4o=o("PegasusForConditionalGeneration"),u4o=o(" (Pegasus model)"),b4o=l(),Uu=a("li"),ZZ=a("strong"),v4o=o("plbart"),T4o=o(" \u2014 "),YS=a("a"),F4o=o("PLBartForConditionalGeneration"),C4o=o(" (PLBart model)"),M4o=l(),Ju=a("li"),eee=a("strong"),E4o=o("prophetnet"),y4o=o(" \u2014 "),KS=a("a"),w4o=o("ProphetNetForConditionalGeneration"),A4o=o(" (ProphetNet model)"),L4o=l(),Yu=a("li"),oee=a("strong"),B4o=o("t5"),k4o=o(" \u2014 "),ZS=a("a"),x4o=o("T5ForConditionalGeneration"),R4o=o(" (T5 model)"),S4o=l(),Ku=a("li"),ree=a("strong"),P4o=o("xlm-prophetnet"),$4o=o(" \u2014 "),eP=a("a"),I4o=o("XLMProphetNetForConditionalGeneration"),j4o=o(" (XLMProphetNet model)"),N4o=l(),Zu=a("p"),D4o=o("The model is set in evaluation mode by default using "),tee=a("code"),q4o=o("model.eval()"),O4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=a("code"),G4o=o("model.train()"),X4o=l(),nee=a("p"),z4o=o("Examples:"),V4o=l(),f(OM.$$.fragment),W0e=l(),Oi=a("h2"),e1=a("a"),see=a("span"),f(GM.$$.fragment),W4o=l(),lee=a("span"),Q4o=o("AutoModelForSequenceClassification"),Q0e=l(),Ho=a("div"),f(XM.$$.fragment),H4o=l(),Gi=a("p"),U4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iee=a("code"),J4o=o("from_pretrained()"),Y4o=o("class method or the "),dee=a("code"),K4o=o("from_config()"),Z4o=o(`class
method.`),ebo=l(),zM=a("p"),obo=o("This class cannot be instantiated directly using "),cee=a("code"),rbo=o("__init__()"),tbo=o(" (throws an error)."),abo=l(),Dr=a("div"),f(VM.$$.fragment),nbo=l(),fee=a("p"),sbo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lbo=l(),Xi=a("p"),ibo=o(`Note:
Loading a model from its configuration file does `),mee=a("strong"),dbo=o("not"),cbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("code"),fbo=o("from_pretrained()"),mbo=o("to load the model weights."),gbo=l(),hee=a("p"),hbo=o("Examples:"),pbo=l(),f(WM.$$.fragment),_bo=l(),$e=a("div"),f(QM.$$.fragment),ubo=l(),pee=a("p"),bbo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vbo=l(),Ia=a("p"),Tbo=o("The model class to instantiate is selected based on the "),_ee=a("code"),Fbo=o("model_type"),Cbo=o(` property of the config object (either
passed as an argument or loaded from `),uee=a("code"),Mbo=o("pretrained_model_name_or_path"),Ebo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=a("code"),ybo=o("pretrained_model_name_or_path"),wbo=o(":"),Abo=l(),A=a("ul"),o1=a("li"),vee=a("strong"),Lbo=o("albert"),Bbo=o(" \u2014 "),oP=a("a"),kbo=o("AlbertForSequenceClassification"),xbo=o(" (ALBERT model)"),Rbo=l(),r1=a("li"),Tee=a("strong"),Sbo=o("bart"),Pbo=o(" \u2014 "),rP=a("a"),$bo=o("BartForSequenceClassification"),Ibo=o(" (BART model)"),jbo=l(),t1=a("li"),Fee=a("strong"),Nbo=o("bert"),Dbo=o(" \u2014 "),tP=a("a"),qbo=o("BertForSequenceClassification"),Obo=o(" (BERT model)"),Gbo=l(),a1=a("li"),Cee=a("strong"),Xbo=o("big_bird"),zbo=o(" \u2014 "),aP=a("a"),Vbo=o("BigBirdForSequenceClassification"),Wbo=o(" (BigBird model)"),Qbo=l(),n1=a("li"),Mee=a("strong"),Hbo=o("bigbird_pegasus"),Ubo=o(" \u2014 "),nP=a("a"),Jbo=o("BigBirdPegasusForSequenceClassification"),Ybo=o(" (BigBirdPegasus model)"),Kbo=l(),s1=a("li"),Eee=a("strong"),Zbo=o("camembert"),e5o=o(" \u2014 "),sP=a("a"),o5o=o("CamembertForSequenceClassification"),r5o=o(" (CamemBERT model)"),t5o=l(),l1=a("li"),yee=a("strong"),a5o=o("canine"),n5o=o(" \u2014 "),lP=a("a"),s5o=o("CanineForSequenceClassification"),l5o=o(" (Canine model)"),i5o=l(),i1=a("li"),wee=a("strong"),d5o=o("convbert"),c5o=o(" \u2014 "),iP=a("a"),f5o=o("ConvBertForSequenceClassification"),m5o=o(" (ConvBERT model)"),g5o=l(),d1=a("li"),Aee=a("strong"),h5o=o("ctrl"),p5o=o(" \u2014 "),dP=a("a"),_5o=o("CTRLForSequenceClassification"),u5o=o(" (CTRL model)"),b5o=l(),c1=a("li"),Lee=a("strong"),v5o=o("deberta"),T5o=o(" \u2014 "),cP=a("a"),F5o=o("DebertaForSequenceClassification"),C5o=o(" (DeBERTa model)"),M5o=l(),f1=a("li"),Bee=a("strong"),E5o=o("deberta-v2"),y5o=o(" \u2014 "),fP=a("a"),w5o=o("DebertaV2ForSequenceClassification"),A5o=o(" (DeBERTa-v2 model)"),L5o=l(),m1=a("li"),kee=a("strong"),B5o=o("distilbert"),k5o=o(" \u2014 "),mP=a("a"),x5o=o("DistilBertForSequenceClassification"),R5o=o(" (DistilBERT model)"),S5o=l(),g1=a("li"),xee=a("strong"),P5o=o("electra"),$5o=o(" \u2014 "),gP=a("a"),I5o=o("ElectraForSequenceClassification"),j5o=o(" (ELECTRA model)"),N5o=l(),h1=a("li"),Ree=a("strong"),D5o=o("flaubert"),q5o=o(" \u2014 "),hP=a("a"),O5o=o("FlaubertForSequenceClassification"),G5o=o(" (FlauBERT model)"),X5o=l(),p1=a("li"),See=a("strong"),z5o=o("fnet"),V5o=o(" \u2014 "),pP=a("a"),W5o=o("FNetForSequenceClassification"),Q5o=o(" (FNet model)"),H5o=l(),_1=a("li"),Pee=a("strong"),U5o=o("funnel"),J5o=o(" \u2014 "),_P=a("a"),Y5o=o("FunnelForSequenceClassification"),K5o=o(" (Funnel Transformer model)"),Z5o=l(),u1=a("li"),$ee=a("strong"),e2o=o("gpt2"),o2o=o(" \u2014 "),uP=a("a"),r2o=o("GPT2ForSequenceClassification"),t2o=o(" (OpenAI GPT-2 model)"),a2o=l(),b1=a("li"),Iee=a("strong"),n2o=o("gpt_neo"),s2o=o(" \u2014 "),bP=a("a"),l2o=o("GPTNeoForSequenceClassification"),i2o=o(" (GPT Neo model)"),d2o=l(),v1=a("li"),jee=a("strong"),c2o=o("gptj"),f2o=o(" \u2014 "),vP=a("a"),m2o=o("GPTJForSequenceClassification"),g2o=o(" (GPT-J model)"),h2o=l(),T1=a("li"),Nee=a("strong"),p2o=o("ibert"),_2o=o(" \u2014 "),TP=a("a"),u2o=o("IBertForSequenceClassification"),b2o=o(" (I-BERT model)"),v2o=l(),F1=a("li"),Dee=a("strong"),T2o=o("layoutlm"),F2o=o(" \u2014 "),FP=a("a"),C2o=o("LayoutLMForSequenceClassification"),M2o=o(" (LayoutLM model)"),E2o=l(),C1=a("li"),qee=a("strong"),y2o=o("layoutlmv2"),w2o=o(" \u2014 "),CP=a("a"),A2o=o("LayoutLMv2ForSequenceClassification"),L2o=o(" (LayoutLMv2 model)"),B2o=l(),M1=a("li"),Oee=a("strong"),k2o=o("led"),x2o=o(" \u2014 "),MP=a("a"),R2o=o("LEDForSequenceClassification"),S2o=o(" (LED model)"),P2o=l(),E1=a("li"),Gee=a("strong"),$2o=o("longformer"),I2o=o(" \u2014 "),EP=a("a"),j2o=o("LongformerForSequenceClassification"),N2o=o(" (Longformer model)"),D2o=l(),y1=a("li"),Xee=a("strong"),q2o=o("mbart"),O2o=o(" \u2014 "),yP=a("a"),G2o=o("MBartForSequenceClassification"),X2o=o(" (mBART model)"),z2o=l(),w1=a("li"),zee=a("strong"),V2o=o("megatron-bert"),W2o=o(" \u2014 "),wP=a("a"),Q2o=o("MegatronBertForSequenceClassification"),H2o=o(" (MegatronBert model)"),U2o=l(),A1=a("li"),Vee=a("strong"),J2o=o("mobilebert"),Y2o=o(" \u2014 "),AP=a("a"),K2o=o("MobileBertForSequenceClassification"),Z2o=o(" (MobileBERT model)"),evo=l(),L1=a("li"),Wee=a("strong"),ovo=o("mpnet"),rvo=o(" \u2014 "),LP=a("a"),tvo=o("MPNetForSequenceClassification"),avo=o(" (MPNet model)"),nvo=l(),B1=a("li"),Qee=a("strong"),svo=o("nystromformer"),lvo=o(" \u2014 "),BP=a("a"),ivo=o("NystromformerForSequenceClassification"),dvo=o(" (Nystromformer model)"),cvo=l(),k1=a("li"),Hee=a("strong"),fvo=o("openai-gpt"),mvo=o(" \u2014 "),kP=a("a"),gvo=o("OpenAIGPTForSequenceClassification"),hvo=o(" (OpenAI GPT model)"),pvo=l(),x1=a("li"),Uee=a("strong"),_vo=o("perceiver"),uvo=o(" \u2014 "),xP=a("a"),bvo=o("PerceiverForSequenceClassification"),vvo=o(" (Perceiver model)"),Tvo=l(),R1=a("li"),Jee=a("strong"),Fvo=o("plbart"),Cvo=o(" \u2014 "),RP=a("a"),Mvo=o("PLBartForSequenceClassification"),Evo=o(" (PLBart model)"),yvo=l(),S1=a("li"),Yee=a("strong"),wvo=o("qdqbert"),Avo=o(" \u2014 "),SP=a("a"),Lvo=o("QDQBertForSequenceClassification"),Bvo=o(" (QDQBert model)"),kvo=l(),P1=a("li"),Kee=a("strong"),xvo=o("reformer"),Rvo=o(" \u2014 "),PP=a("a"),Svo=o("ReformerForSequenceClassification"),Pvo=o(" (Reformer model)"),$vo=l(),$1=a("li"),Zee=a("strong"),Ivo=o("rembert"),jvo=o(" \u2014 "),$P=a("a"),Nvo=o("RemBertForSequenceClassification"),Dvo=o(" (RemBERT model)"),qvo=l(),I1=a("li"),eoe=a("strong"),Ovo=o("roberta"),Gvo=o(" \u2014 "),IP=a("a"),Xvo=o("RobertaForSequenceClassification"),zvo=o(" (RoBERTa model)"),Vvo=l(),j1=a("li"),ooe=a("strong"),Wvo=o("roformer"),Qvo=o(" \u2014 "),jP=a("a"),Hvo=o("RoFormerForSequenceClassification"),Uvo=o(" (RoFormer model)"),Jvo=l(),N1=a("li"),roe=a("strong"),Yvo=o("squeezebert"),Kvo=o(" \u2014 "),NP=a("a"),Zvo=o("SqueezeBertForSequenceClassification"),eTo=o(" (SqueezeBERT model)"),oTo=l(),D1=a("li"),toe=a("strong"),rTo=o("tapas"),tTo=o(" \u2014 "),DP=a("a"),aTo=o("TapasForSequenceClassification"),nTo=o(" (TAPAS model)"),sTo=l(),q1=a("li"),aoe=a("strong"),lTo=o("transfo-xl"),iTo=o(" \u2014 "),qP=a("a"),dTo=o("TransfoXLForSequenceClassification"),cTo=o(" (Transformer-XL model)"),fTo=l(),O1=a("li"),noe=a("strong"),mTo=o("xlm"),gTo=o(" \u2014 "),OP=a("a"),hTo=o("XLMForSequenceClassification"),pTo=o(" (XLM model)"),_To=l(),G1=a("li"),soe=a("strong"),uTo=o("xlm-roberta"),bTo=o(" \u2014 "),GP=a("a"),vTo=o("XLMRobertaForSequenceClassification"),TTo=o(" (XLM-RoBERTa model)"),FTo=l(),X1=a("li"),loe=a("strong"),CTo=o("xlm-roberta-xl"),MTo=o(" \u2014 "),ioe=a("code"),ETo=o("XLMRobertaXLForSequenceClassification"),yTo=o("(XLM-RoBERTa-XL model)"),wTo=l(),z1=a("li"),doe=a("strong"),ATo=o("xlnet"),LTo=o(" \u2014 "),XP=a("a"),BTo=o("XLNetForSequenceClassification"),kTo=o(" (XLNet model)"),xTo=l(),V1=a("li"),coe=a("strong"),RTo=o("yoso"),STo=o(" \u2014 "),zP=a("a"),PTo=o("YosoForSequenceClassification"),$To=o(" (YOSO model)"),ITo=l(),W1=a("p"),jTo=o("The model is set in evaluation mode by default using "),foe=a("code"),NTo=o("model.eval()"),DTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),moe=a("code"),qTo=o("model.train()"),OTo=l(),goe=a("p"),GTo=o("Examples:"),XTo=l(),f(HM.$$.fragment),H0e=l(),zi=a("h2"),Q1=a("a"),hoe=a("span"),f(UM.$$.fragment),zTo=l(),poe=a("span"),VTo=o("AutoModelForMultipleChoice"),U0e=l(),Uo=a("div"),f(JM.$$.fragment),WTo=l(),Vi=a("p"),QTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_oe=a("code"),HTo=o("from_pretrained()"),UTo=o("class method or the "),uoe=a("code"),JTo=o("from_config()"),YTo=o(`class
method.`),KTo=l(),YM=a("p"),ZTo=o("This class cannot be instantiated directly using "),boe=a("code"),e7o=o("__init__()"),o7o=o(" (throws an error)."),r7o=l(),qr=a("div"),f(KM.$$.fragment),t7o=l(),voe=a("p"),a7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),n7o=l(),Wi=a("p"),s7o=o(`Note:
Loading a model from its configuration file does `),Toe=a("strong"),l7o=o("not"),i7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=a("code"),d7o=o("from_pretrained()"),c7o=o("to load the model weights."),f7o=l(),Coe=a("p"),m7o=o("Examples:"),g7o=l(),f(ZM.$$.fragment),h7o=l(),Ie=a("div"),f(eE.$$.fragment),p7o=l(),Moe=a("p"),_7o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),u7o=l(),ja=a("p"),b7o=o("The model class to instantiate is selected based on the "),Eoe=a("code"),v7o=o("model_type"),T7o=o(` property of the config object (either
passed as an argument or loaded from `),yoe=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=a("code"),M7o=o("pretrained_model_name_or_path"),E7o=o(":"),y7o=l(),O=a("ul"),H1=a("li"),Aoe=a("strong"),w7o=o("albert"),A7o=o(" \u2014 "),VP=a("a"),L7o=o("AlbertForMultipleChoice"),B7o=o(" (ALBERT model)"),k7o=l(),U1=a("li"),Loe=a("strong"),x7o=o("bert"),R7o=o(" \u2014 "),WP=a("a"),S7o=o("BertForMultipleChoice"),P7o=o(" (BERT model)"),$7o=l(),J1=a("li"),Boe=a("strong"),I7o=o("big_bird"),j7o=o(" \u2014 "),QP=a("a"),N7o=o("BigBirdForMultipleChoice"),D7o=o(" (BigBird model)"),q7o=l(),Y1=a("li"),koe=a("strong"),O7o=o("camembert"),G7o=o(" \u2014 "),HP=a("a"),X7o=o("CamembertForMultipleChoice"),z7o=o(" (CamemBERT model)"),V7o=l(),K1=a("li"),xoe=a("strong"),W7o=o("canine"),Q7o=o(" \u2014 "),UP=a("a"),H7o=o("CanineForMultipleChoice"),U7o=o(" (Canine model)"),J7o=l(),Z1=a("li"),Roe=a("strong"),Y7o=o("convbert"),K7o=o(" \u2014 "),JP=a("a"),Z7o=o("ConvBertForMultipleChoice"),eFo=o(" (ConvBERT model)"),oFo=l(),e4=a("li"),Soe=a("strong"),rFo=o("distilbert"),tFo=o(" \u2014 "),YP=a("a"),aFo=o("DistilBertForMultipleChoice"),nFo=o(" (DistilBERT model)"),sFo=l(),o4=a("li"),Poe=a("strong"),lFo=o("electra"),iFo=o(" \u2014 "),KP=a("a"),dFo=o("ElectraForMultipleChoice"),cFo=o(" (ELECTRA model)"),fFo=l(),r4=a("li"),$oe=a("strong"),mFo=o("flaubert"),gFo=o(" \u2014 "),ZP=a("a"),hFo=o("FlaubertForMultipleChoice"),pFo=o(" (FlauBERT model)"),_Fo=l(),t4=a("li"),Ioe=a("strong"),uFo=o("fnet"),bFo=o(" \u2014 "),e$=a("a"),vFo=o("FNetForMultipleChoice"),TFo=o(" (FNet model)"),FFo=l(),a4=a("li"),joe=a("strong"),CFo=o("funnel"),MFo=o(" \u2014 "),o$=a("a"),EFo=o("FunnelForMultipleChoice"),yFo=o(" (Funnel Transformer model)"),wFo=l(),n4=a("li"),Noe=a("strong"),AFo=o("ibert"),LFo=o(" \u2014 "),r$=a("a"),BFo=o("IBertForMultipleChoice"),kFo=o(" (I-BERT model)"),xFo=l(),s4=a("li"),Doe=a("strong"),RFo=o("longformer"),SFo=o(" \u2014 "),t$=a("a"),PFo=o("LongformerForMultipleChoice"),$Fo=o(" (Longformer model)"),IFo=l(),l4=a("li"),qoe=a("strong"),jFo=o("megatron-bert"),NFo=o(" \u2014 "),a$=a("a"),DFo=o("MegatronBertForMultipleChoice"),qFo=o(" (MegatronBert model)"),OFo=l(),i4=a("li"),Ooe=a("strong"),GFo=o("mobilebert"),XFo=o(" \u2014 "),n$=a("a"),zFo=o("MobileBertForMultipleChoice"),VFo=o(" (MobileBERT model)"),WFo=l(),d4=a("li"),Goe=a("strong"),QFo=o("mpnet"),HFo=o(" \u2014 "),s$=a("a"),UFo=o("MPNetForMultipleChoice"),JFo=o(" (MPNet model)"),YFo=l(),c4=a("li"),Xoe=a("strong"),KFo=o("nystromformer"),ZFo=o(" \u2014 "),l$=a("a"),e9o=o("NystromformerForMultipleChoice"),o9o=o(" (Nystromformer model)"),r9o=l(),f4=a("li"),zoe=a("strong"),t9o=o("qdqbert"),a9o=o(" \u2014 "),i$=a("a"),n9o=o("QDQBertForMultipleChoice"),s9o=o(" (QDQBert model)"),l9o=l(),m4=a("li"),Voe=a("strong"),i9o=o("rembert"),d9o=o(" \u2014 "),d$=a("a"),c9o=o("RemBertForMultipleChoice"),f9o=o(" (RemBERT model)"),m9o=l(),g4=a("li"),Woe=a("strong"),g9o=o("roberta"),h9o=o(" \u2014 "),c$=a("a"),p9o=o("RobertaForMultipleChoice"),_9o=o(" (RoBERTa model)"),u9o=l(),h4=a("li"),Qoe=a("strong"),b9o=o("roformer"),v9o=o(" \u2014 "),f$=a("a"),T9o=o("RoFormerForMultipleChoice"),F9o=o(" (RoFormer model)"),C9o=l(),p4=a("li"),Hoe=a("strong"),M9o=o("squeezebert"),E9o=o(" \u2014 "),m$=a("a"),y9o=o("SqueezeBertForMultipleChoice"),w9o=o(" (SqueezeBERT model)"),A9o=l(),_4=a("li"),Uoe=a("strong"),L9o=o("xlm"),B9o=o(" \u2014 "),g$=a("a"),k9o=o("XLMForMultipleChoice"),x9o=o(" (XLM model)"),R9o=l(),u4=a("li"),Joe=a("strong"),S9o=o("xlm-roberta"),P9o=o(" \u2014 "),h$=a("a"),$9o=o("XLMRobertaForMultipleChoice"),I9o=o(" (XLM-RoBERTa model)"),j9o=l(),b4=a("li"),Yoe=a("strong"),N9o=o("xlm-roberta-xl"),D9o=o(" \u2014 "),Koe=a("code"),q9o=o("XLMRobertaXLForMultipleChoice"),O9o=o("(XLM-RoBERTa-XL model)"),G9o=l(),v4=a("li"),Zoe=a("strong"),X9o=o("xlnet"),z9o=o(" \u2014 "),p$=a("a"),V9o=o("XLNetForMultipleChoice"),W9o=o(" (XLNet model)"),Q9o=l(),T4=a("li"),ere=a("strong"),H9o=o("yoso"),U9o=o(" \u2014 "),_$=a("a"),J9o=o("YosoForMultipleChoice"),Y9o=o(" (YOSO model)"),K9o=l(),F4=a("p"),Z9o=o("The model is set in evaluation mode by default using "),ore=a("code"),eCo=o("model.eval()"),oCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=a("code"),rCo=o("model.train()"),tCo=l(),tre=a("p"),aCo=o("Examples:"),nCo=l(),f(oE.$$.fragment),J0e=l(),Qi=a("h2"),C4=a("a"),are=a("span"),f(rE.$$.fragment),sCo=l(),nre=a("span"),lCo=o("AutoModelForNextSentencePrediction"),Y0e=l(),Jo=a("div"),f(tE.$$.fragment),iCo=l(),Hi=a("p"),dCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sre=a("code"),cCo=o("from_pretrained()"),fCo=o("class method or the "),lre=a("code"),mCo=o("from_config()"),gCo=o(`class
method.`),hCo=l(),aE=a("p"),pCo=o("This class cannot be instantiated directly using "),ire=a("code"),_Co=o("__init__()"),uCo=o(" (throws an error)."),bCo=l(),Or=a("div"),f(nE.$$.fragment),vCo=l(),dre=a("p"),TCo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FCo=l(),Ui=a("p"),CCo=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),MCo=o("not"),ECo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=a("code"),yCo=o("from_pretrained()"),wCo=o("to load the model weights."),ACo=l(),mre=a("p"),LCo=o("Examples:"),BCo=l(),f(sE.$$.fragment),kCo=l(),je=a("div"),f(lE.$$.fragment),xCo=l(),gre=a("p"),RCo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SCo=l(),Na=a("p"),PCo=o("The model class to instantiate is selected based on the "),hre=a("code"),$Co=o("model_type"),ICo=o(` property of the config object (either
passed as an argument or loaded from `),pre=a("code"),jCo=o("pretrained_model_name_or_path"),NCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=a("code"),DCo=o("pretrained_model_name_or_path"),qCo=o(":"),OCo=l(),Kt=a("ul"),M4=a("li"),ure=a("strong"),GCo=o("bert"),XCo=o(" \u2014 "),u$=a("a"),zCo=o("BertForNextSentencePrediction"),VCo=o(" (BERT model)"),WCo=l(),E4=a("li"),bre=a("strong"),QCo=o("fnet"),HCo=o(" \u2014 "),b$=a("a"),UCo=o("FNetForNextSentencePrediction"),JCo=o(" (FNet model)"),YCo=l(),y4=a("li"),vre=a("strong"),KCo=o("megatron-bert"),ZCo=o(" \u2014 "),v$=a("a"),eMo=o("MegatronBertForNextSentencePrediction"),oMo=o(" (MegatronBert model)"),rMo=l(),w4=a("li"),Tre=a("strong"),tMo=o("mobilebert"),aMo=o(" \u2014 "),T$=a("a"),nMo=o("MobileBertForNextSentencePrediction"),sMo=o(" (MobileBERT model)"),lMo=l(),A4=a("li"),Fre=a("strong"),iMo=o("qdqbert"),dMo=o(" \u2014 "),F$=a("a"),cMo=o("QDQBertForNextSentencePrediction"),fMo=o(" (QDQBert model)"),mMo=l(),L4=a("p"),gMo=o("The model is set in evaluation mode by default using "),Cre=a("code"),hMo=o("model.eval()"),pMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mre=a("code"),_Mo=o("model.train()"),uMo=l(),Ere=a("p"),bMo=o("Examples:"),vMo=l(),f(iE.$$.fragment),K0e=l(),Ji=a("h2"),B4=a("a"),yre=a("span"),f(dE.$$.fragment),TMo=l(),wre=a("span"),FMo=o("AutoModelForTokenClassification"),Z0e=l(),Yo=a("div"),f(cE.$$.fragment),CMo=l(),Yi=a("p"),MMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=a("code"),EMo=o("from_pretrained()"),yMo=o("class method or the "),Lre=a("code"),wMo=o("from_config()"),AMo=o(`class
method.`),LMo=l(),fE=a("p"),BMo=o("This class cannot be instantiated directly using "),Bre=a("code"),kMo=o("__init__()"),xMo=o(" (throws an error)."),RMo=l(),Gr=a("div"),f(mE.$$.fragment),SMo=l(),kre=a("p"),PMo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$Mo=l(),Ki=a("p"),IMo=o(`Note:
Loading a model from its configuration file does `),xre=a("strong"),jMo=o("not"),NMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=a("code"),DMo=o("from_pretrained()"),qMo=o("to load the model weights."),OMo=l(),Sre=a("p"),GMo=o("Examples:"),XMo=l(),f(gE.$$.fragment),zMo=l(),Ne=a("div"),f(hE.$$.fragment),VMo=l(),Pre=a("p"),WMo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QMo=l(),Da=a("p"),HMo=o("The model class to instantiate is selected based on the "),$re=a("code"),UMo=o("model_type"),JMo=o(` property of the config object (either
passed as an argument or loaded from `),Ire=a("code"),YMo=o("pretrained_model_name_or_path"),KMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=a("code"),ZMo=o("pretrained_model_name_or_path"),eEo=o(":"),oEo=l(),D=a("ul"),k4=a("li"),Nre=a("strong"),rEo=o("albert"),tEo=o(" \u2014 "),C$=a("a"),aEo=o("AlbertForTokenClassification"),nEo=o(" (ALBERT model)"),sEo=l(),x4=a("li"),Dre=a("strong"),lEo=o("bert"),iEo=o(" \u2014 "),M$=a("a"),dEo=o("BertForTokenClassification"),cEo=o(" (BERT model)"),fEo=l(),R4=a("li"),qre=a("strong"),mEo=o("big_bird"),gEo=o(" \u2014 "),E$=a("a"),hEo=o("BigBirdForTokenClassification"),pEo=o(" (BigBird model)"),_Eo=l(),S4=a("li"),Ore=a("strong"),uEo=o("camembert"),bEo=o(" \u2014 "),y$=a("a"),vEo=o("CamembertForTokenClassification"),TEo=o(" (CamemBERT model)"),FEo=l(),P4=a("li"),Gre=a("strong"),CEo=o("canine"),MEo=o(" \u2014 "),w$=a("a"),EEo=o("CanineForTokenClassification"),yEo=o(" (Canine model)"),wEo=l(),$4=a("li"),Xre=a("strong"),AEo=o("convbert"),LEo=o(" \u2014 "),A$=a("a"),BEo=o("ConvBertForTokenClassification"),kEo=o(" (ConvBERT model)"),xEo=l(),I4=a("li"),zre=a("strong"),REo=o("deberta"),SEo=o(" \u2014 "),L$=a("a"),PEo=o("DebertaForTokenClassification"),$Eo=o(" (DeBERTa model)"),IEo=l(),j4=a("li"),Vre=a("strong"),jEo=o("deberta-v2"),NEo=o(" \u2014 "),B$=a("a"),DEo=o("DebertaV2ForTokenClassification"),qEo=o(" (DeBERTa-v2 model)"),OEo=l(),N4=a("li"),Wre=a("strong"),GEo=o("distilbert"),XEo=o(" \u2014 "),k$=a("a"),zEo=o("DistilBertForTokenClassification"),VEo=o(" (DistilBERT model)"),WEo=l(),D4=a("li"),Qre=a("strong"),QEo=o("electra"),HEo=o(" \u2014 "),x$=a("a"),UEo=o("ElectraForTokenClassification"),JEo=o(" (ELECTRA model)"),YEo=l(),q4=a("li"),Hre=a("strong"),KEo=o("flaubert"),ZEo=o(" \u2014 "),R$=a("a"),e3o=o("FlaubertForTokenClassification"),o3o=o(" (FlauBERT model)"),r3o=l(),O4=a("li"),Ure=a("strong"),t3o=o("fnet"),a3o=o(" \u2014 "),S$=a("a"),n3o=o("FNetForTokenClassification"),s3o=o(" (FNet model)"),l3o=l(),G4=a("li"),Jre=a("strong"),i3o=o("funnel"),d3o=o(" \u2014 "),P$=a("a"),c3o=o("FunnelForTokenClassification"),f3o=o(" (Funnel Transformer model)"),m3o=l(),X4=a("li"),Yre=a("strong"),g3o=o("gpt2"),h3o=o(" \u2014 "),$$=a("a"),p3o=o("GPT2ForTokenClassification"),_3o=o(" (OpenAI GPT-2 model)"),u3o=l(),z4=a("li"),Kre=a("strong"),b3o=o("ibert"),v3o=o(" \u2014 "),I$=a("a"),T3o=o("IBertForTokenClassification"),F3o=o(" (I-BERT model)"),C3o=l(),V4=a("li"),Zre=a("strong"),M3o=o("layoutlm"),E3o=o(" \u2014 "),j$=a("a"),y3o=o("LayoutLMForTokenClassification"),w3o=o(" (LayoutLM model)"),A3o=l(),W4=a("li"),ete=a("strong"),L3o=o("layoutlmv2"),B3o=o(" \u2014 "),N$=a("a"),k3o=o("LayoutLMv2ForTokenClassification"),x3o=o(" (LayoutLMv2 model)"),R3o=l(),Q4=a("li"),ote=a("strong"),S3o=o("longformer"),P3o=o(" \u2014 "),D$=a("a"),$3o=o("LongformerForTokenClassification"),I3o=o(" (Longformer model)"),j3o=l(),H4=a("li"),rte=a("strong"),N3o=o("megatron-bert"),D3o=o(" \u2014 "),q$=a("a"),q3o=o("MegatronBertForTokenClassification"),O3o=o(" (MegatronBert model)"),G3o=l(),U4=a("li"),tte=a("strong"),X3o=o("mobilebert"),z3o=o(" \u2014 "),O$=a("a"),V3o=o("MobileBertForTokenClassification"),W3o=o(" (MobileBERT model)"),Q3o=l(),J4=a("li"),ate=a("strong"),H3o=o("mpnet"),U3o=o(" \u2014 "),G$=a("a"),J3o=o("MPNetForTokenClassification"),Y3o=o(" (MPNet model)"),K3o=l(),Y4=a("li"),nte=a("strong"),Z3o=o("nystromformer"),eyo=o(" \u2014 "),X$=a("a"),oyo=o("NystromformerForTokenClassification"),ryo=o(" (Nystromformer model)"),tyo=l(),K4=a("li"),ste=a("strong"),ayo=o("qdqbert"),nyo=o(" \u2014 "),z$=a("a"),syo=o("QDQBertForTokenClassification"),lyo=o(" (QDQBert model)"),iyo=l(),Z4=a("li"),lte=a("strong"),dyo=o("rembert"),cyo=o(" \u2014 "),V$=a("a"),fyo=o("RemBertForTokenClassification"),myo=o(" (RemBERT model)"),gyo=l(),eb=a("li"),ite=a("strong"),hyo=o("roberta"),pyo=o(" \u2014 "),W$=a("a"),_yo=o("RobertaForTokenClassification"),uyo=o(" (RoBERTa model)"),byo=l(),ob=a("li"),dte=a("strong"),vyo=o("roformer"),Tyo=o(" \u2014 "),Q$=a("a"),Fyo=o("RoFormerForTokenClassification"),Cyo=o(" (RoFormer model)"),Myo=l(),rb=a("li"),cte=a("strong"),Eyo=o("squeezebert"),yyo=o(" \u2014 "),H$=a("a"),wyo=o("SqueezeBertForTokenClassification"),Ayo=o(" (SqueezeBERT model)"),Lyo=l(),tb=a("li"),fte=a("strong"),Byo=o("xlm"),kyo=o(" \u2014 "),U$=a("a"),xyo=o("XLMForTokenClassification"),Ryo=o(" (XLM model)"),Syo=l(),ab=a("li"),mte=a("strong"),Pyo=o("xlm-roberta"),$yo=o(" \u2014 "),J$=a("a"),Iyo=o("XLMRobertaForTokenClassification"),jyo=o(" (XLM-RoBERTa model)"),Nyo=l(),nb=a("li"),gte=a("strong"),Dyo=o("xlm-roberta-xl"),qyo=o(" \u2014 "),hte=a("code"),Oyo=o("XLMRobertaXLForTokenClassification"),Gyo=o("(XLM-RoBERTa-XL model)"),Xyo=l(),sb=a("li"),pte=a("strong"),zyo=o("xlnet"),Vyo=o(" \u2014 "),Y$=a("a"),Wyo=o("XLNetForTokenClassification"),Qyo=o(" (XLNet model)"),Hyo=l(),lb=a("li"),_te=a("strong"),Uyo=o("yoso"),Jyo=o(" \u2014 "),K$=a("a"),Yyo=o("YosoForTokenClassification"),Kyo=o(" (YOSO model)"),Zyo=l(),ib=a("p"),ewo=o("The model is set in evaluation mode by default using "),ute=a("code"),owo=o("model.eval()"),rwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bte=a("code"),two=o("model.train()"),awo=l(),vte=a("p"),nwo=o("Examples:"),swo=l(),f(pE.$$.fragment),e6e=l(),Zi=a("h2"),db=a("a"),Tte=a("span"),f(_E.$$.fragment),lwo=l(),Fte=a("span"),iwo=o("AutoModelForQuestionAnswering"),o6e=l(),Ko=a("div"),f(uE.$$.fragment),dwo=l(),ed=a("p"),cwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cte=a("code"),fwo=o("from_pretrained()"),mwo=o("class method or the "),Mte=a("code"),gwo=o("from_config()"),hwo=o(`class
method.`),pwo=l(),bE=a("p"),_wo=o("This class cannot be instantiated directly using "),Ete=a("code"),uwo=o("__init__()"),bwo=o(" (throws an error)."),vwo=l(),Xr=a("div"),f(vE.$$.fragment),Two=l(),yte=a("p"),Fwo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cwo=l(),od=a("p"),Mwo=o(`Note:
Loading a model from its configuration file does `),wte=a("strong"),Ewo=o("not"),ywo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=a("code"),wwo=o("from_pretrained()"),Awo=o("to load the model weights."),Lwo=l(),Lte=a("p"),Bwo=o("Examples:"),kwo=l(),f(TE.$$.fragment),xwo=l(),De=a("div"),f(FE.$$.fragment),Rwo=l(),Bte=a("p"),Swo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Pwo=l(),qa=a("p"),$wo=o("The model class to instantiate is selected based on the "),kte=a("code"),Iwo=o("model_type"),jwo=o(` property of the config object (either
passed as an argument or loaded from `),xte=a("code"),Nwo=o("pretrained_model_name_or_path"),Dwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=a("code"),qwo=o("pretrained_model_name_or_path"),Owo=o(":"),Gwo=l(),R=a("ul"),cb=a("li"),Ste=a("strong"),Xwo=o("albert"),zwo=o(" \u2014 "),Z$=a("a"),Vwo=o("AlbertForQuestionAnswering"),Wwo=o(" (ALBERT model)"),Qwo=l(),fb=a("li"),Pte=a("strong"),Hwo=o("bart"),Uwo=o(" \u2014 "),eI=a("a"),Jwo=o("BartForQuestionAnswering"),Ywo=o(" (BART model)"),Kwo=l(),mb=a("li"),$te=a("strong"),Zwo=o("bert"),eAo=o(" \u2014 "),oI=a("a"),oAo=o("BertForQuestionAnswering"),rAo=o(" (BERT model)"),tAo=l(),gb=a("li"),Ite=a("strong"),aAo=o("big_bird"),nAo=o(" \u2014 "),rI=a("a"),sAo=o("BigBirdForQuestionAnswering"),lAo=o(" (BigBird model)"),iAo=l(),hb=a("li"),jte=a("strong"),dAo=o("bigbird_pegasus"),cAo=o(" \u2014 "),tI=a("a"),fAo=o("BigBirdPegasusForQuestionAnswering"),mAo=o(" (BigBirdPegasus model)"),gAo=l(),pb=a("li"),Nte=a("strong"),hAo=o("camembert"),pAo=o(" \u2014 "),aI=a("a"),_Ao=o("CamembertForQuestionAnswering"),uAo=o(" (CamemBERT model)"),bAo=l(),_b=a("li"),Dte=a("strong"),vAo=o("canine"),TAo=o(" \u2014 "),nI=a("a"),FAo=o("CanineForQuestionAnswering"),CAo=o(" (Canine model)"),MAo=l(),ub=a("li"),qte=a("strong"),EAo=o("convbert"),yAo=o(" \u2014 "),sI=a("a"),wAo=o("ConvBertForQuestionAnswering"),AAo=o(" (ConvBERT model)"),LAo=l(),bb=a("li"),Ote=a("strong"),BAo=o("deberta"),kAo=o(" \u2014 "),lI=a("a"),xAo=o("DebertaForQuestionAnswering"),RAo=o(" (DeBERTa model)"),SAo=l(),vb=a("li"),Gte=a("strong"),PAo=o("deberta-v2"),$Ao=o(" \u2014 "),iI=a("a"),IAo=o("DebertaV2ForQuestionAnswering"),jAo=o(" (DeBERTa-v2 model)"),NAo=l(),Tb=a("li"),Xte=a("strong"),DAo=o("distilbert"),qAo=o(" \u2014 "),dI=a("a"),OAo=o("DistilBertForQuestionAnswering"),GAo=o(" (DistilBERT model)"),XAo=l(),Fb=a("li"),zte=a("strong"),zAo=o("electra"),VAo=o(" \u2014 "),cI=a("a"),WAo=o("ElectraForQuestionAnswering"),QAo=o(" (ELECTRA model)"),HAo=l(),Cb=a("li"),Vte=a("strong"),UAo=o("flaubert"),JAo=o(" \u2014 "),fI=a("a"),YAo=o("FlaubertForQuestionAnsweringSimple"),KAo=o(" (FlauBERT model)"),ZAo=l(),Mb=a("li"),Wte=a("strong"),e0o=o("fnet"),o0o=o(" \u2014 "),mI=a("a"),r0o=o("FNetForQuestionAnswering"),t0o=o(" (FNet model)"),a0o=l(),Eb=a("li"),Qte=a("strong"),n0o=o("funnel"),s0o=o(" \u2014 "),gI=a("a"),l0o=o("FunnelForQuestionAnswering"),i0o=o(" (Funnel Transformer model)"),d0o=l(),yb=a("li"),Hte=a("strong"),c0o=o("gptj"),f0o=o(" \u2014 "),hI=a("a"),m0o=o("GPTJForQuestionAnswering"),g0o=o(" (GPT-J model)"),h0o=l(),wb=a("li"),Ute=a("strong"),p0o=o("ibert"),_0o=o(" \u2014 "),pI=a("a"),u0o=o("IBertForQuestionAnswering"),b0o=o(" (I-BERT model)"),v0o=l(),Ab=a("li"),Jte=a("strong"),T0o=o("layoutlmv2"),F0o=o(" \u2014 "),_I=a("a"),C0o=o("LayoutLMv2ForQuestionAnswering"),M0o=o(" (LayoutLMv2 model)"),E0o=l(),Lb=a("li"),Yte=a("strong"),y0o=o("led"),w0o=o(" \u2014 "),uI=a("a"),A0o=o("LEDForQuestionAnswering"),L0o=o(" (LED model)"),B0o=l(),Bb=a("li"),Kte=a("strong"),k0o=o("longformer"),x0o=o(" \u2014 "),bI=a("a"),R0o=o("LongformerForQuestionAnswering"),S0o=o(" (Longformer model)"),P0o=l(),kb=a("li"),Zte=a("strong"),$0o=o("lxmert"),I0o=o(" \u2014 "),vI=a("a"),j0o=o("LxmertForQuestionAnswering"),N0o=o(" (LXMERT model)"),D0o=l(),xb=a("li"),eae=a("strong"),q0o=o("mbart"),O0o=o(" \u2014 "),TI=a("a"),G0o=o("MBartForQuestionAnswering"),X0o=o(" (mBART model)"),z0o=l(),Rb=a("li"),oae=a("strong"),V0o=o("megatron-bert"),W0o=o(" \u2014 "),FI=a("a"),Q0o=o("MegatronBertForQuestionAnswering"),H0o=o(" (MegatronBert model)"),U0o=l(),Sb=a("li"),rae=a("strong"),J0o=o("mobilebert"),Y0o=o(" \u2014 "),CI=a("a"),K0o=o("MobileBertForQuestionAnswering"),Z0o=o(" (MobileBERT model)"),e6o=l(),Pb=a("li"),tae=a("strong"),o6o=o("mpnet"),r6o=o(" \u2014 "),MI=a("a"),t6o=o("MPNetForQuestionAnswering"),a6o=o(" (MPNet model)"),n6o=l(),$b=a("li"),aae=a("strong"),s6o=o("nystromformer"),l6o=o(" \u2014 "),EI=a("a"),i6o=o("NystromformerForQuestionAnswering"),d6o=o(" (Nystromformer model)"),c6o=l(),Ib=a("li"),nae=a("strong"),f6o=o("qdqbert"),m6o=o(" \u2014 "),yI=a("a"),g6o=o("QDQBertForQuestionAnswering"),h6o=o(" (QDQBert model)"),p6o=l(),jb=a("li"),sae=a("strong"),_6o=o("reformer"),u6o=o(" \u2014 "),wI=a("a"),b6o=o("ReformerForQuestionAnswering"),v6o=o(" (Reformer model)"),T6o=l(),Nb=a("li"),lae=a("strong"),F6o=o("rembert"),C6o=o(" \u2014 "),AI=a("a"),M6o=o("RemBertForQuestionAnswering"),E6o=o(" (RemBERT model)"),y6o=l(),Db=a("li"),iae=a("strong"),w6o=o("roberta"),A6o=o(" \u2014 "),LI=a("a"),L6o=o("RobertaForQuestionAnswering"),B6o=o(" (RoBERTa model)"),k6o=l(),qb=a("li"),dae=a("strong"),x6o=o("roformer"),R6o=o(" \u2014 "),BI=a("a"),S6o=o("RoFormerForQuestionAnswering"),P6o=o(" (RoFormer model)"),$6o=l(),Ob=a("li"),cae=a("strong"),I6o=o("splinter"),j6o=o(" \u2014 "),kI=a("a"),N6o=o("SplinterForQuestionAnswering"),D6o=o(" (Splinter model)"),q6o=l(),Gb=a("li"),fae=a("strong"),O6o=o("squeezebert"),G6o=o(" \u2014 "),xI=a("a"),X6o=o("SqueezeBertForQuestionAnswering"),z6o=o(" (SqueezeBERT model)"),V6o=l(),Xb=a("li"),mae=a("strong"),W6o=o("xlm"),Q6o=o(" \u2014 "),RI=a("a"),H6o=o("XLMForQuestionAnsweringSimple"),U6o=o(" (XLM model)"),J6o=l(),zb=a("li"),gae=a("strong"),Y6o=o("xlm-roberta"),K6o=o(" \u2014 "),SI=a("a"),Z6o=o("XLMRobertaForQuestionAnswering"),eLo=o(" (XLM-RoBERTa model)"),oLo=l(),Vb=a("li"),hae=a("strong"),rLo=o("xlm-roberta-xl"),tLo=o(" \u2014 "),pae=a("code"),aLo=o("XLMRobertaXLForQuestionAnswering"),nLo=o("(XLM-RoBERTa-XL model)"),sLo=l(),Wb=a("li"),_ae=a("strong"),lLo=o("xlnet"),iLo=o(" \u2014 "),PI=a("a"),dLo=o("XLNetForQuestionAnsweringSimple"),cLo=o(" (XLNet model)"),fLo=l(),Qb=a("li"),uae=a("strong"),mLo=o("yoso"),gLo=o(" \u2014 "),$I=a("a"),hLo=o("YosoForQuestionAnswering"),pLo=o(" (YOSO model)"),_Lo=l(),Hb=a("p"),uLo=o("The model is set in evaluation mode by default using "),bae=a("code"),bLo=o("model.eval()"),vLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vae=a("code"),TLo=o("model.train()"),FLo=l(),Tae=a("p"),CLo=o("Examples:"),MLo=l(),f(CE.$$.fragment),r6e=l(),rd=a("h2"),Ub=a("a"),Fae=a("span"),f(ME.$$.fragment),ELo=l(),Cae=a("span"),yLo=o("AutoModelForTableQuestionAnswering"),t6e=l(),Zo=a("div"),f(EE.$$.fragment),wLo=l(),td=a("p"),ALo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mae=a("code"),LLo=o("from_pretrained()"),BLo=o("class method or the "),Eae=a("code"),kLo=o("from_config()"),xLo=o(`class
method.`),RLo=l(),yE=a("p"),SLo=o("This class cannot be instantiated directly using "),yae=a("code"),PLo=o("__init__()"),$Lo=o(" (throws an error)."),ILo=l(),zr=a("div"),f(wE.$$.fragment),jLo=l(),wae=a("p"),NLo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DLo=l(),ad=a("p"),qLo=o(`Note:
Loading a model from its configuration file does `),Aae=a("strong"),OLo=o("not"),GLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=a("code"),XLo=o("from_pretrained()"),zLo=o("to load the model weights."),VLo=l(),Bae=a("p"),WLo=o("Examples:"),QLo=l(),f(AE.$$.fragment),HLo=l(),qe=a("div"),f(LE.$$.fragment),ULo=l(),kae=a("p"),JLo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YLo=l(),Oa=a("p"),KLo=o("The model class to instantiate is selected based on the "),xae=a("code"),ZLo=o("model_type"),e8o=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),o8o=o("pretrained_model_name_or_path"),r8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=a("code"),t8o=o("pretrained_model_name_or_path"),a8o=o(":"),n8o=l(),Pae=a("ul"),Jb=a("li"),$ae=a("strong"),s8o=o("tapas"),l8o=o(" \u2014 "),II=a("a"),i8o=o("TapasForQuestionAnswering"),d8o=o(" (TAPAS model)"),c8o=l(),Yb=a("p"),f8o=o("The model is set in evaluation mode by default using "),Iae=a("code"),m8o=o("model.eval()"),g8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jae=a("code"),h8o=o("model.train()"),p8o=l(),Nae=a("p"),_8o=o("Examples:"),u8o=l(),f(BE.$$.fragment),a6e=l(),nd=a("h2"),Kb=a("a"),Dae=a("span"),f(kE.$$.fragment),b8o=l(),qae=a("span"),v8o=o("AutoModelForImageClassification"),n6e=l(),er=a("div"),f(xE.$$.fragment),T8o=l(),sd=a("p"),F8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oae=a("code"),C8o=o("from_pretrained()"),M8o=o("class method or the "),Gae=a("code"),E8o=o("from_config()"),y8o=o(`class
method.`),w8o=l(),RE=a("p"),A8o=o("This class cannot be instantiated directly using "),Xae=a("code"),L8o=o("__init__()"),B8o=o(" (throws an error)."),k8o=l(),Vr=a("div"),f(SE.$$.fragment),x8o=l(),zae=a("p"),R8o=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S8o=l(),ld=a("p"),P8o=o(`Note:
Loading a model from its configuration file does `),Vae=a("strong"),$8o=o("not"),I8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wae=a("code"),j8o=o("from_pretrained()"),N8o=o("to load the model weights."),D8o=l(),Qae=a("p"),q8o=o("Examples:"),O8o=l(),f(PE.$$.fragment),G8o=l(),Oe=a("div"),f($E.$$.fragment),X8o=l(),Hae=a("p"),z8o=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),V8o=l(),Ga=a("p"),W8o=o("The model class to instantiate is selected based on the "),Uae=a("code"),Q8o=o("model_type"),H8o=o(` property of the config object (either
passed as an argument or loaded from `),Jae=a("code"),U8o=o("pretrained_model_name_or_path"),J8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=a("code"),Y8o=o("pretrained_model_name_or_path"),K8o=o(":"),Z8o=l(),be=a("ul"),Zb=a("li"),Kae=a("strong"),eBo=o("beit"),oBo=o(" \u2014 "),jI=a("a"),rBo=o("BeitForImageClassification"),tBo=o(" (BEiT model)"),aBo=l(),e5=a("li"),Zae=a("strong"),nBo=o("convnext"),sBo=o(" \u2014 "),ene=a("code"),lBo=o("ConvNextForImageClassification"),iBo=o("(ConvNext model)"),dBo=l(),Cs=a("li"),one=a("strong"),cBo=o("deit"),fBo=o(" \u2014 "),NI=a("a"),mBo=o("DeiTForImageClassification"),gBo=o(" or "),DI=a("a"),hBo=o("DeiTForImageClassificationWithTeacher"),pBo=o(" (DeiT model)"),_Bo=l(),o5=a("li"),rne=a("strong"),uBo=o("imagegpt"),bBo=o(" \u2014 "),qI=a("a"),vBo=o("ImageGPTForImageClassification"),TBo=o(" (ImageGPT model)"),FBo=l(),ea=a("li"),tne=a("strong"),CBo=o("perceiver"),MBo=o(" \u2014 "),OI=a("a"),EBo=o("PerceiverForImageClassificationLearned"),yBo=o(" or "),GI=a("a"),wBo=o("PerceiverForImageClassificationFourier"),ABo=o(" or "),XI=a("a"),LBo=o("PerceiverForImageClassificationConvProcessing"),BBo=o(" (Perceiver model)"),kBo=l(),r5=a("li"),ane=a("strong"),xBo=o("poolformer"),RBo=o(" \u2014 "),zI=a("a"),SBo=o("PoolFormerForImageClassification"),PBo=o(" (PoolFormer model)"),$Bo=l(),t5=a("li"),nne=a("strong"),IBo=o("segformer"),jBo=o(" \u2014 "),VI=a("a"),NBo=o("SegformerForImageClassification"),DBo=o(" (SegFormer model)"),qBo=l(),a5=a("li"),sne=a("strong"),OBo=o("swin"),GBo=o(" \u2014 "),WI=a("a"),XBo=o("SwinForImageClassification"),zBo=o(" (Swin model)"),VBo=l(),n5=a("li"),lne=a("strong"),WBo=o("vit"),QBo=o(" \u2014 "),QI=a("a"),HBo=o("ViTForImageClassification"),UBo=o(" (ViT model)"),JBo=l(),s5=a("p"),YBo=o("The model is set in evaluation mode by default using "),ine=a("code"),KBo=o("model.eval()"),ZBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dne=a("code"),eko=o("model.train()"),oko=l(),cne=a("p"),rko=o("Examples:"),tko=l(),f(IE.$$.fragment),s6e=l(),id=a("h2"),l5=a("a"),fne=a("span"),f(jE.$$.fragment),ako=l(),mne=a("span"),nko=o("AutoModelForVision2Seq"),l6e=l(),or=a("div"),f(NE.$$.fragment),sko=l(),dd=a("p"),lko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gne=a("code"),iko=o("from_pretrained()"),dko=o("class method or the "),hne=a("code"),cko=o("from_config()"),fko=o(`class
method.`),mko=l(),DE=a("p"),gko=o("This class cannot be instantiated directly using "),pne=a("code"),hko=o("__init__()"),pko=o(" (throws an error)."),_ko=l(),Wr=a("div"),f(qE.$$.fragment),uko=l(),_ne=a("p"),bko=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vko=l(),cd=a("p"),Tko=o(`Note:
Loading a model from its configuration file does `),une=a("strong"),Fko=o("not"),Cko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=a("code"),Mko=o("from_pretrained()"),Eko=o("to load the model weights."),yko=l(),vne=a("p"),wko=o("Examples:"),Ako=l(),f(OE.$$.fragment),Lko=l(),Ge=a("div"),f(GE.$$.fragment),Bko=l(),Tne=a("p"),kko=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xko=l(),Xa=a("p"),Rko=o("The model class to instantiate is selected based on the "),Fne=a("code"),Sko=o("model_type"),Pko=o(` property of the config object (either
passed as an argument or loaded from `),Cne=a("code"),$ko=o("pretrained_model_name_or_path"),Iko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mne=a("code"),jko=o("pretrained_model_name_or_path"),Nko=o(":"),Dko=l(),Ene=a("ul"),i5=a("li"),yne=a("strong"),qko=o("vision-encoder-decoder"),Oko=o(" \u2014 "),HI=a("a"),Gko=o("VisionEncoderDecoderModel"),Xko=o(" (Vision Encoder decoder model)"),zko=l(),d5=a("p"),Vko=o("The model is set in evaluation mode by default using "),wne=a("code"),Wko=o("model.eval()"),Qko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=a("code"),Hko=o("model.train()"),Uko=l(),Lne=a("p"),Jko=o("Examples:"),Yko=l(),f(XE.$$.fragment),i6e=l(),fd=a("h2"),c5=a("a"),Bne=a("span"),f(zE.$$.fragment),Kko=l(),kne=a("span"),Zko=o("AutoModelForAudioClassification"),d6e=l(),rr=a("div"),f(VE.$$.fragment),exo=l(),md=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xne=a("code"),rxo=o("from_pretrained()"),txo=o("class method or the "),Rne=a("code"),axo=o("from_config()"),nxo=o(`class
method.`),sxo=l(),WE=a("p"),lxo=o("This class cannot be instantiated directly using "),Sne=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),Qr=a("div"),f(QE.$$.fragment),fxo=l(),Pne=a("p"),mxo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),gxo=l(),gd=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),pxo=o("not"),_xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ine=a("code"),uxo=o("from_pretrained()"),bxo=o("to load the model weights."),vxo=l(),jne=a("p"),Txo=o("Examples:"),Fxo=l(),f(HE.$$.fragment),Cxo=l(),Xe=a("div"),f(UE.$$.fragment),Mxo=l(),Nne=a("p"),Exo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),yxo=l(),za=a("p"),wxo=o("The model class to instantiate is selected based on the "),Dne=a("code"),Axo=o("model_type"),Lxo=o(` property of the config object (either
passed as an argument or loaded from `),qne=a("code"),Bxo=o("pretrained_model_name_or_path"),kxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=a("code"),xxo=o("pretrained_model_name_or_path"),Rxo=o(":"),Sxo=l(),to=a("ul"),f5=a("li"),Gne=a("strong"),Pxo=o("hubert"),$xo=o(" \u2014 "),UI=a("a"),Ixo=o("HubertForSequenceClassification"),jxo=o(" (Hubert model)"),Nxo=l(),m5=a("li"),Xne=a("strong"),Dxo=o("sew"),qxo=o(" \u2014 "),JI=a("a"),Oxo=o("SEWForSequenceClassification"),Gxo=o(" (SEW model)"),Xxo=l(),g5=a("li"),zne=a("strong"),zxo=o("sew-d"),Vxo=o(" \u2014 "),YI=a("a"),Wxo=o("SEWDForSequenceClassification"),Qxo=o(" (SEW-D model)"),Hxo=l(),h5=a("li"),Vne=a("strong"),Uxo=o("unispeech"),Jxo=o(" \u2014 "),KI=a("a"),Yxo=o("UniSpeechForSequenceClassification"),Kxo=o(" (UniSpeech model)"),Zxo=l(),p5=a("li"),Wne=a("strong"),eRo=o("unispeech-sat"),oRo=o(" \u2014 "),ZI=a("a"),rRo=o("UniSpeechSatForSequenceClassification"),tRo=o(" (UniSpeechSat model)"),aRo=l(),_5=a("li"),Qne=a("strong"),nRo=o("wav2vec2"),sRo=o(" \u2014 "),ej=a("a"),lRo=o("Wav2Vec2ForSequenceClassification"),iRo=o(" (Wav2Vec2 model)"),dRo=l(),u5=a("li"),Hne=a("strong"),cRo=o("wavlm"),fRo=o(" \u2014 "),oj=a("a"),mRo=o("WavLMForSequenceClassification"),gRo=o(" (WavLM model)"),hRo=l(),b5=a("p"),pRo=o("The model is set in evaluation mode by default using "),Une=a("code"),_Ro=o("model.eval()"),uRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=a("code"),bRo=o("model.train()"),vRo=l(),Yne=a("p"),TRo=o("Examples:"),FRo=l(),f(JE.$$.fragment),c6e=l(),hd=a("h2"),v5=a("a"),Kne=a("span"),f(YE.$$.fragment),CRo=l(),Zne=a("span"),MRo=o("AutoModelForAudioFrameClassification"),f6e=l(),tr=a("div"),f(KE.$$.fragment),ERo=l(),pd=a("p"),yRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ese=a("code"),wRo=o("from_pretrained()"),ARo=o("class method or the "),ose=a("code"),LRo=o("from_config()"),BRo=o(`class
method.`),kRo=l(),ZE=a("p"),xRo=o("This class cannot be instantiated directly using "),rse=a("code"),RRo=o("__init__()"),SRo=o(" (throws an error)."),PRo=l(),Hr=a("div"),f(e3.$$.fragment),$Ro=l(),tse=a("p"),IRo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jRo=l(),_d=a("p"),NRo=o(`Note:
Loading a model from its configuration file does `),ase=a("strong"),DRo=o("not"),qRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nse=a("code"),ORo=o("from_pretrained()"),GRo=o("to load the model weights."),XRo=l(),sse=a("p"),zRo=o("Examples:"),VRo=l(),f(o3.$$.fragment),WRo=l(),ze=a("div"),f(r3.$$.fragment),QRo=l(),lse=a("p"),HRo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),URo=l(),Va=a("p"),JRo=o("The model class to instantiate is selected based on the "),ise=a("code"),YRo=o("model_type"),KRo=o(` property of the config object (either
passed as an argument or loaded from `),dse=a("code"),ZRo=o("pretrained_model_name_or_path"),eSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=a("code"),oSo=o("pretrained_model_name_or_path"),rSo=o(":"),tSo=l(),ud=a("ul"),T5=a("li"),fse=a("strong"),aSo=o("unispeech-sat"),nSo=o(" \u2014 "),rj=a("a"),sSo=o("UniSpeechSatForAudioFrameClassification"),lSo=o(" (UniSpeechSat model)"),iSo=l(),F5=a("li"),mse=a("strong"),dSo=o("wav2vec2"),cSo=o(" \u2014 "),tj=a("a"),fSo=o("Wav2Vec2ForAudioFrameClassification"),mSo=o(" (Wav2Vec2 model)"),gSo=l(),C5=a("li"),gse=a("strong"),hSo=o("wavlm"),pSo=o(" \u2014 "),aj=a("a"),_So=o("WavLMForAudioFrameClassification"),uSo=o(" (WavLM model)"),bSo=l(),M5=a("p"),vSo=o("The model is set in evaluation mode by default using "),hse=a("code"),TSo=o("model.eval()"),FSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=a("code"),CSo=o("model.train()"),MSo=l(),_se=a("p"),ESo=o("Examples:"),ySo=l(),f(t3.$$.fragment),m6e=l(),bd=a("h2"),E5=a("a"),use=a("span"),f(a3.$$.fragment),wSo=l(),bse=a("span"),ASo=o("AutoModelForCTC"),g6e=l(),ar=a("div"),f(n3.$$.fragment),LSo=l(),vd=a("p"),BSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vse=a("code"),kSo=o("from_pretrained()"),xSo=o("class method or the "),Tse=a("code"),RSo=o("from_config()"),SSo=o(`class
method.`),PSo=l(),s3=a("p"),$So=o("This class cannot be instantiated directly using "),Fse=a("code"),ISo=o("__init__()"),jSo=o(" (throws an error)."),NSo=l(),Ur=a("div"),f(l3.$$.fragment),DSo=l(),Cse=a("p"),qSo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),OSo=l(),Td=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),XSo=o("not"),zSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=a("code"),VSo=o("from_pretrained()"),WSo=o("to load the model weights."),QSo=l(),yse=a("p"),HSo=o("Examples:"),USo=l(),f(i3.$$.fragment),JSo=l(),Ve=a("div"),f(d3.$$.fragment),YSo=l(),wse=a("p"),KSo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ZSo=l(),Wa=a("p"),ePo=o("The model class to instantiate is selected based on the "),Ase=a("code"),oPo=o("model_type"),rPo=o(` property of the config object (either
passed as an argument or loaded from `),Lse=a("code"),tPo=o("pretrained_model_name_or_path"),aPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),nPo=o("pretrained_model_name_or_path"),sPo=o(":"),lPo=l(),ao=a("ul"),y5=a("li"),kse=a("strong"),iPo=o("hubert"),dPo=o(" \u2014 "),nj=a("a"),cPo=o("HubertForCTC"),fPo=o(" (Hubert model)"),mPo=l(),w5=a("li"),xse=a("strong"),gPo=o("sew"),hPo=o(" \u2014 "),sj=a("a"),pPo=o("SEWForCTC"),_Po=o(" (SEW model)"),uPo=l(),A5=a("li"),Rse=a("strong"),bPo=o("sew-d"),vPo=o(" \u2014 "),lj=a("a"),TPo=o("SEWDForCTC"),FPo=o(" (SEW-D model)"),CPo=l(),L5=a("li"),Sse=a("strong"),MPo=o("unispeech"),EPo=o(" \u2014 "),ij=a("a"),yPo=o("UniSpeechForCTC"),wPo=o(" (UniSpeech model)"),APo=l(),B5=a("li"),Pse=a("strong"),LPo=o("unispeech-sat"),BPo=o(" \u2014 "),dj=a("a"),kPo=o("UniSpeechSatForCTC"),xPo=o(" (UniSpeechSat model)"),RPo=l(),k5=a("li"),$se=a("strong"),SPo=o("wav2vec2"),PPo=o(" \u2014 "),cj=a("a"),$Po=o("Wav2Vec2ForCTC"),IPo=o(" (Wav2Vec2 model)"),jPo=l(),x5=a("li"),Ise=a("strong"),NPo=o("wavlm"),DPo=o(" \u2014 "),fj=a("a"),qPo=o("WavLMForCTC"),OPo=o(" (WavLM model)"),GPo=l(),R5=a("p"),XPo=o("The model is set in evaluation mode by default using "),jse=a("code"),zPo=o("model.eval()"),VPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nse=a("code"),WPo=o("model.train()"),QPo=l(),Dse=a("p"),HPo=o("Examples:"),UPo=l(),f(c3.$$.fragment),h6e=l(),Fd=a("h2"),S5=a("a"),qse=a("span"),f(f3.$$.fragment),JPo=l(),Ose=a("span"),YPo=o("AutoModelForSpeechSeq2Seq"),p6e=l(),nr=a("div"),f(m3.$$.fragment),KPo=l(),Cd=a("p"),ZPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gse=a("code"),e$o=o("from_pretrained()"),o$o=o("class method or the "),Xse=a("code"),r$o=o("from_config()"),t$o=o(`class
method.`),a$o=l(),g3=a("p"),n$o=o("This class cannot be instantiated directly using "),zse=a("code"),s$o=o("__init__()"),l$o=o(" (throws an error)."),i$o=l(),Jr=a("div"),f(h3.$$.fragment),d$o=l(),Vse=a("p"),c$o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f$o=l(),Md=a("p"),m$o=o(`Note:
Loading a model from its configuration file does `),Wse=a("strong"),g$o=o("not"),h$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qse=a("code"),p$o=o("from_pretrained()"),_$o=o("to load the model weights."),u$o=l(),Hse=a("p"),b$o=o("Examples:"),v$o=l(),f(p3.$$.fragment),T$o=l(),We=a("div"),f(_3.$$.fragment),F$o=l(),Use=a("p"),C$o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M$o=l(),Qa=a("p"),E$o=o("The model class to instantiate is selected based on the "),Jse=a("code"),y$o=o("model_type"),w$o=o(` property of the config object (either
passed as an argument or loaded from `),Yse=a("code"),A$o=o("pretrained_model_name_or_path"),L$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=a("code"),B$o=o("pretrained_model_name_or_path"),k$o=o(":"),x$o=l(),u3=a("ul"),P5=a("li"),Zse=a("strong"),R$o=o("speech-encoder-decoder"),S$o=o(" \u2014 "),mj=a("a"),P$o=o("SpeechEncoderDecoderModel"),$$o=o(" (Speech Encoder decoder model)"),I$o=l(),$5=a("li"),ele=a("strong"),j$o=o("speech_to_text"),N$o=o(" \u2014 "),gj=a("a"),D$o=o("Speech2TextForConditionalGeneration"),q$o=o(" (Speech2Text model)"),O$o=l(),I5=a("p"),G$o=o("The model is set in evaluation mode by default using "),ole=a("code"),X$o=o("model.eval()"),z$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=a("code"),V$o=o("model.train()"),W$o=l(),tle=a("p"),Q$o=o("Examples:"),H$o=l(),f(b3.$$.fragment),_6e=l(),Ed=a("h2"),j5=a("a"),ale=a("span"),f(v3.$$.fragment),U$o=l(),nle=a("span"),J$o=o("AutoModelForAudioXVector"),u6e=l(),sr=a("div"),f(T3.$$.fragment),Y$o=l(),yd=a("p"),K$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sle=a("code"),Z$o=o("from_pretrained()"),eIo=o("class method or the "),lle=a("code"),oIo=o("from_config()"),rIo=o(`class
method.`),tIo=l(),F3=a("p"),aIo=o("This class cannot be instantiated directly using "),ile=a("code"),nIo=o("__init__()"),sIo=o(" (throws an error)."),lIo=l(),Yr=a("div"),f(C3.$$.fragment),iIo=l(),dle=a("p"),dIo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cIo=l(),wd=a("p"),fIo=o(`Note:
Loading a model from its configuration file does `),cle=a("strong"),mIo=o("not"),gIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fle=a("code"),hIo=o("from_pretrained()"),pIo=o("to load the model weights."),_Io=l(),mle=a("p"),uIo=o("Examples:"),bIo=l(),f(M3.$$.fragment),vIo=l(),Qe=a("div"),f(E3.$$.fragment),TIo=l(),gle=a("p"),FIo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),CIo=l(),Ha=a("p"),MIo=o("The model class to instantiate is selected based on the "),hle=a("code"),EIo=o("model_type"),yIo=o(` property of the config object (either
passed as an argument or loaded from `),ple=a("code"),wIo=o("pretrained_model_name_or_path"),AIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),LIo=o("pretrained_model_name_or_path"),BIo=o(":"),kIo=l(),Ad=a("ul"),N5=a("li"),ule=a("strong"),xIo=o("unispeech-sat"),RIo=o(" \u2014 "),hj=a("a"),SIo=o("UniSpeechSatForXVector"),PIo=o(" (UniSpeechSat model)"),$Io=l(),D5=a("li"),ble=a("strong"),IIo=o("wav2vec2"),jIo=o(" \u2014 "),pj=a("a"),NIo=o("Wav2Vec2ForXVector"),DIo=o(" (Wav2Vec2 model)"),qIo=l(),q5=a("li"),vle=a("strong"),OIo=o("wavlm"),GIo=o(" \u2014 "),_j=a("a"),XIo=o("WavLMForXVector"),zIo=o(" (WavLM model)"),VIo=l(),O5=a("p"),WIo=o("The model is set in evaluation mode by default using "),Tle=a("code"),QIo=o("model.eval()"),HIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),UIo=o("model.train()"),JIo=l(),Cle=a("p"),YIo=o("Examples:"),KIo=l(),f(y3.$$.fragment),b6e=l(),Ld=a("h2"),G5=a("a"),Mle=a("span"),f(w3.$$.fragment),ZIo=l(),Ele=a("span"),ejo=o("AutoModelForMaskedImageModeling"),v6e=l(),lr=a("div"),f(A3.$$.fragment),ojo=l(),Bd=a("p"),rjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yle=a("code"),tjo=o("from_pretrained()"),ajo=o("class method or the "),wle=a("code"),njo=o("from_config()"),sjo=o(`class
method.`),ljo=l(),L3=a("p"),ijo=o("This class cannot be instantiated directly using "),Ale=a("code"),djo=o("__init__()"),cjo=o(" (throws an error)."),fjo=l(),Kr=a("div"),f(B3.$$.fragment),mjo=l(),Lle=a("p"),gjo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hjo=l(),kd=a("p"),pjo=o(`Note:
Loading a model from its configuration file does `),Ble=a("strong"),_jo=o("not"),ujo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=a("code"),bjo=o("from_pretrained()"),vjo=o("to load the model weights."),Tjo=l(),xle=a("p"),Fjo=o("Examples:"),Cjo=l(),f(k3.$$.fragment),Mjo=l(),He=a("div"),f(x3.$$.fragment),Ejo=l(),Rle=a("p"),yjo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wjo=l(),Ua=a("p"),Ajo=o("The model class to instantiate is selected based on the "),Sle=a("code"),Ljo=o("model_type"),Bjo=o(` property of the config object (either
passed as an argument or loaded from `),Ple=a("code"),kjo=o("pretrained_model_name_or_path"),xjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=a("code"),Rjo=o("pretrained_model_name_or_path"),Sjo=o(":"),Pjo=l(),xd=a("ul"),X5=a("li"),Ile=a("strong"),$jo=o("deit"),Ijo=o(" \u2014 "),uj=a("a"),jjo=o("DeiTForMaskedImageModeling"),Njo=o(" (DeiT model)"),Djo=l(),z5=a("li"),jle=a("strong"),qjo=o("swin"),Ojo=o(" \u2014 "),bj=a("a"),Gjo=o("SwinForMaskedImageModeling"),Xjo=o(" (Swin model)"),zjo=l(),V5=a("li"),Nle=a("strong"),Vjo=o("vit"),Wjo=o(" \u2014 "),vj=a("a"),Qjo=o("ViTForMaskedImageModeling"),Hjo=o(" (ViT model)"),Ujo=l(),W5=a("p"),Jjo=o("The model is set in evaluation mode by default using "),Dle=a("code"),Yjo=o("model.eval()"),Kjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=a("code"),Zjo=o("model.train()"),eNo=l(),Ole=a("p"),oNo=o("Examples:"),rNo=l(),f(R3.$$.fragment),T6e=l(),Rd=a("h2"),Q5=a("a"),Gle=a("span"),f(S3.$$.fragment),tNo=l(),Xle=a("span"),aNo=o("AutoModelForObjectDetection"),F6e=l(),ir=a("div"),f(P3.$$.fragment),nNo=l(),Sd=a("p"),sNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zle=a("code"),lNo=o("from_pretrained()"),iNo=o("class method or the "),Vle=a("code"),dNo=o("from_config()"),cNo=o(`class
method.`),fNo=l(),$3=a("p"),mNo=o("This class cannot be instantiated directly using "),Wle=a("code"),gNo=o("__init__()"),hNo=o(" (throws an error)."),pNo=l(),Zr=a("div"),f(I3.$$.fragment),_No=l(),Qle=a("p"),uNo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),bNo=l(),Pd=a("p"),vNo=o(`Note:
Loading a model from its configuration file does `),Hle=a("strong"),TNo=o("not"),FNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ule=a("code"),CNo=o("from_pretrained()"),MNo=o("to load the model weights."),ENo=l(),Jle=a("p"),yNo=o("Examples:"),wNo=l(),f(j3.$$.fragment),ANo=l(),Ue=a("div"),f(N3.$$.fragment),LNo=l(),Yle=a("p"),BNo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kNo=l(),Ja=a("p"),xNo=o("The model class to instantiate is selected based on the "),Kle=a("code"),RNo=o("model_type"),SNo=o(` property of the config object (either
passed as an argument or loaded from `),Zle=a("code"),PNo=o("pretrained_model_name_or_path"),$No=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=a("code"),INo=o("pretrained_model_name_or_path"),jNo=o(":"),NNo=l(),oie=a("ul"),H5=a("li"),rie=a("strong"),DNo=o("detr"),qNo=o(" \u2014 "),Tj=a("a"),ONo=o("DetrForObjectDetection"),GNo=o(" (DETR model)"),XNo=l(),U5=a("p"),zNo=o("The model is set in evaluation mode by default using "),tie=a("code"),VNo=o("model.eval()"),WNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),QNo=o("model.train()"),HNo=l(),nie=a("p"),UNo=o("Examples:"),JNo=l(),f(D3.$$.fragment),C6e=l(),$d=a("h2"),J5=a("a"),sie=a("span"),f(q3.$$.fragment),YNo=l(),lie=a("span"),KNo=o("AutoModelForImageSegmentation"),M6e=l(),dr=a("div"),f(O3.$$.fragment),ZNo=l(),Id=a("p"),eDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iie=a("code"),oDo=o("from_pretrained()"),rDo=o("class method or the "),die=a("code"),tDo=o("from_config()"),aDo=o(`class
method.`),nDo=l(),G3=a("p"),sDo=o("This class cannot be instantiated directly using "),cie=a("code"),lDo=o("__init__()"),iDo=o(" (throws an error)."),dDo=l(),et=a("div"),f(X3.$$.fragment),cDo=l(),fie=a("p"),fDo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mDo=l(),jd=a("p"),gDo=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),hDo=o("not"),pDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=a("code"),_Do=o("from_pretrained()"),uDo=o("to load the model weights."),bDo=l(),hie=a("p"),vDo=o("Examples:"),TDo=l(),f(z3.$$.fragment),FDo=l(),Je=a("div"),f(V3.$$.fragment),CDo=l(),pie=a("p"),MDo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),EDo=l(),Ya=a("p"),yDo=o("The model class to instantiate is selected based on the "),_ie=a("code"),wDo=o("model_type"),ADo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),LDo=o("pretrained_model_name_or_path"),BDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),kDo=o("pretrained_model_name_or_path"),xDo=o(":"),RDo=l(),vie=a("ul"),Y5=a("li"),Tie=a("strong"),SDo=o("detr"),PDo=o(" \u2014 "),Fj=a("a"),$Do=o("DetrForSegmentation"),IDo=o(" (DETR model)"),jDo=l(),K5=a("p"),NDo=o("The model is set in evaluation mode by default using "),Fie=a("code"),DDo=o("model.eval()"),qDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=a("code"),ODo=o("model.train()"),GDo=l(),Mie=a("p"),XDo=o("Examples:"),zDo=l(),f(W3.$$.fragment),E6e=l(),Nd=a("h2"),Z5=a("a"),Eie=a("span"),f(Q3.$$.fragment),VDo=l(),yie=a("span"),WDo=o("TFAutoModel"),y6e=l(),cr=a("div"),f(H3.$$.fragment),QDo=l(),Dd=a("p"),HDo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wie=a("code"),UDo=o("from_pretrained()"),JDo=o("class method or the "),Aie=a("code"),YDo=o("from_config()"),KDo=o(`class
method.`),ZDo=l(),U3=a("p"),eqo=o("This class cannot be instantiated directly using "),Lie=a("code"),oqo=o("__init__()"),rqo=o(" (throws an error)."),tqo=l(),ot=a("div"),f(J3.$$.fragment),aqo=l(),Bie=a("p"),nqo=o("Instantiates one of the base model classes of the library from a configuration."),sqo=l(),qd=a("p"),lqo=o(`Note:
Loading a model from its configuration file does `),kie=a("strong"),iqo=o("not"),dqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xie=a("code"),cqo=o("from_pretrained()"),fqo=o("to load the model weights."),mqo=l(),Rie=a("p"),gqo=o("Examples:"),hqo=l(),f(Y3.$$.fragment),pqo=l(),mo=a("div"),f(K3.$$.fragment),_qo=l(),Sie=a("p"),uqo=o("Instantiate one of the base model classes of the library from a pretrained model."),bqo=l(),Ka=a("p"),vqo=o("The model class to instantiate is selected based on the "),Pie=a("code"),Tqo=o("model_type"),Fqo=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),Cqo=o("pretrained_model_name_or_path"),Mqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=a("code"),Eqo=o("pretrained_model_name_or_path"),yqo=o(":"),wqo=l(),B=a("ul"),e2=a("li"),jie=a("strong"),Aqo=o("albert"),Lqo=o(" \u2014 "),Cj=a("a"),Bqo=o("TFAlbertModel"),kqo=o(" (ALBERT model)"),xqo=l(),o2=a("li"),Nie=a("strong"),Rqo=o("bart"),Sqo=o(" \u2014 "),Mj=a("a"),Pqo=o("TFBartModel"),$qo=o(" (BART model)"),Iqo=l(),r2=a("li"),Die=a("strong"),jqo=o("bert"),Nqo=o(" \u2014 "),Ej=a("a"),Dqo=o("TFBertModel"),qqo=o(" (BERT model)"),Oqo=l(),t2=a("li"),qie=a("strong"),Gqo=o("blenderbot"),Xqo=o(" \u2014 "),yj=a("a"),zqo=o("TFBlenderbotModel"),Vqo=o(" (Blenderbot model)"),Wqo=l(),a2=a("li"),Oie=a("strong"),Qqo=o("blenderbot-small"),Hqo=o(" \u2014 "),wj=a("a"),Uqo=o("TFBlenderbotSmallModel"),Jqo=o(" (BlenderbotSmall model)"),Yqo=l(),n2=a("li"),Gie=a("strong"),Kqo=o("camembert"),Zqo=o(" \u2014 "),Aj=a("a"),eOo=o("TFCamembertModel"),oOo=o(" (CamemBERT model)"),rOo=l(),s2=a("li"),Xie=a("strong"),tOo=o("clip"),aOo=o(" \u2014 "),Lj=a("a"),nOo=o("TFCLIPModel"),sOo=o(" (CLIP model)"),lOo=l(),l2=a("li"),zie=a("strong"),iOo=o("convbert"),dOo=o(" \u2014 "),Bj=a("a"),cOo=o("TFConvBertModel"),fOo=o(" (ConvBERT model)"),mOo=l(),i2=a("li"),Vie=a("strong"),gOo=o("ctrl"),hOo=o(" \u2014 "),kj=a("a"),pOo=o("TFCTRLModel"),_Oo=o(" (CTRL model)"),uOo=l(),d2=a("li"),Wie=a("strong"),bOo=o("deberta"),vOo=o(" \u2014 "),xj=a("a"),TOo=o("TFDebertaModel"),FOo=o(" (DeBERTa model)"),COo=l(),c2=a("li"),Qie=a("strong"),MOo=o("deberta-v2"),EOo=o(" \u2014 "),Rj=a("a"),yOo=o("TFDebertaV2Model"),wOo=o(" (DeBERTa-v2 model)"),AOo=l(),f2=a("li"),Hie=a("strong"),LOo=o("distilbert"),BOo=o(" \u2014 "),Sj=a("a"),kOo=o("TFDistilBertModel"),xOo=o(" (DistilBERT model)"),ROo=l(),m2=a("li"),Uie=a("strong"),SOo=o("dpr"),POo=o(" \u2014 "),Pj=a("a"),$Oo=o("TFDPRQuestionEncoder"),IOo=o(" (DPR model)"),jOo=l(),g2=a("li"),Jie=a("strong"),NOo=o("electra"),DOo=o(" \u2014 "),$j=a("a"),qOo=o("TFElectraModel"),OOo=o(" (ELECTRA model)"),GOo=l(),h2=a("li"),Yie=a("strong"),XOo=o("flaubert"),zOo=o(" \u2014 "),Ij=a("a"),VOo=o("TFFlaubertModel"),WOo=o(" (FlauBERT model)"),QOo=l(),Ms=a("li"),Kie=a("strong"),HOo=o("funnel"),UOo=o(" \u2014 "),jj=a("a"),JOo=o("TFFunnelModel"),YOo=o(" or "),Nj=a("a"),KOo=o("TFFunnelBaseModel"),ZOo=o(" (Funnel Transformer model)"),eGo=l(),p2=a("li"),Zie=a("strong"),oGo=o("gpt2"),rGo=o(" \u2014 "),Dj=a("a"),tGo=o("TFGPT2Model"),aGo=o(" (OpenAI GPT-2 model)"),nGo=l(),_2=a("li"),ede=a("strong"),sGo=o("hubert"),lGo=o(" \u2014 "),qj=a("a"),iGo=o("TFHubertModel"),dGo=o(" (Hubert model)"),cGo=l(),u2=a("li"),ode=a("strong"),fGo=o("layoutlm"),mGo=o(" \u2014 "),Oj=a("a"),gGo=o("TFLayoutLMModel"),hGo=o(" (LayoutLM model)"),pGo=l(),b2=a("li"),rde=a("strong"),_Go=o("led"),uGo=o(" \u2014 "),Gj=a("a"),bGo=o("TFLEDModel"),vGo=o(" (LED model)"),TGo=l(),v2=a("li"),tde=a("strong"),FGo=o("longformer"),CGo=o(" \u2014 "),Xj=a("a"),MGo=o("TFLongformerModel"),EGo=o(" (Longformer model)"),yGo=l(),T2=a("li"),ade=a("strong"),wGo=o("lxmert"),AGo=o(" \u2014 "),zj=a("a"),LGo=o("TFLxmertModel"),BGo=o(" (LXMERT model)"),kGo=l(),F2=a("li"),nde=a("strong"),xGo=o("marian"),RGo=o(" \u2014 "),Vj=a("a"),SGo=o("TFMarianModel"),PGo=o(" (Marian model)"),$Go=l(),C2=a("li"),sde=a("strong"),IGo=o("mbart"),jGo=o(" \u2014 "),Wj=a("a"),NGo=o("TFMBartModel"),DGo=o(" (mBART model)"),qGo=l(),M2=a("li"),lde=a("strong"),OGo=o("mobilebert"),GGo=o(" \u2014 "),Qj=a("a"),XGo=o("TFMobileBertModel"),zGo=o(" (MobileBERT model)"),VGo=l(),E2=a("li"),ide=a("strong"),WGo=o("mpnet"),QGo=o(" \u2014 "),Hj=a("a"),HGo=o("TFMPNetModel"),UGo=o(" (MPNet model)"),JGo=l(),y2=a("li"),dde=a("strong"),YGo=o("mt5"),KGo=o(" \u2014 "),Uj=a("a"),ZGo=o("TFMT5Model"),eXo=o(" (mT5 model)"),oXo=l(),w2=a("li"),cde=a("strong"),rXo=o("openai-gpt"),tXo=o(" \u2014 "),Jj=a("a"),aXo=o("TFOpenAIGPTModel"),nXo=o(" (OpenAI GPT model)"),sXo=l(),A2=a("li"),fde=a("strong"),lXo=o("pegasus"),iXo=o(" \u2014 "),Yj=a("a"),dXo=o("TFPegasusModel"),cXo=o(" (Pegasus model)"),fXo=l(),L2=a("li"),mde=a("strong"),mXo=o("rembert"),gXo=o(" \u2014 "),Kj=a("a"),hXo=o("TFRemBertModel"),pXo=o(" (RemBERT model)"),_Xo=l(),B2=a("li"),gde=a("strong"),uXo=o("roberta"),bXo=o(" \u2014 "),Zj=a("a"),vXo=o("TFRobertaModel"),TXo=o(" (RoBERTa model)"),FXo=l(),k2=a("li"),hde=a("strong"),CXo=o("roformer"),MXo=o(" \u2014 "),eN=a("a"),EXo=o("TFRoFormerModel"),yXo=o(" (RoFormer model)"),wXo=l(),x2=a("li"),pde=a("strong"),AXo=o("speech_to_text"),LXo=o(" \u2014 "),_de=a("code"),BXo=o("TFSpeech2TextModel"),kXo=o("(Speech2Text model)"),xXo=l(),R2=a("li"),ude=a("strong"),RXo=o("t5"),SXo=o(" \u2014 "),oN=a("a"),PXo=o("TFT5Model"),$Xo=o(" (T5 model)"),IXo=l(),S2=a("li"),bde=a("strong"),jXo=o("tapas"),NXo=o(" \u2014 "),rN=a("a"),DXo=o("TFTapasModel"),qXo=o(" (TAPAS model)"),OXo=l(),P2=a("li"),vde=a("strong"),GXo=o("transfo-xl"),XXo=o(" \u2014 "),tN=a("a"),zXo=o("TFTransfoXLModel"),VXo=o(" (Transformer-XL model)"),WXo=l(),$2=a("li"),Tde=a("strong"),QXo=o("vit"),HXo=o(" \u2014 "),aN=a("a"),UXo=o("TFViTModel"),JXo=o(" (ViT model)"),YXo=l(),I2=a("li"),Fde=a("strong"),KXo=o("wav2vec2"),ZXo=o(" \u2014 "),nN=a("a"),ezo=o("TFWav2Vec2Model"),ozo=o(" (Wav2Vec2 model)"),rzo=l(),j2=a("li"),Cde=a("strong"),tzo=o("xlm"),azo=o(" \u2014 "),sN=a("a"),nzo=o("TFXLMModel"),szo=o(" (XLM model)"),lzo=l(),N2=a("li"),Mde=a("strong"),izo=o("xlm-roberta"),dzo=o(" \u2014 "),lN=a("a"),czo=o("TFXLMRobertaModel"),fzo=o(" (XLM-RoBERTa model)"),mzo=l(),D2=a("li"),Ede=a("strong"),gzo=o("xlnet"),hzo=o(" \u2014 "),iN=a("a"),pzo=o("TFXLNetModel"),_zo=o(" (XLNet model)"),uzo=l(),yde=a("p"),bzo=o("Examples:"),vzo=l(),f(Z3.$$.fragment),w6e=l(),Od=a("h2"),q2=a("a"),wde=a("span"),f(ey.$$.fragment),Tzo=l(),Ade=a("span"),Fzo=o("TFAutoModelForPreTraining"),A6e=l(),fr=a("div"),f(oy.$$.fragment),Czo=l(),Gd=a("p"),Mzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lde=a("code"),Ezo=o("from_pretrained()"),yzo=o("class method or the "),Bde=a("code"),wzo=o("from_config()"),Azo=o(`class
method.`),Lzo=l(),ry=a("p"),Bzo=o("This class cannot be instantiated directly using "),kde=a("code"),kzo=o("__init__()"),xzo=o(" (throws an error)."),Rzo=l(),rt=a("div"),f(ty.$$.fragment),Szo=l(),xde=a("p"),Pzo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$zo=l(),Xd=a("p"),Izo=o(`Note:
Loading a model from its configuration file does `),Rde=a("strong"),jzo=o("not"),Nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sde=a("code"),Dzo=o("from_pretrained()"),qzo=o("to load the model weights."),Ozo=l(),Pde=a("p"),Gzo=o("Examples:"),Xzo=l(),f(ay.$$.fragment),zzo=l(),go=a("div"),f(ny.$$.fragment),Vzo=l(),$de=a("p"),Wzo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qzo=l(),Za=a("p"),Hzo=o("The model class to instantiate is selected based on the "),Ide=a("code"),Uzo=o("model_type"),Jzo=o(` property of the config object (either
passed as an argument or loaded from `),jde=a("code"),Yzo=o("pretrained_model_name_or_path"),Kzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=a("code"),Zzo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),H=a("ul"),O2=a("li"),Dde=a("strong"),rVo=o("albert"),tVo=o(" \u2014 "),dN=a("a"),aVo=o("TFAlbertForPreTraining"),nVo=o(" (ALBERT model)"),sVo=l(),G2=a("li"),qde=a("strong"),lVo=o("bart"),iVo=o(" \u2014 "),cN=a("a"),dVo=o("TFBartForConditionalGeneration"),cVo=o(" (BART model)"),fVo=l(),X2=a("li"),Ode=a("strong"),mVo=o("bert"),gVo=o(" \u2014 "),fN=a("a"),hVo=o("TFBertForPreTraining"),pVo=o(" (BERT model)"),_Vo=l(),z2=a("li"),Gde=a("strong"),uVo=o("camembert"),bVo=o(" \u2014 "),mN=a("a"),vVo=o("TFCamembertForMaskedLM"),TVo=o(" (CamemBERT model)"),FVo=l(),V2=a("li"),Xde=a("strong"),CVo=o("ctrl"),MVo=o(" \u2014 "),gN=a("a"),EVo=o("TFCTRLLMHeadModel"),yVo=o(" (CTRL model)"),wVo=l(),W2=a("li"),zde=a("strong"),AVo=o("distilbert"),LVo=o(" \u2014 "),hN=a("a"),BVo=o("TFDistilBertForMaskedLM"),kVo=o(" (DistilBERT model)"),xVo=l(),Q2=a("li"),Vde=a("strong"),RVo=o("electra"),SVo=o(" \u2014 "),pN=a("a"),PVo=o("TFElectraForPreTraining"),$Vo=o(" (ELECTRA model)"),IVo=l(),H2=a("li"),Wde=a("strong"),jVo=o("flaubert"),NVo=o(" \u2014 "),_N=a("a"),DVo=o("TFFlaubertWithLMHeadModel"),qVo=o(" (FlauBERT model)"),OVo=l(),U2=a("li"),Qde=a("strong"),GVo=o("funnel"),XVo=o(" \u2014 "),uN=a("a"),zVo=o("TFFunnelForPreTraining"),VVo=o(" (Funnel Transformer model)"),WVo=l(),J2=a("li"),Hde=a("strong"),QVo=o("gpt2"),HVo=o(" \u2014 "),bN=a("a"),UVo=o("TFGPT2LMHeadModel"),JVo=o(" (OpenAI GPT-2 model)"),YVo=l(),Y2=a("li"),Ude=a("strong"),KVo=o("layoutlm"),ZVo=o(" \u2014 "),vN=a("a"),eWo=o("TFLayoutLMForMaskedLM"),oWo=o(" (LayoutLM model)"),rWo=l(),K2=a("li"),Jde=a("strong"),tWo=o("lxmert"),aWo=o(" \u2014 "),TN=a("a"),nWo=o("TFLxmertForPreTraining"),sWo=o(" (LXMERT model)"),lWo=l(),Z2=a("li"),Yde=a("strong"),iWo=o("mobilebert"),dWo=o(" \u2014 "),FN=a("a"),cWo=o("TFMobileBertForPreTraining"),fWo=o(" (MobileBERT model)"),mWo=l(),ev=a("li"),Kde=a("strong"),gWo=o("mpnet"),hWo=o(" \u2014 "),CN=a("a"),pWo=o("TFMPNetForMaskedLM"),_Wo=o(" (MPNet model)"),uWo=l(),ov=a("li"),Zde=a("strong"),bWo=o("openai-gpt"),vWo=o(" \u2014 "),MN=a("a"),TWo=o("TFOpenAIGPTLMHeadModel"),FWo=o(" (OpenAI GPT model)"),CWo=l(),rv=a("li"),ece=a("strong"),MWo=o("roberta"),EWo=o(" \u2014 "),EN=a("a"),yWo=o("TFRobertaForMaskedLM"),wWo=o(" (RoBERTa model)"),AWo=l(),tv=a("li"),oce=a("strong"),LWo=o("t5"),BWo=o(" \u2014 "),yN=a("a"),kWo=o("TFT5ForConditionalGeneration"),xWo=o(" (T5 model)"),RWo=l(),av=a("li"),rce=a("strong"),SWo=o("tapas"),PWo=o(" \u2014 "),wN=a("a"),$Wo=o("TFTapasForMaskedLM"),IWo=o(" (TAPAS model)"),jWo=l(),nv=a("li"),tce=a("strong"),NWo=o("transfo-xl"),DWo=o(" \u2014 "),AN=a("a"),qWo=o("TFTransfoXLLMHeadModel"),OWo=o(" (Transformer-XL model)"),GWo=l(),sv=a("li"),ace=a("strong"),XWo=o("xlm"),zWo=o(" \u2014 "),LN=a("a"),VWo=o("TFXLMWithLMHeadModel"),WWo=o(" (XLM model)"),QWo=l(),lv=a("li"),nce=a("strong"),HWo=o("xlm-roberta"),UWo=o(" \u2014 "),BN=a("a"),JWo=o("TFXLMRobertaForMaskedLM"),YWo=o(" (XLM-RoBERTa model)"),KWo=l(),iv=a("li"),sce=a("strong"),ZWo=o("xlnet"),eQo=o(" \u2014 "),kN=a("a"),oQo=o("TFXLNetLMHeadModel"),rQo=o(" (XLNet model)"),tQo=l(),lce=a("p"),aQo=o("Examples:"),nQo=l(),f(sy.$$.fragment),L6e=l(),zd=a("h2"),dv=a("a"),ice=a("span"),f(ly.$$.fragment),sQo=l(),dce=a("span"),lQo=o("TFAutoModelForCausalLM"),B6e=l(),mr=a("div"),f(iy.$$.fragment),iQo=l(),Vd=a("p"),dQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cce=a("code"),cQo=o("from_pretrained()"),fQo=o("class method or the "),fce=a("code"),mQo=o("from_config()"),gQo=o(`class
method.`),hQo=l(),dy=a("p"),pQo=o("This class cannot be instantiated directly using "),mce=a("code"),_Qo=o("__init__()"),uQo=o(" (throws an error)."),bQo=l(),tt=a("div"),f(cy.$$.fragment),vQo=l(),gce=a("p"),TQo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FQo=l(),Wd=a("p"),CQo=o(`Note:
Loading a model from its configuration file does `),hce=a("strong"),MQo=o("not"),EQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pce=a("code"),yQo=o("from_pretrained()"),wQo=o("to load the model weights."),AQo=l(),_ce=a("p"),LQo=o("Examples:"),BQo=l(),f(fy.$$.fragment),kQo=l(),ho=a("div"),f(my.$$.fragment),xQo=l(),uce=a("p"),RQo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SQo=l(),en=a("p"),PQo=o("The model class to instantiate is selected based on the "),bce=a("code"),$Qo=o("model_type"),IQo=o(` property of the config object (either
passed as an argument or loaded from `),vce=a("code"),jQo=o("pretrained_model_name_or_path"),NQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=a("code"),DQo=o("pretrained_model_name_or_path"),qQo=o(":"),OQo=l(),he=a("ul"),cv=a("li"),Fce=a("strong"),GQo=o("bert"),XQo=o(" \u2014 "),xN=a("a"),zQo=o("TFBertLMHeadModel"),VQo=o(" (BERT model)"),WQo=l(),fv=a("li"),Cce=a("strong"),QQo=o("ctrl"),HQo=o(" \u2014 "),RN=a("a"),UQo=o("TFCTRLLMHeadModel"),JQo=o(" (CTRL model)"),YQo=l(),mv=a("li"),Mce=a("strong"),KQo=o("gpt2"),ZQo=o(" \u2014 "),SN=a("a"),eHo=o("TFGPT2LMHeadModel"),oHo=o(" (OpenAI GPT-2 model)"),rHo=l(),gv=a("li"),Ece=a("strong"),tHo=o("openai-gpt"),aHo=o(" \u2014 "),PN=a("a"),nHo=o("TFOpenAIGPTLMHeadModel"),sHo=o(" (OpenAI GPT model)"),lHo=l(),hv=a("li"),yce=a("strong"),iHo=o("rembert"),dHo=o(" \u2014 "),$N=a("a"),cHo=o("TFRemBertForCausalLM"),fHo=o(" (RemBERT model)"),mHo=l(),pv=a("li"),wce=a("strong"),gHo=o("roberta"),hHo=o(" \u2014 "),IN=a("a"),pHo=o("TFRobertaForCausalLM"),_Ho=o(" (RoBERTa model)"),uHo=l(),_v=a("li"),Ace=a("strong"),bHo=o("roformer"),vHo=o(" \u2014 "),jN=a("a"),THo=o("TFRoFormerForCausalLM"),FHo=o(" (RoFormer model)"),CHo=l(),uv=a("li"),Lce=a("strong"),MHo=o("transfo-xl"),EHo=o(" \u2014 "),NN=a("a"),yHo=o("TFTransfoXLLMHeadModel"),wHo=o(" (Transformer-XL model)"),AHo=l(),bv=a("li"),Bce=a("strong"),LHo=o("xlm"),BHo=o(" \u2014 "),DN=a("a"),kHo=o("TFXLMWithLMHeadModel"),xHo=o(" (XLM model)"),RHo=l(),vv=a("li"),kce=a("strong"),SHo=o("xlnet"),PHo=o(" \u2014 "),qN=a("a"),$Ho=o("TFXLNetLMHeadModel"),IHo=o(" (XLNet model)"),jHo=l(),xce=a("p"),NHo=o("Examples:"),DHo=l(),f(gy.$$.fragment),k6e=l(),Qd=a("h2"),Tv=a("a"),Rce=a("span"),f(hy.$$.fragment),qHo=l(),Sce=a("span"),OHo=o("TFAutoModelForImageClassification"),x6e=l(),gr=a("div"),f(py.$$.fragment),GHo=l(),Hd=a("p"),XHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pce=a("code"),zHo=o("from_pretrained()"),VHo=o("class method or the "),$ce=a("code"),WHo=o("from_config()"),QHo=o(`class
method.`),HHo=l(),_y=a("p"),UHo=o("This class cannot be instantiated directly using "),Ice=a("code"),JHo=o("__init__()"),YHo=o(" (throws an error)."),KHo=l(),at=a("div"),f(uy.$$.fragment),ZHo=l(),jce=a("p"),eUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oUo=l(),Ud=a("p"),rUo=o(`Note:
Loading a model from its configuration file does `),Nce=a("strong"),tUo=o("not"),aUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dce=a("code"),nUo=o("from_pretrained()"),sUo=o("to load the model weights."),lUo=l(),qce=a("p"),iUo=o("Examples:"),dUo=l(),f(by.$$.fragment),cUo=l(),po=a("div"),f(vy.$$.fragment),fUo=l(),Oce=a("p"),mUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gUo=l(),on=a("p"),hUo=o("The model class to instantiate is selected based on the "),Gce=a("code"),pUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),vUo=o("pretrained_model_name_or_path"),TUo=o(":"),FUo=l(),Vce=a("ul"),Fv=a("li"),Wce=a("strong"),CUo=o("vit"),MUo=o(" \u2014 "),ON=a("a"),EUo=o("TFViTForImageClassification"),yUo=o(" (ViT model)"),wUo=l(),Qce=a("p"),AUo=o("Examples:"),LUo=l(),f(Ty.$$.fragment),R6e=l(),Jd=a("h2"),Cv=a("a"),Hce=a("span"),f(Fy.$$.fragment),BUo=l(),Uce=a("span"),kUo=o("TFAutoModelForMaskedLM"),S6e=l(),hr=a("div"),f(Cy.$$.fragment),xUo=l(),Yd=a("p"),RUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jce=a("code"),SUo=o("from_pretrained()"),PUo=o("class method or the "),Yce=a("code"),$Uo=o("from_config()"),IUo=o(`class
method.`),jUo=l(),My=a("p"),NUo=o("This class cannot be instantiated directly using "),Kce=a("code"),DUo=o("__init__()"),qUo=o(" (throws an error)."),OUo=l(),nt=a("div"),f(Ey.$$.fragment),GUo=l(),Zce=a("p"),XUo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zUo=l(),Kd=a("p"),VUo=o(`Note:
Loading a model from its configuration file does `),efe=a("strong"),WUo=o("not"),QUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=a("code"),HUo=o("from_pretrained()"),UUo=o("to load the model weights."),JUo=l(),rfe=a("p"),YUo=o("Examples:"),KUo=l(),f(yy.$$.fragment),ZUo=l(),_o=a("div"),f(wy.$$.fragment),eJo=l(),tfe=a("p"),oJo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rJo=l(),rn=a("p"),tJo=o("The model class to instantiate is selected based on the "),afe=a("code"),aJo=o("model_type"),nJo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),sJo=o("pretrained_model_name_or_path"),lJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),iJo=o("pretrained_model_name_or_path"),dJo=o(":"),cJo=l(),Y=a("ul"),Mv=a("li"),lfe=a("strong"),fJo=o("albert"),mJo=o(" \u2014 "),GN=a("a"),gJo=o("TFAlbertForMaskedLM"),hJo=o(" (ALBERT model)"),pJo=l(),Ev=a("li"),ife=a("strong"),_Jo=o("bert"),uJo=o(" \u2014 "),XN=a("a"),bJo=o("TFBertForMaskedLM"),vJo=o(" (BERT model)"),TJo=l(),yv=a("li"),dfe=a("strong"),FJo=o("camembert"),CJo=o(" \u2014 "),zN=a("a"),MJo=o("TFCamembertForMaskedLM"),EJo=o(" (CamemBERT model)"),yJo=l(),wv=a("li"),cfe=a("strong"),wJo=o("convbert"),AJo=o(" \u2014 "),VN=a("a"),LJo=o("TFConvBertForMaskedLM"),BJo=o(" (ConvBERT model)"),kJo=l(),Av=a("li"),ffe=a("strong"),xJo=o("deberta"),RJo=o(" \u2014 "),WN=a("a"),SJo=o("TFDebertaForMaskedLM"),PJo=o(" (DeBERTa model)"),$Jo=l(),Lv=a("li"),mfe=a("strong"),IJo=o("deberta-v2"),jJo=o(" \u2014 "),QN=a("a"),NJo=o("TFDebertaV2ForMaskedLM"),DJo=o(" (DeBERTa-v2 model)"),qJo=l(),Bv=a("li"),gfe=a("strong"),OJo=o("distilbert"),GJo=o(" \u2014 "),HN=a("a"),XJo=o("TFDistilBertForMaskedLM"),zJo=o(" (DistilBERT model)"),VJo=l(),kv=a("li"),hfe=a("strong"),WJo=o("electra"),QJo=o(" \u2014 "),UN=a("a"),HJo=o("TFElectraForMaskedLM"),UJo=o(" (ELECTRA model)"),JJo=l(),xv=a("li"),pfe=a("strong"),YJo=o("flaubert"),KJo=o(" \u2014 "),JN=a("a"),ZJo=o("TFFlaubertWithLMHeadModel"),eYo=o(" (FlauBERT model)"),oYo=l(),Rv=a("li"),_fe=a("strong"),rYo=o("funnel"),tYo=o(" \u2014 "),YN=a("a"),aYo=o("TFFunnelForMaskedLM"),nYo=o(" (Funnel Transformer model)"),sYo=l(),Sv=a("li"),ufe=a("strong"),lYo=o("layoutlm"),iYo=o(" \u2014 "),KN=a("a"),dYo=o("TFLayoutLMForMaskedLM"),cYo=o(" (LayoutLM model)"),fYo=l(),Pv=a("li"),bfe=a("strong"),mYo=o("longformer"),gYo=o(" \u2014 "),ZN=a("a"),hYo=o("TFLongformerForMaskedLM"),pYo=o(" (Longformer model)"),_Yo=l(),$v=a("li"),vfe=a("strong"),uYo=o("mobilebert"),bYo=o(" \u2014 "),eD=a("a"),vYo=o("TFMobileBertForMaskedLM"),TYo=o(" (MobileBERT model)"),FYo=l(),Iv=a("li"),Tfe=a("strong"),CYo=o("mpnet"),MYo=o(" \u2014 "),oD=a("a"),EYo=o("TFMPNetForMaskedLM"),yYo=o(" (MPNet model)"),wYo=l(),jv=a("li"),Ffe=a("strong"),AYo=o("rembert"),LYo=o(" \u2014 "),rD=a("a"),BYo=o("TFRemBertForMaskedLM"),kYo=o(" (RemBERT model)"),xYo=l(),Nv=a("li"),Cfe=a("strong"),RYo=o("roberta"),SYo=o(" \u2014 "),tD=a("a"),PYo=o("TFRobertaForMaskedLM"),$Yo=o(" (RoBERTa model)"),IYo=l(),Dv=a("li"),Mfe=a("strong"),jYo=o("roformer"),NYo=o(" \u2014 "),aD=a("a"),DYo=o("TFRoFormerForMaskedLM"),qYo=o(" (RoFormer model)"),OYo=l(),qv=a("li"),Efe=a("strong"),GYo=o("tapas"),XYo=o(" \u2014 "),nD=a("a"),zYo=o("TFTapasForMaskedLM"),VYo=o(" (TAPAS model)"),WYo=l(),Ov=a("li"),yfe=a("strong"),QYo=o("xlm"),HYo=o(" \u2014 "),sD=a("a"),UYo=o("TFXLMWithLMHeadModel"),JYo=o(" (XLM model)"),YYo=l(),Gv=a("li"),wfe=a("strong"),KYo=o("xlm-roberta"),ZYo=o(" \u2014 "),lD=a("a"),eKo=o("TFXLMRobertaForMaskedLM"),oKo=o(" (XLM-RoBERTa model)"),rKo=l(),Afe=a("p"),tKo=o("Examples:"),aKo=l(),f(Ay.$$.fragment),P6e=l(),Zd=a("h2"),Xv=a("a"),Lfe=a("span"),f(Ly.$$.fragment),nKo=l(),Bfe=a("span"),sKo=o("TFAutoModelForSeq2SeqLM"),$6e=l(),pr=a("div"),f(By.$$.fragment),lKo=l(),ec=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kfe=a("code"),dKo=o("from_pretrained()"),cKo=o("class method or the "),xfe=a("code"),fKo=o("from_config()"),mKo=o(`class
method.`),gKo=l(),ky=a("p"),hKo=o("This class cannot be instantiated directly using "),Rfe=a("code"),pKo=o("__init__()"),_Ko=o(" (throws an error)."),uKo=l(),st=a("div"),f(xy.$$.fragment),bKo=l(),Sfe=a("p"),vKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),TKo=l(),oc=a("p"),FKo=o(`Note:
Loading a model from its configuration file does `),Pfe=a("strong"),CKo=o("not"),MKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$fe=a("code"),EKo=o("from_pretrained()"),yKo=o("to load the model weights."),wKo=l(),Ife=a("p"),AKo=o("Examples:"),LKo=l(),f(Ry.$$.fragment),BKo=l(),uo=a("div"),f(Sy.$$.fragment),kKo=l(),jfe=a("p"),xKo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RKo=l(),tn=a("p"),SKo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),PKo=o("model_type"),$Ko=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),IKo=o("pretrained_model_name_or_path"),jKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),NKo=o("pretrained_model_name_or_path"),DKo=o(":"),qKo=l(),pe=a("ul"),zv=a("li"),Ofe=a("strong"),OKo=o("bart"),GKo=o(" \u2014 "),iD=a("a"),XKo=o("TFBartForConditionalGeneration"),zKo=o(" (BART model)"),VKo=l(),Vv=a("li"),Gfe=a("strong"),WKo=o("blenderbot"),QKo=o(" \u2014 "),dD=a("a"),HKo=o("TFBlenderbotForConditionalGeneration"),UKo=o(" (Blenderbot model)"),JKo=l(),Wv=a("li"),Xfe=a("strong"),YKo=o("blenderbot-small"),KKo=o(" \u2014 "),cD=a("a"),ZKo=o("TFBlenderbotSmallForConditionalGeneration"),eZo=o(" (BlenderbotSmall model)"),oZo=l(),Qv=a("li"),zfe=a("strong"),rZo=o("encoder-decoder"),tZo=o(" \u2014 "),fD=a("a"),aZo=o("TFEncoderDecoderModel"),nZo=o(" (Encoder decoder model)"),sZo=l(),Hv=a("li"),Vfe=a("strong"),lZo=o("led"),iZo=o(" \u2014 "),mD=a("a"),dZo=o("TFLEDForConditionalGeneration"),cZo=o(" (LED model)"),fZo=l(),Uv=a("li"),Wfe=a("strong"),mZo=o("marian"),gZo=o(" \u2014 "),gD=a("a"),hZo=o("TFMarianMTModel"),pZo=o(" (Marian model)"),_Zo=l(),Jv=a("li"),Qfe=a("strong"),uZo=o("mbart"),bZo=o(" \u2014 "),hD=a("a"),vZo=o("TFMBartForConditionalGeneration"),TZo=o(" (mBART model)"),FZo=l(),Yv=a("li"),Hfe=a("strong"),CZo=o("mt5"),MZo=o(" \u2014 "),pD=a("a"),EZo=o("TFMT5ForConditionalGeneration"),yZo=o(" (mT5 model)"),wZo=l(),Kv=a("li"),Ufe=a("strong"),AZo=o("pegasus"),LZo=o(" \u2014 "),_D=a("a"),BZo=o("TFPegasusForConditionalGeneration"),kZo=o(" (Pegasus model)"),xZo=l(),Zv=a("li"),Jfe=a("strong"),RZo=o("t5"),SZo=o(" \u2014 "),uD=a("a"),PZo=o("TFT5ForConditionalGeneration"),$Zo=o(" (T5 model)"),IZo=l(),Yfe=a("p"),jZo=o("Examples:"),NZo=l(),f(Py.$$.fragment),I6e=l(),rc=a("h2"),eT=a("a"),Kfe=a("span"),f($y.$$.fragment),DZo=l(),Zfe=a("span"),qZo=o("TFAutoModelForSequenceClassification"),j6e=l(),_r=a("div"),f(Iy.$$.fragment),OZo=l(),tc=a("p"),GZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eme=a("code"),XZo=o("from_pretrained()"),zZo=o("class method or the "),ome=a("code"),VZo=o("from_config()"),WZo=o(`class
method.`),QZo=l(),jy=a("p"),HZo=o("This class cannot be instantiated directly using "),rme=a("code"),UZo=o("__init__()"),JZo=o(" (throws an error)."),YZo=l(),lt=a("div"),f(Ny.$$.fragment),KZo=l(),tme=a("p"),ZZo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eer=l(),ac=a("p"),oer=o(`Note:
Loading a model from its configuration file does `),ame=a("strong"),rer=o("not"),ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nme=a("code"),aer=o("from_pretrained()"),ner=o("to load the model weights."),ser=l(),sme=a("p"),ler=o("Examples:"),ier=l(),f(Dy.$$.fragment),der=l(),bo=a("div"),f(qy.$$.fragment),cer=l(),lme=a("p"),fer=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),mer=l(),an=a("p"),ger=o("The model class to instantiate is selected based on the "),ime=a("code"),her=o("model_type"),per=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),_er=o("pretrained_model_name_or_path"),uer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),ber=o("pretrained_model_name_or_path"),ver=o(":"),Ter=l(),X=a("ul"),oT=a("li"),fme=a("strong"),Fer=o("albert"),Cer=o(" \u2014 "),bD=a("a"),Mer=o("TFAlbertForSequenceClassification"),Eer=o(" (ALBERT model)"),yer=l(),rT=a("li"),mme=a("strong"),wer=o("bert"),Aer=o(" \u2014 "),vD=a("a"),Ler=o("TFBertForSequenceClassification"),Ber=o(" (BERT model)"),ker=l(),tT=a("li"),gme=a("strong"),xer=o("camembert"),Rer=o(" \u2014 "),TD=a("a"),Ser=o("TFCamembertForSequenceClassification"),Per=o(" (CamemBERT model)"),$er=l(),aT=a("li"),hme=a("strong"),Ier=o("convbert"),jer=o(" \u2014 "),FD=a("a"),Ner=o("TFConvBertForSequenceClassification"),Der=o(" (ConvBERT model)"),qer=l(),nT=a("li"),pme=a("strong"),Oer=o("ctrl"),Ger=o(" \u2014 "),CD=a("a"),Xer=o("TFCTRLForSequenceClassification"),zer=o(" (CTRL model)"),Ver=l(),sT=a("li"),_me=a("strong"),Wer=o("deberta"),Qer=o(" \u2014 "),MD=a("a"),Her=o("TFDebertaForSequenceClassification"),Uer=o(" (DeBERTa model)"),Jer=l(),lT=a("li"),ume=a("strong"),Yer=o("deberta-v2"),Ker=o(" \u2014 "),ED=a("a"),Zer=o("TFDebertaV2ForSequenceClassification"),eor=o(" (DeBERTa-v2 model)"),oor=l(),iT=a("li"),bme=a("strong"),ror=o("distilbert"),tor=o(" \u2014 "),yD=a("a"),aor=o("TFDistilBertForSequenceClassification"),nor=o(" (DistilBERT model)"),sor=l(),dT=a("li"),vme=a("strong"),lor=o("electra"),ior=o(" \u2014 "),wD=a("a"),dor=o("TFElectraForSequenceClassification"),cor=o(" (ELECTRA model)"),mor=l(),cT=a("li"),Tme=a("strong"),gor=o("flaubert"),hor=o(" \u2014 "),AD=a("a"),por=o("TFFlaubertForSequenceClassification"),_or=o(" (FlauBERT model)"),uor=l(),fT=a("li"),Fme=a("strong"),bor=o("funnel"),vor=o(" \u2014 "),LD=a("a"),Tor=o("TFFunnelForSequenceClassification"),For=o(" (Funnel Transformer model)"),Cor=l(),mT=a("li"),Cme=a("strong"),Mor=o("gpt2"),Eor=o(" \u2014 "),BD=a("a"),yor=o("TFGPT2ForSequenceClassification"),wor=o(" (OpenAI GPT-2 model)"),Aor=l(),gT=a("li"),Mme=a("strong"),Lor=o("layoutlm"),Bor=o(" \u2014 "),kD=a("a"),kor=o("TFLayoutLMForSequenceClassification"),xor=o(" (LayoutLM model)"),Ror=l(),hT=a("li"),Eme=a("strong"),Sor=o("longformer"),Por=o(" \u2014 "),xD=a("a"),$or=o("TFLongformerForSequenceClassification"),Ior=o(" (Longformer model)"),jor=l(),pT=a("li"),yme=a("strong"),Nor=o("mobilebert"),Dor=o(" \u2014 "),RD=a("a"),qor=o("TFMobileBertForSequenceClassification"),Oor=o(" (MobileBERT model)"),Gor=l(),_T=a("li"),wme=a("strong"),Xor=o("mpnet"),zor=o(" \u2014 "),SD=a("a"),Vor=o("TFMPNetForSequenceClassification"),Wor=o(" (MPNet model)"),Qor=l(),uT=a("li"),Ame=a("strong"),Hor=o("openai-gpt"),Uor=o(" \u2014 "),PD=a("a"),Jor=o("TFOpenAIGPTForSequenceClassification"),Yor=o(" (OpenAI GPT model)"),Kor=l(),bT=a("li"),Lme=a("strong"),Zor=o("rembert"),err=o(" \u2014 "),$D=a("a"),orr=o("TFRemBertForSequenceClassification"),rrr=o(" (RemBERT model)"),trr=l(),vT=a("li"),Bme=a("strong"),arr=o("roberta"),nrr=o(" \u2014 "),ID=a("a"),srr=o("TFRobertaForSequenceClassification"),lrr=o(" (RoBERTa model)"),irr=l(),TT=a("li"),kme=a("strong"),drr=o("roformer"),crr=o(" \u2014 "),jD=a("a"),frr=o("TFRoFormerForSequenceClassification"),mrr=o(" (RoFormer model)"),grr=l(),FT=a("li"),xme=a("strong"),hrr=o("tapas"),prr=o(" \u2014 "),ND=a("a"),_rr=o("TFTapasForSequenceClassification"),urr=o(" (TAPAS model)"),brr=l(),CT=a("li"),Rme=a("strong"),vrr=o("transfo-xl"),Trr=o(" \u2014 "),DD=a("a"),Frr=o("TFTransfoXLForSequenceClassification"),Crr=o(" (Transformer-XL model)"),Mrr=l(),MT=a("li"),Sme=a("strong"),Err=o("xlm"),yrr=o(" \u2014 "),qD=a("a"),wrr=o("TFXLMForSequenceClassification"),Arr=o(" (XLM model)"),Lrr=l(),ET=a("li"),Pme=a("strong"),Brr=o("xlm-roberta"),krr=o(" \u2014 "),OD=a("a"),xrr=o("TFXLMRobertaForSequenceClassification"),Rrr=o(" (XLM-RoBERTa model)"),Srr=l(),yT=a("li"),$me=a("strong"),Prr=o("xlnet"),$rr=o(" \u2014 "),GD=a("a"),Irr=o("TFXLNetForSequenceClassification"),jrr=o(" (XLNet model)"),Nrr=l(),Ime=a("p"),Drr=o("Examples:"),qrr=l(),f(Oy.$$.fragment),N6e=l(),nc=a("h2"),wT=a("a"),jme=a("span"),f(Gy.$$.fragment),Orr=l(),Nme=a("span"),Grr=o("TFAutoModelForMultipleChoice"),D6e=l(),ur=a("div"),f(Xy.$$.fragment),Xrr=l(),sc=a("p"),zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dme=a("code"),Vrr=o("from_pretrained()"),Wrr=o("class method or the "),qme=a("code"),Qrr=o("from_config()"),Hrr=o(`class
method.`),Urr=l(),zy=a("p"),Jrr=o("This class cannot be instantiated directly using "),Ome=a("code"),Yrr=o("__init__()"),Krr=o(" (throws an error)."),Zrr=l(),it=a("div"),f(Vy.$$.fragment),etr=l(),Gme=a("p"),otr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rtr=l(),lc=a("p"),ttr=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),atr=o("not"),ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zme=a("code"),str=o("from_pretrained()"),ltr=o("to load the model weights."),itr=l(),Vme=a("p"),dtr=o("Examples:"),ctr=l(),f(Wy.$$.fragment),ftr=l(),vo=a("div"),f(Qy.$$.fragment),mtr=l(),Wme=a("p"),gtr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),htr=l(),nn=a("p"),ptr=o("The model class to instantiate is selected based on the "),Qme=a("code"),_tr=o("model_type"),utr=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),btr=o("pretrained_model_name_or_path"),vtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),Ttr=o("pretrained_model_name_or_path"),Ftr=o(":"),Ctr=l(),te=a("ul"),AT=a("li"),Jme=a("strong"),Mtr=o("albert"),Etr=o(" \u2014 "),XD=a("a"),ytr=o("TFAlbertForMultipleChoice"),wtr=o(" (ALBERT model)"),Atr=l(),LT=a("li"),Yme=a("strong"),Ltr=o("bert"),Btr=o(" \u2014 "),zD=a("a"),ktr=o("TFBertForMultipleChoice"),xtr=o(" (BERT model)"),Rtr=l(),BT=a("li"),Kme=a("strong"),Str=o("camembert"),Ptr=o(" \u2014 "),VD=a("a"),$tr=o("TFCamembertForMultipleChoice"),Itr=o(" (CamemBERT model)"),jtr=l(),kT=a("li"),Zme=a("strong"),Ntr=o("convbert"),Dtr=o(" \u2014 "),WD=a("a"),qtr=o("TFConvBertForMultipleChoice"),Otr=o(" (ConvBERT model)"),Gtr=l(),xT=a("li"),ege=a("strong"),Xtr=o("distilbert"),ztr=o(" \u2014 "),QD=a("a"),Vtr=o("TFDistilBertForMultipleChoice"),Wtr=o(" (DistilBERT model)"),Qtr=l(),RT=a("li"),oge=a("strong"),Htr=o("electra"),Utr=o(" \u2014 "),HD=a("a"),Jtr=o("TFElectraForMultipleChoice"),Ytr=o(" (ELECTRA model)"),Ktr=l(),ST=a("li"),rge=a("strong"),Ztr=o("flaubert"),ear=o(" \u2014 "),UD=a("a"),oar=o("TFFlaubertForMultipleChoice"),rar=o(" (FlauBERT model)"),tar=l(),PT=a("li"),tge=a("strong"),aar=o("funnel"),nar=o(" \u2014 "),JD=a("a"),sar=o("TFFunnelForMultipleChoice"),lar=o(" (Funnel Transformer model)"),iar=l(),$T=a("li"),age=a("strong"),dar=o("longformer"),car=o(" \u2014 "),YD=a("a"),far=o("TFLongformerForMultipleChoice"),mar=o(" (Longformer model)"),gar=l(),IT=a("li"),nge=a("strong"),har=o("mobilebert"),par=o(" \u2014 "),KD=a("a"),_ar=o("TFMobileBertForMultipleChoice"),uar=o(" (MobileBERT model)"),bar=l(),jT=a("li"),sge=a("strong"),Tar=o("mpnet"),Far=o(" \u2014 "),ZD=a("a"),Car=o("TFMPNetForMultipleChoice"),Mar=o(" (MPNet model)"),Ear=l(),NT=a("li"),lge=a("strong"),yar=o("rembert"),war=o(" \u2014 "),eq=a("a"),Aar=o("TFRemBertForMultipleChoice"),Lar=o(" (RemBERT model)"),Bar=l(),DT=a("li"),ige=a("strong"),kar=o("roberta"),xar=o(" \u2014 "),oq=a("a"),Rar=o("TFRobertaForMultipleChoice"),Sar=o(" (RoBERTa model)"),Par=l(),qT=a("li"),dge=a("strong"),$ar=o("roformer"),Iar=o(" \u2014 "),rq=a("a"),jar=o("TFRoFormerForMultipleChoice"),Nar=o(" (RoFormer model)"),Dar=l(),OT=a("li"),cge=a("strong"),qar=o("xlm"),Oar=o(" \u2014 "),tq=a("a"),Gar=o("TFXLMForMultipleChoice"),Xar=o(" (XLM model)"),zar=l(),GT=a("li"),fge=a("strong"),Var=o("xlm-roberta"),War=o(" \u2014 "),aq=a("a"),Qar=o("TFXLMRobertaForMultipleChoice"),Har=o(" (XLM-RoBERTa model)"),Uar=l(),XT=a("li"),mge=a("strong"),Jar=o("xlnet"),Yar=o(" \u2014 "),nq=a("a"),Kar=o("TFXLNetForMultipleChoice"),Zar=o(" (XLNet model)"),enr=l(),gge=a("p"),onr=o("Examples:"),rnr=l(),f(Hy.$$.fragment),q6e=l(),ic=a("h2"),zT=a("a"),hge=a("span"),f(Uy.$$.fragment),tnr=l(),pge=a("span"),anr=o("TFAutoModelForTableQuestionAnswering"),O6e=l(),br=a("div"),f(Jy.$$.fragment),nnr=l(),dc=a("p"),snr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_ge=a("code"),lnr=o("from_pretrained()"),inr=o("class method or the "),uge=a("code"),dnr=o("from_config()"),cnr=o(`class
method.`),fnr=l(),Yy=a("p"),mnr=o("This class cannot be instantiated directly using "),bge=a("code"),gnr=o("__init__()"),hnr=o(" (throws an error)."),pnr=l(),dt=a("div"),f(Ky.$$.fragment),_nr=l(),vge=a("p"),unr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bnr=l(),cc=a("p"),vnr=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),Tnr=o("not"),Fnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fge=a("code"),Cnr=o("from_pretrained()"),Mnr=o("to load the model weights."),Enr=l(),Cge=a("p"),ynr=o("Examples:"),wnr=l(),f(Zy.$$.fragment),Anr=l(),To=a("div"),f(ew.$$.fragment),Lnr=l(),Mge=a("p"),Bnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),knr=l(),sn=a("p"),xnr=o("The model class to instantiate is selected based on the "),Ege=a("code"),Rnr=o("model_type"),Snr=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),Pnr=o("pretrained_model_name_or_path"),$nr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),Inr=o("pretrained_model_name_or_path"),jnr=o(":"),Nnr=l(),Age=a("ul"),VT=a("li"),Lge=a("strong"),Dnr=o("tapas"),qnr=o(" \u2014 "),sq=a("a"),Onr=o("TFTapasForQuestionAnswering"),Gnr=o(" (TAPAS model)"),Xnr=l(),Bge=a("p"),znr=o("Examples:"),Vnr=l(),f(ow.$$.fragment),G6e=l(),fc=a("h2"),WT=a("a"),kge=a("span"),f(rw.$$.fragment),Wnr=l(),xge=a("span"),Qnr=o("TFAutoModelForTokenClassification"),X6e=l(),vr=a("div"),f(tw.$$.fragment),Hnr=l(),mc=a("p"),Unr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rge=a("code"),Jnr=o("from_pretrained()"),Ynr=o("class method or the "),Sge=a("code"),Knr=o("from_config()"),Znr=o(`class
method.`),esr=l(),aw=a("p"),osr=o("This class cannot be instantiated directly using "),Pge=a("code"),rsr=o("__init__()"),tsr=o(" (throws an error)."),asr=l(),ct=a("div"),f(nw.$$.fragment),nsr=l(),$ge=a("p"),ssr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lsr=l(),gc=a("p"),isr=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),dsr=o("not"),csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jge=a("code"),fsr=o("from_pretrained()"),msr=o("to load the model weights."),gsr=l(),Nge=a("p"),hsr=o("Examples:"),psr=l(),f(sw.$$.fragment),_sr=l(),Fo=a("div"),f(lw.$$.fragment),usr=l(),Dge=a("p"),bsr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vsr=l(),ln=a("p"),Tsr=o("The model class to instantiate is selected based on the "),qge=a("code"),Fsr=o("model_type"),Csr=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),Msr=o("pretrained_model_name_or_path"),Esr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),ysr=o("pretrained_model_name_or_path"),wsr=o(":"),Asr=l(),K=a("ul"),QT=a("li"),Xge=a("strong"),Lsr=o("albert"),Bsr=o(" \u2014 "),lq=a("a"),ksr=o("TFAlbertForTokenClassification"),xsr=o(" (ALBERT model)"),Rsr=l(),HT=a("li"),zge=a("strong"),Ssr=o("bert"),Psr=o(" \u2014 "),iq=a("a"),$sr=o("TFBertForTokenClassification"),Isr=o(" (BERT model)"),jsr=l(),UT=a("li"),Vge=a("strong"),Nsr=o("camembert"),Dsr=o(" \u2014 "),dq=a("a"),qsr=o("TFCamembertForTokenClassification"),Osr=o(" (CamemBERT model)"),Gsr=l(),JT=a("li"),Wge=a("strong"),Xsr=o("convbert"),zsr=o(" \u2014 "),cq=a("a"),Vsr=o("TFConvBertForTokenClassification"),Wsr=o(" (ConvBERT model)"),Qsr=l(),YT=a("li"),Qge=a("strong"),Hsr=o("deberta"),Usr=o(" \u2014 "),fq=a("a"),Jsr=o("TFDebertaForTokenClassification"),Ysr=o(" (DeBERTa model)"),Ksr=l(),KT=a("li"),Hge=a("strong"),Zsr=o("deberta-v2"),elr=o(" \u2014 "),mq=a("a"),olr=o("TFDebertaV2ForTokenClassification"),rlr=o(" (DeBERTa-v2 model)"),tlr=l(),ZT=a("li"),Uge=a("strong"),alr=o("distilbert"),nlr=o(" \u2014 "),gq=a("a"),slr=o("TFDistilBertForTokenClassification"),llr=o(" (DistilBERT model)"),ilr=l(),e7=a("li"),Jge=a("strong"),dlr=o("electra"),clr=o(" \u2014 "),hq=a("a"),flr=o("TFElectraForTokenClassification"),mlr=o(" (ELECTRA model)"),glr=l(),o7=a("li"),Yge=a("strong"),hlr=o("flaubert"),plr=o(" \u2014 "),pq=a("a"),_lr=o("TFFlaubertForTokenClassification"),ulr=o(" (FlauBERT model)"),blr=l(),r7=a("li"),Kge=a("strong"),vlr=o("funnel"),Tlr=o(" \u2014 "),_q=a("a"),Flr=o("TFFunnelForTokenClassification"),Clr=o(" (Funnel Transformer model)"),Mlr=l(),t7=a("li"),Zge=a("strong"),Elr=o("layoutlm"),ylr=o(" \u2014 "),uq=a("a"),wlr=o("TFLayoutLMForTokenClassification"),Alr=o(" (LayoutLM model)"),Llr=l(),a7=a("li"),ehe=a("strong"),Blr=o("longformer"),klr=o(" \u2014 "),bq=a("a"),xlr=o("TFLongformerForTokenClassification"),Rlr=o(" (Longformer model)"),Slr=l(),n7=a("li"),ohe=a("strong"),Plr=o("mobilebert"),$lr=o(" \u2014 "),vq=a("a"),Ilr=o("TFMobileBertForTokenClassification"),jlr=o(" (MobileBERT model)"),Nlr=l(),s7=a("li"),rhe=a("strong"),Dlr=o("mpnet"),qlr=o(" \u2014 "),Tq=a("a"),Olr=o("TFMPNetForTokenClassification"),Glr=o(" (MPNet model)"),Xlr=l(),l7=a("li"),the=a("strong"),zlr=o("rembert"),Vlr=o(" \u2014 "),Fq=a("a"),Wlr=o("TFRemBertForTokenClassification"),Qlr=o(" (RemBERT model)"),Hlr=l(),i7=a("li"),ahe=a("strong"),Ulr=o("roberta"),Jlr=o(" \u2014 "),Cq=a("a"),Ylr=o("TFRobertaForTokenClassification"),Klr=o(" (RoBERTa model)"),Zlr=l(),d7=a("li"),nhe=a("strong"),eir=o("roformer"),oir=o(" \u2014 "),Mq=a("a"),rir=o("TFRoFormerForTokenClassification"),tir=o(" (RoFormer model)"),air=l(),c7=a("li"),she=a("strong"),nir=o("xlm"),sir=o(" \u2014 "),Eq=a("a"),lir=o("TFXLMForTokenClassification"),iir=o(" (XLM model)"),dir=l(),f7=a("li"),lhe=a("strong"),cir=o("xlm-roberta"),fir=o(" \u2014 "),yq=a("a"),mir=o("TFXLMRobertaForTokenClassification"),gir=o(" (XLM-RoBERTa model)"),hir=l(),m7=a("li"),ihe=a("strong"),pir=o("xlnet"),_ir=o(" \u2014 "),wq=a("a"),uir=o("TFXLNetForTokenClassification"),bir=o(" (XLNet model)"),vir=l(),dhe=a("p"),Tir=o("Examples:"),Fir=l(),f(iw.$$.fragment),z6e=l(),hc=a("h2"),g7=a("a"),che=a("span"),f(dw.$$.fragment),Cir=l(),fhe=a("span"),Mir=o("TFAutoModelForQuestionAnswering"),V6e=l(),Tr=a("div"),f(cw.$$.fragment),Eir=l(),pc=a("p"),yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mhe=a("code"),wir=o("from_pretrained()"),Air=o("class method or the "),ghe=a("code"),Lir=o("from_config()"),Bir=o(`class
method.`),kir=l(),fw=a("p"),xir=o("This class cannot be instantiated directly using "),hhe=a("code"),Rir=o("__init__()"),Sir=o(" (throws an error)."),Pir=l(),ft=a("div"),f(mw.$$.fragment),$ir=l(),phe=a("p"),Iir=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jir=l(),_c=a("p"),Nir=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),Dir=o("not"),qir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uhe=a("code"),Oir=o("from_pretrained()"),Gir=o("to load the model weights."),Xir=l(),bhe=a("p"),zir=o("Examples:"),Vir=l(),f(gw.$$.fragment),Wir=l(),Co=a("div"),f(hw.$$.fragment),Qir=l(),vhe=a("p"),Hir=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Uir=l(),dn=a("p"),Jir=o("The model class to instantiate is selected based on the "),The=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),Z=a("ul"),h7=a("li"),Mhe=a("strong"),adr=o("albert"),ndr=o(" \u2014 "),Aq=a("a"),sdr=o("TFAlbertForQuestionAnswering"),ldr=o(" (ALBERT model)"),idr=l(),p7=a("li"),Ehe=a("strong"),ddr=o("bert"),cdr=o(" \u2014 "),Lq=a("a"),fdr=o("TFBertForQuestionAnswering"),mdr=o(" (BERT model)"),gdr=l(),_7=a("li"),yhe=a("strong"),hdr=o("camembert"),pdr=o(" \u2014 "),Bq=a("a"),_dr=o("TFCamembertForQuestionAnswering"),udr=o(" (CamemBERT model)"),bdr=l(),u7=a("li"),whe=a("strong"),vdr=o("convbert"),Tdr=o(" \u2014 "),kq=a("a"),Fdr=o("TFConvBertForQuestionAnswering"),Cdr=o(" (ConvBERT model)"),Mdr=l(),b7=a("li"),Ahe=a("strong"),Edr=o("deberta"),ydr=o(" \u2014 "),xq=a("a"),wdr=o("TFDebertaForQuestionAnswering"),Adr=o(" (DeBERTa model)"),Ldr=l(),v7=a("li"),Lhe=a("strong"),Bdr=o("deberta-v2"),kdr=o(" \u2014 "),Rq=a("a"),xdr=o("TFDebertaV2ForQuestionAnswering"),Rdr=o(" (DeBERTa-v2 model)"),Sdr=l(),T7=a("li"),Bhe=a("strong"),Pdr=o("distilbert"),$dr=o(" \u2014 "),Sq=a("a"),Idr=o("TFDistilBertForQuestionAnswering"),jdr=o(" (DistilBERT model)"),Ndr=l(),F7=a("li"),khe=a("strong"),Ddr=o("electra"),qdr=o(" \u2014 "),Pq=a("a"),Odr=o("TFElectraForQuestionAnswering"),Gdr=o(" (ELECTRA model)"),Xdr=l(),C7=a("li"),xhe=a("strong"),zdr=o("flaubert"),Vdr=o(" \u2014 "),$q=a("a"),Wdr=o("TFFlaubertForQuestionAnsweringSimple"),Qdr=o(" (FlauBERT model)"),Hdr=l(),M7=a("li"),Rhe=a("strong"),Udr=o("funnel"),Jdr=o(" \u2014 "),Iq=a("a"),Ydr=o("TFFunnelForQuestionAnswering"),Kdr=o(" (Funnel Transformer model)"),Zdr=l(),E7=a("li"),She=a("strong"),ecr=o("longformer"),ocr=o(" \u2014 "),jq=a("a"),rcr=o("TFLongformerForQuestionAnswering"),tcr=o(" (Longformer model)"),acr=l(),y7=a("li"),Phe=a("strong"),ncr=o("mobilebert"),scr=o(" \u2014 "),Nq=a("a"),lcr=o("TFMobileBertForQuestionAnswering"),icr=o(" (MobileBERT model)"),dcr=l(),w7=a("li"),$he=a("strong"),ccr=o("mpnet"),fcr=o(" \u2014 "),Dq=a("a"),mcr=o("TFMPNetForQuestionAnswering"),gcr=o(" (MPNet model)"),hcr=l(),A7=a("li"),Ihe=a("strong"),pcr=o("rembert"),_cr=o(" \u2014 "),qq=a("a"),ucr=o("TFRemBertForQuestionAnswering"),bcr=o(" (RemBERT model)"),vcr=l(),L7=a("li"),jhe=a("strong"),Tcr=o("roberta"),Fcr=o(" \u2014 "),Oq=a("a"),Ccr=o("TFRobertaForQuestionAnswering"),Mcr=o(" (RoBERTa model)"),Ecr=l(),B7=a("li"),Nhe=a("strong"),ycr=o("roformer"),wcr=o(" \u2014 "),Gq=a("a"),Acr=o("TFRoFormerForQuestionAnswering"),Lcr=o(" (RoFormer model)"),Bcr=l(),k7=a("li"),Dhe=a("strong"),kcr=o("xlm"),xcr=o(" \u2014 "),Xq=a("a"),Rcr=o("TFXLMForQuestionAnsweringSimple"),Scr=o(" (XLM model)"),Pcr=l(),x7=a("li"),qhe=a("strong"),$cr=o("xlm-roberta"),Icr=o(" \u2014 "),zq=a("a"),jcr=o("TFXLMRobertaForQuestionAnswering"),Ncr=o(" (XLM-RoBERTa model)"),Dcr=l(),R7=a("li"),Ohe=a("strong"),qcr=o("xlnet"),Ocr=o(" \u2014 "),Vq=a("a"),Gcr=o("TFXLNetForQuestionAnsweringSimple"),Xcr=o(" (XLNet model)"),zcr=l(),Ghe=a("p"),Vcr=o("Examples:"),Wcr=l(),f(pw.$$.fragment),W6e=l(),uc=a("h2"),S7=a("a"),Xhe=a("span"),f(_w.$$.fragment),Qcr=l(),zhe=a("span"),Hcr=o("TFAutoModelForVision2Seq"),Q6e=l(),Fr=a("div"),f(uw.$$.fragment),Ucr=l(),bc=a("p"),Jcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vhe=a("code"),Ycr=o("from_pretrained()"),Kcr=o("class method or the "),Whe=a("code"),Zcr=o("from_config()"),efr=o(`class
method.`),ofr=l(),bw=a("p"),rfr=o("This class cannot be instantiated directly using "),Qhe=a("code"),tfr=o("__init__()"),afr=o(" (throws an error)."),nfr=l(),mt=a("div"),f(vw.$$.fragment),sfr=l(),Hhe=a("p"),lfr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ifr=l(),vc=a("p"),dfr=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),cfr=o("not"),ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jhe=a("code"),mfr=o("from_pretrained()"),gfr=o("to load the model weights."),hfr=l(),Yhe=a("p"),pfr=o("Examples:"),_fr=l(),f(Tw.$$.fragment),ufr=l(),Mo=a("div"),f(Fw.$$.fragment),bfr=l(),Khe=a("p"),vfr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tfr=l(),cn=a("p"),Ffr=o("The model class to instantiate is selected based on the "),Zhe=a("code"),Cfr=o("model_type"),Mfr=o(` property of the config object (either
passed as an argument or loaded from `),epe=a("code"),Efr=o("pretrained_model_name_or_path"),yfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=a("code"),wfr=o("pretrained_model_name_or_path"),Afr=o(":"),Lfr=l(),rpe=a("ul"),P7=a("li"),tpe=a("strong"),Bfr=o("vision-encoder-decoder"),kfr=o(" \u2014 "),Wq=a("a"),xfr=o("TFVisionEncoderDecoderModel"),Rfr=o(" (Vision Encoder decoder model)"),Sfr=l(),ape=a("p"),Pfr=o("Examples:"),$fr=l(),f(Cw.$$.fragment),H6e=l(),Tc=a("h2"),$7=a("a"),npe=a("span"),f(Mw.$$.fragment),Ifr=l(),spe=a("span"),jfr=o("FlaxAutoModel"),U6e=l(),Cr=a("div"),f(Ew.$$.fragment),Nfr=l(),Fc=a("p"),Dfr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lpe=a("code"),qfr=o("from_pretrained()"),Ofr=o("class method or the "),ipe=a("code"),Gfr=o("from_config()"),Xfr=o(`class
method.`),zfr=l(),yw=a("p"),Vfr=o("This class cannot be instantiated directly using "),dpe=a("code"),Wfr=o("__init__()"),Qfr=o(" (throws an error)."),Hfr=l(),gt=a("div"),f(ww.$$.fragment),Ufr=l(),cpe=a("p"),Jfr=o("Instantiates one of the base model classes of the library from a configuration."),Yfr=l(),Cc=a("p"),Kfr=o(`Note:
Loading a model from its configuration file does `),fpe=a("strong"),Zfr=o("not"),emr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=a("code"),omr=o("from_pretrained()"),rmr=o("to load the model weights."),tmr=l(),gpe=a("p"),amr=o("Examples:"),nmr=l(),f(Aw.$$.fragment),smr=l(),Eo=a("div"),f(Lw.$$.fragment),lmr=l(),hpe=a("p"),imr=o("Instantiate one of the base model classes of the library from a pretrained model."),dmr=l(),fn=a("p"),cmr=o("The model class to instantiate is selected based on the "),ppe=a("code"),fmr=o("model_type"),mmr=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=a("code"),pmr=o("pretrained_model_name_or_path"),_mr=o(":"),umr=l(),z=a("ul"),I7=a("li"),bpe=a("strong"),bmr=o("albert"),vmr=o(" \u2014 "),Qq=a("a"),Tmr=o("FlaxAlbertModel"),Fmr=o(" (ALBERT model)"),Cmr=l(),j7=a("li"),vpe=a("strong"),Mmr=o("bart"),Emr=o(" \u2014 "),Hq=a("a"),ymr=o("FlaxBartModel"),wmr=o(" (BART model)"),Amr=l(),N7=a("li"),Tpe=a("strong"),Lmr=o("beit"),Bmr=o(" \u2014 "),Uq=a("a"),kmr=o("FlaxBeitModel"),xmr=o(" (BEiT model)"),Rmr=l(),D7=a("li"),Fpe=a("strong"),Smr=o("bert"),Pmr=o(" \u2014 "),Jq=a("a"),$mr=o("FlaxBertModel"),Imr=o(" (BERT model)"),jmr=l(),q7=a("li"),Cpe=a("strong"),Nmr=o("big_bird"),Dmr=o(" \u2014 "),Yq=a("a"),qmr=o("FlaxBigBirdModel"),Omr=o(" (BigBird model)"),Gmr=l(),O7=a("li"),Mpe=a("strong"),Xmr=o("blenderbot"),zmr=o(" \u2014 "),Kq=a("a"),Vmr=o("FlaxBlenderbotModel"),Wmr=o(" (Blenderbot model)"),Qmr=l(),G7=a("li"),Epe=a("strong"),Hmr=o("blenderbot-small"),Umr=o(" \u2014 "),Zq=a("a"),Jmr=o("FlaxBlenderbotSmallModel"),Ymr=o(" (BlenderbotSmall model)"),Kmr=l(),X7=a("li"),ype=a("strong"),Zmr=o("clip"),egr=o(" \u2014 "),eO=a("a"),ogr=o("FlaxCLIPModel"),rgr=o(" (CLIP model)"),tgr=l(),z7=a("li"),wpe=a("strong"),agr=o("distilbert"),ngr=o(" \u2014 "),oO=a("a"),sgr=o("FlaxDistilBertModel"),lgr=o(" (DistilBERT model)"),igr=l(),V7=a("li"),Ape=a("strong"),dgr=o("electra"),cgr=o(" \u2014 "),rO=a("a"),fgr=o("FlaxElectraModel"),mgr=o(" (ELECTRA model)"),ggr=l(),W7=a("li"),Lpe=a("strong"),hgr=o("gpt2"),pgr=o(" \u2014 "),tO=a("a"),_gr=o("FlaxGPT2Model"),ugr=o(" (OpenAI GPT-2 model)"),bgr=l(),Q7=a("li"),Bpe=a("strong"),vgr=o("gpt_neo"),Tgr=o(" \u2014 "),aO=a("a"),Fgr=o("FlaxGPTNeoModel"),Cgr=o(" (GPT Neo model)"),Mgr=l(),H7=a("li"),kpe=a("strong"),Egr=o("gptj"),ygr=o(" \u2014 "),nO=a("a"),wgr=o("FlaxGPTJModel"),Agr=o(" (GPT-J model)"),Lgr=l(),U7=a("li"),xpe=a("strong"),Bgr=o("marian"),kgr=o(" \u2014 "),sO=a("a"),xgr=o("FlaxMarianModel"),Rgr=o(" (Marian model)"),Sgr=l(),J7=a("li"),Rpe=a("strong"),Pgr=o("mbart"),$gr=o(" \u2014 "),lO=a("a"),Igr=o("FlaxMBartModel"),jgr=o(" (mBART model)"),Ngr=l(),Y7=a("li"),Spe=a("strong"),Dgr=o("mt5"),qgr=o(" \u2014 "),iO=a("a"),Ogr=o("FlaxMT5Model"),Ggr=o(" (mT5 model)"),Xgr=l(),K7=a("li"),Ppe=a("strong"),zgr=o("pegasus"),Vgr=o(" \u2014 "),dO=a("a"),Wgr=o("FlaxPegasusModel"),Qgr=o(" (Pegasus model)"),Hgr=l(),Z7=a("li"),$pe=a("strong"),Ugr=o("roberta"),Jgr=o(" \u2014 "),cO=a("a"),Ygr=o("FlaxRobertaModel"),Kgr=o(" (RoBERTa model)"),Zgr=l(),eF=a("li"),Ipe=a("strong"),ehr=o("roformer"),ohr=o(" \u2014 "),fO=a("a"),rhr=o("FlaxRoFormerModel"),thr=o(" (RoFormer model)"),ahr=l(),oF=a("li"),jpe=a("strong"),nhr=o("t5"),shr=o(" \u2014 "),mO=a("a"),lhr=o("FlaxT5Model"),ihr=o(" (T5 model)"),dhr=l(),rF=a("li"),Npe=a("strong"),chr=o("vision-text-dual-encoder"),fhr=o(" \u2014 "),gO=a("a"),mhr=o("FlaxVisionTextDualEncoderModel"),ghr=o(" (VisionTextDualEncoder model)"),hhr=l(),tF=a("li"),Dpe=a("strong"),phr=o("vit"),_hr=o(" \u2014 "),hO=a("a"),uhr=o("FlaxViTModel"),bhr=o(" (ViT model)"),vhr=l(),aF=a("li"),qpe=a("strong"),Thr=o("wav2vec2"),Fhr=o(" \u2014 "),pO=a("a"),Chr=o("FlaxWav2Vec2Model"),Mhr=o(" (Wav2Vec2 model)"),Ehr=l(),nF=a("li"),Ope=a("strong"),yhr=o("xglm"),whr=o(" \u2014 "),Gpe=a("code"),Ahr=o("FlaxXGLMModel"),Lhr=o("(XGLM model)"),Bhr=l(),Xpe=a("p"),khr=o("Examples:"),xhr=l(),f(Bw.$$.fragment),J6e=l(),Mc=a("h2"),sF=a("a"),zpe=a("span"),f(kw.$$.fragment),Rhr=l(),Vpe=a("span"),Shr=o("FlaxAutoModelForCausalLM"),Y6e=l(),Mr=a("div"),f(xw.$$.fragment),Phr=l(),Ec=a("p"),$hr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wpe=a("code"),Ihr=o("from_pretrained()"),jhr=o("class method or the "),Qpe=a("code"),Nhr=o("from_config()"),Dhr=o(`class
method.`),qhr=l(),Rw=a("p"),Ohr=o("This class cannot be instantiated directly using "),Hpe=a("code"),Ghr=o("__init__()"),Xhr=o(" (throws an error)."),zhr=l(),ht=a("div"),f(Sw.$$.fragment),Vhr=l(),Upe=a("p"),Whr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qhr=l(),yc=a("p"),Hhr=o(`Note:
Loading a model from its configuration file does `),Jpe=a("strong"),Uhr=o("not"),Jhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=a("code"),Yhr=o("from_pretrained()"),Khr=o("to load the model weights."),Zhr=l(),Kpe=a("p"),epr=o("Examples:"),opr=l(),f(Pw.$$.fragment),rpr=l(),yo=a("div"),f($w.$$.fragment),tpr=l(),Zpe=a("p"),apr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),npr=l(),mn=a("p"),spr=o("The model class to instantiate is selected based on the "),e_e=a("code"),lpr=o("model_type"),ipr=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),dpr=o("pretrained_model_name_or_path"),cpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),fpr=o("pretrained_model_name_or_path"),mpr=o(":"),gpr=l(),gn=a("ul"),lF=a("li"),t_e=a("strong"),hpr=o("gpt2"),ppr=o(" \u2014 "),_O=a("a"),_pr=o("FlaxGPT2LMHeadModel"),upr=o(" (OpenAI GPT-2 model)"),bpr=l(),iF=a("li"),a_e=a("strong"),vpr=o("gpt_neo"),Tpr=o(" \u2014 "),uO=a("a"),Fpr=o("FlaxGPTNeoForCausalLM"),Cpr=o(" (GPT Neo model)"),Mpr=l(),dF=a("li"),n_e=a("strong"),Epr=o("gptj"),ypr=o(" \u2014 "),bO=a("a"),wpr=o("FlaxGPTJForCausalLM"),Apr=o(" (GPT-J model)"),Lpr=l(),cF=a("li"),s_e=a("strong"),Bpr=o("xglm"),kpr=o(" \u2014 "),l_e=a("code"),xpr=o("FlaxXGLMForCausalLM"),Rpr=o("(XGLM model)"),Spr=l(),i_e=a("p"),Ppr=o("Examples:"),$pr=l(),f(Iw.$$.fragment),K6e=l(),wc=a("h2"),fF=a("a"),d_e=a("span"),f(jw.$$.fragment),Ipr=l(),c_e=a("span"),jpr=o("FlaxAutoModelForPreTraining"),Z6e=l(),Er=a("div"),f(Nw.$$.fragment),Npr=l(),Ac=a("p"),Dpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f_e=a("code"),qpr=o("from_pretrained()"),Opr=o("class method or the "),m_e=a("code"),Gpr=o("from_config()"),Xpr=o(`class
method.`),zpr=l(),Dw=a("p"),Vpr=o("This class cannot be instantiated directly using "),g_e=a("code"),Wpr=o("__init__()"),Qpr=o(" (throws an error)."),Hpr=l(),pt=a("div"),f(qw.$$.fragment),Upr=l(),h_e=a("p"),Jpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ypr=l(),Lc=a("p"),Kpr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Zpr=o("not"),e_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=a("code"),o_r=o("from_pretrained()"),r_r=o("to load the model weights."),t_r=l(),u_e=a("p"),a_r=o("Examples:"),n_r=l(),f(Ow.$$.fragment),s_r=l(),wo=a("div"),f(Gw.$$.fragment),l_r=l(),b_e=a("p"),i_r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),d_r=l(),hn=a("p"),c_r=o("The model class to instantiate is selected based on the "),v_e=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),p_r=o("pretrained_model_name_or_path"),__r=o(":"),u_r=l(),fe=a("ul"),mF=a("li"),C_e=a("strong"),b_r=o("albert"),v_r=o(" \u2014 "),vO=a("a"),T_r=o("FlaxAlbertForPreTraining"),F_r=o(" (ALBERT model)"),C_r=l(),gF=a("li"),M_e=a("strong"),M_r=o("bart"),E_r=o(" \u2014 "),TO=a("a"),y_r=o("FlaxBartForConditionalGeneration"),w_r=o(" (BART model)"),A_r=l(),hF=a("li"),E_e=a("strong"),L_r=o("bert"),B_r=o(" \u2014 "),FO=a("a"),k_r=o("FlaxBertForPreTraining"),x_r=o(" (BERT model)"),R_r=l(),pF=a("li"),y_e=a("strong"),S_r=o("big_bird"),P_r=o(" \u2014 "),CO=a("a"),$_r=o("FlaxBigBirdForPreTraining"),I_r=o(" (BigBird model)"),j_r=l(),_F=a("li"),w_e=a("strong"),N_r=o("electra"),D_r=o(" \u2014 "),MO=a("a"),q_r=o("FlaxElectraForPreTraining"),O_r=o(" (ELECTRA model)"),G_r=l(),uF=a("li"),A_e=a("strong"),X_r=o("mbart"),z_r=o(" \u2014 "),EO=a("a"),V_r=o("FlaxMBartForConditionalGeneration"),W_r=o(" (mBART model)"),Q_r=l(),bF=a("li"),L_e=a("strong"),H_r=o("mt5"),U_r=o(" \u2014 "),yO=a("a"),J_r=o("FlaxMT5ForConditionalGeneration"),Y_r=o(" (mT5 model)"),K_r=l(),vF=a("li"),B_e=a("strong"),Z_r=o("roberta"),eur=o(" \u2014 "),wO=a("a"),our=o("FlaxRobertaForMaskedLM"),rur=o(" (RoBERTa model)"),tur=l(),TF=a("li"),k_e=a("strong"),aur=o("roformer"),nur=o(" \u2014 "),AO=a("a"),sur=o("FlaxRoFormerForMaskedLM"),lur=o(" (RoFormer model)"),iur=l(),FF=a("li"),x_e=a("strong"),dur=o("t5"),cur=o(" \u2014 "),LO=a("a"),fur=o("FlaxT5ForConditionalGeneration"),mur=o(" (T5 model)"),gur=l(),CF=a("li"),R_e=a("strong"),hur=o("wav2vec2"),pur=o(" \u2014 "),BO=a("a"),_ur=o("FlaxWav2Vec2ForPreTraining"),uur=o(" (Wav2Vec2 model)"),bur=l(),S_e=a("p"),vur=o("Examples:"),Tur=l(),f(Xw.$$.fragment),eLe=l(),Bc=a("h2"),MF=a("a"),P_e=a("span"),f(zw.$$.fragment),Fur=l(),$_e=a("span"),Cur=o("FlaxAutoModelForMaskedLM"),oLe=l(),yr=a("div"),f(Vw.$$.fragment),Mur=l(),kc=a("p"),Eur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),I_e=a("code"),yur=o("from_pretrained()"),wur=o("class method or the "),j_e=a("code"),Aur=o("from_config()"),Lur=o(`class
method.`),Bur=l(),Ww=a("p"),kur=o("This class cannot be instantiated directly using "),N_e=a("code"),xur=o("__init__()"),Rur=o(" (throws an error)."),Sur=l(),_t=a("div"),f(Qw.$$.fragment),Pur=l(),D_e=a("p"),$ur=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Iur=l(),xc=a("p"),jur=o(`Note:
Loading a model from its configuration file does `),q_e=a("strong"),Nur=o("not"),Dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),O_e=a("code"),qur=o("from_pretrained()"),Our=o("to load the model weights."),Gur=l(),G_e=a("p"),Xur=o("Examples:"),zur=l(),f(Hw.$$.fragment),Vur=l(),Ao=a("div"),f(Uw.$$.fragment),Wur=l(),X_e=a("p"),Qur=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Hur=l(),pn=a("p"),Uur=o("The model class to instantiate is selected based on the "),z_e=a("code"),Jur=o("model_type"),Yur=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),Kur=o("pretrained_model_name_or_path"),Zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),e1r=o("pretrained_model_name_or_path"),o1r=o(":"),r1r=l(),ve=a("ul"),EF=a("li"),Q_e=a("strong"),t1r=o("albert"),a1r=o(" \u2014 "),kO=a("a"),n1r=o("FlaxAlbertForMaskedLM"),s1r=o(" (ALBERT model)"),l1r=l(),yF=a("li"),H_e=a("strong"),i1r=o("bart"),d1r=o(" \u2014 "),xO=a("a"),c1r=o("FlaxBartForConditionalGeneration"),f1r=o(" (BART model)"),m1r=l(),wF=a("li"),U_e=a("strong"),g1r=o("bert"),h1r=o(" \u2014 "),RO=a("a"),p1r=o("FlaxBertForMaskedLM"),_1r=o(" (BERT model)"),u1r=l(),AF=a("li"),J_e=a("strong"),b1r=o("big_bird"),v1r=o(" \u2014 "),SO=a("a"),T1r=o("FlaxBigBirdForMaskedLM"),F1r=o(" (BigBird model)"),C1r=l(),LF=a("li"),Y_e=a("strong"),M1r=o("distilbert"),E1r=o(" \u2014 "),PO=a("a"),y1r=o("FlaxDistilBertForMaskedLM"),w1r=o(" (DistilBERT model)"),A1r=l(),BF=a("li"),K_e=a("strong"),L1r=o("electra"),B1r=o(" \u2014 "),$O=a("a"),k1r=o("FlaxElectraForMaskedLM"),x1r=o(" (ELECTRA model)"),R1r=l(),kF=a("li"),Z_e=a("strong"),S1r=o("mbart"),P1r=o(" \u2014 "),IO=a("a"),$1r=o("FlaxMBartForConditionalGeneration"),I1r=o(" (mBART model)"),j1r=l(),xF=a("li"),eue=a("strong"),N1r=o("roberta"),D1r=o(" \u2014 "),jO=a("a"),q1r=o("FlaxRobertaForMaskedLM"),O1r=o(" (RoBERTa model)"),G1r=l(),RF=a("li"),oue=a("strong"),X1r=o("roformer"),z1r=o(" \u2014 "),NO=a("a"),V1r=o("FlaxRoFormerForMaskedLM"),W1r=o(" (RoFormer model)"),Q1r=l(),rue=a("p"),H1r=o("Examples:"),U1r=l(),f(Jw.$$.fragment),rLe=l(),Rc=a("h2"),SF=a("a"),tue=a("span"),f(Yw.$$.fragment),J1r=l(),aue=a("span"),Y1r=o("FlaxAutoModelForSeq2SeqLM"),tLe=l(),wr=a("div"),f(Kw.$$.fragment),K1r=l(),Sc=a("p"),Z1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nue=a("code"),e4r=o("from_pretrained()"),o4r=o("class method or the "),sue=a("code"),r4r=o("from_config()"),t4r=o(`class
method.`),a4r=l(),Zw=a("p"),n4r=o("This class cannot be instantiated directly using "),lue=a("code"),s4r=o("__init__()"),l4r=o(" (throws an error)."),i4r=l(),ut=a("div"),f(eA.$$.fragment),d4r=l(),iue=a("p"),c4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f4r=l(),Pc=a("p"),m4r=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),g4r=o("not"),h4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=a("code"),p4r=o("from_pretrained()"),_4r=o("to load the model weights."),u4r=l(),fue=a("p"),b4r=o("Examples:"),v4r=l(),f(oA.$$.fragment),T4r=l(),Lo=a("div"),f(rA.$$.fragment),F4r=l(),mue=a("p"),C4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),M4r=l(),_n=a("p"),E4r=o("The model class to instantiate is selected based on the "),gue=a("code"),y4r=o("model_type"),w4r=o(` property of the config object (either
passed as an argument or loaded from `),hue=a("code"),A4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=a("code"),B4r=o("pretrained_model_name_or_path"),k4r=o(":"),x4r=l(),Te=a("ul"),PF=a("li"),_ue=a("strong"),R4r=o("bart"),S4r=o(" \u2014 "),DO=a("a"),P4r=o("FlaxBartForConditionalGeneration"),$4r=o(" (BART model)"),I4r=l(),$F=a("li"),uue=a("strong"),j4r=o("blenderbot"),N4r=o(" \u2014 "),qO=a("a"),D4r=o("FlaxBlenderbotForConditionalGeneration"),q4r=o(" (Blenderbot model)"),O4r=l(),IF=a("li"),bue=a("strong"),G4r=o("blenderbot-small"),X4r=o(" \u2014 "),OO=a("a"),z4r=o("FlaxBlenderbotSmallForConditionalGeneration"),V4r=o(" (BlenderbotSmall model)"),W4r=l(),jF=a("li"),vue=a("strong"),Q4r=o("encoder-decoder"),H4r=o(" \u2014 "),GO=a("a"),U4r=o("FlaxEncoderDecoderModel"),J4r=o(" (Encoder decoder model)"),Y4r=l(),NF=a("li"),Tue=a("strong"),K4r=o("marian"),Z4r=o(" \u2014 "),XO=a("a"),ebr=o("FlaxMarianMTModel"),obr=o(" (Marian model)"),rbr=l(),DF=a("li"),Fue=a("strong"),tbr=o("mbart"),abr=o(" \u2014 "),zO=a("a"),nbr=o("FlaxMBartForConditionalGeneration"),sbr=o(" (mBART model)"),lbr=l(),qF=a("li"),Cue=a("strong"),ibr=o("mt5"),dbr=o(" \u2014 "),VO=a("a"),cbr=o("FlaxMT5ForConditionalGeneration"),fbr=o(" (mT5 model)"),mbr=l(),OF=a("li"),Mue=a("strong"),gbr=o("pegasus"),hbr=o(" \u2014 "),WO=a("a"),pbr=o("FlaxPegasusForConditionalGeneration"),_br=o(" (Pegasus model)"),ubr=l(),GF=a("li"),Eue=a("strong"),bbr=o("t5"),vbr=o(" \u2014 "),QO=a("a"),Tbr=o("FlaxT5ForConditionalGeneration"),Fbr=o(" (T5 model)"),Cbr=l(),yue=a("p"),Mbr=o("Examples:"),Ebr=l(),f(tA.$$.fragment),aLe=l(),$c=a("h2"),XF=a("a"),wue=a("span"),f(aA.$$.fragment),ybr=l(),Aue=a("span"),wbr=o("FlaxAutoModelForSequenceClassification"),nLe=l(),Ar=a("div"),f(nA.$$.fragment),Abr=l(),Ic=a("p"),Lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lue=a("code"),Bbr=o("from_pretrained()"),kbr=o("class method or the "),Bue=a("code"),xbr=o("from_config()"),Rbr=o(`class
method.`),Sbr=l(),sA=a("p"),Pbr=o("This class cannot be instantiated directly using "),kue=a("code"),$br=o("__init__()"),Ibr=o(" (throws an error)."),jbr=l(),bt=a("div"),f(lA.$$.fragment),Nbr=l(),xue=a("p"),Dbr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qbr=l(),jc=a("p"),Obr=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),Gbr=o("not"),Xbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sue=a("code"),zbr=o("from_pretrained()"),Vbr=o("to load the model weights."),Wbr=l(),Pue=a("p"),Qbr=o("Examples:"),Hbr=l(),f(iA.$$.fragment),Ubr=l(),Bo=a("div"),f(dA.$$.fragment),Jbr=l(),$ue=a("p"),Ybr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kbr=l(),un=a("p"),Zbr=o("The model class to instantiate is selected based on the "),Iue=a("code"),e5r=o("model_type"),o5r=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),a5r=o("pretrained_model_name_or_path"),n5r=o(":"),s5r=l(),Fe=a("ul"),zF=a("li"),Due=a("strong"),l5r=o("albert"),i5r=o(" \u2014 "),HO=a("a"),d5r=o("FlaxAlbertForSequenceClassification"),c5r=o(" (ALBERT model)"),f5r=l(),VF=a("li"),que=a("strong"),m5r=o("bart"),g5r=o(" \u2014 "),UO=a("a"),h5r=o("FlaxBartForSequenceClassification"),p5r=o(" (BART model)"),_5r=l(),WF=a("li"),Oue=a("strong"),u5r=o("bert"),b5r=o(" \u2014 "),JO=a("a"),v5r=o("FlaxBertForSequenceClassification"),T5r=o(" (BERT model)"),F5r=l(),QF=a("li"),Gue=a("strong"),C5r=o("big_bird"),M5r=o(" \u2014 "),YO=a("a"),E5r=o("FlaxBigBirdForSequenceClassification"),y5r=o(" (BigBird model)"),w5r=l(),HF=a("li"),Xue=a("strong"),A5r=o("distilbert"),L5r=o(" \u2014 "),KO=a("a"),B5r=o("FlaxDistilBertForSequenceClassification"),k5r=o(" (DistilBERT model)"),x5r=l(),UF=a("li"),zue=a("strong"),R5r=o("electra"),S5r=o(" \u2014 "),ZO=a("a"),P5r=o("FlaxElectraForSequenceClassification"),$5r=o(" (ELECTRA model)"),I5r=l(),JF=a("li"),Vue=a("strong"),j5r=o("mbart"),N5r=o(" \u2014 "),eG=a("a"),D5r=o("FlaxMBartForSequenceClassification"),q5r=o(" (mBART model)"),O5r=l(),YF=a("li"),Wue=a("strong"),G5r=o("roberta"),X5r=o(" \u2014 "),oG=a("a"),z5r=o("FlaxRobertaForSequenceClassification"),V5r=o(" (RoBERTa model)"),W5r=l(),KF=a("li"),Que=a("strong"),Q5r=o("roformer"),H5r=o(" \u2014 "),rG=a("a"),U5r=o("FlaxRoFormerForSequenceClassification"),J5r=o(" (RoFormer model)"),Y5r=l(),Hue=a("p"),K5r=o("Examples:"),Z5r=l(),f(cA.$$.fragment),sLe=l(),Nc=a("h2"),ZF=a("a"),Uue=a("span"),f(fA.$$.fragment),e2r=l(),Jue=a("span"),o2r=o("FlaxAutoModelForQuestionAnswering"),lLe=l(),Lr=a("div"),f(mA.$$.fragment),r2r=l(),Dc=a("p"),t2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yue=a("code"),a2r=o("from_pretrained()"),n2r=o("class method or the "),Kue=a("code"),s2r=o("from_config()"),l2r=o(`class
method.`),i2r=l(),gA=a("p"),d2r=o("This class cannot be instantiated directly using "),Zue=a("code"),c2r=o("__init__()"),f2r=o(" (throws an error)."),m2r=l(),vt=a("div"),f(hA.$$.fragment),g2r=l(),e1e=a("p"),h2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p2r=l(),qc=a("p"),_2r=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),u2r=o("not"),b2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r1e=a("code"),v2r=o("from_pretrained()"),T2r=o("to load the model weights."),F2r=l(),t1e=a("p"),C2r=o("Examples:"),M2r=l(),f(pA.$$.fragment),E2r=l(),ko=a("div"),f(_A.$$.fragment),y2r=l(),a1e=a("p"),w2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A2r=l(),bn=a("p"),L2r=o("The model class to instantiate is selected based on the "),n1e=a("code"),B2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),x2r=o("pretrained_model_name_or_path"),R2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),S2r=o("pretrained_model_name_or_path"),P2r=o(":"),$2r=l(),Ce=a("ul"),e9=a("li"),i1e=a("strong"),I2r=o("albert"),j2r=o(" \u2014 "),tG=a("a"),N2r=o("FlaxAlbertForQuestionAnswering"),D2r=o(" (ALBERT model)"),q2r=l(),o9=a("li"),d1e=a("strong"),O2r=o("bart"),G2r=o(" \u2014 "),aG=a("a"),X2r=o("FlaxBartForQuestionAnswering"),z2r=o(" (BART model)"),V2r=l(),r9=a("li"),c1e=a("strong"),W2r=o("bert"),Q2r=o(" \u2014 "),nG=a("a"),H2r=o("FlaxBertForQuestionAnswering"),U2r=o(" (BERT model)"),J2r=l(),t9=a("li"),f1e=a("strong"),Y2r=o("big_bird"),K2r=o(" \u2014 "),sG=a("a"),Z2r=o("FlaxBigBirdForQuestionAnswering"),evr=o(" (BigBird model)"),ovr=l(),a9=a("li"),m1e=a("strong"),rvr=o("distilbert"),tvr=o(" \u2014 "),lG=a("a"),avr=o("FlaxDistilBertForQuestionAnswering"),nvr=o(" (DistilBERT model)"),svr=l(),n9=a("li"),g1e=a("strong"),lvr=o("electra"),ivr=o(" \u2014 "),iG=a("a"),dvr=o("FlaxElectraForQuestionAnswering"),cvr=o(" (ELECTRA model)"),fvr=l(),s9=a("li"),h1e=a("strong"),mvr=o("mbart"),gvr=o(" \u2014 "),dG=a("a"),hvr=o("FlaxMBartForQuestionAnswering"),pvr=o(" (mBART model)"),_vr=l(),l9=a("li"),p1e=a("strong"),uvr=o("roberta"),bvr=o(" \u2014 "),cG=a("a"),vvr=o("FlaxRobertaForQuestionAnswering"),Tvr=o(" (RoBERTa model)"),Fvr=l(),i9=a("li"),_1e=a("strong"),Cvr=o("roformer"),Mvr=o(" \u2014 "),fG=a("a"),Evr=o("FlaxRoFormerForQuestionAnswering"),yvr=o(" (RoFormer model)"),wvr=l(),u1e=a("p"),Avr=o("Examples:"),Lvr=l(),f(uA.$$.fragment),iLe=l(),Oc=a("h2"),d9=a("a"),b1e=a("span"),f(bA.$$.fragment),Bvr=l(),v1e=a("span"),kvr=o("FlaxAutoModelForTokenClassification"),dLe=l(),Br=a("div"),f(vA.$$.fragment),xvr=l(),Gc=a("p"),Rvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T1e=a("code"),Svr=o("from_pretrained()"),Pvr=o("class method or the "),F1e=a("code"),$vr=o("from_config()"),Ivr=o(`class
method.`),jvr=l(),TA=a("p"),Nvr=o("This class cannot be instantiated directly using "),C1e=a("code"),Dvr=o("__init__()"),qvr=o(" (throws an error)."),Ovr=l(),Tt=a("div"),f(FA.$$.fragment),Gvr=l(),M1e=a("p"),Xvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zvr=l(),Xc=a("p"),Vvr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),Wvr=o("not"),Qvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=a("code"),Hvr=o("from_pretrained()"),Uvr=o("to load the model weights."),Jvr=l(),w1e=a("p"),Yvr=o("Examples:"),Kvr=l(),f(CA.$$.fragment),Zvr=l(),xo=a("div"),f(MA.$$.fragment),eTr=l(),A1e=a("p"),oTr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rTr=l(),vn=a("p"),tTr=o("The model class to instantiate is selected based on the "),L1e=a("code"),aTr=o("model_type"),nTr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),sTr=o("pretrained_model_name_or_path"),lTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),iTr=o("pretrained_model_name_or_path"),dTr=o(":"),cTr=l(),no=a("ul"),c9=a("li"),x1e=a("strong"),fTr=o("albert"),mTr=o(" \u2014 "),mG=a("a"),gTr=o("FlaxAlbertForTokenClassification"),hTr=o(" (ALBERT model)"),pTr=l(),f9=a("li"),R1e=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),gG=a("a"),bTr=o("FlaxBertForTokenClassification"),vTr=o(" (BERT model)"),TTr=l(),m9=a("li"),S1e=a("strong"),FTr=o("big_bird"),CTr=o(" \u2014 "),hG=a("a"),MTr=o("FlaxBigBirdForTokenClassification"),ETr=o(" (BigBird model)"),yTr=l(),g9=a("li"),P1e=a("strong"),wTr=o("distilbert"),ATr=o(" \u2014 "),pG=a("a"),LTr=o("FlaxDistilBertForTokenClassification"),BTr=o(" (DistilBERT model)"),kTr=l(),h9=a("li"),$1e=a("strong"),xTr=o("electra"),RTr=o(" \u2014 "),_G=a("a"),STr=o("FlaxElectraForTokenClassification"),PTr=o(" (ELECTRA model)"),$Tr=l(),p9=a("li"),I1e=a("strong"),ITr=o("roberta"),jTr=o(" \u2014 "),uG=a("a"),NTr=o("FlaxRobertaForTokenClassification"),DTr=o(" (RoBERTa model)"),qTr=l(),_9=a("li"),j1e=a("strong"),OTr=o("roformer"),GTr=o(" \u2014 "),bG=a("a"),XTr=o("FlaxRoFormerForTokenClassification"),zTr=o(" (RoFormer model)"),VTr=l(),N1e=a("p"),WTr=o("Examples:"),QTr=l(),f(EA.$$.fragment),cLe=l(),zc=a("h2"),u9=a("a"),D1e=a("span"),f(yA.$$.fragment),HTr=l(),q1e=a("span"),UTr=o("FlaxAutoModelForMultipleChoice"),fLe=l(),kr=a("div"),f(wA.$$.fragment),JTr=l(),Vc=a("p"),YTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),O1e=a("code"),KTr=o("from_pretrained()"),ZTr=o("class method or the "),G1e=a("code"),e7r=o("from_config()"),o7r=o(`class
method.`),r7r=l(),AA=a("p"),t7r=o("This class cannot be instantiated directly using "),X1e=a("code"),a7r=o("__init__()"),n7r=o(" (throws an error)."),s7r=l(),Ft=a("div"),f(LA.$$.fragment),l7r=l(),z1e=a("p"),i7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d7r=l(),Wc=a("p"),c7r=o(`Note:
Loading a model from its configuration file does `),V1e=a("strong"),f7r=o("not"),m7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=a("code"),g7r=o("from_pretrained()"),h7r=o("to load the model weights."),p7r=l(),Q1e=a("p"),_7r=o("Examples:"),u7r=l(),f(BA.$$.fragment),b7r=l(),Ro=a("div"),f(kA.$$.fragment),v7r=l(),H1e=a("p"),T7r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F7r=l(),Tn=a("p"),C7r=o("The model class to instantiate is selected based on the "),U1e=a("code"),M7r=o("model_type"),E7r=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),y7r=o("pretrained_model_name_or_path"),w7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),A7r=o("pretrained_model_name_or_path"),L7r=o(":"),B7r=l(),so=a("ul"),b9=a("li"),K1e=a("strong"),k7r=o("albert"),x7r=o(" \u2014 "),vG=a("a"),R7r=o("FlaxAlbertForMultipleChoice"),S7r=o(" (ALBERT model)"),P7r=l(),v9=a("li"),Z1e=a("strong"),$7r=o("bert"),I7r=o(" \u2014 "),TG=a("a"),j7r=o("FlaxBertForMultipleChoice"),N7r=o(" (BERT model)"),D7r=l(),T9=a("li"),e4e=a("strong"),q7r=o("big_bird"),O7r=o(" \u2014 "),FG=a("a"),G7r=o("FlaxBigBirdForMultipleChoice"),X7r=o(" (BigBird model)"),z7r=l(),F9=a("li"),o4e=a("strong"),V7r=o("distilbert"),W7r=o(" \u2014 "),CG=a("a"),Q7r=o("FlaxDistilBertForMultipleChoice"),H7r=o(" (DistilBERT model)"),U7r=l(),C9=a("li"),r4e=a("strong"),J7r=o("electra"),Y7r=o(" \u2014 "),MG=a("a"),K7r=o("FlaxElectraForMultipleChoice"),Z7r=o(" (ELECTRA model)"),eFr=l(),M9=a("li"),t4e=a("strong"),oFr=o("roberta"),rFr=o(" \u2014 "),EG=a("a"),tFr=o("FlaxRobertaForMultipleChoice"),aFr=o(" (RoBERTa model)"),nFr=l(),E9=a("li"),a4e=a("strong"),sFr=o("roformer"),lFr=o(" \u2014 "),yG=a("a"),iFr=o("FlaxRoFormerForMultipleChoice"),dFr=o(" (RoFormer model)"),cFr=l(),n4e=a("p"),fFr=o("Examples:"),mFr=l(),f(xA.$$.fragment),mLe=l(),Qc=a("h2"),y9=a("a"),s4e=a("span"),f(RA.$$.fragment),gFr=l(),l4e=a("span"),hFr=o("FlaxAutoModelForNextSentencePrediction"),gLe=l(),xr=a("div"),f(SA.$$.fragment),pFr=l(),Hc=a("p"),_Fr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),i4e=a("code"),uFr=o("from_pretrained()"),bFr=o("class method or the "),d4e=a("code"),vFr=o("from_config()"),TFr=o(`class
method.`),FFr=l(),PA=a("p"),CFr=o("This class cannot be instantiated directly using "),c4e=a("code"),MFr=o("__init__()"),EFr=o(" (throws an error)."),yFr=l(),Ct=a("div"),f($A.$$.fragment),wFr=l(),f4e=a("p"),AFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LFr=l(),Uc=a("p"),BFr=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),kFr=o("not"),xFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),g4e=a("code"),RFr=o("from_pretrained()"),SFr=o("to load the model weights."),PFr=l(),h4e=a("p"),$Fr=o("Examples:"),IFr=l(),f(IA.$$.fragment),jFr=l(),So=a("div"),f(jA.$$.fragment),NFr=l(),p4e=a("p"),DFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qFr=l(),Fn=a("p"),OFr=o("The model class to instantiate is selected based on the "),_4e=a("code"),GFr=o("model_type"),XFr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),zFr=o("pretrained_model_name_or_path"),VFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),WFr=o("pretrained_model_name_or_path"),QFr=o(":"),HFr=l(),v4e=a("ul"),w9=a("li"),T4e=a("strong"),UFr=o("bert"),JFr=o(" \u2014 "),wG=a("a"),YFr=o("FlaxBertForNextSentencePrediction"),KFr=o(" (BERT model)"),ZFr=l(),F4e=a("p"),e9r=o("Examples:"),o9r=l(),f(NA.$$.fragment),hLe=l(),Jc=a("h2"),A9=a("a"),C4e=a("span"),f(DA.$$.fragment),r9r=l(),M4e=a("span"),t9r=o("FlaxAutoModelForImageClassification"),pLe=l(),Rr=a("div"),f(qA.$$.fragment),a9r=l(),Yc=a("p"),n9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),E4e=a("code"),s9r=o("from_pretrained()"),l9r=o("class method or the "),y4e=a("code"),i9r=o("from_config()"),d9r=o(`class
method.`),c9r=l(),OA=a("p"),f9r=o("This class cannot be instantiated directly using "),w4e=a("code"),m9r=o("__init__()"),g9r=o(" (throws an error)."),h9r=l(),Mt=a("div"),f(GA.$$.fragment),p9r=l(),A4e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),u9r=l(),Kc=a("p"),b9r=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),v9r=o("not"),T9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),B4e=a("code"),F9r=o("from_pretrained()"),C9r=o("to load the model weights."),M9r=l(),k4e=a("p"),E9r=o("Examples:"),y9r=l(),f(XA.$$.fragment),w9r=l(),Po=a("div"),f(zA.$$.fragment),A9r=l(),x4e=a("p"),L9r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),B9r=l(),Cn=a("p"),k9r=o("The model class to instantiate is selected based on the "),R4e=a("code"),x9r=o("model_type"),R9r=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),S9r=o("pretrained_model_name_or_path"),P9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),$9r=o("pretrained_model_name_or_path"),I9r=o(":"),j9r=l(),VA=a("ul"),L9=a("li"),$4e=a("strong"),N9r=o("beit"),D9r=o(" \u2014 "),AG=a("a"),q9r=o("FlaxBeitForImageClassification"),O9r=o(" (BEiT model)"),G9r=l(),B9=a("li"),I4e=a("strong"),X9r=o("vit"),z9r=o(" \u2014 "),LG=a("a"),V9r=o("FlaxViTForImageClassification"),W9r=o(" (ViT model)"),Q9r=l(),j4e=a("p"),H9r=o("Examples:"),U9r=l(),f(WA.$$.fragment),_Le=l(),Zc=a("h2"),k9=a("a"),N4e=a("span"),f(QA.$$.fragment),J9r=l(),D4e=a("span"),Y9r=o("FlaxAutoModelForVision2Seq"),uLe=l(),Sr=a("div"),f(HA.$$.fragment),K9r=l(),ef=a("p"),Z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),q4e=a("code"),eCr=o("from_pretrained()"),oCr=o("class method or the "),O4e=a("code"),rCr=o("from_config()"),tCr=o(`class
method.`),aCr=l(),UA=a("p"),nCr=o("This class cannot be instantiated directly using "),G4e=a("code"),sCr=o("__init__()"),lCr=o(" (throws an error)."),iCr=l(),Et=a("div"),f(JA.$$.fragment),dCr=l(),X4e=a("p"),cCr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fCr=l(),of=a("p"),mCr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),gCr=o("not"),hCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V4e=a("code"),pCr=o("from_pretrained()"),_Cr=o("to load the model weights."),uCr=l(),W4e=a("p"),bCr=o("Examples:"),vCr=l(),f(YA.$$.fragment),TCr=l(),$o=a("div"),f(KA.$$.fragment),FCr=l(),Q4e=a("p"),CCr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MCr=l(),Mn=a("p"),ECr=o("The model class to instantiate is selected based on the "),H4e=a("code"),yCr=o("model_type"),wCr=o(` property of the config object (either
passed as an argument or loaded from `),U4e=a("code"),ACr=o("pretrained_model_name_or_path"),LCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),BCr=o("pretrained_model_name_or_path"),kCr=o(":"),xCr=l(),Y4e=a("ul"),x9=a("li"),K4e=a("strong"),RCr=o("vision-encoder-decoder"),SCr=o(" \u2014 "),BG=a("a"),PCr=o("FlaxVisionEncoderDecoderModel"),$Cr=o(" (Vision Encoder decoder model)"),ICr=l(),Z4e=a("p"),jCr=o("Examples:"),NCr=l(),f(ZA.$$.fragment),this.h()},l(d){const u=amt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),Ae=i(d),ie=n(d,"H1",{class:!0});var e0=s(ie);me=n(e0,"A",{id:!0,class:!0,href:!0});var ebe=s(me);ro=n(ebe,"SPAN",{});var obe=s(ro);m(ce.$$.fragment,obe),obe.forEach(t),ebe.forEach(t),ue=i(e0),jo=n(e0,"SPAN",{});var qCr=s(jo);mi=r(qCr,"Auto Classes"),qCr.forEach(t),e0.forEach(t),tf=i(d),Zt=n(d,"P",{});var vLe=s(Zt);gi=r(vLe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(vLe,"CODE",{});var OCr=s(hi);AC=r(OCr,"from_pretrained()"),OCr.forEach(t),af=r(vLe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),vLe.forEach(t),ye=i(d),lo=n(d,"P",{});var R9=s(lo);pi=r(R9,"Instantiating one of "),En=n(R9,"A",{href:!0});var GCr=s(En);LC=r(GCr,"AutoConfig"),GCr.forEach(t),yn=r(R9,", "),wn=n(R9,"A",{href:!0});var XCr=s(wn);BC=r(XCr,"AutoModel"),XCr.forEach(t),_i=r(R9,`, and
`),An=n(R9,"A",{href:!0});var zCr=s(An);kC=r(zCr,"AutoTokenizer"),zCr.forEach(t),ui=r(R9," will directly create a class of the relevant architecture. For instance"),R9.forEach(t),nf=i(d),m(Aa.$$.fragment,d),io=i(d),ge=n(d,"P",{});var TLe=s(ge);J0=r(TLe,"will create a model that is an instance of "),bi=n(TLe,"A",{href:!0});var VCr=s(bi);Y0=r(VCr,"BertModel"),VCr.forEach(t),K0=r(TLe,"."),TLe.forEach(t),No=i(d),La=n(d,"P",{});var FLe=s(La);Z0=r(FLe,"There is one class of "),sf=n(FLe,"CODE",{});var WCr=s(sf);e6=r(WCr,"AutoModel"),WCr.forEach(t),MBe=r(FLe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),FLe.forEach(t),M0e=i(d),vi=n(d,"H2",{class:!0});var CLe=s(vi);lf=n(CLe,"A",{id:!0,class:!0,href:!0});var QCr=s(lf);bz=n(QCr,"SPAN",{});var HCr=s(bz);m(xC.$$.fragment,HCr),HCr.forEach(t),QCr.forEach(t),EBe=i(CLe),vz=n(CLe,"SPAN",{});var UCr=s(vz);yBe=r(UCr,"Extending the Auto Classes"),UCr.forEach(t),CLe.forEach(t),E0e=i(d),Ln=n(d,"P",{});var kG=s(Ln);wBe=r(kG,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Tz=n(kG,"CODE",{});var JCr=s(Tz);ABe=r(JCr,"NewModel"),JCr.forEach(t),LBe=r(kG,", make sure you have a "),Fz=n(kG,"CODE",{});var YCr=s(Fz);BBe=r(YCr,"NewModelConfig"),YCr.forEach(t),kBe=r(kG,` then you can add those to the auto
classes like this:`),kG.forEach(t),y0e=i(d),m(RC.$$.fragment,d),w0e=i(d),o6=n(d,"P",{});var KCr=s(o6);xBe=r(KCr,"You will then be able to use the auto classes like you would usually do!"),KCr.forEach(t),A0e=i(d),m(df.$$.fragment,d),L0e=i(d),Ti=n(d,"H2",{class:!0});var MLe=s(Ti);cf=n(MLe,"A",{id:!0,class:!0,href:!0});var ZCr=s(cf);Cz=n(ZCr,"SPAN",{});var eMr=s(Cz);m(SC.$$.fragment,eMr),eMr.forEach(t),ZCr.forEach(t),RBe=i(MLe),Mz=n(MLe,"SPAN",{});var oMr=s(Mz);SBe=r(oMr,"AutoConfig"),oMr.forEach(t),MLe.forEach(t),B0e=i(d),Do=n(d,"DIV",{class:!0});var Es=s(Do);m(PC.$$.fragment,Es),PBe=i(Es),$C=n(Es,"P",{});var ELe=s($C);$Be=r(ELe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r6=n(ELe,"A",{href:!0});var rMr=s(r6);IBe=r(rMr,"from_pretrained()"),rMr.forEach(t),jBe=r(ELe," class method."),ELe.forEach(t),NBe=i(Es),IC=n(Es,"P",{});var yLe=s(IC);DBe=r(yLe,"This class cannot be instantiated directly using "),Ez=n(yLe,"CODE",{});var tMr=s(Ez);qBe=r(tMr,"__init__()"),tMr.forEach(t),OBe=r(yLe," (throws an error)."),yLe.forEach(t),GBe=i(Es),co=n(Es,"DIV",{class:!0});var oa=s(co);m(jC.$$.fragment,oa),XBe=i(oa),yz=n(oa,"P",{});var aMr=s(yz);zBe=r(aMr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),aMr.forEach(t),VBe=i(oa),Fi=n(oa,"P",{});var xG=s(Fi);WBe=r(xG,"The configuration class to instantiate is selected based on the "),wz=n(xG,"CODE",{});var nMr=s(wz);QBe=r(nMr,"model_type"),nMr.forEach(t),HBe=r(xG,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Az=n(xG,"CODE",{});var sMr=s(Az);UBe=r(sMr,"pretrained_model_name_or_path"),sMr.forEach(t),JBe=r(xG,":"),xG.forEach(t),YBe=i(oa),v=n(oa,"UL",{});var T=s(v);ff=n(T,"LI",{});var rbe=s(ff);Lz=n(rbe,"STRONG",{});var lMr=s(Lz);KBe=r(lMr,"albert"),lMr.forEach(t),ZBe=r(rbe," \u2014 "),t6=n(rbe,"A",{href:!0});var iMr=s(t6);eke=r(iMr,"AlbertConfig"),iMr.forEach(t),oke=r(rbe," (ALBERT model)"),rbe.forEach(t),rke=i(T),mf=n(T,"LI",{});var tbe=s(mf);Bz=n(tbe,"STRONG",{});var dMr=s(Bz);tke=r(dMr,"bart"),dMr.forEach(t),ake=r(tbe," \u2014 "),a6=n(tbe,"A",{href:!0});var cMr=s(a6);nke=r(cMr,"BartConfig"),cMr.forEach(t),ske=r(tbe," (BART model)"),tbe.forEach(t),lke=i(T),gf=n(T,"LI",{});var abe=s(gf);kz=n(abe,"STRONG",{});var fMr=s(kz);ike=r(fMr,"beit"),fMr.forEach(t),dke=r(abe," \u2014 "),n6=n(abe,"A",{href:!0});var mMr=s(n6);cke=r(mMr,"BeitConfig"),mMr.forEach(t),fke=r(abe," (BEiT model)"),abe.forEach(t),mke=i(T),hf=n(T,"LI",{});var nbe=s(hf);xz=n(nbe,"STRONG",{});var gMr=s(xz);gke=r(gMr,"bert"),gMr.forEach(t),hke=r(nbe," \u2014 "),s6=n(nbe,"A",{href:!0});var hMr=s(s6);pke=r(hMr,"BertConfig"),hMr.forEach(t),_ke=r(nbe," (BERT model)"),nbe.forEach(t),uke=i(T),pf=n(T,"LI",{});var sbe=s(pf);Rz=n(sbe,"STRONG",{});var pMr=s(Rz);bke=r(pMr,"bert-generation"),pMr.forEach(t),vke=r(sbe," \u2014 "),l6=n(sbe,"A",{href:!0});var _Mr=s(l6);Tke=r(_Mr,"BertGenerationConfig"),_Mr.forEach(t),Fke=r(sbe," (Bert Generation model)"),sbe.forEach(t),Cke=i(T),_f=n(T,"LI",{});var lbe=s(_f);Sz=n(lbe,"STRONG",{});var uMr=s(Sz);Mke=r(uMr,"big_bird"),uMr.forEach(t),Eke=r(lbe," \u2014 "),i6=n(lbe,"A",{href:!0});var bMr=s(i6);yke=r(bMr,"BigBirdConfig"),bMr.forEach(t),wke=r(lbe," (BigBird model)"),lbe.forEach(t),Ake=i(T),uf=n(T,"LI",{});var ibe=s(uf);Pz=n(ibe,"STRONG",{});var vMr=s(Pz);Lke=r(vMr,"bigbird_pegasus"),vMr.forEach(t),Bke=r(ibe," \u2014 "),d6=n(ibe,"A",{href:!0});var TMr=s(d6);kke=r(TMr,"BigBirdPegasusConfig"),TMr.forEach(t),xke=r(ibe," (BigBirdPegasus model)"),ibe.forEach(t),Rke=i(T),bf=n(T,"LI",{});var dbe=s(bf);$z=n(dbe,"STRONG",{});var FMr=s($z);Ske=r(FMr,"blenderbot"),FMr.forEach(t),Pke=r(dbe," \u2014 "),c6=n(dbe,"A",{href:!0});var CMr=s(c6);$ke=r(CMr,"BlenderbotConfig"),CMr.forEach(t),Ike=r(dbe," (Blenderbot model)"),dbe.forEach(t),jke=i(T),vf=n(T,"LI",{});var cbe=s(vf);Iz=n(cbe,"STRONG",{});var MMr=s(Iz);Nke=r(MMr,"blenderbot-small"),MMr.forEach(t),Dke=r(cbe," \u2014 "),f6=n(cbe,"A",{href:!0});var EMr=s(f6);qke=r(EMr,"BlenderbotSmallConfig"),EMr.forEach(t),Oke=r(cbe," (BlenderbotSmall model)"),cbe.forEach(t),Gke=i(T),Tf=n(T,"LI",{});var fbe=s(Tf);jz=n(fbe,"STRONG",{});var yMr=s(jz);Xke=r(yMr,"camembert"),yMr.forEach(t),zke=r(fbe," \u2014 "),m6=n(fbe,"A",{href:!0});var wMr=s(m6);Vke=r(wMr,"CamembertConfig"),wMr.forEach(t),Wke=r(fbe," (CamemBERT model)"),fbe.forEach(t),Qke=i(T),Ff=n(T,"LI",{});var mbe=s(Ff);Nz=n(mbe,"STRONG",{});var AMr=s(Nz);Hke=r(AMr,"canine"),AMr.forEach(t),Uke=r(mbe," \u2014 "),g6=n(mbe,"A",{href:!0});var LMr=s(g6);Jke=r(LMr,"CanineConfig"),LMr.forEach(t),Yke=r(mbe," (Canine model)"),mbe.forEach(t),Kke=i(T),Cf=n(T,"LI",{});var gbe=s(Cf);Dz=n(gbe,"STRONG",{});var BMr=s(Dz);Zke=r(BMr,"clip"),BMr.forEach(t),exe=r(gbe," \u2014 "),h6=n(gbe,"A",{href:!0});var kMr=s(h6);oxe=r(kMr,"CLIPConfig"),kMr.forEach(t),rxe=r(gbe," (CLIP model)"),gbe.forEach(t),txe=i(T),Mf=n(T,"LI",{});var hbe=s(Mf);qz=n(hbe,"STRONG",{});var xMr=s(qz);axe=r(xMr,"convbert"),xMr.forEach(t),nxe=r(hbe," \u2014 "),p6=n(hbe,"A",{href:!0});var RMr=s(p6);sxe=r(RMr,"ConvBertConfig"),RMr.forEach(t),lxe=r(hbe," (ConvBERT model)"),hbe.forEach(t),ixe=i(T),Ef=n(T,"LI",{});var pbe=s(Ef);Oz=n(pbe,"STRONG",{});var SMr=s(Oz);dxe=r(SMr,"convnext"),SMr.forEach(t),cxe=r(pbe," \u2014 "),Gz=n(pbe,"CODE",{});var PMr=s(Gz);fxe=r(PMr,"ConvNextConfig"),PMr.forEach(t),mxe=r(pbe,"(ConvNext model)"),pbe.forEach(t),gxe=i(T),yf=n(T,"LI",{});var _be=s(yf);Xz=n(_be,"STRONG",{});var $Mr=s(Xz);hxe=r($Mr,"ctrl"),$Mr.forEach(t),pxe=r(_be," \u2014 "),_6=n(_be,"A",{href:!0});var IMr=s(_6);_xe=r(IMr,"CTRLConfig"),IMr.forEach(t),uxe=r(_be," (CTRL model)"),_be.forEach(t),bxe=i(T),wf=n(T,"LI",{});var ube=s(wf);zz=n(ube,"STRONG",{});var jMr=s(zz);vxe=r(jMr,"deberta"),jMr.forEach(t),Txe=r(ube," \u2014 "),u6=n(ube,"A",{href:!0});var NMr=s(u6);Fxe=r(NMr,"DebertaConfig"),NMr.forEach(t),Cxe=r(ube," (DeBERTa model)"),ube.forEach(t),Mxe=i(T),Af=n(T,"LI",{});var bbe=s(Af);Vz=n(bbe,"STRONG",{});var DMr=s(Vz);Exe=r(DMr,"deberta-v2"),DMr.forEach(t),yxe=r(bbe," \u2014 "),b6=n(bbe,"A",{href:!0});var qMr=s(b6);wxe=r(qMr,"DebertaV2Config"),qMr.forEach(t),Axe=r(bbe," (DeBERTa-v2 model)"),bbe.forEach(t),Lxe=i(T),Lf=n(T,"LI",{});var vbe=s(Lf);Wz=n(vbe,"STRONG",{});var OMr=s(Wz);Bxe=r(OMr,"deit"),OMr.forEach(t),kxe=r(vbe," \u2014 "),v6=n(vbe,"A",{href:!0});var GMr=s(v6);xxe=r(GMr,"DeiTConfig"),GMr.forEach(t),Rxe=r(vbe," (DeiT model)"),vbe.forEach(t),Sxe=i(T),Bf=n(T,"LI",{});var Tbe=s(Bf);Qz=n(Tbe,"STRONG",{});var XMr=s(Qz);Pxe=r(XMr,"detr"),XMr.forEach(t),$xe=r(Tbe," \u2014 "),T6=n(Tbe,"A",{href:!0});var zMr=s(T6);Ixe=r(zMr,"DetrConfig"),zMr.forEach(t),jxe=r(Tbe," (DETR model)"),Tbe.forEach(t),Nxe=i(T),kf=n(T,"LI",{});var Fbe=s(kf);Hz=n(Fbe,"STRONG",{});var VMr=s(Hz);Dxe=r(VMr,"distilbert"),VMr.forEach(t),qxe=r(Fbe," \u2014 "),F6=n(Fbe,"A",{href:!0});var WMr=s(F6);Oxe=r(WMr,"DistilBertConfig"),WMr.forEach(t),Gxe=r(Fbe," (DistilBERT model)"),Fbe.forEach(t),Xxe=i(T),xf=n(T,"LI",{});var Cbe=s(xf);Uz=n(Cbe,"STRONG",{});var QMr=s(Uz);zxe=r(QMr,"dpr"),QMr.forEach(t),Vxe=r(Cbe," \u2014 "),C6=n(Cbe,"A",{href:!0});var HMr=s(C6);Wxe=r(HMr,"DPRConfig"),HMr.forEach(t),Qxe=r(Cbe," (DPR model)"),Cbe.forEach(t),Hxe=i(T),Rf=n(T,"LI",{});var Mbe=s(Rf);Jz=n(Mbe,"STRONG",{});var UMr=s(Jz);Uxe=r(UMr,"electra"),UMr.forEach(t),Jxe=r(Mbe," \u2014 "),M6=n(Mbe,"A",{href:!0});var JMr=s(M6);Yxe=r(JMr,"ElectraConfig"),JMr.forEach(t),Kxe=r(Mbe," (ELECTRA model)"),Mbe.forEach(t),Zxe=i(T),Sf=n(T,"LI",{});var Ebe=s(Sf);Yz=n(Ebe,"STRONG",{});var YMr=s(Yz);eRe=r(YMr,"encoder-decoder"),YMr.forEach(t),oRe=r(Ebe," \u2014 "),E6=n(Ebe,"A",{href:!0});var KMr=s(E6);rRe=r(KMr,"EncoderDecoderConfig"),KMr.forEach(t),tRe=r(Ebe," (Encoder decoder model)"),Ebe.forEach(t),aRe=i(T),Pf=n(T,"LI",{});var ybe=s(Pf);Kz=n(ybe,"STRONG",{});var ZMr=s(Kz);nRe=r(ZMr,"flaubert"),ZMr.forEach(t),sRe=r(ybe," \u2014 "),y6=n(ybe,"A",{href:!0});var eEr=s(y6);lRe=r(eEr,"FlaubertConfig"),eEr.forEach(t),iRe=r(ybe," (FlauBERT model)"),ybe.forEach(t),dRe=i(T),$f=n(T,"LI",{});var wbe=s($f);Zz=n(wbe,"STRONG",{});var oEr=s(Zz);cRe=r(oEr,"fnet"),oEr.forEach(t),fRe=r(wbe," \u2014 "),w6=n(wbe,"A",{href:!0});var rEr=s(w6);mRe=r(rEr,"FNetConfig"),rEr.forEach(t),gRe=r(wbe," (FNet model)"),wbe.forEach(t),hRe=i(T),If=n(T,"LI",{});var Abe=s(If);eV=n(Abe,"STRONG",{});var tEr=s(eV);pRe=r(tEr,"fsmt"),tEr.forEach(t),_Re=r(Abe," \u2014 "),A6=n(Abe,"A",{href:!0});var aEr=s(A6);uRe=r(aEr,"FSMTConfig"),aEr.forEach(t),bRe=r(Abe," (FairSeq Machine-Translation model)"),Abe.forEach(t),vRe=i(T),jf=n(T,"LI",{});var Lbe=s(jf);oV=n(Lbe,"STRONG",{});var nEr=s(oV);TRe=r(nEr,"funnel"),nEr.forEach(t),FRe=r(Lbe," \u2014 "),L6=n(Lbe,"A",{href:!0});var sEr=s(L6);CRe=r(sEr,"FunnelConfig"),sEr.forEach(t),MRe=r(Lbe," (Funnel Transformer model)"),Lbe.forEach(t),ERe=i(T),Nf=n(T,"LI",{});var Bbe=s(Nf);rV=n(Bbe,"STRONG",{});var lEr=s(rV);yRe=r(lEr,"gpt2"),lEr.forEach(t),wRe=r(Bbe," \u2014 "),B6=n(Bbe,"A",{href:!0});var iEr=s(B6);ARe=r(iEr,"GPT2Config"),iEr.forEach(t),LRe=r(Bbe," (OpenAI GPT-2 model)"),Bbe.forEach(t),BRe=i(T),Df=n(T,"LI",{});var kbe=s(Df);tV=n(kbe,"STRONG",{});var dEr=s(tV);kRe=r(dEr,"gpt_neo"),dEr.forEach(t),xRe=r(kbe," \u2014 "),k6=n(kbe,"A",{href:!0});var cEr=s(k6);RRe=r(cEr,"GPTNeoConfig"),cEr.forEach(t),SRe=r(kbe," (GPT Neo model)"),kbe.forEach(t),PRe=i(T),qf=n(T,"LI",{});var xbe=s(qf);aV=n(xbe,"STRONG",{});var fEr=s(aV);$Re=r(fEr,"gptj"),fEr.forEach(t),IRe=r(xbe," \u2014 "),x6=n(xbe,"A",{href:!0});var mEr=s(x6);jRe=r(mEr,"GPTJConfig"),mEr.forEach(t),NRe=r(xbe," (GPT-J model)"),xbe.forEach(t),DRe=i(T),Of=n(T,"LI",{});var Rbe=s(Of);nV=n(Rbe,"STRONG",{});var gEr=s(nV);qRe=r(gEr,"hubert"),gEr.forEach(t),ORe=r(Rbe," \u2014 "),R6=n(Rbe,"A",{href:!0});var hEr=s(R6);GRe=r(hEr,"HubertConfig"),hEr.forEach(t),XRe=r(Rbe," (Hubert model)"),Rbe.forEach(t),zRe=i(T),Gf=n(T,"LI",{});var Sbe=s(Gf);sV=n(Sbe,"STRONG",{});var pEr=s(sV);VRe=r(pEr,"ibert"),pEr.forEach(t),WRe=r(Sbe," \u2014 "),S6=n(Sbe,"A",{href:!0});var _Er=s(S6);QRe=r(_Er,"IBertConfig"),_Er.forEach(t),HRe=r(Sbe," (I-BERT model)"),Sbe.forEach(t),URe=i(T),Xf=n(T,"LI",{});var Pbe=s(Xf);lV=n(Pbe,"STRONG",{});var uEr=s(lV);JRe=r(uEr,"imagegpt"),uEr.forEach(t),YRe=r(Pbe," \u2014 "),P6=n(Pbe,"A",{href:!0});var bEr=s(P6);KRe=r(bEr,"ImageGPTConfig"),bEr.forEach(t),ZRe=r(Pbe," (ImageGPT model)"),Pbe.forEach(t),eSe=i(T),zf=n(T,"LI",{});var $be=s(zf);iV=n($be,"STRONG",{});var vEr=s(iV);oSe=r(vEr,"layoutlm"),vEr.forEach(t),rSe=r($be," \u2014 "),$6=n($be,"A",{href:!0});var TEr=s($6);tSe=r(TEr,"LayoutLMConfig"),TEr.forEach(t),aSe=r($be," (LayoutLM model)"),$be.forEach(t),nSe=i(T),Vf=n(T,"LI",{});var Ibe=s(Vf);dV=n(Ibe,"STRONG",{});var FEr=s(dV);sSe=r(FEr,"layoutlmv2"),FEr.forEach(t),lSe=r(Ibe," \u2014 "),I6=n(Ibe,"A",{href:!0});var CEr=s(I6);iSe=r(CEr,"LayoutLMv2Config"),CEr.forEach(t),dSe=r(Ibe," (LayoutLMv2 model)"),Ibe.forEach(t),cSe=i(T),Wf=n(T,"LI",{});var jbe=s(Wf);cV=n(jbe,"STRONG",{});var MEr=s(cV);fSe=r(MEr,"led"),MEr.forEach(t),mSe=r(jbe," \u2014 "),j6=n(jbe,"A",{href:!0});var EEr=s(j6);gSe=r(EEr,"LEDConfig"),EEr.forEach(t),hSe=r(jbe," (LED model)"),jbe.forEach(t),pSe=i(T),Qf=n(T,"LI",{});var Nbe=s(Qf);fV=n(Nbe,"STRONG",{});var yEr=s(fV);_Se=r(yEr,"longformer"),yEr.forEach(t),uSe=r(Nbe," \u2014 "),N6=n(Nbe,"A",{href:!0});var wEr=s(N6);bSe=r(wEr,"LongformerConfig"),wEr.forEach(t),vSe=r(Nbe," (Longformer model)"),Nbe.forEach(t),TSe=i(T),Hf=n(T,"LI",{});var Dbe=s(Hf);mV=n(Dbe,"STRONG",{});var AEr=s(mV);FSe=r(AEr,"luke"),AEr.forEach(t),CSe=r(Dbe," \u2014 "),D6=n(Dbe,"A",{href:!0});var LEr=s(D6);MSe=r(LEr,"LukeConfig"),LEr.forEach(t),ESe=r(Dbe," (LUKE model)"),Dbe.forEach(t),ySe=i(T),Uf=n(T,"LI",{});var qbe=s(Uf);gV=n(qbe,"STRONG",{});var BEr=s(gV);wSe=r(BEr,"lxmert"),BEr.forEach(t),ASe=r(qbe," \u2014 "),q6=n(qbe,"A",{href:!0});var kEr=s(q6);LSe=r(kEr,"LxmertConfig"),kEr.forEach(t),BSe=r(qbe," (LXMERT model)"),qbe.forEach(t),kSe=i(T),Jf=n(T,"LI",{});var Obe=s(Jf);hV=n(Obe,"STRONG",{});var xEr=s(hV);xSe=r(xEr,"m2m_100"),xEr.forEach(t),RSe=r(Obe," \u2014 "),O6=n(Obe,"A",{href:!0});var REr=s(O6);SSe=r(REr,"M2M100Config"),REr.forEach(t),PSe=r(Obe," (M2M100 model)"),Obe.forEach(t),$Se=i(T),Yf=n(T,"LI",{});var Gbe=s(Yf);pV=n(Gbe,"STRONG",{});var SEr=s(pV);ISe=r(SEr,"marian"),SEr.forEach(t),jSe=r(Gbe," \u2014 "),G6=n(Gbe,"A",{href:!0});var PEr=s(G6);NSe=r(PEr,"MarianConfig"),PEr.forEach(t),DSe=r(Gbe," (Marian model)"),Gbe.forEach(t),qSe=i(T),Kf=n(T,"LI",{});var Xbe=s(Kf);_V=n(Xbe,"STRONG",{});var $Er=s(_V);OSe=r($Er,"mbart"),$Er.forEach(t),GSe=r(Xbe," \u2014 "),X6=n(Xbe,"A",{href:!0});var IEr=s(X6);XSe=r(IEr,"MBartConfig"),IEr.forEach(t),zSe=r(Xbe," (mBART model)"),Xbe.forEach(t),VSe=i(T),Zf=n(T,"LI",{});var zbe=s(Zf);uV=n(zbe,"STRONG",{});var jEr=s(uV);WSe=r(jEr,"megatron-bert"),jEr.forEach(t),QSe=r(zbe," \u2014 "),z6=n(zbe,"A",{href:!0});var NEr=s(z6);HSe=r(NEr,"MegatronBertConfig"),NEr.forEach(t),USe=r(zbe," (MegatronBert model)"),zbe.forEach(t),JSe=i(T),em=n(T,"LI",{});var Vbe=s(em);bV=n(Vbe,"STRONG",{});var DEr=s(bV);YSe=r(DEr,"mobilebert"),DEr.forEach(t),KSe=r(Vbe," \u2014 "),V6=n(Vbe,"A",{href:!0});var qEr=s(V6);ZSe=r(qEr,"MobileBertConfig"),qEr.forEach(t),ePe=r(Vbe," (MobileBERT model)"),Vbe.forEach(t),oPe=i(T),om=n(T,"LI",{});var Wbe=s(om);vV=n(Wbe,"STRONG",{});var OEr=s(vV);rPe=r(OEr,"mpnet"),OEr.forEach(t),tPe=r(Wbe," \u2014 "),W6=n(Wbe,"A",{href:!0});var GEr=s(W6);aPe=r(GEr,"MPNetConfig"),GEr.forEach(t),nPe=r(Wbe," (MPNet model)"),Wbe.forEach(t),sPe=i(T),rm=n(T,"LI",{});var Qbe=s(rm);TV=n(Qbe,"STRONG",{});var XEr=s(TV);lPe=r(XEr,"mt5"),XEr.forEach(t),iPe=r(Qbe," \u2014 "),Q6=n(Qbe,"A",{href:!0});var zEr=s(Q6);dPe=r(zEr,"MT5Config"),zEr.forEach(t),cPe=r(Qbe," (mT5 model)"),Qbe.forEach(t),fPe=i(T),tm=n(T,"LI",{});var Hbe=s(tm);FV=n(Hbe,"STRONG",{});var VEr=s(FV);mPe=r(VEr,"nystromformer"),VEr.forEach(t),gPe=r(Hbe," \u2014 "),H6=n(Hbe,"A",{href:!0});var WEr=s(H6);hPe=r(WEr,"NystromformerConfig"),WEr.forEach(t),pPe=r(Hbe," (Nystromformer model)"),Hbe.forEach(t),_Pe=i(T),am=n(T,"LI",{});var Ube=s(am);CV=n(Ube,"STRONG",{});var QEr=s(CV);uPe=r(QEr,"openai-gpt"),QEr.forEach(t),bPe=r(Ube," \u2014 "),U6=n(Ube,"A",{href:!0});var HEr=s(U6);vPe=r(HEr,"OpenAIGPTConfig"),HEr.forEach(t),TPe=r(Ube," (OpenAI GPT model)"),Ube.forEach(t),FPe=i(T),nm=n(T,"LI",{});var Jbe=s(nm);MV=n(Jbe,"STRONG",{});var UEr=s(MV);CPe=r(UEr,"pegasus"),UEr.forEach(t),MPe=r(Jbe," \u2014 "),J6=n(Jbe,"A",{href:!0});var JEr=s(J6);EPe=r(JEr,"PegasusConfig"),JEr.forEach(t),yPe=r(Jbe," (Pegasus model)"),Jbe.forEach(t),wPe=i(T),sm=n(T,"LI",{});var Ybe=s(sm);EV=n(Ybe,"STRONG",{});var YEr=s(EV);APe=r(YEr,"perceiver"),YEr.forEach(t),LPe=r(Ybe," \u2014 "),Y6=n(Ybe,"A",{href:!0});var KEr=s(Y6);BPe=r(KEr,"PerceiverConfig"),KEr.forEach(t),kPe=r(Ybe," (Perceiver model)"),Ybe.forEach(t),xPe=i(T),lm=n(T,"LI",{});var Kbe=s(lm);yV=n(Kbe,"STRONG",{});var ZEr=s(yV);RPe=r(ZEr,"plbart"),ZEr.forEach(t),SPe=r(Kbe," \u2014 "),K6=n(Kbe,"A",{href:!0});var e3r=s(K6);PPe=r(e3r,"PLBartConfig"),e3r.forEach(t),$Pe=r(Kbe," (PLBart model)"),Kbe.forEach(t),IPe=i(T),im=n(T,"LI",{});var Zbe=s(im);wV=n(Zbe,"STRONG",{});var o3r=s(wV);jPe=r(o3r,"poolformer"),o3r.forEach(t),NPe=r(Zbe," \u2014 "),Z6=n(Zbe,"A",{href:!0});var r3r=s(Z6);DPe=r(r3r,"PoolFormerConfig"),r3r.forEach(t),qPe=r(Zbe," (PoolFormer model)"),Zbe.forEach(t),OPe=i(T),dm=n(T,"LI",{});var e5e=s(dm);AV=n(e5e,"STRONG",{});var t3r=s(AV);GPe=r(t3r,"prophetnet"),t3r.forEach(t),XPe=r(e5e," \u2014 "),eL=n(e5e,"A",{href:!0});var a3r=s(eL);zPe=r(a3r,"ProphetNetConfig"),a3r.forEach(t),VPe=r(e5e," (ProphetNet model)"),e5e.forEach(t),WPe=i(T),cm=n(T,"LI",{});var o5e=s(cm);LV=n(o5e,"STRONG",{});var n3r=s(LV);QPe=r(n3r,"qdqbert"),n3r.forEach(t),HPe=r(o5e," \u2014 "),oL=n(o5e,"A",{href:!0});var s3r=s(oL);UPe=r(s3r,"QDQBertConfig"),s3r.forEach(t),JPe=r(o5e," (QDQBert model)"),o5e.forEach(t),YPe=i(T),fm=n(T,"LI",{});var r5e=s(fm);BV=n(r5e,"STRONG",{});var l3r=s(BV);KPe=r(l3r,"rag"),l3r.forEach(t),ZPe=r(r5e," \u2014 "),rL=n(r5e,"A",{href:!0});var i3r=s(rL);e$e=r(i3r,"RagConfig"),i3r.forEach(t),o$e=r(r5e," (RAG model)"),r5e.forEach(t),r$e=i(T),mm=n(T,"LI",{});var t5e=s(mm);kV=n(t5e,"STRONG",{});var d3r=s(kV);t$e=r(d3r,"realm"),d3r.forEach(t),a$e=r(t5e," \u2014 "),tL=n(t5e,"A",{href:!0});var c3r=s(tL);n$e=r(c3r,"RealmConfig"),c3r.forEach(t),s$e=r(t5e," (Realm model)"),t5e.forEach(t),l$e=i(T),gm=n(T,"LI",{});var a5e=s(gm);xV=n(a5e,"STRONG",{});var f3r=s(xV);i$e=r(f3r,"reformer"),f3r.forEach(t),d$e=r(a5e," \u2014 "),aL=n(a5e,"A",{href:!0});var m3r=s(aL);c$e=r(m3r,"ReformerConfig"),m3r.forEach(t),f$e=r(a5e," (Reformer model)"),a5e.forEach(t),m$e=i(T),hm=n(T,"LI",{});var n5e=s(hm);RV=n(n5e,"STRONG",{});var g3r=s(RV);g$e=r(g3r,"rembert"),g3r.forEach(t),h$e=r(n5e," \u2014 "),nL=n(n5e,"A",{href:!0});var h3r=s(nL);p$e=r(h3r,"RemBertConfig"),h3r.forEach(t),_$e=r(n5e," (RemBERT model)"),n5e.forEach(t),u$e=i(T),pm=n(T,"LI",{});var s5e=s(pm);SV=n(s5e,"STRONG",{});var p3r=s(SV);b$e=r(p3r,"retribert"),p3r.forEach(t),v$e=r(s5e," \u2014 "),sL=n(s5e,"A",{href:!0});var _3r=s(sL);T$e=r(_3r,"RetriBertConfig"),_3r.forEach(t),F$e=r(s5e," (RetriBERT model)"),s5e.forEach(t),C$e=i(T),_m=n(T,"LI",{});var l5e=s(_m);PV=n(l5e,"STRONG",{});var u3r=s(PV);M$e=r(u3r,"roberta"),u3r.forEach(t),E$e=r(l5e," \u2014 "),lL=n(l5e,"A",{href:!0});var b3r=s(lL);y$e=r(b3r,"RobertaConfig"),b3r.forEach(t),w$e=r(l5e," (RoBERTa model)"),l5e.forEach(t),A$e=i(T),um=n(T,"LI",{});var i5e=s(um);$V=n(i5e,"STRONG",{});var v3r=s($V);L$e=r(v3r,"roformer"),v3r.forEach(t),B$e=r(i5e," \u2014 "),iL=n(i5e,"A",{href:!0});var T3r=s(iL);k$e=r(T3r,"RoFormerConfig"),T3r.forEach(t),x$e=r(i5e," (RoFormer model)"),i5e.forEach(t),R$e=i(T),bm=n(T,"LI",{});var d5e=s(bm);IV=n(d5e,"STRONG",{});var F3r=s(IV);S$e=r(F3r,"segformer"),F3r.forEach(t),P$e=r(d5e," \u2014 "),dL=n(d5e,"A",{href:!0});var C3r=s(dL);$$e=r(C3r,"SegformerConfig"),C3r.forEach(t),I$e=r(d5e," (SegFormer model)"),d5e.forEach(t),j$e=i(T),vm=n(T,"LI",{});var c5e=s(vm);jV=n(c5e,"STRONG",{});var M3r=s(jV);N$e=r(M3r,"sew"),M3r.forEach(t),D$e=r(c5e," \u2014 "),cL=n(c5e,"A",{href:!0});var E3r=s(cL);q$e=r(E3r,"SEWConfig"),E3r.forEach(t),O$e=r(c5e," (SEW model)"),c5e.forEach(t),G$e=i(T),Tm=n(T,"LI",{});var f5e=s(Tm);NV=n(f5e,"STRONG",{});var y3r=s(NV);X$e=r(y3r,"sew-d"),y3r.forEach(t),z$e=r(f5e," \u2014 "),fL=n(f5e,"A",{href:!0});var w3r=s(fL);V$e=r(w3r,"SEWDConfig"),w3r.forEach(t),W$e=r(f5e," (SEW-D model)"),f5e.forEach(t),Q$e=i(T),Fm=n(T,"LI",{});var m5e=s(Fm);DV=n(m5e,"STRONG",{});var A3r=s(DV);H$e=r(A3r,"speech-encoder-decoder"),A3r.forEach(t),U$e=r(m5e," \u2014 "),mL=n(m5e,"A",{href:!0});var L3r=s(mL);J$e=r(L3r,"SpeechEncoderDecoderConfig"),L3r.forEach(t),Y$e=r(m5e," (Speech Encoder decoder model)"),m5e.forEach(t),K$e=i(T),Cm=n(T,"LI",{});var g5e=s(Cm);qV=n(g5e,"STRONG",{});var B3r=s(qV);Z$e=r(B3r,"speech_to_text"),B3r.forEach(t),eIe=r(g5e," \u2014 "),gL=n(g5e,"A",{href:!0});var k3r=s(gL);oIe=r(k3r,"Speech2TextConfig"),k3r.forEach(t),rIe=r(g5e," (Speech2Text model)"),g5e.forEach(t),tIe=i(T),Mm=n(T,"LI",{});var h5e=s(Mm);OV=n(h5e,"STRONG",{});var x3r=s(OV);aIe=r(x3r,"speech_to_text_2"),x3r.forEach(t),nIe=r(h5e," \u2014 "),hL=n(h5e,"A",{href:!0});var R3r=s(hL);sIe=r(R3r,"Speech2Text2Config"),R3r.forEach(t),lIe=r(h5e," (Speech2Text2 model)"),h5e.forEach(t),iIe=i(T),Em=n(T,"LI",{});var p5e=s(Em);GV=n(p5e,"STRONG",{});var S3r=s(GV);dIe=r(S3r,"splinter"),S3r.forEach(t),cIe=r(p5e," \u2014 "),pL=n(p5e,"A",{href:!0});var P3r=s(pL);fIe=r(P3r,"SplinterConfig"),P3r.forEach(t),mIe=r(p5e," (Splinter model)"),p5e.forEach(t),gIe=i(T),ym=n(T,"LI",{});var _5e=s(ym);XV=n(_5e,"STRONG",{});var $3r=s(XV);hIe=r($3r,"squeezebert"),$3r.forEach(t),pIe=r(_5e," \u2014 "),_L=n(_5e,"A",{href:!0});var I3r=s(_L);_Ie=r(I3r,"SqueezeBertConfig"),I3r.forEach(t),uIe=r(_5e," (SqueezeBERT model)"),_5e.forEach(t),bIe=i(T),wm=n(T,"LI",{});var u5e=s(wm);zV=n(u5e,"STRONG",{});var j3r=s(zV);vIe=r(j3r,"swin"),j3r.forEach(t),TIe=r(u5e," \u2014 "),uL=n(u5e,"A",{href:!0});var N3r=s(uL);FIe=r(N3r,"SwinConfig"),N3r.forEach(t),CIe=r(u5e," (Swin model)"),u5e.forEach(t),MIe=i(T),Am=n(T,"LI",{});var b5e=s(Am);VV=n(b5e,"STRONG",{});var D3r=s(VV);EIe=r(D3r,"t5"),D3r.forEach(t),yIe=r(b5e," \u2014 "),bL=n(b5e,"A",{href:!0});var q3r=s(bL);wIe=r(q3r,"T5Config"),q3r.forEach(t),AIe=r(b5e," (T5 model)"),b5e.forEach(t),LIe=i(T),Lm=n(T,"LI",{});var v5e=s(Lm);WV=n(v5e,"STRONG",{});var O3r=s(WV);BIe=r(O3r,"tapas"),O3r.forEach(t),kIe=r(v5e," \u2014 "),vL=n(v5e,"A",{href:!0});var G3r=s(vL);xIe=r(G3r,"TapasConfig"),G3r.forEach(t),RIe=r(v5e," (TAPAS model)"),v5e.forEach(t),SIe=i(T),Bm=n(T,"LI",{});var T5e=s(Bm);QV=n(T5e,"STRONG",{});var X3r=s(QV);PIe=r(X3r,"transfo-xl"),X3r.forEach(t),$Ie=r(T5e," \u2014 "),TL=n(T5e,"A",{href:!0});var z3r=s(TL);IIe=r(z3r,"TransfoXLConfig"),z3r.forEach(t),jIe=r(T5e," (Transformer-XL model)"),T5e.forEach(t),NIe=i(T),km=n(T,"LI",{});var F5e=s(km);HV=n(F5e,"STRONG",{});var V3r=s(HV);DIe=r(V3r,"trocr"),V3r.forEach(t),qIe=r(F5e," \u2014 "),FL=n(F5e,"A",{href:!0});var W3r=s(FL);OIe=r(W3r,"TrOCRConfig"),W3r.forEach(t),GIe=r(F5e," (TrOCR model)"),F5e.forEach(t),XIe=i(T),xm=n(T,"LI",{});var C5e=s(xm);UV=n(C5e,"STRONG",{});var Q3r=s(UV);zIe=r(Q3r,"unispeech"),Q3r.forEach(t),VIe=r(C5e," \u2014 "),CL=n(C5e,"A",{href:!0});var H3r=s(CL);WIe=r(H3r,"UniSpeechConfig"),H3r.forEach(t),QIe=r(C5e," (UniSpeech model)"),C5e.forEach(t),HIe=i(T),Rm=n(T,"LI",{});var M5e=s(Rm);JV=n(M5e,"STRONG",{});var U3r=s(JV);UIe=r(U3r,"unispeech-sat"),U3r.forEach(t),JIe=r(M5e," \u2014 "),ML=n(M5e,"A",{href:!0});var J3r=s(ML);YIe=r(J3r,"UniSpeechSatConfig"),J3r.forEach(t),KIe=r(M5e," (UniSpeechSat model)"),M5e.forEach(t),ZIe=i(T),Sm=n(T,"LI",{});var E5e=s(Sm);YV=n(E5e,"STRONG",{});var Y3r=s(YV);eje=r(Y3r,"vilt"),Y3r.forEach(t),oje=r(E5e," \u2014 "),EL=n(E5e,"A",{href:!0});var K3r=s(EL);rje=r(K3r,"ViltConfig"),K3r.forEach(t),tje=r(E5e," (ViLT model)"),E5e.forEach(t),aje=i(T),Pm=n(T,"LI",{});var y5e=s(Pm);KV=n(y5e,"STRONG",{});var Z3r=s(KV);nje=r(Z3r,"vision-encoder-decoder"),Z3r.forEach(t),sje=r(y5e," \u2014 "),yL=n(y5e,"A",{href:!0});var eyr=s(yL);lje=r(eyr,"VisionEncoderDecoderConfig"),eyr.forEach(t),ije=r(y5e," (Vision Encoder decoder model)"),y5e.forEach(t),dje=i(T),$m=n(T,"LI",{});var w5e=s($m);ZV=n(w5e,"STRONG",{});var oyr=s(ZV);cje=r(oyr,"vision-text-dual-encoder"),oyr.forEach(t),fje=r(w5e," \u2014 "),wL=n(w5e,"A",{href:!0});var ryr=s(wL);mje=r(ryr,"VisionTextDualEncoderConfig"),ryr.forEach(t),gje=r(w5e," (VisionTextDualEncoder model)"),w5e.forEach(t),hje=i(T),Im=n(T,"LI",{});var A5e=s(Im);eW=n(A5e,"STRONG",{});var tyr=s(eW);pje=r(tyr,"visual_bert"),tyr.forEach(t),_je=r(A5e," \u2014 "),AL=n(A5e,"A",{href:!0});var ayr=s(AL);uje=r(ayr,"VisualBertConfig"),ayr.forEach(t),bje=r(A5e," (VisualBert model)"),A5e.forEach(t),vje=i(T),jm=n(T,"LI",{});var L5e=s(jm);oW=n(L5e,"STRONG",{});var nyr=s(oW);Tje=r(nyr,"vit"),nyr.forEach(t),Fje=r(L5e," \u2014 "),LL=n(L5e,"A",{href:!0});var syr=s(LL);Cje=r(syr,"ViTConfig"),syr.forEach(t),Mje=r(L5e," (ViT model)"),L5e.forEach(t),Eje=i(T),Nm=n(T,"LI",{});var B5e=s(Nm);rW=n(B5e,"STRONG",{});var lyr=s(rW);yje=r(lyr,"vit_mae"),lyr.forEach(t),wje=r(B5e," \u2014 "),BL=n(B5e,"A",{href:!0});var iyr=s(BL);Aje=r(iyr,"ViTMAEConfig"),iyr.forEach(t),Lje=r(B5e," (ViTMAE model)"),B5e.forEach(t),Bje=i(T),Dm=n(T,"LI",{});var k5e=s(Dm);tW=n(k5e,"STRONG",{});var dyr=s(tW);kje=r(dyr,"wav2vec2"),dyr.forEach(t),xje=r(k5e," \u2014 "),kL=n(k5e,"A",{href:!0});var cyr=s(kL);Rje=r(cyr,"Wav2Vec2Config"),cyr.forEach(t),Sje=r(k5e," (Wav2Vec2 model)"),k5e.forEach(t),Pje=i(T),qm=n(T,"LI",{});var x5e=s(qm);aW=n(x5e,"STRONG",{});var fyr=s(aW);$je=r(fyr,"wavlm"),fyr.forEach(t),Ije=r(x5e," \u2014 "),xL=n(x5e,"A",{href:!0});var myr=s(xL);jje=r(myr,"WavLMConfig"),myr.forEach(t),Nje=r(x5e," (WavLM model)"),x5e.forEach(t),Dje=i(T),Om=n(T,"LI",{});var R5e=s(Om);nW=n(R5e,"STRONG",{});var gyr=s(nW);qje=r(gyr,"xglm"),gyr.forEach(t),Oje=r(R5e," \u2014 "),sW=n(R5e,"CODE",{});var hyr=s(sW);Gje=r(hyr,"XGLMConfig"),hyr.forEach(t),Xje=r(R5e,"(XGLM model)"),R5e.forEach(t),zje=i(T),Gm=n(T,"LI",{});var S5e=s(Gm);lW=n(S5e,"STRONG",{});var pyr=s(lW);Vje=r(pyr,"xlm"),pyr.forEach(t),Wje=r(S5e," \u2014 "),RL=n(S5e,"A",{href:!0});var _yr=s(RL);Qje=r(_yr,"XLMConfig"),_yr.forEach(t),Hje=r(S5e," (XLM model)"),S5e.forEach(t),Uje=i(T),Xm=n(T,"LI",{});var P5e=s(Xm);iW=n(P5e,"STRONG",{});var uyr=s(iW);Jje=r(uyr,"xlm-prophetnet"),uyr.forEach(t),Yje=r(P5e," \u2014 "),SL=n(P5e,"A",{href:!0});var byr=s(SL);Kje=r(byr,"XLMProphetNetConfig"),byr.forEach(t),Zje=r(P5e," (XLMProphetNet model)"),P5e.forEach(t),eNe=i(T),zm=n(T,"LI",{});var $5e=s(zm);dW=n($5e,"STRONG",{});var vyr=s(dW);oNe=r(vyr,"xlm-roberta"),vyr.forEach(t),rNe=r($5e," \u2014 "),PL=n($5e,"A",{href:!0});var Tyr=s(PL);tNe=r(Tyr,"XLMRobertaConfig"),Tyr.forEach(t),aNe=r($5e," (XLM-RoBERTa model)"),$5e.forEach(t),nNe=i(T),Vm=n(T,"LI",{});var I5e=s(Vm);cW=n(I5e,"STRONG",{});var Fyr=s(cW);sNe=r(Fyr,"xlm-roberta-xl"),Fyr.forEach(t),lNe=r(I5e," \u2014 "),fW=n(I5e,"CODE",{});var Cyr=s(fW);iNe=r(Cyr,"XLMRobertaXLConfig"),Cyr.forEach(t),dNe=r(I5e,"(XLM-RoBERTa-XL model)"),I5e.forEach(t),cNe=i(T),Wm=n(T,"LI",{});var j5e=s(Wm);mW=n(j5e,"STRONG",{});var Myr=s(mW);fNe=r(Myr,"xlnet"),Myr.forEach(t),mNe=r(j5e," \u2014 "),$L=n(j5e,"A",{href:!0});var Eyr=s($L);gNe=r(Eyr,"XLNetConfig"),Eyr.forEach(t),hNe=r(j5e," (XLNet model)"),j5e.forEach(t),pNe=i(T),Qm=n(T,"LI",{});var N5e=s(Qm);gW=n(N5e,"STRONG",{});var yyr=s(gW);_Ne=r(yyr,"yoso"),yyr.forEach(t),uNe=r(N5e," \u2014 "),IL=n(N5e,"A",{href:!0});var wyr=s(IL);bNe=r(wyr,"YosoConfig"),wyr.forEach(t),vNe=r(N5e," (YOSO model)"),N5e.forEach(t),T.forEach(t),TNe=i(oa),hW=n(oa,"P",{});var Ayr=s(hW);FNe=r(Ayr,"Examples:"),Ayr.forEach(t),CNe=i(oa),m(NC.$$.fragment,oa),oa.forEach(t),MNe=i(Es),Hm=n(Es,"DIV",{class:!0});var wLe=s(Hm);m(DC.$$.fragment,wLe),ENe=i(wLe),pW=n(wLe,"P",{});var Lyr=s(pW);yNe=r(Lyr,"Register a new configuration for this class."),Lyr.forEach(t),wLe.forEach(t),Es.forEach(t),k0e=i(d),Ci=n(d,"H2",{class:!0});var ALe=s(Ci);Um=n(ALe,"A",{id:!0,class:!0,href:!0});var Byr=s(Um);_W=n(Byr,"SPAN",{});var kyr=s(_W);m(qC.$$.fragment,kyr),kyr.forEach(t),Byr.forEach(t),wNe=i(ALe),uW=n(ALe,"SPAN",{});var xyr=s(uW);ANe=r(xyr,"AutoTokenizer"),xyr.forEach(t),ALe.forEach(t),x0e=i(d),qo=n(d,"DIV",{class:!0});var ys=s(qo);m(OC.$$.fragment,ys),LNe=i(ys),GC=n(ys,"P",{});var LLe=s(GC);BNe=r(LLe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),jL=n(LLe,"A",{href:!0});var Ryr=s(jL);kNe=r(Ryr,"AutoTokenizer.from_pretrained()"),Ryr.forEach(t),xNe=r(LLe," class method."),LLe.forEach(t),RNe=i(ys),XC=n(ys,"P",{});var BLe=s(XC);SNe=r(BLe,"This class cannot be instantiated directly using "),bW=n(BLe,"CODE",{});var Syr=s(bW);PNe=r(Syr,"__init__()"),Syr.forEach(t),$Ne=r(BLe," (throws an error)."),BLe.forEach(t),INe=i(ys),fo=n(ys,"DIV",{class:!0});var ra=s(fo);m(zC.$$.fragment,ra),jNe=i(ra),vW=n(ra,"P",{});var Pyr=s(vW);NNe=r(Pyr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Pyr.forEach(t),DNe=i(ra),Ba=n(ra,"P",{});var S9=s(Ba);qNe=r(S9,"The tokenizer class to instantiate is selected based on the "),TW=n(S9,"CODE",{});var $yr=s(TW);ONe=r($yr,"model_type"),$yr.forEach(t),GNe=r(S9,` property of the config object (either
passed as an argument or loaded from `),FW=n(S9,"CODE",{});var Iyr=s(FW);XNe=r(Iyr,"pretrained_model_name_or_path"),Iyr.forEach(t),zNe=r(S9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CW=n(S9,"CODE",{});var jyr=s(CW);VNe=r(jyr,"pretrained_model_name_or_path"),jyr.forEach(t),WNe=r(S9,":"),S9.forEach(t),QNe=i(ra),M=n(ra,"UL",{});var E=s(M);Bn=n(E,"LI",{});var o0=s(Bn);MW=n(o0,"STRONG",{});var Nyr=s(MW);HNe=r(Nyr,"albert"),Nyr.forEach(t),UNe=r(o0," \u2014 "),NL=n(o0,"A",{href:!0});var Dyr=s(NL);JNe=r(Dyr,"AlbertTokenizer"),Dyr.forEach(t),YNe=r(o0," or "),DL=n(o0,"A",{href:!0});var qyr=s(DL);KNe=r(qyr,"AlbertTokenizerFast"),qyr.forEach(t),ZNe=r(o0," (ALBERT model)"),o0.forEach(t),eDe=i(E),kn=n(E,"LI",{});var r0=s(kn);EW=n(r0,"STRONG",{});var Oyr=s(EW);oDe=r(Oyr,"bart"),Oyr.forEach(t),rDe=r(r0," \u2014 "),qL=n(r0,"A",{href:!0});var Gyr=s(qL);tDe=r(Gyr,"BartTokenizer"),Gyr.forEach(t),aDe=r(r0," or "),OL=n(r0,"A",{href:!0});var Xyr=s(OL);nDe=r(Xyr,"BartTokenizerFast"),Xyr.forEach(t),sDe=r(r0," (BART model)"),r0.forEach(t),lDe=i(E),xn=n(E,"LI",{});var t0=s(xn);yW=n(t0,"STRONG",{});var zyr=s(yW);iDe=r(zyr,"barthez"),zyr.forEach(t),dDe=r(t0," \u2014 "),GL=n(t0,"A",{href:!0});var Vyr=s(GL);cDe=r(Vyr,"BarthezTokenizer"),Vyr.forEach(t),fDe=r(t0," or "),XL=n(t0,"A",{href:!0});var Wyr=s(XL);mDe=r(Wyr,"BarthezTokenizerFast"),Wyr.forEach(t),gDe=r(t0," (BARThez model)"),t0.forEach(t),hDe=i(E),Jm=n(E,"LI",{});var D5e=s(Jm);wW=n(D5e,"STRONG",{});var Qyr=s(wW);pDe=r(Qyr,"bartpho"),Qyr.forEach(t),_De=r(D5e," \u2014 "),zL=n(D5e,"A",{href:!0});var Hyr=s(zL);uDe=r(Hyr,"BartphoTokenizer"),Hyr.forEach(t),bDe=r(D5e," (BARTpho model)"),D5e.forEach(t),vDe=i(E),Rn=n(E,"LI",{});var a0=s(Rn);AW=n(a0,"STRONG",{});var Uyr=s(AW);TDe=r(Uyr,"bert"),Uyr.forEach(t),FDe=r(a0," \u2014 "),VL=n(a0,"A",{href:!0});var Jyr=s(VL);CDe=r(Jyr,"BertTokenizer"),Jyr.forEach(t),MDe=r(a0," or "),WL=n(a0,"A",{href:!0});var Yyr=s(WL);EDe=r(Yyr,"BertTokenizerFast"),Yyr.forEach(t),yDe=r(a0," (BERT model)"),a0.forEach(t),wDe=i(E),Ym=n(E,"LI",{});var q5e=s(Ym);LW=n(q5e,"STRONG",{});var Kyr=s(LW);ADe=r(Kyr,"bert-generation"),Kyr.forEach(t),LDe=r(q5e," \u2014 "),QL=n(q5e,"A",{href:!0});var Zyr=s(QL);BDe=r(Zyr,"BertGenerationTokenizer"),Zyr.forEach(t),kDe=r(q5e," (Bert Generation model)"),q5e.forEach(t),xDe=i(E),Km=n(E,"LI",{});var O5e=s(Km);BW=n(O5e,"STRONG",{});var ewr=s(BW);RDe=r(ewr,"bert-japanese"),ewr.forEach(t),SDe=r(O5e," \u2014 "),HL=n(O5e,"A",{href:!0});var owr=s(HL);PDe=r(owr,"BertJapaneseTokenizer"),owr.forEach(t),$De=r(O5e," (BertJapanese model)"),O5e.forEach(t),IDe=i(E),Zm=n(E,"LI",{});var G5e=s(Zm);kW=n(G5e,"STRONG",{});var rwr=s(kW);jDe=r(rwr,"bertweet"),rwr.forEach(t),NDe=r(G5e," \u2014 "),UL=n(G5e,"A",{href:!0});var twr=s(UL);DDe=r(twr,"BertweetTokenizer"),twr.forEach(t),qDe=r(G5e," (Bertweet model)"),G5e.forEach(t),ODe=i(E),Sn=n(E,"LI",{});var n0=s(Sn);xW=n(n0,"STRONG",{});var awr=s(xW);GDe=r(awr,"big_bird"),awr.forEach(t),XDe=r(n0," \u2014 "),JL=n(n0,"A",{href:!0});var nwr=s(JL);zDe=r(nwr,"BigBirdTokenizer"),nwr.forEach(t),VDe=r(n0," or "),YL=n(n0,"A",{href:!0});var swr=s(YL);WDe=r(swr,"BigBirdTokenizerFast"),swr.forEach(t),QDe=r(n0," (BigBird model)"),n0.forEach(t),HDe=i(E),Pn=n(E,"LI",{});var s0=s(Pn);RW=n(s0,"STRONG",{});var lwr=s(RW);UDe=r(lwr,"bigbird_pegasus"),lwr.forEach(t),JDe=r(s0," \u2014 "),KL=n(s0,"A",{href:!0});var iwr=s(KL);YDe=r(iwr,"PegasusTokenizer"),iwr.forEach(t),KDe=r(s0," or "),ZL=n(s0,"A",{href:!0});var dwr=s(ZL);ZDe=r(dwr,"PegasusTokenizerFast"),dwr.forEach(t),eqe=r(s0," (BigBirdPegasus model)"),s0.forEach(t),oqe=i(E),$n=n(E,"LI",{});var l0=s($n);SW=n(l0,"STRONG",{});var cwr=s(SW);rqe=r(cwr,"blenderbot"),cwr.forEach(t),tqe=r(l0," \u2014 "),e8=n(l0,"A",{href:!0});var fwr=s(e8);aqe=r(fwr,"BlenderbotTokenizer"),fwr.forEach(t),nqe=r(l0," or "),o8=n(l0,"A",{href:!0});var mwr=s(o8);sqe=r(mwr,"BlenderbotTokenizerFast"),mwr.forEach(t),lqe=r(l0," (Blenderbot model)"),l0.forEach(t),iqe=i(E),eg=n(E,"LI",{});var X5e=s(eg);PW=n(X5e,"STRONG",{});var gwr=s(PW);dqe=r(gwr,"blenderbot-small"),gwr.forEach(t),cqe=r(X5e," \u2014 "),r8=n(X5e,"A",{href:!0});var hwr=s(r8);fqe=r(hwr,"BlenderbotSmallTokenizer"),hwr.forEach(t),mqe=r(X5e," (BlenderbotSmall model)"),X5e.forEach(t),gqe=i(E),og=n(E,"LI",{});var z5e=s(og);$W=n(z5e,"STRONG",{});var pwr=s($W);hqe=r(pwr,"byt5"),pwr.forEach(t),pqe=r(z5e," \u2014 "),t8=n(z5e,"A",{href:!0});var _wr=s(t8);_qe=r(_wr,"ByT5Tokenizer"),_wr.forEach(t),uqe=r(z5e," (ByT5 model)"),z5e.forEach(t),bqe=i(E),In=n(E,"LI",{});var i0=s(In);IW=n(i0,"STRONG",{});var uwr=s(IW);vqe=r(uwr,"camembert"),uwr.forEach(t),Tqe=r(i0," \u2014 "),a8=n(i0,"A",{href:!0});var bwr=s(a8);Fqe=r(bwr,"CamembertTokenizer"),bwr.forEach(t),Cqe=r(i0," or "),n8=n(i0,"A",{href:!0});var vwr=s(n8);Mqe=r(vwr,"CamembertTokenizerFast"),vwr.forEach(t),Eqe=r(i0," (CamemBERT model)"),i0.forEach(t),yqe=i(E),rg=n(E,"LI",{});var V5e=s(rg);jW=n(V5e,"STRONG",{});var Twr=s(jW);wqe=r(Twr,"canine"),Twr.forEach(t),Aqe=r(V5e," \u2014 "),s8=n(V5e,"A",{href:!0});var Fwr=s(s8);Lqe=r(Fwr,"CanineTokenizer"),Fwr.forEach(t),Bqe=r(V5e," (Canine model)"),V5e.forEach(t),kqe=i(E),jn=n(E,"LI",{});var d0=s(jn);NW=n(d0,"STRONG",{});var Cwr=s(NW);xqe=r(Cwr,"clip"),Cwr.forEach(t),Rqe=r(d0," \u2014 "),l8=n(d0,"A",{href:!0});var Mwr=s(l8);Sqe=r(Mwr,"CLIPTokenizer"),Mwr.forEach(t),Pqe=r(d0," or "),i8=n(d0,"A",{href:!0});var Ewr=s(i8);$qe=r(Ewr,"CLIPTokenizerFast"),Ewr.forEach(t),Iqe=r(d0," (CLIP model)"),d0.forEach(t),jqe=i(E),Nn=n(E,"LI",{});var c0=s(Nn);DW=n(c0,"STRONG",{});var ywr=s(DW);Nqe=r(ywr,"convbert"),ywr.forEach(t),Dqe=r(c0," \u2014 "),d8=n(c0,"A",{href:!0});var wwr=s(d8);qqe=r(wwr,"ConvBertTokenizer"),wwr.forEach(t),Oqe=r(c0," or "),c8=n(c0,"A",{href:!0});var Awr=s(c8);Gqe=r(Awr,"ConvBertTokenizerFast"),Awr.forEach(t),Xqe=r(c0," (ConvBERT model)"),c0.forEach(t),zqe=i(E),Dn=n(E,"LI",{});var f0=s(Dn);qW=n(f0,"STRONG",{});var Lwr=s(qW);Vqe=r(Lwr,"cpm"),Lwr.forEach(t),Wqe=r(f0," \u2014 "),f8=n(f0,"A",{href:!0});var Bwr=s(f8);Qqe=r(Bwr,"CpmTokenizer"),Bwr.forEach(t),Hqe=r(f0," or "),OW=n(f0,"CODE",{});var kwr=s(OW);Uqe=r(kwr,"CpmTokenizerFast"),kwr.forEach(t),Jqe=r(f0," (CPM model)"),f0.forEach(t),Yqe=i(E),tg=n(E,"LI",{});var W5e=s(tg);GW=n(W5e,"STRONG",{});var xwr=s(GW);Kqe=r(xwr,"ctrl"),xwr.forEach(t),Zqe=r(W5e," \u2014 "),m8=n(W5e,"A",{href:!0});var Rwr=s(m8);eOe=r(Rwr,"CTRLTokenizer"),Rwr.forEach(t),oOe=r(W5e," (CTRL model)"),W5e.forEach(t),rOe=i(E),qn=n(E,"LI",{});var m0=s(qn);XW=n(m0,"STRONG",{});var Swr=s(XW);tOe=r(Swr,"deberta"),Swr.forEach(t),aOe=r(m0," \u2014 "),g8=n(m0,"A",{href:!0});var Pwr=s(g8);nOe=r(Pwr,"DebertaTokenizer"),Pwr.forEach(t),sOe=r(m0," or "),h8=n(m0,"A",{href:!0});var $wr=s(h8);lOe=r($wr,"DebertaTokenizerFast"),$wr.forEach(t),iOe=r(m0," (DeBERTa model)"),m0.forEach(t),dOe=i(E),ag=n(E,"LI",{});var Q5e=s(ag);zW=n(Q5e,"STRONG",{});var Iwr=s(zW);cOe=r(Iwr,"deberta-v2"),Iwr.forEach(t),fOe=r(Q5e," \u2014 "),p8=n(Q5e,"A",{href:!0});var jwr=s(p8);mOe=r(jwr,"DebertaV2Tokenizer"),jwr.forEach(t),gOe=r(Q5e," (DeBERTa-v2 model)"),Q5e.forEach(t),hOe=i(E),On=n(E,"LI",{});var g0=s(On);VW=n(g0,"STRONG",{});var Nwr=s(VW);pOe=r(Nwr,"distilbert"),Nwr.forEach(t),_Oe=r(g0," \u2014 "),_8=n(g0,"A",{href:!0});var Dwr=s(_8);uOe=r(Dwr,"DistilBertTokenizer"),Dwr.forEach(t),bOe=r(g0," or "),u8=n(g0,"A",{href:!0});var qwr=s(u8);vOe=r(qwr,"DistilBertTokenizerFast"),qwr.forEach(t),TOe=r(g0," (DistilBERT model)"),g0.forEach(t),FOe=i(E),Gn=n(E,"LI",{});var h0=s(Gn);WW=n(h0,"STRONG",{});var Owr=s(WW);COe=r(Owr,"dpr"),Owr.forEach(t),MOe=r(h0," \u2014 "),b8=n(h0,"A",{href:!0});var Gwr=s(b8);EOe=r(Gwr,"DPRQuestionEncoderTokenizer"),Gwr.forEach(t),yOe=r(h0," or "),v8=n(h0,"A",{href:!0});var Xwr=s(v8);wOe=r(Xwr,"DPRQuestionEncoderTokenizerFast"),Xwr.forEach(t),AOe=r(h0," (DPR model)"),h0.forEach(t),LOe=i(E),Xn=n(E,"LI",{});var p0=s(Xn);QW=n(p0,"STRONG",{});var zwr=s(QW);BOe=r(zwr,"electra"),zwr.forEach(t),kOe=r(p0," \u2014 "),T8=n(p0,"A",{href:!0});var Vwr=s(T8);xOe=r(Vwr,"ElectraTokenizer"),Vwr.forEach(t),ROe=r(p0," or "),F8=n(p0,"A",{href:!0});var Wwr=s(F8);SOe=r(Wwr,"ElectraTokenizerFast"),Wwr.forEach(t),POe=r(p0," (ELECTRA model)"),p0.forEach(t),$Oe=i(E),ng=n(E,"LI",{});var H5e=s(ng);HW=n(H5e,"STRONG",{});var Qwr=s(HW);IOe=r(Qwr,"flaubert"),Qwr.forEach(t),jOe=r(H5e," \u2014 "),C8=n(H5e,"A",{href:!0});var Hwr=s(C8);NOe=r(Hwr,"FlaubertTokenizer"),Hwr.forEach(t),DOe=r(H5e," (FlauBERT model)"),H5e.forEach(t),qOe=i(E),zn=n(E,"LI",{});var _0=s(zn);UW=n(_0,"STRONG",{});var Uwr=s(UW);OOe=r(Uwr,"fnet"),Uwr.forEach(t),GOe=r(_0," \u2014 "),M8=n(_0,"A",{href:!0});var Jwr=s(M8);XOe=r(Jwr,"FNetTokenizer"),Jwr.forEach(t),zOe=r(_0," or "),E8=n(_0,"A",{href:!0});var Ywr=s(E8);VOe=r(Ywr,"FNetTokenizerFast"),Ywr.forEach(t),WOe=r(_0," (FNet model)"),_0.forEach(t),QOe=i(E),sg=n(E,"LI",{});var U5e=s(sg);JW=n(U5e,"STRONG",{});var Kwr=s(JW);HOe=r(Kwr,"fsmt"),Kwr.forEach(t),UOe=r(U5e," \u2014 "),y8=n(U5e,"A",{href:!0});var Zwr=s(y8);JOe=r(Zwr,"FSMTTokenizer"),Zwr.forEach(t),YOe=r(U5e," (FairSeq Machine-Translation model)"),U5e.forEach(t),KOe=i(E),Vn=n(E,"LI",{});var u0=s(Vn);YW=n(u0,"STRONG",{});var eAr=s(YW);ZOe=r(eAr,"funnel"),eAr.forEach(t),eGe=r(u0," \u2014 "),w8=n(u0,"A",{href:!0});var oAr=s(w8);oGe=r(oAr,"FunnelTokenizer"),oAr.forEach(t),rGe=r(u0," or "),A8=n(u0,"A",{href:!0});var rAr=s(A8);tGe=r(rAr,"FunnelTokenizerFast"),rAr.forEach(t),aGe=r(u0," (Funnel Transformer model)"),u0.forEach(t),nGe=i(E),Wn=n(E,"LI",{});var b0=s(Wn);KW=n(b0,"STRONG",{});var tAr=s(KW);sGe=r(tAr,"gpt2"),tAr.forEach(t),lGe=r(b0," \u2014 "),L8=n(b0,"A",{href:!0});var aAr=s(L8);iGe=r(aAr,"GPT2Tokenizer"),aAr.forEach(t),dGe=r(b0," or "),B8=n(b0,"A",{href:!0});var nAr=s(B8);cGe=r(nAr,"GPT2TokenizerFast"),nAr.forEach(t),fGe=r(b0," (OpenAI GPT-2 model)"),b0.forEach(t),mGe=i(E),Qn=n(E,"LI",{});var v0=s(Qn);ZW=n(v0,"STRONG",{});var sAr=s(ZW);gGe=r(sAr,"gpt_neo"),sAr.forEach(t),hGe=r(v0," \u2014 "),k8=n(v0,"A",{href:!0});var lAr=s(k8);pGe=r(lAr,"GPT2Tokenizer"),lAr.forEach(t),_Ge=r(v0," or "),x8=n(v0,"A",{href:!0});var iAr=s(x8);uGe=r(iAr,"GPT2TokenizerFast"),iAr.forEach(t),bGe=r(v0," (GPT Neo model)"),v0.forEach(t),vGe=i(E),Hn=n(E,"LI",{});var T0=s(Hn);eQ=n(T0,"STRONG",{});var dAr=s(eQ);TGe=r(dAr,"herbert"),dAr.forEach(t),FGe=r(T0," \u2014 "),R8=n(T0,"A",{href:!0});var cAr=s(R8);CGe=r(cAr,"HerbertTokenizer"),cAr.forEach(t),MGe=r(T0," or "),S8=n(T0,"A",{href:!0});var fAr=s(S8);EGe=r(fAr,"HerbertTokenizerFast"),fAr.forEach(t),yGe=r(T0," (HerBERT model)"),T0.forEach(t),wGe=i(E),lg=n(E,"LI",{});var J5e=s(lg);oQ=n(J5e,"STRONG",{});var mAr=s(oQ);AGe=r(mAr,"hubert"),mAr.forEach(t),LGe=r(J5e," \u2014 "),P8=n(J5e,"A",{href:!0});var gAr=s(P8);BGe=r(gAr,"Wav2Vec2CTCTokenizer"),gAr.forEach(t),kGe=r(J5e," (Hubert model)"),J5e.forEach(t),xGe=i(E),Un=n(E,"LI",{});var F0=s(Un);rQ=n(F0,"STRONG",{});var hAr=s(rQ);RGe=r(hAr,"ibert"),hAr.forEach(t),SGe=r(F0," \u2014 "),$8=n(F0,"A",{href:!0});var pAr=s($8);PGe=r(pAr,"RobertaTokenizer"),pAr.forEach(t),$Ge=r(F0," or "),I8=n(F0,"A",{href:!0});var _Ar=s(I8);IGe=r(_Ar,"RobertaTokenizerFast"),_Ar.forEach(t),jGe=r(F0," (I-BERT model)"),F0.forEach(t),NGe=i(E),Jn=n(E,"LI",{});var C0=s(Jn);tQ=n(C0,"STRONG",{});var uAr=s(tQ);DGe=r(uAr,"layoutlm"),uAr.forEach(t),qGe=r(C0," \u2014 "),j8=n(C0,"A",{href:!0});var bAr=s(j8);OGe=r(bAr,"LayoutLMTokenizer"),bAr.forEach(t),GGe=r(C0," or "),N8=n(C0,"A",{href:!0});var vAr=s(N8);XGe=r(vAr,"LayoutLMTokenizerFast"),vAr.forEach(t),zGe=r(C0," (LayoutLM model)"),C0.forEach(t),VGe=i(E),Yn=n(E,"LI",{});var M0=s(Yn);aQ=n(M0,"STRONG",{});var TAr=s(aQ);WGe=r(TAr,"layoutlmv2"),TAr.forEach(t),QGe=r(M0," \u2014 "),D8=n(M0,"A",{href:!0});var FAr=s(D8);HGe=r(FAr,"LayoutLMv2Tokenizer"),FAr.forEach(t),UGe=r(M0," or "),q8=n(M0,"A",{href:!0});var CAr=s(q8);JGe=r(CAr,"LayoutLMv2TokenizerFast"),CAr.forEach(t),YGe=r(M0," (LayoutLMv2 model)"),M0.forEach(t),KGe=i(E),Kn=n(E,"LI",{});var E0=s(Kn);nQ=n(E0,"STRONG",{});var MAr=s(nQ);ZGe=r(MAr,"layoutxlm"),MAr.forEach(t),eXe=r(E0," \u2014 "),O8=n(E0,"A",{href:!0});var EAr=s(O8);oXe=r(EAr,"LayoutXLMTokenizer"),EAr.forEach(t),rXe=r(E0," or "),G8=n(E0,"A",{href:!0});var yAr=s(G8);tXe=r(yAr,"LayoutXLMTokenizerFast"),yAr.forEach(t),aXe=r(E0," (LayoutXLM model)"),E0.forEach(t),nXe=i(E),Zn=n(E,"LI",{});var y0=s(Zn);sQ=n(y0,"STRONG",{});var wAr=s(sQ);sXe=r(wAr,"led"),wAr.forEach(t),lXe=r(y0," \u2014 "),X8=n(y0,"A",{href:!0});var AAr=s(X8);iXe=r(AAr,"LEDTokenizer"),AAr.forEach(t),dXe=r(y0," or "),z8=n(y0,"A",{href:!0});var LAr=s(z8);cXe=r(LAr,"LEDTokenizerFast"),LAr.forEach(t),fXe=r(y0," (LED model)"),y0.forEach(t),mXe=i(E),es=n(E,"LI",{});var w0=s(es);lQ=n(w0,"STRONG",{});var BAr=s(lQ);gXe=r(BAr,"longformer"),BAr.forEach(t),hXe=r(w0," \u2014 "),V8=n(w0,"A",{href:!0});var kAr=s(V8);pXe=r(kAr,"LongformerTokenizer"),kAr.forEach(t),_Xe=r(w0," or "),W8=n(w0,"A",{href:!0});var xAr=s(W8);uXe=r(xAr,"LongformerTokenizerFast"),xAr.forEach(t),bXe=r(w0," (Longformer model)"),w0.forEach(t),vXe=i(E),ig=n(E,"LI",{});var Y5e=s(ig);iQ=n(Y5e,"STRONG",{});var RAr=s(iQ);TXe=r(RAr,"luke"),RAr.forEach(t),FXe=r(Y5e," \u2014 "),Q8=n(Y5e,"A",{href:!0});var SAr=s(Q8);CXe=r(SAr,"LukeTokenizer"),SAr.forEach(t),MXe=r(Y5e," (LUKE model)"),Y5e.forEach(t),EXe=i(E),os=n(E,"LI",{});var A0=s(os);dQ=n(A0,"STRONG",{});var PAr=s(dQ);yXe=r(PAr,"lxmert"),PAr.forEach(t),wXe=r(A0," \u2014 "),H8=n(A0,"A",{href:!0});var $Ar=s(H8);AXe=r($Ar,"LxmertTokenizer"),$Ar.forEach(t),LXe=r(A0," or "),U8=n(A0,"A",{href:!0});var IAr=s(U8);BXe=r(IAr,"LxmertTokenizerFast"),IAr.forEach(t),kXe=r(A0," (LXMERT model)"),A0.forEach(t),xXe=i(E),dg=n(E,"LI",{});var K5e=s(dg);cQ=n(K5e,"STRONG",{});var jAr=s(cQ);RXe=r(jAr,"m2m_100"),jAr.forEach(t),SXe=r(K5e," \u2014 "),J8=n(K5e,"A",{href:!0});var NAr=s(J8);PXe=r(NAr,"M2M100Tokenizer"),NAr.forEach(t),$Xe=r(K5e," (M2M100 model)"),K5e.forEach(t),IXe=i(E),cg=n(E,"LI",{});var Z5e=s(cg);fQ=n(Z5e,"STRONG",{});var DAr=s(fQ);jXe=r(DAr,"marian"),DAr.forEach(t),NXe=r(Z5e," \u2014 "),Y8=n(Z5e,"A",{href:!0});var qAr=s(Y8);DXe=r(qAr,"MarianTokenizer"),qAr.forEach(t),qXe=r(Z5e," (Marian model)"),Z5e.forEach(t),OXe=i(E),rs=n(E,"LI",{});var L0=s(rs);mQ=n(L0,"STRONG",{});var OAr=s(mQ);GXe=r(OAr,"mbart"),OAr.forEach(t),XXe=r(L0," \u2014 "),K8=n(L0,"A",{href:!0});var GAr=s(K8);zXe=r(GAr,"MBartTokenizer"),GAr.forEach(t),VXe=r(L0," or "),Z8=n(L0,"A",{href:!0});var XAr=s(Z8);WXe=r(XAr,"MBartTokenizerFast"),XAr.forEach(t),QXe=r(L0," (mBART model)"),L0.forEach(t),HXe=i(E),ts=n(E,"LI",{});var B0=s(ts);gQ=n(B0,"STRONG",{});var zAr=s(gQ);UXe=r(zAr,"mbart50"),zAr.forEach(t),JXe=r(B0," \u2014 "),eB=n(B0,"A",{href:!0});var VAr=s(eB);YXe=r(VAr,"MBart50Tokenizer"),VAr.forEach(t),KXe=r(B0," or "),oB=n(B0,"A",{href:!0});var WAr=s(oB);ZXe=r(WAr,"MBart50TokenizerFast"),WAr.forEach(t),eze=r(B0," (mBART-50 model)"),B0.forEach(t),oze=i(E),fg=n(E,"LI",{});var e2e=s(fg);hQ=n(e2e,"STRONG",{});var QAr=s(hQ);rze=r(QAr,"mluke"),QAr.forEach(t),tze=r(e2e," \u2014 "),rB=n(e2e,"A",{href:!0});var HAr=s(rB);aze=r(HAr,"MLukeTokenizer"),HAr.forEach(t),nze=r(e2e," (mLUKE model)"),e2e.forEach(t),sze=i(E),as=n(E,"LI",{});var k0=s(as);pQ=n(k0,"STRONG",{});var UAr=s(pQ);lze=r(UAr,"mobilebert"),UAr.forEach(t),ize=r(k0," \u2014 "),tB=n(k0,"A",{href:!0});var JAr=s(tB);dze=r(JAr,"MobileBertTokenizer"),JAr.forEach(t),cze=r(k0," or "),aB=n(k0,"A",{href:!0});var YAr=s(aB);fze=r(YAr,"MobileBertTokenizerFast"),YAr.forEach(t),mze=r(k0," (MobileBERT model)"),k0.forEach(t),gze=i(E),ns=n(E,"LI",{});var x0=s(ns);_Q=n(x0,"STRONG",{});var KAr=s(_Q);hze=r(KAr,"mpnet"),KAr.forEach(t),pze=r(x0," \u2014 "),nB=n(x0,"A",{href:!0});var ZAr=s(nB);_ze=r(ZAr,"MPNetTokenizer"),ZAr.forEach(t),uze=r(x0," or "),sB=n(x0,"A",{href:!0});var e0r=s(sB);bze=r(e0r,"MPNetTokenizerFast"),e0r.forEach(t),vze=r(x0," (MPNet model)"),x0.forEach(t),Tze=i(E),ss=n(E,"LI",{});var R0=s(ss);uQ=n(R0,"STRONG",{});var o0r=s(uQ);Fze=r(o0r,"mt5"),o0r.forEach(t),Cze=r(R0," \u2014 "),lB=n(R0,"A",{href:!0});var r0r=s(lB);Mze=r(r0r,"MT5Tokenizer"),r0r.forEach(t),Eze=r(R0," or "),iB=n(R0,"A",{href:!0});var t0r=s(iB);yze=r(t0r,"MT5TokenizerFast"),t0r.forEach(t),wze=r(R0," (mT5 model)"),R0.forEach(t),Aze=i(E),ls=n(E,"LI",{});var S0=s(ls);bQ=n(S0,"STRONG",{});var a0r=s(bQ);Lze=r(a0r,"openai-gpt"),a0r.forEach(t),Bze=r(S0," \u2014 "),dB=n(S0,"A",{href:!0});var n0r=s(dB);kze=r(n0r,"OpenAIGPTTokenizer"),n0r.forEach(t),xze=r(S0," or "),cB=n(S0,"A",{href:!0});var s0r=s(cB);Rze=r(s0r,"OpenAIGPTTokenizerFast"),s0r.forEach(t),Sze=r(S0," (OpenAI GPT model)"),S0.forEach(t),Pze=i(E),is=n(E,"LI",{});var P0=s(is);vQ=n(P0,"STRONG",{});var l0r=s(vQ);$ze=r(l0r,"pegasus"),l0r.forEach(t),Ize=r(P0," \u2014 "),fB=n(P0,"A",{href:!0});var i0r=s(fB);jze=r(i0r,"PegasusTokenizer"),i0r.forEach(t),Nze=r(P0," or "),mB=n(P0,"A",{href:!0});var d0r=s(mB);Dze=r(d0r,"PegasusTokenizerFast"),d0r.forEach(t),qze=r(P0," (Pegasus model)"),P0.forEach(t),Oze=i(E),mg=n(E,"LI",{});var o2e=s(mg);TQ=n(o2e,"STRONG",{});var c0r=s(TQ);Gze=r(c0r,"perceiver"),c0r.forEach(t),Xze=r(o2e," \u2014 "),gB=n(o2e,"A",{href:!0});var f0r=s(gB);zze=r(f0r,"PerceiverTokenizer"),f0r.forEach(t),Vze=r(o2e," (Perceiver model)"),o2e.forEach(t),Wze=i(E),gg=n(E,"LI",{});var r2e=s(gg);FQ=n(r2e,"STRONG",{});var m0r=s(FQ);Qze=r(m0r,"phobert"),m0r.forEach(t),Hze=r(r2e," \u2014 "),hB=n(r2e,"A",{href:!0});var g0r=s(hB);Uze=r(g0r,"PhobertTokenizer"),g0r.forEach(t),Jze=r(r2e," (PhoBERT model)"),r2e.forEach(t),Yze=i(E),hg=n(E,"LI",{});var t2e=s(hg);CQ=n(t2e,"STRONG",{});var h0r=s(CQ);Kze=r(h0r,"plbart"),h0r.forEach(t),Zze=r(t2e," \u2014 "),pB=n(t2e,"A",{href:!0});var p0r=s(pB);eVe=r(p0r,"PLBartTokenizer"),p0r.forEach(t),oVe=r(t2e," (PLBart model)"),t2e.forEach(t),rVe=i(E),pg=n(E,"LI",{});var a2e=s(pg);MQ=n(a2e,"STRONG",{});var _0r=s(MQ);tVe=r(_0r,"prophetnet"),_0r.forEach(t),aVe=r(a2e," \u2014 "),_B=n(a2e,"A",{href:!0});var u0r=s(_B);nVe=r(u0r,"ProphetNetTokenizer"),u0r.forEach(t),sVe=r(a2e," (ProphetNet model)"),a2e.forEach(t),lVe=i(E),ds=n(E,"LI",{});var $0=s(ds);EQ=n($0,"STRONG",{});var b0r=s(EQ);iVe=r(b0r,"qdqbert"),b0r.forEach(t),dVe=r($0," \u2014 "),uB=n($0,"A",{href:!0});var v0r=s(uB);cVe=r(v0r,"BertTokenizer"),v0r.forEach(t),fVe=r($0," or "),bB=n($0,"A",{href:!0});var T0r=s(bB);mVe=r(T0r,"BertTokenizerFast"),T0r.forEach(t),gVe=r($0," (QDQBert model)"),$0.forEach(t),hVe=i(E),_g=n(E,"LI",{});var n2e=s(_g);yQ=n(n2e,"STRONG",{});var F0r=s(yQ);pVe=r(F0r,"rag"),F0r.forEach(t),_Ve=r(n2e," \u2014 "),vB=n(n2e,"A",{href:!0});var C0r=s(vB);uVe=r(C0r,"RagTokenizer"),C0r.forEach(t),bVe=r(n2e," (RAG model)"),n2e.forEach(t),vVe=i(E),cs=n(E,"LI",{});var I0=s(cs);wQ=n(I0,"STRONG",{});var M0r=s(wQ);TVe=r(M0r,"reformer"),M0r.forEach(t),FVe=r(I0," \u2014 "),TB=n(I0,"A",{href:!0});var E0r=s(TB);CVe=r(E0r,"ReformerTokenizer"),E0r.forEach(t),MVe=r(I0," or "),FB=n(I0,"A",{href:!0});var y0r=s(FB);EVe=r(y0r,"ReformerTokenizerFast"),y0r.forEach(t),yVe=r(I0," (Reformer model)"),I0.forEach(t),wVe=i(E),fs=n(E,"LI",{});var j0=s(fs);AQ=n(j0,"STRONG",{});var w0r=s(AQ);AVe=r(w0r,"rembert"),w0r.forEach(t),LVe=r(j0," \u2014 "),CB=n(j0,"A",{href:!0});var A0r=s(CB);BVe=r(A0r,"RemBertTokenizer"),A0r.forEach(t),kVe=r(j0," or "),MB=n(j0,"A",{href:!0});var L0r=s(MB);xVe=r(L0r,"RemBertTokenizerFast"),L0r.forEach(t),RVe=r(j0," (RemBERT model)"),j0.forEach(t),SVe=i(E),ms=n(E,"LI",{});var N0=s(ms);LQ=n(N0,"STRONG",{});var B0r=s(LQ);PVe=r(B0r,"retribert"),B0r.forEach(t),$Ve=r(N0," \u2014 "),EB=n(N0,"A",{href:!0});var k0r=s(EB);IVe=r(k0r,"RetriBertTokenizer"),k0r.forEach(t),jVe=r(N0," or "),yB=n(N0,"A",{href:!0});var x0r=s(yB);NVe=r(x0r,"RetriBertTokenizerFast"),x0r.forEach(t),DVe=r(N0," (RetriBERT model)"),N0.forEach(t),qVe=i(E),gs=n(E,"LI",{});var D0=s(gs);BQ=n(D0,"STRONG",{});var R0r=s(BQ);OVe=r(R0r,"roberta"),R0r.forEach(t),GVe=r(D0," \u2014 "),wB=n(D0,"A",{href:!0});var S0r=s(wB);XVe=r(S0r,"RobertaTokenizer"),S0r.forEach(t),zVe=r(D0," or "),AB=n(D0,"A",{href:!0});var P0r=s(AB);VVe=r(P0r,"RobertaTokenizerFast"),P0r.forEach(t),WVe=r(D0," (RoBERTa model)"),D0.forEach(t),QVe=i(E),hs=n(E,"LI",{});var q0=s(hs);kQ=n(q0,"STRONG",{});var $0r=s(kQ);HVe=r($0r,"roformer"),$0r.forEach(t),UVe=r(q0," \u2014 "),LB=n(q0,"A",{href:!0});var I0r=s(LB);JVe=r(I0r,"RoFormerTokenizer"),I0r.forEach(t),YVe=r(q0," or "),BB=n(q0,"A",{href:!0});var j0r=s(BB);KVe=r(j0r,"RoFormerTokenizerFast"),j0r.forEach(t),ZVe=r(q0," (RoFormer model)"),q0.forEach(t),eWe=i(E),ug=n(E,"LI",{});var s2e=s(ug);xQ=n(s2e,"STRONG",{});var N0r=s(xQ);oWe=r(N0r,"speech_to_text"),N0r.forEach(t),rWe=r(s2e," \u2014 "),kB=n(s2e,"A",{href:!0});var D0r=s(kB);tWe=r(D0r,"Speech2TextTokenizer"),D0r.forEach(t),aWe=r(s2e," (Speech2Text model)"),s2e.forEach(t),nWe=i(E),bg=n(E,"LI",{});var l2e=s(bg);RQ=n(l2e,"STRONG",{});var q0r=s(RQ);sWe=r(q0r,"speech_to_text_2"),q0r.forEach(t),lWe=r(l2e," \u2014 "),xB=n(l2e,"A",{href:!0});var O0r=s(xB);iWe=r(O0r,"Speech2Text2Tokenizer"),O0r.forEach(t),dWe=r(l2e," (Speech2Text2 model)"),l2e.forEach(t),cWe=i(E),ps=n(E,"LI",{});var O0=s(ps);SQ=n(O0,"STRONG",{});var G0r=s(SQ);fWe=r(G0r,"splinter"),G0r.forEach(t),mWe=r(O0," \u2014 "),RB=n(O0,"A",{href:!0});var X0r=s(RB);gWe=r(X0r,"SplinterTokenizer"),X0r.forEach(t),hWe=r(O0," or "),SB=n(O0,"A",{href:!0});var z0r=s(SB);pWe=r(z0r,"SplinterTokenizerFast"),z0r.forEach(t),_We=r(O0," (Splinter model)"),O0.forEach(t),uWe=i(E),_s=n(E,"LI",{});var G0=s(_s);PQ=n(G0,"STRONG",{});var V0r=s(PQ);bWe=r(V0r,"squeezebert"),V0r.forEach(t),vWe=r(G0," \u2014 "),PB=n(G0,"A",{href:!0});var W0r=s(PB);TWe=r(W0r,"SqueezeBertTokenizer"),W0r.forEach(t),FWe=r(G0," or "),$B=n(G0,"A",{href:!0});var Q0r=s($B);CWe=r(Q0r,"SqueezeBertTokenizerFast"),Q0r.forEach(t),MWe=r(G0," (SqueezeBERT model)"),G0.forEach(t),EWe=i(E),us=n(E,"LI",{});var X0=s(us);$Q=n(X0,"STRONG",{});var H0r=s($Q);yWe=r(H0r,"t5"),H0r.forEach(t),wWe=r(X0," \u2014 "),IB=n(X0,"A",{href:!0});var U0r=s(IB);AWe=r(U0r,"T5Tokenizer"),U0r.forEach(t),LWe=r(X0," or "),jB=n(X0,"A",{href:!0});var J0r=s(jB);BWe=r(J0r,"T5TokenizerFast"),J0r.forEach(t),kWe=r(X0," (T5 model)"),X0.forEach(t),xWe=i(E),vg=n(E,"LI",{});var i2e=s(vg);IQ=n(i2e,"STRONG",{});var Y0r=s(IQ);RWe=r(Y0r,"tapas"),Y0r.forEach(t),SWe=r(i2e," \u2014 "),NB=n(i2e,"A",{href:!0});var K0r=s(NB);PWe=r(K0r,"TapasTokenizer"),K0r.forEach(t),$We=r(i2e," (TAPAS model)"),i2e.forEach(t),IWe=i(E),Tg=n(E,"LI",{});var d2e=s(Tg);jQ=n(d2e,"STRONG",{});var Z0r=s(jQ);jWe=r(Z0r,"transfo-xl"),Z0r.forEach(t),NWe=r(d2e," \u2014 "),DB=n(d2e,"A",{href:!0});var e6r=s(DB);DWe=r(e6r,"TransfoXLTokenizer"),e6r.forEach(t),qWe=r(d2e," (Transformer-XL model)"),d2e.forEach(t),OWe=i(E),Fg=n(E,"LI",{});var c2e=s(Fg);NQ=n(c2e,"STRONG",{});var o6r=s(NQ);GWe=r(o6r,"wav2vec2"),o6r.forEach(t),XWe=r(c2e," \u2014 "),qB=n(c2e,"A",{href:!0});var r6r=s(qB);zWe=r(r6r,"Wav2Vec2CTCTokenizer"),r6r.forEach(t),VWe=r(c2e," (Wav2Vec2 model)"),c2e.forEach(t),WWe=i(E),Cg=n(E,"LI",{});var f2e=s(Cg);DQ=n(f2e,"STRONG",{});var t6r=s(DQ);QWe=r(t6r,"wav2vec2_phoneme"),t6r.forEach(t),HWe=r(f2e," \u2014 "),OB=n(f2e,"A",{href:!0});var a6r=s(OB);UWe=r(a6r,"Wav2Vec2PhonemeCTCTokenizer"),a6r.forEach(t),JWe=r(f2e," (Wav2Vec2Phoneme model)"),f2e.forEach(t),YWe=i(E),bs=n(E,"LI",{});var z0=s(bs);qQ=n(z0,"STRONG",{});var n6r=s(qQ);KWe=r(n6r,"xglm"),n6r.forEach(t),ZWe=r(z0," \u2014 "),OQ=n(z0,"CODE",{});var s6r=s(OQ);eQe=r(s6r,"XGLMTokenizer"),s6r.forEach(t),oQe=r(z0,"or "),GQ=n(z0,"CODE",{});var l6r=s(GQ);rQe=r(l6r,"XGLMTokenizerFast"),l6r.forEach(t),tQe=r(z0,"(XGLM model)"),z0.forEach(t),aQe=i(E),Mg=n(E,"LI",{});var m2e=s(Mg);XQ=n(m2e,"STRONG",{});var i6r=s(XQ);nQe=r(i6r,"xlm"),i6r.forEach(t),sQe=r(m2e," \u2014 "),GB=n(m2e,"A",{href:!0});var d6r=s(GB);lQe=r(d6r,"XLMTokenizer"),d6r.forEach(t),iQe=r(m2e," (XLM model)"),m2e.forEach(t),dQe=i(E),Eg=n(E,"LI",{});var g2e=s(Eg);zQ=n(g2e,"STRONG",{});var c6r=s(zQ);cQe=r(c6r,"xlm-prophetnet"),c6r.forEach(t),fQe=r(g2e," \u2014 "),XB=n(g2e,"A",{href:!0});var f6r=s(XB);mQe=r(f6r,"XLMProphetNetTokenizer"),f6r.forEach(t),gQe=r(g2e," (XLMProphetNet model)"),g2e.forEach(t),hQe=i(E),vs=n(E,"LI",{});var V0=s(vs);VQ=n(V0,"STRONG",{});var m6r=s(VQ);pQe=r(m6r,"xlm-roberta"),m6r.forEach(t),_Qe=r(V0," \u2014 "),zB=n(V0,"A",{href:!0});var g6r=s(zB);uQe=r(g6r,"XLMRobertaTokenizer"),g6r.forEach(t),bQe=r(V0," or "),VB=n(V0,"A",{href:!0});var h6r=s(VB);vQe=r(h6r,"XLMRobertaTokenizerFast"),h6r.forEach(t),TQe=r(V0," (XLM-RoBERTa model)"),V0.forEach(t),FQe=i(E),Ts=n(E,"LI",{});var W0=s(Ts);WQ=n(W0,"STRONG",{});var p6r=s(WQ);CQe=r(p6r,"xlnet"),p6r.forEach(t),MQe=r(W0," \u2014 "),WB=n(W0,"A",{href:!0});var _6r=s(WB);EQe=r(_6r,"XLNetTokenizer"),_6r.forEach(t),yQe=r(W0," or "),QB=n(W0,"A",{href:!0});var u6r=s(QB);wQe=r(u6r,"XLNetTokenizerFast"),u6r.forEach(t),AQe=r(W0," (XLNet model)"),W0.forEach(t),E.forEach(t),LQe=i(ra),QQ=n(ra,"P",{});var b6r=s(QQ);BQe=r(b6r,"Examples:"),b6r.forEach(t),kQe=i(ra),m(VC.$$.fragment,ra),ra.forEach(t),xQe=i(ys),yg=n(ys,"DIV",{class:!0});var kLe=s(yg);m(WC.$$.fragment,kLe),RQe=i(kLe),HQ=n(kLe,"P",{});var v6r=s(HQ);SQe=r(v6r,"Register a new tokenizer in this mapping."),v6r.forEach(t),kLe.forEach(t),ys.forEach(t),R0e=i(d),Mi=n(d,"H2",{class:!0});var xLe=s(Mi);wg=n(xLe,"A",{id:!0,class:!0,href:!0});var T6r=s(wg);UQ=n(T6r,"SPAN",{});var F6r=s(UQ);m(QC.$$.fragment,F6r),F6r.forEach(t),T6r.forEach(t),PQe=i(xLe),JQ=n(xLe,"SPAN",{});var C6r=s(JQ);$Qe=r(C6r,"AutoFeatureExtractor"),C6r.forEach(t),xLe.forEach(t),S0e=i(d),Oo=n(d,"DIV",{class:!0});var ws=s(Oo);m(HC.$$.fragment,ws),IQe=i(ws),UC=n(ws,"P",{});var RLe=s(UC);jQe=r(RLe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),HB=n(RLe,"A",{href:!0});var M6r=s(HB);NQe=r(M6r,"AutoFeatureExtractor.from_pretrained()"),M6r.forEach(t),DQe=r(RLe," class method."),RLe.forEach(t),qQe=i(ws),JC=n(ws,"P",{});var SLe=s(JC);OQe=r(SLe,"This class cannot be instantiated directly using "),YQ=n(SLe,"CODE",{});var E6r=s(YQ);GQe=r(E6r,"__init__()"),E6r.forEach(t),XQe=r(SLe," (throws an error)."),SLe.forEach(t),zQe=i(ws),Le=n(ws,"DIV",{class:!0});var yt=s(Le);m(YC.$$.fragment,yt),VQe=i(yt),KQ=n(yt,"P",{});var y6r=s(KQ);WQe=r(y6r,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),y6r.forEach(t),QQe=i(yt),ka=n(yt,"P",{});var P9=s(ka);HQe=r(P9,"The feature extractor class to instantiate is selected based on the "),ZQ=n(P9,"CODE",{});var w6r=s(ZQ);UQe=r(w6r,"model_type"),w6r.forEach(t),JQe=r(P9,` property of the config object
(either passed as an argument or loaded from `),eH=n(P9,"CODE",{});var A6r=s(eH);YQe=r(A6r,"pretrained_model_name_or_path"),A6r.forEach(t),KQe=r(P9,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),oH=n(P9,"CODE",{});var L6r=s(oH);ZQe=r(L6r,"pretrained_model_name_or_path"),L6r.forEach(t),eHe=r(P9,":"),P9.forEach(t),oHe=i(yt),se=n(yt,"UL",{});var de=s(se);Ag=n(de,"LI",{});var h2e=s(Ag);rH=n(h2e,"STRONG",{});var B6r=s(rH);rHe=r(B6r,"beit"),B6r.forEach(t),tHe=r(h2e," \u2014 "),UB=n(h2e,"A",{href:!0});var k6r=s(UB);aHe=r(k6r,"BeitFeatureExtractor"),k6r.forEach(t),nHe=r(h2e," (BEiT model)"),h2e.forEach(t),sHe=i(de),Lg=n(de,"LI",{});var p2e=s(Lg);tH=n(p2e,"STRONG",{});var x6r=s(tH);lHe=r(x6r,"clip"),x6r.forEach(t),iHe=r(p2e," \u2014 "),JB=n(p2e,"A",{href:!0});var R6r=s(JB);dHe=r(R6r,"CLIPFeatureExtractor"),R6r.forEach(t),cHe=r(p2e," (CLIP model)"),p2e.forEach(t),fHe=i(de),Bg=n(de,"LI",{});var _2e=s(Bg);aH=n(_2e,"STRONG",{});var S6r=s(aH);mHe=r(S6r,"convnext"),S6r.forEach(t),gHe=r(_2e," \u2014 "),nH=n(_2e,"CODE",{});var P6r=s(nH);hHe=r(P6r,"ConvNextFeatureExtractor"),P6r.forEach(t),pHe=r(_2e,"(ConvNext model)"),_2e.forEach(t),_He=i(de),kg=n(de,"LI",{});var u2e=s(kg);sH=n(u2e,"STRONG",{});var $6r=s(sH);uHe=r($6r,"deit"),$6r.forEach(t),bHe=r(u2e," \u2014 "),YB=n(u2e,"A",{href:!0});var I6r=s(YB);vHe=r(I6r,"DeiTFeatureExtractor"),I6r.forEach(t),THe=r(u2e," (DeiT model)"),u2e.forEach(t),FHe=i(de),xg=n(de,"LI",{});var b2e=s(xg);lH=n(b2e,"STRONG",{});var j6r=s(lH);CHe=r(j6r,"detr"),j6r.forEach(t),MHe=r(b2e," \u2014 "),KB=n(b2e,"A",{href:!0});var N6r=s(KB);EHe=r(N6r,"DetrFeatureExtractor"),N6r.forEach(t),yHe=r(b2e," (DETR model)"),b2e.forEach(t),wHe=i(de),Rg=n(de,"LI",{});var v2e=s(Rg);iH=n(v2e,"STRONG",{});var D6r=s(iH);AHe=r(D6r,"hubert"),D6r.forEach(t),LHe=r(v2e," \u2014 "),ZB=n(v2e,"A",{href:!0});var q6r=s(ZB);BHe=r(q6r,"Wav2Vec2FeatureExtractor"),q6r.forEach(t),kHe=r(v2e," (Hubert model)"),v2e.forEach(t),xHe=i(de),Sg=n(de,"LI",{});var T2e=s(Sg);dH=n(T2e,"STRONG",{});var O6r=s(dH);RHe=r(O6r,"layoutlmv2"),O6r.forEach(t),SHe=r(T2e," \u2014 "),ek=n(T2e,"A",{href:!0});var G6r=s(ek);PHe=r(G6r,"LayoutLMv2FeatureExtractor"),G6r.forEach(t),$He=r(T2e," (LayoutLMv2 model)"),T2e.forEach(t),IHe=i(de),Pg=n(de,"LI",{});var F2e=s(Pg);cH=n(F2e,"STRONG",{});var X6r=s(cH);jHe=r(X6r,"perceiver"),X6r.forEach(t),NHe=r(F2e," \u2014 "),ok=n(F2e,"A",{href:!0});var z6r=s(ok);DHe=r(z6r,"PerceiverFeatureExtractor"),z6r.forEach(t),qHe=r(F2e," (Perceiver model)"),F2e.forEach(t),OHe=i(de),$g=n(de,"LI",{});var C2e=s($g);fH=n(C2e,"STRONG",{});var V6r=s(fH);GHe=r(V6r,"poolformer"),V6r.forEach(t),XHe=r(C2e," \u2014 "),rk=n(C2e,"A",{href:!0});var W6r=s(rk);zHe=r(W6r,"PoolFormerFeatureExtractor"),W6r.forEach(t),VHe=r(C2e," (PoolFormer model)"),C2e.forEach(t),WHe=i(de),Ig=n(de,"LI",{});var M2e=s(Ig);mH=n(M2e,"STRONG",{});var Q6r=s(mH);QHe=r(Q6r,"segformer"),Q6r.forEach(t),HHe=r(M2e," \u2014 "),tk=n(M2e,"A",{href:!0});var H6r=s(tk);UHe=r(H6r,"SegformerFeatureExtractor"),H6r.forEach(t),JHe=r(M2e," (SegFormer model)"),M2e.forEach(t),YHe=i(de),jg=n(de,"LI",{});var E2e=s(jg);gH=n(E2e,"STRONG",{});var U6r=s(gH);KHe=r(U6r,"speech_to_text"),U6r.forEach(t),ZHe=r(E2e," \u2014 "),ak=n(E2e,"A",{href:!0});var J6r=s(ak);eUe=r(J6r,"Speech2TextFeatureExtractor"),J6r.forEach(t),oUe=r(E2e," (Speech2Text model)"),E2e.forEach(t),rUe=i(de),Ng=n(de,"LI",{});var y2e=s(Ng);hH=n(y2e,"STRONG",{});var Y6r=s(hH);tUe=r(Y6r,"swin"),Y6r.forEach(t),aUe=r(y2e," \u2014 "),nk=n(y2e,"A",{href:!0});var K6r=s(nk);nUe=r(K6r,"ViTFeatureExtractor"),K6r.forEach(t),sUe=r(y2e," (Swin model)"),y2e.forEach(t),lUe=i(de),Dg=n(de,"LI",{});var w2e=s(Dg);pH=n(w2e,"STRONG",{});var Z6r=s(pH);iUe=r(Z6r,"vit"),Z6r.forEach(t),dUe=r(w2e," \u2014 "),sk=n(w2e,"A",{href:!0});var eLr=s(sk);cUe=r(eLr,"ViTFeatureExtractor"),eLr.forEach(t),fUe=r(w2e," (ViT model)"),w2e.forEach(t),mUe=i(de),qg=n(de,"LI",{});var A2e=s(qg);_H=n(A2e,"STRONG",{});var oLr=s(_H);gUe=r(oLr,"vit_mae"),oLr.forEach(t),hUe=r(A2e," \u2014 "),lk=n(A2e,"A",{href:!0});var rLr=s(lk);pUe=r(rLr,"ViTFeatureExtractor"),rLr.forEach(t),_Ue=r(A2e," (ViTMAE model)"),A2e.forEach(t),uUe=i(de),Og=n(de,"LI",{});var L2e=s(Og);uH=n(L2e,"STRONG",{});var tLr=s(uH);bUe=r(tLr,"wav2vec2"),tLr.forEach(t),vUe=r(L2e," \u2014 "),ik=n(L2e,"A",{href:!0});var aLr=s(ik);TUe=r(aLr,"Wav2Vec2FeatureExtractor"),aLr.forEach(t),FUe=r(L2e," (Wav2Vec2 model)"),L2e.forEach(t),de.forEach(t),CUe=i(yt),m(Gg.$$.fragment,yt),MUe=i(yt),bH=n(yt,"P",{});var nLr=s(bH);EUe=r(nLr,"Examples:"),nLr.forEach(t),yUe=i(yt),m(KC.$$.fragment,yt),yt.forEach(t),wUe=i(ws),Xg=n(ws,"DIV",{class:!0});var PLe=s(Xg);m(ZC.$$.fragment,PLe),AUe=i(PLe),vH=n(PLe,"P",{});var sLr=s(vH);LUe=r(sLr,"Register a new feature extractor for this class."),sLr.forEach(t),PLe.forEach(t),ws.forEach(t),P0e=i(d),Ei=n(d,"H2",{class:!0});var $Le=s(Ei);zg=n($Le,"A",{id:!0,class:!0,href:!0});var lLr=s(zg);TH=n(lLr,"SPAN",{});var iLr=s(TH);m(eM.$$.fragment,iLr),iLr.forEach(t),lLr.forEach(t),BUe=i($Le),FH=n($Le,"SPAN",{});var dLr=s(FH);kUe=r(dLr,"AutoProcessor"),dLr.forEach(t),$Le.forEach(t),$0e=i(d),Go=n(d,"DIV",{class:!0});var As=s(Go);m(oM.$$.fragment,As),xUe=i(As),rM=n(As,"P",{});var ILe=s(rM);RUe=r(ILe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dk=n(ILe,"A",{href:!0});var cLr=s(dk);SUe=r(cLr,"AutoProcessor.from_pretrained()"),cLr.forEach(t),PUe=r(ILe," class method."),ILe.forEach(t),$Ue=i(As),tM=n(As,"P",{});var jLe=s(tM);IUe=r(jLe,"This class cannot be instantiated directly using "),CH=n(jLe,"CODE",{});var fLr=s(CH);jUe=r(fLr,"__init__()"),fLr.forEach(t),NUe=r(jLe," (throws an error)."),jLe.forEach(t),DUe=i(As),Be=n(As,"DIV",{class:!0});var wt=s(Be);m(aM.$$.fragment,wt),qUe=i(wt),MH=n(wt,"P",{});var mLr=s(MH);OUe=r(mLr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),mLr.forEach(t),GUe=i(wt),yi=n(wt,"P",{});var RG=s(yi);XUe=r(RG,"The processor class to instantiate is selected based on the "),EH=n(RG,"CODE",{});var gLr=s(EH);zUe=r(gLr,"model_type"),gLr.forEach(t),VUe=r(RG,` property of the config object (either
passed as an argument or loaded from `),yH=n(RG,"CODE",{});var hLr=s(yH);WUe=r(hLr,"pretrained_model_name_or_path"),hLr.forEach(t),QUe=r(RG," if possible):"),RG.forEach(t),HUe=i(wt),we=n(wt,"UL",{});var Io=s(we);Vg=n(Io,"LI",{});var B2e=s(Vg);wH=n(B2e,"STRONG",{});var pLr=s(wH);UUe=r(pLr,"clip"),pLr.forEach(t),JUe=r(B2e," \u2014 "),ck=n(B2e,"A",{href:!0});var _Lr=s(ck);YUe=r(_Lr,"CLIPProcessor"),_Lr.forEach(t),KUe=r(B2e," (CLIP model)"),B2e.forEach(t),ZUe=i(Io),Wg=n(Io,"LI",{});var k2e=s(Wg);AH=n(k2e,"STRONG",{});var uLr=s(AH);eJe=r(uLr,"layoutlmv2"),uLr.forEach(t),oJe=r(k2e," \u2014 "),fk=n(k2e,"A",{href:!0});var bLr=s(fk);rJe=r(bLr,"LayoutLMv2Processor"),bLr.forEach(t),tJe=r(k2e," (LayoutLMv2 model)"),k2e.forEach(t),aJe=i(Io),Qg=n(Io,"LI",{});var x2e=s(Qg);LH=n(x2e,"STRONG",{});var vLr=s(LH);nJe=r(vLr,"layoutxlm"),vLr.forEach(t),sJe=r(x2e," \u2014 "),mk=n(x2e,"A",{href:!0});var TLr=s(mk);lJe=r(TLr,"LayoutXLMProcessor"),TLr.forEach(t),iJe=r(x2e," (LayoutXLM model)"),x2e.forEach(t),dJe=i(Io),Hg=n(Io,"LI",{});var R2e=s(Hg);BH=n(R2e,"STRONG",{});var FLr=s(BH);cJe=r(FLr,"speech_to_text"),FLr.forEach(t),fJe=r(R2e," \u2014 "),gk=n(R2e,"A",{href:!0});var CLr=s(gk);mJe=r(CLr,"Speech2TextProcessor"),CLr.forEach(t),gJe=r(R2e," (Speech2Text model)"),R2e.forEach(t),hJe=i(Io),Ug=n(Io,"LI",{});var S2e=s(Ug);kH=n(S2e,"STRONG",{});var MLr=s(kH);pJe=r(MLr,"speech_to_text_2"),MLr.forEach(t),_Je=r(S2e," \u2014 "),hk=n(S2e,"A",{href:!0});var ELr=s(hk);uJe=r(ELr,"Speech2Text2Processor"),ELr.forEach(t),bJe=r(S2e," (Speech2Text2 model)"),S2e.forEach(t),vJe=i(Io),Jg=n(Io,"LI",{});var P2e=s(Jg);xH=n(P2e,"STRONG",{});var yLr=s(xH);TJe=r(yLr,"trocr"),yLr.forEach(t),FJe=r(P2e," \u2014 "),pk=n(P2e,"A",{href:!0});var wLr=s(pk);CJe=r(wLr,"TrOCRProcessor"),wLr.forEach(t),MJe=r(P2e," (TrOCR model)"),P2e.forEach(t),EJe=i(Io),Yg=n(Io,"LI",{});var $2e=s(Yg);RH=n($2e,"STRONG",{});var ALr=s(RH);yJe=r(ALr,"vision-text-dual-encoder"),ALr.forEach(t),wJe=r($2e," \u2014 "),_k=n($2e,"A",{href:!0});var LLr=s(_k);AJe=r(LLr,"VisionTextDualEncoderProcessor"),LLr.forEach(t),LJe=r($2e," (VisionTextDualEncoder model)"),$2e.forEach(t),BJe=i(Io),Kg=n(Io,"LI",{});var I2e=s(Kg);SH=n(I2e,"STRONG",{});var BLr=s(SH);kJe=r(BLr,"wav2vec2"),BLr.forEach(t),xJe=r(I2e," \u2014 "),uk=n(I2e,"A",{href:!0});var kLr=s(uk);RJe=r(kLr,"Wav2Vec2Processor"),kLr.forEach(t),SJe=r(I2e," (Wav2Vec2 model)"),I2e.forEach(t),Io.forEach(t),PJe=i(wt),m(Zg.$$.fragment,wt),$Je=i(wt),PH=n(wt,"P",{});var xLr=s(PH);IJe=r(xLr,"Examples:"),xLr.forEach(t),jJe=i(wt),m(nM.$$.fragment,wt),wt.forEach(t),NJe=i(As),eh=n(As,"DIV",{class:!0});var NLe=s(eh);m(sM.$$.fragment,NLe),DJe=i(NLe),$H=n(NLe,"P",{});var RLr=s($H);qJe=r(RLr,"Register a new processor for this class."),RLr.forEach(t),NLe.forEach(t),As.forEach(t),I0e=i(d),wi=n(d,"H2",{class:!0});var DLe=s(wi);oh=n(DLe,"A",{id:!0,class:!0,href:!0});var SLr=s(oh);IH=n(SLr,"SPAN",{});var PLr=s(IH);m(lM.$$.fragment,PLr),PLr.forEach(t),SLr.forEach(t),OJe=i(DLe),jH=n(DLe,"SPAN",{});var $Lr=s(jH);GJe=r($Lr,"AutoModel"),$Lr.forEach(t),DLe.forEach(t),j0e=i(d),Xo=n(d,"DIV",{class:!0});var Ls=s(Xo);m(iM.$$.fragment,Ls),XJe=i(Ls),Ai=n(Ls,"P",{});var SG=s(Ai);zJe=r(SG,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NH=n(SG,"CODE",{});var ILr=s(NH);VJe=r(ILr,"from_pretrained()"),ILr.forEach(t),WJe=r(SG,"class method or the "),DH=n(SG,"CODE",{});var jLr=s(DH);QJe=r(jLr,"from_config()"),jLr.forEach(t),HJe=r(SG,`class
method.`),SG.forEach(t),UJe=i(Ls),dM=n(Ls,"P",{});var qLe=s(dM);JJe=r(qLe,"This class cannot be instantiated directly using "),qH=n(qLe,"CODE",{});var NLr=s(qH);YJe=r(NLr,"__init__()"),NLr.forEach(t),KJe=r(qLe," (throws an error)."),qLe.forEach(t),ZJe=i(Ls),Pr=n(Ls,"DIV",{class:!0});var Bs=s(Pr);m(cM.$$.fragment,Bs),eYe=i(Bs),OH=n(Bs,"P",{});var DLr=s(OH);oYe=r(DLr,"Instantiates one of the base model classes of the library from a configuration."),DLr.forEach(t),rYe=i(Bs),Li=n(Bs,"P",{});var PG=s(Li);tYe=r(PG,`Note:
Loading a model from its configuration file does `),GH=n(PG,"STRONG",{});var qLr=s(GH);aYe=r(qLr,"not"),qLr.forEach(t),nYe=r(PG,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(PG,"CODE",{});var OLr=s(XH);sYe=r(OLr,"from_pretrained()"),OLr.forEach(t),lYe=r(PG,"to load the model weights."),PG.forEach(t),iYe=i(Bs),zH=n(Bs,"P",{});var GLr=s(zH);dYe=r(GLr,"Examples:"),GLr.forEach(t),cYe=i(Bs),m(fM.$$.fragment,Bs),Bs.forEach(t),fYe=i(Ls),ke=n(Ls,"DIV",{class:!0});var At=s(ke);m(mM.$$.fragment,At),mYe=i(At),VH=n(At,"P",{});var XLr=s(VH);gYe=r(XLr,"Instantiate one of the base model classes of the library from a pretrained model."),XLr.forEach(t),hYe=i(At),xa=n(At,"P",{});var $9=s(xa);pYe=r($9,"The model class to instantiate is selected based on the "),WH=n($9,"CODE",{});var zLr=s(WH);_Ye=r(zLr,"model_type"),zLr.forEach(t),uYe=r($9,` property of the config object (either
passed as an argument or loaded from `),QH=n($9,"CODE",{});var VLr=s(QH);bYe=r(VLr,"pretrained_model_name_or_path"),VLr.forEach(t),vYe=r($9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HH=n($9,"CODE",{});var WLr=s(HH);TYe=r(WLr,"pretrained_model_name_or_path"),WLr.forEach(t),FYe=r($9,":"),$9.forEach(t),CYe=i(At),F=n(At,"UL",{});var C=s(F);rh=n(C,"LI",{});var j2e=s(rh);UH=n(j2e,"STRONG",{});var QLr=s(UH);MYe=r(QLr,"albert"),QLr.forEach(t),EYe=r(j2e," \u2014 "),bk=n(j2e,"A",{href:!0});var HLr=s(bk);yYe=r(HLr,"AlbertModel"),HLr.forEach(t),wYe=r(j2e," (ALBERT model)"),j2e.forEach(t),AYe=i(C),th=n(C,"LI",{});var N2e=s(th);JH=n(N2e,"STRONG",{});var ULr=s(JH);LYe=r(ULr,"bart"),ULr.forEach(t),BYe=r(N2e," \u2014 "),vk=n(N2e,"A",{href:!0});var JLr=s(vk);kYe=r(JLr,"BartModel"),JLr.forEach(t),xYe=r(N2e," (BART model)"),N2e.forEach(t),RYe=i(C),ah=n(C,"LI",{});var D2e=s(ah);YH=n(D2e,"STRONG",{});var YLr=s(YH);SYe=r(YLr,"beit"),YLr.forEach(t),PYe=r(D2e," \u2014 "),Tk=n(D2e,"A",{href:!0});var KLr=s(Tk);$Ye=r(KLr,"BeitModel"),KLr.forEach(t),IYe=r(D2e," (BEiT model)"),D2e.forEach(t),jYe=i(C),nh=n(C,"LI",{});var q2e=s(nh);KH=n(q2e,"STRONG",{});var ZLr=s(KH);NYe=r(ZLr,"bert"),ZLr.forEach(t),DYe=r(q2e," \u2014 "),Fk=n(q2e,"A",{href:!0});var e8r=s(Fk);qYe=r(e8r,"BertModel"),e8r.forEach(t),OYe=r(q2e," (BERT model)"),q2e.forEach(t),GYe=i(C),sh=n(C,"LI",{});var O2e=s(sh);ZH=n(O2e,"STRONG",{});var o8r=s(ZH);XYe=r(o8r,"bert-generation"),o8r.forEach(t),zYe=r(O2e," \u2014 "),Ck=n(O2e,"A",{href:!0});var r8r=s(Ck);VYe=r(r8r,"BertGenerationEncoder"),r8r.forEach(t),WYe=r(O2e," (Bert Generation model)"),O2e.forEach(t),QYe=i(C),lh=n(C,"LI",{});var G2e=s(lh);eU=n(G2e,"STRONG",{});var t8r=s(eU);HYe=r(t8r,"big_bird"),t8r.forEach(t),UYe=r(G2e," \u2014 "),Mk=n(G2e,"A",{href:!0});var a8r=s(Mk);JYe=r(a8r,"BigBirdModel"),a8r.forEach(t),YYe=r(G2e," (BigBird model)"),G2e.forEach(t),KYe=i(C),ih=n(C,"LI",{});var X2e=s(ih);oU=n(X2e,"STRONG",{});var n8r=s(oU);ZYe=r(n8r,"bigbird_pegasus"),n8r.forEach(t),eKe=r(X2e," \u2014 "),Ek=n(X2e,"A",{href:!0});var s8r=s(Ek);oKe=r(s8r,"BigBirdPegasusModel"),s8r.forEach(t),rKe=r(X2e," (BigBirdPegasus model)"),X2e.forEach(t),tKe=i(C),dh=n(C,"LI",{});var z2e=s(dh);rU=n(z2e,"STRONG",{});var l8r=s(rU);aKe=r(l8r,"blenderbot"),l8r.forEach(t),nKe=r(z2e," \u2014 "),yk=n(z2e,"A",{href:!0});var i8r=s(yk);sKe=r(i8r,"BlenderbotModel"),i8r.forEach(t),lKe=r(z2e," (Blenderbot model)"),z2e.forEach(t),iKe=i(C),ch=n(C,"LI",{});var V2e=s(ch);tU=n(V2e,"STRONG",{});var d8r=s(tU);dKe=r(d8r,"blenderbot-small"),d8r.forEach(t),cKe=r(V2e," \u2014 "),wk=n(V2e,"A",{href:!0});var c8r=s(wk);fKe=r(c8r,"BlenderbotSmallModel"),c8r.forEach(t),mKe=r(V2e," (BlenderbotSmall model)"),V2e.forEach(t),gKe=i(C),fh=n(C,"LI",{});var W2e=s(fh);aU=n(W2e,"STRONG",{});var f8r=s(aU);hKe=r(f8r,"camembert"),f8r.forEach(t),pKe=r(W2e," \u2014 "),Ak=n(W2e,"A",{href:!0});var m8r=s(Ak);_Ke=r(m8r,"CamembertModel"),m8r.forEach(t),uKe=r(W2e," (CamemBERT model)"),W2e.forEach(t),bKe=i(C),mh=n(C,"LI",{});var Q2e=s(mh);nU=n(Q2e,"STRONG",{});var g8r=s(nU);vKe=r(g8r,"canine"),g8r.forEach(t),TKe=r(Q2e," \u2014 "),Lk=n(Q2e,"A",{href:!0});var h8r=s(Lk);FKe=r(h8r,"CanineModel"),h8r.forEach(t),CKe=r(Q2e," (Canine model)"),Q2e.forEach(t),MKe=i(C),gh=n(C,"LI",{});var H2e=s(gh);sU=n(H2e,"STRONG",{});var p8r=s(sU);EKe=r(p8r,"clip"),p8r.forEach(t),yKe=r(H2e," \u2014 "),Bk=n(H2e,"A",{href:!0});var _8r=s(Bk);wKe=r(_8r,"CLIPModel"),_8r.forEach(t),AKe=r(H2e," (CLIP model)"),H2e.forEach(t),LKe=i(C),hh=n(C,"LI",{});var U2e=s(hh);lU=n(U2e,"STRONG",{});var u8r=s(lU);BKe=r(u8r,"convbert"),u8r.forEach(t),kKe=r(U2e," \u2014 "),kk=n(U2e,"A",{href:!0});var b8r=s(kk);xKe=r(b8r,"ConvBertModel"),b8r.forEach(t),RKe=r(U2e," (ConvBERT model)"),U2e.forEach(t),SKe=i(C),ph=n(C,"LI",{});var J2e=s(ph);iU=n(J2e,"STRONG",{});var v8r=s(iU);PKe=r(v8r,"convnext"),v8r.forEach(t),$Ke=r(J2e," \u2014 "),dU=n(J2e,"CODE",{});var T8r=s(dU);IKe=r(T8r,"ConvNextModel"),T8r.forEach(t),jKe=r(J2e,"(ConvNext model)"),J2e.forEach(t),NKe=i(C),_h=n(C,"LI",{});var Y2e=s(_h);cU=n(Y2e,"STRONG",{});var F8r=s(cU);DKe=r(F8r,"ctrl"),F8r.forEach(t),qKe=r(Y2e," \u2014 "),xk=n(Y2e,"A",{href:!0});var C8r=s(xk);OKe=r(C8r,"CTRLModel"),C8r.forEach(t),GKe=r(Y2e," (CTRL model)"),Y2e.forEach(t),XKe=i(C),uh=n(C,"LI",{});var K2e=s(uh);fU=n(K2e,"STRONG",{});var M8r=s(fU);zKe=r(M8r,"deberta"),M8r.forEach(t),VKe=r(K2e," \u2014 "),Rk=n(K2e,"A",{href:!0});var E8r=s(Rk);WKe=r(E8r,"DebertaModel"),E8r.forEach(t),QKe=r(K2e," (DeBERTa model)"),K2e.forEach(t),HKe=i(C),bh=n(C,"LI",{});var Z2e=s(bh);mU=n(Z2e,"STRONG",{});var y8r=s(mU);UKe=r(y8r,"deberta-v2"),y8r.forEach(t),JKe=r(Z2e," \u2014 "),Sk=n(Z2e,"A",{href:!0});var w8r=s(Sk);YKe=r(w8r,"DebertaV2Model"),w8r.forEach(t),KKe=r(Z2e," (DeBERTa-v2 model)"),Z2e.forEach(t),ZKe=i(C),vh=n(C,"LI",{});var eve=s(vh);gU=n(eve,"STRONG",{});var A8r=s(gU);eZe=r(A8r,"deit"),A8r.forEach(t),oZe=r(eve," \u2014 "),Pk=n(eve,"A",{href:!0});var L8r=s(Pk);rZe=r(L8r,"DeiTModel"),L8r.forEach(t),tZe=r(eve," (DeiT model)"),eve.forEach(t),aZe=i(C),Th=n(C,"LI",{});var ove=s(Th);hU=n(ove,"STRONG",{});var B8r=s(hU);nZe=r(B8r,"detr"),B8r.forEach(t),sZe=r(ove," \u2014 "),$k=n(ove,"A",{href:!0});var k8r=s($k);lZe=r(k8r,"DetrModel"),k8r.forEach(t),iZe=r(ove," (DETR model)"),ove.forEach(t),dZe=i(C),Fh=n(C,"LI",{});var rve=s(Fh);pU=n(rve,"STRONG",{});var x8r=s(pU);cZe=r(x8r,"distilbert"),x8r.forEach(t),fZe=r(rve," \u2014 "),Ik=n(rve,"A",{href:!0});var R8r=s(Ik);mZe=r(R8r,"DistilBertModel"),R8r.forEach(t),gZe=r(rve," (DistilBERT model)"),rve.forEach(t),hZe=i(C),Ch=n(C,"LI",{});var tve=s(Ch);_U=n(tve,"STRONG",{});var S8r=s(_U);pZe=r(S8r,"dpr"),S8r.forEach(t),_Ze=r(tve," \u2014 "),jk=n(tve,"A",{href:!0});var P8r=s(jk);uZe=r(P8r,"DPRQuestionEncoder"),P8r.forEach(t),bZe=r(tve," (DPR model)"),tve.forEach(t),vZe=i(C),Mh=n(C,"LI",{});var ave=s(Mh);uU=n(ave,"STRONG",{});var $8r=s(uU);TZe=r($8r,"electra"),$8r.forEach(t),FZe=r(ave," \u2014 "),Nk=n(ave,"A",{href:!0});var I8r=s(Nk);CZe=r(I8r,"ElectraModel"),I8r.forEach(t),MZe=r(ave," (ELECTRA model)"),ave.forEach(t),EZe=i(C),Eh=n(C,"LI",{});var nve=s(Eh);bU=n(nve,"STRONG",{});var j8r=s(bU);yZe=r(j8r,"flaubert"),j8r.forEach(t),wZe=r(nve," \u2014 "),Dk=n(nve,"A",{href:!0});var N8r=s(Dk);AZe=r(N8r,"FlaubertModel"),N8r.forEach(t),LZe=r(nve," (FlauBERT model)"),nve.forEach(t),BZe=i(C),yh=n(C,"LI",{});var sve=s(yh);vU=n(sve,"STRONG",{});var D8r=s(vU);kZe=r(D8r,"fnet"),D8r.forEach(t),xZe=r(sve," \u2014 "),qk=n(sve,"A",{href:!0});var q8r=s(qk);RZe=r(q8r,"FNetModel"),q8r.forEach(t),SZe=r(sve," (FNet model)"),sve.forEach(t),PZe=i(C),wh=n(C,"LI",{});var lve=s(wh);TU=n(lve,"STRONG",{});var O8r=s(TU);$Ze=r(O8r,"fsmt"),O8r.forEach(t),IZe=r(lve," \u2014 "),Ok=n(lve,"A",{href:!0});var G8r=s(Ok);jZe=r(G8r,"FSMTModel"),G8r.forEach(t),NZe=r(lve," (FairSeq Machine-Translation model)"),lve.forEach(t),DZe=i(C),Fs=n(C,"LI",{});var Q0=s(Fs);FU=n(Q0,"STRONG",{});var X8r=s(FU);qZe=r(X8r,"funnel"),X8r.forEach(t),OZe=r(Q0," \u2014 "),Gk=n(Q0,"A",{href:!0});var z8r=s(Gk);GZe=r(z8r,"FunnelModel"),z8r.forEach(t),XZe=r(Q0," or "),Xk=n(Q0,"A",{href:!0});var V8r=s(Xk);zZe=r(V8r,"FunnelBaseModel"),V8r.forEach(t),VZe=r(Q0," (Funnel Transformer model)"),Q0.forEach(t),WZe=i(C),Ah=n(C,"LI",{});var ive=s(Ah);CU=n(ive,"STRONG",{});var W8r=s(CU);QZe=r(W8r,"gpt2"),W8r.forEach(t),HZe=r(ive," \u2014 "),zk=n(ive,"A",{href:!0});var Q8r=s(zk);UZe=r(Q8r,"GPT2Model"),Q8r.forEach(t),JZe=r(ive," (OpenAI GPT-2 model)"),ive.forEach(t),YZe=i(C),Lh=n(C,"LI",{});var dve=s(Lh);MU=n(dve,"STRONG",{});var H8r=s(MU);KZe=r(H8r,"gpt_neo"),H8r.forEach(t),ZZe=r(dve," \u2014 "),Vk=n(dve,"A",{href:!0});var U8r=s(Vk);eeo=r(U8r,"GPTNeoModel"),U8r.forEach(t),oeo=r(dve," (GPT Neo model)"),dve.forEach(t),reo=i(C),Bh=n(C,"LI",{});var cve=s(Bh);EU=n(cve,"STRONG",{});var J8r=s(EU);teo=r(J8r,"gptj"),J8r.forEach(t),aeo=r(cve," \u2014 "),Wk=n(cve,"A",{href:!0});var Y8r=s(Wk);neo=r(Y8r,"GPTJModel"),Y8r.forEach(t),seo=r(cve," (GPT-J model)"),cve.forEach(t),leo=i(C),kh=n(C,"LI",{});var fve=s(kh);yU=n(fve,"STRONG",{});var K8r=s(yU);ieo=r(K8r,"hubert"),K8r.forEach(t),deo=r(fve," \u2014 "),Qk=n(fve,"A",{href:!0});var Z8r=s(Qk);ceo=r(Z8r,"HubertModel"),Z8r.forEach(t),feo=r(fve," (Hubert model)"),fve.forEach(t),meo=i(C),xh=n(C,"LI",{});var mve=s(xh);wU=n(mve,"STRONG",{});var eBr=s(wU);geo=r(eBr,"ibert"),eBr.forEach(t),heo=r(mve," \u2014 "),Hk=n(mve,"A",{href:!0});var oBr=s(Hk);peo=r(oBr,"IBertModel"),oBr.forEach(t),_eo=r(mve," (I-BERT model)"),mve.forEach(t),ueo=i(C),Rh=n(C,"LI",{});var gve=s(Rh);AU=n(gve,"STRONG",{});var rBr=s(AU);beo=r(rBr,"imagegpt"),rBr.forEach(t),veo=r(gve," \u2014 "),Uk=n(gve,"A",{href:!0});var tBr=s(Uk);Teo=r(tBr,"ImageGPTModel"),tBr.forEach(t),Feo=r(gve," (ImageGPT model)"),gve.forEach(t),Ceo=i(C),Sh=n(C,"LI",{});var hve=s(Sh);LU=n(hve,"STRONG",{});var aBr=s(LU);Meo=r(aBr,"layoutlm"),aBr.forEach(t),Eeo=r(hve," \u2014 "),Jk=n(hve,"A",{href:!0});var nBr=s(Jk);yeo=r(nBr,"LayoutLMModel"),nBr.forEach(t),weo=r(hve," (LayoutLM model)"),hve.forEach(t),Aeo=i(C),Ph=n(C,"LI",{});var pve=s(Ph);BU=n(pve,"STRONG",{});var sBr=s(BU);Leo=r(sBr,"layoutlmv2"),sBr.forEach(t),Beo=r(pve," \u2014 "),Yk=n(pve,"A",{href:!0});var lBr=s(Yk);keo=r(lBr,"LayoutLMv2Model"),lBr.forEach(t),xeo=r(pve," (LayoutLMv2 model)"),pve.forEach(t),Reo=i(C),$h=n(C,"LI",{});var _ve=s($h);kU=n(_ve,"STRONG",{});var iBr=s(kU);Seo=r(iBr,"led"),iBr.forEach(t),Peo=r(_ve," \u2014 "),Kk=n(_ve,"A",{href:!0});var dBr=s(Kk);$eo=r(dBr,"LEDModel"),dBr.forEach(t),Ieo=r(_ve," (LED model)"),_ve.forEach(t),jeo=i(C),Ih=n(C,"LI",{});var uve=s(Ih);xU=n(uve,"STRONG",{});var cBr=s(xU);Neo=r(cBr,"longformer"),cBr.forEach(t),Deo=r(uve," \u2014 "),Zk=n(uve,"A",{href:!0});var fBr=s(Zk);qeo=r(fBr,"LongformerModel"),fBr.forEach(t),Oeo=r(uve," (Longformer model)"),uve.forEach(t),Geo=i(C),jh=n(C,"LI",{});var bve=s(jh);RU=n(bve,"STRONG",{});var mBr=s(RU);Xeo=r(mBr,"luke"),mBr.forEach(t),zeo=r(bve," \u2014 "),ex=n(bve,"A",{href:!0});var gBr=s(ex);Veo=r(gBr,"LukeModel"),gBr.forEach(t),Weo=r(bve," (LUKE model)"),bve.forEach(t),Qeo=i(C),Nh=n(C,"LI",{});var vve=s(Nh);SU=n(vve,"STRONG",{});var hBr=s(SU);Heo=r(hBr,"lxmert"),hBr.forEach(t),Ueo=r(vve," \u2014 "),ox=n(vve,"A",{href:!0});var pBr=s(ox);Jeo=r(pBr,"LxmertModel"),pBr.forEach(t),Yeo=r(vve," (LXMERT model)"),vve.forEach(t),Keo=i(C),Dh=n(C,"LI",{});var Tve=s(Dh);PU=n(Tve,"STRONG",{});var _Br=s(PU);Zeo=r(_Br,"m2m_100"),_Br.forEach(t),eoo=r(Tve," \u2014 "),rx=n(Tve,"A",{href:!0});var uBr=s(rx);ooo=r(uBr,"M2M100Model"),uBr.forEach(t),roo=r(Tve," (M2M100 model)"),Tve.forEach(t),too=i(C),qh=n(C,"LI",{});var Fve=s(qh);$U=n(Fve,"STRONG",{});var bBr=s($U);aoo=r(bBr,"marian"),bBr.forEach(t),noo=r(Fve," \u2014 "),tx=n(Fve,"A",{href:!0});var vBr=s(tx);soo=r(vBr,"MarianModel"),vBr.forEach(t),loo=r(Fve," (Marian model)"),Fve.forEach(t),ioo=i(C),Oh=n(C,"LI",{});var Cve=s(Oh);IU=n(Cve,"STRONG",{});var TBr=s(IU);doo=r(TBr,"mbart"),TBr.forEach(t),coo=r(Cve," \u2014 "),ax=n(Cve,"A",{href:!0});var FBr=s(ax);foo=r(FBr,"MBartModel"),FBr.forEach(t),moo=r(Cve," (mBART model)"),Cve.forEach(t),goo=i(C),Gh=n(C,"LI",{});var Mve=s(Gh);jU=n(Mve,"STRONG",{});var CBr=s(jU);hoo=r(CBr,"megatron-bert"),CBr.forEach(t),poo=r(Mve," \u2014 "),nx=n(Mve,"A",{href:!0});var MBr=s(nx);_oo=r(MBr,"MegatronBertModel"),MBr.forEach(t),uoo=r(Mve," (MegatronBert model)"),Mve.forEach(t),boo=i(C),Xh=n(C,"LI",{});var Eve=s(Xh);NU=n(Eve,"STRONG",{});var EBr=s(NU);voo=r(EBr,"mobilebert"),EBr.forEach(t),Too=r(Eve," \u2014 "),sx=n(Eve,"A",{href:!0});var yBr=s(sx);Foo=r(yBr,"MobileBertModel"),yBr.forEach(t),Coo=r(Eve," (MobileBERT model)"),Eve.forEach(t),Moo=i(C),zh=n(C,"LI",{});var yve=s(zh);DU=n(yve,"STRONG",{});var wBr=s(DU);Eoo=r(wBr,"mpnet"),wBr.forEach(t),yoo=r(yve," \u2014 "),lx=n(yve,"A",{href:!0});var ABr=s(lx);woo=r(ABr,"MPNetModel"),ABr.forEach(t),Aoo=r(yve," (MPNet model)"),yve.forEach(t),Loo=i(C),Vh=n(C,"LI",{});var wve=s(Vh);qU=n(wve,"STRONG",{});var LBr=s(qU);Boo=r(LBr,"mt5"),LBr.forEach(t),koo=r(wve," \u2014 "),ix=n(wve,"A",{href:!0});var BBr=s(ix);xoo=r(BBr,"MT5Model"),BBr.forEach(t),Roo=r(wve," (mT5 model)"),wve.forEach(t),Soo=i(C),Wh=n(C,"LI",{});var Ave=s(Wh);OU=n(Ave,"STRONG",{});var kBr=s(OU);Poo=r(kBr,"nystromformer"),kBr.forEach(t),$oo=r(Ave," \u2014 "),dx=n(Ave,"A",{href:!0});var xBr=s(dx);Ioo=r(xBr,"NystromformerModel"),xBr.forEach(t),joo=r(Ave," (Nystromformer model)"),Ave.forEach(t),Noo=i(C),Qh=n(C,"LI",{});var Lve=s(Qh);GU=n(Lve,"STRONG",{});var RBr=s(GU);Doo=r(RBr,"openai-gpt"),RBr.forEach(t),qoo=r(Lve," \u2014 "),cx=n(Lve,"A",{href:!0});var SBr=s(cx);Ooo=r(SBr,"OpenAIGPTModel"),SBr.forEach(t),Goo=r(Lve," (OpenAI GPT model)"),Lve.forEach(t),Xoo=i(C),Hh=n(C,"LI",{});var Bve=s(Hh);XU=n(Bve,"STRONG",{});var PBr=s(XU);zoo=r(PBr,"pegasus"),PBr.forEach(t),Voo=r(Bve," \u2014 "),fx=n(Bve,"A",{href:!0});var $Br=s(fx);Woo=r($Br,"PegasusModel"),$Br.forEach(t),Qoo=r(Bve," (Pegasus model)"),Bve.forEach(t),Hoo=i(C),Uh=n(C,"LI",{});var kve=s(Uh);zU=n(kve,"STRONG",{});var IBr=s(zU);Uoo=r(IBr,"perceiver"),IBr.forEach(t),Joo=r(kve," \u2014 "),mx=n(kve,"A",{href:!0});var jBr=s(mx);Yoo=r(jBr,"PerceiverModel"),jBr.forEach(t),Koo=r(kve," (Perceiver model)"),kve.forEach(t),Zoo=i(C),Jh=n(C,"LI",{});var xve=s(Jh);VU=n(xve,"STRONG",{});var NBr=s(VU);ero=r(NBr,"plbart"),NBr.forEach(t),oro=r(xve," \u2014 "),gx=n(xve,"A",{href:!0});var DBr=s(gx);rro=r(DBr,"PLBartModel"),DBr.forEach(t),tro=r(xve," (PLBart model)"),xve.forEach(t),aro=i(C),Yh=n(C,"LI",{});var Rve=s(Yh);WU=n(Rve,"STRONG",{});var qBr=s(WU);nro=r(qBr,"poolformer"),qBr.forEach(t),sro=r(Rve," \u2014 "),hx=n(Rve,"A",{href:!0});var OBr=s(hx);lro=r(OBr,"PoolFormerModel"),OBr.forEach(t),iro=r(Rve," (PoolFormer model)"),Rve.forEach(t),dro=i(C),Kh=n(C,"LI",{});var Sve=s(Kh);QU=n(Sve,"STRONG",{});var GBr=s(QU);cro=r(GBr,"prophetnet"),GBr.forEach(t),fro=r(Sve," \u2014 "),px=n(Sve,"A",{href:!0});var XBr=s(px);mro=r(XBr,"ProphetNetModel"),XBr.forEach(t),gro=r(Sve," (ProphetNet model)"),Sve.forEach(t),hro=i(C),Zh=n(C,"LI",{});var Pve=s(Zh);HU=n(Pve,"STRONG",{});var zBr=s(HU);pro=r(zBr,"qdqbert"),zBr.forEach(t),_ro=r(Pve," \u2014 "),_x=n(Pve,"A",{href:!0});var VBr=s(_x);uro=r(VBr,"QDQBertModel"),VBr.forEach(t),bro=r(Pve," (QDQBert model)"),Pve.forEach(t),vro=i(C),ep=n(C,"LI",{});var $ve=s(ep);UU=n($ve,"STRONG",{});var WBr=s(UU);Tro=r(WBr,"reformer"),WBr.forEach(t),Fro=r($ve," \u2014 "),ux=n($ve,"A",{href:!0});var QBr=s(ux);Cro=r(QBr,"ReformerModel"),QBr.forEach(t),Mro=r($ve," (Reformer model)"),$ve.forEach(t),Ero=i(C),op=n(C,"LI",{});var Ive=s(op);JU=n(Ive,"STRONG",{});var HBr=s(JU);yro=r(HBr,"rembert"),HBr.forEach(t),wro=r(Ive," \u2014 "),bx=n(Ive,"A",{href:!0});var UBr=s(bx);Aro=r(UBr,"RemBertModel"),UBr.forEach(t),Lro=r(Ive," (RemBERT model)"),Ive.forEach(t),Bro=i(C),rp=n(C,"LI",{});var jve=s(rp);YU=n(jve,"STRONG",{});var JBr=s(YU);kro=r(JBr,"retribert"),JBr.forEach(t),xro=r(jve," \u2014 "),vx=n(jve,"A",{href:!0});var YBr=s(vx);Rro=r(YBr,"RetriBertModel"),YBr.forEach(t),Sro=r(jve," (RetriBERT model)"),jve.forEach(t),Pro=i(C),tp=n(C,"LI",{});var Nve=s(tp);KU=n(Nve,"STRONG",{});var KBr=s(KU);$ro=r(KBr,"roberta"),KBr.forEach(t),Iro=r(Nve," \u2014 "),Tx=n(Nve,"A",{href:!0});var ZBr=s(Tx);jro=r(ZBr,"RobertaModel"),ZBr.forEach(t),Nro=r(Nve," (RoBERTa model)"),Nve.forEach(t),Dro=i(C),ap=n(C,"LI",{});var Dve=s(ap);ZU=n(Dve,"STRONG",{});var ekr=s(ZU);qro=r(ekr,"roformer"),ekr.forEach(t),Oro=r(Dve," \u2014 "),Fx=n(Dve,"A",{href:!0});var okr=s(Fx);Gro=r(okr,"RoFormerModel"),okr.forEach(t),Xro=r(Dve," (RoFormer model)"),Dve.forEach(t),zro=i(C),np=n(C,"LI",{});var qve=s(np);eJ=n(qve,"STRONG",{});var rkr=s(eJ);Vro=r(rkr,"segformer"),rkr.forEach(t),Wro=r(qve," \u2014 "),Cx=n(qve,"A",{href:!0});var tkr=s(Cx);Qro=r(tkr,"SegformerModel"),tkr.forEach(t),Hro=r(qve," (SegFormer model)"),qve.forEach(t),Uro=i(C),sp=n(C,"LI",{});var Ove=s(sp);oJ=n(Ove,"STRONG",{});var akr=s(oJ);Jro=r(akr,"sew"),akr.forEach(t),Yro=r(Ove," \u2014 "),Mx=n(Ove,"A",{href:!0});var nkr=s(Mx);Kro=r(nkr,"SEWModel"),nkr.forEach(t),Zro=r(Ove," (SEW model)"),Ove.forEach(t),eto=i(C),lp=n(C,"LI",{});var Gve=s(lp);rJ=n(Gve,"STRONG",{});var skr=s(rJ);oto=r(skr,"sew-d"),skr.forEach(t),rto=r(Gve," \u2014 "),Ex=n(Gve,"A",{href:!0});var lkr=s(Ex);tto=r(lkr,"SEWDModel"),lkr.forEach(t),ato=r(Gve," (SEW-D model)"),Gve.forEach(t),nto=i(C),ip=n(C,"LI",{});var Xve=s(ip);tJ=n(Xve,"STRONG",{});var ikr=s(tJ);sto=r(ikr,"speech_to_text"),ikr.forEach(t),lto=r(Xve," \u2014 "),yx=n(Xve,"A",{href:!0});var dkr=s(yx);ito=r(dkr,"Speech2TextModel"),dkr.forEach(t),dto=r(Xve," (Speech2Text model)"),Xve.forEach(t),cto=i(C),dp=n(C,"LI",{});var zve=s(dp);aJ=n(zve,"STRONG",{});var ckr=s(aJ);fto=r(ckr,"splinter"),ckr.forEach(t),mto=r(zve," \u2014 "),wx=n(zve,"A",{href:!0});var fkr=s(wx);gto=r(fkr,"SplinterModel"),fkr.forEach(t),hto=r(zve," (Splinter model)"),zve.forEach(t),pto=i(C),cp=n(C,"LI",{});var Vve=s(cp);nJ=n(Vve,"STRONG",{});var mkr=s(nJ);_to=r(mkr,"squeezebert"),mkr.forEach(t),uto=r(Vve," \u2014 "),Ax=n(Vve,"A",{href:!0});var gkr=s(Ax);bto=r(gkr,"SqueezeBertModel"),gkr.forEach(t),vto=r(Vve," (SqueezeBERT model)"),Vve.forEach(t),Tto=i(C),fp=n(C,"LI",{});var Wve=s(fp);sJ=n(Wve,"STRONG",{});var hkr=s(sJ);Fto=r(hkr,"swin"),hkr.forEach(t),Cto=r(Wve," \u2014 "),Lx=n(Wve,"A",{href:!0});var pkr=s(Lx);Mto=r(pkr,"SwinModel"),pkr.forEach(t),Eto=r(Wve," (Swin model)"),Wve.forEach(t),yto=i(C),mp=n(C,"LI",{});var Qve=s(mp);lJ=n(Qve,"STRONG",{});var _kr=s(lJ);wto=r(_kr,"t5"),_kr.forEach(t),Ato=r(Qve," \u2014 "),Bx=n(Qve,"A",{href:!0});var ukr=s(Bx);Lto=r(ukr,"T5Model"),ukr.forEach(t),Bto=r(Qve," (T5 model)"),Qve.forEach(t),kto=i(C),gp=n(C,"LI",{});var Hve=s(gp);iJ=n(Hve,"STRONG",{});var bkr=s(iJ);xto=r(bkr,"tapas"),bkr.forEach(t),Rto=r(Hve," \u2014 "),kx=n(Hve,"A",{href:!0});var vkr=s(kx);Sto=r(vkr,"TapasModel"),vkr.forEach(t),Pto=r(Hve," (TAPAS model)"),Hve.forEach(t),$to=i(C),hp=n(C,"LI",{});var Uve=s(hp);dJ=n(Uve,"STRONG",{});var Tkr=s(dJ);Ito=r(Tkr,"transfo-xl"),Tkr.forEach(t),jto=r(Uve," \u2014 "),xx=n(Uve,"A",{href:!0});var Fkr=s(xx);Nto=r(Fkr,"TransfoXLModel"),Fkr.forEach(t),Dto=r(Uve," (Transformer-XL model)"),Uve.forEach(t),qto=i(C),pp=n(C,"LI",{});var Jve=s(pp);cJ=n(Jve,"STRONG",{});var Ckr=s(cJ);Oto=r(Ckr,"unispeech"),Ckr.forEach(t),Gto=r(Jve," \u2014 "),Rx=n(Jve,"A",{href:!0});var Mkr=s(Rx);Xto=r(Mkr,"UniSpeechModel"),Mkr.forEach(t),zto=r(Jve," (UniSpeech model)"),Jve.forEach(t),Vto=i(C),_p=n(C,"LI",{});var Yve=s(_p);fJ=n(Yve,"STRONG",{});var Ekr=s(fJ);Wto=r(Ekr,"unispeech-sat"),Ekr.forEach(t),Qto=r(Yve," \u2014 "),Sx=n(Yve,"A",{href:!0});var ykr=s(Sx);Hto=r(ykr,"UniSpeechSatModel"),ykr.forEach(t),Uto=r(Yve," (UniSpeechSat model)"),Yve.forEach(t),Jto=i(C),up=n(C,"LI",{});var Kve=s(up);mJ=n(Kve,"STRONG",{});var wkr=s(mJ);Yto=r(wkr,"vilt"),wkr.forEach(t),Kto=r(Kve," \u2014 "),Px=n(Kve,"A",{href:!0});var Akr=s(Px);Zto=r(Akr,"ViltModel"),Akr.forEach(t),eao=r(Kve," (ViLT model)"),Kve.forEach(t),oao=i(C),bp=n(C,"LI",{});var Zve=s(bp);gJ=n(Zve,"STRONG",{});var Lkr=s(gJ);rao=r(Lkr,"vision-text-dual-encoder"),Lkr.forEach(t),tao=r(Zve," \u2014 "),$x=n(Zve,"A",{href:!0});var Bkr=s($x);aao=r(Bkr,"VisionTextDualEncoderModel"),Bkr.forEach(t),nao=r(Zve," (VisionTextDualEncoder model)"),Zve.forEach(t),sao=i(C),vp=n(C,"LI",{});var eTe=s(vp);hJ=n(eTe,"STRONG",{});var kkr=s(hJ);lao=r(kkr,"visual_bert"),kkr.forEach(t),iao=r(eTe," \u2014 "),Ix=n(eTe,"A",{href:!0});var xkr=s(Ix);dao=r(xkr,"VisualBertModel"),xkr.forEach(t),cao=r(eTe," (VisualBert model)"),eTe.forEach(t),fao=i(C),Tp=n(C,"LI",{});var oTe=s(Tp);pJ=n(oTe,"STRONG",{});var Rkr=s(pJ);mao=r(Rkr,"vit"),Rkr.forEach(t),gao=r(oTe," \u2014 "),jx=n(oTe,"A",{href:!0});var Skr=s(jx);hao=r(Skr,"ViTModel"),Skr.forEach(t),pao=r(oTe," (ViT model)"),oTe.forEach(t),_ao=i(C),Fp=n(C,"LI",{});var rTe=s(Fp);_J=n(rTe,"STRONG",{});var Pkr=s(_J);uao=r(Pkr,"vit_mae"),Pkr.forEach(t),bao=r(rTe," \u2014 "),Nx=n(rTe,"A",{href:!0});var $kr=s(Nx);vao=r($kr,"ViTMAEModel"),$kr.forEach(t),Tao=r(rTe," (ViTMAE model)"),rTe.forEach(t),Fao=i(C),Cp=n(C,"LI",{});var tTe=s(Cp);uJ=n(tTe,"STRONG",{});var Ikr=s(uJ);Cao=r(Ikr,"wav2vec2"),Ikr.forEach(t),Mao=r(tTe," \u2014 "),Dx=n(tTe,"A",{href:!0});var jkr=s(Dx);Eao=r(jkr,"Wav2Vec2Model"),jkr.forEach(t),yao=r(tTe," (Wav2Vec2 model)"),tTe.forEach(t),wao=i(C),Mp=n(C,"LI",{});var aTe=s(Mp);bJ=n(aTe,"STRONG",{});var Nkr=s(bJ);Aao=r(Nkr,"wavlm"),Nkr.forEach(t),Lao=r(aTe," \u2014 "),qx=n(aTe,"A",{href:!0});var Dkr=s(qx);Bao=r(Dkr,"WavLMModel"),Dkr.forEach(t),kao=r(aTe," (WavLM model)"),aTe.forEach(t),xao=i(C),Ep=n(C,"LI",{});var nTe=s(Ep);vJ=n(nTe,"STRONG",{});var qkr=s(vJ);Rao=r(qkr,"xglm"),qkr.forEach(t),Sao=r(nTe," \u2014 "),TJ=n(nTe,"CODE",{});var Okr=s(TJ);Pao=r(Okr,"XGLMModel"),Okr.forEach(t),$ao=r(nTe,"(XGLM model)"),nTe.forEach(t),Iao=i(C),yp=n(C,"LI",{});var sTe=s(yp);FJ=n(sTe,"STRONG",{});var Gkr=s(FJ);jao=r(Gkr,"xlm"),Gkr.forEach(t),Nao=r(sTe," \u2014 "),Ox=n(sTe,"A",{href:!0});var Xkr=s(Ox);Dao=r(Xkr,"XLMModel"),Xkr.forEach(t),qao=r(sTe," (XLM model)"),sTe.forEach(t),Oao=i(C),wp=n(C,"LI",{});var lTe=s(wp);CJ=n(lTe,"STRONG",{});var zkr=s(CJ);Gao=r(zkr,"xlm-prophetnet"),zkr.forEach(t),Xao=r(lTe," \u2014 "),Gx=n(lTe,"A",{href:!0});var Vkr=s(Gx);zao=r(Vkr,"XLMProphetNetModel"),Vkr.forEach(t),Vao=r(lTe," (XLMProphetNet model)"),lTe.forEach(t),Wao=i(C),Ap=n(C,"LI",{});var iTe=s(Ap);MJ=n(iTe,"STRONG",{});var Wkr=s(MJ);Qao=r(Wkr,"xlm-roberta"),Wkr.forEach(t),Hao=r(iTe," \u2014 "),Xx=n(iTe,"A",{href:!0});var Qkr=s(Xx);Uao=r(Qkr,"XLMRobertaModel"),Qkr.forEach(t),Jao=r(iTe," (XLM-RoBERTa model)"),iTe.forEach(t),Yao=i(C),Lp=n(C,"LI",{});var dTe=s(Lp);EJ=n(dTe,"STRONG",{});var Hkr=s(EJ);Kao=r(Hkr,"xlm-roberta-xl"),Hkr.forEach(t),Zao=r(dTe," \u2014 "),yJ=n(dTe,"CODE",{});var Ukr=s(yJ);eno=r(Ukr,"XLMRobertaXLModel"),Ukr.forEach(t),ono=r(dTe,"(XLM-RoBERTa-XL model)"),dTe.forEach(t),rno=i(C),Bp=n(C,"LI",{});var cTe=s(Bp);wJ=n(cTe,"STRONG",{});var Jkr=s(wJ);tno=r(Jkr,"xlnet"),Jkr.forEach(t),ano=r(cTe," \u2014 "),zx=n(cTe,"A",{href:!0});var Ykr=s(zx);nno=r(Ykr,"XLNetModel"),Ykr.forEach(t),sno=r(cTe," (XLNet model)"),cTe.forEach(t),lno=i(C),kp=n(C,"LI",{});var fTe=s(kp);AJ=n(fTe,"STRONG",{});var Kkr=s(AJ);ino=r(Kkr,"yoso"),Kkr.forEach(t),dno=r(fTe," \u2014 "),Vx=n(fTe,"A",{href:!0});var Zkr=s(Vx);cno=r(Zkr,"YosoModel"),Zkr.forEach(t),fno=r(fTe," (YOSO model)"),fTe.forEach(t),C.forEach(t),mno=i(At),xp=n(At,"P",{});var mTe=s(xp);gno=r(mTe,"The model is set in evaluation mode by default using "),LJ=n(mTe,"CODE",{});var exr=s(LJ);hno=r(exr,"model.eval()"),exr.forEach(t),pno=r(mTe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),BJ=n(mTe,"CODE",{});var oxr=s(BJ);_no=r(oxr,"model.train()"),oxr.forEach(t),mTe.forEach(t),uno=i(At),kJ=n(At,"P",{});var rxr=s(kJ);bno=r(rxr,"Examples:"),rxr.forEach(t),vno=i(At),m(gM.$$.fragment,At),At.forEach(t),Ls.forEach(t),N0e=i(d),Bi=n(d,"H2",{class:!0});var OLe=s(Bi);Rp=n(OLe,"A",{id:!0,class:!0,href:!0});var txr=s(Rp);xJ=n(txr,"SPAN",{});var axr=s(xJ);m(hM.$$.fragment,axr),axr.forEach(t),txr.forEach(t),Tno=i(OLe),RJ=n(OLe,"SPAN",{});var nxr=s(RJ);Fno=r(nxr,"AutoModelForPreTraining"),nxr.forEach(t),OLe.forEach(t),D0e=i(d),zo=n(d,"DIV",{class:!0});var ks=s(zo);m(pM.$$.fragment,ks),Cno=i(ks),ki=n(ks,"P",{});var $G=s(ki);Mno=r($G,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),SJ=n($G,"CODE",{});var sxr=s(SJ);Eno=r(sxr,"from_pretrained()"),sxr.forEach(t),yno=r($G,"class method or the "),PJ=n($G,"CODE",{});var lxr=s(PJ);wno=r(lxr,"from_config()"),lxr.forEach(t),Ano=r($G,`class
method.`),$G.forEach(t),Lno=i(ks),_M=n(ks,"P",{});var GLe=s(_M);Bno=r(GLe,"This class cannot be instantiated directly using "),$J=n(GLe,"CODE",{});var ixr=s($J);kno=r(ixr,"__init__()"),ixr.forEach(t),xno=r(GLe," (throws an error)."),GLe.forEach(t),Rno=i(ks),$r=n(ks,"DIV",{class:!0});var xs=s($r);m(uM.$$.fragment,xs),Sno=i(xs),IJ=n(xs,"P",{});var dxr=s(IJ);Pno=r(dxr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dxr.forEach(t),$no=i(xs),xi=n(xs,"P",{});var IG=s(xi);Ino=r(IG,`Note:
Loading a model from its configuration file does `),jJ=n(IG,"STRONG",{});var cxr=s(jJ);jno=r(cxr,"not"),cxr.forEach(t),Nno=r(IG,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(IG,"CODE",{});var fxr=s(NJ);Dno=r(fxr,"from_pretrained()"),fxr.forEach(t),qno=r(IG,"to load the model weights."),IG.forEach(t),Ono=i(xs),DJ=n(xs,"P",{});var mxr=s(DJ);Gno=r(mxr,"Examples:"),mxr.forEach(t),Xno=i(xs),m(bM.$$.fragment,xs),xs.forEach(t),zno=i(ks),xe=n(ks,"DIV",{class:!0});var Lt=s(xe);m(vM.$$.fragment,Lt),Vno=i(Lt),qJ=n(Lt,"P",{});var gxr=s(qJ);Wno=r(gxr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gxr.forEach(t),Qno=i(Lt),Ra=n(Lt,"P",{});var I9=s(Ra);Hno=r(I9,"The model class to instantiate is selected based on the "),OJ=n(I9,"CODE",{});var hxr=s(OJ);Uno=r(hxr,"model_type"),hxr.forEach(t),Jno=r(I9,` property of the config object (either
passed as an argument or loaded from `),GJ=n(I9,"CODE",{});var pxr=s(GJ);Yno=r(pxr,"pretrained_model_name_or_path"),pxr.forEach(t),Kno=r(I9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XJ=n(I9,"CODE",{});var _xr=s(XJ);Zno=r(_xr,"pretrained_model_name_or_path"),_xr.forEach(t),eso=r(I9,":"),I9.forEach(t),oso=i(Lt),x=n(Lt,"UL",{});var S=s(x);Sp=n(S,"LI",{});var gTe=s(Sp);zJ=n(gTe,"STRONG",{});var uxr=s(zJ);rso=r(uxr,"albert"),uxr.forEach(t),tso=r(gTe," \u2014 "),Wx=n(gTe,"A",{href:!0});var bxr=s(Wx);aso=r(bxr,"AlbertForPreTraining"),bxr.forEach(t),nso=r(gTe," (ALBERT model)"),gTe.forEach(t),sso=i(S),Pp=n(S,"LI",{});var hTe=s(Pp);VJ=n(hTe,"STRONG",{});var vxr=s(VJ);lso=r(vxr,"bart"),vxr.forEach(t),iso=r(hTe," \u2014 "),Qx=n(hTe,"A",{href:!0});var Txr=s(Qx);dso=r(Txr,"BartForConditionalGeneration"),Txr.forEach(t),cso=r(hTe," (BART model)"),hTe.forEach(t),fso=i(S),$p=n(S,"LI",{});var pTe=s($p);WJ=n(pTe,"STRONG",{});var Fxr=s(WJ);mso=r(Fxr,"bert"),Fxr.forEach(t),gso=r(pTe," \u2014 "),Hx=n(pTe,"A",{href:!0});var Cxr=s(Hx);hso=r(Cxr,"BertForPreTraining"),Cxr.forEach(t),pso=r(pTe," (BERT model)"),pTe.forEach(t),_so=i(S),Ip=n(S,"LI",{});var _Te=s(Ip);QJ=n(_Te,"STRONG",{});var Mxr=s(QJ);uso=r(Mxr,"big_bird"),Mxr.forEach(t),bso=r(_Te," \u2014 "),Ux=n(_Te,"A",{href:!0});var Exr=s(Ux);vso=r(Exr,"BigBirdForPreTraining"),Exr.forEach(t),Tso=r(_Te," (BigBird model)"),_Te.forEach(t),Fso=i(S),jp=n(S,"LI",{});var uTe=s(jp);HJ=n(uTe,"STRONG",{});var yxr=s(HJ);Cso=r(yxr,"camembert"),yxr.forEach(t),Mso=r(uTe," \u2014 "),Jx=n(uTe,"A",{href:!0});var wxr=s(Jx);Eso=r(wxr,"CamembertForMaskedLM"),wxr.forEach(t),yso=r(uTe," (CamemBERT model)"),uTe.forEach(t),wso=i(S),Np=n(S,"LI",{});var bTe=s(Np);UJ=n(bTe,"STRONG",{});var Axr=s(UJ);Aso=r(Axr,"ctrl"),Axr.forEach(t),Lso=r(bTe," \u2014 "),Yx=n(bTe,"A",{href:!0});var Lxr=s(Yx);Bso=r(Lxr,"CTRLLMHeadModel"),Lxr.forEach(t),kso=r(bTe," (CTRL model)"),bTe.forEach(t),xso=i(S),Dp=n(S,"LI",{});var vTe=s(Dp);JJ=n(vTe,"STRONG",{});var Bxr=s(JJ);Rso=r(Bxr,"deberta"),Bxr.forEach(t),Sso=r(vTe," \u2014 "),Kx=n(vTe,"A",{href:!0});var kxr=s(Kx);Pso=r(kxr,"DebertaForMaskedLM"),kxr.forEach(t),$so=r(vTe," (DeBERTa model)"),vTe.forEach(t),Iso=i(S),qp=n(S,"LI",{});var TTe=s(qp);YJ=n(TTe,"STRONG",{});var xxr=s(YJ);jso=r(xxr,"deberta-v2"),xxr.forEach(t),Nso=r(TTe," \u2014 "),Zx=n(TTe,"A",{href:!0});var Rxr=s(Zx);Dso=r(Rxr,"DebertaV2ForMaskedLM"),Rxr.forEach(t),qso=r(TTe," (DeBERTa-v2 model)"),TTe.forEach(t),Oso=i(S),Op=n(S,"LI",{});var FTe=s(Op);KJ=n(FTe,"STRONG",{});var Sxr=s(KJ);Gso=r(Sxr,"distilbert"),Sxr.forEach(t),Xso=r(FTe," \u2014 "),eR=n(FTe,"A",{href:!0});var Pxr=s(eR);zso=r(Pxr,"DistilBertForMaskedLM"),Pxr.forEach(t),Vso=r(FTe," (DistilBERT model)"),FTe.forEach(t),Wso=i(S),Gp=n(S,"LI",{});var CTe=s(Gp);ZJ=n(CTe,"STRONG",{});var $xr=s(ZJ);Qso=r($xr,"electra"),$xr.forEach(t),Hso=r(CTe," \u2014 "),oR=n(CTe,"A",{href:!0});var Ixr=s(oR);Uso=r(Ixr,"ElectraForPreTraining"),Ixr.forEach(t),Jso=r(CTe," (ELECTRA model)"),CTe.forEach(t),Yso=i(S),Xp=n(S,"LI",{});var MTe=s(Xp);eY=n(MTe,"STRONG",{});var jxr=s(eY);Kso=r(jxr,"flaubert"),jxr.forEach(t),Zso=r(MTe," \u2014 "),rR=n(MTe,"A",{href:!0});var Nxr=s(rR);elo=r(Nxr,"FlaubertWithLMHeadModel"),Nxr.forEach(t),olo=r(MTe," (FlauBERT model)"),MTe.forEach(t),rlo=i(S),zp=n(S,"LI",{});var ETe=s(zp);oY=n(ETe,"STRONG",{});var Dxr=s(oY);tlo=r(Dxr,"fnet"),Dxr.forEach(t),alo=r(ETe," \u2014 "),tR=n(ETe,"A",{href:!0});var qxr=s(tR);nlo=r(qxr,"FNetForPreTraining"),qxr.forEach(t),slo=r(ETe," (FNet model)"),ETe.forEach(t),llo=i(S),Vp=n(S,"LI",{});var yTe=s(Vp);rY=n(yTe,"STRONG",{});var Oxr=s(rY);ilo=r(Oxr,"fsmt"),Oxr.forEach(t),dlo=r(yTe," \u2014 "),aR=n(yTe,"A",{href:!0});var Gxr=s(aR);clo=r(Gxr,"FSMTForConditionalGeneration"),Gxr.forEach(t),flo=r(yTe," (FairSeq Machine-Translation model)"),yTe.forEach(t),mlo=i(S),Wp=n(S,"LI",{});var wTe=s(Wp);tY=n(wTe,"STRONG",{});var Xxr=s(tY);glo=r(Xxr,"funnel"),Xxr.forEach(t),hlo=r(wTe," \u2014 "),nR=n(wTe,"A",{href:!0});var zxr=s(nR);plo=r(zxr,"FunnelForPreTraining"),zxr.forEach(t),_lo=r(wTe," (Funnel Transformer model)"),wTe.forEach(t),ulo=i(S),Qp=n(S,"LI",{});var ATe=s(Qp);aY=n(ATe,"STRONG",{});var Vxr=s(aY);blo=r(Vxr,"gpt2"),Vxr.forEach(t),vlo=r(ATe," \u2014 "),sR=n(ATe,"A",{href:!0});var Wxr=s(sR);Tlo=r(Wxr,"GPT2LMHeadModel"),Wxr.forEach(t),Flo=r(ATe," (OpenAI GPT-2 model)"),ATe.forEach(t),Clo=i(S),Hp=n(S,"LI",{});var LTe=s(Hp);nY=n(LTe,"STRONG",{});var Qxr=s(nY);Mlo=r(Qxr,"ibert"),Qxr.forEach(t),Elo=r(LTe," \u2014 "),lR=n(LTe,"A",{href:!0});var Hxr=s(lR);ylo=r(Hxr,"IBertForMaskedLM"),Hxr.forEach(t),wlo=r(LTe," (I-BERT model)"),LTe.forEach(t),Alo=i(S),Up=n(S,"LI",{});var BTe=s(Up);sY=n(BTe,"STRONG",{});var Uxr=s(sY);Llo=r(Uxr,"layoutlm"),Uxr.forEach(t),Blo=r(BTe," \u2014 "),iR=n(BTe,"A",{href:!0});var Jxr=s(iR);klo=r(Jxr,"LayoutLMForMaskedLM"),Jxr.forEach(t),xlo=r(BTe," (LayoutLM model)"),BTe.forEach(t),Rlo=i(S),Jp=n(S,"LI",{});var kTe=s(Jp);lY=n(kTe,"STRONG",{});var Yxr=s(lY);Slo=r(Yxr,"longformer"),Yxr.forEach(t),Plo=r(kTe," \u2014 "),dR=n(kTe,"A",{href:!0});var Kxr=s(dR);$lo=r(Kxr,"LongformerForMaskedLM"),Kxr.forEach(t),Ilo=r(kTe," (Longformer model)"),kTe.forEach(t),jlo=i(S),Yp=n(S,"LI",{});var xTe=s(Yp);iY=n(xTe,"STRONG",{});var Zxr=s(iY);Nlo=r(Zxr,"lxmert"),Zxr.forEach(t),Dlo=r(xTe," \u2014 "),cR=n(xTe,"A",{href:!0});var eRr=s(cR);qlo=r(eRr,"LxmertForPreTraining"),eRr.forEach(t),Olo=r(xTe," (LXMERT model)"),xTe.forEach(t),Glo=i(S),Kp=n(S,"LI",{});var RTe=s(Kp);dY=n(RTe,"STRONG",{});var oRr=s(dY);Xlo=r(oRr,"megatron-bert"),oRr.forEach(t),zlo=r(RTe," \u2014 "),fR=n(RTe,"A",{href:!0});var rRr=s(fR);Vlo=r(rRr,"MegatronBertForPreTraining"),rRr.forEach(t),Wlo=r(RTe," (MegatronBert model)"),RTe.forEach(t),Qlo=i(S),Zp=n(S,"LI",{});var STe=s(Zp);cY=n(STe,"STRONG",{});var tRr=s(cY);Hlo=r(tRr,"mobilebert"),tRr.forEach(t),Ulo=r(STe," \u2014 "),mR=n(STe,"A",{href:!0});var aRr=s(mR);Jlo=r(aRr,"MobileBertForPreTraining"),aRr.forEach(t),Ylo=r(STe," (MobileBERT model)"),STe.forEach(t),Klo=i(S),e_=n(S,"LI",{});var PTe=s(e_);fY=n(PTe,"STRONG",{});var nRr=s(fY);Zlo=r(nRr,"mpnet"),nRr.forEach(t),eio=r(PTe," \u2014 "),gR=n(PTe,"A",{href:!0});var sRr=s(gR);oio=r(sRr,"MPNetForMaskedLM"),sRr.forEach(t),rio=r(PTe," (MPNet model)"),PTe.forEach(t),tio=i(S),o_=n(S,"LI",{});var $Te=s(o_);mY=n($Te,"STRONG",{});var lRr=s(mY);aio=r(lRr,"openai-gpt"),lRr.forEach(t),nio=r($Te," \u2014 "),hR=n($Te,"A",{href:!0});var iRr=s(hR);sio=r(iRr,"OpenAIGPTLMHeadModel"),iRr.forEach(t),lio=r($Te," (OpenAI GPT model)"),$Te.forEach(t),iio=i(S),r_=n(S,"LI",{});var ITe=s(r_);gY=n(ITe,"STRONG",{});var dRr=s(gY);dio=r(dRr,"retribert"),dRr.forEach(t),cio=r(ITe," \u2014 "),pR=n(ITe,"A",{href:!0});var cRr=s(pR);fio=r(cRr,"RetriBertModel"),cRr.forEach(t),mio=r(ITe," (RetriBERT model)"),ITe.forEach(t),gio=i(S),t_=n(S,"LI",{});var jTe=s(t_);hY=n(jTe,"STRONG",{});var fRr=s(hY);hio=r(fRr,"roberta"),fRr.forEach(t),pio=r(jTe," \u2014 "),_R=n(jTe,"A",{href:!0});var mRr=s(_R);_io=r(mRr,"RobertaForMaskedLM"),mRr.forEach(t),uio=r(jTe," (RoBERTa model)"),jTe.forEach(t),bio=i(S),a_=n(S,"LI",{});var NTe=s(a_);pY=n(NTe,"STRONG",{});var gRr=s(pY);vio=r(gRr,"squeezebert"),gRr.forEach(t),Tio=r(NTe," \u2014 "),uR=n(NTe,"A",{href:!0});var hRr=s(uR);Fio=r(hRr,"SqueezeBertForMaskedLM"),hRr.forEach(t),Cio=r(NTe," (SqueezeBERT model)"),NTe.forEach(t),Mio=i(S),n_=n(S,"LI",{});var DTe=s(n_);_Y=n(DTe,"STRONG",{});var pRr=s(_Y);Eio=r(pRr,"t5"),pRr.forEach(t),yio=r(DTe," \u2014 "),bR=n(DTe,"A",{href:!0});var _Rr=s(bR);wio=r(_Rr,"T5ForConditionalGeneration"),_Rr.forEach(t),Aio=r(DTe," (T5 model)"),DTe.forEach(t),Lio=i(S),s_=n(S,"LI",{});var qTe=s(s_);uY=n(qTe,"STRONG",{});var uRr=s(uY);Bio=r(uRr,"tapas"),uRr.forEach(t),kio=r(qTe," \u2014 "),vR=n(qTe,"A",{href:!0});var bRr=s(vR);xio=r(bRr,"TapasForMaskedLM"),bRr.forEach(t),Rio=r(qTe," (TAPAS model)"),qTe.forEach(t),Sio=i(S),l_=n(S,"LI",{});var OTe=s(l_);bY=n(OTe,"STRONG",{});var vRr=s(bY);Pio=r(vRr,"transfo-xl"),vRr.forEach(t),$io=r(OTe," \u2014 "),TR=n(OTe,"A",{href:!0});var TRr=s(TR);Iio=r(TRr,"TransfoXLLMHeadModel"),TRr.forEach(t),jio=r(OTe," (Transformer-XL model)"),OTe.forEach(t),Nio=i(S),i_=n(S,"LI",{});var GTe=s(i_);vY=n(GTe,"STRONG",{});var FRr=s(vY);Dio=r(FRr,"unispeech"),FRr.forEach(t),qio=r(GTe," \u2014 "),FR=n(GTe,"A",{href:!0});var CRr=s(FR);Oio=r(CRr,"UniSpeechForPreTraining"),CRr.forEach(t),Gio=r(GTe," (UniSpeech model)"),GTe.forEach(t),Xio=i(S),d_=n(S,"LI",{});var XTe=s(d_);TY=n(XTe,"STRONG",{});var MRr=s(TY);zio=r(MRr,"unispeech-sat"),MRr.forEach(t),Vio=r(XTe," \u2014 "),CR=n(XTe,"A",{href:!0});var ERr=s(CR);Wio=r(ERr,"UniSpeechSatForPreTraining"),ERr.forEach(t),Qio=r(XTe," (UniSpeechSat model)"),XTe.forEach(t),Hio=i(S),c_=n(S,"LI",{});var zTe=s(c_);FY=n(zTe,"STRONG",{});var yRr=s(FY);Uio=r(yRr,"visual_bert"),yRr.forEach(t),Jio=r(zTe," \u2014 "),MR=n(zTe,"A",{href:!0});var wRr=s(MR);Yio=r(wRr,"VisualBertForPreTraining"),wRr.forEach(t),Kio=r(zTe," (VisualBert model)"),zTe.forEach(t),Zio=i(S),f_=n(S,"LI",{});var VTe=s(f_);CY=n(VTe,"STRONG",{});var ARr=s(CY);edo=r(ARr,"vit_mae"),ARr.forEach(t),odo=r(VTe," \u2014 "),ER=n(VTe,"A",{href:!0});var LRr=s(ER);rdo=r(LRr,"ViTMAEForPreTraining"),LRr.forEach(t),tdo=r(VTe," (ViTMAE model)"),VTe.forEach(t),ado=i(S),m_=n(S,"LI",{});var WTe=s(m_);MY=n(WTe,"STRONG",{});var BRr=s(MY);ndo=r(BRr,"wav2vec2"),BRr.forEach(t),sdo=r(WTe," \u2014 "),yR=n(WTe,"A",{href:!0});var kRr=s(yR);ldo=r(kRr,"Wav2Vec2ForPreTraining"),kRr.forEach(t),ido=r(WTe," (Wav2Vec2 model)"),WTe.forEach(t),ddo=i(S),g_=n(S,"LI",{});var QTe=s(g_);EY=n(QTe,"STRONG",{});var xRr=s(EY);cdo=r(xRr,"xlm"),xRr.forEach(t),fdo=r(QTe," \u2014 "),wR=n(QTe,"A",{href:!0});var RRr=s(wR);mdo=r(RRr,"XLMWithLMHeadModel"),RRr.forEach(t),gdo=r(QTe," (XLM model)"),QTe.forEach(t),hdo=i(S),h_=n(S,"LI",{});var HTe=s(h_);yY=n(HTe,"STRONG",{});var SRr=s(yY);pdo=r(SRr,"xlm-roberta"),SRr.forEach(t),_do=r(HTe," \u2014 "),AR=n(HTe,"A",{href:!0});var PRr=s(AR);udo=r(PRr,"XLMRobertaForMaskedLM"),PRr.forEach(t),bdo=r(HTe," (XLM-RoBERTa model)"),HTe.forEach(t),vdo=i(S),p_=n(S,"LI",{});var UTe=s(p_);wY=n(UTe,"STRONG",{});var $Rr=s(wY);Tdo=r($Rr,"xlm-roberta-xl"),$Rr.forEach(t),Fdo=r(UTe," \u2014 "),AY=n(UTe,"CODE",{});var IRr=s(AY);Cdo=r(IRr,"XLMRobertaXLForMaskedLM"),IRr.forEach(t),Mdo=r(UTe,"(XLM-RoBERTa-XL model)"),UTe.forEach(t),Edo=i(S),__=n(S,"LI",{});var JTe=s(__);LY=n(JTe,"STRONG",{});var jRr=s(LY);ydo=r(jRr,"xlnet"),jRr.forEach(t),wdo=r(JTe," \u2014 "),LR=n(JTe,"A",{href:!0});var NRr=s(LR);Ado=r(NRr,"XLNetLMHeadModel"),NRr.forEach(t),Ldo=r(JTe," (XLNet model)"),JTe.forEach(t),S.forEach(t),Bdo=i(Lt),u_=n(Lt,"P",{});var YTe=s(u_);kdo=r(YTe,"The model is set in evaluation mode by default using "),BY=n(YTe,"CODE",{});var DRr=s(BY);xdo=r(DRr,"model.eval()"),DRr.forEach(t),Rdo=r(YTe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kY=n(YTe,"CODE",{});var qRr=s(kY);Sdo=r(qRr,"model.train()"),qRr.forEach(t),YTe.forEach(t),Pdo=i(Lt),xY=n(Lt,"P",{});var ORr=s(xY);$do=r(ORr,"Examples:"),ORr.forEach(t),Ido=i(Lt),m(TM.$$.fragment,Lt),Lt.forEach(t),ks.forEach(t),q0e=i(d),Ri=n(d,"H2",{class:!0});var XLe=s(Ri);b_=n(XLe,"A",{id:!0,class:!0,href:!0});var GRr=s(b_);RY=n(GRr,"SPAN",{});var XRr=s(RY);m(FM.$$.fragment,XRr),XRr.forEach(t),GRr.forEach(t),jdo=i(XLe),SY=n(XLe,"SPAN",{});var zRr=s(SY);Ndo=r(zRr,"AutoModelForCausalLM"),zRr.forEach(t),XLe.forEach(t),O0e=i(d),Vo=n(d,"DIV",{class:!0});var Rs=s(Vo);m(CM.$$.fragment,Rs),Ddo=i(Rs),Si=n(Rs,"P",{});var jG=s(Si);qdo=r(jG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PY=n(jG,"CODE",{});var VRr=s(PY);Odo=r(VRr,"from_pretrained()"),VRr.forEach(t),Gdo=r(jG,"class method or the "),$Y=n(jG,"CODE",{});var WRr=s($Y);Xdo=r(WRr,"from_config()"),WRr.forEach(t),zdo=r(jG,`class
method.`),jG.forEach(t),Vdo=i(Rs),MM=n(Rs,"P",{});var zLe=s(MM);Wdo=r(zLe,"This class cannot be instantiated directly using "),IY=n(zLe,"CODE",{});var QRr=s(IY);Qdo=r(QRr,"__init__()"),QRr.forEach(t),Hdo=r(zLe," (throws an error)."),zLe.forEach(t),Udo=i(Rs),Ir=n(Rs,"DIV",{class:!0});var Ss=s(Ir);m(EM.$$.fragment,Ss),Jdo=i(Ss),jY=n(Ss,"P",{});var HRr=s(jY);Ydo=r(HRr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),HRr.forEach(t),Kdo=i(Ss),Pi=n(Ss,"P",{});var NG=s(Pi);Zdo=r(NG,`Note:
Loading a model from its configuration file does `),NY=n(NG,"STRONG",{});var URr=s(NY);eco=r(URr,"not"),URr.forEach(t),oco=r(NG,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(NG,"CODE",{});var JRr=s(DY);rco=r(JRr,"from_pretrained()"),JRr.forEach(t),tco=r(NG,"to load the model weights."),NG.forEach(t),aco=i(Ss),qY=n(Ss,"P",{});var YRr=s(qY);nco=r(YRr,"Examples:"),YRr.forEach(t),sco=i(Ss),m(yM.$$.fragment,Ss),Ss.forEach(t),lco=i(Rs),Re=n(Rs,"DIV",{class:!0});var Bt=s(Re);m(wM.$$.fragment,Bt),ico=i(Bt),OY=n(Bt,"P",{});var KRr=s(OY);dco=r(KRr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KRr.forEach(t),cco=i(Bt),Sa=n(Bt,"P",{});var j9=s(Sa);fco=r(j9,"The model class to instantiate is selected based on the "),GY=n(j9,"CODE",{});var ZRr=s(GY);mco=r(ZRr,"model_type"),ZRr.forEach(t),gco=r(j9,` property of the config object (either
passed as an argument or loaded from `),XY=n(j9,"CODE",{});var eSr=s(XY);hco=r(eSr,"pretrained_model_name_or_path"),eSr.forEach(t),pco=r(j9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zY=n(j9,"CODE",{});var oSr=s(zY);_co=r(oSr,"pretrained_model_name_or_path"),oSr.forEach(t),uco=r(j9,":"),j9.forEach(t),bco=i(Bt),$=n(Bt,"UL",{});var j=s($);v_=n(j,"LI",{});var KTe=s(v_);VY=n(KTe,"STRONG",{});var rSr=s(VY);vco=r(rSr,"bart"),rSr.forEach(t),Tco=r(KTe," \u2014 "),BR=n(KTe,"A",{href:!0});var tSr=s(BR);Fco=r(tSr,"BartForCausalLM"),tSr.forEach(t),Cco=r(KTe," (BART model)"),KTe.forEach(t),Mco=i(j),T_=n(j,"LI",{});var ZTe=s(T_);WY=n(ZTe,"STRONG",{});var aSr=s(WY);Eco=r(aSr,"bert"),aSr.forEach(t),yco=r(ZTe," \u2014 "),kR=n(ZTe,"A",{href:!0});var nSr=s(kR);wco=r(nSr,"BertLMHeadModel"),nSr.forEach(t),Aco=r(ZTe," (BERT model)"),ZTe.forEach(t),Lco=i(j),F_=n(j,"LI",{});var e7e=s(F_);QY=n(e7e,"STRONG",{});var sSr=s(QY);Bco=r(sSr,"bert-generation"),sSr.forEach(t),kco=r(e7e," \u2014 "),xR=n(e7e,"A",{href:!0});var lSr=s(xR);xco=r(lSr,"BertGenerationDecoder"),lSr.forEach(t),Rco=r(e7e," (Bert Generation model)"),e7e.forEach(t),Sco=i(j),C_=n(j,"LI",{});var o7e=s(C_);HY=n(o7e,"STRONG",{});var iSr=s(HY);Pco=r(iSr,"big_bird"),iSr.forEach(t),$co=r(o7e," \u2014 "),RR=n(o7e,"A",{href:!0});var dSr=s(RR);Ico=r(dSr,"BigBirdForCausalLM"),dSr.forEach(t),jco=r(o7e," (BigBird model)"),o7e.forEach(t),Nco=i(j),M_=n(j,"LI",{});var r7e=s(M_);UY=n(r7e,"STRONG",{});var cSr=s(UY);Dco=r(cSr,"bigbird_pegasus"),cSr.forEach(t),qco=r(r7e," \u2014 "),SR=n(r7e,"A",{href:!0});var fSr=s(SR);Oco=r(fSr,"BigBirdPegasusForCausalLM"),fSr.forEach(t),Gco=r(r7e," (BigBirdPegasus model)"),r7e.forEach(t),Xco=i(j),E_=n(j,"LI",{});var t7e=s(E_);JY=n(t7e,"STRONG",{});var mSr=s(JY);zco=r(mSr,"blenderbot"),mSr.forEach(t),Vco=r(t7e," \u2014 "),PR=n(t7e,"A",{href:!0});var gSr=s(PR);Wco=r(gSr,"BlenderbotForCausalLM"),gSr.forEach(t),Qco=r(t7e," (Blenderbot model)"),t7e.forEach(t),Hco=i(j),y_=n(j,"LI",{});var a7e=s(y_);YY=n(a7e,"STRONG",{});var hSr=s(YY);Uco=r(hSr,"blenderbot-small"),hSr.forEach(t),Jco=r(a7e," \u2014 "),$R=n(a7e,"A",{href:!0});var pSr=s($R);Yco=r(pSr,"BlenderbotSmallForCausalLM"),pSr.forEach(t),Kco=r(a7e," (BlenderbotSmall model)"),a7e.forEach(t),Zco=i(j),w_=n(j,"LI",{});var n7e=s(w_);KY=n(n7e,"STRONG",{});var _Sr=s(KY);efo=r(_Sr,"camembert"),_Sr.forEach(t),ofo=r(n7e," \u2014 "),IR=n(n7e,"A",{href:!0});var uSr=s(IR);rfo=r(uSr,"CamembertForCausalLM"),uSr.forEach(t),tfo=r(n7e," (CamemBERT model)"),n7e.forEach(t),afo=i(j),A_=n(j,"LI",{});var s7e=s(A_);ZY=n(s7e,"STRONG",{});var bSr=s(ZY);nfo=r(bSr,"ctrl"),bSr.forEach(t),sfo=r(s7e," \u2014 "),jR=n(s7e,"A",{href:!0});var vSr=s(jR);lfo=r(vSr,"CTRLLMHeadModel"),vSr.forEach(t),ifo=r(s7e," (CTRL model)"),s7e.forEach(t),dfo=i(j),L_=n(j,"LI",{});var l7e=s(L_);eK=n(l7e,"STRONG",{});var TSr=s(eK);cfo=r(TSr,"electra"),TSr.forEach(t),ffo=r(l7e," \u2014 "),NR=n(l7e,"A",{href:!0});var FSr=s(NR);mfo=r(FSr,"ElectraForCausalLM"),FSr.forEach(t),gfo=r(l7e," (ELECTRA model)"),l7e.forEach(t),hfo=i(j),B_=n(j,"LI",{});var i7e=s(B_);oK=n(i7e,"STRONG",{});var CSr=s(oK);pfo=r(CSr,"gpt2"),CSr.forEach(t),_fo=r(i7e," \u2014 "),DR=n(i7e,"A",{href:!0});var MSr=s(DR);ufo=r(MSr,"GPT2LMHeadModel"),MSr.forEach(t),bfo=r(i7e," (OpenAI GPT-2 model)"),i7e.forEach(t),vfo=i(j),k_=n(j,"LI",{});var d7e=s(k_);rK=n(d7e,"STRONG",{});var ESr=s(rK);Tfo=r(ESr,"gpt_neo"),ESr.forEach(t),Ffo=r(d7e," \u2014 "),qR=n(d7e,"A",{href:!0});var ySr=s(qR);Cfo=r(ySr,"GPTNeoForCausalLM"),ySr.forEach(t),Mfo=r(d7e," (GPT Neo model)"),d7e.forEach(t),Efo=i(j),x_=n(j,"LI",{});var c7e=s(x_);tK=n(c7e,"STRONG",{});var wSr=s(tK);yfo=r(wSr,"gptj"),wSr.forEach(t),wfo=r(c7e," \u2014 "),OR=n(c7e,"A",{href:!0});var ASr=s(OR);Afo=r(ASr,"GPTJForCausalLM"),ASr.forEach(t),Lfo=r(c7e," (GPT-J model)"),c7e.forEach(t),Bfo=i(j),R_=n(j,"LI",{});var f7e=s(R_);aK=n(f7e,"STRONG",{});var LSr=s(aK);kfo=r(LSr,"marian"),LSr.forEach(t),xfo=r(f7e," \u2014 "),GR=n(f7e,"A",{href:!0});var BSr=s(GR);Rfo=r(BSr,"MarianForCausalLM"),BSr.forEach(t),Sfo=r(f7e," (Marian model)"),f7e.forEach(t),Pfo=i(j),S_=n(j,"LI",{});var m7e=s(S_);nK=n(m7e,"STRONG",{});var kSr=s(nK);$fo=r(kSr,"mbart"),kSr.forEach(t),Ifo=r(m7e," \u2014 "),XR=n(m7e,"A",{href:!0});var xSr=s(XR);jfo=r(xSr,"MBartForCausalLM"),xSr.forEach(t),Nfo=r(m7e," (mBART model)"),m7e.forEach(t),Dfo=i(j),P_=n(j,"LI",{});var g7e=s(P_);sK=n(g7e,"STRONG",{});var RSr=s(sK);qfo=r(RSr,"megatron-bert"),RSr.forEach(t),Ofo=r(g7e," \u2014 "),zR=n(g7e,"A",{href:!0});var SSr=s(zR);Gfo=r(SSr,"MegatronBertForCausalLM"),SSr.forEach(t),Xfo=r(g7e," (MegatronBert model)"),g7e.forEach(t),zfo=i(j),$_=n(j,"LI",{});var h7e=s($_);lK=n(h7e,"STRONG",{});var PSr=s(lK);Vfo=r(PSr,"openai-gpt"),PSr.forEach(t),Wfo=r(h7e," \u2014 "),VR=n(h7e,"A",{href:!0});var $Sr=s(VR);Qfo=r($Sr,"OpenAIGPTLMHeadModel"),$Sr.forEach(t),Hfo=r(h7e," (OpenAI GPT model)"),h7e.forEach(t),Ufo=i(j),I_=n(j,"LI",{});var p7e=s(I_);iK=n(p7e,"STRONG",{});var ISr=s(iK);Jfo=r(ISr,"pegasus"),ISr.forEach(t),Yfo=r(p7e," \u2014 "),WR=n(p7e,"A",{href:!0});var jSr=s(WR);Kfo=r(jSr,"PegasusForCausalLM"),jSr.forEach(t),Zfo=r(p7e," (Pegasus model)"),p7e.forEach(t),emo=i(j),j_=n(j,"LI",{});var _7e=s(j_);dK=n(_7e,"STRONG",{});var NSr=s(dK);omo=r(NSr,"plbart"),NSr.forEach(t),rmo=r(_7e," \u2014 "),QR=n(_7e,"A",{href:!0});var DSr=s(QR);tmo=r(DSr,"PLBartForCausalLM"),DSr.forEach(t),amo=r(_7e," (PLBart model)"),_7e.forEach(t),nmo=i(j),N_=n(j,"LI",{});var u7e=s(N_);cK=n(u7e,"STRONG",{});var qSr=s(cK);smo=r(qSr,"prophetnet"),qSr.forEach(t),lmo=r(u7e," \u2014 "),HR=n(u7e,"A",{href:!0});var OSr=s(HR);imo=r(OSr,"ProphetNetForCausalLM"),OSr.forEach(t),dmo=r(u7e," (ProphetNet model)"),u7e.forEach(t),cmo=i(j),D_=n(j,"LI",{});var b7e=s(D_);fK=n(b7e,"STRONG",{});var GSr=s(fK);fmo=r(GSr,"qdqbert"),GSr.forEach(t),mmo=r(b7e," \u2014 "),UR=n(b7e,"A",{href:!0});var XSr=s(UR);gmo=r(XSr,"QDQBertLMHeadModel"),XSr.forEach(t),hmo=r(b7e," (QDQBert model)"),b7e.forEach(t),pmo=i(j),q_=n(j,"LI",{});var v7e=s(q_);mK=n(v7e,"STRONG",{});var zSr=s(mK);_mo=r(zSr,"reformer"),zSr.forEach(t),umo=r(v7e," \u2014 "),JR=n(v7e,"A",{href:!0});var VSr=s(JR);bmo=r(VSr,"ReformerModelWithLMHead"),VSr.forEach(t),vmo=r(v7e," (Reformer model)"),v7e.forEach(t),Tmo=i(j),O_=n(j,"LI",{});var T7e=s(O_);gK=n(T7e,"STRONG",{});var WSr=s(gK);Fmo=r(WSr,"rembert"),WSr.forEach(t),Cmo=r(T7e," \u2014 "),YR=n(T7e,"A",{href:!0});var QSr=s(YR);Mmo=r(QSr,"RemBertForCausalLM"),QSr.forEach(t),Emo=r(T7e," (RemBERT model)"),T7e.forEach(t),ymo=i(j),G_=n(j,"LI",{});var F7e=s(G_);hK=n(F7e,"STRONG",{});var HSr=s(hK);wmo=r(HSr,"roberta"),HSr.forEach(t),Amo=r(F7e," \u2014 "),KR=n(F7e,"A",{href:!0});var USr=s(KR);Lmo=r(USr,"RobertaForCausalLM"),USr.forEach(t),Bmo=r(F7e," (RoBERTa model)"),F7e.forEach(t),kmo=i(j),X_=n(j,"LI",{});var C7e=s(X_);pK=n(C7e,"STRONG",{});var JSr=s(pK);xmo=r(JSr,"roformer"),JSr.forEach(t),Rmo=r(C7e," \u2014 "),ZR=n(C7e,"A",{href:!0});var YSr=s(ZR);Smo=r(YSr,"RoFormerForCausalLM"),YSr.forEach(t),Pmo=r(C7e," (RoFormer model)"),C7e.forEach(t),$mo=i(j),z_=n(j,"LI",{});var M7e=s(z_);_K=n(M7e,"STRONG",{});var KSr=s(_K);Imo=r(KSr,"speech_to_text_2"),KSr.forEach(t),jmo=r(M7e," \u2014 "),eS=n(M7e,"A",{href:!0});var ZSr=s(eS);Nmo=r(ZSr,"Speech2Text2ForCausalLM"),ZSr.forEach(t),Dmo=r(M7e," (Speech2Text2 model)"),M7e.forEach(t),qmo=i(j),V_=n(j,"LI",{});var E7e=s(V_);uK=n(E7e,"STRONG",{});var ePr=s(uK);Omo=r(ePr,"transfo-xl"),ePr.forEach(t),Gmo=r(E7e," \u2014 "),oS=n(E7e,"A",{href:!0});var oPr=s(oS);Xmo=r(oPr,"TransfoXLLMHeadModel"),oPr.forEach(t),zmo=r(E7e," (Transformer-XL model)"),E7e.forEach(t),Vmo=i(j),W_=n(j,"LI",{});var y7e=s(W_);bK=n(y7e,"STRONG",{});var rPr=s(bK);Wmo=r(rPr,"trocr"),rPr.forEach(t),Qmo=r(y7e," \u2014 "),rS=n(y7e,"A",{href:!0});var tPr=s(rS);Hmo=r(tPr,"TrOCRForCausalLM"),tPr.forEach(t),Umo=r(y7e," (TrOCR model)"),y7e.forEach(t),Jmo=i(j),Q_=n(j,"LI",{});var w7e=s(Q_);vK=n(w7e,"STRONG",{});var aPr=s(vK);Ymo=r(aPr,"xglm"),aPr.forEach(t),Kmo=r(w7e," \u2014 "),TK=n(w7e,"CODE",{});var nPr=s(TK);Zmo=r(nPr,"XGLMForCausalLM"),nPr.forEach(t),ego=r(w7e,"(XGLM model)"),w7e.forEach(t),ogo=i(j),H_=n(j,"LI",{});var A7e=s(H_);FK=n(A7e,"STRONG",{});var sPr=s(FK);rgo=r(sPr,"xlm"),sPr.forEach(t),tgo=r(A7e," \u2014 "),tS=n(A7e,"A",{href:!0});var lPr=s(tS);ago=r(lPr,"XLMWithLMHeadModel"),lPr.forEach(t),ngo=r(A7e," (XLM model)"),A7e.forEach(t),sgo=i(j),U_=n(j,"LI",{});var L7e=s(U_);CK=n(L7e,"STRONG",{});var iPr=s(CK);lgo=r(iPr,"xlm-prophetnet"),iPr.forEach(t),igo=r(L7e," \u2014 "),aS=n(L7e,"A",{href:!0});var dPr=s(aS);dgo=r(dPr,"XLMProphetNetForCausalLM"),dPr.forEach(t),cgo=r(L7e," (XLMProphetNet model)"),L7e.forEach(t),fgo=i(j),J_=n(j,"LI",{});var B7e=s(J_);MK=n(B7e,"STRONG",{});var cPr=s(MK);mgo=r(cPr,"xlm-roberta"),cPr.forEach(t),ggo=r(B7e," \u2014 "),nS=n(B7e,"A",{href:!0});var fPr=s(nS);hgo=r(fPr,"XLMRobertaForCausalLM"),fPr.forEach(t),pgo=r(B7e," (XLM-RoBERTa model)"),B7e.forEach(t),_go=i(j),Y_=n(j,"LI",{});var k7e=s(Y_);EK=n(k7e,"STRONG",{});var mPr=s(EK);ugo=r(mPr,"xlm-roberta-xl"),mPr.forEach(t),bgo=r(k7e," \u2014 "),yK=n(k7e,"CODE",{});var gPr=s(yK);vgo=r(gPr,"XLMRobertaXLForCausalLM"),gPr.forEach(t),Tgo=r(k7e,"(XLM-RoBERTa-XL model)"),k7e.forEach(t),Fgo=i(j),K_=n(j,"LI",{});var x7e=s(K_);wK=n(x7e,"STRONG",{});var hPr=s(wK);Cgo=r(hPr,"xlnet"),hPr.forEach(t),Mgo=r(x7e," \u2014 "),sS=n(x7e,"A",{href:!0});var pPr=s(sS);Ego=r(pPr,"XLNetLMHeadModel"),pPr.forEach(t),ygo=r(x7e," (XLNet model)"),x7e.forEach(t),j.forEach(t),wgo=i(Bt),Z_=n(Bt,"P",{});var R7e=s(Z_);Ago=r(R7e,"The model is set in evaluation mode by default using "),AK=n(R7e,"CODE",{});var _Pr=s(AK);Lgo=r(_Pr,"model.eval()"),_Pr.forEach(t),Bgo=r(R7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),LK=n(R7e,"CODE",{});var uPr=s(LK);kgo=r(uPr,"model.train()"),uPr.forEach(t),R7e.forEach(t),xgo=i(Bt),BK=n(Bt,"P",{});var bPr=s(BK);Rgo=r(bPr,"Examples:"),bPr.forEach(t),Sgo=i(Bt),m(AM.$$.fragment,Bt),Bt.forEach(t),Rs.forEach(t),G0e=i(d),$i=n(d,"H2",{class:!0});var VLe=s($i);eu=n(VLe,"A",{id:!0,class:!0,href:!0});var vPr=s(eu);kK=n(vPr,"SPAN",{});var TPr=s(kK);m(LM.$$.fragment,TPr),TPr.forEach(t),vPr.forEach(t),Pgo=i(VLe),xK=n(VLe,"SPAN",{});var FPr=s(xK);$go=r(FPr,"AutoModelForMaskedLM"),FPr.forEach(t),VLe.forEach(t),X0e=i(d),Wo=n(d,"DIV",{class:!0});var Ps=s(Wo);m(BM.$$.fragment,Ps),Igo=i(Ps),Ii=n(Ps,"P",{});var DG=s(Ii);jgo=r(DG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RK=n(DG,"CODE",{});var CPr=s(RK);Ngo=r(CPr,"from_pretrained()"),CPr.forEach(t),Dgo=r(DG,"class method or the "),SK=n(DG,"CODE",{});var MPr=s(SK);qgo=r(MPr,"from_config()"),MPr.forEach(t),Ogo=r(DG,`class
method.`),DG.forEach(t),Ggo=i(Ps),kM=n(Ps,"P",{});var WLe=s(kM);Xgo=r(WLe,"This class cannot be instantiated directly using "),PK=n(WLe,"CODE",{});var EPr=s(PK);zgo=r(EPr,"__init__()"),EPr.forEach(t),Vgo=r(WLe," (throws an error)."),WLe.forEach(t),Wgo=i(Ps),jr=n(Ps,"DIV",{class:!0});var $s=s(jr);m(xM.$$.fragment,$s),Qgo=i($s),$K=n($s,"P",{});var yPr=s($K);Hgo=r(yPr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yPr.forEach(t),Ugo=i($s),ji=n($s,"P",{});var qG=s(ji);Jgo=r(qG,`Note:
Loading a model from its configuration file does `),IK=n(qG,"STRONG",{});var wPr=s(IK);Ygo=r(wPr,"not"),wPr.forEach(t),Kgo=r(qG,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(qG,"CODE",{});var APr=s(jK);Zgo=r(APr,"from_pretrained()"),APr.forEach(t),eho=r(qG,"to load the model weights."),qG.forEach(t),oho=i($s),NK=n($s,"P",{});var LPr=s(NK);rho=r(LPr,"Examples:"),LPr.forEach(t),tho=i($s),m(RM.$$.fragment,$s),$s.forEach(t),aho=i(Ps),Se=n(Ps,"DIV",{class:!0});var kt=s(Se);m(SM.$$.fragment,kt),nho=i(kt),DK=n(kt,"P",{});var BPr=s(DK);sho=r(BPr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BPr.forEach(t),lho=i(kt),Pa=n(kt,"P",{});var N9=s(Pa);iho=r(N9,"The model class to instantiate is selected based on the "),qK=n(N9,"CODE",{});var kPr=s(qK);dho=r(kPr,"model_type"),kPr.forEach(t),cho=r(N9,` property of the config object (either
passed as an argument or loaded from `),OK=n(N9,"CODE",{});var xPr=s(OK);fho=r(xPr,"pretrained_model_name_or_path"),xPr.forEach(t),mho=r(N9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GK=n(N9,"CODE",{});var RPr=s(GK);gho=r(RPr,"pretrained_model_name_or_path"),RPr.forEach(t),hho=r(N9,":"),N9.forEach(t),pho=i(kt),I=n(kt,"UL",{});var N=s(I);ou=n(N,"LI",{});var S7e=s(ou);XK=n(S7e,"STRONG",{});var SPr=s(XK);_ho=r(SPr,"albert"),SPr.forEach(t),uho=r(S7e," \u2014 "),lS=n(S7e,"A",{href:!0});var PPr=s(lS);bho=r(PPr,"AlbertForMaskedLM"),PPr.forEach(t),vho=r(S7e," (ALBERT model)"),S7e.forEach(t),Tho=i(N),ru=n(N,"LI",{});var P7e=s(ru);zK=n(P7e,"STRONG",{});var $Pr=s(zK);Fho=r($Pr,"bart"),$Pr.forEach(t),Cho=r(P7e," \u2014 "),iS=n(P7e,"A",{href:!0});var IPr=s(iS);Mho=r(IPr,"BartForConditionalGeneration"),IPr.forEach(t),Eho=r(P7e," (BART model)"),P7e.forEach(t),yho=i(N),tu=n(N,"LI",{});var $7e=s(tu);VK=n($7e,"STRONG",{});var jPr=s(VK);who=r(jPr,"bert"),jPr.forEach(t),Aho=r($7e," \u2014 "),dS=n($7e,"A",{href:!0});var NPr=s(dS);Lho=r(NPr,"BertForMaskedLM"),NPr.forEach(t),Bho=r($7e," (BERT model)"),$7e.forEach(t),kho=i(N),au=n(N,"LI",{});var I7e=s(au);WK=n(I7e,"STRONG",{});var DPr=s(WK);xho=r(DPr,"big_bird"),DPr.forEach(t),Rho=r(I7e," \u2014 "),cS=n(I7e,"A",{href:!0});var qPr=s(cS);Sho=r(qPr,"BigBirdForMaskedLM"),qPr.forEach(t),Pho=r(I7e," (BigBird model)"),I7e.forEach(t),$ho=i(N),nu=n(N,"LI",{});var j7e=s(nu);QK=n(j7e,"STRONG",{});var OPr=s(QK);Iho=r(OPr,"camembert"),OPr.forEach(t),jho=r(j7e," \u2014 "),fS=n(j7e,"A",{href:!0});var GPr=s(fS);Nho=r(GPr,"CamembertForMaskedLM"),GPr.forEach(t),Dho=r(j7e," (CamemBERT model)"),j7e.forEach(t),qho=i(N),su=n(N,"LI",{});var N7e=s(su);HK=n(N7e,"STRONG",{});var XPr=s(HK);Oho=r(XPr,"convbert"),XPr.forEach(t),Gho=r(N7e," \u2014 "),mS=n(N7e,"A",{href:!0});var zPr=s(mS);Xho=r(zPr,"ConvBertForMaskedLM"),zPr.forEach(t),zho=r(N7e," (ConvBERT model)"),N7e.forEach(t),Vho=i(N),lu=n(N,"LI",{});var D7e=s(lu);UK=n(D7e,"STRONG",{});var VPr=s(UK);Who=r(VPr,"deberta"),VPr.forEach(t),Qho=r(D7e," \u2014 "),gS=n(D7e,"A",{href:!0});var WPr=s(gS);Hho=r(WPr,"DebertaForMaskedLM"),WPr.forEach(t),Uho=r(D7e," (DeBERTa model)"),D7e.forEach(t),Jho=i(N),iu=n(N,"LI",{});var q7e=s(iu);JK=n(q7e,"STRONG",{});var QPr=s(JK);Yho=r(QPr,"deberta-v2"),QPr.forEach(t),Kho=r(q7e," \u2014 "),hS=n(q7e,"A",{href:!0});var HPr=s(hS);Zho=r(HPr,"DebertaV2ForMaskedLM"),HPr.forEach(t),epo=r(q7e," (DeBERTa-v2 model)"),q7e.forEach(t),opo=i(N),du=n(N,"LI",{});var O7e=s(du);YK=n(O7e,"STRONG",{});var UPr=s(YK);rpo=r(UPr,"distilbert"),UPr.forEach(t),tpo=r(O7e," \u2014 "),pS=n(O7e,"A",{href:!0});var JPr=s(pS);apo=r(JPr,"DistilBertForMaskedLM"),JPr.forEach(t),npo=r(O7e," (DistilBERT model)"),O7e.forEach(t),spo=i(N),cu=n(N,"LI",{});var G7e=s(cu);KK=n(G7e,"STRONG",{});var YPr=s(KK);lpo=r(YPr,"electra"),YPr.forEach(t),ipo=r(G7e," \u2014 "),_S=n(G7e,"A",{href:!0});var KPr=s(_S);dpo=r(KPr,"ElectraForMaskedLM"),KPr.forEach(t),cpo=r(G7e," (ELECTRA model)"),G7e.forEach(t),fpo=i(N),fu=n(N,"LI",{});var X7e=s(fu);ZK=n(X7e,"STRONG",{});var ZPr=s(ZK);mpo=r(ZPr,"flaubert"),ZPr.forEach(t),gpo=r(X7e," \u2014 "),uS=n(X7e,"A",{href:!0});var e$r=s(uS);hpo=r(e$r,"FlaubertWithLMHeadModel"),e$r.forEach(t),ppo=r(X7e," (FlauBERT model)"),X7e.forEach(t),_po=i(N),mu=n(N,"LI",{});var z7e=s(mu);eZ=n(z7e,"STRONG",{});var o$r=s(eZ);upo=r(o$r,"fnet"),o$r.forEach(t),bpo=r(z7e," \u2014 "),bS=n(z7e,"A",{href:!0});var r$r=s(bS);vpo=r(r$r,"FNetForMaskedLM"),r$r.forEach(t),Tpo=r(z7e," (FNet model)"),z7e.forEach(t),Fpo=i(N),gu=n(N,"LI",{});var V7e=s(gu);oZ=n(V7e,"STRONG",{});var t$r=s(oZ);Cpo=r(t$r,"funnel"),t$r.forEach(t),Mpo=r(V7e," \u2014 "),vS=n(V7e,"A",{href:!0});var a$r=s(vS);Epo=r(a$r,"FunnelForMaskedLM"),a$r.forEach(t),ypo=r(V7e," (Funnel Transformer model)"),V7e.forEach(t),wpo=i(N),hu=n(N,"LI",{});var W7e=s(hu);rZ=n(W7e,"STRONG",{});var n$r=s(rZ);Apo=r(n$r,"ibert"),n$r.forEach(t),Lpo=r(W7e," \u2014 "),TS=n(W7e,"A",{href:!0});var s$r=s(TS);Bpo=r(s$r,"IBertForMaskedLM"),s$r.forEach(t),kpo=r(W7e," (I-BERT model)"),W7e.forEach(t),xpo=i(N),pu=n(N,"LI",{});var Q7e=s(pu);tZ=n(Q7e,"STRONG",{});var l$r=s(tZ);Rpo=r(l$r,"layoutlm"),l$r.forEach(t),Spo=r(Q7e," \u2014 "),FS=n(Q7e,"A",{href:!0});var i$r=s(FS);Ppo=r(i$r,"LayoutLMForMaskedLM"),i$r.forEach(t),$po=r(Q7e," (LayoutLM model)"),Q7e.forEach(t),Ipo=i(N),_u=n(N,"LI",{});var H7e=s(_u);aZ=n(H7e,"STRONG",{});var d$r=s(aZ);jpo=r(d$r,"longformer"),d$r.forEach(t),Npo=r(H7e," \u2014 "),CS=n(H7e,"A",{href:!0});var c$r=s(CS);Dpo=r(c$r,"LongformerForMaskedLM"),c$r.forEach(t),qpo=r(H7e," (Longformer model)"),H7e.forEach(t),Opo=i(N),uu=n(N,"LI",{});var U7e=s(uu);nZ=n(U7e,"STRONG",{});var f$r=s(nZ);Gpo=r(f$r,"mbart"),f$r.forEach(t),Xpo=r(U7e," \u2014 "),MS=n(U7e,"A",{href:!0});var m$r=s(MS);zpo=r(m$r,"MBartForConditionalGeneration"),m$r.forEach(t),Vpo=r(U7e," (mBART model)"),U7e.forEach(t),Wpo=i(N),bu=n(N,"LI",{});var J7e=s(bu);sZ=n(J7e,"STRONG",{});var g$r=s(sZ);Qpo=r(g$r,"megatron-bert"),g$r.forEach(t),Hpo=r(J7e," \u2014 "),ES=n(J7e,"A",{href:!0});var h$r=s(ES);Upo=r(h$r,"MegatronBertForMaskedLM"),h$r.forEach(t),Jpo=r(J7e," (MegatronBert model)"),J7e.forEach(t),Ypo=i(N),vu=n(N,"LI",{});var Y7e=s(vu);lZ=n(Y7e,"STRONG",{});var p$r=s(lZ);Kpo=r(p$r,"mobilebert"),p$r.forEach(t),Zpo=r(Y7e," \u2014 "),yS=n(Y7e,"A",{href:!0});var _$r=s(yS);e_o=r(_$r,"MobileBertForMaskedLM"),_$r.forEach(t),o_o=r(Y7e," (MobileBERT model)"),Y7e.forEach(t),r_o=i(N),Tu=n(N,"LI",{});var K7e=s(Tu);iZ=n(K7e,"STRONG",{});var u$r=s(iZ);t_o=r(u$r,"mpnet"),u$r.forEach(t),a_o=r(K7e," \u2014 "),wS=n(K7e,"A",{href:!0});var b$r=s(wS);n_o=r(b$r,"MPNetForMaskedLM"),b$r.forEach(t),s_o=r(K7e," (MPNet model)"),K7e.forEach(t),l_o=i(N),Fu=n(N,"LI",{});var Z7e=s(Fu);dZ=n(Z7e,"STRONG",{});var v$r=s(dZ);i_o=r(v$r,"nystromformer"),v$r.forEach(t),d_o=r(Z7e," \u2014 "),AS=n(Z7e,"A",{href:!0});var T$r=s(AS);c_o=r(T$r,"NystromformerForMaskedLM"),T$r.forEach(t),f_o=r(Z7e," (Nystromformer model)"),Z7e.forEach(t),m_o=i(N),Cu=n(N,"LI",{});var eFe=s(Cu);cZ=n(eFe,"STRONG",{});var F$r=s(cZ);g_o=r(F$r,"perceiver"),F$r.forEach(t),h_o=r(eFe," \u2014 "),LS=n(eFe,"A",{href:!0});var C$r=s(LS);p_o=r(C$r,"PerceiverForMaskedLM"),C$r.forEach(t),__o=r(eFe," (Perceiver model)"),eFe.forEach(t),u_o=i(N),Mu=n(N,"LI",{});var oFe=s(Mu);fZ=n(oFe,"STRONG",{});var M$r=s(fZ);b_o=r(M$r,"qdqbert"),M$r.forEach(t),v_o=r(oFe," \u2014 "),BS=n(oFe,"A",{href:!0});var E$r=s(BS);T_o=r(E$r,"QDQBertForMaskedLM"),E$r.forEach(t),F_o=r(oFe," (QDQBert model)"),oFe.forEach(t),C_o=i(N),Eu=n(N,"LI",{});var rFe=s(Eu);mZ=n(rFe,"STRONG",{});var y$r=s(mZ);M_o=r(y$r,"reformer"),y$r.forEach(t),E_o=r(rFe," \u2014 "),kS=n(rFe,"A",{href:!0});var w$r=s(kS);y_o=r(w$r,"ReformerForMaskedLM"),w$r.forEach(t),w_o=r(rFe," (Reformer model)"),rFe.forEach(t),A_o=i(N),yu=n(N,"LI",{});var tFe=s(yu);gZ=n(tFe,"STRONG",{});var A$r=s(gZ);L_o=r(A$r,"rembert"),A$r.forEach(t),B_o=r(tFe," \u2014 "),xS=n(tFe,"A",{href:!0});var L$r=s(xS);k_o=r(L$r,"RemBertForMaskedLM"),L$r.forEach(t),x_o=r(tFe," (RemBERT model)"),tFe.forEach(t),R_o=i(N),wu=n(N,"LI",{});var aFe=s(wu);hZ=n(aFe,"STRONG",{});var B$r=s(hZ);S_o=r(B$r,"roberta"),B$r.forEach(t),P_o=r(aFe," \u2014 "),RS=n(aFe,"A",{href:!0});var k$r=s(RS);$_o=r(k$r,"RobertaForMaskedLM"),k$r.forEach(t),I_o=r(aFe," (RoBERTa model)"),aFe.forEach(t),j_o=i(N),Au=n(N,"LI",{});var nFe=s(Au);pZ=n(nFe,"STRONG",{});var x$r=s(pZ);N_o=r(x$r,"roformer"),x$r.forEach(t),D_o=r(nFe," \u2014 "),SS=n(nFe,"A",{href:!0});var R$r=s(SS);q_o=r(R$r,"RoFormerForMaskedLM"),R$r.forEach(t),O_o=r(nFe," (RoFormer model)"),nFe.forEach(t),G_o=i(N),Lu=n(N,"LI",{});var sFe=s(Lu);_Z=n(sFe,"STRONG",{});var S$r=s(_Z);X_o=r(S$r,"squeezebert"),S$r.forEach(t),z_o=r(sFe," \u2014 "),PS=n(sFe,"A",{href:!0});var P$r=s(PS);V_o=r(P$r,"SqueezeBertForMaskedLM"),P$r.forEach(t),W_o=r(sFe," (SqueezeBERT model)"),sFe.forEach(t),Q_o=i(N),Bu=n(N,"LI",{});var lFe=s(Bu);uZ=n(lFe,"STRONG",{});var $$r=s(uZ);H_o=r($$r,"tapas"),$$r.forEach(t),U_o=r(lFe," \u2014 "),$S=n(lFe,"A",{href:!0});var I$r=s($S);J_o=r(I$r,"TapasForMaskedLM"),I$r.forEach(t),Y_o=r(lFe," (TAPAS model)"),lFe.forEach(t),K_o=i(N),ku=n(N,"LI",{});var iFe=s(ku);bZ=n(iFe,"STRONG",{});var j$r=s(bZ);Z_o=r(j$r,"wav2vec2"),j$r.forEach(t),euo=r(iFe," \u2014 "),vZ=n(iFe,"CODE",{});var N$r=s(vZ);ouo=r(N$r,"Wav2Vec2ForMaskedLM"),N$r.forEach(t),ruo=r(iFe,"(Wav2Vec2 model)"),iFe.forEach(t),tuo=i(N),xu=n(N,"LI",{});var dFe=s(xu);TZ=n(dFe,"STRONG",{});var D$r=s(TZ);auo=r(D$r,"xlm"),D$r.forEach(t),nuo=r(dFe," \u2014 "),IS=n(dFe,"A",{href:!0});var q$r=s(IS);suo=r(q$r,"XLMWithLMHeadModel"),q$r.forEach(t),luo=r(dFe," (XLM model)"),dFe.forEach(t),iuo=i(N),Ru=n(N,"LI",{});var cFe=s(Ru);FZ=n(cFe,"STRONG",{});var O$r=s(FZ);duo=r(O$r,"xlm-roberta"),O$r.forEach(t),cuo=r(cFe," \u2014 "),jS=n(cFe,"A",{href:!0});var G$r=s(jS);fuo=r(G$r,"XLMRobertaForMaskedLM"),G$r.forEach(t),muo=r(cFe," (XLM-RoBERTa model)"),cFe.forEach(t),guo=i(N),Su=n(N,"LI",{});var fFe=s(Su);CZ=n(fFe,"STRONG",{});var X$r=s(CZ);huo=r(X$r,"xlm-roberta-xl"),X$r.forEach(t),puo=r(fFe," \u2014 "),MZ=n(fFe,"CODE",{});var z$r=s(MZ);_uo=r(z$r,"XLMRobertaXLForMaskedLM"),z$r.forEach(t),uuo=r(fFe,"(XLM-RoBERTa-XL model)"),fFe.forEach(t),buo=i(N),Pu=n(N,"LI",{});var mFe=s(Pu);EZ=n(mFe,"STRONG",{});var V$r=s(EZ);vuo=r(V$r,"yoso"),V$r.forEach(t),Tuo=r(mFe," \u2014 "),NS=n(mFe,"A",{href:!0});var W$r=s(NS);Fuo=r(W$r,"YosoForMaskedLM"),W$r.forEach(t),Cuo=r(mFe," (YOSO model)"),mFe.forEach(t),N.forEach(t),Muo=i(kt),$u=n(kt,"P",{});var gFe=s($u);Euo=r(gFe,"The model is set in evaluation mode by default using "),yZ=n(gFe,"CODE",{});var Q$r=s(yZ);yuo=r(Q$r,"model.eval()"),Q$r.forEach(t),wuo=r(gFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wZ=n(gFe,"CODE",{});var H$r=s(wZ);Auo=r(H$r,"model.train()"),H$r.forEach(t),gFe.forEach(t),Luo=i(kt),AZ=n(kt,"P",{});var U$r=s(AZ);Buo=r(U$r,"Examples:"),U$r.forEach(t),kuo=i(kt),m(PM.$$.fragment,kt),kt.forEach(t),Ps.forEach(t),z0e=i(d),Ni=n(d,"H2",{class:!0});var QLe=s(Ni);Iu=n(QLe,"A",{id:!0,class:!0,href:!0});var J$r=s(Iu);LZ=n(J$r,"SPAN",{});var Y$r=s(LZ);m($M.$$.fragment,Y$r),Y$r.forEach(t),J$r.forEach(t),xuo=i(QLe),BZ=n(QLe,"SPAN",{});var K$r=s(BZ);Ruo=r(K$r,"AutoModelForSeq2SeqLM"),K$r.forEach(t),QLe.forEach(t),V0e=i(d),Qo=n(d,"DIV",{class:!0});var Is=s(Qo);m(IM.$$.fragment,Is),Suo=i(Is),Di=n(Is,"P",{});var OG=s(Di);Puo=r(OG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kZ=n(OG,"CODE",{});var Z$r=s(kZ);$uo=r(Z$r,"from_pretrained()"),Z$r.forEach(t),Iuo=r(OG,"class method or the "),xZ=n(OG,"CODE",{});var eIr=s(xZ);juo=r(eIr,"from_config()"),eIr.forEach(t),Nuo=r(OG,`class
method.`),OG.forEach(t),Duo=i(Is),jM=n(Is,"P",{});var HLe=s(jM);quo=r(HLe,"This class cannot be instantiated directly using "),RZ=n(HLe,"CODE",{});var oIr=s(RZ);Ouo=r(oIr,"__init__()"),oIr.forEach(t),Guo=r(HLe," (throws an error)."),HLe.forEach(t),Xuo=i(Is),Nr=n(Is,"DIV",{class:!0});var js=s(Nr);m(NM.$$.fragment,js),zuo=i(js),SZ=n(js,"P",{});var rIr=s(SZ);Vuo=r(rIr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rIr.forEach(t),Wuo=i(js),qi=n(js,"P",{});var GG=s(qi);Quo=r(GG,`Note:
Loading a model from its configuration file does `),PZ=n(GG,"STRONG",{});var tIr=s(PZ);Huo=r(tIr,"not"),tIr.forEach(t),Uuo=r(GG,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Z=n(GG,"CODE",{});var aIr=s($Z);Juo=r(aIr,"from_pretrained()"),aIr.forEach(t),Yuo=r(GG,"to load the model weights."),GG.forEach(t),Kuo=i(js),IZ=n(js,"P",{});var nIr=s(IZ);Zuo=r(nIr,"Examples:"),nIr.forEach(t),e1o=i(js),m(DM.$$.fragment,js),js.forEach(t),o1o=i(Is),Pe=n(Is,"DIV",{class:!0});var xt=s(Pe);m(qM.$$.fragment,xt),r1o=i(xt),jZ=n(xt,"P",{});var sIr=s(jZ);t1o=r(sIr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sIr.forEach(t),a1o=i(xt),$a=n(xt,"P",{});var D9=s($a);n1o=r(D9,"The model class to instantiate is selected based on the "),NZ=n(D9,"CODE",{});var lIr=s(NZ);s1o=r(lIr,"model_type"),lIr.forEach(t),l1o=r(D9,` property of the config object (either
passed as an argument or loaded from `),DZ=n(D9,"CODE",{});var iIr=s(DZ);i1o=r(iIr,"pretrained_model_name_or_path"),iIr.forEach(t),d1o=r(D9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qZ=n(D9,"CODE",{});var dIr=s(qZ);c1o=r(dIr,"pretrained_model_name_or_path"),dIr.forEach(t),f1o=r(D9,":"),D9.forEach(t),m1o=i(xt),ae=n(xt,"UL",{});var le=s(ae);ju=n(le,"LI",{});var hFe=s(ju);OZ=n(hFe,"STRONG",{});var cIr=s(OZ);g1o=r(cIr,"bart"),cIr.forEach(t),h1o=r(hFe," \u2014 "),DS=n(hFe,"A",{href:!0});var fIr=s(DS);p1o=r(fIr,"BartForConditionalGeneration"),fIr.forEach(t),_1o=r(hFe," (BART model)"),hFe.forEach(t),u1o=i(le),Nu=n(le,"LI",{});var pFe=s(Nu);GZ=n(pFe,"STRONG",{});var mIr=s(GZ);b1o=r(mIr,"bigbird_pegasus"),mIr.forEach(t),v1o=r(pFe," \u2014 "),qS=n(pFe,"A",{href:!0});var gIr=s(qS);T1o=r(gIr,"BigBirdPegasusForConditionalGeneration"),gIr.forEach(t),F1o=r(pFe," (BigBirdPegasus model)"),pFe.forEach(t),C1o=i(le),Du=n(le,"LI",{});var _Fe=s(Du);XZ=n(_Fe,"STRONG",{});var hIr=s(XZ);M1o=r(hIr,"blenderbot"),hIr.forEach(t),E1o=r(_Fe," \u2014 "),OS=n(_Fe,"A",{href:!0});var pIr=s(OS);y1o=r(pIr,"BlenderbotForConditionalGeneration"),pIr.forEach(t),w1o=r(_Fe," (Blenderbot model)"),_Fe.forEach(t),A1o=i(le),qu=n(le,"LI",{});var uFe=s(qu);zZ=n(uFe,"STRONG",{});var _Ir=s(zZ);L1o=r(_Ir,"blenderbot-small"),_Ir.forEach(t),B1o=r(uFe," \u2014 "),GS=n(uFe,"A",{href:!0});var uIr=s(GS);k1o=r(uIr,"BlenderbotSmallForConditionalGeneration"),uIr.forEach(t),x1o=r(uFe," (BlenderbotSmall model)"),uFe.forEach(t),R1o=i(le),Ou=n(le,"LI",{});var bFe=s(Ou);VZ=n(bFe,"STRONG",{});var bIr=s(VZ);S1o=r(bIr,"encoder-decoder"),bIr.forEach(t),P1o=r(bFe," \u2014 "),XS=n(bFe,"A",{href:!0});var vIr=s(XS);$1o=r(vIr,"EncoderDecoderModel"),vIr.forEach(t),I1o=r(bFe," (Encoder decoder model)"),bFe.forEach(t),j1o=i(le),Gu=n(le,"LI",{});var vFe=s(Gu);WZ=n(vFe,"STRONG",{});var TIr=s(WZ);N1o=r(TIr,"fsmt"),TIr.forEach(t),D1o=r(vFe," \u2014 "),zS=n(vFe,"A",{href:!0});var FIr=s(zS);q1o=r(FIr,"FSMTForConditionalGeneration"),FIr.forEach(t),O1o=r(vFe," (FairSeq Machine-Translation model)"),vFe.forEach(t),G1o=i(le),Xu=n(le,"LI",{});var TFe=s(Xu);QZ=n(TFe,"STRONG",{});var CIr=s(QZ);X1o=r(CIr,"led"),CIr.forEach(t),z1o=r(TFe," \u2014 "),VS=n(TFe,"A",{href:!0});var MIr=s(VS);V1o=r(MIr,"LEDForConditionalGeneration"),MIr.forEach(t),W1o=r(TFe," (LED model)"),TFe.forEach(t),Q1o=i(le),zu=n(le,"LI",{});var FFe=s(zu);HZ=n(FFe,"STRONG",{});var EIr=s(HZ);H1o=r(EIr,"m2m_100"),EIr.forEach(t),U1o=r(FFe," \u2014 "),WS=n(FFe,"A",{href:!0});var yIr=s(WS);J1o=r(yIr,"M2M100ForConditionalGeneration"),yIr.forEach(t),Y1o=r(FFe," (M2M100 model)"),FFe.forEach(t),K1o=i(le),Vu=n(le,"LI",{});var CFe=s(Vu);UZ=n(CFe,"STRONG",{});var wIr=s(UZ);Z1o=r(wIr,"marian"),wIr.forEach(t),e4o=r(CFe," \u2014 "),QS=n(CFe,"A",{href:!0});var AIr=s(QS);o4o=r(AIr,"MarianMTModel"),AIr.forEach(t),r4o=r(CFe," (Marian model)"),CFe.forEach(t),t4o=i(le),Wu=n(le,"LI",{});var MFe=s(Wu);JZ=n(MFe,"STRONG",{});var LIr=s(JZ);a4o=r(LIr,"mbart"),LIr.forEach(t),n4o=r(MFe," \u2014 "),HS=n(MFe,"A",{href:!0});var BIr=s(HS);s4o=r(BIr,"MBartForConditionalGeneration"),BIr.forEach(t),l4o=r(MFe," (mBART model)"),MFe.forEach(t),i4o=i(le),Qu=n(le,"LI",{});var EFe=s(Qu);YZ=n(EFe,"STRONG",{});var kIr=s(YZ);d4o=r(kIr,"mt5"),kIr.forEach(t),c4o=r(EFe," \u2014 "),US=n(EFe,"A",{href:!0});var xIr=s(US);f4o=r(xIr,"MT5ForConditionalGeneration"),xIr.forEach(t),m4o=r(EFe," (mT5 model)"),EFe.forEach(t),g4o=i(le),Hu=n(le,"LI",{});var yFe=s(Hu);KZ=n(yFe,"STRONG",{});var RIr=s(KZ);h4o=r(RIr,"pegasus"),RIr.forEach(t),p4o=r(yFe," \u2014 "),JS=n(yFe,"A",{href:!0});var SIr=s(JS);_4o=r(SIr,"PegasusForConditionalGeneration"),SIr.forEach(t),u4o=r(yFe," (Pegasus model)"),yFe.forEach(t),b4o=i(le),Uu=n(le,"LI",{});var wFe=s(Uu);ZZ=n(wFe,"STRONG",{});var PIr=s(ZZ);v4o=r(PIr,"plbart"),PIr.forEach(t),T4o=r(wFe," \u2014 "),YS=n(wFe,"A",{href:!0});var $Ir=s(YS);F4o=r($Ir,"PLBartForConditionalGeneration"),$Ir.forEach(t),C4o=r(wFe," (PLBart model)"),wFe.forEach(t),M4o=i(le),Ju=n(le,"LI",{});var AFe=s(Ju);eee=n(AFe,"STRONG",{});var IIr=s(eee);E4o=r(IIr,"prophetnet"),IIr.forEach(t),y4o=r(AFe," \u2014 "),KS=n(AFe,"A",{href:!0});var jIr=s(KS);w4o=r(jIr,"ProphetNetForConditionalGeneration"),jIr.forEach(t),A4o=r(AFe," (ProphetNet model)"),AFe.forEach(t),L4o=i(le),Yu=n(le,"LI",{});var LFe=s(Yu);oee=n(LFe,"STRONG",{});var NIr=s(oee);B4o=r(NIr,"t5"),NIr.forEach(t),k4o=r(LFe," \u2014 "),ZS=n(LFe,"A",{href:!0});var DIr=s(ZS);x4o=r(DIr,"T5ForConditionalGeneration"),DIr.forEach(t),R4o=r(LFe," (T5 model)"),LFe.forEach(t),S4o=i(le),Ku=n(le,"LI",{});var BFe=s(Ku);ree=n(BFe,"STRONG",{});var qIr=s(ree);P4o=r(qIr,"xlm-prophetnet"),qIr.forEach(t),$4o=r(BFe," \u2014 "),eP=n(BFe,"A",{href:!0});var OIr=s(eP);I4o=r(OIr,"XLMProphetNetForConditionalGeneration"),OIr.forEach(t),j4o=r(BFe," (XLMProphetNet model)"),BFe.forEach(t),le.forEach(t),N4o=i(xt),Zu=n(xt,"P",{});var kFe=s(Zu);D4o=r(kFe,"The model is set in evaluation mode by default using "),tee=n(kFe,"CODE",{});var GIr=s(tee);q4o=r(GIr,"model.eval()"),GIr.forEach(t),O4o=r(kFe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aee=n(kFe,"CODE",{});var XIr=s(aee);G4o=r(XIr,"model.train()"),XIr.forEach(t),kFe.forEach(t),X4o=i(xt),nee=n(xt,"P",{});var zIr=s(nee);z4o=r(zIr,"Examples:"),zIr.forEach(t),V4o=i(xt),m(OM.$$.fragment,xt),xt.forEach(t),Is.forEach(t),W0e=i(d),Oi=n(d,"H2",{class:!0});var ULe=s(Oi);e1=n(ULe,"A",{id:!0,class:!0,href:!0});var VIr=s(e1);see=n(VIr,"SPAN",{});var WIr=s(see);m(GM.$$.fragment,WIr),WIr.forEach(t),VIr.forEach(t),W4o=i(ULe),lee=n(ULe,"SPAN",{});var QIr=s(lee);Q4o=r(QIr,"AutoModelForSequenceClassification"),QIr.forEach(t),ULe.forEach(t),Q0e=i(d),Ho=n(d,"DIV",{class:!0});var Ns=s(Ho);m(XM.$$.fragment,Ns),H4o=i(Ns),Gi=n(Ns,"P",{});var XG=s(Gi);U4o=r(XG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iee=n(XG,"CODE",{});var HIr=s(iee);J4o=r(HIr,"from_pretrained()"),HIr.forEach(t),Y4o=r(XG,"class method or the "),dee=n(XG,"CODE",{});var UIr=s(dee);K4o=r(UIr,"from_config()"),UIr.forEach(t),Z4o=r(XG,`class
method.`),XG.forEach(t),ebo=i(Ns),zM=n(Ns,"P",{});var JLe=s(zM);obo=r(JLe,"This class cannot be instantiated directly using "),cee=n(JLe,"CODE",{});var JIr=s(cee);rbo=r(JIr,"__init__()"),JIr.forEach(t),tbo=r(JLe," (throws an error)."),JLe.forEach(t),abo=i(Ns),Dr=n(Ns,"DIV",{class:!0});var Ds=s(Dr);m(VM.$$.fragment,Ds),nbo=i(Ds),fee=n(Ds,"P",{});var YIr=s(fee);sbo=r(YIr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YIr.forEach(t),lbo=i(Ds),Xi=n(Ds,"P",{});var zG=s(Xi);ibo=r(zG,`Note:
Loading a model from its configuration file does `),mee=n(zG,"STRONG",{});var KIr=s(mee);dbo=r(KIr,"not"),KIr.forEach(t),cbo=r(zG,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(zG,"CODE",{});var ZIr=s(gee);fbo=r(ZIr,"from_pretrained()"),ZIr.forEach(t),mbo=r(zG,"to load the model weights."),zG.forEach(t),gbo=i(Ds),hee=n(Ds,"P",{});var ejr=s(hee);hbo=r(ejr,"Examples:"),ejr.forEach(t),pbo=i(Ds),m(WM.$$.fragment,Ds),Ds.forEach(t),_bo=i(Ns),$e=n(Ns,"DIV",{class:!0});var Rt=s($e);m(QM.$$.fragment,Rt),ubo=i(Rt),pee=n(Rt,"P",{});var ojr=s(pee);bbo=r(ojr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ojr.forEach(t),vbo=i(Rt),Ia=n(Rt,"P",{});var q9=s(Ia);Tbo=r(q9,"The model class to instantiate is selected based on the "),_ee=n(q9,"CODE",{});var rjr=s(_ee);Fbo=r(rjr,"model_type"),rjr.forEach(t),Cbo=r(q9,` property of the config object (either
passed as an argument or loaded from `),uee=n(q9,"CODE",{});var tjr=s(uee);Mbo=r(tjr,"pretrained_model_name_or_path"),tjr.forEach(t),Ebo=r(q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bee=n(q9,"CODE",{});var ajr=s(bee);ybo=r(ajr,"pretrained_model_name_or_path"),ajr.forEach(t),wbo=r(q9,":"),q9.forEach(t),Abo=i(Rt),A=n(Rt,"UL",{});var L=s(A);o1=n(L,"LI",{});var xFe=s(o1);vee=n(xFe,"STRONG",{});var njr=s(vee);Lbo=r(njr,"albert"),njr.forEach(t),Bbo=r(xFe," \u2014 "),oP=n(xFe,"A",{href:!0});var sjr=s(oP);kbo=r(sjr,"AlbertForSequenceClassification"),sjr.forEach(t),xbo=r(xFe," (ALBERT model)"),xFe.forEach(t),Rbo=i(L),r1=n(L,"LI",{});var RFe=s(r1);Tee=n(RFe,"STRONG",{});var ljr=s(Tee);Sbo=r(ljr,"bart"),ljr.forEach(t),Pbo=r(RFe," \u2014 "),rP=n(RFe,"A",{href:!0});var ijr=s(rP);$bo=r(ijr,"BartForSequenceClassification"),ijr.forEach(t),Ibo=r(RFe," (BART model)"),RFe.forEach(t),jbo=i(L),t1=n(L,"LI",{});var SFe=s(t1);Fee=n(SFe,"STRONG",{});var djr=s(Fee);Nbo=r(djr,"bert"),djr.forEach(t),Dbo=r(SFe," \u2014 "),tP=n(SFe,"A",{href:!0});var cjr=s(tP);qbo=r(cjr,"BertForSequenceClassification"),cjr.forEach(t),Obo=r(SFe," (BERT model)"),SFe.forEach(t),Gbo=i(L),a1=n(L,"LI",{});var PFe=s(a1);Cee=n(PFe,"STRONG",{});var fjr=s(Cee);Xbo=r(fjr,"big_bird"),fjr.forEach(t),zbo=r(PFe," \u2014 "),aP=n(PFe,"A",{href:!0});var mjr=s(aP);Vbo=r(mjr,"BigBirdForSequenceClassification"),mjr.forEach(t),Wbo=r(PFe," (BigBird model)"),PFe.forEach(t),Qbo=i(L),n1=n(L,"LI",{});var $Fe=s(n1);Mee=n($Fe,"STRONG",{});var gjr=s(Mee);Hbo=r(gjr,"bigbird_pegasus"),gjr.forEach(t),Ubo=r($Fe," \u2014 "),nP=n($Fe,"A",{href:!0});var hjr=s(nP);Jbo=r(hjr,"BigBirdPegasusForSequenceClassification"),hjr.forEach(t),Ybo=r($Fe," (BigBirdPegasus model)"),$Fe.forEach(t),Kbo=i(L),s1=n(L,"LI",{});var IFe=s(s1);Eee=n(IFe,"STRONG",{});var pjr=s(Eee);Zbo=r(pjr,"camembert"),pjr.forEach(t),e5o=r(IFe," \u2014 "),sP=n(IFe,"A",{href:!0});var _jr=s(sP);o5o=r(_jr,"CamembertForSequenceClassification"),_jr.forEach(t),r5o=r(IFe," (CamemBERT model)"),IFe.forEach(t),t5o=i(L),l1=n(L,"LI",{});var jFe=s(l1);yee=n(jFe,"STRONG",{});var ujr=s(yee);a5o=r(ujr,"canine"),ujr.forEach(t),n5o=r(jFe," \u2014 "),lP=n(jFe,"A",{href:!0});var bjr=s(lP);s5o=r(bjr,"CanineForSequenceClassification"),bjr.forEach(t),l5o=r(jFe," (Canine model)"),jFe.forEach(t),i5o=i(L),i1=n(L,"LI",{});var NFe=s(i1);wee=n(NFe,"STRONG",{});var vjr=s(wee);d5o=r(vjr,"convbert"),vjr.forEach(t),c5o=r(NFe," \u2014 "),iP=n(NFe,"A",{href:!0});var Tjr=s(iP);f5o=r(Tjr,"ConvBertForSequenceClassification"),Tjr.forEach(t),m5o=r(NFe," (ConvBERT model)"),NFe.forEach(t),g5o=i(L),d1=n(L,"LI",{});var DFe=s(d1);Aee=n(DFe,"STRONG",{});var Fjr=s(Aee);h5o=r(Fjr,"ctrl"),Fjr.forEach(t),p5o=r(DFe," \u2014 "),dP=n(DFe,"A",{href:!0});var Cjr=s(dP);_5o=r(Cjr,"CTRLForSequenceClassification"),Cjr.forEach(t),u5o=r(DFe," (CTRL model)"),DFe.forEach(t),b5o=i(L),c1=n(L,"LI",{});var qFe=s(c1);Lee=n(qFe,"STRONG",{});var Mjr=s(Lee);v5o=r(Mjr,"deberta"),Mjr.forEach(t),T5o=r(qFe," \u2014 "),cP=n(qFe,"A",{href:!0});var Ejr=s(cP);F5o=r(Ejr,"DebertaForSequenceClassification"),Ejr.forEach(t),C5o=r(qFe," (DeBERTa model)"),qFe.forEach(t),M5o=i(L),f1=n(L,"LI",{});var OFe=s(f1);Bee=n(OFe,"STRONG",{});var yjr=s(Bee);E5o=r(yjr,"deberta-v2"),yjr.forEach(t),y5o=r(OFe," \u2014 "),fP=n(OFe,"A",{href:!0});var wjr=s(fP);w5o=r(wjr,"DebertaV2ForSequenceClassification"),wjr.forEach(t),A5o=r(OFe," (DeBERTa-v2 model)"),OFe.forEach(t),L5o=i(L),m1=n(L,"LI",{});var GFe=s(m1);kee=n(GFe,"STRONG",{});var Ajr=s(kee);B5o=r(Ajr,"distilbert"),Ajr.forEach(t),k5o=r(GFe," \u2014 "),mP=n(GFe,"A",{href:!0});var Ljr=s(mP);x5o=r(Ljr,"DistilBertForSequenceClassification"),Ljr.forEach(t),R5o=r(GFe," (DistilBERT model)"),GFe.forEach(t),S5o=i(L),g1=n(L,"LI",{});var XFe=s(g1);xee=n(XFe,"STRONG",{});var Bjr=s(xee);P5o=r(Bjr,"electra"),Bjr.forEach(t),$5o=r(XFe," \u2014 "),gP=n(XFe,"A",{href:!0});var kjr=s(gP);I5o=r(kjr,"ElectraForSequenceClassification"),kjr.forEach(t),j5o=r(XFe," (ELECTRA model)"),XFe.forEach(t),N5o=i(L),h1=n(L,"LI",{});var zFe=s(h1);Ree=n(zFe,"STRONG",{});var xjr=s(Ree);D5o=r(xjr,"flaubert"),xjr.forEach(t),q5o=r(zFe," \u2014 "),hP=n(zFe,"A",{href:!0});var Rjr=s(hP);O5o=r(Rjr,"FlaubertForSequenceClassification"),Rjr.forEach(t),G5o=r(zFe," (FlauBERT model)"),zFe.forEach(t),X5o=i(L),p1=n(L,"LI",{});var VFe=s(p1);See=n(VFe,"STRONG",{});var Sjr=s(See);z5o=r(Sjr,"fnet"),Sjr.forEach(t),V5o=r(VFe," \u2014 "),pP=n(VFe,"A",{href:!0});var Pjr=s(pP);W5o=r(Pjr,"FNetForSequenceClassification"),Pjr.forEach(t),Q5o=r(VFe," (FNet model)"),VFe.forEach(t),H5o=i(L),_1=n(L,"LI",{});var WFe=s(_1);Pee=n(WFe,"STRONG",{});var $jr=s(Pee);U5o=r($jr,"funnel"),$jr.forEach(t),J5o=r(WFe," \u2014 "),_P=n(WFe,"A",{href:!0});var Ijr=s(_P);Y5o=r(Ijr,"FunnelForSequenceClassification"),Ijr.forEach(t),K5o=r(WFe," (Funnel Transformer model)"),WFe.forEach(t),Z5o=i(L),u1=n(L,"LI",{});var QFe=s(u1);$ee=n(QFe,"STRONG",{});var jjr=s($ee);e2o=r(jjr,"gpt2"),jjr.forEach(t),o2o=r(QFe," \u2014 "),uP=n(QFe,"A",{href:!0});var Njr=s(uP);r2o=r(Njr,"GPT2ForSequenceClassification"),Njr.forEach(t),t2o=r(QFe," (OpenAI GPT-2 model)"),QFe.forEach(t),a2o=i(L),b1=n(L,"LI",{});var HFe=s(b1);Iee=n(HFe,"STRONG",{});var Djr=s(Iee);n2o=r(Djr,"gpt_neo"),Djr.forEach(t),s2o=r(HFe," \u2014 "),bP=n(HFe,"A",{href:!0});var qjr=s(bP);l2o=r(qjr,"GPTNeoForSequenceClassification"),qjr.forEach(t),i2o=r(HFe," (GPT Neo model)"),HFe.forEach(t),d2o=i(L),v1=n(L,"LI",{});var UFe=s(v1);jee=n(UFe,"STRONG",{});var Ojr=s(jee);c2o=r(Ojr,"gptj"),Ojr.forEach(t),f2o=r(UFe," \u2014 "),vP=n(UFe,"A",{href:!0});var Gjr=s(vP);m2o=r(Gjr,"GPTJForSequenceClassification"),Gjr.forEach(t),g2o=r(UFe," (GPT-J model)"),UFe.forEach(t),h2o=i(L),T1=n(L,"LI",{});var JFe=s(T1);Nee=n(JFe,"STRONG",{});var Xjr=s(Nee);p2o=r(Xjr,"ibert"),Xjr.forEach(t),_2o=r(JFe," \u2014 "),TP=n(JFe,"A",{href:!0});var zjr=s(TP);u2o=r(zjr,"IBertForSequenceClassification"),zjr.forEach(t),b2o=r(JFe," (I-BERT model)"),JFe.forEach(t),v2o=i(L),F1=n(L,"LI",{});var YFe=s(F1);Dee=n(YFe,"STRONG",{});var Vjr=s(Dee);T2o=r(Vjr,"layoutlm"),Vjr.forEach(t),F2o=r(YFe," \u2014 "),FP=n(YFe,"A",{href:!0});var Wjr=s(FP);C2o=r(Wjr,"LayoutLMForSequenceClassification"),Wjr.forEach(t),M2o=r(YFe," (LayoutLM model)"),YFe.forEach(t),E2o=i(L),C1=n(L,"LI",{});var KFe=s(C1);qee=n(KFe,"STRONG",{});var Qjr=s(qee);y2o=r(Qjr,"layoutlmv2"),Qjr.forEach(t),w2o=r(KFe," \u2014 "),CP=n(KFe,"A",{href:!0});var Hjr=s(CP);A2o=r(Hjr,"LayoutLMv2ForSequenceClassification"),Hjr.forEach(t),L2o=r(KFe," (LayoutLMv2 model)"),KFe.forEach(t),B2o=i(L),M1=n(L,"LI",{});var ZFe=s(M1);Oee=n(ZFe,"STRONG",{});var Ujr=s(Oee);k2o=r(Ujr,"led"),Ujr.forEach(t),x2o=r(ZFe," \u2014 "),MP=n(ZFe,"A",{href:!0});var Jjr=s(MP);R2o=r(Jjr,"LEDForSequenceClassification"),Jjr.forEach(t),S2o=r(ZFe," (LED model)"),ZFe.forEach(t),P2o=i(L),E1=n(L,"LI",{});var e9e=s(E1);Gee=n(e9e,"STRONG",{});var Yjr=s(Gee);$2o=r(Yjr,"longformer"),Yjr.forEach(t),I2o=r(e9e," \u2014 "),EP=n(e9e,"A",{href:!0});var Kjr=s(EP);j2o=r(Kjr,"LongformerForSequenceClassification"),Kjr.forEach(t),N2o=r(e9e," (Longformer model)"),e9e.forEach(t),D2o=i(L),y1=n(L,"LI",{});var o9e=s(y1);Xee=n(o9e,"STRONG",{});var Zjr=s(Xee);q2o=r(Zjr,"mbart"),Zjr.forEach(t),O2o=r(o9e," \u2014 "),yP=n(o9e,"A",{href:!0});var eNr=s(yP);G2o=r(eNr,"MBartForSequenceClassification"),eNr.forEach(t),X2o=r(o9e," (mBART model)"),o9e.forEach(t),z2o=i(L),w1=n(L,"LI",{});var r9e=s(w1);zee=n(r9e,"STRONG",{});var oNr=s(zee);V2o=r(oNr,"megatron-bert"),oNr.forEach(t),W2o=r(r9e," \u2014 "),wP=n(r9e,"A",{href:!0});var rNr=s(wP);Q2o=r(rNr,"MegatronBertForSequenceClassification"),rNr.forEach(t),H2o=r(r9e," (MegatronBert model)"),r9e.forEach(t),U2o=i(L),A1=n(L,"LI",{});var t9e=s(A1);Vee=n(t9e,"STRONG",{});var tNr=s(Vee);J2o=r(tNr,"mobilebert"),tNr.forEach(t),Y2o=r(t9e," \u2014 "),AP=n(t9e,"A",{href:!0});var aNr=s(AP);K2o=r(aNr,"MobileBertForSequenceClassification"),aNr.forEach(t),Z2o=r(t9e," (MobileBERT model)"),t9e.forEach(t),evo=i(L),L1=n(L,"LI",{});var a9e=s(L1);Wee=n(a9e,"STRONG",{});var nNr=s(Wee);ovo=r(nNr,"mpnet"),nNr.forEach(t),rvo=r(a9e," \u2014 "),LP=n(a9e,"A",{href:!0});var sNr=s(LP);tvo=r(sNr,"MPNetForSequenceClassification"),sNr.forEach(t),avo=r(a9e," (MPNet model)"),a9e.forEach(t),nvo=i(L),B1=n(L,"LI",{});var n9e=s(B1);Qee=n(n9e,"STRONG",{});var lNr=s(Qee);svo=r(lNr,"nystromformer"),lNr.forEach(t),lvo=r(n9e," \u2014 "),BP=n(n9e,"A",{href:!0});var iNr=s(BP);ivo=r(iNr,"NystromformerForSequenceClassification"),iNr.forEach(t),dvo=r(n9e," (Nystromformer model)"),n9e.forEach(t),cvo=i(L),k1=n(L,"LI",{});var s9e=s(k1);Hee=n(s9e,"STRONG",{});var dNr=s(Hee);fvo=r(dNr,"openai-gpt"),dNr.forEach(t),mvo=r(s9e," \u2014 "),kP=n(s9e,"A",{href:!0});var cNr=s(kP);gvo=r(cNr,"OpenAIGPTForSequenceClassification"),cNr.forEach(t),hvo=r(s9e," (OpenAI GPT model)"),s9e.forEach(t),pvo=i(L),x1=n(L,"LI",{});var l9e=s(x1);Uee=n(l9e,"STRONG",{});var fNr=s(Uee);_vo=r(fNr,"perceiver"),fNr.forEach(t),uvo=r(l9e," \u2014 "),xP=n(l9e,"A",{href:!0});var mNr=s(xP);bvo=r(mNr,"PerceiverForSequenceClassification"),mNr.forEach(t),vvo=r(l9e," (Perceiver model)"),l9e.forEach(t),Tvo=i(L),R1=n(L,"LI",{});var i9e=s(R1);Jee=n(i9e,"STRONG",{});var gNr=s(Jee);Fvo=r(gNr,"plbart"),gNr.forEach(t),Cvo=r(i9e," \u2014 "),RP=n(i9e,"A",{href:!0});var hNr=s(RP);Mvo=r(hNr,"PLBartForSequenceClassification"),hNr.forEach(t),Evo=r(i9e," (PLBart model)"),i9e.forEach(t),yvo=i(L),S1=n(L,"LI",{});var d9e=s(S1);Yee=n(d9e,"STRONG",{});var pNr=s(Yee);wvo=r(pNr,"qdqbert"),pNr.forEach(t),Avo=r(d9e," \u2014 "),SP=n(d9e,"A",{href:!0});var _Nr=s(SP);Lvo=r(_Nr,"QDQBertForSequenceClassification"),_Nr.forEach(t),Bvo=r(d9e," (QDQBert model)"),d9e.forEach(t),kvo=i(L),P1=n(L,"LI",{});var c9e=s(P1);Kee=n(c9e,"STRONG",{});var uNr=s(Kee);xvo=r(uNr,"reformer"),uNr.forEach(t),Rvo=r(c9e," \u2014 "),PP=n(c9e,"A",{href:!0});var bNr=s(PP);Svo=r(bNr,"ReformerForSequenceClassification"),bNr.forEach(t),Pvo=r(c9e," (Reformer model)"),c9e.forEach(t),$vo=i(L),$1=n(L,"LI",{});var f9e=s($1);Zee=n(f9e,"STRONG",{});var vNr=s(Zee);Ivo=r(vNr,"rembert"),vNr.forEach(t),jvo=r(f9e," \u2014 "),$P=n(f9e,"A",{href:!0});var TNr=s($P);Nvo=r(TNr,"RemBertForSequenceClassification"),TNr.forEach(t),Dvo=r(f9e," (RemBERT model)"),f9e.forEach(t),qvo=i(L),I1=n(L,"LI",{});var m9e=s(I1);eoe=n(m9e,"STRONG",{});var FNr=s(eoe);Ovo=r(FNr,"roberta"),FNr.forEach(t),Gvo=r(m9e," \u2014 "),IP=n(m9e,"A",{href:!0});var CNr=s(IP);Xvo=r(CNr,"RobertaForSequenceClassification"),CNr.forEach(t),zvo=r(m9e," (RoBERTa model)"),m9e.forEach(t),Vvo=i(L),j1=n(L,"LI",{});var g9e=s(j1);ooe=n(g9e,"STRONG",{});var MNr=s(ooe);Wvo=r(MNr,"roformer"),MNr.forEach(t),Qvo=r(g9e," \u2014 "),jP=n(g9e,"A",{href:!0});var ENr=s(jP);Hvo=r(ENr,"RoFormerForSequenceClassification"),ENr.forEach(t),Uvo=r(g9e," (RoFormer model)"),g9e.forEach(t),Jvo=i(L),N1=n(L,"LI",{});var h9e=s(N1);roe=n(h9e,"STRONG",{});var yNr=s(roe);Yvo=r(yNr,"squeezebert"),yNr.forEach(t),Kvo=r(h9e," \u2014 "),NP=n(h9e,"A",{href:!0});var wNr=s(NP);Zvo=r(wNr,"SqueezeBertForSequenceClassification"),wNr.forEach(t),eTo=r(h9e," (SqueezeBERT model)"),h9e.forEach(t),oTo=i(L),D1=n(L,"LI",{});var p9e=s(D1);toe=n(p9e,"STRONG",{});var ANr=s(toe);rTo=r(ANr,"tapas"),ANr.forEach(t),tTo=r(p9e," \u2014 "),DP=n(p9e,"A",{href:!0});var LNr=s(DP);aTo=r(LNr,"TapasForSequenceClassification"),LNr.forEach(t),nTo=r(p9e," (TAPAS model)"),p9e.forEach(t),sTo=i(L),q1=n(L,"LI",{});var _9e=s(q1);aoe=n(_9e,"STRONG",{});var BNr=s(aoe);lTo=r(BNr,"transfo-xl"),BNr.forEach(t),iTo=r(_9e," \u2014 "),qP=n(_9e,"A",{href:!0});var kNr=s(qP);dTo=r(kNr,"TransfoXLForSequenceClassification"),kNr.forEach(t),cTo=r(_9e," (Transformer-XL model)"),_9e.forEach(t),fTo=i(L),O1=n(L,"LI",{});var u9e=s(O1);noe=n(u9e,"STRONG",{});var xNr=s(noe);mTo=r(xNr,"xlm"),xNr.forEach(t),gTo=r(u9e," \u2014 "),OP=n(u9e,"A",{href:!0});var RNr=s(OP);hTo=r(RNr,"XLMForSequenceClassification"),RNr.forEach(t),pTo=r(u9e," (XLM model)"),u9e.forEach(t),_To=i(L),G1=n(L,"LI",{});var b9e=s(G1);soe=n(b9e,"STRONG",{});var SNr=s(soe);uTo=r(SNr,"xlm-roberta"),SNr.forEach(t),bTo=r(b9e," \u2014 "),GP=n(b9e,"A",{href:!0});var PNr=s(GP);vTo=r(PNr,"XLMRobertaForSequenceClassification"),PNr.forEach(t),TTo=r(b9e," (XLM-RoBERTa model)"),b9e.forEach(t),FTo=i(L),X1=n(L,"LI",{});var v9e=s(X1);loe=n(v9e,"STRONG",{});var $Nr=s(loe);CTo=r($Nr,"xlm-roberta-xl"),$Nr.forEach(t),MTo=r(v9e," \u2014 "),ioe=n(v9e,"CODE",{});var INr=s(ioe);ETo=r(INr,"XLMRobertaXLForSequenceClassification"),INr.forEach(t),yTo=r(v9e,"(XLM-RoBERTa-XL model)"),v9e.forEach(t),wTo=i(L),z1=n(L,"LI",{});var T9e=s(z1);doe=n(T9e,"STRONG",{});var jNr=s(doe);ATo=r(jNr,"xlnet"),jNr.forEach(t),LTo=r(T9e," \u2014 "),XP=n(T9e,"A",{href:!0});var NNr=s(XP);BTo=r(NNr,"XLNetForSequenceClassification"),NNr.forEach(t),kTo=r(T9e," (XLNet model)"),T9e.forEach(t),xTo=i(L),V1=n(L,"LI",{});var F9e=s(V1);coe=n(F9e,"STRONG",{});var DNr=s(coe);RTo=r(DNr,"yoso"),DNr.forEach(t),STo=r(F9e," \u2014 "),zP=n(F9e,"A",{href:!0});var qNr=s(zP);PTo=r(qNr,"YosoForSequenceClassification"),qNr.forEach(t),$To=r(F9e," (YOSO model)"),F9e.forEach(t),L.forEach(t),ITo=i(Rt),W1=n(Rt,"P",{});var C9e=s(W1);jTo=r(C9e,"The model is set in evaluation mode by default using "),foe=n(C9e,"CODE",{});var ONr=s(foe);NTo=r(ONr,"model.eval()"),ONr.forEach(t),DTo=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),moe=n(C9e,"CODE",{});var GNr=s(moe);qTo=r(GNr,"model.train()"),GNr.forEach(t),C9e.forEach(t),OTo=i(Rt),goe=n(Rt,"P",{});var XNr=s(goe);GTo=r(XNr,"Examples:"),XNr.forEach(t),XTo=i(Rt),m(HM.$$.fragment,Rt),Rt.forEach(t),Ns.forEach(t),H0e=i(d),zi=n(d,"H2",{class:!0});var YLe=s(zi);Q1=n(YLe,"A",{id:!0,class:!0,href:!0});var zNr=s(Q1);hoe=n(zNr,"SPAN",{});var VNr=s(hoe);m(UM.$$.fragment,VNr),VNr.forEach(t),zNr.forEach(t),zTo=i(YLe),poe=n(YLe,"SPAN",{});var WNr=s(poe);VTo=r(WNr,"AutoModelForMultipleChoice"),WNr.forEach(t),YLe.forEach(t),U0e=i(d),Uo=n(d,"DIV",{class:!0});var qs=s(Uo);m(JM.$$.fragment,qs),WTo=i(qs),Vi=n(qs,"P",{});var VG=s(Vi);QTo=r(VG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_oe=n(VG,"CODE",{});var QNr=s(_oe);HTo=r(QNr,"from_pretrained()"),QNr.forEach(t),UTo=r(VG,"class method or the "),uoe=n(VG,"CODE",{});var HNr=s(uoe);JTo=r(HNr,"from_config()"),HNr.forEach(t),YTo=r(VG,`class
method.`),VG.forEach(t),KTo=i(qs),YM=n(qs,"P",{});var KLe=s(YM);ZTo=r(KLe,"This class cannot be instantiated directly using "),boe=n(KLe,"CODE",{});var UNr=s(boe);e7o=r(UNr,"__init__()"),UNr.forEach(t),o7o=r(KLe," (throws an error)."),KLe.forEach(t),r7o=i(qs),qr=n(qs,"DIV",{class:!0});var Os=s(qr);m(KM.$$.fragment,Os),t7o=i(Os),voe=n(Os,"P",{});var JNr=s(voe);a7o=r(JNr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),JNr.forEach(t),n7o=i(Os),Wi=n(Os,"P",{});var WG=s(Wi);s7o=r(WG,`Note:
Loading a model from its configuration file does `),Toe=n(WG,"STRONG",{});var YNr=s(Toe);l7o=r(YNr,"not"),YNr.forEach(t),i7o=r(WG,` load the model weights. It only affects the
model\u2019s configuration. Use `),Foe=n(WG,"CODE",{});var KNr=s(Foe);d7o=r(KNr,"from_pretrained()"),KNr.forEach(t),c7o=r(WG,"to load the model weights."),WG.forEach(t),f7o=i(Os),Coe=n(Os,"P",{});var ZNr=s(Coe);m7o=r(ZNr,"Examples:"),ZNr.forEach(t),g7o=i(Os),m(ZM.$$.fragment,Os),Os.forEach(t),h7o=i(qs),Ie=n(qs,"DIV",{class:!0});var St=s(Ie);m(eE.$$.fragment,St),p7o=i(St),Moe=n(St,"P",{});var eDr=s(Moe);_7o=r(eDr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eDr.forEach(t),u7o=i(St),ja=n(St,"P",{});var O9=s(ja);b7o=r(O9,"The model class to instantiate is selected based on the "),Eoe=n(O9,"CODE",{});var oDr=s(Eoe);v7o=r(oDr,"model_type"),oDr.forEach(t),T7o=r(O9,` property of the config object (either
passed as an argument or loaded from `),yoe=n(O9,"CODE",{});var rDr=s(yoe);F7o=r(rDr,"pretrained_model_name_or_path"),rDr.forEach(t),C7o=r(O9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=n(O9,"CODE",{});var tDr=s(woe);M7o=r(tDr,"pretrained_model_name_or_path"),tDr.forEach(t),E7o=r(O9,":"),O9.forEach(t),y7o=i(St),O=n(St,"UL",{});var G=s(O);H1=n(G,"LI",{});var M9e=s(H1);Aoe=n(M9e,"STRONG",{});var aDr=s(Aoe);w7o=r(aDr,"albert"),aDr.forEach(t),A7o=r(M9e," \u2014 "),VP=n(M9e,"A",{href:!0});var nDr=s(VP);L7o=r(nDr,"AlbertForMultipleChoice"),nDr.forEach(t),B7o=r(M9e," (ALBERT model)"),M9e.forEach(t),k7o=i(G),U1=n(G,"LI",{});var E9e=s(U1);Loe=n(E9e,"STRONG",{});var sDr=s(Loe);x7o=r(sDr,"bert"),sDr.forEach(t),R7o=r(E9e," \u2014 "),WP=n(E9e,"A",{href:!0});var lDr=s(WP);S7o=r(lDr,"BertForMultipleChoice"),lDr.forEach(t),P7o=r(E9e," (BERT model)"),E9e.forEach(t),$7o=i(G),J1=n(G,"LI",{});var y9e=s(J1);Boe=n(y9e,"STRONG",{});var iDr=s(Boe);I7o=r(iDr,"big_bird"),iDr.forEach(t),j7o=r(y9e," \u2014 "),QP=n(y9e,"A",{href:!0});var dDr=s(QP);N7o=r(dDr,"BigBirdForMultipleChoice"),dDr.forEach(t),D7o=r(y9e," (BigBird model)"),y9e.forEach(t),q7o=i(G),Y1=n(G,"LI",{});var w9e=s(Y1);koe=n(w9e,"STRONG",{});var cDr=s(koe);O7o=r(cDr,"camembert"),cDr.forEach(t),G7o=r(w9e," \u2014 "),HP=n(w9e,"A",{href:!0});var fDr=s(HP);X7o=r(fDr,"CamembertForMultipleChoice"),fDr.forEach(t),z7o=r(w9e," (CamemBERT model)"),w9e.forEach(t),V7o=i(G),K1=n(G,"LI",{});var A9e=s(K1);xoe=n(A9e,"STRONG",{});var mDr=s(xoe);W7o=r(mDr,"canine"),mDr.forEach(t),Q7o=r(A9e," \u2014 "),UP=n(A9e,"A",{href:!0});var gDr=s(UP);H7o=r(gDr,"CanineForMultipleChoice"),gDr.forEach(t),U7o=r(A9e," (Canine model)"),A9e.forEach(t),J7o=i(G),Z1=n(G,"LI",{});var L9e=s(Z1);Roe=n(L9e,"STRONG",{});var hDr=s(Roe);Y7o=r(hDr,"convbert"),hDr.forEach(t),K7o=r(L9e," \u2014 "),JP=n(L9e,"A",{href:!0});var pDr=s(JP);Z7o=r(pDr,"ConvBertForMultipleChoice"),pDr.forEach(t),eFo=r(L9e," (ConvBERT model)"),L9e.forEach(t),oFo=i(G),e4=n(G,"LI",{});var B9e=s(e4);Soe=n(B9e,"STRONG",{});var _Dr=s(Soe);rFo=r(_Dr,"distilbert"),_Dr.forEach(t),tFo=r(B9e," \u2014 "),YP=n(B9e,"A",{href:!0});var uDr=s(YP);aFo=r(uDr,"DistilBertForMultipleChoice"),uDr.forEach(t),nFo=r(B9e," (DistilBERT model)"),B9e.forEach(t),sFo=i(G),o4=n(G,"LI",{});var k9e=s(o4);Poe=n(k9e,"STRONG",{});var bDr=s(Poe);lFo=r(bDr,"electra"),bDr.forEach(t),iFo=r(k9e," \u2014 "),KP=n(k9e,"A",{href:!0});var vDr=s(KP);dFo=r(vDr,"ElectraForMultipleChoice"),vDr.forEach(t),cFo=r(k9e," (ELECTRA model)"),k9e.forEach(t),fFo=i(G),r4=n(G,"LI",{});var x9e=s(r4);$oe=n(x9e,"STRONG",{});var TDr=s($oe);mFo=r(TDr,"flaubert"),TDr.forEach(t),gFo=r(x9e," \u2014 "),ZP=n(x9e,"A",{href:!0});var FDr=s(ZP);hFo=r(FDr,"FlaubertForMultipleChoice"),FDr.forEach(t),pFo=r(x9e," (FlauBERT model)"),x9e.forEach(t),_Fo=i(G),t4=n(G,"LI",{});var R9e=s(t4);Ioe=n(R9e,"STRONG",{});var CDr=s(Ioe);uFo=r(CDr,"fnet"),CDr.forEach(t),bFo=r(R9e," \u2014 "),e$=n(R9e,"A",{href:!0});var MDr=s(e$);vFo=r(MDr,"FNetForMultipleChoice"),MDr.forEach(t),TFo=r(R9e," (FNet model)"),R9e.forEach(t),FFo=i(G),a4=n(G,"LI",{});var S9e=s(a4);joe=n(S9e,"STRONG",{});var EDr=s(joe);CFo=r(EDr,"funnel"),EDr.forEach(t),MFo=r(S9e," \u2014 "),o$=n(S9e,"A",{href:!0});var yDr=s(o$);EFo=r(yDr,"FunnelForMultipleChoice"),yDr.forEach(t),yFo=r(S9e," (Funnel Transformer model)"),S9e.forEach(t),wFo=i(G),n4=n(G,"LI",{});var P9e=s(n4);Noe=n(P9e,"STRONG",{});var wDr=s(Noe);AFo=r(wDr,"ibert"),wDr.forEach(t),LFo=r(P9e," \u2014 "),r$=n(P9e,"A",{href:!0});var ADr=s(r$);BFo=r(ADr,"IBertForMultipleChoice"),ADr.forEach(t),kFo=r(P9e," (I-BERT model)"),P9e.forEach(t),xFo=i(G),s4=n(G,"LI",{});var $9e=s(s4);Doe=n($9e,"STRONG",{});var LDr=s(Doe);RFo=r(LDr,"longformer"),LDr.forEach(t),SFo=r($9e," \u2014 "),t$=n($9e,"A",{href:!0});var BDr=s(t$);PFo=r(BDr,"LongformerForMultipleChoice"),BDr.forEach(t),$Fo=r($9e," (Longformer model)"),$9e.forEach(t),IFo=i(G),l4=n(G,"LI",{});var I9e=s(l4);qoe=n(I9e,"STRONG",{});var kDr=s(qoe);jFo=r(kDr,"megatron-bert"),kDr.forEach(t),NFo=r(I9e," \u2014 "),a$=n(I9e,"A",{href:!0});var xDr=s(a$);DFo=r(xDr,"MegatronBertForMultipleChoice"),xDr.forEach(t),qFo=r(I9e," (MegatronBert model)"),I9e.forEach(t),OFo=i(G),i4=n(G,"LI",{});var j9e=s(i4);Ooe=n(j9e,"STRONG",{});var RDr=s(Ooe);GFo=r(RDr,"mobilebert"),RDr.forEach(t),XFo=r(j9e," \u2014 "),n$=n(j9e,"A",{href:!0});var SDr=s(n$);zFo=r(SDr,"MobileBertForMultipleChoice"),SDr.forEach(t),VFo=r(j9e," (MobileBERT model)"),j9e.forEach(t),WFo=i(G),d4=n(G,"LI",{});var N9e=s(d4);Goe=n(N9e,"STRONG",{});var PDr=s(Goe);QFo=r(PDr,"mpnet"),PDr.forEach(t),HFo=r(N9e," \u2014 "),s$=n(N9e,"A",{href:!0});var $Dr=s(s$);UFo=r($Dr,"MPNetForMultipleChoice"),$Dr.forEach(t),JFo=r(N9e," (MPNet model)"),N9e.forEach(t),YFo=i(G),c4=n(G,"LI",{});var D9e=s(c4);Xoe=n(D9e,"STRONG",{});var IDr=s(Xoe);KFo=r(IDr,"nystromformer"),IDr.forEach(t),ZFo=r(D9e," \u2014 "),l$=n(D9e,"A",{href:!0});var jDr=s(l$);e9o=r(jDr,"NystromformerForMultipleChoice"),jDr.forEach(t),o9o=r(D9e," (Nystromformer model)"),D9e.forEach(t),r9o=i(G),f4=n(G,"LI",{});var q9e=s(f4);zoe=n(q9e,"STRONG",{});var NDr=s(zoe);t9o=r(NDr,"qdqbert"),NDr.forEach(t),a9o=r(q9e," \u2014 "),i$=n(q9e,"A",{href:!0});var DDr=s(i$);n9o=r(DDr,"QDQBertForMultipleChoice"),DDr.forEach(t),s9o=r(q9e," (QDQBert model)"),q9e.forEach(t),l9o=i(G),m4=n(G,"LI",{});var O9e=s(m4);Voe=n(O9e,"STRONG",{});var qDr=s(Voe);i9o=r(qDr,"rembert"),qDr.forEach(t),d9o=r(O9e," \u2014 "),d$=n(O9e,"A",{href:!0});var ODr=s(d$);c9o=r(ODr,"RemBertForMultipleChoice"),ODr.forEach(t),f9o=r(O9e," (RemBERT model)"),O9e.forEach(t),m9o=i(G),g4=n(G,"LI",{});var G9e=s(g4);Woe=n(G9e,"STRONG",{});var GDr=s(Woe);g9o=r(GDr,"roberta"),GDr.forEach(t),h9o=r(G9e," \u2014 "),c$=n(G9e,"A",{href:!0});var XDr=s(c$);p9o=r(XDr,"RobertaForMultipleChoice"),XDr.forEach(t),_9o=r(G9e," (RoBERTa model)"),G9e.forEach(t),u9o=i(G),h4=n(G,"LI",{});var X9e=s(h4);Qoe=n(X9e,"STRONG",{});var zDr=s(Qoe);b9o=r(zDr,"roformer"),zDr.forEach(t),v9o=r(X9e," \u2014 "),f$=n(X9e,"A",{href:!0});var VDr=s(f$);T9o=r(VDr,"RoFormerForMultipleChoice"),VDr.forEach(t),F9o=r(X9e," (RoFormer model)"),X9e.forEach(t),C9o=i(G),p4=n(G,"LI",{});var z9e=s(p4);Hoe=n(z9e,"STRONG",{});var WDr=s(Hoe);M9o=r(WDr,"squeezebert"),WDr.forEach(t),E9o=r(z9e," \u2014 "),m$=n(z9e,"A",{href:!0});var QDr=s(m$);y9o=r(QDr,"SqueezeBertForMultipleChoice"),QDr.forEach(t),w9o=r(z9e," (SqueezeBERT model)"),z9e.forEach(t),A9o=i(G),_4=n(G,"LI",{});var V9e=s(_4);Uoe=n(V9e,"STRONG",{});var HDr=s(Uoe);L9o=r(HDr,"xlm"),HDr.forEach(t),B9o=r(V9e," \u2014 "),g$=n(V9e,"A",{href:!0});var UDr=s(g$);k9o=r(UDr,"XLMForMultipleChoice"),UDr.forEach(t),x9o=r(V9e," (XLM model)"),V9e.forEach(t),R9o=i(G),u4=n(G,"LI",{});var W9e=s(u4);Joe=n(W9e,"STRONG",{});var JDr=s(Joe);S9o=r(JDr,"xlm-roberta"),JDr.forEach(t),P9o=r(W9e," \u2014 "),h$=n(W9e,"A",{href:!0});var YDr=s(h$);$9o=r(YDr,"XLMRobertaForMultipleChoice"),YDr.forEach(t),I9o=r(W9e," (XLM-RoBERTa model)"),W9e.forEach(t),j9o=i(G),b4=n(G,"LI",{});var Q9e=s(b4);Yoe=n(Q9e,"STRONG",{});var KDr=s(Yoe);N9o=r(KDr,"xlm-roberta-xl"),KDr.forEach(t),D9o=r(Q9e," \u2014 "),Koe=n(Q9e,"CODE",{});var ZDr=s(Koe);q9o=r(ZDr,"XLMRobertaXLForMultipleChoice"),ZDr.forEach(t),O9o=r(Q9e,"(XLM-RoBERTa-XL model)"),Q9e.forEach(t),G9o=i(G),v4=n(G,"LI",{});var H9e=s(v4);Zoe=n(H9e,"STRONG",{});var eqr=s(Zoe);X9o=r(eqr,"xlnet"),eqr.forEach(t),z9o=r(H9e," \u2014 "),p$=n(H9e,"A",{href:!0});var oqr=s(p$);V9o=r(oqr,"XLNetForMultipleChoice"),oqr.forEach(t),W9o=r(H9e," (XLNet model)"),H9e.forEach(t),Q9o=i(G),T4=n(G,"LI",{});var U9e=s(T4);ere=n(U9e,"STRONG",{});var rqr=s(ere);H9o=r(rqr,"yoso"),rqr.forEach(t),U9o=r(U9e," \u2014 "),_$=n(U9e,"A",{href:!0});var tqr=s(_$);J9o=r(tqr,"YosoForMultipleChoice"),tqr.forEach(t),Y9o=r(U9e," (YOSO model)"),U9e.forEach(t),G.forEach(t),K9o=i(St),F4=n(St,"P",{});var J9e=s(F4);Z9o=r(J9e,"The model is set in evaluation mode by default using "),ore=n(J9e,"CODE",{});var aqr=s(ore);eCo=r(aqr,"model.eval()"),aqr.forEach(t),oCo=r(J9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rre=n(J9e,"CODE",{});var nqr=s(rre);rCo=r(nqr,"model.train()"),nqr.forEach(t),J9e.forEach(t),tCo=i(St),tre=n(St,"P",{});var sqr=s(tre);aCo=r(sqr,"Examples:"),sqr.forEach(t),nCo=i(St),m(oE.$$.fragment,St),St.forEach(t),qs.forEach(t),J0e=i(d),Qi=n(d,"H2",{class:!0});var ZLe=s(Qi);C4=n(ZLe,"A",{id:!0,class:!0,href:!0});var lqr=s(C4);are=n(lqr,"SPAN",{});var iqr=s(are);m(rE.$$.fragment,iqr),iqr.forEach(t),lqr.forEach(t),sCo=i(ZLe),nre=n(ZLe,"SPAN",{});var dqr=s(nre);lCo=r(dqr,"AutoModelForNextSentencePrediction"),dqr.forEach(t),ZLe.forEach(t),Y0e=i(d),Jo=n(d,"DIV",{class:!0});var Gs=s(Jo);m(tE.$$.fragment,Gs),iCo=i(Gs),Hi=n(Gs,"P",{});var QG=s(Hi);dCo=r(QG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sre=n(QG,"CODE",{});var cqr=s(sre);cCo=r(cqr,"from_pretrained()"),cqr.forEach(t),fCo=r(QG,"class method or the "),lre=n(QG,"CODE",{});var fqr=s(lre);mCo=r(fqr,"from_config()"),fqr.forEach(t),gCo=r(QG,`class
method.`),QG.forEach(t),hCo=i(Gs),aE=n(Gs,"P",{});var e8e=s(aE);pCo=r(e8e,"This class cannot be instantiated directly using "),ire=n(e8e,"CODE",{});var mqr=s(ire);_Co=r(mqr,"__init__()"),mqr.forEach(t),uCo=r(e8e," (throws an error)."),e8e.forEach(t),bCo=i(Gs),Or=n(Gs,"DIV",{class:!0});var Xs=s(Or);m(nE.$$.fragment,Xs),vCo=i(Xs),dre=n(Xs,"P",{});var gqr=s(dre);TCo=r(gqr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gqr.forEach(t),FCo=i(Xs),Ui=n(Xs,"P",{});var HG=s(Ui);CCo=r(HG,`Note:
Loading a model from its configuration file does `),cre=n(HG,"STRONG",{});var hqr=s(cre);MCo=r(hqr,"not"),hqr.forEach(t),ECo=r(HG,` load the model weights. It only affects the
model\u2019s configuration. Use `),fre=n(HG,"CODE",{});var pqr=s(fre);yCo=r(pqr,"from_pretrained()"),pqr.forEach(t),wCo=r(HG,"to load the model weights."),HG.forEach(t),ACo=i(Xs),mre=n(Xs,"P",{});var _qr=s(mre);LCo=r(_qr,"Examples:"),_qr.forEach(t),BCo=i(Xs),m(sE.$$.fragment,Xs),Xs.forEach(t),kCo=i(Gs),je=n(Gs,"DIV",{class:!0});var Pt=s(je);m(lE.$$.fragment,Pt),xCo=i(Pt),gre=n(Pt,"P",{});var uqr=s(gre);RCo=r(uqr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uqr.forEach(t),SCo=i(Pt),Na=n(Pt,"P",{});var G9=s(Na);PCo=r(G9,"The model class to instantiate is selected based on the "),hre=n(G9,"CODE",{});var bqr=s(hre);$Co=r(bqr,"model_type"),bqr.forEach(t),ICo=r(G9,` property of the config object (either
passed as an argument or loaded from `),pre=n(G9,"CODE",{});var vqr=s(pre);jCo=r(vqr,"pretrained_model_name_or_path"),vqr.forEach(t),NCo=r(G9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_re=n(G9,"CODE",{});var Tqr=s(_re);DCo=r(Tqr,"pretrained_model_name_or_path"),Tqr.forEach(t),qCo=r(G9,":"),G9.forEach(t),OCo=i(Pt),Kt=n(Pt,"UL",{});var zs=s(Kt);M4=n(zs,"LI",{});var Y9e=s(M4);ure=n(Y9e,"STRONG",{});var Fqr=s(ure);GCo=r(Fqr,"bert"),Fqr.forEach(t),XCo=r(Y9e," \u2014 "),u$=n(Y9e,"A",{href:!0});var Cqr=s(u$);zCo=r(Cqr,"BertForNextSentencePrediction"),Cqr.forEach(t),VCo=r(Y9e," (BERT model)"),Y9e.forEach(t),WCo=i(zs),E4=n(zs,"LI",{});var K9e=s(E4);bre=n(K9e,"STRONG",{});var Mqr=s(bre);QCo=r(Mqr,"fnet"),Mqr.forEach(t),HCo=r(K9e," \u2014 "),b$=n(K9e,"A",{href:!0});var Eqr=s(b$);UCo=r(Eqr,"FNetForNextSentencePrediction"),Eqr.forEach(t),JCo=r(K9e," (FNet model)"),K9e.forEach(t),YCo=i(zs),y4=n(zs,"LI",{});var Z9e=s(y4);vre=n(Z9e,"STRONG",{});var yqr=s(vre);KCo=r(yqr,"megatron-bert"),yqr.forEach(t),ZCo=r(Z9e," \u2014 "),v$=n(Z9e,"A",{href:!0});var wqr=s(v$);eMo=r(wqr,"MegatronBertForNextSentencePrediction"),wqr.forEach(t),oMo=r(Z9e," (MegatronBert model)"),Z9e.forEach(t),rMo=i(zs),w4=n(zs,"LI",{});var eCe=s(w4);Tre=n(eCe,"STRONG",{});var Aqr=s(Tre);tMo=r(Aqr,"mobilebert"),Aqr.forEach(t),aMo=r(eCe," \u2014 "),T$=n(eCe,"A",{href:!0});var Lqr=s(T$);nMo=r(Lqr,"MobileBertForNextSentencePrediction"),Lqr.forEach(t),sMo=r(eCe," (MobileBERT model)"),eCe.forEach(t),lMo=i(zs),A4=n(zs,"LI",{});var oCe=s(A4);Fre=n(oCe,"STRONG",{});var Bqr=s(Fre);iMo=r(Bqr,"qdqbert"),Bqr.forEach(t),dMo=r(oCe," \u2014 "),F$=n(oCe,"A",{href:!0});var kqr=s(F$);cMo=r(kqr,"QDQBertForNextSentencePrediction"),kqr.forEach(t),fMo=r(oCe," (QDQBert model)"),oCe.forEach(t),zs.forEach(t),mMo=i(Pt),L4=n(Pt,"P",{});var rCe=s(L4);gMo=r(rCe,"The model is set in evaluation mode by default using "),Cre=n(rCe,"CODE",{});var xqr=s(Cre);hMo=r(xqr,"model.eval()"),xqr.forEach(t),pMo=r(rCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mre=n(rCe,"CODE",{});var Rqr=s(Mre);_Mo=r(Rqr,"model.train()"),Rqr.forEach(t),rCe.forEach(t),uMo=i(Pt),Ere=n(Pt,"P",{});var Sqr=s(Ere);bMo=r(Sqr,"Examples:"),Sqr.forEach(t),vMo=i(Pt),m(iE.$$.fragment,Pt),Pt.forEach(t),Gs.forEach(t),K0e=i(d),Ji=n(d,"H2",{class:!0});var o8e=s(Ji);B4=n(o8e,"A",{id:!0,class:!0,href:!0});var Pqr=s(B4);yre=n(Pqr,"SPAN",{});var $qr=s(yre);m(dE.$$.fragment,$qr),$qr.forEach(t),Pqr.forEach(t),TMo=i(o8e),wre=n(o8e,"SPAN",{});var Iqr=s(wre);FMo=r(Iqr,"AutoModelForTokenClassification"),Iqr.forEach(t),o8e.forEach(t),Z0e=i(d),Yo=n(d,"DIV",{class:!0});var Vs=s(Yo);m(cE.$$.fragment,Vs),CMo=i(Vs),Yi=n(Vs,"P",{});var UG=s(Yi);MMo=r(UG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Are=n(UG,"CODE",{});var jqr=s(Are);EMo=r(jqr,"from_pretrained()"),jqr.forEach(t),yMo=r(UG,"class method or the "),Lre=n(UG,"CODE",{});var Nqr=s(Lre);wMo=r(Nqr,"from_config()"),Nqr.forEach(t),AMo=r(UG,`class
method.`),UG.forEach(t),LMo=i(Vs),fE=n(Vs,"P",{});var r8e=s(fE);BMo=r(r8e,"This class cannot be instantiated directly using "),Bre=n(r8e,"CODE",{});var Dqr=s(Bre);kMo=r(Dqr,"__init__()"),Dqr.forEach(t),xMo=r(r8e," (throws an error)."),r8e.forEach(t),RMo=i(Vs),Gr=n(Vs,"DIV",{class:!0});var Ws=s(Gr);m(mE.$$.fragment,Ws),SMo=i(Ws),kre=n(Ws,"P",{});var qqr=s(kre);PMo=r(qqr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qqr.forEach(t),$Mo=i(Ws),Ki=n(Ws,"P",{});var JG=s(Ki);IMo=r(JG,`Note:
Loading a model from its configuration file does `),xre=n(JG,"STRONG",{});var Oqr=s(xre);jMo=r(Oqr,"not"),Oqr.forEach(t),NMo=r(JG,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rre=n(JG,"CODE",{});var Gqr=s(Rre);DMo=r(Gqr,"from_pretrained()"),Gqr.forEach(t),qMo=r(JG,"to load the model weights."),JG.forEach(t),OMo=i(Ws),Sre=n(Ws,"P",{});var Xqr=s(Sre);GMo=r(Xqr,"Examples:"),Xqr.forEach(t),XMo=i(Ws),m(gE.$$.fragment,Ws),Ws.forEach(t),zMo=i(Vs),Ne=n(Vs,"DIV",{class:!0});var $t=s(Ne);m(hE.$$.fragment,$t),VMo=i($t),Pre=n($t,"P",{});var zqr=s(Pre);WMo=r(zqr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zqr.forEach(t),QMo=i($t),Da=n($t,"P",{});var X9=s(Da);HMo=r(X9,"The model class to instantiate is selected based on the "),$re=n(X9,"CODE",{});var Vqr=s($re);UMo=r(Vqr,"model_type"),Vqr.forEach(t),JMo=r(X9,` property of the config object (either
passed as an argument or loaded from `),Ire=n(X9,"CODE",{});var Wqr=s(Ire);YMo=r(Wqr,"pretrained_model_name_or_path"),Wqr.forEach(t),KMo=r(X9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jre=n(X9,"CODE",{});var Qqr=s(jre);ZMo=r(Qqr,"pretrained_model_name_or_path"),Qqr.forEach(t),eEo=r(X9,":"),X9.forEach(t),oEo=i($t),D=n($t,"UL",{});var q=s(D);k4=n(q,"LI",{});var tCe=s(k4);Nre=n(tCe,"STRONG",{});var Hqr=s(Nre);rEo=r(Hqr,"albert"),Hqr.forEach(t),tEo=r(tCe," \u2014 "),C$=n(tCe,"A",{href:!0});var Uqr=s(C$);aEo=r(Uqr,"AlbertForTokenClassification"),Uqr.forEach(t),nEo=r(tCe," (ALBERT model)"),tCe.forEach(t),sEo=i(q),x4=n(q,"LI",{});var aCe=s(x4);Dre=n(aCe,"STRONG",{});var Jqr=s(Dre);lEo=r(Jqr,"bert"),Jqr.forEach(t),iEo=r(aCe," \u2014 "),M$=n(aCe,"A",{href:!0});var Yqr=s(M$);dEo=r(Yqr,"BertForTokenClassification"),Yqr.forEach(t),cEo=r(aCe," (BERT model)"),aCe.forEach(t),fEo=i(q),R4=n(q,"LI",{});var nCe=s(R4);qre=n(nCe,"STRONG",{});var Kqr=s(qre);mEo=r(Kqr,"big_bird"),Kqr.forEach(t),gEo=r(nCe," \u2014 "),E$=n(nCe,"A",{href:!0});var Zqr=s(E$);hEo=r(Zqr,"BigBirdForTokenClassification"),Zqr.forEach(t),pEo=r(nCe," (BigBird model)"),nCe.forEach(t),_Eo=i(q),S4=n(q,"LI",{});var sCe=s(S4);Ore=n(sCe,"STRONG",{});var eOr=s(Ore);uEo=r(eOr,"camembert"),eOr.forEach(t),bEo=r(sCe," \u2014 "),y$=n(sCe,"A",{href:!0});var oOr=s(y$);vEo=r(oOr,"CamembertForTokenClassification"),oOr.forEach(t),TEo=r(sCe," (CamemBERT model)"),sCe.forEach(t),FEo=i(q),P4=n(q,"LI",{});var lCe=s(P4);Gre=n(lCe,"STRONG",{});var rOr=s(Gre);CEo=r(rOr,"canine"),rOr.forEach(t),MEo=r(lCe," \u2014 "),w$=n(lCe,"A",{href:!0});var tOr=s(w$);EEo=r(tOr,"CanineForTokenClassification"),tOr.forEach(t),yEo=r(lCe," (Canine model)"),lCe.forEach(t),wEo=i(q),$4=n(q,"LI",{});var iCe=s($4);Xre=n(iCe,"STRONG",{});var aOr=s(Xre);AEo=r(aOr,"convbert"),aOr.forEach(t),LEo=r(iCe," \u2014 "),A$=n(iCe,"A",{href:!0});var nOr=s(A$);BEo=r(nOr,"ConvBertForTokenClassification"),nOr.forEach(t),kEo=r(iCe," (ConvBERT model)"),iCe.forEach(t),xEo=i(q),I4=n(q,"LI",{});var dCe=s(I4);zre=n(dCe,"STRONG",{});var sOr=s(zre);REo=r(sOr,"deberta"),sOr.forEach(t),SEo=r(dCe," \u2014 "),L$=n(dCe,"A",{href:!0});var lOr=s(L$);PEo=r(lOr,"DebertaForTokenClassification"),lOr.forEach(t),$Eo=r(dCe," (DeBERTa model)"),dCe.forEach(t),IEo=i(q),j4=n(q,"LI",{});var cCe=s(j4);Vre=n(cCe,"STRONG",{});var iOr=s(Vre);jEo=r(iOr,"deberta-v2"),iOr.forEach(t),NEo=r(cCe," \u2014 "),B$=n(cCe,"A",{href:!0});var dOr=s(B$);DEo=r(dOr,"DebertaV2ForTokenClassification"),dOr.forEach(t),qEo=r(cCe," (DeBERTa-v2 model)"),cCe.forEach(t),OEo=i(q),N4=n(q,"LI",{});var fCe=s(N4);Wre=n(fCe,"STRONG",{});var cOr=s(Wre);GEo=r(cOr,"distilbert"),cOr.forEach(t),XEo=r(fCe," \u2014 "),k$=n(fCe,"A",{href:!0});var fOr=s(k$);zEo=r(fOr,"DistilBertForTokenClassification"),fOr.forEach(t),VEo=r(fCe," (DistilBERT model)"),fCe.forEach(t),WEo=i(q),D4=n(q,"LI",{});var mCe=s(D4);Qre=n(mCe,"STRONG",{});var mOr=s(Qre);QEo=r(mOr,"electra"),mOr.forEach(t),HEo=r(mCe," \u2014 "),x$=n(mCe,"A",{href:!0});var gOr=s(x$);UEo=r(gOr,"ElectraForTokenClassification"),gOr.forEach(t),JEo=r(mCe," (ELECTRA model)"),mCe.forEach(t),YEo=i(q),q4=n(q,"LI",{});var gCe=s(q4);Hre=n(gCe,"STRONG",{});var hOr=s(Hre);KEo=r(hOr,"flaubert"),hOr.forEach(t),ZEo=r(gCe," \u2014 "),R$=n(gCe,"A",{href:!0});var pOr=s(R$);e3o=r(pOr,"FlaubertForTokenClassification"),pOr.forEach(t),o3o=r(gCe," (FlauBERT model)"),gCe.forEach(t),r3o=i(q),O4=n(q,"LI",{});var hCe=s(O4);Ure=n(hCe,"STRONG",{});var _Or=s(Ure);t3o=r(_Or,"fnet"),_Or.forEach(t),a3o=r(hCe," \u2014 "),S$=n(hCe,"A",{href:!0});var uOr=s(S$);n3o=r(uOr,"FNetForTokenClassification"),uOr.forEach(t),s3o=r(hCe," (FNet model)"),hCe.forEach(t),l3o=i(q),G4=n(q,"LI",{});var pCe=s(G4);Jre=n(pCe,"STRONG",{});var bOr=s(Jre);i3o=r(bOr,"funnel"),bOr.forEach(t),d3o=r(pCe," \u2014 "),P$=n(pCe,"A",{href:!0});var vOr=s(P$);c3o=r(vOr,"FunnelForTokenClassification"),vOr.forEach(t),f3o=r(pCe," (Funnel Transformer model)"),pCe.forEach(t),m3o=i(q),X4=n(q,"LI",{});var _Ce=s(X4);Yre=n(_Ce,"STRONG",{});var TOr=s(Yre);g3o=r(TOr,"gpt2"),TOr.forEach(t),h3o=r(_Ce," \u2014 "),$$=n(_Ce,"A",{href:!0});var FOr=s($$);p3o=r(FOr,"GPT2ForTokenClassification"),FOr.forEach(t),_3o=r(_Ce," (OpenAI GPT-2 model)"),_Ce.forEach(t),u3o=i(q),z4=n(q,"LI",{});var uCe=s(z4);Kre=n(uCe,"STRONG",{});var COr=s(Kre);b3o=r(COr,"ibert"),COr.forEach(t),v3o=r(uCe," \u2014 "),I$=n(uCe,"A",{href:!0});var MOr=s(I$);T3o=r(MOr,"IBertForTokenClassification"),MOr.forEach(t),F3o=r(uCe," (I-BERT model)"),uCe.forEach(t),C3o=i(q),V4=n(q,"LI",{});var bCe=s(V4);Zre=n(bCe,"STRONG",{});var EOr=s(Zre);M3o=r(EOr,"layoutlm"),EOr.forEach(t),E3o=r(bCe," \u2014 "),j$=n(bCe,"A",{href:!0});var yOr=s(j$);y3o=r(yOr,"LayoutLMForTokenClassification"),yOr.forEach(t),w3o=r(bCe," (LayoutLM model)"),bCe.forEach(t),A3o=i(q),W4=n(q,"LI",{});var vCe=s(W4);ete=n(vCe,"STRONG",{});var wOr=s(ete);L3o=r(wOr,"layoutlmv2"),wOr.forEach(t),B3o=r(vCe," \u2014 "),N$=n(vCe,"A",{href:!0});var AOr=s(N$);k3o=r(AOr,"LayoutLMv2ForTokenClassification"),AOr.forEach(t),x3o=r(vCe," (LayoutLMv2 model)"),vCe.forEach(t),R3o=i(q),Q4=n(q,"LI",{});var TCe=s(Q4);ote=n(TCe,"STRONG",{});var LOr=s(ote);S3o=r(LOr,"longformer"),LOr.forEach(t),P3o=r(TCe," \u2014 "),D$=n(TCe,"A",{href:!0});var BOr=s(D$);$3o=r(BOr,"LongformerForTokenClassification"),BOr.forEach(t),I3o=r(TCe," (Longformer model)"),TCe.forEach(t),j3o=i(q),H4=n(q,"LI",{});var FCe=s(H4);rte=n(FCe,"STRONG",{});var kOr=s(rte);N3o=r(kOr,"megatron-bert"),kOr.forEach(t),D3o=r(FCe," \u2014 "),q$=n(FCe,"A",{href:!0});var xOr=s(q$);q3o=r(xOr,"MegatronBertForTokenClassification"),xOr.forEach(t),O3o=r(FCe," (MegatronBert model)"),FCe.forEach(t),G3o=i(q),U4=n(q,"LI",{});var CCe=s(U4);tte=n(CCe,"STRONG",{});var ROr=s(tte);X3o=r(ROr,"mobilebert"),ROr.forEach(t),z3o=r(CCe," \u2014 "),O$=n(CCe,"A",{href:!0});var SOr=s(O$);V3o=r(SOr,"MobileBertForTokenClassification"),SOr.forEach(t),W3o=r(CCe," (MobileBERT model)"),CCe.forEach(t),Q3o=i(q),J4=n(q,"LI",{});var MCe=s(J4);ate=n(MCe,"STRONG",{});var POr=s(ate);H3o=r(POr,"mpnet"),POr.forEach(t),U3o=r(MCe," \u2014 "),G$=n(MCe,"A",{href:!0});var $Or=s(G$);J3o=r($Or,"MPNetForTokenClassification"),$Or.forEach(t),Y3o=r(MCe," (MPNet model)"),MCe.forEach(t),K3o=i(q),Y4=n(q,"LI",{});var ECe=s(Y4);nte=n(ECe,"STRONG",{});var IOr=s(nte);Z3o=r(IOr,"nystromformer"),IOr.forEach(t),eyo=r(ECe," \u2014 "),X$=n(ECe,"A",{href:!0});var jOr=s(X$);oyo=r(jOr,"NystromformerForTokenClassification"),jOr.forEach(t),ryo=r(ECe," (Nystromformer model)"),ECe.forEach(t),tyo=i(q),K4=n(q,"LI",{});var yCe=s(K4);ste=n(yCe,"STRONG",{});var NOr=s(ste);ayo=r(NOr,"qdqbert"),NOr.forEach(t),nyo=r(yCe," \u2014 "),z$=n(yCe,"A",{href:!0});var DOr=s(z$);syo=r(DOr,"QDQBertForTokenClassification"),DOr.forEach(t),lyo=r(yCe," (QDQBert model)"),yCe.forEach(t),iyo=i(q),Z4=n(q,"LI",{});var wCe=s(Z4);lte=n(wCe,"STRONG",{});var qOr=s(lte);dyo=r(qOr,"rembert"),qOr.forEach(t),cyo=r(wCe," \u2014 "),V$=n(wCe,"A",{href:!0});var OOr=s(V$);fyo=r(OOr,"RemBertForTokenClassification"),OOr.forEach(t),myo=r(wCe," (RemBERT model)"),wCe.forEach(t),gyo=i(q),eb=n(q,"LI",{});var ACe=s(eb);ite=n(ACe,"STRONG",{});var GOr=s(ite);hyo=r(GOr,"roberta"),GOr.forEach(t),pyo=r(ACe," \u2014 "),W$=n(ACe,"A",{href:!0});var XOr=s(W$);_yo=r(XOr,"RobertaForTokenClassification"),XOr.forEach(t),uyo=r(ACe," (RoBERTa model)"),ACe.forEach(t),byo=i(q),ob=n(q,"LI",{});var LCe=s(ob);dte=n(LCe,"STRONG",{});var zOr=s(dte);vyo=r(zOr,"roformer"),zOr.forEach(t),Tyo=r(LCe," \u2014 "),Q$=n(LCe,"A",{href:!0});var VOr=s(Q$);Fyo=r(VOr,"RoFormerForTokenClassification"),VOr.forEach(t),Cyo=r(LCe," (RoFormer model)"),LCe.forEach(t),Myo=i(q),rb=n(q,"LI",{});var BCe=s(rb);cte=n(BCe,"STRONG",{});var WOr=s(cte);Eyo=r(WOr,"squeezebert"),WOr.forEach(t),yyo=r(BCe," \u2014 "),H$=n(BCe,"A",{href:!0});var QOr=s(H$);wyo=r(QOr,"SqueezeBertForTokenClassification"),QOr.forEach(t),Ayo=r(BCe," (SqueezeBERT model)"),BCe.forEach(t),Lyo=i(q),tb=n(q,"LI",{});var kCe=s(tb);fte=n(kCe,"STRONG",{});var HOr=s(fte);Byo=r(HOr,"xlm"),HOr.forEach(t),kyo=r(kCe," \u2014 "),U$=n(kCe,"A",{href:!0});var UOr=s(U$);xyo=r(UOr,"XLMForTokenClassification"),UOr.forEach(t),Ryo=r(kCe," (XLM model)"),kCe.forEach(t),Syo=i(q),ab=n(q,"LI",{});var xCe=s(ab);mte=n(xCe,"STRONG",{});var JOr=s(mte);Pyo=r(JOr,"xlm-roberta"),JOr.forEach(t),$yo=r(xCe," \u2014 "),J$=n(xCe,"A",{href:!0});var YOr=s(J$);Iyo=r(YOr,"XLMRobertaForTokenClassification"),YOr.forEach(t),jyo=r(xCe," (XLM-RoBERTa model)"),xCe.forEach(t),Nyo=i(q),nb=n(q,"LI",{});var RCe=s(nb);gte=n(RCe,"STRONG",{});var KOr=s(gte);Dyo=r(KOr,"xlm-roberta-xl"),KOr.forEach(t),qyo=r(RCe," \u2014 "),hte=n(RCe,"CODE",{});var ZOr=s(hte);Oyo=r(ZOr,"XLMRobertaXLForTokenClassification"),ZOr.forEach(t),Gyo=r(RCe,"(XLM-RoBERTa-XL model)"),RCe.forEach(t),Xyo=i(q),sb=n(q,"LI",{});var SCe=s(sb);pte=n(SCe,"STRONG",{});var eGr=s(pte);zyo=r(eGr,"xlnet"),eGr.forEach(t),Vyo=r(SCe," \u2014 "),Y$=n(SCe,"A",{href:!0});var oGr=s(Y$);Wyo=r(oGr,"XLNetForTokenClassification"),oGr.forEach(t),Qyo=r(SCe," (XLNet model)"),SCe.forEach(t),Hyo=i(q),lb=n(q,"LI",{});var PCe=s(lb);_te=n(PCe,"STRONG",{});var rGr=s(_te);Uyo=r(rGr,"yoso"),rGr.forEach(t),Jyo=r(PCe," \u2014 "),K$=n(PCe,"A",{href:!0});var tGr=s(K$);Yyo=r(tGr,"YosoForTokenClassification"),tGr.forEach(t),Kyo=r(PCe," (YOSO model)"),PCe.forEach(t),q.forEach(t),Zyo=i($t),ib=n($t,"P",{});var $Ce=s(ib);ewo=r($Ce,"The model is set in evaluation mode by default using "),ute=n($Ce,"CODE",{});var aGr=s(ute);owo=r(aGr,"model.eval()"),aGr.forEach(t),rwo=r($Ce,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bte=n($Ce,"CODE",{});var nGr=s(bte);two=r(nGr,"model.train()"),nGr.forEach(t),$Ce.forEach(t),awo=i($t),vte=n($t,"P",{});var sGr=s(vte);nwo=r(sGr,"Examples:"),sGr.forEach(t),swo=i($t),m(pE.$$.fragment,$t),$t.forEach(t),Vs.forEach(t),e6e=i(d),Zi=n(d,"H2",{class:!0});var t8e=s(Zi);db=n(t8e,"A",{id:!0,class:!0,href:!0});var lGr=s(db);Tte=n(lGr,"SPAN",{});var iGr=s(Tte);m(_E.$$.fragment,iGr),iGr.forEach(t),lGr.forEach(t),lwo=i(t8e),Fte=n(t8e,"SPAN",{});var dGr=s(Fte);iwo=r(dGr,"AutoModelForQuestionAnswering"),dGr.forEach(t),t8e.forEach(t),o6e=i(d),Ko=n(d,"DIV",{class:!0});var Qs=s(Ko);m(uE.$$.fragment,Qs),dwo=i(Qs),ed=n(Qs,"P",{});var YG=s(ed);cwo=r(YG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Cte=n(YG,"CODE",{});var cGr=s(Cte);fwo=r(cGr,"from_pretrained()"),cGr.forEach(t),mwo=r(YG,"class method or the "),Mte=n(YG,"CODE",{});var fGr=s(Mte);gwo=r(fGr,"from_config()"),fGr.forEach(t),hwo=r(YG,`class
method.`),YG.forEach(t),pwo=i(Qs),bE=n(Qs,"P",{});var a8e=s(bE);_wo=r(a8e,"This class cannot be instantiated directly using "),Ete=n(a8e,"CODE",{});var mGr=s(Ete);uwo=r(mGr,"__init__()"),mGr.forEach(t),bwo=r(a8e," (throws an error)."),a8e.forEach(t),vwo=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Hs=s(Xr);m(vE.$$.fragment,Hs),Two=i(Hs),yte=n(Hs,"P",{});var gGr=s(yte);Fwo=r(gGr,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gGr.forEach(t),Cwo=i(Hs),od=n(Hs,"P",{});var KG=s(od);Mwo=r(KG,`Note:
Loading a model from its configuration file does `),wte=n(KG,"STRONG",{});var hGr=s(wte);Ewo=r(hGr,"not"),hGr.forEach(t),ywo=r(KG,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ate=n(KG,"CODE",{});var pGr=s(Ate);wwo=r(pGr,"from_pretrained()"),pGr.forEach(t),Awo=r(KG,"to load the model weights."),KG.forEach(t),Lwo=i(Hs),Lte=n(Hs,"P",{});var _Gr=s(Lte);Bwo=r(_Gr,"Examples:"),_Gr.forEach(t),kwo=i(Hs),m(TE.$$.fragment,Hs),Hs.forEach(t),xwo=i(Qs),De=n(Qs,"DIV",{class:!0});var It=s(De);m(FE.$$.fragment,It),Rwo=i(It),Bte=n(It,"P",{});var uGr=s(Bte);Swo=r(uGr,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uGr.forEach(t),Pwo=i(It),qa=n(It,"P",{});var z9=s(qa);$wo=r(z9,"The model class to instantiate is selected based on the "),kte=n(z9,"CODE",{});var bGr=s(kte);Iwo=r(bGr,"model_type"),bGr.forEach(t),jwo=r(z9,` property of the config object (either
passed as an argument or loaded from `),xte=n(z9,"CODE",{});var vGr=s(xte);Nwo=r(vGr,"pretrained_model_name_or_path"),vGr.forEach(t),Dwo=r(z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rte=n(z9,"CODE",{});var TGr=s(Rte);qwo=r(TGr,"pretrained_model_name_or_path"),TGr.forEach(t),Owo=r(z9,":"),z9.forEach(t),Gwo=i(It),R=n(It,"UL",{});var P=s(R);cb=n(P,"LI",{});var ICe=s(cb);Ste=n(ICe,"STRONG",{});var FGr=s(Ste);Xwo=r(FGr,"albert"),FGr.forEach(t),zwo=r(ICe," \u2014 "),Z$=n(ICe,"A",{href:!0});var CGr=s(Z$);Vwo=r(CGr,"AlbertForQuestionAnswering"),CGr.forEach(t),Wwo=r(ICe," (ALBERT model)"),ICe.forEach(t),Qwo=i(P),fb=n(P,"LI",{});var jCe=s(fb);Pte=n(jCe,"STRONG",{});var MGr=s(Pte);Hwo=r(MGr,"bart"),MGr.forEach(t),Uwo=r(jCe," \u2014 "),eI=n(jCe,"A",{href:!0});var EGr=s(eI);Jwo=r(EGr,"BartForQuestionAnswering"),EGr.forEach(t),Ywo=r(jCe," (BART model)"),jCe.forEach(t),Kwo=i(P),mb=n(P,"LI",{});var NCe=s(mb);$te=n(NCe,"STRONG",{});var yGr=s($te);Zwo=r(yGr,"bert"),yGr.forEach(t),eAo=r(NCe," \u2014 "),oI=n(NCe,"A",{href:!0});var wGr=s(oI);oAo=r(wGr,"BertForQuestionAnswering"),wGr.forEach(t),rAo=r(NCe," (BERT model)"),NCe.forEach(t),tAo=i(P),gb=n(P,"LI",{});var DCe=s(gb);Ite=n(DCe,"STRONG",{});var AGr=s(Ite);aAo=r(AGr,"big_bird"),AGr.forEach(t),nAo=r(DCe," \u2014 "),rI=n(DCe,"A",{href:!0});var LGr=s(rI);sAo=r(LGr,"BigBirdForQuestionAnswering"),LGr.forEach(t),lAo=r(DCe," (BigBird model)"),DCe.forEach(t),iAo=i(P),hb=n(P,"LI",{});var qCe=s(hb);jte=n(qCe,"STRONG",{});var BGr=s(jte);dAo=r(BGr,"bigbird_pegasus"),BGr.forEach(t),cAo=r(qCe," \u2014 "),tI=n(qCe,"A",{href:!0});var kGr=s(tI);fAo=r(kGr,"BigBirdPegasusForQuestionAnswering"),kGr.forEach(t),mAo=r(qCe," (BigBirdPegasus model)"),qCe.forEach(t),gAo=i(P),pb=n(P,"LI",{});var OCe=s(pb);Nte=n(OCe,"STRONG",{});var xGr=s(Nte);hAo=r(xGr,"camembert"),xGr.forEach(t),pAo=r(OCe," \u2014 "),aI=n(OCe,"A",{href:!0});var RGr=s(aI);_Ao=r(RGr,"CamembertForQuestionAnswering"),RGr.forEach(t),uAo=r(OCe," (CamemBERT model)"),OCe.forEach(t),bAo=i(P),_b=n(P,"LI",{});var GCe=s(_b);Dte=n(GCe,"STRONG",{});var SGr=s(Dte);vAo=r(SGr,"canine"),SGr.forEach(t),TAo=r(GCe," \u2014 "),nI=n(GCe,"A",{href:!0});var PGr=s(nI);FAo=r(PGr,"CanineForQuestionAnswering"),PGr.forEach(t),CAo=r(GCe," (Canine model)"),GCe.forEach(t),MAo=i(P),ub=n(P,"LI",{});var XCe=s(ub);qte=n(XCe,"STRONG",{});var $Gr=s(qte);EAo=r($Gr,"convbert"),$Gr.forEach(t),yAo=r(XCe," \u2014 "),sI=n(XCe,"A",{href:!0});var IGr=s(sI);wAo=r(IGr,"ConvBertForQuestionAnswering"),IGr.forEach(t),AAo=r(XCe," (ConvBERT model)"),XCe.forEach(t),LAo=i(P),bb=n(P,"LI",{});var zCe=s(bb);Ote=n(zCe,"STRONG",{});var jGr=s(Ote);BAo=r(jGr,"deberta"),jGr.forEach(t),kAo=r(zCe," \u2014 "),lI=n(zCe,"A",{href:!0});var NGr=s(lI);xAo=r(NGr,"DebertaForQuestionAnswering"),NGr.forEach(t),RAo=r(zCe," (DeBERTa model)"),zCe.forEach(t),SAo=i(P),vb=n(P,"LI",{});var VCe=s(vb);Gte=n(VCe,"STRONG",{});var DGr=s(Gte);PAo=r(DGr,"deberta-v2"),DGr.forEach(t),$Ao=r(VCe," \u2014 "),iI=n(VCe,"A",{href:!0});var qGr=s(iI);IAo=r(qGr,"DebertaV2ForQuestionAnswering"),qGr.forEach(t),jAo=r(VCe," (DeBERTa-v2 model)"),VCe.forEach(t),NAo=i(P),Tb=n(P,"LI",{});var WCe=s(Tb);Xte=n(WCe,"STRONG",{});var OGr=s(Xte);DAo=r(OGr,"distilbert"),OGr.forEach(t),qAo=r(WCe," \u2014 "),dI=n(WCe,"A",{href:!0});var GGr=s(dI);OAo=r(GGr,"DistilBertForQuestionAnswering"),GGr.forEach(t),GAo=r(WCe," (DistilBERT model)"),WCe.forEach(t),XAo=i(P),Fb=n(P,"LI",{});var QCe=s(Fb);zte=n(QCe,"STRONG",{});var XGr=s(zte);zAo=r(XGr,"electra"),XGr.forEach(t),VAo=r(QCe," \u2014 "),cI=n(QCe,"A",{href:!0});var zGr=s(cI);WAo=r(zGr,"ElectraForQuestionAnswering"),zGr.forEach(t),QAo=r(QCe," (ELECTRA model)"),QCe.forEach(t),HAo=i(P),Cb=n(P,"LI",{});var HCe=s(Cb);Vte=n(HCe,"STRONG",{});var VGr=s(Vte);UAo=r(VGr,"flaubert"),VGr.forEach(t),JAo=r(HCe," \u2014 "),fI=n(HCe,"A",{href:!0});var WGr=s(fI);YAo=r(WGr,"FlaubertForQuestionAnsweringSimple"),WGr.forEach(t),KAo=r(HCe," (FlauBERT model)"),HCe.forEach(t),ZAo=i(P),Mb=n(P,"LI",{});var UCe=s(Mb);Wte=n(UCe,"STRONG",{});var QGr=s(Wte);e0o=r(QGr,"fnet"),QGr.forEach(t),o0o=r(UCe," \u2014 "),mI=n(UCe,"A",{href:!0});var HGr=s(mI);r0o=r(HGr,"FNetForQuestionAnswering"),HGr.forEach(t),t0o=r(UCe," (FNet model)"),UCe.forEach(t),a0o=i(P),Eb=n(P,"LI",{});var JCe=s(Eb);Qte=n(JCe,"STRONG",{});var UGr=s(Qte);n0o=r(UGr,"funnel"),UGr.forEach(t),s0o=r(JCe," \u2014 "),gI=n(JCe,"A",{href:!0});var JGr=s(gI);l0o=r(JGr,"FunnelForQuestionAnswering"),JGr.forEach(t),i0o=r(JCe," (Funnel Transformer model)"),JCe.forEach(t),d0o=i(P),yb=n(P,"LI",{});var YCe=s(yb);Hte=n(YCe,"STRONG",{});var YGr=s(Hte);c0o=r(YGr,"gptj"),YGr.forEach(t),f0o=r(YCe," \u2014 "),hI=n(YCe,"A",{href:!0});var KGr=s(hI);m0o=r(KGr,"GPTJForQuestionAnswering"),KGr.forEach(t),g0o=r(YCe," (GPT-J model)"),YCe.forEach(t),h0o=i(P),wb=n(P,"LI",{});var KCe=s(wb);Ute=n(KCe,"STRONG",{});var ZGr=s(Ute);p0o=r(ZGr,"ibert"),ZGr.forEach(t),_0o=r(KCe," \u2014 "),pI=n(KCe,"A",{href:!0});var eXr=s(pI);u0o=r(eXr,"IBertForQuestionAnswering"),eXr.forEach(t),b0o=r(KCe," (I-BERT model)"),KCe.forEach(t),v0o=i(P),Ab=n(P,"LI",{});var ZCe=s(Ab);Jte=n(ZCe,"STRONG",{});var oXr=s(Jte);T0o=r(oXr,"layoutlmv2"),oXr.forEach(t),F0o=r(ZCe," \u2014 "),_I=n(ZCe,"A",{href:!0});var rXr=s(_I);C0o=r(rXr,"LayoutLMv2ForQuestionAnswering"),rXr.forEach(t),M0o=r(ZCe," (LayoutLMv2 model)"),ZCe.forEach(t),E0o=i(P),Lb=n(P,"LI",{});var eMe=s(Lb);Yte=n(eMe,"STRONG",{});var tXr=s(Yte);y0o=r(tXr,"led"),tXr.forEach(t),w0o=r(eMe," \u2014 "),uI=n(eMe,"A",{href:!0});var aXr=s(uI);A0o=r(aXr,"LEDForQuestionAnswering"),aXr.forEach(t),L0o=r(eMe," (LED model)"),eMe.forEach(t),B0o=i(P),Bb=n(P,"LI",{});var oMe=s(Bb);Kte=n(oMe,"STRONG",{});var nXr=s(Kte);k0o=r(nXr,"longformer"),nXr.forEach(t),x0o=r(oMe," \u2014 "),bI=n(oMe,"A",{href:!0});var sXr=s(bI);R0o=r(sXr,"LongformerForQuestionAnswering"),sXr.forEach(t),S0o=r(oMe," (Longformer model)"),oMe.forEach(t),P0o=i(P),kb=n(P,"LI",{});var rMe=s(kb);Zte=n(rMe,"STRONG",{});var lXr=s(Zte);$0o=r(lXr,"lxmert"),lXr.forEach(t),I0o=r(rMe," \u2014 "),vI=n(rMe,"A",{href:!0});var iXr=s(vI);j0o=r(iXr,"LxmertForQuestionAnswering"),iXr.forEach(t),N0o=r(rMe," (LXMERT model)"),rMe.forEach(t),D0o=i(P),xb=n(P,"LI",{});var tMe=s(xb);eae=n(tMe,"STRONG",{});var dXr=s(eae);q0o=r(dXr,"mbart"),dXr.forEach(t),O0o=r(tMe," \u2014 "),TI=n(tMe,"A",{href:!0});var cXr=s(TI);G0o=r(cXr,"MBartForQuestionAnswering"),cXr.forEach(t),X0o=r(tMe," (mBART model)"),tMe.forEach(t),z0o=i(P),Rb=n(P,"LI",{});var aMe=s(Rb);oae=n(aMe,"STRONG",{});var fXr=s(oae);V0o=r(fXr,"megatron-bert"),fXr.forEach(t),W0o=r(aMe," \u2014 "),FI=n(aMe,"A",{href:!0});var mXr=s(FI);Q0o=r(mXr,"MegatronBertForQuestionAnswering"),mXr.forEach(t),H0o=r(aMe," (MegatronBert model)"),aMe.forEach(t),U0o=i(P),Sb=n(P,"LI",{});var nMe=s(Sb);rae=n(nMe,"STRONG",{});var gXr=s(rae);J0o=r(gXr,"mobilebert"),gXr.forEach(t),Y0o=r(nMe," \u2014 "),CI=n(nMe,"A",{href:!0});var hXr=s(CI);K0o=r(hXr,"MobileBertForQuestionAnswering"),hXr.forEach(t),Z0o=r(nMe," (MobileBERT model)"),nMe.forEach(t),e6o=i(P),Pb=n(P,"LI",{});var sMe=s(Pb);tae=n(sMe,"STRONG",{});var pXr=s(tae);o6o=r(pXr,"mpnet"),pXr.forEach(t),r6o=r(sMe," \u2014 "),MI=n(sMe,"A",{href:!0});var _Xr=s(MI);t6o=r(_Xr,"MPNetForQuestionAnswering"),_Xr.forEach(t),a6o=r(sMe," (MPNet model)"),sMe.forEach(t),n6o=i(P),$b=n(P,"LI",{});var lMe=s($b);aae=n(lMe,"STRONG",{});var uXr=s(aae);s6o=r(uXr,"nystromformer"),uXr.forEach(t),l6o=r(lMe," \u2014 "),EI=n(lMe,"A",{href:!0});var bXr=s(EI);i6o=r(bXr,"NystromformerForQuestionAnswering"),bXr.forEach(t),d6o=r(lMe," (Nystromformer model)"),lMe.forEach(t),c6o=i(P),Ib=n(P,"LI",{});var iMe=s(Ib);nae=n(iMe,"STRONG",{});var vXr=s(nae);f6o=r(vXr,"qdqbert"),vXr.forEach(t),m6o=r(iMe," \u2014 "),yI=n(iMe,"A",{href:!0});var TXr=s(yI);g6o=r(TXr,"QDQBertForQuestionAnswering"),TXr.forEach(t),h6o=r(iMe," (QDQBert model)"),iMe.forEach(t),p6o=i(P),jb=n(P,"LI",{});var dMe=s(jb);sae=n(dMe,"STRONG",{});var FXr=s(sae);_6o=r(FXr,"reformer"),FXr.forEach(t),u6o=r(dMe," \u2014 "),wI=n(dMe,"A",{href:!0});var CXr=s(wI);b6o=r(CXr,"ReformerForQuestionAnswering"),CXr.forEach(t),v6o=r(dMe," (Reformer model)"),dMe.forEach(t),T6o=i(P),Nb=n(P,"LI",{});var cMe=s(Nb);lae=n(cMe,"STRONG",{});var MXr=s(lae);F6o=r(MXr,"rembert"),MXr.forEach(t),C6o=r(cMe," \u2014 "),AI=n(cMe,"A",{href:!0});var EXr=s(AI);M6o=r(EXr,"RemBertForQuestionAnswering"),EXr.forEach(t),E6o=r(cMe," (RemBERT model)"),cMe.forEach(t),y6o=i(P),Db=n(P,"LI",{});var fMe=s(Db);iae=n(fMe,"STRONG",{});var yXr=s(iae);w6o=r(yXr,"roberta"),yXr.forEach(t),A6o=r(fMe," \u2014 "),LI=n(fMe,"A",{href:!0});var wXr=s(LI);L6o=r(wXr,"RobertaForQuestionAnswering"),wXr.forEach(t),B6o=r(fMe," (RoBERTa model)"),fMe.forEach(t),k6o=i(P),qb=n(P,"LI",{});var mMe=s(qb);dae=n(mMe,"STRONG",{});var AXr=s(dae);x6o=r(AXr,"roformer"),AXr.forEach(t),R6o=r(mMe," \u2014 "),BI=n(mMe,"A",{href:!0});var LXr=s(BI);S6o=r(LXr,"RoFormerForQuestionAnswering"),LXr.forEach(t),P6o=r(mMe," (RoFormer model)"),mMe.forEach(t),$6o=i(P),Ob=n(P,"LI",{});var gMe=s(Ob);cae=n(gMe,"STRONG",{});var BXr=s(cae);I6o=r(BXr,"splinter"),BXr.forEach(t),j6o=r(gMe," \u2014 "),kI=n(gMe,"A",{href:!0});var kXr=s(kI);N6o=r(kXr,"SplinterForQuestionAnswering"),kXr.forEach(t),D6o=r(gMe," (Splinter model)"),gMe.forEach(t),q6o=i(P),Gb=n(P,"LI",{});var hMe=s(Gb);fae=n(hMe,"STRONG",{});var xXr=s(fae);O6o=r(xXr,"squeezebert"),xXr.forEach(t),G6o=r(hMe," \u2014 "),xI=n(hMe,"A",{href:!0});var RXr=s(xI);X6o=r(RXr,"SqueezeBertForQuestionAnswering"),RXr.forEach(t),z6o=r(hMe," (SqueezeBERT model)"),hMe.forEach(t),V6o=i(P),Xb=n(P,"LI",{});var pMe=s(Xb);mae=n(pMe,"STRONG",{});var SXr=s(mae);W6o=r(SXr,"xlm"),SXr.forEach(t),Q6o=r(pMe," \u2014 "),RI=n(pMe,"A",{href:!0});var PXr=s(RI);H6o=r(PXr,"XLMForQuestionAnsweringSimple"),PXr.forEach(t),U6o=r(pMe," (XLM model)"),pMe.forEach(t),J6o=i(P),zb=n(P,"LI",{});var _Me=s(zb);gae=n(_Me,"STRONG",{});var $Xr=s(gae);Y6o=r($Xr,"xlm-roberta"),$Xr.forEach(t),K6o=r(_Me," \u2014 "),SI=n(_Me,"A",{href:!0});var IXr=s(SI);Z6o=r(IXr,"XLMRobertaForQuestionAnswering"),IXr.forEach(t),eLo=r(_Me," (XLM-RoBERTa model)"),_Me.forEach(t),oLo=i(P),Vb=n(P,"LI",{});var uMe=s(Vb);hae=n(uMe,"STRONG",{});var jXr=s(hae);rLo=r(jXr,"xlm-roberta-xl"),jXr.forEach(t),tLo=r(uMe," \u2014 "),pae=n(uMe,"CODE",{});var NXr=s(pae);aLo=r(NXr,"XLMRobertaXLForQuestionAnswering"),NXr.forEach(t),nLo=r(uMe,"(XLM-RoBERTa-XL model)"),uMe.forEach(t),sLo=i(P),Wb=n(P,"LI",{});var bMe=s(Wb);_ae=n(bMe,"STRONG",{});var DXr=s(_ae);lLo=r(DXr,"xlnet"),DXr.forEach(t),iLo=r(bMe," \u2014 "),PI=n(bMe,"A",{href:!0});var qXr=s(PI);dLo=r(qXr,"XLNetForQuestionAnsweringSimple"),qXr.forEach(t),cLo=r(bMe," (XLNet model)"),bMe.forEach(t),fLo=i(P),Qb=n(P,"LI",{});var vMe=s(Qb);uae=n(vMe,"STRONG",{});var OXr=s(uae);mLo=r(OXr,"yoso"),OXr.forEach(t),gLo=r(vMe," \u2014 "),$I=n(vMe,"A",{href:!0});var GXr=s($I);hLo=r(GXr,"YosoForQuestionAnswering"),GXr.forEach(t),pLo=r(vMe," (YOSO model)"),vMe.forEach(t),P.forEach(t),_Lo=i(It),Hb=n(It,"P",{});var TMe=s(Hb);uLo=r(TMe,"The model is set in evaluation mode by default using "),bae=n(TMe,"CODE",{});var XXr=s(bae);bLo=r(XXr,"model.eval()"),XXr.forEach(t),vLo=r(TMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vae=n(TMe,"CODE",{});var zXr=s(vae);TLo=r(zXr,"model.train()"),zXr.forEach(t),TMe.forEach(t),FLo=i(It),Tae=n(It,"P",{});var VXr=s(Tae);CLo=r(VXr,"Examples:"),VXr.forEach(t),MLo=i(It),m(CE.$$.fragment,It),It.forEach(t),Qs.forEach(t),r6e=i(d),rd=n(d,"H2",{class:!0});var n8e=s(rd);Ub=n(n8e,"A",{id:!0,class:!0,href:!0});var WXr=s(Ub);Fae=n(WXr,"SPAN",{});var QXr=s(Fae);m(ME.$$.fragment,QXr),QXr.forEach(t),WXr.forEach(t),ELo=i(n8e),Cae=n(n8e,"SPAN",{});var HXr=s(Cae);yLo=r(HXr,"AutoModelForTableQuestionAnswering"),HXr.forEach(t),n8e.forEach(t),t6e=i(d),Zo=n(d,"DIV",{class:!0});var Us=s(Zo);m(EE.$$.fragment,Us),wLo=i(Us),td=n(Us,"P",{});var ZG=s(td);ALo=r(ZG,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Mae=n(ZG,"CODE",{});var UXr=s(Mae);LLo=r(UXr,"from_pretrained()"),UXr.forEach(t),BLo=r(ZG,"class method or the "),Eae=n(ZG,"CODE",{});var JXr=s(Eae);kLo=r(JXr,"from_config()"),JXr.forEach(t),xLo=r(ZG,`class
method.`),ZG.forEach(t),RLo=i(Us),yE=n(Us,"P",{});var s8e=s(yE);SLo=r(s8e,"This class cannot be instantiated directly using "),yae=n(s8e,"CODE",{});var YXr=s(yae);PLo=r(YXr,"__init__()"),YXr.forEach(t),$Lo=r(s8e," (throws an error)."),s8e.forEach(t),ILo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(wE.$$.fragment,Js),jLo=i(Js),wae=n(Js,"P",{});var KXr=s(wae);NLo=r(KXr,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KXr.forEach(t),DLo=i(Js),ad=n(Js,"P",{});var eX=s(ad);qLo=r(eX,`Note:
Loading a model from its configuration file does `),Aae=n(eX,"STRONG",{});var ZXr=s(Aae);OLo=r(ZXr,"not"),ZXr.forEach(t),GLo=r(eX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lae=n(eX,"CODE",{});var ezr=s(Lae);XLo=r(ezr,"from_pretrained()"),ezr.forEach(t),zLo=r(eX,"to load the model weights."),eX.forEach(t),VLo=i(Js),Bae=n(Js,"P",{});var ozr=s(Bae);WLo=r(ozr,"Examples:"),ozr.forEach(t),QLo=i(Js),m(AE.$$.fragment,Js),Js.forEach(t),HLo=i(Us),qe=n(Us,"DIV",{class:!0});var jt=s(qe);m(LE.$$.fragment,jt),ULo=i(jt),kae=n(jt,"P",{});var rzr=s(kae);JLo=r(rzr,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rzr.forEach(t),YLo=i(jt),Oa=n(jt,"P",{});var V9=s(Oa);KLo=r(V9,"The model class to instantiate is selected based on the "),xae=n(V9,"CODE",{});var tzr=s(xae);ZLo=r(tzr,"model_type"),tzr.forEach(t),e8o=r(V9,` property of the config object (either
passed as an argument or loaded from `),Rae=n(V9,"CODE",{});var azr=s(Rae);o8o=r(azr,"pretrained_model_name_or_path"),azr.forEach(t),r8o=r(V9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=n(V9,"CODE",{});var nzr=s(Sae);t8o=r(nzr,"pretrained_model_name_or_path"),nzr.forEach(t),a8o=r(V9,":"),V9.forEach(t),n8o=i(jt),Pae=n(jt,"UL",{});var szr=s(Pae);Jb=n(szr,"LI",{});var FMe=s(Jb);$ae=n(FMe,"STRONG",{});var lzr=s($ae);s8o=r(lzr,"tapas"),lzr.forEach(t),l8o=r(FMe," \u2014 "),II=n(FMe,"A",{href:!0});var izr=s(II);i8o=r(izr,"TapasForQuestionAnswering"),izr.forEach(t),d8o=r(FMe," (TAPAS model)"),FMe.forEach(t),szr.forEach(t),c8o=i(jt),Yb=n(jt,"P",{});var CMe=s(Yb);f8o=r(CMe,"The model is set in evaluation mode by default using "),Iae=n(CMe,"CODE",{});var dzr=s(Iae);m8o=r(dzr,"model.eval()"),dzr.forEach(t),g8o=r(CMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jae=n(CMe,"CODE",{});var czr=s(jae);h8o=r(czr,"model.train()"),czr.forEach(t),CMe.forEach(t),p8o=i(jt),Nae=n(jt,"P",{});var fzr=s(Nae);_8o=r(fzr,"Examples:"),fzr.forEach(t),u8o=i(jt),m(BE.$$.fragment,jt),jt.forEach(t),Us.forEach(t),a6e=i(d),nd=n(d,"H2",{class:!0});var l8e=s(nd);Kb=n(l8e,"A",{id:!0,class:!0,href:!0});var mzr=s(Kb);Dae=n(mzr,"SPAN",{});var gzr=s(Dae);m(kE.$$.fragment,gzr),gzr.forEach(t),mzr.forEach(t),b8o=i(l8e),qae=n(l8e,"SPAN",{});var hzr=s(qae);v8o=r(hzr,"AutoModelForImageClassification"),hzr.forEach(t),l8e.forEach(t),n6e=i(d),er=n(d,"DIV",{class:!0});var Ys=s(er);m(xE.$$.fragment,Ys),T8o=i(Ys),sd=n(Ys,"P",{});var oX=s(sd);F8o=r(oX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oae=n(oX,"CODE",{});var pzr=s(Oae);C8o=r(pzr,"from_pretrained()"),pzr.forEach(t),M8o=r(oX,"class method or the "),Gae=n(oX,"CODE",{});var _zr=s(Gae);E8o=r(_zr,"from_config()"),_zr.forEach(t),y8o=r(oX,`class
method.`),oX.forEach(t),w8o=i(Ys),RE=n(Ys,"P",{});var i8e=s(RE);A8o=r(i8e,"This class cannot be instantiated directly using "),Xae=n(i8e,"CODE",{});var uzr=s(Xae);L8o=r(uzr,"__init__()"),uzr.forEach(t),B8o=r(i8e," (throws an error)."),i8e.forEach(t),k8o=i(Ys),Vr=n(Ys,"DIV",{class:!0});var Ks=s(Vr);m(SE.$$.fragment,Ks),x8o=i(Ks),zae=n(Ks,"P",{});var bzr=s(zae);R8o=r(bzr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bzr.forEach(t),S8o=i(Ks),ld=n(Ks,"P",{});var rX=s(ld);P8o=r(rX,`Note:
Loading a model from its configuration file does `),Vae=n(rX,"STRONG",{});var vzr=s(Vae);$8o=r(vzr,"not"),vzr.forEach(t),I8o=r(rX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wae=n(rX,"CODE",{});var Tzr=s(Wae);j8o=r(Tzr,"from_pretrained()"),Tzr.forEach(t),N8o=r(rX,"to load the model weights."),rX.forEach(t),D8o=i(Ks),Qae=n(Ks,"P",{});var Fzr=s(Qae);q8o=r(Fzr,"Examples:"),Fzr.forEach(t),O8o=i(Ks),m(PE.$$.fragment,Ks),Ks.forEach(t),G8o=i(Ys),Oe=n(Ys,"DIV",{class:!0});var Nt=s(Oe);m($E.$$.fragment,Nt),X8o=i(Nt),Hae=n(Nt,"P",{});var Czr=s(Hae);z8o=r(Czr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Czr.forEach(t),V8o=i(Nt),Ga=n(Nt,"P",{});var W9=s(Ga);W8o=r(W9,"The model class to instantiate is selected based on the "),Uae=n(W9,"CODE",{});var Mzr=s(Uae);Q8o=r(Mzr,"model_type"),Mzr.forEach(t),H8o=r(W9,` property of the config object (either
passed as an argument or loaded from `),Jae=n(W9,"CODE",{});var Ezr=s(Jae);U8o=r(Ezr,"pretrained_model_name_or_path"),Ezr.forEach(t),J8o=r(W9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yae=n(W9,"CODE",{});var yzr=s(Yae);Y8o=r(yzr,"pretrained_model_name_or_path"),yzr.forEach(t),K8o=r(W9,":"),W9.forEach(t),Z8o=i(Nt),be=n(Nt,"UL",{});var Ye=s(be);Zb=n(Ye,"LI",{});var MMe=s(Zb);Kae=n(MMe,"STRONG",{});var wzr=s(Kae);eBo=r(wzr,"beit"),wzr.forEach(t),oBo=r(MMe," \u2014 "),jI=n(MMe,"A",{href:!0});var Azr=s(jI);rBo=r(Azr,"BeitForImageClassification"),Azr.forEach(t),tBo=r(MMe," (BEiT model)"),MMe.forEach(t),aBo=i(Ye),e5=n(Ye,"LI",{});var EMe=s(e5);Zae=n(EMe,"STRONG",{});var Lzr=s(Zae);nBo=r(Lzr,"convnext"),Lzr.forEach(t),sBo=r(EMe," \u2014 "),ene=n(EMe,"CODE",{});var Bzr=s(ene);lBo=r(Bzr,"ConvNextForImageClassification"),Bzr.forEach(t),iBo=r(EMe,"(ConvNext model)"),EMe.forEach(t),dBo=i(Ye),Cs=n(Ye,"LI",{});var H0=s(Cs);one=n(H0,"STRONG",{});var kzr=s(one);cBo=r(kzr,"deit"),kzr.forEach(t),fBo=r(H0," \u2014 "),NI=n(H0,"A",{href:!0});var xzr=s(NI);mBo=r(xzr,"DeiTForImageClassification"),xzr.forEach(t),gBo=r(H0," or "),DI=n(H0,"A",{href:!0});var Rzr=s(DI);hBo=r(Rzr,"DeiTForImageClassificationWithTeacher"),Rzr.forEach(t),pBo=r(H0," (DeiT model)"),H0.forEach(t),_Bo=i(Ye),o5=n(Ye,"LI",{});var yMe=s(o5);rne=n(yMe,"STRONG",{});var Szr=s(rne);uBo=r(Szr,"imagegpt"),Szr.forEach(t),bBo=r(yMe," \u2014 "),qI=n(yMe,"A",{href:!0});var Pzr=s(qI);vBo=r(Pzr,"ImageGPTForImageClassification"),Pzr.forEach(t),TBo=r(yMe," (ImageGPT model)"),yMe.forEach(t),FBo=i(Ye),ea=n(Ye,"LI",{});var rf=s(ea);tne=n(rf,"STRONG",{});var $zr=s(tne);CBo=r($zr,"perceiver"),$zr.forEach(t),MBo=r(rf," \u2014 "),OI=n(rf,"A",{href:!0});var Izr=s(OI);EBo=r(Izr,"PerceiverForImageClassificationLearned"),Izr.forEach(t),yBo=r(rf," or "),GI=n(rf,"A",{href:!0});var jzr=s(GI);wBo=r(jzr,"PerceiverForImageClassificationFourier"),jzr.forEach(t),ABo=r(rf," or "),XI=n(rf,"A",{href:!0});var Nzr=s(XI);LBo=r(Nzr,"PerceiverForImageClassificationConvProcessing"),Nzr.forEach(t),BBo=r(rf," (Perceiver model)"),rf.forEach(t),kBo=i(Ye),r5=n(Ye,"LI",{});var wMe=s(r5);ane=n(wMe,"STRONG",{});var Dzr=s(ane);xBo=r(Dzr,"poolformer"),Dzr.forEach(t),RBo=r(wMe," \u2014 "),zI=n(wMe,"A",{href:!0});var qzr=s(zI);SBo=r(qzr,"PoolFormerForImageClassification"),qzr.forEach(t),PBo=r(wMe," (PoolFormer model)"),wMe.forEach(t),$Bo=i(Ye),t5=n(Ye,"LI",{});var AMe=s(t5);nne=n(AMe,"STRONG",{});var Ozr=s(nne);IBo=r(Ozr,"segformer"),Ozr.forEach(t),jBo=r(AMe," \u2014 "),VI=n(AMe,"A",{href:!0});var Gzr=s(VI);NBo=r(Gzr,"SegformerForImageClassification"),Gzr.forEach(t),DBo=r(AMe," (SegFormer model)"),AMe.forEach(t),qBo=i(Ye),a5=n(Ye,"LI",{});var LMe=s(a5);sne=n(LMe,"STRONG",{});var Xzr=s(sne);OBo=r(Xzr,"swin"),Xzr.forEach(t),GBo=r(LMe," \u2014 "),WI=n(LMe,"A",{href:!0});var zzr=s(WI);XBo=r(zzr,"SwinForImageClassification"),zzr.forEach(t),zBo=r(LMe," (Swin model)"),LMe.forEach(t),VBo=i(Ye),n5=n(Ye,"LI",{});var BMe=s(n5);lne=n(BMe,"STRONG",{});var Vzr=s(lne);WBo=r(Vzr,"vit"),Vzr.forEach(t),QBo=r(BMe," \u2014 "),QI=n(BMe,"A",{href:!0});var Wzr=s(QI);HBo=r(Wzr,"ViTForImageClassification"),Wzr.forEach(t),UBo=r(BMe," (ViT model)"),BMe.forEach(t),Ye.forEach(t),JBo=i(Nt),s5=n(Nt,"P",{});var kMe=s(s5);YBo=r(kMe,"The model is set in evaluation mode by default using "),ine=n(kMe,"CODE",{});var Qzr=s(ine);KBo=r(Qzr,"model.eval()"),Qzr.forEach(t),ZBo=r(kMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dne=n(kMe,"CODE",{});var Hzr=s(dne);eko=r(Hzr,"model.train()"),Hzr.forEach(t),kMe.forEach(t),oko=i(Nt),cne=n(Nt,"P",{});var Uzr=s(cne);rko=r(Uzr,"Examples:"),Uzr.forEach(t),tko=i(Nt),m(IE.$$.fragment,Nt),Nt.forEach(t),Ys.forEach(t),s6e=i(d),id=n(d,"H2",{class:!0});var d8e=s(id);l5=n(d8e,"A",{id:!0,class:!0,href:!0});var Jzr=s(l5);fne=n(Jzr,"SPAN",{});var Yzr=s(fne);m(jE.$$.fragment,Yzr),Yzr.forEach(t),Jzr.forEach(t),ako=i(d8e),mne=n(d8e,"SPAN",{});var Kzr=s(mne);nko=r(Kzr,"AutoModelForVision2Seq"),Kzr.forEach(t),d8e.forEach(t),l6e=i(d),or=n(d,"DIV",{class:!0});var Zs=s(or);m(NE.$$.fragment,Zs),sko=i(Zs),dd=n(Zs,"P",{});var tX=s(dd);lko=r(tX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gne=n(tX,"CODE",{});var Zzr=s(gne);iko=r(Zzr,"from_pretrained()"),Zzr.forEach(t),dko=r(tX,"class method or the "),hne=n(tX,"CODE",{});var eVr=s(hne);cko=r(eVr,"from_config()"),eVr.forEach(t),fko=r(tX,`class
method.`),tX.forEach(t),mko=i(Zs),DE=n(Zs,"P",{});var c8e=s(DE);gko=r(c8e,"This class cannot be instantiated directly using "),pne=n(c8e,"CODE",{});var oVr=s(pne);hko=r(oVr,"__init__()"),oVr.forEach(t),pko=r(c8e," (throws an error)."),c8e.forEach(t),_ko=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(qE.$$.fragment,el),uko=i(el),_ne=n(el,"P",{});var rVr=s(_ne);bko=r(rVr,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rVr.forEach(t),vko=i(el),cd=n(el,"P",{});var aX=s(cd);Tko=r(aX,`Note:
Loading a model from its configuration file does `),une=n(aX,"STRONG",{});var tVr=s(une);Fko=r(tVr,"not"),tVr.forEach(t),Cko=r(aX,` load the model weights. It only affects the
model\u2019s configuration. Use `),bne=n(aX,"CODE",{});var aVr=s(bne);Mko=r(aVr,"from_pretrained()"),aVr.forEach(t),Eko=r(aX,"to load the model weights."),aX.forEach(t),yko=i(el),vne=n(el,"P",{});var nVr=s(vne);wko=r(nVr,"Examples:"),nVr.forEach(t),Ako=i(el),m(OE.$$.fragment,el),el.forEach(t),Lko=i(Zs),Ge=n(Zs,"DIV",{class:!0});var Dt=s(Ge);m(GE.$$.fragment,Dt),Bko=i(Dt),Tne=n(Dt,"P",{});var sVr=s(Tne);kko=r(sVr,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sVr.forEach(t),xko=i(Dt),Xa=n(Dt,"P",{});var Q9=s(Xa);Rko=r(Q9,"The model class to instantiate is selected based on the "),Fne=n(Q9,"CODE",{});var lVr=s(Fne);Sko=r(lVr,"model_type"),lVr.forEach(t),Pko=r(Q9,` property of the config object (either
passed as an argument or loaded from `),Cne=n(Q9,"CODE",{});var iVr=s(Cne);$ko=r(iVr,"pretrained_model_name_or_path"),iVr.forEach(t),Iko=r(Q9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mne=n(Q9,"CODE",{});var dVr=s(Mne);jko=r(dVr,"pretrained_model_name_or_path"),dVr.forEach(t),Nko=r(Q9,":"),Q9.forEach(t),Dko=i(Dt),Ene=n(Dt,"UL",{});var cVr=s(Ene);i5=n(cVr,"LI",{});var xMe=s(i5);yne=n(xMe,"STRONG",{});var fVr=s(yne);qko=r(fVr,"vision-encoder-decoder"),fVr.forEach(t),Oko=r(xMe," \u2014 "),HI=n(xMe,"A",{href:!0});var mVr=s(HI);Gko=r(mVr,"VisionEncoderDecoderModel"),mVr.forEach(t),Xko=r(xMe," (Vision Encoder decoder model)"),xMe.forEach(t),cVr.forEach(t),zko=i(Dt),d5=n(Dt,"P",{});var RMe=s(d5);Vko=r(RMe,"The model is set in evaluation mode by default using "),wne=n(RMe,"CODE",{});var gVr=s(wne);Wko=r(gVr,"model.eval()"),gVr.forEach(t),Qko=r(RMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ane=n(RMe,"CODE",{});var hVr=s(Ane);Hko=r(hVr,"model.train()"),hVr.forEach(t),RMe.forEach(t),Uko=i(Dt),Lne=n(Dt,"P",{});var pVr=s(Lne);Jko=r(pVr,"Examples:"),pVr.forEach(t),Yko=i(Dt),m(XE.$$.fragment,Dt),Dt.forEach(t),Zs.forEach(t),i6e=i(d),fd=n(d,"H2",{class:!0});var f8e=s(fd);c5=n(f8e,"A",{id:!0,class:!0,href:!0});var _Vr=s(c5);Bne=n(_Vr,"SPAN",{});var uVr=s(Bne);m(zE.$$.fragment,uVr),uVr.forEach(t),_Vr.forEach(t),Kko=i(f8e),kne=n(f8e,"SPAN",{});var bVr=s(kne);Zko=r(bVr,"AutoModelForAudioClassification"),bVr.forEach(t),f8e.forEach(t),d6e=i(d),rr=n(d,"DIV",{class:!0});var ol=s(rr);m(VE.$$.fragment,ol),exo=i(ol),md=n(ol,"P",{});var nX=s(md);oxo=r(nX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),xne=n(nX,"CODE",{});var vVr=s(xne);rxo=r(vVr,"from_pretrained()"),vVr.forEach(t),txo=r(nX,"class method or the "),Rne=n(nX,"CODE",{});var TVr=s(Rne);axo=r(TVr,"from_config()"),TVr.forEach(t),nxo=r(nX,`class
method.`),nX.forEach(t),sxo=i(ol),WE=n(ol,"P",{});var m8e=s(WE);lxo=r(m8e,"This class cannot be instantiated directly using "),Sne=n(m8e,"CODE",{});var FVr=s(Sne);ixo=r(FVr,"__init__()"),FVr.forEach(t),dxo=r(m8e," (throws an error)."),m8e.forEach(t),cxo=i(ol),Qr=n(ol,"DIV",{class:!0});var rl=s(Qr);m(QE.$$.fragment,rl),fxo=i(rl),Pne=n(rl,"P",{});var CVr=s(Pne);mxo=r(CVr,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),CVr.forEach(t),gxo=i(rl),gd=n(rl,"P",{});var sX=s(gd);hxo=r(sX,`Note:
Loading a model from its configuration file does `),$ne=n(sX,"STRONG",{});var MVr=s($ne);pxo=r(MVr,"not"),MVr.forEach(t),_xo=r(sX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ine=n(sX,"CODE",{});var EVr=s(Ine);uxo=r(EVr,"from_pretrained()"),EVr.forEach(t),bxo=r(sX,"to load the model weights."),sX.forEach(t),vxo=i(rl),jne=n(rl,"P",{});var yVr=s(jne);Txo=r(yVr,"Examples:"),yVr.forEach(t),Fxo=i(rl),m(HE.$$.fragment,rl),rl.forEach(t),Cxo=i(ol),Xe=n(ol,"DIV",{class:!0});var qt=s(Xe);m(UE.$$.fragment,qt),Mxo=i(qt),Nne=n(qt,"P",{});var wVr=s(Nne);Exo=r(wVr,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wVr.forEach(t),yxo=i(qt),za=n(qt,"P",{});var H9=s(za);wxo=r(H9,"The model class to instantiate is selected based on the "),Dne=n(H9,"CODE",{});var AVr=s(Dne);Axo=r(AVr,"model_type"),AVr.forEach(t),Lxo=r(H9,` property of the config object (either
passed as an argument or loaded from `),qne=n(H9,"CODE",{});var LVr=s(qne);Bxo=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),kxo=r(H9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),One=n(H9,"CODE",{});var BVr=s(One);xxo=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),Rxo=r(H9,":"),H9.forEach(t),Sxo=i(qt),to=n(qt,"UL",{});var Ot=s(to);f5=n(Ot,"LI",{});var SMe=s(f5);Gne=n(SMe,"STRONG",{});var kVr=s(Gne);Pxo=r(kVr,"hubert"),kVr.forEach(t),$xo=r(SMe," \u2014 "),UI=n(SMe,"A",{href:!0});var xVr=s(UI);Ixo=r(xVr,"HubertForSequenceClassification"),xVr.forEach(t),jxo=r(SMe," (Hubert model)"),SMe.forEach(t),Nxo=i(Ot),m5=n(Ot,"LI",{});var PMe=s(m5);Xne=n(PMe,"STRONG",{});var RVr=s(Xne);Dxo=r(RVr,"sew"),RVr.forEach(t),qxo=r(PMe," \u2014 "),JI=n(PMe,"A",{href:!0});var SVr=s(JI);Oxo=r(SVr,"SEWForSequenceClassification"),SVr.forEach(t),Gxo=r(PMe," (SEW model)"),PMe.forEach(t),Xxo=i(Ot),g5=n(Ot,"LI",{});var $Me=s(g5);zne=n($Me,"STRONG",{});var PVr=s(zne);zxo=r(PVr,"sew-d"),PVr.forEach(t),Vxo=r($Me," \u2014 "),YI=n($Me,"A",{href:!0});var $Vr=s(YI);Wxo=r($Vr,"SEWDForSequenceClassification"),$Vr.forEach(t),Qxo=r($Me," (SEW-D model)"),$Me.forEach(t),Hxo=i(Ot),h5=n(Ot,"LI",{});var IMe=s(h5);Vne=n(IMe,"STRONG",{});var IVr=s(Vne);Uxo=r(IVr,"unispeech"),IVr.forEach(t),Jxo=r(IMe," \u2014 "),KI=n(IMe,"A",{href:!0});var jVr=s(KI);Yxo=r(jVr,"UniSpeechForSequenceClassification"),jVr.forEach(t),Kxo=r(IMe," (UniSpeech model)"),IMe.forEach(t),Zxo=i(Ot),p5=n(Ot,"LI",{});var jMe=s(p5);Wne=n(jMe,"STRONG",{});var NVr=s(Wne);eRo=r(NVr,"unispeech-sat"),NVr.forEach(t),oRo=r(jMe," \u2014 "),ZI=n(jMe,"A",{href:!0});var DVr=s(ZI);rRo=r(DVr,"UniSpeechSatForSequenceClassification"),DVr.forEach(t),tRo=r(jMe," (UniSpeechSat model)"),jMe.forEach(t),aRo=i(Ot),_5=n(Ot,"LI",{});var NMe=s(_5);Qne=n(NMe,"STRONG",{});var qVr=s(Qne);nRo=r(qVr,"wav2vec2"),qVr.forEach(t),sRo=r(NMe," \u2014 "),ej=n(NMe,"A",{href:!0});var OVr=s(ej);lRo=r(OVr,"Wav2Vec2ForSequenceClassification"),OVr.forEach(t),iRo=r(NMe," (Wav2Vec2 model)"),NMe.forEach(t),dRo=i(Ot),u5=n(Ot,"LI",{});var DMe=s(u5);Hne=n(DMe,"STRONG",{});var GVr=s(Hne);cRo=r(GVr,"wavlm"),GVr.forEach(t),fRo=r(DMe," \u2014 "),oj=n(DMe,"A",{href:!0});var XVr=s(oj);mRo=r(XVr,"WavLMForSequenceClassification"),XVr.forEach(t),gRo=r(DMe," (WavLM model)"),DMe.forEach(t),Ot.forEach(t),hRo=i(qt),b5=n(qt,"P",{});var qMe=s(b5);pRo=r(qMe,"The model is set in evaluation mode by default using "),Une=n(qMe,"CODE",{});var zVr=s(Une);_Ro=r(zVr,"model.eval()"),zVr.forEach(t),uRo=r(qMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jne=n(qMe,"CODE",{});var VVr=s(Jne);bRo=r(VVr,"model.train()"),VVr.forEach(t),qMe.forEach(t),vRo=i(qt),Yne=n(qt,"P",{});var WVr=s(Yne);TRo=r(WVr,"Examples:"),WVr.forEach(t),FRo=i(qt),m(JE.$$.fragment,qt),qt.forEach(t),ol.forEach(t),c6e=i(d),hd=n(d,"H2",{class:!0});var g8e=s(hd);v5=n(g8e,"A",{id:!0,class:!0,href:!0});var QVr=s(v5);Kne=n(QVr,"SPAN",{});var HVr=s(Kne);m(YE.$$.fragment,HVr),HVr.forEach(t),QVr.forEach(t),CRo=i(g8e),Zne=n(g8e,"SPAN",{});var UVr=s(Zne);MRo=r(UVr,"AutoModelForAudioFrameClassification"),UVr.forEach(t),g8e.forEach(t),f6e=i(d),tr=n(d,"DIV",{class:!0});var tl=s(tr);m(KE.$$.fragment,tl),ERo=i(tl),pd=n(tl,"P",{});var lX=s(pd);yRo=r(lX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),ese=n(lX,"CODE",{});var JVr=s(ese);wRo=r(JVr,"from_pretrained()"),JVr.forEach(t),ARo=r(lX,"class method or the "),ose=n(lX,"CODE",{});var YVr=s(ose);LRo=r(YVr,"from_config()"),YVr.forEach(t),BRo=r(lX,`class
method.`),lX.forEach(t),kRo=i(tl),ZE=n(tl,"P",{});var h8e=s(ZE);xRo=r(h8e,"This class cannot be instantiated directly using "),rse=n(h8e,"CODE",{});var KVr=s(rse);RRo=r(KVr,"__init__()"),KVr.forEach(t),SRo=r(h8e," (throws an error)."),h8e.forEach(t),PRo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(e3.$$.fragment,al),$Ro=i(al),tse=n(al,"P",{});var ZVr=s(tse);IRo=r(ZVr,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ZVr.forEach(t),jRo=i(al),_d=n(al,"P",{});var iX=s(_d);NRo=r(iX,`Note:
Loading a model from its configuration file does `),ase=n(iX,"STRONG",{});var eWr=s(ase);DRo=r(eWr,"not"),eWr.forEach(t),qRo=r(iX,` load the model weights. It only affects the
model\u2019s configuration. Use `),nse=n(iX,"CODE",{});var oWr=s(nse);ORo=r(oWr,"from_pretrained()"),oWr.forEach(t),GRo=r(iX,"to load the model weights."),iX.forEach(t),XRo=i(al),sse=n(al,"P",{});var rWr=s(sse);zRo=r(rWr,"Examples:"),rWr.forEach(t),VRo=i(al),m(o3.$$.fragment,al),al.forEach(t),WRo=i(tl),ze=n(tl,"DIV",{class:!0});var Gt=s(ze);m(r3.$$.fragment,Gt),QRo=i(Gt),lse=n(Gt,"P",{});var tWr=s(lse);HRo=r(tWr,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),tWr.forEach(t),URo=i(Gt),Va=n(Gt,"P",{});var U9=s(Va);JRo=r(U9,"The model class to instantiate is selected based on the "),ise=n(U9,"CODE",{});var aWr=s(ise);YRo=r(aWr,"model_type"),aWr.forEach(t),KRo=r(U9,` property of the config object (either
passed as an argument or loaded from `),dse=n(U9,"CODE",{});var nWr=s(dse);ZRo=r(nWr,"pretrained_model_name_or_path"),nWr.forEach(t),eSo=r(U9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cse=n(U9,"CODE",{});var sWr=s(cse);oSo=r(sWr,"pretrained_model_name_or_path"),sWr.forEach(t),rSo=r(U9,":"),U9.forEach(t),tSo=i(Gt),ud=n(Gt,"UL",{});var dX=s(ud);T5=n(dX,"LI",{});var OMe=s(T5);fse=n(OMe,"STRONG",{});var lWr=s(fse);aSo=r(lWr,"unispeech-sat"),lWr.forEach(t),nSo=r(OMe," \u2014 "),rj=n(OMe,"A",{href:!0});var iWr=s(rj);sSo=r(iWr,"UniSpeechSatForAudioFrameClassification"),iWr.forEach(t),lSo=r(OMe," (UniSpeechSat model)"),OMe.forEach(t),iSo=i(dX),F5=n(dX,"LI",{});var GMe=s(F5);mse=n(GMe,"STRONG",{});var dWr=s(mse);dSo=r(dWr,"wav2vec2"),dWr.forEach(t),cSo=r(GMe," \u2014 "),tj=n(GMe,"A",{href:!0});var cWr=s(tj);fSo=r(cWr,"Wav2Vec2ForAudioFrameClassification"),cWr.forEach(t),mSo=r(GMe," (Wav2Vec2 model)"),GMe.forEach(t),gSo=i(dX),C5=n(dX,"LI",{});var XMe=s(C5);gse=n(XMe,"STRONG",{});var fWr=s(gse);hSo=r(fWr,"wavlm"),fWr.forEach(t),pSo=r(XMe," \u2014 "),aj=n(XMe,"A",{href:!0});var mWr=s(aj);_So=r(mWr,"WavLMForAudioFrameClassification"),mWr.forEach(t),uSo=r(XMe," (WavLM model)"),XMe.forEach(t),dX.forEach(t),bSo=i(Gt),M5=n(Gt,"P",{});var zMe=s(M5);vSo=r(zMe,"The model is set in evaluation mode by default using "),hse=n(zMe,"CODE",{});var gWr=s(hse);TSo=r(gWr,"model.eval()"),gWr.forEach(t),FSo=r(zMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pse=n(zMe,"CODE",{});var hWr=s(pse);CSo=r(hWr,"model.train()"),hWr.forEach(t),zMe.forEach(t),MSo=i(Gt),_se=n(Gt,"P",{});var pWr=s(_se);ESo=r(pWr,"Examples:"),pWr.forEach(t),ySo=i(Gt),m(t3.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),m6e=i(d),bd=n(d,"H2",{class:!0});var p8e=s(bd);E5=n(p8e,"A",{id:!0,class:!0,href:!0});var _Wr=s(E5);use=n(_Wr,"SPAN",{});var uWr=s(use);m(a3.$$.fragment,uWr),uWr.forEach(t),_Wr.forEach(t),wSo=i(p8e),bse=n(p8e,"SPAN",{});var bWr=s(bse);ASo=r(bWr,"AutoModelForCTC"),bWr.forEach(t),p8e.forEach(t),g6e=i(d),ar=n(d,"DIV",{class:!0});var nl=s(ar);m(n3.$$.fragment,nl),LSo=i(nl),vd=n(nl,"P",{});var cX=s(vd);BSo=r(cX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),vse=n(cX,"CODE",{});var vWr=s(vse);kSo=r(vWr,"from_pretrained()"),vWr.forEach(t),xSo=r(cX,"class method or the "),Tse=n(cX,"CODE",{});var TWr=s(Tse);RSo=r(TWr,"from_config()"),TWr.forEach(t),SSo=r(cX,`class
method.`),cX.forEach(t),PSo=i(nl),s3=n(nl,"P",{});var _8e=s(s3);$So=r(_8e,"This class cannot be instantiated directly using "),Fse=n(_8e,"CODE",{});var FWr=s(Fse);ISo=r(FWr,"__init__()"),FWr.forEach(t),jSo=r(_8e," (throws an error)."),_8e.forEach(t),NSo=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(l3.$$.fragment,sl),DSo=i(sl),Cse=n(sl,"P",{});var CWr=s(Cse);qSo=r(CWr,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),CWr.forEach(t),OSo=i(sl),Td=n(sl,"P",{});var fX=s(Td);GSo=r(fX,`Note:
Loading a model from its configuration file does `),Mse=n(fX,"STRONG",{});var MWr=s(Mse);XSo=r(MWr,"not"),MWr.forEach(t),zSo=r(fX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ese=n(fX,"CODE",{});var EWr=s(Ese);VSo=r(EWr,"from_pretrained()"),EWr.forEach(t),WSo=r(fX,"to load the model weights."),fX.forEach(t),QSo=i(sl),yse=n(sl,"P",{});var yWr=s(yse);HSo=r(yWr,"Examples:"),yWr.forEach(t),USo=i(sl),m(i3.$$.fragment,sl),sl.forEach(t),JSo=i(nl),Ve=n(nl,"DIV",{class:!0});var Xt=s(Ve);m(d3.$$.fragment,Xt),YSo=i(Xt),wse=n(Xt,"P",{});var wWr=s(wse);KSo=r(wWr,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wWr.forEach(t),ZSo=i(Xt),Wa=n(Xt,"P",{});var J9=s(Wa);ePo=r(J9,"The model class to instantiate is selected based on the "),Ase=n(J9,"CODE",{});var AWr=s(Ase);oPo=r(AWr,"model_type"),AWr.forEach(t),rPo=r(J9,` property of the config object (either
passed as an argument or loaded from `),Lse=n(J9,"CODE",{});var LWr=s(Lse);tPo=r(LWr,"pretrained_model_name_or_path"),LWr.forEach(t),aPo=r(J9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n(J9,"CODE",{});var BWr=s(Bse);nPo=r(BWr,"pretrained_model_name_or_path"),BWr.forEach(t),sPo=r(J9,":"),J9.forEach(t),lPo=i(Xt),ao=n(Xt,"UL",{});var zt=s(ao);y5=n(zt,"LI",{});var VMe=s(y5);kse=n(VMe,"STRONG",{});var kWr=s(kse);iPo=r(kWr,"hubert"),kWr.forEach(t),dPo=r(VMe," \u2014 "),nj=n(VMe,"A",{href:!0});var xWr=s(nj);cPo=r(xWr,"HubertForCTC"),xWr.forEach(t),fPo=r(VMe," (Hubert model)"),VMe.forEach(t),mPo=i(zt),w5=n(zt,"LI",{});var WMe=s(w5);xse=n(WMe,"STRONG",{});var RWr=s(xse);gPo=r(RWr,"sew"),RWr.forEach(t),hPo=r(WMe," \u2014 "),sj=n(WMe,"A",{href:!0});var SWr=s(sj);pPo=r(SWr,"SEWForCTC"),SWr.forEach(t),_Po=r(WMe," (SEW model)"),WMe.forEach(t),uPo=i(zt),A5=n(zt,"LI",{});var QMe=s(A5);Rse=n(QMe,"STRONG",{});var PWr=s(Rse);bPo=r(PWr,"sew-d"),PWr.forEach(t),vPo=r(QMe," \u2014 "),lj=n(QMe,"A",{href:!0});var $Wr=s(lj);TPo=r($Wr,"SEWDForCTC"),$Wr.forEach(t),FPo=r(QMe," (SEW-D model)"),QMe.forEach(t),CPo=i(zt),L5=n(zt,"LI",{});var HMe=s(L5);Sse=n(HMe,"STRONG",{});var IWr=s(Sse);MPo=r(IWr,"unispeech"),IWr.forEach(t),EPo=r(HMe," \u2014 "),ij=n(HMe,"A",{href:!0});var jWr=s(ij);yPo=r(jWr,"UniSpeechForCTC"),jWr.forEach(t),wPo=r(HMe," (UniSpeech model)"),HMe.forEach(t),APo=i(zt),B5=n(zt,"LI",{});var UMe=s(B5);Pse=n(UMe,"STRONG",{});var NWr=s(Pse);LPo=r(NWr,"unispeech-sat"),NWr.forEach(t),BPo=r(UMe," \u2014 "),dj=n(UMe,"A",{href:!0});var DWr=s(dj);kPo=r(DWr,"UniSpeechSatForCTC"),DWr.forEach(t),xPo=r(UMe," (UniSpeechSat model)"),UMe.forEach(t),RPo=i(zt),k5=n(zt,"LI",{});var JMe=s(k5);$se=n(JMe,"STRONG",{});var qWr=s($se);SPo=r(qWr,"wav2vec2"),qWr.forEach(t),PPo=r(JMe," \u2014 "),cj=n(JMe,"A",{href:!0});var OWr=s(cj);$Po=r(OWr,"Wav2Vec2ForCTC"),OWr.forEach(t),IPo=r(JMe," (Wav2Vec2 model)"),JMe.forEach(t),jPo=i(zt),x5=n(zt,"LI",{});var YMe=s(x5);Ise=n(YMe,"STRONG",{});var GWr=s(Ise);NPo=r(GWr,"wavlm"),GWr.forEach(t),DPo=r(YMe," \u2014 "),fj=n(YMe,"A",{href:!0});var XWr=s(fj);qPo=r(XWr,"WavLMForCTC"),XWr.forEach(t),OPo=r(YMe," (WavLM model)"),YMe.forEach(t),zt.forEach(t),GPo=i(Xt),R5=n(Xt,"P",{});var KMe=s(R5);XPo=r(KMe,"The model is set in evaluation mode by default using "),jse=n(KMe,"CODE",{});var zWr=s(jse);zPo=r(zWr,"model.eval()"),zWr.forEach(t),VPo=r(KMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nse=n(KMe,"CODE",{});var VWr=s(Nse);WPo=r(VWr,"model.train()"),VWr.forEach(t),KMe.forEach(t),QPo=i(Xt),Dse=n(Xt,"P",{});var WWr=s(Dse);HPo=r(WWr,"Examples:"),WWr.forEach(t),UPo=i(Xt),m(c3.$$.fragment,Xt),Xt.forEach(t),nl.forEach(t),h6e=i(d),Fd=n(d,"H2",{class:!0});var u8e=s(Fd);S5=n(u8e,"A",{id:!0,class:!0,href:!0});var QWr=s(S5);qse=n(QWr,"SPAN",{});var HWr=s(qse);m(f3.$$.fragment,HWr),HWr.forEach(t),QWr.forEach(t),JPo=i(u8e),Ose=n(u8e,"SPAN",{});var UWr=s(Ose);YPo=r(UWr,"AutoModelForSpeechSeq2Seq"),UWr.forEach(t),u8e.forEach(t),p6e=i(d),nr=n(d,"DIV",{class:!0});var ll=s(nr);m(m3.$$.fragment,ll),KPo=i(ll),Cd=n(ll,"P",{});var mX=s(Cd);ZPo=r(mX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Gse=n(mX,"CODE",{});var JWr=s(Gse);e$o=r(JWr,"from_pretrained()"),JWr.forEach(t),o$o=r(mX,"class method or the "),Xse=n(mX,"CODE",{});var YWr=s(Xse);r$o=r(YWr,"from_config()"),YWr.forEach(t),t$o=r(mX,`class
method.`),mX.forEach(t),a$o=i(ll),g3=n(ll,"P",{});var b8e=s(g3);n$o=r(b8e,"This class cannot be instantiated directly using "),zse=n(b8e,"CODE",{});var KWr=s(zse);s$o=r(KWr,"__init__()"),KWr.forEach(t),l$o=r(b8e," (throws an error)."),b8e.forEach(t),i$o=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(h3.$$.fragment,il),d$o=i(il),Vse=n(il,"P",{});var ZWr=s(Vse);c$o=r(ZWr,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ZWr.forEach(t),f$o=i(il),Md=n(il,"P",{});var gX=s(Md);m$o=r(gX,`Note:
Loading a model from its configuration file does `),Wse=n(gX,"STRONG",{});var eQr=s(Wse);g$o=r(eQr,"not"),eQr.forEach(t),h$o=r(gX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qse=n(gX,"CODE",{});var oQr=s(Qse);p$o=r(oQr,"from_pretrained()"),oQr.forEach(t),_$o=r(gX,"to load the model weights."),gX.forEach(t),u$o=i(il),Hse=n(il,"P",{});var rQr=s(Hse);b$o=r(rQr,"Examples:"),rQr.forEach(t),v$o=i(il),m(p3.$$.fragment,il),il.forEach(t),T$o=i(ll),We=n(ll,"DIV",{class:!0});var Vt=s(We);m(_3.$$.fragment,Vt),F$o=i(Vt),Use=n(Vt,"P",{});var tQr=s(Use);C$o=r(tQr,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tQr.forEach(t),M$o=i(Vt),Qa=n(Vt,"P",{});var Y9=s(Qa);E$o=r(Y9,"The model class to instantiate is selected based on the "),Jse=n(Y9,"CODE",{});var aQr=s(Jse);y$o=r(aQr,"model_type"),aQr.forEach(t),w$o=r(Y9,` property of the config object (either
passed as an argument or loaded from `),Yse=n(Y9,"CODE",{});var nQr=s(Yse);A$o=r(nQr,"pretrained_model_name_or_path"),nQr.forEach(t),L$o=r(Y9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kse=n(Y9,"CODE",{});var sQr=s(Kse);B$o=r(sQr,"pretrained_model_name_or_path"),sQr.forEach(t),k$o=r(Y9,":"),Y9.forEach(t),x$o=i(Vt),u3=n(Vt,"UL",{});var v8e=s(u3);P5=n(v8e,"LI",{});var ZMe=s(P5);Zse=n(ZMe,"STRONG",{});var lQr=s(Zse);R$o=r(lQr,"speech-encoder-decoder"),lQr.forEach(t),S$o=r(ZMe," \u2014 "),mj=n(ZMe,"A",{href:!0});var iQr=s(mj);P$o=r(iQr,"SpeechEncoderDecoderModel"),iQr.forEach(t),$$o=r(ZMe," (Speech Encoder decoder model)"),ZMe.forEach(t),I$o=i(v8e),$5=n(v8e,"LI",{});var eEe=s($5);ele=n(eEe,"STRONG",{});var dQr=s(ele);j$o=r(dQr,"speech_to_text"),dQr.forEach(t),N$o=r(eEe," \u2014 "),gj=n(eEe,"A",{href:!0});var cQr=s(gj);D$o=r(cQr,"Speech2TextForConditionalGeneration"),cQr.forEach(t),q$o=r(eEe," (Speech2Text model)"),eEe.forEach(t),v8e.forEach(t),O$o=i(Vt),I5=n(Vt,"P",{});var oEe=s(I5);G$o=r(oEe,"The model is set in evaluation mode by default using "),ole=n(oEe,"CODE",{});var fQr=s(ole);X$o=r(fQr,"model.eval()"),fQr.forEach(t),z$o=r(oEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rle=n(oEe,"CODE",{});var mQr=s(rle);V$o=r(mQr,"model.train()"),mQr.forEach(t),oEe.forEach(t),W$o=i(Vt),tle=n(Vt,"P",{});var gQr=s(tle);Q$o=r(gQr,"Examples:"),gQr.forEach(t),H$o=i(Vt),m(b3.$$.fragment,Vt),Vt.forEach(t),ll.forEach(t),_6e=i(d),Ed=n(d,"H2",{class:!0});var T8e=s(Ed);j5=n(T8e,"A",{id:!0,class:!0,href:!0});var hQr=s(j5);ale=n(hQr,"SPAN",{});var pQr=s(ale);m(v3.$$.fragment,pQr),pQr.forEach(t),hQr.forEach(t),U$o=i(T8e),nle=n(T8e,"SPAN",{});var _Qr=s(nle);J$o=r(_Qr,"AutoModelForAudioXVector"),_Qr.forEach(t),T8e.forEach(t),u6e=i(d),sr=n(d,"DIV",{class:!0});var dl=s(sr);m(T3.$$.fragment,dl),Y$o=i(dl),yd=n(dl,"P",{});var hX=s(yd);K$o=r(hX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sle=n(hX,"CODE",{});var uQr=s(sle);Z$o=r(uQr,"from_pretrained()"),uQr.forEach(t),eIo=r(hX,"class method or the "),lle=n(hX,"CODE",{});var bQr=s(lle);oIo=r(bQr,"from_config()"),bQr.forEach(t),rIo=r(hX,`class
method.`),hX.forEach(t),tIo=i(dl),F3=n(dl,"P",{});var F8e=s(F3);aIo=r(F8e,"This class cannot be instantiated directly using "),ile=n(F8e,"CODE",{});var vQr=s(ile);nIo=r(vQr,"__init__()"),vQr.forEach(t),sIo=r(F8e," (throws an error)."),F8e.forEach(t),lIo=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(C3.$$.fragment,cl),iIo=i(cl),dle=n(cl,"P",{});var TQr=s(dle);dIo=r(TQr,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),TQr.forEach(t),cIo=i(cl),wd=n(cl,"P",{});var pX=s(wd);fIo=r(pX,`Note:
Loading a model from its configuration file does `),cle=n(pX,"STRONG",{});var FQr=s(cle);mIo=r(FQr,"not"),FQr.forEach(t),gIo=r(pX,` load the model weights. It only affects the
model\u2019s configuration. Use `),fle=n(pX,"CODE",{});var CQr=s(fle);hIo=r(CQr,"from_pretrained()"),CQr.forEach(t),pIo=r(pX,"to load the model weights."),pX.forEach(t),_Io=i(cl),mle=n(cl,"P",{});var MQr=s(mle);uIo=r(MQr,"Examples:"),MQr.forEach(t),bIo=i(cl),m(M3.$$.fragment,cl),cl.forEach(t),vIo=i(dl),Qe=n(dl,"DIV",{class:!0});var Wt=s(Qe);m(E3.$$.fragment,Wt),TIo=i(Wt),gle=n(Wt,"P",{});var EQr=s(gle);FIo=r(EQr,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),EQr.forEach(t),CIo=i(Wt),Ha=n(Wt,"P",{});var K9=s(Ha);MIo=r(K9,"The model class to instantiate is selected based on the "),hle=n(K9,"CODE",{});var yQr=s(hle);EIo=r(yQr,"model_type"),yQr.forEach(t),yIo=r(K9,` property of the config object (either
passed as an argument or loaded from `),ple=n(K9,"CODE",{});var wQr=s(ple);wIo=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),AIo=r(K9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(K9,"CODE",{});var AQr=s(_le);LIo=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),BIo=r(K9,":"),K9.forEach(t),kIo=i(Wt),Ad=n(Wt,"UL",{});var _X=s(Ad);N5=n(_X,"LI",{});var rEe=s(N5);ule=n(rEe,"STRONG",{});var LQr=s(ule);xIo=r(LQr,"unispeech-sat"),LQr.forEach(t),RIo=r(rEe," \u2014 "),hj=n(rEe,"A",{href:!0});var BQr=s(hj);SIo=r(BQr,"UniSpeechSatForXVector"),BQr.forEach(t),PIo=r(rEe," (UniSpeechSat model)"),rEe.forEach(t),$Io=i(_X),D5=n(_X,"LI",{});var tEe=s(D5);ble=n(tEe,"STRONG",{});var kQr=s(ble);IIo=r(kQr,"wav2vec2"),kQr.forEach(t),jIo=r(tEe," \u2014 "),pj=n(tEe,"A",{href:!0});var xQr=s(pj);NIo=r(xQr,"Wav2Vec2ForXVector"),xQr.forEach(t),DIo=r(tEe," (Wav2Vec2 model)"),tEe.forEach(t),qIo=i(_X),q5=n(_X,"LI",{});var aEe=s(q5);vle=n(aEe,"STRONG",{});var RQr=s(vle);OIo=r(RQr,"wavlm"),RQr.forEach(t),GIo=r(aEe," \u2014 "),_j=n(aEe,"A",{href:!0});var SQr=s(_j);XIo=r(SQr,"WavLMForXVector"),SQr.forEach(t),zIo=r(aEe," (WavLM model)"),aEe.forEach(t),_X.forEach(t),VIo=i(Wt),O5=n(Wt,"P",{});var nEe=s(O5);WIo=r(nEe,"The model is set in evaluation mode by default using "),Tle=n(nEe,"CODE",{});var PQr=s(Tle);QIo=r(PQr,"model.eval()"),PQr.forEach(t),HIo=r(nEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(nEe,"CODE",{});var $Qr=s(Fle);UIo=r($Qr,"model.train()"),$Qr.forEach(t),nEe.forEach(t),JIo=i(Wt),Cle=n(Wt,"P",{});var IQr=s(Cle);YIo=r(IQr,"Examples:"),IQr.forEach(t),KIo=i(Wt),m(y3.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),b6e=i(d),Ld=n(d,"H2",{class:!0});var C8e=s(Ld);G5=n(C8e,"A",{id:!0,class:!0,href:!0});var jQr=s(G5);Mle=n(jQr,"SPAN",{});var NQr=s(Mle);m(w3.$$.fragment,NQr),NQr.forEach(t),jQr.forEach(t),ZIo=i(C8e),Ele=n(C8e,"SPAN",{});var DQr=s(Ele);ejo=r(DQr,"AutoModelForMaskedImageModeling"),DQr.forEach(t),C8e.forEach(t),v6e=i(d),lr=n(d,"DIV",{class:!0});var fl=s(lr);m(A3.$$.fragment,fl),ojo=i(fl),Bd=n(fl,"P",{});var uX=s(Bd);rjo=r(uX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yle=n(uX,"CODE",{});var qQr=s(yle);tjo=r(qQr,"from_pretrained()"),qQr.forEach(t),ajo=r(uX,"class method or the "),wle=n(uX,"CODE",{});var OQr=s(wle);njo=r(OQr,"from_config()"),OQr.forEach(t),sjo=r(uX,`class
method.`),uX.forEach(t),ljo=i(fl),L3=n(fl,"P",{});var M8e=s(L3);ijo=r(M8e,"This class cannot be instantiated directly using "),Ale=n(M8e,"CODE",{});var GQr=s(Ale);djo=r(GQr,"__init__()"),GQr.forEach(t),cjo=r(M8e," (throws an error)."),M8e.forEach(t),fjo=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(B3.$$.fragment,ml),mjo=i(ml),Lle=n(ml,"P",{});var XQr=s(Lle);gjo=r(XQr,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XQr.forEach(t),hjo=i(ml),kd=n(ml,"P",{});var bX=s(kd);pjo=r(bX,`Note:
Loading a model from its configuration file does `),Ble=n(bX,"STRONG",{});var zQr=s(Ble);_jo=r(zQr,"not"),zQr.forEach(t),ujo=r(bX,` load the model weights. It only affects the
model\u2019s configuration. Use `),kle=n(bX,"CODE",{});var VQr=s(kle);bjo=r(VQr,"from_pretrained()"),VQr.forEach(t),vjo=r(bX,"to load the model weights."),bX.forEach(t),Tjo=i(ml),xle=n(ml,"P",{});var WQr=s(xle);Fjo=r(WQr,"Examples:"),WQr.forEach(t),Cjo=i(ml),m(k3.$$.fragment,ml),ml.forEach(t),Mjo=i(fl),He=n(fl,"DIV",{class:!0});var Qt=s(He);m(x3.$$.fragment,Qt),Ejo=i(Qt),Rle=n(Qt,"P",{});var QQr=s(Rle);yjo=r(QQr,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),QQr.forEach(t),wjo=i(Qt),Ua=n(Qt,"P",{});var Z9=s(Ua);Ajo=r(Z9,"The model class to instantiate is selected based on the "),Sle=n(Z9,"CODE",{});var HQr=s(Sle);Ljo=r(HQr,"model_type"),HQr.forEach(t),Bjo=r(Z9,` property of the config object (either
passed as an argument or loaded from `),Ple=n(Z9,"CODE",{});var UQr=s(Ple);kjo=r(UQr,"pretrained_model_name_or_path"),UQr.forEach(t),xjo=r(Z9,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$le=n(Z9,"CODE",{});var JQr=s($le);Rjo=r(JQr,"pretrained_model_name_or_path"),JQr.forEach(t),Sjo=r(Z9,":"),Z9.forEach(t),Pjo=i(Qt),xd=n(Qt,"UL",{});var vX=s(xd);X5=n(vX,"LI",{});var sEe=s(X5);Ile=n(sEe,"STRONG",{});var YQr=s(Ile);$jo=r(YQr,"deit"),YQr.forEach(t),Ijo=r(sEe," \u2014 "),uj=n(sEe,"A",{href:!0});var KQr=s(uj);jjo=r(KQr,"DeiTForMaskedImageModeling"),KQr.forEach(t),Njo=r(sEe," (DeiT model)"),sEe.forEach(t),Djo=i(vX),z5=n(vX,"LI",{});var lEe=s(z5);jle=n(lEe,"STRONG",{});var ZQr=s(jle);qjo=r(ZQr,"swin"),ZQr.forEach(t),Ojo=r(lEe," \u2014 "),bj=n(lEe,"A",{href:!0});var eHr=s(bj);Gjo=r(eHr,"SwinForMaskedImageModeling"),eHr.forEach(t),Xjo=r(lEe," (Swin model)"),lEe.forEach(t),zjo=i(vX),V5=n(vX,"LI",{});var iEe=s(V5);Nle=n(iEe,"STRONG",{});var oHr=s(Nle);Vjo=r(oHr,"vit"),oHr.forEach(t),Wjo=r(iEe," \u2014 "),vj=n(iEe,"A",{href:!0});var rHr=s(vj);Qjo=r(rHr,"ViTForMaskedImageModeling"),rHr.forEach(t),Hjo=r(iEe," (ViT model)"),iEe.forEach(t),vX.forEach(t),Ujo=i(Qt),W5=n(Qt,"P",{});var dEe=s(W5);Jjo=r(dEe,"The model is set in evaluation mode by default using "),Dle=n(dEe,"CODE",{});var tHr=s(Dle);Yjo=r(tHr,"model.eval()"),tHr.forEach(t),Kjo=r(dEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qle=n(dEe,"CODE",{});var aHr=s(qle);Zjo=r(aHr,"model.train()"),aHr.forEach(t),dEe.forEach(t),eNo=i(Qt),Ole=n(Qt,"P",{});var nHr=s(Ole);oNo=r(nHr,"Examples:"),nHr.forEach(t),rNo=i(Qt),m(R3.$$.fragment,Qt),Qt.forEach(t),fl.forEach(t),T6e=i(d),Rd=n(d,"H2",{class:!0});var E8e=s(Rd);Q5=n(E8e,"A",{id:!0,class:!0,href:!0});var sHr=s(Q5);Gle=n(sHr,"SPAN",{});var lHr=s(Gle);m(S3.$$.fragment,lHr),lHr.forEach(t),sHr.forEach(t),tNo=i(E8e),Xle=n(E8e,"SPAN",{});var iHr=s(Xle);aNo=r(iHr,"AutoModelForObjectDetection"),iHr.forEach(t),E8e.forEach(t),F6e=i(d),ir=n(d,"DIV",{class:!0});var gl=s(ir);m(P3.$$.fragment,gl),nNo=i(gl),Sd=n(gl,"P",{});var TX=s(Sd);sNo=r(TX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),zle=n(TX,"CODE",{});var dHr=s(zle);lNo=r(dHr,"from_pretrained()"),dHr.forEach(t),iNo=r(TX,"class method or the "),Vle=n(TX,"CODE",{});var cHr=s(Vle);dNo=r(cHr,"from_config()"),cHr.forEach(t),cNo=r(TX,`class
method.`),TX.forEach(t),fNo=i(gl),$3=n(gl,"P",{});var y8e=s($3);mNo=r(y8e,"This class cannot be instantiated directly using "),Wle=n(y8e,"CODE",{});var fHr=s(Wle);gNo=r(fHr,"__init__()"),fHr.forEach(t),hNo=r(y8e," (throws an error)."),y8e.forEach(t),pNo=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(I3.$$.fragment,hl),_No=i(hl),Qle=n(hl,"P",{});var mHr=s(Qle);uNo=r(mHr,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mHr.forEach(t),bNo=i(hl),Pd=n(hl,"P",{});var FX=s(Pd);vNo=r(FX,`Note:
Loading a model from its configuration file does `),Hle=n(FX,"STRONG",{});var gHr=s(Hle);TNo=r(gHr,"not"),gHr.forEach(t),FNo=r(FX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ule=n(FX,"CODE",{});var hHr=s(Ule);CNo=r(hHr,"from_pretrained()"),hHr.forEach(t),MNo=r(FX,"to load the model weights."),FX.forEach(t),ENo=i(hl),Jle=n(hl,"P",{});var pHr=s(Jle);yNo=r(pHr,"Examples:"),pHr.forEach(t),wNo=i(hl),m(j3.$$.fragment,hl),hl.forEach(t),ANo=i(gl),Ue=n(gl,"DIV",{class:!0});var Ht=s(Ue);m(N3.$$.fragment,Ht),LNo=i(Ht),Yle=n(Ht,"P",{});var _Hr=s(Yle);BNo=r(_Hr,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_Hr.forEach(t),kNo=i(Ht),Ja=n(Ht,"P",{});var eC=s(Ja);xNo=r(eC,"The model class to instantiate is selected based on the "),Kle=n(eC,"CODE",{});var uHr=s(Kle);RNo=r(uHr,"model_type"),uHr.forEach(t),SNo=r(eC,` property of the config object (either
passed as an argument or loaded from `),Zle=n(eC,"CODE",{});var bHr=s(Zle);PNo=r(bHr,"pretrained_model_name_or_path"),bHr.forEach(t),$No=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eie=n(eC,"CODE",{});var vHr=s(eie);INo=r(vHr,"pretrained_model_name_or_path"),vHr.forEach(t),jNo=r(eC,":"),eC.forEach(t),NNo=i(Ht),oie=n(Ht,"UL",{});var THr=s(oie);H5=n(THr,"LI",{});var cEe=s(H5);rie=n(cEe,"STRONG",{});var FHr=s(rie);DNo=r(FHr,"detr"),FHr.forEach(t),qNo=r(cEe," \u2014 "),Tj=n(cEe,"A",{href:!0});var CHr=s(Tj);ONo=r(CHr,"DetrForObjectDetection"),CHr.forEach(t),GNo=r(cEe," (DETR model)"),cEe.forEach(t),THr.forEach(t),XNo=i(Ht),U5=n(Ht,"P",{});var fEe=s(U5);zNo=r(fEe,"The model is set in evaluation mode by default using "),tie=n(fEe,"CODE",{});var MHr=s(tie);VNo=r(MHr,"model.eval()"),MHr.forEach(t),WNo=r(fEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(fEe,"CODE",{});var EHr=s(aie);QNo=r(EHr,"model.train()"),EHr.forEach(t),fEe.forEach(t),HNo=i(Ht),nie=n(Ht,"P",{});var yHr=s(nie);UNo=r(yHr,"Examples:"),yHr.forEach(t),JNo=i(Ht),m(D3.$$.fragment,Ht),Ht.forEach(t),gl.forEach(t),C6e=i(d),$d=n(d,"H2",{class:!0});var w8e=s($d);J5=n(w8e,"A",{id:!0,class:!0,href:!0});var wHr=s(J5);sie=n(wHr,"SPAN",{});var AHr=s(sie);m(q3.$$.fragment,AHr),AHr.forEach(t),wHr.forEach(t),YNo=i(w8e),lie=n(w8e,"SPAN",{});var LHr=s(lie);KNo=r(LHr,"AutoModelForImageSegmentation"),LHr.forEach(t),w8e.forEach(t),M6e=i(d),dr=n(d,"DIV",{class:!0});var pl=s(dr);m(O3.$$.fragment,pl),ZNo=i(pl),Id=n(pl,"P",{});var CX=s(Id);eDo=r(CX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iie=n(CX,"CODE",{});var BHr=s(iie);oDo=r(BHr,"from_pretrained()"),BHr.forEach(t),rDo=r(CX,"class method or the "),die=n(CX,"CODE",{});var kHr=s(die);tDo=r(kHr,"from_config()"),kHr.forEach(t),aDo=r(CX,`class
method.`),CX.forEach(t),nDo=i(pl),G3=n(pl,"P",{});var A8e=s(G3);sDo=r(A8e,"This class cannot be instantiated directly using "),cie=n(A8e,"CODE",{});var xHr=s(cie);lDo=r(xHr,"__init__()"),xHr.forEach(t),iDo=r(A8e," (throws an error)."),A8e.forEach(t),dDo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(X3.$$.fragment,_l),cDo=i(_l),fie=n(_l,"P",{});var RHr=s(fie);fDo=r(RHr,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),RHr.forEach(t),mDo=i(_l),jd=n(_l,"P",{});var MX=s(jd);gDo=r(MX,`Note:
Loading a model from its configuration file does `),mie=n(MX,"STRONG",{});var SHr=s(mie);hDo=r(SHr,"not"),SHr.forEach(t),pDo=r(MX,` load the model weights. It only affects the
model\u2019s configuration. Use `),gie=n(MX,"CODE",{});var PHr=s(gie);_Do=r(PHr,"from_pretrained()"),PHr.forEach(t),uDo=r(MX,"to load the model weights."),MX.forEach(t),bDo=i(_l),hie=n(_l,"P",{});var $Hr=s(hie);vDo=r($Hr,"Examples:"),$Hr.forEach(t),TDo=i(_l),m(z3.$$.fragment,_l),_l.forEach(t),FDo=i(pl),Je=n(pl,"DIV",{class:!0});var Ut=s(Je);m(V3.$$.fragment,Ut),CDo=i(Ut),pie=n(Ut,"P",{});var IHr=s(pie);MDo=r(IHr,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),IHr.forEach(t),EDo=i(Ut),Ya=n(Ut,"P",{});var oC=s(Ya);yDo=r(oC,"The model class to instantiate is selected based on the "),_ie=n(oC,"CODE",{});var jHr=s(_ie);wDo=r(jHr,"model_type"),jHr.forEach(t),ADo=r(oC,` property of the config object (either
passed as an argument or loaded from `),uie=n(oC,"CODE",{});var NHr=s(uie);LDo=r(NHr,"pretrained_model_name_or_path"),NHr.forEach(t),BDo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(oC,"CODE",{});var DHr=s(bie);kDo=r(DHr,"pretrained_model_name_or_path"),DHr.forEach(t),xDo=r(oC,":"),oC.forEach(t),RDo=i(Ut),vie=n(Ut,"UL",{});var qHr=s(vie);Y5=n(qHr,"LI",{});var mEe=s(Y5);Tie=n(mEe,"STRONG",{});var OHr=s(Tie);SDo=r(OHr,"detr"),OHr.forEach(t),PDo=r(mEe," \u2014 "),Fj=n(mEe,"A",{href:!0});var GHr=s(Fj);$Do=r(GHr,"DetrForSegmentation"),GHr.forEach(t),IDo=r(mEe," (DETR model)"),mEe.forEach(t),qHr.forEach(t),jDo=i(Ut),K5=n(Ut,"P",{});var gEe=s(K5);NDo=r(gEe,"The model is set in evaluation mode by default using "),Fie=n(gEe,"CODE",{});var XHr=s(Fie);DDo=r(XHr,"model.eval()"),XHr.forEach(t),qDo=r(gEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cie=n(gEe,"CODE",{});var zHr=s(Cie);ODo=r(zHr,"model.train()"),zHr.forEach(t),gEe.forEach(t),GDo=i(Ut),Mie=n(Ut,"P",{});var VHr=s(Mie);XDo=r(VHr,"Examples:"),VHr.forEach(t),zDo=i(Ut),m(W3.$$.fragment,Ut),Ut.forEach(t),pl.forEach(t),E6e=i(d),Nd=n(d,"H2",{class:!0});var L8e=s(Nd);Z5=n(L8e,"A",{id:!0,class:!0,href:!0});var WHr=s(Z5);Eie=n(WHr,"SPAN",{});var QHr=s(Eie);m(Q3.$$.fragment,QHr),QHr.forEach(t),WHr.forEach(t),VDo=i(L8e),yie=n(L8e,"SPAN",{});var HHr=s(yie);WDo=r(HHr,"TFAutoModel"),HHr.forEach(t),L8e.forEach(t),y6e=i(d),cr=n(d,"DIV",{class:!0});var ul=s(cr);m(H3.$$.fragment,ul),QDo=i(ul),Dd=n(ul,"P",{});var EX=s(Dd);HDo=r(EX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wie=n(EX,"CODE",{});var UHr=s(wie);UDo=r(UHr,"from_pretrained()"),UHr.forEach(t),JDo=r(EX,"class method or the "),Aie=n(EX,"CODE",{});var JHr=s(Aie);YDo=r(JHr,"from_config()"),JHr.forEach(t),KDo=r(EX,`class
method.`),EX.forEach(t),ZDo=i(ul),U3=n(ul,"P",{});var B8e=s(U3);eqo=r(B8e,"This class cannot be instantiated directly using "),Lie=n(B8e,"CODE",{});var YHr=s(Lie);oqo=r(YHr,"__init__()"),YHr.forEach(t),rqo=r(B8e," (throws an error)."),B8e.forEach(t),tqo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(J3.$$.fragment,bl),aqo=i(bl),Bie=n(bl,"P",{});var KHr=s(Bie);nqo=r(KHr,"Instantiates one of the base model classes of the library from a configuration."),KHr.forEach(t),sqo=i(bl),qd=n(bl,"P",{});var yX=s(qd);lqo=r(yX,`Note:
Loading a model from its configuration file does `),kie=n(yX,"STRONG",{});var ZHr=s(kie);iqo=r(ZHr,"not"),ZHr.forEach(t),dqo=r(yX,` load the model weights. It only affects the
model\u2019s configuration. Use `),xie=n(yX,"CODE",{});var eUr=s(xie);cqo=r(eUr,"from_pretrained()"),eUr.forEach(t),fqo=r(yX,"to load the model weights."),yX.forEach(t),mqo=i(bl),Rie=n(bl,"P",{});var oUr=s(Rie);gqo=r(oUr,"Examples:"),oUr.forEach(t),hqo=i(bl),m(Y3.$$.fragment,bl),bl.forEach(t),pqo=i(ul),mo=n(ul,"DIV",{class:!0});var ta=s(mo);m(K3.$$.fragment,ta),_qo=i(ta),Sie=n(ta,"P",{});var rUr=s(Sie);uqo=r(rUr,"Instantiate one of the base model classes of the library from a pretrained model."),rUr.forEach(t),bqo=i(ta),Ka=n(ta,"P",{});var rC=s(Ka);vqo=r(rC,"The model class to instantiate is selected based on the "),Pie=n(rC,"CODE",{});var tUr=s(Pie);Tqo=r(tUr,"model_type"),tUr.forEach(t),Fqo=r(rC,` property of the config object (either
passed as an argument or loaded from `),$ie=n(rC,"CODE",{});var aUr=s($ie);Cqo=r(aUr,"pretrained_model_name_or_path"),aUr.forEach(t),Mqo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iie=n(rC,"CODE",{});var nUr=s(Iie);Eqo=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),yqo=r(rC,":"),rC.forEach(t),wqo=i(ta),B=n(ta,"UL",{});var k=s(B);e2=n(k,"LI",{});var hEe=s(e2);jie=n(hEe,"STRONG",{});var sUr=s(jie);Aqo=r(sUr,"albert"),sUr.forEach(t),Lqo=r(hEe," \u2014 "),Cj=n(hEe,"A",{href:!0});var lUr=s(Cj);Bqo=r(lUr,"TFAlbertModel"),lUr.forEach(t),kqo=r(hEe," (ALBERT model)"),hEe.forEach(t),xqo=i(k),o2=n(k,"LI",{});var pEe=s(o2);Nie=n(pEe,"STRONG",{});var iUr=s(Nie);Rqo=r(iUr,"bart"),iUr.forEach(t),Sqo=r(pEe," \u2014 "),Mj=n(pEe,"A",{href:!0});var dUr=s(Mj);Pqo=r(dUr,"TFBartModel"),dUr.forEach(t),$qo=r(pEe," (BART model)"),pEe.forEach(t),Iqo=i(k),r2=n(k,"LI",{});var _Ee=s(r2);Die=n(_Ee,"STRONG",{});var cUr=s(Die);jqo=r(cUr,"bert"),cUr.forEach(t),Nqo=r(_Ee," \u2014 "),Ej=n(_Ee,"A",{href:!0});var fUr=s(Ej);Dqo=r(fUr,"TFBertModel"),fUr.forEach(t),qqo=r(_Ee," (BERT model)"),_Ee.forEach(t),Oqo=i(k),t2=n(k,"LI",{});var uEe=s(t2);qie=n(uEe,"STRONG",{});var mUr=s(qie);Gqo=r(mUr,"blenderbot"),mUr.forEach(t),Xqo=r(uEe," \u2014 "),yj=n(uEe,"A",{href:!0});var gUr=s(yj);zqo=r(gUr,"TFBlenderbotModel"),gUr.forEach(t),Vqo=r(uEe," (Blenderbot model)"),uEe.forEach(t),Wqo=i(k),a2=n(k,"LI",{});var bEe=s(a2);Oie=n(bEe,"STRONG",{});var hUr=s(Oie);Qqo=r(hUr,"blenderbot-small"),hUr.forEach(t),Hqo=r(bEe," \u2014 "),wj=n(bEe,"A",{href:!0});var pUr=s(wj);Uqo=r(pUr,"TFBlenderbotSmallModel"),pUr.forEach(t),Jqo=r(bEe," (BlenderbotSmall model)"),bEe.forEach(t),Yqo=i(k),n2=n(k,"LI",{});var vEe=s(n2);Gie=n(vEe,"STRONG",{});var _Ur=s(Gie);Kqo=r(_Ur,"camembert"),_Ur.forEach(t),Zqo=r(vEe," \u2014 "),Aj=n(vEe,"A",{href:!0});var uUr=s(Aj);eOo=r(uUr,"TFCamembertModel"),uUr.forEach(t),oOo=r(vEe," (CamemBERT model)"),vEe.forEach(t),rOo=i(k),s2=n(k,"LI",{});var TEe=s(s2);Xie=n(TEe,"STRONG",{});var bUr=s(Xie);tOo=r(bUr,"clip"),bUr.forEach(t),aOo=r(TEe," \u2014 "),Lj=n(TEe,"A",{href:!0});var vUr=s(Lj);nOo=r(vUr,"TFCLIPModel"),vUr.forEach(t),sOo=r(TEe," (CLIP model)"),TEe.forEach(t),lOo=i(k),l2=n(k,"LI",{});var FEe=s(l2);zie=n(FEe,"STRONG",{});var TUr=s(zie);iOo=r(TUr,"convbert"),TUr.forEach(t),dOo=r(FEe," \u2014 "),Bj=n(FEe,"A",{href:!0});var FUr=s(Bj);cOo=r(FUr,"TFConvBertModel"),FUr.forEach(t),fOo=r(FEe," (ConvBERT model)"),FEe.forEach(t),mOo=i(k),i2=n(k,"LI",{});var CEe=s(i2);Vie=n(CEe,"STRONG",{});var CUr=s(Vie);gOo=r(CUr,"ctrl"),CUr.forEach(t),hOo=r(CEe," \u2014 "),kj=n(CEe,"A",{href:!0});var MUr=s(kj);pOo=r(MUr,"TFCTRLModel"),MUr.forEach(t),_Oo=r(CEe," (CTRL model)"),CEe.forEach(t),uOo=i(k),d2=n(k,"LI",{});var MEe=s(d2);Wie=n(MEe,"STRONG",{});var EUr=s(Wie);bOo=r(EUr,"deberta"),EUr.forEach(t),vOo=r(MEe," \u2014 "),xj=n(MEe,"A",{href:!0});var yUr=s(xj);TOo=r(yUr,"TFDebertaModel"),yUr.forEach(t),FOo=r(MEe," (DeBERTa model)"),MEe.forEach(t),COo=i(k),c2=n(k,"LI",{});var EEe=s(c2);Qie=n(EEe,"STRONG",{});var wUr=s(Qie);MOo=r(wUr,"deberta-v2"),wUr.forEach(t),EOo=r(EEe," \u2014 "),Rj=n(EEe,"A",{href:!0});var AUr=s(Rj);yOo=r(AUr,"TFDebertaV2Model"),AUr.forEach(t),wOo=r(EEe," (DeBERTa-v2 model)"),EEe.forEach(t),AOo=i(k),f2=n(k,"LI",{});var yEe=s(f2);Hie=n(yEe,"STRONG",{});var LUr=s(Hie);LOo=r(LUr,"distilbert"),LUr.forEach(t),BOo=r(yEe," \u2014 "),Sj=n(yEe,"A",{href:!0});var BUr=s(Sj);kOo=r(BUr,"TFDistilBertModel"),BUr.forEach(t),xOo=r(yEe," (DistilBERT model)"),yEe.forEach(t),ROo=i(k),m2=n(k,"LI",{});var wEe=s(m2);Uie=n(wEe,"STRONG",{});var kUr=s(Uie);SOo=r(kUr,"dpr"),kUr.forEach(t),POo=r(wEe," \u2014 "),Pj=n(wEe,"A",{href:!0});var xUr=s(Pj);$Oo=r(xUr,"TFDPRQuestionEncoder"),xUr.forEach(t),IOo=r(wEe," (DPR model)"),wEe.forEach(t),jOo=i(k),g2=n(k,"LI",{});var AEe=s(g2);Jie=n(AEe,"STRONG",{});var RUr=s(Jie);NOo=r(RUr,"electra"),RUr.forEach(t),DOo=r(AEe," \u2014 "),$j=n(AEe,"A",{href:!0});var SUr=s($j);qOo=r(SUr,"TFElectraModel"),SUr.forEach(t),OOo=r(AEe," (ELECTRA model)"),AEe.forEach(t),GOo=i(k),h2=n(k,"LI",{});var LEe=s(h2);Yie=n(LEe,"STRONG",{});var PUr=s(Yie);XOo=r(PUr,"flaubert"),PUr.forEach(t),zOo=r(LEe," \u2014 "),Ij=n(LEe,"A",{href:!0});var $Ur=s(Ij);VOo=r($Ur,"TFFlaubertModel"),$Ur.forEach(t),WOo=r(LEe," (FlauBERT model)"),LEe.forEach(t),QOo=i(k),Ms=n(k,"LI",{});var U0=s(Ms);Kie=n(U0,"STRONG",{});var IUr=s(Kie);HOo=r(IUr,"funnel"),IUr.forEach(t),UOo=r(U0," \u2014 "),jj=n(U0,"A",{href:!0});var jUr=s(jj);JOo=r(jUr,"TFFunnelModel"),jUr.forEach(t),YOo=r(U0," or "),Nj=n(U0,"A",{href:!0});var NUr=s(Nj);KOo=r(NUr,"TFFunnelBaseModel"),NUr.forEach(t),ZOo=r(U0," (Funnel Transformer model)"),U0.forEach(t),eGo=i(k),p2=n(k,"LI",{});var BEe=s(p2);Zie=n(BEe,"STRONG",{});var DUr=s(Zie);oGo=r(DUr,"gpt2"),DUr.forEach(t),rGo=r(BEe," \u2014 "),Dj=n(BEe,"A",{href:!0});var qUr=s(Dj);tGo=r(qUr,"TFGPT2Model"),qUr.forEach(t),aGo=r(BEe," (OpenAI GPT-2 model)"),BEe.forEach(t),nGo=i(k),_2=n(k,"LI",{});var kEe=s(_2);ede=n(kEe,"STRONG",{});var OUr=s(ede);sGo=r(OUr,"hubert"),OUr.forEach(t),lGo=r(kEe," \u2014 "),qj=n(kEe,"A",{href:!0});var GUr=s(qj);iGo=r(GUr,"TFHubertModel"),GUr.forEach(t),dGo=r(kEe," (Hubert model)"),kEe.forEach(t),cGo=i(k),u2=n(k,"LI",{});var xEe=s(u2);ode=n(xEe,"STRONG",{});var XUr=s(ode);fGo=r(XUr,"layoutlm"),XUr.forEach(t),mGo=r(xEe," \u2014 "),Oj=n(xEe,"A",{href:!0});var zUr=s(Oj);gGo=r(zUr,"TFLayoutLMModel"),zUr.forEach(t),hGo=r(xEe," (LayoutLM model)"),xEe.forEach(t),pGo=i(k),b2=n(k,"LI",{});var REe=s(b2);rde=n(REe,"STRONG",{});var VUr=s(rde);_Go=r(VUr,"led"),VUr.forEach(t),uGo=r(REe," \u2014 "),Gj=n(REe,"A",{href:!0});var WUr=s(Gj);bGo=r(WUr,"TFLEDModel"),WUr.forEach(t),vGo=r(REe," (LED model)"),REe.forEach(t),TGo=i(k),v2=n(k,"LI",{});var SEe=s(v2);tde=n(SEe,"STRONG",{});var QUr=s(tde);FGo=r(QUr,"longformer"),QUr.forEach(t),CGo=r(SEe," \u2014 "),Xj=n(SEe,"A",{href:!0});var HUr=s(Xj);MGo=r(HUr,"TFLongformerModel"),HUr.forEach(t),EGo=r(SEe," (Longformer model)"),SEe.forEach(t),yGo=i(k),T2=n(k,"LI",{});var PEe=s(T2);ade=n(PEe,"STRONG",{});var UUr=s(ade);wGo=r(UUr,"lxmert"),UUr.forEach(t),AGo=r(PEe," \u2014 "),zj=n(PEe,"A",{href:!0});var JUr=s(zj);LGo=r(JUr,"TFLxmertModel"),JUr.forEach(t),BGo=r(PEe," (LXMERT model)"),PEe.forEach(t),kGo=i(k),F2=n(k,"LI",{});var $Ee=s(F2);nde=n($Ee,"STRONG",{});var YUr=s(nde);xGo=r(YUr,"marian"),YUr.forEach(t),RGo=r($Ee," \u2014 "),Vj=n($Ee,"A",{href:!0});var KUr=s(Vj);SGo=r(KUr,"TFMarianModel"),KUr.forEach(t),PGo=r($Ee," (Marian model)"),$Ee.forEach(t),$Go=i(k),C2=n(k,"LI",{});var IEe=s(C2);sde=n(IEe,"STRONG",{});var ZUr=s(sde);IGo=r(ZUr,"mbart"),ZUr.forEach(t),jGo=r(IEe," \u2014 "),Wj=n(IEe,"A",{href:!0});var eJr=s(Wj);NGo=r(eJr,"TFMBartModel"),eJr.forEach(t),DGo=r(IEe," (mBART model)"),IEe.forEach(t),qGo=i(k),M2=n(k,"LI",{});var jEe=s(M2);lde=n(jEe,"STRONG",{});var oJr=s(lde);OGo=r(oJr,"mobilebert"),oJr.forEach(t),GGo=r(jEe," \u2014 "),Qj=n(jEe,"A",{href:!0});var rJr=s(Qj);XGo=r(rJr,"TFMobileBertModel"),rJr.forEach(t),zGo=r(jEe," (MobileBERT model)"),jEe.forEach(t),VGo=i(k),E2=n(k,"LI",{});var NEe=s(E2);ide=n(NEe,"STRONG",{});var tJr=s(ide);WGo=r(tJr,"mpnet"),tJr.forEach(t),QGo=r(NEe," \u2014 "),Hj=n(NEe,"A",{href:!0});var aJr=s(Hj);HGo=r(aJr,"TFMPNetModel"),aJr.forEach(t),UGo=r(NEe," (MPNet model)"),NEe.forEach(t),JGo=i(k),y2=n(k,"LI",{});var DEe=s(y2);dde=n(DEe,"STRONG",{});var nJr=s(dde);YGo=r(nJr,"mt5"),nJr.forEach(t),KGo=r(DEe," \u2014 "),Uj=n(DEe,"A",{href:!0});var sJr=s(Uj);ZGo=r(sJr,"TFMT5Model"),sJr.forEach(t),eXo=r(DEe," (mT5 model)"),DEe.forEach(t),oXo=i(k),w2=n(k,"LI",{});var qEe=s(w2);cde=n(qEe,"STRONG",{});var lJr=s(cde);rXo=r(lJr,"openai-gpt"),lJr.forEach(t),tXo=r(qEe," \u2014 "),Jj=n(qEe,"A",{href:!0});var iJr=s(Jj);aXo=r(iJr,"TFOpenAIGPTModel"),iJr.forEach(t),nXo=r(qEe," (OpenAI GPT model)"),qEe.forEach(t),sXo=i(k),A2=n(k,"LI",{});var OEe=s(A2);fde=n(OEe,"STRONG",{});var dJr=s(fde);lXo=r(dJr,"pegasus"),dJr.forEach(t),iXo=r(OEe," \u2014 "),Yj=n(OEe,"A",{href:!0});var cJr=s(Yj);dXo=r(cJr,"TFPegasusModel"),cJr.forEach(t),cXo=r(OEe," (Pegasus model)"),OEe.forEach(t),fXo=i(k),L2=n(k,"LI",{});var GEe=s(L2);mde=n(GEe,"STRONG",{});var fJr=s(mde);mXo=r(fJr,"rembert"),fJr.forEach(t),gXo=r(GEe," \u2014 "),Kj=n(GEe,"A",{href:!0});var mJr=s(Kj);hXo=r(mJr,"TFRemBertModel"),mJr.forEach(t),pXo=r(GEe," (RemBERT model)"),GEe.forEach(t),_Xo=i(k),B2=n(k,"LI",{});var XEe=s(B2);gde=n(XEe,"STRONG",{});var gJr=s(gde);uXo=r(gJr,"roberta"),gJr.forEach(t),bXo=r(XEe," \u2014 "),Zj=n(XEe,"A",{href:!0});var hJr=s(Zj);vXo=r(hJr,"TFRobertaModel"),hJr.forEach(t),TXo=r(XEe," (RoBERTa model)"),XEe.forEach(t),FXo=i(k),k2=n(k,"LI",{});var zEe=s(k2);hde=n(zEe,"STRONG",{});var pJr=s(hde);CXo=r(pJr,"roformer"),pJr.forEach(t),MXo=r(zEe," \u2014 "),eN=n(zEe,"A",{href:!0});var _Jr=s(eN);EXo=r(_Jr,"TFRoFormerModel"),_Jr.forEach(t),yXo=r(zEe," (RoFormer model)"),zEe.forEach(t),wXo=i(k),x2=n(k,"LI",{});var VEe=s(x2);pde=n(VEe,"STRONG",{});var uJr=s(pde);AXo=r(uJr,"speech_to_text"),uJr.forEach(t),LXo=r(VEe," \u2014 "),_de=n(VEe,"CODE",{});var bJr=s(_de);BXo=r(bJr,"TFSpeech2TextModel"),bJr.forEach(t),kXo=r(VEe,"(Speech2Text model)"),VEe.forEach(t),xXo=i(k),R2=n(k,"LI",{});var WEe=s(R2);ude=n(WEe,"STRONG",{});var vJr=s(ude);RXo=r(vJr,"t5"),vJr.forEach(t),SXo=r(WEe," \u2014 "),oN=n(WEe,"A",{href:!0});var TJr=s(oN);PXo=r(TJr,"TFT5Model"),TJr.forEach(t),$Xo=r(WEe," (T5 model)"),WEe.forEach(t),IXo=i(k),S2=n(k,"LI",{});var QEe=s(S2);bde=n(QEe,"STRONG",{});var FJr=s(bde);jXo=r(FJr,"tapas"),FJr.forEach(t),NXo=r(QEe," \u2014 "),rN=n(QEe,"A",{href:!0});var CJr=s(rN);DXo=r(CJr,"TFTapasModel"),CJr.forEach(t),qXo=r(QEe," (TAPAS model)"),QEe.forEach(t),OXo=i(k),P2=n(k,"LI",{});var HEe=s(P2);vde=n(HEe,"STRONG",{});var MJr=s(vde);GXo=r(MJr,"transfo-xl"),MJr.forEach(t),XXo=r(HEe," \u2014 "),tN=n(HEe,"A",{href:!0});var EJr=s(tN);zXo=r(EJr,"TFTransfoXLModel"),EJr.forEach(t),VXo=r(HEe," (Transformer-XL model)"),HEe.forEach(t),WXo=i(k),$2=n(k,"LI",{});var UEe=s($2);Tde=n(UEe,"STRONG",{});var yJr=s(Tde);QXo=r(yJr,"vit"),yJr.forEach(t),HXo=r(UEe," \u2014 "),aN=n(UEe,"A",{href:!0});var wJr=s(aN);UXo=r(wJr,"TFViTModel"),wJr.forEach(t),JXo=r(UEe," (ViT model)"),UEe.forEach(t),YXo=i(k),I2=n(k,"LI",{});var JEe=s(I2);Fde=n(JEe,"STRONG",{});var AJr=s(Fde);KXo=r(AJr,"wav2vec2"),AJr.forEach(t),ZXo=r(JEe," \u2014 "),nN=n(JEe,"A",{href:!0});var LJr=s(nN);ezo=r(LJr,"TFWav2Vec2Model"),LJr.forEach(t),ozo=r(JEe," (Wav2Vec2 model)"),JEe.forEach(t),rzo=i(k),j2=n(k,"LI",{});var YEe=s(j2);Cde=n(YEe,"STRONG",{});var BJr=s(Cde);tzo=r(BJr,"xlm"),BJr.forEach(t),azo=r(YEe," \u2014 "),sN=n(YEe,"A",{href:!0});var kJr=s(sN);nzo=r(kJr,"TFXLMModel"),kJr.forEach(t),szo=r(YEe," (XLM model)"),YEe.forEach(t),lzo=i(k),N2=n(k,"LI",{});var KEe=s(N2);Mde=n(KEe,"STRONG",{});var xJr=s(Mde);izo=r(xJr,"xlm-roberta"),xJr.forEach(t),dzo=r(KEe," \u2014 "),lN=n(KEe,"A",{href:!0});var RJr=s(lN);czo=r(RJr,"TFXLMRobertaModel"),RJr.forEach(t),fzo=r(KEe," (XLM-RoBERTa model)"),KEe.forEach(t),mzo=i(k),D2=n(k,"LI",{});var ZEe=s(D2);Ede=n(ZEe,"STRONG",{});var SJr=s(Ede);gzo=r(SJr,"xlnet"),SJr.forEach(t),hzo=r(ZEe," \u2014 "),iN=n(ZEe,"A",{href:!0});var PJr=s(iN);pzo=r(PJr,"TFXLNetModel"),PJr.forEach(t),_zo=r(ZEe," (XLNet model)"),ZEe.forEach(t),k.forEach(t),uzo=i(ta),yde=n(ta,"P",{});var $Jr=s(yde);bzo=r($Jr,"Examples:"),$Jr.forEach(t),vzo=i(ta),m(Z3.$$.fragment,ta),ta.forEach(t),ul.forEach(t),w6e=i(d),Od=n(d,"H2",{class:!0});var k8e=s(Od);q2=n(k8e,"A",{id:!0,class:!0,href:!0});var IJr=s(q2);wde=n(IJr,"SPAN",{});var jJr=s(wde);m(ey.$$.fragment,jJr),jJr.forEach(t),IJr.forEach(t),Tzo=i(k8e),Ade=n(k8e,"SPAN",{});var NJr=s(Ade);Fzo=r(NJr,"TFAutoModelForPreTraining"),NJr.forEach(t),k8e.forEach(t),A6e=i(d),fr=n(d,"DIV",{class:!0});var vl=s(fr);m(oy.$$.fragment,vl),Czo=i(vl),Gd=n(vl,"P",{});var wX=s(Gd);Mzo=r(wX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Lde=n(wX,"CODE",{});var DJr=s(Lde);Ezo=r(DJr,"from_pretrained()"),DJr.forEach(t),yzo=r(wX,"class method or the "),Bde=n(wX,"CODE",{});var qJr=s(Bde);wzo=r(qJr,"from_config()"),qJr.forEach(t),Azo=r(wX,`class
method.`),wX.forEach(t),Lzo=i(vl),ry=n(vl,"P",{});var x8e=s(ry);Bzo=r(x8e,"This class cannot be instantiated directly using "),kde=n(x8e,"CODE",{});var OJr=s(kde);kzo=r(OJr,"__init__()"),OJr.forEach(t),xzo=r(x8e," (throws an error)."),x8e.forEach(t),Rzo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(ty.$$.fragment,Tl),Szo=i(Tl),xde=n(Tl,"P",{});var GJr=s(xde);Pzo=r(GJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GJr.forEach(t),$zo=i(Tl),Xd=n(Tl,"P",{});var AX=s(Xd);Izo=r(AX,`Note:
Loading a model from its configuration file does `),Rde=n(AX,"STRONG",{});var XJr=s(Rde);jzo=r(XJr,"not"),XJr.forEach(t),Nzo=r(AX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sde=n(AX,"CODE",{});var zJr=s(Sde);Dzo=r(zJr,"from_pretrained()"),zJr.forEach(t),qzo=r(AX,"to load the model weights."),AX.forEach(t),Ozo=i(Tl),Pde=n(Tl,"P",{});var VJr=s(Pde);Gzo=r(VJr,"Examples:"),VJr.forEach(t),Xzo=i(Tl),m(ay.$$.fragment,Tl),Tl.forEach(t),zzo=i(vl),go=n(vl,"DIV",{class:!0});var aa=s(go);m(ny.$$.fragment,aa),Vzo=i(aa),$de=n(aa,"P",{});var WJr=s($de);Wzo=r(WJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WJr.forEach(t),Qzo=i(aa),Za=n(aa,"P",{});var tC=s(Za);Hzo=r(tC,"The model class to instantiate is selected based on the "),Ide=n(tC,"CODE",{});var QJr=s(Ide);Uzo=r(QJr,"model_type"),QJr.forEach(t),Jzo=r(tC,` property of the config object (either
passed as an argument or loaded from `),jde=n(tC,"CODE",{});var HJr=s(jde);Yzo=r(HJr,"pretrained_model_name_or_path"),HJr.forEach(t),Kzo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nde=n(tC,"CODE",{});var UJr=s(Nde);Zzo=r(UJr,"pretrained_model_name_or_path"),UJr.forEach(t),eVo=r(tC,":"),tC.forEach(t),oVo=i(aa),H=n(aa,"UL",{});var U=s(H);O2=n(U,"LI",{});var e3e=s(O2);Dde=n(e3e,"STRONG",{});var JJr=s(Dde);rVo=r(JJr,"albert"),JJr.forEach(t),tVo=r(e3e," \u2014 "),dN=n(e3e,"A",{href:!0});var YJr=s(dN);aVo=r(YJr,"TFAlbertForPreTraining"),YJr.forEach(t),nVo=r(e3e," (ALBERT model)"),e3e.forEach(t),sVo=i(U),G2=n(U,"LI",{});var o3e=s(G2);qde=n(o3e,"STRONG",{});var KJr=s(qde);lVo=r(KJr,"bart"),KJr.forEach(t),iVo=r(o3e," \u2014 "),cN=n(o3e,"A",{href:!0});var ZJr=s(cN);dVo=r(ZJr,"TFBartForConditionalGeneration"),ZJr.forEach(t),cVo=r(o3e," (BART model)"),o3e.forEach(t),fVo=i(U),X2=n(U,"LI",{});var r3e=s(X2);Ode=n(r3e,"STRONG",{});var eYr=s(Ode);mVo=r(eYr,"bert"),eYr.forEach(t),gVo=r(r3e," \u2014 "),fN=n(r3e,"A",{href:!0});var oYr=s(fN);hVo=r(oYr,"TFBertForPreTraining"),oYr.forEach(t),pVo=r(r3e," (BERT model)"),r3e.forEach(t),_Vo=i(U),z2=n(U,"LI",{});var t3e=s(z2);Gde=n(t3e,"STRONG",{});var rYr=s(Gde);uVo=r(rYr,"camembert"),rYr.forEach(t),bVo=r(t3e," \u2014 "),mN=n(t3e,"A",{href:!0});var tYr=s(mN);vVo=r(tYr,"TFCamembertForMaskedLM"),tYr.forEach(t),TVo=r(t3e," (CamemBERT model)"),t3e.forEach(t),FVo=i(U),V2=n(U,"LI",{});var a3e=s(V2);Xde=n(a3e,"STRONG",{});var aYr=s(Xde);CVo=r(aYr,"ctrl"),aYr.forEach(t),MVo=r(a3e," \u2014 "),gN=n(a3e,"A",{href:!0});var nYr=s(gN);EVo=r(nYr,"TFCTRLLMHeadModel"),nYr.forEach(t),yVo=r(a3e," (CTRL model)"),a3e.forEach(t),wVo=i(U),W2=n(U,"LI",{});var n3e=s(W2);zde=n(n3e,"STRONG",{});var sYr=s(zde);AVo=r(sYr,"distilbert"),sYr.forEach(t),LVo=r(n3e," \u2014 "),hN=n(n3e,"A",{href:!0});var lYr=s(hN);BVo=r(lYr,"TFDistilBertForMaskedLM"),lYr.forEach(t),kVo=r(n3e," (DistilBERT model)"),n3e.forEach(t),xVo=i(U),Q2=n(U,"LI",{});var s3e=s(Q2);Vde=n(s3e,"STRONG",{});var iYr=s(Vde);RVo=r(iYr,"electra"),iYr.forEach(t),SVo=r(s3e," \u2014 "),pN=n(s3e,"A",{href:!0});var dYr=s(pN);PVo=r(dYr,"TFElectraForPreTraining"),dYr.forEach(t),$Vo=r(s3e," (ELECTRA model)"),s3e.forEach(t),IVo=i(U),H2=n(U,"LI",{});var l3e=s(H2);Wde=n(l3e,"STRONG",{});var cYr=s(Wde);jVo=r(cYr,"flaubert"),cYr.forEach(t),NVo=r(l3e," \u2014 "),_N=n(l3e,"A",{href:!0});var fYr=s(_N);DVo=r(fYr,"TFFlaubertWithLMHeadModel"),fYr.forEach(t),qVo=r(l3e," (FlauBERT model)"),l3e.forEach(t),OVo=i(U),U2=n(U,"LI",{});var i3e=s(U2);Qde=n(i3e,"STRONG",{});var mYr=s(Qde);GVo=r(mYr,"funnel"),mYr.forEach(t),XVo=r(i3e," \u2014 "),uN=n(i3e,"A",{href:!0});var gYr=s(uN);zVo=r(gYr,"TFFunnelForPreTraining"),gYr.forEach(t),VVo=r(i3e," (Funnel Transformer model)"),i3e.forEach(t),WVo=i(U),J2=n(U,"LI",{});var d3e=s(J2);Hde=n(d3e,"STRONG",{});var hYr=s(Hde);QVo=r(hYr,"gpt2"),hYr.forEach(t),HVo=r(d3e," \u2014 "),bN=n(d3e,"A",{href:!0});var pYr=s(bN);UVo=r(pYr,"TFGPT2LMHeadModel"),pYr.forEach(t),JVo=r(d3e," (OpenAI GPT-2 model)"),d3e.forEach(t),YVo=i(U),Y2=n(U,"LI",{});var c3e=s(Y2);Ude=n(c3e,"STRONG",{});var _Yr=s(Ude);KVo=r(_Yr,"layoutlm"),_Yr.forEach(t),ZVo=r(c3e," \u2014 "),vN=n(c3e,"A",{href:!0});var uYr=s(vN);eWo=r(uYr,"TFLayoutLMForMaskedLM"),uYr.forEach(t),oWo=r(c3e," (LayoutLM model)"),c3e.forEach(t),rWo=i(U),K2=n(U,"LI",{});var f3e=s(K2);Jde=n(f3e,"STRONG",{});var bYr=s(Jde);tWo=r(bYr,"lxmert"),bYr.forEach(t),aWo=r(f3e," \u2014 "),TN=n(f3e,"A",{href:!0});var vYr=s(TN);nWo=r(vYr,"TFLxmertForPreTraining"),vYr.forEach(t),sWo=r(f3e," (LXMERT model)"),f3e.forEach(t),lWo=i(U),Z2=n(U,"LI",{});var m3e=s(Z2);Yde=n(m3e,"STRONG",{});var TYr=s(Yde);iWo=r(TYr,"mobilebert"),TYr.forEach(t),dWo=r(m3e," \u2014 "),FN=n(m3e,"A",{href:!0});var FYr=s(FN);cWo=r(FYr,"TFMobileBertForPreTraining"),FYr.forEach(t),fWo=r(m3e," (MobileBERT model)"),m3e.forEach(t),mWo=i(U),ev=n(U,"LI",{});var g3e=s(ev);Kde=n(g3e,"STRONG",{});var CYr=s(Kde);gWo=r(CYr,"mpnet"),CYr.forEach(t),hWo=r(g3e," \u2014 "),CN=n(g3e,"A",{href:!0});var MYr=s(CN);pWo=r(MYr,"TFMPNetForMaskedLM"),MYr.forEach(t),_Wo=r(g3e," (MPNet model)"),g3e.forEach(t),uWo=i(U),ov=n(U,"LI",{});var h3e=s(ov);Zde=n(h3e,"STRONG",{});var EYr=s(Zde);bWo=r(EYr,"openai-gpt"),EYr.forEach(t),vWo=r(h3e," \u2014 "),MN=n(h3e,"A",{href:!0});var yYr=s(MN);TWo=r(yYr,"TFOpenAIGPTLMHeadModel"),yYr.forEach(t),FWo=r(h3e," (OpenAI GPT model)"),h3e.forEach(t),CWo=i(U),rv=n(U,"LI",{});var p3e=s(rv);ece=n(p3e,"STRONG",{});var wYr=s(ece);MWo=r(wYr,"roberta"),wYr.forEach(t),EWo=r(p3e," \u2014 "),EN=n(p3e,"A",{href:!0});var AYr=s(EN);yWo=r(AYr,"TFRobertaForMaskedLM"),AYr.forEach(t),wWo=r(p3e," (RoBERTa model)"),p3e.forEach(t),AWo=i(U),tv=n(U,"LI",{});var _3e=s(tv);oce=n(_3e,"STRONG",{});var LYr=s(oce);LWo=r(LYr,"t5"),LYr.forEach(t),BWo=r(_3e," \u2014 "),yN=n(_3e,"A",{href:!0});var BYr=s(yN);kWo=r(BYr,"TFT5ForConditionalGeneration"),BYr.forEach(t),xWo=r(_3e," (T5 model)"),_3e.forEach(t),RWo=i(U),av=n(U,"LI",{});var u3e=s(av);rce=n(u3e,"STRONG",{});var kYr=s(rce);SWo=r(kYr,"tapas"),kYr.forEach(t),PWo=r(u3e," \u2014 "),wN=n(u3e,"A",{href:!0});var xYr=s(wN);$Wo=r(xYr,"TFTapasForMaskedLM"),xYr.forEach(t),IWo=r(u3e," (TAPAS model)"),u3e.forEach(t),jWo=i(U),nv=n(U,"LI",{});var b3e=s(nv);tce=n(b3e,"STRONG",{});var RYr=s(tce);NWo=r(RYr,"transfo-xl"),RYr.forEach(t),DWo=r(b3e," \u2014 "),AN=n(b3e,"A",{href:!0});var SYr=s(AN);qWo=r(SYr,"TFTransfoXLLMHeadModel"),SYr.forEach(t),OWo=r(b3e," (Transformer-XL model)"),b3e.forEach(t),GWo=i(U),sv=n(U,"LI",{});var v3e=s(sv);ace=n(v3e,"STRONG",{});var PYr=s(ace);XWo=r(PYr,"xlm"),PYr.forEach(t),zWo=r(v3e," \u2014 "),LN=n(v3e,"A",{href:!0});var $Yr=s(LN);VWo=r($Yr,"TFXLMWithLMHeadModel"),$Yr.forEach(t),WWo=r(v3e," (XLM model)"),v3e.forEach(t),QWo=i(U),lv=n(U,"LI",{});var T3e=s(lv);nce=n(T3e,"STRONG",{});var IYr=s(nce);HWo=r(IYr,"xlm-roberta"),IYr.forEach(t),UWo=r(T3e," \u2014 "),BN=n(T3e,"A",{href:!0});var jYr=s(BN);JWo=r(jYr,"TFXLMRobertaForMaskedLM"),jYr.forEach(t),YWo=r(T3e," (XLM-RoBERTa model)"),T3e.forEach(t),KWo=i(U),iv=n(U,"LI",{});var F3e=s(iv);sce=n(F3e,"STRONG",{});var NYr=s(sce);ZWo=r(NYr,"xlnet"),NYr.forEach(t),eQo=r(F3e," \u2014 "),kN=n(F3e,"A",{href:!0});var DYr=s(kN);oQo=r(DYr,"TFXLNetLMHeadModel"),DYr.forEach(t),rQo=r(F3e," (XLNet model)"),F3e.forEach(t),U.forEach(t),tQo=i(aa),lce=n(aa,"P",{});var qYr=s(lce);aQo=r(qYr,"Examples:"),qYr.forEach(t),nQo=i(aa),m(sy.$$.fragment,aa),aa.forEach(t),vl.forEach(t),L6e=i(d),zd=n(d,"H2",{class:!0});var R8e=s(zd);dv=n(R8e,"A",{id:!0,class:!0,href:!0});var OYr=s(dv);ice=n(OYr,"SPAN",{});var GYr=s(ice);m(ly.$$.fragment,GYr),GYr.forEach(t),OYr.forEach(t),sQo=i(R8e),dce=n(R8e,"SPAN",{});var XYr=s(dce);lQo=r(XYr,"TFAutoModelForCausalLM"),XYr.forEach(t),R8e.forEach(t),B6e=i(d),mr=n(d,"DIV",{class:!0});var Fl=s(mr);m(iy.$$.fragment,Fl),iQo=i(Fl),Vd=n(Fl,"P",{});var LX=s(Vd);dQo=r(LX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),cce=n(LX,"CODE",{});var zYr=s(cce);cQo=r(zYr,"from_pretrained()"),zYr.forEach(t),fQo=r(LX,"class method or the "),fce=n(LX,"CODE",{});var VYr=s(fce);mQo=r(VYr,"from_config()"),VYr.forEach(t),gQo=r(LX,`class
method.`),LX.forEach(t),hQo=i(Fl),dy=n(Fl,"P",{});var S8e=s(dy);pQo=r(S8e,"This class cannot be instantiated directly using "),mce=n(S8e,"CODE",{});var WYr=s(mce);_Qo=r(WYr,"__init__()"),WYr.forEach(t),uQo=r(S8e," (throws an error)."),S8e.forEach(t),bQo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Cl=s(tt);m(cy.$$.fragment,Cl),vQo=i(Cl),gce=n(Cl,"P",{});var QYr=s(gce);TQo=r(QYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QYr.forEach(t),FQo=i(Cl),Wd=n(Cl,"P",{});var BX=s(Wd);CQo=r(BX,`Note:
Loading a model from its configuration file does `),hce=n(BX,"STRONG",{});var HYr=s(hce);MQo=r(HYr,"not"),HYr.forEach(t),EQo=r(BX,` load the model weights. It only affects the
model\u2019s configuration. Use `),pce=n(BX,"CODE",{});var UYr=s(pce);yQo=r(UYr,"from_pretrained()"),UYr.forEach(t),wQo=r(BX,"to load the model weights."),BX.forEach(t),AQo=i(Cl),_ce=n(Cl,"P",{});var JYr=s(_ce);LQo=r(JYr,"Examples:"),JYr.forEach(t),BQo=i(Cl),m(fy.$$.fragment,Cl),Cl.forEach(t),kQo=i(Fl),ho=n(Fl,"DIV",{class:!0});var na=s(ho);m(my.$$.fragment,na),xQo=i(na),uce=n(na,"P",{});var YYr=s(uce);RQo=r(YYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YYr.forEach(t),SQo=i(na),en=n(na,"P",{});var aC=s(en);PQo=r(aC,"The model class to instantiate is selected based on the "),bce=n(aC,"CODE",{});var KYr=s(bce);$Qo=r(KYr,"model_type"),KYr.forEach(t),IQo=r(aC,` property of the config object (either
passed as an argument or loaded from `),vce=n(aC,"CODE",{});var ZYr=s(vce);jQo=r(ZYr,"pretrained_model_name_or_path"),ZYr.forEach(t),NQo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=n(aC,"CODE",{});var eKr=s(Tce);DQo=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),qQo=r(aC,":"),aC.forEach(t),OQo=i(na),he=n(na,"UL",{});var Me=s(he);cv=n(Me,"LI",{});var C3e=s(cv);Fce=n(C3e,"STRONG",{});var oKr=s(Fce);GQo=r(oKr,"bert"),oKr.forEach(t),XQo=r(C3e," \u2014 "),xN=n(C3e,"A",{href:!0});var rKr=s(xN);zQo=r(rKr,"TFBertLMHeadModel"),rKr.forEach(t),VQo=r(C3e," (BERT model)"),C3e.forEach(t),WQo=i(Me),fv=n(Me,"LI",{});var M3e=s(fv);Cce=n(M3e,"STRONG",{});var tKr=s(Cce);QQo=r(tKr,"ctrl"),tKr.forEach(t),HQo=r(M3e," \u2014 "),RN=n(M3e,"A",{href:!0});var aKr=s(RN);UQo=r(aKr,"TFCTRLLMHeadModel"),aKr.forEach(t),JQo=r(M3e," (CTRL model)"),M3e.forEach(t),YQo=i(Me),mv=n(Me,"LI",{});var E3e=s(mv);Mce=n(E3e,"STRONG",{});var nKr=s(Mce);KQo=r(nKr,"gpt2"),nKr.forEach(t),ZQo=r(E3e," \u2014 "),SN=n(E3e,"A",{href:!0});var sKr=s(SN);eHo=r(sKr,"TFGPT2LMHeadModel"),sKr.forEach(t),oHo=r(E3e," (OpenAI GPT-2 model)"),E3e.forEach(t),rHo=i(Me),gv=n(Me,"LI",{});var y3e=s(gv);Ece=n(y3e,"STRONG",{});var lKr=s(Ece);tHo=r(lKr,"openai-gpt"),lKr.forEach(t),aHo=r(y3e," \u2014 "),PN=n(y3e,"A",{href:!0});var iKr=s(PN);nHo=r(iKr,"TFOpenAIGPTLMHeadModel"),iKr.forEach(t),sHo=r(y3e," (OpenAI GPT model)"),y3e.forEach(t),lHo=i(Me),hv=n(Me,"LI",{});var w3e=s(hv);yce=n(w3e,"STRONG",{});var dKr=s(yce);iHo=r(dKr,"rembert"),dKr.forEach(t),dHo=r(w3e," \u2014 "),$N=n(w3e,"A",{href:!0});var cKr=s($N);cHo=r(cKr,"TFRemBertForCausalLM"),cKr.forEach(t),fHo=r(w3e," (RemBERT model)"),w3e.forEach(t),mHo=i(Me),pv=n(Me,"LI",{});var A3e=s(pv);wce=n(A3e,"STRONG",{});var fKr=s(wce);gHo=r(fKr,"roberta"),fKr.forEach(t),hHo=r(A3e," \u2014 "),IN=n(A3e,"A",{href:!0});var mKr=s(IN);pHo=r(mKr,"TFRobertaForCausalLM"),mKr.forEach(t),_Ho=r(A3e," (RoBERTa model)"),A3e.forEach(t),uHo=i(Me),_v=n(Me,"LI",{});var L3e=s(_v);Ace=n(L3e,"STRONG",{});var gKr=s(Ace);bHo=r(gKr,"roformer"),gKr.forEach(t),vHo=r(L3e," \u2014 "),jN=n(L3e,"A",{href:!0});var hKr=s(jN);THo=r(hKr,"TFRoFormerForCausalLM"),hKr.forEach(t),FHo=r(L3e," (RoFormer model)"),L3e.forEach(t),CHo=i(Me),uv=n(Me,"LI",{});var B3e=s(uv);Lce=n(B3e,"STRONG",{});var pKr=s(Lce);MHo=r(pKr,"transfo-xl"),pKr.forEach(t),EHo=r(B3e," \u2014 "),NN=n(B3e,"A",{href:!0});var _Kr=s(NN);yHo=r(_Kr,"TFTransfoXLLMHeadModel"),_Kr.forEach(t),wHo=r(B3e," (Transformer-XL model)"),B3e.forEach(t),AHo=i(Me),bv=n(Me,"LI",{});var k3e=s(bv);Bce=n(k3e,"STRONG",{});var uKr=s(Bce);LHo=r(uKr,"xlm"),uKr.forEach(t),BHo=r(k3e," \u2014 "),DN=n(k3e,"A",{href:!0});var bKr=s(DN);kHo=r(bKr,"TFXLMWithLMHeadModel"),bKr.forEach(t),xHo=r(k3e," (XLM model)"),k3e.forEach(t),RHo=i(Me),vv=n(Me,"LI",{});var x3e=s(vv);kce=n(x3e,"STRONG",{});var vKr=s(kce);SHo=r(vKr,"xlnet"),vKr.forEach(t),PHo=r(x3e," \u2014 "),qN=n(x3e,"A",{href:!0});var TKr=s(qN);$Ho=r(TKr,"TFXLNetLMHeadModel"),TKr.forEach(t),IHo=r(x3e," (XLNet model)"),x3e.forEach(t),Me.forEach(t),jHo=i(na),xce=n(na,"P",{});var FKr=s(xce);NHo=r(FKr,"Examples:"),FKr.forEach(t),DHo=i(na),m(gy.$$.fragment,na),na.forEach(t),Fl.forEach(t),k6e=i(d),Qd=n(d,"H2",{class:!0});var P8e=s(Qd);Tv=n(P8e,"A",{id:!0,class:!0,href:!0});var CKr=s(Tv);Rce=n(CKr,"SPAN",{});var MKr=s(Rce);m(hy.$$.fragment,MKr),MKr.forEach(t),CKr.forEach(t),qHo=i(P8e),Sce=n(P8e,"SPAN",{});var EKr=s(Sce);OHo=r(EKr,"TFAutoModelForImageClassification"),EKr.forEach(t),P8e.forEach(t),x6e=i(d),gr=n(d,"DIV",{class:!0});var Ml=s(gr);m(py.$$.fragment,Ml),GHo=i(Ml),Hd=n(Ml,"P",{});var kX=s(Hd);XHo=r(kX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Pce=n(kX,"CODE",{});var yKr=s(Pce);zHo=r(yKr,"from_pretrained()"),yKr.forEach(t),VHo=r(kX,"class method or the "),$ce=n(kX,"CODE",{});var wKr=s($ce);WHo=r(wKr,"from_config()"),wKr.forEach(t),QHo=r(kX,`class
method.`),kX.forEach(t),HHo=i(Ml),_y=n(Ml,"P",{});var $8e=s(_y);UHo=r($8e,"This class cannot be instantiated directly using "),Ice=n($8e,"CODE",{});var AKr=s(Ice);JHo=r(AKr,"__init__()"),AKr.forEach(t),YHo=r($8e," (throws an error)."),$8e.forEach(t),KHo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(uy.$$.fragment,El),ZHo=i(El),jce=n(El,"P",{});var LKr=s(jce);eUo=r(LKr,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),LKr.forEach(t),oUo=i(El),Ud=n(El,"P",{});var xX=s(Ud);rUo=r(xX,`Note:
Loading a model from its configuration file does `),Nce=n(xX,"STRONG",{});var BKr=s(Nce);tUo=r(BKr,"not"),BKr.forEach(t),aUo=r(xX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dce=n(xX,"CODE",{});var kKr=s(Dce);nUo=r(kKr,"from_pretrained()"),kKr.forEach(t),sUo=r(xX,"to load the model weights."),xX.forEach(t),lUo=i(El),qce=n(El,"P",{});var xKr=s(qce);iUo=r(xKr,"Examples:"),xKr.forEach(t),dUo=i(El),m(by.$$.fragment,El),El.forEach(t),cUo=i(Ml),po=n(Ml,"DIV",{class:!0});var sa=s(po);m(vy.$$.fragment,sa),fUo=i(sa),Oce=n(sa,"P",{});var RKr=s(Oce);mUo=r(RKr,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RKr.forEach(t),gUo=i(sa),on=n(sa,"P",{});var nC=s(on);hUo=r(nC,"The model class to instantiate is selected based on the "),Gce=n(nC,"CODE",{});var SKr=s(Gce);pUo=r(SKr,"model_type"),SKr.forEach(t),_Uo=r(nC,` property of the config object (either
passed as an argument or loaded from `),Xce=n(nC,"CODE",{});var PKr=s(Xce);uUo=r(PKr,"pretrained_model_name_or_path"),PKr.forEach(t),bUo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(nC,"CODE",{});var $Kr=s(zce);vUo=r($Kr,"pretrained_model_name_or_path"),$Kr.forEach(t),TUo=r(nC,":"),nC.forEach(t),FUo=i(sa),Vce=n(sa,"UL",{});var IKr=s(Vce);Fv=n(IKr,"LI",{});var R3e=s(Fv);Wce=n(R3e,"STRONG",{});var jKr=s(Wce);CUo=r(jKr,"vit"),jKr.forEach(t),MUo=r(R3e," \u2014 "),ON=n(R3e,"A",{href:!0});var NKr=s(ON);EUo=r(NKr,"TFViTForImageClassification"),NKr.forEach(t),yUo=r(R3e," (ViT model)"),R3e.forEach(t),IKr.forEach(t),wUo=i(sa),Qce=n(sa,"P",{});var DKr=s(Qce);AUo=r(DKr,"Examples:"),DKr.forEach(t),LUo=i(sa),m(Ty.$$.fragment,sa),sa.forEach(t),Ml.forEach(t),R6e=i(d),Jd=n(d,"H2",{class:!0});var I8e=s(Jd);Cv=n(I8e,"A",{id:!0,class:!0,href:!0});var qKr=s(Cv);Hce=n(qKr,"SPAN",{});var OKr=s(Hce);m(Fy.$$.fragment,OKr),OKr.forEach(t),qKr.forEach(t),BUo=i(I8e),Uce=n(I8e,"SPAN",{});var GKr=s(Uce);kUo=r(GKr,"TFAutoModelForMaskedLM"),GKr.forEach(t),I8e.forEach(t),S6e=i(d),hr=n(d,"DIV",{class:!0});var yl=s(hr);m(Cy.$$.fragment,yl),xUo=i(yl),Yd=n(yl,"P",{});var RX=s(Yd);RUo=r(RX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Jce=n(RX,"CODE",{});var XKr=s(Jce);SUo=r(XKr,"from_pretrained()"),XKr.forEach(t),PUo=r(RX,"class method or the "),Yce=n(RX,"CODE",{});var zKr=s(Yce);$Uo=r(zKr,"from_config()"),zKr.forEach(t),IUo=r(RX,`class
method.`),RX.forEach(t),jUo=i(yl),My=n(yl,"P",{});var j8e=s(My);NUo=r(j8e,"This class cannot be instantiated directly using "),Kce=n(j8e,"CODE",{});var VKr=s(Kce);DUo=r(VKr,"__init__()"),VKr.forEach(t),qUo=r(j8e," (throws an error)."),j8e.forEach(t),OUo=i(yl),nt=n(yl,"DIV",{class:!0});var wl=s(nt);m(Ey.$$.fragment,wl),GUo=i(wl),Zce=n(wl,"P",{});var WKr=s(Zce);XUo=r(WKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),WKr.forEach(t),zUo=i(wl),Kd=n(wl,"P",{});var SX=s(Kd);VUo=r(SX,`Note:
Loading a model from its configuration file does `),efe=n(SX,"STRONG",{});var QKr=s(efe);WUo=r(QKr,"not"),QKr.forEach(t),QUo=r(SX,` load the model weights. It only affects the
model\u2019s configuration. Use `),ofe=n(SX,"CODE",{});var HKr=s(ofe);HUo=r(HKr,"from_pretrained()"),HKr.forEach(t),UUo=r(SX,"to load the model weights."),SX.forEach(t),JUo=i(wl),rfe=n(wl,"P",{});var UKr=s(rfe);YUo=r(UKr,"Examples:"),UKr.forEach(t),KUo=i(wl),m(yy.$$.fragment,wl),wl.forEach(t),ZUo=i(yl),_o=n(yl,"DIV",{class:!0});var la=s(_o);m(wy.$$.fragment,la),eJo=i(la),tfe=n(la,"P",{});var JKr=s(tfe);oJo=r(JKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),JKr.forEach(t),rJo=i(la),rn=n(la,"P",{});var sC=s(rn);tJo=r(sC,"The model class to instantiate is selected based on the "),afe=n(sC,"CODE",{});var YKr=s(afe);aJo=r(YKr,"model_type"),YKr.forEach(t),nJo=r(sC,` property of the config object (either
passed as an argument or loaded from `),nfe=n(sC,"CODE",{});var KKr=s(nfe);sJo=r(KKr,"pretrained_model_name_or_path"),KKr.forEach(t),lJo=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(sC,"CODE",{});var ZKr=s(sfe);iJo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),dJo=r(sC,":"),sC.forEach(t),cJo=i(la),Y=n(la,"UL",{});var ee=s(Y);Mv=n(ee,"LI",{});var S3e=s(Mv);lfe=n(S3e,"STRONG",{});var eZr=s(lfe);fJo=r(eZr,"albert"),eZr.forEach(t),mJo=r(S3e," \u2014 "),GN=n(S3e,"A",{href:!0});var oZr=s(GN);gJo=r(oZr,"TFAlbertForMaskedLM"),oZr.forEach(t),hJo=r(S3e," (ALBERT model)"),S3e.forEach(t),pJo=i(ee),Ev=n(ee,"LI",{});var P3e=s(Ev);ife=n(P3e,"STRONG",{});var rZr=s(ife);_Jo=r(rZr,"bert"),rZr.forEach(t),uJo=r(P3e," \u2014 "),XN=n(P3e,"A",{href:!0});var tZr=s(XN);bJo=r(tZr,"TFBertForMaskedLM"),tZr.forEach(t),vJo=r(P3e," (BERT model)"),P3e.forEach(t),TJo=i(ee),yv=n(ee,"LI",{});var $3e=s(yv);dfe=n($3e,"STRONG",{});var aZr=s(dfe);FJo=r(aZr,"camembert"),aZr.forEach(t),CJo=r($3e," \u2014 "),zN=n($3e,"A",{href:!0});var nZr=s(zN);MJo=r(nZr,"TFCamembertForMaskedLM"),nZr.forEach(t),EJo=r($3e," (CamemBERT model)"),$3e.forEach(t),yJo=i(ee),wv=n(ee,"LI",{});var I3e=s(wv);cfe=n(I3e,"STRONG",{});var sZr=s(cfe);wJo=r(sZr,"convbert"),sZr.forEach(t),AJo=r(I3e," \u2014 "),VN=n(I3e,"A",{href:!0});var lZr=s(VN);LJo=r(lZr,"TFConvBertForMaskedLM"),lZr.forEach(t),BJo=r(I3e," (ConvBERT model)"),I3e.forEach(t),kJo=i(ee),Av=n(ee,"LI",{});var j3e=s(Av);ffe=n(j3e,"STRONG",{});var iZr=s(ffe);xJo=r(iZr,"deberta"),iZr.forEach(t),RJo=r(j3e," \u2014 "),WN=n(j3e,"A",{href:!0});var dZr=s(WN);SJo=r(dZr,"TFDebertaForMaskedLM"),dZr.forEach(t),PJo=r(j3e," (DeBERTa model)"),j3e.forEach(t),$Jo=i(ee),Lv=n(ee,"LI",{});var N3e=s(Lv);mfe=n(N3e,"STRONG",{});var cZr=s(mfe);IJo=r(cZr,"deberta-v2"),cZr.forEach(t),jJo=r(N3e," \u2014 "),QN=n(N3e,"A",{href:!0});var fZr=s(QN);NJo=r(fZr,"TFDebertaV2ForMaskedLM"),fZr.forEach(t),DJo=r(N3e," (DeBERTa-v2 model)"),N3e.forEach(t),qJo=i(ee),Bv=n(ee,"LI",{});var D3e=s(Bv);gfe=n(D3e,"STRONG",{});var mZr=s(gfe);OJo=r(mZr,"distilbert"),mZr.forEach(t),GJo=r(D3e," \u2014 "),HN=n(D3e,"A",{href:!0});var gZr=s(HN);XJo=r(gZr,"TFDistilBertForMaskedLM"),gZr.forEach(t),zJo=r(D3e," (DistilBERT model)"),D3e.forEach(t),VJo=i(ee),kv=n(ee,"LI",{});var q3e=s(kv);hfe=n(q3e,"STRONG",{});var hZr=s(hfe);WJo=r(hZr,"electra"),hZr.forEach(t),QJo=r(q3e," \u2014 "),UN=n(q3e,"A",{href:!0});var pZr=s(UN);HJo=r(pZr,"TFElectraForMaskedLM"),pZr.forEach(t),UJo=r(q3e," (ELECTRA model)"),q3e.forEach(t),JJo=i(ee),xv=n(ee,"LI",{});var O3e=s(xv);pfe=n(O3e,"STRONG",{});var _Zr=s(pfe);YJo=r(_Zr,"flaubert"),_Zr.forEach(t),KJo=r(O3e," \u2014 "),JN=n(O3e,"A",{href:!0});var uZr=s(JN);ZJo=r(uZr,"TFFlaubertWithLMHeadModel"),uZr.forEach(t),eYo=r(O3e," (FlauBERT model)"),O3e.forEach(t),oYo=i(ee),Rv=n(ee,"LI",{});var G3e=s(Rv);_fe=n(G3e,"STRONG",{});var bZr=s(_fe);rYo=r(bZr,"funnel"),bZr.forEach(t),tYo=r(G3e," \u2014 "),YN=n(G3e,"A",{href:!0});var vZr=s(YN);aYo=r(vZr,"TFFunnelForMaskedLM"),vZr.forEach(t),nYo=r(G3e," (Funnel Transformer model)"),G3e.forEach(t),sYo=i(ee),Sv=n(ee,"LI",{});var X3e=s(Sv);ufe=n(X3e,"STRONG",{});var TZr=s(ufe);lYo=r(TZr,"layoutlm"),TZr.forEach(t),iYo=r(X3e," \u2014 "),KN=n(X3e,"A",{href:!0});var FZr=s(KN);dYo=r(FZr,"TFLayoutLMForMaskedLM"),FZr.forEach(t),cYo=r(X3e," (LayoutLM model)"),X3e.forEach(t),fYo=i(ee),Pv=n(ee,"LI",{});var z3e=s(Pv);bfe=n(z3e,"STRONG",{});var CZr=s(bfe);mYo=r(CZr,"longformer"),CZr.forEach(t),gYo=r(z3e," \u2014 "),ZN=n(z3e,"A",{href:!0});var MZr=s(ZN);hYo=r(MZr,"TFLongformerForMaskedLM"),MZr.forEach(t),pYo=r(z3e," (Longformer model)"),z3e.forEach(t),_Yo=i(ee),$v=n(ee,"LI",{});var V3e=s($v);vfe=n(V3e,"STRONG",{});var EZr=s(vfe);uYo=r(EZr,"mobilebert"),EZr.forEach(t),bYo=r(V3e," \u2014 "),eD=n(V3e,"A",{href:!0});var yZr=s(eD);vYo=r(yZr,"TFMobileBertForMaskedLM"),yZr.forEach(t),TYo=r(V3e," (MobileBERT model)"),V3e.forEach(t),FYo=i(ee),Iv=n(ee,"LI",{});var W3e=s(Iv);Tfe=n(W3e,"STRONG",{});var wZr=s(Tfe);CYo=r(wZr,"mpnet"),wZr.forEach(t),MYo=r(W3e," \u2014 "),oD=n(W3e,"A",{href:!0});var AZr=s(oD);EYo=r(AZr,"TFMPNetForMaskedLM"),AZr.forEach(t),yYo=r(W3e," (MPNet model)"),W3e.forEach(t),wYo=i(ee),jv=n(ee,"LI",{});var Q3e=s(jv);Ffe=n(Q3e,"STRONG",{});var LZr=s(Ffe);AYo=r(LZr,"rembert"),LZr.forEach(t),LYo=r(Q3e," \u2014 "),rD=n(Q3e,"A",{href:!0});var BZr=s(rD);BYo=r(BZr,"TFRemBertForMaskedLM"),BZr.forEach(t),kYo=r(Q3e," (RemBERT model)"),Q3e.forEach(t),xYo=i(ee),Nv=n(ee,"LI",{});var H3e=s(Nv);Cfe=n(H3e,"STRONG",{});var kZr=s(Cfe);RYo=r(kZr,"roberta"),kZr.forEach(t),SYo=r(H3e," \u2014 "),tD=n(H3e,"A",{href:!0});var xZr=s(tD);PYo=r(xZr,"TFRobertaForMaskedLM"),xZr.forEach(t),$Yo=r(H3e," (RoBERTa model)"),H3e.forEach(t),IYo=i(ee),Dv=n(ee,"LI",{});var U3e=s(Dv);Mfe=n(U3e,"STRONG",{});var RZr=s(Mfe);jYo=r(RZr,"roformer"),RZr.forEach(t),NYo=r(U3e," \u2014 "),aD=n(U3e,"A",{href:!0});var SZr=s(aD);DYo=r(SZr,"TFRoFormerForMaskedLM"),SZr.forEach(t),qYo=r(U3e," (RoFormer model)"),U3e.forEach(t),OYo=i(ee),qv=n(ee,"LI",{});var J3e=s(qv);Efe=n(J3e,"STRONG",{});var PZr=s(Efe);GYo=r(PZr,"tapas"),PZr.forEach(t),XYo=r(J3e," \u2014 "),nD=n(J3e,"A",{href:!0});var $Zr=s(nD);zYo=r($Zr,"TFTapasForMaskedLM"),$Zr.forEach(t),VYo=r(J3e," (TAPAS model)"),J3e.forEach(t),WYo=i(ee),Ov=n(ee,"LI",{});var Y3e=s(Ov);yfe=n(Y3e,"STRONG",{});var IZr=s(yfe);QYo=r(IZr,"xlm"),IZr.forEach(t),HYo=r(Y3e," \u2014 "),sD=n(Y3e,"A",{href:!0});var jZr=s(sD);UYo=r(jZr,"TFXLMWithLMHeadModel"),jZr.forEach(t),JYo=r(Y3e," (XLM model)"),Y3e.forEach(t),YYo=i(ee),Gv=n(ee,"LI",{});var K3e=s(Gv);wfe=n(K3e,"STRONG",{});var NZr=s(wfe);KYo=r(NZr,"xlm-roberta"),NZr.forEach(t),ZYo=r(K3e," \u2014 "),lD=n(K3e,"A",{href:!0});var DZr=s(lD);eKo=r(DZr,"TFXLMRobertaForMaskedLM"),DZr.forEach(t),oKo=r(K3e," (XLM-RoBERTa model)"),K3e.forEach(t),ee.forEach(t),rKo=i(la),Afe=n(la,"P",{});var qZr=s(Afe);tKo=r(qZr,"Examples:"),qZr.forEach(t),aKo=i(la),m(Ay.$$.fragment,la),la.forEach(t),yl.forEach(t),P6e=i(d),Zd=n(d,"H2",{class:!0});var N8e=s(Zd);Xv=n(N8e,"A",{id:!0,class:!0,href:!0});var OZr=s(Xv);Lfe=n(OZr,"SPAN",{});var GZr=s(Lfe);m(Ly.$$.fragment,GZr),GZr.forEach(t),OZr.forEach(t),nKo=i(N8e),Bfe=n(N8e,"SPAN",{});var XZr=s(Bfe);sKo=r(XZr,"TFAutoModelForSeq2SeqLM"),XZr.forEach(t),N8e.forEach(t),$6e=i(d),pr=n(d,"DIV",{class:!0});var Al=s(pr);m(By.$$.fragment,Al),lKo=i(Al),ec=n(Al,"P",{});var PX=s(ec);iKo=r(PX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kfe=n(PX,"CODE",{});var zZr=s(kfe);dKo=r(zZr,"from_pretrained()"),zZr.forEach(t),cKo=r(PX,"class method or the "),xfe=n(PX,"CODE",{});var VZr=s(xfe);fKo=r(VZr,"from_config()"),VZr.forEach(t),mKo=r(PX,`class
method.`),PX.forEach(t),gKo=i(Al),ky=n(Al,"P",{});var D8e=s(ky);hKo=r(D8e,"This class cannot be instantiated directly using "),Rfe=n(D8e,"CODE",{});var WZr=s(Rfe);pKo=r(WZr,"__init__()"),WZr.forEach(t),_Ko=r(D8e," (throws an error)."),D8e.forEach(t),uKo=i(Al),st=n(Al,"DIV",{class:!0});var Ll=s(st);m(xy.$$.fragment,Ll),bKo=i(Ll),Sfe=n(Ll,"P",{});var QZr=s(Sfe);vKo=r(QZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),QZr.forEach(t),TKo=i(Ll),oc=n(Ll,"P",{});var $X=s(oc);FKo=r($X,`Note:
Loading a model from its configuration file does `),Pfe=n($X,"STRONG",{});var HZr=s(Pfe);CKo=r(HZr,"not"),HZr.forEach(t),MKo=r($X,` load the model weights. It only affects the
model\u2019s configuration. Use `),$fe=n($X,"CODE",{});var UZr=s($fe);EKo=r(UZr,"from_pretrained()"),UZr.forEach(t),yKo=r($X,"to load the model weights."),$X.forEach(t),wKo=i(Ll),Ife=n(Ll,"P",{});var JZr=s(Ife);AKo=r(JZr,"Examples:"),JZr.forEach(t),LKo=i(Ll),m(Ry.$$.fragment,Ll),Ll.forEach(t),BKo=i(Al),uo=n(Al,"DIV",{class:!0});var ia=s(uo);m(Sy.$$.fragment,ia),kKo=i(ia),jfe=n(ia,"P",{});var YZr=s(jfe);xKo=r(YZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),YZr.forEach(t),RKo=i(ia),tn=n(ia,"P",{});var lC=s(tn);SKo=r(lC,"The model class to instantiate is selected based on the "),Nfe=n(lC,"CODE",{});var KZr=s(Nfe);PKo=r(KZr,"model_type"),KZr.forEach(t),$Ko=r(lC,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(lC,"CODE",{});var ZZr=s(Dfe);IKo=r(ZZr,"pretrained_model_name_or_path"),ZZr.forEach(t),jKo=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n(lC,"CODE",{});var eet=s(qfe);NKo=r(eet,"pretrained_model_name_or_path"),eet.forEach(t),DKo=r(lC,":"),lC.forEach(t),qKo=i(ia),pe=n(ia,"UL",{});var Ee=s(pe);zv=n(Ee,"LI",{});var Z3e=s(zv);Ofe=n(Z3e,"STRONG",{});var oet=s(Ofe);OKo=r(oet,"bart"),oet.forEach(t),GKo=r(Z3e," \u2014 "),iD=n(Z3e,"A",{href:!0});var ret=s(iD);XKo=r(ret,"TFBartForConditionalGeneration"),ret.forEach(t),zKo=r(Z3e," (BART model)"),Z3e.forEach(t),VKo=i(Ee),Vv=n(Ee,"LI",{});var eye=s(Vv);Gfe=n(eye,"STRONG",{});var tet=s(Gfe);WKo=r(tet,"blenderbot"),tet.forEach(t),QKo=r(eye," \u2014 "),dD=n(eye,"A",{href:!0});var aet=s(dD);HKo=r(aet,"TFBlenderbotForConditionalGeneration"),aet.forEach(t),UKo=r(eye," (Blenderbot model)"),eye.forEach(t),JKo=i(Ee),Wv=n(Ee,"LI",{});var oye=s(Wv);Xfe=n(oye,"STRONG",{});var net=s(Xfe);YKo=r(net,"blenderbot-small"),net.forEach(t),KKo=r(oye," \u2014 "),cD=n(oye,"A",{href:!0});var set=s(cD);ZKo=r(set,"TFBlenderbotSmallForConditionalGeneration"),set.forEach(t),eZo=r(oye," (BlenderbotSmall model)"),oye.forEach(t),oZo=i(Ee),Qv=n(Ee,"LI",{});var rye=s(Qv);zfe=n(rye,"STRONG",{});var iet=s(zfe);rZo=r(iet,"encoder-decoder"),iet.forEach(t),tZo=r(rye," \u2014 "),fD=n(rye,"A",{href:!0});var det=s(fD);aZo=r(det,"TFEncoderDecoderModel"),det.forEach(t),nZo=r(rye," (Encoder decoder model)"),rye.forEach(t),sZo=i(Ee),Hv=n(Ee,"LI",{});var tye=s(Hv);Vfe=n(tye,"STRONG",{});var cet=s(Vfe);lZo=r(cet,"led"),cet.forEach(t),iZo=r(tye," \u2014 "),mD=n(tye,"A",{href:!0});var fet=s(mD);dZo=r(fet,"TFLEDForConditionalGeneration"),fet.forEach(t),cZo=r(tye," (LED model)"),tye.forEach(t),fZo=i(Ee),Uv=n(Ee,"LI",{});var aye=s(Uv);Wfe=n(aye,"STRONG",{});var met=s(Wfe);mZo=r(met,"marian"),met.forEach(t),gZo=r(aye," \u2014 "),gD=n(aye,"A",{href:!0});var get=s(gD);hZo=r(get,"TFMarianMTModel"),get.forEach(t),pZo=r(aye," (Marian model)"),aye.forEach(t),_Zo=i(Ee),Jv=n(Ee,"LI",{});var nye=s(Jv);Qfe=n(nye,"STRONG",{});var het=s(Qfe);uZo=r(het,"mbart"),het.forEach(t),bZo=r(nye," \u2014 "),hD=n(nye,"A",{href:!0});var pet=s(hD);vZo=r(pet,"TFMBartForConditionalGeneration"),pet.forEach(t),TZo=r(nye," (mBART model)"),nye.forEach(t),FZo=i(Ee),Yv=n(Ee,"LI",{});var sye=s(Yv);Hfe=n(sye,"STRONG",{});var _et=s(Hfe);CZo=r(_et,"mt5"),_et.forEach(t),MZo=r(sye," \u2014 "),pD=n(sye,"A",{href:!0});var uet=s(pD);EZo=r(uet,"TFMT5ForConditionalGeneration"),uet.forEach(t),yZo=r(sye," (mT5 model)"),sye.forEach(t),wZo=i(Ee),Kv=n(Ee,"LI",{});var lye=s(Kv);Ufe=n(lye,"STRONG",{});var bet=s(Ufe);AZo=r(bet,"pegasus"),bet.forEach(t),LZo=r(lye," \u2014 "),_D=n(lye,"A",{href:!0});var vet=s(_D);BZo=r(vet,"TFPegasusForConditionalGeneration"),vet.forEach(t),kZo=r(lye," (Pegasus model)"),lye.forEach(t),xZo=i(Ee),Zv=n(Ee,"LI",{});var iye=s(Zv);Jfe=n(iye,"STRONG",{});var Tet=s(Jfe);RZo=r(Tet,"t5"),Tet.forEach(t),SZo=r(iye," \u2014 "),uD=n(iye,"A",{href:!0});var Fet=s(uD);PZo=r(Fet,"TFT5ForConditionalGeneration"),Fet.forEach(t),$Zo=r(iye," (T5 model)"),iye.forEach(t),Ee.forEach(t),IZo=i(ia),Yfe=n(ia,"P",{});var Cet=s(Yfe);jZo=r(Cet,"Examples:"),Cet.forEach(t),NZo=i(ia),m(Py.$$.fragment,ia),ia.forEach(t),Al.forEach(t),I6e=i(d),rc=n(d,"H2",{class:!0});var q8e=s(rc);eT=n(q8e,"A",{id:!0,class:!0,href:!0});var Met=s(eT);Kfe=n(Met,"SPAN",{});var Eet=s(Kfe);m($y.$$.fragment,Eet),Eet.forEach(t),Met.forEach(t),DZo=i(q8e),Zfe=n(q8e,"SPAN",{});var yet=s(Zfe);qZo=r(yet,"TFAutoModelForSequenceClassification"),yet.forEach(t),q8e.forEach(t),j6e=i(d),_r=n(d,"DIV",{class:!0});var Bl=s(_r);m(Iy.$$.fragment,Bl),OZo=i(Bl),tc=n(Bl,"P",{});var IX=s(tc);GZo=r(IX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),eme=n(IX,"CODE",{});var wet=s(eme);XZo=r(wet,"from_pretrained()"),wet.forEach(t),zZo=r(IX,"class method or the "),ome=n(IX,"CODE",{});var Aet=s(ome);VZo=r(Aet,"from_config()"),Aet.forEach(t),WZo=r(IX,`class
method.`),IX.forEach(t),QZo=i(Bl),jy=n(Bl,"P",{});var O8e=s(jy);HZo=r(O8e,"This class cannot be instantiated directly using "),rme=n(O8e,"CODE",{});var Let=s(rme);UZo=r(Let,"__init__()"),Let.forEach(t),JZo=r(O8e," (throws an error)."),O8e.forEach(t),YZo=i(Bl),lt=n(Bl,"DIV",{class:!0});var kl=s(lt);m(Ny.$$.fragment,kl),KZo=i(kl),tme=n(kl,"P",{});var Bet=s(tme);ZZo=r(Bet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Bet.forEach(t),eer=i(kl),ac=n(kl,"P",{});var jX=s(ac);oer=r(jX,`Note:
Loading a model from its configuration file does `),ame=n(jX,"STRONG",{});var ket=s(ame);rer=r(ket,"not"),ket.forEach(t),ter=r(jX,` load the model weights. It only affects the
model\u2019s configuration. Use `),nme=n(jX,"CODE",{});var xet=s(nme);aer=r(xet,"from_pretrained()"),xet.forEach(t),ner=r(jX,"to load the model weights."),jX.forEach(t),ser=i(kl),sme=n(kl,"P",{});var Ret=s(sme);ler=r(Ret,"Examples:"),Ret.forEach(t),ier=i(kl),m(Dy.$$.fragment,kl),kl.forEach(t),der=i(Bl),bo=n(Bl,"DIV",{class:!0});var da=s(bo);m(qy.$$.fragment,da),cer=i(da),lme=n(da,"P",{});var Set=s(lme);fer=r(Set,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Set.forEach(t),mer=i(da),an=n(da,"P",{});var iC=s(an);ger=r(iC,"The model class to instantiate is selected based on the "),ime=n(iC,"CODE",{});var Pet=s(ime);her=r(Pet,"model_type"),Pet.forEach(t),per=r(iC,` property of the config object (either
passed as an argument or loaded from `),dme=n(iC,"CODE",{});var $et=s(dme);_er=r($et,"pretrained_model_name_or_path"),$et.forEach(t),uer=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(iC,"CODE",{});var Iet=s(cme);ber=r(Iet,"pretrained_model_name_or_path"),Iet.forEach(t),ver=r(iC,":"),iC.forEach(t),Ter=i(da),X=n(da,"UL",{});var W=s(X);oT=n(W,"LI",{});var dye=s(oT);fme=n(dye,"STRONG",{});var jet=s(fme);Fer=r(jet,"albert"),jet.forEach(t),Cer=r(dye," \u2014 "),bD=n(dye,"A",{href:!0});var Net=s(bD);Mer=r(Net,"TFAlbertForSequenceClassification"),Net.forEach(t),Eer=r(dye," (ALBERT model)"),dye.forEach(t),yer=i(W),rT=n(W,"LI",{});var cye=s(rT);mme=n(cye,"STRONG",{});var Det=s(mme);wer=r(Det,"bert"),Det.forEach(t),Aer=r(cye," \u2014 "),vD=n(cye,"A",{href:!0});var qet=s(vD);Ler=r(qet,"TFBertForSequenceClassification"),qet.forEach(t),Ber=r(cye," (BERT model)"),cye.forEach(t),ker=i(W),tT=n(W,"LI",{});var fye=s(tT);gme=n(fye,"STRONG",{});var Oet=s(gme);xer=r(Oet,"camembert"),Oet.forEach(t),Rer=r(fye," \u2014 "),TD=n(fye,"A",{href:!0});var Get=s(TD);Ser=r(Get,"TFCamembertForSequenceClassification"),Get.forEach(t),Per=r(fye," (CamemBERT model)"),fye.forEach(t),$er=i(W),aT=n(W,"LI",{});var mye=s(aT);hme=n(mye,"STRONG",{});var Xet=s(hme);Ier=r(Xet,"convbert"),Xet.forEach(t),jer=r(mye," \u2014 "),FD=n(mye,"A",{href:!0});var zet=s(FD);Ner=r(zet,"TFConvBertForSequenceClassification"),zet.forEach(t),Der=r(mye," (ConvBERT model)"),mye.forEach(t),qer=i(W),nT=n(W,"LI",{});var gye=s(nT);pme=n(gye,"STRONG",{});var Vet=s(pme);Oer=r(Vet,"ctrl"),Vet.forEach(t),Ger=r(gye," \u2014 "),CD=n(gye,"A",{href:!0});var Wet=s(CD);Xer=r(Wet,"TFCTRLForSequenceClassification"),Wet.forEach(t),zer=r(gye," (CTRL model)"),gye.forEach(t),Ver=i(W),sT=n(W,"LI",{});var hye=s(sT);_me=n(hye,"STRONG",{});var Qet=s(_me);Wer=r(Qet,"deberta"),Qet.forEach(t),Qer=r(hye," \u2014 "),MD=n(hye,"A",{href:!0});var Het=s(MD);Her=r(Het,"TFDebertaForSequenceClassification"),Het.forEach(t),Uer=r(hye," (DeBERTa model)"),hye.forEach(t),Jer=i(W),lT=n(W,"LI",{});var pye=s(lT);ume=n(pye,"STRONG",{});var Uet=s(ume);Yer=r(Uet,"deberta-v2"),Uet.forEach(t),Ker=r(pye," \u2014 "),ED=n(pye,"A",{href:!0});var Jet=s(ED);Zer=r(Jet,"TFDebertaV2ForSequenceClassification"),Jet.forEach(t),eor=r(pye," (DeBERTa-v2 model)"),pye.forEach(t),oor=i(W),iT=n(W,"LI",{});var _ye=s(iT);bme=n(_ye,"STRONG",{});var Yet=s(bme);ror=r(Yet,"distilbert"),Yet.forEach(t),tor=r(_ye," \u2014 "),yD=n(_ye,"A",{href:!0});var Ket=s(yD);aor=r(Ket,"TFDistilBertForSequenceClassification"),Ket.forEach(t),nor=r(_ye," (DistilBERT model)"),_ye.forEach(t),sor=i(W),dT=n(W,"LI",{});var uye=s(dT);vme=n(uye,"STRONG",{});var Zet=s(vme);lor=r(Zet,"electra"),Zet.forEach(t),ior=r(uye," \u2014 "),wD=n(uye,"A",{href:!0});var eot=s(wD);dor=r(eot,"TFElectraForSequenceClassification"),eot.forEach(t),cor=r(uye," (ELECTRA model)"),uye.forEach(t),mor=i(W),cT=n(W,"LI",{});var bye=s(cT);Tme=n(bye,"STRONG",{});var oot=s(Tme);gor=r(oot,"flaubert"),oot.forEach(t),hor=r(bye," \u2014 "),AD=n(bye,"A",{href:!0});var rot=s(AD);por=r(rot,"TFFlaubertForSequenceClassification"),rot.forEach(t),_or=r(bye," (FlauBERT model)"),bye.forEach(t),uor=i(W),fT=n(W,"LI",{});var vye=s(fT);Fme=n(vye,"STRONG",{});var tot=s(Fme);bor=r(tot,"funnel"),tot.forEach(t),vor=r(vye," \u2014 "),LD=n(vye,"A",{href:!0});var aot=s(LD);Tor=r(aot,"TFFunnelForSequenceClassification"),aot.forEach(t),For=r(vye," (Funnel Transformer model)"),vye.forEach(t),Cor=i(W),mT=n(W,"LI",{});var Tye=s(mT);Cme=n(Tye,"STRONG",{});var not=s(Cme);Mor=r(not,"gpt2"),not.forEach(t),Eor=r(Tye," \u2014 "),BD=n(Tye,"A",{href:!0});var sot=s(BD);yor=r(sot,"TFGPT2ForSequenceClassification"),sot.forEach(t),wor=r(Tye," (OpenAI GPT-2 model)"),Tye.forEach(t),Aor=i(W),gT=n(W,"LI",{});var Fye=s(gT);Mme=n(Fye,"STRONG",{});var lot=s(Mme);Lor=r(lot,"layoutlm"),lot.forEach(t),Bor=r(Fye," \u2014 "),kD=n(Fye,"A",{href:!0});var iot=s(kD);kor=r(iot,"TFLayoutLMForSequenceClassification"),iot.forEach(t),xor=r(Fye," (LayoutLM model)"),Fye.forEach(t),Ror=i(W),hT=n(W,"LI",{});var Cye=s(hT);Eme=n(Cye,"STRONG",{});var dot=s(Eme);Sor=r(dot,"longformer"),dot.forEach(t),Por=r(Cye," \u2014 "),xD=n(Cye,"A",{href:!0});var cot=s(xD);$or=r(cot,"TFLongformerForSequenceClassification"),cot.forEach(t),Ior=r(Cye," (Longformer model)"),Cye.forEach(t),jor=i(W),pT=n(W,"LI",{});var Mye=s(pT);yme=n(Mye,"STRONG",{});var fot=s(yme);Nor=r(fot,"mobilebert"),fot.forEach(t),Dor=r(Mye," \u2014 "),RD=n(Mye,"A",{href:!0});var mot=s(RD);qor=r(mot,"TFMobileBertForSequenceClassification"),mot.forEach(t),Oor=r(Mye," (MobileBERT model)"),Mye.forEach(t),Gor=i(W),_T=n(W,"LI",{});var Eye=s(_T);wme=n(Eye,"STRONG",{});var got=s(wme);Xor=r(got,"mpnet"),got.forEach(t),zor=r(Eye," \u2014 "),SD=n(Eye,"A",{href:!0});var hot=s(SD);Vor=r(hot,"TFMPNetForSequenceClassification"),hot.forEach(t),Wor=r(Eye," (MPNet model)"),Eye.forEach(t),Qor=i(W),uT=n(W,"LI",{});var yye=s(uT);Ame=n(yye,"STRONG",{});var pot=s(Ame);Hor=r(pot,"openai-gpt"),pot.forEach(t),Uor=r(yye," \u2014 "),PD=n(yye,"A",{href:!0});var _ot=s(PD);Jor=r(_ot,"TFOpenAIGPTForSequenceClassification"),_ot.forEach(t),Yor=r(yye," (OpenAI GPT model)"),yye.forEach(t),Kor=i(W),bT=n(W,"LI",{});var wye=s(bT);Lme=n(wye,"STRONG",{});var uot=s(Lme);Zor=r(uot,"rembert"),uot.forEach(t),err=r(wye," \u2014 "),$D=n(wye,"A",{href:!0});var bot=s($D);orr=r(bot,"TFRemBertForSequenceClassification"),bot.forEach(t),rrr=r(wye," (RemBERT model)"),wye.forEach(t),trr=i(W),vT=n(W,"LI",{});var Aye=s(vT);Bme=n(Aye,"STRONG",{});var vot=s(Bme);arr=r(vot,"roberta"),vot.forEach(t),nrr=r(Aye," \u2014 "),ID=n(Aye,"A",{href:!0});var Tot=s(ID);srr=r(Tot,"TFRobertaForSequenceClassification"),Tot.forEach(t),lrr=r(Aye," (RoBERTa model)"),Aye.forEach(t),irr=i(W),TT=n(W,"LI",{});var Lye=s(TT);kme=n(Lye,"STRONG",{});var Fot=s(kme);drr=r(Fot,"roformer"),Fot.forEach(t),crr=r(Lye," \u2014 "),jD=n(Lye,"A",{href:!0});var Cot=s(jD);frr=r(Cot,"TFRoFormerForSequenceClassification"),Cot.forEach(t),mrr=r(Lye," (RoFormer model)"),Lye.forEach(t),grr=i(W),FT=n(W,"LI",{});var Bye=s(FT);xme=n(Bye,"STRONG",{});var Mot=s(xme);hrr=r(Mot,"tapas"),Mot.forEach(t),prr=r(Bye," \u2014 "),ND=n(Bye,"A",{href:!0});var Eot=s(ND);_rr=r(Eot,"TFTapasForSequenceClassification"),Eot.forEach(t),urr=r(Bye," (TAPAS model)"),Bye.forEach(t),brr=i(W),CT=n(W,"LI",{});var kye=s(CT);Rme=n(kye,"STRONG",{});var yot=s(Rme);vrr=r(yot,"transfo-xl"),yot.forEach(t),Trr=r(kye," \u2014 "),DD=n(kye,"A",{href:!0});var wot=s(DD);Frr=r(wot,"TFTransfoXLForSequenceClassification"),wot.forEach(t),Crr=r(kye," (Transformer-XL model)"),kye.forEach(t),Mrr=i(W),MT=n(W,"LI",{});var xye=s(MT);Sme=n(xye,"STRONG",{});var Aot=s(Sme);Err=r(Aot,"xlm"),Aot.forEach(t),yrr=r(xye," \u2014 "),qD=n(xye,"A",{href:!0});var Lot=s(qD);wrr=r(Lot,"TFXLMForSequenceClassification"),Lot.forEach(t),Arr=r(xye," (XLM model)"),xye.forEach(t),Lrr=i(W),ET=n(W,"LI",{});var Rye=s(ET);Pme=n(Rye,"STRONG",{});var Bot=s(Pme);Brr=r(Bot,"xlm-roberta"),Bot.forEach(t),krr=r(Rye," \u2014 "),OD=n(Rye,"A",{href:!0});var kot=s(OD);xrr=r(kot,"TFXLMRobertaForSequenceClassification"),kot.forEach(t),Rrr=r(Rye," (XLM-RoBERTa model)"),Rye.forEach(t),Srr=i(W),yT=n(W,"LI",{});var Sye=s(yT);$me=n(Sye,"STRONG",{});var xot=s($me);Prr=r(xot,"xlnet"),xot.forEach(t),$rr=r(Sye," \u2014 "),GD=n(Sye,"A",{href:!0});var Rot=s(GD);Irr=r(Rot,"TFXLNetForSequenceClassification"),Rot.forEach(t),jrr=r(Sye," (XLNet model)"),Sye.forEach(t),W.forEach(t),Nrr=i(da),Ime=n(da,"P",{});var Sot=s(Ime);Drr=r(Sot,"Examples:"),Sot.forEach(t),qrr=i(da),m(Oy.$$.fragment,da),da.forEach(t),Bl.forEach(t),N6e=i(d),nc=n(d,"H2",{class:!0});var G8e=s(nc);wT=n(G8e,"A",{id:!0,class:!0,href:!0});var Pot=s(wT);jme=n(Pot,"SPAN",{});var $ot=s(jme);m(Gy.$$.fragment,$ot),$ot.forEach(t),Pot.forEach(t),Orr=i(G8e),Nme=n(G8e,"SPAN",{});var Iot=s(Nme);Grr=r(Iot,"TFAutoModelForMultipleChoice"),Iot.forEach(t),G8e.forEach(t),D6e=i(d),ur=n(d,"DIV",{class:!0});var xl=s(ur);m(Xy.$$.fragment,xl),Xrr=i(xl),sc=n(xl,"P",{});var NX=s(sc);zrr=r(NX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Dme=n(NX,"CODE",{});var jot=s(Dme);Vrr=r(jot,"from_pretrained()"),jot.forEach(t),Wrr=r(NX,"class method or the "),qme=n(NX,"CODE",{});var Not=s(qme);Qrr=r(Not,"from_config()"),Not.forEach(t),Hrr=r(NX,`class
method.`),NX.forEach(t),Urr=i(xl),zy=n(xl,"P",{});var X8e=s(zy);Jrr=r(X8e,"This class cannot be instantiated directly using "),Ome=n(X8e,"CODE",{});var Dot=s(Ome);Yrr=r(Dot,"__init__()"),Dot.forEach(t),Krr=r(X8e," (throws an error)."),X8e.forEach(t),Zrr=i(xl),it=n(xl,"DIV",{class:!0});var Rl=s(it);m(Vy.$$.fragment,Rl),etr=i(Rl),Gme=n(Rl,"P",{});var qot=s(Gme);otr=r(qot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qot.forEach(t),rtr=i(Rl),lc=n(Rl,"P",{});var DX=s(lc);ttr=r(DX,`Note:
Loading a model from its configuration file does `),Xme=n(DX,"STRONG",{});var Oot=s(Xme);atr=r(Oot,"not"),Oot.forEach(t),ntr=r(DX,` load the model weights. It only affects the
model\u2019s configuration. Use `),zme=n(DX,"CODE",{});var Got=s(zme);str=r(Got,"from_pretrained()"),Got.forEach(t),ltr=r(DX,"to load the model weights."),DX.forEach(t),itr=i(Rl),Vme=n(Rl,"P",{});var Xot=s(Vme);dtr=r(Xot,"Examples:"),Xot.forEach(t),ctr=i(Rl),m(Wy.$$.fragment,Rl),Rl.forEach(t),ftr=i(xl),vo=n(xl,"DIV",{class:!0});var ca=s(vo);m(Qy.$$.fragment,ca),mtr=i(ca),Wme=n(ca,"P",{});var zot=s(Wme);gtr=r(zot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zot.forEach(t),htr=i(ca),nn=n(ca,"P",{});var dC=s(nn);ptr=r(dC,"The model class to instantiate is selected based on the "),Qme=n(dC,"CODE",{});var Vot=s(Qme);_tr=r(Vot,"model_type"),Vot.forEach(t),utr=r(dC,` property of the config object (either
passed as an argument or loaded from `),Hme=n(dC,"CODE",{});var Wot=s(Hme);btr=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),vtr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(dC,"CODE",{});var Qot=s(Ume);Ttr=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),Ftr=r(dC,":"),dC.forEach(t),Ctr=i(ca),te=n(ca,"UL",{});var ne=s(te);AT=n(ne,"LI",{});var Pye=s(AT);Jme=n(Pye,"STRONG",{});var Hot=s(Jme);Mtr=r(Hot,"albert"),Hot.forEach(t),Etr=r(Pye," \u2014 "),XD=n(Pye,"A",{href:!0});var Uot=s(XD);ytr=r(Uot,"TFAlbertForMultipleChoice"),Uot.forEach(t),wtr=r(Pye," (ALBERT model)"),Pye.forEach(t),Atr=i(ne),LT=n(ne,"LI",{});var $ye=s(LT);Yme=n($ye,"STRONG",{});var Jot=s(Yme);Ltr=r(Jot,"bert"),Jot.forEach(t),Btr=r($ye," \u2014 "),zD=n($ye,"A",{href:!0});var Yot=s(zD);ktr=r(Yot,"TFBertForMultipleChoice"),Yot.forEach(t),xtr=r($ye," (BERT model)"),$ye.forEach(t),Rtr=i(ne),BT=n(ne,"LI",{});var Iye=s(BT);Kme=n(Iye,"STRONG",{});var Kot=s(Kme);Str=r(Kot,"camembert"),Kot.forEach(t),Ptr=r(Iye," \u2014 "),VD=n(Iye,"A",{href:!0});var Zot=s(VD);$tr=r(Zot,"TFCamembertForMultipleChoice"),Zot.forEach(t),Itr=r(Iye," (CamemBERT model)"),Iye.forEach(t),jtr=i(ne),kT=n(ne,"LI",{});var jye=s(kT);Zme=n(jye,"STRONG",{});var ert=s(Zme);Ntr=r(ert,"convbert"),ert.forEach(t),Dtr=r(jye," \u2014 "),WD=n(jye,"A",{href:!0});var ort=s(WD);qtr=r(ort,"TFConvBertForMultipleChoice"),ort.forEach(t),Otr=r(jye," (ConvBERT model)"),jye.forEach(t),Gtr=i(ne),xT=n(ne,"LI",{});var Nye=s(xT);ege=n(Nye,"STRONG",{});var rrt=s(ege);Xtr=r(rrt,"distilbert"),rrt.forEach(t),ztr=r(Nye," \u2014 "),QD=n(Nye,"A",{href:!0});var trt=s(QD);Vtr=r(trt,"TFDistilBertForMultipleChoice"),trt.forEach(t),Wtr=r(Nye," (DistilBERT model)"),Nye.forEach(t),Qtr=i(ne),RT=n(ne,"LI",{});var Dye=s(RT);oge=n(Dye,"STRONG",{});var art=s(oge);Htr=r(art,"electra"),art.forEach(t),Utr=r(Dye," \u2014 "),HD=n(Dye,"A",{href:!0});var nrt=s(HD);Jtr=r(nrt,"TFElectraForMultipleChoice"),nrt.forEach(t),Ytr=r(Dye," (ELECTRA model)"),Dye.forEach(t),Ktr=i(ne),ST=n(ne,"LI",{});var qye=s(ST);rge=n(qye,"STRONG",{});var srt=s(rge);Ztr=r(srt,"flaubert"),srt.forEach(t),ear=r(qye," \u2014 "),UD=n(qye,"A",{href:!0});var lrt=s(UD);oar=r(lrt,"TFFlaubertForMultipleChoice"),lrt.forEach(t),rar=r(qye," (FlauBERT model)"),qye.forEach(t),tar=i(ne),PT=n(ne,"LI",{});var Oye=s(PT);tge=n(Oye,"STRONG",{});var irt=s(tge);aar=r(irt,"funnel"),irt.forEach(t),nar=r(Oye," \u2014 "),JD=n(Oye,"A",{href:!0});var drt=s(JD);sar=r(drt,"TFFunnelForMultipleChoice"),drt.forEach(t),lar=r(Oye," (Funnel Transformer model)"),Oye.forEach(t),iar=i(ne),$T=n(ne,"LI",{});var Gye=s($T);age=n(Gye,"STRONG",{});var crt=s(age);dar=r(crt,"longformer"),crt.forEach(t),car=r(Gye," \u2014 "),YD=n(Gye,"A",{href:!0});var frt=s(YD);far=r(frt,"TFLongformerForMultipleChoice"),frt.forEach(t),mar=r(Gye," (Longformer model)"),Gye.forEach(t),gar=i(ne),IT=n(ne,"LI",{});var Xye=s(IT);nge=n(Xye,"STRONG",{});var mrt=s(nge);har=r(mrt,"mobilebert"),mrt.forEach(t),par=r(Xye," \u2014 "),KD=n(Xye,"A",{href:!0});var grt=s(KD);_ar=r(grt,"TFMobileBertForMultipleChoice"),grt.forEach(t),uar=r(Xye," (MobileBERT model)"),Xye.forEach(t),bar=i(ne),jT=n(ne,"LI",{});var zye=s(jT);sge=n(zye,"STRONG",{});var hrt=s(sge);Tar=r(hrt,"mpnet"),hrt.forEach(t),Far=r(zye," \u2014 "),ZD=n(zye,"A",{href:!0});var prt=s(ZD);Car=r(prt,"TFMPNetForMultipleChoice"),prt.forEach(t),Mar=r(zye," (MPNet model)"),zye.forEach(t),Ear=i(ne),NT=n(ne,"LI",{});var Vye=s(NT);lge=n(Vye,"STRONG",{});var _rt=s(lge);yar=r(_rt,"rembert"),_rt.forEach(t),war=r(Vye," \u2014 "),eq=n(Vye,"A",{href:!0});var urt=s(eq);Aar=r(urt,"TFRemBertForMultipleChoice"),urt.forEach(t),Lar=r(Vye," (RemBERT model)"),Vye.forEach(t),Bar=i(ne),DT=n(ne,"LI",{});var Wye=s(DT);ige=n(Wye,"STRONG",{});var brt=s(ige);kar=r(brt,"roberta"),brt.forEach(t),xar=r(Wye," \u2014 "),oq=n(Wye,"A",{href:!0});var vrt=s(oq);Rar=r(vrt,"TFRobertaForMultipleChoice"),vrt.forEach(t),Sar=r(Wye," (RoBERTa model)"),Wye.forEach(t),Par=i(ne),qT=n(ne,"LI",{});var Qye=s(qT);dge=n(Qye,"STRONG",{});var Trt=s(dge);$ar=r(Trt,"roformer"),Trt.forEach(t),Iar=r(Qye," \u2014 "),rq=n(Qye,"A",{href:!0});var Frt=s(rq);jar=r(Frt,"TFRoFormerForMultipleChoice"),Frt.forEach(t),Nar=r(Qye," (RoFormer model)"),Qye.forEach(t),Dar=i(ne),OT=n(ne,"LI",{});var Hye=s(OT);cge=n(Hye,"STRONG",{});var Crt=s(cge);qar=r(Crt,"xlm"),Crt.forEach(t),Oar=r(Hye," \u2014 "),tq=n(Hye,"A",{href:!0});var Mrt=s(tq);Gar=r(Mrt,"TFXLMForMultipleChoice"),Mrt.forEach(t),Xar=r(Hye," (XLM model)"),Hye.forEach(t),zar=i(ne),GT=n(ne,"LI",{});var Uye=s(GT);fge=n(Uye,"STRONG",{});var Ert=s(fge);Var=r(Ert,"xlm-roberta"),Ert.forEach(t),War=r(Uye," \u2014 "),aq=n(Uye,"A",{href:!0});var yrt=s(aq);Qar=r(yrt,"TFXLMRobertaForMultipleChoice"),yrt.forEach(t),Har=r(Uye," (XLM-RoBERTa model)"),Uye.forEach(t),Uar=i(ne),XT=n(ne,"LI",{});var Jye=s(XT);mge=n(Jye,"STRONG",{});var wrt=s(mge);Jar=r(wrt,"xlnet"),wrt.forEach(t),Yar=r(Jye," \u2014 "),nq=n(Jye,"A",{href:!0});var Art=s(nq);Kar=r(Art,"TFXLNetForMultipleChoice"),Art.forEach(t),Zar=r(Jye," (XLNet model)"),Jye.forEach(t),ne.forEach(t),enr=i(ca),gge=n(ca,"P",{});var Lrt=s(gge);onr=r(Lrt,"Examples:"),Lrt.forEach(t),rnr=i(ca),m(Hy.$$.fragment,ca),ca.forEach(t),xl.forEach(t),q6e=i(d),ic=n(d,"H2",{class:!0});var z8e=s(ic);zT=n(z8e,"A",{id:!0,class:!0,href:!0});var Brt=s(zT);hge=n(Brt,"SPAN",{});var krt=s(hge);m(Uy.$$.fragment,krt),krt.forEach(t),Brt.forEach(t),tnr=i(z8e),pge=n(z8e,"SPAN",{});var xrt=s(pge);anr=r(xrt,"TFAutoModelForTableQuestionAnswering"),xrt.forEach(t),z8e.forEach(t),O6e=i(d),br=n(d,"DIV",{class:!0});var Sl=s(br);m(Jy.$$.fragment,Sl),nnr=i(Sl),dc=n(Sl,"P",{});var qX=s(dc);snr=r(qX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_ge=n(qX,"CODE",{});var Rrt=s(_ge);lnr=r(Rrt,"from_pretrained()"),Rrt.forEach(t),inr=r(qX,"class method or the "),uge=n(qX,"CODE",{});var Srt=s(uge);dnr=r(Srt,"from_config()"),Srt.forEach(t),cnr=r(qX,`class
method.`),qX.forEach(t),fnr=i(Sl),Yy=n(Sl,"P",{});var V8e=s(Yy);mnr=r(V8e,"This class cannot be instantiated directly using "),bge=n(V8e,"CODE",{});var Prt=s(bge);gnr=r(Prt,"__init__()"),Prt.forEach(t),hnr=r(V8e," (throws an error)."),V8e.forEach(t),pnr=i(Sl),dt=n(Sl,"DIV",{class:!0});var Pl=s(dt);m(Ky.$$.fragment,Pl),_nr=i(Pl),vge=n(Pl,"P",{});var $rt=s(vge);unr=r($rt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$rt.forEach(t),bnr=i(Pl),cc=n(Pl,"P",{});var OX=s(cc);vnr=r(OX,`Note:
Loading a model from its configuration file does `),Tge=n(OX,"STRONG",{});var Irt=s(Tge);Tnr=r(Irt,"not"),Irt.forEach(t),Fnr=r(OX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fge=n(OX,"CODE",{});var jrt=s(Fge);Cnr=r(jrt,"from_pretrained()"),jrt.forEach(t),Mnr=r(OX,"to load the model weights."),OX.forEach(t),Enr=i(Pl),Cge=n(Pl,"P",{});var Nrt=s(Cge);ynr=r(Nrt,"Examples:"),Nrt.forEach(t),wnr=i(Pl),m(Zy.$$.fragment,Pl),Pl.forEach(t),Anr=i(Sl),To=n(Sl,"DIV",{class:!0});var fa=s(To);m(ew.$$.fragment,fa),Lnr=i(fa),Mge=n(fa,"P",{});var Drt=s(Mge);Bnr=r(Drt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Drt.forEach(t),knr=i(fa),sn=n(fa,"P",{});var cC=s(sn);xnr=r(cC,"The model class to instantiate is selected based on the "),Ege=n(cC,"CODE",{});var qrt=s(Ege);Rnr=r(qrt,"model_type"),qrt.forEach(t),Snr=r(cC,` property of the config object (either
passed as an argument or loaded from `),yge=n(cC,"CODE",{});var Ort=s(yge);Pnr=r(Ort,"pretrained_model_name_or_path"),Ort.forEach(t),$nr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(cC,"CODE",{});var Grt=s(wge);Inr=r(Grt,"pretrained_model_name_or_path"),Grt.forEach(t),jnr=r(cC,":"),cC.forEach(t),Nnr=i(fa),Age=n(fa,"UL",{});var Xrt=s(Age);VT=n(Xrt,"LI",{});var Yye=s(VT);Lge=n(Yye,"STRONG",{});var zrt=s(Lge);Dnr=r(zrt,"tapas"),zrt.forEach(t),qnr=r(Yye," \u2014 "),sq=n(Yye,"A",{href:!0});var Vrt=s(sq);Onr=r(Vrt,"TFTapasForQuestionAnswering"),Vrt.forEach(t),Gnr=r(Yye," (TAPAS model)"),Yye.forEach(t),Xrt.forEach(t),Xnr=i(fa),Bge=n(fa,"P",{});var Wrt=s(Bge);znr=r(Wrt,"Examples:"),Wrt.forEach(t),Vnr=i(fa),m(ow.$$.fragment,fa),fa.forEach(t),Sl.forEach(t),G6e=i(d),fc=n(d,"H2",{class:!0});var W8e=s(fc);WT=n(W8e,"A",{id:!0,class:!0,href:!0});var Qrt=s(WT);kge=n(Qrt,"SPAN",{});var Hrt=s(kge);m(rw.$$.fragment,Hrt),Hrt.forEach(t),Qrt.forEach(t),Wnr=i(W8e),xge=n(W8e,"SPAN",{});var Urt=s(xge);Qnr=r(Urt,"TFAutoModelForTokenClassification"),Urt.forEach(t),W8e.forEach(t),X6e=i(d),vr=n(d,"DIV",{class:!0});var $l=s(vr);m(tw.$$.fragment,$l),Hnr=i($l),mc=n($l,"P",{});var GX=s(mc);Unr=r(GX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Rge=n(GX,"CODE",{});var Jrt=s(Rge);Jnr=r(Jrt,"from_pretrained()"),Jrt.forEach(t),Ynr=r(GX,"class method or the "),Sge=n(GX,"CODE",{});var Yrt=s(Sge);Knr=r(Yrt,"from_config()"),Yrt.forEach(t),Znr=r(GX,`class
method.`),GX.forEach(t),esr=i($l),aw=n($l,"P",{});var Q8e=s(aw);osr=r(Q8e,"This class cannot be instantiated directly using "),Pge=n(Q8e,"CODE",{});var Krt=s(Pge);rsr=r(Krt,"__init__()"),Krt.forEach(t),tsr=r(Q8e," (throws an error)."),Q8e.forEach(t),asr=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(nw.$$.fragment,Il),nsr=i(Il),$ge=n(Il,"P",{});var Zrt=s($ge);ssr=r(Zrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Zrt.forEach(t),lsr=i(Il),gc=n(Il,"P",{});var XX=s(gc);isr=r(XX,`Note:
Loading a model from its configuration file does `),Ige=n(XX,"STRONG",{});var ett=s(Ige);dsr=r(ett,"not"),ett.forEach(t),csr=r(XX,` load the model weights. It only affects the
model\u2019s configuration. Use `),jge=n(XX,"CODE",{});var ott=s(jge);fsr=r(ott,"from_pretrained()"),ott.forEach(t),msr=r(XX,"to load the model weights."),XX.forEach(t),gsr=i(Il),Nge=n(Il,"P",{});var rtt=s(Nge);hsr=r(rtt,"Examples:"),rtt.forEach(t),psr=i(Il),m(sw.$$.fragment,Il),Il.forEach(t),_sr=i($l),Fo=n($l,"DIV",{class:!0});var ma=s(Fo);m(lw.$$.fragment,ma),usr=i(ma),Dge=n(ma,"P",{});var ttt=s(Dge);bsr=r(ttt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ttt.forEach(t),vsr=i(ma),ln=n(ma,"P",{});var fC=s(ln);Tsr=r(fC,"The model class to instantiate is selected based on the "),qge=n(fC,"CODE",{});var att=s(qge);Fsr=r(att,"model_type"),att.forEach(t),Csr=r(fC,` property of the config object (either
passed as an argument or loaded from `),Oge=n(fC,"CODE",{});var ntt=s(Oge);Msr=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),Esr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(fC,"CODE",{});var stt=s(Gge);ysr=r(stt,"pretrained_model_name_or_path"),stt.forEach(t),wsr=r(fC,":"),fC.forEach(t),Asr=i(ma),K=n(ma,"UL",{});var oe=s(K);QT=n(oe,"LI",{});var Kye=s(QT);Xge=n(Kye,"STRONG",{});var ltt=s(Xge);Lsr=r(ltt,"albert"),ltt.forEach(t),Bsr=r(Kye," \u2014 "),lq=n(Kye,"A",{href:!0});var itt=s(lq);ksr=r(itt,"TFAlbertForTokenClassification"),itt.forEach(t),xsr=r(Kye," (ALBERT model)"),Kye.forEach(t),Rsr=i(oe),HT=n(oe,"LI",{});var Zye=s(HT);zge=n(Zye,"STRONG",{});var dtt=s(zge);Ssr=r(dtt,"bert"),dtt.forEach(t),Psr=r(Zye," \u2014 "),iq=n(Zye,"A",{href:!0});var ctt=s(iq);$sr=r(ctt,"TFBertForTokenClassification"),ctt.forEach(t),Isr=r(Zye," (BERT model)"),Zye.forEach(t),jsr=i(oe),UT=n(oe,"LI",{});var ewe=s(UT);Vge=n(ewe,"STRONG",{});var ftt=s(Vge);Nsr=r(ftt,"camembert"),ftt.forEach(t),Dsr=r(ewe," \u2014 "),dq=n(ewe,"A",{href:!0});var mtt=s(dq);qsr=r(mtt,"TFCamembertForTokenClassification"),mtt.forEach(t),Osr=r(ewe," (CamemBERT model)"),ewe.forEach(t),Gsr=i(oe),JT=n(oe,"LI",{});var owe=s(JT);Wge=n(owe,"STRONG",{});var gtt=s(Wge);Xsr=r(gtt,"convbert"),gtt.forEach(t),zsr=r(owe," \u2014 "),cq=n(owe,"A",{href:!0});var htt=s(cq);Vsr=r(htt,"TFConvBertForTokenClassification"),htt.forEach(t),Wsr=r(owe," (ConvBERT model)"),owe.forEach(t),Qsr=i(oe),YT=n(oe,"LI",{});var rwe=s(YT);Qge=n(rwe,"STRONG",{});var ptt=s(Qge);Hsr=r(ptt,"deberta"),ptt.forEach(t),Usr=r(rwe," \u2014 "),fq=n(rwe,"A",{href:!0});var _tt=s(fq);Jsr=r(_tt,"TFDebertaForTokenClassification"),_tt.forEach(t),Ysr=r(rwe," (DeBERTa model)"),rwe.forEach(t),Ksr=i(oe),KT=n(oe,"LI",{});var twe=s(KT);Hge=n(twe,"STRONG",{});var utt=s(Hge);Zsr=r(utt,"deberta-v2"),utt.forEach(t),elr=r(twe," \u2014 "),mq=n(twe,"A",{href:!0});var btt=s(mq);olr=r(btt,"TFDebertaV2ForTokenClassification"),btt.forEach(t),rlr=r(twe," (DeBERTa-v2 model)"),twe.forEach(t),tlr=i(oe),ZT=n(oe,"LI",{});var awe=s(ZT);Uge=n(awe,"STRONG",{});var vtt=s(Uge);alr=r(vtt,"distilbert"),vtt.forEach(t),nlr=r(awe," \u2014 "),gq=n(awe,"A",{href:!0});var Ttt=s(gq);slr=r(Ttt,"TFDistilBertForTokenClassification"),Ttt.forEach(t),llr=r(awe," (DistilBERT model)"),awe.forEach(t),ilr=i(oe),e7=n(oe,"LI",{});var nwe=s(e7);Jge=n(nwe,"STRONG",{});var Ftt=s(Jge);dlr=r(Ftt,"electra"),Ftt.forEach(t),clr=r(nwe," \u2014 "),hq=n(nwe,"A",{href:!0});var Ctt=s(hq);flr=r(Ctt,"TFElectraForTokenClassification"),Ctt.forEach(t),mlr=r(nwe," (ELECTRA model)"),nwe.forEach(t),glr=i(oe),o7=n(oe,"LI",{});var swe=s(o7);Yge=n(swe,"STRONG",{});var Mtt=s(Yge);hlr=r(Mtt,"flaubert"),Mtt.forEach(t),plr=r(swe," \u2014 "),pq=n(swe,"A",{href:!0});var Ett=s(pq);_lr=r(Ett,"TFFlaubertForTokenClassification"),Ett.forEach(t),ulr=r(swe," (FlauBERT model)"),swe.forEach(t),blr=i(oe),r7=n(oe,"LI",{});var lwe=s(r7);Kge=n(lwe,"STRONG",{});var ytt=s(Kge);vlr=r(ytt,"funnel"),ytt.forEach(t),Tlr=r(lwe," \u2014 "),_q=n(lwe,"A",{href:!0});var wtt=s(_q);Flr=r(wtt,"TFFunnelForTokenClassification"),wtt.forEach(t),Clr=r(lwe," (Funnel Transformer model)"),lwe.forEach(t),Mlr=i(oe),t7=n(oe,"LI",{});var iwe=s(t7);Zge=n(iwe,"STRONG",{});var Att=s(Zge);Elr=r(Att,"layoutlm"),Att.forEach(t),ylr=r(iwe," \u2014 "),uq=n(iwe,"A",{href:!0});var Ltt=s(uq);wlr=r(Ltt,"TFLayoutLMForTokenClassification"),Ltt.forEach(t),Alr=r(iwe," (LayoutLM model)"),iwe.forEach(t),Llr=i(oe),a7=n(oe,"LI",{});var dwe=s(a7);ehe=n(dwe,"STRONG",{});var Btt=s(ehe);Blr=r(Btt,"longformer"),Btt.forEach(t),klr=r(dwe," \u2014 "),bq=n(dwe,"A",{href:!0});var ktt=s(bq);xlr=r(ktt,"TFLongformerForTokenClassification"),ktt.forEach(t),Rlr=r(dwe," (Longformer model)"),dwe.forEach(t),Slr=i(oe),n7=n(oe,"LI",{});var cwe=s(n7);ohe=n(cwe,"STRONG",{});var xtt=s(ohe);Plr=r(xtt,"mobilebert"),xtt.forEach(t),$lr=r(cwe," \u2014 "),vq=n(cwe,"A",{href:!0});var Rtt=s(vq);Ilr=r(Rtt,"TFMobileBertForTokenClassification"),Rtt.forEach(t),jlr=r(cwe," (MobileBERT model)"),cwe.forEach(t),Nlr=i(oe),s7=n(oe,"LI",{});var fwe=s(s7);rhe=n(fwe,"STRONG",{});var Stt=s(rhe);Dlr=r(Stt,"mpnet"),Stt.forEach(t),qlr=r(fwe," \u2014 "),Tq=n(fwe,"A",{href:!0});var Ptt=s(Tq);Olr=r(Ptt,"TFMPNetForTokenClassification"),Ptt.forEach(t),Glr=r(fwe," (MPNet model)"),fwe.forEach(t),Xlr=i(oe),l7=n(oe,"LI",{});var mwe=s(l7);the=n(mwe,"STRONG",{});var $tt=s(the);zlr=r($tt,"rembert"),$tt.forEach(t),Vlr=r(mwe," \u2014 "),Fq=n(mwe,"A",{href:!0});var Itt=s(Fq);Wlr=r(Itt,"TFRemBertForTokenClassification"),Itt.forEach(t),Qlr=r(mwe," (RemBERT model)"),mwe.forEach(t),Hlr=i(oe),i7=n(oe,"LI",{});var gwe=s(i7);ahe=n(gwe,"STRONG",{});var jtt=s(ahe);Ulr=r(jtt,"roberta"),jtt.forEach(t),Jlr=r(gwe," \u2014 "),Cq=n(gwe,"A",{href:!0});var Ntt=s(Cq);Ylr=r(Ntt,"TFRobertaForTokenClassification"),Ntt.forEach(t),Klr=r(gwe," (RoBERTa model)"),gwe.forEach(t),Zlr=i(oe),d7=n(oe,"LI",{});var hwe=s(d7);nhe=n(hwe,"STRONG",{});var Dtt=s(nhe);eir=r(Dtt,"roformer"),Dtt.forEach(t),oir=r(hwe," \u2014 "),Mq=n(hwe,"A",{href:!0});var qtt=s(Mq);rir=r(qtt,"TFRoFormerForTokenClassification"),qtt.forEach(t),tir=r(hwe," (RoFormer model)"),hwe.forEach(t),air=i(oe),c7=n(oe,"LI",{});var pwe=s(c7);she=n(pwe,"STRONG",{});var Ott=s(she);nir=r(Ott,"xlm"),Ott.forEach(t),sir=r(pwe," \u2014 "),Eq=n(pwe,"A",{href:!0});var Gtt=s(Eq);lir=r(Gtt,"TFXLMForTokenClassification"),Gtt.forEach(t),iir=r(pwe," (XLM model)"),pwe.forEach(t),dir=i(oe),f7=n(oe,"LI",{});var _we=s(f7);lhe=n(_we,"STRONG",{});var Xtt=s(lhe);cir=r(Xtt,"xlm-roberta"),Xtt.forEach(t),fir=r(_we," \u2014 "),yq=n(_we,"A",{href:!0});var ztt=s(yq);mir=r(ztt,"TFXLMRobertaForTokenClassification"),ztt.forEach(t),gir=r(_we," (XLM-RoBERTa model)"),_we.forEach(t),hir=i(oe),m7=n(oe,"LI",{});var uwe=s(m7);ihe=n(uwe,"STRONG",{});var Vtt=s(ihe);pir=r(Vtt,"xlnet"),Vtt.forEach(t),_ir=r(uwe," \u2014 "),wq=n(uwe,"A",{href:!0});var Wtt=s(wq);uir=r(Wtt,"TFXLNetForTokenClassification"),Wtt.forEach(t),bir=r(uwe," (XLNet model)"),uwe.forEach(t),oe.forEach(t),vir=i(ma),dhe=n(ma,"P",{});var Qtt=s(dhe);Tir=r(Qtt,"Examples:"),Qtt.forEach(t),Fir=i(ma),m(iw.$$.fragment,ma),ma.forEach(t),$l.forEach(t),z6e=i(d),hc=n(d,"H2",{class:!0});var H8e=s(hc);g7=n(H8e,"A",{id:!0,class:!0,href:!0});var Htt=s(g7);che=n(Htt,"SPAN",{});var Utt=s(che);m(dw.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),Cir=i(H8e),fhe=n(H8e,"SPAN",{});var Jtt=s(fhe);Mir=r(Jtt,"TFAutoModelForQuestionAnswering"),Jtt.forEach(t),H8e.forEach(t),V6e=i(d),Tr=n(d,"DIV",{class:!0});var jl=s(Tr);m(cw.$$.fragment,jl),Eir=i(jl),pc=n(jl,"P",{});var zX=s(pc);yir=r(zX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mhe=n(zX,"CODE",{});var Ytt=s(mhe);wir=r(Ytt,"from_pretrained()"),Ytt.forEach(t),Air=r(zX,"class method or the "),ghe=n(zX,"CODE",{});var Ktt=s(ghe);Lir=r(Ktt,"from_config()"),Ktt.forEach(t),Bir=r(zX,`class
method.`),zX.forEach(t),kir=i(jl),fw=n(jl,"P",{});var U8e=s(fw);xir=r(U8e,"This class cannot be instantiated directly using "),hhe=n(U8e,"CODE",{});var Ztt=s(hhe);Rir=r(Ztt,"__init__()"),Ztt.forEach(t),Sir=r(U8e," (throws an error)."),U8e.forEach(t),Pir=i(jl),ft=n(jl,"DIV",{class:!0});var Nl=s(ft);m(mw.$$.fragment,Nl),$ir=i(Nl),phe=n(Nl,"P",{});var eat=s(phe);Iir=r(eat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),eat.forEach(t),jir=i(Nl),_c=n(Nl,"P",{});var VX=s(_c);Nir=r(VX,`Note:
Loading a model from its configuration file does `),_he=n(VX,"STRONG",{});var oat=s(_he);Dir=r(oat,"not"),oat.forEach(t),qir=r(VX,` load the model weights. It only affects the
model\u2019s configuration. Use `),uhe=n(VX,"CODE",{});var rat=s(uhe);Oir=r(rat,"from_pretrained()"),rat.forEach(t),Gir=r(VX,"to load the model weights."),VX.forEach(t),Xir=i(Nl),bhe=n(Nl,"P",{});var tat=s(bhe);zir=r(tat,"Examples:"),tat.forEach(t),Vir=i(Nl),m(gw.$$.fragment,Nl),Nl.forEach(t),Wir=i(jl),Co=n(jl,"DIV",{class:!0});var ga=s(Co);m(hw.$$.fragment,ga),Qir=i(ga),vhe=n(ga,"P",{});var aat=s(vhe);Hir=r(aat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aat.forEach(t),Uir=i(ga),dn=n(ga,"P",{});var mC=s(dn);Jir=r(mC,"The model class to instantiate is selected based on the "),The=n(mC,"CODE",{});var nat=s(The);Yir=r(nat,"model_type"),nat.forEach(t),Kir=r(mC,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(mC,"CODE",{});var sat=s(Fhe);Zir=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),edr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(mC,"CODE",{});var lat=s(Che);odr=r(lat,"pretrained_model_name_or_path"),lat.forEach(t),rdr=r(mC,":"),mC.forEach(t),tdr=i(ga),Z=n(ga,"UL",{});var re=s(Z);h7=n(re,"LI",{});var bwe=s(h7);Mhe=n(bwe,"STRONG",{});var iat=s(Mhe);adr=r(iat,"albert"),iat.forEach(t),ndr=r(bwe," \u2014 "),Aq=n(bwe,"A",{href:!0});var dat=s(Aq);sdr=r(dat,"TFAlbertForQuestionAnswering"),dat.forEach(t),ldr=r(bwe," (ALBERT model)"),bwe.forEach(t),idr=i(re),p7=n(re,"LI",{});var vwe=s(p7);Ehe=n(vwe,"STRONG",{});var cat=s(Ehe);ddr=r(cat,"bert"),cat.forEach(t),cdr=r(vwe," \u2014 "),Lq=n(vwe,"A",{href:!0});var fat=s(Lq);fdr=r(fat,"TFBertForQuestionAnswering"),fat.forEach(t),mdr=r(vwe," (BERT model)"),vwe.forEach(t),gdr=i(re),_7=n(re,"LI",{});var Twe=s(_7);yhe=n(Twe,"STRONG",{});var mat=s(yhe);hdr=r(mat,"camembert"),mat.forEach(t),pdr=r(Twe," \u2014 "),Bq=n(Twe,"A",{href:!0});var gat=s(Bq);_dr=r(gat,"TFCamembertForQuestionAnswering"),gat.forEach(t),udr=r(Twe," (CamemBERT model)"),Twe.forEach(t),bdr=i(re),u7=n(re,"LI",{});var Fwe=s(u7);whe=n(Fwe,"STRONG",{});var hat=s(whe);vdr=r(hat,"convbert"),hat.forEach(t),Tdr=r(Fwe," \u2014 "),kq=n(Fwe,"A",{href:!0});var pat=s(kq);Fdr=r(pat,"TFConvBertForQuestionAnswering"),pat.forEach(t),Cdr=r(Fwe," (ConvBERT model)"),Fwe.forEach(t),Mdr=i(re),b7=n(re,"LI",{});var Cwe=s(b7);Ahe=n(Cwe,"STRONG",{});var _at=s(Ahe);Edr=r(_at,"deberta"),_at.forEach(t),ydr=r(Cwe," \u2014 "),xq=n(Cwe,"A",{href:!0});var uat=s(xq);wdr=r(uat,"TFDebertaForQuestionAnswering"),uat.forEach(t),Adr=r(Cwe," (DeBERTa model)"),Cwe.forEach(t),Ldr=i(re),v7=n(re,"LI",{});var Mwe=s(v7);Lhe=n(Mwe,"STRONG",{});var bat=s(Lhe);Bdr=r(bat,"deberta-v2"),bat.forEach(t),kdr=r(Mwe," \u2014 "),Rq=n(Mwe,"A",{href:!0});var vat=s(Rq);xdr=r(vat,"TFDebertaV2ForQuestionAnswering"),vat.forEach(t),Rdr=r(Mwe," (DeBERTa-v2 model)"),Mwe.forEach(t),Sdr=i(re),T7=n(re,"LI",{});var Ewe=s(T7);Bhe=n(Ewe,"STRONG",{});var Tat=s(Bhe);Pdr=r(Tat,"distilbert"),Tat.forEach(t),$dr=r(Ewe," \u2014 "),Sq=n(Ewe,"A",{href:!0});var Fat=s(Sq);Idr=r(Fat,"TFDistilBertForQuestionAnswering"),Fat.forEach(t),jdr=r(Ewe," (DistilBERT model)"),Ewe.forEach(t),Ndr=i(re),F7=n(re,"LI",{});var ywe=s(F7);khe=n(ywe,"STRONG",{});var Cat=s(khe);Ddr=r(Cat,"electra"),Cat.forEach(t),qdr=r(ywe," \u2014 "),Pq=n(ywe,"A",{href:!0});var Mat=s(Pq);Odr=r(Mat,"TFElectraForQuestionAnswering"),Mat.forEach(t),Gdr=r(ywe," (ELECTRA model)"),ywe.forEach(t),Xdr=i(re),C7=n(re,"LI",{});var wwe=s(C7);xhe=n(wwe,"STRONG",{});var Eat=s(xhe);zdr=r(Eat,"flaubert"),Eat.forEach(t),Vdr=r(wwe," \u2014 "),$q=n(wwe,"A",{href:!0});var yat=s($q);Wdr=r(yat,"TFFlaubertForQuestionAnsweringSimple"),yat.forEach(t),Qdr=r(wwe," (FlauBERT model)"),wwe.forEach(t),Hdr=i(re),M7=n(re,"LI",{});var Awe=s(M7);Rhe=n(Awe,"STRONG",{});var wat=s(Rhe);Udr=r(wat,"funnel"),wat.forEach(t),Jdr=r(Awe," \u2014 "),Iq=n(Awe,"A",{href:!0});var Aat=s(Iq);Ydr=r(Aat,"TFFunnelForQuestionAnswering"),Aat.forEach(t),Kdr=r(Awe," (Funnel Transformer model)"),Awe.forEach(t),Zdr=i(re),E7=n(re,"LI",{});var Lwe=s(E7);She=n(Lwe,"STRONG",{});var Lat=s(She);ecr=r(Lat,"longformer"),Lat.forEach(t),ocr=r(Lwe," \u2014 "),jq=n(Lwe,"A",{href:!0});var Bat=s(jq);rcr=r(Bat,"TFLongformerForQuestionAnswering"),Bat.forEach(t),tcr=r(Lwe," (Longformer model)"),Lwe.forEach(t),acr=i(re),y7=n(re,"LI",{});var Bwe=s(y7);Phe=n(Bwe,"STRONG",{});var kat=s(Phe);ncr=r(kat,"mobilebert"),kat.forEach(t),scr=r(Bwe," \u2014 "),Nq=n(Bwe,"A",{href:!0});var xat=s(Nq);lcr=r(xat,"TFMobileBertForQuestionAnswering"),xat.forEach(t),icr=r(Bwe," (MobileBERT model)"),Bwe.forEach(t),dcr=i(re),w7=n(re,"LI",{});var kwe=s(w7);$he=n(kwe,"STRONG",{});var Rat=s($he);ccr=r(Rat,"mpnet"),Rat.forEach(t),fcr=r(kwe," \u2014 "),Dq=n(kwe,"A",{href:!0});var Sat=s(Dq);mcr=r(Sat,"TFMPNetForQuestionAnswering"),Sat.forEach(t),gcr=r(kwe," (MPNet model)"),kwe.forEach(t),hcr=i(re),A7=n(re,"LI",{});var xwe=s(A7);Ihe=n(xwe,"STRONG",{});var Pat=s(Ihe);pcr=r(Pat,"rembert"),Pat.forEach(t),_cr=r(xwe," \u2014 "),qq=n(xwe,"A",{href:!0});var $at=s(qq);ucr=r($at,"TFRemBertForQuestionAnswering"),$at.forEach(t),bcr=r(xwe," (RemBERT model)"),xwe.forEach(t),vcr=i(re),L7=n(re,"LI",{});var Rwe=s(L7);jhe=n(Rwe,"STRONG",{});var Iat=s(jhe);Tcr=r(Iat,"roberta"),Iat.forEach(t),Fcr=r(Rwe," \u2014 "),Oq=n(Rwe,"A",{href:!0});var jat=s(Oq);Ccr=r(jat,"TFRobertaForQuestionAnswering"),jat.forEach(t),Mcr=r(Rwe," (RoBERTa model)"),Rwe.forEach(t),Ecr=i(re),B7=n(re,"LI",{});var Swe=s(B7);Nhe=n(Swe,"STRONG",{});var Nat=s(Nhe);ycr=r(Nat,"roformer"),Nat.forEach(t),wcr=r(Swe," \u2014 "),Gq=n(Swe,"A",{href:!0});var Dat=s(Gq);Acr=r(Dat,"TFRoFormerForQuestionAnswering"),Dat.forEach(t),Lcr=r(Swe," (RoFormer model)"),Swe.forEach(t),Bcr=i(re),k7=n(re,"LI",{});var Pwe=s(k7);Dhe=n(Pwe,"STRONG",{});var qat=s(Dhe);kcr=r(qat,"xlm"),qat.forEach(t),xcr=r(Pwe," \u2014 "),Xq=n(Pwe,"A",{href:!0});var Oat=s(Xq);Rcr=r(Oat,"TFXLMForQuestionAnsweringSimple"),Oat.forEach(t),Scr=r(Pwe," (XLM model)"),Pwe.forEach(t),Pcr=i(re),x7=n(re,"LI",{});var $we=s(x7);qhe=n($we,"STRONG",{});var Gat=s(qhe);$cr=r(Gat,"xlm-roberta"),Gat.forEach(t),Icr=r($we," \u2014 "),zq=n($we,"A",{href:!0});var Xat=s(zq);jcr=r(Xat,"TFXLMRobertaForQuestionAnswering"),Xat.forEach(t),Ncr=r($we," (XLM-RoBERTa model)"),$we.forEach(t),Dcr=i(re),R7=n(re,"LI",{});var Iwe=s(R7);Ohe=n(Iwe,"STRONG",{});var zat=s(Ohe);qcr=r(zat,"xlnet"),zat.forEach(t),Ocr=r(Iwe," \u2014 "),Vq=n(Iwe,"A",{href:!0});var Vat=s(Vq);Gcr=r(Vat,"TFXLNetForQuestionAnsweringSimple"),Vat.forEach(t),Xcr=r(Iwe," (XLNet model)"),Iwe.forEach(t),re.forEach(t),zcr=i(ga),Ghe=n(ga,"P",{});var Wat=s(Ghe);Vcr=r(Wat,"Examples:"),Wat.forEach(t),Wcr=i(ga),m(pw.$$.fragment,ga),ga.forEach(t),jl.forEach(t),W6e=i(d),uc=n(d,"H2",{class:!0});var J8e=s(uc);S7=n(J8e,"A",{id:!0,class:!0,href:!0});var Qat=s(S7);Xhe=n(Qat,"SPAN",{});var Hat=s(Xhe);m(_w.$$.fragment,Hat),Hat.forEach(t),Qat.forEach(t),Qcr=i(J8e),zhe=n(J8e,"SPAN",{});var Uat=s(zhe);Hcr=r(Uat,"TFAutoModelForVision2Seq"),Uat.forEach(t),J8e.forEach(t),Q6e=i(d),Fr=n(d,"DIV",{class:!0});var Dl=s(Fr);m(uw.$$.fragment,Dl),Ucr=i(Dl),bc=n(Dl,"P",{});var WX=s(bc);Jcr=r(WX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Vhe=n(WX,"CODE",{});var Jat=s(Vhe);Ycr=r(Jat,"from_pretrained()"),Jat.forEach(t),Kcr=r(WX,"class method or the "),Whe=n(WX,"CODE",{});var Yat=s(Whe);Zcr=r(Yat,"from_config()"),Yat.forEach(t),efr=r(WX,`class
method.`),WX.forEach(t),ofr=i(Dl),bw=n(Dl,"P",{});var Y8e=s(bw);rfr=r(Y8e,"This class cannot be instantiated directly using "),Qhe=n(Y8e,"CODE",{});var Kat=s(Qhe);tfr=r(Kat,"__init__()"),Kat.forEach(t),afr=r(Y8e," (throws an error)."),Y8e.forEach(t),nfr=i(Dl),mt=n(Dl,"DIV",{class:!0});var ql=s(mt);m(vw.$$.fragment,ql),sfr=i(ql),Hhe=n(ql,"P",{});var Zat=s(Hhe);lfr=r(Zat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zat.forEach(t),ifr=i(ql),vc=n(ql,"P",{});var QX=s(vc);dfr=r(QX,`Note:
Loading a model from its configuration file does `),Uhe=n(QX,"STRONG",{});var ent=s(Uhe);cfr=r(ent,"not"),ent.forEach(t),ffr=r(QX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jhe=n(QX,"CODE",{});var ont=s(Jhe);mfr=r(ont,"from_pretrained()"),ont.forEach(t),gfr=r(QX,"to load the model weights."),QX.forEach(t),hfr=i(ql),Yhe=n(ql,"P",{});var rnt=s(Yhe);pfr=r(rnt,"Examples:"),rnt.forEach(t),_fr=i(ql),m(Tw.$$.fragment,ql),ql.forEach(t),ufr=i(Dl),Mo=n(Dl,"DIV",{class:!0});var ha=s(Mo);m(Fw.$$.fragment,ha),bfr=i(ha),Khe=n(ha,"P",{});var tnt=s(Khe);vfr=r(tnt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tnt.forEach(t),Tfr=i(ha),cn=n(ha,"P",{});var gC=s(cn);Ffr=r(gC,"The model class to instantiate is selected based on the "),Zhe=n(gC,"CODE",{});var ant=s(Zhe);Cfr=r(ant,"model_type"),ant.forEach(t),Mfr=r(gC,` property of the config object (either
passed as an argument or loaded from `),epe=n(gC,"CODE",{});var nnt=s(epe);Efr=r(nnt,"pretrained_model_name_or_path"),nnt.forEach(t),yfr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ope=n(gC,"CODE",{});var snt=s(ope);wfr=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),Afr=r(gC,":"),gC.forEach(t),Lfr=i(ha),rpe=n(ha,"UL",{});var lnt=s(rpe);P7=n(lnt,"LI",{});var jwe=s(P7);tpe=n(jwe,"STRONG",{});var int=s(tpe);Bfr=r(int,"vision-encoder-decoder"),int.forEach(t),kfr=r(jwe," \u2014 "),Wq=n(jwe,"A",{href:!0});var dnt=s(Wq);xfr=r(dnt,"TFVisionEncoderDecoderModel"),dnt.forEach(t),Rfr=r(jwe," (Vision Encoder decoder model)"),jwe.forEach(t),lnt.forEach(t),Sfr=i(ha),ape=n(ha,"P",{});var cnt=s(ape);Pfr=r(cnt,"Examples:"),cnt.forEach(t),$fr=i(ha),m(Cw.$$.fragment,ha),ha.forEach(t),Dl.forEach(t),H6e=i(d),Tc=n(d,"H2",{class:!0});var K8e=s(Tc);$7=n(K8e,"A",{id:!0,class:!0,href:!0});var fnt=s($7);npe=n(fnt,"SPAN",{});var mnt=s(npe);m(Mw.$$.fragment,mnt),mnt.forEach(t),fnt.forEach(t),Ifr=i(K8e),spe=n(K8e,"SPAN",{});var gnt=s(spe);jfr=r(gnt,"FlaxAutoModel"),gnt.forEach(t),K8e.forEach(t),U6e=i(d),Cr=n(d,"DIV",{class:!0});var Ol=s(Cr);m(Ew.$$.fragment,Ol),Nfr=i(Ol),Fc=n(Ol,"P",{});var HX=s(Fc);Dfr=r(HX,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lpe=n(HX,"CODE",{});var hnt=s(lpe);qfr=r(hnt,"from_pretrained()"),hnt.forEach(t),Ofr=r(HX,"class method or the "),ipe=n(HX,"CODE",{});var pnt=s(ipe);Gfr=r(pnt,"from_config()"),pnt.forEach(t),Xfr=r(HX,`class
method.`),HX.forEach(t),zfr=i(Ol),yw=n(Ol,"P",{});var Z8e=s(yw);Vfr=r(Z8e,"This class cannot be instantiated directly using "),dpe=n(Z8e,"CODE",{});var _nt=s(dpe);Wfr=r(_nt,"__init__()"),_nt.forEach(t),Qfr=r(Z8e," (throws an error)."),Z8e.forEach(t),Hfr=i(Ol),gt=n(Ol,"DIV",{class:!0});var Gl=s(gt);m(ww.$$.fragment,Gl),Ufr=i(Gl),cpe=n(Gl,"P",{});var unt=s(cpe);Jfr=r(unt,"Instantiates one of the base model classes of the library from a configuration."),unt.forEach(t),Yfr=i(Gl),Cc=n(Gl,"P",{});var UX=s(Cc);Kfr=r(UX,`Note:
Loading a model from its configuration file does `),fpe=n(UX,"STRONG",{});var bnt=s(fpe);Zfr=r(bnt,"not"),bnt.forEach(t),emr=r(UX,` load the model weights. It only affects the
model\u2019s configuration. Use `),mpe=n(UX,"CODE",{});var vnt=s(mpe);omr=r(vnt,"from_pretrained()"),vnt.forEach(t),rmr=r(UX,"to load the model weights."),UX.forEach(t),tmr=i(Gl),gpe=n(Gl,"P",{});var Tnt=s(gpe);amr=r(Tnt,"Examples:"),Tnt.forEach(t),nmr=i(Gl),m(Aw.$$.fragment,Gl),Gl.forEach(t),smr=i(Ol),Eo=n(Ol,"DIV",{class:!0});var pa=s(Eo);m(Lw.$$.fragment,pa),lmr=i(pa),hpe=n(pa,"P",{});var Fnt=s(hpe);imr=r(Fnt,"Instantiate one of the base model classes of the library from a pretrained model."),Fnt.forEach(t),dmr=i(pa),fn=n(pa,"P",{});var hC=s(fn);cmr=r(hC,"The model class to instantiate is selected based on the "),ppe=n(hC,"CODE",{});var Cnt=s(ppe);fmr=r(Cnt,"model_type"),Cnt.forEach(t),mmr=r(hC,` property of the config object (either
passed as an argument or loaded from `),_pe=n(hC,"CODE",{});var Mnt=s(_pe);gmr=r(Mnt,"pretrained_model_name_or_path"),Mnt.forEach(t),hmr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),upe=n(hC,"CODE",{});var Ent=s(upe);pmr=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),_mr=r(hC,":"),hC.forEach(t),umr=i(pa),z=n(pa,"UL",{});var Q=s(z);I7=n(Q,"LI",{});var Nwe=s(I7);bpe=n(Nwe,"STRONG",{});var ynt=s(bpe);bmr=r(ynt,"albert"),ynt.forEach(t),vmr=r(Nwe," \u2014 "),Qq=n(Nwe,"A",{href:!0});var wnt=s(Qq);Tmr=r(wnt,"FlaxAlbertModel"),wnt.forEach(t),Fmr=r(Nwe," (ALBERT model)"),Nwe.forEach(t),Cmr=i(Q),j7=n(Q,"LI",{});var Dwe=s(j7);vpe=n(Dwe,"STRONG",{});var Ant=s(vpe);Mmr=r(Ant,"bart"),Ant.forEach(t),Emr=r(Dwe," \u2014 "),Hq=n(Dwe,"A",{href:!0});var Lnt=s(Hq);ymr=r(Lnt,"FlaxBartModel"),Lnt.forEach(t),wmr=r(Dwe," (BART model)"),Dwe.forEach(t),Amr=i(Q),N7=n(Q,"LI",{});var qwe=s(N7);Tpe=n(qwe,"STRONG",{});var Bnt=s(Tpe);Lmr=r(Bnt,"beit"),Bnt.forEach(t),Bmr=r(qwe," \u2014 "),Uq=n(qwe,"A",{href:!0});var knt=s(Uq);kmr=r(knt,"FlaxBeitModel"),knt.forEach(t),xmr=r(qwe," (BEiT model)"),qwe.forEach(t),Rmr=i(Q),D7=n(Q,"LI",{});var Owe=s(D7);Fpe=n(Owe,"STRONG",{});var xnt=s(Fpe);Smr=r(xnt,"bert"),xnt.forEach(t),Pmr=r(Owe," \u2014 "),Jq=n(Owe,"A",{href:!0});var Rnt=s(Jq);$mr=r(Rnt,"FlaxBertModel"),Rnt.forEach(t),Imr=r(Owe," (BERT model)"),Owe.forEach(t),jmr=i(Q),q7=n(Q,"LI",{});var Gwe=s(q7);Cpe=n(Gwe,"STRONG",{});var Snt=s(Cpe);Nmr=r(Snt,"big_bird"),Snt.forEach(t),Dmr=r(Gwe," \u2014 "),Yq=n(Gwe,"A",{href:!0});var Pnt=s(Yq);qmr=r(Pnt,"FlaxBigBirdModel"),Pnt.forEach(t),Omr=r(Gwe," (BigBird model)"),Gwe.forEach(t),Gmr=i(Q),O7=n(Q,"LI",{});var Xwe=s(O7);Mpe=n(Xwe,"STRONG",{});var $nt=s(Mpe);Xmr=r($nt,"blenderbot"),$nt.forEach(t),zmr=r(Xwe," \u2014 "),Kq=n(Xwe,"A",{href:!0});var Int=s(Kq);Vmr=r(Int,"FlaxBlenderbotModel"),Int.forEach(t),Wmr=r(Xwe," (Blenderbot model)"),Xwe.forEach(t),Qmr=i(Q),G7=n(Q,"LI",{});var zwe=s(G7);Epe=n(zwe,"STRONG",{});var jnt=s(Epe);Hmr=r(jnt,"blenderbot-small"),jnt.forEach(t),Umr=r(zwe," \u2014 "),Zq=n(zwe,"A",{href:!0});var Nnt=s(Zq);Jmr=r(Nnt,"FlaxBlenderbotSmallModel"),Nnt.forEach(t),Ymr=r(zwe," (BlenderbotSmall model)"),zwe.forEach(t),Kmr=i(Q),X7=n(Q,"LI",{});var Vwe=s(X7);ype=n(Vwe,"STRONG",{});var Dnt=s(ype);Zmr=r(Dnt,"clip"),Dnt.forEach(t),egr=r(Vwe," \u2014 "),eO=n(Vwe,"A",{href:!0});var qnt=s(eO);ogr=r(qnt,"FlaxCLIPModel"),qnt.forEach(t),rgr=r(Vwe," (CLIP model)"),Vwe.forEach(t),tgr=i(Q),z7=n(Q,"LI",{});var Wwe=s(z7);wpe=n(Wwe,"STRONG",{});var Ont=s(wpe);agr=r(Ont,"distilbert"),Ont.forEach(t),ngr=r(Wwe," \u2014 "),oO=n(Wwe,"A",{href:!0});var Gnt=s(oO);sgr=r(Gnt,"FlaxDistilBertModel"),Gnt.forEach(t),lgr=r(Wwe," (DistilBERT model)"),Wwe.forEach(t),igr=i(Q),V7=n(Q,"LI",{});var Qwe=s(V7);Ape=n(Qwe,"STRONG",{});var Xnt=s(Ape);dgr=r(Xnt,"electra"),Xnt.forEach(t),cgr=r(Qwe," \u2014 "),rO=n(Qwe,"A",{href:!0});var znt=s(rO);fgr=r(znt,"FlaxElectraModel"),znt.forEach(t),mgr=r(Qwe," (ELECTRA model)"),Qwe.forEach(t),ggr=i(Q),W7=n(Q,"LI",{});var Hwe=s(W7);Lpe=n(Hwe,"STRONG",{});var Vnt=s(Lpe);hgr=r(Vnt,"gpt2"),Vnt.forEach(t),pgr=r(Hwe," \u2014 "),tO=n(Hwe,"A",{href:!0});var Wnt=s(tO);_gr=r(Wnt,"FlaxGPT2Model"),Wnt.forEach(t),ugr=r(Hwe," (OpenAI GPT-2 model)"),Hwe.forEach(t),bgr=i(Q),Q7=n(Q,"LI",{});var Uwe=s(Q7);Bpe=n(Uwe,"STRONG",{});var Qnt=s(Bpe);vgr=r(Qnt,"gpt_neo"),Qnt.forEach(t),Tgr=r(Uwe," \u2014 "),aO=n(Uwe,"A",{href:!0});var Hnt=s(aO);Fgr=r(Hnt,"FlaxGPTNeoModel"),Hnt.forEach(t),Cgr=r(Uwe," (GPT Neo model)"),Uwe.forEach(t),Mgr=i(Q),H7=n(Q,"LI",{});var Jwe=s(H7);kpe=n(Jwe,"STRONG",{});var Unt=s(kpe);Egr=r(Unt,"gptj"),Unt.forEach(t),ygr=r(Jwe," \u2014 "),nO=n(Jwe,"A",{href:!0});var Jnt=s(nO);wgr=r(Jnt,"FlaxGPTJModel"),Jnt.forEach(t),Agr=r(Jwe," (GPT-J model)"),Jwe.forEach(t),Lgr=i(Q),U7=n(Q,"LI",{});var Ywe=s(U7);xpe=n(Ywe,"STRONG",{});var Ynt=s(xpe);Bgr=r(Ynt,"marian"),Ynt.forEach(t),kgr=r(Ywe," \u2014 "),sO=n(Ywe,"A",{href:!0});var Knt=s(sO);xgr=r(Knt,"FlaxMarianModel"),Knt.forEach(t),Rgr=r(Ywe," (Marian model)"),Ywe.forEach(t),Sgr=i(Q),J7=n(Q,"LI",{});var Kwe=s(J7);Rpe=n(Kwe,"STRONG",{});var Znt=s(Rpe);Pgr=r(Znt,"mbart"),Znt.forEach(t),$gr=r(Kwe," \u2014 "),lO=n(Kwe,"A",{href:!0});var est=s(lO);Igr=r(est,"FlaxMBartModel"),est.forEach(t),jgr=r(Kwe," (mBART model)"),Kwe.forEach(t),Ngr=i(Q),Y7=n(Q,"LI",{});var Zwe=s(Y7);Spe=n(Zwe,"STRONG",{});var ost=s(Spe);Dgr=r(ost,"mt5"),ost.forEach(t),qgr=r(Zwe," \u2014 "),iO=n(Zwe,"A",{href:!0});var rst=s(iO);Ogr=r(rst,"FlaxMT5Model"),rst.forEach(t),Ggr=r(Zwe," (mT5 model)"),Zwe.forEach(t),Xgr=i(Q),K7=n(Q,"LI",{});var eAe=s(K7);Ppe=n(eAe,"STRONG",{});var tst=s(Ppe);zgr=r(tst,"pegasus"),tst.forEach(t),Vgr=r(eAe," \u2014 "),dO=n(eAe,"A",{href:!0});var ast=s(dO);Wgr=r(ast,"FlaxPegasusModel"),ast.forEach(t),Qgr=r(eAe," (Pegasus model)"),eAe.forEach(t),Hgr=i(Q),Z7=n(Q,"LI",{});var oAe=s(Z7);$pe=n(oAe,"STRONG",{});var nst=s($pe);Ugr=r(nst,"roberta"),nst.forEach(t),Jgr=r(oAe," \u2014 "),cO=n(oAe,"A",{href:!0});var sst=s(cO);Ygr=r(sst,"FlaxRobertaModel"),sst.forEach(t),Kgr=r(oAe," (RoBERTa model)"),oAe.forEach(t),Zgr=i(Q),eF=n(Q,"LI",{});var rAe=s(eF);Ipe=n(rAe,"STRONG",{});var lst=s(Ipe);ehr=r(lst,"roformer"),lst.forEach(t),ohr=r(rAe," \u2014 "),fO=n(rAe,"A",{href:!0});var ist=s(fO);rhr=r(ist,"FlaxRoFormerModel"),ist.forEach(t),thr=r(rAe," (RoFormer model)"),rAe.forEach(t),ahr=i(Q),oF=n(Q,"LI",{});var tAe=s(oF);jpe=n(tAe,"STRONG",{});var dst=s(jpe);nhr=r(dst,"t5"),dst.forEach(t),shr=r(tAe," \u2014 "),mO=n(tAe,"A",{href:!0});var cst=s(mO);lhr=r(cst,"FlaxT5Model"),cst.forEach(t),ihr=r(tAe," (T5 model)"),tAe.forEach(t),dhr=i(Q),rF=n(Q,"LI",{});var aAe=s(rF);Npe=n(aAe,"STRONG",{});var fst=s(Npe);chr=r(fst,"vision-text-dual-encoder"),fst.forEach(t),fhr=r(aAe," \u2014 "),gO=n(aAe,"A",{href:!0});var mst=s(gO);mhr=r(mst,"FlaxVisionTextDualEncoderModel"),mst.forEach(t),ghr=r(aAe," (VisionTextDualEncoder model)"),aAe.forEach(t),hhr=i(Q),tF=n(Q,"LI",{});var nAe=s(tF);Dpe=n(nAe,"STRONG",{});var gst=s(Dpe);phr=r(gst,"vit"),gst.forEach(t),_hr=r(nAe," \u2014 "),hO=n(nAe,"A",{href:!0});var hst=s(hO);uhr=r(hst,"FlaxViTModel"),hst.forEach(t),bhr=r(nAe," (ViT model)"),nAe.forEach(t),vhr=i(Q),aF=n(Q,"LI",{});var sAe=s(aF);qpe=n(sAe,"STRONG",{});var pst=s(qpe);Thr=r(pst,"wav2vec2"),pst.forEach(t),Fhr=r(sAe," \u2014 "),pO=n(sAe,"A",{href:!0});var _st=s(pO);Chr=r(_st,"FlaxWav2Vec2Model"),_st.forEach(t),Mhr=r(sAe," (Wav2Vec2 model)"),sAe.forEach(t),Ehr=i(Q),nF=n(Q,"LI",{});var lAe=s(nF);Ope=n(lAe,"STRONG",{});var ust=s(Ope);yhr=r(ust,"xglm"),ust.forEach(t),whr=r(lAe," \u2014 "),Gpe=n(lAe,"CODE",{});var bst=s(Gpe);Ahr=r(bst,"FlaxXGLMModel"),bst.forEach(t),Lhr=r(lAe,"(XGLM model)"),lAe.forEach(t),Q.forEach(t),Bhr=i(pa),Xpe=n(pa,"P",{});var vst=s(Xpe);khr=r(vst,"Examples:"),vst.forEach(t),xhr=i(pa),m(Bw.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),J6e=i(d),Mc=n(d,"H2",{class:!0});var eBe=s(Mc);sF=n(eBe,"A",{id:!0,class:!0,href:!0});var Tst=s(sF);zpe=n(Tst,"SPAN",{});var Fst=s(zpe);m(kw.$$.fragment,Fst),Fst.forEach(t),Tst.forEach(t),Rhr=i(eBe),Vpe=n(eBe,"SPAN",{});var Cst=s(Vpe);Shr=r(Cst,"FlaxAutoModelForCausalLM"),Cst.forEach(t),eBe.forEach(t),Y6e=i(d),Mr=n(d,"DIV",{class:!0});var Xl=s(Mr);m(xw.$$.fragment,Xl),Phr=i(Xl),Ec=n(Xl,"P",{});var JX=s(Ec);$hr=r(JX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Wpe=n(JX,"CODE",{});var Mst=s(Wpe);Ihr=r(Mst,"from_pretrained()"),Mst.forEach(t),jhr=r(JX,"class method or the "),Qpe=n(JX,"CODE",{});var Est=s(Qpe);Nhr=r(Est,"from_config()"),Est.forEach(t),Dhr=r(JX,`class
method.`),JX.forEach(t),qhr=i(Xl),Rw=n(Xl,"P",{});var oBe=s(Rw);Ohr=r(oBe,"This class cannot be instantiated directly using "),Hpe=n(oBe,"CODE",{});var yst=s(Hpe);Ghr=r(yst,"__init__()"),yst.forEach(t),Xhr=r(oBe," (throws an error)."),oBe.forEach(t),zhr=i(Xl),ht=n(Xl,"DIV",{class:!0});var zl=s(ht);m(Sw.$$.fragment,zl),Vhr=i(zl),Upe=n(zl,"P",{});var wst=s(Upe);Whr=r(wst,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wst.forEach(t),Qhr=i(zl),yc=n(zl,"P",{});var YX=s(yc);Hhr=r(YX,`Note:
Loading a model from its configuration file does `),Jpe=n(YX,"STRONG",{});var Ast=s(Jpe);Uhr=r(Ast,"not"),Ast.forEach(t),Jhr=r(YX,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ype=n(YX,"CODE",{});var Lst=s(Ype);Yhr=r(Lst,"from_pretrained()"),Lst.forEach(t),Khr=r(YX,"to load the model weights."),YX.forEach(t),Zhr=i(zl),Kpe=n(zl,"P",{});var Bst=s(Kpe);epr=r(Bst,"Examples:"),Bst.forEach(t),opr=i(zl),m(Pw.$$.fragment,zl),zl.forEach(t),rpr=i(Xl),yo=n(Xl,"DIV",{class:!0});var _a=s(yo);m($w.$$.fragment,_a),tpr=i(_a),Zpe=n(_a,"P",{});var kst=s(Zpe);apr=r(kst,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kst.forEach(t),npr=i(_a),mn=n(_a,"P",{});var pC=s(mn);spr=r(pC,"The model class to instantiate is selected based on the "),e_e=n(pC,"CODE",{});var xst=s(e_e);lpr=r(xst,"model_type"),xst.forEach(t),ipr=r(pC,` property of the config object (either
passed as an argument or loaded from `),o_e=n(pC,"CODE",{});var Rst=s(o_e);dpr=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),cpr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(pC,"CODE",{});var Sst=s(r_e);fpr=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),mpr=r(pC,":"),pC.forEach(t),gpr=i(_a),gn=n(_a,"UL",{});var _C=s(gn);lF=n(_C,"LI",{});var iAe=s(lF);t_e=n(iAe,"STRONG",{});var Pst=s(t_e);hpr=r(Pst,"gpt2"),Pst.forEach(t),ppr=r(iAe," \u2014 "),_O=n(iAe,"A",{href:!0});var $st=s(_O);_pr=r($st,"FlaxGPT2LMHeadModel"),$st.forEach(t),upr=r(iAe," (OpenAI GPT-2 model)"),iAe.forEach(t),bpr=i(_C),iF=n(_C,"LI",{});var dAe=s(iF);a_e=n(dAe,"STRONG",{});var Ist=s(a_e);vpr=r(Ist,"gpt_neo"),Ist.forEach(t),Tpr=r(dAe," \u2014 "),uO=n(dAe,"A",{href:!0});var jst=s(uO);Fpr=r(jst,"FlaxGPTNeoForCausalLM"),jst.forEach(t),Cpr=r(dAe," (GPT Neo model)"),dAe.forEach(t),Mpr=i(_C),dF=n(_C,"LI",{});var cAe=s(dF);n_e=n(cAe,"STRONG",{});var Nst=s(n_e);Epr=r(Nst,"gptj"),Nst.forEach(t),ypr=r(cAe," \u2014 "),bO=n(cAe,"A",{href:!0});var Dst=s(bO);wpr=r(Dst,"FlaxGPTJForCausalLM"),Dst.forEach(t),Apr=r(cAe," (GPT-J model)"),cAe.forEach(t),Lpr=i(_C),cF=n(_C,"LI",{});var fAe=s(cF);s_e=n(fAe,"STRONG",{});var qst=s(s_e);Bpr=r(qst,"xglm"),qst.forEach(t),kpr=r(fAe," \u2014 "),l_e=n(fAe,"CODE",{});var Ost=s(l_e);xpr=r(Ost,"FlaxXGLMForCausalLM"),Ost.forEach(t),Rpr=r(fAe,"(XGLM model)"),fAe.forEach(t),_C.forEach(t),Spr=i(_a),i_e=n(_a,"P",{});var Gst=s(i_e);Ppr=r(Gst,"Examples:"),Gst.forEach(t),$pr=i(_a),m(Iw.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),K6e=i(d),wc=n(d,"H2",{class:!0});var rBe=s(wc);fF=n(rBe,"A",{id:!0,class:!0,href:!0});var Xst=s(fF);d_e=n(Xst,"SPAN",{});var zst=s(d_e);m(jw.$$.fragment,zst),zst.forEach(t),Xst.forEach(t),Ipr=i(rBe),c_e=n(rBe,"SPAN",{});var Vst=s(c_e);jpr=r(Vst,"FlaxAutoModelForPreTraining"),Vst.forEach(t),rBe.forEach(t),Z6e=i(d),Er=n(d,"DIV",{class:!0});var Vl=s(Er);m(Nw.$$.fragment,Vl),Npr=i(Vl),Ac=n(Vl,"P",{});var KX=s(Ac);Dpr=r(KX,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),f_e=n(KX,"CODE",{});var Wst=s(f_e);qpr=r(Wst,"from_pretrained()"),Wst.forEach(t),Opr=r(KX,"class method or the "),m_e=n(KX,"CODE",{});var Qst=s(m_e);Gpr=r(Qst,"from_config()"),Qst.forEach(t),Xpr=r(KX,`class
method.`),KX.forEach(t),zpr=i(Vl),Dw=n(Vl,"P",{});var tBe=s(Dw);Vpr=r(tBe,"This class cannot be instantiated directly using "),g_e=n(tBe,"CODE",{});var Hst=s(g_e);Wpr=r(Hst,"__init__()"),Hst.forEach(t),Qpr=r(tBe," (throws an error)."),tBe.forEach(t),Hpr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Wl=s(pt);m(qw.$$.fragment,Wl),Upr=i(Wl),h_e=n(Wl,"P",{});var Ust=s(h_e);Jpr=r(Ust,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ust.forEach(t),Ypr=i(Wl),Lc=n(Wl,"P",{});var ZX=s(Lc);Kpr=r(ZX,`Note:
Loading a model from its configuration file does `),p_e=n(ZX,"STRONG",{});var Jst=s(p_e);Zpr=r(Jst,"not"),Jst.forEach(t),e_r=r(ZX,` load the model weights. It only affects the
model\u2019s configuration. Use `),__e=n(ZX,"CODE",{});var Yst=s(__e);o_r=r(Yst,"from_pretrained()"),Yst.forEach(t),r_r=r(ZX,"to load the model weights."),ZX.forEach(t),t_r=i(Wl),u_e=n(Wl,"P",{});var Kst=s(u_e);a_r=r(Kst,"Examples:"),Kst.forEach(t),n_r=i(Wl),m(Ow.$$.fragment,Wl),Wl.forEach(t),s_r=i(Vl),wo=n(Vl,"DIV",{class:!0});var ua=s(wo);m(Gw.$$.fragment,ua),l_r=i(ua),b_e=n(ua,"P",{});var Zst=s(b_e);i_r=r(Zst,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zst.forEach(t),d_r=i(ua),hn=n(ua,"P",{});var uC=s(hn);c_r=r(uC,"The model class to instantiate is selected based on the "),v_e=n(uC,"CODE",{});var elt=s(v_e);f_r=r(elt,"model_type"),elt.forEach(t),m_r=r(uC,` property of the config object (either
passed as an argument or loaded from `),T_e=n(uC,"CODE",{});var olt=s(T_e);g_r=r(olt,"pretrained_model_name_or_path"),olt.forEach(t),h_r=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(uC,"CODE",{});var rlt=s(F_e);p_r=r(rlt,"pretrained_model_name_or_path"),rlt.forEach(t),__r=r(uC,":"),uC.forEach(t),u_r=i(ua),fe=n(ua,"UL",{});var _e=s(fe);mF=n(_e,"LI",{});var mAe=s(mF);C_e=n(mAe,"STRONG",{});var tlt=s(C_e);b_r=r(tlt,"albert"),tlt.forEach(t),v_r=r(mAe," \u2014 "),vO=n(mAe,"A",{href:!0});var alt=s(vO);T_r=r(alt,"FlaxAlbertForPreTraining"),alt.forEach(t),F_r=r(mAe," (ALBERT model)"),mAe.forEach(t),C_r=i(_e),gF=n(_e,"LI",{});var gAe=s(gF);M_e=n(gAe,"STRONG",{});var nlt=s(M_e);M_r=r(nlt,"bart"),nlt.forEach(t),E_r=r(gAe," \u2014 "),TO=n(gAe,"A",{href:!0});var slt=s(TO);y_r=r(slt,"FlaxBartForConditionalGeneration"),slt.forEach(t),w_r=r(gAe," (BART model)"),gAe.forEach(t),A_r=i(_e),hF=n(_e,"LI",{});var hAe=s(hF);E_e=n(hAe,"STRONG",{});var llt=s(E_e);L_r=r(llt,"bert"),llt.forEach(t),B_r=r(hAe," \u2014 "),FO=n(hAe,"A",{href:!0});var ilt=s(FO);k_r=r(ilt,"FlaxBertForPreTraining"),ilt.forEach(t),x_r=r(hAe," (BERT model)"),hAe.forEach(t),R_r=i(_e),pF=n(_e,"LI",{});var pAe=s(pF);y_e=n(pAe,"STRONG",{});var dlt=s(y_e);S_r=r(dlt,"big_bird"),dlt.forEach(t),P_r=r(pAe," \u2014 "),CO=n(pAe,"A",{href:!0});var clt=s(CO);$_r=r(clt,"FlaxBigBirdForPreTraining"),clt.forEach(t),I_r=r(pAe," (BigBird model)"),pAe.forEach(t),j_r=i(_e),_F=n(_e,"LI",{});var _Ae=s(_F);w_e=n(_Ae,"STRONG",{});var flt=s(w_e);N_r=r(flt,"electra"),flt.forEach(t),D_r=r(_Ae," \u2014 "),MO=n(_Ae,"A",{href:!0});var mlt=s(MO);q_r=r(mlt,"FlaxElectraForPreTraining"),mlt.forEach(t),O_r=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),G_r=i(_e),uF=n(_e,"LI",{});var uAe=s(uF);A_e=n(uAe,"STRONG",{});var glt=s(A_e);X_r=r(glt,"mbart"),glt.forEach(t),z_r=r(uAe," \u2014 "),EO=n(uAe,"A",{href:!0});var hlt=s(EO);V_r=r(hlt,"FlaxMBartForConditionalGeneration"),hlt.forEach(t),W_r=r(uAe," (mBART model)"),uAe.forEach(t),Q_r=i(_e),bF=n(_e,"LI",{});var bAe=s(bF);L_e=n(bAe,"STRONG",{});var plt=s(L_e);H_r=r(plt,"mt5"),plt.forEach(t),U_r=r(bAe," \u2014 "),yO=n(bAe,"A",{href:!0});var _lt=s(yO);J_r=r(_lt,"FlaxMT5ForConditionalGeneration"),_lt.forEach(t),Y_r=r(bAe," (mT5 model)"),bAe.forEach(t),K_r=i(_e),vF=n(_e,"LI",{});var vAe=s(vF);B_e=n(vAe,"STRONG",{});var ult=s(B_e);Z_r=r(ult,"roberta"),ult.forEach(t),eur=r(vAe," \u2014 "),wO=n(vAe,"A",{href:!0});var blt=s(wO);our=r(blt,"FlaxRobertaForMaskedLM"),blt.forEach(t),rur=r(vAe," (RoBERTa model)"),vAe.forEach(t),tur=i(_e),TF=n(_e,"LI",{});var TAe=s(TF);k_e=n(TAe,"STRONG",{});var vlt=s(k_e);aur=r(vlt,"roformer"),vlt.forEach(t),nur=r(TAe," \u2014 "),AO=n(TAe,"A",{href:!0});var Tlt=s(AO);sur=r(Tlt,"FlaxRoFormerForMaskedLM"),Tlt.forEach(t),lur=r(TAe," (RoFormer model)"),TAe.forEach(t),iur=i(_e),FF=n(_e,"LI",{});var FAe=s(FF);x_e=n(FAe,"STRONG",{});var Flt=s(x_e);dur=r(Flt,"t5"),Flt.forEach(t),cur=r(FAe," \u2014 "),LO=n(FAe,"A",{href:!0});var Clt=s(LO);fur=r(Clt,"FlaxT5ForConditionalGeneration"),Clt.forEach(t),mur=r(FAe," (T5 model)"),FAe.forEach(t),gur=i(_e),CF=n(_e,"LI",{});var CAe=s(CF);R_e=n(CAe,"STRONG",{});var Mlt=s(R_e);hur=r(Mlt,"wav2vec2"),Mlt.forEach(t),pur=r(CAe," \u2014 "),BO=n(CAe,"A",{href:!0});var Elt=s(BO);_ur=r(Elt,"FlaxWav2Vec2ForPreTraining"),Elt.forEach(t),uur=r(CAe," (Wav2Vec2 model)"),CAe.forEach(t),_e.forEach(t),bur=i(ua),S_e=n(ua,"P",{});var ylt=s(S_e);vur=r(ylt,"Examples:"),ylt.forEach(t),Tur=i(ua),m(Xw.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),eLe=i(d),Bc=n(d,"H2",{class:!0});var aBe=s(Bc);MF=n(aBe,"A",{id:!0,class:!0,href:!0});var wlt=s(MF);P_e=n(wlt,"SPAN",{});var Alt=s(P_e);m(zw.$$.fragment,Alt),Alt.forEach(t),wlt.forEach(t),Fur=i(aBe),$_e=n(aBe,"SPAN",{});var Llt=s($_e);Cur=r(Llt,"FlaxAutoModelForMaskedLM"),Llt.forEach(t),aBe.forEach(t),oLe=i(d),yr=n(d,"DIV",{class:!0});var Ql=s(yr);m(Vw.$$.fragment,Ql),Mur=i(Ql),kc=n(Ql,"P",{});var ez=s(kc);Eur=r(ez,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),I_e=n(ez,"CODE",{});var Blt=s(I_e);yur=r(Blt,"from_pretrained()"),Blt.forEach(t),wur=r(ez,"class method or the "),j_e=n(ez,"CODE",{});var klt=s(j_e);Aur=r(klt,"from_config()"),klt.forEach(t),Lur=r(ez,`class
method.`),ez.forEach(t),Bur=i(Ql),Ww=n(Ql,"P",{});var nBe=s(Ww);kur=r(nBe,"This class cannot be instantiated directly using "),N_e=n(nBe,"CODE",{});var xlt=s(N_e);xur=r(xlt,"__init__()"),xlt.forEach(t),Rur=r(nBe," (throws an error)."),nBe.forEach(t),Sur=i(Ql),_t=n(Ql,"DIV",{class:!0});var Hl=s(_t);m(Qw.$$.fragment,Hl),Pur=i(Hl),D_e=n(Hl,"P",{});var Rlt=s(D_e);$ur=r(Rlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rlt.forEach(t),Iur=i(Hl),xc=n(Hl,"P",{});var oz=s(xc);jur=r(oz,`Note:
Loading a model from its configuration file does `),q_e=n(oz,"STRONG",{});var Slt=s(q_e);Nur=r(Slt,"not"),Slt.forEach(t),Dur=r(oz,` load the model weights. It only affects the
model\u2019s configuration. Use `),O_e=n(oz,"CODE",{});var Plt=s(O_e);qur=r(Plt,"from_pretrained()"),Plt.forEach(t),Our=r(oz,"to load the model weights."),oz.forEach(t),Gur=i(Hl),G_e=n(Hl,"P",{});var $lt=s(G_e);Xur=r($lt,"Examples:"),$lt.forEach(t),zur=i(Hl),m(Hw.$$.fragment,Hl),Hl.forEach(t),Vur=i(Ql),Ao=n(Ql,"DIV",{class:!0});var ba=s(Ao);m(Uw.$$.fragment,ba),Wur=i(ba),X_e=n(ba,"P",{});var Ilt=s(X_e);Qur=r(Ilt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ilt.forEach(t),Hur=i(ba),pn=n(ba,"P",{});var bC=s(pn);Uur=r(bC,"The model class to instantiate is selected based on the "),z_e=n(bC,"CODE",{});var jlt=s(z_e);Jur=r(jlt,"model_type"),jlt.forEach(t),Yur=r(bC,` property of the config object (either
passed as an argument or loaded from `),V_e=n(bC,"CODE",{});var Nlt=s(V_e);Kur=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),Zur=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(bC,"CODE",{});var Dlt=s(W_e);e1r=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),o1r=r(bC,":"),bC.forEach(t),r1r=i(ba),ve=n(ba,"UL",{});var Ke=s(ve);EF=n(Ke,"LI",{});var MAe=s(EF);Q_e=n(MAe,"STRONG",{});var qlt=s(Q_e);t1r=r(qlt,"albert"),qlt.forEach(t),a1r=r(MAe," \u2014 "),kO=n(MAe,"A",{href:!0});var Olt=s(kO);n1r=r(Olt,"FlaxAlbertForMaskedLM"),Olt.forEach(t),s1r=r(MAe," (ALBERT model)"),MAe.forEach(t),l1r=i(Ke),yF=n(Ke,"LI",{});var EAe=s(yF);H_e=n(EAe,"STRONG",{});var Glt=s(H_e);i1r=r(Glt,"bart"),Glt.forEach(t),d1r=r(EAe," \u2014 "),xO=n(EAe,"A",{href:!0});var Xlt=s(xO);c1r=r(Xlt,"FlaxBartForConditionalGeneration"),Xlt.forEach(t),f1r=r(EAe," (BART model)"),EAe.forEach(t),m1r=i(Ke),wF=n(Ke,"LI",{});var yAe=s(wF);U_e=n(yAe,"STRONG",{});var zlt=s(U_e);g1r=r(zlt,"bert"),zlt.forEach(t),h1r=r(yAe," \u2014 "),RO=n(yAe,"A",{href:!0});var Vlt=s(RO);p1r=r(Vlt,"FlaxBertForMaskedLM"),Vlt.forEach(t),_1r=r(yAe," (BERT model)"),yAe.forEach(t),u1r=i(Ke),AF=n(Ke,"LI",{});var wAe=s(AF);J_e=n(wAe,"STRONG",{});var Wlt=s(J_e);b1r=r(Wlt,"big_bird"),Wlt.forEach(t),v1r=r(wAe," \u2014 "),SO=n(wAe,"A",{href:!0});var Qlt=s(SO);T1r=r(Qlt,"FlaxBigBirdForMaskedLM"),Qlt.forEach(t),F1r=r(wAe," (BigBird model)"),wAe.forEach(t),C1r=i(Ke),LF=n(Ke,"LI",{});var AAe=s(LF);Y_e=n(AAe,"STRONG",{});var Hlt=s(Y_e);M1r=r(Hlt,"distilbert"),Hlt.forEach(t),E1r=r(AAe," \u2014 "),PO=n(AAe,"A",{href:!0});var Ult=s(PO);y1r=r(Ult,"FlaxDistilBertForMaskedLM"),Ult.forEach(t),w1r=r(AAe," (DistilBERT model)"),AAe.forEach(t),A1r=i(Ke),BF=n(Ke,"LI",{});var LAe=s(BF);K_e=n(LAe,"STRONG",{});var Jlt=s(K_e);L1r=r(Jlt,"electra"),Jlt.forEach(t),B1r=r(LAe," \u2014 "),$O=n(LAe,"A",{href:!0});var Ylt=s($O);k1r=r(Ylt,"FlaxElectraForMaskedLM"),Ylt.forEach(t),x1r=r(LAe," (ELECTRA model)"),LAe.forEach(t),R1r=i(Ke),kF=n(Ke,"LI",{});var BAe=s(kF);Z_e=n(BAe,"STRONG",{});var Klt=s(Z_e);S1r=r(Klt,"mbart"),Klt.forEach(t),P1r=r(BAe," \u2014 "),IO=n(BAe,"A",{href:!0});var Zlt=s(IO);$1r=r(Zlt,"FlaxMBartForConditionalGeneration"),Zlt.forEach(t),I1r=r(BAe," (mBART model)"),BAe.forEach(t),j1r=i(Ke),xF=n(Ke,"LI",{});var kAe=s(xF);eue=n(kAe,"STRONG",{});var eit=s(eue);N1r=r(eit,"roberta"),eit.forEach(t),D1r=r(kAe," \u2014 "),jO=n(kAe,"A",{href:!0});var oit=s(jO);q1r=r(oit,"FlaxRobertaForMaskedLM"),oit.forEach(t),O1r=r(kAe," (RoBERTa model)"),kAe.forEach(t),G1r=i(Ke),RF=n(Ke,"LI",{});var xAe=s(RF);oue=n(xAe,"STRONG",{});var rit=s(oue);X1r=r(rit,"roformer"),rit.forEach(t),z1r=r(xAe," \u2014 "),NO=n(xAe,"A",{href:!0});var tit=s(NO);V1r=r(tit,"FlaxRoFormerForMaskedLM"),tit.forEach(t),W1r=r(xAe," (RoFormer model)"),xAe.forEach(t),Ke.forEach(t),Q1r=i(ba),rue=n(ba,"P",{});var ait=s(rue);H1r=r(ait,"Examples:"),ait.forEach(t),U1r=i(ba),m(Jw.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),rLe=i(d),Rc=n(d,"H2",{class:!0});var sBe=s(Rc);SF=n(sBe,"A",{id:!0,class:!0,href:!0});var nit=s(SF);tue=n(nit,"SPAN",{});var sit=s(tue);m(Yw.$$.fragment,sit),sit.forEach(t),nit.forEach(t),J1r=i(sBe),aue=n(sBe,"SPAN",{});var lit=s(aue);Y1r=r(lit,"FlaxAutoModelForSeq2SeqLM"),lit.forEach(t),sBe.forEach(t),tLe=i(d),wr=n(d,"DIV",{class:!0});var Ul=s(wr);m(Kw.$$.fragment,Ul),K1r=i(Ul),Sc=n(Ul,"P",{});var rz=s(Sc);Z1r=r(rz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nue=n(rz,"CODE",{});var iit=s(nue);e4r=r(iit,"from_pretrained()"),iit.forEach(t),o4r=r(rz,"class method or the "),sue=n(rz,"CODE",{});var dit=s(sue);r4r=r(dit,"from_config()"),dit.forEach(t),t4r=r(rz,`class
method.`),rz.forEach(t),a4r=i(Ul),Zw=n(Ul,"P",{});var lBe=s(Zw);n4r=r(lBe,"This class cannot be instantiated directly using "),lue=n(lBe,"CODE",{});var cit=s(lue);s4r=r(cit,"__init__()"),cit.forEach(t),l4r=r(lBe," (throws an error)."),lBe.forEach(t),i4r=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(eA.$$.fragment,Jl),d4r=i(Jl),iue=n(Jl,"P",{});var fit=s(iue);c4r=r(fit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fit.forEach(t),f4r=i(Jl),Pc=n(Jl,"P",{});var tz=s(Pc);m4r=r(tz,`Note:
Loading a model from its configuration file does `),due=n(tz,"STRONG",{});var mit=s(due);g4r=r(mit,"not"),mit.forEach(t),h4r=r(tz,` load the model weights. It only affects the
model\u2019s configuration. Use `),cue=n(tz,"CODE",{});var git=s(cue);p4r=r(git,"from_pretrained()"),git.forEach(t),_4r=r(tz,"to load the model weights."),tz.forEach(t),u4r=i(Jl),fue=n(Jl,"P",{});var hit=s(fue);b4r=r(hit,"Examples:"),hit.forEach(t),v4r=i(Jl),m(oA.$$.fragment,Jl),Jl.forEach(t),T4r=i(Ul),Lo=n(Ul,"DIV",{class:!0});var va=s(Lo);m(rA.$$.fragment,va),F4r=i(va),mue=n(va,"P",{});var pit=s(mue);C4r=r(pit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pit.forEach(t),M4r=i(va),_n=n(va,"P",{});var vC=s(_n);E4r=r(vC,"The model class to instantiate is selected based on the "),gue=n(vC,"CODE",{});var _it=s(gue);y4r=r(_it,"model_type"),_it.forEach(t),w4r=r(vC,` property of the config object (either
passed as an argument or loaded from `),hue=n(vC,"CODE",{});var uit=s(hue);A4r=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),L4r=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pue=n(vC,"CODE",{});var bit=s(pue);B4r=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),k4r=r(vC,":"),vC.forEach(t),x4r=i(va),Te=n(va,"UL",{});var Ze=s(Te);PF=n(Ze,"LI",{});var RAe=s(PF);_ue=n(RAe,"STRONG",{});var vit=s(_ue);R4r=r(vit,"bart"),vit.forEach(t),S4r=r(RAe," \u2014 "),DO=n(RAe,"A",{href:!0});var Tit=s(DO);P4r=r(Tit,"FlaxBartForConditionalGeneration"),Tit.forEach(t),$4r=r(RAe," (BART model)"),RAe.forEach(t),I4r=i(Ze),$F=n(Ze,"LI",{});var SAe=s($F);uue=n(SAe,"STRONG",{});var Fit=s(uue);j4r=r(Fit,"blenderbot"),Fit.forEach(t),N4r=r(SAe," \u2014 "),qO=n(SAe,"A",{href:!0});var Cit=s(qO);D4r=r(Cit,"FlaxBlenderbotForConditionalGeneration"),Cit.forEach(t),q4r=r(SAe," (Blenderbot model)"),SAe.forEach(t),O4r=i(Ze),IF=n(Ze,"LI",{});var PAe=s(IF);bue=n(PAe,"STRONG",{});var Mit=s(bue);G4r=r(Mit,"blenderbot-small"),Mit.forEach(t),X4r=r(PAe," \u2014 "),OO=n(PAe,"A",{href:!0});var Eit=s(OO);z4r=r(Eit,"FlaxBlenderbotSmallForConditionalGeneration"),Eit.forEach(t),V4r=r(PAe," (BlenderbotSmall model)"),PAe.forEach(t),W4r=i(Ze),jF=n(Ze,"LI",{});var $Ae=s(jF);vue=n($Ae,"STRONG",{});var yit=s(vue);Q4r=r(yit,"encoder-decoder"),yit.forEach(t),H4r=r($Ae," \u2014 "),GO=n($Ae,"A",{href:!0});var wit=s(GO);U4r=r(wit,"FlaxEncoderDecoderModel"),wit.forEach(t),J4r=r($Ae," (Encoder decoder model)"),$Ae.forEach(t),Y4r=i(Ze),NF=n(Ze,"LI",{});var IAe=s(NF);Tue=n(IAe,"STRONG",{});var Ait=s(Tue);K4r=r(Ait,"marian"),Ait.forEach(t),Z4r=r(IAe," \u2014 "),XO=n(IAe,"A",{href:!0});var Lit=s(XO);ebr=r(Lit,"FlaxMarianMTModel"),Lit.forEach(t),obr=r(IAe," (Marian model)"),IAe.forEach(t),rbr=i(Ze),DF=n(Ze,"LI",{});var jAe=s(DF);Fue=n(jAe,"STRONG",{});var Bit=s(Fue);tbr=r(Bit,"mbart"),Bit.forEach(t),abr=r(jAe," \u2014 "),zO=n(jAe,"A",{href:!0});var kit=s(zO);nbr=r(kit,"FlaxMBartForConditionalGeneration"),kit.forEach(t),sbr=r(jAe," (mBART model)"),jAe.forEach(t),lbr=i(Ze),qF=n(Ze,"LI",{});var NAe=s(qF);Cue=n(NAe,"STRONG",{});var xit=s(Cue);ibr=r(xit,"mt5"),xit.forEach(t),dbr=r(NAe," \u2014 "),VO=n(NAe,"A",{href:!0});var Rit=s(VO);cbr=r(Rit,"FlaxMT5ForConditionalGeneration"),Rit.forEach(t),fbr=r(NAe," (mT5 model)"),NAe.forEach(t),mbr=i(Ze),OF=n(Ze,"LI",{});var DAe=s(OF);Mue=n(DAe,"STRONG",{});var Sit=s(Mue);gbr=r(Sit,"pegasus"),Sit.forEach(t),hbr=r(DAe," \u2014 "),WO=n(DAe,"A",{href:!0});var Pit=s(WO);pbr=r(Pit,"FlaxPegasusForConditionalGeneration"),Pit.forEach(t),_br=r(DAe," (Pegasus model)"),DAe.forEach(t),ubr=i(Ze),GF=n(Ze,"LI",{});var qAe=s(GF);Eue=n(qAe,"STRONG",{});var $it=s(Eue);bbr=r($it,"t5"),$it.forEach(t),vbr=r(qAe," \u2014 "),QO=n(qAe,"A",{href:!0});var Iit=s(QO);Tbr=r(Iit,"FlaxT5ForConditionalGeneration"),Iit.forEach(t),Fbr=r(qAe," (T5 model)"),qAe.forEach(t),Ze.forEach(t),Cbr=i(va),yue=n(va,"P",{});var jit=s(yue);Mbr=r(jit,"Examples:"),jit.forEach(t),Ebr=i(va),m(tA.$$.fragment,va),va.forEach(t),Ul.forEach(t),aLe=i(d),$c=n(d,"H2",{class:!0});var iBe=s($c);XF=n(iBe,"A",{id:!0,class:!0,href:!0});var Nit=s(XF);wue=n(Nit,"SPAN",{});var Dit=s(wue);m(aA.$$.fragment,Dit),Dit.forEach(t),Nit.forEach(t),ybr=i(iBe),Aue=n(iBe,"SPAN",{});var qit=s(Aue);wbr=r(qit,"FlaxAutoModelForSequenceClassification"),qit.forEach(t),iBe.forEach(t),nLe=i(d),Ar=n(d,"DIV",{class:!0});var Yl=s(Ar);m(nA.$$.fragment,Yl),Abr=i(Yl),Ic=n(Yl,"P",{});var az=s(Ic);Lbr=r(az,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Lue=n(az,"CODE",{});var Oit=s(Lue);Bbr=r(Oit,"from_pretrained()"),Oit.forEach(t),kbr=r(az,"class method or the "),Bue=n(az,"CODE",{});var Git=s(Bue);xbr=r(Git,"from_config()"),Git.forEach(t),Rbr=r(az,`class
method.`),az.forEach(t),Sbr=i(Yl),sA=n(Yl,"P",{});var dBe=s(sA);Pbr=r(dBe,"This class cannot be instantiated directly using "),kue=n(dBe,"CODE",{});var Xit=s(kue);$br=r(Xit,"__init__()"),Xit.forEach(t),Ibr=r(dBe," (throws an error)."),dBe.forEach(t),jbr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(lA.$$.fragment,Kl),Nbr=i(Kl),xue=n(Kl,"P",{});var zit=s(xue);Dbr=r(zit,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zit.forEach(t),qbr=i(Kl),jc=n(Kl,"P",{});var nz=s(jc);Obr=r(nz,`Note:
Loading a model from its configuration file does `),Rue=n(nz,"STRONG",{});var Vit=s(Rue);Gbr=r(Vit,"not"),Vit.forEach(t),Xbr=r(nz,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sue=n(nz,"CODE",{});var Wit=s(Sue);zbr=r(Wit,"from_pretrained()"),Wit.forEach(t),Vbr=r(nz,"to load the model weights."),nz.forEach(t),Wbr=i(Kl),Pue=n(Kl,"P",{});var Qit=s(Pue);Qbr=r(Qit,"Examples:"),Qit.forEach(t),Hbr=i(Kl),m(iA.$$.fragment,Kl),Kl.forEach(t),Ubr=i(Yl),Bo=n(Yl,"DIV",{class:!0});var Ta=s(Bo);m(dA.$$.fragment,Ta),Jbr=i(Ta),$ue=n(Ta,"P",{});var Hit=s($ue);Ybr=r(Hit,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hit.forEach(t),Kbr=i(Ta),un=n(Ta,"P",{});var TC=s(un);Zbr=r(TC,"The model class to instantiate is selected based on the "),Iue=n(TC,"CODE",{});var Uit=s(Iue);e5r=r(Uit,"model_type"),Uit.forEach(t),o5r=r(TC,` property of the config object (either
passed as an argument or loaded from `),jue=n(TC,"CODE",{});var Jit=s(jue);r5r=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),t5r=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(TC,"CODE",{});var Yit=s(Nue);a5r=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),n5r=r(TC,":"),TC.forEach(t),s5r=i(Ta),Fe=n(Ta,"UL",{});var eo=s(Fe);zF=n(eo,"LI",{});var OAe=s(zF);Due=n(OAe,"STRONG",{});var Kit=s(Due);l5r=r(Kit,"albert"),Kit.forEach(t),i5r=r(OAe," \u2014 "),HO=n(OAe,"A",{href:!0});var Zit=s(HO);d5r=r(Zit,"FlaxAlbertForSequenceClassification"),Zit.forEach(t),c5r=r(OAe," (ALBERT model)"),OAe.forEach(t),f5r=i(eo),VF=n(eo,"LI",{});var GAe=s(VF);que=n(GAe,"STRONG",{});var edt=s(que);m5r=r(edt,"bart"),edt.forEach(t),g5r=r(GAe," \u2014 "),UO=n(GAe,"A",{href:!0});var odt=s(UO);h5r=r(odt,"FlaxBartForSequenceClassification"),odt.forEach(t),p5r=r(GAe," (BART model)"),GAe.forEach(t),_5r=i(eo),WF=n(eo,"LI",{});var XAe=s(WF);Oue=n(XAe,"STRONG",{});var rdt=s(Oue);u5r=r(rdt,"bert"),rdt.forEach(t),b5r=r(XAe," \u2014 "),JO=n(XAe,"A",{href:!0});var tdt=s(JO);v5r=r(tdt,"FlaxBertForSequenceClassification"),tdt.forEach(t),T5r=r(XAe," (BERT model)"),XAe.forEach(t),F5r=i(eo),QF=n(eo,"LI",{});var zAe=s(QF);Gue=n(zAe,"STRONG",{});var adt=s(Gue);C5r=r(adt,"big_bird"),adt.forEach(t),M5r=r(zAe," \u2014 "),YO=n(zAe,"A",{href:!0});var ndt=s(YO);E5r=r(ndt,"FlaxBigBirdForSequenceClassification"),ndt.forEach(t),y5r=r(zAe," (BigBird model)"),zAe.forEach(t),w5r=i(eo),HF=n(eo,"LI",{});var VAe=s(HF);Xue=n(VAe,"STRONG",{});var sdt=s(Xue);A5r=r(sdt,"distilbert"),sdt.forEach(t),L5r=r(VAe," \u2014 "),KO=n(VAe,"A",{href:!0});var ldt=s(KO);B5r=r(ldt,"FlaxDistilBertForSequenceClassification"),ldt.forEach(t),k5r=r(VAe," (DistilBERT model)"),VAe.forEach(t),x5r=i(eo),UF=n(eo,"LI",{});var WAe=s(UF);zue=n(WAe,"STRONG",{});var idt=s(zue);R5r=r(idt,"electra"),idt.forEach(t),S5r=r(WAe," \u2014 "),ZO=n(WAe,"A",{href:!0});var ddt=s(ZO);P5r=r(ddt,"FlaxElectraForSequenceClassification"),ddt.forEach(t),$5r=r(WAe," (ELECTRA model)"),WAe.forEach(t),I5r=i(eo),JF=n(eo,"LI",{});var QAe=s(JF);Vue=n(QAe,"STRONG",{});var cdt=s(Vue);j5r=r(cdt,"mbart"),cdt.forEach(t),N5r=r(QAe," \u2014 "),eG=n(QAe,"A",{href:!0});var fdt=s(eG);D5r=r(fdt,"FlaxMBartForSequenceClassification"),fdt.forEach(t),q5r=r(QAe," (mBART model)"),QAe.forEach(t),O5r=i(eo),YF=n(eo,"LI",{});var HAe=s(YF);Wue=n(HAe,"STRONG",{});var mdt=s(Wue);G5r=r(mdt,"roberta"),mdt.forEach(t),X5r=r(HAe," \u2014 "),oG=n(HAe,"A",{href:!0});var gdt=s(oG);z5r=r(gdt,"FlaxRobertaForSequenceClassification"),gdt.forEach(t),V5r=r(HAe," (RoBERTa model)"),HAe.forEach(t),W5r=i(eo),KF=n(eo,"LI",{});var UAe=s(KF);Que=n(UAe,"STRONG",{});var hdt=s(Que);Q5r=r(hdt,"roformer"),hdt.forEach(t),H5r=r(UAe," \u2014 "),rG=n(UAe,"A",{href:!0});var pdt=s(rG);U5r=r(pdt,"FlaxRoFormerForSequenceClassification"),pdt.forEach(t),J5r=r(UAe," (RoFormer model)"),UAe.forEach(t),eo.forEach(t),Y5r=i(Ta),Hue=n(Ta,"P",{});var _dt=s(Hue);K5r=r(_dt,"Examples:"),_dt.forEach(t),Z5r=i(Ta),m(cA.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),sLe=i(d),Nc=n(d,"H2",{class:!0});var cBe=s(Nc);ZF=n(cBe,"A",{id:!0,class:!0,href:!0});var udt=s(ZF);Uue=n(udt,"SPAN",{});var bdt=s(Uue);m(fA.$$.fragment,bdt),bdt.forEach(t),udt.forEach(t),e2r=i(cBe),Jue=n(cBe,"SPAN",{});var vdt=s(Jue);o2r=r(vdt,"FlaxAutoModelForQuestionAnswering"),vdt.forEach(t),cBe.forEach(t),lLe=i(d),Lr=n(d,"DIV",{class:!0});var Zl=s(Lr);m(mA.$$.fragment,Zl),r2r=i(Zl),Dc=n(Zl,"P",{});var sz=s(Dc);t2r=r(sz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Yue=n(sz,"CODE",{});var Tdt=s(Yue);a2r=r(Tdt,"from_pretrained()"),Tdt.forEach(t),n2r=r(sz,"class method or the "),Kue=n(sz,"CODE",{});var Fdt=s(Kue);s2r=r(Fdt,"from_config()"),Fdt.forEach(t),l2r=r(sz,`class
method.`),sz.forEach(t),i2r=i(Zl),gA=n(Zl,"P",{});var fBe=s(gA);d2r=r(fBe,"This class cannot be instantiated directly using "),Zue=n(fBe,"CODE",{});var Cdt=s(Zue);c2r=r(Cdt,"__init__()"),Cdt.forEach(t),f2r=r(fBe," (throws an error)."),fBe.forEach(t),m2r=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(hA.$$.fragment,ei),g2r=i(ei),e1e=n(ei,"P",{});var Mdt=s(e1e);h2r=r(Mdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mdt.forEach(t),p2r=i(ei),qc=n(ei,"P",{});var lz=s(qc);_2r=r(lz,`Note:
Loading a model from its configuration file does `),o1e=n(lz,"STRONG",{});var Edt=s(o1e);u2r=r(Edt,"not"),Edt.forEach(t),b2r=r(lz,` load the model weights. It only affects the
model\u2019s configuration. Use `),r1e=n(lz,"CODE",{});var ydt=s(r1e);v2r=r(ydt,"from_pretrained()"),ydt.forEach(t),T2r=r(lz,"to load the model weights."),lz.forEach(t),F2r=i(ei),t1e=n(ei,"P",{});var wdt=s(t1e);C2r=r(wdt,"Examples:"),wdt.forEach(t),M2r=i(ei),m(pA.$$.fragment,ei),ei.forEach(t),E2r=i(Zl),ko=n(Zl,"DIV",{class:!0});var Fa=s(ko);m(_A.$$.fragment,Fa),y2r=i(Fa),a1e=n(Fa,"P",{});var Adt=s(a1e);w2r=r(Adt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Adt.forEach(t),A2r=i(Fa),bn=n(Fa,"P",{});var FC=s(bn);L2r=r(FC,"The model class to instantiate is selected based on the "),n1e=n(FC,"CODE",{});var Ldt=s(n1e);B2r=r(Ldt,"model_type"),Ldt.forEach(t),k2r=r(FC,` property of the config object (either
passed as an argument or loaded from `),s1e=n(FC,"CODE",{});var Bdt=s(s1e);x2r=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),R2r=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(FC,"CODE",{});var kdt=s(l1e);S2r=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),P2r=r(FC,":"),FC.forEach(t),$2r=i(Fa),Ce=n(Fa,"UL",{});var oo=s(Ce);e9=n(oo,"LI",{});var JAe=s(e9);i1e=n(JAe,"STRONG",{});var xdt=s(i1e);I2r=r(xdt,"albert"),xdt.forEach(t),j2r=r(JAe," \u2014 "),tG=n(JAe,"A",{href:!0});var Rdt=s(tG);N2r=r(Rdt,"FlaxAlbertForQuestionAnswering"),Rdt.forEach(t),D2r=r(JAe," (ALBERT model)"),JAe.forEach(t),q2r=i(oo),o9=n(oo,"LI",{});var YAe=s(o9);d1e=n(YAe,"STRONG",{});var Sdt=s(d1e);O2r=r(Sdt,"bart"),Sdt.forEach(t),G2r=r(YAe," \u2014 "),aG=n(YAe,"A",{href:!0});var Pdt=s(aG);X2r=r(Pdt,"FlaxBartForQuestionAnswering"),Pdt.forEach(t),z2r=r(YAe," (BART model)"),YAe.forEach(t),V2r=i(oo),r9=n(oo,"LI",{});var KAe=s(r9);c1e=n(KAe,"STRONG",{});var $dt=s(c1e);W2r=r($dt,"bert"),$dt.forEach(t),Q2r=r(KAe," \u2014 "),nG=n(KAe,"A",{href:!0});var Idt=s(nG);H2r=r(Idt,"FlaxBertForQuestionAnswering"),Idt.forEach(t),U2r=r(KAe," (BERT model)"),KAe.forEach(t),J2r=i(oo),t9=n(oo,"LI",{});var ZAe=s(t9);f1e=n(ZAe,"STRONG",{});var jdt=s(f1e);Y2r=r(jdt,"big_bird"),jdt.forEach(t),K2r=r(ZAe," \u2014 "),sG=n(ZAe,"A",{href:!0});var Ndt=s(sG);Z2r=r(Ndt,"FlaxBigBirdForQuestionAnswering"),Ndt.forEach(t),evr=r(ZAe," (BigBird model)"),ZAe.forEach(t),ovr=i(oo),a9=n(oo,"LI",{});var e0e=s(a9);m1e=n(e0e,"STRONG",{});var Ddt=s(m1e);rvr=r(Ddt,"distilbert"),Ddt.forEach(t),tvr=r(e0e," \u2014 "),lG=n(e0e,"A",{href:!0});var qdt=s(lG);avr=r(qdt,"FlaxDistilBertForQuestionAnswering"),qdt.forEach(t),nvr=r(e0e," (DistilBERT model)"),e0e.forEach(t),svr=i(oo),n9=n(oo,"LI",{});var o0e=s(n9);g1e=n(o0e,"STRONG",{});var Odt=s(g1e);lvr=r(Odt,"electra"),Odt.forEach(t),ivr=r(o0e," \u2014 "),iG=n(o0e,"A",{href:!0});var Gdt=s(iG);dvr=r(Gdt,"FlaxElectraForQuestionAnswering"),Gdt.forEach(t),cvr=r(o0e," (ELECTRA model)"),o0e.forEach(t),fvr=i(oo),s9=n(oo,"LI",{});var r0e=s(s9);h1e=n(r0e,"STRONG",{});var Xdt=s(h1e);mvr=r(Xdt,"mbart"),Xdt.forEach(t),gvr=r(r0e," \u2014 "),dG=n(r0e,"A",{href:!0});var zdt=s(dG);hvr=r(zdt,"FlaxMBartForQuestionAnswering"),zdt.forEach(t),pvr=r(r0e," (mBART model)"),r0e.forEach(t),_vr=i(oo),l9=n(oo,"LI",{});var t0e=s(l9);p1e=n(t0e,"STRONG",{});var Vdt=s(p1e);uvr=r(Vdt,"roberta"),Vdt.forEach(t),bvr=r(t0e," \u2014 "),cG=n(t0e,"A",{href:!0});var Wdt=s(cG);vvr=r(Wdt,"FlaxRobertaForQuestionAnswering"),Wdt.forEach(t),Tvr=r(t0e," (RoBERTa model)"),t0e.forEach(t),Fvr=i(oo),i9=n(oo,"LI",{});var a0e=s(i9);_1e=n(a0e,"STRONG",{});var Qdt=s(_1e);Cvr=r(Qdt,"roformer"),Qdt.forEach(t),Mvr=r(a0e," \u2014 "),fG=n(a0e,"A",{href:!0});var Hdt=s(fG);Evr=r(Hdt,"FlaxRoFormerForQuestionAnswering"),Hdt.forEach(t),yvr=r(a0e," (RoFormer model)"),a0e.forEach(t),oo.forEach(t),wvr=i(Fa),u1e=n(Fa,"P",{});var Udt=s(u1e);Avr=r(Udt,"Examples:"),Udt.forEach(t),Lvr=i(Fa),m(uA.$$.fragment,Fa),Fa.forEach(t),Zl.forEach(t),iLe=i(d),Oc=n(d,"H2",{class:!0});var mBe=s(Oc);d9=n(mBe,"A",{id:!0,class:!0,href:!0});var Jdt=s(d9);b1e=n(Jdt,"SPAN",{});var Ydt=s(b1e);m(bA.$$.fragment,Ydt),Ydt.forEach(t),Jdt.forEach(t),Bvr=i(mBe),v1e=n(mBe,"SPAN",{});var Kdt=s(v1e);kvr=r(Kdt,"FlaxAutoModelForTokenClassification"),Kdt.forEach(t),mBe.forEach(t),dLe=i(d),Br=n(d,"DIV",{class:!0});var oi=s(Br);m(vA.$$.fragment,oi),xvr=i(oi),Gc=n(oi,"P",{});var iz=s(Gc);Rvr=r(iz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),T1e=n(iz,"CODE",{});var Zdt=s(T1e);Svr=r(Zdt,"from_pretrained()"),Zdt.forEach(t),Pvr=r(iz,"class method or the "),F1e=n(iz,"CODE",{});var ect=s(F1e);$vr=r(ect,"from_config()"),ect.forEach(t),Ivr=r(iz,`class
method.`),iz.forEach(t),jvr=i(oi),TA=n(oi,"P",{});var gBe=s(TA);Nvr=r(gBe,"This class cannot be instantiated directly using "),C1e=n(gBe,"CODE",{});var oct=s(C1e);Dvr=r(oct,"__init__()"),oct.forEach(t),qvr=r(gBe," (throws an error)."),gBe.forEach(t),Ovr=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(FA.$$.fragment,ri),Gvr=i(ri),M1e=n(ri,"P",{});var rct=s(M1e);Xvr=r(rct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rct.forEach(t),zvr=i(ri),Xc=n(ri,"P",{});var dz=s(Xc);Vvr=r(dz,`Note:
Loading a model from its configuration file does `),E1e=n(dz,"STRONG",{});var tct=s(E1e);Wvr=r(tct,"not"),tct.forEach(t),Qvr=r(dz,` load the model weights. It only affects the
model\u2019s configuration. Use `),y1e=n(dz,"CODE",{});var act=s(y1e);Hvr=r(act,"from_pretrained()"),act.forEach(t),Uvr=r(dz,"to load the model weights."),dz.forEach(t),Jvr=i(ri),w1e=n(ri,"P",{});var nct=s(w1e);Yvr=r(nct,"Examples:"),nct.forEach(t),Kvr=i(ri),m(CA.$$.fragment,ri),ri.forEach(t),Zvr=i(oi),xo=n(oi,"DIV",{class:!0});var Ca=s(xo);m(MA.$$.fragment,Ca),eTr=i(Ca),A1e=n(Ca,"P",{});var sct=s(A1e);oTr=r(sct,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sct.forEach(t),rTr=i(Ca),vn=n(Ca,"P",{});var CC=s(vn);tTr=r(CC,"The model class to instantiate is selected based on the "),L1e=n(CC,"CODE",{});var lct=s(L1e);aTr=r(lct,"model_type"),lct.forEach(t),nTr=r(CC,` property of the config object (either
passed as an argument or loaded from `),B1e=n(CC,"CODE",{});var ict=s(B1e);sTr=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),lTr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(CC,"CODE",{});var dct=s(k1e);iTr=r(dct,"pretrained_model_name_or_path"),dct.forEach(t),dTr=r(CC,":"),CC.forEach(t),cTr=i(Ca),no=n(Ca,"UL",{});var Jt=s(no);c9=n(Jt,"LI",{});var n0e=s(c9);x1e=n(n0e,"STRONG",{});var cct=s(x1e);fTr=r(cct,"albert"),cct.forEach(t),mTr=r(n0e," \u2014 "),mG=n(n0e,"A",{href:!0});var fct=s(mG);gTr=r(fct,"FlaxAlbertForTokenClassification"),fct.forEach(t),hTr=r(n0e," (ALBERT model)"),n0e.forEach(t),pTr=i(Jt),f9=n(Jt,"LI",{});var s0e=s(f9);R1e=n(s0e,"STRONG",{});var mct=s(R1e);_Tr=r(mct,"bert"),mct.forEach(t),uTr=r(s0e," \u2014 "),gG=n(s0e,"A",{href:!0});var gct=s(gG);bTr=r(gct,"FlaxBertForTokenClassification"),gct.forEach(t),vTr=r(s0e," (BERT model)"),s0e.forEach(t),TTr=i(Jt),m9=n(Jt,"LI",{});var l0e=s(m9);S1e=n(l0e,"STRONG",{});var hct=s(S1e);FTr=r(hct,"big_bird"),hct.forEach(t),CTr=r(l0e," \u2014 "),hG=n(l0e,"A",{href:!0});var pct=s(hG);MTr=r(pct,"FlaxBigBirdForTokenClassification"),pct.forEach(t),ETr=r(l0e," (BigBird model)"),l0e.forEach(t),yTr=i(Jt),g9=n(Jt,"LI",{});var i0e=s(g9);P1e=n(i0e,"STRONG",{});var _ct=s(P1e);wTr=r(_ct,"distilbert"),_ct.forEach(t),ATr=r(i0e," \u2014 "),pG=n(i0e,"A",{href:!0});var uct=s(pG);LTr=r(uct,"FlaxDistilBertForTokenClassification"),uct.forEach(t),BTr=r(i0e," (DistilBERT model)"),i0e.forEach(t),kTr=i(Jt),h9=n(Jt,"LI",{});var d0e=s(h9);$1e=n(d0e,"STRONG",{});var bct=s($1e);xTr=r(bct,"electra"),bct.forEach(t),RTr=r(d0e," \u2014 "),_G=n(d0e,"A",{href:!0});var vct=s(_G);STr=r(vct,"FlaxElectraForTokenClassification"),vct.forEach(t),PTr=r(d0e," (ELECTRA model)"),d0e.forEach(t),$Tr=i(Jt),p9=n(Jt,"LI",{});var c0e=s(p9);I1e=n(c0e,"STRONG",{});var Tct=s(I1e);ITr=r(Tct,"roberta"),Tct.forEach(t),jTr=r(c0e," \u2014 "),uG=n(c0e,"A",{href:!0});var Fct=s(uG);NTr=r(Fct,"FlaxRobertaForTokenClassification"),Fct.forEach(t),DTr=r(c0e," (RoBERTa model)"),c0e.forEach(t),qTr=i(Jt),_9=n(Jt,"LI",{});var f0e=s(_9);j1e=n(f0e,"STRONG",{});var Cct=s(j1e);OTr=r(Cct,"roformer"),Cct.forEach(t),GTr=r(f0e," \u2014 "),bG=n(f0e,"A",{href:!0});var Mct=s(bG);XTr=r(Mct,"FlaxRoFormerForTokenClassification"),Mct.forEach(t),zTr=r(f0e," (RoFormer model)"),f0e.forEach(t),Jt.forEach(t),VTr=i(Ca),N1e=n(Ca,"P",{});var Ect=s(N1e);WTr=r(Ect,"Examples:"),Ect.forEach(t),QTr=i(Ca),m(EA.$$.fragment,Ca),Ca.forEach(t),oi.forEach(t),cLe=i(d),zc=n(d,"H2",{class:!0});var hBe=s(zc);u9=n(hBe,"A",{id:!0,class:!0,href:!0});var yct=s(u9);D1e=n(yct,"SPAN",{});var wct=s(D1e);m(yA.$$.fragment,wct),wct.forEach(t),yct.forEach(t),HTr=i(hBe),q1e=n(hBe,"SPAN",{});var Act=s(q1e);UTr=r(Act,"FlaxAutoModelForMultipleChoice"),Act.forEach(t),hBe.forEach(t),fLe=i(d),kr=n(d,"DIV",{class:!0});var ti=s(kr);m(wA.$$.fragment,ti),JTr=i(ti),Vc=n(ti,"P",{});var cz=s(Vc);YTr=r(cz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),O1e=n(cz,"CODE",{});var Lct=s(O1e);KTr=r(Lct,"from_pretrained()"),Lct.forEach(t),ZTr=r(cz,"class method or the "),G1e=n(cz,"CODE",{});var Bct=s(G1e);e7r=r(Bct,"from_config()"),Bct.forEach(t),o7r=r(cz,`class
method.`),cz.forEach(t),r7r=i(ti),AA=n(ti,"P",{});var pBe=s(AA);t7r=r(pBe,"This class cannot be instantiated directly using "),X1e=n(pBe,"CODE",{});var kct=s(X1e);a7r=r(kct,"__init__()"),kct.forEach(t),n7r=r(pBe," (throws an error)."),pBe.forEach(t),s7r=i(ti),Ft=n(ti,"DIV",{class:!0});var ai=s(Ft);m(LA.$$.fragment,ai),l7r=i(ai),z1e=n(ai,"P",{});var xct=s(z1e);i7r=r(xct,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xct.forEach(t),d7r=i(ai),Wc=n(ai,"P",{});var fz=s(Wc);c7r=r(fz,`Note:
Loading a model from its configuration file does `),V1e=n(fz,"STRONG",{});var Rct=s(V1e);f7r=r(Rct,"not"),Rct.forEach(t),m7r=r(fz,` load the model weights. It only affects the
model\u2019s configuration. Use `),W1e=n(fz,"CODE",{});var Sct=s(W1e);g7r=r(Sct,"from_pretrained()"),Sct.forEach(t),h7r=r(fz,"to load the model weights."),fz.forEach(t),p7r=i(ai),Q1e=n(ai,"P",{});var Pct=s(Q1e);_7r=r(Pct,"Examples:"),Pct.forEach(t),u7r=i(ai),m(BA.$$.fragment,ai),ai.forEach(t),b7r=i(ti),Ro=n(ti,"DIV",{class:!0});var Ma=s(Ro);m(kA.$$.fragment,Ma),v7r=i(Ma),H1e=n(Ma,"P",{});var $ct=s(H1e);T7r=r($ct,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$ct.forEach(t),F7r=i(Ma),Tn=n(Ma,"P",{});var MC=s(Tn);C7r=r(MC,"The model class to instantiate is selected based on the "),U1e=n(MC,"CODE",{});var Ict=s(U1e);M7r=r(Ict,"model_type"),Ict.forEach(t),E7r=r(MC,` property of the config object (either
passed as an argument or loaded from `),J1e=n(MC,"CODE",{});var jct=s(J1e);y7r=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),w7r=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(MC,"CODE",{});var Nct=s(Y1e);A7r=r(Nct,"pretrained_model_name_or_path"),Nct.forEach(t),L7r=r(MC,":"),MC.forEach(t),B7r=i(Ma),so=n(Ma,"UL",{});var Yt=s(so);b9=n(Yt,"LI",{});var m0e=s(b9);K1e=n(m0e,"STRONG",{});var Dct=s(K1e);k7r=r(Dct,"albert"),Dct.forEach(t),x7r=r(m0e," \u2014 "),vG=n(m0e,"A",{href:!0});var qct=s(vG);R7r=r(qct,"FlaxAlbertForMultipleChoice"),qct.forEach(t),S7r=r(m0e," (ALBERT model)"),m0e.forEach(t),P7r=i(Yt),v9=n(Yt,"LI",{});var g0e=s(v9);Z1e=n(g0e,"STRONG",{});var Oct=s(Z1e);$7r=r(Oct,"bert"),Oct.forEach(t),I7r=r(g0e," \u2014 "),TG=n(g0e,"A",{href:!0});var Gct=s(TG);j7r=r(Gct,"FlaxBertForMultipleChoice"),Gct.forEach(t),N7r=r(g0e," (BERT model)"),g0e.forEach(t),D7r=i(Yt),T9=n(Yt,"LI",{});var h0e=s(T9);e4e=n(h0e,"STRONG",{});var Xct=s(e4e);q7r=r(Xct,"big_bird"),Xct.forEach(t),O7r=r(h0e," \u2014 "),FG=n(h0e,"A",{href:!0});var zct=s(FG);G7r=r(zct,"FlaxBigBirdForMultipleChoice"),zct.forEach(t),X7r=r(h0e," (BigBird model)"),h0e.forEach(t),z7r=i(Yt),F9=n(Yt,"LI",{});var p0e=s(F9);o4e=n(p0e,"STRONG",{});var Vct=s(o4e);V7r=r(Vct,"distilbert"),Vct.forEach(t),W7r=r(p0e," \u2014 "),CG=n(p0e,"A",{href:!0});var Wct=s(CG);Q7r=r(Wct,"FlaxDistilBertForMultipleChoice"),Wct.forEach(t),H7r=r(p0e," (DistilBERT model)"),p0e.forEach(t),U7r=i(Yt),C9=n(Yt,"LI",{});var _0e=s(C9);r4e=n(_0e,"STRONG",{});var Qct=s(r4e);J7r=r(Qct,"electra"),Qct.forEach(t),Y7r=r(_0e," \u2014 "),MG=n(_0e,"A",{href:!0});var Hct=s(MG);K7r=r(Hct,"FlaxElectraForMultipleChoice"),Hct.forEach(t),Z7r=r(_0e," (ELECTRA model)"),_0e.forEach(t),eFr=i(Yt),M9=n(Yt,"LI",{});var u0e=s(M9);t4e=n(u0e,"STRONG",{});var Uct=s(t4e);oFr=r(Uct,"roberta"),Uct.forEach(t),rFr=r(u0e," \u2014 "),EG=n(u0e,"A",{href:!0});var Jct=s(EG);tFr=r(Jct,"FlaxRobertaForMultipleChoice"),Jct.forEach(t),aFr=r(u0e," (RoBERTa model)"),u0e.forEach(t),nFr=i(Yt),E9=n(Yt,"LI",{});var b0e=s(E9);a4e=n(b0e,"STRONG",{});var Yct=s(a4e);sFr=r(Yct,"roformer"),Yct.forEach(t),lFr=r(b0e," \u2014 "),yG=n(b0e,"A",{href:!0});var Kct=s(yG);iFr=r(Kct,"FlaxRoFormerForMultipleChoice"),Kct.forEach(t),dFr=r(b0e," (RoFormer model)"),b0e.forEach(t),Yt.forEach(t),cFr=i(Ma),n4e=n(Ma,"P",{});var Zct=s(n4e);fFr=r(Zct,"Examples:"),Zct.forEach(t),mFr=i(Ma),m(xA.$$.fragment,Ma),Ma.forEach(t),ti.forEach(t),mLe=i(d),Qc=n(d,"H2",{class:!0});var _Be=s(Qc);y9=n(_Be,"A",{id:!0,class:!0,href:!0});var eft=s(y9);s4e=n(eft,"SPAN",{});var oft=s(s4e);m(RA.$$.fragment,oft),oft.forEach(t),eft.forEach(t),gFr=i(_Be),l4e=n(_Be,"SPAN",{});var rft=s(l4e);hFr=r(rft,"FlaxAutoModelForNextSentencePrediction"),rft.forEach(t),_Be.forEach(t),gLe=i(d),xr=n(d,"DIV",{class:!0});var ni=s(xr);m(SA.$$.fragment,ni),pFr=i(ni),Hc=n(ni,"P",{});var mz=s(Hc);_Fr=r(mz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),i4e=n(mz,"CODE",{});var tft=s(i4e);uFr=r(tft,"from_pretrained()"),tft.forEach(t),bFr=r(mz,"class method or the "),d4e=n(mz,"CODE",{});var aft=s(d4e);vFr=r(aft,"from_config()"),aft.forEach(t),TFr=r(mz,`class
method.`),mz.forEach(t),FFr=i(ni),PA=n(ni,"P",{});var uBe=s(PA);CFr=r(uBe,"This class cannot be instantiated directly using "),c4e=n(uBe,"CODE",{});var nft=s(c4e);MFr=r(nft,"__init__()"),nft.forEach(t),EFr=r(uBe," (throws an error)."),uBe.forEach(t),yFr=i(ni),Ct=n(ni,"DIV",{class:!0});var si=s(Ct);m($A.$$.fragment,si),wFr=i(si),f4e=n(si,"P",{});var sft=s(f4e);AFr=r(sft,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sft.forEach(t),LFr=i(si),Uc=n(si,"P",{});var gz=s(Uc);BFr=r(gz,`Note:
Loading a model from its configuration file does `),m4e=n(gz,"STRONG",{});var lft=s(m4e);kFr=r(lft,"not"),lft.forEach(t),xFr=r(gz,` load the model weights. It only affects the
model\u2019s configuration. Use `),g4e=n(gz,"CODE",{});var ift=s(g4e);RFr=r(ift,"from_pretrained()"),ift.forEach(t),SFr=r(gz,"to load the model weights."),gz.forEach(t),PFr=i(si),h4e=n(si,"P",{});var dft=s(h4e);$Fr=r(dft,"Examples:"),dft.forEach(t),IFr=i(si),m(IA.$$.fragment,si),si.forEach(t),jFr=i(ni),So=n(ni,"DIV",{class:!0});var Ea=s(So);m(jA.$$.fragment,Ea),NFr=i(Ea),p4e=n(Ea,"P",{});var cft=s(p4e);DFr=r(cft,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cft.forEach(t),qFr=i(Ea),Fn=n(Ea,"P",{});var EC=s(Fn);OFr=r(EC,"The model class to instantiate is selected based on the "),_4e=n(EC,"CODE",{});var fft=s(_4e);GFr=r(fft,"model_type"),fft.forEach(t),XFr=r(EC,` property of the config object (either
passed as an argument or loaded from `),u4e=n(EC,"CODE",{});var mft=s(u4e);zFr=r(mft,"pretrained_model_name_or_path"),mft.forEach(t),VFr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(EC,"CODE",{});var gft=s(b4e);WFr=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),QFr=r(EC,":"),EC.forEach(t),HFr=i(Ea),v4e=n(Ea,"UL",{});var hft=s(v4e);w9=n(hft,"LI",{});var v0e=s(w9);T4e=n(v0e,"STRONG",{});var pft=s(T4e);UFr=r(pft,"bert"),pft.forEach(t),JFr=r(v0e," \u2014 "),wG=n(v0e,"A",{href:!0});var _ft=s(wG);YFr=r(_ft,"FlaxBertForNextSentencePrediction"),_ft.forEach(t),KFr=r(v0e," (BERT model)"),v0e.forEach(t),hft.forEach(t),ZFr=i(Ea),F4e=n(Ea,"P",{});var uft=s(F4e);e9r=r(uft,"Examples:"),uft.forEach(t),o9r=i(Ea),m(NA.$$.fragment,Ea),Ea.forEach(t),ni.forEach(t),hLe=i(d),Jc=n(d,"H2",{class:!0});var bBe=s(Jc);A9=n(bBe,"A",{id:!0,class:!0,href:!0});var bft=s(A9);C4e=n(bft,"SPAN",{});var vft=s(C4e);m(DA.$$.fragment,vft),vft.forEach(t),bft.forEach(t),r9r=i(bBe),M4e=n(bBe,"SPAN",{});var Tft=s(M4e);t9r=r(Tft,"FlaxAutoModelForImageClassification"),Tft.forEach(t),bBe.forEach(t),pLe=i(d),Rr=n(d,"DIV",{class:!0});var li=s(Rr);m(qA.$$.fragment,li),a9r=i(li),Yc=n(li,"P",{});var hz=s(Yc);n9r=r(hz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),E4e=n(hz,"CODE",{});var Fft=s(E4e);s9r=r(Fft,"from_pretrained()"),Fft.forEach(t),l9r=r(hz,"class method or the "),y4e=n(hz,"CODE",{});var Cft=s(y4e);i9r=r(Cft,"from_config()"),Cft.forEach(t),d9r=r(hz,`class
method.`),hz.forEach(t),c9r=i(li),OA=n(li,"P",{});var vBe=s(OA);f9r=r(vBe,"This class cannot be instantiated directly using "),w4e=n(vBe,"CODE",{});var Mft=s(w4e);m9r=r(Mft,"__init__()"),Mft.forEach(t),g9r=r(vBe," (throws an error)."),vBe.forEach(t),h9r=i(li),Mt=n(li,"DIV",{class:!0});var ii=s(Mt);m(GA.$$.fragment,ii),p9r=i(ii),A4e=n(ii,"P",{});var Eft=s(A4e);_9r=r(Eft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Eft.forEach(t),u9r=i(ii),Kc=n(ii,"P",{});var pz=s(Kc);b9r=r(pz,`Note:
Loading a model from its configuration file does `),L4e=n(pz,"STRONG",{});var yft=s(L4e);v9r=r(yft,"not"),yft.forEach(t),T9r=r(pz,` load the model weights. It only affects the
model\u2019s configuration. Use `),B4e=n(pz,"CODE",{});var wft=s(B4e);F9r=r(wft,"from_pretrained()"),wft.forEach(t),C9r=r(pz,"to load the model weights."),pz.forEach(t),M9r=i(ii),k4e=n(ii,"P",{});var Aft=s(k4e);E9r=r(Aft,"Examples:"),Aft.forEach(t),y9r=i(ii),m(XA.$$.fragment,ii),ii.forEach(t),w9r=i(li),Po=n(li,"DIV",{class:!0});var ya=s(Po);m(zA.$$.fragment,ya),A9r=i(ya),x4e=n(ya,"P",{});var Lft=s(x4e);L9r=r(Lft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lft.forEach(t),B9r=i(ya),Cn=n(ya,"P",{});var yC=s(Cn);k9r=r(yC,"The model class to instantiate is selected based on the "),R4e=n(yC,"CODE",{});var Bft=s(R4e);x9r=r(Bft,"model_type"),Bft.forEach(t),R9r=r(yC,` property of the config object (either
passed as an argument or loaded from `),S4e=n(yC,"CODE",{});var kft=s(S4e);S9r=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),P9r=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(yC,"CODE",{});var xft=s(P4e);$9r=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),I9r=r(yC,":"),yC.forEach(t),j9r=i(ya),VA=n(ya,"UL",{});var TBe=s(VA);L9=n(TBe,"LI",{});var T0e=s(L9);$4e=n(T0e,"STRONG",{});var Rft=s($4e);N9r=r(Rft,"beit"),Rft.forEach(t),D9r=r(T0e," \u2014 "),AG=n(T0e,"A",{href:!0});var Sft=s(AG);q9r=r(Sft,"FlaxBeitForImageClassification"),Sft.forEach(t),O9r=r(T0e," (BEiT model)"),T0e.forEach(t),G9r=i(TBe),B9=n(TBe,"LI",{});var F0e=s(B9);I4e=n(F0e,"STRONG",{});var Pft=s(I4e);X9r=r(Pft,"vit"),Pft.forEach(t),z9r=r(F0e," \u2014 "),LG=n(F0e,"A",{href:!0});var $ft=s(LG);V9r=r($ft,"FlaxViTForImageClassification"),$ft.forEach(t),W9r=r(F0e," (ViT model)"),F0e.forEach(t),TBe.forEach(t),Q9r=i(ya),j4e=n(ya,"P",{});var Ift=s(j4e);H9r=r(Ift,"Examples:"),Ift.forEach(t),U9r=i(ya),m(WA.$$.fragment,ya),ya.forEach(t),li.forEach(t),_Le=i(d),Zc=n(d,"H2",{class:!0});var FBe=s(Zc);k9=n(FBe,"A",{id:!0,class:!0,href:!0});var jft=s(k9);N4e=n(jft,"SPAN",{});var Nft=s(N4e);m(QA.$$.fragment,Nft),Nft.forEach(t),jft.forEach(t),J9r=i(FBe),D4e=n(FBe,"SPAN",{});var Dft=s(D4e);Y9r=r(Dft,"FlaxAutoModelForVision2Seq"),Dft.forEach(t),FBe.forEach(t),uLe=i(d),Sr=n(d,"DIV",{class:!0});var di=s(Sr);m(HA.$$.fragment,di),K9r=i(di),ef=n(di,"P",{});var _z=s(ef);Z9r=r(_z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),q4e=n(_z,"CODE",{});var qft=s(q4e);eCr=r(qft,"from_pretrained()"),qft.forEach(t),oCr=r(_z,"class method or the "),O4e=n(_z,"CODE",{});var Oft=s(O4e);rCr=r(Oft,"from_config()"),Oft.forEach(t),tCr=r(_z,`class
method.`),_z.forEach(t),aCr=i(di),UA=n(di,"P",{});var CBe=s(UA);nCr=r(CBe,"This class cannot be instantiated directly using "),G4e=n(CBe,"CODE",{});var Gft=s(G4e);sCr=r(Gft,"__init__()"),Gft.forEach(t),lCr=r(CBe," (throws an error)."),CBe.forEach(t),iCr=i(di),Et=n(di,"DIV",{class:!0});var ci=s(Et);m(JA.$$.fragment,ci),dCr=i(ci),X4e=n(ci,"P",{});var Xft=s(X4e);cCr=r(Xft,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xft.forEach(t),fCr=i(ci),of=n(ci,"P",{});var uz=s(of);mCr=r(uz,`Note:
Loading a model from its configuration file does `),z4e=n(uz,"STRONG",{});var zft=s(z4e);gCr=r(zft,"not"),zft.forEach(t),hCr=r(uz,` load the model weights. It only affects the
model\u2019s configuration. Use `),V4e=n(uz,"CODE",{});var Vft=s(V4e);pCr=r(Vft,"from_pretrained()"),Vft.forEach(t),_Cr=r(uz,"to load the model weights."),uz.forEach(t),uCr=i(ci),W4e=n(ci,"P",{});var Wft=s(W4e);bCr=r(Wft,"Examples:"),Wft.forEach(t),vCr=i(ci),m(YA.$$.fragment,ci),ci.forEach(t),TCr=i(di),$o=n(di,"DIV",{class:!0});var wa=s($o);m(KA.$$.fragment,wa),FCr=i(wa),Q4e=n(wa,"P",{});var Qft=s(Q4e);CCr=r(Qft,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qft.forEach(t),MCr=i(wa),Mn=n(wa,"P",{});var wC=s(Mn);ECr=r(wC,"The model class to instantiate is selected based on the "),H4e=n(wC,"CODE",{});var Hft=s(H4e);yCr=r(Hft,"model_type"),Hft.forEach(t),wCr=r(wC,` property of the config object (either
passed as an argument or loaded from `),U4e=n(wC,"CODE",{});var Uft=s(U4e);ACr=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),LCr=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(wC,"CODE",{});var Jft=s(J4e);BCr=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),kCr=r(wC,":"),wC.forEach(t),xCr=i(wa),Y4e=n(wa,"UL",{});var Yft=s(Y4e);x9=n(Yft,"LI",{});var C0e=s(x9);K4e=n(C0e,"STRONG",{});var Kft=s(K4e);RCr=r(Kft,"vision-encoder-decoder"),Kft.forEach(t),SCr=r(C0e," \u2014 "),BG=n(C0e,"A",{href:!0});var Zft=s(BG);PCr=r(Zft,"FlaxVisionEncoderDecoderModel"),Zft.forEach(t),$Cr=r(C0e," (Vision Encoder decoder model)"),C0e.forEach(t),Yft.forEach(t),ICr=i(wa),Z4e=n(wa,"P",{});var emt=s(Z4e);jCr=r(emt,"Examples:"),emt.forEach(t),NCr=i(wa),m(ZA.$$.fragment,wa),wa.forEach(t),di.forEach(t),this.h()},h(){c(J,"name","hf:doc:metadata"),c(J,"content",JSON.stringify(dmt)),c(me,"id","auto-classes"),c(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(me,"href","#auto-classes"),c(ie,"class","relative group"),c(En,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoConfig"),c(wn,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoModel"),c(An,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(r6,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(t6,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertConfig"),c(a6,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartConfig"),c(n6,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitConfig"),c(s6,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertConfig"),c(l6,"href","/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(i6,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdConfig"),c(d6,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(c6,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(f6,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(m6,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertConfig"),c(g6,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineConfig"),c(h6,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPConfig"),c(p6,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertConfig"),c(_6,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLConfig"),c(u6,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaConfig"),c(b6,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(v6,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTConfig"),c(T6,"href","/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrConfig"),c(F6,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertConfig"),c(C6,"href","/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRConfig"),c(M6,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraConfig"),c(E6,"href","/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(y6,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertConfig"),c(w6,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetConfig"),c(A6,"href","/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTConfig"),c(L6,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelConfig"),c(B6,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Config"),c(k6,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(x6,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJConfig"),c(R6,"href","/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertConfig"),c(S6,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertConfig"),c(P6,"href","/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($6,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(I6,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(j6,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDConfig"),c(N6,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerConfig"),c(D6,"href","/docs/transformers/pr_15794/en/model_doc/luke#transformers.LukeConfig"),c(q6,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertConfig"),c(O6,"href","/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Config"),c(G6,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianConfig"),c(X6,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartConfig"),c(z6,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(V6,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(W6,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetConfig"),c(Q6,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Config"),c(H6,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(U6,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(J6,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusConfig"),c(Y6,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverConfig"),c(K6,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartConfig"),c(Z6,"href","/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(eL,"href","/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(oL,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(rL,"href","/docs/transformers/pr_15794/en/model_doc/rag#transformers.RagConfig"),c(tL,"href","/docs/transformers/pr_15794/en/model_doc/realm#transformers.RealmConfig"),c(aL,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerConfig"),c(nL,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertConfig"),c(sL,"href","/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertConfig"),c(lL,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaConfig"),c(iL,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerConfig"),c(dL,"href","/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerConfig"),c(cL,"href","/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWConfig"),c(fL,"href","/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDConfig"),c(mL,"href","/docs/transformers/pr_15794/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(gL,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(hL,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(pL,"href","/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterConfig"),c(_L,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(uL,"href","/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinConfig"),c(bL,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Config"),c(vL,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasConfig"),c(TL,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(FL,"href","/docs/transformers/pr_15794/en/model_doc/trocr#transformers.TrOCRConfig"),c(CL,"href","/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ML,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(EL,"href","/docs/transformers/pr_15794/en/model_doc/vilt#transformers.ViltConfig"),c(yL,"href","/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(wL,"href","/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(AL,"href","/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(LL,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTConfig"),c(BL,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(kL,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(xL,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMConfig"),c(RL,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMConfig"),c(SL,"href","/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(PL,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c($L,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetConfig"),c(IL,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoConfig"),c(co,"class","docstring"),c(Hm,"class","docstring"),c(Do,"class","docstring"),c(Um,"id","transformers.AutoTokenizer"),c(Um,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Um,"href","#transformers.AutoTokenizer"),c(Ci,"class","relative group"),c(jL,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(NL,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertTokenizer"),c(DL,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(qL,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartTokenizer"),c(OL,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartTokenizerFast"),c(GL,"href","/docs/transformers/pr_15794/en/model_doc/barthez#transformers.BarthezTokenizer"),c(XL,"href","/docs/transformers/pr_15794/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(zL,"href","/docs/transformers/pr_15794/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(VL,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertTokenizer"),c(WL,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertTokenizerFast"),c(QL,"href","/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(HL,"href","/docs/transformers/pr_15794/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(UL,"href","/docs/transformers/pr_15794/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(JL,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(YL,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(KL,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ZL,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(e8,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(o8,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(r8,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(t8,"href","/docs/transformers/pr_15794/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(a8,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertTokenizer"),c(n8,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(s8,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineTokenizer"),c(l8,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPTokenizer"),c(i8,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(d8,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(c8,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(f8,"href","/docs/transformers/pr_15794/en/model_doc/cpm#transformers.CpmTokenizer"),c(m8,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(g8,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaTokenizer"),c(h8,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(p8,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(_8,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(u8,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(b8,"href","/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(v8,"href","/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(T8,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraTokenizer"),c(F8,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(C8,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(M8,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetTokenizer"),c(E8,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(y8,"href","/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(w8,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelTokenizer"),c(A8,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(L8,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(B8,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(k8,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(x8,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(R8,"href","/docs/transformers/pr_15794/en/model_doc/herbert#transformers.HerbertTokenizer"),c(S8,"href","/docs/transformers/pr_15794/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(P8,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($8,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaTokenizer"),c(I8,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(j8,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(N8,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(D8,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(q8,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(O8,"href","/docs/transformers/pr_15794/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(G8,"href","/docs/transformers/pr_15794/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(X8,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDTokenizer"),c(z8,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDTokenizerFast"),c(V8,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerTokenizer"),c(W8,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(Q8,"href","/docs/transformers/pr_15794/en/model_doc/luke#transformers.LukeTokenizer"),c(H8,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(U8,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(J8,"href","/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(Y8,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianTokenizer"),c(K8,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartTokenizer"),c(Z8,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(eB,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(oB,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(rB,"href","/docs/transformers/pr_15794/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tB,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aB,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sB,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lB,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.T5Tokenizer"),c(iB,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dB,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cB,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fB,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mB,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gB,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(hB,"href","/docs/transformers/pr_15794/en/model_doc/phobert#transformers.PhobertTokenizer"),c(pB,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartTokenizer"),c(_B,"href","/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(uB,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertTokenizer"),c(bB,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertTokenizerFast"),c(vB,"href","/docs/transformers/pr_15794/en/model_doc/rag#transformers.RagTokenizer"),c(TB,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerTokenizer"),c(FB,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(CB,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertTokenizer"),c(MB,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(EB,"href","/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yB,"href","/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(wB,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AB,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LB,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(BB,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(kB,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(xB,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(RB,"href","/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterTokenizer"),c(SB,"href","/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(PB,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c($B,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(IB,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.T5Tokenizer"),c(jB,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.T5TokenizerFast"),c(NB,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasTokenizer"),c(DB,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(qB,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(OB,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(GB,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMTokenizer"),c(XB,"href","/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(zB,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(VB,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(WB,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(QB,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(fo,"class","docstring"),c(yg,"class","docstring"),c(qo,"class","docstring"),c(wg,"id","transformers.AutoFeatureExtractor"),c(wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wg,"href","#transformers.AutoFeatureExtractor"),c(Mi,"class","relative group"),c(HB,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(UB,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JB,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(YB,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ek,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ok,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rk,"href","/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tk,"href","/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(ak,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nk,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sk,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lk,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ik,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Le,"class","docstring"),c(Xg,"class","docstring"),c(Oo,"class","docstring"),c(zg,"id","transformers.AutoProcessor"),c(zg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zg,"href","#transformers.AutoProcessor"),c(Ei,"class","relative group"),c(dk,"href","/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ck,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPProcessor"),c(fk,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(mk,"href","/docs/transformers/pr_15794/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gk,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(hk,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(pk,"href","/docs/transformers/pr_15794/en/model_doc/trocr#transformers.TrOCRProcessor"),c(_k,"href","/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(uk,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Be,"class","docstring"),c(eh,"class","docstring"),c(Go,"class","docstring"),c(oh,"id","transformers.AutoModel"),c(oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oh,"href","#transformers.AutoModel"),c(wi,"class","relative group"),c(Pr,"class","docstring"),c(bk,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertModel"),c(vk,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartModel"),c(Tk,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitModel"),c(Fk,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertModel"),c(Ck,"href","/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Mk,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdModel"),c(Ek,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(yk,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(wk,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Ak,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertModel"),c(Lk,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineModel"),c(Bk,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.CLIPModel"),c(kk,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertModel"),c(xk,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLModel"),c(Rk,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaModel"),c(Sk,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Pk,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTModel"),c($k,"href","/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrModel"),c(Ik,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertModel"),c(jk,"href","/docs/transformers/pr_15794/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Nk,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraModel"),c(Dk,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertModel"),c(qk,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetModel"),c(Ok,"href","/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTModel"),c(Gk,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelModel"),c(Xk,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelBaseModel"),c(zk,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2Model"),c(Vk,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Wk,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJModel"),c(Qk,"href","/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertModel"),c(Hk,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertModel"),c(Uk,"href","/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Jk,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Yk,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Kk,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDModel"),c(Zk,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerModel"),c(ex,"href","/docs/transformers/pr_15794/en/model_doc/luke#transformers.LukeModel"),c(ox,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertModel"),c(rx,"href","/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100Model"),c(tx,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianModel"),c(ax,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartModel"),c(nx,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(sx,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertModel"),c(lx,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetModel"),c(ix,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5Model"),c(dx,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerModel"),c(cx,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(fx,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusModel"),c(mx,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverModel"),c(gx,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartModel"),c(hx,"href","/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerModel"),c(px,"href","/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(_x,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertModel"),c(ux,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerModel"),c(bx,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertModel"),c(vx,"href","/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertModel"),c(Tx,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaModel"),c(Fx,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerModel"),c(Cx,"href","/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerModel"),c(Mx,"href","/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWModel"),c(Ex,"href","/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDModel"),c(yx,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wx,"href","/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterModel"),c(Ax,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Lx,"href","/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinModel"),c(Bx,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5Model"),c(kx,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasModel"),c(xx,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Rx,"href","/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Sx,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Px,"href","/docs/transformers/pr_15794/en/model_doc/vilt#transformers.ViltModel"),c($x,"href","/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Ix,"href","/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertModel"),c(jx,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTModel"),c(Nx,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Dx,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qx,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMModel"),c(Ox,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMModel"),c(Gx,"href","/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Xx,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(zx,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetModel"),c(Vx,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoModel"),c(ke,"class","docstring"),c(Xo,"class","docstring"),c(Rp,"id","transformers.AutoModelForPreTraining"),c(Rp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rp,"href","#transformers.AutoModelForPreTraining"),c(Bi,"class","relative group"),c($r,"class","docstring"),c(Wx,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Qx,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hx,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForPreTraining"),c(Ux,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Jx,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Yx,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Kx,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zx,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eR,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oR,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rR,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tR,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForPreTraining"),c(aR,"href","/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(nR,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(sR,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lR,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(iR,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(dR,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(cR,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(fR,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(mR,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(gR,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(hR,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pR,"href","/docs/transformers/pr_15794/en/model_doc/retribert#transformers.RetriBertModel"),c(_R,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(uR,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(bR,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(vR,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(TR,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(FR,"href","/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(CR,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(MR,"href","/docs/transformers/pr_15794/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(ER,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(yR,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(wR,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(AR,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(LR,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(xe,"class","docstring"),c(zo,"class","docstring"),c(b_,"id","transformers.AutoModelForCausalLM"),c(b_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b_,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Ir,"class","docstring"),c(BR,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForCausalLM"),c(kR,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertLMHeadModel"),c(xR,"href","/docs/transformers/pr_15794/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(RR,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(SR,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(PR,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c($R,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(IR,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jR,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(NR,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForCausalLM"),c(DR,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qR,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(OR,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(GR,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianForCausalLM"),c(XR,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForCausalLM"),c(zR,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(VR,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WR,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(QR,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(HR,"href","/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(UR,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(JR,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(YR,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(KR,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(ZR,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(eS,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(oS,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(rS,"href","/docs/transformers/pr_15794/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(tS,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(aS,"href","/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(nS,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(sS,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Re,"class","docstring"),c(Vo,"class","docstring"),c(eu,"id","transformers.AutoModelForMaskedLM"),c(eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eu,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(jr,"class","docstring"),c(lS,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(iS,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dS,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForMaskedLM"),c(cS,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(fS,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(mS,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(gS,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hS,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pS,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(_S,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(uS,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bS,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(vS,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(TS,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(FS,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(CS,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(MS,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ES,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(yS,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(wS,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(AS,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(LS,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(BS,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(kS,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(xS,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(RS,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(SS,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(PS,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($S,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(IS,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(jS,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(NS,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Se,"class","docstring"),c(Wo,"class","docstring"),c(Iu,"id","transformers.AutoModelForSeq2SeqLM"),c(Iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Iu,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ni,"class","relative group"),c(Nr,"class","docstring"),c(DS,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qS,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(OS,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(GS,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(XS,"href","/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(zS,"href","/docs/transformers/pr_15794/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(VS,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(WS,"href","/docs/transformers/pr_15794/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(QS,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.MarianMTModel"),c(HS,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(US,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(JS,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(YS,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(KS,"href","/docs/transformers/pr_15794/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(ZS,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(eP,"href","/docs/transformers/pr_15794/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Pe,"class","docstring"),c(Qo,"class","docstring"),c(e1,"id","transformers.AutoModelForSequenceClassification"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(Dr,"class","docstring"),c(oP,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(rP,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tP,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForSequenceClassification"),c(aP,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(nP,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(sP,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(lP,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(iP,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(dP,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(cP,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(fP,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(mP,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(gP,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(hP,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(pP,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(_P,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(uP,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(bP,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(vP,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(TP,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(FP,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(CP,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(MP,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForSequenceClassification"),c(EP,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(yP,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(wP,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(AP,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(LP,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(BP,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(kP,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(xP,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(RP,"href","/docs/transformers/pr_15794/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(SP,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(PP,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c($P,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(IP,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(jP,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(NP,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(DP,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(qP,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(OP,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(GP,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(XP,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(zP,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c($e,"class","docstring"),c(Ho,"class","docstring"),c(Q1,"id","transformers.AutoModelForMultipleChoice"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(qr,"class","docstring"),c(VP,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WP,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QP,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(HP,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(UP,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JP,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YP,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KP,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZP,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(e$,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(o$,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(r$,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(t$,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(a$,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(n$,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(s$,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(l$,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(i$,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(d$,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(c$,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(f$,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(m$,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(g$,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(h$,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(p$,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(_$,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ie,"class","docstring"),c(Uo,"class","docstring"),c(C4,"id","transformers.AutoModelForNextSentencePrediction"),c(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(Or,"class","docstring"),c(u$,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(b$,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(v$,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(T$,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(F$,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(je,"class","docstring"),c(Jo,"class","docstring"),c(B4,"id","transformers.AutoModelForTokenClassification"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(Gr,"class","docstring"),c(C$,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(M$,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForTokenClassification"),c(E$,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(y$,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(w$,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForTokenClassification"),c(A$,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(L$,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(B$,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(k$,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(x$,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(R$,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(S$,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(P$,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c($$,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(I$,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(j$,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(N$,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(D$,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(q$,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(O$,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(G$,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(X$,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(z$,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(V$,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(W$,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(Q$,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(H$,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(U$,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(J$,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Y$,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(K$,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(Ne,"class","docstring"),c(Yo,"class","docstring"),c(db,"id","transformers.AutoModelForQuestionAnswering"),c(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(db,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(Xr,"class","docstring"),c(Z$,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(eI,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(oI,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(rI,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(tI,"href","/docs/transformers/pr_15794/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(aI,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(nI,"href","/docs/transformers/pr_15794/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(sI,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(lI,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(iI,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(dI,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(cI,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(fI,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(mI,"href","/docs/transformers/pr_15794/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(gI,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(hI,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(pI,"href","/docs/transformers/pr_15794/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(_I,"href","/docs/transformers/pr_15794/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(uI,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(bI,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(vI,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(TI,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(FI,"href","/docs/transformers/pr_15794/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(CI,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(MI,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(EI,"href","/docs/transformers/pr_15794/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(yI,"href","/docs/transformers/pr_15794/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(wI,"href","/docs/transformers/pr_15794/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(AI,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(LI,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(BI,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(kI,"href","/docs/transformers/pr_15794/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(xI,"href","/docs/transformers/pr_15794/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(RI,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(SI,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(PI,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c($I,"href","/docs/transformers/pr_15794/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(De,"class","docstring"),c(Ko,"class","docstring"),c(Ub,"id","transformers.AutoModelForTableQuestionAnswering"),c(Ub,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ub,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(zr,"class","docstring"),c(II,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(qe,"class","docstring"),c(Zo,"class","docstring"),c(Kb,"id","transformers.AutoModelForImageClassification"),c(Kb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kb,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(Vr,"class","docstring"),c(jI,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.BeitForImageClassification"),c(NI,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DI,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(qI,"href","/docs/transformers/pr_15794/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OI,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(GI,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XI,"href","/docs/transformers/pr_15794/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zI,"href","/docs/transformers/pr_15794/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(VI,"href","/docs/transformers/pr_15794/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(WI,"href","/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinForImageClassification"),c(QI,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTForImageClassification"),c(Oe,"class","docstring"),c(er,"class","docstring"),c(l5,"id","transformers.AutoModelForVision2Seq"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(Wr,"class","docstring"),c(HI,"href","/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(Ge,"class","docstring"),c(or,"class","docstring"),c(c5,"id","transformers.AutoModelForAudioClassification"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(Qr,"class","docstring"),c(UI,"href","/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(JI,"href","/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(YI,"href","/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(KI,"href","/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ZI,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ej,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(oj,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(Xe,"class","docstring"),c(rr,"class","docstring"),c(v5,"id","transformers.AutoModelForAudioFrameClassification"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(Hr,"class","docstring"),c(rj,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(tj,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(aj,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ze,"class","docstring"),c(tr,"class","docstring"),c(E5,"id","transformers.AutoModelForCTC"),c(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E5,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Ur,"class","docstring"),c(nj,"href","/docs/transformers/pr_15794/en/model_doc/hubert#transformers.HubertForCTC"),c(sj,"href","/docs/transformers/pr_15794/en/model_doc/sew#transformers.SEWForCTC"),c(lj,"href","/docs/transformers/pr_15794/en/model_doc/sew-d#transformers.SEWDForCTC"),c(ij,"href","/docs/transformers/pr_15794/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(dj,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(cj,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(fj,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForCTC"),c(Ve,"class","docstring"),c(ar,"class","docstring"),c(S5,"id","transformers.AutoModelForSpeechSeq2Seq"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Jr,"class","docstring"),c(mj,"href","/docs/transformers/pr_15794/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(gj,"href","/docs/transformers/pr_15794/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(We,"class","docstring"),c(nr,"class","docstring"),c(j5,"id","transformers.AutoModelForAudioXVector"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(Yr,"class","docstring"),c(hj,"href","/docs/transformers/pr_15794/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(pj,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(_j,"href","/docs/transformers/pr_15794/en/model_doc/wavlm#transformers.WavLMForXVector"),c(Qe,"class","docstring"),c(sr,"class","docstring"),c(G5,"id","transformers.AutoModelForMaskedImageModeling"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ld,"class","relative group"),c(Kr,"class","docstring"),c(uj,"href","/docs/transformers/pr_15794/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(bj,"href","/docs/transformers/pr_15794/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(vj,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(He,"class","docstring"),c(lr,"class","docstring"),c(Q5,"id","transformers.AutoModelForObjectDetection"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.AutoModelForObjectDetection"),c(Rd,"class","relative group"),c(Zr,"class","docstring"),c(Tj,"href","/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrForObjectDetection"),c(Ue,"class","docstring"),c(ir,"class","docstring"),c(J5,"id","transformers.AutoModelForImageSegmentation"),c(J5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J5,"href","#transformers.AutoModelForImageSegmentation"),c($d,"class","relative group"),c(et,"class","docstring"),c(Fj,"href","/docs/transformers/pr_15794/en/model_doc/detr#transformers.DetrForSegmentation"),c(Je,"class","docstring"),c(dr,"class","docstring"),c(Z5,"id","transformers.TFAutoModel"),c(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z5,"href","#transformers.TFAutoModel"),c(Nd,"class","relative group"),c(ot,"class","docstring"),c(Cj,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertModel"),c(Mj,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartModel"),c(Ej,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertModel"),c(yj,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(wj,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(Aj,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertModel"),c(Lj,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.TFCLIPModel"),c(Bj,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertModel"),c(kj,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLModel"),c(xj,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaModel"),c(Rj,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Sj,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Pj,"href","/docs/transformers/pr_15794/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c($j,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraModel"),c(Ij,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jj,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelModel"),c(Nj,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Dj,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2Model"),c(qj,"href","/docs/transformers/pr_15794/en/model_doc/hubert#transformers.TFHubertModel"),c(Oj,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(Gj,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.TFLEDModel"),c(Xj,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerModel"),c(zj,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Vj,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.TFMarianModel"),c(Wj,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.TFMBartModel"),c(Qj,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Hj,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Uj,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.TFMT5Model"),c(Jj,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(Yj,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.TFPegasusModel"),c(Kj,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertModel"),c(Zj,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaModel"),c(eN,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerModel"),c(oN,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5Model"),c(rN,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasModel"),c(tN,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(aN,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.TFViTModel"),c(nN,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(sN,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMModel"),c(lN,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(iN,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetModel"),c(mo,"class","docstring"),c(cr,"class","docstring"),c(q2,"id","transformers.TFAutoModelForPreTraining"),c(q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q2,"href","#transformers.TFAutoModelForPreTraining"),c(Od,"class","relative group"),c(rt,"class","docstring"),c(dN,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(cN,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForPreTraining"),c(mN,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(gN,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(hN,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(pN,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(_N,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(uN,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(bN,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(vN,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(TN,"href","/docs/transformers/pr_15794/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(FN,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(CN,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(MN,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(EN,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(yN,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(wN,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(AN,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(LN,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BN,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kN,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(go,"class","docstring"),c(fr,"class","docstring"),c(dv,"id","transformers.TFAutoModelForCausalLM"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.TFAutoModelForCausalLM"),c(zd,"class","relative group"),c(tt,"class","docstring"),c(xN,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RN,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(SN,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PN,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c($N,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(IN,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(jN,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(NN,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DN,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qN,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(ho,"class","docstring"),c(mr,"class","docstring"),c(Tv,"id","transformers.TFAutoModelForImageClassification"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(at,"class","docstring"),c(ON,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.TFViTForImageClassification"),c(po,"class","docstring"),c(gr,"class","docstring"),c(Cv,"id","transformers.TFAutoModelForMaskedLM"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(nt,"class","docstring"),c(GN,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(XN,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(zN,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(VN,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(WN,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(QN,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(HN,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(UN,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(JN,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(YN,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(KN,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(ZN,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eD,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oD,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rD,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aD,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nD,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sD,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lD,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(_o,"class","docstring"),c(hr,"class","docstring"),c(Xv,"id","transformers.TFAutoModelForSeq2SeqLM"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(st,"class","docstring"),c(iD,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dD,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cD,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mD,"href","/docs/transformers/pr_15794/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gD,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.TFMarianMTModel"),c(hD,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pD,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(_D,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(uD,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(uo,"class","docstring"),c(pr,"class","docstring"),c(eT,"id","transformers.TFAutoModelForSequenceClassification"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(lt,"class","docstring"),c(bD,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_15794/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(MD,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(ED,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(yD,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(wD,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(AD,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(BD,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(kD,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(xD,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(RD,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(PD,"href","/docs/transformers/pr_15794/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c($D,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(ID,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(jD,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(ND,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(DD,"href","/docs/transformers/pr_15794/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(qD,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(OD,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(GD,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(bo,"class","docstring"),c(_r,"class","docstring"),c(wT,"id","transformers.TFAutoModelForMultipleChoice"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(it,"class","docstring"),c(XD,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(UD,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(YD,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(KD,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(eq,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(oq,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(rq,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(tq,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(aq,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(nq,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(vo,"class","docstring"),c(ur,"class","docstring"),c(zT,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(ic,"class","relative group"),c(dt,"class","docstring"),c(sq,"href","/docs/transformers/pr_15794/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(To,"class","docstring"),c(br,"class","docstring"),c(WT,"id","transformers.TFAutoModelForTokenClassification"),c(WT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WT,"href","#transformers.TFAutoModelForTokenClassification"),c(fc,"class","relative group"),c(ct,"class","docstring"),c(lq,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(iq,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(dq,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(cq,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(fq,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(mq,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(gq,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(hq,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(pq,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(_q,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uq,"href","/docs/transformers/pr_15794/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(bq,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(vq,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(Tq,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(Fq,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(Cq,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(Mq,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Eq,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(yq,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(wq,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Fo,"class","docstring"),c(vr,"class","docstring"),c(g7,"id","transformers.TFAutoModelForQuestionAnswering"),c(g7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(hc,"class","relative group"),c(ft,"class","docstring"),c(Aq,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(Lq,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Bq,"href","/docs/transformers/pr_15794/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kq,"href","/docs/transformers/pr_15794/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xq,"href","/docs/transformers/pr_15794/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Rq,"href","/docs/transformers/pr_15794/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Sq,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(Pq,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($q,"href","/docs/transformers/pr_15794/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Iq,"href","/docs/transformers/pr_15794/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(jq,"href","/docs/transformers/pr_15794/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Nq,"href","/docs/transformers/pr_15794/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Dq,"href","/docs/transformers/pr_15794/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(qq,"href","/docs/transformers/pr_15794/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(Oq,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(Gq,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(Xq,"href","/docs/transformers/pr_15794/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(zq,"href","/docs/transformers/pr_15794/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(Vq,"href","/docs/transformers/pr_15794/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Co,"class","docstring"),c(Tr,"class","docstring"),c(S7,"id","transformers.TFAutoModelForVision2Seq"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForVision2Seq"),c(uc,"class","relative group"),c(mt,"class","docstring"),c(Wq,"href","/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Mo,"class","docstring"),c(Fr,"class","docstring"),c($7,"id","transformers.FlaxAutoModel"),c($7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($7,"href","#transformers.FlaxAutoModel"),c(Tc,"class","relative group"),c(gt,"class","docstring"),c(Qq,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertModel"),c(Hq,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartModel"),c(Uq,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.FlaxBeitModel"),c(Jq,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertModel"),c(Yq,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Kq,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Zq,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(eO,"href","/docs/transformers/pr_15794/en/model_doc/clip#transformers.FlaxCLIPModel"),c(oO,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(rO,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraModel"),c(tO,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(aO,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(nO,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(sO,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.FlaxMarianModel"),c(lO,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartModel"),c(iO,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5Model"),c(dO,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(cO,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(fO,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(mO,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5Model"),c(gO,"href","/docs/transformers/pr_15794/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(hO,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.FlaxViTModel"),c(pO,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Eo,"class","docstring"),c(Cr,"class","docstring"),c(sF,"id","transformers.FlaxAutoModelForCausalLM"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.FlaxAutoModelForCausalLM"),c(Mc,"class","relative group"),c(ht,"class","docstring"),c(_O,"href","/docs/transformers/pr_15794/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(uO,"href","/docs/transformers/pr_15794/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(bO,"href","/docs/transformers/pr_15794/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(yo,"class","docstring"),c(Mr,"class","docstring"),c(fF,"id","transformers.FlaxAutoModelForPreTraining"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.FlaxAutoModelForPreTraining"),c(wc,"class","relative group"),c(pt,"class","docstring"),c(vO,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(TO,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(CO,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(MO,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(EO,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yO,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(AO,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(LO,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(BO,"href","/docs/transformers/pr_15794/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(wo,"class","docstring"),c(Er,"class","docstring"),c(MF,"id","transformers.FlaxAutoModelForMaskedLM"),c(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MF,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Bc,"class","relative group"),c(_t,"class","docstring"),c(kO,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(xO,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(RO,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(SO,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(PO,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($O,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(IO,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(NO,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Ao,"class","docstring"),c(yr,"class","docstring"),c(SF,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(SF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SF,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Rc,"class","relative group"),c(ut,"class","docstring"),c(DO,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(qO,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OO,"href","/docs/transformers/pr_15794/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GO,"href","/docs/transformers/pr_15794/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(XO,"href","/docs/transformers/pr_15794/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zO,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(VO,"href","/docs/transformers/pr_15794/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WO,"href","/docs/transformers/pr_15794/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(QO,"href","/docs/transformers/pr_15794/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Lo,"class","docstring"),c(wr,"class","docstring"),c(XF,"id","transformers.FlaxAutoModelForSequenceClassification"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.FlaxAutoModelForSequenceClassification"),c($c,"class","relative group"),c(bt,"class","docstring"),c(HO,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(UO,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(JO,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(KO,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(eG,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(oG,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(rG,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(Bo,"class","docstring"),c(Ar,"class","docstring"),c(ZF,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Nc,"class","relative group"),c(vt,"class","docstring"),c(tG,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(aG,"href","/docs/transformers/pr_15794/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(nG,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(sG,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(lG,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(iG,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(dG,"href","/docs/transformers/pr_15794/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(cG,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(fG,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(ko,"class","docstring"),c(Lr,"class","docstring"),c(d9,"id","transformers.FlaxAutoModelForTokenClassification"),c(d9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d9,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Oc,"class","relative group"),c(Tt,"class","docstring"),c(mG,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gG,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pG,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(uG,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bG,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xo,"class","docstring"),c(Br,"class","docstring"),c(u9,"id","transformers.FlaxAutoModelForMultipleChoice"),c(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u9,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(zc,"class","relative group"),c(Ft,"class","docstring"),c(vG,"href","/docs/transformers/pr_15794/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(TG,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(FG,"href","/docs/transformers/pr_15794/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CG,"href","/docs/transformers/pr_15794/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(MG,"href","/docs/transformers/pr_15794/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(EG,"href","/docs/transformers/pr_15794/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yG,"href","/docs/transformers/pr_15794/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Ro,"class","docstring"),c(kr,"class","docstring"),c(y9,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(y9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y9,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Qc,"class","relative group"),c(Ct,"class","docstring"),c(wG,"href","/docs/transformers/pr_15794/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(So,"class","docstring"),c(xr,"class","docstring"),c(A9,"id","transformers.FlaxAutoModelForImageClassification"),c(A9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A9,"href","#transformers.FlaxAutoModelForImageClassification"),c(Jc,"class","relative group"),c(Mt,"class","docstring"),c(AG,"href","/docs/transformers/pr_15794/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(LG,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Po,"class","docstring"),c(Rr,"class","docstring"),c(k9,"id","transformers.FlaxAutoModelForVision2Seq"),c(k9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k9,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Zc,"class","relative group"),c(Et,"class","docstring"),c(BG,"href","/docs/transformers/pr_15794/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c($o,"class","docstring"),c(Sr,"class","docstring")},m(d,u){e(document.head,J),b(d,Ae,u),b(d,ie,u),e(ie,me),e(me,ro),g(ce,ro,null),e(ie,ue),e(ie,jo),e(jo,mi),b(d,tf,u),b(d,Zt,u),e(Zt,gi),e(Zt,hi),e(hi,AC),e(Zt,af),b(d,ye,u),b(d,lo,u),e(lo,pi),e(lo,En),e(En,LC),e(lo,yn),e(lo,wn),e(wn,BC),e(lo,_i),e(lo,An),e(An,kC),e(lo,ui),b(d,nf,u),g(Aa,d,u),b(d,io,u),b(d,ge,u),e(ge,J0),e(ge,bi),e(bi,Y0),e(ge,K0),b(d,No,u),b(d,La,u),e(La,Z0),e(La,sf),e(sf,e6),e(La,MBe),b(d,M0e,u),b(d,vi,u),e(vi,lf),e(lf,bz),g(xC,bz,null),e(vi,EBe),e(vi,vz),e(vz,yBe),b(d,E0e,u),b(d,Ln,u),e(Ln,wBe),e(Ln,Tz),e(Tz,ABe),e(Ln,LBe),e(Ln,Fz),e(Fz,BBe),e(Ln,kBe),b(d,y0e,u),g(RC,d,u),b(d,w0e,u),b(d,o6,u),e(o6,xBe),b(d,A0e,u),g(df,d,u),b(d,L0e,u),b(d,Ti,u),e(Ti,cf),e(cf,Cz),g(SC,Cz,null),e(Ti,RBe),e(Ti,Mz),e(Mz,SBe),b(d,B0e,u),b(d,Do,u),g(PC,Do,null),e(Do,PBe),e(Do,$C),e($C,$Be),e($C,r6),e(r6,IBe),e($C,jBe),e(Do,NBe),e(Do,IC),e(IC,DBe),e(IC,Ez),e(Ez,qBe),e(IC,OBe),e(Do,GBe),e(Do,co),g(jC,co,null),e(co,XBe),e(co,yz),e(yz,zBe),e(co,VBe),e(co,Fi),e(Fi,WBe),e(Fi,wz),e(wz,QBe),e(Fi,HBe),e(Fi,Az),e(Az,UBe),e(Fi,JBe),e(co,YBe),e(co,v),e(v,ff),e(ff,Lz),e(Lz,KBe),e(ff,ZBe),e(ff,t6),e(t6,eke),e(ff,oke),e(v,rke),e(v,mf),e(mf,Bz),e(Bz,tke),e(mf,ake),e(mf,a6),e(a6,nke),e(mf,ske),e(v,lke),e(v,gf),e(gf,kz),e(kz,ike),e(gf,dke),e(gf,n6),e(n6,cke),e(gf,fke),e(v,mke),e(v,hf),e(hf,xz),e(xz,gke),e(hf,hke),e(hf,s6),e(s6,pke),e(hf,_ke),e(v,uke),e(v,pf),e(pf,Rz),e(Rz,bke),e(pf,vke),e(pf,l6),e(l6,Tke),e(pf,Fke),e(v,Cke),e(v,_f),e(_f,Sz),e(Sz,Mke),e(_f,Eke),e(_f,i6),e(i6,yke),e(_f,wke),e(v,Ake),e(v,uf),e(uf,Pz),e(Pz,Lke),e(uf,Bke),e(uf,d6),e(d6,kke),e(uf,xke),e(v,Rke),e(v,bf),e(bf,$z),e($z,Ske),e(bf,Pke),e(bf,c6),e(c6,$ke),e(bf,Ike),e(v,jke),e(v,vf),e(vf,Iz),e(Iz,Nke),e(vf,Dke),e(vf,f6),e(f6,qke),e(vf,Oke),e(v,Gke),e(v,Tf),e(Tf,jz),e(jz,Xke),e(Tf,zke),e(Tf,m6),e(m6,Vke),e(Tf,Wke),e(v,Qke),e(v,Ff),e(Ff,Nz),e(Nz,Hke),e(Ff,Uke),e(Ff,g6),e(g6,Jke),e(Ff,Yke),e(v,Kke),e(v,Cf),e(Cf,Dz),e(Dz,Zke),e(Cf,exe),e(Cf,h6),e(h6,oxe),e(Cf,rxe),e(v,txe),e(v,Mf),e(Mf,qz),e(qz,axe),e(Mf,nxe),e(Mf,p6),e(p6,sxe),e(Mf,lxe),e(v,ixe),e(v,Ef),e(Ef,Oz),e(Oz,dxe),e(Ef,cxe),e(Ef,Gz),e(Gz,fxe),e(Ef,mxe),e(v,gxe),e(v,yf),e(yf,Xz),e(Xz,hxe),e(yf,pxe),e(yf,_6),e(_6,_xe),e(yf,uxe),e(v,bxe),e(v,wf),e(wf,zz),e(zz,vxe),e(wf,Txe),e(wf,u6),e(u6,Fxe),e(wf,Cxe),e(v,Mxe),e(v,Af),e(Af,Vz),e(Vz,Exe),e(Af,yxe),e(Af,b6),e(b6,wxe),e(Af,Axe),e(v,Lxe),e(v,Lf),e(Lf,Wz),e(Wz,Bxe),e(Lf,kxe),e(Lf,v6),e(v6,xxe),e(Lf,Rxe),e(v,Sxe),e(v,Bf),e(Bf,Qz),e(Qz,Pxe),e(Bf,$xe),e(Bf,T6),e(T6,Ixe),e(Bf,jxe),e(v,Nxe),e(v,kf),e(kf,Hz),e(Hz,Dxe),e(kf,qxe),e(kf,F6),e(F6,Oxe),e(kf,Gxe),e(v,Xxe),e(v,xf),e(xf,Uz),e(Uz,zxe),e(xf,Vxe),e(xf,C6),e(C6,Wxe),e(xf,Qxe),e(v,Hxe),e(v,Rf),e(Rf,Jz),e(Jz,Uxe),e(Rf,Jxe),e(Rf,M6),e(M6,Yxe),e(Rf,Kxe),e(v,Zxe),e(v,Sf),e(Sf,Yz),e(Yz,eRe),e(Sf,oRe),e(Sf,E6),e(E6,rRe),e(Sf,tRe),e(v,aRe),e(v,Pf),e(Pf,Kz),e(Kz,nRe),e(Pf,sRe),e(Pf,y6),e(y6,lRe),e(Pf,iRe),e(v,dRe),e(v,$f),e($f,Zz),e(Zz,cRe),e($f,fRe),e($f,w6),e(w6,mRe),e($f,gRe),e(v,hRe),e(v,If),e(If,eV),e(eV,pRe),e(If,_Re),e(If,A6),e(A6,uRe),e(If,bRe),e(v,vRe),e(v,jf),e(jf,oV),e(oV,TRe),e(jf,FRe),e(jf,L6),e(L6,CRe),e(jf,MRe),e(v,ERe),e(v,Nf),e(Nf,rV),e(rV,yRe),e(Nf,wRe),e(Nf,B6),e(B6,ARe),e(Nf,LRe),e(v,BRe),e(v,Df),e(Df,tV),e(tV,kRe),e(Df,xRe),e(Df,k6),e(k6,RRe),e(Df,SRe),e(v,PRe),e(v,qf),e(qf,aV),e(aV,$Re),e(qf,IRe),e(qf,x6),e(x6,jRe),e(qf,NRe),e(v,DRe),e(v,Of),e(Of,nV),e(nV,qRe),e(Of,ORe),e(Of,R6),e(R6,GRe),e(Of,XRe),e(v,zRe),e(v,Gf),e(Gf,sV),e(sV,VRe),e(Gf,WRe),e(Gf,S6),e(S6,QRe),e(Gf,HRe),e(v,URe),e(v,Xf),e(Xf,lV),e(lV,JRe),e(Xf,YRe),e(Xf,P6),e(P6,KRe),e(Xf,ZRe),e(v,eSe),e(v,zf),e(zf,iV),e(iV,oSe),e(zf,rSe),e(zf,$6),e($6,tSe),e(zf,aSe),e(v,nSe),e(v,Vf),e(Vf,dV),e(dV,sSe),e(Vf,lSe),e(Vf,I6),e(I6,iSe),e(Vf,dSe),e(v,cSe),e(v,Wf),e(Wf,cV),e(cV,fSe),e(Wf,mSe),e(Wf,j6),e(j6,gSe),e(Wf,hSe),e(v,pSe),e(v,Qf),e(Qf,fV),e(fV,_Se),e(Qf,uSe),e(Qf,N6),e(N6,bSe),e(Qf,vSe),e(v,TSe),e(v,Hf),e(Hf,mV),e(mV,FSe),e(Hf,CSe),e(Hf,D6),e(D6,MSe),e(Hf,ESe),e(v,ySe),e(v,Uf),e(Uf,gV),e(gV,wSe),e(Uf,ASe),e(Uf,q6),e(q6,LSe),e(Uf,BSe),e(v,kSe),e(v,Jf),e(Jf,hV),e(hV,xSe),e(Jf,RSe),e(Jf,O6),e(O6,SSe),e(Jf,PSe),e(v,$Se),e(v,Yf),e(Yf,pV),e(pV,ISe),e(Yf,jSe),e(Yf,G6),e(G6,NSe),e(Yf,DSe),e(v,qSe),e(v,Kf),e(Kf,_V),e(_V,OSe),e(Kf,GSe),e(Kf,X6),e(X6,XSe),e(Kf,zSe),e(v,VSe),e(v,Zf),e(Zf,uV),e(uV,WSe),e(Zf,QSe),e(Zf,z6),e(z6,HSe),e(Zf,USe),e(v,JSe),e(v,em),e(em,bV),e(bV,YSe),e(em,KSe),e(em,V6),e(V6,ZSe),e(em,ePe),e(v,oPe),e(v,om),e(om,vV),e(vV,rPe),e(om,tPe),e(om,W6),e(W6,aPe),e(om,nPe),e(v,sPe),e(v,rm),e(rm,TV),e(TV,lPe),e(rm,iPe),e(rm,Q6),e(Q6,dPe),e(rm,cPe),e(v,fPe),e(v,tm),e(tm,FV),e(FV,mPe),e(tm,gPe),e(tm,H6),e(H6,hPe),e(tm,pPe),e(v,_Pe),e(v,am),e(am,CV),e(CV,uPe),e(am,bPe),e(am,U6),e(U6,vPe),e(am,TPe),e(v,FPe),e(v,nm),e(nm,MV),e(MV,CPe),e(nm,MPe),e(nm,J6),e(J6,EPe),e(nm,yPe),e(v,wPe),e(v,sm),e(sm,EV),e(EV,APe),e(sm,LPe),e(sm,Y6),e(Y6,BPe),e(sm,kPe),e(v,xPe),e(v,lm),e(lm,yV),e(yV,RPe),e(lm,SPe),e(lm,K6),e(K6,PPe),e(lm,$Pe),e(v,IPe),e(v,im),e(im,wV),e(wV,jPe),e(im,NPe),e(im,Z6),e(Z6,DPe),e(im,qPe),e(v,OPe),e(v,dm),e(dm,AV),e(AV,GPe),e(dm,XPe),e(dm,eL),e(eL,zPe),e(dm,VPe),e(v,WPe),e(v,cm),e(cm,LV),e(LV,QPe),e(cm,HPe),e(cm,oL),e(oL,UPe),e(cm,JPe),e(v,YPe),e(v,fm),e(fm,BV),e(BV,KPe),e(fm,ZPe),e(fm,rL),e(rL,e$e),e(fm,o$e),e(v,r$e),e(v,mm),e(mm,kV),e(kV,t$e),e(mm,a$e),e(mm,tL),e(tL,n$e),e(mm,s$e),e(v,l$e),e(v,gm),e(gm,xV),e(xV,i$e),e(gm,d$e),e(gm,aL),e(aL,c$e),e(gm,f$e),e(v,m$e),e(v,hm),e(hm,RV),e(RV,g$e),e(hm,h$e),e(hm,nL),e(nL,p$e),e(hm,_$e),e(v,u$e),e(v,pm),e(pm,SV),e(SV,b$e),e(pm,v$e),e(pm,sL),e(sL,T$e),e(pm,F$e),e(v,C$e),e(v,_m),e(_m,PV),e(PV,M$e),e(_m,E$e),e(_m,lL),e(lL,y$e),e(_m,w$e),e(v,A$e),e(v,um),e(um,$V),e($V,L$e),e(um,B$e),e(um,iL),e(iL,k$e),e(um,x$e),e(v,R$e),e(v,bm),e(bm,IV),e(IV,S$e),e(bm,P$e),e(bm,dL),e(dL,$$e),e(bm,I$e),e(v,j$e),e(v,vm),e(vm,jV),e(jV,N$e),e(vm,D$e),e(vm,cL),e(cL,q$e),e(vm,O$e),e(v,G$e),e(v,Tm),e(Tm,NV),e(NV,X$e),e(Tm,z$e),e(Tm,fL),e(fL,V$e),e(Tm,W$e),e(v,Q$e),e(v,Fm),e(Fm,DV),e(DV,H$e),e(Fm,U$e),e(Fm,mL),e(mL,J$e),e(Fm,Y$e),e(v,K$e),e(v,Cm),e(Cm,qV),e(qV,Z$e),e(Cm,eIe),e(Cm,gL),e(gL,oIe),e(Cm,rIe),e(v,tIe),e(v,Mm),e(Mm,OV),e(OV,aIe),e(Mm,nIe),e(Mm,hL),e(hL,sIe),e(Mm,lIe),e(v,iIe),e(v,Em),e(Em,GV),e(GV,dIe),e(Em,cIe),e(Em,pL),e(pL,fIe),e(Em,mIe),e(v,gIe),e(v,ym),e(ym,XV),e(XV,hIe),e(ym,pIe),e(ym,_L),e(_L,_Ie),e(ym,uIe),e(v,bIe),e(v,wm),e(wm,zV),e(zV,vIe),e(wm,TIe),e(wm,uL),e(uL,FIe),e(wm,CIe),e(v,MIe),e(v,Am),e(Am,VV),e(VV,EIe),e(Am,yIe),e(Am,bL),e(bL,wIe),e(Am,AIe),e(v,LIe),e(v,Lm),e(Lm,WV),e(WV,BIe),e(Lm,kIe),e(Lm,vL),e(vL,xIe),e(Lm,RIe),e(v,SIe),e(v,Bm),e(Bm,QV),e(QV,PIe),e(Bm,$Ie),e(Bm,TL),e(TL,IIe),e(Bm,jIe),e(v,NIe),e(v,km),e(km,HV),e(HV,DIe),e(km,qIe),e(km,FL),e(FL,OIe),e(km,GIe),e(v,XIe),e(v,xm),e(xm,UV),e(UV,zIe),e(xm,VIe),e(xm,CL),e(CL,WIe),e(xm,QIe),e(v,HIe),e(v,Rm),e(Rm,JV),e(JV,UIe),e(Rm,JIe),e(Rm,ML),e(ML,YIe),e(Rm,KIe),e(v,ZIe),e(v,Sm),e(Sm,YV),e(YV,eje),e(Sm,oje),e(Sm,EL),e(EL,rje),e(Sm,tje),e(v,aje),e(v,Pm),e(Pm,KV),e(KV,nje),e(Pm,sje),e(Pm,yL),e(yL,lje),e(Pm,ije),e(v,dje),e(v,$m),e($m,ZV),e(ZV,cje),e($m,fje),e($m,wL),e(wL,mje),e($m,gje),e(v,hje),e(v,Im),e(Im,eW),e(eW,pje),e(Im,_je),e(Im,AL),e(AL,uje),e(Im,bje),e(v,vje),e(v,jm),e(jm,oW),e(oW,Tje),e(jm,Fje),e(jm,LL),e(LL,Cje),e(jm,Mje),e(v,Eje),e(v,Nm),e(Nm,rW),e(rW,yje),e(Nm,wje),e(Nm,BL),e(BL,Aje),e(Nm,Lje),e(v,Bje),e(v,Dm),e(Dm,tW),e(tW,kje),e(Dm,xje),e(Dm,kL),e(kL,Rje),e(Dm,Sje),e(v,Pje),e(v,qm),e(qm,aW),e(aW,$je),e(qm,Ije),e(qm,xL),e(xL,jje),e(qm,Nje),e(v,Dje),e(v,Om),e(Om,nW),e(nW,qje),e(Om,Oje),e(Om,sW),e(sW,Gje),e(Om,Xje),e(v,zje),e(v,Gm),e(Gm,lW),e(lW,Vje),e(Gm,Wje),e(Gm,RL),e(RL,Qje),e(Gm,Hje),e(v,Uje),e(v,Xm),e(Xm,iW),e(iW,Jje),e(Xm,Yje),e(Xm,SL),e(SL,Kje),e(Xm,Zje),e(v,eNe),e(v,zm),e(zm,dW),e(dW,oNe),e(zm,rNe),e(zm,PL),e(PL,tNe),e(zm,aNe),e(v,nNe),e(v,Vm),e(Vm,cW),e(cW,sNe),e(Vm,lNe),e(Vm,fW),e(fW,iNe),e(Vm,dNe),e(v,cNe),e(v,Wm),e(Wm,mW),e(mW,fNe),e(Wm,mNe),e(Wm,$L),e($L,gNe),e(Wm,hNe),e(v,pNe),e(v,Qm),e(Qm,gW),e(gW,_Ne),e(Qm,uNe),e(Qm,IL),e(IL,bNe),e(Qm,vNe),e(co,TNe),e(co,hW),e(hW,FNe),e(co,CNe),g(NC,co,null),e(Do,MNe),e(Do,Hm),g(DC,Hm,null),e(Hm,ENe),e(Hm,pW),e(pW,yNe),b(d,k0e,u),b(d,Ci,u),e(Ci,Um),e(Um,_W),g(qC,_W,null),e(Ci,wNe),e(Ci,uW),e(uW,ANe),b(d,x0e,u),b(d,qo,u),g(OC,qo,null),e(qo,LNe),e(qo,GC),e(GC,BNe),e(GC,jL),e(jL,kNe),e(GC,xNe),e(qo,RNe),e(qo,XC),e(XC,SNe),e(XC,bW),e(bW,PNe),e(XC,$Ne),e(qo,INe),e(qo,fo),g(zC,fo,null),e(fo,jNe),e(fo,vW),e(vW,NNe),e(fo,DNe),e(fo,Ba),e(Ba,qNe),e(Ba,TW),e(TW,ONe),e(Ba,GNe),e(Ba,FW),e(FW,XNe),e(Ba,zNe),e(Ba,CW),e(CW,VNe),e(Ba,WNe),e(fo,QNe),e(fo,M),e(M,Bn),e(Bn,MW),e(MW,HNe),e(Bn,UNe),e(Bn,NL),e(NL,JNe),e(Bn,YNe),e(Bn,DL),e(DL,KNe),e(Bn,ZNe),e(M,eDe),e(M,kn),e(kn,EW),e(EW,oDe),e(kn,rDe),e(kn,qL),e(qL,tDe),e(kn,aDe),e(kn,OL),e(OL,nDe),e(kn,sDe),e(M,lDe),e(M,xn),e(xn,yW),e(yW,iDe),e(xn,dDe),e(xn,GL),e(GL,cDe),e(xn,fDe),e(xn,XL),e(XL,mDe),e(xn,gDe),e(M,hDe),e(M,Jm),e(Jm,wW),e(wW,pDe),e(Jm,_De),e(Jm,zL),e(zL,uDe),e(Jm,bDe),e(M,vDe),e(M,Rn),e(Rn,AW),e(AW,TDe),e(Rn,FDe),e(Rn,VL),e(VL,CDe),e(Rn,MDe),e(Rn,WL),e(WL,EDe),e(Rn,yDe),e(M,wDe),e(M,Ym),e(Ym,LW),e(LW,ADe),e(Ym,LDe),e(Ym,QL),e(QL,BDe),e(Ym,kDe),e(M,xDe),e(M,Km),e(Km,BW),e(BW,RDe),e(Km,SDe),e(Km,HL),e(HL,PDe),e(Km,$De),e(M,IDe),e(M,Zm),e(Zm,kW),e(kW,jDe),e(Zm,NDe),e(Zm,UL),e(UL,DDe),e(Zm,qDe),e(M,ODe),e(M,Sn),e(Sn,xW),e(xW,GDe),e(Sn,XDe),e(Sn,JL),e(JL,zDe),e(Sn,VDe),e(Sn,YL),e(YL,WDe),e(Sn,QDe),e(M,HDe),e(M,Pn),e(Pn,RW),e(RW,UDe),e(Pn,JDe),e(Pn,KL),e(KL,YDe),e(Pn,KDe),e(Pn,ZL),e(ZL,ZDe),e(Pn,eqe),e(M,oqe),e(M,$n),e($n,SW),e(SW,rqe),e($n,tqe),e($n,e8),e(e8,aqe),e($n,nqe),e($n,o8),e(o8,sqe),e($n,lqe),e(M,iqe),e(M,eg),e(eg,PW),e(PW,dqe),e(eg,cqe),e(eg,r8),e(r8,fqe),e(eg,mqe),e(M,gqe),e(M,og),e(og,$W),e($W,hqe),e(og,pqe),e(og,t8),e(t8,_qe),e(og,uqe),e(M,bqe),e(M,In),e(In,IW),e(IW,vqe),e(In,Tqe),e(In,a8),e(a8,Fqe),e(In,Cqe),e(In,n8),e(n8,Mqe),e(In,Eqe),e(M,yqe),e(M,rg),e(rg,jW),e(jW,wqe),e(rg,Aqe),e(rg,s8),e(s8,Lqe),e(rg,Bqe),e(M,kqe),e(M,jn),e(jn,NW),e(NW,xqe),e(jn,Rqe),e(jn,l8),e(l8,Sqe),e(jn,Pqe),e(jn,i8),e(i8,$qe),e(jn,Iqe),e(M,jqe),e(M,Nn),e(Nn,DW),e(DW,Nqe),e(Nn,Dqe),e(Nn,d8),e(d8,qqe),e(Nn,Oqe),e(Nn,c8),e(c8,Gqe),e(Nn,Xqe),e(M,zqe),e(M,Dn),e(Dn,qW),e(qW,Vqe),e(Dn,Wqe),e(Dn,f8),e(f8,Qqe),e(Dn,Hqe),e(Dn,OW),e(OW,Uqe),e(Dn,Jqe),e(M,Yqe),e(M,tg),e(tg,GW),e(GW,Kqe),e(tg,Zqe),e(tg,m8),e(m8,eOe),e(tg,oOe),e(M,rOe),e(M,qn),e(qn,XW),e(XW,tOe),e(qn,aOe),e(qn,g8),e(g8,nOe),e(qn,sOe),e(qn,h8),e(h8,lOe),e(qn,iOe),e(M,dOe),e(M,ag),e(ag,zW),e(zW,cOe),e(ag,fOe),e(ag,p8),e(p8,mOe),e(ag,gOe),e(M,hOe),e(M,On),e(On,VW),e(VW,pOe),e(On,_Oe),e(On,_8),e(_8,uOe),e(On,bOe),e(On,u8),e(u8,vOe),e(On,TOe),e(M,FOe),e(M,Gn),e(Gn,WW),e(WW,COe),e(Gn,MOe),e(Gn,b8),e(b8,EOe),e(Gn,yOe),e(Gn,v8),e(v8,wOe),e(Gn,AOe),e(M,LOe),e(M,Xn),e(Xn,QW),e(QW,BOe),e(Xn,kOe),e(Xn,T8),e(T8,xOe),e(Xn,ROe),e(Xn,F8),e(F8,SOe),e(Xn,POe),e(M,$Oe),e(M,ng),e(ng,HW),e(HW,IOe),e(ng,jOe),e(ng,C8),e(C8,NOe),e(ng,DOe),e(M,qOe),e(M,zn),e(zn,UW),e(UW,OOe),e(zn,GOe),e(zn,M8),e(M8,XOe),e(zn,zOe),e(zn,E8),e(E8,VOe),e(zn,WOe),e(M,QOe),e(M,sg),e(sg,JW),e(JW,HOe),e(sg,UOe),e(sg,y8),e(y8,JOe),e(sg,YOe),e(M,KOe),e(M,Vn),e(Vn,YW),e(YW,ZOe),e(Vn,eGe),e(Vn,w8),e(w8,oGe),e(Vn,rGe),e(Vn,A8),e(A8,tGe),e(Vn,aGe),e(M,nGe),e(M,Wn),e(Wn,KW),e(KW,sGe),e(Wn,lGe),e(Wn,L8),e(L8,iGe),e(Wn,dGe),e(Wn,B8),e(B8,cGe),e(Wn,fGe),e(M,mGe),e(M,Qn),e(Qn,ZW),e(ZW,gGe),e(Qn,hGe),e(Qn,k8),e(k8,pGe),e(Qn,_Ge),e(Qn,x8),e(x8,uGe),e(Qn,bGe),e(M,vGe),e(M,Hn),e(Hn,eQ),e(eQ,TGe),e(Hn,FGe),e(Hn,R8),e(R8,CGe),e(Hn,MGe),e(Hn,S8),e(S8,EGe),e(Hn,yGe),e(M,wGe),e(M,lg),e(lg,oQ),e(oQ,AGe),e(lg,LGe),e(lg,P8),e(P8,BGe),e(lg,kGe),e(M,xGe),e(M,Un),e(Un,rQ),e(rQ,RGe),e(Un,SGe),e(Un,$8),e($8,PGe),e(Un,$Ge),e(Un,I8),e(I8,IGe),e(Un,jGe),e(M,NGe),e(M,Jn),e(Jn,tQ),e(tQ,DGe),e(Jn,qGe),e(Jn,j8),e(j8,OGe),e(Jn,GGe),e(Jn,N8),e(N8,XGe),e(Jn,zGe),e(M,VGe),e(M,Yn),e(Yn,aQ),e(aQ,WGe),e(Yn,QGe),e(Yn,D8),e(D8,HGe),e(Yn,UGe),e(Yn,q8),e(q8,JGe),e(Yn,YGe),e(M,KGe),e(M,Kn),e(Kn,nQ),e(nQ,ZGe),e(Kn,eXe),e(Kn,O8),e(O8,oXe),e(Kn,rXe),e(Kn,G8),e(G8,tXe),e(Kn,aXe),e(M,nXe),e(M,Zn),e(Zn,sQ),e(sQ,sXe),e(Zn,lXe),e(Zn,X8),e(X8,iXe),e(Zn,dXe),e(Zn,z8),e(z8,cXe),e(Zn,fXe),e(M,mXe),e(M,es),e(es,lQ),e(lQ,gXe),e(es,hXe),e(es,V8),e(V8,pXe),e(es,_Xe),e(es,W8),e(W8,uXe),e(es,bXe),e(M,vXe),e(M,ig),e(ig,iQ),e(iQ,TXe),e(ig,FXe),e(ig,Q8),e(Q8,CXe),e(ig,MXe),e(M,EXe),e(M,os),e(os,dQ),e(dQ,yXe),e(os,wXe),e(os,H8),e(H8,AXe),e(os,LXe),e(os,U8),e(U8,BXe),e(os,kXe),e(M,xXe),e(M,dg),e(dg,cQ),e(cQ,RXe),e(dg,SXe),e(dg,J8),e(J8,PXe),e(dg,$Xe),e(M,IXe),e(M,cg),e(cg,fQ),e(fQ,jXe),e(cg,NXe),e(cg,Y8),e(Y8,DXe),e(cg,qXe),e(M,OXe),e(M,rs),e(rs,mQ),e(mQ,GXe),e(rs,XXe),e(rs,K8),e(K8,zXe),e(rs,VXe),e(rs,Z8),e(Z8,WXe),e(rs,QXe),e(M,HXe),e(M,ts),e(ts,gQ),e(gQ,UXe),e(ts,JXe),e(ts,eB),e(eB,YXe),e(ts,KXe),e(ts,oB),e(oB,ZXe),e(ts,eze),e(M,oze),e(M,fg),e(fg,hQ),e(hQ,rze),e(fg,tze),e(fg,rB),e(rB,aze),e(fg,nze),e(M,sze),e(M,as),e(as,pQ),e(pQ,lze),e(as,ize),e(as,tB),e(tB,dze),e(as,cze),e(as,aB),e(aB,fze),e(as,mze),e(M,gze),e(M,ns),e(ns,_Q),e(_Q,hze),e(ns,pze),e(ns,nB),e(nB,_ze),e(ns,uze),e(ns,sB),e(sB,bze),e(ns,vze),e(M,Tze),e(M,ss),e(ss,uQ),e(uQ,Fze),e(ss,Cze),e(ss,lB),e(lB,Mze),e(ss,Eze),e(ss,iB),e(iB,yze),e(ss,wze),e(M,Aze),e(M,ls),e(ls,bQ),e(bQ,Lze),e(ls,Bze),e(ls,dB),e(dB,kze),e(ls,xze),e(ls,cB),e(cB,Rze),e(ls,Sze),e(M,Pze),e(M,is),e(is,vQ),e(vQ,$ze),e(is,Ize),e(is,fB),e(fB,jze),e(is,Nze),e(is,mB),e(mB,Dze),e(is,qze),e(M,Oze),e(M,mg),e(mg,TQ),e(TQ,Gze),e(mg,Xze),e(mg,gB),e(gB,zze),e(mg,Vze),e(M,Wze),e(M,gg),e(gg,FQ),e(FQ,Qze),e(gg,Hze),e(gg,hB),e(hB,Uze),e(gg,Jze),e(M,Yze),e(M,hg),e(hg,CQ),e(CQ,Kze),e(hg,Zze),e(hg,pB),e(pB,eVe),e(hg,oVe),e(M,rVe),e(M,pg),e(pg,MQ),e(MQ,tVe),e(pg,aVe),e(pg,_B),e(_B,nVe),e(pg,sVe),e(M,lVe),e(M,ds),e(ds,EQ),e(EQ,iVe),e(ds,dVe),e(ds,uB),e(uB,cVe),e(ds,fVe),e(ds,bB),e(bB,mVe),e(ds,gVe),e(M,hVe),e(M,_g),e(_g,yQ),e(yQ,pVe),e(_g,_Ve),e(_g,vB),e(vB,uVe),e(_g,bVe),e(M,vVe),e(M,cs),e(cs,wQ),e(wQ,TVe),e(cs,FVe),e(cs,TB),e(TB,CVe),e(cs,MVe),e(cs,FB),e(FB,EVe),e(cs,yVe),e(M,wVe),e(M,fs),e(fs,AQ),e(AQ,AVe),e(fs,LVe),e(fs,CB),e(CB,BVe),e(fs,kVe),e(fs,MB),e(MB,xVe),e(fs,RVe),e(M,SVe),e(M,ms),e(ms,LQ),e(LQ,PVe),e(ms,$Ve),e(ms,EB),e(EB,IVe),e(ms,jVe),e(ms,yB),e(yB,NVe),e(ms,DVe),e(M,qVe),e(M,gs),e(gs,BQ),e(BQ,OVe),e(gs,GVe),e(gs,wB),e(wB,XVe),e(gs,zVe),e(gs,AB),e(AB,VVe),e(gs,WVe),e(M,QVe),e(M,hs),e(hs,kQ),e(kQ,HVe),e(hs,UVe),e(hs,LB),e(LB,JVe),e(hs,YVe),e(hs,BB),e(BB,KVe),e(hs,ZVe),e(M,eWe),e(M,ug),e(ug,xQ),e(xQ,oWe),e(ug,rWe),e(ug,kB),e(kB,tWe),e(ug,aWe),e(M,nWe),e(M,bg),e(bg,RQ),e(RQ,sWe),e(bg,lWe),e(bg,xB),e(xB,iWe),e(bg,dWe),e(M,cWe),e(M,ps),e(ps,SQ),e(SQ,fWe),e(ps,mWe),e(ps,RB),e(RB,gWe),e(ps,hWe),e(ps,SB),e(SB,pWe),e(ps,_We),e(M,uWe),e(M,_s),e(_s,PQ),e(PQ,bWe),e(_s,vWe),e(_s,PB),e(PB,TWe),e(_s,FWe),e(_s,$B),e($B,CWe),e(_s,MWe),e(M,EWe),e(M,us),e(us,$Q),e($Q,yWe),e(us,wWe),e(us,IB),e(IB,AWe),e(us,LWe),e(us,jB),e(jB,BWe),e(us,kWe),e(M,xWe),e(M,vg),e(vg,IQ),e(IQ,RWe),e(vg,SWe),e(vg,NB),e(NB,PWe),e(vg,$We),e(M,IWe),e(M,Tg),e(Tg,jQ),e(jQ,jWe),e(Tg,NWe),e(Tg,DB),e(DB,DWe),e(Tg,qWe),e(M,OWe),e(M,Fg),e(Fg,NQ),e(NQ,GWe),e(Fg,XWe),e(Fg,qB),e(qB,zWe),e(Fg,VWe),e(M,WWe),e(M,Cg),e(Cg,DQ),e(DQ,QWe),e(Cg,HWe),e(Cg,OB),e(OB,UWe),e(Cg,JWe),e(M,YWe),e(M,bs),e(bs,qQ),e(qQ,KWe),e(bs,ZWe),e(bs,OQ),e(OQ,eQe),e(bs,oQe),e(bs,GQ),e(GQ,rQe),e(bs,tQe),e(M,aQe),e(M,Mg),e(Mg,XQ),e(XQ,nQe),e(Mg,sQe),e(Mg,GB),e(GB,lQe),e(Mg,iQe),e(M,dQe),e(M,Eg),e(Eg,zQ),e(zQ,cQe),e(Eg,fQe),e(Eg,XB),e(XB,mQe),e(Eg,gQe),e(M,hQe),e(M,vs),e(vs,VQ),e(VQ,pQe),e(vs,_Qe),e(vs,zB),e(zB,uQe),e(vs,bQe),e(vs,VB),e(VB,vQe),e(vs,TQe),e(M,FQe),e(M,Ts),e(Ts,WQ),e(WQ,CQe),e(Ts,MQe),e(Ts,WB),e(WB,EQe),e(Ts,yQe),e(Ts,QB),e(QB,wQe),e(Ts,AQe),e(fo,LQe),e(fo,QQ),e(QQ,BQe),e(fo,kQe),g(VC,fo,null),e(qo,xQe),e(qo,yg),g(WC,yg,null),e(yg,RQe),e(yg,HQ),e(HQ,SQe),b(d,R0e,u),b(d,Mi,u),e(Mi,wg),e(wg,UQ),g(QC,UQ,null),e(Mi,PQe),e(Mi,JQ),e(JQ,$Qe),b(d,S0e,u),b(d,Oo,u),g(HC,Oo,null),e(Oo,IQe),e(Oo,UC),e(UC,jQe),e(UC,HB),e(HB,NQe),e(UC,DQe),e(Oo,qQe),e(Oo,JC),e(JC,OQe),e(JC,YQ),e(YQ,GQe),e(JC,XQe),e(Oo,zQe),e(Oo,Le),g(YC,Le,null),e(Le,VQe),e(Le,KQ),e(KQ,WQe),e(Le,QQe),e(Le,ka),e(ka,HQe),e(ka,ZQ),e(ZQ,UQe),e(ka,JQe),e(ka,eH),e(eH,YQe),e(ka,KQe),e(ka,oH),e(oH,ZQe),e(ka,eHe),e(Le,oHe),e(Le,se),e(se,Ag),e(Ag,rH),e(rH,rHe),e(Ag,tHe),e(Ag,UB),e(UB,aHe),e(Ag,nHe),e(se,sHe),e(se,Lg),e(Lg,tH),e(tH,lHe),e(Lg,iHe),e(Lg,JB),e(JB,dHe),e(Lg,cHe),e(se,fHe),e(se,Bg),e(Bg,aH),e(aH,mHe),e(Bg,gHe),e(Bg,nH),e(nH,hHe),e(Bg,pHe),e(se,_He),e(se,kg),e(kg,sH),e(sH,uHe),e(kg,bHe),e(kg,YB),e(YB,vHe),e(kg,THe),e(se,FHe),e(se,xg),e(xg,lH),e(lH,CHe),e(xg,MHe),e(xg,KB),e(KB,EHe),e(xg,yHe),e(se,wHe),e(se,Rg),e(Rg,iH),e(iH,AHe),e(Rg,LHe),e(Rg,ZB),e(ZB,BHe),e(Rg,kHe),e(se,xHe),e(se,Sg),e(Sg,dH),e(dH,RHe),e(Sg,SHe),e(Sg,ek),e(ek,PHe),e(Sg,$He),e(se,IHe),e(se,Pg),e(Pg,cH),e(cH,jHe),e(Pg,NHe),e(Pg,ok),e(ok,DHe),e(Pg,qHe),e(se,OHe),e(se,$g),e($g,fH),e(fH,GHe),e($g,XHe),e($g,rk),e(rk,zHe),e($g,VHe),e(se,WHe),e(se,Ig),e(Ig,mH),e(mH,QHe),e(Ig,HHe),e(Ig,tk),e(tk,UHe),e(Ig,JHe),e(se,YHe),e(se,jg),e(jg,gH),e(gH,KHe),e(jg,ZHe),e(jg,ak),e(ak,eUe),e(jg,oUe),e(se,rUe),e(se,Ng),e(Ng,hH),e(hH,tUe),e(Ng,aUe),e(Ng,nk),e(nk,nUe),e(Ng,sUe),e(se,lUe),e(se,Dg),e(Dg,pH),e(pH,iUe),e(Dg,dUe),e(Dg,sk),e(sk,cUe),e(Dg,fUe),e(se,mUe),e(se,qg),e(qg,_H),e(_H,gUe),e(qg,hUe),e(qg,lk),e(lk,pUe),e(qg,_Ue),e(se,uUe),e(se,Og),e(Og,uH),e(uH,bUe),e(Og,vUe),e(Og,ik),e(ik,TUe),e(Og,FUe),e(Le,CUe),g(Gg,Le,null),e(Le,MUe),e(Le,bH),e(bH,EUe),e(Le,yUe),g(KC,Le,null),e(Oo,wUe),e(Oo,Xg),g(ZC,Xg,null),e(Xg,AUe),e(Xg,vH),e(vH,LUe),b(d,P0e,u),b(d,Ei,u),e(Ei,zg),e(zg,TH),g(eM,TH,null),e(Ei,BUe),e(Ei,FH),e(FH,kUe),b(d,$0e,u),b(d,Go,u),g(oM,Go,null),e(Go,xUe),e(Go,rM),e(rM,RUe),e(rM,dk),e(dk,SUe),e(rM,PUe),e(Go,$Ue),e(Go,tM),e(tM,IUe),e(tM,CH),e(CH,jUe),e(tM,NUe),e(Go,DUe),e(Go,Be),g(aM,Be,null),e(Be,qUe),e(Be,MH),e(MH,OUe),e(Be,GUe),e(Be,yi),e(yi,XUe),e(yi,EH),e(EH,zUe),e(yi,VUe),e(yi,yH),e(yH,WUe),e(yi,QUe),e(Be,HUe),e(Be,we),e(we,Vg),e(Vg,wH),e(wH,UUe),e(Vg,JUe),e(Vg,ck),e(ck,YUe),e(Vg,KUe),e(we,ZUe),e(we,Wg),e(Wg,AH),e(AH,eJe),e(Wg,oJe),e(Wg,fk),e(fk,rJe),e(Wg,tJe),e(we,aJe),e(we,Qg),e(Qg,LH),e(LH,nJe),e(Qg,sJe),e(Qg,mk),e(mk,lJe),e(Qg,iJe),e(we,dJe),e(we,Hg),e(Hg,BH),e(BH,cJe),e(Hg,fJe),e(Hg,gk),e(gk,mJe),e(Hg,gJe),e(we,hJe),e(we,Ug),e(Ug,kH),e(kH,pJe),e(Ug,_Je),e(Ug,hk),e(hk,uJe),e(Ug,bJe),e(we,vJe),e(we,Jg),e(Jg,xH),e(xH,TJe),e(Jg,FJe),e(Jg,pk),e(pk,CJe),e(Jg,MJe),e(we,EJe),e(we,Yg),e(Yg,RH),e(RH,yJe),e(Yg,wJe),e(Yg,_k),e(_k,AJe),e(Yg,LJe),e(we,BJe),e(we,Kg),e(Kg,SH),e(SH,kJe),e(Kg,xJe),e(Kg,uk),e(uk,RJe),e(Kg,SJe),e(Be,PJe),g(Zg,Be,null),e(Be,$Je),e(Be,PH),e(PH,IJe),e(Be,jJe),g(nM,Be,null),e(Go,NJe),e(Go,eh),g(sM,eh,null),e(eh,DJe),e(eh,$H),e($H,qJe),b(d,I0e,u),b(d,wi,u),e(wi,oh),e(oh,IH),g(lM,IH,null),e(wi,OJe),e(wi,jH),e(jH,GJe),b(d,j0e,u),b(d,Xo,u),g(iM,Xo,null),e(Xo,XJe),e(Xo,Ai),e(Ai,zJe),e(Ai,NH),e(NH,VJe),e(Ai,WJe),e(Ai,DH),e(DH,QJe),e(Ai,HJe),e(Xo,UJe),e(Xo,dM),e(dM,JJe),e(dM,qH),e(qH,YJe),e(dM,KJe),e(Xo,ZJe),e(Xo,Pr),g(cM,Pr,null),e(Pr,eYe),e(Pr,OH),e(OH,oYe),e(Pr,rYe),e(Pr,Li),e(Li,tYe),e(Li,GH),e(GH,aYe),e(Li,nYe),e(Li,XH),e(XH,sYe),e(Li,lYe),e(Pr,iYe),e(Pr,zH),e(zH,dYe),e(Pr,cYe),g(fM,Pr,null),e(Xo,fYe),e(Xo,ke),g(mM,ke,null),e(ke,mYe),e(ke,VH),e(VH,gYe),e(ke,hYe),e(ke,xa),e(xa,pYe),e(xa,WH),e(WH,_Ye),e(xa,uYe),e(xa,QH),e(QH,bYe),e(xa,vYe),e(xa,HH),e(HH,TYe),e(xa,FYe),e(ke,CYe),e(ke,F),e(F,rh),e(rh,UH),e(UH,MYe),e(rh,EYe),e(rh,bk),e(bk,yYe),e(rh,wYe),e(F,AYe),e(F,th),e(th,JH),e(JH,LYe),e(th,BYe),e(th,vk),e(vk,kYe),e(th,xYe),e(F,RYe),e(F,ah),e(ah,YH),e(YH,SYe),e(ah,PYe),e(ah,Tk),e(Tk,$Ye),e(ah,IYe),e(F,jYe),e(F,nh),e(nh,KH),e(KH,NYe),e(nh,DYe),e(nh,Fk),e(Fk,qYe),e(nh,OYe),e(F,GYe),e(F,sh),e(sh,ZH),e(ZH,XYe),e(sh,zYe),e(sh,Ck),e(Ck,VYe),e(sh,WYe),e(F,QYe),e(F,lh),e(lh,eU),e(eU,HYe),e(lh,UYe),e(lh,Mk),e(Mk,JYe),e(lh,YYe),e(F,KYe),e(F,ih),e(ih,oU),e(oU,ZYe),e(ih,eKe),e(ih,Ek),e(Ek,oKe),e(ih,rKe),e(F,tKe),e(F,dh),e(dh,rU),e(rU,aKe),e(dh,nKe),e(dh,yk),e(yk,sKe),e(dh,lKe),e(F,iKe),e(F,ch),e(ch,tU),e(tU,dKe),e(ch,cKe),e(ch,wk),e(wk,fKe),e(ch,mKe),e(F,gKe),e(F,fh),e(fh,aU),e(aU,hKe),e(fh,pKe),e(fh,Ak),e(Ak,_Ke),e(fh,uKe),e(F,bKe),e(F,mh),e(mh,nU),e(nU,vKe),e(mh,TKe),e(mh,Lk),e(Lk,FKe),e(mh,CKe),e(F,MKe),e(F,gh),e(gh,sU),e(sU,EKe),e(gh,yKe),e(gh,Bk),e(Bk,wKe),e(gh,AKe),e(F,LKe),e(F,hh),e(hh,lU),e(lU,BKe),e(hh,kKe),e(hh,kk),e(kk,xKe),e(hh,RKe),e(F,SKe),e(F,ph),e(ph,iU),e(iU,PKe),e(ph,$Ke),e(ph,dU),e(dU,IKe),e(ph,jKe),e(F,NKe),e(F,_h),e(_h,cU),e(cU,DKe),e(_h,qKe),e(_h,xk),e(xk,OKe),e(_h,GKe),e(F,XKe),e(F,uh),e(uh,fU),e(fU,zKe),e(uh,VKe),e(uh,Rk),e(Rk,WKe),e(uh,QKe),e(F,HKe),e(F,bh),e(bh,mU),e(mU,UKe),e(bh,JKe),e(bh,Sk),e(Sk,YKe),e(bh,KKe),e(F,ZKe),e(F,vh),e(vh,gU),e(gU,eZe),e(vh,oZe),e(vh,Pk),e(Pk,rZe),e(vh,tZe),e(F,aZe),e(F,Th),e(Th,hU),e(hU,nZe),e(Th,sZe),e(Th,$k),e($k,lZe),e(Th,iZe),e(F,dZe),e(F,Fh),e(Fh,pU),e(pU,cZe),e(Fh,fZe),e(Fh,Ik),e(Ik,mZe),e(Fh,gZe),e(F,hZe),e(F,Ch),e(Ch,_U),e(_U,pZe),e(Ch,_Ze),e(Ch,jk),e(jk,uZe),e(Ch,bZe),e(F,vZe),e(F,Mh),e(Mh,uU),e(uU,TZe),e(Mh,FZe),e(Mh,Nk),e(Nk,CZe),e(Mh,MZe),e(F,EZe),e(F,Eh),e(Eh,bU),e(bU,yZe),e(Eh,wZe),e(Eh,Dk),e(Dk,AZe),e(Eh,LZe),e(F,BZe),e(F,yh),e(yh,vU),e(vU,kZe),e(yh,xZe),e(yh,qk),e(qk,RZe),e(yh,SZe),e(F,PZe),e(F,wh),e(wh,TU),e(TU,$Ze),e(wh,IZe),e(wh,Ok),e(Ok,jZe),e(wh,NZe),e(F,DZe),e(F,Fs),e(Fs,FU),e(FU,qZe),e(Fs,OZe),e(Fs,Gk),e(Gk,GZe),e(Fs,XZe),e(Fs,Xk),e(Xk,zZe),e(Fs,VZe),e(F,WZe),e(F,Ah),e(Ah,CU),e(CU,QZe),e(Ah,HZe),e(Ah,zk),e(zk,UZe),e(Ah,JZe),e(F,YZe),e(F,Lh),e(Lh,MU),e(MU,KZe),e(Lh,ZZe),e(Lh,Vk),e(Vk,eeo),e(Lh,oeo),e(F,reo),e(F,Bh),e(Bh,EU),e(EU,teo),e(Bh,aeo),e(Bh,Wk),e(Wk,neo),e(Bh,seo),e(F,leo),e(F,kh),e(kh,yU),e(yU,ieo),e(kh,deo),e(kh,Qk),e(Qk,ceo),e(kh,feo),e(F,meo),e(F,xh),e(xh,wU),e(wU,geo),e(xh,heo),e(xh,Hk),e(Hk,peo),e(xh,_eo),e(F,ueo),e(F,Rh),e(Rh,AU),e(AU,beo),e(Rh,veo),e(Rh,Uk),e(Uk,Teo),e(Rh,Feo),e(F,Ceo),e(F,Sh),e(Sh,LU),e(LU,Meo),e(Sh,Eeo),e(Sh,Jk),e(Jk,yeo),e(Sh,weo),e(F,Aeo),e(F,Ph),e(Ph,BU),e(BU,Leo),e(Ph,Beo),e(Ph,Yk),e(Yk,keo),e(Ph,xeo),e(F,Reo),e(F,$h),e($h,kU),e(kU,Seo),e($h,Peo),e($h,Kk),e(Kk,$eo),e($h,Ieo),e(F,jeo),e(F,Ih),e(Ih,xU),e(xU,Neo),e(Ih,Deo),e(Ih,Zk),e(Zk,qeo),e(Ih,Oeo),e(F,Geo),e(F,jh),e(jh,RU),e(RU,Xeo),e(jh,zeo),e(jh,ex),e(ex,Veo),e(jh,Weo),e(F,Qeo),e(F,Nh),e(Nh,SU),e(SU,Heo),e(Nh,Ueo),e(Nh,ox),e(ox,Jeo),e(Nh,Yeo),e(F,Keo),e(F,Dh),e(Dh,PU),e(PU,Zeo),e(Dh,eoo),e(Dh,rx),e(rx,ooo),e(Dh,roo),e(F,too),e(F,qh),e(qh,$U),e($U,aoo),e(qh,noo),e(qh,tx),e(tx,soo),e(qh,loo),e(F,ioo),e(F,Oh),e(Oh,IU),e(IU,doo),e(Oh,coo),e(Oh,ax),e(ax,foo),e(Oh,moo),e(F,goo),e(F,Gh),e(Gh,jU),e(jU,hoo),e(Gh,poo),e(Gh,nx),e(nx,_oo),e(Gh,uoo),e(F,boo),e(F,Xh),e(Xh,NU),e(NU,voo),e(Xh,Too),e(Xh,sx),e(sx,Foo),e(Xh,Coo),e(F,Moo),e(F,zh),e(zh,DU),e(DU,Eoo),e(zh,yoo),e(zh,lx),e(lx,woo),e(zh,Aoo),e(F,Loo),e(F,Vh),e(Vh,qU),e(qU,Boo),e(Vh,koo),e(Vh,ix),e(ix,xoo),e(Vh,Roo),e(F,Soo),e(F,Wh),e(Wh,OU),e(OU,Poo),e(Wh,$oo),e(Wh,dx),e(dx,Ioo),e(Wh,joo),e(F,Noo),e(F,Qh),e(Qh,GU),e(GU,Doo),e(Qh,qoo),e(Qh,cx),e(cx,Ooo),e(Qh,Goo),e(F,Xoo),e(F,Hh),e(Hh,XU),e(XU,zoo),e(Hh,Voo),e(Hh,fx),e(fx,Woo),e(Hh,Qoo),e(F,Hoo),e(F,Uh),e(Uh,zU),e(zU,Uoo),e(Uh,Joo),e(Uh,mx),e(mx,Yoo),e(Uh,Koo),e(F,Zoo),e(F,Jh),e(Jh,VU),e(VU,ero),e(Jh,oro),e(Jh,gx),e(gx,rro),e(Jh,tro),e(F,aro),e(F,Yh),e(Yh,WU),e(WU,nro),e(Yh,sro),e(Yh,hx),e(hx,lro),e(Yh,iro),e(F,dro),e(F,Kh),e(Kh,QU),e(QU,cro),e(Kh,fro),e(Kh,px),e(px,mro),e(Kh,gro),e(F,hro),e(F,Zh),e(Zh,HU),e(HU,pro),e(Zh,_ro),e(Zh,_x),e(_x,uro),e(Zh,bro),e(F,vro),e(F,ep),e(ep,UU),e(UU,Tro),e(ep,Fro),e(ep,ux),e(ux,Cro),e(ep,Mro),e(F,Ero),e(F,op),e(op,JU),e(JU,yro),e(op,wro),e(op,bx),e(bx,Aro),e(op,Lro),e(F,Bro),e(F,rp),e(rp,YU),e(YU,kro),e(rp,xro),e(rp,vx),e(vx,Rro),e(rp,Sro),e(F,Pro),e(F,tp),e(tp,KU),e(KU,$ro),e(tp,Iro),e(tp,Tx),e(Tx,jro),e(tp,Nro),e(F,Dro),e(F,ap),e(ap,ZU),e(ZU,qro),e(ap,Oro),e(ap,Fx),e(Fx,Gro),e(ap,Xro),e(F,zro),e(F,np),e(np,eJ),e(eJ,Vro),e(np,Wro),e(np,Cx),e(Cx,Qro),e(np,Hro),e(F,Uro),e(F,sp),e(sp,oJ),e(oJ,Jro),e(sp,Yro),e(sp,Mx),e(Mx,Kro),e(sp,Zro),e(F,eto),e(F,lp),e(lp,rJ),e(rJ,oto),e(lp,rto),e(lp,Ex),e(Ex,tto),e(lp,ato),e(F,nto),e(F,ip),e(ip,tJ),e(tJ,sto),e(ip,lto),e(ip,yx),e(yx,ito),e(ip,dto),e(F,cto),e(F,dp),e(dp,aJ),e(aJ,fto),e(dp,mto),e(dp,wx),e(wx,gto),e(dp,hto),e(F,pto),e(F,cp),e(cp,nJ),e(nJ,_to),e(cp,uto),e(cp,Ax),e(Ax,bto),e(cp,vto),e(F,Tto),e(F,fp),e(fp,sJ),e(sJ,Fto),e(fp,Cto),e(fp,Lx),e(Lx,Mto),e(fp,Eto),e(F,yto),e(F,mp),e(mp,lJ),e(lJ,wto),e(mp,Ato),e(mp,Bx),e(Bx,Lto),e(mp,Bto),e(F,kto),e(F,gp),e(gp,iJ),e(iJ,xto),e(gp,Rto),e(gp,kx),e(kx,Sto),e(gp,Pto),e(F,$to),e(F,hp),e(hp,dJ),e(dJ,Ito),e(hp,jto),e(hp,xx),e(xx,Nto),e(hp,Dto),e(F,qto),e(F,pp),e(pp,cJ),e(cJ,Oto),e(pp,Gto),e(pp,Rx),e(Rx,Xto),e(pp,zto),e(F,Vto),e(F,_p),e(_p,fJ),e(fJ,Wto),e(_p,Qto),e(_p,Sx),e(Sx,Hto),e(_p,Uto),e(F,Jto),e(F,up),e(up,mJ),e(mJ,Yto),e(up,Kto),e(up,Px),e(Px,Zto),e(up,eao),e(F,oao),e(F,bp),e(bp,gJ),e(gJ,rao),e(bp,tao),e(bp,$x),e($x,aao),e(bp,nao),e(F,sao),e(F,vp),e(vp,hJ),e(hJ,lao),e(vp,iao),e(vp,Ix),e(Ix,dao),e(vp,cao),e(F,fao),e(F,Tp),e(Tp,pJ),e(pJ,mao),e(Tp,gao),e(Tp,jx),e(jx,hao),e(Tp,pao),e(F,_ao),e(F,Fp),e(Fp,_J),e(_J,uao),e(Fp,bao),e(Fp,Nx),e(Nx,vao),e(Fp,Tao),e(F,Fao),e(F,Cp),e(Cp,uJ),e(uJ,Cao),e(Cp,Mao),e(Cp,Dx),e(Dx,Eao),e(Cp,yao),e(F,wao),e(F,Mp),e(Mp,bJ),e(bJ,Aao),e(Mp,Lao),e(Mp,qx),e(qx,Bao),e(Mp,kao),e(F,xao),e(F,Ep),e(Ep,vJ),e(vJ,Rao),e(Ep,Sao),e(Ep,TJ),e(TJ,Pao),e(Ep,$ao),e(F,Iao),e(F,yp),e(yp,FJ),e(FJ,jao),e(yp,Nao),e(yp,Ox),e(Ox,Dao),e(yp,qao),e(F,Oao),e(F,wp),e(wp,CJ),e(CJ,Gao),e(wp,Xao),e(wp,Gx),e(Gx,zao),e(wp,Vao),e(F,Wao),e(F,Ap),e(Ap,MJ),e(MJ,Qao),e(Ap,Hao),e(Ap,Xx),e(Xx,Uao),e(Ap,Jao),e(F,Yao),e(F,Lp),e(Lp,EJ),e(EJ,Kao),e(Lp,Zao),e(Lp,yJ),e(yJ,eno),e(Lp,ono),e(F,rno),e(F,Bp),e(Bp,wJ),e(wJ,tno),e(Bp,ano),e(Bp,zx),e(zx,nno),e(Bp,sno),e(F,lno),e(F,kp),e(kp,AJ),e(AJ,ino),e(kp,dno),e(kp,Vx),e(Vx,cno),e(kp,fno),e(ke,mno),e(ke,xp),e(xp,gno),e(xp,LJ),e(LJ,hno),e(xp,pno),e(xp,BJ),e(BJ,_no),e(ke,uno),e(ke,kJ),e(kJ,bno),e(ke,vno),g(gM,ke,null),b(d,N0e,u),b(d,Bi,u),e(Bi,Rp),e(Rp,xJ),g(hM,xJ,null),e(Bi,Tno),e(Bi,RJ),e(RJ,Fno),b(d,D0e,u),b(d,zo,u),g(pM,zo,null),e(zo,Cno),e(zo,ki),e(ki,Mno),e(ki,SJ),e(SJ,Eno),e(ki,yno),e(ki,PJ),e(PJ,wno),e(ki,Ano),e(zo,Lno),e(zo,_M),e(_M,Bno),e(_M,$J),e($J,kno),e(_M,xno),e(zo,Rno),e(zo,$r),g(uM,$r,null),e($r,Sno),e($r,IJ),e(IJ,Pno),e($r,$no),e($r,xi),e(xi,Ino),e(xi,jJ),e(jJ,jno),e(xi,Nno),e(xi,NJ),e(NJ,Dno),e(xi,qno),e($r,Ono),e($r,DJ),e(DJ,Gno),e($r,Xno),g(bM,$r,null),e(zo,zno),e(zo,xe),g(vM,xe,null),e(xe,Vno),e(xe,qJ),e(qJ,Wno),e(xe,Qno),e(xe,Ra),e(Ra,Hno),e(Ra,OJ),e(OJ,Uno),e(Ra,Jno),e(Ra,GJ),e(GJ,Yno),e(Ra,Kno),e(Ra,XJ),e(XJ,Zno),e(Ra,eso),e(xe,oso),e(xe,x),e(x,Sp),e(Sp,zJ),e(zJ,rso),e(Sp,tso),e(Sp,Wx),e(Wx,aso),e(Sp,nso),e(x,sso),e(x,Pp),e(Pp,VJ),e(VJ,lso),e(Pp,iso),e(Pp,Qx),e(Qx,dso),e(Pp,cso),e(x,fso),e(x,$p),e($p,WJ),e(WJ,mso),e($p,gso),e($p,Hx),e(Hx,hso),e($p,pso),e(x,_so),e(x,Ip),e(Ip,QJ),e(QJ,uso),e(Ip,bso),e(Ip,Ux),e(Ux,vso),e(Ip,Tso),e(x,Fso),e(x,jp),e(jp,HJ),e(HJ,Cso),e(jp,Mso),e(jp,Jx),e(Jx,Eso),e(jp,yso),e(x,wso),e(x,Np),e(Np,UJ),e(UJ,Aso),e(Np,Lso),e(Np,Yx),e(Yx,Bso),e(Np,kso),e(x,xso),e(x,Dp),e(Dp,JJ),e(JJ,Rso),e(Dp,Sso),e(Dp,Kx),e(Kx,Pso),e(Dp,$so),e(x,Iso),e(x,qp),e(qp,YJ),e(YJ,jso),e(qp,Nso),e(qp,Zx),e(Zx,Dso),e(qp,qso),e(x,Oso),e(x,Op),e(Op,KJ),e(KJ,Gso),e(Op,Xso),e(Op,eR),e(eR,zso),e(Op,Vso),e(x,Wso),e(x,Gp),e(Gp,ZJ),e(ZJ,Qso),e(Gp,Hso),e(Gp,oR),e(oR,Uso),e(Gp,Jso),e(x,Yso),e(x,Xp),e(Xp,eY),e(eY,Kso),e(Xp,Zso),e(Xp,rR),e(rR,elo),e(Xp,olo),e(x,rlo),e(x,zp),e(zp,oY),e(oY,tlo),e(zp,alo),e(zp,tR),e(tR,nlo),e(zp,slo),e(x,llo),e(x,Vp),e(Vp,rY),e(rY,ilo),e(Vp,dlo),e(Vp,aR),e(aR,clo),e(Vp,flo),e(x,mlo),e(x,Wp),e(Wp,tY),e(tY,glo),e(Wp,hlo),e(Wp,nR),e(nR,plo),e(Wp,_lo),e(x,ulo),e(x,Qp),e(Qp,aY),e(aY,blo),e(Qp,vlo),e(Qp,sR),e(sR,Tlo),e(Qp,Flo),e(x,Clo),e(x,Hp),e(Hp,nY),e(nY,Mlo),e(Hp,Elo),e(Hp,lR),e(lR,ylo),e(Hp,wlo),e(x,Alo),e(x,Up),e(Up,sY),e(sY,Llo),e(Up,Blo),e(Up,iR),e(iR,klo),e(Up,xlo),e(x,Rlo),e(x,Jp),e(Jp,lY),e(lY,Slo),e(Jp,Plo),e(Jp,dR),e(dR,$lo),e(Jp,Ilo),e(x,jlo),e(x,Yp),e(Yp,iY),e(iY,Nlo),e(Yp,Dlo),e(Yp,cR),e(cR,qlo),e(Yp,Olo),e(x,Glo),e(x,Kp),e(Kp,dY),e(dY,Xlo),e(Kp,zlo),e(Kp,fR),e(fR,Vlo),e(Kp,Wlo),e(x,Qlo),e(x,Zp),e(Zp,cY),e(cY,Hlo),e(Zp,Ulo),e(Zp,mR),e(mR,Jlo),e(Zp,Ylo),e(x,Klo),e(x,e_),e(e_,fY),e(fY,Zlo),e(e_,eio),e(e_,gR),e(gR,oio),e(e_,rio),e(x,tio),e(x,o_),e(o_,mY),e(mY,aio),e(o_,nio),e(o_,hR),e(hR,sio),e(o_,lio),e(x,iio),e(x,r_),e(r_,gY),e(gY,dio),e(r_,cio),e(r_,pR),e(pR,fio),e(r_,mio),e(x,gio),e(x,t_),e(t_,hY),e(hY,hio),e(t_,pio),e(t_,_R),e(_R,_io),e(t_,uio),e(x,bio),e(x,a_),e(a_,pY),e(pY,vio),e(a_,Tio),e(a_,uR),e(uR,Fio),e(a_,Cio),e(x,Mio),e(x,n_),e(n_,_Y),e(_Y,Eio),e(n_,yio),e(n_,bR),e(bR,wio),e(n_,Aio),e(x,Lio),e(x,s_),e(s_,uY),e(uY,Bio),e(s_,kio),e(s_,vR),e(vR,xio),e(s_,Rio),e(x,Sio),e(x,l_),e(l_,bY),e(bY,Pio),e(l_,$io),e(l_,TR),e(TR,Iio),e(l_,jio),e(x,Nio),e(x,i_),e(i_,vY),e(vY,Dio),e(i_,qio),e(i_,FR),e(FR,Oio),e(i_,Gio),e(x,Xio),e(x,d_),e(d_,TY),e(TY,zio),e(d_,Vio),e(d_,CR),e(CR,Wio),e(d_,Qio),e(x,Hio),e(x,c_),e(c_,FY),e(FY,Uio),e(c_,Jio),e(c_,MR),e(MR,Yio),e(c_,Kio),e(x,Zio),e(x,f_),e(f_,CY),e(CY,edo),e(f_,odo),e(f_,ER),e(ER,rdo),e(f_,tdo),e(x,ado),e(x,m_),e(m_,MY),e(MY,ndo),e(m_,sdo),e(m_,yR),e(yR,ldo),e(m_,ido),e(x,ddo),e(x,g_),e(g_,EY),e(EY,cdo),e(g_,fdo),e(g_,wR),e(wR,mdo),e(g_,gdo),e(x,hdo),e(x,h_),e(h_,yY),e(yY,pdo),e(h_,_do),e(h_,AR),e(AR,udo),e(h_,bdo),e(x,vdo),e(x,p_),e(p_,wY),e(wY,Tdo),e(p_,Fdo),e(p_,AY),e(AY,Cdo),e(p_,Mdo),e(x,Edo),e(x,__),e(__,LY),e(LY,ydo),e(__,wdo),e(__,LR),e(LR,Ado),e(__,Ldo),e(xe,Bdo),e(xe,u_),e(u_,kdo),e(u_,BY),e(BY,xdo),e(u_,Rdo),e(u_,kY),e(kY,Sdo),e(xe,Pdo),e(xe,xY),e(xY,$do),e(xe,Ido),g(TM,xe,null),b(d,q0e,u),b(d,Ri,u),e(Ri,b_),e(b_,RY),g(FM,RY,null),e(Ri,jdo),e(Ri,SY),e(SY,Ndo),b(d,O0e,u),b(d,Vo,u),g(CM,Vo,null),e(Vo,Ddo),e(Vo,Si),e(Si,qdo),e(Si,PY),e(PY,Odo),e(Si,Gdo),e(Si,$Y),e($Y,Xdo),e(Si,zdo),e(Vo,Vdo),e(Vo,MM),e(MM,Wdo),e(MM,IY),e(IY,Qdo),e(MM,Hdo),e(Vo,Udo),e(Vo,Ir),g(EM,Ir,null),e(Ir,Jdo),e(Ir,jY),e(jY,Ydo),e(Ir,Kdo),e(Ir,Pi),e(Pi,Zdo),e(Pi,NY),e(NY,eco),e(Pi,oco),e(Pi,DY),e(DY,rco),e(Pi,tco),e(Ir,aco),e(Ir,qY),e(qY,nco),e(Ir,sco),g(yM,Ir,null),e(Vo,lco),e(Vo,Re),g(wM,Re,null),e(Re,ico),e(Re,OY),e(OY,dco),e(Re,cco),e(Re,Sa),e(Sa,fco),e(Sa,GY),e(GY,mco),e(Sa,gco),e(Sa,XY),e(XY,hco),e(Sa,pco),e(Sa,zY),e(zY,_co),e(Sa,uco),e(Re,bco),e(Re,$),e($,v_),e(v_,VY),e(VY,vco),e(v_,Tco),e(v_,BR),e(BR,Fco),e(v_,Cco),e($,Mco),e($,T_),e(T_,WY),e(WY,Eco),e(T_,yco),e(T_,kR),e(kR,wco),e(T_,Aco),e($,Lco),e($,F_),e(F_,QY),e(QY,Bco),e(F_,kco),e(F_,xR),e(xR,xco),e(F_,Rco),e($,Sco),e($,C_),e(C_,HY),e(HY,Pco),e(C_,$co),e(C_,RR),e(RR,Ico),e(C_,jco),e($,Nco),e($,M_),e(M_,UY),e(UY,Dco),e(M_,qco),e(M_,SR),e(SR,Oco),e(M_,Gco),e($,Xco),e($,E_),e(E_,JY),e(JY,zco),e(E_,Vco),e(E_,PR),e(PR,Wco),e(E_,Qco),e($,Hco),e($,y_),e(y_,YY),e(YY,Uco),e(y_,Jco),e(y_,$R),e($R,Yco),e(y_,Kco),e($,Zco),e($,w_),e(w_,KY),e(KY,efo),e(w_,ofo),e(w_,IR),e(IR,rfo),e(w_,tfo),e($,afo),e($,A_),e(A_,ZY),e(ZY,nfo),e(A_,sfo),e(A_,jR),e(jR,lfo),e(A_,ifo),e($,dfo),e($,L_),e(L_,eK),e(eK,cfo),e(L_,ffo),e(L_,NR),e(NR,mfo),e(L_,gfo),e($,hfo),e($,B_),e(B_,oK),e(oK,pfo),e(B_,_fo),e(B_,DR),e(DR,ufo),e(B_,bfo),e($,vfo),e($,k_),e(k_,rK),e(rK,Tfo),e(k_,Ffo),e(k_,qR),e(qR,Cfo),e(k_,Mfo),e($,Efo),e($,x_),e(x_,tK),e(tK,yfo),e(x_,wfo),e(x_,OR),e(OR,Afo),e(x_,Lfo),e($,Bfo),e($,R_),e(R_,aK),e(aK,kfo),e(R_,xfo),e(R_,GR),e(GR,Rfo),e(R_,Sfo),e($,Pfo),e($,S_),e(S_,nK),e(nK,$fo),e(S_,Ifo),e(S_,XR),e(XR,jfo),e(S_,Nfo),e($,Dfo),e($,P_),e(P_,sK),e(sK,qfo),e(P_,Ofo),e(P_,zR),e(zR,Gfo),e(P_,Xfo),e($,zfo),e($,$_),e($_,lK),e(lK,Vfo),e($_,Wfo),e($_,VR),e(VR,Qfo),e($_,Hfo),e($,Ufo),e($,I_),e(I_,iK),e(iK,Jfo),e(I_,Yfo),e(I_,WR),e(WR,Kfo),e(I_,Zfo),e($,emo),e($,j_),e(j_,dK),e(dK,omo),e(j_,rmo),e(j_,QR),e(QR,tmo),e(j_,amo),e($,nmo),e($,N_),e(N_,cK),e(cK,smo),e(N_,lmo),e(N_,HR),e(HR,imo),e(N_,dmo),e($,cmo),e($,D_),e(D_,fK),e(fK,fmo),e(D_,mmo),e(D_,UR),e(UR,gmo),e(D_,hmo),e($,pmo),e($,q_),e(q_,mK),e(mK,_mo),e(q_,umo),e(q_,JR),e(JR,bmo),e(q_,vmo),e($,Tmo),e($,O_),e(O_,gK),e(gK,Fmo),e(O_,Cmo),e(O_,YR),e(YR,Mmo),e(O_,Emo),e($,ymo),e($,G_),e(G_,hK),e(hK,wmo),e(G_,Amo),e(G_,KR),e(KR,Lmo),e(G_,Bmo),e($,kmo),e($,X_),e(X_,pK),e(pK,xmo),e(X_,Rmo),e(X_,ZR),e(ZR,Smo),e(X_,Pmo),e($,$mo),e($,z_),e(z_,_K),e(_K,Imo),e(z_,jmo),e(z_,eS),e(eS,Nmo),e(z_,Dmo),e($,qmo),e($,V_),e(V_,uK),e(uK,Omo),e(V_,Gmo),e(V_,oS),e(oS,Xmo),e(V_,zmo),e($,Vmo),e($,W_),e(W_,bK),e(bK,Wmo),e(W_,Qmo),e(W_,rS),e(rS,Hmo),e(W_,Umo),e($,Jmo),e($,Q_),e(Q_,vK),e(vK,Ymo),e(Q_,Kmo),e(Q_,TK),e(TK,Zmo),e(Q_,ego),e($,ogo),e($,H_),e(H_,FK),e(FK,rgo),e(H_,tgo),e(H_,tS),e(tS,ago),e(H_,ngo),e($,sgo),e($,U_),e(U_,CK),e(CK,lgo),e(U_,igo),e(U_,aS),e(aS,dgo),e(U_,cgo),e($,fgo),e($,J_),e(J_,MK),e(MK,mgo),e(J_,ggo),e(J_,nS),e(nS,hgo),e(J_,pgo),e($,_go),e($,Y_),e(Y_,EK),e(EK,ugo),e(Y_,bgo),e(Y_,yK),e(yK,vgo),e(Y_,Tgo),e($,Fgo),e($,K_),e(K_,wK),e(wK,Cgo),e(K_,Mgo),e(K_,sS),e(sS,Ego),e(K_,ygo),e(Re,wgo),e(Re,Z_),e(Z_,Ago),e(Z_,AK),e(AK,Lgo),e(Z_,Bgo),e(Z_,LK),e(LK,kgo),e(Re,xgo),e(Re,BK),e(BK,Rgo),e(Re,Sgo),g(AM,Re,null),b(d,G0e,u),b(d,$i,u),e($i,eu),e(eu,kK),g(LM,kK,null),e($i,Pgo),e($i,xK),e(xK,$go),b(d,X0e,u),b(d,Wo,u),g(BM,Wo,null),e(Wo,Igo),e(Wo,Ii),e(Ii,jgo),e(Ii,RK),e(RK,Ngo),e(Ii,Dgo),e(Ii,SK),e(SK,qgo),e(Ii,Ogo),e(Wo,Ggo),e(Wo,kM),e(kM,Xgo),e(kM,PK),e(PK,zgo),e(kM,Vgo),e(Wo,Wgo),e(Wo,jr),g(xM,jr,null),e(jr,Qgo),e(jr,$K),e($K,Hgo),e(jr,Ugo),e(jr,ji),e(ji,Jgo),e(ji,IK),e(IK,Ygo),e(ji,Kgo),e(ji,jK),e(jK,Zgo),e(ji,eho),e(jr,oho),e(jr,NK),e(NK,rho),e(jr,tho),g(RM,jr,null),e(Wo,aho),e(Wo,Se),g(SM,Se,null),e(Se,nho),e(Se,DK),e(DK,sho),e(Se,lho),e(Se,Pa),e(Pa,iho),e(Pa,qK),e(qK,dho),e(Pa,cho),e(Pa,OK),e(OK,fho),e(Pa,mho),e(Pa,GK),e(GK,gho),e(Pa,hho),e(Se,pho),e(Se,I),e(I,ou),e(ou,XK),e(XK,_ho),e(ou,uho),e(ou,lS),e(lS,bho),e(ou,vho),e(I,Tho),e(I,ru),e(ru,zK),e(zK,Fho),e(ru,Cho),e(ru,iS),e(iS,Mho),e(ru,Eho),e(I,yho),e(I,tu),e(tu,VK),e(VK,who),e(tu,Aho),e(tu,dS),e(dS,Lho),e(tu,Bho),e(I,kho),e(I,au),e(au,WK),e(WK,xho),e(au,Rho),e(au,cS),e(cS,Sho),e(au,Pho),e(I,$ho),e(I,nu),e(nu,QK),e(QK,Iho),e(nu,jho),e(nu,fS),e(fS,Nho),e(nu,Dho),e(I,qho),e(I,su),e(su,HK),e(HK,Oho),e(su,Gho),e(su,mS),e(mS,Xho),e(su,zho),e(I,Vho),e(I,lu),e(lu,UK),e(UK,Who),e(lu,Qho),e(lu,gS),e(gS,Hho),e(lu,Uho),e(I,Jho),e(I,iu),e(iu,JK),e(JK,Yho),e(iu,Kho),e(iu,hS),e(hS,Zho),e(iu,epo),e(I,opo),e(I,du),e(du,YK),e(YK,rpo),e(du,tpo),e(du,pS),e(pS,apo),e(du,npo),e(I,spo),e(I,cu),e(cu,KK),e(KK,lpo),e(cu,ipo),e(cu,_S),e(_S,dpo),e(cu,cpo),e(I,fpo),e(I,fu),e(fu,ZK),e(ZK,mpo),e(fu,gpo),e(fu,uS),e(uS,hpo),e(fu,ppo),e(I,_po),e(I,mu),e(mu,eZ),e(eZ,upo),e(mu,bpo),e(mu,bS),e(bS,vpo),e(mu,Tpo),e(I,Fpo),e(I,gu),e(gu,oZ),e(oZ,Cpo),e(gu,Mpo),e(gu,vS),e(vS,Epo),e(gu,ypo),e(I,wpo),e(I,hu),e(hu,rZ),e(rZ,Apo),e(hu,Lpo),e(hu,TS),e(TS,Bpo),e(hu,kpo),e(I,xpo),e(I,pu),e(pu,tZ),e(tZ,Rpo),e(pu,Spo),e(pu,FS),e(FS,Ppo),e(pu,$po),e(I,Ipo),e(I,_u),e(_u,aZ),e(aZ,jpo),e(_u,Npo),e(_u,CS),e(CS,Dpo),e(_u,qpo),e(I,Opo),e(I,uu),e(uu,nZ),e(nZ,Gpo),e(uu,Xpo),e(uu,MS),e(MS,zpo),e(uu,Vpo),e(I,Wpo),e(I,bu),e(bu,sZ),e(sZ,Qpo),e(bu,Hpo),e(bu,ES),e(ES,Upo),e(bu,Jpo),e(I,Ypo),e(I,vu),e(vu,lZ),e(lZ,Kpo),e(vu,Zpo),e(vu,yS),e(yS,e_o),e(vu,o_o),e(I,r_o),e(I,Tu),e(Tu,iZ),e(iZ,t_o),e(Tu,a_o),e(Tu,wS),e(wS,n_o),e(Tu,s_o),e(I,l_o),e(I,Fu),e(Fu,dZ),e(dZ,i_o),e(Fu,d_o),e(Fu,AS),e(AS,c_o),e(Fu,f_o),e(I,m_o),e(I,Cu),e(Cu,cZ),e(cZ,g_o),e(Cu,h_o),e(Cu,LS),e(LS,p_o),e(Cu,__o),e(I,u_o),e(I,Mu),e(Mu,fZ),e(fZ,b_o),e(Mu,v_o),e(Mu,BS),e(BS,T_o),e(Mu,F_o),e(I,C_o),e(I,Eu),e(Eu,mZ),e(mZ,M_o),e(Eu,E_o),e(Eu,kS),e(kS,y_o),e(Eu,w_o),e(I,A_o),e(I,yu),e(yu,gZ),e(gZ,L_o),e(yu,B_o),e(yu,xS),e(xS,k_o),e(yu,x_o),e(I,R_o),e(I,wu),e(wu,hZ),e(hZ,S_o),e(wu,P_o),e(wu,RS),e(RS,$_o),e(wu,I_o),e(I,j_o),e(I,Au),e(Au,pZ),e(pZ,N_o),e(Au,D_o),e(Au,SS),e(SS,q_o),e(Au,O_o),e(I,G_o),e(I,Lu),e(Lu,_Z),e(_Z,X_o),e(Lu,z_o),e(Lu,PS),e(PS,V_o),e(Lu,W_o),e(I,Q_o),e(I,Bu),e(Bu,uZ),e(uZ,H_o),e(Bu,U_o),e(Bu,$S),e($S,J_o),e(Bu,Y_o),e(I,K_o),e(I,ku),e(ku,bZ),e(bZ,Z_o),e(ku,euo),e(ku,vZ),e(vZ,ouo),e(ku,ruo),e(I,tuo),e(I,xu),e(xu,TZ),e(TZ,auo),e(xu,nuo),e(xu,IS),e(IS,suo),e(xu,luo),e(I,iuo),e(I,Ru),e(Ru,FZ),e(FZ,duo),e(Ru,cuo),e(Ru,jS),e(jS,fuo),e(Ru,muo),e(I,guo),e(I,Su),e(Su,CZ),e(CZ,huo),e(Su,puo),e(Su,MZ),e(MZ,_uo),e(Su,uuo),e(I,buo),e(I,Pu),e(Pu,EZ),e(EZ,vuo),e(Pu,Tuo),e(Pu,NS),e(NS,Fuo),e(Pu,Cuo),e(Se,Muo),e(Se,$u),e($u,Euo),e($u,yZ),e(yZ,yuo),e($u,wuo),e($u,wZ),e(wZ,Auo),e(Se,Luo),e(Se,AZ),e(AZ,Buo),e(Se,kuo),g(PM,Se,null),b(d,z0e,u),b(d,Ni,u),e(Ni,Iu),e(Iu,LZ),g($M,LZ,null),e(Ni,xuo),e(Ni,BZ),e(BZ,Ruo),b(d,V0e,u),b(d,Qo,u),g(IM,Qo,null),e(Qo,Suo),e(Qo,Di),e(Di,Puo),e(Di,kZ),e(kZ,$uo),e(Di,Iuo),e(Di,xZ),e(xZ,juo),e(Di,Nuo),e(Qo,Duo),e(Qo,jM),e(jM,quo),e(jM,RZ),e(RZ,Ouo),e(jM,Guo),e(Qo,Xuo),e(Qo,Nr),g(NM,Nr,null),e(Nr,zuo),e(Nr,SZ),e(SZ,Vuo),e(Nr,Wuo),e(Nr,qi),e(qi,Quo),e(qi,PZ),e(PZ,Huo),e(qi,Uuo),e(qi,$Z),e($Z,Juo),e(qi,Yuo),e(Nr,Kuo),e(Nr,IZ),e(IZ,Zuo),e(Nr,e1o),g(DM,Nr,null),e(Qo,o1o),e(Qo,Pe),g(qM,Pe,null),e(Pe,r1o),e(Pe,jZ),e(jZ,t1o),e(Pe,a1o),e(Pe,$a),e($a,n1o),e($a,NZ),e(NZ,s1o),e($a,l1o),e($a,DZ),e(DZ,i1o),e($a,d1o),e($a,qZ),e(qZ,c1o),e($a,f1o),e(Pe,m1o),e(Pe,ae),e(ae,ju),e(ju,OZ),e(OZ,g1o),e(ju,h1o),e(ju,DS),e(DS,p1o),e(ju,_1o),e(ae,u1o),e(ae,Nu),e(Nu,GZ),e(GZ,b1o),e(Nu,v1o),e(Nu,qS),e(qS,T1o),e(Nu,F1o),e(ae,C1o),e(ae,Du),e(Du,XZ),e(XZ,M1o),e(Du,E1o),e(Du,OS),e(OS,y1o),e(Du,w1o),e(ae,A1o),e(ae,qu),e(qu,zZ),e(zZ,L1o),e(qu,B1o),e(qu,GS),e(GS,k1o),e(qu,x1o),e(ae,R1o),e(ae,Ou),e(Ou,VZ),e(VZ,S1o),e(Ou,P1o),e(Ou,XS),e(XS,$1o),e(Ou,I1o),e(ae,j1o),e(ae,Gu),e(Gu,WZ),e(WZ,N1o),e(Gu,D1o),e(Gu,zS),e(zS,q1o),e(Gu,O1o),e(ae,G1o),e(ae,Xu),e(Xu,QZ),e(QZ,X1o),e(Xu,z1o),e(Xu,VS),e(VS,V1o),e(Xu,W1o),e(ae,Q1o),e(ae,zu),e(zu,HZ),e(HZ,H1o),e(zu,U1o),e(zu,WS),e(WS,J1o),e(zu,Y1o),e(ae,K1o),e(ae,Vu),e(Vu,UZ),e(UZ,Z1o),e(Vu,e4o),e(Vu,QS),e(QS,o4o),e(Vu,r4o),e(ae,t4o),e(ae,Wu),e(Wu,JZ),e(JZ,a4o),e(Wu,n4o),e(Wu,HS),e(HS,s4o),e(Wu,l4o),e(ae,i4o),e(ae,Qu),e(Qu,YZ),e(YZ,d4o),e(Qu,c4o),e(Qu,US),e(US,f4o),e(Qu,m4o),e(ae,g4o),e(ae,Hu),e(Hu,KZ),e(KZ,h4o),e(Hu,p4o),e(Hu,JS),e(JS,_4o),e(Hu,u4o),e(ae,b4o),e(ae,Uu),e(Uu,ZZ),e(ZZ,v4o),e(Uu,T4o),e(Uu,YS),e(YS,F4o),e(Uu,C4o),e(ae,M4o),e(ae,Ju),e(Ju,eee),e(eee,E4o),e(Ju,y4o),e(Ju,KS),e(KS,w4o),e(Ju,A4o),e(ae,L4o),e(ae,Yu),e(Yu,oee),e(oee,B4o),e(Yu,k4o),e(Yu,ZS),e(ZS,x4o),e(Yu,R4o),e(ae,S4o),e(ae,Ku),e(Ku,ree),e(ree,P4o),e(Ku,$4o),e(Ku,eP),e(eP,I4o),e(Ku,j4o),e(Pe,N4o),e(Pe,Zu),e(Zu,D4o),e(Zu,tee),e(tee,q4o),e(Zu,O4o),e(Zu,aee),e(aee,G4o),e(Pe,X4o),e(Pe,nee),e(nee,z4o),e(Pe,V4o),g(OM,Pe,null),b(d,W0e,u),b(d,Oi,u),e(Oi,e1),e(e1,see),g(GM,see,null),e(Oi,W4o),e(Oi,lee),e(lee,Q4o),b(d,Q0e,u),b(d,Ho,u),g(XM,Ho,null),e(Ho,H4o),e(Ho,Gi),e(Gi,U4o),e(Gi,iee),e(iee,J4o),e(Gi,Y4o),e(Gi,dee),e(dee,K4o),e(Gi,Z4o),e(Ho,ebo),e(Ho,zM),e(zM,obo),e(zM,cee),e(cee,rbo),e(zM,tbo),e(Ho,abo),e(Ho,Dr),g(VM,Dr,null),e(Dr,nbo),e(Dr,fee),e(fee,sbo),e(Dr,lbo),e(Dr,Xi),e(Xi,ibo),e(Xi,mee),e(mee,dbo),e(Xi,cbo),e(Xi,gee),e(gee,fbo),e(Xi,mbo),e(Dr,gbo),e(Dr,hee),e(hee,hbo),e(Dr,pbo),g(WM,Dr,null),e(Ho,_bo),e(Ho,$e),g(QM,$e,null),e($e,ubo),e($e,pee),e(pee,bbo),e($e,vbo),e($e,Ia),e(Ia,Tbo),e(Ia,_ee),e(_ee,Fbo),e(Ia,Cbo),e(Ia,uee),e(uee,Mbo),e(Ia,Ebo),e(Ia,bee),e(bee,ybo),e(Ia,wbo),e($e,Abo),e($e,A),e(A,o1),e(o1,vee),e(vee,Lbo),e(o1,Bbo),e(o1,oP),e(oP,kbo),e(o1,xbo),e(A,Rbo),e(A,r1),e(r1,Tee),e(Tee,Sbo),e(r1,Pbo),e(r1,rP),e(rP,$bo),e(r1,Ibo),e(A,jbo),e(A,t1),e(t1,Fee),e(Fee,Nbo),e(t1,Dbo),e(t1,tP),e(tP,qbo),e(t1,Obo),e(A,Gbo),e(A,a1),e(a1,Cee),e(Cee,Xbo),e(a1,zbo),e(a1,aP),e(aP,Vbo),e(a1,Wbo),e(A,Qbo),e(A,n1),e(n1,Mee),e(Mee,Hbo),e(n1,Ubo),e(n1,nP),e(nP,Jbo),e(n1,Ybo),e(A,Kbo),e(A,s1),e(s1,Eee),e(Eee,Zbo),e(s1,e5o),e(s1,sP),e(sP,o5o),e(s1,r5o),e(A,t5o),e(A,l1),e(l1,yee),e(yee,a5o),e(l1,n5o),e(l1,lP),e(lP,s5o),e(l1,l5o),e(A,i5o),e(A,i1),e(i1,wee),e(wee,d5o),e(i1,c5o),e(i1,iP),e(iP,f5o),e(i1,m5o),e(A,g5o),e(A,d1),e(d1,Aee),e(Aee,h5o),e(d1,p5o),e(d1,dP),e(dP,_5o),e(d1,u5o),e(A,b5o),e(A,c1),e(c1,Lee),e(Lee,v5o),e(c1,T5o),e(c1,cP),e(cP,F5o),e(c1,C5o),e(A,M5o),e(A,f1),e(f1,Bee),e(Bee,E5o),e(f1,y5o),e(f1,fP),e(fP,w5o),e(f1,A5o),e(A,L5o),e(A,m1),e(m1,kee),e(kee,B5o),e(m1,k5o),e(m1,mP),e(mP,x5o),e(m1,R5o),e(A,S5o),e(A,g1),e(g1,xee),e(xee,P5o),e(g1,$5o),e(g1,gP),e(gP,I5o),e(g1,j5o),e(A,N5o),e(A,h1),e(h1,Ree),e(Ree,D5o),e(h1,q5o),e(h1,hP),e(hP,O5o),e(h1,G5o),e(A,X5o),e(A,p1),e(p1,See),e(See,z5o),e(p1,V5o),e(p1,pP),e(pP,W5o),e(p1,Q5o),e(A,H5o),e(A,_1),e(_1,Pee),e(Pee,U5o),e(_1,J5o),e(_1,_P),e(_P,Y5o),e(_1,K5o),e(A,Z5o),e(A,u1),e(u1,$ee),e($ee,e2o),e(u1,o2o),e(u1,uP),e(uP,r2o),e(u1,t2o),e(A,a2o),e(A,b1),e(b1,Iee),e(Iee,n2o),e(b1,s2o),e(b1,bP),e(bP,l2o),e(b1,i2o),e(A,d2o),e(A,v1),e(v1,jee),e(jee,c2o),e(v1,f2o),e(v1,vP),e(vP,m2o),e(v1,g2o),e(A,h2o),e(A,T1),e(T1,Nee),e(Nee,p2o),e(T1,_2o),e(T1,TP),e(TP,u2o),e(T1,b2o),e(A,v2o),e(A,F1),e(F1,Dee),e(Dee,T2o),e(F1,F2o),e(F1,FP),e(FP,C2o),e(F1,M2o),e(A,E2o),e(A,C1),e(C1,qee),e(qee,y2o),e(C1,w2o),e(C1,CP),e(CP,A2o),e(C1,L2o),e(A,B2o),e(A,M1),e(M1,Oee),e(Oee,k2o),e(M1,x2o),e(M1,MP),e(MP,R2o),e(M1,S2o),e(A,P2o),e(A,E1),e(E1,Gee),e(Gee,$2o),e(E1,I2o),e(E1,EP),e(EP,j2o),e(E1,N2o),e(A,D2o),e(A,y1),e(y1,Xee),e(Xee,q2o),e(y1,O2o),e(y1,yP),e(yP,G2o),e(y1,X2o),e(A,z2o),e(A,w1),e(w1,zee),e(zee,V2o),e(w1,W2o),e(w1,wP),e(wP,Q2o),e(w1,H2o),e(A,U2o),e(A,A1),e(A1,Vee),e(Vee,J2o),e(A1,Y2o),e(A1,AP),e(AP,K2o),e(A1,Z2o),e(A,evo),e(A,L1),e(L1,Wee),e(Wee,ovo),e(L1,rvo),e(L1,LP),e(LP,tvo),e(L1,avo),e(A,nvo),e(A,B1),e(B1,Qee),e(Qee,svo),e(B1,lvo),e(B1,BP),e(BP,ivo),e(B1,dvo),e(A,cvo),e(A,k1),e(k1,Hee),e(Hee,fvo),e(k1,mvo),e(k1,kP),e(kP,gvo),e(k1,hvo),e(A,pvo),e(A,x1),e(x1,Uee),e(Uee,_vo),e(x1,uvo),e(x1,xP),e(xP,bvo),e(x1,vvo),e(A,Tvo),e(A,R1),e(R1,Jee),e(Jee,Fvo),e(R1,Cvo),e(R1,RP),e(RP,Mvo),e(R1,Evo),e(A,yvo),e(A,S1),e(S1,Yee),e(Yee,wvo),e(S1,Avo),e(S1,SP),e(SP,Lvo),e(S1,Bvo),e(A,kvo),e(A,P1),e(P1,Kee),e(Kee,xvo),e(P1,Rvo),e(P1,PP),e(PP,Svo),e(P1,Pvo),e(A,$vo),e(A,$1),e($1,Zee),e(Zee,Ivo),e($1,jvo),e($1,$P),e($P,Nvo),e($1,Dvo),e(A,qvo),e(A,I1),e(I1,eoe),e(eoe,Ovo),e(I1,Gvo),e(I1,IP),e(IP,Xvo),e(I1,zvo),e(A,Vvo),e(A,j1),e(j1,ooe),e(ooe,Wvo),e(j1,Qvo),e(j1,jP),e(jP,Hvo),e(j1,Uvo),e(A,Jvo),e(A,N1),e(N1,roe),e(roe,Yvo),e(N1,Kvo),e(N1,NP),e(NP,Zvo),e(N1,eTo),e(A,oTo),e(A,D1),e(D1,toe),e(toe,rTo),e(D1,tTo),e(D1,DP),e(DP,aTo),e(D1,nTo),e(A,sTo),e(A,q1),e(q1,aoe),e(aoe,lTo),e(q1,iTo),e(q1,qP),e(qP,dTo),e(q1,cTo),e(A,fTo),e(A,O1),e(O1,noe),e(noe,mTo),e(O1,gTo),e(O1,OP),e(OP,hTo),e(O1,pTo),e(A,_To),e(A,G1),e(G1,soe),e(soe,uTo),e(G1,bTo),e(G1,GP),e(GP,vTo),e(G1,TTo),e(A,FTo),e(A,X1),e(X1,loe),e(loe,CTo),e(X1,MTo),e(X1,ioe),e(ioe,ETo),e(X1,yTo),e(A,wTo),e(A,z1),e(z1,doe),e(doe,ATo),e(z1,LTo),e(z1,XP),e(XP,BTo),e(z1,kTo),e(A,xTo),e(A,V1),e(V1,coe),e(coe,RTo),e(V1,STo),e(V1,zP),e(zP,PTo),e(V1,$To),e($e,ITo),e($e,W1),e(W1,jTo),e(W1,foe),e(foe,NTo),e(W1,DTo),e(W1,moe),e(moe,qTo),e($e,OTo),e($e,goe),e(goe,GTo),e($e,XTo),g(HM,$e,null),b(d,H0e,u),b(d,zi,u),e(zi,Q1),e(Q1,hoe),g(UM,hoe,null),e(zi,zTo),e(zi,poe),e(poe,VTo),b(d,U0e,u),b(d,Uo,u),g(JM,Uo,null),e(Uo,WTo),e(Uo,Vi),e(Vi,QTo),e(Vi,_oe),e(_oe,HTo),e(Vi,UTo),e(Vi,uoe),e(uoe,JTo),e(Vi,YTo),e(Uo,KTo),e(Uo,YM),e(YM,ZTo),e(YM,boe),e(boe,e7o),e(YM,o7o),e(Uo,r7o),e(Uo,qr),g(KM,qr,null),e(qr,t7o),e(qr,voe),e(voe,a7o),e(qr,n7o),e(qr,Wi),e(Wi,s7o),e(Wi,Toe),e(Toe,l7o),e(Wi,i7o),e(Wi,Foe),e(Foe,d7o),e(Wi,c7o),e(qr,f7o),e(qr,Coe),e(Coe,m7o),e(qr,g7o),g(ZM,qr,null),e(Uo,h7o),e(Uo,Ie),g(eE,Ie,null),e(Ie,p7o),e(Ie,Moe),e(Moe,_7o),e(Ie,u7o),e(Ie,ja),e(ja,b7o),e(ja,Eoe),e(Eoe,v7o),e(ja,T7o),e(ja,yoe),e(yoe,F7o),e(ja,C7o),e(ja,woe),e(woe,M7o),e(ja,E7o),e(Ie,y7o),e(Ie,O),e(O,H1),e(H1,Aoe),e(Aoe,w7o),e(H1,A7o),e(H1,VP),e(VP,L7o),e(H1,B7o),e(O,k7o),e(O,U1),e(U1,Loe),e(Loe,x7o),e(U1,R7o),e(U1,WP),e(WP,S7o),e(U1,P7o),e(O,$7o),e(O,J1),e(J1,Boe),e(Boe,I7o),e(J1,j7o),e(J1,QP),e(QP,N7o),e(J1,D7o),e(O,q7o),e(O,Y1),e(Y1,koe),e(koe,O7o),e(Y1,G7o),e(Y1,HP),e(HP,X7o),e(Y1,z7o),e(O,V7o),e(O,K1),e(K1,xoe),e(xoe,W7o),e(K1,Q7o),e(K1,UP),e(UP,H7o),e(K1,U7o),e(O,J7o),e(O,Z1),e(Z1,Roe),e(Roe,Y7o),e(Z1,K7o),e(Z1,JP),e(JP,Z7o),e(Z1,eFo),e(O,oFo),e(O,e4),e(e4,Soe),e(Soe,rFo),e(e4,tFo),e(e4,YP),e(YP,aFo),e(e4,nFo),e(O,sFo),e(O,o4),e(o4,Poe),e(Poe,lFo),e(o4,iFo),e(o4,KP),e(KP,dFo),e(o4,cFo),e(O,fFo),e(O,r4),e(r4,$oe),e($oe,mFo),e(r4,gFo),e(r4,ZP),e(ZP,hFo),e(r4,pFo),e(O,_Fo),e(O,t4),e(t4,Ioe),e(Ioe,uFo),e(t4,bFo),e(t4,e$),e(e$,vFo),e(t4,TFo),e(O,FFo),e(O,a4),e(a4,joe),e(joe,CFo),e(a4,MFo),e(a4,o$),e(o$,EFo),e(a4,yFo),e(O,wFo),e(O,n4),e(n4,Noe),e(Noe,AFo),e(n4,LFo),e(n4,r$),e(r$,BFo),e(n4,kFo),e(O,xFo),e(O,s4),e(s4,Doe),e(Doe,RFo),e(s4,SFo),e(s4,t$),e(t$,PFo),e(s4,$Fo),e(O,IFo),e(O,l4),e(l4,qoe),e(qoe,jFo),e(l4,NFo),e(l4,a$),e(a$,DFo),e(l4,qFo),e(O,OFo),e(O,i4),e(i4,Ooe),e(Ooe,GFo),e(i4,XFo),e(i4,n$),e(n$,zFo),e(i4,VFo),e(O,WFo),e(O,d4),e(d4,Goe),e(Goe,QFo),e(d4,HFo),e(d4,s$),e(s$,UFo),e(d4,JFo),e(O,YFo),e(O,c4),e(c4,Xoe),e(Xoe,KFo),e(c4,ZFo),e(c4,l$),e(l$,e9o),e(c4,o9o),e(O,r9o),e(O,f4),e(f4,zoe),e(zoe,t9o),e(f4,a9o),e(f4,i$),e(i$,n9o),e(f4,s9o),e(O,l9o),e(O,m4),e(m4,Voe),e(Voe,i9o),e(m4,d9o),e(m4,d$),e(d$,c9o),e(m4,f9o),e(O,m9o),e(O,g4),e(g4,Woe),e(Woe,g9o),e(g4,h9o),e(g4,c$),e(c$,p9o),e(g4,_9o),e(O,u9o),e(O,h4),e(h4,Qoe),e(Qoe,b9o),e(h4,v9o),e(h4,f$),e(f$,T9o),e(h4,F9o),e(O,C9o),e(O,p4),e(p4,Hoe),e(Hoe,M9o),e(p4,E9o),e(p4,m$),e(m$,y9o),e(p4,w9o),e(O,A9o),e(O,_4),e(_4,Uoe),e(Uoe,L9o),e(_4,B9o),e(_4,g$),e(g$,k9o),e(_4,x9o),e(O,R9o),e(O,u4),e(u4,Joe),e(Joe,S9o),e(u4,P9o),e(u4,h$),e(h$,$9o),e(u4,I9o),e(O,j9o),e(O,b4),e(b4,Yoe),e(Yoe,N9o),e(b4,D9o),e(b4,Koe),e(Koe,q9o),e(b4,O9o),e(O,G9o),e(O,v4),e(v4,Zoe),e(Zoe,X9o),e(v4,z9o),e(v4,p$),e(p$,V9o),e(v4,W9o),e(O,Q9o),e(O,T4),e(T4,ere),e(ere,H9o),e(T4,U9o),e(T4,_$),e(_$,J9o),e(T4,Y9o),e(Ie,K9o),e(Ie,F4),e(F4,Z9o),e(F4,ore),e(ore,eCo),e(F4,oCo),e(F4,rre),e(rre,rCo),e(Ie,tCo),e(Ie,tre),e(tre,aCo),e(Ie,nCo),g(oE,Ie,null),b(d,J0e,u),b(d,Qi,u),e(Qi,C4),e(C4,are),g(rE,are,null),e(Qi,sCo),e(Qi,nre),e(nre,lCo),b(d,Y0e,u),b(d,Jo,u),g(tE,Jo,null),e(Jo,iCo),e(Jo,Hi),e(Hi,dCo),e(Hi,sre),e(sre,cCo),e(Hi,fCo),e(Hi,lre),e(lre,mCo),e(Hi,gCo),e(Jo,hCo),e(Jo,aE),e(aE,pCo),e(aE,ire),e(ire,_Co),e(aE,uCo),e(Jo,bCo),e(Jo,Or),g(nE,Or,null),e(Or,vCo),e(Or,dre),e(dre,TCo),e(Or,FCo),e(Or,Ui),e(Ui,CCo),e(Ui,cre),e(cre,MCo),e(Ui,ECo),e(Ui,fre),e(fre,yCo),e(Ui,wCo),e(Or,ACo),e(Or,mre),e(mre,LCo),e(Or,BCo),g(sE,Or,null),e(Jo,kCo),e(Jo,je),g(lE,je,null),e(je,xCo),e(je,gre),e(gre,RCo),e(je,SCo),e(je,Na),e(Na,PCo),e(Na,hre),e(hre,$Co),e(Na,ICo),e(Na,pre),e(pre,jCo),e(Na,NCo),e(Na,_re),e(_re,DCo),e(Na,qCo),e(je,OCo),e(je,Kt),e(Kt,M4),e(M4,ure),e(ure,GCo),e(M4,XCo),e(M4,u$),e(u$,zCo),e(M4,VCo),e(Kt,WCo),e(Kt,E4),e(E4,bre),e(bre,QCo),e(E4,HCo),e(E4,b$),e(b$,UCo),e(E4,JCo),e(Kt,YCo),e(Kt,y4),e(y4,vre),e(vre,KCo),e(y4,ZCo),e(y4,v$),e(v$,eMo),e(y4,oMo),e(Kt,rMo),e(Kt,w4),e(w4,Tre),e(Tre,tMo),e(w4,aMo),e(w4,T$),e(T$,nMo),e(w4,sMo),e(Kt,lMo),e(Kt,A4),e(A4,Fre),e(Fre,iMo),e(A4,dMo),e(A4,F$),e(F$,cMo),e(A4,fMo),e(je,mMo),e(je,L4),e(L4,gMo),e(L4,Cre),e(Cre,hMo),e(L4,pMo),e(L4,Mre),e(Mre,_Mo),e(je,uMo),e(je,Ere),e(Ere,bMo),e(je,vMo),g(iE,je,null),b(d,K0e,u),b(d,Ji,u),e(Ji,B4),e(B4,yre),g(dE,yre,null),e(Ji,TMo),e(Ji,wre),e(wre,FMo),b(d,Z0e,u),b(d,Yo,u),g(cE,Yo,null),e(Yo,CMo),e(Yo,Yi),e(Yi,MMo),e(Yi,Are),e(Are,EMo),e(Yi,yMo),e(Yi,Lre),e(Lre,wMo),e(Yi,AMo),e(Yo,LMo),e(Yo,fE),e(fE,BMo),e(fE,Bre),e(Bre,kMo),e(fE,xMo),e(Yo,RMo),e(Yo,Gr),g(mE,Gr,null),e(Gr,SMo),e(Gr,kre),e(kre,PMo),e(Gr,$Mo),e(Gr,Ki),e(Ki,IMo),e(Ki,xre),e(xre,jMo),e(Ki,NMo),e(Ki,Rre),e(Rre,DMo),e(Ki,qMo),e(Gr,OMo),e(Gr,Sre),e(Sre,GMo),e(Gr,XMo),g(gE,Gr,null),e(Yo,zMo),e(Yo,Ne),g(hE,Ne,null),e(Ne,VMo),e(Ne,Pre),e(Pre,WMo),e(Ne,QMo),e(Ne,Da),e(Da,HMo),e(Da,$re),e($re,UMo),e(Da,JMo),e(Da,Ire),e(Ire,YMo),e(Da,KMo),e(Da,jre),e(jre,ZMo),e(Da,eEo),e(Ne,oEo),e(Ne,D),e(D,k4),e(k4,Nre),e(Nre,rEo),e(k4,tEo),e(k4,C$),e(C$,aEo),e(k4,nEo),e(D,sEo),e(D,x4),e(x4,Dre),e(Dre,lEo),e(x4,iEo),e(x4,M$),e(M$,dEo),e(x4,cEo),e(D,fEo),e(D,R4),e(R4,qre),e(qre,mEo),e(R4,gEo),e(R4,E$),e(E$,hEo),e(R4,pEo),e(D,_Eo),e(D,S4),e(S4,Ore),e(Ore,uEo),e(S4,bEo),e(S4,y$),e(y$,vEo),e(S4,TEo),e(D,FEo),e(D,P4),e(P4,Gre),e(Gre,CEo),e(P4,MEo),e(P4,w$),e(w$,EEo),e(P4,yEo),e(D,wEo),e(D,$4),e($4,Xre),e(Xre,AEo),e($4,LEo),e($4,A$),e(A$,BEo),e($4,kEo),e(D,xEo),e(D,I4),e(I4,zre),e(zre,REo),e(I4,SEo),e(I4,L$),e(L$,PEo),e(I4,$Eo),e(D,IEo),e(D,j4),e(j4,Vre),e(Vre,jEo),e(j4,NEo),e(j4,B$),e(B$,DEo),e(j4,qEo),e(D,OEo),e(D,N4),e(N4,Wre),e(Wre,GEo),e(N4,XEo),e(N4,k$),e(k$,zEo),e(N4,VEo),e(D,WEo),e(D,D4),e(D4,Qre),e(Qre,QEo),e(D4,HEo),e(D4,x$),e(x$,UEo),e(D4,JEo),e(D,YEo),e(D,q4),e(q4,Hre),e(Hre,KEo),e(q4,ZEo),e(q4,R$),e(R$,e3o),e(q4,o3o),e(D,r3o),e(D,O4),e(O4,Ure),e(Ure,t3o),e(O4,a3o),e(O4,S$),e(S$,n3o),e(O4,s3o),e(D,l3o),e(D,G4),e(G4,Jre),e(Jre,i3o),e(G4,d3o),e(G4,P$),e(P$,c3o),e(G4,f3o),e(D,m3o),e(D,X4),e(X4,Yre),e(Yre,g3o),e(X4,h3o),e(X4,$$),e($$,p3o),e(X4,_3o),e(D,u3o),e(D,z4),e(z4,Kre),e(Kre,b3o),e(z4,v3o),e(z4,I$),e(I$,T3o),e(z4,F3o),e(D,C3o),e(D,V4),e(V4,Zre),e(Zre,M3o),e(V4,E3o),e(V4,j$),e(j$,y3o),e(V4,w3o),e(D,A3o),e(D,W4),e(W4,ete),e(ete,L3o),e(W4,B3o),e(W4,N$),e(N$,k3o),e(W4,x3o),e(D,R3o),e(D,Q4),e(Q4,ote),e(ote,S3o),e(Q4,P3o),e(Q4,D$),e(D$,$3o),e(Q4,I3o),e(D,j3o),e(D,H4),e(H4,rte),e(rte,N3o),e(H4,D3o),e(H4,q$),e(q$,q3o),e(H4,O3o),e(D,G3o),e(D,U4),e(U4,tte),e(tte,X3o),e(U4,z3o),e(U4,O$),e(O$,V3o),e(U4,W3o),e(D,Q3o),e(D,J4),e(J4,ate),e(ate,H3o),e(J4,U3o),e(J4,G$),e(G$,J3o),e(J4,Y3o),e(D,K3o),e(D,Y4),e(Y4,nte),e(nte,Z3o),e(Y4,eyo),e(Y4,X$),e(X$,oyo),e(Y4,ryo),e(D,tyo),e(D,K4),e(K4,ste),e(ste,ayo),e(K4,nyo),e(K4,z$),e(z$,syo),e(K4,lyo),e(D,iyo),e(D,Z4),e(Z4,lte),e(lte,dyo),e(Z4,cyo),e(Z4,V$),e(V$,fyo),e(Z4,myo),e(D,gyo),e(D,eb),e(eb,ite),e(ite,hyo),e(eb,pyo),e(eb,W$),e(W$,_yo),e(eb,uyo),e(D,byo),e(D,ob),e(ob,dte),e(dte,vyo),e(ob,Tyo),e(ob,Q$),e(Q$,Fyo),e(ob,Cyo),e(D,Myo),e(D,rb),e(rb,cte),e(cte,Eyo),e(rb,yyo),e(rb,H$),e(H$,wyo),e(rb,Ayo),e(D,Lyo),e(D,tb),e(tb,fte),e(fte,Byo),e(tb,kyo),e(tb,U$),e(U$,xyo),e(tb,Ryo),e(D,Syo),e(D,ab),e(ab,mte),e(mte,Pyo),e(ab,$yo),e(ab,J$),e(J$,Iyo),e(ab,jyo),e(D,Nyo),e(D,nb),e(nb,gte),e(gte,Dyo),e(nb,qyo),e(nb,hte),e(hte,Oyo),e(nb,Gyo),e(D,Xyo),e(D,sb),e(sb,pte),e(pte,zyo),e(sb,Vyo),e(sb,Y$),e(Y$,Wyo),e(sb,Qyo),e(D,Hyo),e(D,lb),e(lb,_te),e(_te,Uyo),e(lb,Jyo),e(lb,K$),e(K$,Yyo),e(lb,Kyo),e(Ne,Zyo),e(Ne,ib),e(ib,ewo),e(ib,ute),e(ute,owo),e(ib,rwo),e(ib,bte),e(bte,two),e(Ne,awo),e(Ne,vte),e(vte,nwo),e(Ne,swo),g(pE,Ne,null),b(d,e6e,u),b(d,Zi,u),e(Zi,db),e(db,Tte),g(_E,Tte,null),e(Zi,lwo),e(Zi,Fte),e(Fte,iwo),b(d,o6e,u),b(d,Ko,u),g(uE,Ko,null),e(Ko,dwo),e(Ko,ed),e(ed,cwo),e(ed,Cte),e(Cte,fwo),e(ed,mwo),e(ed,Mte),e(Mte,gwo),e(ed,hwo),e(Ko,pwo),e(Ko,bE),e(bE,_wo),e(bE,Ete),e(Ete,uwo),e(bE,bwo),e(Ko,vwo),e(Ko,Xr),g(vE,Xr,null),e(Xr,Two),e(Xr,yte),e(yte,Fwo),e(Xr,Cwo),e(Xr,od),e(od,Mwo),e(od,wte),e(wte,Ewo),e(od,ywo),e(od,Ate),e(Ate,wwo),e(od,Awo),e(Xr,Lwo),e(Xr,Lte),e(Lte,Bwo),e(Xr,kwo),g(TE,Xr,null),e(Ko,xwo),e(Ko,De),g(FE,De,null),e(De,Rwo),e(De,Bte),e(Bte,Swo),e(De,Pwo),e(De,qa),e(qa,$wo),e(qa,kte),e(kte,Iwo),e(qa,jwo),e(qa,xte),e(xte,Nwo),e(qa,Dwo),e(qa,Rte),e(Rte,qwo),e(qa,Owo),e(De,Gwo),e(De,R),e(R,cb),e(cb,Ste),e(Ste,Xwo),e(cb,zwo),e(cb,Z$),e(Z$,Vwo),e(cb,Wwo),e(R,Qwo),e(R,fb),e(fb,Pte),e(Pte,Hwo),e(fb,Uwo),e(fb,eI),e(eI,Jwo),e(fb,Ywo),e(R,Kwo),e(R,mb),e(mb,$te),e($te,Zwo),e(mb,eAo),e(mb,oI),e(oI,oAo),e(mb,rAo),e(R,tAo),e(R,gb),e(gb,Ite),e(Ite,aAo),e(gb,nAo),e(gb,rI),e(rI,sAo),e(gb,lAo),e(R,iAo),e(R,hb),e(hb,jte),e(jte,dAo),e(hb,cAo),e(hb,tI),e(tI,fAo),e(hb,mAo),e(R,gAo),e(R,pb),e(pb,Nte),e(Nte,hAo),e(pb,pAo),e(pb,aI),e(aI,_Ao),e(pb,uAo),e(R,bAo),e(R,_b),e(_b,Dte),e(Dte,vAo),e(_b,TAo),e(_b,nI),e(nI,FAo),e(_b,CAo),e(R,MAo),e(R,ub),e(ub,qte),e(qte,EAo),e(ub,yAo),e(ub,sI),e(sI,wAo),e(ub,AAo),e(R,LAo),e(R,bb),e(bb,Ote),e(Ote,BAo),e(bb,kAo),e(bb,lI),e(lI,xAo),e(bb,RAo),e(R,SAo),e(R,vb),e(vb,Gte),e(Gte,PAo),e(vb,$Ao),e(vb,iI),e(iI,IAo),e(vb,jAo),e(R,NAo),e(R,Tb),e(Tb,Xte),e(Xte,DAo),e(Tb,qAo),e(Tb,dI),e(dI,OAo),e(Tb,GAo),e(R,XAo),e(R,Fb),e(Fb,zte),e(zte,zAo),e(Fb,VAo),e(Fb,cI),e(cI,WAo),e(Fb,QAo),e(R,HAo),e(R,Cb),e(Cb,Vte),e(Vte,UAo),e(Cb,JAo),e(Cb,fI),e(fI,YAo),e(Cb,KAo),e(R,ZAo),e(R,Mb),e(Mb,Wte),e(Wte,e0o),e(Mb,o0o),e(Mb,mI),e(mI,r0o),e(Mb,t0o),e(R,a0o),e(R,Eb),e(Eb,Qte),e(Qte,n0o),e(Eb,s0o),e(Eb,gI),e(gI,l0o),e(Eb,i0o),e(R,d0o),e(R,yb),e(yb,Hte),e(Hte,c0o),e(yb,f0o),e(yb,hI),e(hI,m0o),e(yb,g0o),e(R,h0o),e(R,wb),e(wb,Ute),e(Ute,p0o),e(wb,_0o),e(wb,pI),e(pI,u0o),e(wb,b0o),e(R,v0o),e(R,Ab),e(Ab,Jte),e(Jte,T0o),e(Ab,F0o),e(Ab,_I),e(_I,C0o),e(Ab,M0o),e(R,E0o),e(R,Lb),e(Lb,Yte),e(Yte,y0o),e(Lb,w0o),e(Lb,uI),e(uI,A0o),e(Lb,L0o),e(R,B0o),e(R,Bb),e(Bb,Kte),e(Kte,k0o),e(Bb,x0o),e(Bb,bI),e(bI,R0o),e(Bb,S0o),e(R,P0o),e(R,kb),e(kb,Zte),e(Zte,$0o),e(kb,I0o),e(kb,vI),e(vI,j0o),e(kb,N0o),e(R,D0o),e(R,xb),e(xb,eae),e(eae,q0o),e(xb,O0o),e(xb,TI),e(TI,G0o),e(xb,X0o),e(R,z0o),e(R,Rb),e(Rb,oae),e(oae,V0o),e(Rb,W0o),e(Rb,FI),e(FI,Q0o),e(Rb,H0o),e(R,U0o),e(R,Sb),e(Sb,rae),e(rae,J0o),e(Sb,Y0o),e(Sb,CI),e(CI,K0o),e(Sb,Z0o),e(R,e6o),e(R,Pb),e(Pb,tae),e(tae,o6o),e(Pb,r6o),e(Pb,MI),e(MI,t6o),e(Pb,a6o),e(R,n6o),e(R,$b),e($b,aae),e(aae,s6o),e($b,l6o),e($b,EI),e(EI,i6o),e($b,d6o),e(R,c6o),e(R,Ib),e(Ib,nae),e(nae,f6o),e(Ib,m6o),e(Ib,yI),e(yI,g6o),e(Ib,h6o),e(R,p6o),e(R,jb),e(jb,sae),e(sae,_6o),e(jb,u6o),e(jb,wI),e(wI,b6o),e(jb,v6o),e(R,T6o),e(R,Nb),e(Nb,lae),e(lae,F6o),e(Nb,C6o),e(Nb,AI),e(AI,M6o),e(Nb,E6o),e(R,y6o),e(R,Db),e(Db,iae),e(iae,w6o),e(Db,A6o),e(Db,LI),e(LI,L6o),e(Db,B6o),e(R,k6o),e(R,qb),e(qb,dae),e(dae,x6o),e(qb,R6o),e(qb,BI),e(BI,S6o),e(qb,P6o),e(R,$6o),e(R,Ob),e(Ob,cae),e(cae,I6o),e(Ob,j6o),e(Ob,kI),e(kI,N6o),e(Ob,D6o),e(R,q6o),e(R,Gb),e(Gb,fae),e(fae,O6o),e(Gb,G6o),e(Gb,xI),e(xI,X6o),e(Gb,z6o),e(R,V6o),e(R,Xb),e(Xb,mae),e(mae,W6o),e(Xb,Q6o),e(Xb,RI),e(RI,H6o),e(Xb,U6o),e(R,J6o),e(R,zb),e(zb,gae),e(gae,Y6o),e(zb,K6o),e(zb,SI),e(SI,Z6o),e(zb,eLo),e(R,oLo),e(R,Vb),e(Vb,hae),e(hae,rLo),e(Vb,tLo),e(Vb,pae),e(pae,aLo),e(Vb,nLo),e(R,sLo),e(R,Wb),e(Wb,_ae),e(_ae,lLo),e(Wb,iLo),e(Wb,PI),e(PI,dLo),e(Wb,cLo),e(R,fLo),e(R,Qb),e(Qb,uae),e(uae,mLo),e(Qb,gLo),e(Qb,$I),e($I,hLo),e(Qb,pLo),e(De,_Lo),e(De,Hb),e(Hb,uLo),e(Hb,bae),e(bae,bLo),e(Hb,vLo),e(Hb,vae),e(vae,TLo),e(De,FLo),e(De,Tae),e(Tae,CLo),e(De,MLo),g(CE,De,null),b(d,r6e,u),b(d,rd,u),e(rd,Ub),e(Ub,Fae),g(ME,Fae,null),e(rd,ELo),e(rd,Cae),e(Cae,yLo),b(d,t6e,u),b(d,Zo,u),g(EE,Zo,null),e(Zo,wLo),e(Zo,td),e(td,ALo),e(td,Mae),e(Mae,LLo),e(td,BLo),e(td,Eae),e(Eae,kLo),e(td,xLo),e(Zo,RLo),e(Zo,yE),e(yE,SLo),e(yE,yae),e(yae,PLo),e(yE,$Lo),e(Zo,ILo),e(Zo,zr),g(wE,zr,null),e(zr,jLo),e(zr,wae),e(wae,NLo),e(zr,DLo),e(zr,ad),e(ad,qLo),e(ad,Aae),e(Aae,OLo),e(ad,GLo),e(ad,Lae),e(Lae,XLo),e(ad,zLo),e(zr,VLo),e(zr,Bae),e(Bae,WLo),e(zr,QLo),g(AE,zr,null),e(Zo,HLo),e(Zo,qe),g(LE,qe,null),e(qe,ULo),e(qe,kae),e(kae,JLo),e(qe,YLo),e(qe,Oa),e(Oa,KLo),e(Oa,xae),e(xae,ZLo),e(Oa,e8o),e(Oa,Rae),e(Rae,o8o),e(Oa,r8o),e(Oa,Sae),e(Sae,t8o),e(Oa,a8o),e(qe,n8o),e(qe,Pae),e(Pae,Jb),e(Jb,$ae),e($ae,s8o),e(Jb,l8o),e(Jb,II),e(II,i8o),e(Jb,d8o),e(qe,c8o),e(qe,Yb),e(Yb,f8o),e(Yb,Iae),e(Iae,m8o),e(Yb,g8o),e(Yb,jae),e(jae,h8o),e(qe,p8o),e(qe,Nae),e(Nae,_8o),e(qe,u8o),g(BE,qe,null),b(d,a6e,u),b(d,nd,u),e(nd,Kb),e(Kb,Dae),g(kE,Dae,null),e(nd,b8o),e(nd,qae),e(qae,v8o),b(d,n6e,u),b(d,er,u),g(xE,er,null),e(er,T8o),e(er,sd),e(sd,F8o),e(sd,Oae),e(Oae,C8o),e(sd,M8o),e(sd,Gae),e(Gae,E8o),e(sd,y8o),e(er,w8o),e(er,RE),e(RE,A8o),e(RE,Xae),e(Xae,L8o),e(RE,B8o),e(er,k8o),e(er,Vr),g(SE,Vr,null),e(Vr,x8o),e(Vr,zae),e(zae,R8o),e(Vr,S8o),e(Vr,ld),e(ld,P8o),e(ld,Vae),e(Vae,$8o),e(ld,I8o),e(ld,Wae),e(Wae,j8o),e(ld,N8o),e(Vr,D8o),e(Vr,Qae),e(Qae,q8o),e(Vr,O8o),g(PE,Vr,null),e(er,G8o),e(er,Oe),g($E,Oe,null),e(Oe,X8o),e(Oe,Hae),e(Hae,z8o),e(Oe,V8o),e(Oe,Ga),e(Ga,W8o),e(Ga,Uae),e(Uae,Q8o),e(Ga,H8o),e(Ga,Jae),e(Jae,U8o),e(Ga,J8o),e(Ga,Yae),e(Yae,Y8o),e(Ga,K8o),e(Oe,Z8o),e(Oe,be),e(be,Zb),e(Zb,Kae),e(Kae,eBo),e(Zb,oBo),e(Zb,jI),e(jI,rBo),e(Zb,tBo),e(be,aBo),e(be,e5),e(e5,Zae),e(Zae,nBo),e(e5,sBo),e(e5,ene),e(ene,lBo),e(e5,iBo),e(be,dBo),e(be,Cs),e(Cs,one),e(one,cBo),e(Cs,fBo),e(Cs,NI),e(NI,mBo),e(Cs,gBo),e(Cs,DI),e(DI,hBo),e(Cs,pBo),e(be,_Bo),e(be,o5),e(o5,rne),e(rne,uBo),e(o5,bBo),e(o5,qI),e(qI,vBo),e(o5,TBo),e(be,FBo),e(be,ea),e(ea,tne),e(tne,CBo),e(ea,MBo),e(ea,OI),e(OI,EBo),e(ea,yBo),e(ea,GI),e(GI,wBo),e(ea,ABo),e(ea,XI),e(XI,LBo),e(ea,BBo),e(be,kBo),e(be,r5),e(r5,ane),e(ane,xBo),e(r5,RBo),e(r5,zI),e(zI,SBo),e(r5,PBo),e(be,$Bo),e(be,t5),e(t5,nne),e(nne,IBo),e(t5,jBo),e(t5,VI),e(VI,NBo),e(t5,DBo),e(be,qBo),e(be,a5),e(a5,sne),e(sne,OBo),e(a5,GBo),e(a5,WI),e(WI,XBo),e(a5,zBo),e(be,VBo),e(be,n5),e(n5,lne),e(lne,WBo),e(n5,QBo),e(n5,QI),e(QI,HBo),e(n5,UBo),e(Oe,JBo),e(Oe,s5),e(s5,YBo),e(s5,ine),e(ine,KBo),e(s5,ZBo),e(s5,dne),e(dne,eko),e(Oe,oko),e(Oe,cne),e(cne,rko),e(Oe,tko),g(IE,Oe,null),b(d,s6e,u),b(d,id,u),e(id,l5),e(l5,fne),g(jE,fne,null),e(id,ako),e(id,mne),e(mne,nko),b(d,l6e,u),b(d,or,u),g(NE,or,null),e(or,sko),e(or,dd),e(dd,lko),e(dd,gne),e(gne,iko),e(dd,dko),e(dd,hne),e(hne,cko),e(dd,fko),e(or,mko),e(or,DE),e(DE,gko),e(DE,pne),e(pne,hko),e(DE,pko),e(or,_ko),e(or,Wr),g(qE,Wr,null),e(Wr,uko),e(Wr,_ne),e(_ne,bko),e(Wr,vko),e(Wr,cd),e(cd,Tko),e(cd,une),e(une,Fko),e(cd,Cko),e(cd,bne),e(bne,Mko),e(cd,Eko),e(Wr,yko),e(Wr,vne),e(vne,wko),e(Wr,Ako),g(OE,Wr,null),e(or,Lko),e(or,Ge),g(GE,Ge,null),e(Ge,Bko),e(Ge,Tne),e(Tne,kko),e(Ge,xko),e(Ge,Xa),e(Xa,Rko),e(Xa,Fne),e(Fne,Sko),e(Xa,Pko),e(Xa,Cne),e(Cne,$ko),e(Xa,Iko),e(Xa,Mne),e(Mne,jko),e(Xa,Nko),e(Ge,Dko),e(Ge,Ene),e(Ene,i5),e(i5,yne),e(yne,qko),e(i5,Oko),e(i5,HI),e(HI,Gko),e(i5,Xko),e(Ge,zko),e(Ge,d5),e(d5,Vko),e(d5,wne),e(wne,Wko),e(d5,Qko),e(d5,Ane),e(Ane,Hko),e(Ge,Uko),e(Ge,Lne),e(Lne,Jko),e(Ge,Yko),g(XE,Ge,null),b(d,i6e,u),b(d,fd,u),e(fd,c5),e(c5,Bne),g(zE,Bne,null),e(fd,Kko),e(fd,kne),e(kne,Zko),b(d,d6e,u),b(d,rr,u),g(VE,rr,null),e(rr,exo),e(rr,md),e(md,oxo),e(md,xne),e(xne,rxo),e(md,txo),e(md,Rne),e(Rne,axo),e(md,nxo),e(rr,sxo),e(rr,WE),e(WE,lxo),e(WE,Sne),e(Sne,ixo),e(WE,dxo),e(rr,cxo),e(rr,Qr),g(QE,Qr,null),e(Qr,fxo),e(Qr,Pne),e(Pne,mxo),e(Qr,gxo),e(Qr,gd),e(gd,hxo),e(gd,$ne),e($ne,pxo),e(gd,_xo),e(gd,Ine),e(Ine,uxo),e(gd,bxo),e(Qr,vxo),e(Qr,jne),e(jne,Txo),e(Qr,Fxo),g(HE,Qr,null),e(rr,Cxo),e(rr,Xe),g(UE,Xe,null),e(Xe,Mxo),e(Xe,Nne),e(Nne,Exo),e(Xe,yxo),e(Xe,za),e(za,wxo),e(za,Dne),e(Dne,Axo),e(za,Lxo),e(za,qne),e(qne,Bxo),e(za,kxo),e(za,One),e(One,xxo),e(za,Rxo),e(Xe,Sxo),e(Xe,to),e(to,f5),e(f5,Gne),e(Gne,Pxo),e(f5,$xo),e(f5,UI),e(UI,Ixo),e(f5,jxo),e(to,Nxo),e(to,m5),e(m5,Xne),e(Xne,Dxo),e(m5,qxo),e(m5,JI),e(JI,Oxo),e(m5,Gxo),e(to,Xxo),e(to,g5),e(g5,zne),e(zne,zxo),e(g5,Vxo),e(g5,YI),e(YI,Wxo),e(g5,Qxo),e(to,Hxo),e(to,h5),e(h5,Vne),e(Vne,Uxo),e(h5,Jxo),e(h5,KI),e(KI,Yxo),e(h5,Kxo),e(to,Zxo),e(to,p5),e(p5,Wne),e(Wne,eRo),e(p5,oRo),e(p5,ZI),e(ZI,rRo),e(p5,tRo),e(to,aRo),e(to,_5),e(_5,Qne),e(Qne,nRo),e(_5,sRo),e(_5,ej),e(ej,lRo),e(_5,iRo),e(to,dRo),e(to,u5),e(u5,Hne),e(Hne,cRo),e(u5,fRo),e(u5,oj),e(oj,mRo),e(u5,gRo),e(Xe,hRo),e(Xe,b5),e(b5,pRo),e(b5,Une),e(Une,_Ro),e(b5,uRo),e(b5,Jne),e(Jne,bRo),e(Xe,vRo),e(Xe,Yne),e(Yne,TRo),e(Xe,FRo),g(JE,Xe,null),b(d,c6e,u),b(d,hd,u),e(hd,v5),e(v5,Kne),g(YE,Kne,null),e(hd,CRo),e(hd,Zne),e(Zne,MRo),b(d,f6e,u),b(d,tr,u),g(KE,tr,null),e(tr,ERo),e(tr,pd),e(pd,yRo),e(pd,ese),e(ese,wRo),e(pd,ARo),e(pd,ose),e(ose,LRo),e(pd,BRo),e(tr,kRo),e(tr,ZE),e(ZE,xRo),e(ZE,rse),e(rse,RRo),e(ZE,SRo),e(tr,PRo),e(tr,Hr),g(e3,Hr,null),e(Hr,$Ro),e(Hr,tse),e(tse,IRo),e(Hr,jRo),e(Hr,_d),e(_d,NRo),e(_d,ase),e(ase,DRo),e(_d,qRo),e(_d,nse),e(nse,ORo),e(_d,GRo),e(Hr,XRo),e(Hr,sse),e(sse,zRo),e(Hr,VRo),g(o3,Hr,null),e(tr,WRo),e(tr,ze),g(r3,ze,null),e(ze,QRo),e(ze,lse),e(lse,HRo),e(ze,URo),e(ze,Va),e(Va,JRo),e(Va,ise),e(ise,YRo),e(Va,KRo),e(Va,dse),e(dse,ZRo),e(Va,eSo),e(Va,cse),e(cse,oSo),e(Va,rSo),e(ze,tSo),e(ze,ud),e(ud,T5),e(T5,fse),e(fse,aSo),e(T5,nSo),e(T5,rj),e(rj,sSo),e(T5,lSo),e(ud,iSo),e(ud,F5),e(F5,mse),e(mse,dSo),e(F5,cSo),e(F5,tj),e(tj,fSo),e(F5,mSo),e(ud,gSo),e(ud,C5),e(C5,gse),e(gse,hSo),e(C5,pSo),e(C5,aj),e(aj,_So),e(C5,uSo),e(ze,bSo),e(ze,M5),e(M5,vSo),e(M5,hse),e(hse,TSo),e(M5,FSo),e(M5,pse),e(pse,CSo),e(ze,MSo),e(ze,_se),e(_se,ESo),e(ze,ySo),g(t3,ze,null),b(d,m6e,u),b(d,bd,u),e(bd,E5),e(E5,use),g(a3,use,null),e(bd,wSo),e(bd,bse),e(bse,ASo),b(d,g6e,u),b(d,ar,u),g(n3,ar,null),e(ar,LSo),e(ar,vd),e(vd,BSo),e(vd,vse),e(vse,kSo),e(vd,xSo),e(vd,Tse),e(Tse,RSo),e(vd,SSo),e(ar,PSo),e(ar,s3),e(s3,$So),e(s3,Fse),e(Fse,ISo),e(s3,jSo),e(ar,NSo),e(ar,Ur),g(l3,Ur,null),e(Ur,DSo),e(Ur,Cse),e(Cse,qSo),e(Ur,OSo),e(Ur,Td),e(Td,GSo),e(Td,Mse),e(Mse,XSo),e(Td,zSo),e(Td,Ese),e(Ese,VSo),e(Td,WSo),e(Ur,QSo),e(Ur,yse),e(yse,HSo),e(Ur,USo),g(i3,Ur,null),e(ar,JSo),e(ar,Ve),g(d3,Ve,null),e(Ve,YSo),e(Ve,wse),e(wse,KSo),e(Ve,ZSo),e(Ve,Wa),e(Wa,ePo),e(Wa,Ase),e(Ase,oPo),e(Wa,rPo),e(Wa,Lse),e(Lse,tPo),e(Wa,aPo),e(Wa,Bse),e(Bse,nPo),e(Wa,sPo),e(Ve,lPo),e(Ve,ao),e(ao,y5),e(y5,kse),e(kse,iPo),e(y5,dPo),e(y5,nj),e(nj,cPo),e(y5,fPo),e(ao,mPo),e(ao,w5),e(w5,xse),e(xse,gPo),e(w5,hPo),e(w5,sj),e(sj,pPo),e(w5,_Po),e(ao,uPo),e(ao,A5),e(A5,Rse),e(Rse,bPo),e(A5,vPo),e(A5,lj),e(lj,TPo),e(A5,FPo),e(ao,CPo),e(ao,L5),e(L5,Sse),e(Sse,MPo),e(L5,EPo),e(L5,ij),e(ij,yPo),e(L5,wPo),e(ao,APo),e(ao,B5),e(B5,Pse),e(Pse,LPo),e(B5,BPo),e(B5,dj),e(dj,kPo),e(B5,xPo),e(ao,RPo),e(ao,k5),e(k5,$se),e($se,SPo),e(k5,PPo),e(k5,cj),e(cj,$Po),e(k5,IPo),e(ao,jPo),e(ao,x5),e(x5,Ise),e(Ise,NPo),e(x5,DPo),e(x5,fj),e(fj,qPo),e(x5,OPo),e(Ve,GPo),e(Ve,R5),e(R5,XPo),e(R5,jse),e(jse,zPo),e(R5,VPo),e(R5,Nse),e(Nse,WPo),e(Ve,QPo),e(Ve,Dse),e(Dse,HPo),e(Ve,UPo),g(c3,Ve,null),b(d,h6e,u),b(d,Fd,u),e(Fd,S5),e(S5,qse),g(f3,qse,null),e(Fd,JPo),e(Fd,Ose),e(Ose,YPo),b(d,p6e,u),b(d,nr,u),g(m3,nr,null),e(nr,KPo),e(nr,Cd),e(Cd,ZPo),e(Cd,Gse),e(Gse,e$o),e(Cd,o$o),e(Cd,Xse),e(Xse,r$o),e(Cd,t$o),e(nr,a$o),e(nr,g3),e(g3,n$o),e(g3,zse),e(zse,s$o),e(g3,l$o),e(nr,i$o),e(nr,Jr),g(h3,Jr,null),e(Jr,d$o),e(Jr,Vse),e(Vse,c$o),e(Jr,f$o),e(Jr,Md),e(Md,m$o),e(Md,Wse),e(Wse,g$o),e(Md,h$o),e(Md,Qse),e(Qse,p$o),e(Md,_$o),e(Jr,u$o),e(Jr,Hse),e(Hse,b$o),e(Jr,v$o),g(p3,Jr,null),e(nr,T$o),e(nr,We),g(_3,We,null),e(We,F$o),e(We,Use),e(Use,C$o),e(We,M$o),e(We,Qa),e(Qa,E$o),e(Qa,Jse),e(Jse,y$o),e(Qa,w$o),e(Qa,Yse),e(Yse,A$o),e(Qa,L$o),e(Qa,Kse),e(Kse,B$o),e(Qa,k$o),e(We,x$o),e(We,u3),e(u3,P5),e(P5,Zse),e(Zse,R$o),e(P5,S$o),e(P5,mj),e(mj,P$o),e(P5,$$o),e(u3,I$o),e(u3,$5),e($5,ele),e(ele,j$o),e($5,N$o),e($5,gj),e(gj,D$o),e($5,q$o),e(We,O$o),e(We,I5),e(I5,G$o),e(I5,ole),e(ole,X$o),e(I5,z$o),e(I5,rle),e(rle,V$o),e(We,W$o),e(We,tle),e(tle,Q$o),e(We,H$o),g(b3,We,null),b(d,_6e,u),b(d,Ed,u),e(Ed,j5),e(j5,ale),g(v3,ale,null),e(Ed,U$o),e(Ed,nle),e(nle,J$o),b(d,u6e,u),b(d,sr,u),g(T3,sr,null),e(sr,Y$o),e(sr,yd),e(yd,K$o),e(yd,sle),e(sle,Z$o),e(yd,eIo),e(yd,lle),e(lle,oIo),e(yd,rIo),e(sr,tIo),e(sr,F3),e(F3,aIo),e(F3,ile),e(ile,nIo),e(F3,sIo),e(sr,lIo),e(sr,Yr),g(C3,Yr,null),e(Yr,iIo),e(Yr,dle),e(dle,dIo),e(Yr,cIo),e(Yr,wd),e(wd,fIo),e(wd,cle),e(cle,mIo),e(wd,gIo),e(wd,fle),e(fle,hIo),e(wd,pIo),e(Yr,_Io),e(Yr,mle),e(mle,uIo),e(Yr,bIo),g(M3,Yr,null),e(sr,vIo),e(sr,Qe),g(E3,Qe,null),e(Qe,TIo),e(Qe,gle),e(gle,FIo),e(Qe,CIo),e(Qe,Ha),e(Ha,MIo),e(Ha,hle),e(hle,EIo),e(Ha,yIo),e(Ha,ple),e(ple,wIo),e(Ha,AIo),e(Ha,_le),e(_le,LIo),e(Ha,BIo),e(Qe,kIo),e(Qe,Ad),e(Ad,N5),e(N5,ule),e(ule,xIo),e(N5,RIo),e(N5,hj),e(hj,SIo),e(N5,PIo),e(Ad,$Io),e(Ad,D5),e(D5,ble),e(ble,IIo),e(D5,jIo),e(D5,pj),e(pj,NIo),e(D5,DIo),e(Ad,qIo),e(Ad,q5),e(q5,vle),e(vle,OIo),e(q5,GIo),e(q5,_j),e(_j,XIo),e(q5,zIo),e(Qe,VIo),e(Qe,O5),e(O5,WIo),e(O5,Tle),e(Tle,QIo),e(O5,HIo),e(O5,Fle),e(Fle,UIo),e(Qe,JIo),e(Qe,Cle),e(Cle,YIo),e(Qe,KIo),g(y3,Qe,null),b(d,b6e,u),b(d,Ld,u),e(Ld,G5),e(G5,Mle),g(w3,Mle,null),e(Ld,ZIo),e(Ld,Ele),e(Ele,ejo),b(d,v6e,u),b(d,lr,u),g(A3,lr,null),e(lr,ojo),e(lr,Bd),e(Bd,rjo),e(Bd,yle),e(yle,tjo),e(Bd,ajo),e(Bd,wle),e(wle,njo),e(Bd,sjo),e(lr,ljo),e(lr,L3),e(L3,ijo),e(L3,Ale),e(Ale,djo),e(L3,cjo),e(lr,fjo),e(lr,Kr),g(B3,Kr,null),e(Kr,mjo),e(Kr,Lle),e(Lle,gjo),e(Kr,hjo),e(Kr,kd),e(kd,pjo),e(kd,Ble),e(Ble,_jo),e(kd,ujo),e(kd,kle),e(kle,bjo),e(kd,vjo),e(Kr,Tjo),e(Kr,xle),e(xle,Fjo),e(Kr,Cjo),g(k3,Kr,null),e(lr,Mjo),e(lr,He),g(x3,He,null),e(He,Ejo),e(He,Rle),e(Rle,yjo),e(He,wjo),e(He,Ua),e(Ua,Ajo),e(Ua,Sle),e(Sle,Ljo),e(Ua,Bjo),e(Ua,Ple),e(Ple,kjo),e(Ua,xjo),e(Ua,$le),e($le,Rjo),e(Ua,Sjo),e(He,Pjo),e(He,xd),e(xd,X5),e(X5,Ile),e(Ile,$jo),e(X5,Ijo),e(X5,uj),e(uj,jjo),e(X5,Njo),e(xd,Djo),e(xd,z5),e(z5,jle),e(jle,qjo),e(z5,Ojo),e(z5,bj),e(bj,Gjo),e(z5,Xjo),e(xd,zjo),e(xd,V5),e(V5,Nle),e(Nle,Vjo),e(V5,Wjo),e(V5,vj),e(vj,Qjo),e(V5,Hjo),e(He,Ujo),e(He,W5),e(W5,Jjo),e(W5,Dle),e(Dle,Yjo),e(W5,Kjo),e(W5,qle),e(qle,Zjo),e(He,eNo),e(He,Ole),e(Ole,oNo),e(He,rNo),g(R3,He,null),b(d,T6e,u),b(d,Rd,u),e(Rd,Q5),e(Q5,Gle),g(S3,Gle,null),e(Rd,tNo),e(Rd,Xle),e(Xle,aNo),b(d,F6e,u),b(d,ir,u),g(P3,ir,null),e(ir,nNo),e(ir,Sd),e(Sd,sNo),e(Sd,zle),e(zle,lNo),e(Sd,iNo),e(Sd,Vle),e(Vle,dNo),e(Sd,cNo),e(ir,fNo),e(ir,$3),e($3,mNo),e($3,Wle),e(Wle,gNo),e($3,hNo),e(ir,pNo),e(ir,Zr),g(I3,Zr,null),e(Zr,_No),e(Zr,Qle),e(Qle,uNo),e(Zr,bNo),e(Zr,Pd),e(Pd,vNo),e(Pd,Hle),e(Hle,TNo),e(Pd,FNo),e(Pd,Ule),e(Ule,CNo),e(Pd,MNo),e(Zr,ENo),e(Zr,Jle),e(Jle,yNo),e(Zr,wNo),g(j3,Zr,null),e(ir,ANo),e(ir,Ue),g(N3,Ue,null),e(Ue,LNo),e(Ue,Yle),e(Yle,BNo),e(Ue,kNo),e(Ue,Ja),e(Ja,xNo),e(Ja,Kle),e(Kle,RNo),e(Ja,SNo),e(Ja,Zle),e(Zle,PNo),e(Ja,$No),e(Ja,eie),e(eie,INo),e(Ja,jNo),e(Ue,NNo),e(Ue,oie),e(oie,H5),e(H5,rie),e(rie,DNo),e(H5,qNo),e(H5,Tj),e(Tj,ONo),e(H5,GNo),e(Ue,XNo),e(Ue,U5),e(U5,zNo),e(U5,tie),e(tie,VNo),e(U5,WNo),e(U5,aie),e(aie,QNo),e(Ue,HNo),e(Ue,nie),e(nie,UNo),e(Ue,JNo),g(D3,Ue,null),b(d,C6e,u),b(d,$d,u),e($d,J5),e(J5,sie),g(q3,sie,null),e($d,YNo),e($d,lie),e(lie,KNo),b(d,M6e,u),b(d,dr,u),g(O3,dr,null),e(dr,ZNo),e(dr,Id),e(Id,eDo),e(Id,iie),e(iie,oDo),e(Id,rDo),e(Id,die),e(die,tDo),e(Id,aDo),e(dr,nDo),e(dr,G3),e(G3,sDo),e(G3,cie),e(cie,lDo),e(G3,iDo),e(dr,dDo),e(dr,et),g(X3,et,null),e(et,cDo),e(et,fie),e(fie,fDo),e(et,mDo),e(et,jd),e(jd,gDo),e(jd,mie),e(mie,hDo),e(jd,pDo),e(jd,gie),e(gie,_Do),e(jd,uDo),e(et,bDo),e(et,hie),e(hie,vDo),e(et,TDo),g(z3,et,null),e(dr,FDo),e(dr,Je),g(V3,Je,null),e(Je,CDo),e(Je,pie),e(pie,MDo),e(Je,EDo),e(Je,Ya),e(Ya,yDo),e(Ya,_ie),e(_ie,wDo),e(Ya,ADo),e(Ya,uie),e(uie,LDo),e(Ya,BDo),e(Ya,bie),e(bie,kDo),e(Ya,xDo),e(Je,RDo),e(Je,vie),e(vie,Y5),e(Y5,Tie),e(Tie,SDo),e(Y5,PDo),e(Y5,Fj),e(Fj,$Do),e(Y5,IDo),e(Je,jDo),e(Je,K5),e(K5,NDo),e(K5,Fie),e(Fie,DDo),e(K5,qDo),e(K5,Cie),e(Cie,ODo),e(Je,GDo),e(Je,Mie),e(Mie,XDo),e(Je,zDo),g(W3,Je,null),b(d,E6e,u),b(d,Nd,u),e(Nd,Z5),e(Z5,Eie),g(Q3,Eie,null),e(Nd,VDo),e(Nd,yie),e(yie,WDo),b(d,y6e,u),b(d,cr,u),g(H3,cr,null),e(cr,QDo),e(cr,Dd),e(Dd,HDo),e(Dd,wie),e(wie,UDo),e(Dd,JDo),e(Dd,Aie),e(Aie,YDo),e(Dd,KDo),e(cr,ZDo),e(cr,U3),e(U3,eqo),e(U3,Lie),e(Lie,oqo),e(U3,rqo),e(cr,tqo),e(cr,ot),g(J3,ot,null),e(ot,aqo),e(ot,Bie),e(Bie,nqo),e(ot,sqo),e(ot,qd),e(qd,lqo),e(qd,kie),e(kie,iqo),e(qd,dqo),e(qd,xie),e(xie,cqo),e(qd,fqo),e(ot,mqo),e(ot,Rie),e(Rie,gqo),e(ot,hqo),g(Y3,ot,null),e(cr,pqo),e(cr,mo),g(K3,mo,null),e(mo,_qo),e(mo,Sie),e(Sie,uqo),e(mo,bqo),e(mo,Ka),e(Ka,vqo),e(Ka,Pie),e(Pie,Tqo),e(Ka,Fqo),e(Ka,$ie),e($ie,Cqo),e(Ka,Mqo),e(Ka,Iie),e(Iie,Eqo),e(Ka,yqo),e(mo,wqo),e(mo,B),e(B,e2),e(e2,jie),e(jie,Aqo),e(e2,Lqo),e(e2,Cj),e(Cj,Bqo),e(e2,kqo),e(B,xqo),e(B,o2),e(o2,Nie),e(Nie,Rqo),e(o2,Sqo),e(o2,Mj),e(Mj,Pqo),e(o2,$qo),e(B,Iqo),e(B,r2),e(r2,Die),e(Die,jqo),e(r2,Nqo),e(r2,Ej),e(Ej,Dqo),e(r2,qqo),e(B,Oqo),e(B,t2),e(t2,qie),e(qie,Gqo),e(t2,Xqo),e(t2,yj),e(yj,zqo),e(t2,Vqo),e(B,Wqo),e(B,a2),e(a2,Oie),e(Oie,Qqo),e(a2,Hqo),e(a2,wj),e(wj,Uqo),e(a2,Jqo),e(B,Yqo),e(B,n2),e(n2,Gie),e(Gie,Kqo),e(n2,Zqo),e(n2,Aj),e(Aj,eOo),e(n2,oOo),e(B,rOo),e(B,s2),e(s2,Xie),e(Xie,tOo),e(s2,aOo),e(s2,Lj),e(Lj,nOo),e(s2,sOo),e(B,lOo),e(B,l2),e(l2,zie),e(zie,iOo),e(l2,dOo),e(l2,Bj),e(Bj,cOo),e(l2,fOo),e(B,mOo),e(B,i2),e(i2,Vie),e(Vie,gOo),e(i2,hOo),e(i2,kj),e(kj,pOo),e(i2,_Oo),e(B,uOo),e(B,d2),e(d2,Wie),e(Wie,bOo),e(d2,vOo),e(d2,xj),e(xj,TOo),e(d2,FOo),e(B,COo),e(B,c2),e(c2,Qie),e(Qie,MOo),e(c2,EOo),e(c2,Rj),e(Rj,yOo),e(c2,wOo),e(B,AOo),e(B,f2),e(f2,Hie),e(Hie,LOo),e(f2,BOo),e(f2,Sj),e(Sj,kOo),e(f2,xOo),e(B,ROo),e(B,m2),e(m2,Uie),e(Uie,SOo),e(m2,POo),e(m2,Pj),e(Pj,$Oo),e(m2,IOo),e(B,jOo),e(B,g2),e(g2,Jie),e(Jie,NOo),e(g2,DOo),e(g2,$j),e($j,qOo),e(g2,OOo),e(B,GOo),e(B,h2),e(h2,Yie),e(Yie,XOo),e(h2,zOo),e(h2,Ij),e(Ij,VOo),e(h2,WOo),e(B,QOo),e(B,Ms),e(Ms,Kie),e(Kie,HOo),e(Ms,UOo),e(Ms,jj),e(jj,JOo),e(Ms,YOo),e(Ms,Nj),e(Nj,KOo),e(Ms,ZOo),e(B,eGo),e(B,p2),e(p2,Zie),e(Zie,oGo),e(p2,rGo),e(p2,Dj),e(Dj,tGo),e(p2,aGo),e(B,nGo),e(B,_2),e(_2,ede),e(ede,sGo),e(_2,lGo),e(_2,qj),e(qj,iGo),e(_2,dGo),e(B,cGo),e(B,u2),e(u2,ode),e(ode,fGo),e(u2,mGo),e(u2,Oj),e(Oj,gGo),e(u2,hGo),e(B,pGo),e(B,b2),e(b2,rde),e(rde,_Go),e(b2,uGo),e(b2,Gj),e(Gj,bGo),e(b2,vGo),e(B,TGo),e(B,v2),e(v2,tde),e(tde,FGo),e(v2,CGo),e(v2,Xj),e(Xj,MGo),e(v2,EGo),e(B,yGo),e(B,T2),e(T2,ade),e(ade,wGo),e(T2,AGo),e(T2,zj),e(zj,LGo),e(T2,BGo),e(B,kGo),e(B,F2),e(F2,nde),e(nde,xGo),e(F2,RGo),e(F2,Vj),e(Vj,SGo),e(F2,PGo),e(B,$Go),e(B,C2),e(C2,sde),e(sde,IGo),e(C2,jGo),e(C2,Wj),e(Wj,NGo),e(C2,DGo),e(B,qGo),e(B,M2),e(M2,lde),e(lde,OGo),e(M2,GGo),e(M2,Qj),e(Qj,XGo),e(M2,zGo),e(B,VGo),e(B,E2),e(E2,ide),e(ide,WGo),e(E2,QGo),e(E2,Hj),e(Hj,HGo),e(E2,UGo),e(B,JGo),e(B,y2),e(y2,dde),e(dde,YGo),e(y2,KGo),e(y2,Uj),e(Uj,ZGo),e(y2,eXo),e(B,oXo),e(B,w2),e(w2,cde),e(cde,rXo),e(w2,tXo),e(w2,Jj),e(Jj,aXo),e(w2,nXo),e(B,sXo),e(B,A2),e(A2,fde),e(fde,lXo),e(A2,iXo),e(A2,Yj),e(Yj,dXo),e(A2,cXo),e(B,fXo),e(B,L2),e(L2,mde),e(mde,mXo),e(L2,gXo),e(L2,Kj),e(Kj,hXo),e(L2,pXo),e(B,_Xo),e(B,B2),e(B2,gde),e(gde,uXo),e(B2,bXo),e(B2,Zj),e(Zj,vXo),e(B2,TXo),e(B,FXo),e(B,k2),e(k2,hde),e(hde,CXo),e(k2,MXo),e(k2,eN),e(eN,EXo),e(k2,yXo),e(B,wXo),e(B,x2),e(x2,pde),e(pde,AXo),e(x2,LXo),e(x2,_de),e(_de,BXo),e(x2,kXo),e(B,xXo),e(B,R2),e(R2,ude),e(ude,RXo),e(R2,SXo),e(R2,oN),e(oN,PXo),e(R2,$Xo),e(B,IXo),e(B,S2),e(S2,bde),e(bde,jXo),e(S2,NXo),e(S2,rN),e(rN,DXo),e(S2,qXo),e(B,OXo),e(B,P2),e(P2,vde),e(vde,GXo),e(P2,XXo),e(P2,tN),e(tN,zXo),e(P2,VXo),e(B,WXo),e(B,$2),e($2,Tde),e(Tde,QXo),e($2,HXo),e($2,aN),e(aN,UXo),e($2,JXo),e(B,YXo),e(B,I2),e(I2,Fde),e(Fde,KXo),e(I2,ZXo),e(I2,nN),e(nN,ezo),e(I2,ozo),e(B,rzo),e(B,j2),e(j2,Cde),e(Cde,tzo),e(j2,azo),e(j2,sN),e(sN,nzo),e(j2,szo),e(B,lzo),e(B,N2),e(N2,Mde),e(Mde,izo),e(N2,dzo),e(N2,lN),e(lN,czo),e(N2,fzo),e(B,mzo),e(B,D2),e(D2,Ede),e(Ede,gzo),e(D2,hzo),e(D2,iN),e(iN,pzo),e(D2,_zo),e(mo,uzo),e(mo,yde),e(yde,bzo),e(mo,vzo),g(Z3,mo,null),b(d,w6e,u),b(d,Od,u),e(Od,q2),e(q2,wde),g(ey,wde,null),e(Od,Tzo),e(Od,Ade),e(Ade,Fzo),b(d,A6e,u),b(d,fr,u),g(oy,fr,null),e(fr,Czo),e(fr,Gd),e(Gd,Mzo),e(Gd,Lde),e(Lde,Ezo),e(Gd,yzo),e(Gd,Bde),e(Bde,wzo),e(Gd,Azo),e(fr,Lzo),e(fr,ry),e(ry,Bzo),e(ry,kde),e(kde,kzo),e(ry,xzo),e(fr,Rzo),e(fr,rt),g(ty,rt,null),e(rt,Szo),e(rt,xde),e(xde,Pzo),e(rt,$zo),e(rt,Xd),e(Xd,Izo),e(Xd,Rde),e(Rde,jzo),e(Xd,Nzo),e(Xd,Sde),e(Sde,Dzo),e(Xd,qzo),e(rt,Ozo),e(rt,Pde),e(Pde,Gzo),e(rt,Xzo),g(ay,rt,null),e(fr,zzo),e(fr,go),g(ny,go,null),e(go,Vzo),e(go,$de),e($de,Wzo),e(go,Qzo),e(go,Za),e(Za,Hzo),e(Za,Ide),e(Ide,Uzo),e(Za,Jzo),e(Za,jde),e(jde,Yzo),e(Za,Kzo),e(Za,Nde),e(Nde,Zzo),e(Za,eVo),e(go,oVo),e(go,H),e(H,O2),e(O2,Dde),e(Dde,rVo),e(O2,tVo),e(O2,dN),e(dN,aVo),e(O2,nVo),e(H,sVo),e(H,G2),e(G2,qde),e(qde,lVo),e(G2,iVo),e(G2,cN),e(cN,dVo),e(G2,cVo),e(H,fVo),e(H,X2),e(X2,Ode),e(Ode,mVo),e(X2,gVo),e(X2,fN),e(fN,hVo),e(X2,pVo),e(H,_Vo),e(H,z2),e(z2,Gde),e(Gde,uVo),e(z2,bVo),e(z2,mN),e(mN,vVo),e(z2,TVo),e(H,FVo),e(H,V2),e(V2,Xde),e(Xde,CVo),e(V2,MVo),e(V2,gN),e(gN,EVo),e(V2,yVo),e(H,wVo),e(H,W2),e(W2,zde),e(zde,AVo),e(W2,LVo),e(W2,hN),e(hN,BVo),e(W2,kVo),e(H,xVo),e(H,Q2),e(Q2,Vde),e(Vde,RVo),e(Q2,SVo),e(Q2,pN),e(pN,PVo),e(Q2,$Vo),e(H,IVo),e(H,H2),e(H2,Wde),e(Wde,jVo),e(H2,NVo),e(H2,_N),e(_N,DVo),e(H2,qVo),e(H,OVo),e(H,U2),e(U2,Qde),e(Qde,GVo),e(U2,XVo),e(U2,uN),e(uN,zVo),e(U2,VVo),e(H,WVo),e(H,J2),e(J2,Hde),e(Hde,QVo),e(J2,HVo),e(J2,bN),e(bN,UVo),e(J2,JVo),e(H,YVo),e(H,Y2),e(Y2,Ude),e(Ude,KVo),e(Y2,ZVo),e(Y2,vN),e(vN,eWo),e(Y2,oWo),e(H,rWo),e(H,K2),e(K2,Jde),e(Jde,tWo),e(K2,aWo),e(K2,TN),e(TN,nWo),e(K2,sWo),e(H,lWo),e(H,Z2),e(Z2,Yde),e(Yde,iWo),e(Z2,dWo),e(Z2,FN),e(FN,cWo),e(Z2,fWo),e(H,mWo),e(H,ev),e(ev,Kde),e(Kde,gWo),e(ev,hWo),e(ev,CN),e(CN,pWo),e(ev,_Wo),e(H,uWo),e(H,ov),e(ov,Zde),e(Zde,bWo),e(ov,vWo),e(ov,MN),e(MN,TWo),e(ov,FWo),e(H,CWo),e(H,rv),e(rv,ece),e(ece,MWo),e(rv,EWo),e(rv,EN),e(EN,yWo),e(rv,wWo),e(H,AWo),e(H,tv),e(tv,oce),e(oce,LWo),e(tv,BWo),e(tv,yN),e(yN,kWo),e(tv,xWo),e(H,RWo),e(H,av),e(av,rce),e(rce,SWo),e(av,PWo),e(av,wN),e(wN,$Wo),e(av,IWo),e(H,jWo),e(H,nv),e(nv,tce),e(tce,NWo),e(nv,DWo),e(nv,AN),e(AN,qWo),e(nv,OWo),e(H,GWo),e(H,sv),e(sv,ace),e(ace,XWo),e(sv,zWo),e(sv,LN),e(LN,VWo),e(sv,WWo),e(H,QWo),e(H,lv),e(lv,nce),e(nce,HWo),e(lv,UWo),e(lv,BN),e(BN,JWo),e(lv,YWo),e(H,KWo),e(H,iv),e(iv,sce),e(sce,ZWo),e(iv,eQo),e(iv,kN),e(kN,oQo),e(iv,rQo),e(go,tQo),e(go,lce),e(lce,aQo),e(go,nQo),g(sy,go,null),b(d,L6e,u),b(d,zd,u),e(zd,dv),e(dv,ice),g(ly,ice,null),e(zd,sQo),e(zd,dce),e(dce,lQo),b(d,B6e,u),b(d,mr,u),g(iy,mr,null),e(mr,iQo),e(mr,Vd),e(Vd,dQo),e(Vd,cce),e(cce,cQo),e(Vd,fQo),e(Vd,fce),e(fce,mQo),e(Vd,gQo),e(mr,hQo),e(mr,dy),e(dy,pQo),e(dy,mce),e(mce,_Qo),e(dy,uQo),e(mr,bQo),e(mr,tt),g(cy,tt,null),e(tt,vQo),e(tt,gce),e(gce,TQo),e(tt,FQo),e(tt,Wd),e(Wd,CQo),e(Wd,hce),e(hce,MQo),e(Wd,EQo),e(Wd,pce),e(pce,yQo),e(Wd,wQo),e(tt,AQo),e(tt,_ce),e(_ce,LQo),e(tt,BQo),g(fy,tt,null),e(mr,kQo),e(mr,ho),g(my,ho,null),e(ho,xQo),e(ho,uce),e(uce,RQo),e(ho,SQo),e(ho,en),e(en,PQo),e(en,bce),e(bce,$Qo),e(en,IQo),e(en,vce),e(vce,jQo),e(en,NQo),e(en,Tce),e(Tce,DQo),e(en,qQo),e(ho,OQo),e(ho,he),e(he,cv),e(cv,Fce),e(Fce,GQo),e(cv,XQo),e(cv,xN),e(xN,zQo),e(cv,VQo),e(he,WQo),e(he,fv),e(fv,Cce),e(Cce,QQo),e(fv,HQo),e(fv,RN),e(RN,UQo),e(fv,JQo),e(he,YQo),e(he,mv),e(mv,Mce),e(Mce,KQo),e(mv,ZQo),e(mv,SN),e(SN,eHo),e(mv,oHo),e(he,rHo),e(he,gv),e(gv,Ece),e(Ece,tHo),e(gv,aHo),e(gv,PN),e(PN,nHo),e(gv,sHo),e(he,lHo),e(he,hv),e(hv,yce),e(yce,iHo),e(hv,dHo),e(hv,$N),e($N,cHo),e(hv,fHo),e(he,mHo),e(he,pv),e(pv,wce),e(wce,gHo),e(pv,hHo),e(pv,IN),e(IN,pHo),e(pv,_Ho),e(he,uHo),e(he,_v),e(_v,Ace),e(Ace,bHo),e(_v,vHo),e(_v,jN),e(jN,THo),e(_v,FHo),e(he,CHo),e(he,uv),e(uv,Lce),e(Lce,MHo),e(uv,EHo),e(uv,NN),e(NN,yHo),e(uv,wHo),e(he,AHo),e(he,bv),e(bv,Bce),e(Bce,LHo),e(bv,BHo),e(bv,DN),e(DN,kHo),e(bv,xHo),e(he,RHo),e(he,vv),e(vv,kce),e(kce,SHo),e(vv,PHo),e(vv,qN),e(qN,$Ho),e(vv,IHo),e(ho,jHo),e(ho,xce),e(xce,NHo),e(ho,DHo),g(gy,ho,null),b(d,k6e,u),b(d,Qd,u),e(Qd,Tv),e(Tv,Rce),g(hy,Rce,null),e(Qd,qHo),e(Qd,Sce),e(Sce,OHo),b(d,x6e,u),b(d,gr,u),g(py,gr,null),e(gr,GHo),e(gr,Hd),e(Hd,XHo),e(Hd,Pce),e(Pce,zHo),e(Hd,VHo),e(Hd,$ce),e($ce,WHo),e(Hd,QHo),e(gr,HHo),e(gr,_y),e(_y,UHo),e(_y,Ice),e(Ice,JHo),e(_y,YHo),e(gr,KHo),e(gr,at),g(uy,at,null),e(at,ZHo),e(at,jce),e(jce,eUo),e(at,oUo),e(at,Ud),e(Ud,rUo),e(Ud,Nce),e(Nce,tUo),e(Ud,aUo),e(Ud,Dce),e(Dce,nUo),e(Ud,sUo),e(at,lUo),e(at,qce),e(qce,iUo),e(at,dUo),g(by,at,null),e(gr,cUo),e(gr,po),g(vy,po,null),e(po,fUo),e(po,Oce),e(Oce,mUo),e(po,gUo),e(po,on),e(on,hUo),e(on,Gce),e(Gce,pUo),e(on,_Uo),e(on,Xce),e(Xce,uUo),e(on,bUo),e(on,zce),e(zce,vUo),e(on,TUo),e(po,FUo),e(po,Vce),e(Vce,Fv),e(Fv,Wce),e(Wce,CUo),e(Fv,MUo),e(Fv,ON),e(ON,EUo),e(Fv,yUo),e(po,wUo),e(po,Qce),e(Qce,AUo),e(po,LUo),g(Ty,po,null),b(d,R6e,u),b(d,Jd,u),e(Jd,Cv),e(Cv,Hce),g(Fy,Hce,null),e(Jd,BUo),e(Jd,Uce),e(Uce,kUo),b(d,S6e,u),b(d,hr,u),g(Cy,hr,null),e(hr,xUo),e(hr,Yd),e(Yd,RUo),e(Yd,Jce),e(Jce,SUo),e(Yd,PUo),e(Yd,Yce),e(Yce,$Uo),e(Yd,IUo),e(hr,jUo),e(hr,My),e(My,NUo),e(My,Kce),e(Kce,DUo),e(My,qUo),e(hr,OUo),e(hr,nt),g(Ey,nt,null),e(nt,GUo),e(nt,Zce),e(Zce,XUo),e(nt,zUo),e(nt,Kd),e(Kd,VUo),e(Kd,efe),e(efe,WUo),e(Kd,QUo),e(Kd,ofe),e(ofe,HUo),e(Kd,UUo),e(nt,JUo),e(nt,rfe),e(rfe,YUo),e(nt,KUo),g(yy,nt,null),e(hr,ZUo),e(hr,_o),g(wy,_o,null),e(_o,eJo),e(_o,tfe),e(tfe,oJo),e(_o,rJo),e(_o,rn),e(rn,tJo),e(rn,afe),e(afe,aJo),e(rn,nJo),e(rn,nfe),e(nfe,sJo),e(rn,lJo),e(rn,sfe),e(sfe,iJo),e(rn,dJo),e(_o,cJo),e(_o,Y),e(Y,Mv),e(Mv,lfe),e(lfe,fJo),e(Mv,mJo),e(Mv,GN),e(GN,gJo),e(Mv,hJo),e(Y,pJo),e(Y,Ev),e(Ev,ife),e(ife,_Jo),e(Ev,uJo),e(Ev,XN),e(XN,bJo),e(Ev,vJo),e(Y,TJo),e(Y,yv),e(yv,dfe),e(dfe,FJo),e(yv,CJo),e(yv,zN),e(zN,MJo),e(yv,EJo),e(Y,yJo),e(Y,wv),e(wv,cfe),e(cfe,wJo),e(wv,AJo),e(wv,VN),e(VN,LJo),e(wv,BJo),e(Y,kJo),e(Y,Av),e(Av,ffe),e(ffe,xJo),e(Av,RJo),e(Av,WN),e(WN,SJo),e(Av,PJo),e(Y,$Jo),e(Y,Lv),e(Lv,mfe),e(mfe,IJo),e(Lv,jJo),e(Lv,QN),e(QN,NJo),e(Lv,DJo),e(Y,qJo),e(Y,Bv),e(Bv,gfe),e(gfe,OJo),e(Bv,GJo),e(Bv,HN),e(HN,XJo),e(Bv,zJo),e(Y,VJo),e(Y,kv),e(kv,hfe),e(hfe,WJo),e(kv,QJo),e(kv,UN),e(UN,HJo),e(kv,UJo),e(Y,JJo),e(Y,xv),e(xv,pfe),e(pfe,YJo),e(xv,KJo),e(xv,JN),e(JN,ZJo),e(xv,eYo),e(Y,oYo),e(Y,Rv),e(Rv,_fe),e(_fe,rYo),e(Rv,tYo),e(Rv,YN),e(YN,aYo),e(Rv,nYo),e(Y,sYo),e(Y,Sv),e(Sv,ufe),e(ufe,lYo),e(Sv,iYo),e(Sv,KN),e(KN,dYo),e(Sv,cYo),e(Y,fYo),e(Y,Pv),e(Pv,bfe),e(bfe,mYo),e(Pv,gYo),e(Pv,ZN),e(ZN,hYo),e(Pv,pYo),e(Y,_Yo),e(Y,$v),e($v,vfe),e(vfe,uYo),e($v,bYo),e($v,eD),e(eD,vYo),e($v,TYo),e(Y,FYo),e(Y,Iv),e(Iv,Tfe),e(Tfe,CYo),e(Iv,MYo),e(Iv,oD),e(oD,EYo),e(Iv,yYo),e(Y,wYo),e(Y,jv),e(jv,Ffe),e(Ffe,AYo),e(jv,LYo),e(jv,rD),e(rD,BYo),e(jv,kYo),e(Y,xYo),e(Y,Nv),e(Nv,Cfe),e(Cfe,RYo),e(Nv,SYo),e(Nv,tD),e(tD,PYo),e(Nv,$Yo),e(Y,IYo),e(Y,Dv),e(Dv,Mfe),e(Mfe,jYo),e(Dv,NYo),e(Dv,aD),e(aD,DYo),e(Dv,qYo),e(Y,OYo),e(Y,qv),e(qv,Efe),e(Efe,GYo),e(qv,XYo),e(qv,nD),e(nD,zYo),e(qv,VYo),e(Y,WYo),e(Y,Ov),e(Ov,yfe),e(yfe,QYo),e(Ov,HYo),e(Ov,sD),e(sD,UYo),e(Ov,JYo),e(Y,YYo),e(Y,Gv),e(Gv,wfe),e(wfe,KYo),e(Gv,ZYo),e(Gv,lD),e(lD,eKo),e(Gv,oKo),e(_o,rKo),e(_o,Afe),e(Afe,tKo),e(_o,aKo),g(Ay,_o,null),b(d,P6e,u),b(d,Zd,u),e(Zd,Xv),e(Xv,Lfe),g(Ly,Lfe,null),e(Zd,nKo),e(Zd,Bfe),e(Bfe,sKo),b(d,$6e,u),b(d,pr,u),g(By,pr,null),e(pr,lKo),e(pr,ec),e(ec,iKo),e(ec,kfe),e(kfe,dKo),e(ec,cKo),e(ec,xfe),e(xfe,fKo),e(ec,mKo),e(pr,gKo),e(pr,ky),e(ky,hKo),e(ky,Rfe),e(Rfe,pKo),e(ky,_Ko),e(pr,uKo),e(pr,st),g(xy,st,null),e(st,bKo),e(st,Sfe),e(Sfe,vKo),e(st,TKo),e(st,oc),e(oc,FKo),e(oc,Pfe),e(Pfe,CKo),e(oc,MKo),e(oc,$fe),e($fe,EKo),e(oc,yKo),e(st,wKo),e(st,Ife),e(Ife,AKo),e(st,LKo),g(Ry,st,null),e(pr,BKo),e(pr,uo),g(Sy,uo,null),e(uo,kKo),e(uo,jfe),e(jfe,xKo),e(uo,RKo),e(uo,tn),e(tn,SKo),e(tn,Nfe),e(Nfe,PKo),e(tn,$Ko),e(tn,Dfe),e(Dfe,IKo),e(tn,jKo),e(tn,qfe),e(qfe,NKo),e(tn,DKo),e(uo,qKo),e(uo,pe),e(pe,zv),e(zv,Ofe),e(Ofe,OKo),e(zv,GKo),e(zv,iD),e(iD,XKo),e(zv,zKo),e(pe,VKo),e(pe,Vv),e(Vv,Gfe),e(Gfe,WKo),e(Vv,QKo),e(Vv,dD),e(dD,HKo),e(Vv,UKo),e(pe,JKo),e(pe,Wv),e(Wv,Xfe),e(Xfe,YKo),e(Wv,KKo),e(Wv,cD),e(cD,ZKo),e(Wv,eZo),e(pe,oZo),e(pe,Qv),e(Qv,zfe),e(zfe,rZo),e(Qv,tZo),e(Qv,fD),e(fD,aZo),e(Qv,nZo),e(pe,sZo),e(pe,Hv),e(Hv,Vfe),e(Vfe,lZo),e(Hv,iZo),e(Hv,mD),e(mD,dZo),e(Hv,cZo),e(pe,fZo),e(pe,Uv),e(Uv,Wfe),e(Wfe,mZo),e(Uv,gZo),e(Uv,gD),e(gD,hZo),e(Uv,pZo),e(pe,_Zo),e(pe,Jv),e(Jv,Qfe),e(Qfe,uZo),e(Jv,bZo),e(Jv,hD),e(hD,vZo),e(Jv,TZo),e(pe,FZo),e(pe,Yv),e(Yv,Hfe),e(Hfe,CZo),e(Yv,MZo),e(Yv,pD),e(pD,EZo),e(Yv,yZo),e(pe,wZo),e(pe,Kv),e(Kv,Ufe),e(Ufe,AZo),e(Kv,LZo),e(Kv,_D),e(_D,BZo),e(Kv,kZo),e(pe,xZo),e(pe,Zv),e(Zv,Jfe),e(Jfe,RZo),e(Zv,SZo),e(Zv,uD),e(uD,PZo),e(Zv,$Zo),e(uo,IZo),e(uo,Yfe),e(Yfe,jZo),e(uo,NZo),g(Py,uo,null),b(d,I6e,u),b(d,rc,u),e(rc,eT),e(eT,Kfe),g($y,Kfe,null),e(rc,DZo),e(rc,Zfe),e(Zfe,qZo),b(d,j6e,u),b(d,_r,u),g(Iy,_r,null),e(_r,OZo),e(_r,tc),e(tc,GZo),e(tc,eme),e(eme,XZo),e(tc,zZo),e(tc,ome),e(ome,VZo),e(tc,WZo),e(_r,QZo),e(_r,jy),e(jy,HZo),e(jy,rme),e(rme,UZo),e(jy,JZo),e(_r,YZo),e(_r,lt),g(Ny,lt,null),e(lt,KZo),e(lt,tme),e(tme,ZZo),e(lt,eer),e(lt,ac),e(ac,oer),e(ac,ame),e(ame,rer),e(ac,ter),e(ac,nme),e(nme,aer),e(ac,ner),e(lt,ser),e(lt,sme),e(sme,ler),e(lt,ier),g(Dy,lt,null),e(_r,der),e(_r,bo),g(qy,bo,null),e(bo,cer),e(bo,lme),e(lme,fer),e(bo,mer),e(bo,an),e(an,ger),e(an,ime),e(ime,her),e(an,per),e(an,dme),e(dme,_er),e(an,uer),e(an,cme),e(cme,ber),e(an,ver),e(bo,Ter),e(bo,X),e(X,oT),e(oT,fme),e(fme,Fer),e(oT,Cer),e(oT,bD),e(bD,Mer),e(oT,Eer),e(X,yer),e(X,rT),e(rT,mme),e(mme,wer),e(rT,Aer),e(rT,vD),e(vD,Ler),e(rT,Ber),e(X,ker),e(X,tT),e(tT,gme),e(gme,xer),e(tT,Rer),e(tT,TD),e(TD,Ser),e(tT,Per),e(X,$er),e(X,aT),e(aT,hme),e(hme,Ier),e(aT,jer),e(aT,FD),e(FD,Ner),e(aT,Der),e(X,qer),e(X,nT),e(nT,pme),e(pme,Oer),e(nT,Ger),e(nT,CD),e(CD,Xer),e(nT,zer),e(X,Ver),e(X,sT),e(sT,_me),e(_me,Wer),e(sT,Qer),e(sT,MD),e(MD,Her),e(sT,Uer),e(X,Jer),e(X,lT),e(lT,ume),e(ume,Yer),e(lT,Ker),e(lT,ED),e(ED,Zer),e(lT,eor),e(X,oor),e(X,iT),e(iT,bme),e(bme,ror),e(iT,tor),e(iT,yD),e(yD,aor),e(iT,nor),e(X,sor),e(X,dT),e(dT,vme),e(vme,lor),e(dT,ior),e(dT,wD),e(wD,dor),e(dT,cor),e(X,mor),e(X,cT),e(cT,Tme),e(Tme,gor),e(cT,hor),e(cT,AD),e(AD,por),e(cT,_or),e(X,uor),e(X,fT),e(fT,Fme),e(Fme,bor),e(fT,vor),e(fT,LD),e(LD,Tor),e(fT,For),e(X,Cor),e(X,mT),e(mT,Cme),e(Cme,Mor),e(mT,Eor),e(mT,BD),e(BD,yor),e(mT,wor),e(X,Aor),e(X,gT),e(gT,Mme),e(Mme,Lor),e(gT,Bor),e(gT,kD),e(kD,kor),e(gT,xor),e(X,Ror),e(X,hT),e(hT,Eme),e(Eme,Sor),e(hT,Por),e(hT,xD),e(xD,$or),e(hT,Ior),e(X,jor),e(X,pT),e(pT,yme),e(yme,Nor),e(pT,Dor),e(pT,RD),e(RD,qor),e(pT,Oor),e(X,Gor),e(X,_T),e(_T,wme),e(wme,Xor),e(_T,zor),e(_T,SD),e(SD,Vor),e(_T,Wor),e(X,Qor),e(X,uT),e(uT,Ame),e(Ame,Hor),e(uT,Uor),e(uT,PD),e(PD,Jor),e(uT,Yor),e(X,Kor),e(X,bT),e(bT,Lme),e(Lme,Zor),e(bT,err),e(bT,$D),e($D,orr),e(bT,rrr),e(X,trr),e(X,vT),e(vT,Bme),e(Bme,arr),e(vT,nrr),e(vT,ID),e(ID,srr),e(vT,lrr),e(X,irr),e(X,TT),e(TT,kme),e(kme,drr),e(TT,crr),e(TT,jD),e(jD,frr),e(TT,mrr),e(X,grr),e(X,FT),e(FT,xme),e(xme,hrr),e(FT,prr),e(FT,ND),e(ND,_rr),e(FT,urr),e(X,brr),e(X,CT),e(CT,Rme),e(Rme,vrr),e(CT,Trr),e(CT,DD),e(DD,Frr),e(CT,Crr),e(X,Mrr),e(X,MT),e(MT,Sme),e(Sme,Err),e(MT,yrr),e(MT,qD),e(qD,wrr),e(MT,Arr),e(X,Lrr),e(X,ET),e(ET,Pme),e(Pme,Brr),e(ET,krr),e(ET,OD),e(OD,xrr),e(ET,Rrr),e(X,Srr),e(X,yT),e(yT,$me),e($me,Prr),e(yT,$rr),e(yT,GD),e(GD,Irr),e(yT,jrr),e(bo,Nrr),e(bo,Ime),e(Ime,Drr),e(bo,qrr),g(Oy,bo,null),b(d,N6e,u),b(d,nc,u),e(nc,wT),e(wT,jme),g(Gy,jme,null),e(nc,Orr),e(nc,Nme),e(Nme,Grr),b(d,D6e,u),b(d,ur,u),g(Xy,ur,null),e(ur,Xrr),e(ur,sc),e(sc,zrr),e(sc,Dme),e(Dme,Vrr),e(sc,Wrr),e(sc,qme),e(qme,Qrr),e(sc,Hrr),e(ur,Urr),e(ur,zy),e(zy,Jrr),e(zy,Ome),e(Ome,Yrr),e(zy,Krr),e(ur,Zrr),e(ur,it),g(Vy,it,null),e(it,etr),e(it,Gme),e(Gme,otr),e(it,rtr),e(it,lc),e(lc,ttr),e(lc,Xme),e(Xme,atr),e(lc,ntr),e(lc,zme),e(zme,str),e(lc,ltr),e(it,itr),e(it,Vme),e(Vme,dtr),e(it,ctr),g(Wy,it,null),e(ur,ftr),e(ur,vo),g(Qy,vo,null),e(vo,mtr),e(vo,Wme),e(Wme,gtr),e(vo,htr),e(vo,nn),e(nn,ptr),e(nn,Qme),e(Qme,_tr),e(nn,utr),e(nn,Hme),e(Hme,btr),e(nn,vtr),e(nn,Ume),e(Ume,Ttr),e(nn,Ftr),e(vo,Ctr),e(vo,te),e(te,AT),e(AT,Jme),e(Jme,Mtr),e(AT,Etr),e(AT,XD),e(XD,ytr),e(AT,wtr),e(te,Atr),e(te,LT),e(LT,Yme),e(Yme,Ltr),e(LT,Btr),e(LT,zD),e(zD,ktr),e(LT,xtr),e(te,Rtr),e(te,BT),e(BT,Kme),e(Kme,Str),e(BT,Ptr),e(BT,VD),e(VD,$tr),e(BT,Itr),e(te,jtr),e(te,kT),e(kT,Zme),e(Zme,Ntr),e(kT,Dtr),e(kT,WD),e(WD,qtr),e(kT,Otr),e(te,Gtr),e(te,xT),e(xT,ege),e(ege,Xtr),e(xT,ztr),e(xT,QD),e(QD,Vtr),e(xT,Wtr),e(te,Qtr),e(te,RT),e(RT,oge),e(oge,Htr),e(RT,Utr),e(RT,HD),e(HD,Jtr),e(RT,Ytr),e(te,Ktr),e(te,ST),e(ST,rge),e(rge,Ztr),e(ST,ear),e(ST,UD),e(UD,oar),e(ST,rar),e(te,tar),e(te,PT),e(PT,tge),e(tge,aar),e(PT,nar),e(PT,JD),e(JD,sar),e(PT,lar),e(te,iar),e(te,$T),e($T,age),e(age,dar),e($T,car),e($T,YD),e(YD,far),e($T,mar),e(te,gar),e(te,IT),e(IT,nge),e(nge,har),e(IT,par),e(IT,KD),e(KD,_ar),e(IT,uar),e(te,bar),e(te,jT),e(jT,sge),e(sge,Tar),e(jT,Far),e(jT,ZD),e(ZD,Car),e(jT,Mar),e(te,Ear),e(te,NT),e(NT,lge),e(lge,yar),e(NT,war),e(NT,eq),e(eq,Aar),e(NT,Lar),e(te,Bar),e(te,DT),e(DT,ige),e(ige,kar),e(DT,xar),e(DT,oq),e(oq,Rar),e(DT,Sar),e(te,Par),e(te,qT),e(qT,dge),e(dge,$ar),e(qT,Iar),e(qT,rq),e(rq,jar),e(qT,Nar),e(te,Dar),e(te,OT),e(OT,cge),e(cge,qar),e(OT,Oar),e(OT,tq),e(tq,Gar),e(OT,Xar),e(te,zar),e(te,GT),e(GT,fge),e(fge,Var),e(GT,War),e(GT,aq),e(aq,Qar),e(GT,Har),e(te,Uar),e(te,XT),e(XT,mge),e(mge,Jar),e(XT,Yar),e(XT,nq),e(nq,Kar),e(XT,Zar),e(vo,enr),e(vo,gge),e(gge,onr),e(vo,rnr),g(Hy,vo,null),b(d,q6e,u),b(d,ic,u),e(ic,zT),e(zT,hge),g(Uy,hge,null),e(ic,tnr),e(ic,pge),e(pge,anr),b(d,O6e,u),b(d,br,u),g(Jy,br,null),e(br,nnr),e(br,dc),e(dc,snr),e(dc,_ge),e(_ge,lnr),e(dc,inr),e(dc,uge),e(uge,dnr),e(dc,cnr),e(br,fnr),e(br,Yy),e(Yy,mnr),e(Yy,bge),e(bge,gnr),e(Yy,hnr),e(br,pnr),e(br,dt),g(Ky,dt,null),e(dt,_nr),e(dt,vge),e(vge,unr),e(dt,bnr),e(dt,cc),e(cc,vnr),e(cc,Tge),e(Tge,Tnr),e(cc,Fnr),e(cc,Fge),e(Fge,Cnr),e(cc,Mnr),e(dt,Enr),e(dt,Cge),e(Cge,ynr),e(dt,wnr),g(Zy,dt,null),e(br,Anr),e(br,To),g(ew,To,null),e(To,Lnr),e(To,Mge),e(Mge,Bnr),e(To,knr),e(To,sn),e(sn,xnr),e(sn,Ege),e(Ege,Rnr),e(sn,Snr),e(sn,yge),e(yge,Pnr),e(sn,$nr),e(sn,wge),e(wge,Inr),e(sn,jnr),e(To,Nnr),e(To,Age),e(Age,VT),e(VT,Lge),e(Lge,Dnr),e(VT,qnr),e(VT,sq),e(sq,Onr),e(VT,Gnr),e(To,Xnr),e(To,Bge),e(Bge,znr),e(To,Vnr),g(ow,To,null),b(d,G6e,u),b(d,fc,u),e(fc,WT),e(WT,kge),g(rw,kge,null),e(fc,Wnr),e(fc,xge),e(xge,Qnr),b(d,X6e,u),b(d,vr,u),g(tw,vr,null),e(vr,Hnr),e(vr,mc),e(mc,Unr),e(mc,Rge),e(Rge,Jnr),e(mc,Ynr),e(mc,Sge),e(Sge,Knr),e(mc,Znr),e(vr,esr),e(vr,aw),e(aw,osr),e(aw,Pge),e(Pge,rsr),e(aw,tsr),e(vr,asr),e(vr,ct),g(nw,ct,null),e(ct,nsr),e(ct,$ge),e($ge,ssr),e(ct,lsr),e(ct,gc),e(gc,isr),e(gc,Ige),e(Ige,dsr),e(gc,csr),e(gc,jge),e(jge,fsr),e(gc,msr),e(ct,gsr),e(ct,Nge),e(Nge,hsr),e(ct,psr),g(sw,ct,null),e(vr,_sr),e(vr,Fo),g(lw,Fo,null),e(Fo,usr),e(Fo,Dge),e(Dge,bsr),e(Fo,vsr),e(Fo,ln),e(ln,Tsr),e(ln,qge),e(qge,Fsr),e(ln,Csr),e(ln,Oge),e(Oge,Msr),e(ln,Esr),e(ln,Gge),e(Gge,ysr),e(ln,wsr),e(Fo,Asr),e(Fo,K),e(K,QT),e(QT,Xge),e(Xge,Lsr),e(QT,Bsr),e(QT,lq),e(lq,ksr),e(QT,xsr),e(K,Rsr),e(K,HT),e(HT,zge),e(zge,Ssr),e(HT,Psr),e(HT,iq),e(iq,$sr),e(HT,Isr),e(K,jsr),e(K,UT),e(UT,Vge),e(Vge,Nsr),e(UT,Dsr),e(UT,dq),e(dq,qsr),e(UT,Osr),e(K,Gsr),e(K,JT),e(JT,Wge),e(Wge,Xsr),e(JT,zsr),e(JT,cq),e(cq,Vsr),e(JT,Wsr),e(K,Qsr),e(K,YT),e(YT,Qge),e(Qge,Hsr),e(YT,Usr),e(YT,fq),e(fq,Jsr),e(YT,Ysr),e(K,Ksr),e(K,KT),e(KT,Hge),e(Hge,Zsr),e(KT,elr),e(KT,mq),e(mq,olr),e(KT,rlr),e(K,tlr),e(K,ZT),e(ZT,Uge),e(Uge,alr),e(ZT,nlr),e(ZT,gq),e(gq,slr),e(ZT,llr),e(K,ilr),e(K,e7),e(e7,Jge),e(Jge,dlr),e(e7,clr),e(e7,hq),e(hq,flr),e(e7,mlr),e(K,glr),e(K,o7),e(o7,Yge),e(Yge,hlr),e(o7,plr),e(o7,pq),e(pq,_lr),e(o7,ulr),e(K,blr),e(K,r7),e(r7,Kge),e(Kge,vlr),e(r7,Tlr),e(r7,_q),e(_q,Flr),e(r7,Clr),e(K,Mlr),e(K,t7),e(t7,Zge),e(Zge,Elr),e(t7,ylr),e(t7,uq),e(uq,wlr),e(t7,Alr),e(K,Llr),e(K,a7),e(a7,ehe),e(ehe,Blr),e(a7,klr),e(a7,bq),e(bq,xlr),e(a7,Rlr),e(K,Slr),e(K,n7),e(n7,ohe),e(ohe,Plr),e(n7,$lr),e(n7,vq),e(vq,Ilr),e(n7,jlr),e(K,Nlr),e(K,s7),e(s7,rhe),e(rhe,Dlr),e(s7,qlr),e(s7,Tq),e(Tq,Olr),e(s7,Glr),e(K,Xlr),e(K,l7),e(l7,the),e(the,zlr),e(l7,Vlr),e(l7,Fq),e(Fq,Wlr),e(l7,Qlr),e(K,Hlr),e(K,i7),e(i7,ahe),e(ahe,Ulr),e(i7,Jlr),e(i7,Cq),e(Cq,Ylr),e(i7,Klr),e(K,Zlr),e(K,d7),e(d7,nhe),e(nhe,eir),e(d7,oir),e(d7,Mq),e(Mq,rir),e(d7,tir),e(K,air),e(K,c7),e(c7,she),e(she,nir),e(c7,sir),e(c7,Eq),e(Eq,lir),e(c7,iir),e(K,dir),e(K,f7),e(f7,lhe),e(lhe,cir),e(f7,fir),e(f7,yq),e(yq,mir),e(f7,gir),e(K,hir),e(K,m7),e(m7,ihe),e(ihe,pir),e(m7,_ir),e(m7,wq),e(wq,uir),e(m7,bir),e(Fo,vir),e(Fo,dhe),e(dhe,Tir),e(Fo,Fir),g(iw,Fo,null),b(d,z6e,u),b(d,hc,u),e(hc,g7),e(g7,che),g(dw,che,null),e(hc,Cir),e(hc,fhe),e(fhe,Mir),b(d,V6e,u),b(d,Tr,u),g(cw,Tr,null),e(Tr,Eir),e(Tr,pc),e(pc,yir),e(pc,mhe),e(mhe,wir),e(pc,Air),e(pc,ghe),e(ghe,Lir),e(pc,Bir),e(Tr,kir),e(Tr,fw),e(fw,xir),e(fw,hhe),e(hhe,Rir),e(fw,Sir),e(Tr,Pir),e(Tr,ft),g(mw,ft,null),e(ft,$ir),e(ft,phe),e(phe,Iir),e(ft,jir),e(ft,_c),e(_c,Nir),e(_c,_he),e(_he,Dir),e(_c,qir),e(_c,uhe),e(uhe,Oir),e(_c,Gir),e(ft,Xir),e(ft,bhe),e(bhe,zir),e(ft,Vir),g(gw,ft,null),e(Tr,Wir),e(Tr,Co),g(hw,Co,null),e(Co,Qir),e(Co,vhe),e(vhe,Hir),e(Co,Uir),e(Co,dn),e(dn,Jir),e(dn,The),e(The,Yir),e(dn,Kir),e(dn,Fhe),e(Fhe,Zir),e(dn,edr),e(dn,Che),e(Che,odr),e(dn,rdr),e(Co,tdr),e(Co,Z),e(Z,h7),e(h7,Mhe),e(Mhe,adr),e(h7,ndr),e(h7,Aq),e(Aq,sdr),e(h7,ldr),e(Z,idr),e(Z,p7),e(p7,Ehe),e(Ehe,ddr),e(p7,cdr),e(p7,Lq),e(Lq,fdr),e(p7,mdr),e(Z,gdr),e(Z,_7),e(_7,yhe),e(yhe,hdr),e(_7,pdr),e(_7,Bq),e(Bq,_dr),e(_7,udr),e(Z,bdr),e(Z,u7),e(u7,whe),e(whe,vdr),e(u7,Tdr),e(u7,kq),e(kq,Fdr),e(u7,Cdr),e(Z,Mdr),e(Z,b7),e(b7,Ahe),e(Ahe,Edr),e(b7,ydr),e(b7,xq),e(xq,wdr),e(b7,Adr),e(Z,Ldr),e(Z,v7),e(v7,Lhe),e(Lhe,Bdr),e(v7,kdr),e(v7,Rq),e(Rq,xdr),e(v7,Rdr),e(Z,Sdr),e(Z,T7),e(T7,Bhe),e(Bhe,Pdr),e(T7,$dr),e(T7,Sq),e(Sq,Idr),e(T7,jdr),e(Z,Ndr),e(Z,F7),e(F7,khe),e(khe,Ddr),e(F7,qdr),e(F7,Pq),e(Pq,Odr),e(F7,Gdr),e(Z,Xdr),e(Z,C7),e(C7,xhe),e(xhe,zdr),e(C7,Vdr),e(C7,$q),e($q,Wdr),e(C7,Qdr),e(Z,Hdr),e(Z,M7),e(M7,Rhe),e(Rhe,Udr),e(M7,Jdr),e(M7,Iq),e(Iq,Ydr),e(M7,Kdr),e(Z,Zdr),e(Z,E7),e(E7,She),e(She,ecr),e(E7,ocr),e(E7,jq),e(jq,rcr),e(E7,tcr),e(Z,acr),e(Z,y7),e(y7,Phe),e(Phe,ncr),e(y7,scr),e(y7,Nq),e(Nq,lcr),e(y7,icr),e(Z,dcr),e(Z,w7),e(w7,$he),e($he,ccr),e(w7,fcr),e(w7,Dq),e(Dq,mcr),e(w7,gcr),e(Z,hcr),e(Z,A7),e(A7,Ihe),e(Ihe,pcr),e(A7,_cr),e(A7,qq),e(qq,ucr),e(A7,bcr),e(Z,vcr),e(Z,L7),e(L7,jhe),e(jhe,Tcr),e(L7,Fcr),e(L7,Oq),e(Oq,Ccr),e(L7,Mcr),e(Z,Ecr),e(Z,B7),e(B7,Nhe),e(Nhe,ycr),e(B7,wcr),e(B7,Gq),e(Gq,Acr),e(B7,Lcr),e(Z,Bcr),e(Z,k7),e(k7,Dhe),e(Dhe,kcr),e(k7,xcr),e(k7,Xq),e(Xq,Rcr),e(k7,Scr),e(Z,Pcr),e(Z,x7),e(x7,qhe),e(qhe,$cr),e(x7,Icr),e(x7,zq),e(zq,jcr),e(x7,Ncr),e(Z,Dcr),e(Z,R7),e(R7,Ohe),e(Ohe,qcr),e(R7,Ocr),e(R7,Vq),e(Vq,Gcr),e(R7,Xcr),e(Co,zcr),e(Co,Ghe),e(Ghe,Vcr),e(Co,Wcr),g(pw,Co,null),b(d,W6e,u),b(d,uc,u),e(uc,S7),e(S7,Xhe),g(_w,Xhe,null),e(uc,Qcr),e(uc,zhe),e(zhe,Hcr),b(d,Q6e,u),b(d,Fr,u),g(uw,Fr,null),e(Fr,Ucr),e(Fr,bc),e(bc,Jcr),e(bc,Vhe),e(Vhe,Ycr),e(bc,Kcr),e(bc,Whe),e(Whe,Zcr),e(bc,efr),e(Fr,ofr),e(Fr,bw),e(bw,rfr),e(bw,Qhe),e(Qhe,tfr),e(bw,afr),e(Fr,nfr),e(Fr,mt),g(vw,mt,null),e(mt,sfr),e(mt,Hhe),e(Hhe,lfr),e(mt,ifr),e(mt,vc),e(vc,dfr),e(vc,Uhe),e(Uhe,cfr),e(vc,ffr),e(vc,Jhe),e(Jhe,mfr),e(vc,gfr),e(mt,hfr),e(mt,Yhe),e(Yhe,pfr),e(mt,_fr),g(Tw,mt,null),e(Fr,ufr),e(Fr,Mo),g(Fw,Mo,null),e(Mo,bfr),e(Mo,Khe),e(Khe,vfr),e(Mo,Tfr),e(Mo,cn),e(cn,Ffr),e(cn,Zhe),e(Zhe,Cfr),e(cn,Mfr),e(cn,epe),e(epe,Efr),e(cn,yfr),e(cn,ope),e(ope,wfr),e(cn,Afr),e(Mo,Lfr),e(Mo,rpe),e(rpe,P7),e(P7,tpe),e(tpe,Bfr),e(P7,kfr),e(P7,Wq),e(Wq,xfr),e(P7,Rfr),e(Mo,Sfr),e(Mo,ape),e(ape,Pfr),e(Mo,$fr),g(Cw,Mo,null),b(d,H6e,u),b(d,Tc,u),e(Tc,$7),e($7,npe),g(Mw,npe,null),e(Tc,Ifr),e(Tc,spe),e(spe,jfr),b(d,U6e,u),b(d,Cr,u),g(Ew,Cr,null),e(Cr,Nfr),e(Cr,Fc),e(Fc,Dfr),e(Fc,lpe),e(lpe,qfr),e(Fc,Ofr),e(Fc,ipe),e(ipe,Gfr),e(Fc,Xfr),e(Cr,zfr),e(Cr,yw),e(yw,Vfr),e(yw,dpe),e(dpe,Wfr),e(yw,Qfr),e(Cr,Hfr),e(Cr,gt),g(ww,gt,null),e(gt,Ufr),e(gt,cpe),e(cpe,Jfr),e(gt,Yfr),e(gt,Cc),e(Cc,Kfr),e(Cc,fpe),e(fpe,Zfr),e(Cc,emr),e(Cc,mpe),e(mpe,omr),e(Cc,rmr),e(gt,tmr),e(gt,gpe),e(gpe,amr),e(gt,nmr),g(Aw,gt,null),e(Cr,smr),e(Cr,Eo),g(Lw,Eo,null),e(Eo,lmr),e(Eo,hpe),e(hpe,imr),e(Eo,dmr),e(Eo,fn),e(fn,cmr),e(fn,ppe),e(ppe,fmr),e(fn,mmr),e(fn,_pe),e(_pe,gmr),e(fn,hmr),e(fn,upe),e(upe,pmr),e(fn,_mr),e(Eo,umr),e(Eo,z),e(z,I7),e(I7,bpe),e(bpe,bmr),e(I7,vmr),e(I7,Qq),e(Qq,Tmr),e(I7,Fmr),e(z,Cmr),e(z,j7),e(j7,vpe),e(vpe,Mmr),e(j7,Emr),e(j7,Hq),e(Hq,ymr),e(j7,wmr),e(z,Amr),e(z,N7),e(N7,Tpe),e(Tpe,Lmr),e(N7,Bmr),e(N7,Uq),e(Uq,kmr),e(N7,xmr),e(z,Rmr),e(z,D7),e(D7,Fpe),e(Fpe,Smr),e(D7,Pmr),e(D7,Jq),e(Jq,$mr),e(D7,Imr),e(z,jmr),e(z,q7),e(q7,Cpe),e(Cpe,Nmr),e(q7,Dmr),e(q7,Yq),e(Yq,qmr),e(q7,Omr),e(z,Gmr),e(z,O7),e(O7,Mpe),e(Mpe,Xmr),e(O7,zmr),e(O7,Kq),e(Kq,Vmr),e(O7,Wmr),e(z,Qmr),e(z,G7),e(G7,Epe),e(Epe,Hmr),e(G7,Umr),e(G7,Zq),e(Zq,Jmr),e(G7,Ymr),e(z,Kmr),e(z,X7),e(X7,ype),e(ype,Zmr),e(X7,egr),e(X7,eO),e(eO,ogr),e(X7,rgr),e(z,tgr),e(z,z7),e(z7,wpe),e(wpe,agr),e(z7,ngr),e(z7,oO),e(oO,sgr),e(z7,lgr),e(z,igr),e(z,V7),e(V7,Ape),e(Ape,dgr),e(V7,cgr),e(V7,rO),e(rO,fgr),e(V7,mgr),e(z,ggr),e(z,W7),e(W7,Lpe),e(Lpe,hgr),e(W7,pgr),e(W7,tO),e(tO,_gr),e(W7,ugr),e(z,bgr),e(z,Q7),e(Q7,Bpe),e(Bpe,vgr),e(Q7,Tgr),e(Q7,aO),e(aO,Fgr),e(Q7,Cgr),e(z,Mgr),e(z,H7),e(H7,kpe),e(kpe,Egr),e(H7,ygr),e(H7,nO),e(nO,wgr),e(H7,Agr),e(z,Lgr),e(z,U7),e(U7,xpe),e(xpe,Bgr),e(U7,kgr),e(U7,sO),e(sO,xgr),e(U7,Rgr),e(z,Sgr),e(z,J7),e(J7,Rpe),e(Rpe,Pgr),e(J7,$gr),e(J7,lO),e(lO,Igr),e(J7,jgr),e(z,Ngr),e(z,Y7),e(Y7,Spe),e(Spe,Dgr),e(Y7,qgr),e(Y7,iO),e(iO,Ogr),e(Y7,Ggr),e(z,Xgr),e(z,K7),e(K7,Ppe),e(Ppe,zgr),e(K7,Vgr),e(K7,dO),e(dO,Wgr),e(K7,Qgr),e(z,Hgr),e(z,Z7),e(Z7,$pe),e($pe,Ugr),e(Z7,Jgr),e(Z7,cO),e(cO,Ygr),e(Z7,Kgr),e(z,Zgr),e(z,eF),e(eF,Ipe),e(Ipe,ehr),e(eF,ohr),e(eF,fO),e(fO,rhr),e(eF,thr),e(z,ahr),e(z,oF),e(oF,jpe),e(jpe,nhr),e(oF,shr),e(oF,mO),e(mO,lhr),e(oF,ihr),e(z,dhr),e(z,rF),e(rF,Npe),e(Npe,chr),e(rF,fhr),e(rF,gO),e(gO,mhr),e(rF,ghr),e(z,hhr),e(z,tF),e(tF,Dpe),e(Dpe,phr),e(tF,_hr),e(tF,hO),e(hO,uhr),e(tF,bhr),e(z,vhr),e(z,aF),e(aF,qpe),e(qpe,Thr),e(aF,Fhr),e(aF,pO),e(pO,Chr),e(aF,Mhr),e(z,Ehr),e(z,nF),e(nF,Ope),e(Ope,yhr),e(nF,whr),e(nF,Gpe),e(Gpe,Ahr),e(nF,Lhr),e(Eo,Bhr),e(Eo,Xpe),e(Xpe,khr),e(Eo,xhr),g(Bw,Eo,null),b(d,J6e,u),b(d,Mc,u),e(Mc,sF),e(sF,zpe),g(kw,zpe,null),e(Mc,Rhr),e(Mc,Vpe),e(Vpe,Shr),b(d,Y6e,u),b(d,Mr,u),g(xw,Mr,null),e(Mr,Phr),e(Mr,Ec),e(Ec,$hr),e(Ec,Wpe),e(Wpe,Ihr),e(Ec,jhr),e(Ec,Qpe),e(Qpe,Nhr),e(Ec,Dhr),e(Mr,qhr),e(Mr,Rw),e(Rw,Ohr),e(Rw,Hpe),e(Hpe,Ghr),e(Rw,Xhr),e(Mr,zhr),e(Mr,ht),g(Sw,ht,null),e(ht,Vhr),e(ht,Upe),e(Upe,Whr),e(ht,Qhr),e(ht,yc),e(yc,Hhr),e(yc,Jpe),e(Jpe,Uhr),e(yc,Jhr),e(yc,Ype),e(Ype,Yhr),e(yc,Khr),e(ht,Zhr),e(ht,Kpe),e(Kpe,epr),e(ht,opr),g(Pw,ht,null),e(Mr,rpr),e(Mr,yo),g($w,yo,null),e(yo,tpr),e(yo,Zpe),e(Zpe,apr),e(yo,npr),e(yo,mn),e(mn,spr),e(mn,e_e),e(e_e,lpr),e(mn,ipr),e(mn,o_e),e(o_e,dpr),e(mn,cpr),e(mn,r_e),e(r_e,fpr),e(mn,mpr),e(yo,gpr),e(yo,gn),e(gn,lF),e(lF,t_e),e(t_e,hpr),e(lF,ppr),e(lF,_O),e(_O,_pr),e(lF,upr),e(gn,bpr),e(gn,iF),e(iF,a_e),e(a_e,vpr),e(iF,Tpr),e(iF,uO),e(uO,Fpr),e(iF,Cpr),e(gn,Mpr),e(gn,dF),e(dF,n_e),e(n_e,Epr),e(dF,ypr),e(dF,bO),e(bO,wpr),e(dF,Apr),e(gn,Lpr),e(gn,cF),e(cF,s_e),e(s_e,Bpr),e(cF,kpr),e(cF,l_e),e(l_e,xpr),e(cF,Rpr),e(yo,Spr),e(yo,i_e),e(i_e,Ppr),e(yo,$pr),g(Iw,yo,null),b(d,K6e,u),b(d,wc,u),e(wc,fF),e(fF,d_e),g(jw,d_e,null),e(wc,Ipr),e(wc,c_e),e(c_e,jpr),b(d,Z6e,u),b(d,Er,u),g(Nw,Er,null),e(Er,Npr),e(Er,Ac),e(Ac,Dpr),e(Ac,f_e),e(f_e,qpr),e(Ac,Opr),e(Ac,m_e),e(m_e,Gpr),e(Ac,Xpr),e(Er,zpr),e(Er,Dw),e(Dw,Vpr),e(Dw,g_e),e(g_e,Wpr),e(Dw,Qpr),e(Er,Hpr),e(Er,pt),g(qw,pt,null),e(pt,Upr),e(pt,h_e),e(h_e,Jpr),e(pt,Ypr),e(pt,Lc),e(Lc,Kpr),e(Lc,p_e),e(p_e,Zpr),e(Lc,e_r),e(Lc,__e),e(__e,o_r),e(Lc,r_r),e(pt,t_r),e(pt,u_e),e(u_e,a_r),e(pt,n_r),g(Ow,pt,null),e(Er,s_r),e(Er,wo),g(Gw,wo,null),e(wo,l_r),e(wo,b_e),e(b_e,i_r),e(wo,d_r),e(wo,hn),e(hn,c_r),e(hn,v_e),e(v_e,f_r),e(hn,m_r),e(hn,T_e),e(T_e,g_r),e(hn,h_r),e(hn,F_e),e(F_e,p_r),e(hn,__r),e(wo,u_r),e(wo,fe),e(fe,mF),e(mF,C_e),e(C_e,b_r),e(mF,v_r),e(mF,vO),e(vO,T_r),e(mF,F_r),e(fe,C_r),e(fe,gF),e(gF,M_e),e(M_e,M_r),e(gF,E_r),e(gF,TO),e(TO,y_r),e(gF,w_r),e(fe,A_r),e(fe,hF),e(hF,E_e),e(E_e,L_r),e(hF,B_r),e(hF,FO),e(FO,k_r),e(hF,x_r),e(fe,R_r),e(fe,pF),e(pF,y_e),e(y_e,S_r),e(pF,P_r),e(pF,CO),e(CO,$_r),e(pF,I_r),e(fe,j_r),e(fe,_F),e(_F,w_e),e(w_e,N_r),e(_F,D_r),e(_F,MO),e(MO,q_r),e(_F,O_r),e(fe,G_r),e(fe,uF),e(uF,A_e),e(A_e,X_r),e(uF,z_r),e(uF,EO),e(EO,V_r),e(uF,W_r),e(fe,Q_r),e(fe,bF),e(bF,L_e),e(L_e,H_r),e(bF,U_r),e(bF,yO),e(yO,J_r),e(bF,Y_r),e(fe,K_r),e(fe,vF),e(vF,B_e),e(B_e,Z_r),e(vF,eur),e(vF,wO),e(wO,our),e(vF,rur),e(fe,tur),e(fe,TF),e(TF,k_e),e(k_e,aur),e(TF,nur),e(TF,AO),e(AO,sur),e(TF,lur),e(fe,iur),e(fe,FF),e(FF,x_e),e(x_e,dur),e(FF,cur),e(FF,LO),e(LO,fur),e(FF,mur),e(fe,gur),e(fe,CF),e(CF,R_e),e(R_e,hur),e(CF,pur),e(CF,BO),e(BO,_ur),e(CF,uur),e(wo,bur),e(wo,S_e),e(S_e,vur),e(wo,Tur),g(Xw,wo,null),b(d,eLe,u),b(d,Bc,u),e(Bc,MF),e(MF,P_e),g(zw,P_e,null),e(Bc,Fur),e(Bc,$_e),e($_e,Cur),b(d,oLe,u),b(d,yr,u),g(Vw,yr,null),e(yr,Mur),e(yr,kc),e(kc,Eur),e(kc,I_e),e(I_e,yur),e(kc,wur),e(kc,j_e),e(j_e,Aur),e(kc,Lur),e(yr,Bur),e(yr,Ww),e(Ww,kur),e(Ww,N_e),e(N_e,xur),e(Ww,Rur),e(yr,Sur),e(yr,_t),g(Qw,_t,null),e(_t,Pur),e(_t,D_e),e(D_e,$ur),e(_t,Iur),e(_t,xc),e(xc,jur),e(xc,q_e),e(q_e,Nur),e(xc,Dur),e(xc,O_e),e(O_e,qur),e(xc,Our),e(_t,Gur),e(_t,G_e),e(G_e,Xur),e(_t,zur),g(Hw,_t,null),e(yr,Vur),e(yr,Ao),g(Uw,Ao,null),e(Ao,Wur),e(Ao,X_e),e(X_e,Qur),e(Ao,Hur),e(Ao,pn),e(pn,Uur),e(pn,z_e),e(z_e,Jur),e(pn,Yur),e(pn,V_e),e(V_e,Kur),e(pn,Zur),e(pn,W_e),e(W_e,e1r),e(pn,o1r),e(Ao,r1r),e(Ao,ve),e(ve,EF),e(EF,Q_e),e(Q_e,t1r),e(EF,a1r),e(EF,kO),e(kO,n1r),e(EF,s1r),e(ve,l1r),e(ve,yF),e(yF,H_e),e(H_e,i1r),e(yF,d1r),e(yF,xO),e(xO,c1r),e(yF,f1r),e(ve,m1r),e(ve,wF),e(wF,U_e),e(U_e,g1r),e(wF,h1r),e(wF,RO),e(RO,p1r),e(wF,_1r),e(ve,u1r),e(ve,AF),e(AF,J_e),e(J_e,b1r),e(AF,v1r),e(AF,SO),e(SO,T1r),e(AF,F1r),e(ve,C1r),e(ve,LF),e(LF,Y_e),e(Y_e,M1r),e(LF,E1r),e(LF,PO),e(PO,y1r),e(LF,w1r),e(ve,A1r),e(ve,BF),e(BF,K_e),e(K_e,L1r),e(BF,B1r),e(BF,$O),e($O,k1r),e(BF,x1r),e(ve,R1r),e(ve,kF),e(kF,Z_e),e(Z_e,S1r),e(kF,P1r),e(kF,IO),e(IO,$1r),e(kF,I1r),e(ve,j1r),e(ve,xF),e(xF,eue),e(eue,N1r),e(xF,D1r),e(xF,jO),e(jO,q1r),e(xF,O1r),e(ve,G1r),e(ve,RF),e(RF,oue),e(oue,X1r),e(RF,z1r),e(RF,NO),e(NO,V1r),e(RF,W1r),e(Ao,Q1r),e(Ao,rue),e(rue,H1r),e(Ao,U1r),g(Jw,Ao,null),b(d,rLe,u),b(d,Rc,u),e(Rc,SF),e(SF,tue),g(Yw,tue,null),e(Rc,J1r),e(Rc,aue),e(aue,Y1r),b(d,tLe,u),b(d,wr,u),g(Kw,wr,null),e(wr,K1r),e(wr,Sc),e(Sc,Z1r),e(Sc,nue),e(nue,e4r),e(Sc,o4r),e(Sc,sue),e(sue,r4r),e(Sc,t4r),e(wr,a4r),e(wr,Zw),e(Zw,n4r),e(Zw,lue),e(lue,s4r),e(Zw,l4r),e(wr,i4r),e(wr,ut),g(eA,ut,null),e(ut,d4r),e(ut,iue),e(iue,c4r),e(ut,f4r),e(ut,Pc),e(Pc,m4r),e(Pc,due),e(due,g4r),e(Pc,h4r),e(Pc,cue),e(cue,p4r),e(Pc,_4r),e(ut,u4r),e(ut,fue),e(fue,b4r),e(ut,v4r),g(oA,ut,null),e(wr,T4r),e(wr,Lo),g(rA,Lo,null),e(Lo,F4r),e(Lo,mue),e(mue,C4r),e(Lo,M4r),e(Lo,_n),e(_n,E4r),e(_n,gue),e(gue,y4r),e(_n,w4r),e(_n,hue),e(hue,A4r),e(_n,L4r),e(_n,pue),e(pue,B4r),e(_n,k4r),e(Lo,x4r),e(Lo,Te),e(Te,PF),e(PF,_ue),e(_ue,R4r),e(PF,S4r),e(PF,DO),e(DO,P4r),e(PF,$4r),e(Te,I4r),e(Te,$F),e($F,uue),e(uue,j4r),e($F,N4r),e($F,qO),e(qO,D4r),e($F,q4r),e(Te,O4r),e(Te,IF),e(IF,bue),e(bue,G4r),e(IF,X4r),e(IF,OO),e(OO,z4r),e(IF,V4r),e(Te,W4r),e(Te,jF),e(jF,vue),e(vue,Q4r),e(jF,H4r),e(jF,GO),e(GO,U4r),e(jF,J4r),e(Te,Y4r),e(Te,NF),e(NF,Tue),e(Tue,K4r),e(NF,Z4r),e(NF,XO),e(XO,ebr),e(NF,obr),e(Te,rbr),e(Te,DF),e(DF,Fue),e(Fue,tbr),e(DF,abr),e(DF,zO),e(zO,nbr),e(DF,sbr),e(Te,lbr),e(Te,qF),e(qF,Cue),e(Cue,ibr),e(qF,dbr),e(qF,VO),e(VO,cbr),e(qF,fbr),e(Te,mbr),e(Te,OF),e(OF,Mue),e(Mue,gbr),e(OF,hbr),e(OF,WO),e(WO,pbr),e(OF,_br),e(Te,ubr),e(Te,GF),e(GF,Eue),e(Eue,bbr),e(GF,vbr),e(GF,QO),e(QO,Tbr),e(GF,Fbr),e(Lo,Cbr),e(Lo,yue),e(yue,Mbr),e(Lo,Ebr),g(tA,Lo,null),b(d,aLe,u),b(d,$c,u),e($c,XF),e(XF,wue),g(aA,wue,null),e($c,ybr),e($c,Aue),e(Aue,wbr),b(d,nLe,u),b(d,Ar,u),g(nA,Ar,null),e(Ar,Abr),e(Ar,Ic),e(Ic,Lbr),e(Ic,Lue),e(Lue,Bbr),e(Ic,kbr),e(Ic,Bue),e(Bue,xbr),e(Ic,Rbr),e(Ar,Sbr),e(Ar,sA),e(sA,Pbr),e(sA,kue),e(kue,$br),e(sA,Ibr),e(Ar,jbr),e(Ar,bt),g(lA,bt,null),e(bt,Nbr),e(bt,xue),e(xue,Dbr),e(bt,qbr),e(bt,jc),e(jc,Obr),e(jc,Rue),e(Rue,Gbr),e(jc,Xbr),e(jc,Sue),e(Sue,zbr),e(jc,Vbr),e(bt,Wbr),e(bt,Pue),e(Pue,Qbr),e(bt,Hbr),g(iA,bt,null),e(Ar,Ubr),e(Ar,Bo),g(dA,Bo,null),e(Bo,Jbr),e(Bo,$ue),e($ue,Ybr),e(Bo,Kbr),e(Bo,un),e(un,Zbr),e(un,Iue),e(Iue,e5r),e(un,o5r),e(un,jue),e(jue,r5r),e(un,t5r),e(un,Nue),e(Nue,a5r),e(un,n5r),e(Bo,s5r),e(Bo,Fe),e(Fe,zF),e(zF,Due),e(Due,l5r),e(zF,i5r),e(zF,HO),e(HO,d5r),e(zF,c5r),e(Fe,f5r),e(Fe,VF),e(VF,que),e(que,m5r),e(VF,g5r),e(VF,UO),e(UO,h5r),e(VF,p5r),e(Fe,_5r),e(Fe,WF),e(WF,Oue),e(Oue,u5r),e(WF,b5r),e(WF,JO),e(JO,v5r),e(WF,T5r),e(Fe,F5r),e(Fe,QF),e(QF,Gue),e(Gue,C5r),e(QF,M5r),e(QF,YO),e(YO,E5r),e(QF,y5r),e(Fe,w5r),e(Fe,HF),e(HF,Xue),e(Xue,A5r),e(HF,L5r),e(HF,KO),e(KO,B5r),e(HF,k5r),e(Fe,x5r),e(Fe,UF),e(UF,zue),e(zue,R5r),e(UF,S5r),e(UF,ZO),e(ZO,P5r),e(UF,$5r),e(Fe,I5r),e(Fe,JF),e(JF,Vue),e(Vue,j5r),e(JF,N5r),e(JF,eG),e(eG,D5r),e(JF,q5r),e(Fe,O5r),e(Fe,YF),e(YF,Wue),e(Wue,G5r),e(YF,X5r),e(YF,oG),e(oG,z5r),e(YF,V5r),e(Fe,W5r),e(Fe,KF),e(KF,Que),e(Que,Q5r),e(KF,H5r),e(KF,rG),e(rG,U5r),e(KF,J5r),e(Bo,Y5r),e(Bo,Hue),e(Hue,K5r),e(Bo,Z5r),g(cA,Bo,null),b(d,sLe,u),b(d,Nc,u),e(Nc,ZF),e(ZF,Uue),g(fA,Uue,null),e(Nc,e2r),e(Nc,Jue),e(Jue,o2r),b(d,lLe,u),b(d,Lr,u),g(mA,Lr,null),e(Lr,r2r),e(Lr,Dc),e(Dc,t2r),e(Dc,Yue),e(Yue,a2r),e(Dc,n2r),e(Dc,Kue),e(Kue,s2r),e(Dc,l2r),e(Lr,i2r),e(Lr,gA),e(gA,d2r),e(gA,Zue),e(Zue,c2r),e(gA,f2r),e(Lr,m2r),e(Lr,vt),g(hA,vt,null),e(vt,g2r),e(vt,e1e),e(e1e,h2r),e(vt,p2r),e(vt,qc),e(qc,_2r),e(qc,o1e),e(o1e,u2r),e(qc,b2r),e(qc,r1e),e(r1e,v2r),e(qc,T2r),e(vt,F2r),e(vt,t1e),e(t1e,C2r),e(vt,M2r),g(pA,vt,null),e(Lr,E2r),e(Lr,ko),g(_A,ko,null),e(ko,y2r),e(ko,a1e),e(a1e,w2r),e(ko,A2r),e(ko,bn),e(bn,L2r),e(bn,n1e),e(n1e,B2r),e(bn,k2r),e(bn,s1e),e(s1e,x2r),e(bn,R2r),e(bn,l1e),e(l1e,S2r),e(bn,P2r),e(ko,$2r),e(ko,Ce),e(Ce,e9),e(e9,i1e),e(i1e,I2r),e(e9,j2r),e(e9,tG),e(tG,N2r),e(e9,D2r),e(Ce,q2r),e(Ce,o9),e(o9,d1e),e(d1e,O2r),e(o9,G2r),e(o9,aG),e(aG,X2r),e(o9,z2r),e(Ce,V2r),e(Ce,r9),e(r9,c1e),e(c1e,W2r),e(r9,Q2r),e(r9,nG),e(nG,H2r),e(r9,U2r),e(Ce,J2r),e(Ce,t9),e(t9,f1e),e(f1e,Y2r),e(t9,K2r),e(t9,sG),e(sG,Z2r),e(t9,evr),e(Ce,ovr),e(Ce,a9),e(a9,m1e),e(m1e,rvr),e(a9,tvr),e(a9,lG),e(lG,avr),e(a9,nvr),e(Ce,svr),e(Ce,n9),e(n9,g1e),e(g1e,lvr),e(n9,ivr),e(n9,iG),e(iG,dvr),e(n9,cvr),e(Ce,fvr),e(Ce,s9),e(s9,h1e),e(h1e,mvr),e(s9,gvr),e(s9,dG),e(dG,hvr),e(s9,pvr),e(Ce,_vr),e(Ce,l9),e(l9,p1e),e(p1e,uvr),e(l9,bvr),e(l9,cG),e(cG,vvr),e(l9,Tvr),e(Ce,Fvr),e(Ce,i9),e(i9,_1e),e(_1e,Cvr),e(i9,Mvr),e(i9,fG),e(fG,Evr),e(i9,yvr),e(ko,wvr),e(ko,u1e),e(u1e,Avr),e(ko,Lvr),g(uA,ko,null),b(d,iLe,u),b(d,Oc,u),e(Oc,d9),e(d9,b1e),g(bA,b1e,null),e(Oc,Bvr),e(Oc,v1e),e(v1e,kvr),b(d,dLe,u),b(d,Br,u),g(vA,Br,null),e(Br,xvr),e(Br,Gc),e(Gc,Rvr),e(Gc,T1e),e(T1e,Svr),e(Gc,Pvr),e(Gc,F1e),e(F1e,$vr),e(Gc,Ivr),e(Br,jvr),e(Br,TA),e(TA,Nvr),e(TA,C1e),e(C1e,Dvr),e(TA,qvr),e(Br,Ovr),e(Br,Tt),g(FA,Tt,null),e(Tt,Gvr),e(Tt,M1e),e(M1e,Xvr),e(Tt,zvr),e(Tt,Xc),e(Xc,Vvr),e(Xc,E1e),e(E1e,Wvr),e(Xc,Qvr),e(Xc,y1e),e(y1e,Hvr),e(Xc,Uvr),e(Tt,Jvr),e(Tt,w1e),e(w1e,Yvr),e(Tt,Kvr),g(CA,Tt,null),e(Br,Zvr),e(Br,xo),g(MA,xo,null),e(xo,eTr),e(xo,A1e),e(A1e,oTr),e(xo,rTr),e(xo,vn),e(vn,tTr),e(vn,L1e),e(L1e,aTr),e(vn,nTr),e(vn,B1e),e(B1e,sTr),e(vn,lTr),e(vn,k1e),e(k1e,iTr),e(vn,dTr),e(xo,cTr),e(xo,no),e(no,c9),e(c9,x1e),e(x1e,fTr),e(c9,mTr),e(c9,mG),e(mG,gTr),e(c9,hTr),e(no,pTr),e(no,f9),e(f9,R1e),e(R1e,_Tr),e(f9,uTr),e(f9,gG),e(gG,bTr),e(f9,vTr),e(no,TTr),e(no,m9),e(m9,S1e),e(S1e,FTr),e(m9,CTr),e(m9,hG),e(hG,MTr),e(m9,ETr),e(no,yTr),e(no,g9),e(g9,P1e),e(P1e,wTr),e(g9,ATr),e(g9,pG),e(pG,LTr),e(g9,BTr),e(no,kTr),e(no,h9),e(h9,$1e),e($1e,xTr),e(h9,RTr),e(h9,_G),e(_G,STr),e(h9,PTr),e(no,$Tr),e(no,p9),e(p9,I1e),e(I1e,ITr),e(p9,jTr),e(p9,uG),e(uG,NTr),e(p9,DTr),e(no,qTr),e(no,_9),e(_9,j1e),e(j1e,OTr),e(_9,GTr),e(_9,bG),e(bG,XTr),e(_9,zTr),e(xo,VTr),e(xo,N1e),e(N1e,WTr),e(xo,QTr),g(EA,xo,null),b(d,cLe,u),b(d,zc,u),e(zc,u9),e(u9,D1e),g(yA,D1e,null),e(zc,HTr),e(zc,q1e),e(q1e,UTr),b(d,fLe,u),b(d,kr,u),g(wA,kr,null),e(kr,JTr),e(kr,Vc),e(Vc,YTr),e(Vc,O1e),e(O1e,KTr),e(Vc,ZTr),e(Vc,G1e),e(G1e,e7r),e(Vc,o7r),e(kr,r7r),e(kr,AA),e(AA,t7r),e(AA,X1e),e(X1e,a7r),e(AA,n7r),e(kr,s7r),e(kr,Ft),g(LA,Ft,null),e(Ft,l7r),e(Ft,z1e),e(z1e,i7r),e(Ft,d7r),e(Ft,Wc),e(Wc,c7r),e(Wc,V1e),e(V1e,f7r),e(Wc,m7r),e(Wc,W1e),e(W1e,g7r),e(Wc,h7r),e(Ft,p7r),e(Ft,Q1e),e(Q1e,_7r),e(Ft,u7r),g(BA,Ft,null),e(kr,b7r),e(kr,Ro),g(kA,Ro,null),e(Ro,v7r),e(Ro,H1e),e(H1e,T7r),e(Ro,F7r),e(Ro,Tn),e(Tn,C7r),e(Tn,U1e),e(U1e,M7r),e(Tn,E7r),e(Tn,J1e),e(J1e,y7r),e(Tn,w7r),e(Tn,Y1e),e(Y1e,A7r),e(Tn,L7r),e(Ro,B7r),e(Ro,so),e(so,b9),e(b9,K1e),e(K1e,k7r),e(b9,x7r),e(b9,vG),e(vG,R7r),e(b9,S7r),e(so,P7r),e(so,v9),e(v9,Z1e),e(Z1e,$7r),e(v9,I7r),e(v9,TG),e(TG,j7r),e(v9,N7r),e(so,D7r),e(so,T9),e(T9,e4e),e(e4e,q7r),e(T9,O7r),e(T9,FG),e(FG,G7r),e(T9,X7r),e(so,z7r),e(so,F9),e(F9,o4e),e(o4e,V7r),e(F9,W7r),e(F9,CG),e(CG,Q7r),e(F9,H7r),e(so,U7r),e(so,C9),e(C9,r4e),e(r4e,J7r),e(C9,Y7r),e(C9,MG),e(MG,K7r),e(C9,Z7r),e(so,eFr),e(so,M9),e(M9,t4e),e(t4e,oFr),e(M9,rFr),e(M9,EG),e(EG,tFr),e(M9,aFr),e(so,nFr),e(so,E9),e(E9,a4e),e(a4e,sFr),e(E9,lFr),e(E9,yG),e(yG,iFr),e(E9,dFr),e(Ro,cFr),e(Ro,n4e),e(n4e,fFr),e(Ro,mFr),g(xA,Ro,null),b(d,mLe,u),b(d,Qc,u),e(Qc,y9),e(y9,s4e),g(RA,s4e,null),e(Qc,gFr),e(Qc,l4e),e(l4e,hFr),b(d,gLe,u),b(d,xr,u),g(SA,xr,null),e(xr,pFr),e(xr,Hc),e(Hc,_Fr),e(Hc,i4e),e(i4e,uFr),e(Hc,bFr),e(Hc,d4e),e(d4e,vFr),e(Hc,TFr),e(xr,FFr),e(xr,PA),e(PA,CFr),e(PA,c4e),e(c4e,MFr),e(PA,EFr),e(xr,yFr),e(xr,Ct),g($A,Ct,null),e(Ct,wFr),e(Ct,f4e),e(f4e,AFr),e(Ct,LFr),e(Ct,Uc),e(Uc,BFr),e(Uc,m4e),e(m4e,kFr),e(Uc,xFr),e(Uc,g4e),e(g4e,RFr),e(Uc,SFr),e(Ct,PFr),e(Ct,h4e),e(h4e,$Fr),e(Ct,IFr),g(IA,Ct,null),e(xr,jFr),e(xr,So),g(jA,So,null),e(So,NFr),e(So,p4e),e(p4e,DFr),e(So,qFr),e(So,Fn),e(Fn,OFr),e(Fn,_4e),e(_4e,GFr),e(Fn,XFr),e(Fn,u4e),e(u4e,zFr),e(Fn,VFr),e(Fn,b4e),e(b4e,WFr),e(Fn,QFr),e(So,HFr),e(So,v4e),e(v4e,w9),e(w9,T4e),e(T4e,UFr),e(w9,JFr),e(w9,wG),e(wG,YFr),e(w9,KFr),e(So,ZFr),e(So,F4e),e(F4e,e9r),e(So,o9r),g(NA,So,null),b(d,hLe,u),b(d,Jc,u),e(Jc,A9),e(A9,C4e),g(DA,C4e,null),e(Jc,r9r),e(Jc,M4e),e(M4e,t9r),b(d,pLe,u),b(d,Rr,u),g(qA,Rr,null),e(Rr,a9r),e(Rr,Yc),e(Yc,n9r),e(Yc,E4e),e(E4e,s9r),e(Yc,l9r),e(Yc,y4e),e(y4e,i9r),e(Yc,d9r),e(Rr,c9r),e(Rr,OA),e(OA,f9r),e(OA,w4e),e(w4e,m9r),e(OA,g9r),e(Rr,h9r),e(Rr,Mt),g(GA,Mt,null),e(Mt,p9r),e(Mt,A4e),e(A4e,_9r),e(Mt,u9r),e(Mt,Kc),e(Kc,b9r),e(Kc,L4e),e(L4e,v9r),e(Kc,T9r),e(Kc,B4e),e(B4e,F9r),e(Kc,C9r),e(Mt,M9r),e(Mt,k4e),e(k4e,E9r),e(Mt,y9r),g(XA,Mt,null),e(Rr,w9r),e(Rr,Po),g(zA,Po,null),e(Po,A9r),e(Po,x4e),e(x4e,L9r),e(Po,B9r),e(Po,Cn),e(Cn,k9r),e(Cn,R4e),e(R4e,x9r),e(Cn,R9r),e(Cn,S4e),e(S4e,S9r),e(Cn,P9r),e(Cn,P4e),e(P4e,$9r),e(Cn,I9r),e(Po,j9r),e(Po,VA),e(VA,L9),e(L9,$4e),e($4e,N9r),e(L9,D9r),e(L9,AG),e(AG,q9r),e(L9,O9r),e(VA,G9r),e(VA,B9),e(B9,I4e),e(I4e,X9r),e(B9,z9r),e(B9,LG),e(LG,V9r),e(B9,W9r),e(Po,Q9r),e(Po,j4e),e(j4e,H9r),e(Po,U9r),g(WA,Po,null),b(d,_Le,u),b(d,Zc,u),e(Zc,k9),e(k9,N4e),g(QA,N4e,null),e(Zc,J9r),e(Zc,D4e),e(D4e,Y9r),b(d,uLe,u),b(d,Sr,u),g(HA,Sr,null),e(Sr,K9r),e(Sr,ef),e(ef,Z9r),e(ef,q4e),e(q4e,eCr),e(ef,oCr),e(ef,O4e),e(O4e,rCr),e(ef,tCr),e(Sr,aCr),e(Sr,UA),e(UA,nCr),e(UA,G4e),e(G4e,sCr),e(UA,lCr),e(Sr,iCr),e(Sr,Et),g(JA,Et,null),e(Et,dCr),e(Et,X4e),e(X4e,cCr),e(Et,fCr),e(Et,of),e(of,mCr),e(of,z4e),e(z4e,gCr),e(of,hCr),e(of,V4e),e(V4e,pCr),e(of,_Cr),e(Et,uCr),e(Et,W4e),e(W4e,bCr),e(Et,vCr),g(YA,Et,null),e(Sr,TCr),e(Sr,$o),g(KA,$o,null),e($o,FCr),e($o,Q4e),e(Q4e,CCr),e($o,MCr),e($o,Mn),e(Mn,ECr),e(Mn,H4e),e(H4e,yCr),e(Mn,wCr),e(Mn,U4e),e(U4e,ACr),e(Mn,LCr),e(Mn,J4e),e(J4e,BCr),e(Mn,kCr),e($o,xCr),e($o,Y4e),e(Y4e,x9),e(x9,K4e),e(K4e,RCr),e(x9,SCr),e(x9,BG),e(BG,PCr),e(x9,$Cr),e($o,ICr),e($o,Z4e),e(Z4e,jCr),e($o,NCr),g(ZA,$o,null),bLe=!0},p(d,[u]){const e0={};u&2&&(e0.$$scope={dirty:u,ctx:d}),df.$set(e0);const ebe={};u&2&&(ebe.$$scope={dirty:u,ctx:d}),Gg.$set(ebe);const obe={};u&2&&(obe.$$scope={dirty:u,ctx:d}),Zg.$set(obe)},i(d){bLe||(h(ce.$$.fragment,d),h(Aa.$$.fragment,d),h(xC.$$.fragment,d),h(RC.$$.fragment,d),h(df.$$.fragment,d),h(SC.$$.fragment,d),h(PC.$$.fragment,d),h(jC.$$.fragment,d),h(NC.$$.fragment,d),h(DC.$$.fragment,d),h(qC.$$.fragment,d),h(OC.$$.fragment,d),h(zC.$$.fragment,d),h(VC.$$.fragment,d),h(WC.$$.fragment,d),h(QC.$$.fragment,d),h(HC.$$.fragment,d),h(YC.$$.fragment,d),h(Gg.$$.fragment,d),h(KC.$$.fragment,d),h(ZC.$$.fragment,d),h(eM.$$.fragment,d),h(oM.$$.fragment,d),h(aM.$$.fragment,d),h(Zg.$$.fragment,d),h(nM.$$.fragment,d),h(sM.$$.fragment,d),h(lM.$$.fragment,d),h(iM.$$.fragment,d),h(cM.$$.fragment,d),h(fM.$$.fragment,d),h(mM.$$.fragment,d),h(gM.$$.fragment,d),h(hM.$$.fragment,d),h(pM.$$.fragment,d),h(uM.$$.fragment,d),h(bM.$$.fragment,d),h(vM.$$.fragment,d),h(TM.$$.fragment,d),h(FM.$$.fragment,d),h(CM.$$.fragment,d),h(EM.$$.fragment,d),h(yM.$$.fragment,d),h(wM.$$.fragment,d),h(AM.$$.fragment,d),h(LM.$$.fragment,d),h(BM.$$.fragment,d),h(xM.$$.fragment,d),h(RM.$$.fragment,d),h(SM.$$.fragment,d),h(PM.$$.fragment,d),h($M.$$.fragment,d),h(IM.$$.fragment,d),h(NM.$$.fragment,d),h(DM.$$.fragment,d),h(qM.$$.fragment,d),h(OM.$$.fragment,d),h(GM.$$.fragment,d),h(XM.$$.fragment,d),h(VM.$$.fragment,d),h(WM.$$.fragment,d),h(QM.$$.fragment,d),h(HM.$$.fragment,d),h(UM.$$.fragment,d),h(JM.$$.fragment,d),h(KM.$$.fragment,d),h(ZM.$$.fragment,d),h(eE.$$.fragment,d),h(oE.$$.fragment,d),h(rE.$$.fragment,d),h(tE.$$.fragment,d),h(nE.$$.fragment,d),h(sE.$$.fragment,d),h(lE.$$.fragment,d),h(iE.$$.fragment,d),h(dE.$$.fragment,d),h(cE.$$.fragment,d),h(mE.$$.fragment,d),h(gE.$$.fragment,d),h(hE.$$.fragment,d),h(pE.$$.fragment,d),h(_E.$$.fragment,d),h(uE.$$.fragment,d),h(vE.$$.fragment,d),h(TE.$$.fragment,d),h(FE.$$.fragment,d),h(CE.$$.fragment,d),h(ME.$$.fragment,d),h(EE.$$.fragment,d),h(wE.$$.fragment,d),h(AE.$$.fragment,d),h(LE.$$.fragment,d),h(BE.$$.fragment,d),h(kE.$$.fragment,d),h(xE.$$.fragment,d),h(SE.$$.fragment,d),h(PE.$$.fragment,d),h($E.$$.fragment,d),h(IE.$$.fragment,d),h(jE.$$.fragment,d),h(NE.$$.fragment,d),h(qE.$$.fragment,d),h(OE.$$.fragment,d),h(GE.$$.fragment,d),h(XE.$$.fragment,d),h(zE.$$.fragment,d),h(VE.$$.fragment,d),h(QE.$$.fragment,d),h(HE.$$.fragment,d),h(UE.$$.fragment,d),h(JE.$$.fragment,d),h(YE.$$.fragment,d),h(KE.$$.fragment,d),h(e3.$$.fragment,d),h(o3.$$.fragment,d),h(r3.$$.fragment,d),h(t3.$$.fragment,d),h(a3.$$.fragment,d),h(n3.$$.fragment,d),h(l3.$$.fragment,d),h(i3.$$.fragment,d),h(d3.$$.fragment,d),h(c3.$$.fragment,d),h(f3.$$.fragment,d),h(m3.$$.fragment,d),h(h3.$$.fragment,d),h(p3.$$.fragment,d),h(_3.$$.fragment,d),h(b3.$$.fragment,d),h(v3.$$.fragment,d),h(T3.$$.fragment,d),h(C3.$$.fragment,d),h(M3.$$.fragment,d),h(E3.$$.fragment,d),h(y3.$$.fragment,d),h(w3.$$.fragment,d),h(A3.$$.fragment,d),h(B3.$$.fragment,d),h(k3.$$.fragment,d),h(x3.$$.fragment,d),h(R3.$$.fragment,d),h(S3.$$.fragment,d),h(P3.$$.fragment,d),h(I3.$$.fragment,d),h(j3.$$.fragment,d),h(N3.$$.fragment,d),h(D3.$$.fragment,d),h(q3.$$.fragment,d),h(O3.$$.fragment,d),h(X3.$$.fragment,d),h(z3.$$.fragment,d),h(V3.$$.fragment,d),h(W3.$$.fragment,d),h(Q3.$$.fragment,d),h(H3.$$.fragment,d),h(J3.$$.fragment,d),h(Y3.$$.fragment,d),h(K3.$$.fragment,d),h(Z3.$$.fragment,d),h(ey.$$.fragment,d),h(oy.$$.fragment,d),h(ty.$$.fragment,d),h(ay.$$.fragment,d),h(ny.$$.fragment,d),h(sy.$$.fragment,d),h(ly.$$.fragment,d),h(iy.$$.fragment,d),h(cy.$$.fragment,d),h(fy.$$.fragment,d),h(my.$$.fragment,d),h(gy.$$.fragment,d),h(hy.$$.fragment,d),h(py.$$.fragment,d),h(uy.$$.fragment,d),h(by.$$.fragment,d),h(vy.$$.fragment,d),h(Ty.$$.fragment,d),h(Fy.$$.fragment,d),h(Cy.$$.fragment,d),h(Ey.$$.fragment,d),h(yy.$$.fragment,d),h(wy.$$.fragment,d),h(Ay.$$.fragment,d),h(Ly.$$.fragment,d),h(By.$$.fragment,d),h(xy.$$.fragment,d),h(Ry.$$.fragment,d),h(Sy.$$.fragment,d),h(Py.$$.fragment,d),h($y.$$.fragment,d),h(Iy.$$.fragment,d),h(Ny.$$.fragment,d),h(Dy.$$.fragment,d),h(qy.$$.fragment,d),h(Oy.$$.fragment,d),h(Gy.$$.fragment,d),h(Xy.$$.fragment,d),h(Vy.$$.fragment,d),h(Wy.$$.fragment,d),h(Qy.$$.fragment,d),h(Hy.$$.fragment,d),h(Uy.$$.fragment,d),h(Jy.$$.fragment,d),h(Ky.$$.fragment,d),h(Zy.$$.fragment,d),h(ew.$$.fragment,d),h(ow.$$.fragment,d),h(rw.$$.fragment,d),h(tw.$$.fragment,d),h(nw.$$.fragment,d),h(sw.$$.fragment,d),h(lw.$$.fragment,d),h(iw.$$.fragment,d),h(dw.$$.fragment,d),h(cw.$$.fragment,d),h(mw.$$.fragment,d),h(gw.$$.fragment,d),h(hw.$$.fragment,d),h(pw.$$.fragment,d),h(_w.$$.fragment,d),h(uw.$$.fragment,d),h(vw.$$.fragment,d),h(Tw.$$.fragment,d),h(Fw.$$.fragment,d),h(Cw.$$.fragment,d),h(Mw.$$.fragment,d),h(Ew.$$.fragment,d),h(ww.$$.fragment,d),h(Aw.$$.fragment,d),h(Lw.$$.fragment,d),h(Bw.$$.fragment,d),h(kw.$$.fragment,d),h(xw.$$.fragment,d),h(Sw.$$.fragment,d),h(Pw.$$.fragment,d),h($w.$$.fragment,d),h(Iw.$$.fragment,d),h(jw.$$.fragment,d),h(Nw.$$.fragment,d),h(qw.$$.fragment,d),h(Ow.$$.fragment,d),h(Gw.$$.fragment,d),h(Xw.$$.fragment,d),h(zw.$$.fragment,d),h(Vw.$$.fragment,d),h(Qw.$$.fragment,d),h(Hw.$$.fragment,d),h(Uw.$$.fragment,d),h(Jw.$$.fragment,d),h(Yw.$$.fragment,d),h(Kw.$$.fragment,d),h(eA.$$.fragment,d),h(oA.$$.fragment,d),h(rA.$$.fragment,d),h(tA.$$.fragment,d),h(aA.$$.fragment,d),h(nA.$$.fragment,d),h(lA.$$.fragment,d),h(iA.$$.fragment,d),h(dA.$$.fragment,d),h(cA.$$.fragment,d),h(fA.$$.fragment,d),h(mA.$$.fragment,d),h(hA.$$.fragment,d),h(pA.$$.fragment,d),h(_A.$$.fragment,d),h(uA.$$.fragment,d),h(bA.$$.fragment,d),h(vA.$$.fragment,d),h(FA.$$.fragment,d),h(CA.$$.fragment,d),h(MA.$$.fragment,d),h(EA.$$.fragment,d),h(yA.$$.fragment,d),h(wA.$$.fragment,d),h(LA.$$.fragment,d),h(BA.$$.fragment,d),h(kA.$$.fragment,d),h(xA.$$.fragment,d),h(RA.$$.fragment,d),h(SA.$$.fragment,d),h($A.$$.fragment,d),h(IA.$$.fragment,d),h(jA.$$.fragment,d),h(NA.$$.fragment,d),h(DA.$$.fragment,d),h(qA.$$.fragment,d),h(GA.$$.fragment,d),h(XA.$$.fragment,d),h(zA.$$.fragment,d),h(WA.$$.fragment,d),h(QA.$$.fragment,d),h(HA.$$.fragment,d),h(JA.$$.fragment,d),h(YA.$$.fragment,d),h(KA.$$.fragment,d),h(ZA.$$.fragment,d),bLe=!0)},o(d){p(ce.$$.fragment,d),p(Aa.$$.fragment,d),p(xC.$$.fragment,d),p(RC.$$.fragment,d),p(df.$$.fragment,d),p(SC.$$.fragment,d),p(PC.$$.fragment,d),p(jC.$$.fragment,d),p(NC.$$.fragment,d),p(DC.$$.fragment,d),p(qC.$$.fragment,d),p(OC.$$.fragment,d),p(zC.$$.fragment,d),p(VC.$$.fragment,d),p(WC.$$.fragment,d),p(QC.$$.fragment,d),p(HC.$$.fragment,d),p(YC.$$.fragment,d),p(Gg.$$.fragment,d),p(KC.$$.fragment,d),p(ZC.$$.fragment,d),p(eM.$$.fragment,d),p(oM.$$.fragment,d),p(aM.$$.fragment,d),p(Zg.$$.fragment,d),p(nM.$$.fragment,d),p(sM.$$.fragment,d),p(lM.$$.fragment,d),p(iM.$$.fragment,d),p(cM.$$.fragment,d),p(fM.$$.fragment,d),p(mM.$$.fragment,d),p(gM.$$.fragment,d),p(hM.$$.fragment,d),p(pM.$$.fragment,d),p(uM.$$.fragment,d),p(bM.$$.fragment,d),p(vM.$$.fragment,d),p(TM.$$.fragment,d),p(FM.$$.fragment,d),p(CM.$$.fragment,d),p(EM.$$.fragment,d),p(yM.$$.fragment,d),p(wM.$$.fragment,d),p(AM.$$.fragment,d),p(LM.$$.fragment,d),p(BM.$$.fragment,d),p(xM.$$.fragment,d),p(RM.$$.fragment,d),p(SM.$$.fragment,d),p(PM.$$.fragment,d),p($M.$$.fragment,d),p(IM.$$.fragment,d),p(NM.$$.fragment,d),p(DM.$$.fragment,d),p(qM.$$.fragment,d),p(OM.$$.fragment,d),p(GM.$$.fragment,d),p(XM.$$.fragment,d),p(VM.$$.fragment,d),p(WM.$$.fragment,d),p(QM.$$.fragment,d),p(HM.$$.fragment,d),p(UM.$$.fragment,d),p(JM.$$.fragment,d),p(KM.$$.fragment,d),p(ZM.$$.fragment,d),p(eE.$$.fragment,d),p(oE.$$.fragment,d),p(rE.$$.fragment,d),p(tE.$$.fragment,d),p(nE.$$.fragment,d),p(sE.$$.fragment,d),p(lE.$$.fragment,d),p(iE.$$.fragment,d),p(dE.$$.fragment,d),p(cE.$$.fragment,d),p(mE.$$.fragment,d),p(gE.$$.fragment,d),p(hE.$$.fragment,d),p(pE.$$.fragment,d),p(_E.$$.fragment,d),p(uE.$$.fragment,d),p(vE.$$.fragment,d),p(TE.$$.fragment,d),p(FE.$$.fragment,d),p(CE.$$.fragment,d),p(ME.$$.fragment,d),p(EE.$$.fragment,d),p(wE.$$.fragment,d),p(AE.$$.fragment,d),p(LE.$$.fragment,d),p(BE.$$.fragment,d),p(kE.$$.fragment,d),p(xE.$$.fragment,d),p(SE.$$.fragment,d),p(PE.$$.fragment,d),p($E.$$.fragment,d),p(IE.$$.fragment,d),p(jE.$$.fragment,d),p(NE.$$.fragment,d),p(qE.$$.fragment,d),p(OE.$$.fragment,d),p(GE.$$.fragment,d),p(XE.$$.fragment,d),p(zE.$$.fragment,d),p(VE.$$.fragment,d),p(QE.$$.fragment,d),p(HE.$$.fragment,d),p(UE.$$.fragment,d),p(JE.$$.fragment,d),p(YE.$$.fragment,d),p(KE.$$.fragment,d),p(e3.$$.fragment,d),p(o3.$$.fragment,d),p(r3.$$.fragment,d),p(t3.$$.fragment,d),p(a3.$$.fragment,d),p(n3.$$.fragment,d),p(l3.$$.fragment,d),p(i3.$$.fragment,d),p(d3.$$.fragment,d),p(c3.$$.fragment,d),p(f3.$$.fragment,d),p(m3.$$.fragment,d),p(h3.$$.fragment,d),p(p3.$$.fragment,d),p(_3.$$.fragment,d),p(b3.$$.fragment,d),p(v3.$$.fragment,d),p(T3.$$.fragment,d),p(C3.$$.fragment,d),p(M3.$$.fragment,d),p(E3.$$.fragment,d),p(y3.$$.fragment,d),p(w3.$$.fragment,d),p(A3.$$.fragment,d),p(B3.$$.fragment,d),p(k3.$$.fragment,d),p(x3.$$.fragment,d),p(R3.$$.fragment,d),p(S3.$$.fragment,d),p(P3.$$.fragment,d),p(I3.$$.fragment,d),p(j3.$$.fragment,d),p(N3.$$.fragment,d),p(D3.$$.fragment,d),p(q3.$$.fragment,d),p(O3.$$.fragment,d),p(X3.$$.fragment,d),p(z3.$$.fragment,d),p(V3.$$.fragment,d),p(W3.$$.fragment,d),p(Q3.$$.fragment,d),p(H3.$$.fragment,d),p(J3.$$.fragment,d),p(Y3.$$.fragment,d),p(K3.$$.fragment,d),p(Z3.$$.fragment,d),p(ey.$$.fragment,d),p(oy.$$.fragment,d),p(ty.$$.fragment,d),p(ay.$$.fragment,d),p(ny.$$.fragment,d),p(sy.$$.fragment,d),p(ly.$$.fragment,d),p(iy.$$.fragment,d),p(cy.$$.fragment,d),p(fy.$$.fragment,d),p(my.$$.fragment,d),p(gy.$$.fragment,d),p(hy.$$.fragment,d),p(py.$$.fragment,d),p(uy.$$.fragment,d),p(by.$$.fragment,d),p(vy.$$.fragment,d),p(Ty.$$.fragment,d),p(Fy.$$.fragment,d),p(Cy.$$.fragment,d),p(Ey.$$.fragment,d),p(yy.$$.fragment,d),p(wy.$$.fragment,d),p(Ay.$$.fragment,d),p(Ly.$$.fragment,d),p(By.$$.fragment,d),p(xy.$$.fragment,d),p(Ry.$$.fragment,d),p(Sy.$$.fragment,d),p(Py.$$.fragment,d),p($y.$$.fragment,d),p(Iy.$$.fragment,d),p(Ny.$$.fragment,d),p(Dy.$$.fragment,d),p(qy.$$.fragment,d),p(Oy.$$.fragment,d),p(Gy.$$.fragment,d),p(Xy.$$.fragment,d),p(Vy.$$.fragment,d),p(Wy.$$.fragment,d),p(Qy.$$.fragment,d),p(Hy.$$.fragment,d),p(Uy.$$.fragment,d),p(Jy.$$.fragment,d),p(Ky.$$.fragment,d),p(Zy.$$.fragment,d),p(ew.$$.fragment,d),p(ow.$$.fragment,d),p(rw.$$.fragment,d),p(tw.$$.fragment,d),p(nw.$$.fragment,d),p(sw.$$.fragment,d),p(lw.$$.fragment,d),p(iw.$$.fragment,d),p(dw.$$.fragment,d),p(cw.$$.fragment,d),p(mw.$$.fragment,d),p(gw.$$.fragment,d),p(hw.$$.fragment,d),p(pw.$$.fragment,d),p(_w.$$.fragment,d),p(uw.$$.fragment,d),p(vw.$$.fragment,d),p(Tw.$$.fragment,d),p(Fw.$$.fragment,d),p(Cw.$$.fragment,d),p(Mw.$$.fragment,d),p(Ew.$$.fragment,d),p(ww.$$.fragment,d),p(Aw.$$.fragment,d),p(Lw.$$.fragment,d),p(Bw.$$.fragment,d),p(kw.$$.fragment,d),p(xw.$$.fragment,d),p(Sw.$$.fragment,d),p(Pw.$$.fragment,d),p($w.$$.fragment,d),p(Iw.$$.fragment,d),p(jw.$$.fragment,d),p(Nw.$$.fragment,d),p(qw.$$.fragment,d),p(Ow.$$.fragment,d),p(Gw.$$.fragment,d),p(Xw.$$.fragment,d),p(zw.$$.fragment,d),p(Vw.$$.fragment,d),p(Qw.$$.fragment,d),p(Hw.$$.fragment,d),p(Uw.$$.fragment,d),p(Jw.$$.fragment,d),p(Yw.$$.fragment,d),p(Kw.$$.fragment,d),p(eA.$$.fragment,d),p(oA.$$.fragment,d),p(rA.$$.fragment,d),p(tA.$$.fragment,d),p(aA.$$.fragment,d),p(nA.$$.fragment,d),p(lA.$$.fragment,d),p(iA.$$.fragment,d),p(dA.$$.fragment,d),p(cA.$$.fragment,d),p(fA.$$.fragment,d),p(mA.$$.fragment,d),p(hA.$$.fragment,d),p(pA.$$.fragment,d),p(_A.$$.fragment,d),p(uA.$$.fragment,d),p(bA.$$.fragment,d),p(vA.$$.fragment,d),p(FA.$$.fragment,d),p(CA.$$.fragment,d),p(MA.$$.fragment,d),p(EA.$$.fragment,d),p(yA.$$.fragment,d),p(wA.$$.fragment,d),p(LA.$$.fragment,d),p(BA.$$.fragment,d),p(kA.$$.fragment,d),p(xA.$$.fragment,d),p(RA.$$.fragment,d),p(SA.$$.fragment,d),p($A.$$.fragment,d),p(IA.$$.fragment,d),p(jA.$$.fragment,d),p(NA.$$.fragment,d),p(DA.$$.fragment,d),p(qA.$$.fragment,d),p(GA.$$.fragment,d),p(XA.$$.fragment,d),p(zA.$$.fragment,d),p(WA.$$.fragment,d),p(QA.$$.fragment,d),p(HA.$$.fragment,d),p(JA.$$.fragment,d),p(YA.$$.fragment,d),p(KA.$$.fragment,d),p(ZA.$$.fragment,d),bLe=!1},d(d){t(J),d&&t(Ae),d&&t(ie),_(ce),d&&t(tf),d&&t(Zt),d&&t(ye),d&&t(lo),d&&t(nf),_(Aa,d),d&&t(io),d&&t(ge),d&&t(No),d&&t(La),d&&t(M0e),d&&t(vi),_(xC),d&&t(E0e),d&&t(Ln),d&&t(y0e),_(RC,d),d&&t(w0e),d&&t(o6),d&&t(A0e),_(df,d),d&&t(L0e),d&&t(Ti),_(SC),d&&t(B0e),d&&t(Do),_(PC),_(jC),_(NC),_(DC),d&&t(k0e),d&&t(Ci),_(qC),d&&t(x0e),d&&t(qo),_(OC),_(zC),_(VC),_(WC),d&&t(R0e),d&&t(Mi),_(QC),d&&t(S0e),d&&t(Oo),_(HC),_(YC),_(Gg),_(KC),_(ZC),d&&t(P0e),d&&t(Ei),_(eM),d&&t($0e),d&&t(Go),_(oM),_(aM),_(Zg),_(nM),_(sM),d&&t(I0e),d&&t(wi),_(lM),d&&t(j0e),d&&t(Xo),_(iM),_(cM),_(fM),_(mM),_(gM),d&&t(N0e),d&&t(Bi),_(hM),d&&t(D0e),d&&t(zo),_(pM),_(uM),_(bM),_(vM),_(TM),d&&t(q0e),d&&t(Ri),_(FM),d&&t(O0e),d&&t(Vo),_(CM),_(EM),_(yM),_(wM),_(AM),d&&t(G0e),d&&t($i),_(LM),d&&t(X0e),d&&t(Wo),_(BM),_(xM),_(RM),_(SM),_(PM),d&&t(z0e),d&&t(Ni),_($M),d&&t(V0e),d&&t(Qo),_(IM),_(NM),_(DM),_(qM),_(OM),d&&t(W0e),d&&t(Oi),_(GM),d&&t(Q0e),d&&t(Ho),_(XM),_(VM),_(WM),_(QM),_(HM),d&&t(H0e),d&&t(zi),_(UM),d&&t(U0e),d&&t(Uo),_(JM),_(KM),_(ZM),_(eE),_(oE),d&&t(J0e),d&&t(Qi),_(rE),d&&t(Y0e),d&&t(Jo),_(tE),_(nE),_(sE),_(lE),_(iE),d&&t(K0e),d&&t(Ji),_(dE),d&&t(Z0e),d&&t(Yo),_(cE),_(mE),_(gE),_(hE),_(pE),d&&t(e6e),d&&t(Zi),_(_E),d&&t(o6e),d&&t(Ko),_(uE),_(vE),_(TE),_(FE),_(CE),d&&t(r6e),d&&t(rd),_(ME),d&&t(t6e),d&&t(Zo),_(EE),_(wE),_(AE),_(LE),_(BE),d&&t(a6e),d&&t(nd),_(kE),d&&t(n6e),d&&t(er),_(xE),_(SE),_(PE),_($E),_(IE),d&&t(s6e),d&&t(id),_(jE),d&&t(l6e),d&&t(or),_(NE),_(qE),_(OE),_(GE),_(XE),d&&t(i6e),d&&t(fd),_(zE),d&&t(d6e),d&&t(rr),_(VE),_(QE),_(HE),_(UE),_(JE),d&&t(c6e),d&&t(hd),_(YE),d&&t(f6e),d&&t(tr),_(KE),_(e3),_(o3),_(r3),_(t3),d&&t(m6e),d&&t(bd),_(a3),d&&t(g6e),d&&t(ar),_(n3),_(l3),_(i3),_(d3),_(c3),d&&t(h6e),d&&t(Fd),_(f3),d&&t(p6e),d&&t(nr),_(m3),_(h3),_(p3),_(_3),_(b3),d&&t(_6e),d&&t(Ed),_(v3),d&&t(u6e),d&&t(sr),_(T3),_(C3),_(M3),_(E3),_(y3),d&&t(b6e),d&&t(Ld),_(w3),d&&t(v6e),d&&t(lr),_(A3),_(B3),_(k3),_(x3),_(R3),d&&t(T6e),d&&t(Rd),_(S3),d&&t(F6e),d&&t(ir),_(P3),_(I3),_(j3),_(N3),_(D3),d&&t(C6e),d&&t($d),_(q3),d&&t(M6e),d&&t(dr),_(O3),_(X3),_(z3),_(V3),_(W3),d&&t(E6e),d&&t(Nd),_(Q3),d&&t(y6e),d&&t(cr),_(H3),_(J3),_(Y3),_(K3),_(Z3),d&&t(w6e),d&&t(Od),_(ey),d&&t(A6e),d&&t(fr),_(oy),_(ty),_(ay),_(ny),_(sy),d&&t(L6e),d&&t(zd),_(ly),d&&t(B6e),d&&t(mr),_(iy),_(cy),_(fy),_(my),_(gy),d&&t(k6e),d&&t(Qd),_(hy),d&&t(x6e),d&&t(gr),_(py),_(uy),_(by),_(vy),_(Ty),d&&t(R6e),d&&t(Jd),_(Fy),d&&t(S6e),d&&t(hr),_(Cy),_(Ey),_(yy),_(wy),_(Ay),d&&t(P6e),d&&t(Zd),_(Ly),d&&t($6e),d&&t(pr),_(By),_(xy),_(Ry),_(Sy),_(Py),d&&t(I6e),d&&t(rc),_($y),d&&t(j6e),d&&t(_r),_(Iy),_(Ny),_(Dy),_(qy),_(Oy),d&&t(N6e),d&&t(nc),_(Gy),d&&t(D6e),d&&t(ur),_(Xy),_(Vy),_(Wy),_(Qy),_(Hy),d&&t(q6e),d&&t(ic),_(Uy),d&&t(O6e),d&&t(br),_(Jy),_(Ky),_(Zy),_(ew),_(ow),d&&t(G6e),d&&t(fc),_(rw),d&&t(X6e),d&&t(vr),_(tw),_(nw),_(sw),_(lw),_(iw),d&&t(z6e),d&&t(hc),_(dw),d&&t(V6e),d&&t(Tr),_(cw),_(mw),_(gw),_(hw),_(pw),d&&t(W6e),d&&t(uc),_(_w),d&&t(Q6e),d&&t(Fr),_(uw),_(vw),_(Tw),_(Fw),_(Cw),d&&t(H6e),d&&t(Tc),_(Mw),d&&t(U6e),d&&t(Cr),_(Ew),_(ww),_(Aw),_(Lw),_(Bw),d&&t(J6e),d&&t(Mc),_(kw),d&&t(Y6e),d&&t(Mr),_(xw),_(Sw),_(Pw),_($w),_(Iw),d&&t(K6e),d&&t(wc),_(jw),d&&t(Z6e),d&&t(Er),_(Nw),_(qw),_(Ow),_(Gw),_(Xw),d&&t(eLe),d&&t(Bc),_(zw),d&&t(oLe),d&&t(yr),_(Vw),_(Qw),_(Hw),_(Uw),_(Jw),d&&t(rLe),d&&t(Rc),_(Yw),d&&t(tLe),d&&t(wr),_(Kw),_(eA),_(oA),_(rA),_(tA),d&&t(aLe),d&&t($c),_(aA),d&&t(nLe),d&&t(Ar),_(nA),_(lA),_(iA),_(dA),_(cA),d&&t(sLe),d&&t(Nc),_(fA),d&&t(lLe),d&&t(Lr),_(mA),_(hA),_(pA),_(_A),_(uA),d&&t(iLe),d&&t(Oc),_(bA),d&&t(dLe),d&&t(Br),_(vA),_(FA),_(CA),_(MA),_(EA),d&&t(cLe),d&&t(zc),_(yA),d&&t(fLe),d&&t(kr),_(wA),_(LA),_(BA),_(kA),_(xA),d&&t(mLe),d&&t(Qc),_(RA),d&&t(gLe),d&&t(xr),_(SA),_($A),_(IA),_(jA),_(NA),d&&t(hLe),d&&t(Jc),_(DA),d&&t(pLe),d&&t(Rr),_(qA),_(GA),_(XA),_(zA),_(WA),d&&t(_Le),d&&t(Zc),_(QA),d&&t(uLe),d&&t(Sr),_(HA),_(JA),_(YA),_(KA),_(ZA)}}}const dmt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cmt(fi,J,Ae){let{fw:ie}=J;return fi.$$set=me=>{"fw"in me&&Ae(0,ie=me.fw)},[ie]}class umt extends omt{constructor(J){super();rmt(this,J,cmt,imt,tmt,{fw:0})}}export{umt as default,dmt as metadata};
