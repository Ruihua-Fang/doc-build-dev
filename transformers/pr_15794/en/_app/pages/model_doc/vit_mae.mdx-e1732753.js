import{S as da,i as ca,s as ha,e as r,k as d,w as T,t as s,M as ma,c as a,d as o,m as c,a as n,x as E,h as i,b as l,N as fa,F as e,g as m,y as w,q as b,o as M,B as A}from"../../chunks/vendor-22ad994f.js";import{T as la}from"../../chunks/Tip-540f533b.js";import{D as ht}from"../../chunks/Docstring-3bc3620c.js";import{C as Tr}from"../../chunks/CodeBlock-03069293.js";import{I as mt}from"../../chunks/IconCopyLink-2eb9a001.js";import"../../chunks/CopyButton-f539c482.js";function pa(te){let f,y,p,u,x;return{c(){f=r("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=r("code"),u=s("Module"),x=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){f=a(g,"P",{});var _=n(f);y=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(_,"CODE",{});var P=n(p);u=i(P,"Module"),P.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(g,_){m(g,f,_),e(f,y),e(f,p),e(p,u),e(f,x)},d(g){g&&o(f)}}}function ua(te){let f,y,p,u,x;return{c(){f=r("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=r("code"),u=s("Module"),x=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){f=a(g,"P",{});var _=n(f);y=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(_,"CODE",{});var P=n(p);u=i(P,"Module"),P.forEach(o),x=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(g,_){m(g,f,_),e(f,y),e(f,p),e(p,u),e(f,x)},d(g){g&&o(f)}}}function ga(te){let f,y,p,u,x,g,_,P,Dt,ft,S,X,Be,oe,Lt,Ye,Ot,pt,G,Ht,re,Wt,Ut,ut,ke,Rt,gt,xe,Je,Kt,_t,Pe,Xt,vt,V,ae,Gt,Fe,Bt,Yt,Jt,D,Qt,Ce,Zt,eo,ne,to,oo,ro,se,ao,je,no,so,io,ie,lo,ze,co,ho,mo,Qe,fo,Tt,B,Er,Et,le,po,qe,uo,wt,j,go,de,_o,vo,ce,To,Eo,bt,L,Y,Ze,he,wo,et,bo,Mt,v,me,Mo,O,Ao,Ie,yo,Vo,fe,$o,ko,xo,H,Po,Ne,Fo,Co,Se,jo,zo,qo,tt,Io,No,pe,At,W,J,ot,ue,So,rt,Do,yt,F,ge,Lo,_e,Oo,ve,Ho,Wo,Uo,$,Te,Ro,U,Ko,De,Xo,Go,at,Bo,Yo,Jo,Q,Qo,nt,Zo,er,Ee,Vt,R,Z,st,we,tr,it,or,$t,C,be,rr,Me,ar,Ae,nr,sr,ir,k,ye,lr,K,dr,Le,cr,hr,lt,mr,fr,pr,ee,ur,dt,gr,_r,Ve,kt;return g=new mt({}),oe=new mt({}),he=new mt({}),me=new ht({props:{name:"class transformers.ViTMAEConfig",anchor:"transformers.ViTMAEConfig",parameters:[{name:"hidden_size",val:" = 768"},{name:"num_hidden_layers",val:" = 12"},{name:"num_attention_heads",val:" = 12"},{name:"intermediate_size",val:" = 3072"},{name:"hidden_act",val:" = 'gelu'"},{name:"hidden_dropout_prob",val:" = 0.0"},{name:"attention_probs_dropout_prob",val:" = 0.0"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"image_size",val:" = 224"},{name:"patch_size",val:" = 16"},{name:"num_channels",val:" = 3"},{name:"qkv_bias",val:" = True"},{name:"decoder_num_attention_heads",val:" = 16"},{name:"decoder_hidden_size",val:" = 512"},{name:"decoder_num_hidden_layers",val:" = 8"},{name:"decoder_intermediate_size",val:" = 2048"},{name:"mask_ratio",val:" = 0.75"},{name:"norm_pix_loss",val:" = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/vit_mae/configuration_vit_mae.py#L29",parametersDescription:[{anchor:"transformers.ViTMAEConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 768) &#x2014;
Dimensionality of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.ViTMAEConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.ViTMAEConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 3072) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.ViTMAEConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ViTMAEConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.ViTMAEConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.ViTMAEConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ViTMAEConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ViTMAEConfig.image_size",description:`<strong>image_size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
The size (resolution) of each image.`,name:"image_size"},{anchor:"transformers.ViTMAEConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 16) &#x2014;
The size (resolution) of each patch.`,name:"patch_size"},{anchor:"transformers.ViTMAEConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ViTMAEConfig.qkv_bias",description:`<strong>qkv_bias</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to add a bias to the queries, keys and values.`,name:"qkv_bias"},{anchor:"transformers.ViTMAEConfig.decoder_num_attention_heads",description:`<strong>decoder_num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 12) &#x2014;
Number of attention heads for each attention layer in the decoder.`,name:"decoder_num_attention_heads"},{anchor:"transformers.ViTMAEConfig.decoder_hidden_size",description:`<strong>decoder_hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 512) &#x2014;
Dimensionality of the decoder.`,name:"decoder_hidden_size"},{anchor:"transformers.ViTMAEConfig.decoder_num_hidden_layers",description:`<strong>decoder_num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
Number of hidden layers in the decoder.`,name:"decoder_num_hidden_layers"},{anchor:"transformers.ViTMAEConfig.decoder_intermediate_size",description:`<strong>decoder_intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 2048) &#x2014;
Dimensionality of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the decoder.`,name:"decoder_intermediate_size"},{anchor:"transformers.ViTMAEConfig.mask_ratio",description:`<strong>mask_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.75) &#x2014;
The ratio of the number of masked tokens in the input sequence.`,name:"mask_ratio"},{anchor:"transformers.ViTMAEConfig.norm_pix_loss",description:`<strong>norm_pix_loss</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to train with normalized pixels (see Table 3 in the paper). Using normalized pixels improved
representation quality in the experiments of the authors.`,name:"norm_pix_loss"}]}}),pe=new Tr({props:{code:`from transformers import ViTMAEModel, ViTMAEConfig

# Initializing a ViT MAE vit-mae-base style configuration
configuration = ViTMAEConfig()

# Initializing a model from the vit-mae-base style configuration
model = ViTMAEModel(configuration)

# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ViTMAEModel, ViTMAEConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ViT MAE vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ViTMAEConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the vit-mae-base style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),ue=new mt({}),ge=new ht({props:{name:"class transformers.ViTMAEModel",anchor:"transformers.ViTMAEModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/vit_mae/modeling_vit_mae.py#L630",parametersDescription:[{anchor:"transformers.ViTMAEModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Te=new ht({props:{name:"forward",anchor:"transformers.ViTMAEModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/vit_mae/modeling_vit_mae.py#L654",parametersDescription:[{anchor:"transformers.ViTMAEModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15794/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEModelOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),Q=new la({props:{$$slots:{default:[pa]},$$scope:{ctx:te}}}),Ee=new Tr({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEModel
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEModel.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
last_hidden_states = outputs.last_hidden_state,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEModel.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state`}}),we=new mt({}),be=new ht({props:{name:"class transformers.ViTMAEForPreTraining",anchor:"transformers.ViTMAEForPreTraining",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/vit_mae/modeling_vit_mae.py#L832",parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15794/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ye=new ht({props:{name:"forward",anchor:"transformers.ViTMAEForPreTraining.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"head_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15794/src/transformers/models/vit_mae/modeling_vit_mae.py#L896",parametersDescription:[{anchor:"transformers.ViTMAEForPreTraining.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15794/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ViTMAEForPreTraining.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.ViTMAEForPreTraining.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ViTMAEForPreTraining.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15794/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEConfig"
>ViTMAEConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>) \u2014 Pixel reconstruction loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, patch_size ** 2 * num_channels)</code>) \u2014 Pixel reconstruction logits.</li>
<li><strong>mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor indicating which patches are masked (1) and which are not (0).</li>
<li><strong>ids_restore</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) \u2014 Tensor containing the original index of the (shuffled) masked patches.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the model at the output of each layer
plus the initial embedding outputs.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights after the attention softmax, used to compute the weighted average in
the self-attention heads.</li>
</ul>
`,returnType:`
<p><code>transformers.models.vit_mae.modeling_vit_mae.ViTMAEForPreTrainingOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),ee=new la({props:{$$slots:{default:[ua]},$$scope:{ctx:te}}}),Ve=new Tr({props:{code:`from transformers import AutoFeatureExtractor, ViTMAEForPreTraining
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/vit-mae-base")
model = ViTMAEForPreTraining.from_pretrained("facebook/vit-mae-base")

inputs = feature_extractor(images=image, return_tensors="pt")
outputs = model(**inputs)
loss = outputs.loss
mask = outputs.mask
ids_restore = outputs.ids_restore,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor, ViTMAEForPreTraining
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ViTMAEForPreTraining.from_pretrained(<span class="hljs-string">&quot;facebook/vit-mae-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = outputs.loss
<span class="hljs-meta">&gt;&gt;&gt; </span>mask = outputs.mask
<span class="hljs-meta">&gt;&gt;&gt; </span>ids_restore = outputs.ids_restore`}}),{c(){f=r("meta"),y=d(),p=r("h1"),u=r("a"),x=r("span"),T(g.$$.fragment),_=d(),P=r("span"),Dt=s("ViTMAE"),ft=d(),S=r("h2"),X=r("a"),Be=r("span"),T(oe.$$.fragment),Lt=d(),Ye=r("span"),Ot=s("Overview"),pt=d(),G=r("p"),Ht=s("The ViTMAE model was proposed in "),re=r("a"),Wt=s("Masked Autoencoders Are Scalable Vision Learners"),Ut=s(` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),ut=d(),ke=r("p"),Rt=s("The abstract from the paper is the following:"),gt=d(),xe=r("p"),Je=r("em"),Kt=s(`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),_t=d(),Pe=r("p"),Xt=s("Tips:"),vt=d(),V=r("ul"),ae=r("li"),Gt=s(`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),Fe=r("a"),Bt=s("ViTMAEForPreTraining"),Yt=s(" for this purpose."),Jt=d(),D=r("li"),Qt=s("A notebook that illustrates how to visualize reconstructed pixel values with "),Ce=r("a"),Zt=s("ViTMAEForPreTraining"),eo=s(" can be found "),ne=r("a"),to=s("here"),oo=s("."),ro=d(),se=r("li"),ao=s(`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),je=r("a"),no=s("ViTForImageClassification"),so=s("."),io=d(),ie=r("li"),lo=s("One can use "),ze=r("a"),co=s("ViTFeatureExtractor"),ho=s(" to prepare images for the model. See the code examples for more info."),mo=d(),Qe=r("li"),fo=s(`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),Tt=d(),B=r("img"),Et=d(),le=r("small"),po=s("MAE architecture. Taken from the "),qe=r("a"),uo=s("original paper."),wt=d(),j=r("p"),go=s("This model was contributed by "),de=r("a"),_o=s("nielsr"),vo=s(". The original code can be found "),ce=r("a"),To=s("here"),Eo=s("."),bt=d(),L=r("h2"),Y=r("a"),Ze=r("span"),T(he.$$.fragment),wo=d(),et=r("span"),bo=s("ViTMAEConfig"),Mt=d(),v=r("div"),T(me.$$.fragment),Mo=d(),O=r("p"),Ao=s("This is the configuration class to store the configuration of a "),Ie=r("a"),yo=s("ViTMAEModel"),Vo=s(`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),fe=r("a"),$o=s("facebook/vit-mae-base"),ko=s(" architecture."),xo=d(),H=r("p"),Po=s("Configuration objects inherit from "),Ne=r("a"),Fo=s("PretrainedConfig"),Co=s(` and can be used to control the model outputs. Read the
documentation from `),Se=r("a"),jo=s("PretrainedConfig"),zo=s(" for more information."),qo=d(),tt=r("p"),Io=s("Example:"),No=d(),T(pe.$$.fragment),At=d(),W=r("h2"),J=r("a"),ot=r("span"),T(ue.$$.fragment),So=d(),rt=r("span"),Do=s("ViTMAEModel"),yt=d(),F=r("div"),T(ge.$$.fragment),Lo=d(),_e=r("p"),Oo=s(`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ve=r("a"),Ho=s("torch.nn.Module"),Wo=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Uo=d(),$=r("div"),T(Te.$$.fragment),Ro=d(),U=r("p"),Ko=s("The "),De=r("a"),Xo=s("ViTMAEModel"),Go=s(" forward method, overrides the "),at=r("code"),Bo=s("__call__"),Yo=s(" special method."),Jo=d(),T(Q.$$.fragment),Qo=d(),nt=r("p"),Zo=s("Examples:"),er=d(),T(Ee.$$.fragment),Vt=d(),R=r("h2"),Z=r("a"),st=r("span"),T(we.$$.fragment),tr=d(),it=r("span"),or=s("ViTMAEForPreTraining"),$t=d(),C=r("div"),T(be.$$.fragment),rr=d(),Me=r("p"),ar=s(`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),Ae=r("a"),nr=s("torch.nn.Module"),sr=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ir=d(),k=r("div"),T(ye.$$.fragment),lr=d(),K=r("p"),dr=s("The "),Le=r("a"),cr=s("ViTMAEForPreTraining"),hr=s(" forward method, overrides the "),lt=r("code"),mr=s("__call__"),fr=s(" special method."),pr=d(),T(ee.$$.fragment),ur=d(),dt=r("p"),gr=s("Examples:"),_r=d(),T(Ve.$$.fragment),this.h()},l(t){const h=ma('[data-svelte="svelte-1phssyn"]',document.head);f=a(h,"META",{name:!0,content:!0}),h.forEach(o),y=c(t),p=a(t,"H1",{class:!0});var $e=n(p);u=a($e,"A",{id:!0,class:!0,href:!0});var ct=n(u);x=a(ct,"SPAN",{});var wr=n(x);E(g.$$.fragment,wr),wr.forEach(o),ct.forEach(o),_=c($e),P=a($e,"SPAN",{});var br=n(P);Dt=i(br,"ViTMAE"),br.forEach(o),$e.forEach(o),ft=c(t),S=a(t,"H2",{class:!0});var xt=n(S);X=a(xt,"A",{id:!0,class:!0,href:!0});var Mr=n(X);Be=a(Mr,"SPAN",{});var Ar=n(Be);E(oe.$$.fragment,Ar),Ar.forEach(o),Mr.forEach(o),Lt=c(xt),Ye=a(xt,"SPAN",{});var yr=n(Ye);Ot=i(yr,"Overview"),yr.forEach(o),xt.forEach(o),pt=c(t),G=a(t,"P",{});var Pt=n(G);Ht=i(Pt,"The ViTMAE model was proposed in "),re=a(Pt,"A",{href:!0,rel:!0});var Vr=n(re);Wt=i(Vr,"Masked Autoencoders Are Scalable Vision Learners"),Vr.forEach(o),Ut=i(Pt,` by Kaiming He, Xinlei Chen, Saining Xie, Yanghao Li,
Piotr Doll\xE1r, Ross Girshick. The paper shows that, by pre-training a Vision Transformer (ViT) to reconstruct pixel values for masked patches, one can get results after
fine-tuning that outperform supervised pre-training.`),Pt.forEach(o),ut=c(t),ke=a(t,"P",{});var $r=n(ke);Rt=i($r,"The abstract from the paper is the following:"),$r.forEach(o),gt=c(t),xe=a(t,"P",{});var kr=n(xe);Je=a(kr,"EM",{});var xr=n(Je);Kt=i(xr,`This paper shows that masked autoencoders (MAE) are scalable self-supervised learners for computer vision. Our MAE approach is simple: we mask random patches of the
input image and reconstruct the missing pixels. It is based on two core designs. First, we develop an asymmetric encoder-decoder architecture, with an encoder that operates
only on the visible subset of patches (without mask tokens), along with a lightweight decoder that reconstructs the original image from the latent representation and mask
tokens. Second, we find that masking a high proportion of the input image, e.g., 75%, yields a nontrivial and meaningful self-supervisory task. Coupling these two designs
enables us to train large models efficiently and effectively: we accelerate training (by 3x or more) and improve accuracy. Our scalable approach allows for learning high-capacity
models that generalize well: e.g., a vanilla ViT-Huge model achieves the best accuracy (87.8%) among methods that use only ImageNet-1K data. Transfer performance in downstream
tasks outperforms supervised pre-training and shows promising scaling behavior.`),xr.forEach(o),kr.forEach(o),_t=c(t),Pe=a(t,"P",{});var Pr=n(Pe);Xt=i(Pr,"Tips:"),Pr.forEach(o),vt=c(t),V=a(t,"UL",{});var z=n(V);ae=a(z,"LI",{});var Ft=n(ae);Gt=i(Ft,`MAE (masked auto encoding) is a method for self-supervised pre-training of Vision Transformers (ViTs). The pre-training objective is relatively simple:
by masking a large portion (75%) of the image patches, the model must reconstruct raw pixel values. One can use `),Fe=a(Ft,"A",{href:!0});var Fr=n(Fe);Bt=i(Fr,"ViTMAEForPreTraining"),Fr.forEach(o),Yt=i(Ft," for this purpose."),Ft.forEach(o),Jt=c(z),D=a(z,"LI",{});var Oe=n(D);Qt=i(Oe,"A notebook that illustrates how to visualize reconstructed pixel values with "),Ce=a(Oe,"A",{href:!0});var Cr=n(Ce);Zt=i(Cr,"ViTMAEForPreTraining"),Cr.forEach(o),eo=i(Oe," can be found "),ne=a(Oe,"A",{href:!0,rel:!0});var jr=n(ne);to=i(jr,"here"),jr.forEach(o),oo=i(Oe,"."),Oe.forEach(o),ro=c(z),se=a(z,"LI",{});var Ct=n(se);ao=i(Ct,`After pre-training, one \u201Cthrows away\u201D the decoder used to reconstruct pixels, and one uses the encoder for fine-tuning/linear probing. This means that after
fine-tuning, one can directly plug in the weights into a `),je=a(Ct,"A",{href:!0});var zr=n(je);no=i(zr,"ViTForImageClassification"),zr.forEach(o),so=i(Ct,"."),Ct.forEach(o),io=c(z),ie=a(z,"LI",{});var jt=n(ie);lo=i(jt,"One can use "),ze=a(jt,"A",{href:!0});var qr=n(ze);co=i(qr,"ViTFeatureExtractor"),qr.forEach(o),ho=i(jt," to prepare images for the model. See the code examples for more info."),jt.forEach(o),mo=c(z),Qe=a(z,"LI",{});var Ir=n(Qe);fo=i(Ir,`Note that the encoder of MAE is only used to encode the visual patches. The encoded patches are then concatenated with mask tokens, which the decoder (which also
consists of Transformer blocks) takes as input. Each mask token is a shared, learned vector that indicates the presence of a missing patch to be predicted. Fixed
sin/cos position embeddings are added both to the input of the encoder and the decoder.`),Ir.forEach(o),z.forEach(o),Tt=c(t),B=a(t,"IMG",{src:!0,alt:!0,width:!0}),Et=c(t),le=a(t,"SMALL",{});var vr=n(le);po=i(vr,"MAE architecture. Taken from the "),qe=a(vr,"A",{href:!0});var Nr=n(qe);uo=i(Nr,"original paper."),Nr.forEach(o),vr.forEach(o),wt=c(t),j=a(t,"P",{});var He=n(j);go=i(He,"This model was contributed by "),de=a(He,"A",{href:!0,rel:!0});var Sr=n(de);_o=i(Sr,"nielsr"),Sr.forEach(o),vo=i(He,". The original code can be found "),ce=a(He,"A",{href:!0,rel:!0});var Dr=n(ce);To=i(Dr,"here"),Dr.forEach(o),Eo=i(He,"."),He.forEach(o),bt=c(t),L=a(t,"H2",{class:!0});var zt=n(L);Y=a(zt,"A",{id:!0,class:!0,href:!0});var Lr=n(Y);Ze=a(Lr,"SPAN",{});var Or=n(Ze);E(he.$$.fragment,Or),Or.forEach(o),Lr.forEach(o),wo=c(zt),et=a(zt,"SPAN",{});var Hr=n(et);bo=i(Hr,"ViTMAEConfig"),Hr.forEach(o),zt.forEach(o),Mt=c(t),v=a(t,"DIV",{class:!0});var q=n(v);E(me.$$.fragment,q),Mo=c(q),O=a(q,"P",{});var We=n(O);Ao=i(We,"This is the configuration class to store the configuration of a "),Ie=a(We,"A",{href:!0});var Wr=n(Ie);yo=i(Wr,"ViTMAEModel"),Wr.forEach(o),Vo=i(We,`. It is used to instantiate an ViT
MAE model according to the specified arguments, defining the model architecture. Instantiating a configuration with
the defaults will yield a similar configuration to that of the ViT
`),fe=a(We,"A",{href:!0,rel:!0});var Ur=n(fe);$o=i(Ur,"facebook/vit-mae-base"),Ur.forEach(o),ko=i(We," architecture."),We.forEach(o),xo=c(q),H=a(q,"P",{});var Ue=n(H);Po=i(Ue,"Configuration objects inherit from "),Ne=a(Ue,"A",{href:!0});var Rr=n(Ne);Fo=i(Rr,"PretrainedConfig"),Rr.forEach(o),Co=i(Ue,` and can be used to control the model outputs. Read the
documentation from `),Se=a(Ue,"A",{href:!0});var Kr=n(Se);jo=i(Kr,"PretrainedConfig"),Kr.forEach(o),zo=i(Ue," for more information."),Ue.forEach(o),qo=c(q),tt=a(q,"P",{});var Xr=n(tt);Io=i(Xr,"Example:"),Xr.forEach(o),No=c(q),E(pe.$$.fragment,q),q.forEach(o),At=c(t),W=a(t,"H2",{class:!0});var qt=n(W);J=a(qt,"A",{id:!0,class:!0,href:!0});var Gr=n(J);ot=a(Gr,"SPAN",{});var Br=n(ot);E(ue.$$.fragment,Br),Br.forEach(o),Gr.forEach(o),So=c(qt),rt=a(qt,"SPAN",{});var Yr=n(rt);Do=i(Yr,"ViTMAEModel"),Yr.forEach(o),qt.forEach(o),yt=c(t),F=a(t,"DIV",{class:!0});var Re=n(F);E(ge.$$.fragment,Re),Lo=c(Re),_e=a(Re,"P",{});var It=n(_e);Oo=i(It,`The bare ViTMAE Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ve=a(It,"A",{href:!0,rel:!0});var Jr=n(ve);Ho=i(Jr,"torch.nn.Module"),Jr.forEach(o),Wo=i(It,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),It.forEach(o),Uo=c(Re),$=a(Re,"DIV",{class:!0});var I=n($);E(Te.$$.fragment,I),Ro=c(I),U=a(I,"P",{});var Ke=n(U);Ko=i(Ke,"The "),De=a(Ke,"A",{href:!0});var Qr=n(De);Xo=i(Qr,"ViTMAEModel"),Qr.forEach(o),Go=i(Ke," forward method, overrides the "),at=a(Ke,"CODE",{});var Zr=n(at);Bo=i(Zr,"__call__"),Zr.forEach(o),Yo=i(Ke," special method."),Ke.forEach(o),Jo=c(I),E(Q.$$.fragment,I),Qo=c(I),nt=a(I,"P",{});var ea=n(nt);Zo=i(ea,"Examples:"),ea.forEach(o),er=c(I),E(Ee.$$.fragment,I),I.forEach(o),Re.forEach(o),Vt=c(t),R=a(t,"H2",{class:!0});var Nt=n(R);Z=a(Nt,"A",{id:!0,class:!0,href:!0});var ta=n(Z);st=a(ta,"SPAN",{});var oa=n(st);E(we.$$.fragment,oa),oa.forEach(o),ta.forEach(o),tr=c(Nt),it=a(Nt,"SPAN",{});var ra=n(it);or=i(ra,"ViTMAEForPreTraining"),ra.forEach(o),Nt.forEach(o),$t=c(t),C=a(t,"DIV",{class:!0});var Xe=n(C);E(be.$$.fragment,Xe),rr=c(Xe),Me=a(Xe,"P",{});var St=n(Me);ar=i(St,`The ViTMAE Model transformer with the decoder on top for self-supervised pre-training.
This model is a PyTorch `),Ae=a(St,"A",{href:!0,rel:!0});var aa=n(Ae);nr=i(aa,"torch.nn.Module"),aa.forEach(o),sr=i(St,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),St.forEach(o),ir=c(Xe),k=a(Xe,"DIV",{class:!0});var N=n(k);E(ye.$$.fragment,N),lr=c(N),K=a(N,"P",{});var Ge=n(K);dr=i(Ge,"The "),Le=a(Ge,"A",{href:!0});var na=n(Le);cr=i(na,"ViTMAEForPreTraining"),na.forEach(o),hr=i(Ge," forward method, overrides the "),lt=a(Ge,"CODE",{});var sa=n(lt);mr=i(sa,"__call__"),sa.forEach(o),fr=i(Ge," special method."),Ge.forEach(o),pr=c(N),E(ee.$$.fragment,N),ur=c(N),dt=a(N,"P",{});var ia=n(dt);gr=i(ia,"Examples:"),ia.forEach(o),_r=c(N),E(Ve.$$.fragment,N),N.forEach(o),Xe.forEach(o),this.h()},h(){l(f,"name","hf:doc:metadata"),l(f,"content",JSON.stringify(_a)),l(u,"id","vitmae"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#vitmae"),l(p,"class","relative group"),l(X,"id","overview"),l(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(X,"href","#overview"),l(S,"class","relative group"),l(re,"href","https://arxiv.org/abs/2111.06377v2"),l(re,"rel","nofollow"),l(Fe,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(Ce,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(ne,"href","https://github.com/NielsRogge/Transformers-Tutorials/blob/master/ViTMAE/ViT_MAE_visualization_demo.ipynb"),l(ne,"rel","nofollow"),l(je,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTForImageClassification"),l(ze,"href","/docs/transformers/pr_15794/en/model_doc/vit#transformers.ViTFeatureExtractor"),fa(B.src,Er="https://user-images.githubusercontent.com/11435359/146857310-f258c86c-fde6-48e8-9cee-badd2b21bd2c.png")||l(B,"src",Er),l(B,"alt","drawing"),l(B,"width","600"),l(qe,"href","https://arxiv.org/abs/2111.06377"),l(de,"href","https://huggingface.co/nielsr"),l(de,"rel","nofollow"),l(ce,"href","https://github.com/facebookresearch/mae"),l(ce,"rel","nofollow"),l(Y,"id","transformers.ViTMAEConfig"),l(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Y,"href","#transformers.ViTMAEConfig"),l(L,"class","relative group"),l(Ie,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEModel"),l(fe,"href","https://huggingface.co/facebook/vit-mae-base"),l(fe,"rel","nofollow"),l(Ne,"href","/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig"),l(Se,"href","/docs/transformers/pr_15794/en/main_classes/configuration#transformers.PretrainedConfig"),l(v,"class","docstring"),l(J,"id","transformers.ViTMAEModel"),l(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(J,"href","#transformers.ViTMAEModel"),l(W,"class","relative group"),l(ve,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(ve,"rel","nofollow"),l(De,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEModel"),l($,"class","docstring"),l(F,"class","docstring"),l(Z,"id","transformers.ViTMAEForPreTraining"),l(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Z,"href","#transformers.ViTMAEForPreTraining"),l(R,"class","relative group"),l(Ae,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Ae,"rel","nofollow"),l(Le,"href","/docs/transformers/pr_15794/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),l(k,"class","docstring"),l(C,"class","docstring")},m(t,h){e(document.head,f),m(t,y,h),m(t,p,h),e(p,u),e(u,x),w(g,x,null),e(p,_),e(p,P),e(P,Dt),m(t,ft,h),m(t,S,h),e(S,X),e(X,Be),w(oe,Be,null),e(S,Lt),e(S,Ye),e(Ye,Ot),m(t,pt,h),m(t,G,h),e(G,Ht),e(G,re),e(re,Wt),e(G,Ut),m(t,ut,h),m(t,ke,h),e(ke,Rt),m(t,gt,h),m(t,xe,h),e(xe,Je),e(Je,Kt),m(t,_t,h),m(t,Pe,h),e(Pe,Xt),m(t,vt,h),m(t,V,h),e(V,ae),e(ae,Gt),e(ae,Fe),e(Fe,Bt),e(ae,Yt),e(V,Jt),e(V,D),e(D,Qt),e(D,Ce),e(Ce,Zt),e(D,eo),e(D,ne),e(ne,to),e(D,oo),e(V,ro),e(V,se),e(se,ao),e(se,je),e(je,no),e(se,so),e(V,io),e(V,ie),e(ie,lo),e(ie,ze),e(ze,co),e(ie,ho),e(V,mo),e(V,Qe),e(Qe,fo),m(t,Tt,h),m(t,B,h),m(t,Et,h),m(t,le,h),e(le,po),e(le,qe),e(qe,uo),m(t,wt,h),m(t,j,h),e(j,go),e(j,de),e(de,_o),e(j,vo),e(j,ce),e(ce,To),e(j,Eo),m(t,bt,h),m(t,L,h),e(L,Y),e(Y,Ze),w(he,Ze,null),e(L,wo),e(L,et),e(et,bo),m(t,Mt,h),m(t,v,h),w(me,v,null),e(v,Mo),e(v,O),e(O,Ao),e(O,Ie),e(Ie,yo),e(O,Vo),e(O,fe),e(fe,$o),e(O,ko),e(v,xo),e(v,H),e(H,Po),e(H,Ne),e(Ne,Fo),e(H,Co),e(H,Se),e(Se,jo),e(H,zo),e(v,qo),e(v,tt),e(tt,Io),e(v,No),w(pe,v,null),m(t,At,h),m(t,W,h),e(W,J),e(J,ot),w(ue,ot,null),e(W,So),e(W,rt),e(rt,Do),m(t,yt,h),m(t,F,h),w(ge,F,null),e(F,Lo),e(F,_e),e(_e,Oo),e(_e,ve),e(ve,Ho),e(_e,Wo),e(F,Uo),e(F,$),w(Te,$,null),e($,Ro),e($,U),e(U,Ko),e(U,De),e(De,Xo),e(U,Go),e(U,at),e(at,Bo),e(U,Yo),e($,Jo),w(Q,$,null),e($,Qo),e($,nt),e(nt,Zo),e($,er),w(Ee,$,null),m(t,Vt,h),m(t,R,h),e(R,Z),e(Z,st),w(we,st,null),e(R,tr),e(R,it),e(it,or),m(t,$t,h),m(t,C,h),w(be,C,null),e(C,rr),e(C,Me),e(Me,ar),e(Me,Ae),e(Ae,nr),e(Me,sr),e(C,ir),e(C,k),w(ye,k,null),e(k,lr),e(k,K),e(K,dr),e(K,Le),e(Le,cr),e(K,hr),e(K,lt),e(lt,mr),e(K,fr),e(k,pr),w(ee,k,null),e(k,ur),e(k,dt),e(dt,gr),e(k,_r),w(Ve,k,null),kt=!0},p(t,[h]){const $e={};h&2&&($e.$$scope={dirty:h,ctx:t}),Q.$set($e);const ct={};h&2&&(ct.$$scope={dirty:h,ctx:t}),ee.$set(ct)},i(t){kt||(b(g.$$.fragment,t),b(oe.$$.fragment,t),b(he.$$.fragment,t),b(me.$$.fragment,t),b(pe.$$.fragment,t),b(ue.$$.fragment,t),b(ge.$$.fragment,t),b(Te.$$.fragment,t),b(Q.$$.fragment,t),b(Ee.$$.fragment,t),b(we.$$.fragment,t),b(be.$$.fragment,t),b(ye.$$.fragment,t),b(ee.$$.fragment,t),b(Ve.$$.fragment,t),kt=!0)},o(t){M(g.$$.fragment,t),M(oe.$$.fragment,t),M(he.$$.fragment,t),M(me.$$.fragment,t),M(pe.$$.fragment,t),M(ue.$$.fragment,t),M(ge.$$.fragment,t),M(Te.$$.fragment,t),M(Q.$$.fragment,t),M(Ee.$$.fragment,t),M(we.$$.fragment,t),M(be.$$.fragment,t),M(ye.$$.fragment,t),M(ee.$$.fragment,t),M(Ve.$$.fragment,t),kt=!1},d(t){o(f),t&&o(y),t&&o(p),A(g),t&&o(ft),t&&o(S),A(oe),t&&o(pt),t&&o(G),t&&o(ut),t&&o(ke),t&&o(gt),t&&o(xe),t&&o(_t),t&&o(Pe),t&&o(vt),t&&o(V),t&&o(Tt),t&&o(B),t&&o(Et),t&&o(le),t&&o(wt),t&&o(j),t&&o(bt),t&&o(L),A(he),t&&o(Mt),t&&o(v),A(me),A(pe),t&&o(At),t&&o(W),A(ue),t&&o(yt),t&&o(F),A(ge),A(Te),A(Q),A(Ee),t&&o(Vt),t&&o(R),A(we),t&&o($t),t&&o(C),A(be),A(ye),A(ee),A(Ve)}}}const _a={local:"vitmae",sections:[{local:"overview",title:"Overview"},{local:"transformers.ViTMAEConfig",title:"ViTMAEConfig"},{local:"transformers.ViTMAEModel",title:"ViTMAEModel"},{local:"transformers.ViTMAEForPreTraining",title:"ViTMAEForPreTraining"}],title:"ViTMAE"};function va(te,f,y){let{fw:p}=f;return te.$$set=u=>{"fw"in u&&y(0,p=u.fw)},[p]}class ya extends da{constructor(f){super();ca(this,f,va,ga,ha,{fw:0})}}export{ya as default,_a as metadata};
