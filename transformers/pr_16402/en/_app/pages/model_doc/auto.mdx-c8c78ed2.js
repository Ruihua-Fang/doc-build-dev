import{S as WEt,i as HEt,s as UEt,e as a,k as l,w as F,t as o,M as JEt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as YEt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as pBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function KEt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,qe,Ve,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),gA=o(")."),rf=l(),qe=a("p"),Ve=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),hA=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),pA=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Xe){g=n(Xe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var L9=s(p);m=r(L9,"NewModelConfig"),L9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var x9=s(oi);of=r(x9,"model_type"),x9.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var $9=s(ri);ti=r($9,'"new-model"'),$9.forEach(t),gA=r(Ae,")."),Ae.forEach(t),rf=i(Xe),qe=n(Xe,"P",{});var To=s(qe);Ve=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var va=s(ai);Tn=r(va,"NewModel"),va.forEach(t),hA=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var k9=s(Mn);En=r(k9,"PreTrainedModel"),k9.forEach(t),pA=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);Cn=r(af,"config_class"),af.forEach(t),uA=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var S9=s(si);tf=r(S9,"NewModelConfig"),S9.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel")},m(Xe,Ae){b(Xe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,gA),b(Xe,rf,Ae),b(Xe,qe,Ae),e(qe,Ve),e(qe,ai),e(ai,Tn),e(qe,hA),e(qe,Mn),e(Mn,En),e(qe,pA),e(qe,ni),e(ni,Cn),e(qe,uA),e(qe,si),e(si,tf),e(qe,ba)},d(Xe){Xe&&t(g),Xe&&t(rf),Xe&&t(qe)}}}function ZEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W5t(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,qe,Ve,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba,Xe,Ae,L9,li,x9,$9,To,va,k9,af,S9,Uqe,VRe,ii,nf,XK,_A,Jqe,zK,Yqe,XRe,wn,Kqe,QK,Zqe,eNe,WK,oNe,rNe,zRe,bA,QRe,R9,tNe,WRe,sf,HRe,di,lf,HK,vA,aNe,UK,nNe,URe,Mo,FA,sNe,TA,lNe,B9,iNe,dNe,cNe,MA,fNe,JK,mNe,gNe,hNe,Fr,EA,pNe,YK,uNe,_Ne,ci,bNe,KK,vNe,FNe,ZK,TNe,MNe,ENe,A,df,eZ,CNe,wNe,P9,ANe,yNe,LNe,cf,oZ,xNe,$Ne,I9,kNe,SNe,RNe,ff,rZ,BNe,PNe,q9,INe,qNe,NNe,mf,tZ,jNe,DNe,N9,GNe,ONe,VNe,gf,aZ,XNe,zNe,j9,QNe,WNe,HNe,hf,nZ,UNe,JNe,D9,YNe,KNe,ZNe,pf,sZ,eje,oje,G9,rje,tje,aje,uf,lZ,nje,sje,O9,lje,ije,dje,_f,iZ,cje,fje,V9,mje,gje,hje,bf,dZ,pje,uje,X9,_je,bje,vje,vf,cZ,Fje,Tje,z9,Mje,Eje,Cje,Ff,fZ,wje,Aje,Q9,yje,Lje,xje,Tf,mZ,$je,kje,W9,Sje,Rje,Bje,Mf,gZ,Pje,Ije,H9,qje,Nje,jje,Ef,hZ,Dje,Gje,U9,Oje,Vje,Xje,Cf,pZ,zje,Qje,J9,Wje,Hje,Uje,wf,uZ,Jje,Yje,Y9,Kje,Zje,eDe,Af,_Z,oDe,rDe,K9,tDe,aDe,nDe,yf,bZ,sDe,lDe,Z9,iDe,dDe,cDe,Lf,vZ,fDe,mDe,e$,gDe,hDe,pDe,xf,FZ,uDe,_De,o$,bDe,vDe,FDe,$f,TZ,TDe,MDe,r$,EDe,CDe,wDe,kf,MZ,ADe,yDe,t$,LDe,xDe,$De,Sf,EZ,kDe,SDe,a$,RDe,BDe,PDe,Rf,CZ,IDe,qDe,n$,NDe,jDe,DDe,Bf,wZ,GDe,ODe,s$,VDe,XDe,zDe,Pf,AZ,QDe,WDe,l$,HDe,UDe,JDe,If,yZ,YDe,KDe,i$,ZDe,eGe,oGe,qf,LZ,rGe,tGe,d$,aGe,nGe,sGe,Nf,xZ,lGe,iGe,c$,dGe,cGe,fGe,jf,$Z,mGe,gGe,f$,hGe,pGe,uGe,Df,kZ,_Ge,bGe,m$,vGe,FGe,TGe,Gf,SZ,MGe,EGe,g$,CGe,wGe,AGe,Of,RZ,yGe,LGe,h$,xGe,$Ge,kGe,Vf,BZ,SGe,RGe,p$,BGe,PGe,IGe,Xf,PZ,qGe,NGe,u$,jGe,DGe,GGe,zf,IZ,OGe,VGe,_$,XGe,zGe,QGe,Qf,qZ,WGe,HGe,b$,UGe,JGe,YGe,Wf,NZ,KGe,ZGe,v$,eOe,oOe,rOe,Hf,jZ,tOe,aOe,F$,nOe,sOe,lOe,Uf,DZ,iOe,dOe,T$,cOe,fOe,mOe,Jf,GZ,gOe,hOe,M$,pOe,uOe,_Oe,Yf,OZ,bOe,vOe,E$,FOe,TOe,MOe,Kf,VZ,EOe,COe,C$,wOe,AOe,yOe,Zf,XZ,LOe,xOe,w$,$Oe,kOe,SOe,em,zZ,ROe,BOe,A$,POe,IOe,qOe,om,QZ,NOe,jOe,y$,DOe,GOe,OOe,rm,WZ,VOe,XOe,L$,zOe,QOe,WOe,tm,HZ,HOe,UOe,x$,JOe,YOe,KOe,am,UZ,ZOe,eVe,$$,oVe,rVe,tVe,nm,JZ,aVe,nVe,k$,sVe,lVe,iVe,sm,YZ,dVe,cVe,S$,fVe,mVe,gVe,lm,KZ,hVe,pVe,R$,uVe,_Ve,bVe,im,ZZ,vVe,FVe,B$,TVe,MVe,EVe,dm,eee,CVe,wVe,P$,AVe,yVe,LVe,cm,oee,xVe,$Ve,I$,kVe,SVe,RVe,fm,ree,BVe,PVe,q$,IVe,qVe,NVe,mm,tee,jVe,DVe,N$,GVe,OVe,VVe,gm,aee,XVe,zVe,j$,QVe,WVe,HVe,hm,nee,UVe,JVe,D$,YVe,KVe,ZVe,pm,see,eXe,oXe,G$,rXe,tXe,aXe,um,lee,nXe,sXe,O$,lXe,iXe,dXe,_m,iee,cXe,fXe,V$,mXe,gXe,hXe,bm,dee,pXe,uXe,X$,_Xe,bXe,vXe,vm,cee,FXe,TXe,z$,MXe,EXe,CXe,Fm,fee,wXe,AXe,Q$,yXe,LXe,xXe,Tm,mee,$Xe,kXe,W$,SXe,RXe,BXe,Mm,gee,PXe,IXe,H$,qXe,NXe,jXe,Em,hee,DXe,GXe,U$,OXe,VXe,XXe,Cm,pee,zXe,QXe,J$,WXe,HXe,UXe,wm,uee,JXe,YXe,Y$,KXe,ZXe,eze,Am,_ee,oze,rze,K$,tze,aze,nze,ym,bee,sze,lze,Z$,ize,dze,cze,Lm,vee,fze,mze,ek,gze,hze,pze,xm,Fee,uze,_ze,ok,bze,vze,Fze,$m,Tee,Tze,Mze,rk,Eze,Cze,wze,km,Mee,Aze,yze,tk,Lze,xze,$ze,Sm,Eee,kze,Sze,ak,Rze,Bze,Pze,Rm,Cee,Ize,qze,nk,Nze,jze,Dze,Bm,wee,Gze,Oze,sk,Vze,Xze,zze,Pm,Aee,Qze,Wze,lk,Hze,Uze,Jze,Im,yee,Yze,Kze,ik,Zze,eQe,oQe,qm,Lee,rQe,tQe,dk,aQe,nQe,sQe,Nm,xee,lQe,iQe,ck,dQe,cQe,fQe,jm,$ee,mQe,gQe,fk,hQe,pQe,uQe,Dm,kee,_Qe,bQe,mk,vQe,FQe,TQe,Gm,See,MQe,EQe,gk,CQe,wQe,AQe,Om,Ree,yQe,LQe,hk,xQe,$Qe,kQe,Vm,Bee,SQe,RQe,pk,BQe,PQe,IQe,Xm,Pee,qQe,NQe,uk,jQe,DQe,GQe,zm,Iee,OQe,VQe,_k,XQe,zQe,QQe,Qm,qee,WQe,HQe,bk,UQe,JQe,YQe,Wm,Nee,KQe,ZQe,vk,eWe,oWe,rWe,Hm,jee,tWe,aWe,Fk,nWe,sWe,lWe,Um,Dee,iWe,dWe,Tk,cWe,fWe,mWe,Jm,Gee,gWe,hWe,Mk,pWe,uWe,_We,Ym,Oee,bWe,vWe,Ek,FWe,TWe,MWe,Km,Vee,EWe,CWe,Ck,wWe,AWe,yWe,Zm,Xee,LWe,xWe,wk,$We,kWe,SWe,eg,zee,RWe,BWe,Ak,PWe,IWe,qWe,og,Qee,NWe,jWe,yk,DWe,GWe,OWe,rg,Wee,VWe,XWe,Lk,zWe,QWe,WWe,tg,Hee,HWe,UWe,xk,JWe,YWe,KWe,ag,ZWe,ng,CA,eHe,Uee,oHe,JRe,fi,sg,Jee,wA,rHe,Yee,tHe,YRe,Eo,AA,aHe,yA,nHe,$k,sHe,lHe,iHe,LA,dHe,Kee,cHe,fHe,mHe,Tr,xA,gHe,Zee,hHe,pHe,Fa,uHe,eoe,_He,bHe,ooe,vHe,FHe,roe,THe,MHe,EHe,k,An,toe,CHe,wHe,kk,AHe,yHe,Sk,LHe,xHe,$He,yn,aoe,kHe,SHe,Rk,RHe,BHe,Bk,PHe,IHe,qHe,Ln,noe,NHe,jHe,Pk,DHe,GHe,Ik,OHe,VHe,XHe,lg,soe,zHe,QHe,qk,WHe,HHe,UHe,xn,loe,JHe,YHe,Nk,KHe,ZHe,jk,eUe,oUe,rUe,ig,ioe,tUe,aUe,Dk,nUe,sUe,lUe,dg,doe,iUe,dUe,Gk,cUe,fUe,mUe,cg,coe,gUe,hUe,Ok,pUe,uUe,_Ue,$n,foe,bUe,vUe,Vk,FUe,TUe,Xk,MUe,EUe,CUe,kn,moe,wUe,AUe,zk,yUe,LUe,Qk,xUe,$Ue,kUe,Sn,goe,SUe,RUe,Wk,BUe,PUe,Hk,IUe,qUe,NUe,fg,hoe,jUe,DUe,Uk,GUe,OUe,VUe,mg,poe,XUe,zUe,Jk,QUe,WUe,HUe,Rn,uoe,UUe,JUe,Yk,YUe,KUe,Kk,ZUe,eJe,oJe,gg,_oe,rJe,tJe,Zk,aJe,nJe,sJe,Bn,boe,lJe,iJe,eS,dJe,cJe,oS,fJe,mJe,gJe,Pn,voe,hJe,pJe,rS,uJe,_Je,tS,bJe,vJe,FJe,In,Foe,TJe,MJe,aS,EJe,CJe,Toe,wJe,AJe,yJe,hg,Moe,LJe,xJe,nS,$Je,kJe,SJe,qn,Eoe,RJe,BJe,sS,PJe,IJe,lS,qJe,NJe,jJe,Nn,Coe,DJe,GJe,iS,OJe,VJe,dS,XJe,zJe,QJe,jn,woe,WJe,HJe,cS,UJe,JJe,fS,YJe,KJe,ZJe,Dn,Aoe,eYe,oYe,mS,rYe,tYe,gS,aYe,nYe,sYe,Gn,yoe,lYe,iYe,hS,dYe,cYe,pS,fYe,mYe,gYe,On,Loe,hYe,pYe,uS,uYe,_Ye,_S,bYe,vYe,FYe,pg,xoe,TYe,MYe,bS,EYe,CYe,wYe,Vn,$oe,AYe,yYe,vS,LYe,xYe,FS,$Ye,kYe,SYe,ug,koe,RYe,BYe,TS,PYe,IYe,qYe,Xn,Soe,NYe,jYe,MS,DYe,GYe,ES,OYe,VYe,XYe,zn,Roe,zYe,QYe,CS,WYe,HYe,wS,UYe,JYe,YYe,Qn,Boe,KYe,ZYe,AS,eKe,oKe,yS,rKe,tKe,aKe,Wn,Poe,nKe,sKe,LS,lKe,iKe,xS,dKe,cKe,fKe,Hn,Ioe,mKe,gKe,$S,hKe,pKe,kS,uKe,_Ke,bKe,_g,qoe,vKe,FKe,SS,TKe,MKe,EKe,Un,Noe,CKe,wKe,RS,AKe,yKe,BS,LKe,xKe,$Ke,Jn,joe,kKe,SKe,PS,RKe,BKe,IS,PKe,IKe,qKe,Yn,Doe,NKe,jKe,qS,DKe,GKe,NS,OKe,VKe,XKe,Kn,Goe,zKe,QKe,jS,WKe,HKe,DS,UKe,JKe,YKe,Zn,Ooe,KKe,ZKe,GS,eZe,oZe,OS,rZe,tZe,aZe,es,Voe,nZe,sZe,VS,lZe,iZe,XS,dZe,cZe,fZe,bg,Xoe,mZe,gZe,zS,hZe,pZe,uZe,os,zoe,_Ze,bZe,QS,vZe,FZe,WS,TZe,MZe,EZe,vg,Qoe,CZe,wZe,HS,AZe,yZe,LZe,Fg,Woe,xZe,$Ze,US,kZe,SZe,RZe,rs,Hoe,BZe,PZe,JS,IZe,qZe,YS,NZe,jZe,DZe,ts,Uoe,GZe,OZe,KS,VZe,XZe,ZS,zZe,QZe,WZe,as,Joe,HZe,UZe,eR,JZe,YZe,oR,KZe,ZZe,eeo,Tg,Yoe,oeo,reo,rR,teo,aeo,neo,ns,Koe,seo,leo,tR,ieo,deo,aR,ceo,feo,meo,ss,Zoe,geo,heo,nR,peo,ueo,sR,_eo,beo,veo,ls,ere,Feo,Teo,lR,Meo,Eeo,iR,Ceo,weo,Aeo,is,ore,yeo,Leo,dR,xeo,$eo,cR,keo,Seo,Reo,ds,rre,Beo,Peo,fR,Ieo,qeo,mR,Neo,jeo,Deo,cs,tre,Geo,Oeo,gR,Veo,Xeo,hR,zeo,Qeo,Weo,Mg,are,Heo,Ueo,pR,Jeo,Yeo,Keo,Eg,nre,Zeo,eoo,uR,ooo,roo,too,Cg,sre,aoo,noo,_R,soo,loo,ioo,wg,lre,doo,coo,bR,foo,moo,goo,fs,ire,hoo,poo,vR,uoo,_oo,FR,boo,voo,Foo,Ag,dre,Too,Moo,TR,Eoo,Coo,woo,ms,cre,Aoo,yoo,MR,Loo,xoo,ER,$oo,koo,Soo,gs,fre,Roo,Boo,CR,Poo,Ioo,wR,qoo,Noo,joo,hs,mre,Doo,Goo,AR,Ooo,Voo,yR,Xoo,zoo,Qoo,ps,gre,Woo,Hoo,LR,Uoo,Joo,xR,Yoo,Koo,Zoo,us,hre,ero,oro,$R,rro,tro,kR,aro,nro,sro,_s,pre,lro,iro,SR,dro,cro,RR,fro,mro,gro,yg,ure,hro,pro,BR,uro,_ro,bro,Lg,_re,vro,Fro,PR,Tro,Mro,Ero,bs,bre,Cro,wro,IR,Aro,yro,qR,Lro,xro,$ro,vs,vre,kro,Sro,NR,Rro,Bro,jR,Pro,Iro,qro,Fs,Fre,Nro,jro,DR,Dro,Gro,GR,Oro,Vro,Xro,xg,Tre,zro,Qro,OR,Wro,Hro,Uro,$g,Mre,Jro,Yro,VR,Kro,Zro,eto,kg,Ere,oto,rto,XR,tto,ato,nto,Ts,Cre,sto,lto,zR,ito,dto,QR,cto,fto,mto,Sg,wre,gto,hto,WR,pto,uto,_to,Rg,Are,bto,vto,HR,Fto,Tto,Mto,Ms,yre,Eto,Cto,UR,wto,Ato,JR,yto,Lto,xto,Bg,Lre,$to,kto,YR,Sto,Rto,Bto,Pg,xre,Pto,Ito,KR,qto,Nto,jto,Es,$re,Dto,Gto,ZR,Oto,Vto,eB,Xto,zto,Qto,Cs,kre,Wto,Hto,oB,Uto,Jto,rB,Yto,Kto,Zto,ws,Sre,eao,oao,tB,rao,tao,aB,aao,nao,sao,As,Rre,lao,iao,nB,dao,cao,sB,fao,mao,gao,Ig,hao,qg,$A,pao,Bre,uao,KRe,mi,Ng,Pre,kA,_ao,Ire,bao,ZRe,Co,SA,vao,RA,Fao,lB,Tao,Mao,Eao,BA,Cao,qre,wao,Aao,yao,ze,PA,Lao,Nre,xao,$ao,Ta,kao,jre,Sao,Rao,Dre,Bao,Pao,Gre,Iao,qao,Nao,te,jg,Ore,jao,Dao,iB,Gao,Oao,Vao,Dg,Vre,Xao,zao,dB,Qao,Wao,Hao,Gg,Xre,Uao,Jao,cB,Yao,Kao,Zao,Og,zre,eno,ono,fB,rno,tno,ano,Vg,Qre,nno,sno,mB,lno,ino,dno,Xg,Wre,cno,fno,gB,mno,gno,hno,zg,Hre,pno,uno,hB,_no,bno,vno,Qg,Ure,Fno,Tno,pB,Mno,Eno,Cno,Wg,Jre,wno,Ano,uB,yno,Lno,xno,Hg,Yre,$no,kno,_B,Sno,Rno,Bno,Ug,Kre,Pno,Ino,bB,qno,Nno,jno,Jg,Zre,Dno,Gno,vB,Ono,Vno,Xno,Yg,ete,zno,Qno,FB,Wno,Hno,Uno,Kg,ote,Jno,Yno,TB,Kno,Zno,eso,Zg,rte,oso,rso,MB,tso,aso,nso,eh,tte,sso,lso,EB,iso,dso,cso,oh,ate,fso,mso,CB,gso,hso,pso,rh,nte,uso,_so,wB,bso,vso,Fso,th,ste,Tso,Mso,AB,Eso,Cso,wso,ah,lte,Aso,yso,yB,Lso,xso,$so,nh,ite,kso,Sso,LB,Rso,Bso,Pso,sh,dte,Iso,qso,xB,Nso,jso,Dso,lh,cte,Gso,Oso,$B,Vso,Xso,zso,ih,fte,Qso,Wso,kB,Hso,Uso,Jso,dh,Yso,ch,Kso,fh,IA,Zso,mte,elo,eBe,gi,mh,gte,qA,olo,hte,rlo,oBe,wo,NA,tlo,jA,alo,SB,nlo,slo,llo,DA,ilo,pte,dlo,clo,flo,Qe,GA,mlo,ute,glo,hlo,hi,plo,_te,ulo,_lo,bte,blo,vlo,Flo,be,gh,vte,Tlo,Mlo,RB,Elo,Clo,wlo,hh,Fte,Alo,ylo,BB,Llo,xlo,$lo,ph,Tte,klo,Slo,PB,Rlo,Blo,Plo,uh,Mte,Ilo,qlo,IB,Nlo,jlo,Dlo,_h,Ete,Glo,Olo,qB,Vlo,Xlo,zlo,bh,Cte,Qlo,Wlo,NB,Hlo,Ulo,Jlo,vh,wte,Ylo,Klo,jB,Zlo,eio,oio,Fh,Ate,rio,tio,DB,aio,nio,sio,Th,yte,lio,iio,GB,dio,cio,fio,Mh,Lte,mio,gio,OB,hio,pio,uio,Eh,xte,_io,bio,VB,vio,Fio,Tio,Ch,$te,Mio,Eio,XB,Cio,wio,Aio,wh,kte,yio,Lio,zB,xio,$io,kio,Ah,Ste,Sio,Rio,QB,Bio,Pio,Iio,yh,qio,Lh,Nio,xh,OA,jio,Rte,Dio,rBe,pi,$h,Bte,VA,Gio,Pte,Oio,tBe,Ao,XA,Vio,ui,Xio,WB,zio,Qio,HB,Wio,Hio,Uio,zA,Jio,Ite,Yio,Kio,Zio,Kr,QA,edo,qte,odo,rdo,_i,tdo,Nte,ado,ndo,UB,sdo,ldo,ido,kh,ddo,We,WA,cdo,jte,fdo,mdo,Ma,gdo,Dte,hdo,pdo,Gte,udo,_do,Ote,bdo,vdo,Fdo,x,Sh,Vte,Tdo,Mdo,JB,Edo,Cdo,wdo,Rh,Xte,Ado,ydo,YB,Ldo,xdo,$do,Bh,zte,kdo,Sdo,KB,Rdo,Bdo,Pdo,Ph,Qte,Ido,qdo,ZB,Ndo,jdo,Ddo,Ih,Wte,Gdo,Odo,eP,Vdo,Xdo,zdo,qh,Hte,Qdo,Wdo,oP,Hdo,Udo,Jdo,Nh,Ute,Ydo,Kdo,rP,Zdo,eco,oco,jh,Jte,rco,tco,tP,aco,nco,sco,Dh,Yte,lco,ico,aP,dco,cco,fco,Gh,Kte,mco,gco,nP,hco,pco,uco,Oh,Zte,_co,bco,sP,vco,Fco,Tco,Vh,eae,Mco,Eco,lP,Cco,wco,Aco,Xh,oae,yco,Lco,iP,xco,$co,kco,zh,rae,Sco,Rco,dP,Bco,Pco,Ico,Qh,tae,qco,Nco,cP,jco,Dco,Gco,Wh,aae,Oco,Vco,fP,Xco,zco,Qco,Hh,nae,Wco,Hco,mP,Uco,Jco,Yco,Uh,sae,Kco,Zco,gP,efo,ofo,rfo,Jh,lae,tfo,afo,hP,nfo,sfo,lfo,Yh,iae,ifo,dfo,pP,cfo,ffo,mfo,Kh,dae,gfo,hfo,uP,pfo,ufo,_fo,Zh,cae,bfo,vfo,_P,Ffo,Tfo,Mfo,ep,fae,Efo,Cfo,bP,wfo,Afo,yfo,op,mae,Lfo,xfo,vP,$fo,kfo,Sfo,rp,gae,Rfo,Bfo,FP,Pfo,Ifo,qfo,tp,hae,Nfo,jfo,TP,Dfo,Gfo,Ofo,ap,pae,Vfo,Xfo,MP,zfo,Qfo,Wfo,np,uae,Hfo,Ufo,EP,Jfo,Yfo,Kfo,sp,_ae,Zfo,emo,CP,omo,rmo,tmo,lp,bae,amo,nmo,wP,smo,lmo,imo,ys,vae,dmo,cmo,AP,fmo,mmo,yP,gmo,hmo,pmo,ip,Fae,umo,_mo,LP,bmo,vmo,Fmo,dp,Tae,Tmo,Mmo,xP,Emo,Cmo,wmo,cp,Mae,Amo,ymo,$P,Lmo,xmo,$mo,fp,Eae,kmo,Smo,kP,Rmo,Bmo,Pmo,mp,Cae,Imo,qmo,SP,Nmo,jmo,Dmo,gp,wae,Gmo,Omo,RP,Vmo,Xmo,zmo,hp,Aae,Qmo,Wmo,BP,Hmo,Umo,Jmo,pp,yae,Ymo,Kmo,PP,Zmo,ego,ogo,up,Lae,rgo,tgo,IP,ago,ngo,sgo,_p,xae,lgo,igo,qP,dgo,cgo,fgo,bp,$ae,mgo,ggo,NP,hgo,pgo,ugo,vp,kae,_go,bgo,jP,vgo,Fgo,Tgo,Fp,Sae,Mgo,Ego,DP,Cgo,wgo,Ago,Tp,Rae,ygo,Lgo,GP,xgo,$go,kgo,Mp,Bae,Sgo,Rgo,OP,Bgo,Pgo,Igo,Ep,Pae,qgo,Ngo,VP,jgo,Dgo,Ggo,Cp,Iae,Ogo,Vgo,XP,Xgo,zgo,Qgo,wp,qae,Wgo,Hgo,zP,Ugo,Jgo,Ygo,Ap,Nae,Kgo,Zgo,QP,eho,oho,rho,yp,jae,tho,aho,WP,nho,sho,lho,Lp,Dae,iho,dho,HP,cho,fho,mho,xp,Gae,gho,hho,UP,pho,uho,_ho,$p,Oae,bho,vho,JP,Fho,Tho,Mho,kp,Vae,Eho,Cho,YP,who,Aho,yho,Sp,Xae,Lho,xho,KP,$ho,kho,Sho,Rp,zae,Rho,Bho,ZP,Pho,Iho,qho,Bp,Qae,Nho,jho,eI,Dho,Gho,Oho,Pp,Wae,Vho,Xho,oI,zho,Qho,Who,Ip,Hae,Hho,Uho,rI,Jho,Yho,Kho,qp,Uae,Zho,epo,tI,opo,rpo,tpo,Np,Jae,apo,npo,aI,spo,lpo,ipo,jp,Yae,dpo,cpo,nI,fpo,mpo,gpo,Dp,Kae,hpo,ppo,sI,upo,_po,bpo,Gp,Zae,vpo,Fpo,lI,Tpo,Mpo,Epo,Op,ene,Cpo,wpo,iI,Apo,ypo,Lpo,Vp,one,xpo,$po,dI,kpo,Spo,Rpo,Xp,rne,Bpo,Ppo,cI,Ipo,qpo,Npo,zp,tne,jpo,Dpo,fI,Gpo,Opo,Vpo,Qp,ane,Xpo,zpo,mI,Qpo,Wpo,Hpo,Wp,nne,Upo,Jpo,gI,Ypo,Kpo,Zpo,Hp,sne,euo,ouo,hI,ruo,tuo,auo,Up,lne,nuo,suo,pI,luo,iuo,duo,Jp,ine,cuo,fuo,uI,muo,guo,huo,Yp,dne,puo,uuo,_I,_uo,buo,vuo,Kp,cne,Fuo,Tuo,bI,Muo,Euo,Cuo,Zp,fne,wuo,Auo,vI,yuo,Luo,xuo,eu,mne,$uo,kuo,FI,Suo,Ruo,Buo,ou,gne,Puo,Iuo,TI,quo,Nuo,juo,ru,hne,Duo,Guo,MI,Ouo,Vuo,Xuo,tu,pne,zuo,Quo,EI,Wuo,Huo,Uuo,au,une,Juo,Yuo,CI,Kuo,Zuo,e_o,nu,_ne,o_o,r_o,wI,t_o,a_o,n_o,su,bne,s_o,l_o,AI,i_o,d_o,c_o,lu,vne,f_o,m_o,yI,g_o,h_o,p_o,iu,Fne,u_o,__o,LI,b_o,v_o,F_o,du,Tne,T_o,M_o,xI,E_o,C_o,w_o,cu,Mne,A_o,y_o,$I,L_o,x_o,$_o,fu,Ene,k_o,S_o,kI,R_o,B_o,P_o,mu,Cne,I_o,q_o,SI,N_o,j_o,D_o,gu,wne,G_o,O_o,RI,V_o,X_o,z_o,hu,Ane,Q_o,W_o,BI,H_o,U_o,J_o,pu,yne,Y_o,K_o,PI,Z_o,e2o,o2o,uu,Lne,r2o,t2o,II,a2o,n2o,s2o,_u,xne,l2o,i2o,qI,d2o,c2o,f2o,bu,m2o,$ne,g2o,h2o,kne,p2o,u2o,vu,aBe,bi,Fu,Sne,HA,_2o,Rne,b2o,nBe,yo,UA,v2o,vi,F2o,NI,T2o,M2o,jI,E2o,C2o,w2o,JA,A2o,Bne,y2o,L2o,x2o,Zr,YA,$2o,Pne,k2o,S2o,Fi,R2o,Ine,B2o,P2o,DI,I2o,q2o,N2o,Tu,j2o,He,KA,D2o,qne,G2o,O2o,Ea,V2o,Nne,X2o,z2o,jne,Q2o,W2o,Dne,H2o,U2o,J2o,G,Mu,Gne,Y2o,K2o,GI,Z2o,e1o,o1o,Eu,One,r1o,t1o,OI,a1o,n1o,s1o,Cu,Vne,l1o,i1o,VI,d1o,c1o,f1o,wu,Xne,m1o,g1o,XI,h1o,p1o,u1o,Au,zne,_1o,b1o,zI,v1o,F1o,T1o,yu,Qne,M1o,E1o,QI,C1o,w1o,A1o,Lu,Wne,y1o,L1o,WI,x1o,$1o,k1o,xu,Hne,S1o,R1o,HI,B1o,P1o,I1o,$u,Une,q1o,N1o,UI,j1o,D1o,G1o,ku,Jne,O1o,V1o,JI,X1o,z1o,Q1o,Su,Yne,W1o,H1o,YI,U1o,J1o,Y1o,Ru,Kne,K1o,Z1o,KI,ebo,obo,rbo,Bu,Zne,tbo,abo,ZI,nbo,sbo,lbo,Pu,ese,ibo,dbo,eq,cbo,fbo,mbo,Iu,ose,gbo,hbo,oq,pbo,ubo,_bo,qu,rse,bbo,vbo,rq,Fbo,Tbo,Mbo,Nu,tse,Ebo,Cbo,tq,wbo,Abo,ybo,ju,ase,Lbo,xbo,aq,$bo,kbo,Sbo,Du,nse,Rbo,Bbo,nq,Pbo,Ibo,qbo,Gu,sse,Nbo,jbo,sq,Dbo,Gbo,Obo,Ou,lse,Vbo,Xbo,lq,zbo,Qbo,Wbo,Vu,ise,Hbo,Ubo,iq,Jbo,Ybo,Kbo,Xu,dse,Zbo,e4o,dq,o4o,r4o,t4o,zu,cse,a4o,n4o,cq,s4o,l4o,i4o,Qu,fse,d4o,c4o,fq,f4o,m4o,g4o,Wu,mse,h4o,p4o,mq,u4o,_4o,b4o,Hu,gse,v4o,F4o,gq,T4o,M4o,E4o,Uu,hse,C4o,w4o,hq,A4o,y4o,L4o,Ju,pse,x4o,$4o,pq,k4o,S4o,R4o,Yu,use,B4o,P4o,uq,I4o,q4o,N4o,Ku,_se,j4o,D4o,_q,G4o,O4o,V4o,Zu,bse,X4o,z4o,bq,Q4o,W4o,H4o,e_,vse,U4o,J4o,vq,Y4o,K4o,Z4o,o_,Fse,evo,ovo,Fq,rvo,tvo,avo,r_,Tse,nvo,svo,Tq,lvo,ivo,dvo,t_,Mse,cvo,fvo,Mq,mvo,gvo,hvo,a_,Ese,pvo,uvo,Eq,_vo,bvo,vvo,n_,Cse,Fvo,Tvo,Cq,Mvo,Evo,Cvo,s_,wse,wvo,Avo,wq,yvo,Lvo,xvo,l_,$vo,Ase,kvo,Svo,yse,Rvo,Bvo,i_,sBe,Ti,d_,Lse,ZA,Pvo,xse,Ivo,lBe,Lo,ey,qvo,Mi,Nvo,Aq,jvo,Dvo,yq,Gvo,Ovo,Vvo,oy,Xvo,$se,zvo,Qvo,Wvo,et,ry,Hvo,kse,Uvo,Jvo,Ei,Yvo,Sse,Kvo,Zvo,Lq,eFo,oFo,rFo,c_,tFo,Ue,ty,aFo,Rse,nFo,sFo,Ca,lFo,Bse,iFo,dFo,Pse,cFo,fFo,Ise,mFo,gFo,hFo,z,f_,qse,pFo,uFo,xq,_Fo,bFo,vFo,m_,Nse,FFo,TFo,$q,MFo,EFo,CFo,g_,jse,wFo,AFo,kq,yFo,LFo,xFo,h_,Dse,$Fo,kFo,Sq,SFo,RFo,BFo,p_,Gse,PFo,IFo,Rq,qFo,NFo,jFo,u_,Ose,DFo,GFo,Bq,OFo,VFo,XFo,__,Vse,zFo,QFo,Pq,WFo,HFo,UFo,b_,Xse,JFo,YFo,Iq,KFo,ZFo,e0o,v_,zse,o0o,r0o,qq,t0o,a0o,n0o,F_,Qse,s0o,l0o,Nq,i0o,d0o,c0o,T_,Wse,f0o,m0o,jq,g0o,h0o,p0o,M_,Hse,u0o,_0o,Dq,b0o,v0o,F0o,E_,Use,T0o,M0o,Gq,E0o,C0o,w0o,C_,Jse,A0o,y0o,Oq,L0o,x0o,$0o,w_,Yse,k0o,S0o,Vq,R0o,B0o,P0o,A_,Kse,I0o,q0o,Xq,N0o,j0o,D0o,y_,Zse,G0o,O0o,zq,V0o,X0o,z0o,L_,ele,Q0o,W0o,Qq,H0o,U0o,J0o,x_,ole,Y0o,K0o,Wq,Z0o,e6o,o6o,$_,rle,r6o,t6o,Hq,a6o,n6o,s6o,k_,tle,l6o,i6o,Uq,d6o,c6o,f6o,S_,ale,m6o,g6o,Jq,h6o,p6o,u6o,R_,nle,_6o,b6o,Yq,v6o,F6o,T6o,B_,sle,M6o,E6o,Kq,C6o,w6o,A6o,P_,lle,y6o,L6o,Zq,x6o,$6o,k6o,I_,ile,S6o,R6o,eN,B6o,P6o,I6o,q_,dle,q6o,N6o,oN,j6o,D6o,G6o,N_,cle,O6o,V6o,rN,X6o,z6o,Q6o,j_,fle,W6o,H6o,tN,U6o,J6o,Y6o,D_,mle,K6o,Z6o,aN,eTo,oTo,rTo,G_,gle,tTo,aTo,nN,nTo,sTo,lTo,O_,hle,iTo,dTo,sN,cTo,fTo,mTo,V_,ple,gTo,hTo,lN,pTo,uTo,_To,X_,ule,bTo,vTo,iN,FTo,TTo,MTo,z_,_le,ETo,CTo,dN,wTo,ATo,yTo,Q_,LTo,ble,xTo,$To,vle,kTo,STo,W_,iBe,Ci,H_,Fle,ay,RTo,Tle,BTo,dBe,xo,ny,PTo,wi,ITo,cN,qTo,NTo,fN,jTo,DTo,GTo,sy,OTo,Mle,VTo,XTo,zTo,ot,ly,QTo,Ele,WTo,HTo,Ai,UTo,Cle,JTo,YTo,mN,KTo,ZTo,eMo,U_,oMo,Je,iy,rMo,wle,tMo,aMo,wa,nMo,Ale,sMo,lMo,yle,iMo,dMo,Lle,cMo,fMo,mMo,Q,J_,xle,gMo,hMo,gN,pMo,uMo,_Mo,Y_,$le,bMo,vMo,hN,FMo,TMo,MMo,K_,kle,EMo,CMo,pN,wMo,AMo,yMo,Z_,Sle,LMo,xMo,uN,$Mo,kMo,SMo,e2,Rle,RMo,BMo,_N,PMo,IMo,qMo,o2,Ble,NMo,jMo,bN,DMo,GMo,OMo,r2,Ple,VMo,XMo,vN,zMo,QMo,WMo,t2,Ile,HMo,UMo,FN,JMo,YMo,KMo,a2,qle,ZMo,eEo,TN,oEo,rEo,tEo,n2,Nle,aEo,nEo,MN,sEo,lEo,iEo,s2,jle,dEo,cEo,EN,fEo,mEo,gEo,l2,Dle,hEo,pEo,CN,uEo,_Eo,bEo,i2,Gle,vEo,FEo,wN,TEo,MEo,EEo,d2,Ole,CEo,wEo,AN,AEo,yEo,LEo,c2,Vle,xEo,$Eo,yN,kEo,SEo,REo,f2,Xle,BEo,PEo,LN,IEo,qEo,NEo,m2,zle,jEo,DEo,xN,GEo,OEo,VEo,g2,Qle,XEo,zEo,$N,QEo,WEo,HEo,h2,Wle,UEo,JEo,kN,YEo,KEo,ZEo,p2,Hle,eCo,oCo,SN,rCo,tCo,aCo,u2,Ule,nCo,sCo,RN,lCo,iCo,dCo,_2,Jle,cCo,fCo,BN,mCo,gCo,hCo,b2,Yle,pCo,uCo,PN,_Co,bCo,vCo,v2,Kle,FCo,TCo,IN,MCo,ECo,CCo,F2,Zle,wCo,ACo,qN,yCo,LCo,xCo,T2,eie,$Co,kCo,NN,SCo,RCo,BCo,M2,oie,PCo,ICo,jN,qCo,NCo,jCo,E2,rie,DCo,GCo,DN,OCo,VCo,XCo,C2,tie,zCo,QCo,GN,WCo,HCo,UCo,w2,aie,JCo,YCo,ON,KCo,ZCo,e5o,A2,nie,o5o,r5o,sie,t5o,a5o,n5o,y2,lie,s5o,l5o,VN,i5o,d5o,c5o,L2,iie,f5o,m5o,XN,g5o,h5o,p5o,x2,die,u5o,_5o,zN,b5o,v5o,F5o,$2,cie,T5o,M5o,QN,E5o,C5o,w5o,k2,A5o,fie,y5o,L5o,mie,x5o,$5o,S2,cBe,yi,R2,gie,dy,k5o,hie,S5o,fBe,$o,cy,R5o,Li,B5o,WN,P5o,I5o,HN,q5o,N5o,j5o,fy,D5o,pie,G5o,O5o,V5o,rt,my,X5o,uie,z5o,Q5o,xi,W5o,_ie,H5o,U5o,UN,J5o,Y5o,K5o,B2,Z5o,Ye,gy,e3o,bie,o3o,r3o,Aa,t3o,vie,a3o,n3o,Fie,s3o,l3o,Tie,i3o,d3o,c3o,he,P2,Mie,f3o,m3o,JN,g3o,h3o,p3o,I2,Eie,u3o,_3o,YN,b3o,v3o,F3o,q2,Cie,T3o,M3o,KN,E3o,C3o,w3o,N2,wie,A3o,y3o,ZN,L3o,x3o,$3o,j2,Aie,k3o,S3o,ej,R3o,B3o,P3o,D2,yie,I3o,q3o,oj,N3o,j3o,D3o,G2,Lie,G3o,O3o,rj,V3o,X3o,z3o,O2,xie,Q3o,W3o,tj,H3o,U3o,J3o,V2,$ie,Y3o,K3o,aj,Z3o,ewo,owo,X2,kie,rwo,two,nj,awo,nwo,swo,z2,Sie,lwo,iwo,sj,dwo,cwo,fwo,Q2,Rie,mwo,gwo,lj,hwo,pwo,uwo,W2,Bie,_wo,bwo,ij,vwo,Fwo,Two,H2,Pie,Mwo,Ewo,dj,Cwo,wwo,Awo,U2,Iie,ywo,Lwo,cj,xwo,$wo,kwo,J2,qie,Swo,Rwo,fj,Bwo,Pwo,Iwo,Y2,Nie,qwo,Nwo,mj,jwo,Dwo,Gwo,K2,Owo,jie,Vwo,Xwo,Die,zwo,Qwo,Z2,mBe,$i,e1,Gie,hy,Wwo,Oie,Hwo,gBe,ko,py,Uwo,ki,Jwo,gj,Ywo,Kwo,hj,Zwo,eAo,oAo,uy,rAo,Vie,tAo,aAo,nAo,tt,_y,sAo,Xie,lAo,iAo,Si,dAo,zie,cAo,fAo,pj,mAo,gAo,hAo,o1,pAo,Ke,by,uAo,Qie,_Ao,bAo,ya,vAo,Wie,FAo,TAo,Hie,MAo,EAo,Uie,CAo,wAo,AAo,q,r1,Jie,yAo,LAo,uj,xAo,$Ao,kAo,t1,Yie,SAo,RAo,_j,BAo,PAo,IAo,a1,Kie,qAo,NAo,bj,jAo,DAo,GAo,n1,Zie,OAo,VAo,vj,XAo,zAo,QAo,s1,ede,WAo,HAo,Fj,UAo,JAo,YAo,l1,ode,KAo,ZAo,Tj,eyo,oyo,ryo,i1,rde,tyo,ayo,Mj,nyo,syo,lyo,d1,tde,iyo,dyo,Ej,cyo,fyo,myo,c1,ade,gyo,hyo,Cj,pyo,uyo,_yo,f1,nde,byo,vyo,wj,Fyo,Tyo,Myo,m1,sde,Eyo,Cyo,Aj,wyo,Ayo,yyo,g1,lde,Lyo,xyo,yj,$yo,kyo,Syo,h1,ide,Ryo,Byo,Lj,Pyo,Iyo,qyo,p1,dde,Nyo,jyo,xj,Dyo,Gyo,Oyo,u1,cde,Vyo,Xyo,$j,zyo,Qyo,Wyo,_1,fde,Hyo,Uyo,kj,Jyo,Yyo,Kyo,b1,mde,Zyo,eLo,Sj,oLo,rLo,tLo,v1,gde,aLo,nLo,Rj,sLo,lLo,iLo,F1,hde,dLo,cLo,Bj,fLo,mLo,gLo,T1,pde,hLo,pLo,Pj,uLo,_Lo,bLo,M1,ude,vLo,FLo,Ij,TLo,MLo,ELo,E1,_de,CLo,wLo,qj,ALo,yLo,LLo,C1,bde,xLo,$Lo,Nj,kLo,SLo,RLo,w1,vde,BLo,PLo,jj,ILo,qLo,NLo,A1,Fde,jLo,DLo,Dj,GLo,OLo,VLo,y1,Tde,XLo,zLo,Gj,QLo,WLo,HLo,L1,Mde,ULo,JLo,Oj,YLo,KLo,ZLo,x1,Ede,e8o,o8o,Vj,r8o,t8o,a8o,$1,Cde,n8o,s8o,Xj,l8o,i8o,d8o,k1,wde,c8o,f8o,zj,m8o,g8o,h8o,S1,Ade,p8o,u8o,Qj,_8o,b8o,v8o,R1,yde,F8o,T8o,Wj,M8o,E8o,C8o,B1,Lde,w8o,A8o,Hj,y8o,L8o,x8o,P1,xde,$8o,k8o,Uj,S8o,R8o,B8o,I1,$de,P8o,I8o,Jj,q8o,N8o,j8o,q1,kde,D8o,G8o,Yj,O8o,V8o,X8o,N1,Sde,z8o,Q8o,Kj,W8o,H8o,U8o,j1,Rde,J8o,Y8o,Zj,K8o,Z8o,e7o,D1,Bde,o7o,r7o,eD,t7o,a7o,n7o,G1,Pde,s7o,l7o,oD,i7o,d7o,c7o,O1,Ide,f7o,m7o,rD,g7o,h7o,p7o,V1,qde,u7o,_7o,tD,b7o,v7o,F7o,X1,Nde,T7o,M7o,aD,E7o,C7o,w7o,z1,jde,A7o,y7o,nD,L7o,x7o,$7o,Q1,Dde,k7o,S7o,sD,R7o,B7o,P7o,W1,Gde,I7o,q7o,lD,N7o,j7o,D7o,H1,Ode,G7o,O7o,iD,V7o,X7o,z7o,U1,Q7o,Vde,W7o,H7o,Xde,U7o,J7o,J1,hBe,Ri,Y1,zde,vy,Y7o,Qde,K7o,pBe,So,Fy,Z7o,Bi,exo,dD,oxo,rxo,cD,txo,axo,nxo,Ty,sxo,Wde,lxo,ixo,dxo,at,My,cxo,Hde,fxo,mxo,Pi,gxo,Ude,hxo,pxo,fD,uxo,_xo,bxo,K1,vxo,Ze,Ey,Fxo,Jde,Txo,Mxo,La,Exo,Yde,Cxo,wxo,Kde,Axo,yxo,Zde,Lxo,xxo,$xo,Y,Z1,ece,kxo,Sxo,mD,Rxo,Bxo,Pxo,eb,oce,Ixo,qxo,gD,Nxo,jxo,Dxo,ob,rce,Gxo,Oxo,hD,Vxo,Xxo,zxo,rb,tce,Qxo,Wxo,pD,Hxo,Uxo,Jxo,tb,ace,Yxo,Kxo,uD,Zxo,e9o,o9o,ab,nce,r9o,t9o,_D,a9o,n9o,s9o,nb,sce,l9o,i9o,bD,d9o,c9o,f9o,sb,lce,m9o,g9o,vD,h9o,p9o,u9o,lb,ice,_9o,b9o,FD,v9o,F9o,T9o,ib,dce,M9o,E9o,TD,C9o,w9o,A9o,db,cce,y9o,L9o,MD,x9o,$9o,k9o,cb,fce,S9o,R9o,ED,B9o,P9o,I9o,fb,mce,q9o,N9o,CD,j9o,D9o,G9o,mb,gce,O9o,V9o,wD,X9o,z9o,Q9o,gb,hce,W9o,H9o,AD,U9o,J9o,Y9o,hb,pce,K9o,Z9o,yD,e$o,o$o,r$o,pb,uce,t$o,a$o,LD,n$o,s$o,l$o,ub,_ce,i$o,d$o,xD,c$o,f$o,m$o,_b,bce,g$o,h$o,$D,p$o,u$o,_$o,bb,vce,b$o,v$o,kD,F$o,T$o,M$o,vb,Fce,E$o,C$o,SD,w$o,A$o,y$o,Fb,Tce,L$o,x$o,RD,$$o,k$o,S$o,Tb,Mce,R$o,B$o,BD,P$o,I$o,q$o,Mb,Ece,N$o,j$o,PD,D$o,G$o,O$o,Eb,Cce,V$o,X$o,ID,z$o,Q$o,W$o,Cb,wce,H$o,U$o,qD,J$o,Y$o,K$o,wb,Ace,Z$o,eko,ND,oko,rko,tko,Ab,yce,ako,nko,jD,sko,lko,iko,yb,dko,Lce,cko,fko,xce,mko,gko,Lb,uBe,Ii,xb,$ce,Cy,hko,kce,pko,_Be,Ro,wy,uko,qi,_ko,DD,bko,vko,GD,Fko,Tko,Mko,Ay,Eko,Sce,Cko,wko,Ako,nt,yy,yko,Rce,Lko,xko,Ni,$ko,Bce,kko,Sko,OD,Rko,Bko,Pko,$b,Iko,eo,Ly,qko,Pce,Nko,jko,xa,Dko,Ice,Gko,Oko,qce,Vko,Xko,Nce,zko,Qko,Wko,Wr,kb,jce,Hko,Uko,VD,Jko,Yko,Kko,Sb,Dce,Zko,eSo,XD,oSo,rSo,tSo,Rb,Gce,aSo,nSo,zD,sSo,lSo,iSo,Bb,Oce,dSo,cSo,QD,fSo,mSo,gSo,Pb,Vce,hSo,pSo,WD,uSo,_So,bSo,Ib,vSo,Xce,FSo,TSo,zce,MSo,ESo,qb,bBe,ji,Nb,Qce,xy,CSo,Wce,wSo,vBe,Bo,$y,ASo,Di,ySo,HD,LSo,xSo,UD,$So,kSo,SSo,ky,RSo,Hce,BSo,PSo,ISo,st,Sy,qSo,Uce,NSo,jSo,Gi,DSo,Jce,GSo,OSo,JD,VSo,XSo,zSo,jb,QSo,oo,Ry,WSo,Yce,HSo,USo,$a,JSo,Kce,YSo,KSo,Zce,ZSo,eRo,efe,oRo,rRo,tRo,U,Db,ofe,aRo,nRo,YD,sRo,lRo,iRo,Gb,rfe,dRo,cRo,KD,fRo,mRo,gRo,Ob,tfe,hRo,pRo,ZD,uRo,_Ro,bRo,Vb,afe,vRo,FRo,eG,TRo,MRo,ERo,Xb,nfe,CRo,wRo,oG,ARo,yRo,LRo,zb,sfe,xRo,$Ro,rG,kRo,SRo,RRo,Qb,lfe,BRo,PRo,tG,IRo,qRo,NRo,Wb,ife,jRo,DRo,aG,GRo,ORo,VRo,Hb,dfe,XRo,zRo,nG,QRo,WRo,HRo,Ub,cfe,URo,JRo,sG,YRo,KRo,ZRo,Jb,ffe,eBo,oBo,lG,rBo,tBo,aBo,Yb,mfe,nBo,sBo,iG,lBo,iBo,dBo,Kb,gfe,cBo,fBo,dG,mBo,gBo,hBo,Zb,hfe,pBo,uBo,cG,_Bo,bBo,vBo,e4,pfe,FBo,TBo,fG,MBo,EBo,CBo,o4,ufe,wBo,ABo,mG,yBo,LBo,xBo,r4,_fe,$Bo,kBo,gG,SBo,RBo,BBo,t4,bfe,PBo,IBo,hG,qBo,NBo,jBo,a4,vfe,DBo,GBo,pG,OBo,VBo,XBo,n4,Ffe,zBo,QBo,uG,WBo,HBo,UBo,s4,Tfe,JBo,YBo,_G,KBo,ZBo,ePo,l4,Mfe,oPo,rPo,bG,tPo,aPo,nPo,i4,Efe,sPo,lPo,vG,iPo,dPo,cPo,d4,Cfe,fPo,mPo,FG,gPo,hPo,pPo,c4,wfe,uPo,_Po,TG,bPo,vPo,FPo,f4,Afe,TPo,MPo,MG,EPo,CPo,wPo,m4,yfe,APo,yPo,EG,LPo,xPo,$Po,g4,Lfe,kPo,SPo,CG,RPo,BPo,PPo,h4,xfe,IPo,qPo,wG,NPo,jPo,DPo,p4,$fe,GPo,OPo,AG,VPo,XPo,zPo,u4,kfe,QPo,WPo,yG,HPo,UPo,JPo,_4,Sfe,YPo,KPo,LG,ZPo,eIo,oIo,b4,Rfe,rIo,tIo,xG,aIo,nIo,sIo,v4,lIo,Bfe,iIo,dIo,Pfe,cIo,fIo,F4,FBe,Oi,T4,Ife,By,mIo,qfe,gIo,TBe,Po,Py,hIo,Vi,pIo,$G,uIo,_Io,kG,bIo,vIo,FIo,Iy,TIo,Nfe,MIo,EIo,CIo,lt,qy,wIo,jfe,AIo,yIo,Xi,LIo,Dfe,xIo,$Io,SG,kIo,SIo,RIo,M4,BIo,ro,Ny,PIo,Gfe,IIo,qIo,ka,NIo,Ofe,jIo,DIo,Vfe,GIo,OIo,Xfe,VIo,XIo,zIo,O,E4,zfe,QIo,WIo,RG,HIo,UIo,JIo,C4,Qfe,YIo,KIo,BG,ZIo,eqo,oqo,w4,Wfe,rqo,tqo,PG,aqo,nqo,sqo,A4,Hfe,lqo,iqo,IG,dqo,cqo,fqo,y4,Ufe,mqo,gqo,qG,hqo,pqo,uqo,L4,Jfe,_qo,bqo,NG,vqo,Fqo,Tqo,x4,Yfe,Mqo,Eqo,jG,Cqo,wqo,Aqo,$4,Kfe,yqo,Lqo,DG,xqo,$qo,kqo,k4,Zfe,Sqo,Rqo,GG,Bqo,Pqo,Iqo,S4,eme,qqo,Nqo,OG,jqo,Dqo,Gqo,R4,ome,Oqo,Vqo,VG,Xqo,zqo,Qqo,B4,rme,Wqo,Hqo,XG,Uqo,Jqo,Yqo,P4,tme,Kqo,Zqo,zG,eNo,oNo,rNo,I4,ame,tNo,aNo,QG,nNo,sNo,lNo,q4,nme,iNo,dNo,WG,cNo,fNo,mNo,N4,sme,gNo,hNo,HG,pNo,uNo,_No,j4,lme,bNo,vNo,UG,FNo,TNo,MNo,D4,ime,ENo,CNo,JG,wNo,ANo,yNo,G4,dme,LNo,xNo,YG,$No,kNo,SNo,O4,cme,RNo,BNo,KG,PNo,INo,qNo,V4,fme,NNo,jNo,ZG,DNo,GNo,ONo,X4,mme,VNo,XNo,eO,zNo,QNo,WNo,z4,gme,HNo,UNo,oO,JNo,YNo,KNo,Q4,hme,ZNo,ejo,rO,ojo,rjo,tjo,W4,pme,ajo,njo,tO,sjo,ljo,ijo,H4,ume,djo,cjo,aO,fjo,mjo,gjo,U4,_me,hjo,pjo,nO,ujo,_jo,bjo,J4,bme,vjo,Fjo,sO,Tjo,Mjo,Ejo,Y4,vme,Cjo,wjo,lO,Ajo,yjo,Ljo,K4,Fme,xjo,$jo,iO,kjo,Sjo,Rjo,Z4,Tme,Bjo,Pjo,dO,Ijo,qjo,Njo,ev,Mme,jjo,Djo,cO,Gjo,Ojo,Vjo,ov,Eme,Xjo,zjo,fO,Qjo,Wjo,Hjo,rv,Cme,Ujo,Jjo,mO,Yjo,Kjo,Zjo,tv,wme,eDo,oDo,gO,rDo,tDo,aDo,av,Ame,nDo,sDo,hO,lDo,iDo,dDo,nv,yme,cDo,fDo,pO,mDo,gDo,hDo,sv,Lme,pDo,uDo,uO,_Do,bDo,vDo,lv,xme,FDo,TDo,_O,MDo,EDo,CDo,iv,wDo,$me,ADo,yDo,kme,LDo,xDo,dv,MBe,zi,cv,Sme,jy,$Do,Rme,kDo,EBe,Io,Dy,SDo,Qi,RDo,bO,BDo,PDo,vO,IDo,qDo,NDo,Gy,jDo,Bme,DDo,GDo,ODo,it,Oy,VDo,Pme,XDo,zDo,Wi,QDo,Ime,WDo,HDo,FO,UDo,JDo,YDo,fv,KDo,to,Vy,ZDo,qme,eGo,oGo,Sa,rGo,Nme,tGo,aGo,jme,nGo,sGo,Dme,lGo,iGo,dGo,Gme,mv,Ome,cGo,fGo,TO,mGo,gGo,hGo,gv,pGo,Vme,uGo,_Go,Xme,bGo,vGo,hv,CBe,Hi,pv,zme,Xy,FGo,Qme,TGo,wBe,qo,zy,MGo,Ui,EGo,MO,CGo,wGo,EO,AGo,yGo,LGo,Qy,xGo,Wme,$Go,kGo,SGo,dt,Wy,RGo,Hme,BGo,PGo,Ji,IGo,Ume,qGo,NGo,CO,jGo,DGo,GGo,uv,OGo,ao,Hy,VGo,Jme,XGo,zGo,Ra,QGo,Yme,WGo,HGo,Kme,UGo,JGo,Zme,YGo,KGo,ZGo,ve,_v,ege,eOo,oOo,wO,rOo,tOo,aOo,bv,oge,nOo,sOo,AO,lOo,iOo,dOo,vv,rge,cOo,fOo,yO,mOo,gOo,hOo,Ls,tge,pOo,uOo,LO,_Oo,bOo,xO,vOo,FOo,TOo,Fv,age,MOo,EOo,$O,COo,wOo,AOo,ct,nge,yOo,LOo,kO,xOo,$Oo,SO,kOo,SOo,RO,ROo,BOo,POo,Tv,sge,IOo,qOo,BO,NOo,jOo,DOo,Mv,lge,GOo,OOo,PO,VOo,XOo,zOo,Ev,ige,QOo,WOo,IO,HOo,UOo,JOo,Cv,dge,YOo,KOo,qO,ZOo,eVo,oVo,wv,cge,rVo,tVo,NO,aVo,nVo,sVo,Av,fge,lVo,iVo,jO,dVo,cVo,fVo,yv,mge,mVo,gVo,DO,hVo,pVo,uVo,Lv,_Vo,gge,bVo,vVo,hge,FVo,TVo,xv,ABe,Yi,$v,pge,Uy,MVo,uge,EVo,yBe,No,Jy,CVo,Ki,wVo,GO,AVo,yVo,OO,LVo,xVo,$Vo,Yy,kVo,_ge,SVo,RVo,BVo,ft,Ky,PVo,bge,IVo,qVo,Zi,NVo,vge,jVo,DVo,VO,GVo,OVo,VVo,kv,XVo,no,Zy,zVo,Fge,QVo,WVo,Ba,HVo,Tge,UVo,JVo,Mge,YVo,KVo,Ege,ZVo,eXo,oXo,Cge,Sv,wge,rXo,tXo,XO,aXo,nXo,sXo,Rv,lXo,Age,iXo,dXo,yge,cXo,fXo,Bv,LBe,ed,Pv,Lge,eL,mXo,xge,gXo,xBe,jo,oL,hXo,od,pXo,zO,uXo,_Xo,QO,bXo,vXo,FXo,rL,TXo,$ge,MXo,EXo,CXo,mt,tL,wXo,kge,AXo,yXo,rd,LXo,Sge,xXo,$Xo,WO,kXo,SXo,RXo,Iv,BXo,so,aL,PXo,Rge,IXo,qXo,Pa,NXo,Bge,jXo,DXo,Pge,GXo,OXo,Ige,VXo,XXo,zXo,Ne,qv,qge,QXo,WXo,HO,HXo,UXo,JXo,Nv,Nge,YXo,KXo,UO,ZXo,ezo,ozo,jv,jge,rzo,tzo,JO,azo,nzo,szo,Dv,Dge,lzo,izo,YO,dzo,czo,fzo,Gv,Gge,mzo,gzo,KO,hzo,pzo,uzo,Ov,Oge,_zo,bzo,ZO,vzo,Fzo,Tzo,Vv,Vge,Mzo,Ezo,eV,Czo,wzo,Azo,Xv,Xge,yzo,Lzo,oV,xzo,$zo,kzo,zv,Szo,zge,Rzo,Bzo,Qge,Pzo,Izo,Qv,$Be,td,Wv,Wge,nL,qzo,Hge,Nzo,kBe,Do,sL,jzo,ad,Dzo,rV,Gzo,Ozo,tV,Vzo,Xzo,zzo,lL,Qzo,Uge,Wzo,Hzo,Uzo,gt,iL,Jzo,Jge,Yzo,Kzo,nd,Zzo,Yge,eQo,oQo,aV,rQo,tQo,aQo,Hv,nQo,lo,dL,sQo,Kge,lQo,iQo,Ia,dQo,Zge,cQo,fQo,ehe,mQo,gQo,ohe,hQo,pQo,uQo,qa,Uv,rhe,_Qo,bQo,nV,vQo,FQo,TQo,Jv,the,MQo,EQo,sV,CQo,wQo,AQo,Yv,ahe,yQo,LQo,lV,xQo,$Qo,kQo,Kv,nhe,SQo,RQo,iV,BQo,PQo,IQo,Zv,qQo,she,NQo,jQo,lhe,DQo,GQo,eF,SBe,sd,oF,ihe,cL,OQo,dhe,VQo,RBe,Go,fL,XQo,ld,zQo,dV,QQo,WQo,cV,HQo,UQo,JQo,mL,YQo,che,KQo,ZQo,eWo,ht,gL,oWo,fhe,rWo,tWo,id,aWo,mhe,nWo,sWo,fV,lWo,iWo,dWo,rF,cWo,io,hL,fWo,ghe,mWo,gWo,Na,hWo,hhe,pWo,uWo,phe,_Wo,bWo,uhe,vWo,FWo,TWo,ke,tF,_he,MWo,EWo,mV,CWo,wWo,AWo,aF,bhe,yWo,LWo,gV,xWo,$Wo,kWo,nF,vhe,SWo,RWo,hV,BWo,PWo,IWo,sF,Fhe,qWo,NWo,pV,jWo,DWo,GWo,lF,The,OWo,VWo,uV,XWo,zWo,QWo,iF,Mhe,WWo,HWo,_V,UWo,JWo,YWo,dF,Ehe,KWo,ZWo,bV,eHo,oHo,rHo,cF,Che,tHo,aHo,vV,nHo,sHo,lHo,fF,whe,iHo,dHo,FV,cHo,fHo,mHo,mF,gHo,Ahe,hHo,pHo,yhe,uHo,_Ho,gF,BBe,dd,hF,Lhe,pL,bHo,xhe,vHo,PBe,Oo,uL,FHo,cd,THo,TV,MHo,EHo,MV,CHo,wHo,AHo,_L,yHo,$he,LHo,xHo,$Ho,pt,bL,kHo,khe,SHo,RHo,fd,BHo,She,PHo,IHo,EV,qHo,NHo,jHo,pF,DHo,co,vL,GHo,Rhe,OHo,VHo,ja,XHo,Bhe,zHo,QHo,Phe,WHo,HHo,Ihe,UHo,JHo,YHo,FL,uF,qhe,KHo,ZHo,CV,eUo,oUo,rUo,_F,Nhe,tUo,aUo,wV,nUo,sUo,lUo,bF,iUo,jhe,dUo,cUo,Dhe,fUo,mUo,vF,IBe,md,FF,Ghe,TL,gUo,Ohe,hUo,qBe,Vo,ML,pUo,gd,uUo,AV,_Uo,bUo,yV,vUo,FUo,TUo,EL,MUo,Vhe,EUo,CUo,wUo,ut,CL,AUo,Xhe,yUo,LUo,hd,xUo,zhe,$Uo,kUo,LV,SUo,RUo,BUo,TF,PUo,fo,wL,IUo,Qhe,qUo,NUo,Da,jUo,Whe,DUo,GUo,Hhe,OUo,VUo,Uhe,XUo,zUo,QUo,Ga,MF,Jhe,WUo,HUo,xV,UUo,JUo,YUo,EF,Yhe,KUo,ZUo,$V,eJo,oJo,rJo,CF,Khe,tJo,aJo,kV,nJo,sJo,lJo,wF,Zhe,iJo,dJo,SV,cJo,fJo,mJo,AF,gJo,epe,hJo,pJo,ope,uJo,_Jo,yF,NBe,pd,LF,rpe,AL,bJo,tpe,vJo,jBe,Xo,yL,FJo,ud,TJo,RV,MJo,EJo,BV,CJo,wJo,AJo,LL,yJo,ape,LJo,xJo,$Jo,_t,xL,kJo,npe,SJo,RJo,_d,BJo,spe,PJo,IJo,PV,qJo,NJo,jJo,xF,DJo,mo,$L,GJo,lpe,OJo,VJo,Oa,XJo,ipe,zJo,QJo,dpe,WJo,HJo,cpe,UJo,JJo,YJo,bd,$F,fpe,KJo,ZJo,IV,eYo,oYo,rYo,kF,mpe,tYo,aYo,qV,nYo,sYo,lYo,SF,gpe,iYo,dYo,NV,cYo,fYo,mYo,RF,gYo,hpe,hYo,pYo,ppe,uYo,_Yo,BF,DBe,vd,PF,upe,kL,bYo,_pe,vYo,GBe,zo,SL,FYo,Fd,TYo,jV,MYo,EYo,DV,CYo,wYo,AYo,RL,yYo,bpe,LYo,xYo,$Yo,bt,BL,kYo,vpe,SYo,RYo,Td,BYo,Fpe,PYo,IYo,GV,qYo,NYo,jYo,IF,DYo,go,PL,GYo,Tpe,OYo,VYo,Va,XYo,Mpe,zYo,QYo,Epe,WYo,HYo,Cpe,UYo,JYo,YYo,wpe,qF,Ape,KYo,ZYo,OV,eKo,oKo,rKo,NF,tKo,ype,aKo,nKo,Lpe,sKo,lKo,jF,OBe,Md,DF,xpe,IL,iKo,$pe,dKo,VBe,Qo,qL,cKo,Ed,fKo,VV,mKo,gKo,XV,hKo,pKo,uKo,NL,_Ko,kpe,bKo,vKo,FKo,vt,jL,TKo,Spe,MKo,EKo,Cd,CKo,Rpe,wKo,AKo,zV,yKo,LKo,xKo,GF,$Ko,ho,DL,kKo,Bpe,SKo,RKo,Xa,BKo,Ppe,PKo,IKo,Ipe,qKo,NKo,qpe,jKo,DKo,GKo,Npe,OF,jpe,OKo,VKo,QV,XKo,zKo,QKo,VF,WKo,Dpe,HKo,UKo,Gpe,JKo,YKo,XF,XBe,wd,zF,Ope,GL,KKo,Vpe,ZKo,zBe,Wo,OL,eZo,Ad,oZo,WV,rZo,tZo,HV,aZo,nZo,sZo,VL,lZo,Xpe,iZo,dZo,cZo,Ft,XL,fZo,zpe,mZo,gZo,yd,hZo,Qpe,pZo,uZo,UV,_Zo,bZo,vZo,QF,FZo,po,zL,TZo,Wpe,MZo,EZo,za,CZo,Hpe,wZo,AZo,Upe,yZo,LZo,Jpe,xZo,$Zo,kZo,Qa,WF,Ype,SZo,RZo,JV,BZo,PZo,IZo,HF,Kpe,qZo,NZo,YV,jZo,DZo,GZo,UF,Zpe,OZo,VZo,KV,XZo,zZo,QZo,JF,eue,WZo,HZo,ZV,UZo,JZo,YZo,YF,KZo,oue,ZZo,eer,rue,oer,rer,KF,QBe,Ld,ZF,tue,QL,ter,aue,aer,WBe,Ho,WL,ner,xd,ser,eX,ler,ier,oX,der,cer,fer,HL,mer,nue,ger,her,per,Tt,UL,uer,sue,_er,ber,$d,ver,lue,Fer,Ter,rX,Mer,Eer,Cer,e0,wer,uo,JL,Aer,iue,yer,Ler,Wa,xer,due,$er,ker,cue,Ser,Rer,fue,Ber,Per,Ier,mue,o0,gue,qer,Ner,tX,jer,Der,Ger,r0,Oer,hue,Ver,Xer,pue,zer,Qer,t0,HBe,kd,a0,uue,YL,Wer,_ue,Her,UBe,Uo,KL,Uer,Sd,Jer,aX,Yer,Ker,nX,Zer,eor,oor,ZL,ror,bue,tor,aor,nor,Mt,e8,sor,vue,lor,ior,Rd,dor,Fue,cor,mor,sX,gor,hor,por,n0,uor,Mr,o8,_or,Tue,bor,vor,Ha,For,Mue,Tor,Mor,Eue,Eor,Cor,Cue,wor,Aor,yor,j,s0,wue,Lor,xor,lX,$or,kor,Sor,l0,Aue,Ror,Bor,iX,Por,Ior,qor,i0,yue,Nor,jor,dX,Dor,Gor,Oor,d0,Lue,Vor,Xor,cX,zor,Qor,Wor,c0,xue,Hor,Uor,fX,Jor,Yor,Kor,f0,$ue,Zor,err,mX,orr,rrr,trr,m0,kue,arr,nrr,gX,srr,lrr,irr,g0,Sue,drr,crr,hX,frr,mrr,grr,h0,Rue,hrr,prr,pX,urr,_rr,brr,p0,Bue,vrr,Frr,uX,Trr,Mrr,Err,u0,Pue,Crr,wrr,_X,Arr,yrr,Lrr,_0,Iue,xrr,$rr,bX,krr,Srr,Rrr,b0,que,Brr,Prr,vX,Irr,qrr,Nrr,v0,Nue,jrr,Drr,FX,Grr,Orr,Vrr,F0,jue,Xrr,zrr,TX,Qrr,Wrr,Hrr,T0,Due,Urr,Jrr,MX,Yrr,Krr,Zrr,xs,Gue,etr,otr,EX,rtr,ttr,CX,atr,ntr,str,M0,Oue,ltr,itr,wX,dtr,ctr,ftr,E0,Vue,mtr,gtr,AX,htr,ptr,utr,C0,Xue,_tr,btr,yX,vtr,Ftr,Ttr,w0,zue,Mtr,Etr,LX,Ctr,wtr,Atr,A0,Que,ytr,Ltr,xX,xtr,$tr,ktr,y0,Wue,Str,Rtr,$X,Btr,Ptr,Itr,L0,Hue,qtr,Ntr,kX,jtr,Dtr,Gtr,x0,Uue,Otr,Vtr,SX,Xtr,ztr,Qtr,$0,Jue,Wtr,Htr,RX,Utr,Jtr,Ytr,k0,Yue,Ktr,Ztr,BX,ear,oar,rar,S0,Kue,tar,aar,PX,nar,sar,lar,R0,Zue,iar,dar,IX,car,far,mar,B0,e_e,gar,har,qX,par,uar,_ar,P0,o_e,bar,Far,NX,Tar,Mar,Ear,I0,r_e,Car,war,jX,Aar,yar,Lar,q0,t_e,xar,$ar,DX,kar,Sar,Rar,N0,a_e,Bar,Par,GX,Iar,qar,Nar,j0,n_e,jar,Dar,OX,Gar,Oar,Var,D0,s_e,Xar,zar,VX,Qar,War,Har,G0,l_e,Uar,Jar,XX,Yar,Kar,Zar,O0,i_e,enr,onr,zX,rnr,tnr,anr,V0,d_e,nnr,snr,QX,lnr,inr,dnr,X0,c_e,cnr,fnr,WX,mnr,gnr,hnr,z0,f_e,pnr,unr,HX,_nr,bnr,vnr,Q0,m_e,Fnr,Tnr,UX,Mnr,Enr,Cnr,W0,g_e,wnr,Anr,JX,ynr,Lnr,xnr,H0,h_e,$nr,knr,YX,Snr,Rnr,Bnr,U0,JBe,Bd,J0,p_e,r8,Pnr,u_e,Inr,YBe,Jo,t8,qnr,Pd,Nnr,KX,jnr,Dnr,ZX,Gnr,Onr,Vnr,a8,Xnr,__e,znr,Qnr,Wnr,Et,n8,Hnr,b_e,Unr,Jnr,Id,Ynr,v_e,Knr,Znr,ez,esr,osr,rsr,Y0,tsr,Er,s8,asr,F_e,nsr,ssr,Ua,lsr,T_e,isr,dsr,M_e,csr,fsr,E_e,msr,gsr,hsr,ne,K0,C_e,psr,usr,oz,_sr,bsr,vsr,Z0,w_e,Fsr,Tsr,rz,Msr,Esr,Csr,e6,A_e,wsr,Asr,tz,ysr,Lsr,xsr,o6,y_e,$sr,ksr,az,Ssr,Rsr,Bsr,r6,L_e,Psr,Isr,nz,qsr,Nsr,jsr,t6,x_e,Dsr,Gsr,sz,Osr,Vsr,Xsr,a6,$_e,zsr,Qsr,lz,Wsr,Hsr,Usr,n6,k_e,Jsr,Ysr,iz,Ksr,Zsr,elr,s6,S_e,olr,rlr,dz,tlr,alr,nlr,l6,R_e,slr,llr,cz,ilr,dlr,clr,i6,B_e,flr,mlr,fz,glr,hlr,plr,d6,P_e,ulr,_lr,mz,blr,vlr,Flr,c6,I_e,Tlr,Mlr,gz,Elr,Clr,wlr,f6,q_e,Alr,ylr,hz,Llr,xlr,$lr,m6,N_e,klr,Slr,pz,Rlr,Blr,Plr,g6,j_e,Ilr,qlr,uz,Nlr,jlr,Dlr,h6,D_e,Glr,Olr,_z,Vlr,Xlr,zlr,p6,G_e,Qlr,Wlr,bz,Hlr,Ulr,Jlr,u6,O_e,Ylr,Klr,vz,Zlr,eir,oir,_6,V_e,rir,tir,Fz,air,nir,sir,b6,X_e,lir,iir,Tz,dir,cir,fir,v6,z_e,mir,gir,Mz,hir,pir,uir,F6,Q_e,_ir,bir,Ez,vir,Fir,Tir,T6,KBe,qd,M6,W_e,l8,Mir,H_e,Eir,ZBe,Yo,i8,Cir,Nd,wir,Cz,Air,yir,wz,Lir,xir,$ir,d8,kir,U_e,Sir,Rir,Bir,Ct,c8,Pir,J_e,Iir,qir,jd,Nir,Y_e,jir,Dir,Az,Gir,Oir,Vir,E6,Xir,Cr,f8,zir,K_e,Qir,Wir,Ja,Hir,Z_e,Uir,Jir,e2e,Yir,Kir,o2e,Zir,edr,odr,Te,C6,r2e,rdr,tdr,yz,adr,ndr,sdr,w6,t2e,ldr,idr,Lz,ddr,cdr,fdr,A6,a2e,mdr,gdr,xz,hdr,pdr,udr,y6,n2e,_dr,bdr,$z,vdr,Fdr,Tdr,L6,s2e,Mdr,Edr,kz,Cdr,wdr,Adr,x6,l2e,ydr,Ldr,Sz,xdr,$dr,kdr,$6,i2e,Sdr,Rdr,Rz,Bdr,Pdr,Idr,k6,d2e,qdr,Ndr,Bz,jdr,Ddr,Gdr,S6,c2e,Odr,Vdr,Pz,Xdr,zdr,Qdr,R6,f2e,Wdr,Hdr,Iz,Udr,Jdr,Ydr,B6,m2e,Kdr,Zdr,qz,ecr,ocr,rcr,P6,g2e,tcr,acr,Nz,ncr,scr,lcr,I6,ePe,Dd,q6,h2e,m8,icr,p2e,dcr,oPe,Ko,g8,ccr,Gd,fcr,jz,mcr,gcr,Dz,hcr,pcr,ucr,h8,_cr,u2e,bcr,vcr,Fcr,wt,p8,Tcr,_2e,Mcr,Ecr,Od,Ccr,b2e,wcr,Acr,Gz,ycr,Lcr,xcr,N6,$cr,wr,u8,kcr,v2e,Scr,Rcr,Ya,Bcr,F2e,Pcr,Icr,T2e,qcr,Ncr,M2e,jcr,Dcr,Gcr,_8,j6,E2e,Ocr,Vcr,Oz,Xcr,zcr,Qcr,D6,C2e,Wcr,Hcr,Vz,Ucr,Jcr,Ycr,G6,rPe,Vd,O6,w2e,b8,Kcr,A2e,Zcr,tPe,Zo,v8,efr,Xd,ofr,Xz,rfr,tfr,zz,afr,nfr,sfr,F8,lfr,y2e,ifr,dfr,cfr,At,T8,ffr,L2e,mfr,gfr,zd,hfr,x2e,pfr,ufr,Qz,_fr,bfr,vfr,V6,Ffr,Ar,M8,Tfr,$2e,Mfr,Efr,Ka,Cfr,k2e,wfr,Afr,S2e,yfr,Lfr,R2e,xfr,$fr,kfr,ie,X6,B2e,Sfr,Rfr,Wz,Bfr,Pfr,Ifr,z6,P2e,qfr,Nfr,Hz,jfr,Dfr,Gfr,Q6,I2e,Ofr,Vfr,Uz,Xfr,zfr,Qfr,W6,q2e,Wfr,Hfr,Jz,Ufr,Jfr,Yfr,H6,N2e,Kfr,Zfr,Yz,emr,omr,rmr,U6,j2e,tmr,amr,Kz,nmr,smr,lmr,J6,D2e,imr,dmr,Zz,cmr,fmr,mmr,Y6,G2e,gmr,hmr,eQ,pmr,umr,_mr,K6,O2e,bmr,vmr,oQ,Fmr,Tmr,Mmr,Z6,V2e,Emr,Cmr,rQ,wmr,Amr,ymr,eT,X2e,Lmr,xmr,tQ,$mr,kmr,Smr,oT,z2e,Rmr,Bmr,aQ,Pmr,Imr,qmr,rT,Q2e,Nmr,jmr,nQ,Dmr,Gmr,Omr,tT,W2e,Vmr,Xmr,sQ,zmr,Qmr,Wmr,aT,H2e,Hmr,Umr,lQ,Jmr,Ymr,Kmr,nT,U2e,Zmr,egr,iQ,ogr,rgr,tgr,sT,J2e,agr,ngr,dQ,sgr,lgr,igr,lT,Y2e,dgr,cgr,cQ,fgr,mgr,ggr,iT,K2e,hgr,pgr,fQ,ugr,_gr,bgr,dT,Z2e,vgr,Fgr,mQ,Tgr,Mgr,Egr,cT,aPe,Qd,fT,e1e,E8,Cgr,o1e,wgr,nPe,er,C8,Agr,Wd,ygr,gQ,Lgr,xgr,hQ,$gr,kgr,Sgr,w8,Rgr,r1e,Bgr,Pgr,Igr,yt,A8,qgr,t1e,Ngr,jgr,Hd,Dgr,a1e,Ggr,Ogr,pQ,Vgr,Xgr,zgr,mT,Qgr,yr,y8,Wgr,n1e,Hgr,Ugr,Za,Jgr,s1e,Ygr,Kgr,l1e,Zgr,ehr,i1e,ohr,rhr,thr,ye,gT,d1e,ahr,nhr,uQ,shr,lhr,ihr,hT,c1e,dhr,chr,_Q,fhr,mhr,ghr,pT,f1e,hhr,phr,bQ,uhr,_hr,bhr,uT,m1e,vhr,Fhr,vQ,Thr,Mhr,Ehr,_T,g1e,Chr,whr,FQ,Ahr,yhr,Lhr,bT,h1e,xhr,$hr,TQ,khr,Shr,Rhr,vT,p1e,Bhr,Phr,MQ,Ihr,qhr,Nhr,FT,u1e,jhr,Dhr,EQ,Ghr,Ohr,Vhr,TT,_1e,Xhr,zhr,CQ,Qhr,Whr,Hhr,MT,b1e,Uhr,Jhr,wQ,Yhr,Khr,Zhr,ET,sPe,Ud,CT,v1e,L8,epr,F1e,opr,lPe,or,x8,rpr,Jd,tpr,AQ,apr,npr,yQ,spr,lpr,ipr,$8,dpr,T1e,cpr,fpr,mpr,Lt,k8,gpr,M1e,hpr,ppr,Yd,upr,E1e,_pr,bpr,LQ,vpr,Fpr,Tpr,wT,Mpr,Lr,S8,Epr,C1e,Cpr,wpr,en,Apr,w1e,ypr,Lpr,A1e,xpr,$pr,y1e,kpr,Spr,Rpr,Z,AT,L1e,Bpr,Ppr,xQ,Ipr,qpr,Npr,yT,x1e,jpr,Dpr,$Q,Gpr,Opr,Vpr,LT,$1e,Xpr,zpr,kQ,Qpr,Wpr,Hpr,xT,k1e,Upr,Jpr,SQ,Ypr,Kpr,Zpr,$T,S1e,eur,our,RQ,rur,tur,aur,kT,R1e,nur,sur,BQ,lur,iur,dur,ST,B1e,cur,fur,PQ,mur,gur,hur,RT,P1e,pur,uur,IQ,_ur,bur,vur,BT,I1e,Fur,Tur,qQ,Mur,Eur,Cur,PT,q1e,wur,Aur,NQ,yur,Lur,xur,IT,N1e,$ur,kur,jQ,Sur,Rur,Bur,qT,j1e,Pur,Iur,DQ,qur,Nur,jur,NT,D1e,Dur,Gur,GQ,Our,Vur,Xur,jT,G1e,zur,Qur,OQ,Wur,Hur,Uur,DT,O1e,Jur,Yur,VQ,Kur,Zur,e_r,GT,V1e,o_r,r_r,XQ,t_r,a_r,n_r,OT,X1e,s_r,l_r,zQ,i_r,d_r,c_r,VT,z1e,f_r,m_r,QQ,g_r,h_r,p_r,XT,Q1e,u_r,__r,WQ,b_r,v_r,F_r,zT,W1e,T_r,M_r,HQ,E_r,C_r,w_r,QT,H1e,A_r,y_r,UQ,L_r,x_r,$_r,WT,U1e,k_r,S_r,JQ,R_r,B_r,P_r,HT,J1e,I_r,q_r,YQ,N_r,j_r,D_r,UT,Y1e,G_r,O_r,KQ,V_r,X_r,z_r,JT,K1e,Q_r,W_r,ZQ,H_r,U_r,J_r,YT,Z1e,Y_r,K_r,eW,Z_r,e2r,o2r,KT,iPe,Kd,ZT,ebe,R8,r2r,obe,t2r,dPe,rr,B8,a2r,Zd,n2r,oW,s2r,l2r,rW,i2r,d2r,c2r,P8,f2r,rbe,m2r,g2r,h2r,xt,I8,p2r,tbe,u2r,_2r,ec,b2r,abe,v2r,F2r,tW,T2r,M2r,E2r,eM,C2r,xr,q8,w2r,nbe,A2r,y2r,on,L2r,sbe,x2r,$2r,lbe,k2r,S2r,ibe,R2r,B2r,P2r,pe,oM,dbe,I2r,q2r,aW,N2r,j2r,D2r,rM,cbe,G2r,O2r,nW,V2r,X2r,z2r,tM,fbe,Q2r,W2r,sW,H2r,U2r,J2r,aM,mbe,Y2r,K2r,lW,Z2r,e1r,o1r,nM,gbe,r1r,t1r,iW,a1r,n1r,s1r,sM,hbe,l1r,i1r,dW,d1r,c1r,f1r,lM,pbe,m1r,g1r,cW,h1r,p1r,u1r,iM,ube,_1r,b1r,fW,v1r,F1r,T1r,dM,_be,M1r,E1r,mW,C1r,w1r,A1r,cM,bbe,y1r,L1r,gW,x1r,$1r,k1r,fM,vbe,S1r,R1r,hW,B1r,P1r,I1r,mM,Fbe,q1r,N1r,pW,j1r,D1r,G1r,gM,Tbe,O1r,V1r,uW,X1r,z1r,Q1r,hM,Mbe,W1r,H1r,_W,U1r,J1r,Y1r,pM,Ebe,K1r,Z1r,bW,ebr,obr,rbr,uM,Cbe,tbr,abr,vW,nbr,sbr,lbr,_M,wbe,ibr,dbr,FW,cbr,fbr,mbr,bM,cPe,oc,vM,Abe,N8,gbr,ybe,hbr,fPe,tr,j8,pbr,rc,ubr,TW,_br,bbr,MW,vbr,Fbr,Tbr,D8,Mbr,Lbe,Ebr,Cbr,wbr,$t,G8,Abr,xbe,ybr,Lbr,tc,xbr,$be,$br,kbr,EW,Sbr,Rbr,Bbr,FM,Pbr,$r,O8,Ibr,kbe,qbr,Nbr,rn,jbr,Sbe,Dbr,Gbr,Rbe,Obr,Vbr,Bbe,Xbr,zbr,Qbr,Pbe,TM,Ibe,Wbr,Hbr,CW,Ubr,Jbr,Ybr,MM,mPe,ac,EM,qbe,V8,Kbr,Nbe,Zbr,gPe,ar,X8,e4r,nc,o4r,wW,r4r,t4r,AW,a4r,n4r,s4r,z8,l4r,jbe,i4r,d4r,c4r,kt,Q8,f4r,Dbe,m4r,g4r,sc,h4r,Gbe,p4r,u4r,yW,_4r,b4r,v4r,CM,F4r,kr,W8,T4r,Obe,M4r,E4r,tn,C4r,Vbe,w4r,A4r,Xbe,y4r,L4r,zbe,x4r,$4r,k4r,de,wM,Qbe,S4r,R4r,LW,B4r,P4r,I4r,AM,Wbe,q4r,N4r,xW,j4r,D4r,G4r,yM,Hbe,O4r,V4r,$W,X4r,z4r,Q4r,LM,Ube,W4r,H4r,kW,U4r,J4r,Y4r,xM,Jbe,K4r,Z4r,SW,evr,ovr,rvr,$M,Ybe,tvr,avr,RW,nvr,svr,lvr,kM,Kbe,ivr,dvr,BW,cvr,fvr,mvr,SM,Zbe,gvr,hvr,PW,pvr,uvr,_vr,RM,e4e,bvr,vvr,IW,Fvr,Tvr,Mvr,BM,o4e,Evr,Cvr,qW,wvr,Avr,yvr,PM,r4e,Lvr,xvr,NW,$vr,kvr,Svr,IM,t4e,Rvr,Bvr,jW,Pvr,Ivr,qvr,qM,a4e,Nvr,jvr,DW,Dvr,Gvr,Ovr,NM,n4e,Vvr,Xvr,GW,zvr,Qvr,Wvr,jM,s4e,Hvr,Uvr,OW,Jvr,Yvr,Kvr,DM,l4e,Zvr,eFr,VW,oFr,rFr,tFr,GM,i4e,aFr,nFr,XW,sFr,lFr,iFr,OM,d4e,dFr,cFr,zW,fFr,mFr,gFr,VM,c4e,hFr,pFr,QW,uFr,_Fr,bFr,XM,f4e,vFr,FFr,WW,TFr,MFr,EFr,zM,hPe,lc,QM,m4e,H8,CFr,g4e,wFr,pPe,nr,U8,AFr,ic,yFr,HW,LFr,xFr,UW,$Fr,kFr,SFr,J8,RFr,h4e,BFr,PFr,IFr,St,Y8,qFr,p4e,NFr,jFr,dc,DFr,u4e,GFr,OFr,JW,VFr,XFr,zFr,WM,QFr,Sr,K8,WFr,_4e,HFr,UFr,an,JFr,b4e,YFr,KFr,v4e,ZFr,e0r,F4e,o0r,r0r,t0r,ce,HM,T4e,a0r,n0r,YW,s0r,l0r,i0r,UM,M4e,d0r,c0r,KW,f0r,m0r,g0r,JM,E4e,h0r,p0r,ZW,u0r,_0r,b0r,YM,C4e,v0r,F0r,eH,T0r,M0r,E0r,KM,w4e,C0r,w0r,oH,A0r,y0r,L0r,ZM,A4e,x0r,$0r,rH,k0r,S0r,R0r,eE,y4e,B0r,P0r,tH,I0r,q0r,N0r,oE,L4e,j0r,D0r,aH,G0r,O0r,V0r,rE,x4e,X0r,z0r,nH,Q0r,W0r,H0r,tE,$4e,U0r,J0r,sH,Y0r,K0r,Z0r,aE,k4e,e6r,o6r,lH,r6r,t6r,a6r,nE,S4e,n6r,s6r,iH,l6r,i6r,d6r,sE,R4e,c6r,f6r,dH,m6r,g6r,h6r,lE,B4e,p6r,u6r,cH,_6r,b6r,v6r,iE,P4e,F6r,T6r,fH,M6r,E6r,C6r,dE,I4e,w6r,A6r,mH,y6r,L6r,x6r,cE,q4e,$6r,k6r,gH,S6r,R6r,B6r,fE,N4e,P6r,I6r,hH,q6r,N6r,j6r,mE,j4e,D6r,G6r,pH,O6r,V6r,X6r,gE,D4e,z6r,Q6r,uH,W6r,H6r,U6r,hE,uPe,cc,pE,G4e,Z8,J6r,O4e,Y6r,_Pe,sr,e7,K6r,fc,Z6r,_H,eTr,oTr,bH,rTr,tTr,aTr,o7,nTr,V4e,sTr,lTr,iTr,Rt,r7,dTr,X4e,cTr,fTr,mc,mTr,z4e,gTr,hTr,vH,pTr,uTr,_Tr,uE,bTr,Rr,t7,vTr,Q4e,FTr,TTr,nn,MTr,W4e,ETr,CTr,H4e,wTr,ATr,U4e,yTr,LTr,xTr,J4e,_E,Y4e,$Tr,kTr,FH,STr,RTr,BTr,bE,bPe,gc,vE,K4e,a7,PTr,Z4e,ITr,vPe,lr,n7,qTr,hc,NTr,TH,jTr,DTr,MH,GTr,OTr,VTr,s7,XTr,eve,zTr,QTr,WTr,Bt,l7,HTr,ove,UTr,JTr,pc,YTr,rve,KTr,ZTr,EH,eMr,oMr,rMr,FE,tMr,Br,i7,aMr,tve,nMr,sMr,sn,lMr,ave,iMr,dMr,nve,cMr,fMr,sve,mMr,gMr,hMr,lve,TE,ive,pMr,uMr,CH,_Mr,bMr,vMr,ME,FPe,uc,EE,dve,d7,FMr,cve,TMr,TPe,ir,c7,MMr,_c,EMr,wH,CMr,wMr,AH,AMr,yMr,LMr,f7,xMr,fve,$Mr,kMr,SMr,Pt,m7,RMr,mve,BMr,PMr,bc,IMr,gve,qMr,NMr,yH,jMr,DMr,GMr,CE,OMr,Pr,g7,VMr,hve,XMr,zMr,ln,QMr,pve,WMr,HMr,uve,UMr,JMr,_ve,YMr,KMr,ZMr,oe,wE,bve,eEr,oEr,LH,rEr,tEr,aEr,AE,vve,nEr,sEr,xH,lEr,iEr,dEr,yE,Fve,cEr,fEr,$H,mEr,gEr,hEr,LE,Tve,pEr,uEr,kH,_Er,bEr,vEr,xE,Mve,FEr,TEr,SH,MEr,EEr,CEr,$E,Eve,wEr,AEr,RH,yEr,LEr,xEr,kE,Cve,$Er,kEr,BH,SEr,REr,BEr,SE,wve,PEr,IEr,PH,qEr,NEr,jEr,RE,Ave,DEr,GEr,IH,OEr,VEr,XEr,BE,yve,zEr,QEr,qH,WEr,HEr,UEr,PE,Lve,JEr,YEr,NH,KEr,ZEr,eCr,IE,xve,oCr,rCr,jH,tCr,aCr,nCr,qE,$ve,sCr,lCr,DH,iCr,dCr,cCr,NE,kve,fCr,mCr,GH,gCr,hCr,pCr,jE,Sve,uCr,_Cr,OH,bCr,vCr,FCr,DE,Rve,TCr,MCr,VH,ECr,CCr,wCr,GE,Bve,ACr,yCr,XH,LCr,xCr,$Cr,OE,Pve,kCr,SCr,zH,RCr,BCr,PCr,VE,Ive,ICr,qCr,QH,NCr,jCr,DCr,XE,qve,GCr,OCr,WH,VCr,XCr,zCr,zE,Nve,QCr,WCr,HH,HCr,UCr,JCr,QE,jve,YCr,KCr,UH,ZCr,e5r,o5r,WE,Dve,r5r,t5r,JH,a5r,n5r,s5r,HE,Gve,l5r,i5r,YH,d5r,c5r,f5r,UE,Ove,m5r,g5r,KH,h5r,p5r,u5r,JE,MPe,vc,YE,Vve,h7,_5r,Xve,b5r,EPe,dr,p7,v5r,Fc,F5r,ZH,T5r,M5r,eU,E5r,C5r,w5r,u7,A5r,zve,y5r,L5r,x5r,It,_7,$5r,Qve,k5r,S5r,Tc,R5r,Wve,B5r,P5r,oU,I5r,q5r,N5r,KE,j5r,Ir,b7,D5r,Hve,G5r,O5r,dn,V5r,Uve,X5r,z5r,Jve,Q5r,W5r,Yve,H5r,U5r,J5r,Hr,ZE,Kve,Y5r,K5r,rU,Z5r,e3r,o3r,eC,Zve,r3r,t3r,tU,a3r,n3r,s3r,oC,eFe,l3r,i3r,aU,d3r,c3r,f3r,rC,oFe,m3r,g3r,nU,h3r,p3r,u3r,tC,rFe,_3r,b3r,sU,v3r,F3r,T3r,aC,CPe,Mc,nC,tFe,v7,M3r,aFe,E3r,wPe,cr,F7,C3r,Ec,w3r,lU,A3r,y3r,iU,L3r,x3r,$3r,T7,k3r,nFe,S3r,R3r,B3r,qt,M7,P3r,sFe,I3r,q3r,Cc,N3r,lFe,j3r,D3r,dU,G3r,O3r,V3r,sC,X3r,qr,E7,z3r,iFe,Q3r,W3r,cn,H3r,dFe,U3r,J3r,cFe,Y3r,K3r,fFe,Z3r,ewr,owr,Me,lC,mFe,rwr,twr,cU,awr,nwr,swr,iC,gFe,lwr,iwr,fU,dwr,cwr,fwr,dC,hFe,mwr,gwr,mU,hwr,pwr,uwr,cC,pFe,_wr,bwr,gU,vwr,Fwr,Twr,fC,uFe,Mwr,Ewr,hU,Cwr,wwr,Awr,mC,_Fe,ywr,Lwr,pU,xwr,$wr,kwr,gC,bFe,Swr,Rwr,uU,Bwr,Pwr,Iwr,hC,vFe,qwr,Nwr,_U,jwr,Dwr,Gwr,pC,FFe,Owr,Vwr,bU,Xwr,zwr,Qwr,uC,TFe,Wwr,Hwr,vU,Uwr,Jwr,Ywr,_C,MFe,Kwr,Zwr,FU,eAr,oAr,rAr,bC,EFe,tAr,aAr,TU,nAr,sAr,lAr,vC,APe,wc,FC,CFe,C7,iAr,wFe,dAr,yPe,fr,w7,cAr,Ac,fAr,MU,mAr,gAr,EU,hAr,pAr,uAr,A7,_Ar,AFe,bAr,vAr,FAr,Nt,y7,TAr,yFe,MAr,EAr,yc,CAr,LFe,wAr,AAr,CU,yAr,LAr,xAr,TC,$Ar,Nr,L7,kAr,xFe,SAr,RAr,fn,BAr,$Fe,PAr,IAr,kFe,qAr,NAr,SFe,jAr,DAr,GAr,Le,MC,RFe,OAr,VAr,wU,XAr,zAr,QAr,EC,BFe,WAr,HAr,AU,UAr,JAr,YAr,CC,PFe,KAr,ZAr,yU,eyr,oyr,ryr,wC,IFe,tyr,ayr,LU,nyr,syr,lyr,AC,qFe,iyr,dyr,xU,cyr,fyr,myr,yC,NFe,gyr,hyr,$U,pyr,uyr,_yr,LC,jFe,byr,vyr,kU,Fyr,Tyr,Myr,xC,DFe,Eyr,Cyr,SU,wyr,Ayr,yyr,$C,GFe,Lyr,xyr,RU,$yr,kyr,Syr,kC,OFe,Ryr,Byr,BU,Pyr,Iyr,qyr,SC,LPe,Lc,RC,VFe,x7,Nyr,XFe,jyr,xPe,mr,$7,Dyr,xc,Gyr,PU,Oyr,Vyr,IU,Xyr,zyr,Qyr,k7,Wyr,zFe,Hyr,Uyr,Jyr,jt,S7,Yyr,QFe,Kyr,Zyr,$c,eLr,WFe,oLr,rLr,qU,tLr,aLr,nLr,BC,sLr,jr,R7,lLr,HFe,iLr,dLr,mn,cLr,UFe,fLr,mLr,JFe,gLr,hLr,YFe,pLr,uLr,_Lr,Se,PC,KFe,bLr,vLr,NU,FLr,TLr,MLr,IC,ZFe,ELr,CLr,jU,wLr,ALr,yLr,qC,e0e,LLr,xLr,DU,$Lr,kLr,SLr,NC,o0e,RLr,BLr,GU,PLr,ILr,qLr,jC,r0e,NLr,jLr,OU,DLr,GLr,OLr,DC,t0e,VLr,XLr,VU,zLr,QLr,WLr,GC,a0e,HLr,ULr,XU,JLr,YLr,KLr,OC,n0e,ZLr,e8r,zU,o8r,r8r,t8r,VC,s0e,a8r,n8r,QU,s8r,l8r,i8r,XC,$Pe,kc,zC,l0e,B7,d8r,i0e,c8r,kPe,gr,P7,f8r,Sc,m8r,WU,g8r,h8r,HU,p8r,u8r,_8r,I7,b8r,d0e,v8r,F8r,T8r,Dt,q7,M8r,c0e,E8r,C8r,Rc,w8r,f0e,A8r,y8r,UU,L8r,x8r,$8r,QC,k8r,Dr,N7,S8r,m0e,R8r,B8r,gn,P8r,g0e,I8r,q8r,h0e,N8r,j8r,p0e,D8r,G8r,O8r,xe,WC,u0e,V8r,X8r,JU,z8r,Q8r,W8r,HC,_0e,H8r,U8r,YU,J8r,Y8r,K8r,UC,b0e,Z8r,e7r,KU,o7r,r7r,t7r,JC,v0e,a7r,n7r,ZU,s7r,l7r,i7r,YC,F0e,d7r,c7r,eJ,f7r,m7r,g7r,KC,T0e,h7r,p7r,oJ,u7r,_7r,b7r,ZC,M0e,v7r,F7r,rJ,T7r,M7r,E7r,e5,E0e,C7r,w7r,tJ,A7r,y7r,L7r,o5,C0e,x7r,$7r,aJ,k7r,S7r,R7r,r5,w0e,B7r,P7r,nJ,I7r,q7r,N7r,t5,SPe,Bc,a5,A0e,j7,j7r,y0e,D7r,RPe,hr,D7,G7r,Pc,O7r,sJ,V7r,X7r,lJ,z7r,Q7r,W7r,G7,H7r,L0e,U7r,J7r,Y7r,Gt,O7,K7r,x0e,Z7r,exr,Ic,oxr,$0e,rxr,txr,iJ,axr,nxr,sxr,n5,lxr,Gr,V7,ixr,k0e,dxr,cxr,hn,fxr,S0e,mxr,gxr,R0e,hxr,pxr,B0e,uxr,_xr,bxr,$e,s5,P0e,vxr,Fxr,dJ,Txr,Mxr,Exr,l5,I0e,Cxr,wxr,cJ,Axr,yxr,Lxr,i5,q0e,xxr,$xr,fJ,kxr,Sxr,Rxr,d5,N0e,Bxr,Pxr,mJ,Ixr,qxr,Nxr,c5,j0e,jxr,Dxr,gJ,Gxr,Oxr,Vxr,f5,D0e,Xxr,zxr,hJ,Qxr,Wxr,Hxr,m5,G0e,Uxr,Jxr,pJ,Yxr,Kxr,Zxr,g5,O0e,e9r,o9r,uJ,r9r,t9r,a9r,h5,V0e,n9r,s9r,_J,l9r,i9r,d9r,p5,X0e,c9r,f9r,bJ,m9r,g9r,h9r,u5,BPe,qc,_5,z0e,X7,p9r,Q0e,u9r,PPe,pr,z7,_9r,Nc,b9r,vJ,v9r,F9r,FJ,T9r,M9r,E9r,Q7,C9r,W0e,w9r,A9r,y9r,Ot,W7,L9r,H0e,x9r,$9r,jc,k9r,U0e,S9r,R9r,TJ,B9r,P9r,I9r,b5,q9r,Or,H7,N9r,J0e,j9r,D9r,pn,G9r,Y0e,O9r,V9r,K0e,X9r,z9r,Z0e,Q9r,W9r,H9r,je,v5,e6e,U9r,J9r,MJ,Y9r,K9r,Z9r,F5,o6e,e$r,o$r,EJ,r$r,t$r,a$r,T5,r6e,n$r,s$r,CJ,l$r,i$r,d$r,M5,t6e,c$r,f$r,wJ,m$r,g$r,h$r,E5,a6e,p$r,u$r,AJ,_$r,b$r,v$r,C5,n6e,F$r,T$r,yJ,M$r,E$r,C$r,w5,s6e,w$r,A$r,LJ,y$r,L$r,x$r,A5,l6e,$$r,k$r,xJ,S$r,R$r,B$r,y5,IPe,Dc,L5,i6e,U7,P$r,d6e,I$r,qPe,ur,J7,q$r,Gc,N$r,$J,j$r,D$r,kJ,G$r,O$r,V$r,Y7,X$r,c6e,z$r,Q$r,W$r,Vt,K7,H$r,f6e,U$r,J$r,Oc,Y$r,m6e,K$r,Z$r,SJ,ekr,okr,rkr,x5,tkr,Vr,Z7,akr,g6e,nkr,skr,un,lkr,h6e,ikr,dkr,p6e,ckr,fkr,u6e,mkr,gkr,hkr,De,$5,_6e,pkr,ukr,RJ,_kr,bkr,vkr,k5,b6e,Fkr,Tkr,BJ,Mkr,Ekr,Ckr,S5,v6e,wkr,Akr,PJ,ykr,Lkr,xkr,R5,F6e,$kr,kkr,IJ,Skr,Rkr,Bkr,B5,T6e,Pkr,Ikr,qJ,qkr,Nkr,jkr,P5,M6e,Dkr,Gkr,NJ,Okr,Vkr,Xkr,I5,E6e,zkr,Qkr,jJ,Wkr,Hkr,Ukr,q5,C6e,Jkr,Ykr,DJ,Kkr,Zkr,eSr,N5,NPe,Vc,j5,w6e,ex,oSr,A6e,rSr,jPe,_r,ox,tSr,Xc,aSr,GJ,nSr,sSr,OJ,lSr,iSr,dSr,rx,cSr,y6e,fSr,mSr,gSr,Xt,tx,hSr,L6e,pSr,uSr,zc,_Sr,x6e,bSr,vSr,VJ,FSr,TSr,MSr,D5,ESr,Xr,ax,CSr,$6e,wSr,ASr,_n,ySr,k6e,LSr,xSr,S6e,$Sr,kSr,R6e,SSr,RSr,BSr,B6e,G5,P6e,PSr,ISr,XJ,qSr,NSr,jSr,O5,DPe,Qc,V5,I6e,nx,DSr,q6e,GSr,GPe,br,sx,OSr,Wc,VSr,zJ,XSr,zSr,QJ,QSr,WSr,HSr,lx,USr,N6e,JSr,YSr,KSr,zt,ix,ZSr,j6e,eRr,oRr,Hc,rRr,D6e,tRr,aRr,WJ,nRr,sRr,lRr,X5,iRr,zr,dx,dRr,G6e,cRr,fRr,bn,mRr,O6e,gRr,hRr,V6e,pRr,uRr,X6e,_Rr,bRr,vRr,cx,z5,z6e,FRr,TRr,HJ,MRr,ERr,CRr,Q5,Q6e,wRr,ARr,UJ,yRr,LRr,xRr,W5,OPe,Uc,H5,W6e,fx,$Rr,H6e,kRr,VPe,vr,mx,SRr,Jc,RRr,JJ,BRr,PRr,YJ,IRr,qRr,NRr,gx,jRr,U6e,DRr,GRr,ORr,Qt,hx,VRr,J6e,XRr,zRr,Yc,QRr,Y6e,WRr,HRr,KJ,URr,JRr,YRr,U5,KRr,Qr,px,ZRr,K6e,eBr,oBr,vn,rBr,Z6e,tBr,aBr,eTe,nBr,sBr,oTe,lBr,iBr,dBr,rTe,J5,tTe,cBr,fBr,ZJ,mBr,gBr,hBr,Y5,XPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_A=new ee({}),bA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new pBr({props:{warning:!0,$$slots:{default:[KEt]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L563"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[ZEt]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L708"}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L377"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L587"}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),dh=new pBr({props:{$$slots:{default:[oCt]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L76"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new pBr({props:{$$slots:{default:[tCt]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L243"}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L716"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCConfig">MCTCConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCModel">MCTCModel</a> (MCTC model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),vu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L723"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Tu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),ZA=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L738"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),W_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L745"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),S2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L752"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),B2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Z2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L761"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L795"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Lb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L802"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$b=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),qb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L788"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),jb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),F4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L770"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),M4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),dv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L777"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),fv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L811"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),uv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L850"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Bv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L857"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Iv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Qv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L880"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Hv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L864"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCConfig">MCTCConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCForCTC">MCTCForCTC</a> (MCTC model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L871"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),vF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),TL=new ee({}),ML=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L889"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),TF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),AL=new ee({}),yL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L896"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),kL=new ee({}),SL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L843"}}),BL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),jF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),IL=new ee({}),qL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L818"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),GF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),GL=new ee({}),OL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L825"}}),XL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WCt]},$$scope:{ctx:L}}}),zL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HCt]},$$scope:{ctx:L}}}),QL=new ee({}),WL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L834"}}),UL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),JL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),YL=new ee({}),KL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),e8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YCt]},$$scope:{ctx:L}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),r8=new ee({}),t8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),n8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[e5t]},$$scope:{ctx:L}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),c8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),E6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[o5t]},$$scope:{ctx:L}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[r5t]},$$scope:{ctx:L}}}),m8=new ee({}),g8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),p8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[t5t]},$$scope:{ctx:L}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),G6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[a5t]},$$scope:{ctx:L}}}),b8=new ee({}),v8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),T8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),V6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[n5t]},$$scope:{ctx:L}}}),M8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[s5t]},$$scope:{ctx:L}}}),E8=new ee({}),C8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),A8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[l5t]},$$scope:{ctx:L}}}),y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[i5t]},$$scope:{ctx:L}}}),L8=new ee({}),x8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),k8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[d5t]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[c5t]},$$scope:{ctx:L}}}),R8=new ee({}),B8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),I8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),eM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[f5t]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[m5t]},$$scope:{ctx:L}}}),N8=new ee({}),j8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),G8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[g5t]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[h5t]},$$scope:{ctx:L}}}),V8=new ee({}),X8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[p5t]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),zM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[u5t]},$$scope:{ctx:L}}}),H8=new ee({}),U8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),WM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_5t]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[b5t]},$$scope:{ctx:L}}}),Z8=new ee({}),e7=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),r7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[v5t]},$$scope:{ctx:L}}}),t7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),bE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[F5t]},$$scope:{ctx:L}}}),a7=new ee({}),n7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),l7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),FE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[T5t]},$$scope:{ctx:L}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[M5t]},$$scope:{ctx:L}}}),d7=new ee({}),c7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),m7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[E5t]},$$scope:{ctx:L}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),JE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[C5t]},$$scope:{ctx:L}}}),h7=new ee({}),p7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),_7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),KE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[w5t]},$$scope:{ctx:L}}}),b7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[A5t]},$$scope:{ctx:L}}}),v7=new ee({}),F7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),M7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),sC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[y5t]},$$scope:{ctx:L}}}),E7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),vC=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[L5t]},$$scope:{ctx:L}}}),C7=new ee({}),w7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),y7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),TC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[x5t]},$$scope:{ctx:L}}}),L7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$5t]},$$scope:{ctx:L}}}),x7=new ee({}),$7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),S7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[k5t]},$$scope:{ctx:L}}}),R7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[S5t]},$$scope:{ctx:L}}}),B7=new ee({}),P7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),q7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[R5t]},$$scope:{ctx:L}}}),N7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[B5t]},$$scope:{ctx:L}}}),j7=new ee({}),D7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),O7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[P5t]},$$scope:{ctx:L}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),u5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[I5t]},$$scope:{ctx:L}}}),X7=new ee({}),z7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),W7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[q5t]},$$scope:{ctx:L}}}),H7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),y5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[N5t]},$$scope:{ctx:L}}}),U7=new ee({}),J7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),K7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),x5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[j5t]},$$scope:{ctx:L}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[D5t]},$$scope:{ctx:L}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[G5t]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[O5t]},$$scope:{ctx:L}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[V5t]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[X5t]},$$scope:{ctx:L}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),U5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[z5t]},$$scope:{ctx:L}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Y5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Q5t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),gA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Ve=a("p"),ai=o("Instantiating one of "),Tn=a("a"),hA=o("AutoConfig"),Mn=o(", "),En=a("a"),pA=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),uA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Xe=l(),Ae=a("p"),L9=o("will create a model that is an instance of "),li=a("a"),x9=o("BertModel"),$9=o("."),To=l(),va=a("p"),k9=o("There is one class of "),af=a("code"),S9=o("AutoModel"),Uqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),ii=a("h2"),nf=a("a"),XK=a("span"),F(_A.$$.fragment),Jqe=l(),zK=a("span"),Yqe=o("Extending the Auto Classes"),XRe=l(),wn=a("p"),Kqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=a("code"),Zqe=o("NewModel"),eNe=o(", make sure you have a "),WK=a("code"),oNe=o("NewModelConfig"),rNe=o(` then you can add those to the auto
classes like this:`),zRe=l(),F(bA.$$.fragment),QRe=l(),R9=a("p"),tNe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),F(sf.$$.fragment),HRe=l(),di=a("h2"),lf=a("a"),HK=a("span"),F(vA.$$.fragment),aNe=l(),UK=a("span"),nNe=o("AutoConfig"),URe=l(),Mo=a("div"),F(FA.$$.fragment),sNe=l(),TA=a("p"),lNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B9=a("a"),iNe=o("from_pretrained()"),dNe=o(" class method."),cNe=l(),MA=a("p"),fNe=o("This class cannot be instantiated directly using "),JK=a("code"),mNe=o("__init__()"),gNe=o(" (throws an error)."),hNe=l(),Fr=a("div"),F(EA.$$.fragment),pNe=l(),YK=a("p"),uNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),_Ne=l(),ci=a("p"),bNe=o("The configuration class to instantiate is selected based on the "),KK=a("code"),vNe=o("model_type"),FNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=a("code"),TNe=o("pretrained_model_name_or_path"),MNe=o(":"),ENe=l(),A=a("ul"),df=a("li"),eZ=a("strong"),CNe=o("albert"),wNe=o(" \u2014 "),P9=a("a"),ANe=o("AlbertConfig"),yNe=o(" (ALBERT model)"),LNe=l(),cf=a("li"),oZ=a("strong"),xNe=o("bart"),$Ne=o(" \u2014 "),I9=a("a"),kNe=o("BartConfig"),SNe=o(" (BART model)"),RNe=l(),ff=a("li"),rZ=a("strong"),BNe=o("beit"),PNe=o(" \u2014 "),q9=a("a"),INe=o("BeitConfig"),qNe=o(" (BEiT model)"),NNe=l(),mf=a("li"),tZ=a("strong"),jNe=o("bert"),DNe=o(" \u2014 "),N9=a("a"),GNe=o("BertConfig"),ONe=o(" (BERT model)"),VNe=l(),gf=a("li"),aZ=a("strong"),XNe=o("bert-generation"),zNe=o(" \u2014 "),j9=a("a"),QNe=o("BertGenerationConfig"),WNe=o(" (Bert Generation model)"),HNe=l(),hf=a("li"),nZ=a("strong"),UNe=o("big_bird"),JNe=o(" \u2014 "),D9=a("a"),YNe=o("BigBirdConfig"),KNe=o(" (BigBird model)"),ZNe=l(),pf=a("li"),sZ=a("strong"),eje=o("bigbird_pegasus"),oje=o(" \u2014 "),G9=a("a"),rje=o("BigBirdPegasusConfig"),tje=o(" (BigBirdPegasus model)"),aje=l(),uf=a("li"),lZ=a("strong"),nje=o("blenderbot"),sje=o(" \u2014 "),O9=a("a"),lje=o("BlenderbotConfig"),ije=o(" (Blenderbot model)"),dje=l(),_f=a("li"),iZ=a("strong"),cje=o("blenderbot-small"),fje=o(" \u2014 "),V9=a("a"),mje=o("BlenderbotSmallConfig"),gje=o(" (BlenderbotSmall model)"),hje=l(),bf=a("li"),dZ=a("strong"),pje=o("camembert"),uje=o(" \u2014 "),X9=a("a"),_je=o("CamembertConfig"),bje=o(" (CamemBERT model)"),vje=l(),vf=a("li"),cZ=a("strong"),Fje=o("canine"),Tje=o(" \u2014 "),z9=a("a"),Mje=o("CanineConfig"),Eje=o(" (Canine model)"),Cje=l(),Ff=a("li"),fZ=a("strong"),wje=o("clip"),Aje=o(" \u2014 "),Q9=a("a"),yje=o("CLIPConfig"),Lje=o(" (CLIP model)"),xje=l(),Tf=a("li"),mZ=a("strong"),$je=o("convbert"),kje=o(" \u2014 "),W9=a("a"),Sje=o("ConvBertConfig"),Rje=o(" (ConvBERT model)"),Bje=l(),Mf=a("li"),gZ=a("strong"),Pje=o("convnext"),Ije=o(" \u2014 "),H9=a("a"),qje=o("ConvNextConfig"),Nje=o(" (ConvNext model)"),jje=l(),Ef=a("li"),hZ=a("strong"),Dje=o("ctrl"),Gje=o(" \u2014 "),U9=a("a"),Oje=o("CTRLConfig"),Vje=o(" (CTRL model)"),Xje=l(),Cf=a("li"),pZ=a("strong"),zje=o("data2vec-audio"),Qje=o(" \u2014 "),J9=a("a"),Wje=o("Data2VecAudioConfig"),Hje=o(" (Data2VecAudio model)"),Uje=l(),wf=a("li"),uZ=a("strong"),Jje=o("data2vec-text"),Yje=o(" \u2014 "),Y9=a("a"),Kje=o("Data2VecTextConfig"),Zje=o(" (Data2VecText model)"),eDe=l(),Af=a("li"),_Z=a("strong"),oDe=o("data2vec-vision"),rDe=o(" \u2014 "),K9=a("a"),tDe=o("Data2VecVisionConfig"),aDe=o(" (Data2VecVision model)"),nDe=l(),yf=a("li"),bZ=a("strong"),sDe=o("deberta"),lDe=o(" \u2014 "),Z9=a("a"),iDe=o("DebertaConfig"),dDe=o(" (DeBERTa model)"),cDe=l(),Lf=a("li"),vZ=a("strong"),fDe=o("deberta-v2"),mDe=o(" \u2014 "),e$=a("a"),gDe=o("DebertaV2Config"),hDe=o(" (DeBERTa-v2 model)"),pDe=l(),xf=a("li"),FZ=a("strong"),uDe=o("decision_transformer"),_De=o(" \u2014 "),o$=a("a"),bDe=o("DecisionTransformerConfig"),vDe=o(" (Decision Transformer model)"),FDe=l(),$f=a("li"),TZ=a("strong"),TDe=o("deit"),MDe=o(" \u2014 "),r$=a("a"),EDe=o("DeiTConfig"),CDe=o(" (DeiT model)"),wDe=l(),kf=a("li"),MZ=a("strong"),ADe=o("detr"),yDe=o(" \u2014 "),t$=a("a"),LDe=o("DetrConfig"),xDe=o(" (DETR model)"),$De=l(),Sf=a("li"),EZ=a("strong"),kDe=o("distilbert"),SDe=o(" \u2014 "),a$=a("a"),RDe=o("DistilBertConfig"),BDe=o(" (DistilBERT model)"),PDe=l(),Rf=a("li"),CZ=a("strong"),IDe=o("dpr"),qDe=o(" \u2014 "),n$=a("a"),NDe=o("DPRConfig"),jDe=o(" (DPR model)"),DDe=l(),Bf=a("li"),wZ=a("strong"),GDe=o("dpt"),ODe=o(" \u2014 "),s$=a("a"),VDe=o("DPTConfig"),XDe=o(" (DPT model)"),zDe=l(),Pf=a("li"),AZ=a("strong"),QDe=o("electra"),WDe=o(" \u2014 "),l$=a("a"),HDe=o("ElectraConfig"),UDe=o(" (ELECTRA model)"),JDe=l(),If=a("li"),yZ=a("strong"),YDe=o("encoder-decoder"),KDe=o(" \u2014 "),i$=a("a"),ZDe=o("EncoderDecoderConfig"),eGe=o(" (Encoder decoder model)"),oGe=l(),qf=a("li"),LZ=a("strong"),rGe=o("flaubert"),tGe=o(" \u2014 "),d$=a("a"),aGe=o("FlaubertConfig"),nGe=o(" (FlauBERT model)"),sGe=l(),Nf=a("li"),xZ=a("strong"),lGe=o("fnet"),iGe=o(" \u2014 "),c$=a("a"),dGe=o("FNetConfig"),cGe=o(" (FNet model)"),fGe=l(),jf=a("li"),$Z=a("strong"),mGe=o("fsmt"),gGe=o(" \u2014 "),f$=a("a"),hGe=o("FSMTConfig"),pGe=o(" (FairSeq Machine-Translation model)"),uGe=l(),Df=a("li"),kZ=a("strong"),_Ge=o("funnel"),bGe=o(" \u2014 "),m$=a("a"),vGe=o("FunnelConfig"),FGe=o(" (Funnel Transformer model)"),TGe=l(),Gf=a("li"),SZ=a("strong"),MGe=o("glpn"),EGe=o(" \u2014 "),g$=a("a"),CGe=o("GLPNConfig"),wGe=o(" (GLPN model)"),AGe=l(),Of=a("li"),RZ=a("strong"),yGe=o("gpt2"),LGe=o(" \u2014 "),h$=a("a"),xGe=o("GPT2Config"),$Ge=o(" (OpenAI GPT-2 model)"),kGe=l(),Vf=a("li"),BZ=a("strong"),SGe=o("gpt_neo"),RGe=o(" \u2014 "),p$=a("a"),BGe=o("GPTNeoConfig"),PGe=o(" (GPT Neo model)"),IGe=l(),Xf=a("li"),PZ=a("strong"),qGe=o("gptj"),NGe=o(" \u2014 "),u$=a("a"),jGe=o("GPTJConfig"),DGe=o(" (GPT-J model)"),GGe=l(),zf=a("li"),IZ=a("strong"),OGe=o("hubert"),VGe=o(" \u2014 "),_$=a("a"),XGe=o("HubertConfig"),zGe=o(" (Hubert model)"),QGe=l(),Qf=a("li"),qZ=a("strong"),WGe=o("ibert"),HGe=o(" \u2014 "),b$=a("a"),UGe=o("IBertConfig"),JGe=o(" (I-BERT model)"),YGe=l(),Wf=a("li"),NZ=a("strong"),KGe=o("imagegpt"),ZGe=o(" \u2014 "),v$=a("a"),eOe=o("ImageGPTConfig"),oOe=o(" (ImageGPT model)"),rOe=l(),Hf=a("li"),jZ=a("strong"),tOe=o("layoutlm"),aOe=o(" \u2014 "),F$=a("a"),nOe=o("LayoutLMConfig"),sOe=o(" (LayoutLM model)"),lOe=l(),Uf=a("li"),DZ=a("strong"),iOe=o("layoutlmv2"),dOe=o(" \u2014 "),T$=a("a"),cOe=o("LayoutLMv2Config"),fOe=o(" (LayoutLMv2 model)"),mOe=l(),Jf=a("li"),GZ=a("strong"),gOe=o("led"),hOe=o(" \u2014 "),M$=a("a"),pOe=o("LEDConfig"),uOe=o(" (LED model)"),_Oe=l(),Yf=a("li"),OZ=a("strong"),bOe=o("longformer"),vOe=o(" \u2014 "),E$=a("a"),FOe=o("LongformerConfig"),TOe=o(" (Longformer model)"),MOe=l(),Kf=a("li"),VZ=a("strong"),EOe=o("luke"),COe=o(" \u2014 "),C$=a("a"),wOe=o("LukeConfig"),AOe=o(" (LUKE model)"),yOe=l(),Zf=a("li"),XZ=a("strong"),LOe=o("lxmert"),xOe=o(" \u2014 "),w$=a("a"),$Oe=o("LxmertConfig"),kOe=o(" (LXMERT model)"),SOe=l(),em=a("li"),zZ=a("strong"),ROe=o("m2m_100"),BOe=o(" \u2014 "),A$=a("a"),POe=o("M2M100Config"),IOe=o(" (M2M100 model)"),qOe=l(),om=a("li"),QZ=a("strong"),NOe=o("marian"),jOe=o(" \u2014 "),y$=a("a"),DOe=o("MarianConfig"),GOe=o(" (Marian model)"),OOe=l(),rm=a("li"),WZ=a("strong"),VOe=o("maskformer"),XOe=o(" \u2014 "),L$=a("a"),zOe=o("MaskFormerConfig"),QOe=o(" (MaskFormer model)"),WOe=l(),tm=a("li"),HZ=a("strong"),HOe=o("mbart"),UOe=o(" \u2014 "),x$=a("a"),JOe=o("MBartConfig"),YOe=o(" (mBART model)"),KOe=l(),am=a("li"),UZ=a("strong"),ZOe=o("mctc"),eVe=o(" \u2014 "),$$=a("a"),oVe=o("MCTCConfig"),rVe=o(" (MCTC model)"),tVe=l(),nm=a("li"),JZ=a("strong"),aVe=o("megatron-bert"),nVe=o(" \u2014 "),k$=a("a"),sVe=o("MegatronBertConfig"),lVe=o(" (MegatronBert model)"),iVe=l(),sm=a("li"),YZ=a("strong"),dVe=o("mobilebert"),cVe=o(" \u2014 "),S$=a("a"),fVe=o("MobileBertConfig"),mVe=o(" (MobileBERT model)"),gVe=l(),lm=a("li"),KZ=a("strong"),hVe=o("mpnet"),pVe=o(" \u2014 "),R$=a("a"),uVe=o("MPNetConfig"),_Ve=o(" (MPNet model)"),bVe=l(),im=a("li"),ZZ=a("strong"),vVe=o("mt5"),FVe=o(" \u2014 "),B$=a("a"),TVe=o("MT5Config"),MVe=o(" (mT5 model)"),EVe=l(),dm=a("li"),eee=a("strong"),CVe=o("nystromformer"),wVe=o(" \u2014 "),P$=a("a"),AVe=o("NystromformerConfig"),yVe=o(" (Nystromformer model)"),LVe=l(),cm=a("li"),oee=a("strong"),xVe=o("openai-gpt"),$Ve=o(" \u2014 "),I$=a("a"),kVe=o("OpenAIGPTConfig"),SVe=o(" (OpenAI GPT model)"),RVe=l(),fm=a("li"),ree=a("strong"),BVe=o("pegasus"),PVe=o(" \u2014 "),q$=a("a"),IVe=o("PegasusConfig"),qVe=o(" (Pegasus model)"),NVe=l(),mm=a("li"),tee=a("strong"),jVe=o("perceiver"),DVe=o(" \u2014 "),N$=a("a"),GVe=o("PerceiverConfig"),OVe=o(" (Perceiver model)"),VVe=l(),gm=a("li"),aee=a("strong"),XVe=o("plbart"),zVe=o(" \u2014 "),j$=a("a"),QVe=o("PLBartConfig"),WVe=o(" (PLBart model)"),HVe=l(),hm=a("li"),nee=a("strong"),UVe=o("poolformer"),JVe=o(" \u2014 "),D$=a("a"),YVe=o("PoolFormerConfig"),KVe=o(" (PoolFormer model)"),ZVe=l(),pm=a("li"),see=a("strong"),eXe=o("prophetnet"),oXe=o(" \u2014 "),G$=a("a"),rXe=o("ProphetNetConfig"),tXe=o(" (ProphetNet model)"),aXe=l(),um=a("li"),lee=a("strong"),nXe=o("qdqbert"),sXe=o(" \u2014 "),O$=a("a"),lXe=o("QDQBertConfig"),iXe=o(" (QDQBert model)"),dXe=l(),_m=a("li"),iee=a("strong"),cXe=o("rag"),fXe=o(" \u2014 "),V$=a("a"),mXe=o("RagConfig"),gXe=o(" (RAG model)"),hXe=l(),bm=a("li"),dee=a("strong"),pXe=o("realm"),uXe=o(" \u2014 "),X$=a("a"),_Xe=o("RealmConfig"),bXe=o(" (Realm model)"),vXe=l(),vm=a("li"),cee=a("strong"),FXe=o("reformer"),TXe=o(" \u2014 "),z$=a("a"),MXe=o("ReformerConfig"),EXe=o(" (Reformer model)"),CXe=l(),Fm=a("li"),fee=a("strong"),wXe=o("regnet"),AXe=o(" \u2014 "),Q$=a("a"),yXe=o("RegNetConfig"),LXe=o(" (RegNet model)"),xXe=l(),Tm=a("li"),mee=a("strong"),$Xe=o("rembert"),kXe=o(" \u2014 "),W$=a("a"),SXe=o("RemBertConfig"),RXe=o(" (RemBERT model)"),BXe=l(),Mm=a("li"),gee=a("strong"),PXe=o("resnet"),IXe=o(" \u2014 "),H$=a("a"),qXe=o("ResNetConfig"),NXe=o(" (ResNet model)"),jXe=l(),Em=a("li"),hee=a("strong"),DXe=o("retribert"),GXe=o(" \u2014 "),U$=a("a"),OXe=o("RetriBertConfig"),VXe=o(" (RetriBERT model)"),XXe=l(),Cm=a("li"),pee=a("strong"),zXe=o("roberta"),QXe=o(" \u2014 "),J$=a("a"),WXe=o("RobertaConfig"),HXe=o(" (RoBERTa model)"),UXe=l(),wm=a("li"),uee=a("strong"),JXe=o("roformer"),YXe=o(" \u2014 "),Y$=a("a"),KXe=o("RoFormerConfig"),ZXe=o(" (RoFormer model)"),eze=l(),Am=a("li"),_ee=a("strong"),oze=o("segformer"),rze=o(" \u2014 "),K$=a("a"),tze=o("SegformerConfig"),aze=o(" (SegFormer model)"),nze=l(),ym=a("li"),bee=a("strong"),sze=o("sew"),lze=o(" \u2014 "),Z$=a("a"),ize=o("SEWConfig"),dze=o(" (SEW model)"),cze=l(),Lm=a("li"),vee=a("strong"),fze=o("sew-d"),mze=o(" \u2014 "),ek=a("a"),gze=o("SEWDConfig"),hze=o(" (SEW-D model)"),pze=l(),xm=a("li"),Fee=a("strong"),uze=o("speech-encoder-decoder"),_ze=o(" \u2014 "),ok=a("a"),bze=o("SpeechEncoderDecoderConfig"),vze=o(" (Speech Encoder decoder model)"),Fze=l(),$m=a("li"),Tee=a("strong"),Tze=o("speech_to_text"),Mze=o(" \u2014 "),rk=a("a"),Eze=o("Speech2TextConfig"),Cze=o(" (Speech2Text model)"),wze=l(),km=a("li"),Mee=a("strong"),Aze=o("speech_to_text_2"),yze=o(" \u2014 "),tk=a("a"),Lze=o("Speech2Text2Config"),xze=o(" (Speech2Text2 model)"),$ze=l(),Sm=a("li"),Eee=a("strong"),kze=o("splinter"),Sze=o(" \u2014 "),ak=a("a"),Rze=o("SplinterConfig"),Bze=o(" (Splinter model)"),Pze=l(),Rm=a("li"),Cee=a("strong"),Ize=o("squeezebert"),qze=o(" \u2014 "),nk=a("a"),Nze=o("SqueezeBertConfig"),jze=o(" (SqueezeBERT model)"),Dze=l(),Bm=a("li"),wee=a("strong"),Gze=o("swin"),Oze=o(" \u2014 "),sk=a("a"),Vze=o("SwinConfig"),Xze=o(" (Swin model)"),zze=l(),Pm=a("li"),Aee=a("strong"),Qze=o("t5"),Wze=o(" \u2014 "),lk=a("a"),Hze=o("T5Config"),Uze=o(" (T5 model)"),Jze=l(),Im=a("li"),yee=a("strong"),Yze=o("tapas"),Kze=o(" \u2014 "),ik=a("a"),Zze=o("TapasConfig"),eQe=o(" (TAPAS model)"),oQe=l(),qm=a("li"),Lee=a("strong"),rQe=o("tapex"),tQe=o(" \u2014 "),dk=a("a"),aQe=o("BartConfig"),nQe=o(" (TAPEX model)"),sQe=l(),Nm=a("li"),xee=a("strong"),lQe=o("transfo-xl"),iQe=o(" \u2014 "),ck=a("a"),dQe=o("TransfoXLConfig"),cQe=o(" (Transformer-XL model)"),fQe=l(),jm=a("li"),$ee=a("strong"),mQe=o("trocr"),gQe=o(" \u2014 "),fk=a("a"),hQe=o("TrOCRConfig"),pQe=o(" (TrOCR model)"),uQe=l(),Dm=a("li"),kee=a("strong"),_Qe=o("unispeech"),bQe=o(" \u2014 "),mk=a("a"),vQe=o("UniSpeechConfig"),FQe=o(" (UniSpeech model)"),TQe=l(),Gm=a("li"),See=a("strong"),MQe=o("unispeech-sat"),EQe=o(" \u2014 "),gk=a("a"),CQe=o("UniSpeechSatConfig"),wQe=o(" (UniSpeechSat model)"),AQe=l(),Om=a("li"),Ree=a("strong"),yQe=o("van"),LQe=o(" \u2014 "),hk=a("a"),xQe=o("VanConfig"),$Qe=o(" (VAN model)"),kQe=l(),Vm=a("li"),Bee=a("strong"),SQe=o("vilt"),RQe=o(" \u2014 "),pk=a("a"),BQe=o("ViltConfig"),PQe=o(" (ViLT model)"),IQe=l(),Xm=a("li"),Pee=a("strong"),qQe=o("vision-encoder-decoder"),NQe=o(" \u2014 "),uk=a("a"),jQe=o("VisionEncoderDecoderConfig"),DQe=o(" (Vision Encoder decoder model)"),GQe=l(),zm=a("li"),Iee=a("strong"),OQe=o("vision-text-dual-encoder"),VQe=o(" \u2014 "),_k=a("a"),XQe=o("VisionTextDualEncoderConfig"),zQe=o(" (VisionTextDualEncoder model)"),QQe=l(),Qm=a("li"),qee=a("strong"),WQe=o("visual_bert"),HQe=o(" \u2014 "),bk=a("a"),UQe=o("VisualBertConfig"),JQe=o(" (VisualBert model)"),YQe=l(),Wm=a("li"),Nee=a("strong"),KQe=o("vit"),ZQe=o(" \u2014 "),vk=a("a"),eWe=o("ViTConfig"),oWe=o(" (ViT model)"),rWe=l(),Hm=a("li"),jee=a("strong"),tWe=o("vit_mae"),aWe=o(" \u2014 "),Fk=a("a"),nWe=o("ViTMAEConfig"),sWe=o(" (ViTMAE model)"),lWe=l(),Um=a("li"),Dee=a("strong"),iWe=o("wav2vec2"),dWe=o(" \u2014 "),Tk=a("a"),cWe=o("Wav2Vec2Config"),fWe=o(" (Wav2Vec2 model)"),mWe=l(),Jm=a("li"),Gee=a("strong"),gWe=o("wavlm"),hWe=o(" \u2014 "),Mk=a("a"),pWe=o("WavLMConfig"),uWe=o(" (WavLM model)"),_We=l(),Ym=a("li"),Oee=a("strong"),bWe=o("xglm"),vWe=o(" \u2014 "),Ek=a("a"),FWe=o("XGLMConfig"),TWe=o(" (XGLM model)"),MWe=l(),Km=a("li"),Vee=a("strong"),EWe=o("xlm"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("XLMConfig"),AWe=o(" (XLM model)"),yWe=l(),Zm=a("li"),Xee=a("strong"),LWe=o("xlm-prophetnet"),xWe=o(" \u2014 "),wk=a("a"),$We=o("XLMProphetNetConfig"),kWe=o(" (XLMProphetNet model)"),SWe=l(),eg=a("li"),zee=a("strong"),RWe=o("xlm-roberta"),BWe=o(" \u2014 "),Ak=a("a"),PWe=o("XLMRobertaConfig"),IWe=o(" (XLM-RoBERTa model)"),qWe=l(),og=a("li"),Qee=a("strong"),NWe=o("xlm-roberta-xl"),jWe=o(" \u2014 "),yk=a("a"),DWe=o("XLMRobertaXLConfig"),GWe=o(" (XLM-RoBERTa-XL model)"),OWe=l(),rg=a("li"),Wee=a("strong"),VWe=o("xlnet"),XWe=o(" \u2014 "),Lk=a("a"),zWe=o("XLNetConfig"),QWe=o(" (XLNet model)"),WWe=l(),tg=a("li"),Hee=a("strong"),HWe=o("yoso"),UWe=o(" \u2014 "),xk=a("a"),JWe=o("YosoConfig"),YWe=o(" (YOSO model)"),KWe=l(),F(ag.$$.fragment),ZWe=l(),ng=a("div"),F(CA.$$.fragment),eHe=l(),Uee=a("p"),oHe=o("Register a new configuration for this class."),JRe=l(),fi=a("h2"),sg=a("a"),Jee=a("span"),F(wA.$$.fragment),rHe=l(),Yee=a("span"),tHe=o("AutoTokenizer"),YRe=l(),Eo=a("div"),F(AA.$$.fragment),aHe=l(),yA=a("p"),nHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$k=a("a"),sHe=o("AutoTokenizer.from_pretrained()"),lHe=o(" class method."),iHe=l(),LA=a("p"),dHe=o("This class cannot be instantiated directly using "),Kee=a("code"),cHe=o("__init__()"),fHe=o(" (throws an error)."),mHe=l(),Tr=a("div"),F(xA.$$.fragment),gHe=l(),Zee=a("p"),hHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pHe=l(),Fa=a("p"),uHe=o("The tokenizer class to instantiate is selected based on the "),eoe=a("code"),_He=o("model_type"),bHe=o(` property of the config object (either
passed as an argument or loaded from `),ooe=a("code"),vHe=o("pretrained_model_name_or_path"),FHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),roe=a("code"),THe=o("pretrained_model_name_or_path"),MHe=o(":"),EHe=l(),k=a("ul"),An=a("li"),toe=a("strong"),CHe=o("albert"),wHe=o(" \u2014 "),kk=a("a"),AHe=o("AlbertTokenizer"),yHe=o(" or "),Sk=a("a"),LHe=o("AlbertTokenizerFast"),xHe=o(" (ALBERT model)"),$He=l(),yn=a("li"),aoe=a("strong"),kHe=o("bart"),SHe=o(" \u2014 "),Rk=a("a"),RHe=o("BartTokenizer"),BHe=o(" or "),Bk=a("a"),PHe=o("BartTokenizerFast"),IHe=o(" (BART model)"),qHe=l(),Ln=a("li"),noe=a("strong"),NHe=o("barthez"),jHe=o(" \u2014 "),Pk=a("a"),DHe=o("BarthezTokenizer"),GHe=o(" or "),Ik=a("a"),OHe=o("BarthezTokenizerFast"),VHe=o(" (BARThez model)"),XHe=l(),lg=a("li"),soe=a("strong"),zHe=o("bartpho"),QHe=o(" \u2014 "),qk=a("a"),WHe=o("BartphoTokenizer"),HHe=o(" (BARTpho model)"),UHe=l(),xn=a("li"),loe=a("strong"),JHe=o("bert"),YHe=o(" \u2014 "),Nk=a("a"),KHe=o("BertTokenizer"),ZHe=o(" or "),jk=a("a"),eUe=o("BertTokenizerFast"),oUe=o(" (BERT model)"),rUe=l(),ig=a("li"),ioe=a("strong"),tUe=o("bert-generation"),aUe=o(" \u2014 "),Dk=a("a"),nUe=o("BertGenerationTokenizer"),sUe=o(" (Bert Generation model)"),lUe=l(),dg=a("li"),doe=a("strong"),iUe=o("bert-japanese"),dUe=o(" \u2014 "),Gk=a("a"),cUe=o("BertJapaneseTokenizer"),fUe=o(" (BertJapanese model)"),mUe=l(),cg=a("li"),coe=a("strong"),gUe=o("bertweet"),hUe=o(" \u2014 "),Ok=a("a"),pUe=o("BertweetTokenizer"),uUe=o(" (Bertweet model)"),_Ue=l(),$n=a("li"),foe=a("strong"),bUe=o("big_bird"),vUe=o(" \u2014 "),Vk=a("a"),FUe=o("BigBirdTokenizer"),TUe=o(" or "),Xk=a("a"),MUe=o("BigBirdTokenizerFast"),EUe=o(" (BigBird model)"),CUe=l(),kn=a("li"),moe=a("strong"),wUe=o("bigbird_pegasus"),AUe=o(" \u2014 "),zk=a("a"),yUe=o("PegasusTokenizer"),LUe=o(" or "),Qk=a("a"),xUe=o("PegasusTokenizerFast"),$Ue=o(" (BigBirdPegasus model)"),kUe=l(),Sn=a("li"),goe=a("strong"),SUe=o("blenderbot"),RUe=o(" \u2014 "),Wk=a("a"),BUe=o("BlenderbotTokenizer"),PUe=o(" or "),Hk=a("a"),IUe=o("BlenderbotTokenizerFast"),qUe=o(" (Blenderbot model)"),NUe=l(),fg=a("li"),hoe=a("strong"),jUe=o("blenderbot-small"),DUe=o(" \u2014 "),Uk=a("a"),GUe=o("BlenderbotSmallTokenizer"),OUe=o(" (BlenderbotSmall model)"),VUe=l(),mg=a("li"),poe=a("strong"),XUe=o("byt5"),zUe=o(" \u2014 "),Jk=a("a"),QUe=o("ByT5Tokenizer"),WUe=o(" (ByT5 model)"),HUe=l(),Rn=a("li"),uoe=a("strong"),UUe=o("camembert"),JUe=o(" \u2014 "),Yk=a("a"),YUe=o("CamembertTokenizer"),KUe=o(" or "),Kk=a("a"),ZUe=o("CamembertTokenizerFast"),eJe=o(" (CamemBERT model)"),oJe=l(),gg=a("li"),_oe=a("strong"),rJe=o("canine"),tJe=o(" \u2014 "),Zk=a("a"),aJe=o("CanineTokenizer"),nJe=o(" (Canine model)"),sJe=l(),Bn=a("li"),boe=a("strong"),lJe=o("clip"),iJe=o(" \u2014 "),eS=a("a"),dJe=o("CLIPTokenizer"),cJe=o(" or "),oS=a("a"),fJe=o("CLIPTokenizerFast"),mJe=o(" (CLIP model)"),gJe=l(),Pn=a("li"),voe=a("strong"),hJe=o("convbert"),pJe=o(" \u2014 "),rS=a("a"),uJe=o("ConvBertTokenizer"),_Je=o(" or "),tS=a("a"),bJe=o("ConvBertTokenizerFast"),vJe=o(" (ConvBERT model)"),FJe=l(),In=a("li"),Foe=a("strong"),TJe=o("cpm"),MJe=o(" \u2014 "),aS=a("a"),EJe=o("CpmTokenizer"),CJe=o(" or "),Toe=a("code"),wJe=o("CpmTokenizerFast"),AJe=o(" (CPM model)"),yJe=l(),hg=a("li"),Moe=a("strong"),LJe=o("ctrl"),xJe=o(" \u2014 "),nS=a("a"),$Je=o("CTRLTokenizer"),kJe=o(" (CTRL model)"),SJe=l(),qn=a("li"),Eoe=a("strong"),RJe=o("data2vec-text"),BJe=o(" \u2014 "),sS=a("a"),PJe=o("RobertaTokenizer"),IJe=o(" or "),lS=a("a"),qJe=o("RobertaTokenizerFast"),NJe=o(" (Data2VecText model)"),jJe=l(),Nn=a("li"),Coe=a("strong"),DJe=o("deberta"),GJe=o(" \u2014 "),iS=a("a"),OJe=o("DebertaTokenizer"),VJe=o(" or "),dS=a("a"),XJe=o("DebertaTokenizerFast"),zJe=o(" (DeBERTa model)"),QJe=l(),jn=a("li"),woe=a("strong"),WJe=o("deberta-v2"),HJe=o(" \u2014 "),cS=a("a"),UJe=o("DebertaV2Tokenizer"),JJe=o(" or "),fS=a("a"),YJe=o("DebertaV2TokenizerFast"),KJe=o(" (DeBERTa-v2 model)"),ZJe=l(),Dn=a("li"),Aoe=a("strong"),eYe=o("distilbert"),oYe=o(" \u2014 "),mS=a("a"),rYe=o("DistilBertTokenizer"),tYe=o(" or "),gS=a("a"),aYe=o("DistilBertTokenizerFast"),nYe=o(" (DistilBERT model)"),sYe=l(),Gn=a("li"),yoe=a("strong"),lYe=o("dpr"),iYe=o(" \u2014 "),hS=a("a"),dYe=o("DPRQuestionEncoderTokenizer"),cYe=o(" or "),pS=a("a"),fYe=o("DPRQuestionEncoderTokenizerFast"),mYe=o(" (DPR model)"),gYe=l(),On=a("li"),Loe=a("strong"),hYe=o("electra"),pYe=o(" \u2014 "),uS=a("a"),uYe=o("ElectraTokenizer"),_Ye=o(" or "),_S=a("a"),bYe=o("ElectraTokenizerFast"),vYe=o(" (ELECTRA model)"),FYe=l(),pg=a("li"),xoe=a("strong"),TYe=o("flaubert"),MYe=o(" \u2014 "),bS=a("a"),EYe=o("FlaubertTokenizer"),CYe=o(" (FlauBERT model)"),wYe=l(),Vn=a("li"),$oe=a("strong"),AYe=o("fnet"),yYe=o(" \u2014 "),vS=a("a"),LYe=o("FNetTokenizer"),xYe=o(" or "),FS=a("a"),$Ye=o("FNetTokenizerFast"),kYe=o(" (FNet model)"),SYe=l(),ug=a("li"),koe=a("strong"),RYe=o("fsmt"),BYe=o(" \u2014 "),TS=a("a"),PYe=o("FSMTTokenizer"),IYe=o(" (FairSeq Machine-Translation model)"),qYe=l(),Xn=a("li"),Soe=a("strong"),NYe=o("funnel"),jYe=o(" \u2014 "),MS=a("a"),DYe=o("FunnelTokenizer"),GYe=o(" or "),ES=a("a"),OYe=o("FunnelTokenizerFast"),VYe=o(" (Funnel Transformer model)"),XYe=l(),zn=a("li"),Roe=a("strong"),zYe=o("gpt2"),QYe=o(" \u2014 "),CS=a("a"),WYe=o("GPT2Tokenizer"),HYe=o(" or "),wS=a("a"),UYe=o("GPT2TokenizerFast"),JYe=o(" (OpenAI GPT-2 model)"),YYe=l(),Qn=a("li"),Boe=a("strong"),KYe=o("gpt_neo"),ZYe=o(" \u2014 "),AS=a("a"),eKe=o("GPT2Tokenizer"),oKe=o(" or "),yS=a("a"),rKe=o("GPT2TokenizerFast"),tKe=o(" (GPT Neo model)"),aKe=l(),Wn=a("li"),Poe=a("strong"),nKe=o("gptj"),sKe=o(" \u2014 "),LS=a("a"),lKe=o("GPT2Tokenizer"),iKe=o(" or "),xS=a("a"),dKe=o("GPT2TokenizerFast"),cKe=o(" (GPT-J model)"),fKe=l(),Hn=a("li"),Ioe=a("strong"),mKe=o("herbert"),gKe=o(" \u2014 "),$S=a("a"),hKe=o("HerbertTokenizer"),pKe=o(" or "),kS=a("a"),uKe=o("HerbertTokenizerFast"),_Ke=o(" (HerBERT model)"),bKe=l(),_g=a("li"),qoe=a("strong"),vKe=o("hubert"),FKe=o(" \u2014 "),SS=a("a"),TKe=o("Wav2Vec2CTCTokenizer"),MKe=o(" (Hubert model)"),EKe=l(),Un=a("li"),Noe=a("strong"),CKe=o("ibert"),wKe=o(" \u2014 "),RS=a("a"),AKe=o("RobertaTokenizer"),yKe=o(" or "),BS=a("a"),LKe=o("RobertaTokenizerFast"),xKe=o(" (I-BERT model)"),$Ke=l(),Jn=a("li"),joe=a("strong"),kKe=o("layoutlm"),SKe=o(" \u2014 "),PS=a("a"),RKe=o("LayoutLMTokenizer"),BKe=o(" or "),IS=a("a"),PKe=o("LayoutLMTokenizerFast"),IKe=o(" (LayoutLM model)"),qKe=l(),Yn=a("li"),Doe=a("strong"),NKe=o("layoutlmv2"),jKe=o(" \u2014 "),qS=a("a"),DKe=o("LayoutLMv2Tokenizer"),GKe=o(" or "),NS=a("a"),OKe=o("LayoutLMv2TokenizerFast"),VKe=o(" (LayoutLMv2 model)"),XKe=l(),Kn=a("li"),Goe=a("strong"),zKe=o("layoutxlm"),QKe=o(" \u2014 "),jS=a("a"),WKe=o("LayoutXLMTokenizer"),HKe=o(" or "),DS=a("a"),UKe=o("LayoutXLMTokenizerFast"),JKe=o(" (LayoutXLM model)"),YKe=l(),Zn=a("li"),Ooe=a("strong"),KKe=o("led"),ZKe=o(" \u2014 "),GS=a("a"),eZe=o("LEDTokenizer"),oZe=o(" or "),OS=a("a"),rZe=o("LEDTokenizerFast"),tZe=o(" (LED model)"),aZe=l(),es=a("li"),Voe=a("strong"),nZe=o("longformer"),sZe=o(" \u2014 "),VS=a("a"),lZe=o("LongformerTokenizer"),iZe=o(" or "),XS=a("a"),dZe=o("LongformerTokenizerFast"),cZe=o(" (Longformer model)"),fZe=l(),bg=a("li"),Xoe=a("strong"),mZe=o("luke"),gZe=o(" \u2014 "),zS=a("a"),hZe=o("LukeTokenizer"),pZe=o(" (LUKE model)"),uZe=l(),os=a("li"),zoe=a("strong"),_Ze=o("lxmert"),bZe=o(" \u2014 "),QS=a("a"),vZe=o("LxmertTokenizer"),FZe=o(" or "),WS=a("a"),TZe=o("LxmertTokenizerFast"),MZe=o(" (LXMERT model)"),EZe=l(),vg=a("li"),Qoe=a("strong"),CZe=o("m2m_100"),wZe=o(" \u2014 "),HS=a("a"),AZe=o("M2M100Tokenizer"),yZe=o(" (M2M100 model)"),LZe=l(),Fg=a("li"),Woe=a("strong"),xZe=o("marian"),$Ze=o(" \u2014 "),US=a("a"),kZe=o("MarianTokenizer"),SZe=o(" (Marian model)"),RZe=l(),rs=a("li"),Hoe=a("strong"),BZe=o("mbart"),PZe=o(" \u2014 "),JS=a("a"),IZe=o("MBartTokenizer"),qZe=o(" or "),YS=a("a"),NZe=o("MBartTokenizerFast"),jZe=o(" (mBART model)"),DZe=l(),ts=a("li"),Uoe=a("strong"),GZe=o("mbart50"),OZe=o(" \u2014 "),KS=a("a"),VZe=o("MBart50Tokenizer"),XZe=o(" or "),ZS=a("a"),zZe=o("MBart50TokenizerFast"),QZe=o(" (mBART-50 model)"),WZe=l(),as=a("li"),Joe=a("strong"),HZe=o("megatron-bert"),UZe=o(" \u2014 "),eR=a("a"),JZe=o("BertTokenizer"),YZe=o(" or "),oR=a("a"),KZe=o("BertTokenizerFast"),ZZe=o(" (MegatronBert model)"),eeo=l(),Tg=a("li"),Yoe=a("strong"),oeo=o("mluke"),reo=o(" \u2014 "),rR=a("a"),teo=o("MLukeTokenizer"),aeo=o(" (mLUKE model)"),neo=l(),ns=a("li"),Koe=a("strong"),seo=o("mobilebert"),leo=o(" \u2014 "),tR=a("a"),ieo=o("MobileBertTokenizer"),deo=o(" or "),aR=a("a"),ceo=o("MobileBertTokenizerFast"),feo=o(" (MobileBERT model)"),meo=l(),ss=a("li"),Zoe=a("strong"),geo=o("mpnet"),heo=o(" \u2014 "),nR=a("a"),peo=o("MPNetTokenizer"),ueo=o(" or "),sR=a("a"),_eo=o("MPNetTokenizerFast"),beo=o(" (MPNet model)"),veo=l(),ls=a("li"),ere=a("strong"),Feo=o("mt5"),Teo=o(" \u2014 "),lR=a("a"),Meo=o("MT5Tokenizer"),Eeo=o(" or "),iR=a("a"),Ceo=o("MT5TokenizerFast"),weo=o(" (mT5 model)"),Aeo=l(),is=a("li"),ore=a("strong"),yeo=o("nystromformer"),Leo=o(" \u2014 "),dR=a("a"),xeo=o("AlbertTokenizer"),$eo=o(" or "),cR=a("a"),keo=o("AlbertTokenizerFast"),Seo=o(" (Nystromformer model)"),Reo=l(),ds=a("li"),rre=a("strong"),Beo=o("openai-gpt"),Peo=o(" \u2014 "),fR=a("a"),Ieo=o("OpenAIGPTTokenizer"),qeo=o(" or "),mR=a("a"),Neo=o("OpenAIGPTTokenizerFast"),jeo=o(" (OpenAI GPT model)"),Deo=l(),cs=a("li"),tre=a("strong"),Geo=o("pegasus"),Oeo=o(" \u2014 "),gR=a("a"),Veo=o("PegasusTokenizer"),Xeo=o(" or "),hR=a("a"),zeo=o("PegasusTokenizerFast"),Qeo=o(" (Pegasus model)"),Weo=l(),Mg=a("li"),are=a("strong"),Heo=o("perceiver"),Ueo=o(" \u2014 "),pR=a("a"),Jeo=o("PerceiverTokenizer"),Yeo=o(" (Perceiver model)"),Keo=l(),Eg=a("li"),nre=a("strong"),Zeo=o("phobert"),eoo=o(" \u2014 "),uR=a("a"),ooo=o("PhobertTokenizer"),roo=o(" (PhoBERT model)"),too=l(),Cg=a("li"),sre=a("strong"),aoo=o("plbart"),noo=o(" \u2014 "),_R=a("a"),soo=o("PLBartTokenizer"),loo=o(" (PLBart model)"),ioo=l(),wg=a("li"),lre=a("strong"),doo=o("prophetnet"),coo=o(" \u2014 "),bR=a("a"),foo=o("ProphetNetTokenizer"),moo=o(" (ProphetNet model)"),goo=l(),fs=a("li"),ire=a("strong"),hoo=o("qdqbert"),poo=o(" \u2014 "),vR=a("a"),uoo=o("BertTokenizer"),_oo=o(" or "),FR=a("a"),boo=o("BertTokenizerFast"),voo=o(" (QDQBert model)"),Foo=l(),Ag=a("li"),dre=a("strong"),Too=o("rag"),Moo=o(" \u2014 "),TR=a("a"),Eoo=o("RagTokenizer"),Coo=o(" (RAG model)"),woo=l(),ms=a("li"),cre=a("strong"),Aoo=o("realm"),yoo=o(" \u2014 "),MR=a("a"),Loo=o("RealmTokenizer"),xoo=o(" or "),ER=a("a"),$oo=o("RealmTokenizerFast"),koo=o(" (Realm model)"),Soo=l(),gs=a("li"),fre=a("strong"),Roo=o("reformer"),Boo=o(" \u2014 "),CR=a("a"),Poo=o("ReformerTokenizer"),Ioo=o(" or "),wR=a("a"),qoo=o("ReformerTokenizerFast"),Noo=o(" (Reformer model)"),joo=l(),hs=a("li"),mre=a("strong"),Doo=o("rembert"),Goo=o(" \u2014 "),AR=a("a"),Ooo=o("RemBertTokenizer"),Voo=o(" or "),yR=a("a"),Xoo=o("RemBertTokenizerFast"),zoo=o(" (RemBERT model)"),Qoo=l(),ps=a("li"),gre=a("strong"),Woo=o("retribert"),Hoo=o(" \u2014 "),LR=a("a"),Uoo=o("RetriBertTokenizer"),Joo=o(" or "),xR=a("a"),Yoo=o("RetriBertTokenizerFast"),Koo=o(" (RetriBERT model)"),Zoo=l(),us=a("li"),hre=a("strong"),ero=o("roberta"),oro=o(" \u2014 "),$R=a("a"),rro=o("RobertaTokenizer"),tro=o(" or "),kR=a("a"),aro=o("RobertaTokenizerFast"),nro=o(" (RoBERTa model)"),sro=l(),_s=a("li"),pre=a("strong"),lro=o("roformer"),iro=o(" \u2014 "),SR=a("a"),dro=o("RoFormerTokenizer"),cro=o(" or "),RR=a("a"),fro=o("RoFormerTokenizerFast"),mro=o(" (RoFormer model)"),gro=l(),yg=a("li"),ure=a("strong"),hro=o("speech_to_text"),pro=o(" \u2014 "),BR=a("a"),uro=o("Speech2TextTokenizer"),_ro=o(" (Speech2Text model)"),bro=l(),Lg=a("li"),_re=a("strong"),vro=o("speech_to_text_2"),Fro=o(" \u2014 "),PR=a("a"),Tro=o("Speech2Text2Tokenizer"),Mro=o(" (Speech2Text2 model)"),Ero=l(),bs=a("li"),bre=a("strong"),Cro=o("splinter"),wro=o(" \u2014 "),IR=a("a"),Aro=o("SplinterTokenizer"),yro=o(" or "),qR=a("a"),Lro=o("SplinterTokenizerFast"),xro=o(" (Splinter model)"),$ro=l(),vs=a("li"),vre=a("strong"),kro=o("squeezebert"),Sro=o(" \u2014 "),NR=a("a"),Rro=o("SqueezeBertTokenizer"),Bro=o(" or "),jR=a("a"),Pro=o("SqueezeBertTokenizerFast"),Iro=o(" (SqueezeBERT model)"),qro=l(),Fs=a("li"),Fre=a("strong"),Nro=o("t5"),jro=o(" \u2014 "),DR=a("a"),Dro=o("T5Tokenizer"),Gro=o(" or "),GR=a("a"),Oro=o("T5TokenizerFast"),Vro=o(" (T5 model)"),Xro=l(),xg=a("li"),Tre=a("strong"),zro=o("tapas"),Qro=o(" \u2014 "),OR=a("a"),Wro=o("TapasTokenizer"),Hro=o(" (TAPAS model)"),Uro=l(),$g=a("li"),Mre=a("strong"),Jro=o("tapex"),Yro=o(" \u2014 "),VR=a("a"),Kro=o("TapexTokenizer"),Zro=o(" (TAPEX model)"),eto=l(),kg=a("li"),Ere=a("strong"),oto=o("transfo-xl"),rto=o(" \u2014 "),XR=a("a"),tto=o("TransfoXLTokenizer"),ato=o(" (Transformer-XL model)"),nto=l(),Ts=a("li"),Cre=a("strong"),sto=o("visual_bert"),lto=o(" \u2014 "),zR=a("a"),ito=o("BertTokenizer"),dto=o(" or "),QR=a("a"),cto=o("BertTokenizerFast"),fto=o(" (VisualBert model)"),mto=l(),Sg=a("li"),wre=a("strong"),gto=o("wav2vec2"),hto=o(" \u2014 "),WR=a("a"),pto=o("Wav2Vec2CTCTokenizer"),uto=o(" (Wav2Vec2 model)"),_to=l(),Rg=a("li"),Are=a("strong"),bto=o("wav2vec2_phoneme"),vto=o(" \u2014 "),HR=a("a"),Fto=o("Wav2Vec2PhonemeCTCTokenizer"),Tto=o(" (Wav2Vec2Phoneme model)"),Mto=l(),Ms=a("li"),yre=a("strong"),Eto=o("xglm"),Cto=o(" \u2014 "),UR=a("a"),wto=o("XGLMTokenizer"),Ato=o(" or "),JR=a("a"),yto=o("XGLMTokenizerFast"),Lto=o(" (XGLM model)"),xto=l(),Bg=a("li"),Lre=a("strong"),$to=o("xlm"),kto=o(" \u2014 "),YR=a("a"),Sto=o("XLMTokenizer"),Rto=o(" (XLM model)"),Bto=l(),Pg=a("li"),xre=a("strong"),Pto=o("xlm-prophetnet"),Ito=o(" \u2014 "),KR=a("a"),qto=o("XLMProphetNetTokenizer"),Nto=o(" (XLMProphetNet model)"),jto=l(),Es=a("li"),$re=a("strong"),Dto=o("xlm-roberta"),Gto=o(" \u2014 "),ZR=a("a"),Oto=o("XLMRobertaTokenizer"),Vto=o(" or "),eB=a("a"),Xto=o("XLMRobertaTokenizerFast"),zto=o(" (XLM-RoBERTa model)"),Qto=l(),Cs=a("li"),kre=a("strong"),Wto=o("xlm-roberta-xl"),Hto=o(" \u2014 "),oB=a("a"),Uto=o("RobertaTokenizer"),Jto=o(" or "),rB=a("a"),Yto=o("RobertaTokenizerFast"),Kto=o(" (XLM-RoBERTa-XL model)"),Zto=l(),ws=a("li"),Sre=a("strong"),eao=o("xlnet"),oao=o(" \u2014 "),tB=a("a"),rao=o("XLNetTokenizer"),tao=o(" or "),aB=a("a"),aao=o("XLNetTokenizerFast"),nao=o(" (XLNet model)"),sao=l(),As=a("li"),Rre=a("strong"),lao=o("yoso"),iao=o(" \u2014 "),nB=a("a"),dao=o("AlbertTokenizer"),cao=o(" or "),sB=a("a"),fao=o("AlbertTokenizerFast"),mao=o(" (YOSO model)"),gao=l(),F(Ig.$$.fragment),hao=l(),qg=a("div"),F($A.$$.fragment),pao=l(),Bre=a("p"),uao=o("Register a new tokenizer in this mapping."),KRe=l(),mi=a("h2"),Ng=a("a"),Pre=a("span"),F(kA.$$.fragment),_ao=l(),Ire=a("span"),bao=o("AutoFeatureExtractor"),ZRe=l(),Co=a("div"),F(SA.$$.fragment),vao=l(),RA=a("p"),Fao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lB=a("a"),Tao=o("AutoFeatureExtractor.from_pretrained()"),Mao=o(" class method."),Eao=l(),BA=a("p"),Cao=o("This class cannot be instantiated directly using "),qre=a("code"),wao=o("__init__()"),Aao=o(" (throws an error)."),yao=l(),ze=a("div"),F(PA.$$.fragment),Lao=l(),Nre=a("p"),xao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$ao=l(),Ta=a("p"),kao=o("The feature extractor class to instantiate is selected based on the "),jre=a("code"),Sao=o("model_type"),Rao=o(` property of the config object
(either passed as an argument or loaded from `),Dre=a("code"),Bao=o("pretrained_model_name_or_path"),Pao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gre=a("code"),Iao=o("pretrained_model_name_or_path"),qao=o(":"),Nao=l(),te=a("ul"),jg=a("li"),Ore=a("strong"),jao=o("beit"),Dao=o(" \u2014 "),iB=a("a"),Gao=o("BeitFeatureExtractor"),Oao=o(" (BEiT model)"),Vao=l(),Dg=a("li"),Vre=a("strong"),Xao=o("clip"),zao=o(" \u2014 "),dB=a("a"),Qao=o("CLIPFeatureExtractor"),Wao=o(" (CLIP model)"),Hao=l(),Gg=a("li"),Xre=a("strong"),Uao=o("convnext"),Jao=o(" \u2014 "),cB=a("a"),Yao=o("ConvNextFeatureExtractor"),Kao=o(" (ConvNext model)"),Zao=l(),Og=a("li"),zre=a("strong"),eno=o("data2vec-audio"),ono=o(" \u2014 "),fB=a("a"),rno=o("Wav2Vec2FeatureExtractor"),tno=o(" (Data2VecAudio model)"),ano=l(),Vg=a("li"),Qre=a("strong"),nno=o("data2vec-vision"),sno=o(" \u2014 "),mB=a("a"),lno=o("BeitFeatureExtractor"),ino=o(" (Data2VecVision model)"),dno=l(),Xg=a("li"),Wre=a("strong"),cno=o("deit"),fno=o(" \u2014 "),gB=a("a"),mno=o("DeiTFeatureExtractor"),gno=o(" (DeiT model)"),hno=l(),zg=a("li"),Hre=a("strong"),pno=o("detr"),uno=o(" \u2014 "),hB=a("a"),_no=o("DetrFeatureExtractor"),bno=o(" (DETR model)"),vno=l(),Qg=a("li"),Ure=a("strong"),Fno=o("dpt"),Tno=o(" \u2014 "),pB=a("a"),Mno=o("DPTFeatureExtractor"),Eno=o(" (DPT model)"),Cno=l(),Wg=a("li"),Jre=a("strong"),wno=o("glpn"),Ano=o(" \u2014 "),uB=a("a"),yno=o("GLPNFeatureExtractor"),Lno=o(" (GLPN model)"),xno=l(),Hg=a("li"),Yre=a("strong"),$no=o("hubert"),kno=o(" \u2014 "),_B=a("a"),Sno=o("Wav2Vec2FeatureExtractor"),Rno=o(" (Hubert model)"),Bno=l(),Ug=a("li"),Kre=a("strong"),Pno=o("layoutlmv2"),Ino=o(" \u2014 "),bB=a("a"),qno=o("LayoutLMv2FeatureExtractor"),Nno=o(" (LayoutLMv2 model)"),jno=l(),Jg=a("li"),Zre=a("strong"),Dno=o("maskformer"),Gno=o(" \u2014 "),vB=a("a"),Ono=o("MaskFormerFeatureExtractor"),Vno=o(" (MaskFormer model)"),Xno=l(),Yg=a("li"),ete=a("strong"),zno=o("mctc"),Qno=o(" \u2014 "),FB=a("a"),Wno=o("MCTCFeatureExtractor"),Hno=o(" (MCTC model)"),Uno=l(),Kg=a("li"),ote=a("strong"),Jno=o("perceiver"),Yno=o(" \u2014 "),TB=a("a"),Kno=o("PerceiverFeatureExtractor"),Zno=o(" (Perceiver model)"),eso=l(),Zg=a("li"),rte=a("strong"),oso=o("poolformer"),rso=o(" \u2014 "),MB=a("a"),tso=o("PoolFormerFeatureExtractor"),aso=o(" (PoolFormer model)"),nso=l(),eh=a("li"),tte=a("strong"),sso=o("regnet"),lso=o(" \u2014 "),EB=a("a"),iso=o("ConvNextFeatureExtractor"),dso=o(" (RegNet model)"),cso=l(),oh=a("li"),ate=a("strong"),fso=o("resnet"),mso=o(" \u2014 "),CB=a("a"),gso=o("ConvNextFeatureExtractor"),hso=o(" (ResNet model)"),pso=l(),rh=a("li"),nte=a("strong"),uso=o("segformer"),_so=o(" \u2014 "),wB=a("a"),bso=o("SegformerFeatureExtractor"),vso=o(" (SegFormer model)"),Fso=l(),th=a("li"),ste=a("strong"),Tso=o("speech_to_text"),Mso=o(" \u2014 "),AB=a("a"),Eso=o("Speech2TextFeatureExtractor"),Cso=o(" (Speech2Text model)"),wso=l(),ah=a("li"),lte=a("strong"),Aso=o("swin"),yso=o(" \u2014 "),yB=a("a"),Lso=o("ViTFeatureExtractor"),xso=o(" (Swin model)"),$so=l(),nh=a("li"),ite=a("strong"),kso=o("van"),Sso=o(" \u2014 "),LB=a("a"),Rso=o("ConvNextFeatureExtractor"),Bso=o(" (VAN model)"),Pso=l(),sh=a("li"),dte=a("strong"),Iso=o("vit"),qso=o(" \u2014 "),xB=a("a"),Nso=o("ViTFeatureExtractor"),jso=o(" (ViT model)"),Dso=l(),lh=a("li"),cte=a("strong"),Gso=o("vit_mae"),Oso=o(" \u2014 "),$B=a("a"),Vso=o("ViTFeatureExtractor"),Xso=o(" (ViTMAE model)"),zso=l(),ih=a("li"),fte=a("strong"),Qso=o("wav2vec2"),Wso=o(" \u2014 "),kB=a("a"),Hso=o("Wav2Vec2FeatureExtractor"),Uso=o(" (Wav2Vec2 model)"),Jso=l(),F(dh.$$.fragment),Yso=l(),F(ch.$$.fragment),Kso=l(),fh=a("div"),F(IA.$$.fragment),Zso=l(),mte=a("p"),elo=o("Register a new feature extractor for this class."),eBe=l(),gi=a("h2"),mh=a("a"),gte=a("span"),F(qA.$$.fragment),olo=l(),hte=a("span"),rlo=o("AutoProcessor"),oBe=l(),wo=a("div"),F(NA.$$.fragment),tlo=l(),jA=a("p"),alo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=a("a"),nlo=o("AutoProcessor.from_pretrained()"),slo=o(" class method."),llo=l(),DA=a("p"),ilo=o("This class cannot be instantiated directly using "),pte=a("code"),dlo=o("__init__()"),clo=o(" (throws an error)."),flo=l(),Qe=a("div"),F(GA.$$.fragment),mlo=l(),ute=a("p"),glo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),hlo=l(),hi=a("p"),plo=o("The processor class to instantiate is selected based on the "),_te=a("code"),ulo=o("model_type"),_lo=o(` property of the config object (either
passed as an argument or loaded from `),bte=a("code"),blo=o("pretrained_model_name_or_path"),vlo=o(" if possible):"),Flo=l(),be=a("ul"),gh=a("li"),vte=a("strong"),Tlo=o("clip"),Mlo=o(" \u2014 "),RB=a("a"),Elo=o("CLIPProcessor"),Clo=o(" (CLIP model)"),wlo=l(),hh=a("li"),Fte=a("strong"),Alo=o("layoutlmv2"),ylo=o(" \u2014 "),BB=a("a"),Llo=o("LayoutLMv2Processor"),xlo=o(" (LayoutLMv2 model)"),$lo=l(),ph=a("li"),Tte=a("strong"),klo=o("layoutxlm"),Slo=o(" \u2014 "),PB=a("a"),Rlo=o("LayoutXLMProcessor"),Blo=o(" (LayoutXLM model)"),Plo=l(),uh=a("li"),Mte=a("strong"),Ilo=o("sew"),qlo=o(" \u2014 "),IB=a("a"),Nlo=o("Wav2Vec2Processor"),jlo=o(" (SEW model)"),Dlo=l(),_h=a("li"),Ete=a("strong"),Glo=o("sew-d"),Olo=o(" \u2014 "),qB=a("a"),Vlo=o("Wav2Vec2Processor"),Xlo=o(" (SEW-D model)"),zlo=l(),bh=a("li"),Cte=a("strong"),Qlo=o("speech_to_text"),Wlo=o(" \u2014 "),NB=a("a"),Hlo=o("Speech2TextProcessor"),Ulo=o(" (Speech2Text model)"),Jlo=l(),vh=a("li"),wte=a("strong"),Ylo=o("speech_to_text_2"),Klo=o(" \u2014 "),jB=a("a"),Zlo=o("Speech2Text2Processor"),eio=o(" (Speech2Text2 model)"),oio=l(),Fh=a("li"),Ate=a("strong"),rio=o("trocr"),tio=o(" \u2014 "),DB=a("a"),aio=o("TrOCRProcessor"),nio=o(" (TrOCR model)"),sio=l(),Th=a("li"),yte=a("strong"),lio=o("unispeech"),iio=o(" \u2014 "),GB=a("a"),dio=o("Wav2Vec2Processor"),cio=o(" (UniSpeech model)"),fio=l(),Mh=a("li"),Lte=a("strong"),mio=o("unispeech-sat"),gio=o(" \u2014 "),OB=a("a"),hio=o("Wav2Vec2Processor"),pio=o(" (UniSpeechSat model)"),uio=l(),Eh=a("li"),xte=a("strong"),_io=o("vilt"),bio=o(" \u2014 "),VB=a("a"),vio=o("ViltProcessor"),Fio=o(" (ViLT model)"),Tio=l(),Ch=a("li"),$te=a("strong"),Mio=o("vision-text-dual-encoder"),Eio=o(" \u2014 "),XB=a("a"),Cio=o("VisionTextDualEncoderProcessor"),wio=o(" (VisionTextDualEncoder model)"),Aio=l(),wh=a("li"),kte=a("strong"),yio=o("wav2vec2"),Lio=o(" \u2014 "),zB=a("a"),xio=o("Wav2Vec2Processor"),$io=o(" (Wav2Vec2 model)"),kio=l(),Ah=a("li"),Ste=a("strong"),Sio=o("wavlm"),Rio=o(" \u2014 "),QB=a("a"),Bio=o("Wav2Vec2Processor"),Pio=o(" (WavLM model)"),Iio=l(),F(yh.$$.fragment),qio=l(),F(Lh.$$.fragment),Nio=l(),xh=a("div"),F(OA.$$.fragment),jio=l(),Rte=a("p"),Dio=o("Register a new processor for this class."),rBe=l(),pi=a("h2"),$h=a("a"),Bte=a("span"),F(VA.$$.fragment),Gio=l(),Pte=a("span"),Oio=o("AutoModel"),tBe=l(),Ao=a("div"),F(XA.$$.fragment),Vio=l(),ui=a("p"),Xio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WB=a("a"),zio=o("from_pretrained()"),Qio=o(" class method or the "),HB=a("a"),Wio=o("from_config()"),Hio=o(` class
method.`),Uio=l(),zA=a("p"),Jio=o("This class cannot be instantiated directly using "),Ite=a("code"),Yio=o("__init__()"),Kio=o(" (throws an error)."),Zio=l(),Kr=a("div"),F(QA.$$.fragment),edo=l(),qte=a("p"),odo=o("Instantiates one of the base model classes of the library from a configuration."),rdo=l(),_i=a("p"),tdo=o(`Note:
Loading a model from its configuration file does `),Nte=a("strong"),ado=o("not"),ndo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UB=a("a"),sdo=o("from_pretrained()"),ldo=o(" to load the model weights."),ido=l(),F(kh.$$.fragment),ddo=l(),We=a("div"),F(WA.$$.fragment),cdo=l(),jte=a("p"),fdo=o("Instantiate one of the base model classes of the library from a pretrained model."),mdo=l(),Ma=a("p"),gdo=o("The model class to instantiate is selected based on the "),Dte=a("code"),hdo=o("model_type"),pdo=o(` property of the config object (either
passed as an argument or loaded from `),Gte=a("code"),udo=o("pretrained_model_name_or_path"),_do=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=a("code"),bdo=o("pretrained_model_name_or_path"),vdo=o(":"),Fdo=l(),x=a("ul"),Sh=a("li"),Vte=a("strong"),Tdo=o("albert"),Mdo=o(" \u2014 "),JB=a("a"),Edo=o("AlbertModel"),Cdo=o(" (ALBERT model)"),wdo=l(),Rh=a("li"),Xte=a("strong"),Ado=o("bart"),ydo=o(" \u2014 "),YB=a("a"),Ldo=o("BartModel"),xdo=o(" (BART model)"),$do=l(),Bh=a("li"),zte=a("strong"),kdo=o("beit"),Sdo=o(" \u2014 "),KB=a("a"),Rdo=o("BeitModel"),Bdo=o(" (BEiT model)"),Pdo=l(),Ph=a("li"),Qte=a("strong"),Ido=o("bert"),qdo=o(" \u2014 "),ZB=a("a"),Ndo=o("BertModel"),jdo=o(" (BERT model)"),Ddo=l(),Ih=a("li"),Wte=a("strong"),Gdo=o("bert-generation"),Odo=o(" \u2014 "),eP=a("a"),Vdo=o("BertGenerationEncoder"),Xdo=o(" (Bert Generation model)"),zdo=l(),qh=a("li"),Hte=a("strong"),Qdo=o("big_bird"),Wdo=o(" \u2014 "),oP=a("a"),Hdo=o("BigBirdModel"),Udo=o(" (BigBird model)"),Jdo=l(),Nh=a("li"),Ute=a("strong"),Ydo=o("bigbird_pegasus"),Kdo=o(" \u2014 "),rP=a("a"),Zdo=o("BigBirdPegasusModel"),eco=o(" (BigBirdPegasus model)"),oco=l(),jh=a("li"),Jte=a("strong"),rco=o("blenderbot"),tco=o(" \u2014 "),tP=a("a"),aco=o("BlenderbotModel"),nco=o(" (Blenderbot model)"),sco=l(),Dh=a("li"),Yte=a("strong"),lco=o("blenderbot-small"),ico=o(" \u2014 "),aP=a("a"),dco=o("BlenderbotSmallModel"),cco=o(" (BlenderbotSmall model)"),fco=l(),Gh=a("li"),Kte=a("strong"),mco=o("camembert"),gco=o(" \u2014 "),nP=a("a"),hco=o("CamembertModel"),pco=o(" (CamemBERT model)"),uco=l(),Oh=a("li"),Zte=a("strong"),_co=o("canine"),bco=o(" \u2014 "),sP=a("a"),vco=o("CanineModel"),Fco=o(" (Canine model)"),Tco=l(),Vh=a("li"),eae=a("strong"),Mco=o("clip"),Eco=o(" \u2014 "),lP=a("a"),Cco=o("CLIPModel"),wco=o(" (CLIP model)"),Aco=l(),Xh=a("li"),oae=a("strong"),yco=o("convbert"),Lco=o(" \u2014 "),iP=a("a"),xco=o("ConvBertModel"),$co=o(" (ConvBERT model)"),kco=l(),zh=a("li"),rae=a("strong"),Sco=o("convnext"),Rco=o(" \u2014 "),dP=a("a"),Bco=o("ConvNextModel"),Pco=o(" (ConvNext model)"),Ico=l(),Qh=a("li"),tae=a("strong"),qco=o("ctrl"),Nco=o(" \u2014 "),cP=a("a"),jco=o("CTRLModel"),Dco=o(" (CTRL model)"),Gco=l(),Wh=a("li"),aae=a("strong"),Oco=o("data2vec-audio"),Vco=o(" \u2014 "),fP=a("a"),Xco=o("Data2VecAudioModel"),zco=o(" (Data2VecAudio model)"),Qco=l(),Hh=a("li"),nae=a("strong"),Wco=o("data2vec-text"),Hco=o(" \u2014 "),mP=a("a"),Uco=o("Data2VecTextModel"),Jco=o(" (Data2VecText model)"),Yco=l(),Uh=a("li"),sae=a("strong"),Kco=o("data2vec-vision"),Zco=o(" \u2014 "),gP=a("a"),efo=o("Data2VecVisionModel"),ofo=o(" (Data2VecVision model)"),rfo=l(),Jh=a("li"),lae=a("strong"),tfo=o("deberta"),afo=o(" \u2014 "),hP=a("a"),nfo=o("DebertaModel"),sfo=o(" (DeBERTa model)"),lfo=l(),Yh=a("li"),iae=a("strong"),ifo=o("deberta-v2"),dfo=o(" \u2014 "),pP=a("a"),cfo=o("DebertaV2Model"),ffo=o(" (DeBERTa-v2 model)"),mfo=l(),Kh=a("li"),dae=a("strong"),gfo=o("decision_transformer"),hfo=o(" \u2014 "),uP=a("a"),pfo=o("DecisionTransformerModel"),ufo=o(" (Decision Transformer model)"),_fo=l(),Zh=a("li"),cae=a("strong"),bfo=o("deit"),vfo=o(" \u2014 "),_P=a("a"),Ffo=o("DeiTModel"),Tfo=o(" (DeiT model)"),Mfo=l(),ep=a("li"),fae=a("strong"),Efo=o("detr"),Cfo=o(" \u2014 "),bP=a("a"),wfo=o("DetrModel"),Afo=o(" (DETR model)"),yfo=l(),op=a("li"),mae=a("strong"),Lfo=o("distilbert"),xfo=o(" \u2014 "),vP=a("a"),$fo=o("DistilBertModel"),kfo=o(" (DistilBERT model)"),Sfo=l(),rp=a("li"),gae=a("strong"),Rfo=o("dpr"),Bfo=o(" \u2014 "),FP=a("a"),Pfo=o("DPRQuestionEncoder"),Ifo=o(" (DPR model)"),qfo=l(),tp=a("li"),hae=a("strong"),Nfo=o("dpt"),jfo=o(" \u2014 "),TP=a("a"),Dfo=o("DPTModel"),Gfo=o(" (DPT model)"),Ofo=l(),ap=a("li"),pae=a("strong"),Vfo=o("electra"),Xfo=o(" \u2014 "),MP=a("a"),zfo=o("ElectraModel"),Qfo=o(" (ELECTRA model)"),Wfo=l(),np=a("li"),uae=a("strong"),Hfo=o("flaubert"),Ufo=o(" \u2014 "),EP=a("a"),Jfo=o("FlaubertModel"),Yfo=o(" (FlauBERT model)"),Kfo=l(),sp=a("li"),_ae=a("strong"),Zfo=o("fnet"),emo=o(" \u2014 "),CP=a("a"),omo=o("FNetModel"),rmo=o(" (FNet model)"),tmo=l(),lp=a("li"),bae=a("strong"),amo=o("fsmt"),nmo=o(" \u2014 "),wP=a("a"),smo=o("FSMTModel"),lmo=o(" (FairSeq Machine-Translation model)"),imo=l(),ys=a("li"),vae=a("strong"),dmo=o("funnel"),cmo=o(" \u2014 "),AP=a("a"),fmo=o("FunnelModel"),mmo=o(" or "),yP=a("a"),gmo=o("FunnelBaseModel"),hmo=o(" (Funnel Transformer model)"),pmo=l(),ip=a("li"),Fae=a("strong"),umo=o("glpn"),_mo=o(" \u2014 "),LP=a("a"),bmo=o("GLPNModel"),vmo=o(" (GLPN model)"),Fmo=l(),dp=a("li"),Tae=a("strong"),Tmo=o("gpt2"),Mmo=o(" \u2014 "),xP=a("a"),Emo=o("GPT2Model"),Cmo=o(" (OpenAI GPT-2 model)"),wmo=l(),cp=a("li"),Mae=a("strong"),Amo=o("gpt_neo"),ymo=o(" \u2014 "),$P=a("a"),Lmo=o("GPTNeoModel"),xmo=o(" (GPT Neo model)"),$mo=l(),fp=a("li"),Eae=a("strong"),kmo=o("gptj"),Smo=o(" \u2014 "),kP=a("a"),Rmo=o("GPTJModel"),Bmo=o(" (GPT-J model)"),Pmo=l(),mp=a("li"),Cae=a("strong"),Imo=o("hubert"),qmo=o(" \u2014 "),SP=a("a"),Nmo=o("HubertModel"),jmo=o(" (Hubert model)"),Dmo=l(),gp=a("li"),wae=a("strong"),Gmo=o("ibert"),Omo=o(" \u2014 "),RP=a("a"),Vmo=o("IBertModel"),Xmo=o(" (I-BERT model)"),zmo=l(),hp=a("li"),Aae=a("strong"),Qmo=o("imagegpt"),Wmo=o(" \u2014 "),BP=a("a"),Hmo=o("ImageGPTModel"),Umo=o(" (ImageGPT model)"),Jmo=l(),pp=a("li"),yae=a("strong"),Ymo=o("layoutlm"),Kmo=o(" \u2014 "),PP=a("a"),Zmo=o("LayoutLMModel"),ego=o(" (LayoutLM model)"),ogo=l(),up=a("li"),Lae=a("strong"),rgo=o("layoutlmv2"),tgo=o(" \u2014 "),IP=a("a"),ago=o("LayoutLMv2Model"),ngo=o(" (LayoutLMv2 model)"),sgo=l(),_p=a("li"),xae=a("strong"),lgo=o("led"),igo=o(" \u2014 "),qP=a("a"),dgo=o("LEDModel"),cgo=o(" (LED model)"),fgo=l(),bp=a("li"),$ae=a("strong"),mgo=o("longformer"),ggo=o(" \u2014 "),NP=a("a"),hgo=o("LongformerModel"),pgo=o(" (Longformer model)"),ugo=l(),vp=a("li"),kae=a("strong"),_go=o("luke"),bgo=o(" \u2014 "),jP=a("a"),vgo=o("LukeModel"),Fgo=o(" (LUKE model)"),Tgo=l(),Fp=a("li"),Sae=a("strong"),Mgo=o("lxmert"),Ego=o(" \u2014 "),DP=a("a"),Cgo=o("LxmertModel"),wgo=o(" (LXMERT model)"),Ago=l(),Tp=a("li"),Rae=a("strong"),ygo=o("m2m_100"),Lgo=o(" \u2014 "),GP=a("a"),xgo=o("M2M100Model"),$go=o(" (M2M100 model)"),kgo=l(),Mp=a("li"),Bae=a("strong"),Sgo=o("marian"),Rgo=o(" \u2014 "),OP=a("a"),Bgo=o("MarianModel"),Pgo=o(" (Marian model)"),Igo=l(),Ep=a("li"),Pae=a("strong"),qgo=o("maskformer"),Ngo=o(" \u2014 "),VP=a("a"),jgo=o("MaskFormerModel"),Dgo=o(" (MaskFormer model)"),Ggo=l(),Cp=a("li"),Iae=a("strong"),Ogo=o("mbart"),Vgo=o(" \u2014 "),XP=a("a"),Xgo=o("MBartModel"),zgo=o(" (mBART model)"),Qgo=l(),wp=a("li"),qae=a("strong"),Wgo=o("mctc"),Hgo=o(" \u2014 "),zP=a("a"),Ugo=o("MCTCModel"),Jgo=o(" (MCTC model)"),Ygo=l(),Ap=a("li"),Nae=a("strong"),Kgo=o("megatron-bert"),Zgo=o(" \u2014 "),QP=a("a"),eho=o("MegatronBertModel"),oho=o(" (MegatronBert model)"),rho=l(),yp=a("li"),jae=a("strong"),tho=o("mobilebert"),aho=o(" \u2014 "),WP=a("a"),nho=o("MobileBertModel"),sho=o(" (MobileBERT model)"),lho=l(),Lp=a("li"),Dae=a("strong"),iho=o("mpnet"),dho=o(" \u2014 "),HP=a("a"),cho=o("MPNetModel"),fho=o(" (MPNet model)"),mho=l(),xp=a("li"),Gae=a("strong"),gho=o("mt5"),hho=o(" \u2014 "),UP=a("a"),pho=o("MT5Model"),uho=o(" (mT5 model)"),_ho=l(),$p=a("li"),Oae=a("strong"),bho=o("nystromformer"),vho=o(" \u2014 "),JP=a("a"),Fho=o("NystromformerModel"),Tho=o(" (Nystromformer model)"),Mho=l(),kp=a("li"),Vae=a("strong"),Eho=o("openai-gpt"),Cho=o(" \u2014 "),YP=a("a"),who=o("OpenAIGPTModel"),Aho=o(" (OpenAI GPT model)"),yho=l(),Sp=a("li"),Xae=a("strong"),Lho=o("pegasus"),xho=o(" \u2014 "),KP=a("a"),$ho=o("PegasusModel"),kho=o(" (Pegasus model)"),Sho=l(),Rp=a("li"),zae=a("strong"),Rho=o("perceiver"),Bho=o(" \u2014 "),ZP=a("a"),Pho=o("PerceiverModel"),Iho=o(" (Perceiver model)"),qho=l(),Bp=a("li"),Qae=a("strong"),Nho=o("plbart"),jho=o(" \u2014 "),eI=a("a"),Dho=o("PLBartModel"),Gho=o(" (PLBart model)"),Oho=l(),Pp=a("li"),Wae=a("strong"),Vho=o("poolformer"),Xho=o(" \u2014 "),oI=a("a"),zho=o("PoolFormerModel"),Qho=o(" (PoolFormer model)"),Who=l(),Ip=a("li"),Hae=a("strong"),Hho=o("prophetnet"),Uho=o(" \u2014 "),rI=a("a"),Jho=o("ProphetNetModel"),Yho=o(" (ProphetNet model)"),Kho=l(),qp=a("li"),Uae=a("strong"),Zho=o("qdqbert"),epo=o(" \u2014 "),tI=a("a"),opo=o("QDQBertModel"),rpo=o(" (QDQBert model)"),tpo=l(),Np=a("li"),Jae=a("strong"),apo=o("reformer"),npo=o(" \u2014 "),aI=a("a"),spo=o("ReformerModel"),lpo=o(" (Reformer model)"),ipo=l(),jp=a("li"),Yae=a("strong"),dpo=o("regnet"),cpo=o(" \u2014 "),nI=a("a"),fpo=o("RegNetModel"),mpo=o(" (RegNet model)"),gpo=l(),Dp=a("li"),Kae=a("strong"),hpo=o("rembert"),ppo=o(" \u2014 "),sI=a("a"),upo=o("RemBertModel"),_po=o(" (RemBERT model)"),bpo=l(),Gp=a("li"),Zae=a("strong"),vpo=o("resnet"),Fpo=o(" \u2014 "),lI=a("a"),Tpo=o("ResNetModel"),Mpo=o(" (ResNet model)"),Epo=l(),Op=a("li"),ene=a("strong"),Cpo=o("retribert"),wpo=o(" \u2014 "),iI=a("a"),Apo=o("RetriBertModel"),ypo=o(" (RetriBERT model)"),Lpo=l(),Vp=a("li"),one=a("strong"),xpo=o("roberta"),$po=o(" \u2014 "),dI=a("a"),kpo=o("RobertaModel"),Spo=o(" (RoBERTa model)"),Rpo=l(),Xp=a("li"),rne=a("strong"),Bpo=o("roformer"),Ppo=o(" \u2014 "),cI=a("a"),Ipo=o("RoFormerModel"),qpo=o(" (RoFormer model)"),Npo=l(),zp=a("li"),tne=a("strong"),jpo=o("segformer"),Dpo=o(" \u2014 "),fI=a("a"),Gpo=o("SegformerModel"),Opo=o(" (SegFormer model)"),Vpo=l(),Qp=a("li"),ane=a("strong"),Xpo=o("sew"),zpo=o(" \u2014 "),mI=a("a"),Qpo=o("SEWModel"),Wpo=o(" (SEW model)"),Hpo=l(),Wp=a("li"),nne=a("strong"),Upo=o("sew-d"),Jpo=o(" \u2014 "),gI=a("a"),Ypo=o("SEWDModel"),Kpo=o(" (SEW-D model)"),Zpo=l(),Hp=a("li"),sne=a("strong"),euo=o("speech_to_text"),ouo=o(" \u2014 "),hI=a("a"),ruo=o("Speech2TextModel"),tuo=o(" (Speech2Text model)"),auo=l(),Up=a("li"),lne=a("strong"),nuo=o("splinter"),suo=o(" \u2014 "),pI=a("a"),luo=o("SplinterModel"),iuo=o(" (Splinter model)"),duo=l(),Jp=a("li"),ine=a("strong"),cuo=o("squeezebert"),fuo=o(" \u2014 "),uI=a("a"),muo=o("SqueezeBertModel"),guo=o(" (SqueezeBERT model)"),huo=l(),Yp=a("li"),dne=a("strong"),puo=o("swin"),uuo=o(" \u2014 "),_I=a("a"),_uo=o("SwinModel"),buo=o(" (Swin model)"),vuo=l(),Kp=a("li"),cne=a("strong"),Fuo=o("t5"),Tuo=o(" \u2014 "),bI=a("a"),Muo=o("T5Model"),Euo=o(" (T5 model)"),Cuo=l(),Zp=a("li"),fne=a("strong"),wuo=o("tapas"),Auo=o(" \u2014 "),vI=a("a"),yuo=o("TapasModel"),Luo=o(" (TAPAS model)"),xuo=l(),eu=a("li"),mne=a("strong"),$uo=o("transfo-xl"),kuo=o(" \u2014 "),FI=a("a"),Suo=o("TransfoXLModel"),Ruo=o(" (Transformer-XL model)"),Buo=l(),ou=a("li"),gne=a("strong"),Puo=o("unispeech"),Iuo=o(" \u2014 "),TI=a("a"),quo=o("UniSpeechModel"),Nuo=o(" (UniSpeech model)"),juo=l(),ru=a("li"),hne=a("strong"),Duo=o("unispeech-sat"),Guo=o(" \u2014 "),MI=a("a"),Ouo=o("UniSpeechSatModel"),Vuo=o(" (UniSpeechSat model)"),Xuo=l(),tu=a("li"),pne=a("strong"),zuo=o("van"),Quo=o(" \u2014 "),EI=a("a"),Wuo=o("VanModel"),Huo=o(" (VAN model)"),Uuo=l(),au=a("li"),une=a("strong"),Juo=o("vilt"),Yuo=o(" \u2014 "),CI=a("a"),Kuo=o("ViltModel"),Zuo=o(" (ViLT model)"),e_o=l(),nu=a("li"),_ne=a("strong"),o_o=o("vision-text-dual-encoder"),r_o=o(" \u2014 "),wI=a("a"),t_o=o("VisionTextDualEncoderModel"),a_o=o(" (VisionTextDualEncoder model)"),n_o=l(),su=a("li"),bne=a("strong"),s_o=o("visual_bert"),l_o=o(" \u2014 "),AI=a("a"),i_o=o("VisualBertModel"),d_o=o(" (VisualBert model)"),c_o=l(),lu=a("li"),vne=a("strong"),f_o=o("vit"),m_o=o(" \u2014 "),yI=a("a"),g_o=o("ViTModel"),h_o=o(" (ViT model)"),p_o=l(),iu=a("li"),Fne=a("strong"),u_o=o("vit_mae"),__o=o(" \u2014 "),LI=a("a"),b_o=o("ViTMAEModel"),v_o=o(" (ViTMAE model)"),F_o=l(),du=a("li"),Tne=a("strong"),T_o=o("wav2vec2"),M_o=o(" \u2014 "),xI=a("a"),E_o=o("Wav2Vec2Model"),C_o=o(" (Wav2Vec2 model)"),w_o=l(),cu=a("li"),Mne=a("strong"),A_o=o("wavlm"),y_o=o(" \u2014 "),$I=a("a"),L_o=o("WavLMModel"),x_o=o(" (WavLM model)"),$_o=l(),fu=a("li"),Ene=a("strong"),k_o=o("xglm"),S_o=o(" \u2014 "),kI=a("a"),R_o=o("XGLMModel"),B_o=o(" (XGLM model)"),P_o=l(),mu=a("li"),Cne=a("strong"),I_o=o("xlm"),q_o=o(" \u2014 "),SI=a("a"),N_o=o("XLMModel"),j_o=o(" (XLM model)"),D_o=l(),gu=a("li"),wne=a("strong"),G_o=o("xlm-prophetnet"),O_o=o(" \u2014 "),RI=a("a"),V_o=o("XLMProphetNetModel"),X_o=o(" (XLMProphetNet model)"),z_o=l(),hu=a("li"),Ane=a("strong"),Q_o=o("xlm-roberta"),W_o=o(" \u2014 "),BI=a("a"),H_o=o("XLMRobertaModel"),U_o=o(" (XLM-RoBERTa model)"),J_o=l(),pu=a("li"),yne=a("strong"),Y_o=o("xlm-roberta-xl"),K_o=o(" \u2014 "),PI=a("a"),Z_o=o("XLMRobertaXLModel"),e2o=o(" (XLM-RoBERTa-XL model)"),o2o=l(),uu=a("li"),Lne=a("strong"),r2o=o("xlnet"),t2o=o(" \u2014 "),II=a("a"),a2o=o("XLNetModel"),n2o=o(" (XLNet model)"),s2o=l(),_u=a("li"),xne=a("strong"),l2o=o("yoso"),i2o=o(" \u2014 "),qI=a("a"),d2o=o("YosoModel"),c2o=o(" (YOSO model)"),f2o=l(),bu=a("p"),m2o=o("The model is set in evaluation mode by default using "),$ne=a("code"),g2o=o("model.eval()"),h2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=a("code"),p2o=o("model.train()"),u2o=l(),F(vu.$$.fragment),aBe=l(),bi=a("h2"),Fu=a("a"),Sne=a("span"),F(HA.$$.fragment),_2o=l(),Rne=a("span"),b2o=o("AutoModelForPreTraining"),nBe=l(),yo=a("div"),F(UA.$$.fragment),v2o=l(),vi=a("p"),F2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NI=a("a"),T2o=o("from_pretrained()"),M2o=o(" class method or the "),jI=a("a"),E2o=o("from_config()"),C2o=o(` class
method.`),w2o=l(),JA=a("p"),A2o=o("This class cannot be instantiated directly using "),Bne=a("code"),y2o=o("__init__()"),L2o=o(" (throws an error)."),x2o=l(),Zr=a("div"),F(YA.$$.fragment),$2o=l(),Pne=a("p"),k2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),S2o=l(),Fi=a("p"),R2o=o(`Note:
Loading a model from its configuration file does `),Ine=a("strong"),B2o=o("not"),P2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=a("a"),I2o=o("from_pretrained()"),q2o=o(" to load the model weights."),N2o=l(),F(Tu.$$.fragment),j2o=l(),He=a("div"),F(KA.$$.fragment),D2o=l(),qne=a("p"),G2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O2o=l(),Ea=a("p"),V2o=o("The model class to instantiate is selected based on the "),Nne=a("code"),X2o=o("model_type"),z2o=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),Q2o=o("pretrained_model_name_or_path"),W2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=a("code"),H2o=o("pretrained_model_name_or_path"),U2o=o(":"),J2o=l(),G=a("ul"),Mu=a("li"),Gne=a("strong"),Y2o=o("albert"),K2o=o(" \u2014 "),GI=a("a"),Z2o=o("AlbertForPreTraining"),e1o=o(" (ALBERT model)"),o1o=l(),Eu=a("li"),One=a("strong"),r1o=o("bart"),t1o=o(" \u2014 "),OI=a("a"),a1o=o("BartForConditionalGeneration"),n1o=o(" (BART model)"),s1o=l(),Cu=a("li"),Vne=a("strong"),l1o=o("bert"),i1o=o(" \u2014 "),VI=a("a"),d1o=o("BertForPreTraining"),c1o=o(" (BERT model)"),f1o=l(),wu=a("li"),Xne=a("strong"),m1o=o("big_bird"),g1o=o(" \u2014 "),XI=a("a"),h1o=o("BigBirdForPreTraining"),p1o=o(" (BigBird model)"),u1o=l(),Au=a("li"),zne=a("strong"),_1o=o("camembert"),b1o=o(" \u2014 "),zI=a("a"),v1o=o("CamembertForMaskedLM"),F1o=o(" (CamemBERT model)"),T1o=l(),yu=a("li"),Qne=a("strong"),M1o=o("ctrl"),E1o=o(" \u2014 "),QI=a("a"),C1o=o("CTRLLMHeadModel"),w1o=o(" (CTRL model)"),A1o=l(),Lu=a("li"),Wne=a("strong"),y1o=o("data2vec-text"),L1o=o(" \u2014 "),WI=a("a"),x1o=o("Data2VecTextForMaskedLM"),$1o=o(" (Data2VecText model)"),k1o=l(),xu=a("li"),Hne=a("strong"),S1o=o("deberta"),R1o=o(" \u2014 "),HI=a("a"),B1o=o("DebertaForMaskedLM"),P1o=o(" (DeBERTa model)"),I1o=l(),$u=a("li"),Une=a("strong"),q1o=o("deberta-v2"),N1o=o(" \u2014 "),UI=a("a"),j1o=o("DebertaV2ForMaskedLM"),D1o=o(" (DeBERTa-v2 model)"),G1o=l(),ku=a("li"),Jne=a("strong"),O1o=o("distilbert"),V1o=o(" \u2014 "),JI=a("a"),X1o=o("DistilBertForMaskedLM"),z1o=o(" (DistilBERT model)"),Q1o=l(),Su=a("li"),Yne=a("strong"),W1o=o("electra"),H1o=o(" \u2014 "),YI=a("a"),U1o=o("ElectraForPreTraining"),J1o=o(" (ELECTRA model)"),Y1o=l(),Ru=a("li"),Kne=a("strong"),K1o=o("flaubert"),Z1o=o(" \u2014 "),KI=a("a"),ebo=o("FlaubertWithLMHeadModel"),obo=o(" (FlauBERT model)"),rbo=l(),Bu=a("li"),Zne=a("strong"),tbo=o("fnet"),abo=o(" \u2014 "),ZI=a("a"),nbo=o("FNetForPreTraining"),sbo=o(" (FNet model)"),lbo=l(),Pu=a("li"),ese=a("strong"),ibo=o("fsmt"),dbo=o(" \u2014 "),eq=a("a"),cbo=o("FSMTForConditionalGeneration"),fbo=o(" (FairSeq Machine-Translation model)"),mbo=l(),Iu=a("li"),ose=a("strong"),gbo=o("funnel"),hbo=o(" \u2014 "),oq=a("a"),pbo=o("FunnelForPreTraining"),ubo=o(" (Funnel Transformer model)"),_bo=l(),qu=a("li"),rse=a("strong"),bbo=o("gpt2"),vbo=o(" \u2014 "),rq=a("a"),Fbo=o("GPT2LMHeadModel"),Tbo=o(" (OpenAI GPT-2 model)"),Mbo=l(),Nu=a("li"),tse=a("strong"),Ebo=o("ibert"),Cbo=o(" \u2014 "),tq=a("a"),wbo=o("IBertForMaskedLM"),Abo=o(" (I-BERT model)"),ybo=l(),ju=a("li"),ase=a("strong"),Lbo=o("layoutlm"),xbo=o(" \u2014 "),aq=a("a"),$bo=o("LayoutLMForMaskedLM"),kbo=o(" (LayoutLM model)"),Sbo=l(),Du=a("li"),nse=a("strong"),Rbo=o("longformer"),Bbo=o(" \u2014 "),nq=a("a"),Pbo=o("LongformerForMaskedLM"),Ibo=o(" (Longformer model)"),qbo=l(),Gu=a("li"),sse=a("strong"),Nbo=o("lxmert"),jbo=o(" \u2014 "),sq=a("a"),Dbo=o("LxmertForPreTraining"),Gbo=o(" (LXMERT model)"),Obo=l(),Ou=a("li"),lse=a("strong"),Vbo=o("megatron-bert"),Xbo=o(" \u2014 "),lq=a("a"),zbo=o("MegatronBertForPreTraining"),Qbo=o(" (MegatronBert model)"),Wbo=l(),Vu=a("li"),ise=a("strong"),Hbo=o("mobilebert"),Ubo=o(" \u2014 "),iq=a("a"),Jbo=o("MobileBertForPreTraining"),Ybo=o(" (MobileBERT model)"),Kbo=l(),Xu=a("li"),dse=a("strong"),Zbo=o("mpnet"),e4o=o(" \u2014 "),dq=a("a"),o4o=o("MPNetForMaskedLM"),r4o=o(" (MPNet model)"),t4o=l(),zu=a("li"),cse=a("strong"),a4o=o("openai-gpt"),n4o=o(" \u2014 "),cq=a("a"),s4o=o("OpenAIGPTLMHeadModel"),l4o=o(" (OpenAI GPT model)"),i4o=l(),Qu=a("li"),fse=a("strong"),d4o=o("retribert"),c4o=o(" \u2014 "),fq=a("a"),f4o=o("RetriBertModel"),m4o=o(" (RetriBERT model)"),g4o=l(),Wu=a("li"),mse=a("strong"),h4o=o("roberta"),p4o=o(" \u2014 "),mq=a("a"),u4o=o("RobertaForMaskedLM"),_4o=o(" (RoBERTa model)"),b4o=l(),Hu=a("li"),gse=a("strong"),v4o=o("squeezebert"),F4o=o(" \u2014 "),gq=a("a"),T4o=o("SqueezeBertForMaskedLM"),M4o=o(" (SqueezeBERT model)"),E4o=l(),Uu=a("li"),hse=a("strong"),C4o=o("t5"),w4o=o(" \u2014 "),hq=a("a"),A4o=o("T5ForConditionalGeneration"),y4o=o(" (T5 model)"),L4o=l(),Ju=a("li"),pse=a("strong"),x4o=o("tapas"),$4o=o(" \u2014 "),pq=a("a"),k4o=o("TapasForMaskedLM"),S4o=o(" (TAPAS model)"),R4o=l(),Yu=a("li"),use=a("strong"),B4o=o("transfo-xl"),P4o=o(" \u2014 "),uq=a("a"),I4o=o("TransfoXLLMHeadModel"),q4o=o(" (Transformer-XL model)"),N4o=l(),Ku=a("li"),_se=a("strong"),j4o=o("unispeech"),D4o=o(" \u2014 "),_q=a("a"),G4o=o("UniSpeechForPreTraining"),O4o=o(" (UniSpeech model)"),V4o=l(),Zu=a("li"),bse=a("strong"),X4o=o("unispeech-sat"),z4o=o(" \u2014 "),bq=a("a"),Q4o=o("UniSpeechSatForPreTraining"),W4o=o(" (UniSpeechSat model)"),H4o=l(),e_=a("li"),vse=a("strong"),U4o=o("visual_bert"),J4o=o(" \u2014 "),vq=a("a"),Y4o=o("VisualBertForPreTraining"),K4o=o(" (VisualBert model)"),Z4o=l(),o_=a("li"),Fse=a("strong"),evo=o("vit_mae"),ovo=o(" \u2014 "),Fq=a("a"),rvo=o("ViTMAEForPreTraining"),tvo=o(" (ViTMAE model)"),avo=l(),r_=a("li"),Tse=a("strong"),nvo=o("wav2vec2"),svo=o(" \u2014 "),Tq=a("a"),lvo=o("Wav2Vec2ForPreTraining"),ivo=o(" (Wav2Vec2 model)"),dvo=l(),t_=a("li"),Mse=a("strong"),cvo=o("xlm"),fvo=o(" \u2014 "),Mq=a("a"),mvo=o("XLMWithLMHeadModel"),gvo=o(" (XLM model)"),hvo=l(),a_=a("li"),Ese=a("strong"),pvo=o("xlm-roberta"),uvo=o(" \u2014 "),Eq=a("a"),_vo=o("XLMRobertaForMaskedLM"),bvo=o(" (XLM-RoBERTa model)"),vvo=l(),n_=a("li"),Cse=a("strong"),Fvo=o("xlm-roberta-xl"),Tvo=o(" \u2014 "),Cq=a("a"),Mvo=o("XLMRobertaXLForMaskedLM"),Evo=o(" (XLM-RoBERTa-XL model)"),Cvo=l(),s_=a("li"),wse=a("strong"),wvo=o("xlnet"),Avo=o(" \u2014 "),wq=a("a"),yvo=o("XLNetLMHeadModel"),Lvo=o(" (XLNet model)"),xvo=l(),l_=a("p"),$vo=o("The model is set in evaluation mode by default using "),Ase=a("code"),kvo=o("model.eval()"),Svo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=a("code"),Rvo=o("model.train()"),Bvo=l(),F(i_.$$.fragment),sBe=l(),Ti=a("h2"),d_=a("a"),Lse=a("span"),F(ZA.$$.fragment),Pvo=l(),xse=a("span"),Ivo=o("AutoModelForCausalLM"),lBe=l(),Lo=a("div"),F(ey.$$.fragment),qvo=l(),Mi=a("p"),Nvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aq=a("a"),jvo=o("from_pretrained()"),Dvo=o(" class method or the "),yq=a("a"),Gvo=o("from_config()"),Ovo=o(` class
method.`),Vvo=l(),oy=a("p"),Xvo=o("This class cannot be instantiated directly using "),$se=a("code"),zvo=o("__init__()"),Qvo=o(" (throws an error)."),Wvo=l(),et=a("div"),F(ry.$$.fragment),Hvo=l(),kse=a("p"),Uvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Jvo=l(),Ei=a("p"),Yvo=o(`Note:
Loading a model from its configuration file does `),Sse=a("strong"),Kvo=o("not"),Zvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),eFo=o("from_pretrained()"),oFo=o(" to load the model weights."),rFo=l(),F(c_.$$.fragment),tFo=l(),Ue=a("div"),F(ty.$$.fragment),aFo=l(),Rse=a("p"),nFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sFo=l(),Ca=a("p"),lFo=o("The model class to instantiate is selected based on the "),Bse=a("code"),iFo=o("model_type"),dFo=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),cFo=o("pretrained_model_name_or_path"),fFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=a("code"),mFo=o("pretrained_model_name_or_path"),gFo=o(":"),hFo=l(),z=a("ul"),f_=a("li"),qse=a("strong"),pFo=o("bart"),uFo=o(" \u2014 "),xq=a("a"),_Fo=o("BartForCausalLM"),bFo=o(" (BART model)"),vFo=l(),m_=a("li"),Nse=a("strong"),FFo=o("bert"),TFo=o(" \u2014 "),$q=a("a"),MFo=o("BertLMHeadModel"),EFo=o(" (BERT model)"),CFo=l(),g_=a("li"),jse=a("strong"),wFo=o("bert-generation"),AFo=o(" \u2014 "),kq=a("a"),yFo=o("BertGenerationDecoder"),LFo=o(" (Bert Generation model)"),xFo=l(),h_=a("li"),Dse=a("strong"),$Fo=o("big_bird"),kFo=o(" \u2014 "),Sq=a("a"),SFo=o("BigBirdForCausalLM"),RFo=o(" (BigBird model)"),BFo=l(),p_=a("li"),Gse=a("strong"),PFo=o("bigbird_pegasus"),IFo=o(" \u2014 "),Rq=a("a"),qFo=o("BigBirdPegasusForCausalLM"),NFo=o(" (BigBirdPegasus model)"),jFo=l(),u_=a("li"),Ose=a("strong"),DFo=o("blenderbot"),GFo=o(" \u2014 "),Bq=a("a"),OFo=o("BlenderbotForCausalLM"),VFo=o(" (Blenderbot model)"),XFo=l(),__=a("li"),Vse=a("strong"),zFo=o("blenderbot-small"),QFo=o(" \u2014 "),Pq=a("a"),WFo=o("BlenderbotSmallForCausalLM"),HFo=o(" (BlenderbotSmall model)"),UFo=l(),b_=a("li"),Xse=a("strong"),JFo=o("camembert"),YFo=o(" \u2014 "),Iq=a("a"),KFo=o("CamembertForCausalLM"),ZFo=o(" (CamemBERT model)"),e0o=l(),v_=a("li"),zse=a("strong"),o0o=o("ctrl"),r0o=o(" \u2014 "),qq=a("a"),t0o=o("CTRLLMHeadModel"),a0o=o(" (CTRL model)"),n0o=l(),F_=a("li"),Qse=a("strong"),s0o=o("data2vec-text"),l0o=o(" \u2014 "),Nq=a("a"),i0o=o("Data2VecTextForCausalLM"),d0o=o(" (Data2VecText model)"),c0o=l(),T_=a("li"),Wse=a("strong"),f0o=o("electra"),m0o=o(" \u2014 "),jq=a("a"),g0o=o("ElectraForCausalLM"),h0o=o(" (ELECTRA model)"),p0o=l(),M_=a("li"),Hse=a("strong"),u0o=o("gpt2"),_0o=o(" \u2014 "),Dq=a("a"),b0o=o("GPT2LMHeadModel"),v0o=o(" (OpenAI GPT-2 model)"),F0o=l(),E_=a("li"),Use=a("strong"),T0o=o("gpt_neo"),M0o=o(" \u2014 "),Gq=a("a"),E0o=o("GPTNeoForCausalLM"),C0o=o(" (GPT Neo model)"),w0o=l(),C_=a("li"),Jse=a("strong"),A0o=o("gptj"),y0o=o(" \u2014 "),Oq=a("a"),L0o=o("GPTJForCausalLM"),x0o=o(" (GPT-J model)"),$0o=l(),w_=a("li"),Yse=a("strong"),k0o=o("marian"),S0o=o(" \u2014 "),Vq=a("a"),R0o=o("MarianForCausalLM"),B0o=o(" (Marian model)"),P0o=l(),A_=a("li"),Kse=a("strong"),I0o=o("mbart"),q0o=o(" \u2014 "),Xq=a("a"),N0o=o("MBartForCausalLM"),j0o=o(" (mBART model)"),D0o=l(),y_=a("li"),Zse=a("strong"),G0o=o("megatron-bert"),O0o=o(" \u2014 "),zq=a("a"),V0o=o("MegatronBertForCausalLM"),X0o=o(" (MegatronBert model)"),z0o=l(),L_=a("li"),ele=a("strong"),Q0o=o("openai-gpt"),W0o=o(" \u2014 "),Qq=a("a"),H0o=o("OpenAIGPTLMHeadModel"),U0o=o(" (OpenAI GPT model)"),J0o=l(),x_=a("li"),ole=a("strong"),Y0o=o("pegasus"),K0o=o(" \u2014 "),Wq=a("a"),Z0o=o("PegasusForCausalLM"),e6o=o(" (Pegasus model)"),o6o=l(),$_=a("li"),rle=a("strong"),r6o=o("plbart"),t6o=o(" \u2014 "),Hq=a("a"),a6o=o("PLBartForCausalLM"),n6o=o(" (PLBart model)"),s6o=l(),k_=a("li"),tle=a("strong"),l6o=o("prophetnet"),i6o=o(" \u2014 "),Uq=a("a"),d6o=o("ProphetNetForCausalLM"),c6o=o(" (ProphetNet model)"),f6o=l(),S_=a("li"),ale=a("strong"),m6o=o("qdqbert"),g6o=o(" \u2014 "),Jq=a("a"),h6o=o("QDQBertLMHeadModel"),p6o=o(" (QDQBert model)"),u6o=l(),R_=a("li"),nle=a("strong"),_6o=o("reformer"),b6o=o(" \u2014 "),Yq=a("a"),v6o=o("ReformerModelWithLMHead"),F6o=o(" (Reformer model)"),T6o=l(),B_=a("li"),sle=a("strong"),M6o=o("rembert"),E6o=o(" \u2014 "),Kq=a("a"),C6o=o("RemBertForCausalLM"),w6o=o(" (RemBERT model)"),A6o=l(),P_=a("li"),lle=a("strong"),y6o=o("roberta"),L6o=o(" \u2014 "),Zq=a("a"),x6o=o("RobertaForCausalLM"),$6o=o(" (RoBERTa model)"),k6o=l(),I_=a("li"),ile=a("strong"),S6o=o("roformer"),R6o=o(" \u2014 "),eN=a("a"),B6o=o("RoFormerForCausalLM"),P6o=o(" (RoFormer model)"),I6o=l(),q_=a("li"),dle=a("strong"),q6o=o("speech_to_text_2"),N6o=o(" \u2014 "),oN=a("a"),j6o=o("Speech2Text2ForCausalLM"),D6o=o(" (Speech2Text2 model)"),G6o=l(),N_=a("li"),cle=a("strong"),O6o=o("transfo-xl"),V6o=o(" \u2014 "),rN=a("a"),X6o=o("TransfoXLLMHeadModel"),z6o=o(" (Transformer-XL model)"),Q6o=l(),j_=a("li"),fle=a("strong"),W6o=o("trocr"),H6o=o(" \u2014 "),tN=a("a"),U6o=o("TrOCRForCausalLM"),J6o=o(" (TrOCR model)"),Y6o=l(),D_=a("li"),mle=a("strong"),K6o=o("xglm"),Z6o=o(" \u2014 "),aN=a("a"),eTo=o("XGLMForCausalLM"),oTo=o(" (XGLM model)"),rTo=l(),G_=a("li"),gle=a("strong"),tTo=o("xlm"),aTo=o(" \u2014 "),nN=a("a"),nTo=o("XLMWithLMHeadModel"),sTo=o(" (XLM model)"),lTo=l(),O_=a("li"),hle=a("strong"),iTo=o("xlm-prophetnet"),dTo=o(" \u2014 "),sN=a("a"),cTo=o("XLMProphetNetForCausalLM"),fTo=o(" (XLMProphetNet model)"),mTo=l(),V_=a("li"),ple=a("strong"),gTo=o("xlm-roberta"),hTo=o(" \u2014 "),lN=a("a"),pTo=o("XLMRobertaForCausalLM"),uTo=o(" (XLM-RoBERTa model)"),_To=l(),X_=a("li"),ule=a("strong"),bTo=o("xlm-roberta-xl"),vTo=o(" \u2014 "),iN=a("a"),FTo=o("XLMRobertaXLForCausalLM"),TTo=o(" (XLM-RoBERTa-XL model)"),MTo=l(),z_=a("li"),_le=a("strong"),ETo=o("xlnet"),CTo=o(" \u2014 "),dN=a("a"),wTo=o("XLNetLMHeadModel"),ATo=o(" (XLNet model)"),yTo=l(),Q_=a("p"),LTo=o("The model is set in evaluation mode by default using "),ble=a("code"),xTo=o("model.eval()"),$To=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),kTo=o("model.train()"),STo=l(),F(W_.$$.fragment),iBe=l(),Ci=a("h2"),H_=a("a"),Fle=a("span"),F(ay.$$.fragment),RTo=l(),Tle=a("span"),BTo=o("AutoModelForMaskedLM"),dBe=l(),xo=a("div"),F(ny.$$.fragment),PTo=l(),wi=a("p"),ITo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cN=a("a"),qTo=o("from_pretrained()"),NTo=o(" class method or the "),fN=a("a"),jTo=o("from_config()"),DTo=o(` class
method.`),GTo=l(),sy=a("p"),OTo=o("This class cannot be instantiated directly using "),Mle=a("code"),VTo=o("__init__()"),XTo=o(" (throws an error)."),zTo=l(),ot=a("div"),F(ly.$$.fragment),QTo=l(),Ele=a("p"),WTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HTo=l(),Ai=a("p"),UTo=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),JTo=o("not"),YTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=a("a"),KTo=o("from_pretrained()"),ZTo=o(" to load the model weights."),eMo=l(),F(U_.$$.fragment),oMo=l(),Je=a("div"),F(iy.$$.fragment),rMo=l(),wle=a("p"),tMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aMo=l(),wa=a("p"),nMo=o("The model class to instantiate is selected based on the "),Ale=a("code"),sMo=o("model_type"),lMo=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),iMo=o("pretrained_model_name_or_path"),dMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),cMo=o("pretrained_model_name_or_path"),fMo=o(":"),mMo=l(),Q=a("ul"),J_=a("li"),xle=a("strong"),gMo=o("albert"),hMo=o(" \u2014 "),gN=a("a"),pMo=o("AlbertForMaskedLM"),uMo=o(" (ALBERT model)"),_Mo=l(),Y_=a("li"),$le=a("strong"),bMo=o("bart"),vMo=o(" \u2014 "),hN=a("a"),FMo=o("BartForConditionalGeneration"),TMo=o(" (BART model)"),MMo=l(),K_=a("li"),kle=a("strong"),EMo=o("bert"),CMo=o(" \u2014 "),pN=a("a"),wMo=o("BertForMaskedLM"),AMo=o(" (BERT model)"),yMo=l(),Z_=a("li"),Sle=a("strong"),LMo=o("big_bird"),xMo=o(" \u2014 "),uN=a("a"),$Mo=o("BigBirdForMaskedLM"),kMo=o(" (BigBird model)"),SMo=l(),e2=a("li"),Rle=a("strong"),RMo=o("camembert"),BMo=o(" \u2014 "),_N=a("a"),PMo=o("CamembertForMaskedLM"),IMo=o(" (CamemBERT model)"),qMo=l(),o2=a("li"),Ble=a("strong"),NMo=o("convbert"),jMo=o(" \u2014 "),bN=a("a"),DMo=o("ConvBertForMaskedLM"),GMo=o(" (ConvBERT model)"),OMo=l(),r2=a("li"),Ple=a("strong"),VMo=o("data2vec-text"),XMo=o(" \u2014 "),vN=a("a"),zMo=o("Data2VecTextForMaskedLM"),QMo=o(" (Data2VecText model)"),WMo=l(),t2=a("li"),Ile=a("strong"),HMo=o("deberta"),UMo=o(" \u2014 "),FN=a("a"),JMo=o("DebertaForMaskedLM"),YMo=o(" (DeBERTa model)"),KMo=l(),a2=a("li"),qle=a("strong"),ZMo=o("deberta-v2"),eEo=o(" \u2014 "),TN=a("a"),oEo=o("DebertaV2ForMaskedLM"),rEo=o(" (DeBERTa-v2 model)"),tEo=l(),n2=a("li"),Nle=a("strong"),aEo=o("distilbert"),nEo=o(" \u2014 "),MN=a("a"),sEo=o("DistilBertForMaskedLM"),lEo=o(" (DistilBERT model)"),iEo=l(),s2=a("li"),jle=a("strong"),dEo=o("electra"),cEo=o(" \u2014 "),EN=a("a"),fEo=o("ElectraForMaskedLM"),mEo=o(" (ELECTRA model)"),gEo=l(),l2=a("li"),Dle=a("strong"),hEo=o("flaubert"),pEo=o(" \u2014 "),CN=a("a"),uEo=o("FlaubertWithLMHeadModel"),_Eo=o(" (FlauBERT model)"),bEo=l(),i2=a("li"),Gle=a("strong"),vEo=o("fnet"),FEo=o(" \u2014 "),wN=a("a"),TEo=o("FNetForMaskedLM"),MEo=o(" (FNet model)"),EEo=l(),d2=a("li"),Ole=a("strong"),CEo=o("funnel"),wEo=o(" \u2014 "),AN=a("a"),AEo=o("FunnelForMaskedLM"),yEo=o(" (Funnel Transformer model)"),LEo=l(),c2=a("li"),Vle=a("strong"),xEo=o("ibert"),$Eo=o(" \u2014 "),yN=a("a"),kEo=o("IBertForMaskedLM"),SEo=o(" (I-BERT model)"),REo=l(),f2=a("li"),Xle=a("strong"),BEo=o("layoutlm"),PEo=o(" \u2014 "),LN=a("a"),IEo=o("LayoutLMForMaskedLM"),qEo=o(" (LayoutLM model)"),NEo=l(),m2=a("li"),zle=a("strong"),jEo=o("longformer"),DEo=o(" \u2014 "),xN=a("a"),GEo=o("LongformerForMaskedLM"),OEo=o(" (Longformer model)"),VEo=l(),g2=a("li"),Qle=a("strong"),XEo=o("mbart"),zEo=o(" \u2014 "),$N=a("a"),QEo=o("MBartForConditionalGeneration"),WEo=o(" (mBART model)"),HEo=l(),h2=a("li"),Wle=a("strong"),UEo=o("megatron-bert"),JEo=o(" \u2014 "),kN=a("a"),YEo=o("MegatronBertForMaskedLM"),KEo=o(" (MegatronBert model)"),ZEo=l(),p2=a("li"),Hle=a("strong"),eCo=o("mobilebert"),oCo=o(" \u2014 "),SN=a("a"),rCo=o("MobileBertForMaskedLM"),tCo=o(" (MobileBERT model)"),aCo=l(),u2=a("li"),Ule=a("strong"),nCo=o("mpnet"),sCo=o(" \u2014 "),RN=a("a"),lCo=o("MPNetForMaskedLM"),iCo=o(" (MPNet model)"),dCo=l(),_2=a("li"),Jle=a("strong"),cCo=o("nystromformer"),fCo=o(" \u2014 "),BN=a("a"),mCo=o("NystromformerForMaskedLM"),gCo=o(" (Nystromformer model)"),hCo=l(),b2=a("li"),Yle=a("strong"),pCo=o("perceiver"),uCo=o(" \u2014 "),PN=a("a"),_Co=o("PerceiverForMaskedLM"),bCo=o(" (Perceiver model)"),vCo=l(),v2=a("li"),Kle=a("strong"),FCo=o("qdqbert"),TCo=o(" \u2014 "),IN=a("a"),MCo=o("QDQBertForMaskedLM"),ECo=o(" (QDQBert model)"),CCo=l(),F2=a("li"),Zle=a("strong"),wCo=o("reformer"),ACo=o(" \u2014 "),qN=a("a"),yCo=o("ReformerForMaskedLM"),LCo=o(" (Reformer model)"),xCo=l(),T2=a("li"),eie=a("strong"),$Co=o("rembert"),kCo=o(" \u2014 "),NN=a("a"),SCo=o("RemBertForMaskedLM"),RCo=o(" (RemBERT model)"),BCo=l(),M2=a("li"),oie=a("strong"),PCo=o("roberta"),ICo=o(" \u2014 "),jN=a("a"),qCo=o("RobertaForMaskedLM"),NCo=o(" (RoBERTa model)"),jCo=l(),E2=a("li"),rie=a("strong"),DCo=o("roformer"),GCo=o(" \u2014 "),DN=a("a"),OCo=o("RoFormerForMaskedLM"),VCo=o(" (RoFormer model)"),XCo=l(),C2=a("li"),tie=a("strong"),zCo=o("squeezebert"),QCo=o(" \u2014 "),GN=a("a"),WCo=o("SqueezeBertForMaskedLM"),HCo=o(" (SqueezeBERT model)"),UCo=l(),w2=a("li"),aie=a("strong"),JCo=o("tapas"),YCo=o(" \u2014 "),ON=a("a"),KCo=o("TapasForMaskedLM"),ZCo=o(" (TAPAS model)"),e5o=l(),A2=a("li"),nie=a("strong"),o5o=o("wav2vec2"),r5o=o(" \u2014 "),sie=a("code"),t5o=o("Wav2Vec2ForMaskedLM"),a5o=o(" (Wav2Vec2 model)"),n5o=l(),y2=a("li"),lie=a("strong"),s5o=o("xlm"),l5o=o(" \u2014 "),VN=a("a"),i5o=o("XLMWithLMHeadModel"),d5o=o(" (XLM model)"),c5o=l(),L2=a("li"),iie=a("strong"),f5o=o("xlm-roberta"),m5o=o(" \u2014 "),XN=a("a"),g5o=o("XLMRobertaForMaskedLM"),h5o=o(" (XLM-RoBERTa model)"),p5o=l(),x2=a("li"),die=a("strong"),u5o=o("xlm-roberta-xl"),_5o=o(" \u2014 "),zN=a("a"),b5o=o("XLMRobertaXLForMaskedLM"),v5o=o(" (XLM-RoBERTa-XL model)"),F5o=l(),$2=a("li"),cie=a("strong"),T5o=o("yoso"),M5o=o(" \u2014 "),QN=a("a"),E5o=o("YosoForMaskedLM"),C5o=o(" (YOSO model)"),w5o=l(),k2=a("p"),A5o=o("The model is set in evaluation mode by default using "),fie=a("code"),y5o=o("model.eval()"),L5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=a("code"),x5o=o("model.train()"),$5o=l(),F(S2.$$.fragment),cBe=l(),yi=a("h2"),R2=a("a"),gie=a("span"),F(dy.$$.fragment),k5o=l(),hie=a("span"),S5o=o("AutoModelForSeq2SeqLM"),fBe=l(),$o=a("div"),F(cy.$$.fragment),R5o=l(),Li=a("p"),B5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WN=a("a"),P5o=o("from_pretrained()"),I5o=o(" class method or the "),HN=a("a"),q5o=o("from_config()"),N5o=o(` class
method.`),j5o=l(),fy=a("p"),D5o=o("This class cannot be instantiated directly using "),pie=a("code"),G5o=o("__init__()"),O5o=o(" (throws an error)."),V5o=l(),rt=a("div"),F(my.$$.fragment),X5o=l(),uie=a("p"),z5o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Q5o=l(),xi=a("p"),W5o=o(`Note:
Loading a model from its configuration file does `),_ie=a("strong"),H5o=o("not"),U5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=a("a"),J5o=o("from_pretrained()"),Y5o=o(" to load the model weights."),K5o=l(),F(B2.$$.fragment),Z5o=l(),Ye=a("div"),F(gy.$$.fragment),e3o=l(),bie=a("p"),o3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r3o=l(),Aa=a("p"),t3o=o("The model class to instantiate is selected based on the "),vie=a("code"),a3o=o("model_type"),n3o=o(` property of the config object (either
passed as an argument or loaded from `),Fie=a("code"),s3o=o("pretrained_model_name_or_path"),l3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=a("code"),i3o=o("pretrained_model_name_or_path"),d3o=o(":"),c3o=l(),he=a("ul"),P2=a("li"),Mie=a("strong"),f3o=o("bart"),m3o=o(" \u2014 "),JN=a("a"),g3o=o("BartForConditionalGeneration"),h3o=o(" (BART model)"),p3o=l(),I2=a("li"),Eie=a("strong"),u3o=o("bigbird_pegasus"),_3o=o(" \u2014 "),YN=a("a"),b3o=o("BigBirdPegasusForConditionalGeneration"),v3o=o(" (BigBirdPegasus model)"),F3o=l(),q2=a("li"),Cie=a("strong"),T3o=o("blenderbot"),M3o=o(" \u2014 "),KN=a("a"),E3o=o("BlenderbotForConditionalGeneration"),C3o=o(" (Blenderbot model)"),w3o=l(),N2=a("li"),wie=a("strong"),A3o=o("blenderbot-small"),y3o=o(" \u2014 "),ZN=a("a"),L3o=o("BlenderbotSmallForConditionalGeneration"),x3o=o(" (BlenderbotSmall model)"),$3o=l(),j2=a("li"),Aie=a("strong"),k3o=o("encoder-decoder"),S3o=o(" \u2014 "),ej=a("a"),R3o=o("EncoderDecoderModel"),B3o=o(" (Encoder decoder model)"),P3o=l(),D2=a("li"),yie=a("strong"),I3o=o("fsmt"),q3o=o(" \u2014 "),oj=a("a"),N3o=o("FSMTForConditionalGeneration"),j3o=o(" (FairSeq Machine-Translation model)"),D3o=l(),G2=a("li"),Lie=a("strong"),G3o=o("led"),O3o=o(" \u2014 "),rj=a("a"),V3o=o("LEDForConditionalGeneration"),X3o=o(" (LED model)"),z3o=l(),O2=a("li"),xie=a("strong"),Q3o=o("m2m_100"),W3o=o(" \u2014 "),tj=a("a"),H3o=o("M2M100ForConditionalGeneration"),U3o=o(" (M2M100 model)"),J3o=l(),V2=a("li"),$ie=a("strong"),Y3o=o("marian"),K3o=o(" \u2014 "),aj=a("a"),Z3o=o("MarianMTModel"),ewo=o(" (Marian model)"),owo=l(),X2=a("li"),kie=a("strong"),rwo=o("mbart"),two=o(" \u2014 "),nj=a("a"),awo=o("MBartForConditionalGeneration"),nwo=o(" (mBART model)"),swo=l(),z2=a("li"),Sie=a("strong"),lwo=o("mt5"),iwo=o(" \u2014 "),sj=a("a"),dwo=o("MT5ForConditionalGeneration"),cwo=o(" (mT5 model)"),fwo=l(),Q2=a("li"),Rie=a("strong"),mwo=o("pegasus"),gwo=o(" \u2014 "),lj=a("a"),hwo=o("PegasusForConditionalGeneration"),pwo=o(" (Pegasus model)"),uwo=l(),W2=a("li"),Bie=a("strong"),_wo=o("plbart"),bwo=o(" \u2014 "),ij=a("a"),vwo=o("PLBartForConditionalGeneration"),Fwo=o(" (PLBart model)"),Two=l(),H2=a("li"),Pie=a("strong"),Mwo=o("prophetnet"),Ewo=o(" \u2014 "),dj=a("a"),Cwo=o("ProphetNetForConditionalGeneration"),wwo=o(" (ProphetNet model)"),Awo=l(),U2=a("li"),Iie=a("strong"),ywo=o("t5"),Lwo=o(" \u2014 "),cj=a("a"),xwo=o("T5ForConditionalGeneration"),$wo=o(" (T5 model)"),kwo=l(),J2=a("li"),qie=a("strong"),Swo=o("tapex"),Rwo=o(" \u2014 "),fj=a("a"),Bwo=o("BartForConditionalGeneration"),Pwo=o(" (TAPEX model)"),Iwo=l(),Y2=a("li"),Nie=a("strong"),qwo=o("xlm-prophetnet"),Nwo=o(" \u2014 "),mj=a("a"),jwo=o("XLMProphetNetForConditionalGeneration"),Dwo=o(" (XLMProphetNet model)"),Gwo=l(),K2=a("p"),Owo=o("The model is set in evaluation mode by default using "),jie=a("code"),Vwo=o("model.eval()"),Xwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=a("code"),zwo=o("model.train()"),Qwo=l(),F(Z2.$$.fragment),mBe=l(),$i=a("h2"),e1=a("a"),Gie=a("span"),F(hy.$$.fragment),Wwo=l(),Oie=a("span"),Hwo=o("AutoModelForSequenceClassification"),gBe=l(),ko=a("div"),F(py.$$.fragment),Uwo=l(),ki=a("p"),Jwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gj=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" class method or the "),hj=a("a"),Zwo=o("from_config()"),eAo=o(` class
method.`),oAo=l(),uy=a("p"),rAo=o("This class cannot be instantiated directly using "),Vie=a("code"),tAo=o("__init__()"),aAo=o(" (throws an error)."),nAo=l(),tt=a("div"),F(_y.$$.fragment),sAo=l(),Xie=a("p"),lAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iAo=l(),Si=a("p"),dAo=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),cAo=o("not"),fAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=a("a"),mAo=o("from_pretrained()"),gAo=o(" to load the model weights."),hAo=l(),F(o1.$$.fragment),pAo=l(),Ke=a("div"),F(by.$$.fragment),uAo=l(),Qie=a("p"),_Ao=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bAo=l(),ya=a("p"),vAo=o("The model class to instantiate is selected based on the "),Wie=a("code"),FAo=o("model_type"),TAo=o(` property of the config object (either
passed as an argument or loaded from `),Hie=a("code"),MAo=o("pretrained_model_name_or_path"),EAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=a("code"),CAo=o("pretrained_model_name_or_path"),wAo=o(":"),AAo=l(),q=a("ul"),r1=a("li"),Jie=a("strong"),yAo=o("albert"),LAo=o(" \u2014 "),uj=a("a"),xAo=o("AlbertForSequenceClassification"),$Ao=o(" (ALBERT model)"),kAo=l(),t1=a("li"),Yie=a("strong"),SAo=o("bart"),RAo=o(" \u2014 "),_j=a("a"),BAo=o("BartForSequenceClassification"),PAo=o(" (BART model)"),IAo=l(),a1=a("li"),Kie=a("strong"),qAo=o("bert"),NAo=o(" \u2014 "),bj=a("a"),jAo=o("BertForSequenceClassification"),DAo=o(" (BERT model)"),GAo=l(),n1=a("li"),Zie=a("strong"),OAo=o("big_bird"),VAo=o(" \u2014 "),vj=a("a"),XAo=o("BigBirdForSequenceClassification"),zAo=o(" (BigBird model)"),QAo=l(),s1=a("li"),ede=a("strong"),WAo=o("bigbird_pegasus"),HAo=o(" \u2014 "),Fj=a("a"),UAo=o("BigBirdPegasusForSequenceClassification"),JAo=o(" (BigBirdPegasus model)"),YAo=l(),l1=a("li"),ode=a("strong"),KAo=o("camembert"),ZAo=o(" \u2014 "),Tj=a("a"),eyo=o("CamembertForSequenceClassification"),oyo=o(" (CamemBERT model)"),ryo=l(),i1=a("li"),rde=a("strong"),tyo=o("canine"),ayo=o(" \u2014 "),Mj=a("a"),nyo=o("CanineForSequenceClassification"),syo=o(" (Canine model)"),lyo=l(),d1=a("li"),tde=a("strong"),iyo=o("convbert"),dyo=o(" \u2014 "),Ej=a("a"),cyo=o("ConvBertForSequenceClassification"),fyo=o(" (ConvBERT model)"),myo=l(),c1=a("li"),ade=a("strong"),gyo=o("ctrl"),hyo=o(" \u2014 "),Cj=a("a"),pyo=o("CTRLForSequenceClassification"),uyo=o(" (CTRL model)"),_yo=l(),f1=a("li"),nde=a("strong"),byo=o("data2vec-text"),vyo=o(" \u2014 "),wj=a("a"),Fyo=o("Data2VecTextForSequenceClassification"),Tyo=o(" (Data2VecText model)"),Myo=l(),m1=a("li"),sde=a("strong"),Eyo=o("deberta"),Cyo=o(" \u2014 "),Aj=a("a"),wyo=o("DebertaForSequenceClassification"),Ayo=o(" (DeBERTa model)"),yyo=l(),g1=a("li"),lde=a("strong"),Lyo=o("deberta-v2"),xyo=o(" \u2014 "),yj=a("a"),$yo=o("DebertaV2ForSequenceClassification"),kyo=o(" (DeBERTa-v2 model)"),Syo=l(),h1=a("li"),ide=a("strong"),Ryo=o("distilbert"),Byo=o(" \u2014 "),Lj=a("a"),Pyo=o("DistilBertForSequenceClassification"),Iyo=o(" (DistilBERT model)"),qyo=l(),p1=a("li"),dde=a("strong"),Nyo=o("electra"),jyo=o(" \u2014 "),xj=a("a"),Dyo=o("ElectraForSequenceClassification"),Gyo=o(" (ELECTRA model)"),Oyo=l(),u1=a("li"),cde=a("strong"),Vyo=o("flaubert"),Xyo=o(" \u2014 "),$j=a("a"),zyo=o("FlaubertForSequenceClassification"),Qyo=o(" (FlauBERT model)"),Wyo=l(),_1=a("li"),fde=a("strong"),Hyo=o("fnet"),Uyo=o(" \u2014 "),kj=a("a"),Jyo=o("FNetForSequenceClassification"),Yyo=o(" (FNet model)"),Kyo=l(),b1=a("li"),mde=a("strong"),Zyo=o("funnel"),eLo=o(" \u2014 "),Sj=a("a"),oLo=o("FunnelForSequenceClassification"),rLo=o(" (Funnel Transformer model)"),tLo=l(),v1=a("li"),gde=a("strong"),aLo=o("gpt2"),nLo=o(" \u2014 "),Rj=a("a"),sLo=o("GPT2ForSequenceClassification"),lLo=o(" (OpenAI GPT-2 model)"),iLo=l(),F1=a("li"),hde=a("strong"),dLo=o("gpt_neo"),cLo=o(" \u2014 "),Bj=a("a"),fLo=o("GPTNeoForSequenceClassification"),mLo=o(" (GPT Neo model)"),gLo=l(),T1=a("li"),pde=a("strong"),hLo=o("gptj"),pLo=o(" \u2014 "),Pj=a("a"),uLo=o("GPTJForSequenceClassification"),_Lo=o(" (GPT-J model)"),bLo=l(),M1=a("li"),ude=a("strong"),vLo=o("ibert"),FLo=o(" \u2014 "),Ij=a("a"),TLo=o("IBertForSequenceClassification"),MLo=o(" (I-BERT model)"),ELo=l(),E1=a("li"),_de=a("strong"),CLo=o("layoutlm"),wLo=o(" \u2014 "),qj=a("a"),ALo=o("LayoutLMForSequenceClassification"),yLo=o(" (LayoutLM model)"),LLo=l(),C1=a("li"),bde=a("strong"),xLo=o("layoutlmv2"),$Lo=o(" \u2014 "),Nj=a("a"),kLo=o("LayoutLMv2ForSequenceClassification"),SLo=o(" (LayoutLMv2 model)"),RLo=l(),w1=a("li"),vde=a("strong"),BLo=o("led"),PLo=o(" \u2014 "),jj=a("a"),ILo=o("LEDForSequenceClassification"),qLo=o(" (LED model)"),NLo=l(),A1=a("li"),Fde=a("strong"),jLo=o("longformer"),DLo=o(" \u2014 "),Dj=a("a"),GLo=o("LongformerForSequenceClassification"),OLo=o(" (Longformer model)"),VLo=l(),y1=a("li"),Tde=a("strong"),XLo=o("mbart"),zLo=o(" \u2014 "),Gj=a("a"),QLo=o("MBartForSequenceClassification"),WLo=o(" (mBART model)"),HLo=l(),L1=a("li"),Mde=a("strong"),ULo=o("megatron-bert"),JLo=o(" \u2014 "),Oj=a("a"),YLo=o("MegatronBertForSequenceClassification"),KLo=o(" (MegatronBert model)"),ZLo=l(),x1=a("li"),Ede=a("strong"),e8o=o("mobilebert"),o8o=o(" \u2014 "),Vj=a("a"),r8o=o("MobileBertForSequenceClassification"),t8o=o(" (MobileBERT model)"),a8o=l(),$1=a("li"),Cde=a("strong"),n8o=o("mpnet"),s8o=o(" \u2014 "),Xj=a("a"),l8o=o("MPNetForSequenceClassification"),i8o=o(" (MPNet model)"),d8o=l(),k1=a("li"),wde=a("strong"),c8o=o("nystromformer"),f8o=o(" \u2014 "),zj=a("a"),m8o=o("NystromformerForSequenceClassification"),g8o=o(" (Nystromformer model)"),h8o=l(),S1=a("li"),Ade=a("strong"),p8o=o("openai-gpt"),u8o=o(" \u2014 "),Qj=a("a"),_8o=o("OpenAIGPTForSequenceClassification"),b8o=o(" (OpenAI GPT model)"),v8o=l(),R1=a("li"),yde=a("strong"),F8o=o("perceiver"),T8o=o(" \u2014 "),Wj=a("a"),M8o=o("PerceiverForSequenceClassification"),E8o=o(" (Perceiver model)"),C8o=l(),B1=a("li"),Lde=a("strong"),w8o=o("plbart"),A8o=o(" \u2014 "),Hj=a("a"),y8o=o("PLBartForSequenceClassification"),L8o=o(" (PLBart model)"),x8o=l(),P1=a("li"),xde=a("strong"),$8o=o("qdqbert"),k8o=o(" \u2014 "),Uj=a("a"),S8o=o("QDQBertForSequenceClassification"),R8o=o(" (QDQBert model)"),B8o=l(),I1=a("li"),$de=a("strong"),P8o=o("reformer"),I8o=o(" \u2014 "),Jj=a("a"),q8o=o("ReformerForSequenceClassification"),N8o=o(" (Reformer model)"),j8o=l(),q1=a("li"),kde=a("strong"),D8o=o("rembert"),G8o=o(" \u2014 "),Yj=a("a"),O8o=o("RemBertForSequenceClassification"),V8o=o(" (RemBERT model)"),X8o=l(),N1=a("li"),Sde=a("strong"),z8o=o("roberta"),Q8o=o(" \u2014 "),Kj=a("a"),W8o=o("RobertaForSequenceClassification"),H8o=o(" (RoBERTa model)"),U8o=l(),j1=a("li"),Rde=a("strong"),J8o=o("roformer"),Y8o=o(" \u2014 "),Zj=a("a"),K8o=o("RoFormerForSequenceClassification"),Z8o=o(" (RoFormer model)"),e7o=l(),D1=a("li"),Bde=a("strong"),o7o=o("squeezebert"),r7o=o(" \u2014 "),eD=a("a"),t7o=o("SqueezeBertForSequenceClassification"),a7o=o(" (SqueezeBERT model)"),n7o=l(),G1=a("li"),Pde=a("strong"),s7o=o("tapas"),l7o=o(" \u2014 "),oD=a("a"),i7o=o("TapasForSequenceClassification"),d7o=o(" (TAPAS model)"),c7o=l(),O1=a("li"),Ide=a("strong"),f7o=o("tapex"),m7o=o(" \u2014 "),rD=a("a"),g7o=o("BartForSequenceClassification"),h7o=o(" (TAPEX model)"),p7o=l(),V1=a("li"),qde=a("strong"),u7o=o("transfo-xl"),_7o=o(" \u2014 "),tD=a("a"),b7o=o("TransfoXLForSequenceClassification"),v7o=o(" (Transformer-XL model)"),F7o=l(),X1=a("li"),Nde=a("strong"),T7o=o("xlm"),M7o=o(" \u2014 "),aD=a("a"),E7o=o("XLMForSequenceClassification"),C7o=o(" (XLM model)"),w7o=l(),z1=a("li"),jde=a("strong"),A7o=o("xlm-roberta"),y7o=o(" \u2014 "),nD=a("a"),L7o=o("XLMRobertaForSequenceClassification"),x7o=o(" (XLM-RoBERTa model)"),$7o=l(),Q1=a("li"),Dde=a("strong"),k7o=o("xlm-roberta-xl"),S7o=o(" \u2014 "),sD=a("a"),R7o=o("XLMRobertaXLForSequenceClassification"),B7o=o(" (XLM-RoBERTa-XL model)"),P7o=l(),W1=a("li"),Gde=a("strong"),I7o=o("xlnet"),q7o=o(" \u2014 "),lD=a("a"),N7o=o("XLNetForSequenceClassification"),j7o=o(" (XLNet model)"),D7o=l(),H1=a("li"),Ode=a("strong"),G7o=o("yoso"),O7o=o(" \u2014 "),iD=a("a"),V7o=o("YosoForSequenceClassification"),X7o=o(" (YOSO model)"),z7o=l(),U1=a("p"),Q7o=o("The model is set in evaluation mode by default using "),Vde=a("code"),W7o=o("model.eval()"),H7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),U7o=o("model.train()"),J7o=l(),F(J1.$$.fragment),hBe=l(),Ri=a("h2"),Y1=a("a"),zde=a("span"),F(vy.$$.fragment),Y7o=l(),Qde=a("span"),K7o=o("AutoModelForMultipleChoice"),pBe=l(),So=a("div"),F(Fy.$$.fragment),Z7o=l(),Bi=a("p"),exo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dD=a("a"),oxo=o("from_pretrained()"),rxo=o(" class method or the "),cD=a("a"),txo=o("from_config()"),axo=o(` class
method.`),nxo=l(),Ty=a("p"),sxo=o("This class cannot be instantiated directly using "),Wde=a("code"),lxo=o("__init__()"),ixo=o(" (throws an error)."),dxo=l(),at=a("div"),F(My.$$.fragment),cxo=l(),Hde=a("p"),fxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),mxo=l(),Pi=a("p"),gxo=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),hxo=o("not"),pxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=a("a"),uxo=o("from_pretrained()"),_xo=o(" to load the model weights."),bxo=l(),F(K1.$$.fragment),vxo=l(),Ze=a("div"),F(Ey.$$.fragment),Fxo=l(),Jde=a("p"),Txo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Mxo=l(),La=a("p"),Exo=o("The model class to instantiate is selected based on the "),Yde=a("code"),Cxo=o("model_type"),wxo=o(` property of the config object (either
passed as an argument or loaded from `),Kde=a("code"),Axo=o("pretrained_model_name_or_path"),yxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=a("code"),Lxo=o("pretrained_model_name_or_path"),xxo=o(":"),$xo=l(),Y=a("ul"),Z1=a("li"),ece=a("strong"),kxo=o("albert"),Sxo=o(" \u2014 "),mD=a("a"),Rxo=o("AlbertForMultipleChoice"),Bxo=o(" (ALBERT model)"),Pxo=l(),eb=a("li"),oce=a("strong"),Ixo=o("bert"),qxo=o(" \u2014 "),gD=a("a"),Nxo=o("BertForMultipleChoice"),jxo=o(" (BERT model)"),Dxo=l(),ob=a("li"),rce=a("strong"),Gxo=o("big_bird"),Oxo=o(" \u2014 "),hD=a("a"),Vxo=o("BigBirdForMultipleChoice"),Xxo=o(" (BigBird model)"),zxo=l(),rb=a("li"),tce=a("strong"),Qxo=o("camembert"),Wxo=o(" \u2014 "),pD=a("a"),Hxo=o("CamembertForMultipleChoice"),Uxo=o(" (CamemBERT model)"),Jxo=l(),tb=a("li"),ace=a("strong"),Yxo=o("canine"),Kxo=o(" \u2014 "),uD=a("a"),Zxo=o("CanineForMultipleChoice"),e9o=o(" (Canine model)"),o9o=l(),ab=a("li"),nce=a("strong"),r9o=o("convbert"),t9o=o(" \u2014 "),_D=a("a"),a9o=o("ConvBertForMultipleChoice"),n9o=o(" (ConvBERT model)"),s9o=l(),nb=a("li"),sce=a("strong"),l9o=o("data2vec-text"),i9o=o(" \u2014 "),bD=a("a"),d9o=o("Data2VecTextForMultipleChoice"),c9o=o(" (Data2VecText model)"),f9o=l(),sb=a("li"),lce=a("strong"),m9o=o("distilbert"),g9o=o(" \u2014 "),vD=a("a"),h9o=o("DistilBertForMultipleChoice"),p9o=o(" (DistilBERT model)"),u9o=l(),lb=a("li"),ice=a("strong"),_9o=o("electra"),b9o=o(" \u2014 "),FD=a("a"),v9o=o("ElectraForMultipleChoice"),F9o=o(" (ELECTRA model)"),T9o=l(),ib=a("li"),dce=a("strong"),M9o=o("flaubert"),E9o=o(" \u2014 "),TD=a("a"),C9o=o("FlaubertForMultipleChoice"),w9o=o(" (FlauBERT model)"),A9o=l(),db=a("li"),cce=a("strong"),y9o=o("fnet"),L9o=o(" \u2014 "),MD=a("a"),x9o=o("FNetForMultipleChoice"),$9o=o(" (FNet model)"),k9o=l(),cb=a("li"),fce=a("strong"),S9o=o("funnel"),R9o=o(" \u2014 "),ED=a("a"),B9o=o("FunnelForMultipleChoice"),P9o=o(" (Funnel Transformer model)"),I9o=l(),fb=a("li"),mce=a("strong"),q9o=o("ibert"),N9o=o(" \u2014 "),CD=a("a"),j9o=o("IBertForMultipleChoice"),D9o=o(" (I-BERT model)"),G9o=l(),mb=a("li"),gce=a("strong"),O9o=o("longformer"),V9o=o(" \u2014 "),wD=a("a"),X9o=o("LongformerForMultipleChoice"),z9o=o(" (Longformer model)"),Q9o=l(),gb=a("li"),hce=a("strong"),W9o=o("megatron-bert"),H9o=o(" \u2014 "),AD=a("a"),U9o=o("MegatronBertForMultipleChoice"),J9o=o(" (MegatronBert model)"),Y9o=l(),hb=a("li"),pce=a("strong"),K9o=o("mobilebert"),Z9o=o(" \u2014 "),yD=a("a"),e$o=o("MobileBertForMultipleChoice"),o$o=o(" (MobileBERT model)"),r$o=l(),pb=a("li"),uce=a("strong"),t$o=o("mpnet"),a$o=o(" \u2014 "),LD=a("a"),n$o=o("MPNetForMultipleChoice"),s$o=o(" (MPNet model)"),l$o=l(),ub=a("li"),_ce=a("strong"),i$o=o("nystromformer"),d$o=o(" \u2014 "),xD=a("a"),c$o=o("NystromformerForMultipleChoice"),f$o=o(" (Nystromformer model)"),m$o=l(),_b=a("li"),bce=a("strong"),g$o=o("qdqbert"),h$o=o(" \u2014 "),$D=a("a"),p$o=o("QDQBertForMultipleChoice"),u$o=o(" (QDQBert model)"),_$o=l(),bb=a("li"),vce=a("strong"),b$o=o("rembert"),v$o=o(" \u2014 "),kD=a("a"),F$o=o("RemBertForMultipleChoice"),T$o=o(" (RemBERT model)"),M$o=l(),vb=a("li"),Fce=a("strong"),E$o=o("roberta"),C$o=o(" \u2014 "),SD=a("a"),w$o=o("RobertaForMultipleChoice"),A$o=o(" (RoBERTa model)"),y$o=l(),Fb=a("li"),Tce=a("strong"),L$o=o("roformer"),x$o=o(" \u2014 "),RD=a("a"),$$o=o("RoFormerForMultipleChoice"),k$o=o(" (RoFormer model)"),S$o=l(),Tb=a("li"),Mce=a("strong"),R$o=o("squeezebert"),B$o=o(" \u2014 "),BD=a("a"),P$o=o("SqueezeBertForMultipleChoice"),I$o=o(" (SqueezeBERT model)"),q$o=l(),Mb=a("li"),Ece=a("strong"),N$o=o("xlm"),j$o=o(" \u2014 "),PD=a("a"),D$o=o("XLMForMultipleChoice"),G$o=o(" (XLM model)"),O$o=l(),Eb=a("li"),Cce=a("strong"),V$o=o("xlm-roberta"),X$o=o(" \u2014 "),ID=a("a"),z$o=o("XLMRobertaForMultipleChoice"),Q$o=o(" (XLM-RoBERTa model)"),W$o=l(),Cb=a("li"),wce=a("strong"),H$o=o("xlm-roberta-xl"),U$o=o(" \u2014 "),qD=a("a"),J$o=o("XLMRobertaXLForMultipleChoice"),Y$o=o(" (XLM-RoBERTa-XL model)"),K$o=l(),wb=a("li"),Ace=a("strong"),Z$o=o("xlnet"),eko=o(" \u2014 "),ND=a("a"),oko=o("XLNetForMultipleChoice"),rko=o(" (XLNet model)"),tko=l(),Ab=a("li"),yce=a("strong"),ako=o("yoso"),nko=o(" \u2014 "),jD=a("a"),sko=o("YosoForMultipleChoice"),lko=o(" (YOSO model)"),iko=l(),yb=a("p"),dko=o("The model is set in evaluation mode by default using "),Lce=a("code"),cko=o("model.eval()"),fko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),mko=o("model.train()"),gko=l(),F(Lb.$$.fragment),uBe=l(),Ii=a("h2"),xb=a("a"),$ce=a("span"),F(Cy.$$.fragment),hko=l(),kce=a("span"),pko=o("AutoModelForNextSentencePrediction"),_Be=l(),Ro=a("div"),F(wy.$$.fragment),uko=l(),qi=a("p"),_ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DD=a("a"),bko=o("from_pretrained()"),vko=o(" class method or the "),GD=a("a"),Fko=o("from_config()"),Tko=o(` class
method.`),Mko=l(),Ay=a("p"),Eko=o("This class cannot be instantiated directly using "),Sce=a("code"),Cko=o("__init__()"),wko=o(" (throws an error)."),Ako=l(),nt=a("div"),F(yy.$$.fragment),yko=l(),Rce=a("p"),Lko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xko=l(),Ni=a("p"),$ko=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),kko=o("not"),Sko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),Rko=o("from_pretrained()"),Bko=o(" to load the model weights."),Pko=l(),F($b.$$.fragment),Iko=l(),eo=a("div"),F(Ly.$$.fragment),qko=l(),Pce=a("p"),Nko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jko=l(),xa=a("p"),Dko=o("The model class to instantiate is selected based on the "),Ice=a("code"),Gko=o("model_type"),Oko=o(` property of the config object (either
passed as an argument or loaded from `),qce=a("code"),Vko=o("pretrained_model_name_or_path"),Xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=a("code"),zko=o("pretrained_model_name_or_path"),Qko=o(":"),Wko=l(),Wr=a("ul"),kb=a("li"),jce=a("strong"),Hko=o("bert"),Uko=o(" \u2014 "),VD=a("a"),Jko=o("BertForNextSentencePrediction"),Yko=o(" (BERT model)"),Kko=l(),Sb=a("li"),Dce=a("strong"),Zko=o("fnet"),eSo=o(" \u2014 "),XD=a("a"),oSo=o("FNetForNextSentencePrediction"),rSo=o(" (FNet model)"),tSo=l(),Rb=a("li"),Gce=a("strong"),aSo=o("megatron-bert"),nSo=o(" \u2014 "),zD=a("a"),sSo=o("MegatronBertForNextSentencePrediction"),lSo=o(" (MegatronBert model)"),iSo=l(),Bb=a("li"),Oce=a("strong"),dSo=o("mobilebert"),cSo=o(" \u2014 "),QD=a("a"),fSo=o("MobileBertForNextSentencePrediction"),mSo=o(" (MobileBERT model)"),gSo=l(),Pb=a("li"),Vce=a("strong"),hSo=o("qdqbert"),pSo=o(" \u2014 "),WD=a("a"),uSo=o("QDQBertForNextSentencePrediction"),_So=o(" (QDQBert model)"),bSo=l(),Ib=a("p"),vSo=o("The model is set in evaluation mode by default using "),Xce=a("code"),FSo=o("model.eval()"),TSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=a("code"),MSo=o("model.train()"),ESo=l(),F(qb.$$.fragment),bBe=l(),ji=a("h2"),Nb=a("a"),Qce=a("span"),F(xy.$$.fragment),CSo=l(),Wce=a("span"),wSo=o("AutoModelForTokenClassification"),vBe=l(),Bo=a("div"),F($y.$$.fragment),ASo=l(),Di=a("p"),ySo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HD=a("a"),LSo=o("from_pretrained()"),xSo=o(" class method or the "),UD=a("a"),$So=o("from_config()"),kSo=o(` class
method.`),SSo=l(),ky=a("p"),RSo=o("This class cannot be instantiated directly using "),Hce=a("code"),BSo=o("__init__()"),PSo=o(" (throws an error)."),ISo=l(),st=a("div"),F(Sy.$$.fragment),qSo=l(),Uce=a("p"),NSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jSo=l(),Gi=a("p"),DSo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),GSo=o("not"),OSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=a("a"),VSo=o("from_pretrained()"),XSo=o(" to load the model weights."),zSo=l(),F(jb.$$.fragment),QSo=l(),oo=a("div"),F(Ry.$$.fragment),WSo=l(),Yce=a("p"),HSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),USo=l(),$a=a("p"),JSo=o("The model class to instantiate is selected based on the "),Kce=a("code"),YSo=o("model_type"),KSo=o(` property of the config object (either
passed as an argument or loaded from `),Zce=a("code"),ZSo=o("pretrained_model_name_or_path"),eRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=a("code"),oRo=o("pretrained_model_name_or_path"),rRo=o(":"),tRo=l(),U=a("ul"),Db=a("li"),ofe=a("strong"),aRo=o("albert"),nRo=o(" \u2014 "),YD=a("a"),sRo=o("AlbertForTokenClassification"),lRo=o(" (ALBERT model)"),iRo=l(),Gb=a("li"),rfe=a("strong"),dRo=o("bert"),cRo=o(" \u2014 "),KD=a("a"),fRo=o("BertForTokenClassification"),mRo=o(" (BERT model)"),gRo=l(),Ob=a("li"),tfe=a("strong"),hRo=o("big_bird"),pRo=o(" \u2014 "),ZD=a("a"),uRo=o("BigBirdForTokenClassification"),_Ro=o(" (BigBird model)"),bRo=l(),Vb=a("li"),afe=a("strong"),vRo=o("camembert"),FRo=o(" \u2014 "),eG=a("a"),TRo=o("CamembertForTokenClassification"),MRo=o(" (CamemBERT model)"),ERo=l(),Xb=a("li"),nfe=a("strong"),CRo=o("canine"),wRo=o(" \u2014 "),oG=a("a"),ARo=o("CanineForTokenClassification"),yRo=o(" (Canine model)"),LRo=l(),zb=a("li"),sfe=a("strong"),xRo=o("convbert"),$Ro=o(" \u2014 "),rG=a("a"),kRo=o("ConvBertForTokenClassification"),SRo=o(" (ConvBERT model)"),RRo=l(),Qb=a("li"),lfe=a("strong"),BRo=o("data2vec-text"),PRo=o(" \u2014 "),tG=a("a"),IRo=o("Data2VecTextForTokenClassification"),qRo=o(" (Data2VecText model)"),NRo=l(),Wb=a("li"),ife=a("strong"),jRo=o("deberta"),DRo=o(" \u2014 "),aG=a("a"),GRo=o("DebertaForTokenClassification"),ORo=o(" (DeBERTa model)"),VRo=l(),Hb=a("li"),dfe=a("strong"),XRo=o("deberta-v2"),zRo=o(" \u2014 "),nG=a("a"),QRo=o("DebertaV2ForTokenClassification"),WRo=o(" (DeBERTa-v2 model)"),HRo=l(),Ub=a("li"),cfe=a("strong"),URo=o("distilbert"),JRo=o(" \u2014 "),sG=a("a"),YRo=o("DistilBertForTokenClassification"),KRo=o(" (DistilBERT model)"),ZRo=l(),Jb=a("li"),ffe=a("strong"),eBo=o("electra"),oBo=o(" \u2014 "),lG=a("a"),rBo=o("ElectraForTokenClassification"),tBo=o(" (ELECTRA model)"),aBo=l(),Yb=a("li"),mfe=a("strong"),nBo=o("flaubert"),sBo=o(" \u2014 "),iG=a("a"),lBo=o("FlaubertForTokenClassification"),iBo=o(" (FlauBERT model)"),dBo=l(),Kb=a("li"),gfe=a("strong"),cBo=o("fnet"),fBo=o(" \u2014 "),dG=a("a"),mBo=o("FNetForTokenClassification"),gBo=o(" (FNet model)"),hBo=l(),Zb=a("li"),hfe=a("strong"),pBo=o("funnel"),uBo=o(" \u2014 "),cG=a("a"),_Bo=o("FunnelForTokenClassification"),bBo=o(" (Funnel Transformer model)"),vBo=l(),e4=a("li"),pfe=a("strong"),FBo=o("gpt2"),TBo=o(" \u2014 "),fG=a("a"),MBo=o("GPT2ForTokenClassification"),EBo=o(" (OpenAI GPT-2 model)"),CBo=l(),o4=a("li"),ufe=a("strong"),wBo=o("ibert"),ABo=o(" \u2014 "),mG=a("a"),yBo=o("IBertForTokenClassification"),LBo=o(" (I-BERT model)"),xBo=l(),r4=a("li"),_fe=a("strong"),$Bo=o("layoutlm"),kBo=o(" \u2014 "),gG=a("a"),SBo=o("LayoutLMForTokenClassification"),RBo=o(" (LayoutLM model)"),BBo=l(),t4=a("li"),bfe=a("strong"),PBo=o("layoutlmv2"),IBo=o(" \u2014 "),hG=a("a"),qBo=o("LayoutLMv2ForTokenClassification"),NBo=o(" (LayoutLMv2 model)"),jBo=l(),a4=a("li"),vfe=a("strong"),DBo=o("longformer"),GBo=o(" \u2014 "),pG=a("a"),OBo=o("LongformerForTokenClassification"),VBo=o(" (Longformer model)"),XBo=l(),n4=a("li"),Ffe=a("strong"),zBo=o("megatron-bert"),QBo=o(" \u2014 "),uG=a("a"),WBo=o("MegatronBertForTokenClassification"),HBo=o(" (MegatronBert model)"),UBo=l(),s4=a("li"),Tfe=a("strong"),JBo=o("mobilebert"),YBo=o(" \u2014 "),_G=a("a"),KBo=o("MobileBertForTokenClassification"),ZBo=o(" (MobileBERT model)"),ePo=l(),l4=a("li"),Mfe=a("strong"),oPo=o("mpnet"),rPo=o(" \u2014 "),bG=a("a"),tPo=o("MPNetForTokenClassification"),aPo=o(" (MPNet model)"),nPo=l(),i4=a("li"),Efe=a("strong"),sPo=o("nystromformer"),lPo=o(" \u2014 "),vG=a("a"),iPo=o("NystromformerForTokenClassification"),dPo=o(" (Nystromformer model)"),cPo=l(),d4=a("li"),Cfe=a("strong"),fPo=o("qdqbert"),mPo=o(" \u2014 "),FG=a("a"),gPo=o("QDQBertForTokenClassification"),hPo=o(" (QDQBert model)"),pPo=l(),c4=a("li"),wfe=a("strong"),uPo=o("rembert"),_Po=o(" \u2014 "),TG=a("a"),bPo=o("RemBertForTokenClassification"),vPo=o(" (RemBERT model)"),FPo=l(),f4=a("li"),Afe=a("strong"),TPo=o("roberta"),MPo=o(" \u2014 "),MG=a("a"),EPo=o("RobertaForTokenClassification"),CPo=o(" (RoBERTa model)"),wPo=l(),m4=a("li"),yfe=a("strong"),APo=o("roformer"),yPo=o(" \u2014 "),EG=a("a"),LPo=o("RoFormerForTokenClassification"),xPo=o(" (RoFormer model)"),$Po=l(),g4=a("li"),Lfe=a("strong"),kPo=o("squeezebert"),SPo=o(" \u2014 "),CG=a("a"),RPo=o("SqueezeBertForTokenClassification"),BPo=o(" (SqueezeBERT model)"),PPo=l(),h4=a("li"),xfe=a("strong"),IPo=o("xlm"),qPo=o(" \u2014 "),wG=a("a"),NPo=o("XLMForTokenClassification"),jPo=o(" (XLM model)"),DPo=l(),p4=a("li"),$fe=a("strong"),GPo=o("xlm-roberta"),OPo=o(" \u2014 "),AG=a("a"),VPo=o("XLMRobertaForTokenClassification"),XPo=o(" (XLM-RoBERTa model)"),zPo=l(),u4=a("li"),kfe=a("strong"),QPo=o("xlm-roberta-xl"),WPo=o(" \u2014 "),yG=a("a"),HPo=o("XLMRobertaXLForTokenClassification"),UPo=o(" (XLM-RoBERTa-XL model)"),JPo=l(),_4=a("li"),Sfe=a("strong"),YPo=o("xlnet"),KPo=o(" \u2014 "),LG=a("a"),ZPo=o("XLNetForTokenClassification"),eIo=o(" (XLNet model)"),oIo=l(),b4=a("li"),Rfe=a("strong"),rIo=o("yoso"),tIo=o(" \u2014 "),xG=a("a"),aIo=o("YosoForTokenClassification"),nIo=o(" (YOSO model)"),sIo=l(),v4=a("p"),lIo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),iIo=o("model.eval()"),dIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),cIo=o("model.train()"),fIo=l(),F(F4.$$.fragment),FBe=l(),Oi=a("h2"),T4=a("a"),Ife=a("span"),F(By.$$.fragment),mIo=l(),qfe=a("span"),gIo=o("AutoModelForQuestionAnswering"),TBe=l(),Po=a("div"),F(Py.$$.fragment),hIo=l(),Vi=a("p"),pIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$G=a("a"),uIo=o("from_pretrained()"),_Io=o(" class method or the "),kG=a("a"),bIo=o("from_config()"),vIo=o(` class
method.`),FIo=l(),Iy=a("p"),TIo=o("This class cannot be instantiated directly using "),Nfe=a("code"),MIo=o("__init__()"),EIo=o(" (throws an error)."),CIo=l(),lt=a("div"),F(qy.$$.fragment),wIo=l(),jfe=a("p"),AIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),yIo=l(),Xi=a("p"),LIo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),xIo=o("not"),$Io=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),kIo=o("from_pretrained()"),SIo=o(" to load the model weights."),RIo=l(),F(M4.$$.fragment),BIo=l(),ro=a("div"),F(Ny.$$.fragment),PIo=l(),Gfe=a("p"),IIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qIo=l(),ka=a("p"),NIo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),jIo=o("model_type"),DIo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),GIo=o("pretrained_model_name_or_path"),OIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),VIo=o("pretrained_model_name_or_path"),XIo=o(":"),zIo=l(),O=a("ul"),E4=a("li"),zfe=a("strong"),QIo=o("albert"),WIo=o(" \u2014 "),RG=a("a"),HIo=o("AlbertForQuestionAnswering"),UIo=o(" (ALBERT model)"),JIo=l(),C4=a("li"),Qfe=a("strong"),YIo=o("bart"),KIo=o(" \u2014 "),BG=a("a"),ZIo=o("BartForQuestionAnswering"),eqo=o(" (BART model)"),oqo=l(),w4=a("li"),Wfe=a("strong"),rqo=o("bert"),tqo=o(" \u2014 "),PG=a("a"),aqo=o("BertForQuestionAnswering"),nqo=o(" (BERT model)"),sqo=l(),A4=a("li"),Hfe=a("strong"),lqo=o("big_bird"),iqo=o(" \u2014 "),IG=a("a"),dqo=o("BigBirdForQuestionAnswering"),cqo=o(" (BigBird model)"),fqo=l(),y4=a("li"),Ufe=a("strong"),mqo=o("bigbird_pegasus"),gqo=o(" \u2014 "),qG=a("a"),hqo=o("BigBirdPegasusForQuestionAnswering"),pqo=o(" (BigBirdPegasus model)"),uqo=l(),L4=a("li"),Jfe=a("strong"),_qo=o("camembert"),bqo=o(" \u2014 "),NG=a("a"),vqo=o("CamembertForQuestionAnswering"),Fqo=o(" (CamemBERT model)"),Tqo=l(),x4=a("li"),Yfe=a("strong"),Mqo=o("canine"),Eqo=o(" \u2014 "),jG=a("a"),Cqo=o("CanineForQuestionAnswering"),wqo=o(" (Canine model)"),Aqo=l(),$4=a("li"),Kfe=a("strong"),yqo=o("convbert"),Lqo=o(" \u2014 "),DG=a("a"),xqo=o("ConvBertForQuestionAnswering"),$qo=o(" (ConvBERT model)"),kqo=l(),k4=a("li"),Zfe=a("strong"),Sqo=o("data2vec-text"),Rqo=o(" \u2014 "),GG=a("a"),Bqo=o("Data2VecTextForQuestionAnswering"),Pqo=o(" (Data2VecText model)"),Iqo=l(),S4=a("li"),eme=a("strong"),qqo=o("deberta"),Nqo=o(" \u2014 "),OG=a("a"),jqo=o("DebertaForQuestionAnswering"),Dqo=o(" (DeBERTa model)"),Gqo=l(),R4=a("li"),ome=a("strong"),Oqo=o("deberta-v2"),Vqo=o(" \u2014 "),VG=a("a"),Xqo=o("DebertaV2ForQuestionAnswering"),zqo=o(" (DeBERTa-v2 model)"),Qqo=l(),B4=a("li"),rme=a("strong"),Wqo=o("distilbert"),Hqo=o(" \u2014 "),XG=a("a"),Uqo=o("DistilBertForQuestionAnswering"),Jqo=o(" (DistilBERT model)"),Yqo=l(),P4=a("li"),tme=a("strong"),Kqo=o("electra"),Zqo=o(" \u2014 "),zG=a("a"),eNo=o("ElectraForQuestionAnswering"),oNo=o(" (ELECTRA model)"),rNo=l(),I4=a("li"),ame=a("strong"),tNo=o("flaubert"),aNo=o(" \u2014 "),QG=a("a"),nNo=o("FlaubertForQuestionAnsweringSimple"),sNo=o(" (FlauBERT model)"),lNo=l(),q4=a("li"),nme=a("strong"),iNo=o("fnet"),dNo=o(" \u2014 "),WG=a("a"),cNo=o("FNetForQuestionAnswering"),fNo=o(" (FNet model)"),mNo=l(),N4=a("li"),sme=a("strong"),gNo=o("funnel"),hNo=o(" \u2014 "),HG=a("a"),pNo=o("FunnelForQuestionAnswering"),uNo=o(" (Funnel Transformer model)"),_No=l(),j4=a("li"),lme=a("strong"),bNo=o("gptj"),vNo=o(" \u2014 "),UG=a("a"),FNo=o("GPTJForQuestionAnswering"),TNo=o(" (GPT-J model)"),MNo=l(),D4=a("li"),ime=a("strong"),ENo=o("ibert"),CNo=o(" \u2014 "),JG=a("a"),wNo=o("IBertForQuestionAnswering"),ANo=o(" (I-BERT model)"),yNo=l(),G4=a("li"),dme=a("strong"),LNo=o("layoutlmv2"),xNo=o(" \u2014 "),YG=a("a"),$No=o("LayoutLMv2ForQuestionAnswering"),kNo=o(" (LayoutLMv2 model)"),SNo=l(),O4=a("li"),cme=a("strong"),RNo=o("led"),BNo=o(" \u2014 "),KG=a("a"),PNo=o("LEDForQuestionAnswering"),INo=o(" (LED model)"),qNo=l(),V4=a("li"),fme=a("strong"),NNo=o("longformer"),jNo=o(" \u2014 "),ZG=a("a"),DNo=o("LongformerForQuestionAnswering"),GNo=o(" (Longformer model)"),ONo=l(),X4=a("li"),mme=a("strong"),VNo=o("lxmert"),XNo=o(" \u2014 "),eO=a("a"),zNo=o("LxmertForQuestionAnswering"),QNo=o(" (LXMERT model)"),WNo=l(),z4=a("li"),gme=a("strong"),HNo=o("mbart"),UNo=o(" \u2014 "),oO=a("a"),JNo=o("MBartForQuestionAnswering"),YNo=o(" (mBART model)"),KNo=l(),Q4=a("li"),hme=a("strong"),ZNo=o("megatron-bert"),ejo=o(" \u2014 "),rO=a("a"),ojo=o("MegatronBertForQuestionAnswering"),rjo=o(" (MegatronBert model)"),tjo=l(),W4=a("li"),pme=a("strong"),ajo=o("mobilebert"),njo=o(" \u2014 "),tO=a("a"),sjo=o("MobileBertForQuestionAnswering"),ljo=o(" (MobileBERT model)"),ijo=l(),H4=a("li"),ume=a("strong"),djo=o("mpnet"),cjo=o(" \u2014 "),aO=a("a"),fjo=o("MPNetForQuestionAnswering"),mjo=o(" (MPNet model)"),gjo=l(),U4=a("li"),_me=a("strong"),hjo=o("nystromformer"),pjo=o(" \u2014 "),nO=a("a"),ujo=o("NystromformerForQuestionAnswering"),_jo=o(" (Nystromformer model)"),bjo=l(),J4=a("li"),bme=a("strong"),vjo=o("qdqbert"),Fjo=o(" \u2014 "),sO=a("a"),Tjo=o("QDQBertForQuestionAnswering"),Mjo=o(" (QDQBert model)"),Ejo=l(),Y4=a("li"),vme=a("strong"),Cjo=o("reformer"),wjo=o(" \u2014 "),lO=a("a"),Ajo=o("ReformerForQuestionAnswering"),yjo=o(" (Reformer model)"),Ljo=l(),K4=a("li"),Fme=a("strong"),xjo=o("rembert"),$jo=o(" \u2014 "),iO=a("a"),kjo=o("RemBertForQuestionAnswering"),Sjo=o(" (RemBERT model)"),Rjo=l(),Z4=a("li"),Tme=a("strong"),Bjo=o("roberta"),Pjo=o(" \u2014 "),dO=a("a"),Ijo=o("RobertaForQuestionAnswering"),qjo=o(" (RoBERTa model)"),Njo=l(),ev=a("li"),Mme=a("strong"),jjo=o("roformer"),Djo=o(" \u2014 "),cO=a("a"),Gjo=o("RoFormerForQuestionAnswering"),Ojo=o(" (RoFormer model)"),Vjo=l(),ov=a("li"),Eme=a("strong"),Xjo=o("splinter"),zjo=o(" \u2014 "),fO=a("a"),Qjo=o("SplinterForQuestionAnswering"),Wjo=o(" (Splinter model)"),Hjo=l(),rv=a("li"),Cme=a("strong"),Ujo=o("squeezebert"),Jjo=o(" \u2014 "),mO=a("a"),Yjo=o("SqueezeBertForQuestionAnswering"),Kjo=o(" (SqueezeBERT model)"),Zjo=l(),tv=a("li"),wme=a("strong"),eDo=o("xlm"),oDo=o(" \u2014 "),gO=a("a"),rDo=o("XLMForQuestionAnsweringSimple"),tDo=o(" (XLM model)"),aDo=l(),av=a("li"),Ame=a("strong"),nDo=o("xlm-roberta"),sDo=o(" \u2014 "),hO=a("a"),lDo=o("XLMRobertaForQuestionAnswering"),iDo=o(" (XLM-RoBERTa model)"),dDo=l(),nv=a("li"),yme=a("strong"),cDo=o("xlm-roberta-xl"),fDo=o(" \u2014 "),pO=a("a"),mDo=o("XLMRobertaXLForQuestionAnswering"),gDo=o(" (XLM-RoBERTa-XL model)"),hDo=l(),sv=a("li"),Lme=a("strong"),pDo=o("xlnet"),uDo=o(" \u2014 "),uO=a("a"),_Do=o("XLNetForQuestionAnsweringSimple"),bDo=o(" (XLNet model)"),vDo=l(),lv=a("li"),xme=a("strong"),FDo=o("yoso"),TDo=o(" \u2014 "),_O=a("a"),MDo=o("YosoForQuestionAnswering"),EDo=o(" (YOSO model)"),CDo=l(),iv=a("p"),wDo=o("The model is set in evaluation mode by default using "),$me=a("code"),ADo=o("model.eval()"),yDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),LDo=o("model.train()"),xDo=l(),F(dv.$$.fragment),MBe=l(),zi=a("h2"),cv=a("a"),Sme=a("span"),F(jy.$$.fragment),$Do=l(),Rme=a("span"),kDo=o("AutoModelForTableQuestionAnswering"),EBe=l(),Io=a("div"),F(Dy.$$.fragment),SDo=l(),Qi=a("p"),RDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bO=a("a"),BDo=o("from_pretrained()"),PDo=o(" class method or the "),vO=a("a"),IDo=o("from_config()"),qDo=o(` class
method.`),NDo=l(),Gy=a("p"),jDo=o("This class cannot be instantiated directly using "),Bme=a("code"),DDo=o("__init__()"),GDo=o(" (throws an error)."),ODo=l(),it=a("div"),F(Oy.$$.fragment),VDo=l(),Pme=a("p"),XDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zDo=l(),Wi=a("p"),QDo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),WDo=o("not"),HDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),UDo=o("from_pretrained()"),JDo=o(" to load the model weights."),YDo=l(),F(fv.$$.fragment),KDo=l(),to=a("div"),F(Vy.$$.fragment),ZDo=l(),qme=a("p"),eGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),oGo=l(),Sa=a("p"),rGo=o("The model class to instantiate is selected based on the "),Nme=a("code"),tGo=o("model_type"),aGo=o(` property of the config object (either
passed as an argument or loaded from `),jme=a("code"),nGo=o("pretrained_model_name_or_path"),sGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=a("code"),lGo=o("pretrained_model_name_or_path"),iGo=o(":"),dGo=l(),Gme=a("ul"),mv=a("li"),Ome=a("strong"),cGo=o("tapas"),fGo=o(" \u2014 "),TO=a("a"),mGo=o("TapasForQuestionAnswering"),gGo=o(" (TAPAS model)"),hGo=l(),gv=a("p"),pGo=o("The model is set in evaluation mode by default using "),Vme=a("code"),uGo=o("model.eval()"),_Go=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=a("code"),bGo=o("model.train()"),vGo=l(),F(hv.$$.fragment),CBe=l(),Hi=a("h2"),pv=a("a"),zme=a("span"),F(Xy.$$.fragment),FGo=l(),Qme=a("span"),TGo=o("AutoModelForImageClassification"),wBe=l(),qo=a("div"),F(zy.$$.fragment),MGo=l(),Ui=a("p"),EGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MO=a("a"),CGo=o("from_pretrained()"),wGo=o(" class method or the "),EO=a("a"),AGo=o("from_config()"),yGo=o(` class
method.`),LGo=l(),Qy=a("p"),xGo=o("This class cannot be instantiated directly using "),Wme=a("code"),$Go=o("__init__()"),kGo=o(" (throws an error)."),SGo=l(),dt=a("div"),F(Wy.$$.fragment),RGo=l(),Hme=a("p"),BGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PGo=l(),Ji=a("p"),IGo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),qGo=o("not"),NGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=a("a"),jGo=o("from_pretrained()"),DGo=o(" to load the model weights."),GGo=l(),F(uv.$$.fragment),OGo=l(),ao=a("div"),F(Hy.$$.fragment),VGo=l(),Jme=a("p"),XGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zGo=l(),Ra=a("p"),QGo=o("The model class to instantiate is selected based on the "),Yme=a("code"),WGo=o("model_type"),HGo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),UGo=o("pretrained_model_name_or_path"),JGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),YGo=o("pretrained_model_name_or_path"),KGo=o(":"),ZGo=l(),ve=a("ul"),_v=a("li"),ege=a("strong"),eOo=o("beit"),oOo=o(" \u2014 "),wO=a("a"),rOo=o("BeitForImageClassification"),tOo=o(" (BEiT model)"),aOo=l(),bv=a("li"),oge=a("strong"),nOo=o("convnext"),sOo=o(" \u2014 "),AO=a("a"),lOo=o("ConvNextForImageClassification"),iOo=o(" (ConvNext model)"),dOo=l(),vv=a("li"),rge=a("strong"),cOo=o("data2vec-vision"),fOo=o(" \u2014 "),yO=a("a"),mOo=o("Data2VecVisionForImageClassification"),gOo=o(" (Data2VecVision model)"),hOo=l(),Ls=a("li"),tge=a("strong"),pOo=o("deit"),uOo=o(" \u2014 "),LO=a("a"),_Oo=o("DeiTForImageClassification"),bOo=o(" or "),xO=a("a"),vOo=o("DeiTForImageClassificationWithTeacher"),FOo=o(" (DeiT model)"),TOo=l(),Fv=a("li"),age=a("strong"),MOo=o("imagegpt"),EOo=o(" \u2014 "),$O=a("a"),COo=o("ImageGPTForImageClassification"),wOo=o(" (ImageGPT model)"),AOo=l(),ct=a("li"),nge=a("strong"),yOo=o("perceiver"),LOo=o(" \u2014 "),kO=a("a"),xOo=o("PerceiverForImageClassificationLearned"),$Oo=o(" or "),SO=a("a"),kOo=o("PerceiverForImageClassificationFourier"),SOo=o(" or "),RO=a("a"),ROo=o("PerceiverForImageClassificationConvProcessing"),BOo=o(" (Perceiver model)"),POo=l(),Tv=a("li"),sge=a("strong"),IOo=o("poolformer"),qOo=o(" \u2014 "),BO=a("a"),NOo=o("PoolFormerForImageClassification"),jOo=o(" (PoolFormer model)"),DOo=l(),Mv=a("li"),lge=a("strong"),GOo=o("regnet"),OOo=o(" \u2014 "),PO=a("a"),VOo=o("RegNetForImageClassification"),XOo=o(" (RegNet model)"),zOo=l(),Ev=a("li"),ige=a("strong"),QOo=o("resnet"),WOo=o(" \u2014 "),IO=a("a"),HOo=o("ResNetForImageClassification"),UOo=o(" (ResNet model)"),JOo=l(),Cv=a("li"),dge=a("strong"),YOo=o("segformer"),KOo=o(" \u2014 "),qO=a("a"),ZOo=o("SegformerForImageClassification"),eVo=o(" (SegFormer model)"),oVo=l(),wv=a("li"),cge=a("strong"),rVo=o("swin"),tVo=o(" \u2014 "),NO=a("a"),aVo=o("SwinForImageClassification"),nVo=o(" (Swin model)"),sVo=l(),Av=a("li"),fge=a("strong"),lVo=o("van"),iVo=o(" \u2014 "),jO=a("a"),dVo=o("VanForImageClassification"),cVo=o(" (VAN model)"),fVo=l(),yv=a("li"),mge=a("strong"),mVo=o("vit"),gVo=o(" \u2014 "),DO=a("a"),hVo=o("ViTForImageClassification"),pVo=o(" (ViT model)"),uVo=l(),Lv=a("p"),_Vo=o("The model is set in evaluation mode by default using "),gge=a("code"),bVo=o("model.eval()"),vVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),FVo=o("model.train()"),TVo=l(),F(xv.$$.fragment),ABe=l(),Yi=a("h2"),$v=a("a"),pge=a("span"),F(Uy.$$.fragment),MVo=l(),uge=a("span"),EVo=o("AutoModelForVision2Seq"),yBe=l(),No=a("div"),F(Jy.$$.fragment),CVo=l(),Ki=a("p"),wVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GO=a("a"),AVo=o("from_pretrained()"),yVo=o(" class method or the "),OO=a("a"),LVo=o("from_config()"),xVo=o(` class
method.`),$Vo=l(),Yy=a("p"),kVo=o("This class cannot be instantiated directly using "),_ge=a("code"),SVo=o("__init__()"),RVo=o(" (throws an error)."),BVo=l(),ft=a("div"),F(Ky.$$.fragment),PVo=l(),bge=a("p"),IVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qVo=l(),Zi=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),jVo=o("not"),DVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),GVo=o("from_pretrained()"),OVo=o(" to load the model weights."),VVo=l(),F(kv.$$.fragment),XVo=l(),no=a("div"),F(Zy.$$.fragment),zVo=l(),Fge=a("p"),QVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WVo=l(),Ba=a("p"),HVo=o("The model class to instantiate is selected based on the "),Tge=a("code"),UVo=o("model_type"),JVo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),YVo=o("pretrained_model_name_or_path"),KVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),ZVo=o("pretrained_model_name_or_path"),eXo=o(":"),oXo=l(),Cge=a("ul"),Sv=a("li"),wge=a("strong"),rXo=o("vision-encoder-decoder"),tXo=o(" \u2014 "),XO=a("a"),aXo=o("VisionEncoderDecoderModel"),nXo=o(" (Vision Encoder decoder model)"),sXo=l(),Rv=a("p"),lXo=o("The model is set in evaluation mode by default using "),Age=a("code"),iXo=o("model.eval()"),dXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),cXo=o("model.train()"),fXo=l(),F(Bv.$$.fragment),LBe=l(),ed=a("h2"),Pv=a("a"),Lge=a("span"),F(eL.$$.fragment),mXo=l(),xge=a("span"),gXo=o("AutoModelForAudioClassification"),xBe=l(),jo=a("div"),F(oL.$$.fragment),hXo=l(),od=a("p"),pXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zO=a("a"),uXo=o("from_pretrained()"),_Xo=o(" class method or the "),QO=a("a"),bXo=o("from_config()"),vXo=o(` class
method.`),FXo=l(),rL=a("p"),TXo=o("This class cannot be instantiated directly using "),$ge=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),CXo=l(),mt=a("div"),F(tL.$$.fragment),wXo=l(),kge=a("p"),AXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yXo=l(),rd=a("p"),LXo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),xXo=o("not"),$Xo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),kXo=o("from_pretrained()"),SXo=o(" to load the model weights."),RXo=l(),F(Iv.$$.fragment),BXo=l(),so=a("div"),F(aL.$$.fragment),PXo=l(),Rge=a("p"),IXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qXo=l(),Pa=a("p"),NXo=o("The model class to instantiate is selected based on the "),Bge=a("code"),jXo=o("model_type"),DXo=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=a("code"),VXo=o("pretrained_model_name_or_path"),XXo=o(":"),zXo=l(),Ne=a("ul"),qv=a("li"),qge=a("strong"),QXo=o("data2vec-audio"),WXo=o(" \u2014 "),HO=a("a"),HXo=o("Data2VecAudioForSequenceClassification"),UXo=o(" (Data2VecAudio model)"),JXo=l(),Nv=a("li"),Nge=a("strong"),YXo=o("hubert"),KXo=o(" \u2014 "),UO=a("a"),ZXo=o("HubertForSequenceClassification"),ezo=o(" (Hubert model)"),ozo=l(),jv=a("li"),jge=a("strong"),rzo=o("sew"),tzo=o(" \u2014 "),JO=a("a"),azo=o("SEWForSequenceClassification"),nzo=o(" (SEW model)"),szo=l(),Dv=a("li"),Dge=a("strong"),lzo=o("sew-d"),izo=o(" \u2014 "),YO=a("a"),dzo=o("SEWDForSequenceClassification"),czo=o(" (SEW-D model)"),fzo=l(),Gv=a("li"),Gge=a("strong"),mzo=o("unispeech"),gzo=o(" \u2014 "),KO=a("a"),hzo=o("UniSpeechForSequenceClassification"),pzo=o(" (UniSpeech model)"),uzo=l(),Ov=a("li"),Oge=a("strong"),_zo=o("unispeech-sat"),bzo=o(" \u2014 "),ZO=a("a"),vzo=o("UniSpeechSatForSequenceClassification"),Fzo=o(" (UniSpeechSat model)"),Tzo=l(),Vv=a("li"),Vge=a("strong"),Mzo=o("wav2vec2"),Ezo=o(" \u2014 "),eV=a("a"),Czo=o("Wav2Vec2ForSequenceClassification"),wzo=o(" (Wav2Vec2 model)"),Azo=l(),Xv=a("li"),Xge=a("strong"),yzo=o("wavlm"),Lzo=o(" \u2014 "),oV=a("a"),xzo=o("WavLMForSequenceClassification"),$zo=o(" (WavLM model)"),kzo=l(),zv=a("p"),Szo=o("The model is set in evaluation mode by default using "),zge=a("code"),Rzo=o("model.eval()"),Bzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),Pzo=o("model.train()"),Izo=l(),F(Qv.$$.fragment),$Be=l(),td=a("h2"),Wv=a("a"),Wge=a("span"),F(nL.$$.fragment),qzo=l(),Hge=a("span"),Nzo=o("AutoModelForAudioFrameClassification"),kBe=l(),Do=a("div"),F(sL.$$.fragment),jzo=l(),ad=a("p"),Dzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rV=a("a"),Gzo=o("from_pretrained()"),Ozo=o(" class method or the "),tV=a("a"),Vzo=o("from_config()"),Xzo=o(` class
method.`),zzo=l(),lL=a("p"),Qzo=o("This class cannot be instantiated directly using "),Uge=a("code"),Wzo=o("__init__()"),Hzo=o(" (throws an error)."),Uzo=l(),gt=a("div"),F(iL.$$.fragment),Jzo=l(),Jge=a("p"),Yzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Kzo=l(),nd=a("p"),Zzo=o(`Note:
Loading a model from its configuration file does `),Yge=a("strong"),eQo=o("not"),oQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),rQo=o("from_pretrained()"),tQo=o(" to load the model weights."),aQo=l(),F(Hv.$$.fragment),nQo=l(),lo=a("div"),F(dL.$$.fragment),sQo=l(),Kge=a("p"),lQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),iQo=l(),Ia=a("p"),dQo=o("The model class to instantiate is selected based on the "),Zge=a("code"),cQo=o("model_type"),fQo=o(` property of the config object (either
passed as an argument or loaded from `),ehe=a("code"),mQo=o("pretrained_model_name_or_path"),gQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=a("code"),hQo=o("pretrained_model_name_or_path"),pQo=o(":"),uQo=l(),qa=a("ul"),Uv=a("li"),rhe=a("strong"),_Qo=o("data2vec-audio"),bQo=o(" \u2014 "),nV=a("a"),vQo=o("Data2VecAudioForAudioFrameClassification"),FQo=o(" (Data2VecAudio model)"),TQo=l(),Jv=a("li"),the=a("strong"),MQo=o("unispeech-sat"),EQo=o(" \u2014 "),sV=a("a"),CQo=o("UniSpeechSatForAudioFrameClassification"),wQo=o(" (UniSpeechSat model)"),AQo=l(),Yv=a("li"),ahe=a("strong"),yQo=o("wav2vec2"),LQo=o(" \u2014 "),lV=a("a"),xQo=o("Wav2Vec2ForAudioFrameClassification"),$Qo=o(" (Wav2Vec2 model)"),kQo=l(),Kv=a("li"),nhe=a("strong"),SQo=o("wavlm"),RQo=o(" \u2014 "),iV=a("a"),BQo=o("WavLMForAudioFrameClassification"),PQo=o(" (WavLM model)"),IQo=l(),Zv=a("p"),qQo=o("The model is set in evaluation mode by default using "),she=a("code"),NQo=o("model.eval()"),jQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),DQo=o("model.train()"),GQo=l(),F(eF.$$.fragment),SBe=l(),sd=a("h2"),oF=a("a"),ihe=a("span"),F(cL.$$.fragment),OQo=l(),dhe=a("span"),VQo=o("AutoModelForCTC"),RBe=l(),Go=a("div"),F(fL.$$.fragment),XQo=l(),ld=a("p"),zQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dV=a("a"),QQo=o("from_pretrained()"),WQo=o(" class method or the "),cV=a("a"),HQo=o("from_config()"),UQo=o(` class
method.`),JQo=l(),mL=a("p"),YQo=o("This class cannot be instantiated directly using "),che=a("code"),KQo=o("__init__()"),ZQo=o(" (throws an error)."),eWo=l(),ht=a("div"),F(gL.$$.fragment),oWo=l(),fhe=a("p"),rWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),tWo=l(),id=a("p"),aWo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),nWo=o("not"),sWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=a("a"),lWo=o("from_pretrained()"),iWo=o(" to load the model weights."),dWo=l(),F(rF.$$.fragment),cWo=l(),io=a("div"),F(hL.$$.fragment),fWo=l(),ghe=a("p"),mWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),gWo=l(),Na=a("p"),hWo=o("The model class to instantiate is selected based on the "),hhe=a("code"),pWo=o("model_type"),uWo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),_Wo=o("pretrained_model_name_or_path"),bWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),vWo=o("pretrained_model_name_or_path"),FWo=o(":"),TWo=l(),ke=a("ul"),tF=a("li"),_he=a("strong"),MWo=o("data2vec-audio"),EWo=o(" \u2014 "),mV=a("a"),CWo=o("Data2VecAudioForCTC"),wWo=o(" (Data2VecAudio model)"),AWo=l(),aF=a("li"),bhe=a("strong"),yWo=o("hubert"),LWo=o(" \u2014 "),gV=a("a"),xWo=o("HubertForCTC"),$Wo=o(" (Hubert model)"),kWo=l(),nF=a("li"),vhe=a("strong"),SWo=o("mctc"),RWo=o(" \u2014 "),hV=a("a"),BWo=o("MCTCForCTC"),PWo=o(" (MCTC model)"),IWo=l(),sF=a("li"),Fhe=a("strong"),qWo=o("sew"),NWo=o(" \u2014 "),pV=a("a"),jWo=o("SEWForCTC"),DWo=o(" (SEW model)"),GWo=l(),lF=a("li"),The=a("strong"),OWo=o("sew-d"),VWo=o(" \u2014 "),uV=a("a"),XWo=o("SEWDForCTC"),zWo=o(" (SEW-D model)"),QWo=l(),iF=a("li"),Mhe=a("strong"),WWo=o("unispeech"),HWo=o(" \u2014 "),_V=a("a"),UWo=o("UniSpeechForCTC"),JWo=o(" (UniSpeech model)"),YWo=l(),dF=a("li"),Ehe=a("strong"),KWo=o("unispeech-sat"),ZWo=o(" \u2014 "),bV=a("a"),eHo=o("UniSpeechSatForCTC"),oHo=o(" (UniSpeechSat model)"),rHo=l(),cF=a("li"),Che=a("strong"),tHo=o("wav2vec2"),aHo=o(" \u2014 "),vV=a("a"),nHo=o("Wav2Vec2ForCTC"),sHo=o(" (Wav2Vec2 model)"),lHo=l(),fF=a("li"),whe=a("strong"),iHo=o("wavlm"),dHo=o(" \u2014 "),FV=a("a"),cHo=o("WavLMForCTC"),fHo=o(" (WavLM model)"),mHo=l(),mF=a("p"),gHo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),hHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),uHo=o("model.train()"),_Ho=l(),F(gF.$$.fragment),BBe=l(),dd=a("h2"),hF=a("a"),Lhe=a("span"),F(pL.$$.fragment),bHo=l(),xhe=a("span"),vHo=o("AutoModelForSpeechSeq2Seq"),PBe=l(),Oo=a("div"),F(uL.$$.fragment),FHo=l(),cd=a("p"),THo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TV=a("a"),MHo=o("from_pretrained()"),EHo=o(" class method or the "),MV=a("a"),CHo=o("from_config()"),wHo=o(` class
method.`),AHo=l(),_L=a("p"),yHo=o("This class cannot be instantiated directly using "),$he=a("code"),LHo=o("__init__()"),xHo=o(" (throws an error)."),$Ho=l(),pt=a("div"),F(bL.$$.fragment),kHo=l(),khe=a("p"),SHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),RHo=l(),fd=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),PHo=o("not"),IHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),qHo=o("from_pretrained()"),NHo=o(" to load the model weights."),jHo=l(),F(pF.$$.fragment),DHo=l(),co=a("div"),F(vL.$$.fragment),GHo=l(),Rhe=a("p"),OHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),VHo=l(),ja=a("p"),XHo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),zHo=o("model_type"),QHo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),WHo=o("pretrained_model_name_or_path"),HHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),UHo=o("pretrained_model_name_or_path"),JHo=o(":"),YHo=l(),FL=a("ul"),uF=a("li"),qhe=a("strong"),KHo=o("speech-encoder-decoder"),ZHo=o(" \u2014 "),CV=a("a"),eUo=o("SpeechEncoderDecoderModel"),oUo=o(" (Speech Encoder decoder model)"),rUo=l(),_F=a("li"),Nhe=a("strong"),tUo=o("speech_to_text"),aUo=o(" \u2014 "),wV=a("a"),nUo=o("Speech2TextForConditionalGeneration"),sUo=o(" (Speech2Text model)"),lUo=l(),bF=a("p"),iUo=o("The model is set in evaluation mode by default using "),jhe=a("code"),dUo=o("model.eval()"),cUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),fUo=o("model.train()"),mUo=l(),F(vF.$$.fragment),IBe=l(),md=a("h2"),FF=a("a"),Ghe=a("span"),F(TL.$$.fragment),gUo=l(),Ohe=a("span"),hUo=o("AutoModelForAudioXVector"),qBe=l(),Vo=a("div"),F(ML.$$.fragment),pUo=l(),gd=a("p"),uUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AV=a("a"),_Uo=o("from_pretrained()"),bUo=o(" class method or the "),yV=a("a"),vUo=o("from_config()"),FUo=o(` class
method.`),TUo=l(),EL=a("p"),MUo=o("This class cannot be instantiated directly using "),Vhe=a("code"),EUo=o("__init__()"),CUo=o(" (throws an error)."),wUo=l(),ut=a("div"),F(CL.$$.fragment),AUo=l(),Xhe=a("p"),yUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),LUo=l(),hd=a("p"),xUo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),$Uo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=a("a"),SUo=o("from_pretrained()"),RUo=o(" to load the model weights."),BUo=l(),F(TF.$$.fragment),PUo=l(),fo=a("div"),F(wL.$$.fragment),IUo=l(),Qhe=a("p"),qUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),NUo=l(),Da=a("p"),jUo=o("The model class to instantiate is selected based on the "),Whe=a("code"),DUo=o("model_type"),GUo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),OUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),XUo=o("pretrained_model_name_or_path"),zUo=o(":"),QUo=l(),Ga=a("ul"),MF=a("li"),Jhe=a("strong"),WUo=o("data2vec-audio"),HUo=o(" \u2014 "),xV=a("a"),UUo=o("Data2VecAudioForXVector"),JUo=o(" (Data2VecAudio model)"),YUo=l(),EF=a("li"),Yhe=a("strong"),KUo=o("unispeech-sat"),ZUo=o(" \u2014 "),$V=a("a"),eJo=o("UniSpeechSatForXVector"),oJo=o(" (UniSpeechSat model)"),rJo=l(),CF=a("li"),Khe=a("strong"),tJo=o("wav2vec2"),aJo=o(" \u2014 "),kV=a("a"),nJo=o("Wav2Vec2ForXVector"),sJo=o(" (Wav2Vec2 model)"),lJo=l(),wF=a("li"),Zhe=a("strong"),iJo=o("wavlm"),dJo=o(" \u2014 "),SV=a("a"),cJo=o("WavLMForXVector"),fJo=o(" (WavLM model)"),mJo=l(),AF=a("p"),gJo=o("The model is set in evaluation mode by default using "),epe=a("code"),hJo=o("model.eval()"),pJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),uJo=o("model.train()"),_Jo=l(),F(yF.$$.fragment),NBe=l(),pd=a("h2"),LF=a("a"),rpe=a("span"),F(AL.$$.fragment),bJo=l(),tpe=a("span"),vJo=o("AutoModelForMaskedImageModeling"),jBe=l(),Xo=a("div"),F(yL.$$.fragment),FJo=l(),ud=a("p"),TJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RV=a("a"),MJo=o("from_pretrained()"),EJo=o(" class method or the "),BV=a("a"),CJo=o("from_config()"),wJo=o(` class
method.`),AJo=l(),LL=a("p"),yJo=o("This class cannot be instantiated directly using "),ape=a("code"),LJo=o("__init__()"),xJo=o(" (throws an error)."),$Jo=l(),_t=a("div"),F(xL.$$.fragment),kJo=l(),npe=a("p"),SJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),RJo=l(),_d=a("p"),BJo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),PJo=o("not"),IJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),qJo=o("from_pretrained()"),NJo=o(" to load the model weights."),jJo=l(),F(xF.$$.fragment),DJo=l(),mo=a("div"),F($L.$$.fragment),GJo=l(),lpe=a("p"),OJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),VJo=l(),Oa=a("p"),XJo=o("The model class to instantiate is selected based on the "),ipe=a("code"),zJo=o("model_type"),QJo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),WJo=o("pretrained_model_name_or_path"),HJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),UJo=o("pretrained_model_name_or_path"),JJo=o(":"),YJo=l(),bd=a("ul"),$F=a("li"),fpe=a("strong"),KJo=o("deit"),ZJo=o(" \u2014 "),IV=a("a"),eYo=o("DeiTForMaskedImageModeling"),oYo=o(" (DeiT model)"),rYo=l(),kF=a("li"),mpe=a("strong"),tYo=o("swin"),aYo=o(" \u2014 "),qV=a("a"),nYo=o("SwinForMaskedImageModeling"),sYo=o(" (Swin model)"),lYo=l(),SF=a("li"),gpe=a("strong"),iYo=o("vit"),dYo=o(" \u2014 "),NV=a("a"),cYo=o("ViTForMaskedImageModeling"),fYo=o(" (ViT model)"),mYo=l(),RF=a("p"),gYo=o("The model is set in evaluation mode by default using "),hpe=a("code"),hYo=o("model.eval()"),pYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),uYo=o("model.train()"),_Yo=l(),F(BF.$$.fragment),DBe=l(),vd=a("h2"),PF=a("a"),upe=a("span"),F(kL.$$.fragment),bYo=l(),_pe=a("span"),vYo=o("AutoModelForObjectDetection"),GBe=l(),zo=a("div"),F(SL.$$.fragment),FYo=l(),Fd=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jV=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),DV=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),RL=a("p"),yYo=o("This class cannot be instantiated directly using "),bpe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),$Yo=l(),bt=a("div"),F(BL.$$.fragment),kYo=l(),vpe=a("p"),SYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),RYo=l(),Td=a("p"),BYo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),PYo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),F(IF.$$.fragment),DYo=l(),go=a("div"),F(PL.$$.fragment),GYo=l(),Tpe=a("p"),OYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),VYo=l(),Va=a("p"),XYo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),zYo=o("model_type"),QYo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),WYo=o("pretrained_model_name_or_path"),HYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(":"),YYo=l(),wpe=a("ul"),qF=a("li"),Ape=a("strong"),KYo=o("detr"),ZYo=o(" \u2014 "),OV=a("a"),eKo=o("DetrForObjectDetection"),oKo=o(" (DETR model)"),rKo=l(),NF=a("p"),tKo=o("The model is set in evaluation mode by default using "),ype=a("code"),aKo=o("model.eval()"),nKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),sKo=o("model.train()"),lKo=l(),F(jF.$$.fragment),OBe=l(),Md=a("h2"),DF=a("a"),xpe=a("span"),F(IL.$$.fragment),iKo=l(),$pe=a("span"),dKo=o("AutoModelForImageSegmentation"),VBe=l(),Qo=a("div"),F(qL.$$.fragment),cKo=l(),Ed=a("p"),fKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VV=a("a"),mKo=o("from_pretrained()"),gKo=o(" class method or the "),XV=a("a"),hKo=o("from_config()"),pKo=o(` class
method.`),uKo=l(),NL=a("p"),_Ko=o("This class cannot be instantiated directly using "),kpe=a("code"),bKo=o("__init__()"),vKo=o(" (throws an error)."),FKo=l(),vt=a("div"),F(jL.$$.fragment),TKo=l(),Spe=a("p"),MKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),EKo=l(),Cd=a("p"),CKo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),wKo=o("not"),AKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),yKo=o("from_pretrained()"),LKo=o(" to load the model weights."),xKo=l(),F(GF.$$.fragment),$Ko=l(),ho=a("div"),F(DL.$$.fragment),kKo=l(),Bpe=a("p"),SKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),RKo=l(),Xa=a("p"),BKo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),PKo=o("model_type"),IKo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),qKo=o("pretrained_model_name_or_path"),NKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),jKo=o("pretrained_model_name_or_path"),DKo=o(":"),GKo=l(),Npe=a("ul"),OF=a("li"),jpe=a("strong"),OKo=o("detr"),VKo=o(" \u2014 "),QV=a("a"),XKo=o("DetrForSegmentation"),zKo=o(" (DETR model)"),QKo=l(),VF=a("p"),WKo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),HKo=o("model.eval()"),UKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),JKo=o("model.train()"),YKo=l(),F(XF.$$.fragment),XBe=l(),wd=a("h2"),zF=a("a"),Ope=a("span"),F(GL.$$.fragment),KKo=l(),Vpe=a("span"),ZKo=o("AutoModelForSemanticSegmentation"),zBe=l(),Wo=a("div"),F(OL.$$.fragment),eZo=l(),Ad=a("p"),oZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WV=a("a"),rZo=o("from_pretrained()"),tZo=o(" class method or the "),HV=a("a"),aZo=o("from_config()"),nZo=o(` class
method.`),sZo=l(),VL=a("p"),lZo=o("This class cannot be instantiated directly using "),Xpe=a("code"),iZo=o("__init__()"),dZo=o(" (throws an error)."),cZo=l(),Ft=a("div"),F(XL.$$.fragment),fZo=l(),zpe=a("p"),mZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gZo=l(),yd=a("p"),hZo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),pZo=o("not"),uZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),_Zo=o("from_pretrained()"),bZo=o(" to load the model weights."),vZo=l(),F(QF.$$.fragment),FZo=l(),po=a("div"),F(zL.$$.fragment),TZo=l(),Wpe=a("p"),MZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EZo=l(),za=a("p"),CZo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),wZo=o("model_type"),AZo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),yZo=o("pretrained_model_name_or_path"),LZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),xZo=o("pretrained_model_name_or_path"),$Zo=o(":"),kZo=l(),Qa=a("ul"),WF=a("li"),Ype=a("strong"),SZo=o("beit"),RZo=o(" \u2014 "),JV=a("a"),BZo=o("BeitForSemanticSegmentation"),PZo=o(" (BEiT model)"),IZo=l(),HF=a("li"),Kpe=a("strong"),qZo=o("data2vec-vision"),NZo=o(" \u2014 "),YV=a("a"),jZo=o("Data2VecVisionForSemanticSegmentation"),DZo=o(" (Data2VecVision model)"),GZo=l(),UF=a("li"),Zpe=a("strong"),OZo=o("dpt"),VZo=o(" \u2014 "),KV=a("a"),XZo=o("DPTForSemanticSegmentation"),zZo=o(" (DPT model)"),QZo=l(),JF=a("li"),eue=a("strong"),WZo=o("segformer"),HZo=o(" \u2014 "),ZV=a("a"),UZo=o("SegformerForSemanticSegmentation"),JZo=o(" (SegFormer model)"),YZo=l(),YF=a("p"),KZo=o("The model is set in evaluation mode by default using "),oue=a("code"),ZZo=o("model.eval()"),eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),oer=o("model.train()"),rer=l(),F(KF.$$.fragment),QBe=l(),Ld=a("h2"),ZF=a("a"),tue=a("span"),F(QL.$$.fragment),ter=l(),aue=a("span"),aer=o("AutoModelForInstanceSegmentation"),WBe=l(),Ho=a("div"),F(WL.$$.fragment),ner=l(),xd=a("p"),ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eX=a("a"),ler=o("from_pretrained()"),ier=o(" class method or the "),oX=a("a"),der=o("from_config()"),cer=o(` class
method.`),fer=l(),HL=a("p"),mer=o("This class cannot be instantiated directly using "),nue=a("code"),ger=o("__init__()"),her=o(" (throws an error)."),per=l(),Tt=a("div"),F(UL.$$.fragment),uer=l(),sue=a("p"),_er=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ber=l(),$d=a("p"),ver=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),Fer=o("not"),Ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),Mer=o("from_pretrained()"),Eer=o(" to load the model weights."),Cer=l(),F(e0.$$.fragment),wer=l(),uo=a("div"),F(JL.$$.fragment),Aer=l(),iue=a("p"),yer=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ler=l(),Wa=a("p"),xer=o("The model class to instantiate is selected based on the "),due=a("code"),$er=o("model_type"),ker=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Ser=o("pretrained_model_name_or_path"),Rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),Ber=o("pretrained_model_name_or_path"),Per=o(":"),Ier=l(),mue=a("ul"),o0=a("li"),gue=a("strong"),qer=o("maskformer"),Ner=o(" \u2014 "),tX=a("a"),jer=o("MaskFormerForInstanceSegmentation"),Der=o(" (MaskFormer model)"),Ger=l(),r0=a("p"),Oer=o("The model is set in evaluation mode by default using "),hue=a("code"),Ver=o("model.eval()"),Xer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),zer=o("model.train()"),Qer=l(),F(t0.$$.fragment),HBe=l(),kd=a("h2"),a0=a("a"),uue=a("span"),F(YL.$$.fragment),Wer=l(),_ue=a("span"),Her=o("TFAutoModel"),UBe=l(),Uo=a("div"),F(KL.$$.fragment),Uer=l(),Sd=a("p"),Jer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aX=a("a"),Yer=o("from_pretrained()"),Ker=o(" class method or the "),nX=a("a"),Zer=o("from_config()"),eor=o(` class
method.`),oor=l(),ZL=a("p"),ror=o("This class cannot be instantiated directly using "),bue=a("code"),tor=o("__init__()"),aor=o(" (throws an error)."),nor=l(),Mt=a("div"),F(e8.$$.fragment),sor=l(),vue=a("p"),lor=o("Instantiates one of the base model classes of the library from a configuration."),ior=l(),Rd=a("p"),dor=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),cor=o("not"),mor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),gor=o("from_pretrained()"),hor=o(" to load the model weights."),por=l(),F(n0.$$.fragment),uor=l(),Mr=a("div"),F(o8.$$.fragment),_or=l(),Tue=a("p"),bor=o("Instantiate one of the base model classes of the library from a pretrained model."),vor=l(),Ha=a("p"),For=o("The model class to instantiate is selected based on the "),Mue=a("code"),Tor=o("model_type"),Mor=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Eor=o("pretrained_model_name_or_path"),Cor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),wor=o("pretrained_model_name_or_path"),Aor=o(":"),yor=l(),j=a("ul"),s0=a("li"),wue=a("strong"),Lor=o("albert"),xor=o(" \u2014 "),lX=a("a"),$or=o("TFAlbertModel"),kor=o(" (ALBERT model)"),Sor=l(),l0=a("li"),Aue=a("strong"),Ror=o("bart"),Bor=o(" \u2014 "),iX=a("a"),Por=o("TFBartModel"),Ior=o(" (BART model)"),qor=l(),i0=a("li"),yue=a("strong"),Nor=o("bert"),jor=o(" \u2014 "),dX=a("a"),Dor=o("TFBertModel"),Gor=o(" (BERT model)"),Oor=l(),d0=a("li"),Lue=a("strong"),Vor=o("blenderbot"),Xor=o(" \u2014 "),cX=a("a"),zor=o("TFBlenderbotModel"),Qor=o(" (Blenderbot model)"),Wor=l(),c0=a("li"),xue=a("strong"),Hor=o("blenderbot-small"),Uor=o(" \u2014 "),fX=a("a"),Jor=o("TFBlenderbotSmallModel"),Yor=o(" (BlenderbotSmall model)"),Kor=l(),f0=a("li"),$ue=a("strong"),Zor=o("camembert"),err=o(" \u2014 "),mX=a("a"),orr=o("TFCamembertModel"),rrr=o(" (CamemBERT model)"),trr=l(),m0=a("li"),kue=a("strong"),arr=o("clip"),nrr=o(" \u2014 "),gX=a("a"),srr=o("TFCLIPModel"),lrr=o(" (CLIP model)"),irr=l(),g0=a("li"),Sue=a("strong"),drr=o("convbert"),crr=o(" \u2014 "),hX=a("a"),frr=o("TFConvBertModel"),mrr=o(" (ConvBERT model)"),grr=l(),h0=a("li"),Rue=a("strong"),hrr=o("convnext"),prr=o(" \u2014 "),pX=a("a"),urr=o("TFConvNextModel"),_rr=o(" (ConvNext model)"),brr=l(),p0=a("li"),Bue=a("strong"),vrr=o("ctrl"),Frr=o(" \u2014 "),uX=a("a"),Trr=o("TFCTRLModel"),Mrr=o(" (CTRL model)"),Err=l(),u0=a("li"),Pue=a("strong"),Crr=o("deberta"),wrr=o(" \u2014 "),_X=a("a"),Arr=o("TFDebertaModel"),yrr=o(" (DeBERTa model)"),Lrr=l(),_0=a("li"),Iue=a("strong"),xrr=o("deberta-v2"),$rr=o(" \u2014 "),bX=a("a"),krr=o("TFDebertaV2Model"),Srr=o(" (DeBERTa-v2 model)"),Rrr=l(),b0=a("li"),que=a("strong"),Brr=o("distilbert"),Prr=o(" \u2014 "),vX=a("a"),Irr=o("TFDistilBertModel"),qrr=o(" (DistilBERT model)"),Nrr=l(),v0=a("li"),Nue=a("strong"),jrr=o("dpr"),Drr=o(" \u2014 "),FX=a("a"),Grr=o("TFDPRQuestionEncoder"),Orr=o(" (DPR model)"),Vrr=l(),F0=a("li"),jue=a("strong"),Xrr=o("electra"),zrr=o(" \u2014 "),TX=a("a"),Qrr=o("TFElectraModel"),Wrr=o(" (ELECTRA model)"),Hrr=l(),T0=a("li"),Due=a("strong"),Urr=o("flaubert"),Jrr=o(" \u2014 "),MX=a("a"),Yrr=o("TFFlaubertModel"),Krr=o(" (FlauBERT model)"),Zrr=l(),xs=a("li"),Gue=a("strong"),etr=o("funnel"),otr=o(" \u2014 "),EX=a("a"),rtr=o("TFFunnelModel"),ttr=o(" or "),CX=a("a"),atr=o("TFFunnelBaseModel"),ntr=o(" (Funnel Transformer model)"),str=l(),M0=a("li"),Oue=a("strong"),ltr=o("gpt2"),itr=o(" \u2014 "),wX=a("a"),dtr=o("TFGPT2Model"),ctr=o(" (OpenAI GPT-2 model)"),ftr=l(),E0=a("li"),Vue=a("strong"),mtr=o("gptj"),gtr=o(" \u2014 "),AX=a("a"),htr=o("TFGPTJModel"),ptr=o(" (GPT-J model)"),utr=l(),C0=a("li"),Xue=a("strong"),_tr=o("hubert"),btr=o(" \u2014 "),yX=a("a"),vtr=o("TFHubertModel"),Ftr=o(" (Hubert model)"),Ttr=l(),w0=a("li"),zue=a("strong"),Mtr=o("layoutlm"),Etr=o(" \u2014 "),LX=a("a"),Ctr=o("TFLayoutLMModel"),wtr=o(" (LayoutLM model)"),Atr=l(),A0=a("li"),Que=a("strong"),ytr=o("led"),Ltr=o(" \u2014 "),xX=a("a"),xtr=o("TFLEDModel"),$tr=o(" (LED model)"),ktr=l(),y0=a("li"),Wue=a("strong"),Str=o("longformer"),Rtr=o(" \u2014 "),$X=a("a"),Btr=o("TFLongformerModel"),Ptr=o(" (Longformer model)"),Itr=l(),L0=a("li"),Hue=a("strong"),qtr=o("lxmert"),Ntr=o(" \u2014 "),kX=a("a"),jtr=o("TFLxmertModel"),Dtr=o(" (LXMERT model)"),Gtr=l(),x0=a("li"),Uue=a("strong"),Otr=o("marian"),Vtr=o(" \u2014 "),SX=a("a"),Xtr=o("TFMarianModel"),ztr=o(" (Marian model)"),Qtr=l(),$0=a("li"),Jue=a("strong"),Wtr=o("mbart"),Htr=o(" \u2014 "),RX=a("a"),Utr=o("TFMBartModel"),Jtr=o(" (mBART model)"),Ytr=l(),k0=a("li"),Yue=a("strong"),Ktr=o("mobilebert"),Ztr=o(" \u2014 "),BX=a("a"),ear=o("TFMobileBertModel"),oar=o(" (MobileBERT model)"),rar=l(),S0=a("li"),Kue=a("strong"),tar=o("mpnet"),aar=o(" \u2014 "),PX=a("a"),nar=o("TFMPNetModel"),sar=o(" (MPNet model)"),lar=l(),R0=a("li"),Zue=a("strong"),iar=o("mt5"),dar=o(" \u2014 "),IX=a("a"),car=o("TFMT5Model"),far=o(" (mT5 model)"),mar=l(),B0=a("li"),e_e=a("strong"),gar=o("openai-gpt"),har=o(" \u2014 "),qX=a("a"),par=o("TFOpenAIGPTModel"),uar=o(" (OpenAI GPT model)"),_ar=l(),P0=a("li"),o_e=a("strong"),bar=o("pegasus"),Far=o(" \u2014 "),NX=a("a"),Tar=o("TFPegasusModel"),Mar=o(" (Pegasus model)"),Ear=l(),I0=a("li"),r_e=a("strong"),Car=o("rembert"),war=o(" \u2014 "),jX=a("a"),Aar=o("TFRemBertModel"),yar=o(" (RemBERT model)"),Lar=l(),q0=a("li"),t_e=a("strong"),xar=o("roberta"),$ar=o(" \u2014 "),DX=a("a"),kar=o("TFRobertaModel"),Sar=o(" (RoBERTa model)"),Rar=l(),N0=a("li"),a_e=a("strong"),Bar=o("roformer"),Par=o(" \u2014 "),GX=a("a"),Iar=o("TFRoFormerModel"),qar=o(" (RoFormer model)"),Nar=l(),j0=a("li"),n_e=a("strong"),jar=o("speech_to_text"),Dar=o(" \u2014 "),OX=a("a"),Gar=o("TFSpeech2TextModel"),Oar=o(" (Speech2Text model)"),Var=l(),D0=a("li"),s_e=a("strong"),Xar=o("t5"),zar=o(" \u2014 "),VX=a("a"),Qar=o("TFT5Model"),War=o(" (T5 model)"),Har=l(),G0=a("li"),l_e=a("strong"),Uar=o("tapas"),Jar=o(" \u2014 "),XX=a("a"),Yar=o("TFTapasModel"),Kar=o(" (TAPAS model)"),Zar=l(),O0=a("li"),i_e=a("strong"),enr=o("transfo-xl"),onr=o(" \u2014 "),zX=a("a"),rnr=o("TFTransfoXLModel"),tnr=o(" (Transformer-XL model)"),anr=l(),V0=a("li"),d_e=a("strong"),nnr=o("vit"),snr=o(" \u2014 "),QX=a("a"),lnr=o("TFViTModel"),inr=o(" (ViT model)"),dnr=l(),X0=a("li"),c_e=a("strong"),cnr=o("vit_mae"),fnr=o(" \u2014 "),WX=a("a"),mnr=o("TFViTMAEModel"),gnr=o(" (ViTMAE model)"),hnr=l(),z0=a("li"),f_e=a("strong"),pnr=o("wav2vec2"),unr=o(" \u2014 "),HX=a("a"),_nr=o("TFWav2Vec2Model"),bnr=o(" (Wav2Vec2 model)"),vnr=l(),Q0=a("li"),m_e=a("strong"),Fnr=o("xlm"),Tnr=o(" \u2014 "),UX=a("a"),Mnr=o("TFXLMModel"),Enr=o(" (XLM model)"),Cnr=l(),W0=a("li"),g_e=a("strong"),wnr=o("xlm-roberta"),Anr=o(" \u2014 "),JX=a("a"),ynr=o("TFXLMRobertaModel"),Lnr=o(" (XLM-RoBERTa model)"),xnr=l(),H0=a("li"),h_e=a("strong"),$nr=o("xlnet"),knr=o(" \u2014 "),YX=a("a"),Snr=o("TFXLNetModel"),Rnr=o(" (XLNet model)"),Bnr=l(),F(U0.$$.fragment),JBe=l(),Bd=a("h2"),J0=a("a"),p_e=a("span"),F(r8.$$.fragment),Pnr=l(),u_e=a("span"),Inr=o("TFAutoModelForPreTraining"),YBe=l(),Jo=a("div"),F(t8.$$.fragment),qnr=l(),Pd=a("p"),Nnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KX=a("a"),jnr=o("from_pretrained()"),Dnr=o(" class method or the "),ZX=a("a"),Gnr=o("from_config()"),Onr=o(` class
method.`),Vnr=l(),a8=a("p"),Xnr=o("This class cannot be instantiated directly using "),__e=a("code"),znr=o("__init__()"),Qnr=o(" (throws an error)."),Wnr=l(),Et=a("div"),F(n8.$$.fragment),Hnr=l(),b_e=a("p"),Unr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jnr=l(),Id=a("p"),Ynr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Knr=o("not"),Znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=a("a"),esr=o("from_pretrained()"),osr=o(" to load the model weights."),rsr=l(),F(Y0.$$.fragment),tsr=l(),Er=a("div"),F(s8.$$.fragment),asr=l(),F_e=a("p"),nsr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ssr=l(),Ua=a("p"),lsr=o("The model class to instantiate is selected based on the "),T_e=a("code"),isr=o("model_type"),dsr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),msr=o("pretrained_model_name_or_path"),gsr=o(":"),hsr=l(),ne=a("ul"),K0=a("li"),C_e=a("strong"),psr=o("albert"),usr=o(" \u2014 "),oz=a("a"),_sr=o("TFAlbertForPreTraining"),bsr=o(" (ALBERT model)"),vsr=l(),Z0=a("li"),w_e=a("strong"),Fsr=o("bart"),Tsr=o(" \u2014 "),rz=a("a"),Msr=o("TFBartForConditionalGeneration"),Esr=o(" (BART model)"),Csr=l(),e6=a("li"),A_e=a("strong"),wsr=o("bert"),Asr=o(" \u2014 "),tz=a("a"),ysr=o("TFBertForPreTraining"),Lsr=o(" (BERT model)"),xsr=l(),o6=a("li"),y_e=a("strong"),$sr=o("camembert"),ksr=o(" \u2014 "),az=a("a"),Ssr=o("TFCamembertForMaskedLM"),Rsr=o(" (CamemBERT model)"),Bsr=l(),r6=a("li"),L_e=a("strong"),Psr=o("ctrl"),Isr=o(" \u2014 "),nz=a("a"),qsr=o("TFCTRLLMHeadModel"),Nsr=o(" (CTRL model)"),jsr=l(),t6=a("li"),x_e=a("strong"),Dsr=o("distilbert"),Gsr=o(" \u2014 "),sz=a("a"),Osr=o("TFDistilBertForMaskedLM"),Vsr=o(" (DistilBERT model)"),Xsr=l(),a6=a("li"),$_e=a("strong"),zsr=o("electra"),Qsr=o(" \u2014 "),lz=a("a"),Wsr=o("TFElectraForPreTraining"),Hsr=o(" (ELECTRA model)"),Usr=l(),n6=a("li"),k_e=a("strong"),Jsr=o("flaubert"),Ysr=o(" \u2014 "),iz=a("a"),Ksr=o("TFFlaubertWithLMHeadModel"),Zsr=o(" (FlauBERT model)"),elr=l(),s6=a("li"),S_e=a("strong"),olr=o("funnel"),rlr=o(" \u2014 "),dz=a("a"),tlr=o("TFFunnelForPreTraining"),alr=o(" (Funnel Transformer model)"),nlr=l(),l6=a("li"),R_e=a("strong"),slr=o("gpt2"),llr=o(" \u2014 "),cz=a("a"),ilr=o("TFGPT2LMHeadModel"),dlr=o(" (OpenAI GPT-2 model)"),clr=l(),i6=a("li"),B_e=a("strong"),flr=o("layoutlm"),mlr=o(" \u2014 "),fz=a("a"),glr=o("TFLayoutLMForMaskedLM"),hlr=o(" (LayoutLM model)"),plr=l(),d6=a("li"),P_e=a("strong"),ulr=o("lxmert"),_lr=o(" \u2014 "),mz=a("a"),blr=o("TFLxmertForPreTraining"),vlr=o(" (LXMERT model)"),Flr=l(),c6=a("li"),I_e=a("strong"),Tlr=o("mobilebert"),Mlr=o(" \u2014 "),gz=a("a"),Elr=o("TFMobileBertForPreTraining"),Clr=o(" (MobileBERT model)"),wlr=l(),f6=a("li"),q_e=a("strong"),Alr=o("mpnet"),ylr=o(" \u2014 "),hz=a("a"),Llr=o("TFMPNetForMaskedLM"),xlr=o(" (MPNet model)"),$lr=l(),m6=a("li"),N_e=a("strong"),klr=o("openai-gpt"),Slr=o(" \u2014 "),pz=a("a"),Rlr=o("TFOpenAIGPTLMHeadModel"),Blr=o(" (OpenAI GPT model)"),Plr=l(),g6=a("li"),j_e=a("strong"),Ilr=o("roberta"),qlr=o(" \u2014 "),uz=a("a"),Nlr=o("TFRobertaForMaskedLM"),jlr=o(" (RoBERTa model)"),Dlr=l(),h6=a("li"),D_e=a("strong"),Glr=o("t5"),Olr=o(" \u2014 "),_z=a("a"),Vlr=o("TFT5ForConditionalGeneration"),Xlr=o(" (T5 model)"),zlr=l(),p6=a("li"),G_e=a("strong"),Qlr=o("tapas"),Wlr=o(" \u2014 "),bz=a("a"),Hlr=o("TFTapasForMaskedLM"),Ulr=o(" (TAPAS model)"),Jlr=l(),u6=a("li"),O_e=a("strong"),Ylr=o("transfo-xl"),Klr=o(" \u2014 "),vz=a("a"),Zlr=o("TFTransfoXLLMHeadModel"),eir=o(" (Transformer-XL model)"),oir=l(),_6=a("li"),V_e=a("strong"),rir=o("vit_mae"),tir=o(" \u2014 "),Fz=a("a"),air=o("TFViTMAEForPreTraining"),nir=o(" (ViTMAE model)"),sir=l(),b6=a("li"),X_e=a("strong"),lir=o("xlm"),iir=o(" \u2014 "),Tz=a("a"),dir=o("TFXLMWithLMHeadModel"),cir=o(" (XLM model)"),fir=l(),v6=a("li"),z_e=a("strong"),mir=o("xlm-roberta"),gir=o(" \u2014 "),Mz=a("a"),hir=o("TFXLMRobertaForMaskedLM"),pir=o(" (XLM-RoBERTa model)"),uir=l(),F6=a("li"),Q_e=a("strong"),_ir=o("xlnet"),bir=o(" \u2014 "),Ez=a("a"),vir=o("TFXLNetLMHeadModel"),Fir=o(" (XLNet model)"),Tir=l(),F(T6.$$.fragment),KBe=l(),qd=a("h2"),M6=a("a"),W_e=a("span"),F(l8.$$.fragment),Mir=l(),H_e=a("span"),Eir=o("TFAutoModelForCausalLM"),ZBe=l(),Yo=a("div"),F(i8.$$.fragment),Cir=l(),Nd=a("p"),wir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cz=a("a"),Air=o("from_pretrained()"),yir=o(" class method or the "),wz=a("a"),Lir=o("from_config()"),xir=o(` class
method.`),$ir=l(),d8=a("p"),kir=o("This class cannot be instantiated directly using "),U_e=a("code"),Sir=o("__init__()"),Rir=o(" (throws an error)."),Bir=l(),Ct=a("div"),F(c8.$$.fragment),Pir=l(),J_e=a("p"),Iir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qir=l(),jd=a("p"),Nir=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),jir=o("not"),Dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Gir=o("from_pretrained()"),Oir=o(" to load the model weights."),Vir=l(),F(E6.$$.fragment),Xir=l(),Cr=a("div"),F(f8.$$.fragment),zir=l(),K_e=a("p"),Qir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Wir=l(),Ja=a("p"),Hir=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Uir=o("model_type"),Jir=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),Yir=o("pretrained_model_name_or_path"),Kir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(":"),odr=l(),Te=a("ul"),C6=a("li"),r2e=a("strong"),rdr=o("bert"),tdr=o(" \u2014 "),yz=a("a"),adr=o("TFBertLMHeadModel"),ndr=o(" (BERT model)"),sdr=l(),w6=a("li"),t2e=a("strong"),ldr=o("camembert"),idr=o(" \u2014 "),Lz=a("a"),ddr=o("TFCamembertForCausalLM"),cdr=o(" (CamemBERT model)"),fdr=l(),A6=a("li"),a2e=a("strong"),mdr=o("ctrl"),gdr=o(" \u2014 "),xz=a("a"),hdr=o("TFCTRLLMHeadModel"),pdr=o(" (CTRL model)"),udr=l(),y6=a("li"),n2e=a("strong"),_dr=o("gpt2"),bdr=o(" \u2014 "),$z=a("a"),vdr=o("TFGPT2LMHeadModel"),Fdr=o(" (OpenAI GPT-2 model)"),Tdr=l(),L6=a("li"),s2e=a("strong"),Mdr=o("gptj"),Edr=o(" \u2014 "),kz=a("a"),Cdr=o("TFGPTJForCausalLM"),wdr=o(" (GPT-J model)"),Adr=l(),x6=a("li"),l2e=a("strong"),ydr=o("openai-gpt"),Ldr=o(" \u2014 "),Sz=a("a"),xdr=o("TFOpenAIGPTLMHeadModel"),$dr=o(" (OpenAI GPT model)"),kdr=l(),$6=a("li"),i2e=a("strong"),Sdr=o("rembert"),Rdr=o(" \u2014 "),Rz=a("a"),Bdr=o("TFRemBertForCausalLM"),Pdr=o(" (RemBERT model)"),Idr=l(),k6=a("li"),d2e=a("strong"),qdr=o("roberta"),Ndr=o(" \u2014 "),Bz=a("a"),jdr=o("TFRobertaForCausalLM"),Ddr=o(" (RoBERTa model)"),Gdr=l(),S6=a("li"),c2e=a("strong"),Odr=o("roformer"),Vdr=o(" \u2014 "),Pz=a("a"),Xdr=o("TFRoFormerForCausalLM"),zdr=o(" (RoFormer model)"),Qdr=l(),R6=a("li"),f2e=a("strong"),Wdr=o("transfo-xl"),Hdr=o(" \u2014 "),Iz=a("a"),Udr=o("TFTransfoXLLMHeadModel"),Jdr=o(" (Transformer-XL model)"),Ydr=l(),B6=a("li"),m2e=a("strong"),Kdr=o("xlm"),Zdr=o(" \u2014 "),qz=a("a"),ecr=o("TFXLMWithLMHeadModel"),ocr=o(" (XLM model)"),rcr=l(),P6=a("li"),g2e=a("strong"),tcr=o("xlnet"),acr=o(" \u2014 "),Nz=a("a"),ncr=o("TFXLNetLMHeadModel"),scr=o(" (XLNet model)"),lcr=l(),F(I6.$$.fragment),ePe=l(),Dd=a("h2"),q6=a("a"),h2e=a("span"),F(m8.$$.fragment),icr=l(),p2e=a("span"),dcr=o("TFAutoModelForImageClassification"),oPe=l(),Ko=a("div"),F(g8.$$.fragment),ccr=l(),Gd=a("p"),fcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jz=a("a"),mcr=o("from_pretrained()"),gcr=o(" class method or the "),Dz=a("a"),hcr=o("from_config()"),pcr=o(` class
method.`),ucr=l(),h8=a("p"),_cr=o("This class cannot be instantiated directly using "),u2e=a("code"),bcr=o("__init__()"),vcr=o(" (throws an error)."),Fcr=l(),wt=a("div"),F(p8.$$.fragment),Tcr=l(),_2e=a("p"),Mcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ecr=l(),Od=a("p"),Ccr=o(`Note:
Loading a model from its configuration file does `),b2e=a("strong"),wcr=o("not"),Acr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),ycr=o("from_pretrained()"),Lcr=o(" to load the model weights."),xcr=l(),F(N6.$$.fragment),$cr=l(),wr=a("div"),F(u8.$$.fragment),kcr=l(),v2e=a("p"),Scr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rcr=l(),Ya=a("p"),Bcr=o("The model class to instantiate is selected based on the "),F2e=a("code"),Pcr=o("model_type"),Icr=o(` property of the config object (either
passed as an argument or loaded from `),T2e=a("code"),qcr=o("pretrained_model_name_or_path"),Ncr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=a("code"),jcr=o("pretrained_model_name_or_path"),Dcr=o(":"),Gcr=l(),_8=a("ul"),j6=a("li"),E2e=a("strong"),Ocr=o("convnext"),Vcr=o(" \u2014 "),Oz=a("a"),Xcr=o("TFConvNextForImageClassification"),zcr=o(" (ConvNext model)"),Qcr=l(),D6=a("li"),C2e=a("strong"),Wcr=o("vit"),Hcr=o(" \u2014 "),Vz=a("a"),Ucr=o("TFViTForImageClassification"),Jcr=o(" (ViT model)"),Ycr=l(),F(G6.$$.fragment),rPe=l(),Vd=a("h2"),O6=a("a"),w2e=a("span"),F(b8.$$.fragment),Kcr=l(),A2e=a("span"),Zcr=o("TFAutoModelForMaskedLM"),tPe=l(),Zo=a("div"),F(v8.$$.fragment),efr=l(),Xd=a("p"),ofr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=a("a"),rfr=o("from_pretrained()"),tfr=o(" class method or the "),zz=a("a"),afr=o("from_config()"),nfr=o(` class
method.`),sfr=l(),F8=a("p"),lfr=o("This class cannot be instantiated directly using "),y2e=a("code"),ifr=o("__init__()"),dfr=o(" (throws an error)."),cfr=l(),At=a("div"),F(T8.$$.fragment),ffr=l(),L2e=a("p"),mfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gfr=l(),zd=a("p"),hfr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),pfr=o("not"),ufr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),_fr=o("from_pretrained()"),bfr=o(" to load the model weights."),vfr=l(),F(V6.$$.fragment),Ffr=l(),Ar=a("div"),F(M8.$$.fragment),Tfr=l(),$2e=a("p"),Mfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Efr=l(),Ka=a("p"),Cfr=o("The model class to instantiate is selected based on the "),k2e=a("code"),wfr=o("model_type"),Afr=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),yfr=o("pretrained_model_name_or_path"),Lfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),xfr=o("pretrained_model_name_or_path"),$fr=o(":"),kfr=l(),ie=a("ul"),X6=a("li"),B2e=a("strong"),Sfr=o("albert"),Rfr=o(" \u2014 "),Wz=a("a"),Bfr=o("TFAlbertForMaskedLM"),Pfr=o(" (ALBERT model)"),Ifr=l(),z6=a("li"),P2e=a("strong"),qfr=o("bert"),Nfr=o(" \u2014 "),Hz=a("a"),jfr=o("TFBertForMaskedLM"),Dfr=o(" (BERT model)"),Gfr=l(),Q6=a("li"),I2e=a("strong"),Ofr=o("camembert"),Vfr=o(" \u2014 "),Uz=a("a"),Xfr=o("TFCamembertForMaskedLM"),zfr=o(" (CamemBERT model)"),Qfr=l(),W6=a("li"),q2e=a("strong"),Wfr=o("convbert"),Hfr=o(" \u2014 "),Jz=a("a"),Ufr=o("TFConvBertForMaskedLM"),Jfr=o(" (ConvBERT model)"),Yfr=l(),H6=a("li"),N2e=a("strong"),Kfr=o("deberta"),Zfr=o(" \u2014 "),Yz=a("a"),emr=o("TFDebertaForMaskedLM"),omr=o(" (DeBERTa model)"),rmr=l(),U6=a("li"),j2e=a("strong"),tmr=o("deberta-v2"),amr=o(" \u2014 "),Kz=a("a"),nmr=o("TFDebertaV2ForMaskedLM"),smr=o(" (DeBERTa-v2 model)"),lmr=l(),J6=a("li"),D2e=a("strong"),imr=o("distilbert"),dmr=o(" \u2014 "),Zz=a("a"),cmr=o("TFDistilBertForMaskedLM"),fmr=o(" (DistilBERT model)"),mmr=l(),Y6=a("li"),G2e=a("strong"),gmr=o("electra"),hmr=o(" \u2014 "),eQ=a("a"),pmr=o("TFElectraForMaskedLM"),umr=o(" (ELECTRA model)"),_mr=l(),K6=a("li"),O2e=a("strong"),bmr=o("flaubert"),vmr=o(" \u2014 "),oQ=a("a"),Fmr=o("TFFlaubertWithLMHeadModel"),Tmr=o(" (FlauBERT model)"),Mmr=l(),Z6=a("li"),V2e=a("strong"),Emr=o("funnel"),Cmr=o(" \u2014 "),rQ=a("a"),wmr=o("TFFunnelForMaskedLM"),Amr=o(" (Funnel Transformer model)"),ymr=l(),eT=a("li"),X2e=a("strong"),Lmr=o("layoutlm"),xmr=o(" \u2014 "),tQ=a("a"),$mr=o("TFLayoutLMForMaskedLM"),kmr=o(" (LayoutLM model)"),Smr=l(),oT=a("li"),z2e=a("strong"),Rmr=o("longformer"),Bmr=o(" \u2014 "),aQ=a("a"),Pmr=o("TFLongformerForMaskedLM"),Imr=o(" (Longformer model)"),qmr=l(),rT=a("li"),Q2e=a("strong"),Nmr=o("mobilebert"),jmr=o(" \u2014 "),nQ=a("a"),Dmr=o("TFMobileBertForMaskedLM"),Gmr=o(" (MobileBERT model)"),Omr=l(),tT=a("li"),W2e=a("strong"),Vmr=o("mpnet"),Xmr=o(" \u2014 "),sQ=a("a"),zmr=o("TFMPNetForMaskedLM"),Qmr=o(" (MPNet model)"),Wmr=l(),aT=a("li"),H2e=a("strong"),Hmr=o("rembert"),Umr=o(" \u2014 "),lQ=a("a"),Jmr=o("TFRemBertForMaskedLM"),Ymr=o(" (RemBERT model)"),Kmr=l(),nT=a("li"),U2e=a("strong"),Zmr=o("roberta"),egr=o(" \u2014 "),iQ=a("a"),ogr=o("TFRobertaForMaskedLM"),rgr=o(" (RoBERTa model)"),tgr=l(),sT=a("li"),J2e=a("strong"),agr=o("roformer"),ngr=o(" \u2014 "),dQ=a("a"),sgr=o("TFRoFormerForMaskedLM"),lgr=o(" (RoFormer model)"),igr=l(),lT=a("li"),Y2e=a("strong"),dgr=o("tapas"),cgr=o(" \u2014 "),cQ=a("a"),fgr=o("TFTapasForMaskedLM"),mgr=o(" (TAPAS model)"),ggr=l(),iT=a("li"),K2e=a("strong"),hgr=o("xlm"),pgr=o(" \u2014 "),fQ=a("a"),ugr=o("TFXLMWithLMHeadModel"),_gr=o(" (XLM model)"),bgr=l(),dT=a("li"),Z2e=a("strong"),vgr=o("xlm-roberta"),Fgr=o(" \u2014 "),mQ=a("a"),Tgr=o("TFXLMRobertaForMaskedLM"),Mgr=o(" (XLM-RoBERTa model)"),Egr=l(),F(cT.$$.fragment),aPe=l(),Qd=a("h2"),fT=a("a"),e1e=a("span"),F(E8.$$.fragment),Cgr=l(),o1e=a("span"),wgr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),er=a("div"),F(C8.$$.fragment),Agr=l(),Wd=a("p"),ygr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gQ=a("a"),Lgr=o("from_pretrained()"),xgr=o(" class method or the "),hQ=a("a"),$gr=o("from_config()"),kgr=o(` class
method.`),Sgr=l(),w8=a("p"),Rgr=o("This class cannot be instantiated directly using "),r1e=a("code"),Bgr=o("__init__()"),Pgr=o(" (throws an error)."),Igr=l(),yt=a("div"),F(A8.$$.fragment),qgr=l(),t1e=a("p"),Ngr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jgr=l(),Hd=a("p"),Dgr=o(`Note:
Loading a model from its configuration file does `),a1e=a("strong"),Ggr=o("not"),Ogr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Vgr=o("from_pretrained()"),Xgr=o(" to load the model weights."),zgr=l(),F(mT.$$.fragment),Qgr=l(),yr=a("div"),F(y8.$$.fragment),Wgr=l(),n1e=a("p"),Hgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ugr=l(),Za=a("p"),Jgr=o("The model class to instantiate is selected based on the "),s1e=a("code"),Ygr=o("model_type"),Kgr=o(` property of the config object (either
passed as an argument or loaded from `),l1e=a("code"),Zgr=o("pretrained_model_name_or_path"),ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=a("code"),ohr=o("pretrained_model_name_or_path"),rhr=o(":"),thr=l(),ye=a("ul"),gT=a("li"),d1e=a("strong"),ahr=o("bart"),nhr=o(" \u2014 "),uQ=a("a"),shr=o("TFBartForConditionalGeneration"),lhr=o(" (BART model)"),ihr=l(),hT=a("li"),c1e=a("strong"),dhr=o("blenderbot"),chr=o(" \u2014 "),_Q=a("a"),fhr=o("TFBlenderbotForConditionalGeneration"),mhr=o(" (Blenderbot model)"),ghr=l(),pT=a("li"),f1e=a("strong"),hhr=o("blenderbot-small"),phr=o(" \u2014 "),bQ=a("a"),uhr=o("TFBlenderbotSmallForConditionalGeneration"),_hr=o(" (BlenderbotSmall model)"),bhr=l(),uT=a("li"),m1e=a("strong"),vhr=o("encoder-decoder"),Fhr=o(" \u2014 "),vQ=a("a"),Thr=o("TFEncoderDecoderModel"),Mhr=o(" (Encoder decoder model)"),Ehr=l(),_T=a("li"),g1e=a("strong"),Chr=o("led"),whr=o(" \u2014 "),FQ=a("a"),Ahr=o("TFLEDForConditionalGeneration"),yhr=o(" (LED model)"),Lhr=l(),bT=a("li"),h1e=a("strong"),xhr=o("marian"),$hr=o(" \u2014 "),TQ=a("a"),khr=o("TFMarianMTModel"),Shr=o(" (Marian model)"),Rhr=l(),vT=a("li"),p1e=a("strong"),Bhr=o("mbart"),Phr=o(" \u2014 "),MQ=a("a"),Ihr=o("TFMBartForConditionalGeneration"),qhr=o(" (mBART model)"),Nhr=l(),FT=a("li"),u1e=a("strong"),jhr=o("mt5"),Dhr=o(" \u2014 "),EQ=a("a"),Ghr=o("TFMT5ForConditionalGeneration"),Ohr=o(" (mT5 model)"),Vhr=l(),TT=a("li"),_1e=a("strong"),Xhr=o("pegasus"),zhr=o(" \u2014 "),CQ=a("a"),Qhr=o("TFPegasusForConditionalGeneration"),Whr=o(" (Pegasus model)"),Hhr=l(),MT=a("li"),b1e=a("strong"),Uhr=o("t5"),Jhr=o(" \u2014 "),wQ=a("a"),Yhr=o("TFT5ForConditionalGeneration"),Khr=o(" (T5 model)"),Zhr=l(),F(ET.$$.fragment),sPe=l(),Ud=a("h2"),CT=a("a"),v1e=a("span"),F(L8.$$.fragment),epr=l(),F1e=a("span"),opr=o("TFAutoModelForSequenceClassification"),lPe=l(),or=a("div"),F(x8.$$.fragment),rpr=l(),Jd=a("p"),tpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AQ=a("a"),apr=o("from_pretrained()"),npr=o(" class method or the "),yQ=a("a"),spr=o("from_config()"),lpr=o(` class
method.`),ipr=l(),$8=a("p"),dpr=o("This class cannot be instantiated directly using "),T1e=a("code"),cpr=o("__init__()"),fpr=o(" (throws an error)."),mpr=l(),Lt=a("div"),F(k8.$$.fragment),gpr=l(),M1e=a("p"),hpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ppr=l(),Yd=a("p"),upr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),_pr=o("not"),bpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=a("a"),vpr=o("from_pretrained()"),Fpr=o(" to load the model weights."),Tpr=l(),F(wT.$$.fragment),Mpr=l(),Lr=a("div"),F(S8.$$.fragment),Epr=l(),C1e=a("p"),Cpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wpr=l(),en=a("p"),Apr=o("The model class to instantiate is selected based on the "),w1e=a("code"),ypr=o("model_type"),Lpr=o(` property of the config object (either
passed as an argument or loaded from `),A1e=a("code"),xpr=o("pretrained_model_name_or_path"),$pr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=a("code"),kpr=o("pretrained_model_name_or_path"),Spr=o(":"),Rpr=l(),Z=a("ul"),AT=a("li"),L1e=a("strong"),Bpr=o("albert"),Ppr=o(" \u2014 "),xQ=a("a"),Ipr=o("TFAlbertForSequenceClassification"),qpr=o(" (ALBERT model)"),Npr=l(),yT=a("li"),x1e=a("strong"),jpr=o("bert"),Dpr=o(" \u2014 "),$Q=a("a"),Gpr=o("TFBertForSequenceClassification"),Opr=o(" (BERT model)"),Vpr=l(),LT=a("li"),$1e=a("strong"),Xpr=o("camembert"),zpr=o(" \u2014 "),kQ=a("a"),Qpr=o("TFCamembertForSequenceClassification"),Wpr=o(" (CamemBERT model)"),Hpr=l(),xT=a("li"),k1e=a("strong"),Upr=o("convbert"),Jpr=o(" \u2014 "),SQ=a("a"),Ypr=o("TFConvBertForSequenceClassification"),Kpr=o(" (ConvBERT model)"),Zpr=l(),$T=a("li"),S1e=a("strong"),eur=o("ctrl"),our=o(" \u2014 "),RQ=a("a"),rur=o("TFCTRLForSequenceClassification"),tur=o(" (CTRL model)"),aur=l(),kT=a("li"),R1e=a("strong"),nur=o("deberta"),sur=o(" \u2014 "),BQ=a("a"),lur=o("TFDebertaForSequenceClassification"),iur=o(" (DeBERTa model)"),dur=l(),ST=a("li"),B1e=a("strong"),cur=o("deberta-v2"),fur=o(" \u2014 "),PQ=a("a"),mur=o("TFDebertaV2ForSequenceClassification"),gur=o(" (DeBERTa-v2 model)"),hur=l(),RT=a("li"),P1e=a("strong"),pur=o("distilbert"),uur=o(" \u2014 "),IQ=a("a"),_ur=o("TFDistilBertForSequenceClassification"),bur=o(" (DistilBERT model)"),vur=l(),BT=a("li"),I1e=a("strong"),Fur=o("electra"),Tur=o(" \u2014 "),qQ=a("a"),Mur=o("TFElectraForSequenceClassification"),Eur=o(" (ELECTRA model)"),Cur=l(),PT=a("li"),q1e=a("strong"),wur=o("flaubert"),Aur=o(" \u2014 "),NQ=a("a"),yur=o("TFFlaubertForSequenceClassification"),Lur=o(" (FlauBERT model)"),xur=l(),IT=a("li"),N1e=a("strong"),$ur=o("funnel"),kur=o(" \u2014 "),jQ=a("a"),Sur=o("TFFunnelForSequenceClassification"),Rur=o(" (Funnel Transformer model)"),Bur=l(),qT=a("li"),j1e=a("strong"),Pur=o("gpt2"),Iur=o(" \u2014 "),DQ=a("a"),qur=o("TFGPT2ForSequenceClassification"),Nur=o(" (OpenAI GPT-2 model)"),jur=l(),NT=a("li"),D1e=a("strong"),Dur=o("gptj"),Gur=o(" \u2014 "),GQ=a("a"),Our=o("TFGPTJForSequenceClassification"),Vur=o(" (GPT-J model)"),Xur=l(),jT=a("li"),G1e=a("strong"),zur=o("layoutlm"),Qur=o(" \u2014 "),OQ=a("a"),Wur=o("TFLayoutLMForSequenceClassification"),Hur=o(" (LayoutLM model)"),Uur=l(),DT=a("li"),O1e=a("strong"),Jur=o("longformer"),Yur=o(" \u2014 "),VQ=a("a"),Kur=o("TFLongformerForSequenceClassification"),Zur=o(" (Longformer model)"),e_r=l(),GT=a("li"),V1e=a("strong"),o_r=o("mobilebert"),r_r=o(" \u2014 "),XQ=a("a"),t_r=o("TFMobileBertForSequenceClassification"),a_r=o(" (MobileBERT model)"),n_r=l(),OT=a("li"),X1e=a("strong"),s_r=o("mpnet"),l_r=o(" \u2014 "),zQ=a("a"),i_r=o("TFMPNetForSequenceClassification"),d_r=o(" (MPNet model)"),c_r=l(),VT=a("li"),z1e=a("strong"),f_r=o("openai-gpt"),m_r=o(" \u2014 "),QQ=a("a"),g_r=o("TFOpenAIGPTForSequenceClassification"),h_r=o(" (OpenAI GPT model)"),p_r=l(),XT=a("li"),Q1e=a("strong"),u_r=o("rembert"),__r=o(" \u2014 "),WQ=a("a"),b_r=o("TFRemBertForSequenceClassification"),v_r=o(" (RemBERT model)"),F_r=l(),zT=a("li"),W1e=a("strong"),T_r=o("roberta"),M_r=o(" \u2014 "),HQ=a("a"),E_r=o("TFRobertaForSequenceClassification"),C_r=o(" (RoBERTa model)"),w_r=l(),QT=a("li"),H1e=a("strong"),A_r=o("roformer"),y_r=o(" \u2014 "),UQ=a("a"),L_r=o("TFRoFormerForSequenceClassification"),x_r=o(" (RoFormer model)"),$_r=l(),WT=a("li"),U1e=a("strong"),k_r=o("tapas"),S_r=o(" \u2014 "),JQ=a("a"),R_r=o("TFTapasForSequenceClassification"),B_r=o(" (TAPAS model)"),P_r=l(),HT=a("li"),J1e=a("strong"),I_r=o("transfo-xl"),q_r=o(" \u2014 "),YQ=a("a"),N_r=o("TFTransfoXLForSequenceClassification"),j_r=o(" (Transformer-XL model)"),D_r=l(),UT=a("li"),Y1e=a("strong"),G_r=o("xlm"),O_r=o(" \u2014 "),KQ=a("a"),V_r=o("TFXLMForSequenceClassification"),X_r=o(" (XLM model)"),z_r=l(),JT=a("li"),K1e=a("strong"),Q_r=o("xlm-roberta"),W_r=o(" \u2014 "),ZQ=a("a"),H_r=o("TFXLMRobertaForSequenceClassification"),U_r=o(" (XLM-RoBERTa model)"),J_r=l(),YT=a("li"),Z1e=a("strong"),Y_r=o("xlnet"),K_r=o(" \u2014 "),eW=a("a"),Z_r=o("TFXLNetForSequenceClassification"),e2r=o(" (XLNet model)"),o2r=l(),F(KT.$$.fragment),iPe=l(),Kd=a("h2"),ZT=a("a"),ebe=a("span"),F(R8.$$.fragment),r2r=l(),obe=a("span"),t2r=o("TFAutoModelForMultipleChoice"),dPe=l(),rr=a("div"),F(B8.$$.fragment),a2r=l(),Zd=a("p"),n2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oW=a("a"),s2r=o("from_pretrained()"),l2r=o(" class method or the "),rW=a("a"),i2r=o("from_config()"),d2r=o(` class
method.`),c2r=l(),P8=a("p"),f2r=o("This class cannot be instantiated directly using "),rbe=a("code"),m2r=o("__init__()"),g2r=o(" (throws an error)."),h2r=l(),xt=a("div"),F(I8.$$.fragment),p2r=l(),tbe=a("p"),u2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_2r=l(),ec=a("p"),b2r=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),v2r=o("not"),F2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),T2r=o("from_pretrained()"),M2r=o(" to load the model weights."),E2r=l(),F(eM.$$.fragment),C2r=l(),xr=a("div"),F(q8.$$.fragment),w2r=l(),nbe=a("p"),A2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),y2r=l(),on=a("p"),L2r=o("The model class to instantiate is selected based on the "),sbe=a("code"),x2r=o("model_type"),$2r=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),R2r=o("pretrained_model_name_or_path"),B2r=o(":"),P2r=l(),pe=a("ul"),oM=a("li"),dbe=a("strong"),I2r=o("albert"),q2r=o(" \u2014 "),aW=a("a"),N2r=o("TFAlbertForMultipleChoice"),j2r=o(" (ALBERT model)"),D2r=l(),rM=a("li"),cbe=a("strong"),G2r=o("bert"),O2r=o(" \u2014 "),nW=a("a"),V2r=o("TFBertForMultipleChoice"),X2r=o(" (BERT model)"),z2r=l(),tM=a("li"),fbe=a("strong"),Q2r=o("camembert"),W2r=o(" \u2014 "),sW=a("a"),H2r=o("TFCamembertForMultipleChoice"),U2r=o(" (CamemBERT model)"),J2r=l(),aM=a("li"),mbe=a("strong"),Y2r=o("convbert"),K2r=o(" \u2014 "),lW=a("a"),Z2r=o("TFConvBertForMultipleChoice"),e1r=o(" (ConvBERT model)"),o1r=l(),nM=a("li"),gbe=a("strong"),r1r=o("distilbert"),t1r=o(" \u2014 "),iW=a("a"),a1r=o("TFDistilBertForMultipleChoice"),n1r=o(" (DistilBERT model)"),s1r=l(),sM=a("li"),hbe=a("strong"),l1r=o("electra"),i1r=o(" \u2014 "),dW=a("a"),d1r=o("TFElectraForMultipleChoice"),c1r=o(" (ELECTRA model)"),f1r=l(),lM=a("li"),pbe=a("strong"),m1r=o("flaubert"),g1r=o(" \u2014 "),cW=a("a"),h1r=o("TFFlaubertForMultipleChoice"),p1r=o(" (FlauBERT model)"),u1r=l(),iM=a("li"),ube=a("strong"),_1r=o("funnel"),b1r=o(" \u2014 "),fW=a("a"),v1r=o("TFFunnelForMultipleChoice"),F1r=o(" (Funnel Transformer model)"),T1r=l(),dM=a("li"),_be=a("strong"),M1r=o("longformer"),E1r=o(" \u2014 "),mW=a("a"),C1r=o("TFLongformerForMultipleChoice"),w1r=o(" (Longformer model)"),A1r=l(),cM=a("li"),bbe=a("strong"),y1r=o("mobilebert"),L1r=o(" \u2014 "),gW=a("a"),x1r=o("TFMobileBertForMultipleChoice"),$1r=o(" (MobileBERT model)"),k1r=l(),fM=a("li"),vbe=a("strong"),S1r=o("mpnet"),R1r=o(" \u2014 "),hW=a("a"),B1r=o("TFMPNetForMultipleChoice"),P1r=o(" (MPNet model)"),I1r=l(),mM=a("li"),Fbe=a("strong"),q1r=o("rembert"),N1r=o(" \u2014 "),pW=a("a"),j1r=o("TFRemBertForMultipleChoice"),D1r=o(" (RemBERT model)"),G1r=l(),gM=a("li"),Tbe=a("strong"),O1r=o("roberta"),V1r=o(" \u2014 "),uW=a("a"),X1r=o("TFRobertaForMultipleChoice"),z1r=o(" (RoBERTa model)"),Q1r=l(),hM=a("li"),Mbe=a("strong"),W1r=o("roformer"),H1r=o(" \u2014 "),_W=a("a"),U1r=o("TFRoFormerForMultipleChoice"),J1r=o(" (RoFormer model)"),Y1r=l(),pM=a("li"),Ebe=a("strong"),K1r=o("xlm"),Z1r=o(" \u2014 "),bW=a("a"),ebr=o("TFXLMForMultipleChoice"),obr=o(" (XLM model)"),rbr=l(),uM=a("li"),Cbe=a("strong"),tbr=o("xlm-roberta"),abr=o(" \u2014 "),vW=a("a"),nbr=o("TFXLMRobertaForMultipleChoice"),sbr=o(" (XLM-RoBERTa model)"),lbr=l(),_M=a("li"),wbe=a("strong"),ibr=o("xlnet"),dbr=o(" \u2014 "),FW=a("a"),cbr=o("TFXLNetForMultipleChoice"),fbr=o(" (XLNet model)"),mbr=l(),F(bM.$$.fragment),cPe=l(),oc=a("h2"),vM=a("a"),Abe=a("span"),F(N8.$$.fragment),gbr=l(),ybe=a("span"),hbr=o("TFAutoModelForTableQuestionAnswering"),fPe=l(),tr=a("div"),F(j8.$$.fragment),pbr=l(),rc=a("p"),ubr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=a("a"),_br=o("from_pretrained()"),bbr=o(" class method or the "),MW=a("a"),vbr=o("from_config()"),Fbr=o(` class
method.`),Tbr=l(),D8=a("p"),Mbr=o("This class cannot be instantiated directly using "),Lbe=a("code"),Ebr=o("__init__()"),Cbr=o(" (throws an error)."),wbr=l(),$t=a("div"),F(G8.$$.fragment),Abr=l(),xbe=a("p"),ybr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lbr=l(),tc=a("p"),xbr=o(`Note:
Loading a model from its configuration file does `),$be=a("strong"),$br=o("not"),kbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Sbr=o("from_pretrained()"),Rbr=o(" to load the model weights."),Bbr=l(),F(FM.$$.fragment),Pbr=l(),$r=a("div"),F(O8.$$.fragment),Ibr=l(),kbe=a("p"),qbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Nbr=l(),rn=a("p"),jbr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),Dbr=o("model_type"),Gbr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),Obr=o("pretrained_model_name_or_path"),Vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),Xbr=o("pretrained_model_name_or_path"),zbr=o(":"),Qbr=l(),Pbe=a("ul"),TM=a("li"),Ibe=a("strong"),Wbr=o("tapas"),Hbr=o(" \u2014 "),CW=a("a"),Ubr=o("TFTapasForQuestionAnswering"),Jbr=o(" (TAPAS model)"),Ybr=l(),F(MM.$$.fragment),mPe=l(),ac=a("h2"),EM=a("a"),qbe=a("span"),F(V8.$$.fragment),Kbr=l(),Nbe=a("span"),Zbr=o("TFAutoModelForTokenClassification"),gPe=l(),ar=a("div"),F(X8.$$.fragment),e4r=l(),nc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wW=a("a"),r4r=o("from_pretrained()"),t4r=o(" class method or the "),AW=a("a"),a4r=o("from_config()"),n4r=o(` class
method.`),s4r=l(),z8=a("p"),l4r=o("This class cannot be instantiated directly using "),jbe=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),kt=a("div"),F(Q8.$$.fragment),f4r=l(),Dbe=a("p"),m4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),g4r=l(),sc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),p4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),_4r=o("from_pretrained()"),b4r=o(" to load the model weights."),v4r=l(),F(CM.$$.fragment),F4r=l(),kr=a("div"),F(W8.$$.fragment),T4r=l(),Obe=a("p"),M4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),E4r=l(),tn=a("p"),C4r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),w4r=o("model_type"),A4r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),y4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),x4r=o("pretrained_model_name_or_path"),$4r=o(":"),k4r=l(),de=a("ul"),wM=a("li"),Qbe=a("strong"),S4r=o("albert"),R4r=o(" \u2014 "),LW=a("a"),B4r=o("TFAlbertForTokenClassification"),P4r=o(" (ALBERT model)"),I4r=l(),AM=a("li"),Wbe=a("strong"),q4r=o("bert"),N4r=o(" \u2014 "),xW=a("a"),j4r=o("TFBertForTokenClassification"),D4r=o(" (BERT model)"),G4r=l(),yM=a("li"),Hbe=a("strong"),O4r=o("camembert"),V4r=o(" \u2014 "),$W=a("a"),X4r=o("TFCamembertForTokenClassification"),z4r=o(" (CamemBERT model)"),Q4r=l(),LM=a("li"),Ube=a("strong"),W4r=o("convbert"),H4r=o(" \u2014 "),kW=a("a"),U4r=o("TFConvBertForTokenClassification"),J4r=o(" (ConvBERT model)"),Y4r=l(),xM=a("li"),Jbe=a("strong"),K4r=o("deberta"),Z4r=o(" \u2014 "),SW=a("a"),evr=o("TFDebertaForTokenClassification"),ovr=o(" (DeBERTa model)"),rvr=l(),$M=a("li"),Ybe=a("strong"),tvr=o("deberta-v2"),avr=o(" \u2014 "),RW=a("a"),nvr=o("TFDebertaV2ForTokenClassification"),svr=o(" (DeBERTa-v2 model)"),lvr=l(),kM=a("li"),Kbe=a("strong"),ivr=o("distilbert"),dvr=o(" \u2014 "),BW=a("a"),cvr=o("TFDistilBertForTokenClassification"),fvr=o(" (DistilBERT model)"),mvr=l(),SM=a("li"),Zbe=a("strong"),gvr=o("electra"),hvr=o(" \u2014 "),PW=a("a"),pvr=o("TFElectraForTokenClassification"),uvr=o(" (ELECTRA model)"),_vr=l(),RM=a("li"),e4e=a("strong"),bvr=o("flaubert"),vvr=o(" \u2014 "),IW=a("a"),Fvr=o("TFFlaubertForTokenClassification"),Tvr=o(" (FlauBERT model)"),Mvr=l(),BM=a("li"),o4e=a("strong"),Evr=o("funnel"),Cvr=o(" \u2014 "),qW=a("a"),wvr=o("TFFunnelForTokenClassification"),Avr=o(" (Funnel Transformer model)"),yvr=l(),PM=a("li"),r4e=a("strong"),Lvr=o("layoutlm"),xvr=o(" \u2014 "),NW=a("a"),$vr=o("TFLayoutLMForTokenClassification"),kvr=o(" (LayoutLM model)"),Svr=l(),IM=a("li"),t4e=a("strong"),Rvr=o("longformer"),Bvr=o(" \u2014 "),jW=a("a"),Pvr=o("TFLongformerForTokenClassification"),Ivr=o(" (Longformer model)"),qvr=l(),qM=a("li"),a4e=a("strong"),Nvr=o("mobilebert"),jvr=o(" \u2014 "),DW=a("a"),Dvr=o("TFMobileBertForTokenClassification"),Gvr=o(" (MobileBERT model)"),Ovr=l(),NM=a("li"),n4e=a("strong"),Vvr=o("mpnet"),Xvr=o(" \u2014 "),GW=a("a"),zvr=o("TFMPNetForTokenClassification"),Qvr=o(" (MPNet model)"),Wvr=l(),jM=a("li"),s4e=a("strong"),Hvr=o("rembert"),Uvr=o(" \u2014 "),OW=a("a"),Jvr=o("TFRemBertForTokenClassification"),Yvr=o(" (RemBERT model)"),Kvr=l(),DM=a("li"),l4e=a("strong"),Zvr=o("roberta"),eFr=o(" \u2014 "),VW=a("a"),oFr=o("TFRobertaForTokenClassification"),rFr=o(" (RoBERTa model)"),tFr=l(),GM=a("li"),i4e=a("strong"),aFr=o("roformer"),nFr=o(" \u2014 "),XW=a("a"),sFr=o("TFRoFormerForTokenClassification"),lFr=o(" (RoFormer model)"),iFr=l(),OM=a("li"),d4e=a("strong"),dFr=o("xlm"),cFr=o(" \u2014 "),zW=a("a"),fFr=o("TFXLMForTokenClassification"),mFr=o(" (XLM model)"),gFr=l(),VM=a("li"),c4e=a("strong"),hFr=o("xlm-roberta"),pFr=o(" \u2014 "),QW=a("a"),uFr=o("TFXLMRobertaForTokenClassification"),_Fr=o(" (XLM-RoBERTa model)"),bFr=l(),XM=a("li"),f4e=a("strong"),vFr=o("xlnet"),FFr=o(" \u2014 "),WW=a("a"),TFr=o("TFXLNetForTokenClassification"),MFr=o(" (XLNet model)"),EFr=l(),F(zM.$$.fragment),hPe=l(),lc=a("h2"),QM=a("a"),m4e=a("span"),F(H8.$$.fragment),CFr=l(),g4e=a("span"),wFr=o("TFAutoModelForQuestionAnswering"),pPe=l(),nr=a("div"),F(U8.$$.fragment),AFr=l(),ic=a("p"),yFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=a("a"),LFr=o("from_pretrained()"),xFr=o(" class method or the "),UW=a("a"),$Fr=o("from_config()"),kFr=o(` class
method.`),SFr=l(),J8=a("p"),RFr=o("This class cannot be instantiated directly using "),h4e=a("code"),BFr=o("__init__()"),PFr=o(" (throws an error)."),IFr=l(),St=a("div"),F(Y8.$$.fragment),qFr=l(),p4e=a("p"),NFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),jFr=l(),dc=a("p"),DFr=o(`Note:
Loading a model from its configuration file does `),u4e=a("strong"),GFr=o("not"),OFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),VFr=o("from_pretrained()"),XFr=o(" to load the model weights."),zFr=l(),F(WM.$$.fragment),QFr=l(),Sr=a("div"),F(K8.$$.fragment),WFr=l(),_4e=a("p"),HFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UFr=l(),an=a("p"),JFr=o("The model class to instantiate is selected based on the "),b4e=a("code"),YFr=o("model_type"),KFr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),ZFr=o("pretrained_model_name_or_path"),e0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),o0r=o("pretrained_model_name_or_path"),r0r=o(":"),t0r=l(),ce=a("ul"),HM=a("li"),T4e=a("strong"),a0r=o("albert"),n0r=o(" \u2014 "),YW=a("a"),s0r=o("TFAlbertForQuestionAnswering"),l0r=o(" (ALBERT model)"),i0r=l(),UM=a("li"),M4e=a("strong"),d0r=o("bert"),c0r=o(" \u2014 "),KW=a("a"),f0r=o("TFBertForQuestionAnswering"),m0r=o(" (BERT model)"),g0r=l(),JM=a("li"),E4e=a("strong"),h0r=o("camembert"),p0r=o(" \u2014 "),ZW=a("a"),u0r=o("TFCamembertForQuestionAnswering"),_0r=o(" (CamemBERT model)"),b0r=l(),YM=a("li"),C4e=a("strong"),v0r=o("convbert"),F0r=o(" \u2014 "),eH=a("a"),T0r=o("TFConvBertForQuestionAnswering"),M0r=o(" (ConvBERT model)"),E0r=l(),KM=a("li"),w4e=a("strong"),C0r=o("deberta"),w0r=o(" \u2014 "),oH=a("a"),A0r=o("TFDebertaForQuestionAnswering"),y0r=o(" (DeBERTa model)"),L0r=l(),ZM=a("li"),A4e=a("strong"),x0r=o("deberta-v2"),$0r=o(" \u2014 "),rH=a("a"),k0r=o("TFDebertaV2ForQuestionAnswering"),S0r=o(" (DeBERTa-v2 model)"),R0r=l(),eE=a("li"),y4e=a("strong"),B0r=o("distilbert"),P0r=o(" \u2014 "),tH=a("a"),I0r=o("TFDistilBertForQuestionAnswering"),q0r=o(" (DistilBERT model)"),N0r=l(),oE=a("li"),L4e=a("strong"),j0r=o("electra"),D0r=o(" \u2014 "),aH=a("a"),G0r=o("TFElectraForQuestionAnswering"),O0r=o(" (ELECTRA model)"),V0r=l(),rE=a("li"),x4e=a("strong"),X0r=o("flaubert"),z0r=o(" \u2014 "),nH=a("a"),Q0r=o("TFFlaubertForQuestionAnsweringSimple"),W0r=o(" (FlauBERT model)"),H0r=l(),tE=a("li"),$4e=a("strong"),U0r=o("funnel"),J0r=o(" \u2014 "),sH=a("a"),Y0r=o("TFFunnelForQuestionAnswering"),K0r=o(" (Funnel Transformer model)"),Z0r=l(),aE=a("li"),k4e=a("strong"),e6r=o("gptj"),o6r=o(" \u2014 "),lH=a("a"),r6r=o("TFGPTJForQuestionAnswering"),t6r=o(" (GPT-J model)"),a6r=l(),nE=a("li"),S4e=a("strong"),n6r=o("longformer"),s6r=o(" \u2014 "),iH=a("a"),l6r=o("TFLongformerForQuestionAnswering"),i6r=o(" (Longformer model)"),d6r=l(),sE=a("li"),R4e=a("strong"),c6r=o("mobilebert"),f6r=o(" \u2014 "),dH=a("a"),m6r=o("TFMobileBertForQuestionAnswering"),g6r=o(" (MobileBERT model)"),h6r=l(),lE=a("li"),B4e=a("strong"),p6r=o("mpnet"),u6r=o(" \u2014 "),cH=a("a"),_6r=o("TFMPNetForQuestionAnswering"),b6r=o(" (MPNet model)"),v6r=l(),iE=a("li"),P4e=a("strong"),F6r=o("rembert"),T6r=o(" \u2014 "),fH=a("a"),M6r=o("TFRemBertForQuestionAnswering"),E6r=o(" (RemBERT model)"),C6r=l(),dE=a("li"),I4e=a("strong"),w6r=o("roberta"),A6r=o(" \u2014 "),mH=a("a"),y6r=o("TFRobertaForQuestionAnswering"),L6r=o(" (RoBERTa model)"),x6r=l(),cE=a("li"),q4e=a("strong"),$6r=o("roformer"),k6r=o(" \u2014 "),gH=a("a"),S6r=o("TFRoFormerForQuestionAnswering"),R6r=o(" (RoFormer model)"),B6r=l(),fE=a("li"),N4e=a("strong"),P6r=o("xlm"),I6r=o(" \u2014 "),hH=a("a"),q6r=o("TFXLMForQuestionAnsweringSimple"),N6r=o(" (XLM model)"),j6r=l(),mE=a("li"),j4e=a("strong"),D6r=o("xlm-roberta"),G6r=o(" \u2014 "),pH=a("a"),O6r=o("TFXLMRobertaForQuestionAnswering"),V6r=o(" (XLM-RoBERTa model)"),X6r=l(),gE=a("li"),D4e=a("strong"),z6r=o("xlnet"),Q6r=o(" \u2014 "),uH=a("a"),W6r=o("TFXLNetForQuestionAnsweringSimple"),H6r=o(" (XLNet model)"),U6r=l(),F(hE.$$.fragment),uPe=l(),cc=a("h2"),pE=a("a"),G4e=a("span"),F(Z8.$$.fragment),J6r=l(),O4e=a("span"),Y6r=o("TFAutoModelForVision2Seq"),_Pe=l(),sr=a("div"),F(e7.$$.fragment),K6r=l(),fc=a("p"),Z6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_H=a("a"),eTr=o("from_pretrained()"),oTr=o(" class method or the "),bH=a("a"),rTr=o("from_config()"),tTr=o(` class
method.`),aTr=l(),o7=a("p"),nTr=o("This class cannot be instantiated directly using "),V4e=a("code"),sTr=o("__init__()"),lTr=o(" (throws an error)."),iTr=l(),Rt=a("div"),F(r7.$$.fragment),dTr=l(),X4e=a("p"),cTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fTr=l(),mc=a("p"),mTr=o(`Note:
Loading a model from its configuration file does `),z4e=a("strong"),gTr=o("not"),hTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),pTr=o("from_pretrained()"),uTr=o(" to load the model weights."),_Tr=l(),F(uE.$$.fragment),bTr=l(),Rr=a("div"),F(t7.$$.fragment),vTr=l(),Q4e=a("p"),FTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TTr=l(),nn=a("p"),MTr=o("The model class to instantiate is selected based on the "),W4e=a("code"),ETr=o("model_type"),CTr=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),wTr=o("pretrained_model_name_or_path"),ATr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(":"),xTr=l(),J4e=a("ul"),_E=a("li"),Y4e=a("strong"),$Tr=o("vision-encoder-decoder"),kTr=o(" \u2014 "),FH=a("a"),STr=o("TFVisionEncoderDecoderModel"),RTr=o(" (Vision Encoder decoder model)"),BTr=l(),F(bE.$$.fragment),bPe=l(),gc=a("h2"),vE=a("a"),K4e=a("span"),F(a7.$$.fragment),PTr=l(),Z4e=a("span"),ITr=o("TFAutoModelForSpeechSeq2Seq"),vPe=l(),lr=a("div"),F(n7.$$.fragment),qTr=l(),hc=a("p"),NTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=a("a"),jTr=o("from_pretrained()"),DTr=o(" class method or the "),MH=a("a"),GTr=o("from_config()"),OTr=o(` class
method.`),VTr=l(),s7=a("p"),XTr=o("This class cannot be instantiated directly using "),eve=a("code"),zTr=o("__init__()"),QTr=o(" (throws an error)."),WTr=l(),Bt=a("div"),F(l7.$$.fragment),HTr=l(),ove=a("p"),UTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JTr=l(),pc=a("p"),YTr=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),KTr=o("not"),ZTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=a("a"),eMr=o("from_pretrained()"),oMr=o(" to load the model weights."),rMr=l(),F(FE.$$.fragment),tMr=l(),Br=a("div"),F(i7.$$.fragment),aMr=l(),tve=a("p"),nMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sMr=l(),sn=a("p"),lMr=o("The model class to instantiate is selected based on the "),ave=a("code"),iMr=o("model_type"),dMr=o(` property of the config object (either
passed as an argument or loaded from `),nve=a("code"),cMr=o("pretrained_model_name_or_path"),fMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=a("code"),mMr=o("pretrained_model_name_or_path"),gMr=o(":"),hMr=l(),lve=a("ul"),TE=a("li"),ive=a("strong"),pMr=o("speech_to_text"),uMr=o(" \u2014 "),CH=a("a"),_Mr=o("TFSpeech2TextForConditionalGeneration"),bMr=o(" (Speech2Text model)"),vMr=l(),F(ME.$$.fragment),FPe=l(),uc=a("h2"),EE=a("a"),dve=a("span"),F(d7.$$.fragment),FMr=l(),cve=a("span"),TMr=o("FlaxAutoModel"),TPe=l(),ir=a("div"),F(c7.$$.fragment),MMr=l(),_c=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wH=a("a"),CMr=o("from_pretrained()"),wMr=o(" class method or the "),AH=a("a"),AMr=o("from_config()"),yMr=o(` class
method.`),LMr=l(),f7=a("p"),xMr=o("This class cannot be instantiated directly using "),fve=a("code"),$Mr=o("__init__()"),kMr=o(" (throws an error)."),SMr=l(),Pt=a("div"),F(m7.$$.fragment),RMr=l(),mve=a("p"),BMr=o("Instantiates one of the base model classes of the library from a configuration."),PMr=l(),bc=a("p"),IMr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),qMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),jMr=o("from_pretrained()"),DMr=o(" to load the model weights."),GMr=l(),F(CE.$$.fragment),OMr=l(),Pr=a("div"),F(g7.$$.fragment),VMr=l(),hve=a("p"),XMr=o("Instantiate one of the base model classes of the library from a pretrained model."),zMr=l(),ln=a("p"),QMr=o("The model class to instantiate is selected based on the "),pve=a("code"),WMr=o("model_type"),HMr=o(` property of the config object (either
passed as an argument or loaded from `),uve=a("code"),UMr=o("pretrained_model_name_or_path"),JMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(":"),ZMr=l(),oe=a("ul"),wE=a("li"),bve=a("strong"),eEr=o("albert"),oEr=o(" \u2014 "),LH=a("a"),rEr=o("FlaxAlbertModel"),tEr=o(" (ALBERT model)"),aEr=l(),AE=a("li"),vve=a("strong"),nEr=o("bart"),sEr=o(" \u2014 "),xH=a("a"),lEr=o("FlaxBartModel"),iEr=o(" (BART model)"),dEr=l(),yE=a("li"),Fve=a("strong"),cEr=o("beit"),fEr=o(" \u2014 "),$H=a("a"),mEr=o("FlaxBeitModel"),gEr=o(" (BEiT model)"),hEr=l(),LE=a("li"),Tve=a("strong"),pEr=o("bert"),uEr=o(" \u2014 "),kH=a("a"),_Er=o("FlaxBertModel"),bEr=o(" (BERT model)"),vEr=l(),xE=a("li"),Mve=a("strong"),FEr=o("big_bird"),TEr=o(" \u2014 "),SH=a("a"),MEr=o("FlaxBigBirdModel"),EEr=o(" (BigBird model)"),CEr=l(),$E=a("li"),Eve=a("strong"),wEr=o("blenderbot"),AEr=o(" \u2014 "),RH=a("a"),yEr=o("FlaxBlenderbotModel"),LEr=o(" (Blenderbot model)"),xEr=l(),kE=a("li"),Cve=a("strong"),$Er=o("blenderbot-small"),kEr=o(" \u2014 "),BH=a("a"),SEr=o("FlaxBlenderbotSmallModel"),REr=o(" (BlenderbotSmall model)"),BEr=l(),SE=a("li"),wve=a("strong"),PEr=o("clip"),IEr=o(" \u2014 "),PH=a("a"),qEr=o("FlaxCLIPModel"),NEr=o(" (CLIP model)"),jEr=l(),RE=a("li"),Ave=a("strong"),DEr=o("distilbert"),GEr=o(" \u2014 "),IH=a("a"),OEr=o("FlaxDistilBertModel"),VEr=o(" (DistilBERT model)"),XEr=l(),BE=a("li"),yve=a("strong"),zEr=o("electra"),QEr=o(" \u2014 "),qH=a("a"),WEr=o("FlaxElectraModel"),HEr=o(" (ELECTRA model)"),UEr=l(),PE=a("li"),Lve=a("strong"),JEr=o("gpt2"),YEr=o(" \u2014 "),NH=a("a"),KEr=o("FlaxGPT2Model"),ZEr=o(" (OpenAI GPT-2 model)"),eCr=l(),IE=a("li"),xve=a("strong"),oCr=o("gpt_neo"),rCr=o(" \u2014 "),jH=a("a"),tCr=o("FlaxGPTNeoModel"),aCr=o(" (GPT Neo model)"),nCr=l(),qE=a("li"),$ve=a("strong"),sCr=o("gptj"),lCr=o(" \u2014 "),DH=a("a"),iCr=o("FlaxGPTJModel"),dCr=o(" (GPT-J model)"),cCr=l(),NE=a("li"),kve=a("strong"),fCr=o("marian"),mCr=o(" \u2014 "),GH=a("a"),gCr=o("FlaxMarianModel"),hCr=o(" (Marian model)"),pCr=l(),jE=a("li"),Sve=a("strong"),uCr=o("mbart"),_Cr=o(" \u2014 "),OH=a("a"),bCr=o("FlaxMBartModel"),vCr=o(" (mBART model)"),FCr=l(),DE=a("li"),Rve=a("strong"),TCr=o("mt5"),MCr=o(" \u2014 "),VH=a("a"),ECr=o("FlaxMT5Model"),CCr=o(" (mT5 model)"),wCr=l(),GE=a("li"),Bve=a("strong"),ACr=o("pegasus"),yCr=o(" \u2014 "),XH=a("a"),LCr=o("FlaxPegasusModel"),xCr=o(" (Pegasus model)"),$Cr=l(),OE=a("li"),Pve=a("strong"),kCr=o("roberta"),SCr=o(" \u2014 "),zH=a("a"),RCr=o("FlaxRobertaModel"),BCr=o(" (RoBERTa model)"),PCr=l(),VE=a("li"),Ive=a("strong"),ICr=o("roformer"),qCr=o(" \u2014 "),QH=a("a"),NCr=o("FlaxRoFormerModel"),jCr=o(" (RoFormer model)"),DCr=l(),XE=a("li"),qve=a("strong"),GCr=o("t5"),OCr=o(" \u2014 "),WH=a("a"),VCr=o("FlaxT5Model"),XCr=o(" (T5 model)"),zCr=l(),zE=a("li"),Nve=a("strong"),QCr=o("vision-text-dual-encoder"),WCr=o(" \u2014 "),HH=a("a"),HCr=o("FlaxVisionTextDualEncoderModel"),UCr=o(" (VisionTextDualEncoder model)"),JCr=l(),QE=a("li"),jve=a("strong"),YCr=o("vit"),KCr=o(" \u2014 "),UH=a("a"),ZCr=o("FlaxViTModel"),e5r=o(" (ViT model)"),o5r=l(),WE=a("li"),Dve=a("strong"),r5r=o("wav2vec2"),t5r=o(" \u2014 "),JH=a("a"),a5r=o("FlaxWav2Vec2Model"),n5r=o(" (Wav2Vec2 model)"),s5r=l(),HE=a("li"),Gve=a("strong"),l5r=o("xglm"),i5r=o(" \u2014 "),YH=a("a"),d5r=o("FlaxXGLMModel"),c5r=o(" (XGLM model)"),f5r=l(),UE=a("li"),Ove=a("strong"),m5r=o("xlm-roberta"),g5r=o(" \u2014 "),KH=a("a"),h5r=o("FlaxXLMRobertaModel"),p5r=o(" (XLM-RoBERTa model)"),u5r=l(),F(JE.$$.fragment),MPe=l(),vc=a("h2"),YE=a("a"),Vve=a("span"),F(h7.$$.fragment),_5r=l(),Xve=a("span"),b5r=o("FlaxAutoModelForCausalLM"),EPe=l(),dr=a("div"),F(p7.$$.fragment),v5r=l(),Fc=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=a("a"),T5r=o("from_pretrained()"),M5r=o(" class method or the "),eU=a("a"),E5r=o("from_config()"),C5r=o(` class
method.`),w5r=l(),u7=a("p"),A5r=o("This class cannot be instantiated directly using "),zve=a("code"),y5r=o("__init__()"),L5r=o(" (throws an error)."),x5r=l(),It=a("div"),F(_7.$$.fragment),$5r=l(),Qve=a("p"),k5r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S5r=l(),Tc=a("p"),R5r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),B5r=o("not"),P5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),I5r=o("from_pretrained()"),q5r=o(" to load the model weights."),N5r=l(),F(KE.$$.fragment),j5r=l(),Ir=a("div"),F(b7.$$.fragment),D5r=l(),Hve=a("p"),G5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O5r=l(),dn=a("p"),V5r=o("The model class to instantiate is selected based on the "),Uve=a("code"),X5r=o("model_type"),z5r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),Q5r=o("pretrained_model_name_or_path"),W5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(":"),J5r=l(),Hr=a("ul"),ZE=a("li"),Kve=a("strong"),Y5r=o("bart"),K5r=o(" \u2014 "),rU=a("a"),Z5r=o("FlaxBartForCausalLM"),e3r=o(" (BART model)"),o3r=l(),eC=a("li"),Zve=a("strong"),r3r=o("gpt2"),t3r=o(" \u2014 "),tU=a("a"),a3r=o("FlaxGPT2LMHeadModel"),n3r=o(" (OpenAI GPT-2 model)"),s3r=l(),oC=a("li"),eFe=a("strong"),l3r=o("gpt_neo"),i3r=o(" \u2014 "),aU=a("a"),d3r=o("FlaxGPTNeoForCausalLM"),c3r=o(" (GPT Neo model)"),f3r=l(),rC=a("li"),oFe=a("strong"),m3r=o("gptj"),g3r=o(" \u2014 "),nU=a("a"),h3r=o("FlaxGPTJForCausalLM"),p3r=o(" (GPT-J model)"),u3r=l(),tC=a("li"),rFe=a("strong"),_3r=o("xglm"),b3r=o(" \u2014 "),sU=a("a"),v3r=o("FlaxXGLMForCausalLM"),F3r=o(" (XGLM model)"),T3r=l(),F(aC.$$.fragment),CPe=l(),Mc=a("h2"),nC=a("a"),tFe=a("span"),F(v7.$$.fragment),M3r=l(),aFe=a("span"),E3r=o("FlaxAutoModelForPreTraining"),wPe=l(),cr=a("div"),F(F7.$$.fragment),C3r=l(),Ec=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=a("a"),A3r=o("from_pretrained()"),y3r=o(" class method or the "),iU=a("a"),L3r=o("from_config()"),x3r=o(` class
method.`),$3r=l(),T7=a("p"),k3r=o("This class cannot be instantiated directly using "),nFe=a("code"),S3r=o("__init__()"),R3r=o(" (throws an error)."),B3r=l(),qt=a("div"),F(M7.$$.fragment),P3r=l(),sFe=a("p"),I3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),q3r=l(),Cc=a("p"),N3r=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),j3r=o("not"),D3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),G3r=o("from_pretrained()"),O3r=o(" to load the model weights."),V3r=l(),F(sC.$$.fragment),X3r=l(),qr=a("div"),F(E7.$$.fragment),z3r=l(),iFe=a("p"),Q3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),W3r=l(),cn=a("p"),H3r=o("The model class to instantiate is selected based on the "),dFe=a("code"),U3r=o("model_type"),J3r=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),Y3r=o("pretrained_model_name_or_path"),K3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),Z3r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),Me=a("ul"),lC=a("li"),mFe=a("strong"),rwr=o("albert"),twr=o(" \u2014 "),cU=a("a"),awr=o("FlaxAlbertForPreTraining"),nwr=o(" (ALBERT model)"),swr=l(),iC=a("li"),gFe=a("strong"),lwr=o("bart"),iwr=o(" \u2014 "),fU=a("a"),dwr=o("FlaxBartForConditionalGeneration"),cwr=o(" (BART model)"),fwr=l(),dC=a("li"),hFe=a("strong"),mwr=o("bert"),gwr=o(" \u2014 "),mU=a("a"),hwr=o("FlaxBertForPreTraining"),pwr=o(" (BERT model)"),uwr=l(),cC=a("li"),pFe=a("strong"),_wr=o("big_bird"),bwr=o(" \u2014 "),gU=a("a"),vwr=o("FlaxBigBirdForPreTraining"),Fwr=o(" (BigBird model)"),Twr=l(),fC=a("li"),uFe=a("strong"),Mwr=o("electra"),Ewr=o(" \u2014 "),hU=a("a"),Cwr=o("FlaxElectraForPreTraining"),wwr=o(" (ELECTRA model)"),Awr=l(),mC=a("li"),_Fe=a("strong"),ywr=o("mbart"),Lwr=o(" \u2014 "),pU=a("a"),xwr=o("FlaxMBartForConditionalGeneration"),$wr=o(" (mBART model)"),kwr=l(),gC=a("li"),bFe=a("strong"),Swr=o("mt5"),Rwr=o(" \u2014 "),uU=a("a"),Bwr=o("FlaxMT5ForConditionalGeneration"),Pwr=o(" (mT5 model)"),Iwr=l(),hC=a("li"),vFe=a("strong"),qwr=o("roberta"),Nwr=o(" \u2014 "),_U=a("a"),jwr=o("FlaxRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),pC=a("li"),FFe=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),bU=a("a"),Xwr=o("FlaxRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),uC=a("li"),TFe=a("strong"),Wwr=o("t5"),Hwr=o(" \u2014 "),vU=a("a"),Uwr=o("FlaxT5ForConditionalGeneration"),Jwr=o(" (T5 model)"),Ywr=l(),_C=a("li"),MFe=a("strong"),Kwr=o("wav2vec2"),Zwr=o(" \u2014 "),FU=a("a"),eAr=o("FlaxWav2Vec2ForPreTraining"),oAr=o(" (Wav2Vec2 model)"),rAr=l(),bC=a("li"),EFe=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),TU=a("a"),nAr=o("FlaxXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),F(vC.$$.fragment),APe=l(),wc=a("h2"),FC=a("a"),CFe=a("span"),F(C7.$$.fragment),iAr=l(),wFe=a("span"),dAr=o("FlaxAutoModelForMaskedLM"),yPe=l(),fr=a("div"),F(w7.$$.fragment),cAr=l(),Ac=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),EU=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),uAr=l(),A7=a("p"),_Ar=o("This class cannot be instantiated directly using "),AFe=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),Nt=a("div"),F(y7.$$.fragment),TAr=l(),yFe=a("p"),MAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EAr=l(),yc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),F(TC.$$.fragment),$Ar=l(),Nr=a("div"),F(L7.$$.fragment),kAr=l(),xFe=a("p"),SAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),RAr=l(),fn=a("p"),BAr=o("The model class to instantiate is selected based on the "),$Fe=a("code"),PAr=o("model_type"),IAr=o(` property of the config object (either
passed as an argument or loaded from `),kFe=a("code"),qAr=o("pretrained_model_name_or_path"),NAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),Le=a("ul"),MC=a("li"),RFe=a("strong"),OAr=o("albert"),VAr=o(" \u2014 "),wU=a("a"),XAr=o("FlaxAlbertForMaskedLM"),zAr=o(" (ALBERT model)"),QAr=l(),EC=a("li"),BFe=a("strong"),WAr=o("bart"),HAr=o(" \u2014 "),AU=a("a"),UAr=o("FlaxBartForConditionalGeneration"),JAr=o(" (BART model)"),YAr=l(),CC=a("li"),PFe=a("strong"),KAr=o("bert"),ZAr=o(" \u2014 "),yU=a("a"),eyr=o("FlaxBertForMaskedLM"),oyr=o(" (BERT model)"),ryr=l(),wC=a("li"),IFe=a("strong"),tyr=o("big_bird"),ayr=o(" \u2014 "),LU=a("a"),nyr=o("FlaxBigBirdForMaskedLM"),syr=o(" (BigBird model)"),lyr=l(),AC=a("li"),qFe=a("strong"),iyr=o("distilbert"),dyr=o(" \u2014 "),xU=a("a"),cyr=o("FlaxDistilBertForMaskedLM"),fyr=o(" (DistilBERT model)"),myr=l(),yC=a("li"),NFe=a("strong"),gyr=o("electra"),hyr=o(" \u2014 "),$U=a("a"),pyr=o("FlaxElectraForMaskedLM"),uyr=o(" (ELECTRA model)"),_yr=l(),LC=a("li"),jFe=a("strong"),byr=o("mbart"),vyr=o(" \u2014 "),kU=a("a"),Fyr=o("FlaxMBartForConditionalGeneration"),Tyr=o(" (mBART model)"),Myr=l(),xC=a("li"),DFe=a("strong"),Eyr=o("roberta"),Cyr=o(" \u2014 "),SU=a("a"),wyr=o("FlaxRobertaForMaskedLM"),Ayr=o(" (RoBERTa model)"),yyr=l(),$C=a("li"),GFe=a("strong"),Lyr=o("roformer"),xyr=o(" \u2014 "),RU=a("a"),$yr=o("FlaxRoFormerForMaskedLM"),kyr=o(" (RoFormer model)"),Syr=l(),kC=a("li"),OFe=a("strong"),Ryr=o("xlm-roberta"),Byr=o(" \u2014 "),BU=a("a"),Pyr=o("FlaxXLMRobertaForMaskedLM"),Iyr=o(" (XLM-RoBERTa model)"),qyr=l(),F(SC.$$.fragment),LPe=l(),Lc=a("h2"),RC=a("a"),VFe=a("span"),F(x7.$$.fragment),Nyr=l(),XFe=a("span"),jyr=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),mr=a("div"),F($7.$$.fragment),Dyr=l(),xc=a("p"),Gyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=a("a"),Oyr=o("from_pretrained()"),Vyr=o(" class method or the "),IU=a("a"),Xyr=o("from_config()"),zyr=o(` class
method.`),Qyr=l(),k7=a("p"),Wyr=o("This class cannot be instantiated directly using "),zFe=a("code"),Hyr=o("__init__()"),Uyr=o(" (throws an error)."),Jyr=l(),jt=a("div"),F(S7.$$.fragment),Yyr=l(),QFe=a("p"),Kyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Zyr=l(),$c=a("p"),eLr=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),oLr=o("not"),rLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),tLr=o("from_pretrained()"),aLr=o(" to load the model weights."),nLr=l(),F(BC.$$.fragment),sLr=l(),jr=a("div"),F(R7.$$.fragment),lLr=l(),HFe=a("p"),iLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dLr=l(),mn=a("p"),cLr=o("The model class to instantiate is selected based on the "),UFe=a("code"),fLr=o("model_type"),mLr=o(` property of the config object (either
passed as an argument or loaded from `),JFe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=a("code"),pLr=o("pretrained_model_name_or_path"),uLr=o(":"),_Lr=l(),Se=a("ul"),PC=a("li"),KFe=a("strong"),bLr=o("bart"),vLr=o(" \u2014 "),NU=a("a"),FLr=o("FlaxBartForConditionalGeneration"),TLr=o(" (BART model)"),MLr=l(),IC=a("li"),ZFe=a("strong"),ELr=o("blenderbot"),CLr=o(" \u2014 "),jU=a("a"),wLr=o("FlaxBlenderbotForConditionalGeneration"),ALr=o(" (Blenderbot model)"),yLr=l(),qC=a("li"),e0e=a("strong"),LLr=o("blenderbot-small"),xLr=o(" \u2014 "),DU=a("a"),$Lr=o("FlaxBlenderbotSmallForConditionalGeneration"),kLr=o(" (BlenderbotSmall model)"),SLr=l(),NC=a("li"),o0e=a("strong"),RLr=o("encoder-decoder"),BLr=o(" \u2014 "),GU=a("a"),PLr=o("FlaxEncoderDecoderModel"),ILr=o(" (Encoder decoder model)"),qLr=l(),jC=a("li"),r0e=a("strong"),NLr=o("marian"),jLr=o(" \u2014 "),OU=a("a"),DLr=o("FlaxMarianMTModel"),GLr=o(" (Marian model)"),OLr=l(),DC=a("li"),t0e=a("strong"),VLr=o("mbart"),XLr=o(" \u2014 "),VU=a("a"),zLr=o("FlaxMBartForConditionalGeneration"),QLr=o(" (mBART model)"),WLr=l(),GC=a("li"),a0e=a("strong"),HLr=o("mt5"),ULr=o(" \u2014 "),XU=a("a"),JLr=o("FlaxMT5ForConditionalGeneration"),YLr=o(" (mT5 model)"),KLr=l(),OC=a("li"),n0e=a("strong"),ZLr=o("pegasus"),e8r=o(" \u2014 "),zU=a("a"),o8r=o("FlaxPegasusForConditionalGeneration"),r8r=o(" (Pegasus model)"),t8r=l(),VC=a("li"),s0e=a("strong"),a8r=o("t5"),n8r=o(" \u2014 "),QU=a("a"),s8r=o("FlaxT5ForConditionalGeneration"),l8r=o(" (T5 model)"),i8r=l(),F(XC.$$.fragment),$Pe=l(),kc=a("h2"),zC=a("a"),l0e=a("span"),F(B7.$$.fragment),d8r=l(),i0e=a("span"),c8r=o("FlaxAutoModelForSequenceClassification"),kPe=l(),gr=a("div"),F(P7.$$.fragment),f8r=l(),Sc=a("p"),m8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=a("a"),g8r=o("from_pretrained()"),h8r=o(" class method or the "),HU=a("a"),p8r=o("from_config()"),u8r=o(` class
method.`),_8r=l(),I7=a("p"),b8r=o("This class cannot be instantiated directly using "),d0e=a("code"),v8r=o("__init__()"),F8r=o(" (throws an error)."),T8r=l(),Dt=a("div"),F(q7.$$.fragment),M8r=l(),c0e=a("p"),E8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),C8r=l(),Rc=a("p"),w8r=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),A8r=o("not"),y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),L8r=o("from_pretrained()"),x8r=o(" to load the model weights."),$8r=l(),F(QC.$$.fragment),k8r=l(),Dr=a("div"),F(N7.$$.fragment),S8r=l(),m0e=a("p"),R8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B8r=l(),gn=a("p"),P8r=o("The model class to instantiate is selected based on the "),g0e=a("code"),I8r=o("model_type"),q8r=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),N8r=o("pretrained_model_name_or_path"),j8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),D8r=o("pretrained_model_name_or_path"),G8r=o(":"),O8r=l(),xe=a("ul"),WC=a("li"),u0e=a("strong"),V8r=o("albert"),X8r=o(" \u2014 "),JU=a("a"),z8r=o("FlaxAlbertForSequenceClassification"),Q8r=o(" (ALBERT model)"),W8r=l(),HC=a("li"),_0e=a("strong"),H8r=o("bart"),U8r=o(" \u2014 "),YU=a("a"),J8r=o("FlaxBartForSequenceClassification"),Y8r=o(" (BART model)"),K8r=l(),UC=a("li"),b0e=a("strong"),Z8r=o("bert"),e7r=o(" \u2014 "),KU=a("a"),o7r=o("FlaxBertForSequenceClassification"),r7r=o(" (BERT model)"),t7r=l(),JC=a("li"),v0e=a("strong"),a7r=o("big_bird"),n7r=o(" \u2014 "),ZU=a("a"),s7r=o("FlaxBigBirdForSequenceClassification"),l7r=o(" (BigBird model)"),i7r=l(),YC=a("li"),F0e=a("strong"),d7r=o("distilbert"),c7r=o(" \u2014 "),eJ=a("a"),f7r=o("FlaxDistilBertForSequenceClassification"),m7r=o(" (DistilBERT model)"),g7r=l(),KC=a("li"),T0e=a("strong"),h7r=o("electra"),p7r=o(" \u2014 "),oJ=a("a"),u7r=o("FlaxElectraForSequenceClassification"),_7r=o(" (ELECTRA model)"),b7r=l(),ZC=a("li"),M0e=a("strong"),v7r=o("mbart"),F7r=o(" \u2014 "),rJ=a("a"),T7r=o("FlaxMBartForSequenceClassification"),M7r=o(" (mBART model)"),E7r=l(),e5=a("li"),E0e=a("strong"),C7r=o("roberta"),w7r=o(" \u2014 "),tJ=a("a"),A7r=o("FlaxRobertaForSequenceClassification"),y7r=o(" (RoBERTa model)"),L7r=l(),o5=a("li"),C0e=a("strong"),x7r=o("roformer"),$7r=o(" \u2014 "),aJ=a("a"),k7r=o("FlaxRoFormerForSequenceClassification"),S7r=o(" (RoFormer model)"),R7r=l(),r5=a("li"),w0e=a("strong"),B7r=o("xlm-roberta"),P7r=o(" \u2014 "),nJ=a("a"),I7r=o("FlaxXLMRobertaForSequenceClassification"),q7r=o(" (XLM-RoBERTa model)"),N7r=l(),F(t5.$$.fragment),SPe=l(),Bc=a("h2"),a5=a("a"),A0e=a("span"),F(j7.$$.fragment),j7r=l(),y0e=a("span"),D7r=o("FlaxAutoModelForQuestionAnswering"),RPe=l(),hr=a("div"),F(D7.$$.fragment),G7r=l(),Pc=a("p"),O7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=a("a"),V7r=o("from_pretrained()"),X7r=o(" class method or the "),lJ=a("a"),z7r=o("from_config()"),Q7r=o(` class
method.`),W7r=l(),G7=a("p"),H7r=o("This class cannot be instantiated directly using "),L0e=a("code"),U7r=o("__init__()"),J7r=o(" (throws an error)."),Y7r=l(),Gt=a("div"),F(O7.$$.fragment),K7r=l(),x0e=a("p"),Z7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),exr=l(),Ic=a("p"),oxr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),rxr=o("not"),txr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),axr=o("from_pretrained()"),nxr=o(" to load the model weights."),sxr=l(),F(n5.$$.fragment),lxr=l(),Gr=a("div"),F(V7.$$.fragment),ixr=l(),k0e=a("p"),dxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cxr=l(),hn=a("p"),fxr=o("The model class to instantiate is selected based on the "),S0e=a("code"),mxr=o("model_type"),gxr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),hxr=o("pretrained_model_name_or_path"),pxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=a("code"),uxr=o("pretrained_model_name_or_path"),_xr=o(":"),bxr=l(),$e=a("ul"),s5=a("li"),P0e=a("strong"),vxr=o("albert"),Fxr=o(" \u2014 "),dJ=a("a"),Txr=o("FlaxAlbertForQuestionAnswering"),Mxr=o(" (ALBERT model)"),Exr=l(),l5=a("li"),I0e=a("strong"),Cxr=o("bart"),wxr=o(" \u2014 "),cJ=a("a"),Axr=o("FlaxBartForQuestionAnswering"),yxr=o(" (BART model)"),Lxr=l(),i5=a("li"),q0e=a("strong"),xxr=o("bert"),$xr=o(" \u2014 "),fJ=a("a"),kxr=o("FlaxBertForQuestionAnswering"),Sxr=o(" (BERT model)"),Rxr=l(),d5=a("li"),N0e=a("strong"),Bxr=o("big_bird"),Pxr=o(" \u2014 "),mJ=a("a"),Ixr=o("FlaxBigBirdForQuestionAnswering"),qxr=o(" (BigBird model)"),Nxr=l(),c5=a("li"),j0e=a("strong"),jxr=o("distilbert"),Dxr=o(" \u2014 "),gJ=a("a"),Gxr=o("FlaxDistilBertForQuestionAnswering"),Oxr=o(" (DistilBERT model)"),Vxr=l(),f5=a("li"),D0e=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),hJ=a("a"),Qxr=o("FlaxElectraForQuestionAnswering"),Wxr=o(" (ELECTRA model)"),Hxr=l(),m5=a("li"),G0e=a("strong"),Uxr=o("mbart"),Jxr=o(" \u2014 "),pJ=a("a"),Yxr=o("FlaxMBartForQuestionAnswering"),Kxr=o(" (mBART model)"),Zxr=l(),g5=a("li"),O0e=a("strong"),e9r=o("roberta"),o9r=o(" \u2014 "),uJ=a("a"),r9r=o("FlaxRobertaForQuestionAnswering"),t9r=o(" (RoBERTa model)"),a9r=l(),h5=a("li"),V0e=a("strong"),n9r=o("roformer"),s9r=o(" \u2014 "),_J=a("a"),l9r=o("FlaxRoFormerForQuestionAnswering"),i9r=o(" (RoFormer model)"),d9r=l(),p5=a("li"),X0e=a("strong"),c9r=o("xlm-roberta"),f9r=o(" \u2014 "),bJ=a("a"),m9r=o("FlaxXLMRobertaForQuestionAnswering"),g9r=o(" (XLM-RoBERTa model)"),h9r=l(),F(u5.$$.fragment),BPe=l(),qc=a("h2"),_5=a("a"),z0e=a("span"),F(X7.$$.fragment),p9r=l(),Q0e=a("span"),u9r=o("FlaxAutoModelForTokenClassification"),PPe=l(),pr=a("div"),F(z7.$$.fragment),_9r=l(),Nc=a("p"),b9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=a("a"),v9r=o("from_pretrained()"),F9r=o(" class method or the "),FJ=a("a"),T9r=o("from_config()"),M9r=o(` class
method.`),E9r=l(),Q7=a("p"),C9r=o("This class cannot be instantiated directly using "),W0e=a("code"),w9r=o("__init__()"),A9r=o(" (throws an error)."),y9r=l(),Ot=a("div"),F(W7.$$.fragment),L9r=l(),H0e=a("p"),x9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$9r=l(),jc=a("p"),k9r=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),S9r=o("not"),R9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=a("a"),B9r=o("from_pretrained()"),P9r=o(" to load the model weights."),I9r=l(),F(b5.$$.fragment),q9r=l(),Or=a("div"),F(H7.$$.fragment),N9r=l(),J0e=a("p"),j9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),D9r=l(),pn=a("p"),G9r=o("The model class to instantiate is selected based on the "),Y0e=a("code"),O9r=o("model_type"),V9r=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),X9r=o("pretrained_model_name_or_path"),z9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),Q9r=o("pretrained_model_name_or_path"),W9r=o(":"),H9r=l(),je=a("ul"),v5=a("li"),e6e=a("strong"),U9r=o("albert"),J9r=o(" \u2014 "),MJ=a("a"),Y9r=o("FlaxAlbertForTokenClassification"),K9r=o(" (ALBERT model)"),Z9r=l(),F5=a("li"),o6e=a("strong"),e$r=o("bert"),o$r=o(" \u2014 "),EJ=a("a"),r$r=o("FlaxBertForTokenClassification"),t$r=o(" (BERT model)"),a$r=l(),T5=a("li"),r6e=a("strong"),n$r=o("big_bird"),s$r=o(" \u2014 "),CJ=a("a"),l$r=o("FlaxBigBirdForTokenClassification"),i$r=o(" (BigBird model)"),d$r=l(),M5=a("li"),t6e=a("strong"),c$r=o("distilbert"),f$r=o(" \u2014 "),wJ=a("a"),m$r=o("FlaxDistilBertForTokenClassification"),g$r=o(" (DistilBERT model)"),h$r=l(),E5=a("li"),a6e=a("strong"),p$r=o("electra"),u$r=o(" \u2014 "),AJ=a("a"),_$r=o("FlaxElectraForTokenClassification"),b$r=o(" (ELECTRA model)"),v$r=l(),C5=a("li"),n6e=a("strong"),F$r=o("roberta"),T$r=o(" \u2014 "),yJ=a("a"),M$r=o("FlaxRobertaForTokenClassification"),E$r=o(" (RoBERTa model)"),C$r=l(),w5=a("li"),s6e=a("strong"),w$r=o("roformer"),A$r=o(" \u2014 "),LJ=a("a"),y$r=o("FlaxRoFormerForTokenClassification"),L$r=o(" (RoFormer model)"),x$r=l(),A5=a("li"),l6e=a("strong"),$$r=o("xlm-roberta"),k$r=o(" \u2014 "),xJ=a("a"),S$r=o("FlaxXLMRobertaForTokenClassification"),R$r=o(" (XLM-RoBERTa model)"),B$r=l(),F(y5.$$.fragment),IPe=l(),Dc=a("h2"),L5=a("a"),i6e=a("span"),F(U7.$$.fragment),P$r=l(),d6e=a("span"),I$r=o("FlaxAutoModelForMultipleChoice"),qPe=l(),ur=a("div"),F(J7.$$.fragment),q$r=l(),Gc=a("p"),N$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=a("a"),j$r=o("from_pretrained()"),D$r=o(" class method or the "),kJ=a("a"),G$r=o("from_config()"),O$r=o(` class
method.`),V$r=l(),Y7=a("p"),X$r=o("This class cannot be instantiated directly using "),c6e=a("code"),z$r=o("__init__()"),Q$r=o(" (throws an error)."),W$r=l(),Vt=a("div"),F(K7.$$.fragment),H$r=l(),f6e=a("p"),U$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),J$r=l(),Oc=a("p"),Y$r=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),K$r=o("not"),Z$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=a("a"),ekr=o("from_pretrained()"),okr=o(" to load the model weights."),rkr=l(),F(x5.$$.fragment),tkr=l(),Vr=a("div"),F(Z7.$$.fragment),akr=l(),g6e=a("p"),nkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),skr=l(),un=a("p"),lkr=o("The model class to instantiate is selected based on the "),h6e=a("code"),ikr=o("model_type"),dkr=o(` property of the config object (either
passed as an argument or loaded from `),p6e=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),mkr=o("pretrained_model_name_or_path"),gkr=o(":"),hkr=l(),De=a("ul"),$5=a("li"),_6e=a("strong"),pkr=o("albert"),ukr=o(" \u2014 "),RJ=a("a"),_kr=o("FlaxAlbertForMultipleChoice"),bkr=o(" (ALBERT model)"),vkr=l(),k5=a("li"),b6e=a("strong"),Fkr=o("bert"),Tkr=o(" \u2014 "),BJ=a("a"),Mkr=o("FlaxBertForMultipleChoice"),Ekr=o(" (BERT model)"),Ckr=l(),S5=a("li"),v6e=a("strong"),wkr=o("big_bird"),Akr=o(" \u2014 "),PJ=a("a"),ykr=o("FlaxBigBirdForMultipleChoice"),Lkr=o(" (BigBird model)"),xkr=l(),R5=a("li"),F6e=a("strong"),$kr=o("distilbert"),kkr=o(" \u2014 "),IJ=a("a"),Skr=o("FlaxDistilBertForMultipleChoice"),Rkr=o(" (DistilBERT model)"),Bkr=l(),B5=a("li"),T6e=a("strong"),Pkr=o("electra"),Ikr=o(" \u2014 "),qJ=a("a"),qkr=o("FlaxElectraForMultipleChoice"),Nkr=o(" (ELECTRA model)"),jkr=l(),P5=a("li"),M6e=a("strong"),Dkr=o("roberta"),Gkr=o(" \u2014 "),NJ=a("a"),Okr=o("FlaxRobertaForMultipleChoice"),Vkr=o(" (RoBERTa model)"),Xkr=l(),I5=a("li"),E6e=a("strong"),zkr=o("roformer"),Qkr=o(" \u2014 "),jJ=a("a"),Wkr=o("FlaxRoFormerForMultipleChoice"),Hkr=o(" (RoFormer model)"),Ukr=l(),q5=a("li"),C6e=a("strong"),Jkr=o("xlm-roberta"),Ykr=o(" \u2014 "),DJ=a("a"),Kkr=o("FlaxXLMRobertaForMultipleChoice"),Zkr=o(" (XLM-RoBERTa model)"),eSr=l(),F(N5.$$.fragment),NPe=l(),Vc=a("h2"),j5=a("a"),w6e=a("span"),F(ex.$$.fragment),oSr=l(),A6e=a("span"),rSr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),_r=a("div"),F(ox.$$.fragment),tSr=l(),Xc=a("p"),aSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=a("a"),nSr=o("from_pretrained()"),sSr=o(" class method or the "),OJ=a("a"),lSr=o("from_config()"),iSr=o(` class
method.`),dSr=l(),rx=a("p"),cSr=o("This class cannot be instantiated directly using "),y6e=a("code"),fSr=o("__init__()"),mSr=o(" (throws an error)."),gSr=l(),Xt=a("div"),F(tx.$$.fragment),hSr=l(),L6e=a("p"),pSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSr=l(),zc=a("p"),_Sr=o(`Note:
Loading a model from its configuration file does `),x6e=a("strong"),bSr=o("not"),vSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),FSr=o("from_pretrained()"),TSr=o(" to load the model weights."),MSr=l(),F(D5.$$.fragment),ESr=l(),Xr=a("div"),F(ax.$$.fragment),CSr=l(),$6e=a("p"),wSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ASr=l(),_n=a("p"),ySr=o("The model class to instantiate is selected based on the "),k6e=a("code"),LSr=o("model_type"),xSr=o(` property of the config object (either
passed as an argument or loaded from `),S6e=a("code"),$Sr=o("pretrained_model_name_or_path"),kSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=a("code"),SSr=o("pretrained_model_name_or_path"),RSr=o(":"),BSr=l(),B6e=a("ul"),G5=a("li"),P6e=a("strong"),PSr=o("bert"),ISr=o(" \u2014 "),XJ=a("a"),qSr=o("FlaxBertForNextSentencePrediction"),NSr=o(" (BERT model)"),jSr=l(),F(O5.$$.fragment),DPe=l(),Qc=a("h2"),V5=a("a"),I6e=a("span"),F(nx.$$.fragment),DSr=l(),q6e=a("span"),GSr=o("FlaxAutoModelForImageClassification"),GPe=l(),br=a("div"),F(sx.$$.fragment),OSr=l(),Wc=a("p"),VSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),XSr=o("from_pretrained()"),zSr=o(" class method or the "),QJ=a("a"),QSr=o("from_config()"),WSr=o(` class
method.`),HSr=l(),lx=a("p"),USr=o("This class cannot be instantiated directly using "),N6e=a("code"),JSr=o("__init__()"),YSr=o(" (throws an error)."),KSr=l(),zt=a("div"),F(ix.$$.fragment),ZSr=l(),j6e=a("p"),eRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),oRr=l(),Hc=a("p"),rRr=o(`Note:
Loading a model from its configuration file does `),D6e=a("strong"),tRr=o("not"),aRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),nRr=o("from_pretrained()"),sRr=o(" to load the model weights."),lRr=l(),F(X5.$$.fragment),iRr=l(),zr=a("div"),F(dx.$$.fragment),dRr=l(),G6e=a("p"),cRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),fRr=l(),bn=a("p"),mRr=o("The model class to instantiate is selected based on the "),O6e=a("code"),gRr=o("model_type"),hRr=o(` property of the config object (either
passed as an argument or loaded from `),V6e=a("code"),pRr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=a("code"),_Rr=o("pretrained_model_name_or_path"),bRr=o(":"),vRr=l(),cx=a("ul"),z5=a("li"),z6e=a("strong"),FRr=o("beit"),TRr=o(" \u2014 "),HJ=a("a"),MRr=o("FlaxBeitForImageClassification"),ERr=o(" (BEiT model)"),CRr=l(),Q5=a("li"),Q6e=a("strong"),wRr=o("vit"),ARr=o(" \u2014 "),UJ=a("a"),yRr=o("FlaxViTForImageClassification"),LRr=o(" (ViT model)"),xRr=l(),F(W5.$$.fragment),OPe=l(),Uc=a("h2"),H5=a("a"),W6e=a("span"),F(fx.$$.fragment),$Rr=l(),H6e=a("span"),kRr=o("FlaxAutoModelForVision2Seq"),VPe=l(),vr=a("div"),F(mx.$$.fragment),SRr=l(),Jc=a("p"),RRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=a("a"),BRr=o("from_pretrained()"),PRr=o(" class method or the "),YJ=a("a"),IRr=o("from_config()"),qRr=o(` class
method.`),NRr=l(),gx=a("p"),jRr=o("This class cannot be instantiated directly using "),U6e=a("code"),DRr=o("__init__()"),GRr=o(" (throws an error)."),ORr=l(),Qt=a("div"),F(hx.$$.fragment),VRr=l(),J6e=a("p"),XRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zRr=l(),Yc=a("p"),QRr=o(`Note:
Loading a model from its configuration file does `),Y6e=a("strong"),WRr=o("not"),HRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),URr=o("from_pretrained()"),JRr=o(" to load the model weights."),YRr=l(),F(U5.$$.fragment),KRr=l(),Qr=a("div"),F(px.$$.fragment),ZRr=l(),K6e=a("p"),eBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oBr=l(),vn=a("p"),rBr=o("The model class to instantiate is selected based on the "),Z6e=a("code"),tBr=o("model_type"),aBr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),nBr=o("pretrained_model_name_or_path"),sBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(":"),dBr=l(),rTe=a("ul"),J5=a("li"),tTe=a("strong"),cBr=o("vision-encoder-decoder"),fBr=o(" \u2014 "),ZJ=a("a"),mBr=o("FlaxVisionEncoderDecoderModel"),gBr=o(" (Vision Encoder decoder model)"),hBr=l(),F(Y5.$$.fragment),this.h()},l(f){const _=JEt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var ux=s(p);m=n(ux,"A",{id:!0,class:!0,href:!0});var aTe=s(m);u=n(aTe,"SPAN",{});var nTe=s(u);T(d.$$.fragment,nTe),nTe.forEach(t),aTe.forEach(t),h=i(ux),Fo=n(ux,"SPAN",{});var sTe=s(Fo);oi=r(sTe,"Auto Classes"),sTe.forEach(t),ux.forEach(t),of=i(f),Yr=n(f,"P",{});var _x=s(Yr);ri=r(_x,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(_x,"CODE",{});var lTe=s(ti);gA=r(lTe,"from_pretrained()"),lTe.forEach(t),rf=r(_x,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),_x.forEach(t),qe=i(f),Ve=n(f,"P",{});var Fn=s(Ve);ai=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var iTe=s(Tn);hA=r(iTe,"AutoConfig"),iTe.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var dTe=s(En);pA=r(dTe,"AutoModel"),dTe.forEach(t),ni=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var cTe=s(Cn);uA=r(cTe,"AutoTokenizer"),cTe.forEach(t),si=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Xe=i(f),Ae=n(f,"P",{});var bx=s(Ae);L9=r(bx,"will create a model that is an instance of "),li=n(bx,"A",{href:!0});var fTe=s(li);x9=r(fTe,"BertModel"),fTe.forEach(t),$9=r(bx,"."),bx.forEach(t),To=i(f),va=n(f,"P",{});var vx=s(va);k9=r(vx,"There is one class of "),af=n(vx,"CODE",{});var mTe=s(af);S9=r(mTe,"AutoModel"),mTe.forEach(t),Uqe=r(vx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),vx.forEach(t),VRe=i(f),ii=n(f,"H2",{class:!0});var Fx=s(ii);nf=n(Fx,"A",{id:!0,class:!0,href:!0});var gTe=s(nf);XK=n(gTe,"SPAN",{});var hTe=s(XK);T(_A.$$.fragment,hTe),hTe.forEach(t),gTe.forEach(t),Jqe=i(Fx),zK=n(Fx,"SPAN",{});var pTe=s(zK);Yqe=r(pTe,"Extending the Auto Classes"),pTe.forEach(t),Fx.forEach(t),XRe=i(f),wn=n(f,"P",{});var Kc=s(wn);Kqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),QK=n(Kc,"CODE",{});var uTe=s(QK);Zqe=r(uTe,"NewModel"),uTe.forEach(t),eNe=r(Kc,", make sure you have a "),WK=n(Kc,"CODE",{});var _Te=s(WK);oNe=r(_Te,"NewModelConfig"),_Te.forEach(t),rNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),zRe=i(f),T(bA.$$.fragment,f),QRe=i(f),R9=n(f,"P",{});var bTe=s(R9);tNe=r(bTe,"You will then be able to use the auto classes like you would usually do!"),bTe.forEach(t),WRe=i(f),T(sf.$$.fragment,f),HRe=i(f),di=n(f,"H2",{class:!0});var Tx=s(di);lf=n(Tx,"A",{id:!0,class:!0,href:!0});var vTe=s(lf);HK=n(vTe,"SPAN",{});var FTe=s(HK);T(vA.$$.fragment,FTe),FTe.forEach(t),vTe.forEach(t),aNe=i(Tx),UK=n(Tx,"SPAN",{});var TTe=s(UK);nNe=r(TTe,"AutoConfig"),TTe.forEach(t),Tx.forEach(t),URe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(FA.$$.fragment,Ur),sNe=i(Ur),TA=n(Ur,"P",{});var Mx=s(TA);lNe=r(Mx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),B9=n(Mx,"A",{href:!0});var MTe=s(B9);iNe=r(MTe,"from_pretrained()"),MTe.forEach(t),dNe=r(Mx," class method."),Mx.forEach(t),cNe=i(Ur),MA=n(Ur,"P",{});var Ex=s(MA);fNe=r(Ex,"This class cannot be instantiated directly using "),JK=n(Ex,"CODE",{});var ETe=s(JK);mNe=r(ETe,"__init__()"),ETe.forEach(t),gNe=r(Ex," (throws an error)."),Ex.forEach(t),hNe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(EA.$$.fragment,Jr),pNe=i(Jr),YK=n(Jr,"P",{});var CTe=s(YK);uNe=r(CTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CTe.forEach(t),_Ne=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);bNe=r(Zc,"The configuration class to instantiate is selected based on the "),KK=n(Zc,"CODE",{});var wTe=s(KK);vNe=r(wTe,"model_type"),wTe.forEach(t),FNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),ZK=n(Zc,"CODE",{});var ATe=s(ZK);TNe=r(ATe,"pretrained_model_name_or_path"),ATe.forEach(t),MNe=r(Zc,":"),Zc.forEach(t),ENe=i(Jr),A=n(Jr,"UL",{});var y=s(A);df=n(y,"LI",{});var K5=s(df);eZ=n(K5,"STRONG",{});var yTe=s(eZ);CNe=r(yTe,"albert"),yTe.forEach(t),wNe=r(K5," \u2014 "),P9=n(K5,"A",{href:!0});var LTe=s(P9);ANe=r(LTe,"AlbertConfig"),LTe.forEach(t),yNe=r(K5," (ALBERT model)"),K5.forEach(t),LNe=i(y),cf=n(y,"LI",{});var Z5=s(cf);oZ=n(Z5,"STRONG",{});var xTe=s(oZ);xNe=r(xTe,"bart"),xTe.forEach(t),$Ne=r(Z5," \u2014 "),I9=n(Z5,"A",{href:!0});var $Te=s(I9);kNe=r($Te,"BartConfig"),$Te.forEach(t),SNe=r(Z5," (BART model)"),Z5.forEach(t),RNe=i(y),ff=n(y,"LI",{});var e3=s(ff);rZ=n(e3,"STRONG",{});var kTe=s(rZ);BNe=r(kTe,"beit"),kTe.forEach(t),PNe=r(e3," \u2014 "),q9=n(e3,"A",{href:!0});var STe=s(q9);INe=r(STe,"BeitConfig"),STe.forEach(t),qNe=r(e3," (BEiT model)"),e3.forEach(t),NNe=i(y),mf=n(y,"LI",{});var o3=s(mf);tZ=n(o3,"STRONG",{});var RTe=s(tZ);jNe=r(RTe,"bert"),RTe.forEach(t),DNe=r(o3," \u2014 "),N9=n(o3,"A",{href:!0});var BTe=s(N9);GNe=r(BTe,"BertConfig"),BTe.forEach(t),ONe=r(o3," (BERT model)"),o3.forEach(t),VNe=i(y),gf=n(y,"LI",{});var r3=s(gf);aZ=n(r3,"STRONG",{});var PTe=s(aZ);XNe=r(PTe,"bert-generation"),PTe.forEach(t),zNe=r(r3," \u2014 "),j9=n(r3,"A",{href:!0});var ITe=s(j9);QNe=r(ITe,"BertGenerationConfig"),ITe.forEach(t),WNe=r(r3," (Bert Generation model)"),r3.forEach(t),HNe=i(y),hf=n(y,"LI",{});var t3=s(hf);nZ=n(t3,"STRONG",{});var qTe=s(nZ);UNe=r(qTe,"big_bird"),qTe.forEach(t),JNe=r(t3," \u2014 "),D9=n(t3,"A",{href:!0});var NTe=s(D9);YNe=r(NTe,"BigBirdConfig"),NTe.forEach(t),KNe=r(t3," (BigBird model)"),t3.forEach(t),ZNe=i(y),pf=n(y,"LI",{});var a3=s(pf);sZ=n(a3,"STRONG",{});var jTe=s(sZ);eje=r(jTe,"bigbird_pegasus"),jTe.forEach(t),oje=r(a3," \u2014 "),G9=n(a3,"A",{href:!0});var DTe=s(G9);rje=r(DTe,"BigBirdPegasusConfig"),DTe.forEach(t),tje=r(a3," (BigBirdPegasus model)"),a3.forEach(t),aje=i(y),uf=n(y,"LI",{});var n3=s(uf);lZ=n(n3,"STRONG",{});var GTe=s(lZ);nje=r(GTe,"blenderbot"),GTe.forEach(t),sje=r(n3," \u2014 "),O9=n(n3,"A",{href:!0});var OTe=s(O9);lje=r(OTe,"BlenderbotConfig"),OTe.forEach(t),ije=r(n3," (Blenderbot model)"),n3.forEach(t),dje=i(y),_f=n(y,"LI",{});var s3=s(_f);iZ=n(s3,"STRONG",{});var VTe=s(iZ);cje=r(VTe,"blenderbot-small"),VTe.forEach(t),fje=r(s3," \u2014 "),V9=n(s3,"A",{href:!0});var XTe=s(V9);mje=r(XTe,"BlenderbotSmallConfig"),XTe.forEach(t),gje=r(s3," (BlenderbotSmall model)"),s3.forEach(t),hje=i(y),bf=n(y,"LI",{});var l3=s(bf);dZ=n(l3,"STRONG",{});var zTe=s(dZ);pje=r(zTe,"camembert"),zTe.forEach(t),uje=r(l3," \u2014 "),X9=n(l3,"A",{href:!0});var QTe=s(X9);_je=r(QTe,"CamembertConfig"),QTe.forEach(t),bje=r(l3," (CamemBERT model)"),l3.forEach(t),vje=i(y),vf=n(y,"LI",{});var i3=s(vf);cZ=n(i3,"STRONG",{});var WTe=s(cZ);Fje=r(WTe,"canine"),WTe.forEach(t),Tje=r(i3," \u2014 "),z9=n(i3,"A",{href:!0});var HTe=s(z9);Mje=r(HTe,"CanineConfig"),HTe.forEach(t),Eje=r(i3," (Canine model)"),i3.forEach(t),Cje=i(y),Ff=n(y,"LI",{});var d3=s(Ff);fZ=n(d3,"STRONG",{});var UTe=s(fZ);wje=r(UTe,"clip"),UTe.forEach(t),Aje=r(d3," \u2014 "),Q9=n(d3,"A",{href:!0});var JTe=s(Q9);yje=r(JTe,"CLIPConfig"),JTe.forEach(t),Lje=r(d3," (CLIP model)"),d3.forEach(t),xje=i(y),Tf=n(y,"LI",{});var c3=s(Tf);mZ=n(c3,"STRONG",{});var YTe=s(mZ);$je=r(YTe,"convbert"),YTe.forEach(t),kje=r(c3," \u2014 "),W9=n(c3,"A",{href:!0});var KTe=s(W9);Sje=r(KTe,"ConvBertConfig"),KTe.forEach(t),Rje=r(c3," (ConvBERT model)"),c3.forEach(t),Bje=i(y),Mf=n(y,"LI",{});var f3=s(Mf);gZ=n(f3,"STRONG",{});var ZTe=s(gZ);Pje=r(ZTe,"convnext"),ZTe.forEach(t),Ije=r(f3," \u2014 "),H9=n(f3,"A",{href:!0});var eMe=s(H9);qje=r(eMe,"ConvNextConfig"),eMe.forEach(t),Nje=r(f3," (ConvNext model)"),f3.forEach(t),jje=i(y),Ef=n(y,"LI",{});var m3=s(Ef);hZ=n(m3,"STRONG",{});var oMe=s(hZ);Dje=r(oMe,"ctrl"),oMe.forEach(t),Gje=r(m3," \u2014 "),U9=n(m3,"A",{href:!0});var rMe=s(U9);Oje=r(rMe,"CTRLConfig"),rMe.forEach(t),Vje=r(m3," (CTRL model)"),m3.forEach(t),Xje=i(y),Cf=n(y,"LI",{});var g3=s(Cf);pZ=n(g3,"STRONG",{});var tMe=s(pZ);zje=r(tMe,"data2vec-audio"),tMe.forEach(t),Qje=r(g3," \u2014 "),J9=n(g3,"A",{href:!0});var aMe=s(J9);Wje=r(aMe,"Data2VecAudioConfig"),aMe.forEach(t),Hje=r(g3," (Data2VecAudio model)"),g3.forEach(t),Uje=i(y),wf=n(y,"LI",{});var h3=s(wf);uZ=n(h3,"STRONG",{});var nMe=s(uZ);Jje=r(nMe,"data2vec-text"),nMe.forEach(t),Yje=r(h3," \u2014 "),Y9=n(h3,"A",{href:!0});var sMe=s(Y9);Kje=r(sMe,"Data2VecTextConfig"),sMe.forEach(t),Zje=r(h3," (Data2VecText model)"),h3.forEach(t),eDe=i(y),Af=n(y,"LI",{});var p3=s(Af);_Z=n(p3,"STRONG",{});var lMe=s(_Z);oDe=r(lMe,"data2vec-vision"),lMe.forEach(t),rDe=r(p3," \u2014 "),K9=n(p3,"A",{href:!0});var iMe=s(K9);tDe=r(iMe,"Data2VecVisionConfig"),iMe.forEach(t),aDe=r(p3," (Data2VecVision model)"),p3.forEach(t),nDe=i(y),yf=n(y,"LI",{});var u3=s(yf);bZ=n(u3,"STRONG",{});var dMe=s(bZ);sDe=r(dMe,"deberta"),dMe.forEach(t),lDe=r(u3," \u2014 "),Z9=n(u3,"A",{href:!0});var cMe=s(Z9);iDe=r(cMe,"DebertaConfig"),cMe.forEach(t),dDe=r(u3," (DeBERTa model)"),u3.forEach(t),cDe=i(y),Lf=n(y,"LI",{});var _3=s(Lf);vZ=n(_3,"STRONG",{});var fMe=s(vZ);fDe=r(fMe,"deberta-v2"),fMe.forEach(t),mDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var mMe=s(e$);gDe=r(mMe,"DebertaV2Config"),mMe.forEach(t),hDe=r(_3," (DeBERTa-v2 model)"),_3.forEach(t),pDe=i(y),xf=n(y,"LI",{});var b3=s(xf);FZ=n(b3,"STRONG",{});var gMe=s(FZ);uDe=r(gMe,"decision_transformer"),gMe.forEach(t),_De=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var hMe=s(o$);bDe=r(hMe,"DecisionTransformerConfig"),hMe.forEach(t),vDe=r(b3," (Decision Transformer model)"),b3.forEach(t),FDe=i(y),$f=n(y,"LI",{});var v3=s($f);TZ=n(v3,"STRONG",{});var pMe=s(TZ);TDe=r(pMe,"deit"),pMe.forEach(t),MDe=r(v3," \u2014 "),r$=n(v3,"A",{href:!0});var uMe=s(r$);EDe=r(uMe,"DeiTConfig"),uMe.forEach(t),CDe=r(v3," (DeiT model)"),v3.forEach(t),wDe=i(y),kf=n(y,"LI",{});var _Me=s(kf);MZ=n(_Me,"STRONG",{});var uBr=s(MZ);ADe=r(uBr,"detr"),uBr.forEach(t),yDe=r(_Me," \u2014 "),t$=n(_Me,"A",{href:!0});var _Br=s(t$);LDe=r(_Br,"DetrConfig"),_Br.forEach(t),xDe=r(_Me," (DETR model)"),_Me.forEach(t),$De=i(y),Sf=n(y,"LI",{});var bMe=s(Sf);EZ=n(bMe,"STRONG",{});var bBr=s(EZ);kDe=r(bBr,"distilbert"),bBr.forEach(t),SDe=r(bMe," \u2014 "),a$=n(bMe,"A",{href:!0});var vBr=s(a$);RDe=r(vBr,"DistilBertConfig"),vBr.forEach(t),BDe=r(bMe," (DistilBERT model)"),bMe.forEach(t),PDe=i(y),Rf=n(y,"LI",{});var vMe=s(Rf);CZ=n(vMe,"STRONG",{});var FBr=s(CZ);IDe=r(FBr,"dpr"),FBr.forEach(t),qDe=r(vMe," \u2014 "),n$=n(vMe,"A",{href:!0});var TBr=s(n$);NDe=r(TBr,"DPRConfig"),TBr.forEach(t),jDe=r(vMe," (DPR model)"),vMe.forEach(t),DDe=i(y),Bf=n(y,"LI",{});var FMe=s(Bf);wZ=n(FMe,"STRONG",{});var MBr=s(wZ);GDe=r(MBr,"dpt"),MBr.forEach(t),ODe=r(FMe," \u2014 "),s$=n(FMe,"A",{href:!0});var EBr=s(s$);VDe=r(EBr,"DPTConfig"),EBr.forEach(t),XDe=r(FMe," (DPT model)"),FMe.forEach(t),zDe=i(y),Pf=n(y,"LI",{});var TMe=s(Pf);AZ=n(TMe,"STRONG",{});var CBr=s(AZ);QDe=r(CBr,"electra"),CBr.forEach(t),WDe=r(TMe," \u2014 "),l$=n(TMe,"A",{href:!0});var wBr=s(l$);HDe=r(wBr,"ElectraConfig"),wBr.forEach(t),UDe=r(TMe," (ELECTRA model)"),TMe.forEach(t),JDe=i(y),If=n(y,"LI",{});var MMe=s(If);yZ=n(MMe,"STRONG",{});var ABr=s(yZ);YDe=r(ABr,"encoder-decoder"),ABr.forEach(t),KDe=r(MMe," \u2014 "),i$=n(MMe,"A",{href:!0});var yBr=s(i$);ZDe=r(yBr,"EncoderDecoderConfig"),yBr.forEach(t),eGe=r(MMe," (Encoder decoder model)"),MMe.forEach(t),oGe=i(y),qf=n(y,"LI",{});var EMe=s(qf);LZ=n(EMe,"STRONG",{});var LBr=s(LZ);rGe=r(LBr,"flaubert"),LBr.forEach(t),tGe=r(EMe," \u2014 "),d$=n(EMe,"A",{href:!0});var xBr=s(d$);aGe=r(xBr,"FlaubertConfig"),xBr.forEach(t),nGe=r(EMe," (FlauBERT model)"),EMe.forEach(t),sGe=i(y),Nf=n(y,"LI",{});var CMe=s(Nf);xZ=n(CMe,"STRONG",{});var $Br=s(xZ);lGe=r($Br,"fnet"),$Br.forEach(t),iGe=r(CMe," \u2014 "),c$=n(CMe,"A",{href:!0});var kBr=s(c$);dGe=r(kBr,"FNetConfig"),kBr.forEach(t),cGe=r(CMe," (FNet model)"),CMe.forEach(t),fGe=i(y),jf=n(y,"LI",{});var wMe=s(jf);$Z=n(wMe,"STRONG",{});var SBr=s($Z);mGe=r(SBr,"fsmt"),SBr.forEach(t),gGe=r(wMe," \u2014 "),f$=n(wMe,"A",{href:!0});var RBr=s(f$);hGe=r(RBr,"FSMTConfig"),RBr.forEach(t),pGe=r(wMe," (FairSeq Machine-Translation model)"),wMe.forEach(t),uGe=i(y),Df=n(y,"LI",{});var AMe=s(Df);kZ=n(AMe,"STRONG",{});var BBr=s(kZ);_Ge=r(BBr,"funnel"),BBr.forEach(t),bGe=r(AMe," \u2014 "),m$=n(AMe,"A",{href:!0});var PBr=s(m$);vGe=r(PBr,"FunnelConfig"),PBr.forEach(t),FGe=r(AMe," (Funnel Transformer model)"),AMe.forEach(t),TGe=i(y),Gf=n(y,"LI",{});var yMe=s(Gf);SZ=n(yMe,"STRONG",{});var IBr=s(SZ);MGe=r(IBr,"glpn"),IBr.forEach(t),EGe=r(yMe," \u2014 "),g$=n(yMe,"A",{href:!0});var qBr=s(g$);CGe=r(qBr,"GLPNConfig"),qBr.forEach(t),wGe=r(yMe," (GLPN model)"),yMe.forEach(t),AGe=i(y),Of=n(y,"LI",{});var LMe=s(Of);RZ=n(LMe,"STRONG",{});var NBr=s(RZ);yGe=r(NBr,"gpt2"),NBr.forEach(t),LGe=r(LMe," \u2014 "),h$=n(LMe,"A",{href:!0});var jBr=s(h$);xGe=r(jBr,"GPT2Config"),jBr.forEach(t),$Ge=r(LMe," (OpenAI GPT-2 model)"),LMe.forEach(t),kGe=i(y),Vf=n(y,"LI",{});var xMe=s(Vf);BZ=n(xMe,"STRONG",{});var DBr=s(BZ);SGe=r(DBr,"gpt_neo"),DBr.forEach(t),RGe=r(xMe," \u2014 "),p$=n(xMe,"A",{href:!0});var GBr=s(p$);BGe=r(GBr,"GPTNeoConfig"),GBr.forEach(t),PGe=r(xMe," (GPT Neo model)"),xMe.forEach(t),IGe=i(y),Xf=n(y,"LI",{});var $Me=s(Xf);PZ=n($Me,"STRONG",{});var OBr=s(PZ);qGe=r(OBr,"gptj"),OBr.forEach(t),NGe=r($Me," \u2014 "),u$=n($Me,"A",{href:!0});var VBr=s(u$);jGe=r(VBr,"GPTJConfig"),VBr.forEach(t),DGe=r($Me," (GPT-J model)"),$Me.forEach(t),GGe=i(y),zf=n(y,"LI",{});var kMe=s(zf);IZ=n(kMe,"STRONG",{});var XBr=s(IZ);OGe=r(XBr,"hubert"),XBr.forEach(t),VGe=r(kMe," \u2014 "),_$=n(kMe,"A",{href:!0});var zBr=s(_$);XGe=r(zBr,"HubertConfig"),zBr.forEach(t),zGe=r(kMe," (Hubert model)"),kMe.forEach(t),QGe=i(y),Qf=n(y,"LI",{});var SMe=s(Qf);qZ=n(SMe,"STRONG",{});var QBr=s(qZ);WGe=r(QBr,"ibert"),QBr.forEach(t),HGe=r(SMe," \u2014 "),b$=n(SMe,"A",{href:!0});var WBr=s(b$);UGe=r(WBr,"IBertConfig"),WBr.forEach(t),JGe=r(SMe," (I-BERT model)"),SMe.forEach(t),YGe=i(y),Wf=n(y,"LI",{});var RMe=s(Wf);NZ=n(RMe,"STRONG",{});var HBr=s(NZ);KGe=r(HBr,"imagegpt"),HBr.forEach(t),ZGe=r(RMe," \u2014 "),v$=n(RMe,"A",{href:!0});var UBr=s(v$);eOe=r(UBr,"ImageGPTConfig"),UBr.forEach(t),oOe=r(RMe," (ImageGPT model)"),RMe.forEach(t),rOe=i(y),Hf=n(y,"LI",{});var BMe=s(Hf);jZ=n(BMe,"STRONG",{});var JBr=s(jZ);tOe=r(JBr,"layoutlm"),JBr.forEach(t),aOe=r(BMe," \u2014 "),F$=n(BMe,"A",{href:!0});var YBr=s(F$);nOe=r(YBr,"LayoutLMConfig"),YBr.forEach(t),sOe=r(BMe," (LayoutLM model)"),BMe.forEach(t),lOe=i(y),Uf=n(y,"LI",{});var PMe=s(Uf);DZ=n(PMe,"STRONG",{});var KBr=s(DZ);iOe=r(KBr,"layoutlmv2"),KBr.forEach(t),dOe=r(PMe," \u2014 "),T$=n(PMe,"A",{href:!0});var ZBr=s(T$);cOe=r(ZBr,"LayoutLMv2Config"),ZBr.forEach(t),fOe=r(PMe," (LayoutLMv2 model)"),PMe.forEach(t),mOe=i(y),Jf=n(y,"LI",{});var IMe=s(Jf);GZ=n(IMe,"STRONG",{});var ePr=s(GZ);gOe=r(ePr,"led"),ePr.forEach(t),hOe=r(IMe," \u2014 "),M$=n(IMe,"A",{href:!0});var oPr=s(M$);pOe=r(oPr,"LEDConfig"),oPr.forEach(t),uOe=r(IMe," (LED model)"),IMe.forEach(t),_Oe=i(y),Yf=n(y,"LI",{});var qMe=s(Yf);OZ=n(qMe,"STRONG",{});var rPr=s(OZ);bOe=r(rPr,"longformer"),rPr.forEach(t),vOe=r(qMe," \u2014 "),E$=n(qMe,"A",{href:!0});var tPr=s(E$);FOe=r(tPr,"LongformerConfig"),tPr.forEach(t),TOe=r(qMe," (Longformer model)"),qMe.forEach(t),MOe=i(y),Kf=n(y,"LI",{});var NMe=s(Kf);VZ=n(NMe,"STRONG",{});var aPr=s(VZ);EOe=r(aPr,"luke"),aPr.forEach(t),COe=r(NMe," \u2014 "),C$=n(NMe,"A",{href:!0});var nPr=s(C$);wOe=r(nPr,"LukeConfig"),nPr.forEach(t),AOe=r(NMe," (LUKE model)"),NMe.forEach(t),yOe=i(y),Zf=n(y,"LI",{});var jMe=s(Zf);XZ=n(jMe,"STRONG",{});var sPr=s(XZ);LOe=r(sPr,"lxmert"),sPr.forEach(t),xOe=r(jMe," \u2014 "),w$=n(jMe,"A",{href:!0});var lPr=s(w$);$Oe=r(lPr,"LxmertConfig"),lPr.forEach(t),kOe=r(jMe," (LXMERT model)"),jMe.forEach(t),SOe=i(y),em=n(y,"LI",{});var DMe=s(em);zZ=n(DMe,"STRONG",{});var iPr=s(zZ);ROe=r(iPr,"m2m_100"),iPr.forEach(t),BOe=r(DMe," \u2014 "),A$=n(DMe,"A",{href:!0});var dPr=s(A$);POe=r(dPr,"M2M100Config"),dPr.forEach(t),IOe=r(DMe," (M2M100 model)"),DMe.forEach(t),qOe=i(y),om=n(y,"LI",{});var GMe=s(om);QZ=n(GMe,"STRONG",{});var cPr=s(QZ);NOe=r(cPr,"marian"),cPr.forEach(t),jOe=r(GMe," \u2014 "),y$=n(GMe,"A",{href:!0});var fPr=s(y$);DOe=r(fPr,"MarianConfig"),fPr.forEach(t),GOe=r(GMe," (Marian model)"),GMe.forEach(t),OOe=i(y),rm=n(y,"LI",{});var OMe=s(rm);WZ=n(OMe,"STRONG",{});var mPr=s(WZ);VOe=r(mPr,"maskformer"),mPr.forEach(t),XOe=r(OMe," \u2014 "),L$=n(OMe,"A",{href:!0});var gPr=s(L$);zOe=r(gPr,"MaskFormerConfig"),gPr.forEach(t),QOe=r(OMe," (MaskFormer model)"),OMe.forEach(t),WOe=i(y),tm=n(y,"LI",{});var VMe=s(tm);HZ=n(VMe,"STRONG",{});var hPr=s(HZ);HOe=r(hPr,"mbart"),hPr.forEach(t),UOe=r(VMe," \u2014 "),x$=n(VMe,"A",{href:!0});var pPr=s(x$);JOe=r(pPr,"MBartConfig"),pPr.forEach(t),YOe=r(VMe," (mBART model)"),VMe.forEach(t),KOe=i(y),am=n(y,"LI",{});var XMe=s(am);UZ=n(XMe,"STRONG",{});var uPr=s(UZ);ZOe=r(uPr,"mctc"),uPr.forEach(t),eVe=r(XMe," \u2014 "),$$=n(XMe,"A",{href:!0});var _Pr=s($$);oVe=r(_Pr,"MCTCConfig"),_Pr.forEach(t),rVe=r(XMe," (MCTC model)"),XMe.forEach(t),tVe=i(y),nm=n(y,"LI",{});var zMe=s(nm);JZ=n(zMe,"STRONG",{});var bPr=s(JZ);aVe=r(bPr,"megatron-bert"),bPr.forEach(t),nVe=r(zMe," \u2014 "),k$=n(zMe,"A",{href:!0});var vPr=s(k$);sVe=r(vPr,"MegatronBertConfig"),vPr.forEach(t),lVe=r(zMe," (MegatronBert model)"),zMe.forEach(t),iVe=i(y),sm=n(y,"LI",{});var QMe=s(sm);YZ=n(QMe,"STRONG",{});var FPr=s(YZ);dVe=r(FPr,"mobilebert"),FPr.forEach(t),cVe=r(QMe," \u2014 "),S$=n(QMe,"A",{href:!0});var TPr=s(S$);fVe=r(TPr,"MobileBertConfig"),TPr.forEach(t),mVe=r(QMe," (MobileBERT model)"),QMe.forEach(t),gVe=i(y),lm=n(y,"LI",{});var WMe=s(lm);KZ=n(WMe,"STRONG",{});var MPr=s(KZ);hVe=r(MPr,"mpnet"),MPr.forEach(t),pVe=r(WMe," \u2014 "),R$=n(WMe,"A",{href:!0});var EPr=s(R$);uVe=r(EPr,"MPNetConfig"),EPr.forEach(t),_Ve=r(WMe," (MPNet model)"),WMe.forEach(t),bVe=i(y),im=n(y,"LI",{});var HMe=s(im);ZZ=n(HMe,"STRONG",{});var CPr=s(ZZ);vVe=r(CPr,"mt5"),CPr.forEach(t),FVe=r(HMe," \u2014 "),B$=n(HMe,"A",{href:!0});var wPr=s(B$);TVe=r(wPr,"MT5Config"),wPr.forEach(t),MVe=r(HMe," (mT5 model)"),HMe.forEach(t),EVe=i(y),dm=n(y,"LI",{});var UMe=s(dm);eee=n(UMe,"STRONG",{});var APr=s(eee);CVe=r(APr,"nystromformer"),APr.forEach(t),wVe=r(UMe," \u2014 "),P$=n(UMe,"A",{href:!0});var yPr=s(P$);AVe=r(yPr,"NystromformerConfig"),yPr.forEach(t),yVe=r(UMe," (Nystromformer model)"),UMe.forEach(t),LVe=i(y),cm=n(y,"LI",{});var JMe=s(cm);oee=n(JMe,"STRONG",{});var LPr=s(oee);xVe=r(LPr,"openai-gpt"),LPr.forEach(t),$Ve=r(JMe," \u2014 "),I$=n(JMe,"A",{href:!0});var xPr=s(I$);kVe=r(xPr,"OpenAIGPTConfig"),xPr.forEach(t),SVe=r(JMe," (OpenAI GPT model)"),JMe.forEach(t),RVe=i(y),fm=n(y,"LI",{});var YMe=s(fm);ree=n(YMe,"STRONG",{});var $Pr=s(ree);BVe=r($Pr,"pegasus"),$Pr.forEach(t),PVe=r(YMe," \u2014 "),q$=n(YMe,"A",{href:!0});var kPr=s(q$);IVe=r(kPr,"PegasusConfig"),kPr.forEach(t),qVe=r(YMe," (Pegasus model)"),YMe.forEach(t),NVe=i(y),mm=n(y,"LI",{});var KMe=s(mm);tee=n(KMe,"STRONG",{});var SPr=s(tee);jVe=r(SPr,"perceiver"),SPr.forEach(t),DVe=r(KMe," \u2014 "),N$=n(KMe,"A",{href:!0});var RPr=s(N$);GVe=r(RPr,"PerceiverConfig"),RPr.forEach(t),OVe=r(KMe," (Perceiver model)"),KMe.forEach(t),VVe=i(y),gm=n(y,"LI",{});var ZMe=s(gm);aee=n(ZMe,"STRONG",{});var BPr=s(aee);XVe=r(BPr,"plbart"),BPr.forEach(t),zVe=r(ZMe," \u2014 "),j$=n(ZMe,"A",{href:!0});var PPr=s(j$);QVe=r(PPr,"PLBartConfig"),PPr.forEach(t),WVe=r(ZMe," (PLBart model)"),ZMe.forEach(t),HVe=i(y),hm=n(y,"LI",{});var eEe=s(hm);nee=n(eEe,"STRONG",{});var IPr=s(nee);UVe=r(IPr,"poolformer"),IPr.forEach(t),JVe=r(eEe," \u2014 "),D$=n(eEe,"A",{href:!0});var qPr=s(D$);YVe=r(qPr,"PoolFormerConfig"),qPr.forEach(t),KVe=r(eEe," (PoolFormer model)"),eEe.forEach(t),ZVe=i(y),pm=n(y,"LI",{});var oEe=s(pm);see=n(oEe,"STRONG",{});var NPr=s(see);eXe=r(NPr,"prophetnet"),NPr.forEach(t),oXe=r(oEe," \u2014 "),G$=n(oEe,"A",{href:!0});var jPr=s(G$);rXe=r(jPr,"ProphetNetConfig"),jPr.forEach(t),tXe=r(oEe," (ProphetNet model)"),oEe.forEach(t),aXe=i(y),um=n(y,"LI",{});var rEe=s(um);lee=n(rEe,"STRONG",{});var DPr=s(lee);nXe=r(DPr,"qdqbert"),DPr.forEach(t),sXe=r(rEe," \u2014 "),O$=n(rEe,"A",{href:!0});var GPr=s(O$);lXe=r(GPr,"QDQBertConfig"),GPr.forEach(t),iXe=r(rEe," (QDQBert model)"),rEe.forEach(t),dXe=i(y),_m=n(y,"LI",{});var tEe=s(_m);iee=n(tEe,"STRONG",{});var OPr=s(iee);cXe=r(OPr,"rag"),OPr.forEach(t),fXe=r(tEe," \u2014 "),V$=n(tEe,"A",{href:!0});var VPr=s(V$);mXe=r(VPr,"RagConfig"),VPr.forEach(t),gXe=r(tEe," (RAG model)"),tEe.forEach(t),hXe=i(y),bm=n(y,"LI",{});var aEe=s(bm);dee=n(aEe,"STRONG",{});var XPr=s(dee);pXe=r(XPr,"realm"),XPr.forEach(t),uXe=r(aEe," \u2014 "),X$=n(aEe,"A",{href:!0});var zPr=s(X$);_Xe=r(zPr,"RealmConfig"),zPr.forEach(t),bXe=r(aEe," (Realm model)"),aEe.forEach(t),vXe=i(y),vm=n(y,"LI",{});var nEe=s(vm);cee=n(nEe,"STRONG",{});var QPr=s(cee);FXe=r(QPr,"reformer"),QPr.forEach(t),TXe=r(nEe," \u2014 "),z$=n(nEe,"A",{href:!0});var WPr=s(z$);MXe=r(WPr,"ReformerConfig"),WPr.forEach(t),EXe=r(nEe," (Reformer model)"),nEe.forEach(t),CXe=i(y),Fm=n(y,"LI",{});var sEe=s(Fm);fee=n(sEe,"STRONG",{});var HPr=s(fee);wXe=r(HPr,"regnet"),HPr.forEach(t),AXe=r(sEe," \u2014 "),Q$=n(sEe,"A",{href:!0});var UPr=s(Q$);yXe=r(UPr,"RegNetConfig"),UPr.forEach(t),LXe=r(sEe," (RegNet model)"),sEe.forEach(t),xXe=i(y),Tm=n(y,"LI",{});var lEe=s(Tm);mee=n(lEe,"STRONG",{});var JPr=s(mee);$Xe=r(JPr,"rembert"),JPr.forEach(t),kXe=r(lEe," \u2014 "),W$=n(lEe,"A",{href:!0});var YPr=s(W$);SXe=r(YPr,"RemBertConfig"),YPr.forEach(t),RXe=r(lEe," (RemBERT model)"),lEe.forEach(t),BXe=i(y),Mm=n(y,"LI",{});var iEe=s(Mm);gee=n(iEe,"STRONG",{});var KPr=s(gee);PXe=r(KPr,"resnet"),KPr.forEach(t),IXe=r(iEe," \u2014 "),H$=n(iEe,"A",{href:!0});var ZPr=s(H$);qXe=r(ZPr,"ResNetConfig"),ZPr.forEach(t),NXe=r(iEe," (ResNet model)"),iEe.forEach(t),jXe=i(y),Em=n(y,"LI",{});var dEe=s(Em);hee=n(dEe,"STRONG",{});var eIr=s(hee);DXe=r(eIr,"retribert"),eIr.forEach(t),GXe=r(dEe," \u2014 "),U$=n(dEe,"A",{href:!0});var oIr=s(U$);OXe=r(oIr,"RetriBertConfig"),oIr.forEach(t),VXe=r(dEe," (RetriBERT model)"),dEe.forEach(t),XXe=i(y),Cm=n(y,"LI",{});var cEe=s(Cm);pee=n(cEe,"STRONG",{});var rIr=s(pee);zXe=r(rIr,"roberta"),rIr.forEach(t),QXe=r(cEe," \u2014 "),J$=n(cEe,"A",{href:!0});var tIr=s(J$);WXe=r(tIr,"RobertaConfig"),tIr.forEach(t),HXe=r(cEe," (RoBERTa model)"),cEe.forEach(t),UXe=i(y),wm=n(y,"LI",{});var fEe=s(wm);uee=n(fEe,"STRONG",{});var aIr=s(uee);JXe=r(aIr,"roformer"),aIr.forEach(t),YXe=r(fEe," \u2014 "),Y$=n(fEe,"A",{href:!0});var nIr=s(Y$);KXe=r(nIr,"RoFormerConfig"),nIr.forEach(t),ZXe=r(fEe," (RoFormer model)"),fEe.forEach(t),eze=i(y),Am=n(y,"LI",{});var mEe=s(Am);_ee=n(mEe,"STRONG",{});var sIr=s(_ee);oze=r(sIr,"segformer"),sIr.forEach(t),rze=r(mEe," \u2014 "),K$=n(mEe,"A",{href:!0});var lIr=s(K$);tze=r(lIr,"SegformerConfig"),lIr.forEach(t),aze=r(mEe," (SegFormer model)"),mEe.forEach(t),nze=i(y),ym=n(y,"LI",{});var gEe=s(ym);bee=n(gEe,"STRONG",{});var iIr=s(bee);sze=r(iIr,"sew"),iIr.forEach(t),lze=r(gEe," \u2014 "),Z$=n(gEe,"A",{href:!0});var dIr=s(Z$);ize=r(dIr,"SEWConfig"),dIr.forEach(t),dze=r(gEe," (SEW model)"),gEe.forEach(t),cze=i(y),Lm=n(y,"LI",{});var hEe=s(Lm);vee=n(hEe,"STRONG",{});var cIr=s(vee);fze=r(cIr,"sew-d"),cIr.forEach(t),mze=r(hEe," \u2014 "),ek=n(hEe,"A",{href:!0});var fIr=s(ek);gze=r(fIr,"SEWDConfig"),fIr.forEach(t),hze=r(hEe," (SEW-D model)"),hEe.forEach(t),pze=i(y),xm=n(y,"LI",{});var pEe=s(xm);Fee=n(pEe,"STRONG",{});var mIr=s(Fee);uze=r(mIr,"speech-encoder-decoder"),mIr.forEach(t),_ze=r(pEe," \u2014 "),ok=n(pEe,"A",{href:!0});var gIr=s(ok);bze=r(gIr,"SpeechEncoderDecoderConfig"),gIr.forEach(t),vze=r(pEe," (Speech Encoder decoder model)"),pEe.forEach(t),Fze=i(y),$m=n(y,"LI",{});var uEe=s($m);Tee=n(uEe,"STRONG",{});var hIr=s(Tee);Tze=r(hIr,"speech_to_text"),hIr.forEach(t),Mze=r(uEe," \u2014 "),rk=n(uEe,"A",{href:!0});var pIr=s(rk);Eze=r(pIr,"Speech2TextConfig"),pIr.forEach(t),Cze=r(uEe," (Speech2Text model)"),uEe.forEach(t),wze=i(y),km=n(y,"LI",{});var _Ee=s(km);Mee=n(_Ee,"STRONG",{});var uIr=s(Mee);Aze=r(uIr,"speech_to_text_2"),uIr.forEach(t),yze=r(_Ee," \u2014 "),tk=n(_Ee,"A",{href:!0});var _Ir=s(tk);Lze=r(_Ir,"Speech2Text2Config"),_Ir.forEach(t),xze=r(_Ee," (Speech2Text2 model)"),_Ee.forEach(t),$ze=i(y),Sm=n(y,"LI",{});var bEe=s(Sm);Eee=n(bEe,"STRONG",{});var bIr=s(Eee);kze=r(bIr,"splinter"),bIr.forEach(t),Sze=r(bEe," \u2014 "),ak=n(bEe,"A",{href:!0});var vIr=s(ak);Rze=r(vIr,"SplinterConfig"),vIr.forEach(t),Bze=r(bEe," (Splinter model)"),bEe.forEach(t),Pze=i(y),Rm=n(y,"LI",{});var vEe=s(Rm);Cee=n(vEe,"STRONG",{});var FIr=s(Cee);Ize=r(FIr,"squeezebert"),FIr.forEach(t),qze=r(vEe," \u2014 "),nk=n(vEe,"A",{href:!0});var TIr=s(nk);Nze=r(TIr,"SqueezeBertConfig"),TIr.forEach(t),jze=r(vEe," (SqueezeBERT model)"),vEe.forEach(t),Dze=i(y),Bm=n(y,"LI",{});var FEe=s(Bm);wee=n(FEe,"STRONG",{});var MIr=s(wee);Gze=r(MIr,"swin"),MIr.forEach(t),Oze=r(FEe," \u2014 "),sk=n(FEe,"A",{href:!0});var EIr=s(sk);Vze=r(EIr,"SwinConfig"),EIr.forEach(t),Xze=r(FEe," (Swin model)"),FEe.forEach(t),zze=i(y),Pm=n(y,"LI",{});var TEe=s(Pm);Aee=n(TEe,"STRONG",{});var CIr=s(Aee);Qze=r(CIr,"t5"),CIr.forEach(t),Wze=r(TEe," \u2014 "),lk=n(TEe,"A",{href:!0});var wIr=s(lk);Hze=r(wIr,"T5Config"),wIr.forEach(t),Uze=r(TEe," (T5 model)"),TEe.forEach(t),Jze=i(y),Im=n(y,"LI",{});var MEe=s(Im);yee=n(MEe,"STRONG",{});var AIr=s(yee);Yze=r(AIr,"tapas"),AIr.forEach(t),Kze=r(MEe," \u2014 "),ik=n(MEe,"A",{href:!0});var yIr=s(ik);Zze=r(yIr,"TapasConfig"),yIr.forEach(t),eQe=r(MEe," (TAPAS model)"),MEe.forEach(t),oQe=i(y),qm=n(y,"LI",{});var EEe=s(qm);Lee=n(EEe,"STRONG",{});var LIr=s(Lee);rQe=r(LIr,"tapex"),LIr.forEach(t),tQe=r(EEe," \u2014 "),dk=n(EEe,"A",{href:!0});var xIr=s(dk);aQe=r(xIr,"BartConfig"),xIr.forEach(t),nQe=r(EEe," (TAPEX model)"),EEe.forEach(t),sQe=i(y),Nm=n(y,"LI",{});var CEe=s(Nm);xee=n(CEe,"STRONG",{});var $Ir=s(xee);lQe=r($Ir,"transfo-xl"),$Ir.forEach(t),iQe=r(CEe," \u2014 "),ck=n(CEe,"A",{href:!0});var kIr=s(ck);dQe=r(kIr,"TransfoXLConfig"),kIr.forEach(t),cQe=r(CEe," (Transformer-XL model)"),CEe.forEach(t),fQe=i(y),jm=n(y,"LI",{});var wEe=s(jm);$ee=n(wEe,"STRONG",{});var SIr=s($ee);mQe=r(SIr,"trocr"),SIr.forEach(t),gQe=r(wEe," \u2014 "),fk=n(wEe,"A",{href:!0});var RIr=s(fk);hQe=r(RIr,"TrOCRConfig"),RIr.forEach(t),pQe=r(wEe," (TrOCR model)"),wEe.forEach(t),uQe=i(y),Dm=n(y,"LI",{});var AEe=s(Dm);kee=n(AEe,"STRONG",{});var BIr=s(kee);_Qe=r(BIr,"unispeech"),BIr.forEach(t),bQe=r(AEe," \u2014 "),mk=n(AEe,"A",{href:!0});var PIr=s(mk);vQe=r(PIr,"UniSpeechConfig"),PIr.forEach(t),FQe=r(AEe," (UniSpeech model)"),AEe.forEach(t),TQe=i(y),Gm=n(y,"LI",{});var yEe=s(Gm);See=n(yEe,"STRONG",{});var IIr=s(See);MQe=r(IIr,"unispeech-sat"),IIr.forEach(t),EQe=r(yEe," \u2014 "),gk=n(yEe,"A",{href:!0});var qIr=s(gk);CQe=r(qIr,"UniSpeechSatConfig"),qIr.forEach(t),wQe=r(yEe," (UniSpeechSat model)"),yEe.forEach(t),AQe=i(y),Om=n(y,"LI",{});var LEe=s(Om);Ree=n(LEe,"STRONG",{});var NIr=s(Ree);yQe=r(NIr,"van"),NIr.forEach(t),LQe=r(LEe," \u2014 "),hk=n(LEe,"A",{href:!0});var jIr=s(hk);xQe=r(jIr,"VanConfig"),jIr.forEach(t),$Qe=r(LEe," (VAN model)"),LEe.forEach(t),kQe=i(y),Vm=n(y,"LI",{});var xEe=s(Vm);Bee=n(xEe,"STRONG",{});var DIr=s(Bee);SQe=r(DIr,"vilt"),DIr.forEach(t),RQe=r(xEe," \u2014 "),pk=n(xEe,"A",{href:!0});var GIr=s(pk);BQe=r(GIr,"ViltConfig"),GIr.forEach(t),PQe=r(xEe," (ViLT model)"),xEe.forEach(t),IQe=i(y),Xm=n(y,"LI",{});var $Ee=s(Xm);Pee=n($Ee,"STRONG",{});var OIr=s(Pee);qQe=r(OIr,"vision-encoder-decoder"),OIr.forEach(t),NQe=r($Ee," \u2014 "),uk=n($Ee,"A",{href:!0});var VIr=s(uk);jQe=r(VIr,"VisionEncoderDecoderConfig"),VIr.forEach(t),DQe=r($Ee," (Vision Encoder decoder model)"),$Ee.forEach(t),GQe=i(y),zm=n(y,"LI",{});var kEe=s(zm);Iee=n(kEe,"STRONG",{});var XIr=s(Iee);OQe=r(XIr,"vision-text-dual-encoder"),XIr.forEach(t),VQe=r(kEe," \u2014 "),_k=n(kEe,"A",{href:!0});var zIr=s(_k);XQe=r(zIr,"VisionTextDualEncoderConfig"),zIr.forEach(t),zQe=r(kEe," (VisionTextDualEncoder model)"),kEe.forEach(t),QQe=i(y),Qm=n(y,"LI",{});var SEe=s(Qm);qee=n(SEe,"STRONG",{});var QIr=s(qee);WQe=r(QIr,"visual_bert"),QIr.forEach(t),HQe=r(SEe," \u2014 "),bk=n(SEe,"A",{href:!0});var WIr=s(bk);UQe=r(WIr,"VisualBertConfig"),WIr.forEach(t),JQe=r(SEe," (VisualBert model)"),SEe.forEach(t),YQe=i(y),Wm=n(y,"LI",{});var REe=s(Wm);Nee=n(REe,"STRONG",{});var HIr=s(Nee);KQe=r(HIr,"vit"),HIr.forEach(t),ZQe=r(REe," \u2014 "),vk=n(REe,"A",{href:!0});var UIr=s(vk);eWe=r(UIr,"ViTConfig"),UIr.forEach(t),oWe=r(REe," (ViT model)"),REe.forEach(t),rWe=i(y),Hm=n(y,"LI",{});var BEe=s(Hm);jee=n(BEe,"STRONG",{});var JIr=s(jee);tWe=r(JIr,"vit_mae"),JIr.forEach(t),aWe=r(BEe," \u2014 "),Fk=n(BEe,"A",{href:!0});var YIr=s(Fk);nWe=r(YIr,"ViTMAEConfig"),YIr.forEach(t),sWe=r(BEe," (ViTMAE model)"),BEe.forEach(t),lWe=i(y),Um=n(y,"LI",{});var PEe=s(Um);Dee=n(PEe,"STRONG",{});var KIr=s(Dee);iWe=r(KIr,"wav2vec2"),KIr.forEach(t),dWe=r(PEe," \u2014 "),Tk=n(PEe,"A",{href:!0});var ZIr=s(Tk);cWe=r(ZIr,"Wav2Vec2Config"),ZIr.forEach(t),fWe=r(PEe," (Wav2Vec2 model)"),PEe.forEach(t),mWe=i(y),Jm=n(y,"LI",{});var IEe=s(Jm);Gee=n(IEe,"STRONG",{});var eqr=s(Gee);gWe=r(eqr,"wavlm"),eqr.forEach(t),hWe=r(IEe," \u2014 "),Mk=n(IEe,"A",{href:!0});var oqr=s(Mk);pWe=r(oqr,"WavLMConfig"),oqr.forEach(t),uWe=r(IEe," (WavLM model)"),IEe.forEach(t),_We=i(y),Ym=n(y,"LI",{});var qEe=s(Ym);Oee=n(qEe,"STRONG",{});var rqr=s(Oee);bWe=r(rqr,"xglm"),rqr.forEach(t),vWe=r(qEe," \u2014 "),Ek=n(qEe,"A",{href:!0});var tqr=s(Ek);FWe=r(tqr,"XGLMConfig"),tqr.forEach(t),TWe=r(qEe," (XGLM model)"),qEe.forEach(t),MWe=i(y),Km=n(y,"LI",{});var NEe=s(Km);Vee=n(NEe,"STRONG",{});var aqr=s(Vee);EWe=r(aqr,"xlm"),aqr.forEach(t),CWe=r(NEe," \u2014 "),Ck=n(NEe,"A",{href:!0});var nqr=s(Ck);wWe=r(nqr,"XLMConfig"),nqr.forEach(t),AWe=r(NEe," (XLM model)"),NEe.forEach(t),yWe=i(y),Zm=n(y,"LI",{});var jEe=s(Zm);Xee=n(jEe,"STRONG",{});var sqr=s(Xee);LWe=r(sqr,"xlm-prophetnet"),sqr.forEach(t),xWe=r(jEe," \u2014 "),wk=n(jEe,"A",{href:!0});var lqr=s(wk);$We=r(lqr,"XLMProphetNetConfig"),lqr.forEach(t),kWe=r(jEe," (XLMProphetNet model)"),jEe.forEach(t),SWe=i(y),eg=n(y,"LI",{});var DEe=s(eg);zee=n(DEe,"STRONG",{});var iqr=s(zee);RWe=r(iqr,"xlm-roberta"),iqr.forEach(t),BWe=r(DEe," \u2014 "),Ak=n(DEe,"A",{href:!0});var dqr=s(Ak);PWe=r(dqr,"XLMRobertaConfig"),dqr.forEach(t),IWe=r(DEe," (XLM-RoBERTa model)"),DEe.forEach(t),qWe=i(y),og=n(y,"LI",{});var GEe=s(og);Qee=n(GEe,"STRONG",{});var cqr=s(Qee);NWe=r(cqr,"xlm-roberta-xl"),cqr.forEach(t),jWe=r(GEe," \u2014 "),yk=n(GEe,"A",{href:!0});var fqr=s(yk);DWe=r(fqr,"XLMRobertaXLConfig"),fqr.forEach(t),GWe=r(GEe," (XLM-RoBERTa-XL model)"),GEe.forEach(t),OWe=i(y),rg=n(y,"LI",{});var OEe=s(rg);Wee=n(OEe,"STRONG",{});var mqr=s(Wee);VWe=r(mqr,"xlnet"),mqr.forEach(t),XWe=r(OEe," \u2014 "),Lk=n(OEe,"A",{href:!0});var gqr=s(Lk);zWe=r(gqr,"XLNetConfig"),gqr.forEach(t),QWe=r(OEe," (XLNet model)"),OEe.forEach(t),WWe=i(y),tg=n(y,"LI",{});var VEe=s(tg);Hee=n(VEe,"STRONG",{});var hqr=s(Hee);HWe=r(hqr,"yoso"),hqr.forEach(t),UWe=r(VEe," \u2014 "),xk=n(VEe,"A",{href:!0});var pqr=s(xk);JWe=r(pqr,"YosoConfig"),pqr.forEach(t),YWe=r(VEe," (YOSO model)"),VEe.forEach(t),y.forEach(t),KWe=i(Jr),T(ag.$$.fragment,Jr),Jr.forEach(t),ZWe=i(Ur),ng=n(Ur,"DIV",{class:!0});var zPe=s(ng);T(CA.$$.fragment,zPe),eHe=i(zPe),Uee=n(zPe,"P",{});var uqr=s(Uee);oHe=r(uqr,"Register a new configuration for this class."),uqr.forEach(t),zPe.forEach(t),Ur.forEach(t),JRe=i(f),fi=n(f,"H2",{class:!0});var QPe=s(fi);sg=n(QPe,"A",{id:!0,class:!0,href:!0});var _qr=s(sg);Jee=n(_qr,"SPAN",{});var bqr=s(Jee);T(wA.$$.fragment,bqr),bqr.forEach(t),_qr.forEach(t),rHe=i(QPe),Yee=n(QPe,"SPAN",{});var vqr=s(Yee);tHe=r(vqr,"AutoTokenizer"),vqr.forEach(t),QPe.forEach(t),YRe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(AA.$$.fragment,$s),aHe=i($s),yA=n($s,"P",{});var WPe=s(yA);nHe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$k=n(WPe,"A",{href:!0});var Fqr=s($k);sHe=r(Fqr,"AutoTokenizer.from_pretrained()"),Fqr.forEach(t),lHe=r(WPe," class method."),WPe.forEach(t),iHe=i($s),LA=n($s,"P",{});var HPe=s(LA);dHe=r(HPe,"This class cannot be instantiated directly using "),Kee=n(HPe,"CODE",{});var Tqr=s(Kee);cHe=r(Tqr,"__init__()"),Tqr.forEach(t),fHe=r(HPe," (throws an error)."),HPe.forEach(t),mHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(xA.$$.fragment,ks),gHe=i(ks),Zee=n(ks,"P",{});var Mqr=s(Zee);hHe=r(Mqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Mqr.forEach(t),pHe=i(ks),Fa=n(ks,"P",{});var F3=s(Fa);uHe=r(F3,"The tokenizer class to instantiate is selected based on the "),eoe=n(F3,"CODE",{});var Eqr=s(eoe);_He=r(Eqr,"model_type"),Eqr.forEach(t),bHe=r(F3,` property of the config object (either
passed as an argument or loaded from `),ooe=n(F3,"CODE",{});var Cqr=s(ooe);vHe=r(Cqr,"pretrained_model_name_or_path"),Cqr.forEach(t),FHe=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),roe=n(F3,"CODE",{});var wqr=s(roe);THe=r(wqr,"pretrained_model_name_or_path"),wqr.forEach(t),MHe=r(F3,":"),F3.forEach(t),EHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var Cx=s(An);toe=n(Cx,"STRONG",{});var Aqr=s(toe);CHe=r(Aqr,"albert"),Aqr.forEach(t),wHe=r(Cx," \u2014 "),kk=n(Cx,"A",{href:!0});var yqr=s(kk);AHe=r(yqr,"AlbertTokenizer"),yqr.forEach(t),yHe=r(Cx," or "),Sk=n(Cx,"A",{href:!0});var Lqr=s(Sk);LHe=r(Lqr,"AlbertTokenizerFast"),Lqr.forEach(t),xHe=r(Cx," (ALBERT model)"),Cx.forEach(t),$He=i(S),yn=n(S,"LI",{});var wx=s(yn);aoe=n(wx,"STRONG",{});var xqr=s(aoe);kHe=r(xqr,"bart"),xqr.forEach(t),SHe=r(wx," \u2014 "),Rk=n(wx,"A",{href:!0});var $qr=s(Rk);RHe=r($qr,"BartTokenizer"),$qr.forEach(t),BHe=r(wx," or "),Bk=n(wx,"A",{href:!0});var kqr=s(Bk);PHe=r(kqr,"BartTokenizerFast"),kqr.forEach(t),IHe=r(wx," (BART model)"),wx.forEach(t),qHe=i(S),Ln=n(S,"LI",{});var Ax=s(Ln);noe=n(Ax,"STRONG",{});var Sqr=s(noe);NHe=r(Sqr,"barthez"),Sqr.forEach(t),jHe=r(Ax," \u2014 "),Pk=n(Ax,"A",{href:!0});var Rqr=s(Pk);DHe=r(Rqr,"BarthezTokenizer"),Rqr.forEach(t),GHe=r(Ax," or "),Ik=n(Ax,"A",{href:!0});var Bqr=s(Ik);OHe=r(Bqr,"BarthezTokenizerFast"),Bqr.forEach(t),VHe=r(Ax," (BARThez model)"),Ax.forEach(t),XHe=i(S),lg=n(S,"LI",{});var XEe=s(lg);soe=n(XEe,"STRONG",{});var Pqr=s(soe);zHe=r(Pqr,"bartpho"),Pqr.forEach(t),QHe=r(XEe," \u2014 "),qk=n(XEe,"A",{href:!0});var Iqr=s(qk);WHe=r(Iqr,"BartphoTokenizer"),Iqr.forEach(t),HHe=r(XEe," (BARTpho model)"),XEe.forEach(t),UHe=i(S),xn=n(S,"LI",{});var yx=s(xn);loe=n(yx,"STRONG",{});var qqr=s(loe);JHe=r(qqr,"bert"),qqr.forEach(t),YHe=r(yx," \u2014 "),Nk=n(yx,"A",{href:!0});var Nqr=s(Nk);KHe=r(Nqr,"BertTokenizer"),Nqr.forEach(t),ZHe=r(yx," or "),jk=n(yx,"A",{href:!0});var jqr=s(jk);eUe=r(jqr,"BertTokenizerFast"),jqr.forEach(t),oUe=r(yx," (BERT model)"),yx.forEach(t),rUe=i(S),ig=n(S,"LI",{});var zEe=s(ig);ioe=n(zEe,"STRONG",{});var Dqr=s(ioe);tUe=r(Dqr,"bert-generation"),Dqr.forEach(t),aUe=r(zEe," \u2014 "),Dk=n(zEe,"A",{href:!0});var Gqr=s(Dk);nUe=r(Gqr,"BertGenerationTokenizer"),Gqr.forEach(t),sUe=r(zEe," (Bert Generation model)"),zEe.forEach(t),lUe=i(S),dg=n(S,"LI",{});var QEe=s(dg);doe=n(QEe,"STRONG",{});var Oqr=s(doe);iUe=r(Oqr,"bert-japanese"),Oqr.forEach(t),dUe=r(QEe," \u2014 "),Gk=n(QEe,"A",{href:!0});var Vqr=s(Gk);cUe=r(Vqr,"BertJapaneseTokenizer"),Vqr.forEach(t),fUe=r(QEe," (BertJapanese model)"),QEe.forEach(t),mUe=i(S),cg=n(S,"LI",{});var WEe=s(cg);coe=n(WEe,"STRONG",{});var Xqr=s(coe);gUe=r(Xqr,"bertweet"),Xqr.forEach(t),hUe=r(WEe," \u2014 "),Ok=n(WEe,"A",{href:!0});var zqr=s(Ok);pUe=r(zqr,"BertweetTokenizer"),zqr.forEach(t),uUe=r(WEe," (Bertweet model)"),WEe.forEach(t),_Ue=i(S),$n=n(S,"LI",{});var Lx=s($n);foe=n(Lx,"STRONG",{});var Qqr=s(foe);bUe=r(Qqr,"big_bird"),Qqr.forEach(t),vUe=r(Lx," \u2014 "),Vk=n(Lx,"A",{href:!0});var Wqr=s(Vk);FUe=r(Wqr,"BigBirdTokenizer"),Wqr.forEach(t),TUe=r(Lx," or "),Xk=n(Lx,"A",{href:!0});var Hqr=s(Xk);MUe=r(Hqr,"BigBirdTokenizerFast"),Hqr.forEach(t),EUe=r(Lx," (BigBird model)"),Lx.forEach(t),CUe=i(S),kn=n(S,"LI",{});var xx=s(kn);moe=n(xx,"STRONG",{});var Uqr=s(moe);wUe=r(Uqr,"bigbird_pegasus"),Uqr.forEach(t),AUe=r(xx," \u2014 "),zk=n(xx,"A",{href:!0});var Jqr=s(zk);yUe=r(Jqr,"PegasusTokenizer"),Jqr.forEach(t),LUe=r(xx," or "),Qk=n(xx,"A",{href:!0});var Yqr=s(Qk);xUe=r(Yqr,"PegasusTokenizerFast"),Yqr.forEach(t),$Ue=r(xx," (BigBirdPegasus model)"),xx.forEach(t),kUe=i(S),Sn=n(S,"LI",{});var $x=s(Sn);goe=n($x,"STRONG",{});var Kqr=s(goe);SUe=r(Kqr,"blenderbot"),Kqr.forEach(t),RUe=r($x," \u2014 "),Wk=n($x,"A",{href:!0});var Zqr=s(Wk);BUe=r(Zqr,"BlenderbotTokenizer"),Zqr.forEach(t),PUe=r($x," or "),Hk=n($x,"A",{href:!0});var eNr=s(Hk);IUe=r(eNr,"BlenderbotTokenizerFast"),eNr.forEach(t),qUe=r($x," (Blenderbot model)"),$x.forEach(t),NUe=i(S),fg=n(S,"LI",{});var HEe=s(fg);hoe=n(HEe,"STRONG",{});var oNr=s(hoe);jUe=r(oNr,"blenderbot-small"),oNr.forEach(t),DUe=r(HEe," \u2014 "),Uk=n(HEe,"A",{href:!0});var rNr=s(Uk);GUe=r(rNr,"BlenderbotSmallTokenizer"),rNr.forEach(t),OUe=r(HEe," (BlenderbotSmall model)"),HEe.forEach(t),VUe=i(S),mg=n(S,"LI",{});var UEe=s(mg);poe=n(UEe,"STRONG",{});var tNr=s(poe);XUe=r(tNr,"byt5"),tNr.forEach(t),zUe=r(UEe," \u2014 "),Jk=n(UEe,"A",{href:!0});var aNr=s(Jk);QUe=r(aNr,"ByT5Tokenizer"),aNr.forEach(t),WUe=r(UEe," (ByT5 model)"),UEe.forEach(t),HUe=i(S),Rn=n(S,"LI",{});var kx=s(Rn);uoe=n(kx,"STRONG",{});var nNr=s(uoe);UUe=r(nNr,"camembert"),nNr.forEach(t),JUe=r(kx," \u2014 "),Yk=n(kx,"A",{href:!0});var sNr=s(Yk);YUe=r(sNr,"CamembertTokenizer"),sNr.forEach(t),KUe=r(kx," or "),Kk=n(kx,"A",{href:!0});var lNr=s(Kk);ZUe=r(lNr,"CamembertTokenizerFast"),lNr.forEach(t),eJe=r(kx," (CamemBERT model)"),kx.forEach(t),oJe=i(S),gg=n(S,"LI",{});var JEe=s(gg);_oe=n(JEe,"STRONG",{});var iNr=s(_oe);rJe=r(iNr,"canine"),iNr.forEach(t),tJe=r(JEe," \u2014 "),Zk=n(JEe,"A",{href:!0});var dNr=s(Zk);aJe=r(dNr,"CanineTokenizer"),dNr.forEach(t),nJe=r(JEe," (Canine model)"),JEe.forEach(t),sJe=i(S),Bn=n(S,"LI",{});var Sx=s(Bn);boe=n(Sx,"STRONG",{});var cNr=s(boe);lJe=r(cNr,"clip"),cNr.forEach(t),iJe=r(Sx," \u2014 "),eS=n(Sx,"A",{href:!0});var fNr=s(eS);dJe=r(fNr,"CLIPTokenizer"),fNr.forEach(t),cJe=r(Sx," or "),oS=n(Sx,"A",{href:!0});var mNr=s(oS);fJe=r(mNr,"CLIPTokenizerFast"),mNr.forEach(t),mJe=r(Sx," (CLIP model)"),Sx.forEach(t),gJe=i(S),Pn=n(S,"LI",{});var Rx=s(Pn);voe=n(Rx,"STRONG",{});var gNr=s(voe);hJe=r(gNr,"convbert"),gNr.forEach(t),pJe=r(Rx," \u2014 "),rS=n(Rx,"A",{href:!0});var hNr=s(rS);uJe=r(hNr,"ConvBertTokenizer"),hNr.forEach(t),_Je=r(Rx," or "),tS=n(Rx,"A",{href:!0});var pNr=s(tS);bJe=r(pNr,"ConvBertTokenizerFast"),pNr.forEach(t),vJe=r(Rx," (ConvBERT model)"),Rx.forEach(t),FJe=i(S),In=n(S,"LI",{});var Bx=s(In);Foe=n(Bx,"STRONG",{});var uNr=s(Foe);TJe=r(uNr,"cpm"),uNr.forEach(t),MJe=r(Bx," \u2014 "),aS=n(Bx,"A",{href:!0});var _Nr=s(aS);EJe=r(_Nr,"CpmTokenizer"),_Nr.forEach(t),CJe=r(Bx," or "),Toe=n(Bx,"CODE",{});var bNr=s(Toe);wJe=r(bNr,"CpmTokenizerFast"),bNr.forEach(t),AJe=r(Bx," (CPM model)"),Bx.forEach(t),yJe=i(S),hg=n(S,"LI",{});var YEe=s(hg);Moe=n(YEe,"STRONG",{});var vNr=s(Moe);LJe=r(vNr,"ctrl"),vNr.forEach(t),xJe=r(YEe," \u2014 "),nS=n(YEe,"A",{href:!0});var FNr=s(nS);$Je=r(FNr,"CTRLTokenizer"),FNr.forEach(t),kJe=r(YEe," (CTRL model)"),YEe.forEach(t),SJe=i(S),qn=n(S,"LI",{});var Px=s(qn);Eoe=n(Px,"STRONG",{});var TNr=s(Eoe);RJe=r(TNr,"data2vec-text"),TNr.forEach(t),BJe=r(Px," \u2014 "),sS=n(Px,"A",{href:!0});var MNr=s(sS);PJe=r(MNr,"RobertaTokenizer"),MNr.forEach(t),IJe=r(Px," or "),lS=n(Px,"A",{href:!0});var ENr=s(lS);qJe=r(ENr,"RobertaTokenizerFast"),ENr.forEach(t),NJe=r(Px," (Data2VecText model)"),Px.forEach(t),jJe=i(S),Nn=n(S,"LI",{});var Ix=s(Nn);Coe=n(Ix,"STRONG",{});var CNr=s(Coe);DJe=r(CNr,"deberta"),CNr.forEach(t),GJe=r(Ix," \u2014 "),iS=n(Ix,"A",{href:!0});var wNr=s(iS);OJe=r(wNr,"DebertaTokenizer"),wNr.forEach(t),VJe=r(Ix," or "),dS=n(Ix,"A",{href:!0});var ANr=s(dS);XJe=r(ANr,"DebertaTokenizerFast"),ANr.forEach(t),zJe=r(Ix," (DeBERTa model)"),Ix.forEach(t),QJe=i(S),jn=n(S,"LI",{});var qx=s(jn);woe=n(qx,"STRONG",{});var yNr=s(woe);WJe=r(yNr,"deberta-v2"),yNr.forEach(t),HJe=r(qx," \u2014 "),cS=n(qx,"A",{href:!0});var LNr=s(cS);UJe=r(LNr,"DebertaV2Tokenizer"),LNr.forEach(t),JJe=r(qx," or "),fS=n(qx,"A",{href:!0});var xNr=s(fS);YJe=r(xNr,"DebertaV2TokenizerFast"),xNr.forEach(t),KJe=r(qx," (DeBERTa-v2 model)"),qx.forEach(t),ZJe=i(S),Dn=n(S,"LI",{});var Nx=s(Dn);Aoe=n(Nx,"STRONG",{});var $Nr=s(Aoe);eYe=r($Nr,"distilbert"),$Nr.forEach(t),oYe=r(Nx," \u2014 "),mS=n(Nx,"A",{href:!0});var kNr=s(mS);rYe=r(kNr,"DistilBertTokenizer"),kNr.forEach(t),tYe=r(Nx," or "),gS=n(Nx,"A",{href:!0});var SNr=s(gS);aYe=r(SNr,"DistilBertTokenizerFast"),SNr.forEach(t),nYe=r(Nx," (DistilBERT model)"),Nx.forEach(t),sYe=i(S),Gn=n(S,"LI",{});var jx=s(Gn);yoe=n(jx,"STRONG",{});var RNr=s(yoe);lYe=r(RNr,"dpr"),RNr.forEach(t),iYe=r(jx," \u2014 "),hS=n(jx,"A",{href:!0});var BNr=s(hS);dYe=r(BNr,"DPRQuestionEncoderTokenizer"),BNr.forEach(t),cYe=r(jx," or "),pS=n(jx,"A",{href:!0});var PNr=s(pS);fYe=r(PNr,"DPRQuestionEncoderTokenizerFast"),PNr.forEach(t),mYe=r(jx," (DPR model)"),jx.forEach(t),gYe=i(S),On=n(S,"LI",{});var Dx=s(On);Loe=n(Dx,"STRONG",{});var INr=s(Loe);hYe=r(INr,"electra"),INr.forEach(t),pYe=r(Dx," \u2014 "),uS=n(Dx,"A",{href:!0});var qNr=s(uS);uYe=r(qNr,"ElectraTokenizer"),qNr.forEach(t),_Ye=r(Dx," or "),_S=n(Dx,"A",{href:!0});var NNr=s(_S);bYe=r(NNr,"ElectraTokenizerFast"),NNr.forEach(t),vYe=r(Dx," (ELECTRA model)"),Dx.forEach(t),FYe=i(S),pg=n(S,"LI",{});var KEe=s(pg);xoe=n(KEe,"STRONG",{});var jNr=s(xoe);TYe=r(jNr,"flaubert"),jNr.forEach(t),MYe=r(KEe," \u2014 "),bS=n(KEe,"A",{href:!0});var DNr=s(bS);EYe=r(DNr,"FlaubertTokenizer"),DNr.forEach(t),CYe=r(KEe," (FlauBERT model)"),KEe.forEach(t),wYe=i(S),Vn=n(S,"LI",{});var Gx=s(Vn);$oe=n(Gx,"STRONG",{});var GNr=s($oe);AYe=r(GNr,"fnet"),GNr.forEach(t),yYe=r(Gx," \u2014 "),vS=n(Gx,"A",{href:!0});var ONr=s(vS);LYe=r(ONr,"FNetTokenizer"),ONr.forEach(t),xYe=r(Gx," or "),FS=n(Gx,"A",{href:!0});var VNr=s(FS);$Ye=r(VNr,"FNetTokenizerFast"),VNr.forEach(t),kYe=r(Gx," (FNet model)"),Gx.forEach(t),SYe=i(S),ug=n(S,"LI",{});var ZEe=s(ug);koe=n(ZEe,"STRONG",{});var XNr=s(koe);RYe=r(XNr,"fsmt"),XNr.forEach(t),BYe=r(ZEe," \u2014 "),TS=n(ZEe,"A",{href:!0});var zNr=s(TS);PYe=r(zNr,"FSMTTokenizer"),zNr.forEach(t),IYe=r(ZEe," (FairSeq Machine-Translation model)"),ZEe.forEach(t),qYe=i(S),Xn=n(S,"LI",{});var Ox=s(Xn);Soe=n(Ox,"STRONG",{});var QNr=s(Soe);NYe=r(QNr,"funnel"),QNr.forEach(t),jYe=r(Ox," \u2014 "),MS=n(Ox,"A",{href:!0});var WNr=s(MS);DYe=r(WNr,"FunnelTokenizer"),WNr.forEach(t),GYe=r(Ox," or "),ES=n(Ox,"A",{href:!0});var HNr=s(ES);OYe=r(HNr,"FunnelTokenizerFast"),HNr.forEach(t),VYe=r(Ox," (Funnel Transformer model)"),Ox.forEach(t),XYe=i(S),zn=n(S,"LI",{});var Vx=s(zn);Roe=n(Vx,"STRONG",{});var UNr=s(Roe);zYe=r(UNr,"gpt2"),UNr.forEach(t),QYe=r(Vx," \u2014 "),CS=n(Vx,"A",{href:!0});var JNr=s(CS);WYe=r(JNr,"GPT2Tokenizer"),JNr.forEach(t),HYe=r(Vx," or "),wS=n(Vx,"A",{href:!0});var YNr=s(wS);UYe=r(YNr,"GPT2TokenizerFast"),YNr.forEach(t),JYe=r(Vx," (OpenAI GPT-2 model)"),Vx.forEach(t),YYe=i(S),Qn=n(S,"LI",{});var Xx=s(Qn);Boe=n(Xx,"STRONG",{});var KNr=s(Boe);KYe=r(KNr,"gpt_neo"),KNr.forEach(t),ZYe=r(Xx," \u2014 "),AS=n(Xx,"A",{href:!0});var ZNr=s(AS);eKe=r(ZNr,"GPT2Tokenizer"),ZNr.forEach(t),oKe=r(Xx," or "),yS=n(Xx,"A",{href:!0});var ejr=s(yS);rKe=r(ejr,"GPT2TokenizerFast"),ejr.forEach(t),tKe=r(Xx," (GPT Neo model)"),Xx.forEach(t),aKe=i(S),Wn=n(S,"LI",{});var zx=s(Wn);Poe=n(zx,"STRONG",{});var ojr=s(Poe);nKe=r(ojr,"gptj"),ojr.forEach(t),sKe=r(zx," \u2014 "),LS=n(zx,"A",{href:!0});var rjr=s(LS);lKe=r(rjr,"GPT2Tokenizer"),rjr.forEach(t),iKe=r(zx," or "),xS=n(zx,"A",{href:!0});var tjr=s(xS);dKe=r(tjr,"GPT2TokenizerFast"),tjr.forEach(t),cKe=r(zx," (GPT-J model)"),zx.forEach(t),fKe=i(S),Hn=n(S,"LI",{});var Qx=s(Hn);Ioe=n(Qx,"STRONG",{});var ajr=s(Ioe);mKe=r(ajr,"herbert"),ajr.forEach(t),gKe=r(Qx," \u2014 "),$S=n(Qx,"A",{href:!0});var njr=s($S);hKe=r(njr,"HerbertTokenizer"),njr.forEach(t),pKe=r(Qx," or "),kS=n(Qx,"A",{href:!0});var sjr=s(kS);uKe=r(sjr,"HerbertTokenizerFast"),sjr.forEach(t),_Ke=r(Qx," (HerBERT model)"),Qx.forEach(t),bKe=i(S),_g=n(S,"LI",{});var eCe=s(_g);qoe=n(eCe,"STRONG",{});var ljr=s(qoe);vKe=r(ljr,"hubert"),ljr.forEach(t),FKe=r(eCe," \u2014 "),SS=n(eCe,"A",{href:!0});var ijr=s(SS);TKe=r(ijr,"Wav2Vec2CTCTokenizer"),ijr.forEach(t),MKe=r(eCe," (Hubert model)"),eCe.forEach(t),EKe=i(S),Un=n(S,"LI",{});var Wx=s(Un);Noe=n(Wx,"STRONG",{});var djr=s(Noe);CKe=r(djr,"ibert"),djr.forEach(t),wKe=r(Wx," \u2014 "),RS=n(Wx,"A",{href:!0});var cjr=s(RS);AKe=r(cjr,"RobertaTokenizer"),cjr.forEach(t),yKe=r(Wx," or "),BS=n(Wx,"A",{href:!0});var fjr=s(BS);LKe=r(fjr,"RobertaTokenizerFast"),fjr.forEach(t),xKe=r(Wx," (I-BERT model)"),Wx.forEach(t),$Ke=i(S),Jn=n(S,"LI",{});var Hx=s(Jn);joe=n(Hx,"STRONG",{});var mjr=s(joe);kKe=r(mjr,"layoutlm"),mjr.forEach(t),SKe=r(Hx," \u2014 "),PS=n(Hx,"A",{href:!0});var gjr=s(PS);RKe=r(gjr,"LayoutLMTokenizer"),gjr.forEach(t),BKe=r(Hx," or "),IS=n(Hx,"A",{href:!0});var hjr=s(IS);PKe=r(hjr,"LayoutLMTokenizerFast"),hjr.forEach(t),IKe=r(Hx," (LayoutLM model)"),Hx.forEach(t),qKe=i(S),Yn=n(S,"LI",{});var Ux=s(Yn);Doe=n(Ux,"STRONG",{});var pjr=s(Doe);NKe=r(pjr,"layoutlmv2"),pjr.forEach(t),jKe=r(Ux," \u2014 "),qS=n(Ux,"A",{href:!0});var ujr=s(qS);DKe=r(ujr,"LayoutLMv2Tokenizer"),ujr.forEach(t),GKe=r(Ux," or "),NS=n(Ux,"A",{href:!0});var _jr=s(NS);OKe=r(_jr,"LayoutLMv2TokenizerFast"),_jr.forEach(t),VKe=r(Ux," (LayoutLMv2 model)"),Ux.forEach(t),XKe=i(S),Kn=n(S,"LI",{});var Jx=s(Kn);Goe=n(Jx,"STRONG",{});var bjr=s(Goe);zKe=r(bjr,"layoutxlm"),bjr.forEach(t),QKe=r(Jx," \u2014 "),jS=n(Jx,"A",{href:!0});var vjr=s(jS);WKe=r(vjr,"LayoutXLMTokenizer"),vjr.forEach(t),HKe=r(Jx," or "),DS=n(Jx,"A",{href:!0});var Fjr=s(DS);UKe=r(Fjr,"LayoutXLMTokenizerFast"),Fjr.forEach(t),JKe=r(Jx," (LayoutXLM model)"),Jx.forEach(t),YKe=i(S),Zn=n(S,"LI",{});var Yx=s(Zn);Ooe=n(Yx,"STRONG",{});var Tjr=s(Ooe);KKe=r(Tjr,"led"),Tjr.forEach(t),ZKe=r(Yx," \u2014 "),GS=n(Yx,"A",{href:!0});var Mjr=s(GS);eZe=r(Mjr,"LEDTokenizer"),Mjr.forEach(t),oZe=r(Yx," or "),OS=n(Yx,"A",{href:!0});var Ejr=s(OS);rZe=r(Ejr,"LEDTokenizerFast"),Ejr.forEach(t),tZe=r(Yx," (LED model)"),Yx.forEach(t),aZe=i(S),es=n(S,"LI",{});var Kx=s(es);Voe=n(Kx,"STRONG",{});var Cjr=s(Voe);nZe=r(Cjr,"longformer"),Cjr.forEach(t),sZe=r(Kx," \u2014 "),VS=n(Kx,"A",{href:!0});var wjr=s(VS);lZe=r(wjr,"LongformerTokenizer"),wjr.forEach(t),iZe=r(Kx," or "),XS=n(Kx,"A",{href:!0});var Ajr=s(XS);dZe=r(Ajr,"LongformerTokenizerFast"),Ajr.forEach(t),cZe=r(Kx," (Longformer model)"),Kx.forEach(t),fZe=i(S),bg=n(S,"LI",{});var oCe=s(bg);Xoe=n(oCe,"STRONG",{});var yjr=s(Xoe);mZe=r(yjr,"luke"),yjr.forEach(t),gZe=r(oCe," \u2014 "),zS=n(oCe,"A",{href:!0});var Ljr=s(zS);hZe=r(Ljr,"LukeTokenizer"),Ljr.forEach(t),pZe=r(oCe," (LUKE model)"),oCe.forEach(t),uZe=i(S),os=n(S,"LI",{});var Zx=s(os);zoe=n(Zx,"STRONG",{});var xjr=s(zoe);_Ze=r(xjr,"lxmert"),xjr.forEach(t),bZe=r(Zx," \u2014 "),QS=n(Zx,"A",{href:!0});var $jr=s(QS);vZe=r($jr,"LxmertTokenizer"),$jr.forEach(t),FZe=r(Zx," or "),WS=n(Zx,"A",{href:!0});var kjr=s(WS);TZe=r(kjr,"LxmertTokenizerFast"),kjr.forEach(t),MZe=r(Zx," (LXMERT model)"),Zx.forEach(t),EZe=i(S),vg=n(S,"LI",{});var rCe=s(vg);Qoe=n(rCe,"STRONG",{});var Sjr=s(Qoe);CZe=r(Sjr,"m2m_100"),Sjr.forEach(t),wZe=r(rCe," \u2014 "),HS=n(rCe,"A",{href:!0});var Rjr=s(HS);AZe=r(Rjr,"M2M100Tokenizer"),Rjr.forEach(t),yZe=r(rCe," (M2M100 model)"),rCe.forEach(t),LZe=i(S),Fg=n(S,"LI",{});var tCe=s(Fg);Woe=n(tCe,"STRONG",{});var Bjr=s(Woe);xZe=r(Bjr,"marian"),Bjr.forEach(t),$Ze=r(tCe," \u2014 "),US=n(tCe,"A",{href:!0});var Pjr=s(US);kZe=r(Pjr,"MarianTokenizer"),Pjr.forEach(t),SZe=r(tCe," (Marian model)"),tCe.forEach(t),RZe=i(S),rs=n(S,"LI",{});var e9=s(rs);Hoe=n(e9,"STRONG",{});var Ijr=s(Hoe);BZe=r(Ijr,"mbart"),Ijr.forEach(t),PZe=r(e9," \u2014 "),JS=n(e9,"A",{href:!0});var qjr=s(JS);IZe=r(qjr,"MBartTokenizer"),qjr.forEach(t),qZe=r(e9," or "),YS=n(e9,"A",{href:!0});var Njr=s(YS);NZe=r(Njr,"MBartTokenizerFast"),Njr.forEach(t),jZe=r(e9," (mBART model)"),e9.forEach(t),DZe=i(S),ts=n(S,"LI",{});var o9=s(ts);Uoe=n(o9,"STRONG",{});var jjr=s(Uoe);GZe=r(jjr,"mbart50"),jjr.forEach(t),OZe=r(o9," \u2014 "),KS=n(o9,"A",{href:!0});var Djr=s(KS);VZe=r(Djr,"MBart50Tokenizer"),Djr.forEach(t),XZe=r(o9," or "),ZS=n(o9,"A",{href:!0});var Gjr=s(ZS);zZe=r(Gjr,"MBart50TokenizerFast"),Gjr.forEach(t),QZe=r(o9," (mBART-50 model)"),o9.forEach(t),WZe=i(S),as=n(S,"LI",{});var r9=s(as);Joe=n(r9,"STRONG",{});var Ojr=s(Joe);HZe=r(Ojr,"megatron-bert"),Ojr.forEach(t),UZe=r(r9," \u2014 "),eR=n(r9,"A",{href:!0});var Vjr=s(eR);JZe=r(Vjr,"BertTokenizer"),Vjr.forEach(t),YZe=r(r9," or "),oR=n(r9,"A",{href:!0});var Xjr=s(oR);KZe=r(Xjr,"BertTokenizerFast"),Xjr.forEach(t),ZZe=r(r9," (MegatronBert model)"),r9.forEach(t),eeo=i(S),Tg=n(S,"LI",{});var aCe=s(Tg);Yoe=n(aCe,"STRONG",{});var zjr=s(Yoe);oeo=r(zjr,"mluke"),zjr.forEach(t),reo=r(aCe," \u2014 "),rR=n(aCe,"A",{href:!0});var Qjr=s(rR);teo=r(Qjr,"MLukeTokenizer"),Qjr.forEach(t),aeo=r(aCe," (mLUKE model)"),aCe.forEach(t),neo=i(S),ns=n(S,"LI",{});var t9=s(ns);Koe=n(t9,"STRONG",{});var Wjr=s(Koe);seo=r(Wjr,"mobilebert"),Wjr.forEach(t),leo=r(t9," \u2014 "),tR=n(t9,"A",{href:!0});var Hjr=s(tR);ieo=r(Hjr,"MobileBertTokenizer"),Hjr.forEach(t),deo=r(t9," or "),aR=n(t9,"A",{href:!0});var Ujr=s(aR);ceo=r(Ujr,"MobileBertTokenizerFast"),Ujr.forEach(t),feo=r(t9," (MobileBERT model)"),t9.forEach(t),meo=i(S),ss=n(S,"LI",{});var a9=s(ss);Zoe=n(a9,"STRONG",{});var Jjr=s(Zoe);geo=r(Jjr,"mpnet"),Jjr.forEach(t),heo=r(a9," \u2014 "),nR=n(a9,"A",{href:!0});var Yjr=s(nR);peo=r(Yjr,"MPNetTokenizer"),Yjr.forEach(t),ueo=r(a9," or "),sR=n(a9,"A",{href:!0});var Kjr=s(sR);_eo=r(Kjr,"MPNetTokenizerFast"),Kjr.forEach(t),beo=r(a9," (MPNet model)"),a9.forEach(t),veo=i(S),ls=n(S,"LI",{});var n9=s(ls);ere=n(n9,"STRONG",{});var Zjr=s(ere);Feo=r(Zjr,"mt5"),Zjr.forEach(t),Teo=r(n9," \u2014 "),lR=n(n9,"A",{href:!0});var eDr=s(lR);Meo=r(eDr,"MT5Tokenizer"),eDr.forEach(t),Eeo=r(n9," or "),iR=n(n9,"A",{href:!0});var oDr=s(iR);Ceo=r(oDr,"MT5TokenizerFast"),oDr.forEach(t),weo=r(n9," (mT5 model)"),n9.forEach(t),Aeo=i(S),is=n(S,"LI",{});var s9=s(is);ore=n(s9,"STRONG",{});var rDr=s(ore);yeo=r(rDr,"nystromformer"),rDr.forEach(t),Leo=r(s9," \u2014 "),dR=n(s9,"A",{href:!0});var tDr=s(dR);xeo=r(tDr,"AlbertTokenizer"),tDr.forEach(t),$eo=r(s9," or "),cR=n(s9,"A",{href:!0});var aDr=s(cR);keo=r(aDr,"AlbertTokenizerFast"),aDr.forEach(t),Seo=r(s9," (Nystromformer model)"),s9.forEach(t),Reo=i(S),ds=n(S,"LI",{});var l9=s(ds);rre=n(l9,"STRONG",{});var nDr=s(rre);Beo=r(nDr,"openai-gpt"),nDr.forEach(t),Peo=r(l9," \u2014 "),fR=n(l9,"A",{href:!0});var sDr=s(fR);Ieo=r(sDr,"OpenAIGPTTokenizer"),sDr.forEach(t),qeo=r(l9," or "),mR=n(l9,"A",{href:!0});var lDr=s(mR);Neo=r(lDr,"OpenAIGPTTokenizerFast"),lDr.forEach(t),jeo=r(l9," (OpenAI GPT model)"),l9.forEach(t),Deo=i(S),cs=n(S,"LI",{});var i9=s(cs);tre=n(i9,"STRONG",{});var iDr=s(tre);Geo=r(iDr,"pegasus"),iDr.forEach(t),Oeo=r(i9," \u2014 "),gR=n(i9,"A",{href:!0});var dDr=s(gR);Veo=r(dDr,"PegasusTokenizer"),dDr.forEach(t),Xeo=r(i9," or "),hR=n(i9,"A",{href:!0});var cDr=s(hR);zeo=r(cDr,"PegasusTokenizerFast"),cDr.forEach(t),Qeo=r(i9," (Pegasus model)"),i9.forEach(t),Weo=i(S),Mg=n(S,"LI",{});var nCe=s(Mg);are=n(nCe,"STRONG",{});var fDr=s(are);Heo=r(fDr,"perceiver"),fDr.forEach(t),Ueo=r(nCe," \u2014 "),pR=n(nCe,"A",{href:!0});var mDr=s(pR);Jeo=r(mDr,"PerceiverTokenizer"),mDr.forEach(t),Yeo=r(nCe," (Perceiver model)"),nCe.forEach(t),Keo=i(S),Eg=n(S,"LI",{});var sCe=s(Eg);nre=n(sCe,"STRONG",{});var gDr=s(nre);Zeo=r(gDr,"phobert"),gDr.forEach(t),eoo=r(sCe," \u2014 "),uR=n(sCe,"A",{href:!0});var hDr=s(uR);ooo=r(hDr,"PhobertTokenizer"),hDr.forEach(t),roo=r(sCe," (PhoBERT model)"),sCe.forEach(t),too=i(S),Cg=n(S,"LI",{});var lCe=s(Cg);sre=n(lCe,"STRONG",{});var pDr=s(sre);aoo=r(pDr,"plbart"),pDr.forEach(t),noo=r(lCe," \u2014 "),_R=n(lCe,"A",{href:!0});var uDr=s(_R);soo=r(uDr,"PLBartTokenizer"),uDr.forEach(t),loo=r(lCe," (PLBart model)"),lCe.forEach(t),ioo=i(S),wg=n(S,"LI",{});var iCe=s(wg);lre=n(iCe,"STRONG",{});var _Dr=s(lre);doo=r(_Dr,"prophetnet"),_Dr.forEach(t),coo=r(iCe," \u2014 "),bR=n(iCe,"A",{href:!0});var bDr=s(bR);foo=r(bDr,"ProphetNetTokenizer"),bDr.forEach(t),moo=r(iCe," (ProphetNet model)"),iCe.forEach(t),goo=i(S),fs=n(S,"LI",{});var d9=s(fs);ire=n(d9,"STRONG",{});var vDr=s(ire);hoo=r(vDr,"qdqbert"),vDr.forEach(t),poo=r(d9," \u2014 "),vR=n(d9,"A",{href:!0});var FDr=s(vR);uoo=r(FDr,"BertTokenizer"),FDr.forEach(t),_oo=r(d9," or "),FR=n(d9,"A",{href:!0});var TDr=s(FR);boo=r(TDr,"BertTokenizerFast"),TDr.forEach(t),voo=r(d9," (QDQBert model)"),d9.forEach(t),Foo=i(S),Ag=n(S,"LI",{});var dCe=s(Ag);dre=n(dCe,"STRONG",{});var MDr=s(dre);Too=r(MDr,"rag"),MDr.forEach(t),Moo=r(dCe," \u2014 "),TR=n(dCe,"A",{href:!0});var EDr=s(TR);Eoo=r(EDr,"RagTokenizer"),EDr.forEach(t),Coo=r(dCe," (RAG model)"),dCe.forEach(t),woo=i(S),ms=n(S,"LI",{});var c9=s(ms);cre=n(c9,"STRONG",{});var CDr=s(cre);Aoo=r(CDr,"realm"),CDr.forEach(t),yoo=r(c9," \u2014 "),MR=n(c9,"A",{href:!0});var wDr=s(MR);Loo=r(wDr,"RealmTokenizer"),wDr.forEach(t),xoo=r(c9," or "),ER=n(c9,"A",{href:!0});var ADr=s(ER);$oo=r(ADr,"RealmTokenizerFast"),ADr.forEach(t),koo=r(c9," (Realm model)"),c9.forEach(t),Soo=i(S),gs=n(S,"LI",{});var f9=s(gs);fre=n(f9,"STRONG",{});var yDr=s(fre);Roo=r(yDr,"reformer"),yDr.forEach(t),Boo=r(f9," \u2014 "),CR=n(f9,"A",{href:!0});var LDr=s(CR);Poo=r(LDr,"ReformerTokenizer"),LDr.forEach(t),Ioo=r(f9," or "),wR=n(f9,"A",{href:!0});var xDr=s(wR);qoo=r(xDr,"ReformerTokenizerFast"),xDr.forEach(t),Noo=r(f9," (Reformer model)"),f9.forEach(t),joo=i(S),hs=n(S,"LI",{});var m9=s(hs);mre=n(m9,"STRONG",{});var $Dr=s(mre);Doo=r($Dr,"rembert"),$Dr.forEach(t),Goo=r(m9," \u2014 "),AR=n(m9,"A",{href:!0});var kDr=s(AR);Ooo=r(kDr,"RemBertTokenizer"),kDr.forEach(t),Voo=r(m9," or "),yR=n(m9,"A",{href:!0});var SDr=s(yR);Xoo=r(SDr,"RemBertTokenizerFast"),SDr.forEach(t),zoo=r(m9," (RemBERT model)"),m9.forEach(t),Qoo=i(S),ps=n(S,"LI",{});var g9=s(ps);gre=n(g9,"STRONG",{});var RDr=s(gre);Woo=r(RDr,"retribert"),RDr.forEach(t),Hoo=r(g9," \u2014 "),LR=n(g9,"A",{href:!0});var BDr=s(LR);Uoo=r(BDr,"RetriBertTokenizer"),BDr.forEach(t),Joo=r(g9," or "),xR=n(g9,"A",{href:!0});var PDr=s(xR);Yoo=r(PDr,"RetriBertTokenizerFast"),PDr.forEach(t),Koo=r(g9," (RetriBERT model)"),g9.forEach(t),Zoo=i(S),us=n(S,"LI",{});var h9=s(us);hre=n(h9,"STRONG",{});var IDr=s(hre);ero=r(IDr,"roberta"),IDr.forEach(t),oro=r(h9," \u2014 "),$R=n(h9,"A",{href:!0});var qDr=s($R);rro=r(qDr,"RobertaTokenizer"),qDr.forEach(t),tro=r(h9," or "),kR=n(h9,"A",{href:!0});var NDr=s(kR);aro=r(NDr,"RobertaTokenizerFast"),NDr.forEach(t),nro=r(h9," (RoBERTa model)"),h9.forEach(t),sro=i(S),_s=n(S,"LI",{});var p9=s(_s);pre=n(p9,"STRONG",{});var jDr=s(pre);lro=r(jDr,"roformer"),jDr.forEach(t),iro=r(p9," \u2014 "),SR=n(p9,"A",{href:!0});var DDr=s(SR);dro=r(DDr,"RoFormerTokenizer"),DDr.forEach(t),cro=r(p9," or "),RR=n(p9,"A",{href:!0});var GDr=s(RR);fro=r(GDr,"RoFormerTokenizerFast"),GDr.forEach(t),mro=r(p9," (RoFormer model)"),p9.forEach(t),gro=i(S),yg=n(S,"LI",{});var cCe=s(yg);ure=n(cCe,"STRONG",{});var ODr=s(ure);hro=r(ODr,"speech_to_text"),ODr.forEach(t),pro=r(cCe," \u2014 "),BR=n(cCe,"A",{href:!0});var VDr=s(BR);uro=r(VDr,"Speech2TextTokenizer"),VDr.forEach(t),_ro=r(cCe," (Speech2Text model)"),cCe.forEach(t),bro=i(S),Lg=n(S,"LI",{});var fCe=s(Lg);_re=n(fCe,"STRONG",{});var XDr=s(_re);vro=r(XDr,"speech_to_text_2"),XDr.forEach(t),Fro=r(fCe," \u2014 "),PR=n(fCe,"A",{href:!0});var zDr=s(PR);Tro=r(zDr,"Speech2Text2Tokenizer"),zDr.forEach(t),Mro=r(fCe," (Speech2Text2 model)"),fCe.forEach(t),Ero=i(S),bs=n(S,"LI",{});var u9=s(bs);bre=n(u9,"STRONG",{});var QDr=s(bre);Cro=r(QDr,"splinter"),QDr.forEach(t),wro=r(u9," \u2014 "),IR=n(u9,"A",{href:!0});var WDr=s(IR);Aro=r(WDr,"SplinterTokenizer"),WDr.forEach(t),yro=r(u9," or "),qR=n(u9,"A",{href:!0});var HDr=s(qR);Lro=r(HDr,"SplinterTokenizerFast"),HDr.forEach(t),xro=r(u9," (Splinter model)"),u9.forEach(t),$ro=i(S),vs=n(S,"LI",{});var _9=s(vs);vre=n(_9,"STRONG",{});var UDr=s(vre);kro=r(UDr,"squeezebert"),UDr.forEach(t),Sro=r(_9," \u2014 "),NR=n(_9,"A",{href:!0});var JDr=s(NR);Rro=r(JDr,"SqueezeBertTokenizer"),JDr.forEach(t),Bro=r(_9," or "),jR=n(_9,"A",{href:!0});var YDr=s(jR);Pro=r(YDr,"SqueezeBertTokenizerFast"),YDr.forEach(t),Iro=r(_9," (SqueezeBERT model)"),_9.forEach(t),qro=i(S),Fs=n(S,"LI",{});var b9=s(Fs);Fre=n(b9,"STRONG",{});var KDr=s(Fre);Nro=r(KDr,"t5"),KDr.forEach(t),jro=r(b9," \u2014 "),DR=n(b9,"A",{href:!0});var ZDr=s(DR);Dro=r(ZDr,"T5Tokenizer"),ZDr.forEach(t),Gro=r(b9," or "),GR=n(b9,"A",{href:!0});var eGr=s(GR);Oro=r(eGr,"T5TokenizerFast"),eGr.forEach(t),Vro=r(b9," (T5 model)"),b9.forEach(t),Xro=i(S),xg=n(S,"LI",{});var mCe=s(xg);Tre=n(mCe,"STRONG",{});var oGr=s(Tre);zro=r(oGr,"tapas"),oGr.forEach(t),Qro=r(mCe," \u2014 "),OR=n(mCe,"A",{href:!0});var rGr=s(OR);Wro=r(rGr,"TapasTokenizer"),rGr.forEach(t),Hro=r(mCe," (TAPAS model)"),mCe.forEach(t),Uro=i(S),$g=n(S,"LI",{});var gCe=s($g);Mre=n(gCe,"STRONG",{});var tGr=s(Mre);Jro=r(tGr,"tapex"),tGr.forEach(t),Yro=r(gCe," \u2014 "),VR=n(gCe,"A",{href:!0});var aGr=s(VR);Kro=r(aGr,"TapexTokenizer"),aGr.forEach(t),Zro=r(gCe," (TAPEX model)"),gCe.forEach(t),eto=i(S),kg=n(S,"LI",{});var hCe=s(kg);Ere=n(hCe,"STRONG",{});var nGr=s(Ere);oto=r(nGr,"transfo-xl"),nGr.forEach(t),rto=r(hCe," \u2014 "),XR=n(hCe,"A",{href:!0});var sGr=s(XR);tto=r(sGr,"TransfoXLTokenizer"),sGr.forEach(t),ato=r(hCe," (Transformer-XL model)"),hCe.forEach(t),nto=i(S),Ts=n(S,"LI",{});var v9=s(Ts);Cre=n(v9,"STRONG",{});var lGr=s(Cre);sto=r(lGr,"visual_bert"),lGr.forEach(t),lto=r(v9," \u2014 "),zR=n(v9,"A",{href:!0});var iGr=s(zR);ito=r(iGr,"BertTokenizer"),iGr.forEach(t),dto=r(v9," or "),QR=n(v9,"A",{href:!0});var dGr=s(QR);cto=r(dGr,"BertTokenizerFast"),dGr.forEach(t),fto=r(v9," (VisualBert model)"),v9.forEach(t),mto=i(S),Sg=n(S,"LI",{});var pCe=s(Sg);wre=n(pCe,"STRONG",{});var cGr=s(wre);gto=r(cGr,"wav2vec2"),cGr.forEach(t),hto=r(pCe," \u2014 "),WR=n(pCe,"A",{href:!0});var fGr=s(WR);pto=r(fGr,"Wav2Vec2CTCTokenizer"),fGr.forEach(t),uto=r(pCe," (Wav2Vec2 model)"),pCe.forEach(t),_to=i(S),Rg=n(S,"LI",{});var uCe=s(Rg);Are=n(uCe,"STRONG",{});var mGr=s(Are);bto=r(mGr,"wav2vec2_phoneme"),mGr.forEach(t),vto=r(uCe," \u2014 "),HR=n(uCe,"A",{href:!0});var gGr=s(HR);Fto=r(gGr,"Wav2Vec2PhonemeCTCTokenizer"),gGr.forEach(t),Tto=r(uCe," (Wav2Vec2Phoneme model)"),uCe.forEach(t),Mto=i(S),Ms=n(S,"LI",{});var F9=s(Ms);yre=n(F9,"STRONG",{});var hGr=s(yre);Eto=r(hGr,"xglm"),hGr.forEach(t),Cto=r(F9," \u2014 "),UR=n(F9,"A",{href:!0});var pGr=s(UR);wto=r(pGr,"XGLMTokenizer"),pGr.forEach(t),Ato=r(F9," or "),JR=n(F9,"A",{href:!0});var uGr=s(JR);yto=r(uGr,"XGLMTokenizerFast"),uGr.forEach(t),Lto=r(F9," (XGLM model)"),F9.forEach(t),xto=i(S),Bg=n(S,"LI",{});var _Ce=s(Bg);Lre=n(_Ce,"STRONG",{});var _Gr=s(Lre);$to=r(_Gr,"xlm"),_Gr.forEach(t),kto=r(_Ce," \u2014 "),YR=n(_Ce,"A",{href:!0});var bGr=s(YR);Sto=r(bGr,"XLMTokenizer"),bGr.forEach(t),Rto=r(_Ce," (XLM model)"),_Ce.forEach(t),Bto=i(S),Pg=n(S,"LI",{});var bCe=s(Pg);xre=n(bCe,"STRONG",{});var vGr=s(xre);Pto=r(vGr,"xlm-prophetnet"),vGr.forEach(t),Ito=r(bCe," \u2014 "),KR=n(bCe,"A",{href:!0});var FGr=s(KR);qto=r(FGr,"XLMProphetNetTokenizer"),FGr.forEach(t),Nto=r(bCe," (XLMProphetNet model)"),bCe.forEach(t),jto=i(S),Es=n(S,"LI",{});var T9=s(Es);$re=n(T9,"STRONG",{});var TGr=s($re);Dto=r(TGr,"xlm-roberta"),TGr.forEach(t),Gto=r(T9," \u2014 "),ZR=n(T9,"A",{href:!0});var MGr=s(ZR);Oto=r(MGr,"XLMRobertaTokenizer"),MGr.forEach(t),Vto=r(T9," or "),eB=n(T9,"A",{href:!0});var EGr=s(eB);Xto=r(EGr,"XLMRobertaTokenizerFast"),EGr.forEach(t),zto=r(T9," (XLM-RoBERTa model)"),T9.forEach(t),Qto=i(S),Cs=n(S,"LI",{});var M9=s(Cs);kre=n(M9,"STRONG",{});var CGr=s(kre);Wto=r(CGr,"xlm-roberta-xl"),CGr.forEach(t),Hto=r(M9," \u2014 "),oB=n(M9,"A",{href:!0});var wGr=s(oB);Uto=r(wGr,"RobertaTokenizer"),wGr.forEach(t),Jto=r(M9," or "),rB=n(M9,"A",{href:!0});var AGr=s(rB);Yto=r(AGr,"RobertaTokenizerFast"),AGr.forEach(t),Kto=r(M9," (XLM-RoBERTa-XL model)"),M9.forEach(t),Zto=i(S),ws=n(S,"LI",{});var E9=s(ws);Sre=n(E9,"STRONG",{});var yGr=s(Sre);eao=r(yGr,"xlnet"),yGr.forEach(t),oao=r(E9," \u2014 "),tB=n(E9,"A",{href:!0});var LGr=s(tB);rao=r(LGr,"XLNetTokenizer"),LGr.forEach(t),tao=r(E9," or "),aB=n(E9,"A",{href:!0});var xGr=s(aB);aao=r(xGr,"XLNetTokenizerFast"),xGr.forEach(t),nao=r(E9," (XLNet model)"),E9.forEach(t),sao=i(S),As=n(S,"LI",{});var C9=s(As);Rre=n(C9,"STRONG",{});var $Gr=s(Rre);lao=r($Gr,"yoso"),$Gr.forEach(t),iao=r(C9," \u2014 "),nB=n(C9,"A",{href:!0});var kGr=s(nB);dao=r(kGr,"AlbertTokenizer"),kGr.forEach(t),cao=r(C9," or "),sB=n(C9,"A",{href:!0});var SGr=s(sB);fao=r(SGr,"AlbertTokenizerFast"),SGr.forEach(t),mao=r(C9," (YOSO model)"),C9.forEach(t),S.forEach(t),gao=i(ks),T(Ig.$$.fragment,ks),ks.forEach(t),hao=i($s),qg=n($s,"DIV",{class:!0});var UPe=s(qg);T($A.$$.fragment,UPe),pao=i(UPe),Bre=n(UPe,"P",{});var RGr=s(Bre);uao=r(RGr,"Register a new tokenizer in this mapping."),RGr.forEach(t),UPe.forEach(t),$s.forEach(t),KRe=i(f),mi=n(f,"H2",{class:!0});var JPe=s(mi);Ng=n(JPe,"A",{id:!0,class:!0,href:!0});var BGr=s(Ng);Pre=n(BGr,"SPAN",{});var PGr=s(Pre);T(kA.$$.fragment,PGr),PGr.forEach(t),BGr.forEach(t),_ao=i(JPe),Ire=n(JPe,"SPAN",{});var IGr=s(Ire);bao=r(IGr,"AutoFeatureExtractor"),IGr.forEach(t),JPe.forEach(t),ZRe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(SA.$$.fragment,Ss),vao=i(Ss),RA=n(Ss,"P",{});var YPe=s(RA);Fao=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lB=n(YPe,"A",{href:!0});var qGr=s(lB);Tao=r(qGr,"AutoFeatureExtractor.from_pretrained()"),qGr.forEach(t),Mao=r(YPe," class method."),YPe.forEach(t),Eao=i(Ss),BA=n(Ss,"P",{});var KPe=s(BA);Cao=r(KPe,"This class cannot be instantiated directly using "),qre=n(KPe,"CODE",{});var NGr=s(qre);wao=r(NGr,"__init__()"),NGr.forEach(t),Aao=r(KPe," (throws an error)."),KPe.forEach(t),yao=i(Ss),ze=n(Ss,"DIV",{class:!0});var Wt=s(ze);T(PA.$$.fragment,Wt),Lao=i(Wt),Nre=n(Wt,"P",{});var jGr=s(Nre);xao=r(jGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),jGr.forEach(t),$ao=i(Wt),Ta=n(Wt,"P",{});var T3=s(Ta);kao=r(T3,"The feature extractor class to instantiate is selected based on the "),jre=n(T3,"CODE",{});var DGr=s(jre);Sao=r(DGr,"model_type"),DGr.forEach(t),Rao=r(T3,` property of the config object
(either passed as an argument or loaded from `),Dre=n(T3,"CODE",{});var GGr=s(Dre);Bao=r(GGr,"pretrained_model_name_or_path"),GGr.forEach(t),Pao=r(T3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Gre=n(T3,"CODE",{});var OGr=s(Gre);Iao=r(OGr,"pretrained_model_name_or_path"),OGr.forEach(t),qao=r(T3,":"),T3.forEach(t),Nao=i(Wt),te=n(Wt,"UL",{});var se=s(te);jg=n(se,"LI",{});var vCe=s(jg);Ore=n(vCe,"STRONG",{});var VGr=s(Ore);jao=r(VGr,"beit"),VGr.forEach(t),Dao=r(vCe," \u2014 "),iB=n(vCe,"A",{href:!0});var XGr=s(iB);Gao=r(XGr,"BeitFeatureExtractor"),XGr.forEach(t),Oao=r(vCe," (BEiT model)"),vCe.forEach(t),Vao=i(se),Dg=n(se,"LI",{});var FCe=s(Dg);Vre=n(FCe,"STRONG",{});var zGr=s(Vre);Xao=r(zGr,"clip"),zGr.forEach(t),zao=r(FCe," \u2014 "),dB=n(FCe,"A",{href:!0});var QGr=s(dB);Qao=r(QGr,"CLIPFeatureExtractor"),QGr.forEach(t),Wao=r(FCe," (CLIP model)"),FCe.forEach(t),Hao=i(se),Gg=n(se,"LI",{});var TCe=s(Gg);Xre=n(TCe,"STRONG",{});var WGr=s(Xre);Uao=r(WGr,"convnext"),WGr.forEach(t),Jao=r(TCe," \u2014 "),cB=n(TCe,"A",{href:!0});var HGr=s(cB);Yao=r(HGr,"ConvNextFeatureExtractor"),HGr.forEach(t),Kao=r(TCe," (ConvNext model)"),TCe.forEach(t),Zao=i(se),Og=n(se,"LI",{});var MCe=s(Og);zre=n(MCe,"STRONG",{});var UGr=s(zre);eno=r(UGr,"data2vec-audio"),UGr.forEach(t),ono=r(MCe," \u2014 "),fB=n(MCe,"A",{href:!0});var JGr=s(fB);rno=r(JGr,"Wav2Vec2FeatureExtractor"),JGr.forEach(t),tno=r(MCe," (Data2VecAudio model)"),MCe.forEach(t),ano=i(se),Vg=n(se,"LI",{});var ECe=s(Vg);Qre=n(ECe,"STRONG",{});var YGr=s(Qre);nno=r(YGr,"data2vec-vision"),YGr.forEach(t),sno=r(ECe," \u2014 "),mB=n(ECe,"A",{href:!0});var KGr=s(mB);lno=r(KGr,"BeitFeatureExtractor"),KGr.forEach(t),ino=r(ECe," (Data2VecVision model)"),ECe.forEach(t),dno=i(se),Xg=n(se,"LI",{});var CCe=s(Xg);Wre=n(CCe,"STRONG",{});var ZGr=s(Wre);cno=r(ZGr,"deit"),ZGr.forEach(t),fno=r(CCe," \u2014 "),gB=n(CCe,"A",{href:!0});var eOr=s(gB);mno=r(eOr,"DeiTFeatureExtractor"),eOr.forEach(t),gno=r(CCe," (DeiT model)"),CCe.forEach(t),hno=i(se),zg=n(se,"LI",{});var wCe=s(zg);Hre=n(wCe,"STRONG",{});var oOr=s(Hre);pno=r(oOr,"detr"),oOr.forEach(t),uno=r(wCe," \u2014 "),hB=n(wCe,"A",{href:!0});var rOr=s(hB);_no=r(rOr,"DetrFeatureExtractor"),rOr.forEach(t),bno=r(wCe," (DETR model)"),wCe.forEach(t),vno=i(se),Qg=n(se,"LI",{});var ACe=s(Qg);Ure=n(ACe,"STRONG",{});var tOr=s(Ure);Fno=r(tOr,"dpt"),tOr.forEach(t),Tno=r(ACe," \u2014 "),pB=n(ACe,"A",{href:!0});var aOr=s(pB);Mno=r(aOr,"DPTFeatureExtractor"),aOr.forEach(t),Eno=r(ACe," (DPT model)"),ACe.forEach(t),Cno=i(se),Wg=n(se,"LI",{});var yCe=s(Wg);Jre=n(yCe,"STRONG",{});var nOr=s(Jre);wno=r(nOr,"glpn"),nOr.forEach(t),Ano=r(yCe," \u2014 "),uB=n(yCe,"A",{href:!0});var sOr=s(uB);yno=r(sOr,"GLPNFeatureExtractor"),sOr.forEach(t),Lno=r(yCe," (GLPN model)"),yCe.forEach(t),xno=i(se),Hg=n(se,"LI",{});var LCe=s(Hg);Yre=n(LCe,"STRONG",{});var lOr=s(Yre);$no=r(lOr,"hubert"),lOr.forEach(t),kno=r(LCe," \u2014 "),_B=n(LCe,"A",{href:!0});var iOr=s(_B);Sno=r(iOr,"Wav2Vec2FeatureExtractor"),iOr.forEach(t),Rno=r(LCe," (Hubert model)"),LCe.forEach(t),Bno=i(se),Ug=n(se,"LI",{});var xCe=s(Ug);Kre=n(xCe,"STRONG",{});var dOr=s(Kre);Pno=r(dOr,"layoutlmv2"),dOr.forEach(t),Ino=r(xCe," \u2014 "),bB=n(xCe,"A",{href:!0});var cOr=s(bB);qno=r(cOr,"LayoutLMv2FeatureExtractor"),cOr.forEach(t),Nno=r(xCe," (LayoutLMv2 model)"),xCe.forEach(t),jno=i(se),Jg=n(se,"LI",{});var $Ce=s(Jg);Zre=n($Ce,"STRONG",{});var fOr=s(Zre);Dno=r(fOr,"maskformer"),fOr.forEach(t),Gno=r($Ce," \u2014 "),vB=n($Ce,"A",{href:!0});var mOr=s(vB);Ono=r(mOr,"MaskFormerFeatureExtractor"),mOr.forEach(t),Vno=r($Ce," (MaskFormer model)"),$Ce.forEach(t),Xno=i(se),Yg=n(se,"LI",{});var kCe=s(Yg);ete=n(kCe,"STRONG",{});var gOr=s(ete);zno=r(gOr,"mctc"),gOr.forEach(t),Qno=r(kCe," \u2014 "),FB=n(kCe,"A",{href:!0});var hOr=s(FB);Wno=r(hOr,"MCTCFeatureExtractor"),hOr.forEach(t),Hno=r(kCe," (MCTC model)"),kCe.forEach(t),Uno=i(se),Kg=n(se,"LI",{});var SCe=s(Kg);ote=n(SCe,"STRONG",{});var pOr=s(ote);Jno=r(pOr,"perceiver"),pOr.forEach(t),Yno=r(SCe," \u2014 "),TB=n(SCe,"A",{href:!0});var uOr=s(TB);Kno=r(uOr,"PerceiverFeatureExtractor"),uOr.forEach(t),Zno=r(SCe," (Perceiver model)"),SCe.forEach(t),eso=i(se),Zg=n(se,"LI",{});var RCe=s(Zg);rte=n(RCe,"STRONG",{});var _Or=s(rte);oso=r(_Or,"poolformer"),_Or.forEach(t),rso=r(RCe," \u2014 "),MB=n(RCe,"A",{href:!0});var bOr=s(MB);tso=r(bOr,"PoolFormerFeatureExtractor"),bOr.forEach(t),aso=r(RCe," (PoolFormer model)"),RCe.forEach(t),nso=i(se),eh=n(se,"LI",{});var BCe=s(eh);tte=n(BCe,"STRONG",{});var vOr=s(tte);sso=r(vOr,"regnet"),vOr.forEach(t),lso=r(BCe," \u2014 "),EB=n(BCe,"A",{href:!0});var FOr=s(EB);iso=r(FOr,"ConvNextFeatureExtractor"),FOr.forEach(t),dso=r(BCe," (RegNet model)"),BCe.forEach(t),cso=i(se),oh=n(se,"LI",{});var PCe=s(oh);ate=n(PCe,"STRONG",{});var TOr=s(ate);fso=r(TOr,"resnet"),TOr.forEach(t),mso=r(PCe," \u2014 "),CB=n(PCe,"A",{href:!0});var MOr=s(CB);gso=r(MOr,"ConvNextFeatureExtractor"),MOr.forEach(t),hso=r(PCe," (ResNet model)"),PCe.forEach(t),pso=i(se),rh=n(se,"LI",{});var ICe=s(rh);nte=n(ICe,"STRONG",{});var EOr=s(nte);uso=r(EOr,"segformer"),EOr.forEach(t),_so=r(ICe," \u2014 "),wB=n(ICe,"A",{href:!0});var COr=s(wB);bso=r(COr,"SegformerFeatureExtractor"),COr.forEach(t),vso=r(ICe," (SegFormer model)"),ICe.forEach(t),Fso=i(se),th=n(se,"LI",{});var qCe=s(th);ste=n(qCe,"STRONG",{});var wOr=s(ste);Tso=r(wOr,"speech_to_text"),wOr.forEach(t),Mso=r(qCe," \u2014 "),AB=n(qCe,"A",{href:!0});var AOr=s(AB);Eso=r(AOr,"Speech2TextFeatureExtractor"),AOr.forEach(t),Cso=r(qCe," (Speech2Text model)"),qCe.forEach(t),wso=i(se),ah=n(se,"LI",{});var NCe=s(ah);lte=n(NCe,"STRONG",{});var yOr=s(lte);Aso=r(yOr,"swin"),yOr.forEach(t),yso=r(NCe," \u2014 "),yB=n(NCe,"A",{href:!0});var LOr=s(yB);Lso=r(LOr,"ViTFeatureExtractor"),LOr.forEach(t),xso=r(NCe," (Swin model)"),NCe.forEach(t),$so=i(se),nh=n(se,"LI",{});var jCe=s(nh);ite=n(jCe,"STRONG",{});var xOr=s(ite);kso=r(xOr,"van"),xOr.forEach(t),Sso=r(jCe," \u2014 "),LB=n(jCe,"A",{href:!0});var $Or=s(LB);Rso=r($Or,"ConvNextFeatureExtractor"),$Or.forEach(t),Bso=r(jCe," (VAN model)"),jCe.forEach(t),Pso=i(se),sh=n(se,"LI",{});var DCe=s(sh);dte=n(DCe,"STRONG",{});var kOr=s(dte);Iso=r(kOr,"vit"),kOr.forEach(t),qso=r(DCe," \u2014 "),xB=n(DCe,"A",{href:!0});var SOr=s(xB);Nso=r(SOr,"ViTFeatureExtractor"),SOr.forEach(t),jso=r(DCe," (ViT model)"),DCe.forEach(t),Dso=i(se),lh=n(se,"LI",{});var GCe=s(lh);cte=n(GCe,"STRONG",{});var ROr=s(cte);Gso=r(ROr,"vit_mae"),ROr.forEach(t),Oso=r(GCe," \u2014 "),$B=n(GCe,"A",{href:!0});var BOr=s($B);Vso=r(BOr,"ViTFeatureExtractor"),BOr.forEach(t),Xso=r(GCe," (ViTMAE model)"),GCe.forEach(t),zso=i(se),ih=n(se,"LI",{});var OCe=s(ih);fte=n(OCe,"STRONG",{});var POr=s(fte);Qso=r(POr,"wav2vec2"),POr.forEach(t),Wso=r(OCe," \u2014 "),kB=n(OCe,"A",{href:!0});var IOr=s(kB);Hso=r(IOr,"Wav2Vec2FeatureExtractor"),IOr.forEach(t),Uso=r(OCe," (Wav2Vec2 model)"),OCe.forEach(t),se.forEach(t),Jso=i(Wt),T(dh.$$.fragment,Wt),Yso=i(Wt),T(ch.$$.fragment,Wt),Wt.forEach(t),Kso=i(Ss),fh=n(Ss,"DIV",{class:!0});var ZPe=s(fh);T(IA.$$.fragment,ZPe),Zso=i(ZPe),mte=n(ZPe,"P",{});var qOr=s(mte);elo=r(qOr,"Register a new feature extractor for this class."),qOr.forEach(t),ZPe.forEach(t),Ss.forEach(t),eBe=i(f),gi=n(f,"H2",{class:!0});var eIe=s(gi);mh=n(eIe,"A",{id:!0,class:!0,href:!0});var NOr=s(mh);gte=n(NOr,"SPAN",{});var jOr=s(gte);T(qA.$$.fragment,jOr),jOr.forEach(t),NOr.forEach(t),olo=i(eIe),hte=n(eIe,"SPAN",{});var DOr=s(hte);rlo=r(DOr,"AutoProcessor"),DOr.forEach(t),eIe.forEach(t),oBe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(NA.$$.fragment,Rs),tlo=i(Rs),jA=n(Rs,"P",{});var oIe=s(jA);alo=r(oIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),SB=n(oIe,"A",{href:!0});var GOr=s(SB);nlo=r(GOr,"AutoProcessor.from_pretrained()"),GOr.forEach(t),slo=r(oIe," class method."),oIe.forEach(t),llo=i(Rs),DA=n(Rs,"P",{});var rIe=s(DA);ilo=r(rIe,"This class cannot be instantiated directly using "),pte=n(rIe,"CODE",{});var OOr=s(pte);dlo=r(OOr,"__init__()"),OOr.forEach(t),clo=r(rIe," (throws an error)."),rIe.forEach(t),flo=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(GA.$$.fragment,Ht),mlo=i(Ht),ute=n(Ht,"P",{});var VOr=s(ute);glo=r(VOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VOr.forEach(t),hlo=i(Ht),hi=n(Ht,"P",{});var eY=s(hi);plo=r(eY,"The processor class to instantiate is selected based on the "),_te=n(eY,"CODE",{});var XOr=s(_te);ulo=r(XOr,"model_type"),XOr.forEach(t),_lo=r(eY,` property of the config object (either
passed as an argument or loaded from `),bte=n(eY,"CODE",{});var zOr=s(bte);blo=r(zOr,"pretrained_model_name_or_path"),zOr.forEach(t),vlo=r(eY," if possible):"),eY.forEach(t),Flo=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);gh=n(Fe,"LI",{});var VCe=s(gh);vte=n(VCe,"STRONG",{});var QOr=s(vte);Tlo=r(QOr,"clip"),QOr.forEach(t),Mlo=r(VCe," \u2014 "),RB=n(VCe,"A",{href:!0});var WOr=s(RB);Elo=r(WOr,"CLIPProcessor"),WOr.forEach(t),Clo=r(VCe," (CLIP model)"),VCe.forEach(t),wlo=i(Fe),hh=n(Fe,"LI",{});var XCe=s(hh);Fte=n(XCe,"STRONG",{});var HOr=s(Fte);Alo=r(HOr,"layoutlmv2"),HOr.forEach(t),ylo=r(XCe," \u2014 "),BB=n(XCe,"A",{href:!0});var UOr=s(BB);Llo=r(UOr,"LayoutLMv2Processor"),UOr.forEach(t),xlo=r(XCe," (LayoutLMv2 model)"),XCe.forEach(t),$lo=i(Fe),ph=n(Fe,"LI",{});var zCe=s(ph);Tte=n(zCe,"STRONG",{});var JOr=s(Tte);klo=r(JOr,"layoutxlm"),JOr.forEach(t),Slo=r(zCe," \u2014 "),PB=n(zCe,"A",{href:!0});var YOr=s(PB);Rlo=r(YOr,"LayoutXLMProcessor"),YOr.forEach(t),Blo=r(zCe," (LayoutXLM model)"),zCe.forEach(t),Plo=i(Fe),uh=n(Fe,"LI",{});var QCe=s(uh);Mte=n(QCe,"STRONG",{});var KOr=s(Mte);Ilo=r(KOr,"sew"),KOr.forEach(t),qlo=r(QCe," \u2014 "),IB=n(QCe,"A",{href:!0});var ZOr=s(IB);Nlo=r(ZOr,"Wav2Vec2Processor"),ZOr.forEach(t),jlo=r(QCe," (SEW model)"),QCe.forEach(t),Dlo=i(Fe),_h=n(Fe,"LI",{});var WCe=s(_h);Ete=n(WCe,"STRONG",{});var eVr=s(Ete);Glo=r(eVr,"sew-d"),eVr.forEach(t),Olo=r(WCe," \u2014 "),qB=n(WCe,"A",{href:!0});var oVr=s(qB);Vlo=r(oVr,"Wav2Vec2Processor"),oVr.forEach(t),Xlo=r(WCe," (SEW-D model)"),WCe.forEach(t),zlo=i(Fe),bh=n(Fe,"LI",{});var HCe=s(bh);Cte=n(HCe,"STRONG",{});var rVr=s(Cte);Qlo=r(rVr,"speech_to_text"),rVr.forEach(t),Wlo=r(HCe," \u2014 "),NB=n(HCe,"A",{href:!0});var tVr=s(NB);Hlo=r(tVr,"Speech2TextProcessor"),tVr.forEach(t),Ulo=r(HCe," (Speech2Text model)"),HCe.forEach(t),Jlo=i(Fe),vh=n(Fe,"LI",{});var UCe=s(vh);wte=n(UCe,"STRONG",{});var aVr=s(wte);Ylo=r(aVr,"speech_to_text_2"),aVr.forEach(t),Klo=r(UCe," \u2014 "),jB=n(UCe,"A",{href:!0});var nVr=s(jB);Zlo=r(nVr,"Speech2Text2Processor"),nVr.forEach(t),eio=r(UCe," (Speech2Text2 model)"),UCe.forEach(t),oio=i(Fe),Fh=n(Fe,"LI",{});var JCe=s(Fh);Ate=n(JCe,"STRONG",{});var sVr=s(Ate);rio=r(sVr,"trocr"),sVr.forEach(t),tio=r(JCe," \u2014 "),DB=n(JCe,"A",{href:!0});var lVr=s(DB);aio=r(lVr,"TrOCRProcessor"),lVr.forEach(t),nio=r(JCe," (TrOCR model)"),JCe.forEach(t),sio=i(Fe),Th=n(Fe,"LI",{});var YCe=s(Th);yte=n(YCe,"STRONG",{});var iVr=s(yte);lio=r(iVr,"unispeech"),iVr.forEach(t),iio=r(YCe," \u2014 "),GB=n(YCe,"A",{href:!0});var dVr=s(GB);dio=r(dVr,"Wav2Vec2Processor"),dVr.forEach(t),cio=r(YCe," (UniSpeech model)"),YCe.forEach(t),fio=i(Fe),Mh=n(Fe,"LI",{});var KCe=s(Mh);Lte=n(KCe,"STRONG",{});var cVr=s(Lte);mio=r(cVr,"unispeech-sat"),cVr.forEach(t),gio=r(KCe," \u2014 "),OB=n(KCe,"A",{href:!0});var fVr=s(OB);hio=r(fVr,"Wav2Vec2Processor"),fVr.forEach(t),pio=r(KCe," (UniSpeechSat model)"),KCe.forEach(t),uio=i(Fe),Eh=n(Fe,"LI",{});var ZCe=s(Eh);xte=n(ZCe,"STRONG",{});var mVr=s(xte);_io=r(mVr,"vilt"),mVr.forEach(t),bio=r(ZCe," \u2014 "),VB=n(ZCe,"A",{href:!0});var gVr=s(VB);vio=r(gVr,"ViltProcessor"),gVr.forEach(t),Fio=r(ZCe," (ViLT model)"),ZCe.forEach(t),Tio=i(Fe),Ch=n(Fe,"LI",{});var e5e=s(Ch);$te=n(e5e,"STRONG",{});var hVr=s($te);Mio=r(hVr,"vision-text-dual-encoder"),hVr.forEach(t),Eio=r(e5e," \u2014 "),XB=n(e5e,"A",{href:!0});var pVr=s(XB);Cio=r(pVr,"VisionTextDualEncoderProcessor"),pVr.forEach(t),wio=r(e5e," (VisionTextDualEncoder model)"),e5e.forEach(t),Aio=i(Fe),wh=n(Fe,"LI",{});var o5e=s(wh);kte=n(o5e,"STRONG",{});var uVr=s(kte);yio=r(uVr,"wav2vec2"),uVr.forEach(t),Lio=r(o5e," \u2014 "),zB=n(o5e,"A",{href:!0});var _Vr=s(zB);xio=r(_Vr,"Wav2Vec2Processor"),_Vr.forEach(t),$io=r(o5e," (Wav2Vec2 model)"),o5e.forEach(t),kio=i(Fe),Ah=n(Fe,"LI",{});var r5e=s(Ah);Ste=n(r5e,"STRONG",{});var bVr=s(Ste);Sio=r(bVr,"wavlm"),bVr.forEach(t),Rio=r(r5e," \u2014 "),QB=n(r5e,"A",{href:!0});var vVr=s(QB);Bio=r(vVr,"Wav2Vec2Processor"),vVr.forEach(t),Pio=r(r5e," (WavLM model)"),r5e.forEach(t),Fe.forEach(t),Iio=i(Ht),T(yh.$$.fragment,Ht),qio=i(Ht),T(Lh.$$.fragment,Ht),Ht.forEach(t),Nio=i(Rs),xh=n(Rs,"DIV",{class:!0});var tIe=s(xh);T(OA.$$.fragment,tIe),jio=i(tIe),Rte=n(tIe,"P",{});var FVr=s(Rte);Dio=r(FVr,"Register a new processor for this class."),FVr.forEach(t),tIe.forEach(t),Rs.forEach(t),rBe=i(f),pi=n(f,"H2",{class:!0});var aIe=s(pi);$h=n(aIe,"A",{id:!0,class:!0,href:!0});var TVr=s($h);Bte=n(TVr,"SPAN",{});var MVr=s(Bte);T(VA.$$.fragment,MVr),MVr.forEach(t),TVr.forEach(t),Gio=i(aIe),Pte=n(aIe,"SPAN",{});var EVr=s(Pte);Oio=r(EVr,"AutoModel"),EVr.forEach(t),aIe.forEach(t),tBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(XA.$$.fragment,Bs),Vio=i(Bs),ui=n(Bs,"P",{});var oY=s(ui);Xio=r(oY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),WB=n(oY,"A",{href:!0});var CVr=s(WB);zio=r(CVr,"from_pretrained()"),CVr.forEach(t),Qio=r(oY," class method or the "),HB=n(oY,"A",{href:!0});var wVr=s(HB);Wio=r(wVr,"from_config()"),wVr.forEach(t),Hio=r(oY,` class
method.`),oY.forEach(t),Uio=i(Bs),zA=n(Bs,"P",{});var nIe=s(zA);Jio=r(nIe,"This class cannot be instantiated directly using "),Ite=n(nIe,"CODE",{});var AVr=s(Ite);Yio=r(AVr,"__init__()"),AVr.forEach(t),Kio=r(nIe," (throws an error)."),nIe.forEach(t),Zio=i(Bs),Kr=n(Bs,"DIV",{class:!0});var M3=s(Kr);T(QA.$$.fragment,M3),edo=i(M3),qte=n(M3,"P",{});var yVr=s(qte);odo=r(yVr,"Instantiates one of the base model classes of the library from a configuration."),yVr.forEach(t),rdo=i(M3),_i=n(M3,"P",{});var rY=s(_i);tdo=r(rY,`Note:
Loading a model from its configuration file does `),Nte=n(rY,"STRONG",{});var LVr=s(Nte);ado=r(LVr,"not"),LVr.forEach(t),ndo=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UB=n(rY,"A",{href:!0});var xVr=s(UB);sdo=r(xVr,"from_pretrained()"),xVr.forEach(t),ldo=r(rY," to load the model weights."),rY.forEach(t),ido=i(M3),T(kh.$$.fragment,M3),M3.forEach(t),ddo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(WA.$$.fragment,Ut),cdo=i(Ut),jte=n(Ut,"P",{});var $Vr=s(jte);fdo=r($Vr,"Instantiate one of the base model classes of the library from a pretrained model."),$Vr.forEach(t),mdo=i(Ut),Ma=n(Ut,"P",{});var E3=s(Ma);gdo=r(E3,"The model class to instantiate is selected based on the "),Dte=n(E3,"CODE",{});var kVr=s(Dte);hdo=r(kVr,"model_type"),kVr.forEach(t),pdo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Gte=n(E3,"CODE",{});var SVr=s(Gte);udo=r(SVr,"pretrained_model_name_or_path"),SVr.forEach(t),_do=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=n(E3,"CODE",{});var RVr=s(Ote);bdo=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),vdo=r(E3,":"),E3.forEach(t),Fdo=i(Ut),x=n(Ut,"UL",{});var $=s(x);Sh=n($,"LI",{});var t5e=s(Sh);Vte=n(t5e,"STRONG",{});var BVr=s(Vte);Tdo=r(BVr,"albert"),BVr.forEach(t),Mdo=r(t5e," \u2014 "),JB=n(t5e,"A",{href:!0});var PVr=s(JB);Edo=r(PVr,"AlbertModel"),PVr.forEach(t),Cdo=r(t5e," (ALBERT model)"),t5e.forEach(t),wdo=i($),Rh=n($,"LI",{});var a5e=s(Rh);Xte=n(a5e,"STRONG",{});var IVr=s(Xte);Ado=r(IVr,"bart"),IVr.forEach(t),ydo=r(a5e," \u2014 "),YB=n(a5e,"A",{href:!0});var qVr=s(YB);Ldo=r(qVr,"BartModel"),qVr.forEach(t),xdo=r(a5e," (BART model)"),a5e.forEach(t),$do=i($),Bh=n($,"LI",{});var n5e=s(Bh);zte=n(n5e,"STRONG",{});var NVr=s(zte);kdo=r(NVr,"beit"),NVr.forEach(t),Sdo=r(n5e," \u2014 "),KB=n(n5e,"A",{href:!0});var jVr=s(KB);Rdo=r(jVr,"BeitModel"),jVr.forEach(t),Bdo=r(n5e," (BEiT model)"),n5e.forEach(t),Pdo=i($),Ph=n($,"LI",{});var s5e=s(Ph);Qte=n(s5e,"STRONG",{});var DVr=s(Qte);Ido=r(DVr,"bert"),DVr.forEach(t),qdo=r(s5e," \u2014 "),ZB=n(s5e,"A",{href:!0});var GVr=s(ZB);Ndo=r(GVr,"BertModel"),GVr.forEach(t),jdo=r(s5e," (BERT model)"),s5e.forEach(t),Ddo=i($),Ih=n($,"LI",{});var l5e=s(Ih);Wte=n(l5e,"STRONG",{});var OVr=s(Wte);Gdo=r(OVr,"bert-generation"),OVr.forEach(t),Odo=r(l5e," \u2014 "),eP=n(l5e,"A",{href:!0});var VVr=s(eP);Vdo=r(VVr,"BertGenerationEncoder"),VVr.forEach(t),Xdo=r(l5e," (Bert Generation model)"),l5e.forEach(t),zdo=i($),qh=n($,"LI",{});var i5e=s(qh);Hte=n(i5e,"STRONG",{});var XVr=s(Hte);Qdo=r(XVr,"big_bird"),XVr.forEach(t),Wdo=r(i5e," \u2014 "),oP=n(i5e,"A",{href:!0});var zVr=s(oP);Hdo=r(zVr,"BigBirdModel"),zVr.forEach(t),Udo=r(i5e," (BigBird model)"),i5e.forEach(t),Jdo=i($),Nh=n($,"LI",{});var d5e=s(Nh);Ute=n(d5e,"STRONG",{});var QVr=s(Ute);Ydo=r(QVr,"bigbird_pegasus"),QVr.forEach(t),Kdo=r(d5e," \u2014 "),rP=n(d5e,"A",{href:!0});var WVr=s(rP);Zdo=r(WVr,"BigBirdPegasusModel"),WVr.forEach(t),eco=r(d5e," (BigBirdPegasus model)"),d5e.forEach(t),oco=i($),jh=n($,"LI",{});var c5e=s(jh);Jte=n(c5e,"STRONG",{});var HVr=s(Jte);rco=r(HVr,"blenderbot"),HVr.forEach(t),tco=r(c5e," \u2014 "),tP=n(c5e,"A",{href:!0});var UVr=s(tP);aco=r(UVr,"BlenderbotModel"),UVr.forEach(t),nco=r(c5e," (Blenderbot model)"),c5e.forEach(t),sco=i($),Dh=n($,"LI",{});var f5e=s(Dh);Yte=n(f5e,"STRONG",{});var JVr=s(Yte);lco=r(JVr,"blenderbot-small"),JVr.forEach(t),ico=r(f5e," \u2014 "),aP=n(f5e,"A",{href:!0});var YVr=s(aP);dco=r(YVr,"BlenderbotSmallModel"),YVr.forEach(t),cco=r(f5e," (BlenderbotSmall model)"),f5e.forEach(t),fco=i($),Gh=n($,"LI",{});var m5e=s(Gh);Kte=n(m5e,"STRONG",{});var KVr=s(Kte);mco=r(KVr,"camembert"),KVr.forEach(t),gco=r(m5e," \u2014 "),nP=n(m5e,"A",{href:!0});var ZVr=s(nP);hco=r(ZVr,"CamembertModel"),ZVr.forEach(t),pco=r(m5e," (CamemBERT model)"),m5e.forEach(t),uco=i($),Oh=n($,"LI",{});var g5e=s(Oh);Zte=n(g5e,"STRONG",{});var eXr=s(Zte);_co=r(eXr,"canine"),eXr.forEach(t),bco=r(g5e," \u2014 "),sP=n(g5e,"A",{href:!0});var oXr=s(sP);vco=r(oXr,"CanineModel"),oXr.forEach(t),Fco=r(g5e," (Canine model)"),g5e.forEach(t),Tco=i($),Vh=n($,"LI",{});var h5e=s(Vh);eae=n(h5e,"STRONG",{});var rXr=s(eae);Mco=r(rXr,"clip"),rXr.forEach(t),Eco=r(h5e," \u2014 "),lP=n(h5e,"A",{href:!0});var tXr=s(lP);Cco=r(tXr,"CLIPModel"),tXr.forEach(t),wco=r(h5e," (CLIP model)"),h5e.forEach(t),Aco=i($),Xh=n($,"LI",{});var p5e=s(Xh);oae=n(p5e,"STRONG",{});var aXr=s(oae);yco=r(aXr,"convbert"),aXr.forEach(t),Lco=r(p5e," \u2014 "),iP=n(p5e,"A",{href:!0});var nXr=s(iP);xco=r(nXr,"ConvBertModel"),nXr.forEach(t),$co=r(p5e," (ConvBERT model)"),p5e.forEach(t),kco=i($),zh=n($,"LI",{});var u5e=s(zh);rae=n(u5e,"STRONG",{});var sXr=s(rae);Sco=r(sXr,"convnext"),sXr.forEach(t),Rco=r(u5e," \u2014 "),dP=n(u5e,"A",{href:!0});var lXr=s(dP);Bco=r(lXr,"ConvNextModel"),lXr.forEach(t),Pco=r(u5e," (ConvNext model)"),u5e.forEach(t),Ico=i($),Qh=n($,"LI",{});var _5e=s(Qh);tae=n(_5e,"STRONG",{});var iXr=s(tae);qco=r(iXr,"ctrl"),iXr.forEach(t),Nco=r(_5e," \u2014 "),cP=n(_5e,"A",{href:!0});var dXr=s(cP);jco=r(dXr,"CTRLModel"),dXr.forEach(t),Dco=r(_5e," (CTRL model)"),_5e.forEach(t),Gco=i($),Wh=n($,"LI",{});var b5e=s(Wh);aae=n(b5e,"STRONG",{});var cXr=s(aae);Oco=r(cXr,"data2vec-audio"),cXr.forEach(t),Vco=r(b5e," \u2014 "),fP=n(b5e,"A",{href:!0});var fXr=s(fP);Xco=r(fXr,"Data2VecAudioModel"),fXr.forEach(t),zco=r(b5e," (Data2VecAudio model)"),b5e.forEach(t),Qco=i($),Hh=n($,"LI",{});var v5e=s(Hh);nae=n(v5e,"STRONG",{});var mXr=s(nae);Wco=r(mXr,"data2vec-text"),mXr.forEach(t),Hco=r(v5e," \u2014 "),mP=n(v5e,"A",{href:!0});var gXr=s(mP);Uco=r(gXr,"Data2VecTextModel"),gXr.forEach(t),Jco=r(v5e," (Data2VecText model)"),v5e.forEach(t),Yco=i($),Uh=n($,"LI",{});var F5e=s(Uh);sae=n(F5e,"STRONG",{});var hXr=s(sae);Kco=r(hXr,"data2vec-vision"),hXr.forEach(t),Zco=r(F5e," \u2014 "),gP=n(F5e,"A",{href:!0});var pXr=s(gP);efo=r(pXr,"Data2VecVisionModel"),pXr.forEach(t),ofo=r(F5e," (Data2VecVision model)"),F5e.forEach(t),rfo=i($),Jh=n($,"LI",{});var T5e=s(Jh);lae=n(T5e,"STRONG",{});var uXr=s(lae);tfo=r(uXr,"deberta"),uXr.forEach(t),afo=r(T5e," \u2014 "),hP=n(T5e,"A",{href:!0});var _Xr=s(hP);nfo=r(_Xr,"DebertaModel"),_Xr.forEach(t),sfo=r(T5e," (DeBERTa model)"),T5e.forEach(t),lfo=i($),Yh=n($,"LI",{});var M5e=s(Yh);iae=n(M5e,"STRONG",{});var bXr=s(iae);ifo=r(bXr,"deberta-v2"),bXr.forEach(t),dfo=r(M5e," \u2014 "),pP=n(M5e,"A",{href:!0});var vXr=s(pP);cfo=r(vXr,"DebertaV2Model"),vXr.forEach(t),ffo=r(M5e," (DeBERTa-v2 model)"),M5e.forEach(t),mfo=i($),Kh=n($,"LI",{});var E5e=s(Kh);dae=n(E5e,"STRONG",{});var FXr=s(dae);gfo=r(FXr,"decision_transformer"),FXr.forEach(t),hfo=r(E5e," \u2014 "),uP=n(E5e,"A",{href:!0});var TXr=s(uP);pfo=r(TXr,"DecisionTransformerModel"),TXr.forEach(t),ufo=r(E5e," (Decision Transformer model)"),E5e.forEach(t),_fo=i($),Zh=n($,"LI",{});var C5e=s(Zh);cae=n(C5e,"STRONG",{});var MXr=s(cae);bfo=r(MXr,"deit"),MXr.forEach(t),vfo=r(C5e," \u2014 "),_P=n(C5e,"A",{href:!0});var EXr=s(_P);Ffo=r(EXr,"DeiTModel"),EXr.forEach(t),Tfo=r(C5e," (DeiT model)"),C5e.forEach(t),Mfo=i($),ep=n($,"LI",{});var w5e=s(ep);fae=n(w5e,"STRONG",{});var CXr=s(fae);Efo=r(CXr,"detr"),CXr.forEach(t),Cfo=r(w5e," \u2014 "),bP=n(w5e,"A",{href:!0});var wXr=s(bP);wfo=r(wXr,"DetrModel"),wXr.forEach(t),Afo=r(w5e," (DETR model)"),w5e.forEach(t),yfo=i($),op=n($,"LI",{});var A5e=s(op);mae=n(A5e,"STRONG",{});var AXr=s(mae);Lfo=r(AXr,"distilbert"),AXr.forEach(t),xfo=r(A5e," \u2014 "),vP=n(A5e,"A",{href:!0});var yXr=s(vP);$fo=r(yXr,"DistilBertModel"),yXr.forEach(t),kfo=r(A5e," (DistilBERT model)"),A5e.forEach(t),Sfo=i($),rp=n($,"LI",{});var y5e=s(rp);gae=n(y5e,"STRONG",{});var LXr=s(gae);Rfo=r(LXr,"dpr"),LXr.forEach(t),Bfo=r(y5e," \u2014 "),FP=n(y5e,"A",{href:!0});var xXr=s(FP);Pfo=r(xXr,"DPRQuestionEncoder"),xXr.forEach(t),Ifo=r(y5e," (DPR model)"),y5e.forEach(t),qfo=i($),tp=n($,"LI",{});var L5e=s(tp);hae=n(L5e,"STRONG",{});var $Xr=s(hae);Nfo=r($Xr,"dpt"),$Xr.forEach(t),jfo=r(L5e," \u2014 "),TP=n(L5e,"A",{href:!0});var kXr=s(TP);Dfo=r(kXr,"DPTModel"),kXr.forEach(t),Gfo=r(L5e," (DPT model)"),L5e.forEach(t),Ofo=i($),ap=n($,"LI",{});var x5e=s(ap);pae=n(x5e,"STRONG",{});var SXr=s(pae);Vfo=r(SXr,"electra"),SXr.forEach(t),Xfo=r(x5e," \u2014 "),MP=n(x5e,"A",{href:!0});var RXr=s(MP);zfo=r(RXr,"ElectraModel"),RXr.forEach(t),Qfo=r(x5e," (ELECTRA model)"),x5e.forEach(t),Wfo=i($),np=n($,"LI",{});var $5e=s(np);uae=n($5e,"STRONG",{});var BXr=s(uae);Hfo=r(BXr,"flaubert"),BXr.forEach(t),Ufo=r($5e," \u2014 "),EP=n($5e,"A",{href:!0});var PXr=s(EP);Jfo=r(PXr,"FlaubertModel"),PXr.forEach(t),Yfo=r($5e," (FlauBERT model)"),$5e.forEach(t),Kfo=i($),sp=n($,"LI",{});var k5e=s(sp);_ae=n(k5e,"STRONG",{});var IXr=s(_ae);Zfo=r(IXr,"fnet"),IXr.forEach(t),emo=r(k5e," \u2014 "),CP=n(k5e,"A",{href:!0});var qXr=s(CP);omo=r(qXr,"FNetModel"),qXr.forEach(t),rmo=r(k5e," (FNet model)"),k5e.forEach(t),tmo=i($),lp=n($,"LI",{});var S5e=s(lp);bae=n(S5e,"STRONG",{});var NXr=s(bae);amo=r(NXr,"fsmt"),NXr.forEach(t),nmo=r(S5e," \u2014 "),wP=n(S5e,"A",{href:!0});var jXr=s(wP);smo=r(jXr,"FSMTModel"),jXr.forEach(t),lmo=r(S5e," (FairSeq Machine-Translation model)"),S5e.forEach(t),imo=i($),ys=n($,"LI",{});var w9=s(ys);vae=n(w9,"STRONG",{});var DXr=s(vae);dmo=r(DXr,"funnel"),DXr.forEach(t),cmo=r(w9," \u2014 "),AP=n(w9,"A",{href:!0});var GXr=s(AP);fmo=r(GXr,"FunnelModel"),GXr.forEach(t),mmo=r(w9," or "),yP=n(w9,"A",{href:!0});var OXr=s(yP);gmo=r(OXr,"FunnelBaseModel"),OXr.forEach(t),hmo=r(w9," (Funnel Transformer model)"),w9.forEach(t),pmo=i($),ip=n($,"LI",{});var R5e=s(ip);Fae=n(R5e,"STRONG",{});var VXr=s(Fae);umo=r(VXr,"glpn"),VXr.forEach(t),_mo=r(R5e," \u2014 "),LP=n(R5e,"A",{href:!0});var XXr=s(LP);bmo=r(XXr,"GLPNModel"),XXr.forEach(t),vmo=r(R5e," (GLPN model)"),R5e.forEach(t),Fmo=i($),dp=n($,"LI",{});var B5e=s(dp);Tae=n(B5e,"STRONG",{});var zXr=s(Tae);Tmo=r(zXr,"gpt2"),zXr.forEach(t),Mmo=r(B5e," \u2014 "),xP=n(B5e,"A",{href:!0});var QXr=s(xP);Emo=r(QXr,"GPT2Model"),QXr.forEach(t),Cmo=r(B5e," (OpenAI GPT-2 model)"),B5e.forEach(t),wmo=i($),cp=n($,"LI",{});var P5e=s(cp);Mae=n(P5e,"STRONG",{});var WXr=s(Mae);Amo=r(WXr,"gpt_neo"),WXr.forEach(t),ymo=r(P5e," \u2014 "),$P=n(P5e,"A",{href:!0});var HXr=s($P);Lmo=r(HXr,"GPTNeoModel"),HXr.forEach(t),xmo=r(P5e," (GPT Neo model)"),P5e.forEach(t),$mo=i($),fp=n($,"LI",{});var I5e=s(fp);Eae=n(I5e,"STRONG",{});var UXr=s(Eae);kmo=r(UXr,"gptj"),UXr.forEach(t),Smo=r(I5e," \u2014 "),kP=n(I5e,"A",{href:!0});var JXr=s(kP);Rmo=r(JXr,"GPTJModel"),JXr.forEach(t),Bmo=r(I5e," (GPT-J model)"),I5e.forEach(t),Pmo=i($),mp=n($,"LI",{});var q5e=s(mp);Cae=n(q5e,"STRONG",{});var YXr=s(Cae);Imo=r(YXr,"hubert"),YXr.forEach(t),qmo=r(q5e," \u2014 "),SP=n(q5e,"A",{href:!0});var KXr=s(SP);Nmo=r(KXr,"HubertModel"),KXr.forEach(t),jmo=r(q5e," (Hubert model)"),q5e.forEach(t),Dmo=i($),gp=n($,"LI",{});var N5e=s(gp);wae=n(N5e,"STRONG",{});var ZXr=s(wae);Gmo=r(ZXr,"ibert"),ZXr.forEach(t),Omo=r(N5e," \u2014 "),RP=n(N5e,"A",{href:!0});var ezr=s(RP);Vmo=r(ezr,"IBertModel"),ezr.forEach(t),Xmo=r(N5e," (I-BERT model)"),N5e.forEach(t),zmo=i($),hp=n($,"LI",{});var j5e=s(hp);Aae=n(j5e,"STRONG",{});var ozr=s(Aae);Qmo=r(ozr,"imagegpt"),ozr.forEach(t),Wmo=r(j5e," \u2014 "),BP=n(j5e,"A",{href:!0});var rzr=s(BP);Hmo=r(rzr,"ImageGPTModel"),rzr.forEach(t),Umo=r(j5e," (ImageGPT model)"),j5e.forEach(t),Jmo=i($),pp=n($,"LI",{});var D5e=s(pp);yae=n(D5e,"STRONG",{});var tzr=s(yae);Ymo=r(tzr,"layoutlm"),tzr.forEach(t),Kmo=r(D5e," \u2014 "),PP=n(D5e,"A",{href:!0});var azr=s(PP);Zmo=r(azr,"LayoutLMModel"),azr.forEach(t),ego=r(D5e," (LayoutLM model)"),D5e.forEach(t),ogo=i($),up=n($,"LI",{});var G5e=s(up);Lae=n(G5e,"STRONG",{});var nzr=s(Lae);rgo=r(nzr,"layoutlmv2"),nzr.forEach(t),tgo=r(G5e," \u2014 "),IP=n(G5e,"A",{href:!0});var szr=s(IP);ago=r(szr,"LayoutLMv2Model"),szr.forEach(t),ngo=r(G5e," (LayoutLMv2 model)"),G5e.forEach(t),sgo=i($),_p=n($,"LI",{});var O5e=s(_p);xae=n(O5e,"STRONG",{});var lzr=s(xae);lgo=r(lzr,"led"),lzr.forEach(t),igo=r(O5e," \u2014 "),qP=n(O5e,"A",{href:!0});var izr=s(qP);dgo=r(izr,"LEDModel"),izr.forEach(t),cgo=r(O5e," (LED model)"),O5e.forEach(t),fgo=i($),bp=n($,"LI",{});var V5e=s(bp);$ae=n(V5e,"STRONG",{});var dzr=s($ae);mgo=r(dzr,"longformer"),dzr.forEach(t),ggo=r(V5e," \u2014 "),NP=n(V5e,"A",{href:!0});var czr=s(NP);hgo=r(czr,"LongformerModel"),czr.forEach(t),pgo=r(V5e," (Longformer model)"),V5e.forEach(t),ugo=i($),vp=n($,"LI",{});var X5e=s(vp);kae=n(X5e,"STRONG",{});var fzr=s(kae);_go=r(fzr,"luke"),fzr.forEach(t),bgo=r(X5e," \u2014 "),jP=n(X5e,"A",{href:!0});var mzr=s(jP);vgo=r(mzr,"LukeModel"),mzr.forEach(t),Fgo=r(X5e," (LUKE model)"),X5e.forEach(t),Tgo=i($),Fp=n($,"LI",{});var z5e=s(Fp);Sae=n(z5e,"STRONG",{});var gzr=s(Sae);Mgo=r(gzr,"lxmert"),gzr.forEach(t),Ego=r(z5e," \u2014 "),DP=n(z5e,"A",{href:!0});var hzr=s(DP);Cgo=r(hzr,"LxmertModel"),hzr.forEach(t),wgo=r(z5e," (LXMERT model)"),z5e.forEach(t),Ago=i($),Tp=n($,"LI",{});var Q5e=s(Tp);Rae=n(Q5e,"STRONG",{});var pzr=s(Rae);ygo=r(pzr,"m2m_100"),pzr.forEach(t),Lgo=r(Q5e," \u2014 "),GP=n(Q5e,"A",{href:!0});var uzr=s(GP);xgo=r(uzr,"M2M100Model"),uzr.forEach(t),$go=r(Q5e," (M2M100 model)"),Q5e.forEach(t),kgo=i($),Mp=n($,"LI",{});var W5e=s(Mp);Bae=n(W5e,"STRONG",{});var _zr=s(Bae);Sgo=r(_zr,"marian"),_zr.forEach(t),Rgo=r(W5e," \u2014 "),OP=n(W5e,"A",{href:!0});var bzr=s(OP);Bgo=r(bzr,"MarianModel"),bzr.forEach(t),Pgo=r(W5e," (Marian model)"),W5e.forEach(t),Igo=i($),Ep=n($,"LI",{});var H5e=s(Ep);Pae=n(H5e,"STRONG",{});var vzr=s(Pae);qgo=r(vzr,"maskformer"),vzr.forEach(t),Ngo=r(H5e," \u2014 "),VP=n(H5e,"A",{href:!0});var Fzr=s(VP);jgo=r(Fzr,"MaskFormerModel"),Fzr.forEach(t),Dgo=r(H5e," (MaskFormer model)"),H5e.forEach(t),Ggo=i($),Cp=n($,"LI",{});var U5e=s(Cp);Iae=n(U5e,"STRONG",{});var Tzr=s(Iae);Ogo=r(Tzr,"mbart"),Tzr.forEach(t),Vgo=r(U5e," \u2014 "),XP=n(U5e,"A",{href:!0});var Mzr=s(XP);Xgo=r(Mzr,"MBartModel"),Mzr.forEach(t),zgo=r(U5e," (mBART model)"),U5e.forEach(t),Qgo=i($),wp=n($,"LI",{});var J5e=s(wp);qae=n(J5e,"STRONG",{});var Ezr=s(qae);Wgo=r(Ezr,"mctc"),Ezr.forEach(t),Hgo=r(J5e," \u2014 "),zP=n(J5e,"A",{href:!0});var Czr=s(zP);Ugo=r(Czr,"MCTCModel"),Czr.forEach(t),Jgo=r(J5e," (MCTC model)"),J5e.forEach(t),Ygo=i($),Ap=n($,"LI",{});var Y5e=s(Ap);Nae=n(Y5e,"STRONG",{});var wzr=s(Nae);Kgo=r(wzr,"megatron-bert"),wzr.forEach(t),Zgo=r(Y5e," \u2014 "),QP=n(Y5e,"A",{href:!0});var Azr=s(QP);eho=r(Azr,"MegatronBertModel"),Azr.forEach(t),oho=r(Y5e," (MegatronBert model)"),Y5e.forEach(t),rho=i($),yp=n($,"LI",{});var K5e=s(yp);jae=n(K5e,"STRONG",{});var yzr=s(jae);tho=r(yzr,"mobilebert"),yzr.forEach(t),aho=r(K5e," \u2014 "),WP=n(K5e,"A",{href:!0});var Lzr=s(WP);nho=r(Lzr,"MobileBertModel"),Lzr.forEach(t),sho=r(K5e," (MobileBERT model)"),K5e.forEach(t),lho=i($),Lp=n($,"LI",{});var Z5e=s(Lp);Dae=n(Z5e,"STRONG",{});var xzr=s(Dae);iho=r(xzr,"mpnet"),xzr.forEach(t),dho=r(Z5e," \u2014 "),HP=n(Z5e,"A",{href:!0});var $zr=s(HP);cho=r($zr,"MPNetModel"),$zr.forEach(t),fho=r(Z5e," (MPNet model)"),Z5e.forEach(t),mho=i($),xp=n($,"LI",{});var e3e=s(xp);Gae=n(e3e,"STRONG",{});var kzr=s(Gae);gho=r(kzr,"mt5"),kzr.forEach(t),hho=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var Szr=s(UP);pho=r(Szr,"MT5Model"),Szr.forEach(t),uho=r(e3e," (mT5 model)"),e3e.forEach(t),_ho=i($),$p=n($,"LI",{});var o3e=s($p);Oae=n(o3e,"STRONG",{});var Rzr=s(Oae);bho=r(Rzr,"nystromformer"),Rzr.forEach(t),vho=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var Bzr=s(JP);Fho=r(Bzr,"NystromformerModel"),Bzr.forEach(t),Tho=r(o3e," (Nystromformer model)"),o3e.forEach(t),Mho=i($),kp=n($,"LI",{});var r3e=s(kp);Vae=n(r3e,"STRONG",{});var Pzr=s(Vae);Eho=r(Pzr,"openai-gpt"),Pzr.forEach(t),Cho=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var Izr=s(YP);who=r(Izr,"OpenAIGPTModel"),Izr.forEach(t),Aho=r(r3e," (OpenAI GPT model)"),r3e.forEach(t),yho=i($),Sp=n($,"LI",{});var t3e=s(Sp);Xae=n(t3e,"STRONG",{});var qzr=s(Xae);Lho=r(qzr,"pegasus"),qzr.forEach(t),xho=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var Nzr=s(KP);$ho=r(Nzr,"PegasusModel"),Nzr.forEach(t),kho=r(t3e," (Pegasus model)"),t3e.forEach(t),Sho=i($),Rp=n($,"LI",{});var a3e=s(Rp);zae=n(a3e,"STRONG",{});var jzr=s(zae);Rho=r(jzr,"perceiver"),jzr.forEach(t),Bho=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var Dzr=s(ZP);Pho=r(Dzr,"PerceiverModel"),Dzr.forEach(t),Iho=r(a3e," (Perceiver model)"),a3e.forEach(t),qho=i($),Bp=n($,"LI",{});var n3e=s(Bp);Qae=n(n3e,"STRONG",{});var Gzr=s(Qae);Nho=r(Gzr,"plbart"),Gzr.forEach(t),jho=r(n3e," \u2014 "),eI=n(n3e,"A",{href:!0});var Ozr=s(eI);Dho=r(Ozr,"PLBartModel"),Ozr.forEach(t),Gho=r(n3e," (PLBart model)"),n3e.forEach(t),Oho=i($),Pp=n($,"LI",{});var s3e=s(Pp);Wae=n(s3e,"STRONG",{});var Vzr=s(Wae);Vho=r(Vzr,"poolformer"),Vzr.forEach(t),Xho=r(s3e," \u2014 "),oI=n(s3e,"A",{href:!0});var Xzr=s(oI);zho=r(Xzr,"PoolFormerModel"),Xzr.forEach(t),Qho=r(s3e," (PoolFormer model)"),s3e.forEach(t),Who=i($),Ip=n($,"LI",{});var l3e=s(Ip);Hae=n(l3e,"STRONG",{});var zzr=s(Hae);Hho=r(zzr,"prophetnet"),zzr.forEach(t),Uho=r(l3e," \u2014 "),rI=n(l3e,"A",{href:!0});var Qzr=s(rI);Jho=r(Qzr,"ProphetNetModel"),Qzr.forEach(t),Yho=r(l3e," (ProphetNet model)"),l3e.forEach(t),Kho=i($),qp=n($,"LI",{});var i3e=s(qp);Uae=n(i3e,"STRONG",{});var Wzr=s(Uae);Zho=r(Wzr,"qdqbert"),Wzr.forEach(t),epo=r(i3e," \u2014 "),tI=n(i3e,"A",{href:!0});var Hzr=s(tI);opo=r(Hzr,"QDQBertModel"),Hzr.forEach(t),rpo=r(i3e," (QDQBert model)"),i3e.forEach(t),tpo=i($),Np=n($,"LI",{});var d3e=s(Np);Jae=n(d3e,"STRONG",{});var Uzr=s(Jae);apo=r(Uzr,"reformer"),Uzr.forEach(t),npo=r(d3e," \u2014 "),aI=n(d3e,"A",{href:!0});var Jzr=s(aI);spo=r(Jzr,"ReformerModel"),Jzr.forEach(t),lpo=r(d3e," (Reformer model)"),d3e.forEach(t),ipo=i($),jp=n($,"LI",{});var c3e=s(jp);Yae=n(c3e,"STRONG",{});var Yzr=s(Yae);dpo=r(Yzr,"regnet"),Yzr.forEach(t),cpo=r(c3e," \u2014 "),nI=n(c3e,"A",{href:!0});var Kzr=s(nI);fpo=r(Kzr,"RegNetModel"),Kzr.forEach(t),mpo=r(c3e," (RegNet model)"),c3e.forEach(t),gpo=i($),Dp=n($,"LI",{});var f3e=s(Dp);Kae=n(f3e,"STRONG",{});var Zzr=s(Kae);hpo=r(Zzr,"rembert"),Zzr.forEach(t),ppo=r(f3e," \u2014 "),sI=n(f3e,"A",{href:!0});var eQr=s(sI);upo=r(eQr,"RemBertModel"),eQr.forEach(t),_po=r(f3e," (RemBERT model)"),f3e.forEach(t),bpo=i($),Gp=n($,"LI",{});var m3e=s(Gp);Zae=n(m3e,"STRONG",{});var oQr=s(Zae);vpo=r(oQr,"resnet"),oQr.forEach(t),Fpo=r(m3e," \u2014 "),lI=n(m3e,"A",{href:!0});var rQr=s(lI);Tpo=r(rQr,"ResNetModel"),rQr.forEach(t),Mpo=r(m3e," (ResNet model)"),m3e.forEach(t),Epo=i($),Op=n($,"LI",{});var g3e=s(Op);ene=n(g3e,"STRONG",{});var tQr=s(ene);Cpo=r(tQr,"retribert"),tQr.forEach(t),wpo=r(g3e," \u2014 "),iI=n(g3e,"A",{href:!0});var aQr=s(iI);Apo=r(aQr,"RetriBertModel"),aQr.forEach(t),ypo=r(g3e," (RetriBERT model)"),g3e.forEach(t),Lpo=i($),Vp=n($,"LI",{});var h3e=s(Vp);one=n(h3e,"STRONG",{});var nQr=s(one);xpo=r(nQr,"roberta"),nQr.forEach(t),$po=r(h3e," \u2014 "),dI=n(h3e,"A",{href:!0});var sQr=s(dI);kpo=r(sQr,"RobertaModel"),sQr.forEach(t),Spo=r(h3e," (RoBERTa model)"),h3e.forEach(t),Rpo=i($),Xp=n($,"LI",{});var p3e=s(Xp);rne=n(p3e,"STRONG",{});var lQr=s(rne);Bpo=r(lQr,"roformer"),lQr.forEach(t),Ppo=r(p3e," \u2014 "),cI=n(p3e,"A",{href:!0});var iQr=s(cI);Ipo=r(iQr,"RoFormerModel"),iQr.forEach(t),qpo=r(p3e," (RoFormer model)"),p3e.forEach(t),Npo=i($),zp=n($,"LI",{});var u3e=s(zp);tne=n(u3e,"STRONG",{});var dQr=s(tne);jpo=r(dQr,"segformer"),dQr.forEach(t),Dpo=r(u3e," \u2014 "),fI=n(u3e,"A",{href:!0});var cQr=s(fI);Gpo=r(cQr,"SegformerModel"),cQr.forEach(t),Opo=r(u3e," (SegFormer model)"),u3e.forEach(t),Vpo=i($),Qp=n($,"LI",{});var _3e=s(Qp);ane=n(_3e,"STRONG",{});var fQr=s(ane);Xpo=r(fQr,"sew"),fQr.forEach(t),zpo=r(_3e," \u2014 "),mI=n(_3e,"A",{href:!0});var mQr=s(mI);Qpo=r(mQr,"SEWModel"),mQr.forEach(t),Wpo=r(_3e," (SEW model)"),_3e.forEach(t),Hpo=i($),Wp=n($,"LI",{});var b3e=s(Wp);nne=n(b3e,"STRONG",{});var gQr=s(nne);Upo=r(gQr,"sew-d"),gQr.forEach(t),Jpo=r(b3e," \u2014 "),gI=n(b3e,"A",{href:!0});var hQr=s(gI);Ypo=r(hQr,"SEWDModel"),hQr.forEach(t),Kpo=r(b3e," (SEW-D model)"),b3e.forEach(t),Zpo=i($),Hp=n($,"LI",{});var v3e=s(Hp);sne=n(v3e,"STRONG",{});var pQr=s(sne);euo=r(pQr,"speech_to_text"),pQr.forEach(t),ouo=r(v3e," \u2014 "),hI=n(v3e,"A",{href:!0});var uQr=s(hI);ruo=r(uQr,"Speech2TextModel"),uQr.forEach(t),tuo=r(v3e," (Speech2Text model)"),v3e.forEach(t),auo=i($),Up=n($,"LI",{});var F3e=s(Up);lne=n(F3e,"STRONG",{});var _Qr=s(lne);nuo=r(_Qr,"splinter"),_Qr.forEach(t),suo=r(F3e," \u2014 "),pI=n(F3e,"A",{href:!0});var bQr=s(pI);luo=r(bQr,"SplinterModel"),bQr.forEach(t),iuo=r(F3e," (Splinter model)"),F3e.forEach(t),duo=i($),Jp=n($,"LI",{});var T3e=s(Jp);ine=n(T3e,"STRONG",{});var vQr=s(ine);cuo=r(vQr,"squeezebert"),vQr.forEach(t),fuo=r(T3e," \u2014 "),uI=n(T3e,"A",{href:!0});var FQr=s(uI);muo=r(FQr,"SqueezeBertModel"),FQr.forEach(t),guo=r(T3e," (SqueezeBERT model)"),T3e.forEach(t),huo=i($),Yp=n($,"LI",{});var M3e=s(Yp);dne=n(M3e,"STRONG",{});var TQr=s(dne);puo=r(TQr,"swin"),TQr.forEach(t),uuo=r(M3e," \u2014 "),_I=n(M3e,"A",{href:!0});var MQr=s(_I);_uo=r(MQr,"SwinModel"),MQr.forEach(t),buo=r(M3e," (Swin model)"),M3e.forEach(t),vuo=i($),Kp=n($,"LI",{});var E3e=s(Kp);cne=n(E3e,"STRONG",{});var EQr=s(cne);Fuo=r(EQr,"t5"),EQr.forEach(t),Tuo=r(E3e," \u2014 "),bI=n(E3e,"A",{href:!0});var CQr=s(bI);Muo=r(CQr,"T5Model"),CQr.forEach(t),Euo=r(E3e," (T5 model)"),E3e.forEach(t),Cuo=i($),Zp=n($,"LI",{});var C3e=s(Zp);fne=n(C3e,"STRONG",{});var wQr=s(fne);wuo=r(wQr,"tapas"),wQr.forEach(t),Auo=r(C3e," \u2014 "),vI=n(C3e,"A",{href:!0});var AQr=s(vI);yuo=r(AQr,"TapasModel"),AQr.forEach(t),Luo=r(C3e," (TAPAS model)"),C3e.forEach(t),xuo=i($),eu=n($,"LI",{});var w3e=s(eu);mne=n(w3e,"STRONG",{});var yQr=s(mne);$uo=r(yQr,"transfo-xl"),yQr.forEach(t),kuo=r(w3e," \u2014 "),FI=n(w3e,"A",{href:!0});var LQr=s(FI);Suo=r(LQr,"TransfoXLModel"),LQr.forEach(t),Ruo=r(w3e," (Transformer-XL model)"),w3e.forEach(t),Buo=i($),ou=n($,"LI",{});var A3e=s(ou);gne=n(A3e,"STRONG",{});var xQr=s(gne);Puo=r(xQr,"unispeech"),xQr.forEach(t),Iuo=r(A3e," \u2014 "),TI=n(A3e,"A",{href:!0});var $Qr=s(TI);quo=r($Qr,"UniSpeechModel"),$Qr.forEach(t),Nuo=r(A3e," (UniSpeech model)"),A3e.forEach(t),juo=i($),ru=n($,"LI",{});var y3e=s(ru);hne=n(y3e,"STRONG",{});var kQr=s(hne);Duo=r(kQr,"unispeech-sat"),kQr.forEach(t),Guo=r(y3e," \u2014 "),MI=n(y3e,"A",{href:!0});var SQr=s(MI);Ouo=r(SQr,"UniSpeechSatModel"),SQr.forEach(t),Vuo=r(y3e," (UniSpeechSat model)"),y3e.forEach(t),Xuo=i($),tu=n($,"LI",{});var L3e=s(tu);pne=n(L3e,"STRONG",{});var RQr=s(pne);zuo=r(RQr,"van"),RQr.forEach(t),Quo=r(L3e," \u2014 "),EI=n(L3e,"A",{href:!0});var BQr=s(EI);Wuo=r(BQr,"VanModel"),BQr.forEach(t),Huo=r(L3e," (VAN model)"),L3e.forEach(t),Uuo=i($),au=n($,"LI",{});var x3e=s(au);une=n(x3e,"STRONG",{});var PQr=s(une);Juo=r(PQr,"vilt"),PQr.forEach(t),Yuo=r(x3e," \u2014 "),CI=n(x3e,"A",{href:!0});var IQr=s(CI);Kuo=r(IQr,"ViltModel"),IQr.forEach(t),Zuo=r(x3e," (ViLT model)"),x3e.forEach(t),e_o=i($),nu=n($,"LI",{});var $3e=s(nu);_ne=n($3e,"STRONG",{});var qQr=s(_ne);o_o=r(qQr,"vision-text-dual-encoder"),qQr.forEach(t),r_o=r($3e," \u2014 "),wI=n($3e,"A",{href:!0});var NQr=s(wI);t_o=r(NQr,"VisionTextDualEncoderModel"),NQr.forEach(t),a_o=r($3e," (VisionTextDualEncoder model)"),$3e.forEach(t),n_o=i($),su=n($,"LI",{});var k3e=s(su);bne=n(k3e,"STRONG",{});var jQr=s(bne);s_o=r(jQr,"visual_bert"),jQr.forEach(t),l_o=r(k3e," \u2014 "),AI=n(k3e,"A",{href:!0});var DQr=s(AI);i_o=r(DQr,"VisualBertModel"),DQr.forEach(t),d_o=r(k3e," (VisualBert model)"),k3e.forEach(t),c_o=i($),lu=n($,"LI",{});var S3e=s(lu);vne=n(S3e,"STRONG",{});var GQr=s(vne);f_o=r(GQr,"vit"),GQr.forEach(t),m_o=r(S3e," \u2014 "),yI=n(S3e,"A",{href:!0});var OQr=s(yI);g_o=r(OQr,"ViTModel"),OQr.forEach(t),h_o=r(S3e," (ViT model)"),S3e.forEach(t),p_o=i($),iu=n($,"LI",{});var R3e=s(iu);Fne=n(R3e,"STRONG",{});var VQr=s(Fne);u_o=r(VQr,"vit_mae"),VQr.forEach(t),__o=r(R3e," \u2014 "),LI=n(R3e,"A",{href:!0});var XQr=s(LI);b_o=r(XQr,"ViTMAEModel"),XQr.forEach(t),v_o=r(R3e," (ViTMAE model)"),R3e.forEach(t),F_o=i($),du=n($,"LI",{});var B3e=s(du);Tne=n(B3e,"STRONG",{});var zQr=s(Tne);T_o=r(zQr,"wav2vec2"),zQr.forEach(t),M_o=r(B3e," \u2014 "),xI=n(B3e,"A",{href:!0});var QQr=s(xI);E_o=r(QQr,"Wav2Vec2Model"),QQr.forEach(t),C_o=r(B3e," (Wav2Vec2 model)"),B3e.forEach(t),w_o=i($),cu=n($,"LI",{});var P3e=s(cu);Mne=n(P3e,"STRONG",{});var WQr=s(Mne);A_o=r(WQr,"wavlm"),WQr.forEach(t),y_o=r(P3e," \u2014 "),$I=n(P3e,"A",{href:!0});var HQr=s($I);L_o=r(HQr,"WavLMModel"),HQr.forEach(t),x_o=r(P3e," (WavLM model)"),P3e.forEach(t),$_o=i($),fu=n($,"LI",{});var I3e=s(fu);Ene=n(I3e,"STRONG",{});var UQr=s(Ene);k_o=r(UQr,"xglm"),UQr.forEach(t),S_o=r(I3e," \u2014 "),kI=n(I3e,"A",{href:!0});var JQr=s(kI);R_o=r(JQr,"XGLMModel"),JQr.forEach(t),B_o=r(I3e," (XGLM model)"),I3e.forEach(t),P_o=i($),mu=n($,"LI",{});var q3e=s(mu);Cne=n(q3e,"STRONG",{});var YQr=s(Cne);I_o=r(YQr,"xlm"),YQr.forEach(t),q_o=r(q3e," \u2014 "),SI=n(q3e,"A",{href:!0});var KQr=s(SI);N_o=r(KQr,"XLMModel"),KQr.forEach(t),j_o=r(q3e," (XLM model)"),q3e.forEach(t),D_o=i($),gu=n($,"LI",{});var N3e=s(gu);wne=n(N3e,"STRONG",{});var ZQr=s(wne);G_o=r(ZQr,"xlm-prophetnet"),ZQr.forEach(t),O_o=r(N3e," \u2014 "),RI=n(N3e,"A",{href:!0});var eWr=s(RI);V_o=r(eWr,"XLMProphetNetModel"),eWr.forEach(t),X_o=r(N3e," (XLMProphetNet model)"),N3e.forEach(t),z_o=i($),hu=n($,"LI",{});var j3e=s(hu);Ane=n(j3e,"STRONG",{});var oWr=s(Ane);Q_o=r(oWr,"xlm-roberta"),oWr.forEach(t),W_o=r(j3e," \u2014 "),BI=n(j3e,"A",{href:!0});var rWr=s(BI);H_o=r(rWr,"XLMRobertaModel"),rWr.forEach(t),U_o=r(j3e," (XLM-RoBERTa model)"),j3e.forEach(t),J_o=i($),pu=n($,"LI",{});var D3e=s(pu);yne=n(D3e,"STRONG",{});var tWr=s(yne);Y_o=r(tWr,"xlm-roberta-xl"),tWr.forEach(t),K_o=r(D3e," \u2014 "),PI=n(D3e,"A",{href:!0});var aWr=s(PI);Z_o=r(aWr,"XLMRobertaXLModel"),aWr.forEach(t),e2o=r(D3e," (XLM-RoBERTa-XL model)"),D3e.forEach(t),o2o=i($),uu=n($,"LI",{});var G3e=s(uu);Lne=n(G3e,"STRONG",{});var nWr=s(Lne);r2o=r(nWr,"xlnet"),nWr.forEach(t),t2o=r(G3e," \u2014 "),II=n(G3e,"A",{href:!0});var sWr=s(II);a2o=r(sWr,"XLNetModel"),sWr.forEach(t),n2o=r(G3e," (XLNet model)"),G3e.forEach(t),s2o=i($),_u=n($,"LI",{});var O3e=s(_u);xne=n(O3e,"STRONG",{});var lWr=s(xne);l2o=r(lWr,"yoso"),lWr.forEach(t),i2o=r(O3e," \u2014 "),qI=n(O3e,"A",{href:!0});var iWr=s(qI);d2o=r(iWr,"YosoModel"),iWr.forEach(t),c2o=r(O3e," (YOSO model)"),O3e.forEach(t),$.forEach(t),f2o=i(Ut),bu=n(Ut,"P",{});var V3e=s(bu);m2o=r(V3e,"The model is set in evaluation mode by default using "),$ne=n(V3e,"CODE",{});var dWr=s($ne);g2o=r(dWr,"model.eval()"),dWr.forEach(t),h2o=r(V3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kne=n(V3e,"CODE",{});var cWr=s(kne);p2o=r(cWr,"model.train()"),cWr.forEach(t),V3e.forEach(t),u2o=i(Ut),T(vu.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),aBe=i(f),bi=n(f,"H2",{class:!0});var sIe=s(bi);Fu=n(sIe,"A",{id:!0,class:!0,href:!0});var fWr=s(Fu);Sne=n(fWr,"SPAN",{});var mWr=s(Sne);T(HA.$$.fragment,mWr),mWr.forEach(t),fWr.forEach(t),_2o=i(sIe),Rne=n(sIe,"SPAN",{});var gWr=s(Rne);b2o=r(gWr,"AutoModelForPreTraining"),gWr.forEach(t),sIe.forEach(t),nBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(UA.$$.fragment,Ps),v2o=i(Ps),vi=n(Ps,"P",{});var tY=s(vi);F2o=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NI=n(tY,"A",{href:!0});var hWr=s(NI);T2o=r(hWr,"from_pretrained()"),hWr.forEach(t),M2o=r(tY," class method or the "),jI=n(tY,"A",{href:!0});var pWr=s(jI);E2o=r(pWr,"from_config()"),pWr.forEach(t),C2o=r(tY,` class
method.`),tY.forEach(t),w2o=i(Ps),JA=n(Ps,"P",{});var lIe=s(JA);A2o=r(lIe,"This class cannot be instantiated directly using "),Bne=n(lIe,"CODE",{});var uWr=s(Bne);y2o=r(uWr,"__init__()"),uWr.forEach(t),L2o=r(lIe," (throws an error)."),lIe.forEach(t),x2o=i(Ps),Zr=n(Ps,"DIV",{class:!0});var C3=s(Zr);T(YA.$$.fragment,C3),$2o=i(C3),Pne=n(C3,"P",{});var _Wr=s(Pne);k2o=r(_Wr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Wr.forEach(t),S2o=i(C3),Fi=n(C3,"P",{});var aY=s(Fi);R2o=r(aY,`Note:
Loading a model from its configuration file does `),Ine=n(aY,"STRONG",{});var bWr=s(Ine);B2o=r(bWr,"not"),bWr.forEach(t),P2o=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DI=n(aY,"A",{href:!0});var vWr=s(DI);I2o=r(vWr,"from_pretrained()"),vWr.forEach(t),q2o=r(aY," to load the model weights."),aY.forEach(t),N2o=i(C3),T(Tu.$$.fragment,C3),C3.forEach(t),j2o=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(KA.$$.fragment,Jt),D2o=i(Jt),qne=n(Jt,"P",{});var FWr=s(qne);G2o=r(FWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FWr.forEach(t),O2o=i(Jt),Ea=n(Jt,"P",{});var w3=s(Ea);V2o=r(w3,"The model class to instantiate is selected based on the "),Nne=n(w3,"CODE",{});var TWr=s(Nne);X2o=r(TWr,"model_type"),TWr.forEach(t),z2o=r(w3,` property of the config object (either
passed as an argument or loaded from `),jne=n(w3,"CODE",{});var MWr=s(jne);Q2o=r(MWr,"pretrained_model_name_or_path"),MWr.forEach(t),W2o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=n(w3,"CODE",{});var EWr=s(Dne);H2o=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),U2o=r(w3,":"),w3.forEach(t),J2o=i(Jt),G=n(Jt,"UL",{});var V=s(G);Mu=n(V,"LI",{});var X3e=s(Mu);Gne=n(X3e,"STRONG",{});var CWr=s(Gne);Y2o=r(CWr,"albert"),CWr.forEach(t),K2o=r(X3e," \u2014 "),GI=n(X3e,"A",{href:!0});var wWr=s(GI);Z2o=r(wWr,"AlbertForPreTraining"),wWr.forEach(t),e1o=r(X3e," (ALBERT model)"),X3e.forEach(t),o1o=i(V),Eu=n(V,"LI",{});var z3e=s(Eu);One=n(z3e,"STRONG",{});var AWr=s(One);r1o=r(AWr,"bart"),AWr.forEach(t),t1o=r(z3e," \u2014 "),OI=n(z3e,"A",{href:!0});var yWr=s(OI);a1o=r(yWr,"BartForConditionalGeneration"),yWr.forEach(t),n1o=r(z3e," (BART model)"),z3e.forEach(t),s1o=i(V),Cu=n(V,"LI",{});var Q3e=s(Cu);Vne=n(Q3e,"STRONG",{});var LWr=s(Vne);l1o=r(LWr,"bert"),LWr.forEach(t),i1o=r(Q3e," \u2014 "),VI=n(Q3e,"A",{href:!0});var xWr=s(VI);d1o=r(xWr,"BertForPreTraining"),xWr.forEach(t),c1o=r(Q3e," (BERT model)"),Q3e.forEach(t),f1o=i(V),wu=n(V,"LI",{});var W3e=s(wu);Xne=n(W3e,"STRONG",{});var $Wr=s(Xne);m1o=r($Wr,"big_bird"),$Wr.forEach(t),g1o=r(W3e," \u2014 "),XI=n(W3e,"A",{href:!0});var kWr=s(XI);h1o=r(kWr,"BigBirdForPreTraining"),kWr.forEach(t),p1o=r(W3e," (BigBird model)"),W3e.forEach(t),u1o=i(V),Au=n(V,"LI",{});var H3e=s(Au);zne=n(H3e,"STRONG",{});var SWr=s(zne);_1o=r(SWr,"camembert"),SWr.forEach(t),b1o=r(H3e," \u2014 "),zI=n(H3e,"A",{href:!0});var RWr=s(zI);v1o=r(RWr,"CamembertForMaskedLM"),RWr.forEach(t),F1o=r(H3e," (CamemBERT model)"),H3e.forEach(t),T1o=i(V),yu=n(V,"LI",{});var U3e=s(yu);Qne=n(U3e,"STRONG",{});var BWr=s(Qne);M1o=r(BWr,"ctrl"),BWr.forEach(t),E1o=r(U3e," \u2014 "),QI=n(U3e,"A",{href:!0});var PWr=s(QI);C1o=r(PWr,"CTRLLMHeadModel"),PWr.forEach(t),w1o=r(U3e," (CTRL model)"),U3e.forEach(t),A1o=i(V),Lu=n(V,"LI",{});var J3e=s(Lu);Wne=n(J3e,"STRONG",{});var IWr=s(Wne);y1o=r(IWr,"data2vec-text"),IWr.forEach(t),L1o=r(J3e," \u2014 "),WI=n(J3e,"A",{href:!0});var qWr=s(WI);x1o=r(qWr,"Data2VecTextForMaskedLM"),qWr.forEach(t),$1o=r(J3e," (Data2VecText model)"),J3e.forEach(t),k1o=i(V),xu=n(V,"LI",{});var Y3e=s(xu);Hne=n(Y3e,"STRONG",{});var NWr=s(Hne);S1o=r(NWr,"deberta"),NWr.forEach(t),R1o=r(Y3e," \u2014 "),HI=n(Y3e,"A",{href:!0});var jWr=s(HI);B1o=r(jWr,"DebertaForMaskedLM"),jWr.forEach(t),P1o=r(Y3e," (DeBERTa model)"),Y3e.forEach(t),I1o=i(V),$u=n(V,"LI",{});var K3e=s($u);Une=n(K3e,"STRONG",{});var DWr=s(Une);q1o=r(DWr,"deberta-v2"),DWr.forEach(t),N1o=r(K3e," \u2014 "),UI=n(K3e,"A",{href:!0});var GWr=s(UI);j1o=r(GWr,"DebertaV2ForMaskedLM"),GWr.forEach(t),D1o=r(K3e," (DeBERTa-v2 model)"),K3e.forEach(t),G1o=i(V),ku=n(V,"LI",{});var Z3e=s(ku);Jne=n(Z3e,"STRONG",{});var OWr=s(Jne);O1o=r(OWr,"distilbert"),OWr.forEach(t),V1o=r(Z3e," \u2014 "),JI=n(Z3e,"A",{href:!0});var VWr=s(JI);X1o=r(VWr,"DistilBertForMaskedLM"),VWr.forEach(t),z1o=r(Z3e," (DistilBERT model)"),Z3e.forEach(t),Q1o=i(V),Su=n(V,"LI",{});var ewe=s(Su);Yne=n(ewe,"STRONG",{});var XWr=s(Yne);W1o=r(XWr,"electra"),XWr.forEach(t),H1o=r(ewe," \u2014 "),YI=n(ewe,"A",{href:!0});var zWr=s(YI);U1o=r(zWr,"ElectraForPreTraining"),zWr.forEach(t),J1o=r(ewe," (ELECTRA model)"),ewe.forEach(t),Y1o=i(V),Ru=n(V,"LI",{});var owe=s(Ru);Kne=n(owe,"STRONG",{});var QWr=s(Kne);K1o=r(QWr,"flaubert"),QWr.forEach(t),Z1o=r(owe," \u2014 "),KI=n(owe,"A",{href:!0});var WWr=s(KI);ebo=r(WWr,"FlaubertWithLMHeadModel"),WWr.forEach(t),obo=r(owe," (FlauBERT model)"),owe.forEach(t),rbo=i(V),Bu=n(V,"LI",{});var rwe=s(Bu);Zne=n(rwe,"STRONG",{});var HWr=s(Zne);tbo=r(HWr,"fnet"),HWr.forEach(t),abo=r(rwe," \u2014 "),ZI=n(rwe,"A",{href:!0});var UWr=s(ZI);nbo=r(UWr,"FNetForPreTraining"),UWr.forEach(t),sbo=r(rwe," (FNet model)"),rwe.forEach(t),lbo=i(V),Pu=n(V,"LI",{});var twe=s(Pu);ese=n(twe,"STRONG",{});var JWr=s(ese);ibo=r(JWr,"fsmt"),JWr.forEach(t),dbo=r(twe," \u2014 "),eq=n(twe,"A",{href:!0});var YWr=s(eq);cbo=r(YWr,"FSMTForConditionalGeneration"),YWr.forEach(t),fbo=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),mbo=i(V),Iu=n(V,"LI",{});var awe=s(Iu);ose=n(awe,"STRONG",{});var KWr=s(ose);gbo=r(KWr,"funnel"),KWr.forEach(t),hbo=r(awe," \u2014 "),oq=n(awe,"A",{href:!0});var ZWr=s(oq);pbo=r(ZWr,"FunnelForPreTraining"),ZWr.forEach(t),ubo=r(awe," (Funnel Transformer model)"),awe.forEach(t),_bo=i(V),qu=n(V,"LI",{});var nwe=s(qu);rse=n(nwe,"STRONG",{});var eHr=s(rse);bbo=r(eHr,"gpt2"),eHr.forEach(t),vbo=r(nwe," \u2014 "),rq=n(nwe,"A",{href:!0});var oHr=s(rq);Fbo=r(oHr,"GPT2LMHeadModel"),oHr.forEach(t),Tbo=r(nwe," (OpenAI GPT-2 model)"),nwe.forEach(t),Mbo=i(V),Nu=n(V,"LI",{});var swe=s(Nu);tse=n(swe,"STRONG",{});var rHr=s(tse);Ebo=r(rHr,"ibert"),rHr.forEach(t),Cbo=r(swe," \u2014 "),tq=n(swe,"A",{href:!0});var tHr=s(tq);wbo=r(tHr,"IBertForMaskedLM"),tHr.forEach(t),Abo=r(swe," (I-BERT model)"),swe.forEach(t),ybo=i(V),ju=n(V,"LI",{});var lwe=s(ju);ase=n(lwe,"STRONG",{});var aHr=s(ase);Lbo=r(aHr,"layoutlm"),aHr.forEach(t),xbo=r(lwe," \u2014 "),aq=n(lwe,"A",{href:!0});var nHr=s(aq);$bo=r(nHr,"LayoutLMForMaskedLM"),nHr.forEach(t),kbo=r(lwe," (LayoutLM model)"),lwe.forEach(t),Sbo=i(V),Du=n(V,"LI",{});var iwe=s(Du);nse=n(iwe,"STRONG",{});var sHr=s(nse);Rbo=r(sHr,"longformer"),sHr.forEach(t),Bbo=r(iwe," \u2014 "),nq=n(iwe,"A",{href:!0});var lHr=s(nq);Pbo=r(lHr,"LongformerForMaskedLM"),lHr.forEach(t),Ibo=r(iwe," (Longformer model)"),iwe.forEach(t),qbo=i(V),Gu=n(V,"LI",{});var dwe=s(Gu);sse=n(dwe,"STRONG",{});var iHr=s(sse);Nbo=r(iHr,"lxmert"),iHr.forEach(t),jbo=r(dwe," \u2014 "),sq=n(dwe,"A",{href:!0});var dHr=s(sq);Dbo=r(dHr,"LxmertForPreTraining"),dHr.forEach(t),Gbo=r(dwe," (LXMERT model)"),dwe.forEach(t),Obo=i(V),Ou=n(V,"LI",{});var cwe=s(Ou);lse=n(cwe,"STRONG",{});var cHr=s(lse);Vbo=r(cHr,"megatron-bert"),cHr.forEach(t),Xbo=r(cwe," \u2014 "),lq=n(cwe,"A",{href:!0});var fHr=s(lq);zbo=r(fHr,"MegatronBertForPreTraining"),fHr.forEach(t),Qbo=r(cwe," (MegatronBert model)"),cwe.forEach(t),Wbo=i(V),Vu=n(V,"LI",{});var fwe=s(Vu);ise=n(fwe,"STRONG",{});var mHr=s(ise);Hbo=r(mHr,"mobilebert"),mHr.forEach(t),Ubo=r(fwe," \u2014 "),iq=n(fwe,"A",{href:!0});var gHr=s(iq);Jbo=r(gHr,"MobileBertForPreTraining"),gHr.forEach(t),Ybo=r(fwe," (MobileBERT model)"),fwe.forEach(t),Kbo=i(V),Xu=n(V,"LI",{});var mwe=s(Xu);dse=n(mwe,"STRONG",{});var hHr=s(dse);Zbo=r(hHr,"mpnet"),hHr.forEach(t),e4o=r(mwe," \u2014 "),dq=n(mwe,"A",{href:!0});var pHr=s(dq);o4o=r(pHr,"MPNetForMaskedLM"),pHr.forEach(t),r4o=r(mwe," (MPNet model)"),mwe.forEach(t),t4o=i(V),zu=n(V,"LI",{});var gwe=s(zu);cse=n(gwe,"STRONG",{});var uHr=s(cse);a4o=r(uHr,"openai-gpt"),uHr.forEach(t),n4o=r(gwe," \u2014 "),cq=n(gwe,"A",{href:!0});var _Hr=s(cq);s4o=r(_Hr,"OpenAIGPTLMHeadModel"),_Hr.forEach(t),l4o=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),i4o=i(V),Qu=n(V,"LI",{});var hwe=s(Qu);fse=n(hwe,"STRONG",{});var bHr=s(fse);d4o=r(bHr,"retribert"),bHr.forEach(t),c4o=r(hwe," \u2014 "),fq=n(hwe,"A",{href:!0});var vHr=s(fq);f4o=r(vHr,"RetriBertModel"),vHr.forEach(t),m4o=r(hwe," (RetriBERT model)"),hwe.forEach(t),g4o=i(V),Wu=n(V,"LI",{});var pwe=s(Wu);mse=n(pwe,"STRONG",{});var FHr=s(mse);h4o=r(FHr,"roberta"),FHr.forEach(t),p4o=r(pwe," \u2014 "),mq=n(pwe,"A",{href:!0});var THr=s(mq);u4o=r(THr,"RobertaForMaskedLM"),THr.forEach(t),_4o=r(pwe," (RoBERTa model)"),pwe.forEach(t),b4o=i(V),Hu=n(V,"LI",{});var uwe=s(Hu);gse=n(uwe,"STRONG",{});var MHr=s(gse);v4o=r(MHr,"squeezebert"),MHr.forEach(t),F4o=r(uwe," \u2014 "),gq=n(uwe,"A",{href:!0});var EHr=s(gq);T4o=r(EHr,"SqueezeBertForMaskedLM"),EHr.forEach(t),M4o=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),E4o=i(V),Uu=n(V,"LI",{});var _we=s(Uu);hse=n(_we,"STRONG",{});var CHr=s(hse);C4o=r(CHr,"t5"),CHr.forEach(t),w4o=r(_we," \u2014 "),hq=n(_we,"A",{href:!0});var wHr=s(hq);A4o=r(wHr,"T5ForConditionalGeneration"),wHr.forEach(t),y4o=r(_we," (T5 model)"),_we.forEach(t),L4o=i(V),Ju=n(V,"LI",{});var bwe=s(Ju);pse=n(bwe,"STRONG",{});var AHr=s(pse);x4o=r(AHr,"tapas"),AHr.forEach(t),$4o=r(bwe," \u2014 "),pq=n(bwe,"A",{href:!0});var yHr=s(pq);k4o=r(yHr,"TapasForMaskedLM"),yHr.forEach(t),S4o=r(bwe," (TAPAS model)"),bwe.forEach(t),R4o=i(V),Yu=n(V,"LI",{});var vwe=s(Yu);use=n(vwe,"STRONG",{});var LHr=s(use);B4o=r(LHr,"transfo-xl"),LHr.forEach(t),P4o=r(vwe," \u2014 "),uq=n(vwe,"A",{href:!0});var xHr=s(uq);I4o=r(xHr,"TransfoXLLMHeadModel"),xHr.forEach(t),q4o=r(vwe," (Transformer-XL model)"),vwe.forEach(t),N4o=i(V),Ku=n(V,"LI",{});var Fwe=s(Ku);_se=n(Fwe,"STRONG",{});var $Hr=s(_se);j4o=r($Hr,"unispeech"),$Hr.forEach(t),D4o=r(Fwe," \u2014 "),_q=n(Fwe,"A",{href:!0});var kHr=s(_q);G4o=r(kHr,"UniSpeechForPreTraining"),kHr.forEach(t),O4o=r(Fwe," (UniSpeech model)"),Fwe.forEach(t),V4o=i(V),Zu=n(V,"LI",{});var Twe=s(Zu);bse=n(Twe,"STRONG",{});var SHr=s(bse);X4o=r(SHr,"unispeech-sat"),SHr.forEach(t),z4o=r(Twe," \u2014 "),bq=n(Twe,"A",{href:!0});var RHr=s(bq);Q4o=r(RHr,"UniSpeechSatForPreTraining"),RHr.forEach(t),W4o=r(Twe," (UniSpeechSat model)"),Twe.forEach(t),H4o=i(V),e_=n(V,"LI",{});var Mwe=s(e_);vse=n(Mwe,"STRONG",{});var BHr=s(vse);U4o=r(BHr,"visual_bert"),BHr.forEach(t),J4o=r(Mwe," \u2014 "),vq=n(Mwe,"A",{href:!0});var PHr=s(vq);Y4o=r(PHr,"VisualBertForPreTraining"),PHr.forEach(t),K4o=r(Mwe," (VisualBert model)"),Mwe.forEach(t),Z4o=i(V),o_=n(V,"LI",{});var Ewe=s(o_);Fse=n(Ewe,"STRONG",{});var IHr=s(Fse);evo=r(IHr,"vit_mae"),IHr.forEach(t),ovo=r(Ewe," \u2014 "),Fq=n(Ewe,"A",{href:!0});var qHr=s(Fq);rvo=r(qHr,"ViTMAEForPreTraining"),qHr.forEach(t),tvo=r(Ewe," (ViTMAE model)"),Ewe.forEach(t),avo=i(V),r_=n(V,"LI",{});var Cwe=s(r_);Tse=n(Cwe,"STRONG",{});var NHr=s(Tse);nvo=r(NHr,"wav2vec2"),NHr.forEach(t),svo=r(Cwe," \u2014 "),Tq=n(Cwe,"A",{href:!0});var jHr=s(Tq);lvo=r(jHr,"Wav2Vec2ForPreTraining"),jHr.forEach(t),ivo=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),dvo=i(V),t_=n(V,"LI",{});var wwe=s(t_);Mse=n(wwe,"STRONG",{});var DHr=s(Mse);cvo=r(DHr,"xlm"),DHr.forEach(t),fvo=r(wwe," \u2014 "),Mq=n(wwe,"A",{href:!0});var GHr=s(Mq);mvo=r(GHr,"XLMWithLMHeadModel"),GHr.forEach(t),gvo=r(wwe," (XLM model)"),wwe.forEach(t),hvo=i(V),a_=n(V,"LI",{});var Awe=s(a_);Ese=n(Awe,"STRONG",{});var OHr=s(Ese);pvo=r(OHr,"xlm-roberta"),OHr.forEach(t),uvo=r(Awe," \u2014 "),Eq=n(Awe,"A",{href:!0});var VHr=s(Eq);_vo=r(VHr,"XLMRobertaForMaskedLM"),VHr.forEach(t),bvo=r(Awe," (XLM-RoBERTa model)"),Awe.forEach(t),vvo=i(V),n_=n(V,"LI",{});var ywe=s(n_);Cse=n(ywe,"STRONG",{});var XHr=s(Cse);Fvo=r(XHr,"xlm-roberta-xl"),XHr.forEach(t),Tvo=r(ywe," \u2014 "),Cq=n(ywe,"A",{href:!0});var zHr=s(Cq);Mvo=r(zHr,"XLMRobertaXLForMaskedLM"),zHr.forEach(t),Evo=r(ywe," (XLM-RoBERTa-XL model)"),ywe.forEach(t),Cvo=i(V),s_=n(V,"LI",{});var Lwe=s(s_);wse=n(Lwe,"STRONG",{});var QHr=s(wse);wvo=r(QHr,"xlnet"),QHr.forEach(t),Avo=r(Lwe," \u2014 "),wq=n(Lwe,"A",{href:!0});var WHr=s(wq);yvo=r(WHr,"XLNetLMHeadModel"),WHr.forEach(t),Lvo=r(Lwe," (XLNet model)"),Lwe.forEach(t),V.forEach(t),xvo=i(Jt),l_=n(Jt,"P",{});var xwe=s(l_);$vo=r(xwe,"The model is set in evaluation mode by default using "),Ase=n(xwe,"CODE",{});var HHr=s(Ase);kvo=r(HHr,"model.eval()"),HHr.forEach(t),Svo=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yse=n(xwe,"CODE",{});var UHr=s(yse);Rvo=r(UHr,"model.train()"),UHr.forEach(t),xwe.forEach(t),Bvo=i(Jt),T(i_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),sBe=i(f),Ti=n(f,"H2",{class:!0});var iIe=s(Ti);d_=n(iIe,"A",{id:!0,class:!0,href:!0});var JHr=s(d_);Lse=n(JHr,"SPAN",{});var YHr=s(Lse);T(ZA.$$.fragment,YHr),YHr.forEach(t),JHr.forEach(t),Pvo=i(iIe),xse=n(iIe,"SPAN",{});var KHr=s(xse);Ivo=r(KHr,"AutoModelForCausalLM"),KHr.forEach(t),iIe.forEach(t),lBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(ey.$$.fragment,Is),qvo=i(Is),Mi=n(Is,"P",{});var nY=s(Mi);Nvo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Aq=n(nY,"A",{href:!0});var ZHr=s(Aq);jvo=r(ZHr,"from_pretrained()"),ZHr.forEach(t),Dvo=r(nY," class method or the "),yq=n(nY,"A",{href:!0});var eUr=s(yq);Gvo=r(eUr,"from_config()"),eUr.forEach(t),Ovo=r(nY,` class
method.`),nY.forEach(t),Vvo=i(Is),oy=n(Is,"P",{});var dIe=s(oy);Xvo=r(dIe,"This class cannot be instantiated directly using "),$se=n(dIe,"CODE",{});var oUr=s($se);zvo=r(oUr,"__init__()"),oUr.forEach(t),Qvo=r(dIe," (throws an error)."),dIe.forEach(t),Wvo=i(Is),et=n(Is,"DIV",{class:!0});var A3=s(et);T(ry.$$.fragment,A3),Hvo=i(A3),kse=n(A3,"P",{});var rUr=s(kse);Uvo=r(rUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rUr.forEach(t),Jvo=i(A3),Ei=n(A3,"P",{});var sY=s(Ei);Yvo=r(sY,`Note:
Loading a model from its configuration file does `),Sse=n(sY,"STRONG",{});var tUr=s(Sse);Kvo=r(tUr,"not"),tUr.forEach(t),Zvo=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(sY,"A",{href:!0});var aUr=s(Lq);eFo=r(aUr,"from_pretrained()"),aUr.forEach(t),oFo=r(sY," to load the model weights."),sY.forEach(t),rFo=i(A3),T(c_.$$.fragment,A3),A3.forEach(t),tFo=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(ty.$$.fragment,Yt),aFo=i(Yt),Rse=n(Yt,"P",{});var nUr=s(Rse);nFo=r(nUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nUr.forEach(t),sFo=i(Yt),Ca=n(Yt,"P",{});var y3=s(Ca);lFo=r(y3,"The model class to instantiate is selected based on the "),Bse=n(y3,"CODE",{});var sUr=s(Bse);iFo=r(sUr,"model_type"),sUr.forEach(t),dFo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Pse=n(y3,"CODE",{});var lUr=s(Pse);cFo=r(lUr,"pretrained_model_name_or_path"),lUr.forEach(t),fFo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ise=n(y3,"CODE",{});var iUr=s(Ise);mFo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),gFo=r(y3,":"),y3.forEach(t),hFo=i(Yt),z=n(Yt,"UL",{});var W=s(z);f_=n(W,"LI",{});var $we=s(f_);qse=n($we,"STRONG",{});var dUr=s(qse);pFo=r(dUr,"bart"),dUr.forEach(t),uFo=r($we," \u2014 "),xq=n($we,"A",{href:!0});var cUr=s(xq);_Fo=r(cUr,"BartForCausalLM"),cUr.forEach(t),bFo=r($we," (BART model)"),$we.forEach(t),vFo=i(W),m_=n(W,"LI",{});var kwe=s(m_);Nse=n(kwe,"STRONG",{});var fUr=s(Nse);FFo=r(fUr,"bert"),fUr.forEach(t),TFo=r(kwe," \u2014 "),$q=n(kwe,"A",{href:!0});var mUr=s($q);MFo=r(mUr,"BertLMHeadModel"),mUr.forEach(t),EFo=r(kwe," (BERT model)"),kwe.forEach(t),CFo=i(W),g_=n(W,"LI",{});var Swe=s(g_);jse=n(Swe,"STRONG",{});var gUr=s(jse);wFo=r(gUr,"bert-generation"),gUr.forEach(t),AFo=r(Swe," \u2014 "),kq=n(Swe,"A",{href:!0});var hUr=s(kq);yFo=r(hUr,"BertGenerationDecoder"),hUr.forEach(t),LFo=r(Swe," (Bert Generation model)"),Swe.forEach(t),xFo=i(W),h_=n(W,"LI",{});var Rwe=s(h_);Dse=n(Rwe,"STRONG",{});var pUr=s(Dse);$Fo=r(pUr,"big_bird"),pUr.forEach(t),kFo=r(Rwe," \u2014 "),Sq=n(Rwe,"A",{href:!0});var uUr=s(Sq);SFo=r(uUr,"BigBirdForCausalLM"),uUr.forEach(t),RFo=r(Rwe," (BigBird model)"),Rwe.forEach(t),BFo=i(W),p_=n(W,"LI",{});var Bwe=s(p_);Gse=n(Bwe,"STRONG",{});var _Ur=s(Gse);PFo=r(_Ur,"bigbird_pegasus"),_Ur.forEach(t),IFo=r(Bwe," \u2014 "),Rq=n(Bwe,"A",{href:!0});var bUr=s(Rq);qFo=r(bUr,"BigBirdPegasusForCausalLM"),bUr.forEach(t),NFo=r(Bwe," (BigBirdPegasus model)"),Bwe.forEach(t),jFo=i(W),u_=n(W,"LI",{});var Pwe=s(u_);Ose=n(Pwe,"STRONG",{});var vUr=s(Ose);DFo=r(vUr,"blenderbot"),vUr.forEach(t),GFo=r(Pwe," \u2014 "),Bq=n(Pwe,"A",{href:!0});var FUr=s(Bq);OFo=r(FUr,"BlenderbotForCausalLM"),FUr.forEach(t),VFo=r(Pwe," (Blenderbot model)"),Pwe.forEach(t),XFo=i(W),__=n(W,"LI",{});var Iwe=s(__);Vse=n(Iwe,"STRONG",{});var TUr=s(Vse);zFo=r(TUr,"blenderbot-small"),TUr.forEach(t),QFo=r(Iwe," \u2014 "),Pq=n(Iwe,"A",{href:!0});var MUr=s(Pq);WFo=r(MUr,"BlenderbotSmallForCausalLM"),MUr.forEach(t),HFo=r(Iwe," (BlenderbotSmall model)"),Iwe.forEach(t),UFo=i(W),b_=n(W,"LI",{});var qwe=s(b_);Xse=n(qwe,"STRONG",{});var EUr=s(Xse);JFo=r(EUr,"camembert"),EUr.forEach(t),YFo=r(qwe," \u2014 "),Iq=n(qwe,"A",{href:!0});var CUr=s(Iq);KFo=r(CUr,"CamembertForCausalLM"),CUr.forEach(t),ZFo=r(qwe," (CamemBERT model)"),qwe.forEach(t),e0o=i(W),v_=n(W,"LI",{});var Nwe=s(v_);zse=n(Nwe,"STRONG",{});var wUr=s(zse);o0o=r(wUr,"ctrl"),wUr.forEach(t),r0o=r(Nwe," \u2014 "),qq=n(Nwe,"A",{href:!0});var AUr=s(qq);t0o=r(AUr,"CTRLLMHeadModel"),AUr.forEach(t),a0o=r(Nwe," (CTRL model)"),Nwe.forEach(t),n0o=i(W),F_=n(W,"LI",{});var jwe=s(F_);Qse=n(jwe,"STRONG",{});var yUr=s(Qse);s0o=r(yUr,"data2vec-text"),yUr.forEach(t),l0o=r(jwe," \u2014 "),Nq=n(jwe,"A",{href:!0});var LUr=s(Nq);i0o=r(LUr,"Data2VecTextForCausalLM"),LUr.forEach(t),d0o=r(jwe," (Data2VecText model)"),jwe.forEach(t),c0o=i(W),T_=n(W,"LI",{});var Dwe=s(T_);Wse=n(Dwe,"STRONG",{});var xUr=s(Wse);f0o=r(xUr,"electra"),xUr.forEach(t),m0o=r(Dwe," \u2014 "),jq=n(Dwe,"A",{href:!0});var $Ur=s(jq);g0o=r($Ur,"ElectraForCausalLM"),$Ur.forEach(t),h0o=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),p0o=i(W),M_=n(W,"LI",{});var Gwe=s(M_);Hse=n(Gwe,"STRONG",{});var kUr=s(Hse);u0o=r(kUr,"gpt2"),kUr.forEach(t),_0o=r(Gwe," \u2014 "),Dq=n(Gwe,"A",{href:!0});var SUr=s(Dq);b0o=r(SUr,"GPT2LMHeadModel"),SUr.forEach(t),v0o=r(Gwe," (OpenAI GPT-2 model)"),Gwe.forEach(t),F0o=i(W),E_=n(W,"LI",{});var Owe=s(E_);Use=n(Owe,"STRONG",{});var RUr=s(Use);T0o=r(RUr,"gpt_neo"),RUr.forEach(t),M0o=r(Owe," \u2014 "),Gq=n(Owe,"A",{href:!0});var BUr=s(Gq);E0o=r(BUr,"GPTNeoForCausalLM"),BUr.forEach(t),C0o=r(Owe," (GPT Neo model)"),Owe.forEach(t),w0o=i(W),C_=n(W,"LI",{});var Vwe=s(C_);Jse=n(Vwe,"STRONG",{});var PUr=s(Jse);A0o=r(PUr,"gptj"),PUr.forEach(t),y0o=r(Vwe," \u2014 "),Oq=n(Vwe,"A",{href:!0});var IUr=s(Oq);L0o=r(IUr,"GPTJForCausalLM"),IUr.forEach(t),x0o=r(Vwe," (GPT-J model)"),Vwe.forEach(t),$0o=i(W),w_=n(W,"LI",{});var Xwe=s(w_);Yse=n(Xwe,"STRONG",{});var qUr=s(Yse);k0o=r(qUr,"marian"),qUr.forEach(t),S0o=r(Xwe," \u2014 "),Vq=n(Xwe,"A",{href:!0});var NUr=s(Vq);R0o=r(NUr,"MarianForCausalLM"),NUr.forEach(t),B0o=r(Xwe," (Marian model)"),Xwe.forEach(t),P0o=i(W),A_=n(W,"LI",{});var zwe=s(A_);Kse=n(zwe,"STRONG",{});var jUr=s(Kse);I0o=r(jUr,"mbart"),jUr.forEach(t),q0o=r(zwe," \u2014 "),Xq=n(zwe,"A",{href:!0});var DUr=s(Xq);N0o=r(DUr,"MBartForCausalLM"),DUr.forEach(t),j0o=r(zwe," (mBART model)"),zwe.forEach(t),D0o=i(W),y_=n(W,"LI",{});var Qwe=s(y_);Zse=n(Qwe,"STRONG",{});var GUr=s(Zse);G0o=r(GUr,"megatron-bert"),GUr.forEach(t),O0o=r(Qwe," \u2014 "),zq=n(Qwe,"A",{href:!0});var OUr=s(zq);V0o=r(OUr,"MegatronBertForCausalLM"),OUr.forEach(t),X0o=r(Qwe," (MegatronBert model)"),Qwe.forEach(t),z0o=i(W),L_=n(W,"LI",{});var Wwe=s(L_);ele=n(Wwe,"STRONG",{});var VUr=s(ele);Q0o=r(VUr,"openai-gpt"),VUr.forEach(t),W0o=r(Wwe," \u2014 "),Qq=n(Wwe,"A",{href:!0});var XUr=s(Qq);H0o=r(XUr,"OpenAIGPTLMHeadModel"),XUr.forEach(t),U0o=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),J0o=i(W),x_=n(W,"LI",{});var Hwe=s(x_);ole=n(Hwe,"STRONG",{});var zUr=s(ole);Y0o=r(zUr,"pegasus"),zUr.forEach(t),K0o=r(Hwe," \u2014 "),Wq=n(Hwe,"A",{href:!0});var QUr=s(Wq);Z0o=r(QUr,"PegasusForCausalLM"),QUr.forEach(t),e6o=r(Hwe," (Pegasus model)"),Hwe.forEach(t),o6o=i(W),$_=n(W,"LI",{});var Uwe=s($_);rle=n(Uwe,"STRONG",{});var WUr=s(rle);r6o=r(WUr,"plbart"),WUr.forEach(t),t6o=r(Uwe," \u2014 "),Hq=n(Uwe,"A",{href:!0});var HUr=s(Hq);a6o=r(HUr,"PLBartForCausalLM"),HUr.forEach(t),n6o=r(Uwe," (PLBart model)"),Uwe.forEach(t),s6o=i(W),k_=n(W,"LI",{});var Jwe=s(k_);tle=n(Jwe,"STRONG",{});var UUr=s(tle);l6o=r(UUr,"prophetnet"),UUr.forEach(t),i6o=r(Jwe," \u2014 "),Uq=n(Jwe,"A",{href:!0});var JUr=s(Uq);d6o=r(JUr,"ProphetNetForCausalLM"),JUr.forEach(t),c6o=r(Jwe," (ProphetNet model)"),Jwe.forEach(t),f6o=i(W),S_=n(W,"LI",{});var Ywe=s(S_);ale=n(Ywe,"STRONG",{});var YUr=s(ale);m6o=r(YUr,"qdqbert"),YUr.forEach(t),g6o=r(Ywe," \u2014 "),Jq=n(Ywe,"A",{href:!0});var KUr=s(Jq);h6o=r(KUr,"QDQBertLMHeadModel"),KUr.forEach(t),p6o=r(Ywe," (QDQBert model)"),Ywe.forEach(t),u6o=i(W),R_=n(W,"LI",{});var Kwe=s(R_);nle=n(Kwe,"STRONG",{});var ZUr=s(nle);_6o=r(ZUr,"reformer"),ZUr.forEach(t),b6o=r(Kwe," \u2014 "),Yq=n(Kwe,"A",{href:!0});var eJr=s(Yq);v6o=r(eJr,"ReformerModelWithLMHead"),eJr.forEach(t),F6o=r(Kwe," (Reformer model)"),Kwe.forEach(t),T6o=i(W),B_=n(W,"LI",{});var Zwe=s(B_);sle=n(Zwe,"STRONG",{});var oJr=s(sle);M6o=r(oJr,"rembert"),oJr.forEach(t),E6o=r(Zwe," \u2014 "),Kq=n(Zwe,"A",{href:!0});var rJr=s(Kq);C6o=r(rJr,"RemBertForCausalLM"),rJr.forEach(t),w6o=r(Zwe," (RemBERT model)"),Zwe.forEach(t),A6o=i(W),P_=n(W,"LI",{});var eAe=s(P_);lle=n(eAe,"STRONG",{});var tJr=s(lle);y6o=r(tJr,"roberta"),tJr.forEach(t),L6o=r(eAe," \u2014 "),Zq=n(eAe,"A",{href:!0});var aJr=s(Zq);x6o=r(aJr,"RobertaForCausalLM"),aJr.forEach(t),$6o=r(eAe," (RoBERTa model)"),eAe.forEach(t),k6o=i(W),I_=n(W,"LI",{});var oAe=s(I_);ile=n(oAe,"STRONG",{});var nJr=s(ile);S6o=r(nJr,"roformer"),nJr.forEach(t),R6o=r(oAe," \u2014 "),eN=n(oAe,"A",{href:!0});var sJr=s(eN);B6o=r(sJr,"RoFormerForCausalLM"),sJr.forEach(t),P6o=r(oAe," (RoFormer model)"),oAe.forEach(t),I6o=i(W),q_=n(W,"LI",{});var rAe=s(q_);dle=n(rAe,"STRONG",{});var lJr=s(dle);q6o=r(lJr,"speech_to_text_2"),lJr.forEach(t),N6o=r(rAe," \u2014 "),oN=n(rAe,"A",{href:!0});var iJr=s(oN);j6o=r(iJr,"Speech2Text2ForCausalLM"),iJr.forEach(t),D6o=r(rAe," (Speech2Text2 model)"),rAe.forEach(t),G6o=i(W),N_=n(W,"LI",{});var tAe=s(N_);cle=n(tAe,"STRONG",{});var dJr=s(cle);O6o=r(dJr,"transfo-xl"),dJr.forEach(t),V6o=r(tAe," \u2014 "),rN=n(tAe,"A",{href:!0});var cJr=s(rN);X6o=r(cJr,"TransfoXLLMHeadModel"),cJr.forEach(t),z6o=r(tAe," (Transformer-XL model)"),tAe.forEach(t),Q6o=i(W),j_=n(W,"LI",{});var aAe=s(j_);fle=n(aAe,"STRONG",{});var fJr=s(fle);W6o=r(fJr,"trocr"),fJr.forEach(t),H6o=r(aAe," \u2014 "),tN=n(aAe,"A",{href:!0});var mJr=s(tN);U6o=r(mJr,"TrOCRForCausalLM"),mJr.forEach(t),J6o=r(aAe," (TrOCR model)"),aAe.forEach(t),Y6o=i(W),D_=n(W,"LI",{});var nAe=s(D_);mle=n(nAe,"STRONG",{});var gJr=s(mle);K6o=r(gJr,"xglm"),gJr.forEach(t),Z6o=r(nAe," \u2014 "),aN=n(nAe,"A",{href:!0});var hJr=s(aN);eTo=r(hJr,"XGLMForCausalLM"),hJr.forEach(t),oTo=r(nAe," (XGLM model)"),nAe.forEach(t),rTo=i(W),G_=n(W,"LI",{});var sAe=s(G_);gle=n(sAe,"STRONG",{});var pJr=s(gle);tTo=r(pJr,"xlm"),pJr.forEach(t),aTo=r(sAe," \u2014 "),nN=n(sAe,"A",{href:!0});var uJr=s(nN);nTo=r(uJr,"XLMWithLMHeadModel"),uJr.forEach(t),sTo=r(sAe," (XLM model)"),sAe.forEach(t),lTo=i(W),O_=n(W,"LI",{});var lAe=s(O_);hle=n(lAe,"STRONG",{});var _Jr=s(hle);iTo=r(_Jr,"xlm-prophetnet"),_Jr.forEach(t),dTo=r(lAe," \u2014 "),sN=n(lAe,"A",{href:!0});var bJr=s(sN);cTo=r(bJr,"XLMProphetNetForCausalLM"),bJr.forEach(t),fTo=r(lAe," (XLMProphetNet model)"),lAe.forEach(t),mTo=i(W),V_=n(W,"LI",{});var iAe=s(V_);ple=n(iAe,"STRONG",{});var vJr=s(ple);gTo=r(vJr,"xlm-roberta"),vJr.forEach(t),hTo=r(iAe," \u2014 "),lN=n(iAe,"A",{href:!0});var FJr=s(lN);pTo=r(FJr,"XLMRobertaForCausalLM"),FJr.forEach(t),uTo=r(iAe," (XLM-RoBERTa model)"),iAe.forEach(t),_To=i(W),X_=n(W,"LI",{});var dAe=s(X_);ule=n(dAe,"STRONG",{});var TJr=s(ule);bTo=r(TJr,"xlm-roberta-xl"),TJr.forEach(t),vTo=r(dAe," \u2014 "),iN=n(dAe,"A",{href:!0});var MJr=s(iN);FTo=r(MJr,"XLMRobertaXLForCausalLM"),MJr.forEach(t),TTo=r(dAe," (XLM-RoBERTa-XL model)"),dAe.forEach(t),MTo=i(W),z_=n(W,"LI",{});var cAe=s(z_);_le=n(cAe,"STRONG",{});var EJr=s(_le);ETo=r(EJr,"xlnet"),EJr.forEach(t),CTo=r(cAe," \u2014 "),dN=n(cAe,"A",{href:!0});var CJr=s(dN);wTo=r(CJr,"XLNetLMHeadModel"),CJr.forEach(t),ATo=r(cAe," (XLNet model)"),cAe.forEach(t),W.forEach(t),yTo=i(Yt),Q_=n(Yt,"P",{});var fAe=s(Q_);LTo=r(fAe,"The model is set in evaluation mode by default using "),ble=n(fAe,"CODE",{});var wJr=s(ble);xTo=r(wJr,"model.eval()"),wJr.forEach(t),$To=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(fAe,"CODE",{});var AJr=s(vle);kTo=r(AJr,"model.train()"),AJr.forEach(t),fAe.forEach(t),STo=i(Yt),T(W_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),iBe=i(f),Ci=n(f,"H2",{class:!0});var cIe=s(Ci);H_=n(cIe,"A",{id:!0,class:!0,href:!0});var yJr=s(H_);Fle=n(yJr,"SPAN",{});var LJr=s(Fle);T(ay.$$.fragment,LJr),LJr.forEach(t),yJr.forEach(t),RTo=i(cIe),Tle=n(cIe,"SPAN",{});var xJr=s(Tle);BTo=r(xJr,"AutoModelForMaskedLM"),xJr.forEach(t),cIe.forEach(t),dBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(ny.$$.fragment,qs),PTo=i(qs),wi=n(qs,"P",{});var lY=s(wi);ITo=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cN=n(lY,"A",{href:!0});var $Jr=s(cN);qTo=r($Jr,"from_pretrained()"),$Jr.forEach(t),NTo=r(lY," class method or the "),fN=n(lY,"A",{href:!0});var kJr=s(fN);jTo=r(kJr,"from_config()"),kJr.forEach(t),DTo=r(lY,` class
method.`),lY.forEach(t),GTo=i(qs),sy=n(qs,"P",{});var fIe=s(sy);OTo=r(fIe,"This class cannot be instantiated directly using "),Mle=n(fIe,"CODE",{});var SJr=s(Mle);VTo=r(SJr,"__init__()"),SJr.forEach(t),XTo=r(fIe," (throws an error)."),fIe.forEach(t),zTo=i(qs),ot=n(qs,"DIV",{class:!0});var L3=s(ot);T(ly.$$.fragment,L3),QTo=i(L3),Ele=n(L3,"P",{});var RJr=s(Ele);WTo=r(RJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RJr.forEach(t),HTo=i(L3),Ai=n(L3,"P",{});var iY=s(Ai);UTo=r(iY,`Note:
Loading a model from its configuration file does `),Cle=n(iY,"STRONG",{});var BJr=s(Cle);JTo=r(BJr,"not"),BJr.forEach(t),YTo=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mN=n(iY,"A",{href:!0});var PJr=s(mN);KTo=r(PJr,"from_pretrained()"),PJr.forEach(t),ZTo=r(iY," to load the model weights."),iY.forEach(t),eMo=i(L3),T(U_.$$.fragment,L3),L3.forEach(t),oMo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(iy.$$.fragment,Kt),rMo=i(Kt),wle=n(Kt,"P",{});var IJr=s(wle);tMo=r(IJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),IJr.forEach(t),aMo=i(Kt),wa=n(Kt,"P",{});var x3=s(wa);nMo=r(x3,"The model class to instantiate is selected based on the "),Ale=n(x3,"CODE",{});var qJr=s(Ale);sMo=r(qJr,"model_type"),qJr.forEach(t),lMo=r(x3,` property of the config object (either
passed as an argument or loaded from `),yle=n(x3,"CODE",{});var NJr=s(yle);iMo=r(NJr,"pretrained_model_name_or_path"),NJr.forEach(t),dMo=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(x3,"CODE",{});var jJr=s(Lle);cMo=r(jJr,"pretrained_model_name_or_path"),jJr.forEach(t),fMo=r(x3,":"),x3.forEach(t),mMo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);J_=n(H,"LI",{});var mAe=s(J_);xle=n(mAe,"STRONG",{});var DJr=s(xle);gMo=r(DJr,"albert"),DJr.forEach(t),hMo=r(mAe," \u2014 "),gN=n(mAe,"A",{href:!0});var GJr=s(gN);pMo=r(GJr,"AlbertForMaskedLM"),GJr.forEach(t),uMo=r(mAe," (ALBERT model)"),mAe.forEach(t),_Mo=i(H),Y_=n(H,"LI",{});var gAe=s(Y_);$le=n(gAe,"STRONG",{});var OJr=s($le);bMo=r(OJr,"bart"),OJr.forEach(t),vMo=r(gAe," \u2014 "),hN=n(gAe,"A",{href:!0});var VJr=s(hN);FMo=r(VJr,"BartForConditionalGeneration"),VJr.forEach(t),TMo=r(gAe," (BART model)"),gAe.forEach(t),MMo=i(H),K_=n(H,"LI",{});var hAe=s(K_);kle=n(hAe,"STRONG",{});var XJr=s(kle);EMo=r(XJr,"bert"),XJr.forEach(t),CMo=r(hAe," \u2014 "),pN=n(hAe,"A",{href:!0});var zJr=s(pN);wMo=r(zJr,"BertForMaskedLM"),zJr.forEach(t),AMo=r(hAe," (BERT model)"),hAe.forEach(t),yMo=i(H),Z_=n(H,"LI",{});var pAe=s(Z_);Sle=n(pAe,"STRONG",{});var QJr=s(Sle);LMo=r(QJr,"big_bird"),QJr.forEach(t),xMo=r(pAe," \u2014 "),uN=n(pAe,"A",{href:!0});var WJr=s(uN);$Mo=r(WJr,"BigBirdForMaskedLM"),WJr.forEach(t),kMo=r(pAe," (BigBird model)"),pAe.forEach(t),SMo=i(H),e2=n(H,"LI",{});var uAe=s(e2);Rle=n(uAe,"STRONG",{});var HJr=s(Rle);RMo=r(HJr,"camembert"),HJr.forEach(t),BMo=r(uAe," \u2014 "),_N=n(uAe,"A",{href:!0});var UJr=s(_N);PMo=r(UJr,"CamembertForMaskedLM"),UJr.forEach(t),IMo=r(uAe," (CamemBERT model)"),uAe.forEach(t),qMo=i(H),o2=n(H,"LI",{});var _Ae=s(o2);Ble=n(_Ae,"STRONG",{});var JJr=s(Ble);NMo=r(JJr,"convbert"),JJr.forEach(t),jMo=r(_Ae," \u2014 "),bN=n(_Ae,"A",{href:!0});var YJr=s(bN);DMo=r(YJr,"ConvBertForMaskedLM"),YJr.forEach(t),GMo=r(_Ae," (ConvBERT model)"),_Ae.forEach(t),OMo=i(H),r2=n(H,"LI",{});var bAe=s(r2);Ple=n(bAe,"STRONG",{});var KJr=s(Ple);VMo=r(KJr,"data2vec-text"),KJr.forEach(t),XMo=r(bAe," \u2014 "),vN=n(bAe,"A",{href:!0});var ZJr=s(vN);zMo=r(ZJr,"Data2VecTextForMaskedLM"),ZJr.forEach(t),QMo=r(bAe," (Data2VecText model)"),bAe.forEach(t),WMo=i(H),t2=n(H,"LI",{});var vAe=s(t2);Ile=n(vAe,"STRONG",{});var eYr=s(Ile);HMo=r(eYr,"deberta"),eYr.forEach(t),UMo=r(vAe," \u2014 "),FN=n(vAe,"A",{href:!0});var oYr=s(FN);JMo=r(oYr,"DebertaForMaskedLM"),oYr.forEach(t),YMo=r(vAe," (DeBERTa model)"),vAe.forEach(t),KMo=i(H),a2=n(H,"LI",{});var FAe=s(a2);qle=n(FAe,"STRONG",{});var rYr=s(qle);ZMo=r(rYr,"deberta-v2"),rYr.forEach(t),eEo=r(FAe," \u2014 "),TN=n(FAe,"A",{href:!0});var tYr=s(TN);oEo=r(tYr,"DebertaV2ForMaskedLM"),tYr.forEach(t),rEo=r(FAe," (DeBERTa-v2 model)"),FAe.forEach(t),tEo=i(H),n2=n(H,"LI",{});var TAe=s(n2);Nle=n(TAe,"STRONG",{});var aYr=s(Nle);aEo=r(aYr,"distilbert"),aYr.forEach(t),nEo=r(TAe," \u2014 "),MN=n(TAe,"A",{href:!0});var nYr=s(MN);sEo=r(nYr,"DistilBertForMaskedLM"),nYr.forEach(t),lEo=r(TAe," (DistilBERT model)"),TAe.forEach(t),iEo=i(H),s2=n(H,"LI",{});var MAe=s(s2);jle=n(MAe,"STRONG",{});var sYr=s(jle);dEo=r(sYr,"electra"),sYr.forEach(t),cEo=r(MAe," \u2014 "),EN=n(MAe,"A",{href:!0});var lYr=s(EN);fEo=r(lYr,"ElectraForMaskedLM"),lYr.forEach(t),mEo=r(MAe," (ELECTRA model)"),MAe.forEach(t),gEo=i(H),l2=n(H,"LI",{});var EAe=s(l2);Dle=n(EAe,"STRONG",{});var iYr=s(Dle);hEo=r(iYr,"flaubert"),iYr.forEach(t),pEo=r(EAe," \u2014 "),CN=n(EAe,"A",{href:!0});var dYr=s(CN);uEo=r(dYr,"FlaubertWithLMHeadModel"),dYr.forEach(t),_Eo=r(EAe," (FlauBERT model)"),EAe.forEach(t),bEo=i(H),i2=n(H,"LI",{});var CAe=s(i2);Gle=n(CAe,"STRONG",{});var cYr=s(Gle);vEo=r(cYr,"fnet"),cYr.forEach(t),FEo=r(CAe," \u2014 "),wN=n(CAe,"A",{href:!0});var fYr=s(wN);TEo=r(fYr,"FNetForMaskedLM"),fYr.forEach(t),MEo=r(CAe," (FNet model)"),CAe.forEach(t),EEo=i(H),d2=n(H,"LI",{});var wAe=s(d2);Ole=n(wAe,"STRONG",{});var mYr=s(Ole);CEo=r(mYr,"funnel"),mYr.forEach(t),wEo=r(wAe," \u2014 "),AN=n(wAe,"A",{href:!0});var gYr=s(AN);AEo=r(gYr,"FunnelForMaskedLM"),gYr.forEach(t),yEo=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),LEo=i(H),c2=n(H,"LI",{});var AAe=s(c2);Vle=n(AAe,"STRONG",{});var hYr=s(Vle);xEo=r(hYr,"ibert"),hYr.forEach(t),$Eo=r(AAe," \u2014 "),yN=n(AAe,"A",{href:!0});var pYr=s(yN);kEo=r(pYr,"IBertForMaskedLM"),pYr.forEach(t),SEo=r(AAe," (I-BERT model)"),AAe.forEach(t),REo=i(H),f2=n(H,"LI",{});var yAe=s(f2);Xle=n(yAe,"STRONG",{});var uYr=s(Xle);BEo=r(uYr,"layoutlm"),uYr.forEach(t),PEo=r(yAe," \u2014 "),LN=n(yAe,"A",{href:!0});var _Yr=s(LN);IEo=r(_Yr,"LayoutLMForMaskedLM"),_Yr.forEach(t),qEo=r(yAe," (LayoutLM model)"),yAe.forEach(t),NEo=i(H),m2=n(H,"LI",{});var LAe=s(m2);zle=n(LAe,"STRONG",{});var bYr=s(zle);jEo=r(bYr,"longformer"),bYr.forEach(t),DEo=r(LAe," \u2014 "),xN=n(LAe,"A",{href:!0});var vYr=s(xN);GEo=r(vYr,"LongformerForMaskedLM"),vYr.forEach(t),OEo=r(LAe," (Longformer model)"),LAe.forEach(t),VEo=i(H),g2=n(H,"LI",{});var xAe=s(g2);Qle=n(xAe,"STRONG",{});var FYr=s(Qle);XEo=r(FYr,"mbart"),FYr.forEach(t),zEo=r(xAe," \u2014 "),$N=n(xAe,"A",{href:!0});var TYr=s($N);QEo=r(TYr,"MBartForConditionalGeneration"),TYr.forEach(t),WEo=r(xAe," (mBART model)"),xAe.forEach(t),HEo=i(H),h2=n(H,"LI",{});var $Ae=s(h2);Wle=n($Ae,"STRONG",{});var MYr=s(Wle);UEo=r(MYr,"megatron-bert"),MYr.forEach(t),JEo=r($Ae," \u2014 "),kN=n($Ae,"A",{href:!0});var EYr=s(kN);YEo=r(EYr,"MegatronBertForMaskedLM"),EYr.forEach(t),KEo=r($Ae," (MegatronBert model)"),$Ae.forEach(t),ZEo=i(H),p2=n(H,"LI",{});var kAe=s(p2);Hle=n(kAe,"STRONG",{});var CYr=s(Hle);eCo=r(CYr,"mobilebert"),CYr.forEach(t),oCo=r(kAe," \u2014 "),SN=n(kAe,"A",{href:!0});var wYr=s(SN);rCo=r(wYr,"MobileBertForMaskedLM"),wYr.forEach(t),tCo=r(kAe," (MobileBERT model)"),kAe.forEach(t),aCo=i(H),u2=n(H,"LI",{});var SAe=s(u2);Ule=n(SAe,"STRONG",{});var AYr=s(Ule);nCo=r(AYr,"mpnet"),AYr.forEach(t),sCo=r(SAe," \u2014 "),RN=n(SAe,"A",{href:!0});var yYr=s(RN);lCo=r(yYr,"MPNetForMaskedLM"),yYr.forEach(t),iCo=r(SAe," (MPNet model)"),SAe.forEach(t),dCo=i(H),_2=n(H,"LI",{});var RAe=s(_2);Jle=n(RAe,"STRONG",{});var LYr=s(Jle);cCo=r(LYr,"nystromformer"),LYr.forEach(t),fCo=r(RAe," \u2014 "),BN=n(RAe,"A",{href:!0});var xYr=s(BN);mCo=r(xYr,"NystromformerForMaskedLM"),xYr.forEach(t),gCo=r(RAe," (Nystromformer model)"),RAe.forEach(t),hCo=i(H),b2=n(H,"LI",{});var BAe=s(b2);Yle=n(BAe,"STRONG",{});var $Yr=s(Yle);pCo=r($Yr,"perceiver"),$Yr.forEach(t),uCo=r(BAe," \u2014 "),PN=n(BAe,"A",{href:!0});var kYr=s(PN);_Co=r(kYr,"PerceiverForMaskedLM"),kYr.forEach(t),bCo=r(BAe," (Perceiver model)"),BAe.forEach(t),vCo=i(H),v2=n(H,"LI",{});var PAe=s(v2);Kle=n(PAe,"STRONG",{});var SYr=s(Kle);FCo=r(SYr,"qdqbert"),SYr.forEach(t),TCo=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var RYr=s(IN);MCo=r(RYr,"QDQBertForMaskedLM"),RYr.forEach(t),ECo=r(PAe," (QDQBert model)"),PAe.forEach(t),CCo=i(H),F2=n(H,"LI",{});var IAe=s(F2);Zle=n(IAe,"STRONG",{});var BYr=s(Zle);wCo=r(BYr,"reformer"),BYr.forEach(t),ACo=r(IAe," \u2014 "),qN=n(IAe,"A",{href:!0});var PYr=s(qN);yCo=r(PYr,"ReformerForMaskedLM"),PYr.forEach(t),LCo=r(IAe," (Reformer model)"),IAe.forEach(t),xCo=i(H),T2=n(H,"LI",{});var qAe=s(T2);eie=n(qAe,"STRONG",{});var IYr=s(eie);$Co=r(IYr,"rembert"),IYr.forEach(t),kCo=r(qAe," \u2014 "),NN=n(qAe,"A",{href:!0});var qYr=s(NN);SCo=r(qYr,"RemBertForMaskedLM"),qYr.forEach(t),RCo=r(qAe," (RemBERT model)"),qAe.forEach(t),BCo=i(H),M2=n(H,"LI",{});var NAe=s(M2);oie=n(NAe,"STRONG",{});var NYr=s(oie);PCo=r(NYr,"roberta"),NYr.forEach(t),ICo=r(NAe," \u2014 "),jN=n(NAe,"A",{href:!0});var jYr=s(jN);qCo=r(jYr,"RobertaForMaskedLM"),jYr.forEach(t),NCo=r(NAe," (RoBERTa model)"),NAe.forEach(t),jCo=i(H),E2=n(H,"LI",{});var jAe=s(E2);rie=n(jAe,"STRONG",{});var DYr=s(rie);DCo=r(DYr,"roformer"),DYr.forEach(t),GCo=r(jAe," \u2014 "),DN=n(jAe,"A",{href:!0});var GYr=s(DN);OCo=r(GYr,"RoFormerForMaskedLM"),GYr.forEach(t),VCo=r(jAe," (RoFormer model)"),jAe.forEach(t),XCo=i(H),C2=n(H,"LI",{});var DAe=s(C2);tie=n(DAe,"STRONG",{});var OYr=s(tie);zCo=r(OYr,"squeezebert"),OYr.forEach(t),QCo=r(DAe," \u2014 "),GN=n(DAe,"A",{href:!0});var VYr=s(GN);WCo=r(VYr,"SqueezeBertForMaskedLM"),VYr.forEach(t),HCo=r(DAe," (SqueezeBERT model)"),DAe.forEach(t),UCo=i(H),w2=n(H,"LI",{});var GAe=s(w2);aie=n(GAe,"STRONG",{});var XYr=s(aie);JCo=r(XYr,"tapas"),XYr.forEach(t),YCo=r(GAe," \u2014 "),ON=n(GAe,"A",{href:!0});var zYr=s(ON);KCo=r(zYr,"TapasForMaskedLM"),zYr.forEach(t),ZCo=r(GAe," (TAPAS model)"),GAe.forEach(t),e5o=i(H),A2=n(H,"LI",{});var OAe=s(A2);nie=n(OAe,"STRONG",{});var QYr=s(nie);o5o=r(QYr,"wav2vec2"),QYr.forEach(t),r5o=r(OAe," \u2014 "),sie=n(OAe,"CODE",{});var WYr=s(sie);t5o=r(WYr,"Wav2Vec2ForMaskedLM"),WYr.forEach(t),a5o=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),n5o=i(H),y2=n(H,"LI",{});var VAe=s(y2);lie=n(VAe,"STRONG",{});var HYr=s(lie);s5o=r(HYr,"xlm"),HYr.forEach(t),l5o=r(VAe," \u2014 "),VN=n(VAe,"A",{href:!0});var UYr=s(VN);i5o=r(UYr,"XLMWithLMHeadModel"),UYr.forEach(t),d5o=r(VAe," (XLM model)"),VAe.forEach(t),c5o=i(H),L2=n(H,"LI",{});var XAe=s(L2);iie=n(XAe,"STRONG",{});var JYr=s(iie);f5o=r(JYr,"xlm-roberta"),JYr.forEach(t),m5o=r(XAe," \u2014 "),XN=n(XAe,"A",{href:!0});var YYr=s(XN);g5o=r(YYr,"XLMRobertaForMaskedLM"),YYr.forEach(t),h5o=r(XAe," (XLM-RoBERTa model)"),XAe.forEach(t),p5o=i(H),x2=n(H,"LI",{});var zAe=s(x2);die=n(zAe,"STRONG",{});var KYr=s(die);u5o=r(KYr,"xlm-roberta-xl"),KYr.forEach(t),_5o=r(zAe," \u2014 "),zN=n(zAe,"A",{href:!0});var ZYr=s(zN);b5o=r(ZYr,"XLMRobertaXLForMaskedLM"),ZYr.forEach(t),v5o=r(zAe," (XLM-RoBERTa-XL model)"),zAe.forEach(t),F5o=i(H),$2=n(H,"LI",{});var QAe=s($2);cie=n(QAe,"STRONG",{});var eKr=s(cie);T5o=r(eKr,"yoso"),eKr.forEach(t),M5o=r(QAe," \u2014 "),QN=n(QAe,"A",{href:!0});var oKr=s(QN);E5o=r(oKr,"YosoForMaskedLM"),oKr.forEach(t),C5o=r(QAe," (YOSO model)"),QAe.forEach(t),H.forEach(t),w5o=i(Kt),k2=n(Kt,"P",{});var WAe=s(k2);A5o=r(WAe,"The model is set in evaluation mode by default using "),fie=n(WAe,"CODE",{});var rKr=s(fie);y5o=r(rKr,"model.eval()"),rKr.forEach(t),L5o=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mie=n(WAe,"CODE",{});var tKr=s(mie);x5o=r(tKr,"model.train()"),tKr.forEach(t),WAe.forEach(t),$5o=i(Kt),T(S2.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),cBe=i(f),yi=n(f,"H2",{class:!0});var mIe=s(yi);R2=n(mIe,"A",{id:!0,class:!0,href:!0});var aKr=s(R2);gie=n(aKr,"SPAN",{});var nKr=s(gie);T(dy.$$.fragment,nKr),nKr.forEach(t),aKr.forEach(t),k5o=i(mIe),hie=n(mIe,"SPAN",{});var sKr=s(hie);S5o=r(sKr,"AutoModelForSeq2SeqLM"),sKr.forEach(t),mIe.forEach(t),fBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(cy.$$.fragment,Ns),R5o=i(Ns),Li=n(Ns,"P",{});var dY=s(Li);B5o=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WN=n(dY,"A",{href:!0});var lKr=s(WN);P5o=r(lKr,"from_pretrained()"),lKr.forEach(t),I5o=r(dY," class method or the "),HN=n(dY,"A",{href:!0});var iKr=s(HN);q5o=r(iKr,"from_config()"),iKr.forEach(t),N5o=r(dY,` class
method.`),dY.forEach(t),j5o=i(Ns),fy=n(Ns,"P",{});var gIe=s(fy);D5o=r(gIe,"This class cannot be instantiated directly using "),pie=n(gIe,"CODE",{});var dKr=s(pie);G5o=r(dKr,"__init__()"),dKr.forEach(t),O5o=r(gIe," (throws an error)."),gIe.forEach(t),V5o=i(Ns),rt=n(Ns,"DIV",{class:!0});var $3=s(rt);T(my.$$.fragment,$3),X5o=i($3),uie=n($3,"P",{});var cKr=s(uie);z5o=r(cKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cKr.forEach(t),Q5o=i($3),xi=n($3,"P",{});var cY=s(xi);W5o=r(cY,`Note:
Loading a model from its configuration file does `),_ie=n(cY,"STRONG",{});var fKr=s(_ie);H5o=r(fKr,"not"),fKr.forEach(t),U5o=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UN=n(cY,"A",{href:!0});var mKr=s(UN);J5o=r(mKr,"from_pretrained()"),mKr.forEach(t),Y5o=r(cY," to load the model weights."),cY.forEach(t),K5o=i($3),T(B2.$$.fragment,$3),$3.forEach(t),Z5o=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(gy.$$.fragment,Zt),e3o=i(Zt),bie=n(Zt,"P",{});var gKr=s(bie);o3o=r(gKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gKr.forEach(t),r3o=i(Zt),Aa=n(Zt,"P",{});var k3=s(Aa);t3o=r(k3,"The model class to instantiate is selected based on the "),vie=n(k3,"CODE",{});var hKr=s(vie);a3o=r(hKr,"model_type"),hKr.forEach(t),n3o=r(k3,` property of the config object (either
passed as an argument or loaded from `),Fie=n(k3,"CODE",{});var pKr=s(Fie);s3o=r(pKr,"pretrained_model_name_or_path"),pKr.forEach(t),l3o=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tie=n(k3,"CODE",{});var uKr=s(Tie);i3o=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),d3o=r(k3,":"),k3.forEach(t),c3o=i(Zt),he=n(Zt,"UL",{});var ue=s(he);P2=n(ue,"LI",{});var HAe=s(P2);Mie=n(HAe,"STRONG",{});var _Kr=s(Mie);f3o=r(_Kr,"bart"),_Kr.forEach(t),m3o=r(HAe," \u2014 "),JN=n(HAe,"A",{href:!0});var bKr=s(JN);g3o=r(bKr,"BartForConditionalGeneration"),bKr.forEach(t),h3o=r(HAe," (BART model)"),HAe.forEach(t),p3o=i(ue),I2=n(ue,"LI",{});var UAe=s(I2);Eie=n(UAe,"STRONG",{});var vKr=s(Eie);u3o=r(vKr,"bigbird_pegasus"),vKr.forEach(t),_3o=r(UAe," \u2014 "),YN=n(UAe,"A",{href:!0});var FKr=s(YN);b3o=r(FKr,"BigBirdPegasusForConditionalGeneration"),FKr.forEach(t),v3o=r(UAe," (BigBirdPegasus model)"),UAe.forEach(t),F3o=i(ue),q2=n(ue,"LI",{});var JAe=s(q2);Cie=n(JAe,"STRONG",{});var TKr=s(Cie);T3o=r(TKr,"blenderbot"),TKr.forEach(t),M3o=r(JAe," \u2014 "),KN=n(JAe,"A",{href:!0});var MKr=s(KN);E3o=r(MKr,"BlenderbotForConditionalGeneration"),MKr.forEach(t),C3o=r(JAe," (Blenderbot model)"),JAe.forEach(t),w3o=i(ue),N2=n(ue,"LI",{});var YAe=s(N2);wie=n(YAe,"STRONG",{});var EKr=s(wie);A3o=r(EKr,"blenderbot-small"),EKr.forEach(t),y3o=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var CKr=s(ZN);L3o=r(CKr,"BlenderbotSmallForConditionalGeneration"),CKr.forEach(t),x3o=r(YAe," (BlenderbotSmall model)"),YAe.forEach(t),$3o=i(ue),j2=n(ue,"LI",{});var KAe=s(j2);Aie=n(KAe,"STRONG",{});var wKr=s(Aie);k3o=r(wKr,"encoder-decoder"),wKr.forEach(t),S3o=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var AKr=s(ej);R3o=r(AKr,"EncoderDecoderModel"),AKr.forEach(t),B3o=r(KAe," (Encoder decoder model)"),KAe.forEach(t),P3o=i(ue),D2=n(ue,"LI",{});var ZAe=s(D2);yie=n(ZAe,"STRONG",{});var yKr=s(yie);I3o=r(yKr,"fsmt"),yKr.forEach(t),q3o=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var LKr=s(oj);N3o=r(LKr,"FSMTForConditionalGeneration"),LKr.forEach(t),j3o=r(ZAe," (FairSeq Machine-Translation model)"),ZAe.forEach(t),D3o=i(ue),G2=n(ue,"LI",{});var eye=s(G2);Lie=n(eye,"STRONG",{});var xKr=s(Lie);G3o=r(xKr,"led"),xKr.forEach(t),O3o=r(eye," \u2014 "),rj=n(eye,"A",{href:!0});var $Kr=s(rj);V3o=r($Kr,"LEDForConditionalGeneration"),$Kr.forEach(t),X3o=r(eye," (LED model)"),eye.forEach(t),z3o=i(ue),O2=n(ue,"LI",{});var oye=s(O2);xie=n(oye,"STRONG",{});var kKr=s(xie);Q3o=r(kKr,"m2m_100"),kKr.forEach(t),W3o=r(oye," \u2014 "),tj=n(oye,"A",{href:!0});var SKr=s(tj);H3o=r(SKr,"M2M100ForConditionalGeneration"),SKr.forEach(t),U3o=r(oye," (M2M100 model)"),oye.forEach(t),J3o=i(ue),V2=n(ue,"LI",{});var rye=s(V2);$ie=n(rye,"STRONG",{});var RKr=s($ie);Y3o=r(RKr,"marian"),RKr.forEach(t),K3o=r(rye," \u2014 "),aj=n(rye,"A",{href:!0});var BKr=s(aj);Z3o=r(BKr,"MarianMTModel"),BKr.forEach(t),ewo=r(rye," (Marian model)"),rye.forEach(t),owo=i(ue),X2=n(ue,"LI",{});var tye=s(X2);kie=n(tye,"STRONG",{});var PKr=s(kie);rwo=r(PKr,"mbart"),PKr.forEach(t),two=r(tye," \u2014 "),nj=n(tye,"A",{href:!0});var IKr=s(nj);awo=r(IKr,"MBartForConditionalGeneration"),IKr.forEach(t),nwo=r(tye," (mBART model)"),tye.forEach(t),swo=i(ue),z2=n(ue,"LI",{});var aye=s(z2);Sie=n(aye,"STRONG",{});var qKr=s(Sie);lwo=r(qKr,"mt5"),qKr.forEach(t),iwo=r(aye," \u2014 "),sj=n(aye,"A",{href:!0});var NKr=s(sj);dwo=r(NKr,"MT5ForConditionalGeneration"),NKr.forEach(t),cwo=r(aye," (mT5 model)"),aye.forEach(t),fwo=i(ue),Q2=n(ue,"LI",{});var nye=s(Q2);Rie=n(nye,"STRONG",{});var jKr=s(Rie);mwo=r(jKr,"pegasus"),jKr.forEach(t),gwo=r(nye," \u2014 "),lj=n(nye,"A",{href:!0});var DKr=s(lj);hwo=r(DKr,"PegasusForConditionalGeneration"),DKr.forEach(t),pwo=r(nye," (Pegasus model)"),nye.forEach(t),uwo=i(ue),W2=n(ue,"LI",{});var sye=s(W2);Bie=n(sye,"STRONG",{});var GKr=s(Bie);_wo=r(GKr,"plbart"),GKr.forEach(t),bwo=r(sye," \u2014 "),ij=n(sye,"A",{href:!0});var OKr=s(ij);vwo=r(OKr,"PLBartForConditionalGeneration"),OKr.forEach(t),Fwo=r(sye," (PLBart model)"),sye.forEach(t),Two=i(ue),H2=n(ue,"LI",{});var lye=s(H2);Pie=n(lye,"STRONG",{});var VKr=s(Pie);Mwo=r(VKr,"prophetnet"),VKr.forEach(t),Ewo=r(lye," \u2014 "),dj=n(lye,"A",{href:!0});var XKr=s(dj);Cwo=r(XKr,"ProphetNetForConditionalGeneration"),XKr.forEach(t),wwo=r(lye," (ProphetNet model)"),lye.forEach(t),Awo=i(ue),U2=n(ue,"LI",{});var iye=s(U2);Iie=n(iye,"STRONG",{});var zKr=s(Iie);ywo=r(zKr,"t5"),zKr.forEach(t),Lwo=r(iye," \u2014 "),cj=n(iye,"A",{href:!0});var QKr=s(cj);xwo=r(QKr,"T5ForConditionalGeneration"),QKr.forEach(t),$wo=r(iye," (T5 model)"),iye.forEach(t),kwo=i(ue),J2=n(ue,"LI",{});var dye=s(J2);qie=n(dye,"STRONG",{});var WKr=s(qie);Swo=r(WKr,"tapex"),WKr.forEach(t),Rwo=r(dye," \u2014 "),fj=n(dye,"A",{href:!0});var HKr=s(fj);Bwo=r(HKr,"BartForConditionalGeneration"),HKr.forEach(t),Pwo=r(dye," (TAPEX model)"),dye.forEach(t),Iwo=i(ue),Y2=n(ue,"LI",{});var cye=s(Y2);Nie=n(cye,"STRONG",{});var UKr=s(Nie);qwo=r(UKr,"xlm-prophetnet"),UKr.forEach(t),Nwo=r(cye," \u2014 "),mj=n(cye,"A",{href:!0});var JKr=s(mj);jwo=r(JKr,"XLMProphetNetForConditionalGeneration"),JKr.forEach(t),Dwo=r(cye," (XLMProphetNet model)"),cye.forEach(t),ue.forEach(t),Gwo=i(Zt),K2=n(Zt,"P",{});var fye=s(K2);Owo=r(fye,"The model is set in evaluation mode by default using "),jie=n(fye,"CODE",{});var YKr=s(jie);Vwo=r(YKr,"model.eval()"),YKr.forEach(t),Xwo=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Die=n(fye,"CODE",{});var KKr=s(Die);zwo=r(KKr,"model.train()"),KKr.forEach(t),fye.forEach(t),Qwo=i(Zt),T(Z2.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),mBe=i(f),$i=n(f,"H2",{class:!0});var hIe=s($i);e1=n(hIe,"A",{id:!0,class:!0,href:!0});var ZKr=s(e1);Gie=n(ZKr,"SPAN",{});var eZr=s(Gie);T(hy.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),Wwo=i(hIe),Oie=n(hIe,"SPAN",{});var oZr=s(Oie);Hwo=r(oZr,"AutoModelForSequenceClassification"),oZr.forEach(t),hIe.forEach(t),gBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(py.$$.fragment,js),Uwo=i(js),ki=n(js,"P",{});var fY=s(ki);Jwo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gj=n(fY,"A",{href:!0});var rZr=s(gj);Ywo=r(rZr,"from_pretrained()"),rZr.forEach(t),Kwo=r(fY," class method or the "),hj=n(fY,"A",{href:!0});var tZr=s(hj);Zwo=r(tZr,"from_config()"),tZr.forEach(t),eAo=r(fY,` class
method.`),fY.forEach(t),oAo=i(js),uy=n(js,"P",{});var pIe=s(uy);rAo=r(pIe,"This class cannot be instantiated directly using "),Vie=n(pIe,"CODE",{});var aZr=s(Vie);tAo=r(aZr,"__init__()"),aZr.forEach(t),aAo=r(pIe," (throws an error)."),pIe.forEach(t),nAo=i(js),tt=n(js,"DIV",{class:!0});var S3=s(tt);T(_y.$$.fragment,S3),sAo=i(S3),Xie=n(S3,"P",{});var nZr=s(Xie);lAo=r(nZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nZr.forEach(t),iAo=i(S3),Si=n(S3,"P",{});var mY=s(Si);dAo=r(mY,`Note:
Loading a model from its configuration file does `),zie=n(mY,"STRONG",{});var sZr=s(zie);cAo=r(sZr,"not"),sZr.forEach(t),fAo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pj=n(mY,"A",{href:!0});var lZr=s(pj);mAo=r(lZr,"from_pretrained()"),lZr.forEach(t),gAo=r(mY," to load the model weights."),mY.forEach(t),hAo=i(S3),T(o1.$$.fragment,S3),S3.forEach(t),pAo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(by.$$.fragment,ea),uAo=i(ea),Qie=n(ea,"P",{});var iZr=s(Qie);_Ao=r(iZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iZr.forEach(t),bAo=i(ea),ya=n(ea,"P",{});var R3=s(ya);vAo=r(R3,"The model class to instantiate is selected based on the "),Wie=n(R3,"CODE",{});var dZr=s(Wie);FAo=r(dZr,"model_type"),dZr.forEach(t),TAo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Hie=n(R3,"CODE",{});var cZr=s(Hie);MAo=r(cZr,"pretrained_model_name_or_path"),cZr.forEach(t),EAo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uie=n(R3,"CODE",{});var fZr=s(Uie);CAo=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),wAo=r(R3,":"),R3.forEach(t),AAo=i(ea),q=n(ea,"UL",{});var N=s(q);r1=n(N,"LI",{});var mye=s(r1);Jie=n(mye,"STRONG",{});var mZr=s(Jie);yAo=r(mZr,"albert"),mZr.forEach(t),LAo=r(mye," \u2014 "),uj=n(mye,"A",{href:!0});var gZr=s(uj);xAo=r(gZr,"AlbertForSequenceClassification"),gZr.forEach(t),$Ao=r(mye," (ALBERT model)"),mye.forEach(t),kAo=i(N),t1=n(N,"LI",{});var gye=s(t1);Yie=n(gye,"STRONG",{});var hZr=s(Yie);SAo=r(hZr,"bart"),hZr.forEach(t),RAo=r(gye," \u2014 "),_j=n(gye,"A",{href:!0});var pZr=s(_j);BAo=r(pZr,"BartForSequenceClassification"),pZr.forEach(t),PAo=r(gye," (BART model)"),gye.forEach(t),IAo=i(N),a1=n(N,"LI",{});var hye=s(a1);Kie=n(hye,"STRONG",{});var uZr=s(Kie);qAo=r(uZr,"bert"),uZr.forEach(t),NAo=r(hye," \u2014 "),bj=n(hye,"A",{href:!0});var _Zr=s(bj);jAo=r(_Zr,"BertForSequenceClassification"),_Zr.forEach(t),DAo=r(hye," (BERT model)"),hye.forEach(t),GAo=i(N),n1=n(N,"LI",{});var pye=s(n1);Zie=n(pye,"STRONG",{});var bZr=s(Zie);OAo=r(bZr,"big_bird"),bZr.forEach(t),VAo=r(pye," \u2014 "),vj=n(pye,"A",{href:!0});var vZr=s(vj);XAo=r(vZr,"BigBirdForSequenceClassification"),vZr.forEach(t),zAo=r(pye," (BigBird model)"),pye.forEach(t),QAo=i(N),s1=n(N,"LI",{});var uye=s(s1);ede=n(uye,"STRONG",{});var FZr=s(ede);WAo=r(FZr,"bigbird_pegasus"),FZr.forEach(t),HAo=r(uye," \u2014 "),Fj=n(uye,"A",{href:!0});var TZr=s(Fj);UAo=r(TZr,"BigBirdPegasusForSequenceClassification"),TZr.forEach(t),JAo=r(uye," (BigBirdPegasus model)"),uye.forEach(t),YAo=i(N),l1=n(N,"LI",{});var _ye=s(l1);ode=n(_ye,"STRONG",{});var MZr=s(ode);KAo=r(MZr,"camembert"),MZr.forEach(t),ZAo=r(_ye," \u2014 "),Tj=n(_ye,"A",{href:!0});var EZr=s(Tj);eyo=r(EZr,"CamembertForSequenceClassification"),EZr.forEach(t),oyo=r(_ye," (CamemBERT model)"),_ye.forEach(t),ryo=i(N),i1=n(N,"LI",{});var bye=s(i1);rde=n(bye,"STRONG",{});var CZr=s(rde);tyo=r(CZr,"canine"),CZr.forEach(t),ayo=r(bye," \u2014 "),Mj=n(bye,"A",{href:!0});var wZr=s(Mj);nyo=r(wZr,"CanineForSequenceClassification"),wZr.forEach(t),syo=r(bye," (Canine model)"),bye.forEach(t),lyo=i(N),d1=n(N,"LI",{});var vye=s(d1);tde=n(vye,"STRONG",{});var AZr=s(tde);iyo=r(AZr,"convbert"),AZr.forEach(t),dyo=r(vye," \u2014 "),Ej=n(vye,"A",{href:!0});var yZr=s(Ej);cyo=r(yZr,"ConvBertForSequenceClassification"),yZr.forEach(t),fyo=r(vye," (ConvBERT model)"),vye.forEach(t),myo=i(N),c1=n(N,"LI",{});var Fye=s(c1);ade=n(Fye,"STRONG",{});var LZr=s(ade);gyo=r(LZr,"ctrl"),LZr.forEach(t),hyo=r(Fye," \u2014 "),Cj=n(Fye,"A",{href:!0});var xZr=s(Cj);pyo=r(xZr,"CTRLForSequenceClassification"),xZr.forEach(t),uyo=r(Fye," (CTRL model)"),Fye.forEach(t),_yo=i(N),f1=n(N,"LI",{});var Tye=s(f1);nde=n(Tye,"STRONG",{});var $Zr=s(nde);byo=r($Zr,"data2vec-text"),$Zr.forEach(t),vyo=r(Tye," \u2014 "),wj=n(Tye,"A",{href:!0});var kZr=s(wj);Fyo=r(kZr,"Data2VecTextForSequenceClassification"),kZr.forEach(t),Tyo=r(Tye," (Data2VecText model)"),Tye.forEach(t),Myo=i(N),m1=n(N,"LI",{});var Mye=s(m1);sde=n(Mye,"STRONG",{});var SZr=s(sde);Eyo=r(SZr,"deberta"),SZr.forEach(t),Cyo=r(Mye," \u2014 "),Aj=n(Mye,"A",{href:!0});var RZr=s(Aj);wyo=r(RZr,"DebertaForSequenceClassification"),RZr.forEach(t),Ayo=r(Mye," (DeBERTa model)"),Mye.forEach(t),yyo=i(N),g1=n(N,"LI",{});var Eye=s(g1);lde=n(Eye,"STRONG",{});var BZr=s(lde);Lyo=r(BZr,"deberta-v2"),BZr.forEach(t),xyo=r(Eye," \u2014 "),yj=n(Eye,"A",{href:!0});var PZr=s(yj);$yo=r(PZr,"DebertaV2ForSequenceClassification"),PZr.forEach(t),kyo=r(Eye," (DeBERTa-v2 model)"),Eye.forEach(t),Syo=i(N),h1=n(N,"LI",{});var Cye=s(h1);ide=n(Cye,"STRONG",{});var IZr=s(ide);Ryo=r(IZr,"distilbert"),IZr.forEach(t),Byo=r(Cye," \u2014 "),Lj=n(Cye,"A",{href:!0});var qZr=s(Lj);Pyo=r(qZr,"DistilBertForSequenceClassification"),qZr.forEach(t),Iyo=r(Cye," (DistilBERT model)"),Cye.forEach(t),qyo=i(N),p1=n(N,"LI",{});var wye=s(p1);dde=n(wye,"STRONG",{});var NZr=s(dde);Nyo=r(NZr,"electra"),NZr.forEach(t),jyo=r(wye," \u2014 "),xj=n(wye,"A",{href:!0});var jZr=s(xj);Dyo=r(jZr,"ElectraForSequenceClassification"),jZr.forEach(t),Gyo=r(wye," (ELECTRA model)"),wye.forEach(t),Oyo=i(N),u1=n(N,"LI",{});var Aye=s(u1);cde=n(Aye,"STRONG",{});var DZr=s(cde);Vyo=r(DZr,"flaubert"),DZr.forEach(t),Xyo=r(Aye," \u2014 "),$j=n(Aye,"A",{href:!0});var GZr=s($j);zyo=r(GZr,"FlaubertForSequenceClassification"),GZr.forEach(t),Qyo=r(Aye," (FlauBERT model)"),Aye.forEach(t),Wyo=i(N),_1=n(N,"LI",{});var yye=s(_1);fde=n(yye,"STRONG",{});var OZr=s(fde);Hyo=r(OZr,"fnet"),OZr.forEach(t),Uyo=r(yye," \u2014 "),kj=n(yye,"A",{href:!0});var VZr=s(kj);Jyo=r(VZr,"FNetForSequenceClassification"),VZr.forEach(t),Yyo=r(yye," (FNet model)"),yye.forEach(t),Kyo=i(N),b1=n(N,"LI",{});var Lye=s(b1);mde=n(Lye,"STRONG",{});var XZr=s(mde);Zyo=r(XZr,"funnel"),XZr.forEach(t),eLo=r(Lye," \u2014 "),Sj=n(Lye,"A",{href:!0});var zZr=s(Sj);oLo=r(zZr,"FunnelForSequenceClassification"),zZr.forEach(t),rLo=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),tLo=i(N),v1=n(N,"LI",{});var xye=s(v1);gde=n(xye,"STRONG",{});var QZr=s(gde);aLo=r(QZr,"gpt2"),QZr.forEach(t),nLo=r(xye," \u2014 "),Rj=n(xye,"A",{href:!0});var WZr=s(Rj);sLo=r(WZr,"GPT2ForSequenceClassification"),WZr.forEach(t),lLo=r(xye," (OpenAI GPT-2 model)"),xye.forEach(t),iLo=i(N),F1=n(N,"LI",{});var $ye=s(F1);hde=n($ye,"STRONG",{});var HZr=s(hde);dLo=r(HZr,"gpt_neo"),HZr.forEach(t),cLo=r($ye," \u2014 "),Bj=n($ye,"A",{href:!0});var UZr=s(Bj);fLo=r(UZr,"GPTNeoForSequenceClassification"),UZr.forEach(t),mLo=r($ye," (GPT Neo model)"),$ye.forEach(t),gLo=i(N),T1=n(N,"LI",{});var kye=s(T1);pde=n(kye,"STRONG",{});var JZr=s(pde);hLo=r(JZr,"gptj"),JZr.forEach(t),pLo=r(kye," \u2014 "),Pj=n(kye,"A",{href:!0});var YZr=s(Pj);uLo=r(YZr,"GPTJForSequenceClassification"),YZr.forEach(t),_Lo=r(kye," (GPT-J model)"),kye.forEach(t),bLo=i(N),M1=n(N,"LI",{});var Sye=s(M1);ude=n(Sye,"STRONG",{});var KZr=s(ude);vLo=r(KZr,"ibert"),KZr.forEach(t),FLo=r(Sye," \u2014 "),Ij=n(Sye,"A",{href:!0});var ZZr=s(Ij);TLo=r(ZZr,"IBertForSequenceClassification"),ZZr.forEach(t),MLo=r(Sye," (I-BERT model)"),Sye.forEach(t),ELo=i(N),E1=n(N,"LI",{});var Rye=s(E1);_de=n(Rye,"STRONG",{});var eet=s(_de);CLo=r(eet,"layoutlm"),eet.forEach(t),wLo=r(Rye," \u2014 "),qj=n(Rye,"A",{href:!0});var oet=s(qj);ALo=r(oet,"LayoutLMForSequenceClassification"),oet.forEach(t),yLo=r(Rye," (LayoutLM model)"),Rye.forEach(t),LLo=i(N),C1=n(N,"LI",{});var Bye=s(C1);bde=n(Bye,"STRONG",{});var ret=s(bde);xLo=r(ret,"layoutlmv2"),ret.forEach(t),$Lo=r(Bye," \u2014 "),Nj=n(Bye,"A",{href:!0});var tet=s(Nj);kLo=r(tet,"LayoutLMv2ForSequenceClassification"),tet.forEach(t),SLo=r(Bye," (LayoutLMv2 model)"),Bye.forEach(t),RLo=i(N),w1=n(N,"LI",{});var Pye=s(w1);vde=n(Pye,"STRONG",{});var aet=s(vde);BLo=r(aet,"led"),aet.forEach(t),PLo=r(Pye," \u2014 "),jj=n(Pye,"A",{href:!0});var net=s(jj);ILo=r(net,"LEDForSequenceClassification"),net.forEach(t),qLo=r(Pye," (LED model)"),Pye.forEach(t),NLo=i(N),A1=n(N,"LI",{});var Iye=s(A1);Fde=n(Iye,"STRONG",{});var set=s(Fde);jLo=r(set,"longformer"),set.forEach(t),DLo=r(Iye," \u2014 "),Dj=n(Iye,"A",{href:!0});var iet=s(Dj);GLo=r(iet,"LongformerForSequenceClassification"),iet.forEach(t),OLo=r(Iye," (Longformer model)"),Iye.forEach(t),VLo=i(N),y1=n(N,"LI",{});var qye=s(y1);Tde=n(qye,"STRONG",{});var det=s(Tde);XLo=r(det,"mbart"),det.forEach(t),zLo=r(qye," \u2014 "),Gj=n(qye,"A",{href:!0});var cet=s(Gj);QLo=r(cet,"MBartForSequenceClassification"),cet.forEach(t),WLo=r(qye," (mBART model)"),qye.forEach(t),HLo=i(N),L1=n(N,"LI",{});var Nye=s(L1);Mde=n(Nye,"STRONG",{});var fet=s(Mde);ULo=r(fet,"megatron-bert"),fet.forEach(t),JLo=r(Nye," \u2014 "),Oj=n(Nye,"A",{href:!0});var met=s(Oj);YLo=r(met,"MegatronBertForSequenceClassification"),met.forEach(t),KLo=r(Nye," (MegatronBert model)"),Nye.forEach(t),ZLo=i(N),x1=n(N,"LI",{});var jye=s(x1);Ede=n(jye,"STRONG",{});var get=s(Ede);e8o=r(get,"mobilebert"),get.forEach(t),o8o=r(jye," \u2014 "),Vj=n(jye,"A",{href:!0});var het=s(Vj);r8o=r(het,"MobileBertForSequenceClassification"),het.forEach(t),t8o=r(jye," (MobileBERT model)"),jye.forEach(t),a8o=i(N),$1=n(N,"LI",{});var Dye=s($1);Cde=n(Dye,"STRONG",{});var pet=s(Cde);n8o=r(pet,"mpnet"),pet.forEach(t),s8o=r(Dye," \u2014 "),Xj=n(Dye,"A",{href:!0});var uet=s(Xj);l8o=r(uet,"MPNetForSequenceClassification"),uet.forEach(t),i8o=r(Dye," (MPNet model)"),Dye.forEach(t),d8o=i(N),k1=n(N,"LI",{});var Gye=s(k1);wde=n(Gye,"STRONG",{});var _et=s(wde);c8o=r(_et,"nystromformer"),_et.forEach(t),f8o=r(Gye," \u2014 "),zj=n(Gye,"A",{href:!0});var bet=s(zj);m8o=r(bet,"NystromformerForSequenceClassification"),bet.forEach(t),g8o=r(Gye," (Nystromformer model)"),Gye.forEach(t),h8o=i(N),S1=n(N,"LI",{});var Oye=s(S1);Ade=n(Oye,"STRONG",{});var vet=s(Ade);p8o=r(vet,"openai-gpt"),vet.forEach(t),u8o=r(Oye," \u2014 "),Qj=n(Oye,"A",{href:!0});var Fet=s(Qj);_8o=r(Fet,"OpenAIGPTForSequenceClassification"),Fet.forEach(t),b8o=r(Oye," (OpenAI GPT model)"),Oye.forEach(t),v8o=i(N),R1=n(N,"LI",{});var Vye=s(R1);yde=n(Vye,"STRONG",{});var Tet=s(yde);F8o=r(Tet,"perceiver"),Tet.forEach(t),T8o=r(Vye," \u2014 "),Wj=n(Vye,"A",{href:!0});var Met=s(Wj);M8o=r(Met,"PerceiverForSequenceClassification"),Met.forEach(t),E8o=r(Vye," (Perceiver model)"),Vye.forEach(t),C8o=i(N),B1=n(N,"LI",{});var Xye=s(B1);Lde=n(Xye,"STRONG",{});var Eet=s(Lde);w8o=r(Eet,"plbart"),Eet.forEach(t),A8o=r(Xye," \u2014 "),Hj=n(Xye,"A",{href:!0});var Cet=s(Hj);y8o=r(Cet,"PLBartForSequenceClassification"),Cet.forEach(t),L8o=r(Xye," (PLBart model)"),Xye.forEach(t),x8o=i(N),P1=n(N,"LI",{});var zye=s(P1);xde=n(zye,"STRONG",{});var wet=s(xde);$8o=r(wet,"qdqbert"),wet.forEach(t),k8o=r(zye," \u2014 "),Uj=n(zye,"A",{href:!0});var Aet=s(Uj);S8o=r(Aet,"QDQBertForSequenceClassification"),Aet.forEach(t),R8o=r(zye," (QDQBert model)"),zye.forEach(t),B8o=i(N),I1=n(N,"LI",{});var Qye=s(I1);$de=n(Qye,"STRONG",{});var yet=s($de);P8o=r(yet,"reformer"),yet.forEach(t),I8o=r(Qye," \u2014 "),Jj=n(Qye,"A",{href:!0});var Let=s(Jj);q8o=r(Let,"ReformerForSequenceClassification"),Let.forEach(t),N8o=r(Qye," (Reformer model)"),Qye.forEach(t),j8o=i(N),q1=n(N,"LI",{});var Wye=s(q1);kde=n(Wye,"STRONG",{});var xet=s(kde);D8o=r(xet,"rembert"),xet.forEach(t),G8o=r(Wye," \u2014 "),Yj=n(Wye,"A",{href:!0});var $et=s(Yj);O8o=r($et,"RemBertForSequenceClassification"),$et.forEach(t),V8o=r(Wye," (RemBERT model)"),Wye.forEach(t),X8o=i(N),N1=n(N,"LI",{});var Hye=s(N1);Sde=n(Hye,"STRONG",{});var ket=s(Sde);z8o=r(ket,"roberta"),ket.forEach(t),Q8o=r(Hye," \u2014 "),Kj=n(Hye,"A",{href:!0});var Set=s(Kj);W8o=r(Set,"RobertaForSequenceClassification"),Set.forEach(t),H8o=r(Hye," (RoBERTa model)"),Hye.forEach(t),U8o=i(N),j1=n(N,"LI",{});var Uye=s(j1);Rde=n(Uye,"STRONG",{});var Ret=s(Rde);J8o=r(Ret,"roformer"),Ret.forEach(t),Y8o=r(Uye," \u2014 "),Zj=n(Uye,"A",{href:!0});var Bet=s(Zj);K8o=r(Bet,"RoFormerForSequenceClassification"),Bet.forEach(t),Z8o=r(Uye," (RoFormer model)"),Uye.forEach(t),e7o=i(N),D1=n(N,"LI",{});var Jye=s(D1);Bde=n(Jye,"STRONG",{});var Pet=s(Bde);o7o=r(Pet,"squeezebert"),Pet.forEach(t),r7o=r(Jye," \u2014 "),eD=n(Jye,"A",{href:!0});var Iet=s(eD);t7o=r(Iet,"SqueezeBertForSequenceClassification"),Iet.forEach(t),a7o=r(Jye," (SqueezeBERT model)"),Jye.forEach(t),n7o=i(N),G1=n(N,"LI",{});var Yye=s(G1);Pde=n(Yye,"STRONG",{});var qet=s(Pde);s7o=r(qet,"tapas"),qet.forEach(t),l7o=r(Yye," \u2014 "),oD=n(Yye,"A",{href:!0});var Net=s(oD);i7o=r(Net,"TapasForSequenceClassification"),Net.forEach(t),d7o=r(Yye," (TAPAS model)"),Yye.forEach(t),c7o=i(N),O1=n(N,"LI",{});var Kye=s(O1);Ide=n(Kye,"STRONG",{});var jet=s(Ide);f7o=r(jet,"tapex"),jet.forEach(t),m7o=r(Kye," \u2014 "),rD=n(Kye,"A",{href:!0});var Det=s(rD);g7o=r(Det,"BartForSequenceClassification"),Det.forEach(t),h7o=r(Kye," (TAPEX model)"),Kye.forEach(t),p7o=i(N),V1=n(N,"LI",{});var Zye=s(V1);qde=n(Zye,"STRONG",{});var Get=s(qde);u7o=r(Get,"transfo-xl"),Get.forEach(t),_7o=r(Zye," \u2014 "),tD=n(Zye,"A",{href:!0});var Oet=s(tD);b7o=r(Oet,"TransfoXLForSequenceClassification"),Oet.forEach(t),v7o=r(Zye," (Transformer-XL model)"),Zye.forEach(t),F7o=i(N),X1=n(N,"LI",{});var eLe=s(X1);Nde=n(eLe,"STRONG",{});var Vet=s(Nde);T7o=r(Vet,"xlm"),Vet.forEach(t),M7o=r(eLe," \u2014 "),aD=n(eLe,"A",{href:!0});var Xet=s(aD);E7o=r(Xet,"XLMForSequenceClassification"),Xet.forEach(t),C7o=r(eLe," (XLM model)"),eLe.forEach(t),w7o=i(N),z1=n(N,"LI",{});var oLe=s(z1);jde=n(oLe,"STRONG",{});var zet=s(jde);A7o=r(zet,"xlm-roberta"),zet.forEach(t),y7o=r(oLe," \u2014 "),nD=n(oLe,"A",{href:!0});var Qet=s(nD);L7o=r(Qet,"XLMRobertaForSequenceClassification"),Qet.forEach(t),x7o=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),$7o=i(N),Q1=n(N,"LI",{});var rLe=s(Q1);Dde=n(rLe,"STRONG",{});var Wet=s(Dde);k7o=r(Wet,"xlm-roberta-xl"),Wet.forEach(t),S7o=r(rLe," \u2014 "),sD=n(rLe,"A",{href:!0});var Het=s(sD);R7o=r(Het,"XLMRobertaXLForSequenceClassification"),Het.forEach(t),B7o=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),P7o=i(N),W1=n(N,"LI",{});var tLe=s(W1);Gde=n(tLe,"STRONG",{});var Uet=s(Gde);I7o=r(Uet,"xlnet"),Uet.forEach(t),q7o=r(tLe," \u2014 "),lD=n(tLe,"A",{href:!0});var Jet=s(lD);N7o=r(Jet,"XLNetForSequenceClassification"),Jet.forEach(t),j7o=r(tLe," (XLNet model)"),tLe.forEach(t),D7o=i(N),H1=n(N,"LI",{});var aLe=s(H1);Ode=n(aLe,"STRONG",{});var Yet=s(Ode);G7o=r(Yet,"yoso"),Yet.forEach(t),O7o=r(aLe," \u2014 "),iD=n(aLe,"A",{href:!0});var Ket=s(iD);V7o=r(Ket,"YosoForSequenceClassification"),Ket.forEach(t),X7o=r(aLe," (YOSO model)"),aLe.forEach(t),N.forEach(t),z7o=i(ea),U1=n(ea,"P",{});var nLe=s(U1);Q7o=r(nLe,"The model is set in evaluation mode by default using "),Vde=n(nLe,"CODE",{});var Zet=s(Vde);W7o=r(Zet,"model.eval()"),Zet.forEach(t),H7o=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(nLe,"CODE",{});var eot=s(Xde);U7o=r(eot,"model.train()"),eot.forEach(t),nLe.forEach(t),J7o=i(ea),T(J1.$$.fragment,ea),ea.forEach(t),js.forEach(t),hBe=i(f),Ri=n(f,"H2",{class:!0});var uIe=s(Ri);Y1=n(uIe,"A",{id:!0,class:!0,href:!0});var oot=s(Y1);zde=n(oot,"SPAN",{});var rot=s(zde);T(vy.$$.fragment,rot),rot.forEach(t),oot.forEach(t),Y7o=i(uIe),Qde=n(uIe,"SPAN",{});var tot=s(Qde);K7o=r(tot,"AutoModelForMultipleChoice"),tot.forEach(t),uIe.forEach(t),pBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(Fy.$$.fragment,Ds),Z7o=i(Ds),Bi=n(Ds,"P",{});var gY=s(Bi);exo=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dD=n(gY,"A",{href:!0});var aot=s(dD);oxo=r(aot,"from_pretrained()"),aot.forEach(t),rxo=r(gY," class method or the "),cD=n(gY,"A",{href:!0});var not=s(cD);txo=r(not,"from_config()"),not.forEach(t),axo=r(gY,` class
method.`),gY.forEach(t),nxo=i(Ds),Ty=n(Ds,"P",{});var _Ie=s(Ty);sxo=r(_Ie,"This class cannot be instantiated directly using "),Wde=n(_Ie,"CODE",{});var sot=s(Wde);lxo=r(sot,"__init__()"),sot.forEach(t),ixo=r(_Ie," (throws an error)."),_Ie.forEach(t),dxo=i(Ds),at=n(Ds,"DIV",{class:!0});var B3=s(at);T(My.$$.fragment,B3),cxo=i(B3),Hde=n(B3,"P",{});var lot=s(Hde);fxo=r(lot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),lot.forEach(t),mxo=i(B3),Pi=n(B3,"P",{});var hY=s(Pi);gxo=r(hY,`Note:
Loading a model from its configuration file does `),Ude=n(hY,"STRONG",{});var iot=s(Ude);hxo=r(iot,"not"),iot.forEach(t),pxo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fD=n(hY,"A",{href:!0});var dot=s(fD);uxo=r(dot,"from_pretrained()"),dot.forEach(t),_xo=r(hY," to load the model weights."),hY.forEach(t),bxo=i(B3),T(K1.$$.fragment,B3),B3.forEach(t),vxo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(Ey.$$.fragment,oa),Fxo=i(oa),Jde=n(oa,"P",{});var cot=s(Jde);Txo=r(cot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),cot.forEach(t),Mxo=i(oa),La=n(oa,"P",{});var P3=s(La);Exo=r(P3,"The model class to instantiate is selected based on the "),Yde=n(P3,"CODE",{});var fot=s(Yde);Cxo=r(fot,"model_type"),fot.forEach(t),wxo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Kde=n(P3,"CODE",{});var mot=s(Kde);Axo=r(mot,"pretrained_model_name_or_path"),mot.forEach(t),yxo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=n(P3,"CODE",{});var got=s(Zde);Lxo=r(got,"pretrained_model_name_or_path"),got.forEach(t),xxo=r(P3,":"),P3.forEach(t),$xo=i(oa),Y=n(oa,"UL",{});var K=s(Y);Z1=n(K,"LI",{});var sLe=s(Z1);ece=n(sLe,"STRONG",{});var hot=s(ece);kxo=r(hot,"albert"),hot.forEach(t),Sxo=r(sLe," \u2014 "),mD=n(sLe,"A",{href:!0});var pot=s(mD);Rxo=r(pot,"AlbertForMultipleChoice"),pot.forEach(t),Bxo=r(sLe," (ALBERT model)"),sLe.forEach(t),Pxo=i(K),eb=n(K,"LI",{});var lLe=s(eb);oce=n(lLe,"STRONG",{});var uot=s(oce);Ixo=r(uot,"bert"),uot.forEach(t),qxo=r(lLe," \u2014 "),gD=n(lLe,"A",{href:!0});var _ot=s(gD);Nxo=r(_ot,"BertForMultipleChoice"),_ot.forEach(t),jxo=r(lLe," (BERT model)"),lLe.forEach(t),Dxo=i(K),ob=n(K,"LI",{});var iLe=s(ob);rce=n(iLe,"STRONG",{});var bot=s(rce);Gxo=r(bot,"big_bird"),bot.forEach(t),Oxo=r(iLe," \u2014 "),hD=n(iLe,"A",{href:!0});var vot=s(hD);Vxo=r(vot,"BigBirdForMultipleChoice"),vot.forEach(t),Xxo=r(iLe," (BigBird model)"),iLe.forEach(t),zxo=i(K),rb=n(K,"LI",{});var dLe=s(rb);tce=n(dLe,"STRONG",{});var Fot=s(tce);Qxo=r(Fot,"camembert"),Fot.forEach(t),Wxo=r(dLe," \u2014 "),pD=n(dLe,"A",{href:!0});var Tot=s(pD);Hxo=r(Tot,"CamembertForMultipleChoice"),Tot.forEach(t),Uxo=r(dLe," (CamemBERT model)"),dLe.forEach(t),Jxo=i(K),tb=n(K,"LI",{});var cLe=s(tb);ace=n(cLe,"STRONG",{});var Mot=s(ace);Yxo=r(Mot,"canine"),Mot.forEach(t),Kxo=r(cLe," \u2014 "),uD=n(cLe,"A",{href:!0});var Eot=s(uD);Zxo=r(Eot,"CanineForMultipleChoice"),Eot.forEach(t),e9o=r(cLe," (Canine model)"),cLe.forEach(t),o9o=i(K),ab=n(K,"LI",{});var fLe=s(ab);nce=n(fLe,"STRONG",{});var Cot=s(nce);r9o=r(Cot,"convbert"),Cot.forEach(t),t9o=r(fLe," \u2014 "),_D=n(fLe,"A",{href:!0});var wot=s(_D);a9o=r(wot,"ConvBertForMultipleChoice"),wot.forEach(t),n9o=r(fLe," (ConvBERT model)"),fLe.forEach(t),s9o=i(K),nb=n(K,"LI",{});var mLe=s(nb);sce=n(mLe,"STRONG",{});var Aot=s(sce);l9o=r(Aot,"data2vec-text"),Aot.forEach(t),i9o=r(mLe," \u2014 "),bD=n(mLe,"A",{href:!0});var yot=s(bD);d9o=r(yot,"Data2VecTextForMultipleChoice"),yot.forEach(t),c9o=r(mLe," (Data2VecText model)"),mLe.forEach(t),f9o=i(K),sb=n(K,"LI",{});var gLe=s(sb);lce=n(gLe,"STRONG",{});var Lot=s(lce);m9o=r(Lot,"distilbert"),Lot.forEach(t),g9o=r(gLe," \u2014 "),vD=n(gLe,"A",{href:!0});var xot=s(vD);h9o=r(xot,"DistilBertForMultipleChoice"),xot.forEach(t),p9o=r(gLe," (DistilBERT model)"),gLe.forEach(t),u9o=i(K),lb=n(K,"LI",{});var hLe=s(lb);ice=n(hLe,"STRONG",{});var $ot=s(ice);_9o=r($ot,"electra"),$ot.forEach(t),b9o=r(hLe," \u2014 "),FD=n(hLe,"A",{href:!0});var kot=s(FD);v9o=r(kot,"ElectraForMultipleChoice"),kot.forEach(t),F9o=r(hLe," (ELECTRA model)"),hLe.forEach(t),T9o=i(K),ib=n(K,"LI",{});var pLe=s(ib);dce=n(pLe,"STRONG",{});var Sot=s(dce);M9o=r(Sot,"flaubert"),Sot.forEach(t),E9o=r(pLe," \u2014 "),TD=n(pLe,"A",{href:!0});var Rot=s(TD);C9o=r(Rot,"FlaubertForMultipleChoice"),Rot.forEach(t),w9o=r(pLe," (FlauBERT model)"),pLe.forEach(t),A9o=i(K),db=n(K,"LI",{});var uLe=s(db);cce=n(uLe,"STRONG",{});var Bot=s(cce);y9o=r(Bot,"fnet"),Bot.forEach(t),L9o=r(uLe," \u2014 "),MD=n(uLe,"A",{href:!0});var Pot=s(MD);x9o=r(Pot,"FNetForMultipleChoice"),Pot.forEach(t),$9o=r(uLe," (FNet model)"),uLe.forEach(t),k9o=i(K),cb=n(K,"LI",{});var _Le=s(cb);fce=n(_Le,"STRONG",{});var Iot=s(fce);S9o=r(Iot,"funnel"),Iot.forEach(t),R9o=r(_Le," \u2014 "),ED=n(_Le,"A",{href:!0});var qot=s(ED);B9o=r(qot,"FunnelForMultipleChoice"),qot.forEach(t),P9o=r(_Le," (Funnel Transformer model)"),_Le.forEach(t),I9o=i(K),fb=n(K,"LI",{});var bLe=s(fb);mce=n(bLe,"STRONG",{});var Not=s(mce);q9o=r(Not,"ibert"),Not.forEach(t),N9o=r(bLe," \u2014 "),CD=n(bLe,"A",{href:!0});var jot=s(CD);j9o=r(jot,"IBertForMultipleChoice"),jot.forEach(t),D9o=r(bLe," (I-BERT model)"),bLe.forEach(t),G9o=i(K),mb=n(K,"LI",{});var vLe=s(mb);gce=n(vLe,"STRONG",{});var Dot=s(gce);O9o=r(Dot,"longformer"),Dot.forEach(t),V9o=r(vLe," \u2014 "),wD=n(vLe,"A",{href:!0});var Got=s(wD);X9o=r(Got,"LongformerForMultipleChoice"),Got.forEach(t),z9o=r(vLe," (Longformer model)"),vLe.forEach(t),Q9o=i(K),gb=n(K,"LI",{});var FLe=s(gb);hce=n(FLe,"STRONG",{});var Oot=s(hce);W9o=r(Oot,"megatron-bert"),Oot.forEach(t),H9o=r(FLe," \u2014 "),AD=n(FLe,"A",{href:!0});var Vot=s(AD);U9o=r(Vot,"MegatronBertForMultipleChoice"),Vot.forEach(t),J9o=r(FLe," (MegatronBert model)"),FLe.forEach(t),Y9o=i(K),hb=n(K,"LI",{});var TLe=s(hb);pce=n(TLe,"STRONG",{});var Xot=s(pce);K9o=r(Xot,"mobilebert"),Xot.forEach(t),Z9o=r(TLe," \u2014 "),yD=n(TLe,"A",{href:!0});var zot=s(yD);e$o=r(zot,"MobileBertForMultipleChoice"),zot.forEach(t),o$o=r(TLe," (MobileBERT model)"),TLe.forEach(t),r$o=i(K),pb=n(K,"LI",{});var MLe=s(pb);uce=n(MLe,"STRONG",{});var Qot=s(uce);t$o=r(Qot,"mpnet"),Qot.forEach(t),a$o=r(MLe," \u2014 "),LD=n(MLe,"A",{href:!0});var Wot=s(LD);n$o=r(Wot,"MPNetForMultipleChoice"),Wot.forEach(t),s$o=r(MLe," (MPNet model)"),MLe.forEach(t),l$o=i(K),ub=n(K,"LI",{});var ELe=s(ub);_ce=n(ELe,"STRONG",{});var Hot=s(_ce);i$o=r(Hot,"nystromformer"),Hot.forEach(t),d$o=r(ELe," \u2014 "),xD=n(ELe,"A",{href:!0});var Uot=s(xD);c$o=r(Uot,"NystromformerForMultipleChoice"),Uot.forEach(t),f$o=r(ELe," (Nystromformer model)"),ELe.forEach(t),m$o=i(K),_b=n(K,"LI",{});var CLe=s(_b);bce=n(CLe,"STRONG",{});var Jot=s(bce);g$o=r(Jot,"qdqbert"),Jot.forEach(t),h$o=r(CLe," \u2014 "),$D=n(CLe,"A",{href:!0});var Yot=s($D);p$o=r(Yot,"QDQBertForMultipleChoice"),Yot.forEach(t),u$o=r(CLe," (QDQBert model)"),CLe.forEach(t),_$o=i(K),bb=n(K,"LI",{});var wLe=s(bb);vce=n(wLe,"STRONG",{});var Kot=s(vce);b$o=r(Kot,"rembert"),Kot.forEach(t),v$o=r(wLe," \u2014 "),kD=n(wLe,"A",{href:!0});var Zot=s(kD);F$o=r(Zot,"RemBertForMultipleChoice"),Zot.forEach(t),T$o=r(wLe," (RemBERT model)"),wLe.forEach(t),M$o=i(K),vb=n(K,"LI",{});var ALe=s(vb);Fce=n(ALe,"STRONG",{});var ert=s(Fce);E$o=r(ert,"roberta"),ert.forEach(t),C$o=r(ALe," \u2014 "),SD=n(ALe,"A",{href:!0});var ort=s(SD);w$o=r(ort,"RobertaForMultipleChoice"),ort.forEach(t),A$o=r(ALe," (RoBERTa model)"),ALe.forEach(t),y$o=i(K),Fb=n(K,"LI",{});var yLe=s(Fb);Tce=n(yLe,"STRONG",{});var rrt=s(Tce);L$o=r(rrt,"roformer"),rrt.forEach(t),x$o=r(yLe," \u2014 "),RD=n(yLe,"A",{href:!0});var trt=s(RD);$$o=r(trt,"RoFormerForMultipleChoice"),trt.forEach(t),k$o=r(yLe," (RoFormer model)"),yLe.forEach(t),S$o=i(K),Tb=n(K,"LI",{});var LLe=s(Tb);Mce=n(LLe,"STRONG",{});var art=s(Mce);R$o=r(art,"squeezebert"),art.forEach(t),B$o=r(LLe," \u2014 "),BD=n(LLe,"A",{href:!0});var nrt=s(BD);P$o=r(nrt,"SqueezeBertForMultipleChoice"),nrt.forEach(t),I$o=r(LLe," (SqueezeBERT model)"),LLe.forEach(t),q$o=i(K),Mb=n(K,"LI",{});var xLe=s(Mb);Ece=n(xLe,"STRONG",{});var srt=s(Ece);N$o=r(srt,"xlm"),srt.forEach(t),j$o=r(xLe," \u2014 "),PD=n(xLe,"A",{href:!0});var lrt=s(PD);D$o=r(lrt,"XLMForMultipleChoice"),lrt.forEach(t),G$o=r(xLe," (XLM model)"),xLe.forEach(t),O$o=i(K),Eb=n(K,"LI",{});var $Le=s(Eb);Cce=n($Le,"STRONG",{});var irt=s(Cce);V$o=r(irt,"xlm-roberta"),irt.forEach(t),X$o=r($Le," \u2014 "),ID=n($Le,"A",{href:!0});var drt=s(ID);z$o=r(drt,"XLMRobertaForMultipleChoice"),drt.forEach(t),Q$o=r($Le," (XLM-RoBERTa model)"),$Le.forEach(t),W$o=i(K),Cb=n(K,"LI",{});var kLe=s(Cb);wce=n(kLe,"STRONG",{});var crt=s(wce);H$o=r(crt,"xlm-roberta-xl"),crt.forEach(t),U$o=r(kLe," \u2014 "),qD=n(kLe,"A",{href:!0});var frt=s(qD);J$o=r(frt,"XLMRobertaXLForMultipleChoice"),frt.forEach(t),Y$o=r(kLe," (XLM-RoBERTa-XL model)"),kLe.forEach(t),K$o=i(K),wb=n(K,"LI",{});var SLe=s(wb);Ace=n(SLe,"STRONG",{});var mrt=s(Ace);Z$o=r(mrt,"xlnet"),mrt.forEach(t),eko=r(SLe," \u2014 "),ND=n(SLe,"A",{href:!0});var grt=s(ND);oko=r(grt,"XLNetForMultipleChoice"),grt.forEach(t),rko=r(SLe," (XLNet model)"),SLe.forEach(t),tko=i(K),Ab=n(K,"LI",{});var RLe=s(Ab);yce=n(RLe,"STRONG",{});var hrt=s(yce);ako=r(hrt,"yoso"),hrt.forEach(t),nko=r(RLe," \u2014 "),jD=n(RLe,"A",{href:!0});var prt=s(jD);sko=r(prt,"YosoForMultipleChoice"),prt.forEach(t),lko=r(RLe," (YOSO model)"),RLe.forEach(t),K.forEach(t),iko=i(oa),yb=n(oa,"P",{});var BLe=s(yb);dko=r(BLe,"The model is set in evaluation mode by default using "),Lce=n(BLe,"CODE",{});var urt=s(Lce);cko=r(urt,"model.eval()"),urt.forEach(t),fko=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(BLe,"CODE",{});var _rt=s(xce);mko=r(_rt,"model.train()"),_rt.forEach(t),BLe.forEach(t),gko=i(oa),T(Lb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),uBe=i(f),Ii=n(f,"H2",{class:!0});var bIe=s(Ii);xb=n(bIe,"A",{id:!0,class:!0,href:!0});var brt=s(xb);$ce=n(brt,"SPAN",{});var vrt=s($ce);T(Cy.$$.fragment,vrt),vrt.forEach(t),brt.forEach(t),hko=i(bIe),kce=n(bIe,"SPAN",{});var Frt=s(kce);pko=r(Frt,"AutoModelForNextSentencePrediction"),Frt.forEach(t),bIe.forEach(t),_Be=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(wy.$$.fragment,Gs),uko=i(Gs),qi=n(Gs,"P",{});var pY=s(qi);_ko=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DD=n(pY,"A",{href:!0});var Trt=s(DD);bko=r(Trt,"from_pretrained()"),Trt.forEach(t),vko=r(pY," class method or the "),GD=n(pY,"A",{href:!0});var Mrt=s(GD);Fko=r(Mrt,"from_config()"),Mrt.forEach(t),Tko=r(pY,` class
method.`),pY.forEach(t),Mko=i(Gs),Ay=n(Gs,"P",{});var vIe=s(Ay);Eko=r(vIe,"This class cannot be instantiated directly using "),Sce=n(vIe,"CODE",{});var Ert=s(Sce);Cko=r(Ert,"__init__()"),Ert.forEach(t),wko=r(vIe," (throws an error)."),vIe.forEach(t),Ako=i(Gs),nt=n(Gs,"DIV",{class:!0});var I3=s(nt);T(yy.$$.fragment,I3),yko=i(I3),Rce=n(I3,"P",{});var Crt=s(Rce);Lko=r(Crt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Crt.forEach(t),xko=i(I3),Ni=n(I3,"P",{});var uY=s(Ni);$ko=r(uY,`Note:
Loading a model from its configuration file does `),Bce=n(uY,"STRONG",{});var wrt=s(Bce);kko=r(wrt,"not"),wrt.forEach(t),Sko=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(uY,"A",{href:!0});var Art=s(OD);Rko=r(Art,"from_pretrained()"),Art.forEach(t),Bko=r(uY," to load the model weights."),uY.forEach(t),Pko=i(I3),T($b.$$.fragment,I3),I3.forEach(t),Iko=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(Ly.$$.fragment,ra),qko=i(ra),Pce=n(ra,"P",{});var yrt=s(Pce);Nko=r(yrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),yrt.forEach(t),jko=i(ra),xa=n(ra,"P",{});var q3=s(xa);Dko=r(q3,"The model class to instantiate is selected based on the "),Ice=n(q3,"CODE",{});var Lrt=s(Ice);Gko=r(Lrt,"model_type"),Lrt.forEach(t),Oko=r(q3,` property of the config object (either
passed as an argument or loaded from `),qce=n(q3,"CODE",{});var xrt=s(qce);Vko=r(xrt,"pretrained_model_name_or_path"),xrt.forEach(t),Xko=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nce=n(q3,"CODE",{});var $rt=s(Nce);zko=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),Qko=r(q3,":"),q3.forEach(t),Wko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);kb=n(Os,"LI",{});var PLe=s(kb);jce=n(PLe,"STRONG",{});var krt=s(jce);Hko=r(krt,"bert"),krt.forEach(t),Uko=r(PLe," \u2014 "),VD=n(PLe,"A",{href:!0});var Srt=s(VD);Jko=r(Srt,"BertForNextSentencePrediction"),Srt.forEach(t),Yko=r(PLe," (BERT model)"),PLe.forEach(t),Kko=i(Os),Sb=n(Os,"LI",{});var ILe=s(Sb);Dce=n(ILe,"STRONG",{});var Rrt=s(Dce);Zko=r(Rrt,"fnet"),Rrt.forEach(t),eSo=r(ILe," \u2014 "),XD=n(ILe,"A",{href:!0});var Brt=s(XD);oSo=r(Brt,"FNetForNextSentencePrediction"),Brt.forEach(t),rSo=r(ILe," (FNet model)"),ILe.forEach(t),tSo=i(Os),Rb=n(Os,"LI",{});var qLe=s(Rb);Gce=n(qLe,"STRONG",{});var Prt=s(Gce);aSo=r(Prt,"megatron-bert"),Prt.forEach(t),nSo=r(qLe," \u2014 "),zD=n(qLe,"A",{href:!0});var Irt=s(zD);sSo=r(Irt,"MegatronBertForNextSentencePrediction"),Irt.forEach(t),lSo=r(qLe," (MegatronBert model)"),qLe.forEach(t),iSo=i(Os),Bb=n(Os,"LI",{});var NLe=s(Bb);Oce=n(NLe,"STRONG",{});var qrt=s(Oce);dSo=r(qrt,"mobilebert"),qrt.forEach(t),cSo=r(NLe," \u2014 "),QD=n(NLe,"A",{href:!0});var Nrt=s(QD);fSo=r(Nrt,"MobileBertForNextSentencePrediction"),Nrt.forEach(t),mSo=r(NLe," (MobileBERT model)"),NLe.forEach(t),gSo=i(Os),Pb=n(Os,"LI",{});var jLe=s(Pb);Vce=n(jLe,"STRONG",{});var jrt=s(Vce);hSo=r(jrt,"qdqbert"),jrt.forEach(t),pSo=r(jLe," \u2014 "),WD=n(jLe,"A",{href:!0});var Drt=s(WD);uSo=r(Drt,"QDQBertForNextSentencePrediction"),Drt.forEach(t),_So=r(jLe," (QDQBert model)"),jLe.forEach(t),Os.forEach(t),bSo=i(ra),Ib=n(ra,"P",{});var DLe=s(Ib);vSo=r(DLe,"The model is set in evaluation mode by default using "),Xce=n(DLe,"CODE",{});var Grt=s(Xce);FSo=r(Grt,"model.eval()"),Grt.forEach(t),TSo=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zce=n(DLe,"CODE",{});var Ort=s(zce);MSo=r(Ort,"model.train()"),Ort.forEach(t),DLe.forEach(t),ESo=i(ra),T(qb.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),bBe=i(f),ji=n(f,"H2",{class:!0});var FIe=s(ji);Nb=n(FIe,"A",{id:!0,class:!0,href:!0});var Vrt=s(Nb);Qce=n(Vrt,"SPAN",{});var Xrt=s(Qce);T(xy.$$.fragment,Xrt),Xrt.forEach(t),Vrt.forEach(t),CSo=i(FIe),Wce=n(FIe,"SPAN",{});var zrt=s(Wce);wSo=r(zrt,"AutoModelForTokenClassification"),zrt.forEach(t),FIe.forEach(t),vBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T($y.$$.fragment,Vs),ASo=i(Vs),Di=n(Vs,"P",{});var _Y=s(Di);ySo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),HD=n(_Y,"A",{href:!0});var Qrt=s(HD);LSo=r(Qrt,"from_pretrained()"),Qrt.forEach(t),xSo=r(_Y," class method or the "),UD=n(_Y,"A",{href:!0});var Wrt=s(UD);$So=r(Wrt,"from_config()"),Wrt.forEach(t),kSo=r(_Y,` class
method.`),_Y.forEach(t),SSo=i(Vs),ky=n(Vs,"P",{});var TIe=s(ky);RSo=r(TIe,"This class cannot be instantiated directly using "),Hce=n(TIe,"CODE",{});var Hrt=s(Hce);BSo=r(Hrt,"__init__()"),Hrt.forEach(t),PSo=r(TIe," (throws an error)."),TIe.forEach(t),ISo=i(Vs),st=n(Vs,"DIV",{class:!0});var N3=s(st);T(Sy.$$.fragment,N3),qSo=i(N3),Uce=n(N3,"P",{});var Urt=s(Uce);NSo=r(Urt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Urt.forEach(t),jSo=i(N3),Gi=n(N3,"P",{});var bY=s(Gi);DSo=r(bY,`Note:
Loading a model from its configuration file does `),Jce=n(bY,"STRONG",{});var Jrt=s(Jce);GSo=r(Jrt,"not"),Jrt.forEach(t),OSo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JD=n(bY,"A",{href:!0});var Yrt=s(JD);VSo=r(Yrt,"from_pretrained()"),Yrt.forEach(t),XSo=r(bY," to load the model weights."),bY.forEach(t),zSo=i(N3),T(jb.$$.fragment,N3),N3.forEach(t),QSo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(Ry.$$.fragment,ta),WSo=i(ta),Yce=n(ta,"P",{});var Krt=s(Yce);HSo=r(Krt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Krt.forEach(t),USo=i(ta),$a=n(ta,"P",{});var j3=s($a);JSo=r(j3,"The model class to instantiate is selected based on the "),Kce=n(j3,"CODE",{});var Zrt=s(Kce);YSo=r(Zrt,"model_type"),Zrt.forEach(t),KSo=r(j3,` property of the config object (either
passed as an argument or loaded from `),Zce=n(j3,"CODE",{});var ett=s(Zce);ZSo=r(ett,"pretrained_model_name_or_path"),ett.forEach(t),eRo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),efe=n(j3,"CODE",{});var ott=s(efe);oRo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),rRo=r(j3,":"),j3.forEach(t),tRo=i(ta),U=n(ta,"UL",{});var J=s(U);Db=n(J,"LI",{});var GLe=s(Db);ofe=n(GLe,"STRONG",{});var rtt=s(ofe);aRo=r(rtt,"albert"),rtt.forEach(t),nRo=r(GLe," \u2014 "),YD=n(GLe,"A",{href:!0});var ttt=s(YD);sRo=r(ttt,"AlbertForTokenClassification"),ttt.forEach(t),lRo=r(GLe," (ALBERT model)"),GLe.forEach(t),iRo=i(J),Gb=n(J,"LI",{});var OLe=s(Gb);rfe=n(OLe,"STRONG",{});var att=s(rfe);dRo=r(att,"bert"),att.forEach(t),cRo=r(OLe," \u2014 "),KD=n(OLe,"A",{href:!0});var ntt=s(KD);fRo=r(ntt,"BertForTokenClassification"),ntt.forEach(t),mRo=r(OLe," (BERT model)"),OLe.forEach(t),gRo=i(J),Ob=n(J,"LI",{});var VLe=s(Ob);tfe=n(VLe,"STRONG",{});var stt=s(tfe);hRo=r(stt,"big_bird"),stt.forEach(t),pRo=r(VLe," \u2014 "),ZD=n(VLe,"A",{href:!0});var ltt=s(ZD);uRo=r(ltt,"BigBirdForTokenClassification"),ltt.forEach(t),_Ro=r(VLe," (BigBird model)"),VLe.forEach(t),bRo=i(J),Vb=n(J,"LI",{});var XLe=s(Vb);afe=n(XLe,"STRONG",{});var itt=s(afe);vRo=r(itt,"camembert"),itt.forEach(t),FRo=r(XLe," \u2014 "),eG=n(XLe,"A",{href:!0});var dtt=s(eG);TRo=r(dtt,"CamembertForTokenClassification"),dtt.forEach(t),MRo=r(XLe," (CamemBERT model)"),XLe.forEach(t),ERo=i(J),Xb=n(J,"LI",{});var zLe=s(Xb);nfe=n(zLe,"STRONG",{});var ctt=s(nfe);CRo=r(ctt,"canine"),ctt.forEach(t),wRo=r(zLe," \u2014 "),oG=n(zLe,"A",{href:!0});var ftt=s(oG);ARo=r(ftt,"CanineForTokenClassification"),ftt.forEach(t),yRo=r(zLe," (Canine model)"),zLe.forEach(t),LRo=i(J),zb=n(J,"LI",{});var QLe=s(zb);sfe=n(QLe,"STRONG",{});var mtt=s(sfe);xRo=r(mtt,"convbert"),mtt.forEach(t),$Ro=r(QLe," \u2014 "),rG=n(QLe,"A",{href:!0});var gtt=s(rG);kRo=r(gtt,"ConvBertForTokenClassification"),gtt.forEach(t),SRo=r(QLe," (ConvBERT model)"),QLe.forEach(t),RRo=i(J),Qb=n(J,"LI",{});var WLe=s(Qb);lfe=n(WLe,"STRONG",{});var htt=s(lfe);BRo=r(htt,"data2vec-text"),htt.forEach(t),PRo=r(WLe," \u2014 "),tG=n(WLe,"A",{href:!0});var ptt=s(tG);IRo=r(ptt,"Data2VecTextForTokenClassification"),ptt.forEach(t),qRo=r(WLe," (Data2VecText model)"),WLe.forEach(t),NRo=i(J),Wb=n(J,"LI",{});var HLe=s(Wb);ife=n(HLe,"STRONG",{});var utt=s(ife);jRo=r(utt,"deberta"),utt.forEach(t),DRo=r(HLe," \u2014 "),aG=n(HLe,"A",{href:!0});var _tt=s(aG);GRo=r(_tt,"DebertaForTokenClassification"),_tt.forEach(t),ORo=r(HLe," (DeBERTa model)"),HLe.forEach(t),VRo=i(J),Hb=n(J,"LI",{});var ULe=s(Hb);dfe=n(ULe,"STRONG",{});var btt=s(dfe);XRo=r(btt,"deberta-v2"),btt.forEach(t),zRo=r(ULe," \u2014 "),nG=n(ULe,"A",{href:!0});var vtt=s(nG);QRo=r(vtt,"DebertaV2ForTokenClassification"),vtt.forEach(t),WRo=r(ULe," (DeBERTa-v2 model)"),ULe.forEach(t),HRo=i(J),Ub=n(J,"LI",{});var JLe=s(Ub);cfe=n(JLe,"STRONG",{});var Ftt=s(cfe);URo=r(Ftt,"distilbert"),Ftt.forEach(t),JRo=r(JLe," \u2014 "),sG=n(JLe,"A",{href:!0});var Ttt=s(sG);YRo=r(Ttt,"DistilBertForTokenClassification"),Ttt.forEach(t),KRo=r(JLe," (DistilBERT model)"),JLe.forEach(t),ZRo=i(J),Jb=n(J,"LI",{});var YLe=s(Jb);ffe=n(YLe,"STRONG",{});var Mtt=s(ffe);eBo=r(Mtt,"electra"),Mtt.forEach(t),oBo=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var Ett=s(lG);rBo=r(Ett,"ElectraForTokenClassification"),Ett.forEach(t),tBo=r(YLe," (ELECTRA model)"),YLe.forEach(t),aBo=i(J),Yb=n(J,"LI",{});var KLe=s(Yb);mfe=n(KLe,"STRONG",{});var Ctt=s(mfe);nBo=r(Ctt,"flaubert"),Ctt.forEach(t),sBo=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var wtt=s(iG);lBo=r(wtt,"FlaubertForTokenClassification"),wtt.forEach(t),iBo=r(KLe," (FlauBERT model)"),KLe.forEach(t),dBo=i(J),Kb=n(J,"LI",{});var ZLe=s(Kb);gfe=n(ZLe,"STRONG",{});var Att=s(gfe);cBo=r(Att,"fnet"),Att.forEach(t),fBo=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var ytt=s(dG);mBo=r(ytt,"FNetForTokenClassification"),ytt.forEach(t),gBo=r(ZLe," (FNet model)"),ZLe.forEach(t),hBo=i(J),Zb=n(J,"LI",{});var e8e=s(Zb);hfe=n(e8e,"STRONG",{});var Ltt=s(hfe);pBo=r(Ltt,"funnel"),Ltt.forEach(t),uBo=r(e8e," \u2014 "),cG=n(e8e,"A",{href:!0});var xtt=s(cG);_Bo=r(xtt,"FunnelForTokenClassification"),xtt.forEach(t),bBo=r(e8e," (Funnel Transformer model)"),e8e.forEach(t),vBo=i(J),e4=n(J,"LI",{});var o8e=s(e4);pfe=n(o8e,"STRONG",{});var $tt=s(pfe);FBo=r($tt,"gpt2"),$tt.forEach(t),TBo=r(o8e," \u2014 "),fG=n(o8e,"A",{href:!0});var ktt=s(fG);MBo=r(ktt,"GPT2ForTokenClassification"),ktt.forEach(t),EBo=r(o8e," (OpenAI GPT-2 model)"),o8e.forEach(t),CBo=i(J),o4=n(J,"LI",{});var r8e=s(o4);ufe=n(r8e,"STRONG",{});var Stt=s(ufe);wBo=r(Stt,"ibert"),Stt.forEach(t),ABo=r(r8e," \u2014 "),mG=n(r8e,"A",{href:!0});var Rtt=s(mG);yBo=r(Rtt,"IBertForTokenClassification"),Rtt.forEach(t),LBo=r(r8e," (I-BERT model)"),r8e.forEach(t),xBo=i(J),r4=n(J,"LI",{});var t8e=s(r4);_fe=n(t8e,"STRONG",{});var Btt=s(_fe);$Bo=r(Btt,"layoutlm"),Btt.forEach(t),kBo=r(t8e," \u2014 "),gG=n(t8e,"A",{href:!0});var Ptt=s(gG);SBo=r(Ptt,"LayoutLMForTokenClassification"),Ptt.forEach(t),RBo=r(t8e," (LayoutLM model)"),t8e.forEach(t),BBo=i(J),t4=n(J,"LI",{});var a8e=s(t4);bfe=n(a8e,"STRONG",{});var Itt=s(bfe);PBo=r(Itt,"layoutlmv2"),Itt.forEach(t),IBo=r(a8e," \u2014 "),hG=n(a8e,"A",{href:!0});var qtt=s(hG);qBo=r(qtt,"LayoutLMv2ForTokenClassification"),qtt.forEach(t),NBo=r(a8e," (LayoutLMv2 model)"),a8e.forEach(t),jBo=i(J),a4=n(J,"LI",{});var n8e=s(a4);vfe=n(n8e,"STRONG",{});var Ntt=s(vfe);DBo=r(Ntt,"longformer"),Ntt.forEach(t),GBo=r(n8e," \u2014 "),pG=n(n8e,"A",{href:!0});var jtt=s(pG);OBo=r(jtt,"LongformerForTokenClassification"),jtt.forEach(t),VBo=r(n8e," (Longformer model)"),n8e.forEach(t),XBo=i(J),n4=n(J,"LI",{});var s8e=s(n4);Ffe=n(s8e,"STRONG",{});var Dtt=s(Ffe);zBo=r(Dtt,"megatron-bert"),Dtt.forEach(t),QBo=r(s8e," \u2014 "),uG=n(s8e,"A",{href:!0});var Gtt=s(uG);WBo=r(Gtt,"MegatronBertForTokenClassification"),Gtt.forEach(t),HBo=r(s8e," (MegatronBert model)"),s8e.forEach(t),UBo=i(J),s4=n(J,"LI",{});var l8e=s(s4);Tfe=n(l8e,"STRONG",{});var Ott=s(Tfe);JBo=r(Ott,"mobilebert"),Ott.forEach(t),YBo=r(l8e," \u2014 "),_G=n(l8e,"A",{href:!0});var Vtt=s(_G);KBo=r(Vtt,"MobileBertForTokenClassification"),Vtt.forEach(t),ZBo=r(l8e," (MobileBERT model)"),l8e.forEach(t),ePo=i(J),l4=n(J,"LI",{});var i8e=s(l4);Mfe=n(i8e,"STRONG",{});var Xtt=s(Mfe);oPo=r(Xtt,"mpnet"),Xtt.forEach(t),rPo=r(i8e," \u2014 "),bG=n(i8e,"A",{href:!0});var ztt=s(bG);tPo=r(ztt,"MPNetForTokenClassification"),ztt.forEach(t),aPo=r(i8e," (MPNet model)"),i8e.forEach(t),nPo=i(J),i4=n(J,"LI",{});var d8e=s(i4);Efe=n(d8e,"STRONG",{});var Qtt=s(Efe);sPo=r(Qtt,"nystromformer"),Qtt.forEach(t),lPo=r(d8e," \u2014 "),vG=n(d8e,"A",{href:!0});var Wtt=s(vG);iPo=r(Wtt,"NystromformerForTokenClassification"),Wtt.forEach(t),dPo=r(d8e," (Nystromformer model)"),d8e.forEach(t),cPo=i(J),d4=n(J,"LI",{});var c8e=s(d4);Cfe=n(c8e,"STRONG",{});var Htt=s(Cfe);fPo=r(Htt,"qdqbert"),Htt.forEach(t),mPo=r(c8e," \u2014 "),FG=n(c8e,"A",{href:!0});var Utt=s(FG);gPo=r(Utt,"QDQBertForTokenClassification"),Utt.forEach(t),hPo=r(c8e," (QDQBert model)"),c8e.forEach(t),pPo=i(J),c4=n(J,"LI",{});var f8e=s(c4);wfe=n(f8e,"STRONG",{});var Jtt=s(wfe);uPo=r(Jtt,"rembert"),Jtt.forEach(t),_Po=r(f8e," \u2014 "),TG=n(f8e,"A",{href:!0});var Ytt=s(TG);bPo=r(Ytt,"RemBertForTokenClassification"),Ytt.forEach(t),vPo=r(f8e," (RemBERT model)"),f8e.forEach(t),FPo=i(J),f4=n(J,"LI",{});var m8e=s(f4);Afe=n(m8e,"STRONG",{});var Ktt=s(Afe);TPo=r(Ktt,"roberta"),Ktt.forEach(t),MPo=r(m8e," \u2014 "),MG=n(m8e,"A",{href:!0});var Ztt=s(MG);EPo=r(Ztt,"RobertaForTokenClassification"),Ztt.forEach(t),CPo=r(m8e," (RoBERTa model)"),m8e.forEach(t),wPo=i(J),m4=n(J,"LI",{});var g8e=s(m4);yfe=n(g8e,"STRONG",{});var eat=s(yfe);APo=r(eat,"roformer"),eat.forEach(t),yPo=r(g8e," \u2014 "),EG=n(g8e,"A",{href:!0});var oat=s(EG);LPo=r(oat,"RoFormerForTokenClassification"),oat.forEach(t),xPo=r(g8e," (RoFormer model)"),g8e.forEach(t),$Po=i(J),g4=n(J,"LI",{});var h8e=s(g4);Lfe=n(h8e,"STRONG",{});var rat=s(Lfe);kPo=r(rat,"squeezebert"),rat.forEach(t),SPo=r(h8e," \u2014 "),CG=n(h8e,"A",{href:!0});var tat=s(CG);RPo=r(tat,"SqueezeBertForTokenClassification"),tat.forEach(t),BPo=r(h8e," (SqueezeBERT model)"),h8e.forEach(t),PPo=i(J),h4=n(J,"LI",{});var p8e=s(h4);xfe=n(p8e,"STRONG",{});var aat=s(xfe);IPo=r(aat,"xlm"),aat.forEach(t),qPo=r(p8e," \u2014 "),wG=n(p8e,"A",{href:!0});var nat=s(wG);NPo=r(nat,"XLMForTokenClassification"),nat.forEach(t),jPo=r(p8e," (XLM model)"),p8e.forEach(t),DPo=i(J),p4=n(J,"LI",{});var u8e=s(p4);$fe=n(u8e,"STRONG",{});var sat=s($fe);GPo=r(sat,"xlm-roberta"),sat.forEach(t),OPo=r(u8e," \u2014 "),AG=n(u8e,"A",{href:!0});var lat=s(AG);VPo=r(lat,"XLMRobertaForTokenClassification"),lat.forEach(t),XPo=r(u8e," (XLM-RoBERTa model)"),u8e.forEach(t),zPo=i(J),u4=n(J,"LI",{});var _8e=s(u4);kfe=n(_8e,"STRONG",{});var iat=s(kfe);QPo=r(iat,"xlm-roberta-xl"),iat.forEach(t),WPo=r(_8e," \u2014 "),yG=n(_8e,"A",{href:!0});var dat=s(yG);HPo=r(dat,"XLMRobertaXLForTokenClassification"),dat.forEach(t),UPo=r(_8e," (XLM-RoBERTa-XL model)"),_8e.forEach(t),JPo=i(J),_4=n(J,"LI",{});var b8e=s(_4);Sfe=n(b8e,"STRONG",{});var cat=s(Sfe);YPo=r(cat,"xlnet"),cat.forEach(t),KPo=r(b8e," \u2014 "),LG=n(b8e,"A",{href:!0});var fat=s(LG);ZPo=r(fat,"XLNetForTokenClassification"),fat.forEach(t),eIo=r(b8e," (XLNet model)"),b8e.forEach(t),oIo=i(J),b4=n(J,"LI",{});var v8e=s(b4);Rfe=n(v8e,"STRONG",{});var mat=s(Rfe);rIo=r(mat,"yoso"),mat.forEach(t),tIo=r(v8e," \u2014 "),xG=n(v8e,"A",{href:!0});var gat=s(xG);aIo=r(gat,"YosoForTokenClassification"),gat.forEach(t),nIo=r(v8e," (YOSO model)"),v8e.forEach(t),J.forEach(t),sIo=i(ta),v4=n(ta,"P",{});var F8e=s(v4);lIo=r(F8e,"The model is set in evaluation mode by default using "),Bfe=n(F8e,"CODE",{});var hat=s(Bfe);iIo=r(hat,"model.eval()"),hat.forEach(t),dIo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(F8e,"CODE",{});var pat=s(Pfe);cIo=r(pat,"model.train()"),pat.forEach(t),F8e.forEach(t),fIo=i(ta),T(F4.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),FBe=i(f),Oi=n(f,"H2",{class:!0});var MIe=s(Oi);T4=n(MIe,"A",{id:!0,class:!0,href:!0});var uat=s(T4);Ife=n(uat,"SPAN",{});var _at=s(Ife);T(By.$$.fragment,_at),_at.forEach(t),uat.forEach(t),mIo=i(MIe),qfe=n(MIe,"SPAN",{});var bat=s(qfe);gIo=r(bat,"AutoModelForQuestionAnswering"),bat.forEach(t),MIe.forEach(t),TBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(Py.$$.fragment,Xs),hIo=i(Xs),Vi=n(Xs,"P",{});var vY=s(Vi);pIo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$G=n(vY,"A",{href:!0});var vat=s($G);uIo=r(vat,"from_pretrained()"),vat.forEach(t),_Io=r(vY," class method or the "),kG=n(vY,"A",{href:!0});var Fat=s(kG);bIo=r(Fat,"from_config()"),Fat.forEach(t),vIo=r(vY,` class
method.`),vY.forEach(t),FIo=i(Xs),Iy=n(Xs,"P",{});var EIe=s(Iy);TIo=r(EIe,"This class cannot be instantiated directly using "),Nfe=n(EIe,"CODE",{});var Tat=s(Nfe);MIo=r(Tat,"__init__()"),Tat.forEach(t),EIo=r(EIe," (throws an error)."),EIe.forEach(t),CIo=i(Xs),lt=n(Xs,"DIV",{class:!0});var D3=s(lt);T(qy.$$.fragment,D3),wIo=i(D3),jfe=n(D3,"P",{});var Mat=s(jfe);AIo=r(Mat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Mat.forEach(t),yIo=i(D3),Xi=n(D3,"P",{});var FY=s(Xi);LIo=r(FY,`Note:
Loading a model from its configuration file does `),Dfe=n(FY,"STRONG",{});var Eat=s(Dfe);xIo=r(Eat,"not"),Eat.forEach(t),$Io=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(FY,"A",{href:!0});var Cat=s(SG);kIo=r(Cat,"from_pretrained()"),Cat.forEach(t),SIo=r(FY," to load the model weights."),FY.forEach(t),RIo=i(D3),T(M4.$$.fragment,D3),D3.forEach(t),BIo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(Ny.$$.fragment,aa),PIo=i(aa),Gfe=n(aa,"P",{});var wat=s(Gfe);IIo=r(wat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),wat.forEach(t),qIo=i(aa),ka=n(aa,"P",{});var G3=s(ka);NIo=r(G3,"The model class to instantiate is selected based on the "),Ofe=n(G3,"CODE",{});var Aat=s(Ofe);jIo=r(Aat,"model_type"),Aat.forEach(t),DIo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(G3,"CODE",{});var yat=s(Vfe);GIo=r(yat,"pretrained_model_name_or_path"),yat.forEach(t),OIo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(G3,"CODE",{});var Lat=s(Xfe);VIo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),XIo=r(G3,":"),G3.forEach(t),zIo=i(aa),O=n(aa,"UL",{});var X=s(O);E4=n(X,"LI",{});var T8e=s(E4);zfe=n(T8e,"STRONG",{});var xat=s(zfe);QIo=r(xat,"albert"),xat.forEach(t),WIo=r(T8e," \u2014 "),RG=n(T8e,"A",{href:!0});var $at=s(RG);HIo=r($at,"AlbertForQuestionAnswering"),$at.forEach(t),UIo=r(T8e," (ALBERT model)"),T8e.forEach(t),JIo=i(X),C4=n(X,"LI",{});var M8e=s(C4);Qfe=n(M8e,"STRONG",{});var kat=s(Qfe);YIo=r(kat,"bart"),kat.forEach(t),KIo=r(M8e," \u2014 "),BG=n(M8e,"A",{href:!0});var Sat=s(BG);ZIo=r(Sat,"BartForQuestionAnswering"),Sat.forEach(t),eqo=r(M8e," (BART model)"),M8e.forEach(t),oqo=i(X),w4=n(X,"LI",{});var E8e=s(w4);Wfe=n(E8e,"STRONG",{});var Rat=s(Wfe);rqo=r(Rat,"bert"),Rat.forEach(t),tqo=r(E8e," \u2014 "),PG=n(E8e,"A",{href:!0});var Bat=s(PG);aqo=r(Bat,"BertForQuestionAnswering"),Bat.forEach(t),nqo=r(E8e," (BERT model)"),E8e.forEach(t),sqo=i(X),A4=n(X,"LI",{});var C8e=s(A4);Hfe=n(C8e,"STRONG",{});var Pat=s(Hfe);lqo=r(Pat,"big_bird"),Pat.forEach(t),iqo=r(C8e," \u2014 "),IG=n(C8e,"A",{href:!0});var Iat=s(IG);dqo=r(Iat,"BigBirdForQuestionAnswering"),Iat.forEach(t),cqo=r(C8e," (BigBird model)"),C8e.forEach(t),fqo=i(X),y4=n(X,"LI",{});var w8e=s(y4);Ufe=n(w8e,"STRONG",{});var qat=s(Ufe);mqo=r(qat,"bigbird_pegasus"),qat.forEach(t),gqo=r(w8e," \u2014 "),qG=n(w8e,"A",{href:!0});var Nat=s(qG);hqo=r(Nat,"BigBirdPegasusForQuestionAnswering"),Nat.forEach(t),pqo=r(w8e," (BigBirdPegasus model)"),w8e.forEach(t),uqo=i(X),L4=n(X,"LI",{});var A8e=s(L4);Jfe=n(A8e,"STRONG",{});var jat=s(Jfe);_qo=r(jat,"camembert"),jat.forEach(t),bqo=r(A8e," \u2014 "),NG=n(A8e,"A",{href:!0});var Dat=s(NG);vqo=r(Dat,"CamembertForQuestionAnswering"),Dat.forEach(t),Fqo=r(A8e," (CamemBERT model)"),A8e.forEach(t),Tqo=i(X),x4=n(X,"LI",{});var y8e=s(x4);Yfe=n(y8e,"STRONG",{});var Gat=s(Yfe);Mqo=r(Gat,"canine"),Gat.forEach(t),Eqo=r(y8e," \u2014 "),jG=n(y8e,"A",{href:!0});var Oat=s(jG);Cqo=r(Oat,"CanineForQuestionAnswering"),Oat.forEach(t),wqo=r(y8e," (Canine model)"),y8e.forEach(t),Aqo=i(X),$4=n(X,"LI",{});var L8e=s($4);Kfe=n(L8e,"STRONG",{});var Vat=s(Kfe);yqo=r(Vat,"convbert"),Vat.forEach(t),Lqo=r(L8e," \u2014 "),DG=n(L8e,"A",{href:!0});var Xat=s(DG);xqo=r(Xat,"ConvBertForQuestionAnswering"),Xat.forEach(t),$qo=r(L8e," (ConvBERT model)"),L8e.forEach(t),kqo=i(X),k4=n(X,"LI",{});var x8e=s(k4);Zfe=n(x8e,"STRONG",{});var zat=s(Zfe);Sqo=r(zat,"data2vec-text"),zat.forEach(t),Rqo=r(x8e," \u2014 "),GG=n(x8e,"A",{href:!0});var Qat=s(GG);Bqo=r(Qat,"Data2VecTextForQuestionAnswering"),Qat.forEach(t),Pqo=r(x8e," (Data2VecText model)"),x8e.forEach(t),Iqo=i(X),S4=n(X,"LI",{});var $8e=s(S4);eme=n($8e,"STRONG",{});var Wat=s(eme);qqo=r(Wat,"deberta"),Wat.forEach(t),Nqo=r($8e," \u2014 "),OG=n($8e,"A",{href:!0});var Hat=s(OG);jqo=r(Hat,"DebertaForQuestionAnswering"),Hat.forEach(t),Dqo=r($8e," (DeBERTa model)"),$8e.forEach(t),Gqo=i(X),R4=n(X,"LI",{});var k8e=s(R4);ome=n(k8e,"STRONG",{});var Uat=s(ome);Oqo=r(Uat,"deberta-v2"),Uat.forEach(t),Vqo=r(k8e," \u2014 "),VG=n(k8e,"A",{href:!0});var Jat=s(VG);Xqo=r(Jat,"DebertaV2ForQuestionAnswering"),Jat.forEach(t),zqo=r(k8e," (DeBERTa-v2 model)"),k8e.forEach(t),Qqo=i(X),B4=n(X,"LI",{});var S8e=s(B4);rme=n(S8e,"STRONG",{});var Yat=s(rme);Wqo=r(Yat,"distilbert"),Yat.forEach(t),Hqo=r(S8e," \u2014 "),XG=n(S8e,"A",{href:!0});var Kat=s(XG);Uqo=r(Kat,"DistilBertForQuestionAnswering"),Kat.forEach(t),Jqo=r(S8e," (DistilBERT model)"),S8e.forEach(t),Yqo=i(X),P4=n(X,"LI",{});var R8e=s(P4);tme=n(R8e,"STRONG",{});var Zat=s(tme);Kqo=r(Zat,"electra"),Zat.forEach(t),Zqo=r(R8e," \u2014 "),zG=n(R8e,"A",{href:!0});var ent=s(zG);eNo=r(ent,"ElectraForQuestionAnswering"),ent.forEach(t),oNo=r(R8e," (ELECTRA model)"),R8e.forEach(t),rNo=i(X),I4=n(X,"LI",{});var B8e=s(I4);ame=n(B8e,"STRONG",{});var ont=s(ame);tNo=r(ont,"flaubert"),ont.forEach(t),aNo=r(B8e," \u2014 "),QG=n(B8e,"A",{href:!0});var rnt=s(QG);nNo=r(rnt,"FlaubertForQuestionAnsweringSimple"),rnt.forEach(t),sNo=r(B8e," (FlauBERT model)"),B8e.forEach(t),lNo=i(X),q4=n(X,"LI",{});var P8e=s(q4);nme=n(P8e,"STRONG",{});var tnt=s(nme);iNo=r(tnt,"fnet"),tnt.forEach(t),dNo=r(P8e," \u2014 "),WG=n(P8e,"A",{href:!0});var ant=s(WG);cNo=r(ant,"FNetForQuestionAnswering"),ant.forEach(t),fNo=r(P8e," (FNet model)"),P8e.forEach(t),mNo=i(X),N4=n(X,"LI",{});var I8e=s(N4);sme=n(I8e,"STRONG",{});var nnt=s(sme);gNo=r(nnt,"funnel"),nnt.forEach(t),hNo=r(I8e," \u2014 "),HG=n(I8e,"A",{href:!0});var snt=s(HG);pNo=r(snt,"FunnelForQuestionAnswering"),snt.forEach(t),uNo=r(I8e," (Funnel Transformer model)"),I8e.forEach(t),_No=i(X),j4=n(X,"LI",{});var q8e=s(j4);lme=n(q8e,"STRONG",{});var lnt=s(lme);bNo=r(lnt,"gptj"),lnt.forEach(t),vNo=r(q8e," \u2014 "),UG=n(q8e,"A",{href:!0});var int=s(UG);FNo=r(int,"GPTJForQuestionAnswering"),int.forEach(t),TNo=r(q8e," (GPT-J model)"),q8e.forEach(t),MNo=i(X),D4=n(X,"LI",{});var N8e=s(D4);ime=n(N8e,"STRONG",{});var dnt=s(ime);ENo=r(dnt,"ibert"),dnt.forEach(t),CNo=r(N8e," \u2014 "),JG=n(N8e,"A",{href:!0});var cnt=s(JG);wNo=r(cnt,"IBertForQuestionAnswering"),cnt.forEach(t),ANo=r(N8e," (I-BERT model)"),N8e.forEach(t),yNo=i(X),G4=n(X,"LI",{});var j8e=s(G4);dme=n(j8e,"STRONG",{});var fnt=s(dme);LNo=r(fnt,"layoutlmv2"),fnt.forEach(t),xNo=r(j8e," \u2014 "),YG=n(j8e,"A",{href:!0});var mnt=s(YG);$No=r(mnt,"LayoutLMv2ForQuestionAnswering"),mnt.forEach(t),kNo=r(j8e," (LayoutLMv2 model)"),j8e.forEach(t),SNo=i(X),O4=n(X,"LI",{});var D8e=s(O4);cme=n(D8e,"STRONG",{});var gnt=s(cme);RNo=r(gnt,"led"),gnt.forEach(t),BNo=r(D8e," \u2014 "),KG=n(D8e,"A",{href:!0});var hnt=s(KG);PNo=r(hnt,"LEDForQuestionAnswering"),hnt.forEach(t),INo=r(D8e," (LED model)"),D8e.forEach(t),qNo=i(X),V4=n(X,"LI",{});var G8e=s(V4);fme=n(G8e,"STRONG",{});var pnt=s(fme);NNo=r(pnt,"longformer"),pnt.forEach(t),jNo=r(G8e," \u2014 "),ZG=n(G8e,"A",{href:!0});var unt=s(ZG);DNo=r(unt,"LongformerForQuestionAnswering"),unt.forEach(t),GNo=r(G8e," (Longformer model)"),G8e.forEach(t),ONo=i(X),X4=n(X,"LI",{});var O8e=s(X4);mme=n(O8e,"STRONG",{});var _nt=s(mme);VNo=r(_nt,"lxmert"),_nt.forEach(t),XNo=r(O8e," \u2014 "),eO=n(O8e,"A",{href:!0});var bnt=s(eO);zNo=r(bnt,"LxmertForQuestionAnswering"),bnt.forEach(t),QNo=r(O8e," (LXMERT model)"),O8e.forEach(t),WNo=i(X),z4=n(X,"LI",{});var V8e=s(z4);gme=n(V8e,"STRONG",{});var vnt=s(gme);HNo=r(vnt,"mbart"),vnt.forEach(t),UNo=r(V8e," \u2014 "),oO=n(V8e,"A",{href:!0});var Fnt=s(oO);JNo=r(Fnt,"MBartForQuestionAnswering"),Fnt.forEach(t),YNo=r(V8e," (mBART model)"),V8e.forEach(t),KNo=i(X),Q4=n(X,"LI",{});var X8e=s(Q4);hme=n(X8e,"STRONG",{});var Tnt=s(hme);ZNo=r(Tnt,"megatron-bert"),Tnt.forEach(t),ejo=r(X8e," \u2014 "),rO=n(X8e,"A",{href:!0});var Mnt=s(rO);ojo=r(Mnt,"MegatronBertForQuestionAnswering"),Mnt.forEach(t),rjo=r(X8e," (MegatronBert model)"),X8e.forEach(t),tjo=i(X),W4=n(X,"LI",{});var z8e=s(W4);pme=n(z8e,"STRONG",{});var Ent=s(pme);ajo=r(Ent,"mobilebert"),Ent.forEach(t),njo=r(z8e," \u2014 "),tO=n(z8e,"A",{href:!0});var Cnt=s(tO);sjo=r(Cnt,"MobileBertForQuestionAnswering"),Cnt.forEach(t),ljo=r(z8e," (MobileBERT model)"),z8e.forEach(t),ijo=i(X),H4=n(X,"LI",{});var Q8e=s(H4);ume=n(Q8e,"STRONG",{});var wnt=s(ume);djo=r(wnt,"mpnet"),wnt.forEach(t),cjo=r(Q8e," \u2014 "),aO=n(Q8e,"A",{href:!0});var Ant=s(aO);fjo=r(Ant,"MPNetForQuestionAnswering"),Ant.forEach(t),mjo=r(Q8e," (MPNet model)"),Q8e.forEach(t),gjo=i(X),U4=n(X,"LI",{});var W8e=s(U4);_me=n(W8e,"STRONG",{});var ynt=s(_me);hjo=r(ynt,"nystromformer"),ynt.forEach(t),pjo=r(W8e," \u2014 "),nO=n(W8e,"A",{href:!0});var Lnt=s(nO);ujo=r(Lnt,"NystromformerForQuestionAnswering"),Lnt.forEach(t),_jo=r(W8e," (Nystromformer model)"),W8e.forEach(t),bjo=i(X),J4=n(X,"LI",{});var H8e=s(J4);bme=n(H8e,"STRONG",{});var xnt=s(bme);vjo=r(xnt,"qdqbert"),xnt.forEach(t),Fjo=r(H8e," \u2014 "),sO=n(H8e,"A",{href:!0});var $nt=s(sO);Tjo=r($nt,"QDQBertForQuestionAnswering"),$nt.forEach(t),Mjo=r(H8e," (QDQBert model)"),H8e.forEach(t),Ejo=i(X),Y4=n(X,"LI",{});var U8e=s(Y4);vme=n(U8e,"STRONG",{});var knt=s(vme);Cjo=r(knt,"reformer"),knt.forEach(t),wjo=r(U8e," \u2014 "),lO=n(U8e,"A",{href:!0});var Snt=s(lO);Ajo=r(Snt,"ReformerForQuestionAnswering"),Snt.forEach(t),yjo=r(U8e," (Reformer model)"),U8e.forEach(t),Ljo=i(X),K4=n(X,"LI",{});var J8e=s(K4);Fme=n(J8e,"STRONG",{});var Rnt=s(Fme);xjo=r(Rnt,"rembert"),Rnt.forEach(t),$jo=r(J8e," \u2014 "),iO=n(J8e,"A",{href:!0});var Bnt=s(iO);kjo=r(Bnt,"RemBertForQuestionAnswering"),Bnt.forEach(t),Sjo=r(J8e," (RemBERT model)"),J8e.forEach(t),Rjo=i(X),Z4=n(X,"LI",{});var Y8e=s(Z4);Tme=n(Y8e,"STRONG",{});var Pnt=s(Tme);Bjo=r(Pnt,"roberta"),Pnt.forEach(t),Pjo=r(Y8e," \u2014 "),dO=n(Y8e,"A",{href:!0});var Int=s(dO);Ijo=r(Int,"RobertaForQuestionAnswering"),Int.forEach(t),qjo=r(Y8e," (RoBERTa model)"),Y8e.forEach(t),Njo=i(X),ev=n(X,"LI",{});var K8e=s(ev);Mme=n(K8e,"STRONG",{});var qnt=s(Mme);jjo=r(qnt,"roformer"),qnt.forEach(t),Djo=r(K8e," \u2014 "),cO=n(K8e,"A",{href:!0});var Nnt=s(cO);Gjo=r(Nnt,"RoFormerForQuestionAnswering"),Nnt.forEach(t),Ojo=r(K8e," (RoFormer model)"),K8e.forEach(t),Vjo=i(X),ov=n(X,"LI",{});var Z8e=s(ov);Eme=n(Z8e,"STRONG",{});var jnt=s(Eme);Xjo=r(jnt,"splinter"),jnt.forEach(t),zjo=r(Z8e," \u2014 "),fO=n(Z8e,"A",{href:!0});var Dnt=s(fO);Qjo=r(Dnt,"SplinterForQuestionAnswering"),Dnt.forEach(t),Wjo=r(Z8e," (Splinter model)"),Z8e.forEach(t),Hjo=i(X),rv=n(X,"LI",{});var e7e=s(rv);Cme=n(e7e,"STRONG",{});var Gnt=s(Cme);Ujo=r(Gnt,"squeezebert"),Gnt.forEach(t),Jjo=r(e7e," \u2014 "),mO=n(e7e,"A",{href:!0});var Ont=s(mO);Yjo=r(Ont,"SqueezeBertForQuestionAnswering"),Ont.forEach(t),Kjo=r(e7e," (SqueezeBERT model)"),e7e.forEach(t),Zjo=i(X),tv=n(X,"LI",{});var o7e=s(tv);wme=n(o7e,"STRONG",{});var Vnt=s(wme);eDo=r(Vnt,"xlm"),Vnt.forEach(t),oDo=r(o7e," \u2014 "),gO=n(o7e,"A",{href:!0});var Xnt=s(gO);rDo=r(Xnt,"XLMForQuestionAnsweringSimple"),Xnt.forEach(t),tDo=r(o7e," (XLM model)"),o7e.forEach(t),aDo=i(X),av=n(X,"LI",{});var r7e=s(av);Ame=n(r7e,"STRONG",{});var znt=s(Ame);nDo=r(znt,"xlm-roberta"),znt.forEach(t),sDo=r(r7e," \u2014 "),hO=n(r7e,"A",{href:!0});var Qnt=s(hO);lDo=r(Qnt,"XLMRobertaForQuestionAnswering"),Qnt.forEach(t),iDo=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),dDo=i(X),nv=n(X,"LI",{});var t7e=s(nv);yme=n(t7e,"STRONG",{});var Wnt=s(yme);cDo=r(Wnt,"xlm-roberta-xl"),Wnt.forEach(t),fDo=r(t7e," \u2014 "),pO=n(t7e,"A",{href:!0});var Hnt=s(pO);mDo=r(Hnt,"XLMRobertaXLForQuestionAnswering"),Hnt.forEach(t),gDo=r(t7e," (XLM-RoBERTa-XL model)"),t7e.forEach(t),hDo=i(X),sv=n(X,"LI",{});var a7e=s(sv);Lme=n(a7e,"STRONG",{});var Unt=s(Lme);pDo=r(Unt,"xlnet"),Unt.forEach(t),uDo=r(a7e," \u2014 "),uO=n(a7e,"A",{href:!0});var Jnt=s(uO);_Do=r(Jnt,"XLNetForQuestionAnsweringSimple"),Jnt.forEach(t),bDo=r(a7e," (XLNet model)"),a7e.forEach(t),vDo=i(X),lv=n(X,"LI",{});var n7e=s(lv);xme=n(n7e,"STRONG",{});var Ynt=s(xme);FDo=r(Ynt,"yoso"),Ynt.forEach(t),TDo=r(n7e," \u2014 "),_O=n(n7e,"A",{href:!0});var Knt=s(_O);MDo=r(Knt,"YosoForQuestionAnswering"),Knt.forEach(t),EDo=r(n7e," (YOSO model)"),n7e.forEach(t),X.forEach(t),CDo=i(aa),iv=n(aa,"P",{});var s7e=s(iv);wDo=r(s7e,"The model is set in evaluation mode by default using "),$me=n(s7e,"CODE",{});var Znt=s($me);ADo=r(Znt,"model.eval()"),Znt.forEach(t),yDo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(s7e,"CODE",{});var est=s(kme);LDo=r(est,"model.train()"),est.forEach(t),s7e.forEach(t),xDo=i(aa),T(dv.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),MBe=i(f),zi=n(f,"H2",{class:!0});var CIe=s(zi);cv=n(CIe,"A",{id:!0,class:!0,href:!0});var ost=s(cv);Sme=n(ost,"SPAN",{});var rst=s(Sme);T(jy.$$.fragment,rst),rst.forEach(t),ost.forEach(t),$Do=i(CIe),Rme=n(CIe,"SPAN",{});var tst=s(Rme);kDo=r(tst,"AutoModelForTableQuestionAnswering"),tst.forEach(t),CIe.forEach(t),EBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(Dy.$$.fragment,zs),SDo=i(zs),Qi=n(zs,"P",{});var TY=s(Qi);RDo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),bO=n(TY,"A",{href:!0});var ast=s(bO);BDo=r(ast,"from_pretrained()"),ast.forEach(t),PDo=r(TY," class method or the "),vO=n(TY,"A",{href:!0});var nst=s(vO);IDo=r(nst,"from_config()"),nst.forEach(t),qDo=r(TY,` class
method.`),TY.forEach(t),NDo=i(zs),Gy=n(zs,"P",{});var wIe=s(Gy);jDo=r(wIe,"This class cannot be instantiated directly using "),Bme=n(wIe,"CODE",{});var sst=s(Bme);DDo=r(sst,"__init__()"),sst.forEach(t),GDo=r(wIe," (throws an error)."),wIe.forEach(t),ODo=i(zs),it=n(zs,"DIV",{class:!0});var O3=s(it);T(Oy.$$.fragment,O3),VDo=i(O3),Pme=n(O3,"P",{});var lst=s(Pme);XDo=r(lst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lst.forEach(t),zDo=i(O3),Wi=n(O3,"P",{});var MY=s(Wi);QDo=r(MY,`Note:
Loading a model from its configuration file does `),Ime=n(MY,"STRONG",{});var ist=s(Ime);WDo=r(ist,"not"),ist.forEach(t),HDo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(MY,"A",{href:!0});var dst=s(FO);UDo=r(dst,"from_pretrained()"),dst.forEach(t),JDo=r(MY," to load the model weights."),MY.forEach(t),YDo=i(O3),T(fv.$$.fragment,O3),O3.forEach(t),KDo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(Vy.$$.fragment,na),ZDo=i(na),qme=n(na,"P",{});var cst=s(qme);eGo=r(cst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cst.forEach(t),oGo=i(na),Sa=n(na,"P",{});var V3=s(Sa);rGo=r(V3,"The model class to instantiate is selected based on the "),Nme=n(V3,"CODE",{});var fst=s(Nme);tGo=r(fst,"model_type"),fst.forEach(t),aGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),jme=n(V3,"CODE",{});var mst=s(jme);nGo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),sGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dme=n(V3,"CODE",{});var gst=s(Dme);lGo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),iGo=r(V3,":"),V3.forEach(t),dGo=i(na),Gme=n(na,"UL",{});var hst=s(Gme);mv=n(hst,"LI",{});var l7e=s(mv);Ome=n(l7e,"STRONG",{});var pst=s(Ome);cGo=r(pst,"tapas"),pst.forEach(t),fGo=r(l7e," \u2014 "),TO=n(l7e,"A",{href:!0});var ust=s(TO);mGo=r(ust,"TapasForQuestionAnswering"),ust.forEach(t),gGo=r(l7e," (TAPAS model)"),l7e.forEach(t),hst.forEach(t),hGo=i(na),gv=n(na,"P",{});var i7e=s(gv);pGo=r(i7e,"The model is set in evaluation mode by default using "),Vme=n(i7e,"CODE",{});var _st=s(Vme);uGo=r(_st,"model.eval()"),_st.forEach(t),_Go=r(i7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xme=n(i7e,"CODE",{});var bst=s(Xme);bGo=r(bst,"model.train()"),bst.forEach(t),i7e.forEach(t),vGo=i(na),T(hv.$$.fragment,na),na.forEach(t),zs.forEach(t),CBe=i(f),Hi=n(f,"H2",{class:!0});var AIe=s(Hi);pv=n(AIe,"A",{id:!0,class:!0,href:!0});var vst=s(pv);zme=n(vst,"SPAN",{});var Fst=s(zme);T(Xy.$$.fragment,Fst),Fst.forEach(t),vst.forEach(t),FGo=i(AIe),Qme=n(AIe,"SPAN",{});var Tst=s(Qme);TGo=r(Tst,"AutoModelForImageClassification"),Tst.forEach(t),AIe.forEach(t),wBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(zy.$$.fragment,Qs),MGo=i(Qs),Ui=n(Qs,"P",{});var EY=s(Ui);EGo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),MO=n(EY,"A",{href:!0});var Mst=s(MO);CGo=r(Mst,"from_pretrained()"),Mst.forEach(t),wGo=r(EY," class method or the "),EO=n(EY,"A",{href:!0});var Est=s(EO);AGo=r(Est,"from_config()"),Est.forEach(t),yGo=r(EY,` class
method.`),EY.forEach(t),LGo=i(Qs),Qy=n(Qs,"P",{});var yIe=s(Qy);xGo=r(yIe,"This class cannot be instantiated directly using "),Wme=n(yIe,"CODE",{});var Cst=s(Wme);$Go=r(Cst,"__init__()"),Cst.forEach(t),kGo=r(yIe," (throws an error)."),yIe.forEach(t),SGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var X3=s(dt);T(Wy.$$.fragment,X3),RGo=i(X3),Hme=n(X3,"P",{});var wst=s(Hme);BGo=r(wst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wst.forEach(t),PGo=i(X3),Ji=n(X3,"P",{});var CY=s(Ji);IGo=r(CY,`Note:
Loading a model from its configuration file does `),Ume=n(CY,"STRONG",{});var Ast=s(Ume);qGo=r(Ast,"not"),Ast.forEach(t),NGo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CO=n(CY,"A",{href:!0});var yst=s(CO);jGo=r(yst,"from_pretrained()"),yst.forEach(t),DGo=r(CY," to load the model weights."),CY.forEach(t),GGo=i(X3),T(uv.$$.fragment,X3),X3.forEach(t),OGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(Hy.$$.fragment,sa),VGo=i(sa),Jme=n(sa,"P",{});var Lst=s(Jme);XGo=r(Lst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Lst.forEach(t),zGo=i(sa),Ra=n(sa,"P",{});var z3=s(Ra);QGo=r(z3,"The model class to instantiate is selected based on the "),Yme=n(z3,"CODE",{});var xst=s(Yme);WGo=r(xst,"model_type"),xst.forEach(t),HGo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Kme=n(z3,"CODE",{});var $st=s(Kme);UGo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),JGo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(z3,"CODE",{});var kst=s(Zme);YGo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),KGo=r(z3,":"),z3.forEach(t),ZGo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);_v=n(Ee,"LI",{});var d7e=s(_v);ege=n(d7e,"STRONG",{});var Sst=s(ege);eOo=r(Sst,"beit"),Sst.forEach(t),oOo=r(d7e," \u2014 "),wO=n(d7e,"A",{href:!0});var Rst=s(wO);rOo=r(Rst,"BeitForImageClassification"),Rst.forEach(t),tOo=r(d7e," (BEiT model)"),d7e.forEach(t),aOo=i(Ee),bv=n(Ee,"LI",{});var c7e=s(bv);oge=n(c7e,"STRONG",{});var Bst=s(oge);nOo=r(Bst,"convnext"),Bst.forEach(t),sOo=r(c7e," \u2014 "),AO=n(c7e,"A",{href:!0});var Pst=s(AO);lOo=r(Pst,"ConvNextForImageClassification"),Pst.forEach(t),iOo=r(c7e," (ConvNext model)"),c7e.forEach(t),dOo=i(Ee),vv=n(Ee,"LI",{});var f7e=s(vv);rge=n(f7e,"STRONG",{});var Ist=s(rge);cOo=r(Ist,"data2vec-vision"),Ist.forEach(t),fOo=r(f7e," \u2014 "),yO=n(f7e,"A",{href:!0});var qst=s(yO);mOo=r(qst,"Data2VecVisionForImageClassification"),qst.forEach(t),gOo=r(f7e," (Data2VecVision model)"),f7e.forEach(t),hOo=i(Ee),Ls=n(Ee,"LI",{});var A9=s(Ls);tge=n(A9,"STRONG",{});var Nst=s(tge);pOo=r(Nst,"deit"),Nst.forEach(t),uOo=r(A9," \u2014 "),LO=n(A9,"A",{href:!0});var jst=s(LO);_Oo=r(jst,"DeiTForImageClassification"),jst.forEach(t),bOo=r(A9," or "),xO=n(A9,"A",{href:!0});var Dst=s(xO);vOo=r(Dst,"DeiTForImageClassificationWithTeacher"),Dst.forEach(t),FOo=r(A9," (DeiT model)"),A9.forEach(t),TOo=i(Ee),Fv=n(Ee,"LI",{});var m7e=s(Fv);age=n(m7e,"STRONG",{});var Gst=s(age);MOo=r(Gst,"imagegpt"),Gst.forEach(t),EOo=r(m7e," \u2014 "),$O=n(m7e,"A",{href:!0});var Ost=s($O);COo=r(Ost,"ImageGPTForImageClassification"),Ost.forEach(t),wOo=r(m7e," (ImageGPT model)"),m7e.forEach(t),AOo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);nge=n(ef,"STRONG",{});var Vst=s(nge);yOo=r(Vst,"perceiver"),Vst.forEach(t),LOo=r(ef," \u2014 "),kO=n(ef,"A",{href:!0});var Xst=s(kO);xOo=r(Xst,"PerceiverForImageClassificationLearned"),Xst.forEach(t),$Oo=r(ef," or "),SO=n(ef,"A",{href:!0});var zst=s(SO);kOo=r(zst,"PerceiverForImageClassificationFourier"),zst.forEach(t),SOo=r(ef," or "),RO=n(ef,"A",{href:!0});var Qst=s(RO);ROo=r(Qst,"PerceiverForImageClassificationConvProcessing"),Qst.forEach(t),BOo=r(ef," (Perceiver model)"),ef.forEach(t),POo=i(Ee),Tv=n(Ee,"LI",{});var g7e=s(Tv);sge=n(g7e,"STRONG",{});var Wst=s(sge);IOo=r(Wst,"poolformer"),Wst.forEach(t),qOo=r(g7e," \u2014 "),BO=n(g7e,"A",{href:!0});var Hst=s(BO);NOo=r(Hst,"PoolFormerForImageClassification"),Hst.forEach(t),jOo=r(g7e," (PoolFormer model)"),g7e.forEach(t),DOo=i(Ee),Mv=n(Ee,"LI",{});var h7e=s(Mv);lge=n(h7e,"STRONG",{});var Ust=s(lge);GOo=r(Ust,"regnet"),Ust.forEach(t),OOo=r(h7e," \u2014 "),PO=n(h7e,"A",{href:!0});var Jst=s(PO);VOo=r(Jst,"RegNetForImageClassification"),Jst.forEach(t),XOo=r(h7e," (RegNet model)"),h7e.forEach(t),zOo=i(Ee),Ev=n(Ee,"LI",{});var p7e=s(Ev);ige=n(p7e,"STRONG",{});var Yst=s(ige);QOo=r(Yst,"resnet"),Yst.forEach(t),WOo=r(p7e," \u2014 "),IO=n(p7e,"A",{href:!0});var Kst=s(IO);HOo=r(Kst,"ResNetForImageClassification"),Kst.forEach(t),UOo=r(p7e," (ResNet model)"),p7e.forEach(t),JOo=i(Ee),Cv=n(Ee,"LI",{});var u7e=s(Cv);dge=n(u7e,"STRONG",{});var Zst=s(dge);YOo=r(Zst,"segformer"),Zst.forEach(t),KOo=r(u7e," \u2014 "),qO=n(u7e,"A",{href:!0});var elt=s(qO);ZOo=r(elt,"SegformerForImageClassification"),elt.forEach(t),eVo=r(u7e," (SegFormer model)"),u7e.forEach(t),oVo=i(Ee),wv=n(Ee,"LI",{});var _7e=s(wv);cge=n(_7e,"STRONG",{});var olt=s(cge);rVo=r(olt,"swin"),olt.forEach(t),tVo=r(_7e," \u2014 "),NO=n(_7e,"A",{href:!0});var rlt=s(NO);aVo=r(rlt,"SwinForImageClassification"),rlt.forEach(t),nVo=r(_7e," (Swin model)"),_7e.forEach(t),sVo=i(Ee),Av=n(Ee,"LI",{});var b7e=s(Av);fge=n(b7e,"STRONG",{});var tlt=s(fge);lVo=r(tlt,"van"),tlt.forEach(t),iVo=r(b7e," \u2014 "),jO=n(b7e,"A",{href:!0});var alt=s(jO);dVo=r(alt,"VanForImageClassification"),alt.forEach(t),cVo=r(b7e," (VAN model)"),b7e.forEach(t),fVo=i(Ee),yv=n(Ee,"LI",{});var v7e=s(yv);mge=n(v7e,"STRONG",{});var nlt=s(mge);mVo=r(nlt,"vit"),nlt.forEach(t),gVo=r(v7e," \u2014 "),DO=n(v7e,"A",{href:!0});var slt=s(DO);hVo=r(slt,"ViTForImageClassification"),slt.forEach(t),pVo=r(v7e," (ViT model)"),v7e.forEach(t),Ee.forEach(t),uVo=i(sa),Lv=n(sa,"P",{});var F7e=s(Lv);_Vo=r(F7e,"The model is set in evaluation mode by default using "),gge=n(F7e,"CODE",{});var llt=s(gge);bVo=r(llt,"model.eval()"),llt.forEach(t),vVo=r(F7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(F7e,"CODE",{});var ilt=s(hge);FVo=r(ilt,"model.train()"),ilt.forEach(t),F7e.forEach(t),TVo=i(sa),T(xv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),ABe=i(f),Yi=n(f,"H2",{class:!0});var LIe=s(Yi);$v=n(LIe,"A",{id:!0,class:!0,href:!0});var dlt=s($v);pge=n(dlt,"SPAN",{});var clt=s(pge);T(Uy.$$.fragment,clt),clt.forEach(t),dlt.forEach(t),MVo=i(LIe),uge=n(LIe,"SPAN",{});var flt=s(uge);EVo=r(flt,"AutoModelForVision2Seq"),flt.forEach(t),LIe.forEach(t),yBe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(Jy.$$.fragment,Ws),CVo=i(Ws),Ki=n(Ws,"P",{});var wY=s(Ki);wVo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GO=n(wY,"A",{href:!0});var mlt=s(GO);AVo=r(mlt,"from_pretrained()"),mlt.forEach(t),yVo=r(wY," class method or the "),OO=n(wY,"A",{href:!0});var glt=s(OO);LVo=r(glt,"from_config()"),glt.forEach(t),xVo=r(wY,` class
method.`),wY.forEach(t),$Vo=i(Ws),Yy=n(Ws,"P",{});var xIe=s(Yy);kVo=r(xIe,"This class cannot be instantiated directly using "),_ge=n(xIe,"CODE",{});var hlt=s(_ge);SVo=r(hlt,"__init__()"),hlt.forEach(t),RVo=r(xIe," (throws an error)."),xIe.forEach(t),BVo=i(Ws),ft=n(Ws,"DIV",{class:!0});var Q3=s(ft);T(Ky.$$.fragment,Q3),PVo=i(Q3),bge=n(Q3,"P",{});var plt=s(bge);IVo=r(plt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),plt.forEach(t),qVo=i(Q3),Zi=n(Q3,"P",{});var AY=s(Zi);NVo=r(AY,`Note:
Loading a model from its configuration file does `),vge=n(AY,"STRONG",{});var ult=s(vge);jVo=r(ult,"not"),ult.forEach(t),DVo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(AY,"A",{href:!0});var _lt=s(VO);GVo=r(_lt,"from_pretrained()"),_lt.forEach(t),OVo=r(AY," to load the model weights."),AY.forEach(t),VVo=i(Q3),T(kv.$$.fragment,Q3),Q3.forEach(t),XVo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(Zy.$$.fragment,la),zVo=i(la),Fge=n(la,"P",{});var blt=s(Fge);QVo=r(blt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),blt.forEach(t),WVo=i(la),Ba=n(la,"P",{});var W3=s(Ba);HVo=r(W3,"The model class to instantiate is selected based on the "),Tge=n(W3,"CODE",{});var vlt=s(Tge);UVo=r(vlt,"model_type"),vlt.forEach(t),JVo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(W3,"CODE",{});var Flt=s(Mge);YVo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),KVo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(W3,"CODE",{});var Tlt=s(Ege);ZVo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),eXo=r(W3,":"),W3.forEach(t),oXo=i(la),Cge=n(la,"UL",{});var Mlt=s(Cge);Sv=n(Mlt,"LI",{});var T7e=s(Sv);wge=n(T7e,"STRONG",{});var Elt=s(wge);rXo=r(Elt,"vision-encoder-decoder"),Elt.forEach(t),tXo=r(T7e," \u2014 "),XO=n(T7e,"A",{href:!0});var Clt=s(XO);aXo=r(Clt,"VisionEncoderDecoderModel"),Clt.forEach(t),nXo=r(T7e," (Vision Encoder decoder model)"),T7e.forEach(t),Mlt.forEach(t),sXo=i(la),Rv=n(la,"P",{});var M7e=s(Rv);lXo=r(M7e,"The model is set in evaluation mode by default using "),Age=n(M7e,"CODE",{});var wlt=s(Age);iXo=r(wlt,"model.eval()"),wlt.forEach(t),dXo=r(M7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(M7e,"CODE",{});var Alt=s(yge);cXo=r(Alt,"model.train()"),Alt.forEach(t),M7e.forEach(t),fXo=i(la),T(Bv.$$.fragment,la),la.forEach(t),Ws.forEach(t),LBe=i(f),ed=n(f,"H2",{class:!0});var $Ie=s(ed);Pv=n($Ie,"A",{id:!0,class:!0,href:!0});var ylt=s(Pv);Lge=n(ylt,"SPAN",{});var Llt=s(Lge);T(eL.$$.fragment,Llt),Llt.forEach(t),ylt.forEach(t),mXo=i($Ie),xge=n($Ie,"SPAN",{});var xlt=s(xge);gXo=r(xlt,"AutoModelForAudioClassification"),xlt.forEach(t),$Ie.forEach(t),xBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(oL.$$.fragment,Hs),hXo=i(Hs),od=n(Hs,"P",{});var yY=s(od);pXo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zO=n(yY,"A",{href:!0});var $lt=s(zO);uXo=r($lt,"from_pretrained()"),$lt.forEach(t),_Xo=r(yY," class method or the "),QO=n(yY,"A",{href:!0});var klt=s(QO);bXo=r(klt,"from_config()"),klt.forEach(t),vXo=r(yY,` class
method.`),yY.forEach(t),FXo=i(Hs),rL=n(Hs,"P",{});var kIe=s(rL);TXo=r(kIe,"This class cannot be instantiated directly using "),$ge=n(kIe,"CODE",{});var Slt=s($ge);MXo=r(Slt,"__init__()"),Slt.forEach(t),EXo=r(kIe," (throws an error)."),kIe.forEach(t),CXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var H3=s(mt);T(tL.$$.fragment,H3),wXo=i(H3),kge=n(H3,"P",{});var Rlt=s(kge);AXo=r(Rlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Rlt.forEach(t),yXo=i(H3),rd=n(H3,"P",{});var LY=s(rd);LXo=r(LY,`Note:
Loading a model from its configuration file does `),Sge=n(LY,"STRONG",{});var Blt=s(Sge);xXo=r(Blt,"not"),Blt.forEach(t),$Xo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(LY,"A",{href:!0});var Plt=s(WO);kXo=r(Plt,"from_pretrained()"),Plt.forEach(t),SXo=r(LY," to load the model weights."),LY.forEach(t),RXo=i(H3),T(Iv.$$.fragment,H3),H3.forEach(t),BXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(aL.$$.fragment,ia),PXo=i(ia),Rge=n(ia,"P",{});var Ilt=s(Rge);IXo=r(Ilt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ilt.forEach(t),qXo=i(ia),Pa=n(ia,"P",{});var U3=s(Pa);NXo=r(U3,"The model class to instantiate is selected based on the "),Bge=n(U3,"CODE",{});var qlt=s(Bge);jXo=r(qlt,"model_type"),qlt.forEach(t),DXo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Pge=n(U3,"CODE",{});var Nlt=s(Pge);GXo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),OXo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=n(U3,"CODE",{});var jlt=s(Ige);VXo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),XXo=r(U3,":"),U3.forEach(t),zXo=i(ia),Ne=n(ia,"UL",{});var _o=s(Ne);qv=n(_o,"LI",{});var E7e=s(qv);qge=n(E7e,"STRONG",{});var Dlt=s(qge);QXo=r(Dlt,"data2vec-audio"),Dlt.forEach(t),WXo=r(E7e," \u2014 "),HO=n(E7e,"A",{href:!0});var Glt=s(HO);HXo=r(Glt,"Data2VecAudioForSequenceClassification"),Glt.forEach(t),UXo=r(E7e," (Data2VecAudio model)"),E7e.forEach(t),JXo=i(_o),Nv=n(_o,"LI",{});var C7e=s(Nv);Nge=n(C7e,"STRONG",{});var Olt=s(Nge);YXo=r(Olt,"hubert"),Olt.forEach(t),KXo=r(C7e," \u2014 "),UO=n(C7e,"A",{href:!0});var Vlt=s(UO);ZXo=r(Vlt,"HubertForSequenceClassification"),Vlt.forEach(t),ezo=r(C7e," (Hubert model)"),C7e.forEach(t),ozo=i(_o),jv=n(_o,"LI",{});var w7e=s(jv);jge=n(w7e,"STRONG",{});var Xlt=s(jge);rzo=r(Xlt,"sew"),Xlt.forEach(t),tzo=r(w7e," \u2014 "),JO=n(w7e,"A",{href:!0});var zlt=s(JO);azo=r(zlt,"SEWForSequenceClassification"),zlt.forEach(t),nzo=r(w7e," (SEW model)"),w7e.forEach(t),szo=i(_o),Dv=n(_o,"LI",{});var A7e=s(Dv);Dge=n(A7e,"STRONG",{});var Qlt=s(Dge);lzo=r(Qlt,"sew-d"),Qlt.forEach(t),izo=r(A7e," \u2014 "),YO=n(A7e,"A",{href:!0});var Wlt=s(YO);dzo=r(Wlt,"SEWDForSequenceClassification"),Wlt.forEach(t),czo=r(A7e," (SEW-D model)"),A7e.forEach(t),fzo=i(_o),Gv=n(_o,"LI",{});var y7e=s(Gv);Gge=n(y7e,"STRONG",{});var Hlt=s(Gge);mzo=r(Hlt,"unispeech"),Hlt.forEach(t),gzo=r(y7e," \u2014 "),KO=n(y7e,"A",{href:!0});var Ult=s(KO);hzo=r(Ult,"UniSpeechForSequenceClassification"),Ult.forEach(t),pzo=r(y7e," (UniSpeech model)"),y7e.forEach(t),uzo=i(_o),Ov=n(_o,"LI",{});var L7e=s(Ov);Oge=n(L7e,"STRONG",{});var Jlt=s(Oge);_zo=r(Jlt,"unispeech-sat"),Jlt.forEach(t),bzo=r(L7e," \u2014 "),ZO=n(L7e,"A",{href:!0});var Ylt=s(ZO);vzo=r(Ylt,"UniSpeechSatForSequenceClassification"),Ylt.forEach(t),Fzo=r(L7e," (UniSpeechSat model)"),L7e.forEach(t),Tzo=i(_o),Vv=n(_o,"LI",{});var x7e=s(Vv);Vge=n(x7e,"STRONG",{});var Klt=s(Vge);Mzo=r(Klt,"wav2vec2"),Klt.forEach(t),Ezo=r(x7e," \u2014 "),eV=n(x7e,"A",{href:!0});var Zlt=s(eV);Czo=r(Zlt,"Wav2Vec2ForSequenceClassification"),Zlt.forEach(t),wzo=r(x7e," (Wav2Vec2 model)"),x7e.forEach(t),Azo=i(_o),Xv=n(_o,"LI",{});var $7e=s(Xv);Xge=n($7e,"STRONG",{});var eit=s(Xge);yzo=r(eit,"wavlm"),eit.forEach(t),Lzo=r($7e," \u2014 "),oV=n($7e,"A",{href:!0});var oit=s(oV);xzo=r(oit,"WavLMForSequenceClassification"),oit.forEach(t),$zo=r($7e," (WavLM model)"),$7e.forEach(t),_o.forEach(t),kzo=i(ia),zv=n(ia,"P",{});var k7e=s(zv);Szo=r(k7e,"The model is set in evaluation mode by default using "),zge=n(k7e,"CODE",{});var rit=s(zge);Rzo=r(rit,"model.eval()"),rit.forEach(t),Bzo=r(k7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(k7e,"CODE",{});var tit=s(Qge);Pzo=r(tit,"model.train()"),tit.forEach(t),k7e.forEach(t),Izo=i(ia),T(Qv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),$Be=i(f),td=n(f,"H2",{class:!0});var SIe=s(td);Wv=n(SIe,"A",{id:!0,class:!0,href:!0});var ait=s(Wv);Wge=n(ait,"SPAN",{});var nit=s(Wge);T(nL.$$.fragment,nit),nit.forEach(t),ait.forEach(t),qzo=i(SIe),Hge=n(SIe,"SPAN",{});var sit=s(Hge);Nzo=r(sit,"AutoModelForAudioFrameClassification"),sit.forEach(t),SIe.forEach(t),kBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(sL.$$.fragment,Us),jzo=i(Us),ad=n(Us,"P",{});var xY=s(ad);Dzo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rV=n(xY,"A",{href:!0});var lit=s(rV);Gzo=r(lit,"from_pretrained()"),lit.forEach(t),Ozo=r(xY," class method or the "),tV=n(xY,"A",{href:!0});var iit=s(tV);Vzo=r(iit,"from_config()"),iit.forEach(t),Xzo=r(xY,` class
method.`),xY.forEach(t),zzo=i(Us),lL=n(Us,"P",{});var RIe=s(lL);Qzo=r(RIe,"This class cannot be instantiated directly using "),Uge=n(RIe,"CODE",{});var dit=s(Uge);Wzo=r(dit,"__init__()"),dit.forEach(t),Hzo=r(RIe," (throws an error)."),RIe.forEach(t),Uzo=i(Us),gt=n(Us,"DIV",{class:!0});var J3=s(gt);T(iL.$$.fragment,J3),Jzo=i(J3),Jge=n(J3,"P",{});var cit=s(Jge);Yzo=r(cit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cit.forEach(t),Kzo=i(J3),nd=n(J3,"P",{});var $Y=s(nd);Zzo=r($Y,`Note:
Loading a model from its configuration file does `),Yge=n($Y,"STRONG",{});var fit=s(Yge);eQo=r(fit,"not"),fit.forEach(t),oQo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n($Y,"A",{href:!0});var mit=s(aV);rQo=r(mit,"from_pretrained()"),mit.forEach(t),tQo=r($Y," to load the model weights."),$Y.forEach(t),aQo=i(J3),T(Hv.$$.fragment,J3),J3.forEach(t),nQo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(dL.$$.fragment,da),sQo=i(da),Kge=n(da,"P",{});var git=s(Kge);lQo=r(git,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),git.forEach(t),iQo=i(da),Ia=n(da,"P",{});var Y3=s(Ia);dQo=r(Y3,"The model class to instantiate is selected based on the "),Zge=n(Y3,"CODE",{});var hit=s(Zge);cQo=r(hit,"model_type"),hit.forEach(t),fQo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),ehe=n(Y3,"CODE",{});var pit=s(ehe);mQo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),gQo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ohe=n(Y3,"CODE",{});var uit=s(ohe);hQo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),pQo=r(Y3,":"),Y3.forEach(t),uQo=i(da),qa=n(da,"UL",{});var K3=s(qa);Uv=n(K3,"LI",{});var S7e=s(Uv);rhe=n(S7e,"STRONG",{});var _it=s(rhe);_Qo=r(_it,"data2vec-audio"),_it.forEach(t),bQo=r(S7e," \u2014 "),nV=n(S7e,"A",{href:!0});var bit=s(nV);vQo=r(bit,"Data2VecAudioForAudioFrameClassification"),bit.forEach(t),FQo=r(S7e," (Data2VecAudio model)"),S7e.forEach(t),TQo=i(K3),Jv=n(K3,"LI",{});var R7e=s(Jv);the=n(R7e,"STRONG",{});var vit=s(the);MQo=r(vit,"unispeech-sat"),vit.forEach(t),EQo=r(R7e," \u2014 "),sV=n(R7e,"A",{href:!0});var Fit=s(sV);CQo=r(Fit,"UniSpeechSatForAudioFrameClassification"),Fit.forEach(t),wQo=r(R7e," (UniSpeechSat model)"),R7e.forEach(t),AQo=i(K3),Yv=n(K3,"LI",{});var B7e=s(Yv);ahe=n(B7e,"STRONG",{});var Tit=s(ahe);yQo=r(Tit,"wav2vec2"),Tit.forEach(t),LQo=r(B7e," \u2014 "),lV=n(B7e,"A",{href:!0});var Mit=s(lV);xQo=r(Mit,"Wav2Vec2ForAudioFrameClassification"),Mit.forEach(t),$Qo=r(B7e," (Wav2Vec2 model)"),B7e.forEach(t),kQo=i(K3),Kv=n(K3,"LI",{});var P7e=s(Kv);nhe=n(P7e,"STRONG",{});var Eit=s(nhe);SQo=r(Eit,"wavlm"),Eit.forEach(t),RQo=r(P7e," \u2014 "),iV=n(P7e,"A",{href:!0});var Cit=s(iV);BQo=r(Cit,"WavLMForAudioFrameClassification"),Cit.forEach(t),PQo=r(P7e," (WavLM model)"),P7e.forEach(t),K3.forEach(t),IQo=i(da),Zv=n(da,"P",{});var I7e=s(Zv);qQo=r(I7e,"The model is set in evaluation mode by default using "),she=n(I7e,"CODE",{});var wit=s(she);NQo=r(wit,"model.eval()"),wit.forEach(t),jQo=r(I7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n(I7e,"CODE",{});var Ait=s(lhe);DQo=r(Ait,"model.train()"),Ait.forEach(t),I7e.forEach(t),GQo=i(da),T(eF.$$.fragment,da),da.forEach(t),Us.forEach(t),SBe=i(f),sd=n(f,"H2",{class:!0});var BIe=s(sd);oF=n(BIe,"A",{id:!0,class:!0,href:!0});var yit=s(oF);ihe=n(yit,"SPAN",{});var Lit=s(ihe);T(cL.$$.fragment,Lit),Lit.forEach(t),yit.forEach(t),OQo=i(BIe),dhe=n(BIe,"SPAN",{});var xit=s(dhe);VQo=r(xit,"AutoModelForCTC"),xit.forEach(t),BIe.forEach(t),RBe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(fL.$$.fragment,Js),XQo=i(Js),ld=n(Js,"P",{});var kY=s(ld);zQo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dV=n(kY,"A",{href:!0});var $it=s(dV);QQo=r($it,"from_pretrained()"),$it.forEach(t),WQo=r(kY," class method or the "),cV=n(kY,"A",{href:!0});var kit=s(cV);HQo=r(kit,"from_config()"),kit.forEach(t),UQo=r(kY,` class
method.`),kY.forEach(t),JQo=i(Js),mL=n(Js,"P",{});var PIe=s(mL);YQo=r(PIe,"This class cannot be instantiated directly using "),che=n(PIe,"CODE",{});var Sit=s(che);KQo=r(Sit,"__init__()"),Sit.forEach(t),ZQo=r(PIe," (throws an error)."),PIe.forEach(t),eWo=i(Js),ht=n(Js,"DIV",{class:!0});var Z3=s(ht);T(gL.$$.fragment,Z3),oWo=i(Z3),fhe=n(Z3,"P",{});var Rit=s(fhe);rWo=r(Rit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rit.forEach(t),tWo=i(Z3),id=n(Z3,"P",{});var SY=s(id);aWo=r(SY,`Note:
Loading a model from its configuration file does `),mhe=n(SY,"STRONG",{});var Bit=s(mhe);nWo=r(Bit,"not"),Bit.forEach(t),sWo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=n(SY,"A",{href:!0});var Pit=s(fV);lWo=r(Pit,"from_pretrained()"),Pit.forEach(t),iWo=r(SY," to load the model weights."),SY.forEach(t),dWo=i(Z3),T(rF.$$.fragment,Z3),Z3.forEach(t),cWo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(hL.$$.fragment,ca),fWo=i(ca),ghe=n(ca,"P",{});var Iit=s(ghe);mWo=r(Iit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Iit.forEach(t),gWo=i(ca),Na=n(ca,"P",{});var ew=s(Na);hWo=r(ew,"The model class to instantiate is selected based on the "),hhe=n(ew,"CODE",{});var qit=s(hhe);pWo=r(qit,"model_type"),qit.forEach(t),uWo=r(ew,` property of the config object (either
passed as an argument or loaded from `),phe=n(ew,"CODE",{});var Nit=s(phe);_Wo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),bWo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(ew,"CODE",{});var jit=s(uhe);vWo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),FWo=r(ew,":"),ew.forEach(t),TWo=i(ca),ke=n(ca,"UL",{});var Ge=s(ke);tF=n(Ge,"LI",{});var q7e=s(tF);_he=n(q7e,"STRONG",{});var Dit=s(_he);MWo=r(Dit,"data2vec-audio"),Dit.forEach(t),EWo=r(q7e," \u2014 "),mV=n(q7e,"A",{href:!0});var Git=s(mV);CWo=r(Git,"Data2VecAudioForCTC"),Git.forEach(t),wWo=r(q7e," (Data2VecAudio model)"),q7e.forEach(t),AWo=i(Ge),aF=n(Ge,"LI",{});var N7e=s(aF);bhe=n(N7e,"STRONG",{});var Oit=s(bhe);yWo=r(Oit,"hubert"),Oit.forEach(t),LWo=r(N7e," \u2014 "),gV=n(N7e,"A",{href:!0});var Vit=s(gV);xWo=r(Vit,"HubertForCTC"),Vit.forEach(t),$Wo=r(N7e," (Hubert model)"),N7e.forEach(t),kWo=i(Ge),nF=n(Ge,"LI",{});var j7e=s(nF);vhe=n(j7e,"STRONG",{});var Xit=s(vhe);SWo=r(Xit,"mctc"),Xit.forEach(t),RWo=r(j7e," \u2014 "),hV=n(j7e,"A",{href:!0});var zit=s(hV);BWo=r(zit,"MCTCForCTC"),zit.forEach(t),PWo=r(j7e," (MCTC model)"),j7e.forEach(t),IWo=i(Ge),sF=n(Ge,"LI",{});var D7e=s(sF);Fhe=n(D7e,"STRONG",{});var Qit=s(Fhe);qWo=r(Qit,"sew"),Qit.forEach(t),NWo=r(D7e," \u2014 "),pV=n(D7e,"A",{href:!0});var Wit=s(pV);jWo=r(Wit,"SEWForCTC"),Wit.forEach(t),DWo=r(D7e," (SEW model)"),D7e.forEach(t),GWo=i(Ge),lF=n(Ge,"LI",{});var G7e=s(lF);The=n(G7e,"STRONG",{});var Hit=s(The);OWo=r(Hit,"sew-d"),Hit.forEach(t),VWo=r(G7e," \u2014 "),uV=n(G7e,"A",{href:!0});var Uit=s(uV);XWo=r(Uit,"SEWDForCTC"),Uit.forEach(t),zWo=r(G7e," (SEW-D model)"),G7e.forEach(t),QWo=i(Ge),iF=n(Ge,"LI",{});var O7e=s(iF);Mhe=n(O7e,"STRONG",{});var Jit=s(Mhe);WWo=r(Jit,"unispeech"),Jit.forEach(t),HWo=r(O7e," \u2014 "),_V=n(O7e,"A",{href:!0});var Yit=s(_V);UWo=r(Yit,"UniSpeechForCTC"),Yit.forEach(t),JWo=r(O7e," (UniSpeech model)"),O7e.forEach(t),YWo=i(Ge),dF=n(Ge,"LI",{});var V7e=s(dF);Ehe=n(V7e,"STRONG",{});var Kit=s(Ehe);KWo=r(Kit,"unispeech-sat"),Kit.forEach(t),ZWo=r(V7e," \u2014 "),bV=n(V7e,"A",{href:!0});var Zit=s(bV);eHo=r(Zit,"UniSpeechSatForCTC"),Zit.forEach(t),oHo=r(V7e," (UniSpeechSat model)"),V7e.forEach(t),rHo=i(Ge),cF=n(Ge,"LI",{});var X7e=s(cF);Che=n(X7e,"STRONG",{});var edt=s(Che);tHo=r(edt,"wav2vec2"),edt.forEach(t),aHo=r(X7e," \u2014 "),vV=n(X7e,"A",{href:!0});var odt=s(vV);nHo=r(odt,"Wav2Vec2ForCTC"),odt.forEach(t),sHo=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),lHo=i(Ge),fF=n(Ge,"LI",{});var z7e=s(fF);whe=n(z7e,"STRONG",{});var rdt=s(whe);iHo=r(rdt,"wavlm"),rdt.forEach(t),dHo=r(z7e," \u2014 "),FV=n(z7e,"A",{href:!0});var tdt=s(FV);cHo=r(tdt,"WavLMForCTC"),tdt.forEach(t),fHo=r(z7e," (WavLM model)"),z7e.forEach(t),Ge.forEach(t),mHo=i(ca),mF=n(ca,"P",{});var Q7e=s(mF);gHo=r(Q7e,"The model is set in evaluation mode by default using "),Ahe=n(Q7e,"CODE",{});var adt=s(Ahe);hHo=r(adt,"model.eval()"),adt.forEach(t),pHo=r(Q7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(Q7e,"CODE",{});var ndt=s(yhe);uHo=r(ndt,"model.train()"),ndt.forEach(t),Q7e.forEach(t),_Ho=i(ca),T(gF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),BBe=i(f),dd=n(f,"H2",{class:!0});var IIe=s(dd);hF=n(IIe,"A",{id:!0,class:!0,href:!0});var sdt=s(hF);Lhe=n(sdt,"SPAN",{});var ldt=s(Lhe);T(pL.$$.fragment,ldt),ldt.forEach(t),sdt.forEach(t),bHo=i(IIe),xhe=n(IIe,"SPAN",{});var idt=s(xhe);vHo=r(idt,"AutoModelForSpeechSeq2Seq"),idt.forEach(t),IIe.forEach(t),PBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(uL.$$.fragment,Ys),FHo=i(Ys),cd=n(Ys,"P",{});var RY=s(cd);THo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TV=n(RY,"A",{href:!0});var ddt=s(TV);MHo=r(ddt,"from_pretrained()"),ddt.forEach(t),EHo=r(RY," class method or the "),MV=n(RY,"A",{href:!0});var cdt=s(MV);CHo=r(cdt,"from_config()"),cdt.forEach(t),wHo=r(RY,` class
method.`),RY.forEach(t),AHo=i(Ys),_L=n(Ys,"P",{});var qIe=s(_L);yHo=r(qIe,"This class cannot be instantiated directly using "),$he=n(qIe,"CODE",{});var fdt=s($he);LHo=r(fdt,"__init__()"),fdt.forEach(t),xHo=r(qIe," (throws an error)."),qIe.forEach(t),$Ho=i(Ys),pt=n(Ys,"DIV",{class:!0});var ow=s(pt);T(bL.$$.fragment,ow),kHo=i(ow),khe=n(ow,"P",{});var mdt=s(khe);SHo=r(mdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),mdt.forEach(t),RHo=i(ow),fd=n(ow,"P",{});var BY=s(fd);BHo=r(BY,`Note:
Loading a model from its configuration file does `),She=n(BY,"STRONG",{});var gdt=s(She);PHo=r(gdt,"not"),gdt.forEach(t),IHo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(BY,"A",{href:!0});var hdt=s(EV);qHo=r(hdt,"from_pretrained()"),hdt.forEach(t),NHo=r(BY," to load the model weights."),BY.forEach(t),jHo=i(ow),T(pF.$$.fragment,ow),ow.forEach(t),DHo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(vL.$$.fragment,fa),GHo=i(fa),Rhe=n(fa,"P",{});var pdt=s(Rhe);OHo=r(pdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pdt.forEach(t),VHo=i(fa),ja=n(fa,"P",{});var rw=s(ja);XHo=r(rw,"The model class to instantiate is selected based on the "),Bhe=n(rw,"CODE",{});var udt=s(Bhe);zHo=r(udt,"model_type"),udt.forEach(t),QHo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Phe=n(rw,"CODE",{});var _dt=s(Phe);WHo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),HHo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(rw,"CODE",{});var bdt=s(Ihe);UHo=r(bdt,"pretrained_model_name_or_path"),bdt.forEach(t),JHo=r(rw,":"),rw.forEach(t),YHo=i(fa),FL=n(fa,"UL",{});var NIe=s(FL);uF=n(NIe,"LI",{});var W7e=s(uF);qhe=n(W7e,"STRONG",{});var vdt=s(qhe);KHo=r(vdt,"speech-encoder-decoder"),vdt.forEach(t),ZHo=r(W7e," \u2014 "),CV=n(W7e,"A",{href:!0});var Fdt=s(CV);eUo=r(Fdt,"SpeechEncoderDecoderModel"),Fdt.forEach(t),oUo=r(W7e," (Speech Encoder decoder model)"),W7e.forEach(t),rUo=i(NIe),_F=n(NIe,"LI",{});var H7e=s(_F);Nhe=n(H7e,"STRONG",{});var Tdt=s(Nhe);tUo=r(Tdt,"speech_to_text"),Tdt.forEach(t),aUo=r(H7e," \u2014 "),wV=n(H7e,"A",{href:!0});var Mdt=s(wV);nUo=r(Mdt,"Speech2TextForConditionalGeneration"),Mdt.forEach(t),sUo=r(H7e," (Speech2Text model)"),H7e.forEach(t),NIe.forEach(t),lUo=i(fa),bF=n(fa,"P",{});var U7e=s(bF);iUo=r(U7e,"The model is set in evaluation mode by default using "),jhe=n(U7e,"CODE",{});var Edt=s(jhe);dUo=r(Edt,"model.eval()"),Edt.forEach(t),cUo=r(U7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(U7e,"CODE",{});var Cdt=s(Dhe);fUo=r(Cdt,"model.train()"),Cdt.forEach(t),U7e.forEach(t),mUo=i(fa),T(vF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),IBe=i(f),md=n(f,"H2",{class:!0});var jIe=s(md);FF=n(jIe,"A",{id:!0,class:!0,href:!0});var wdt=s(FF);Ghe=n(wdt,"SPAN",{});var Adt=s(Ghe);T(TL.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),gUo=i(jIe),Ohe=n(jIe,"SPAN",{});var ydt=s(Ohe);hUo=r(ydt,"AutoModelForAudioXVector"),ydt.forEach(t),jIe.forEach(t),qBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(ML.$$.fragment,Ks),pUo=i(Ks),gd=n(Ks,"P",{});var PY=s(gd);uUo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),AV=n(PY,"A",{href:!0});var Ldt=s(AV);_Uo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),bUo=r(PY," class method or the "),yV=n(PY,"A",{href:!0});var xdt=s(yV);vUo=r(xdt,"from_config()"),xdt.forEach(t),FUo=r(PY,` class
method.`),PY.forEach(t),TUo=i(Ks),EL=n(Ks,"P",{});var DIe=s(EL);MUo=r(DIe,"This class cannot be instantiated directly using "),Vhe=n(DIe,"CODE",{});var $dt=s(Vhe);EUo=r($dt,"__init__()"),$dt.forEach(t),CUo=r(DIe," (throws an error)."),DIe.forEach(t),wUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var tw=s(ut);T(CL.$$.fragment,tw),AUo=i(tw),Xhe=n(tw,"P",{});var kdt=s(Xhe);yUo=r(kdt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),kdt.forEach(t),LUo=i(tw),hd=n(tw,"P",{});var IY=s(hd);xUo=r(IY,`Note:
Loading a model from its configuration file does `),zhe=n(IY,"STRONG",{});var Sdt=s(zhe);$Uo=r(Sdt,"not"),Sdt.forEach(t),kUo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LV=n(IY,"A",{href:!0});var Rdt=s(LV);SUo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),RUo=r(IY," to load the model weights."),IY.forEach(t),BUo=i(tw),T(TF.$$.fragment,tw),tw.forEach(t),PUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(wL.$$.fragment,ma),IUo=i(ma),Qhe=n(ma,"P",{});var Bdt=s(Qhe);qUo=r(Bdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bdt.forEach(t),NUo=i(ma),Da=n(ma,"P",{});var aw=s(Da);jUo=r(aw,"The model class to instantiate is selected based on the "),Whe=n(aw,"CODE",{});var Pdt=s(Whe);DUo=r(Pdt,"model_type"),Pdt.forEach(t),GUo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(aw,"CODE",{});var Idt=s(Hhe);OUo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),VUo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(aw,"CODE",{});var qdt=s(Uhe);XUo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),zUo=r(aw,":"),aw.forEach(t),QUo=i(ma),Ga=n(ma,"UL",{});var nw=s(Ga);MF=n(nw,"LI",{});var J7e=s(MF);Jhe=n(J7e,"STRONG",{});var Ndt=s(Jhe);WUo=r(Ndt,"data2vec-audio"),Ndt.forEach(t),HUo=r(J7e," \u2014 "),xV=n(J7e,"A",{href:!0});var jdt=s(xV);UUo=r(jdt,"Data2VecAudioForXVector"),jdt.forEach(t),JUo=r(J7e," (Data2VecAudio model)"),J7e.forEach(t),YUo=i(nw),EF=n(nw,"LI",{});var Y7e=s(EF);Yhe=n(Y7e,"STRONG",{});var Ddt=s(Yhe);KUo=r(Ddt,"unispeech-sat"),Ddt.forEach(t),ZUo=r(Y7e," \u2014 "),$V=n(Y7e,"A",{href:!0});var Gdt=s($V);eJo=r(Gdt,"UniSpeechSatForXVector"),Gdt.forEach(t),oJo=r(Y7e," (UniSpeechSat model)"),Y7e.forEach(t),rJo=i(nw),CF=n(nw,"LI",{});var K7e=s(CF);Khe=n(K7e,"STRONG",{});var Odt=s(Khe);tJo=r(Odt,"wav2vec2"),Odt.forEach(t),aJo=r(K7e," \u2014 "),kV=n(K7e,"A",{href:!0});var Vdt=s(kV);nJo=r(Vdt,"Wav2Vec2ForXVector"),Vdt.forEach(t),sJo=r(K7e," (Wav2Vec2 model)"),K7e.forEach(t),lJo=i(nw),wF=n(nw,"LI",{});var Z7e=s(wF);Zhe=n(Z7e,"STRONG",{});var Xdt=s(Zhe);iJo=r(Xdt,"wavlm"),Xdt.forEach(t),dJo=r(Z7e," \u2014 "),SV=n(Z7e,"A",{href:!0});var zdt=s(SV);cJo=r(zdt,"WavLMForXVector"),zdt.forEach(t),fJo=r(Z7e," (WavLM model)"),Z7e.forEach(t),nw.forEach(t),mJo=i(ma),AF=n(ma,"P",{});var exe=s(AF);gJo=r(exe,"The model is set in evaluation mode by default using "),epe=n(exe,"CODE",{});var Qdt=s(epe);hJo=r(Qdt,"model.eval()"),Qdt.forEach(t),pJo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(exe,"CODE",{});var Wdt=s(ope);uJo=r(Wdt,"model.train()"),Wdt.forEach(t),exe.forEach(t),_Jo=i(ma),T(yF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),NBe=i(f),pd=n(f,"H2",{class:!0});var GIe=s(pd);LF=n(GIe,"A",{id:!0,class:!0,href:!0});var Hdt=s(LF);rpe=n(Hdt,"SPAN",{});var Udt=s(rpe);T(AL.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),bJo=i(GIe),tpe=n(GIe,"SPAN",{});var Jdt=s(tpe);vJo=r(Jdt,"AutoModelForMaskedImageModeling"),Jdt.forEach(t),GIe.forEach(t),jBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(yL.$$.fragment,Zs),FJo=i(Zs),ud=n(Zs,"P",{});var qY=s(ud);TJo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RV=n(qY,"A",{href:!0});var Ydt=s(RV);MJo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),EJo=r(qY," class method or the "),BV=n(qY,"A",{href:!0});var Kdt=s(BV);CJo=r(Kdt,"from_config()"),Kdt.forEach(t),wJo=r(qY,` class
method.`),qY.forEach(t),AJo=i(Zs),LL=n(Zs,"P",{});var OIe=s(LL);yJo=r(OIe,"This class cannot be instantiated directly using "),ape=n(OIe,"CODE",{});var Zdt=s(ape);LJo=r(Zdt,"__init__()"),Zdt.forEach(t),xJo=r(OIe," (throws an error)."),OIe.forEach(t),$Jo=i(Zs),_t=n(Zs,"DIV",{class:!0});var sw=s(_t);T(xL.$$.fragment,sw),kJo=i(sw),npe=n(sw,"P",{});var ect=s(npe);SJo=r(ect,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),ect.forEach(t),RJo=i(sw),_d=n(sw,"P",{});var NY=s(_d);BJo=r(NY,`Note:
Loading a model from its configuration file does `),spe=n(NY,"STRONG",{});var oct=s(spe);PJo=r(oct,"not"),oct.forEach(t),IJo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(NY,"A",{href:!0});var rct=s(PV);qJo=r(rct,"from_pretrained()"),rct.forEach(t),NJo=r(NY," to load the model weights."),NY.forEach(t),jJo=i(sw),T(xF.$$.fragment,sw),sw.forEach(t),DJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T($L.$$.fragment,ga),GJo=i(ga),lpe=n(ga,"P",{});var tct=s(lpe);OJo=r(tct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tct.forEach(t),VJo=i(ga),Oa=n(ga,"P",{});var lw=s(Oa);XJo=r(lw,"The model class to instantiate is selected based on the "),ipe=n(lw,"CODE",{});var act=s(ipe);zJo=r(act,"model_type"),act.forEach(t),QJo=r(lw,` property of the config object (either
passed as an argument or loaded from `),dpe=n(lw,"CODE",{});var nct=s(dpe);WJo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),HJo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(lw,"CODE",{});var sct=s(cpe);UJo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),JJo=r(lw,":"),lw.forEach(t),YJo=i(ga),bd=n(ga,"UL",{});var jY=s(bd);$F=n(jY,"LI",{});var oxe=s($F);fpe=n(oxe,"STRONG",{});var lct=s(fpe);KJo=r(lct,"deit"),lct.forEach(t),ZJo=r(oxe," \u2014 "),IV=n(oxe,"A",{href:!0});var ict=s(IV);eYo=r(ict,"DeiTForMaskedImageModeling"),ict.forEach(t),oYo=r(oxe," (DeiT model)"),oxe.forEach(t),rYo=i(jY),kF=n(jY,"LI",{});var rxe=s(kF);mpe=n(rxe,"STRONG",{});var dct=s(mpe);tYo=r(dct,"swin"),dct.forEach(t),aYo=r(rxe," \u2014 "),qV=n(rxe,"A",{href:!0});var cct=s(qV);nYo=r(cct,"SwinForMaskedImageModeling"),cct.forEach(t),sYo=r(rxe," (Swin model)"),rxe.forEach(t),lYo=i(jY),SF=n(jY,"LI",{});var txe=s(SF);gpe=n(txe,"STRONG",{});var fct=s(gpe);iYo=r(fct,"vit"),fct.forEach(t),dYo=r(txe," \u2014 "),NV=n(txe,"A",{href:!0});var mct=s(NV);cYo=r(mct,"ViTForMaskedImageModeling"),mct.forEach(t),fYo=r(txe," (ViT model)"),txe.forEach(t),jY.forEach(t),mYo=i(ga),RF=n(ga,"P",{});var axe=s(RF);gYo=r(axe,"The model is set in evaluation mode by default using "),hpe=n(axe,"CODE",{});var gct=s(hpe);hYo=r(gct,"model.eval()"),gct.forEach(t),pYo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(axe,"CODE",{});var hct=s(ppe);uYo=r(hct,"model.train()"),hct.forEach(t),axe.forEach(t),_Yo=i(ga),T(BF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),DBe=i(f),vd=n(f,"H2",{class:!0});var VIe=s(vd);PF=n(VIe,"A",{id:!0,class:!0,href:!0});var pct=s(PF);upe=n(pct,"SPAN",{});var uct=s(upe);T(kL.$$.fragment,uct),uct.forEach(t),pct.forEach(t),bYo=i(VIe),_pe=n(VIe,"SPAN",{});var _ct=s(_pe);vYo=r(_ct,"AutoModelForObjectDetection"),_ct.forEach(t),VIe.forEach(t),GBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(SL.$$.fragment,el),FYo=i(el),Fd=n(el,"P",{});var DY=s(Fd);TYo=r(DY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),jV=n(DY,"A",{href:!0});var bct=s(jV);MYo=r(bct,"from_pretrained()"),bct.forEach(t),EYo=r(DY," class method or the "),DV=n(DY,"A",{href:!0});var vct=s(DV);CYo=r(vct,"from_config()"),vct.forEach(t),wYo=r(DY,` class
method.`),DY.forEach(t),AYo=i(el),RL=n(el,"P",{});var XIe=s(RL);yYo=r(XIe,"This class cannot be instantiated directly using "),bpe=n(XIe,"CODE",{});var Fct=s(bpe);LYo=r(Fct,"__init__()"),Fct.forEach(t),xYo=r(XIe," (throws an error)."),XIe.forEach(t),$Yo=i(el),bt=n(el,"DIV",{class:!0});var iw=s(bt);T(BL.$$.fragment,iw),kYo=i(iw),vpe=n(iw,"P",{});var Tct=s(vpe);SYo=r(Tct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Tct.forEach(t),RYo=i(iw),Td=n(iw,"P",{});var GY=s(Td);BYo=r(GY,`Note:
Loading a model from its configuration file does `),Fpe=n(GY,"STRONG",{});var Mct=s(Fpe);PYo=r(Mct,"not"),Mct.forEach(t),IYo=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(GY,"A",{href:!0});var Ect=s(GV);qYo=r(Ect,"from_pretrained()"),Ect.forEach(t),NYo=r(GY," to load the model weights."),GY.forEach(t),jYo=i(iw),T(IF.$$.fragment,iw),iw.forEach(t),DYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(PL.$$.fragment,ha),GYo=i(ha),Tpe=n(ha,"P",{});var Cct=s(Tpe);OYo=r(Cct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Cct.forEach(t),VYo=i(ha),Va=n(ha,"P",{});var dw=s(Va);XYo=r(dw,"The model class to instantiate is selected based on the "),Mpe=n(dw,"CODE",{});var wct=s(Mpe);zYo=r(wct,"model_type"),wct.forEach(t),QYo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Epe=n(dw,"CODE",{});var Act=s(Epe);WYo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),HYo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(dw,"CODE",{});var yct=s(Cpe);UYo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),JYo=r(dw,":"),dw.forEach(t),YYo=i(ha),wpe=n(ha,"UL",{});var Lct=s(wpe);qF=n(Lct,"LI",{});var nxe=s(qF);Ape=n(nxe,"STRONG",{});var xct=s(Ape);KYo=r(xct,"detr"),xct.forEach(t),ZYo=r(nxe," \u2014 "),OV=n(nxe,"A",{href:!0});var $ct=s(OV);eKo=r($ct,"DetrForObjectDetection"),$ct.forEach(t),oKo=r(nxe," (DETR model)"),nxe.forEach(t),Lct.forEach(t),rKo=i(ha),NF=n(ha,"P",{});var sxe=s(NF);tKo=r(sxe,"The model is set in evaluation mode by default using "),ype=n(sxe,"CODE",{});var kct=s(ype);aKo=r(kct,"model.eval()"),kct.forEach(t),nKo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(sxe,"CODE",{});var Sct=s(Lpe);sKo=r(Sct,"model.train()"),Sct.forEach(t),sxe.forEach(t),lKo=i(ha),T(jF.$$.fragment,ha),ha.forEach(t),el.forEach(t),OBe=i(f),Md=n(f,"H2",{class:!0});var zIe=s(Md);DF=n(zIe,"A",{id:!0,class:!0,href:!0});var Rct=s(DF);xpe=n(Rct,"SPAN",{});var Bct=s(xpe);T(IL.$$.fragment,Bct),Bct.forEach(t),Rct.forEach(t),iKo=i(zIe),$pe=n(zIe,"SPAN",{});var Pct=s($pe);dKo=r(Pct,"AutoModelForImageSegmentation"),Pct.forEach(t),zIe.forEach(t),VBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(qL.$$.fragment,ol),cKo=i(ol),Ed=n(ol,"P",{});var OY=s(Ed);fKo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),VV=n(OY,"A",{href:!0});var Ict=s(VV);mKo=r(Ict,"from_pretrained()"),Ict.forEach(t),gKo=r(OY," class method or the "),XV=n(OY,"A",{href:!0});var qct=s(XV);hKo=r(qct,"from_config()"),qct.forEach(t),pKo=r(OY,` class
method.`),OY.forEach(t),uKo=i(ol),NL=n(ol,"P",{});var QIe=s(NL);_Ko=r(QIe,"This class cannot be instantiated directly using "),kpe=n(QIe,"CODE",{});var Nct=s(kpe);bKo=r(Nct,"__init__()"),Nct.forEach(t),vKo=r(QIe," (throws an error)."),QIe.forEach(t),FKo=i(ol),vt=n(ol,"DIV",{class:!0});var cw=s(vt);T(jL.$$.fragment,cw),TKo=i(cw),Spe=n(cw,"P",{});var jct=s(Spe);MKo=r(jct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jct.forEach(t),EKo=i(cw),Cd=n(cw,"P",{});var VY=s(Cd);CKo=r(VY,`Note:
Loading a model from its configuration file does `),Rpe=n(VY,"STRONG",{});var Dct=s(Rpe);wKo=r(Dct,"not"),Dct.forEach(t),AKo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(VY,"A",{href:!0});var Gct=s(zV);yKo=r(Gct,"from_pretrained()"),Gct.forEach(t),LKo=r(VY," to load the model weights."),VY.forEach(t),xKo=i(cw),T(GF.$$.fragment,cw),cw.forEach(t),$Ko=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(DL.$$.fragment,pa),kKo=i(pa),Bpe=n(pa,"P",{});var Oct=s(Bpe);SKo=r(Oct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Oct.forEach(t),RKo=i(pa),Xa=n(pa,"P",{});var fw=s(Xa);BKo=r(fw,"The model class to instantiate is selected based on the "),Ppe=n(fw,"CODE",{});var Vct=s(Ppe);PKo=r(Vct,"model_type"),Vct.forEach(t),IKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(fw,"CODE",{});var Xct=s(Ipe);qKo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),NKo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(fw,"CODE",{});var zct=s(qpe);jKo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),DKo=r(fw,":"),fw.forEach(t),GKo=i(pa),Npe=n(pa,"UL",{});var Qct=s(Npe);OF=n(Qct,"LI",{});var lxe=s(OF);jpe=n(lxe,"STRONG",{});var Wct=s(jpe);OKo=r(Wct,"detr"),Wct.forEach(t),VKo=r(lxe," \u2014 "),QV=n(lxe,"A",{href:!0});var Hct=s(QV);XKo=r(Hct,"DetrForSegmentation"),Hct.forEach(t),zKo=r(lxe," (DETR model)"),lxe.forEach(t),Qct.forEach(t),QKo=i(pa),VF=n(pa,"P",{});var ixe=s(VF);WKo=r(ixe,"The model is set in evaluation mode by default using "),Dpe=n(ixe,"CODE",{});var Uct=s(Dpe);HKo=r(Uct,"model.eval()"),Uct.forEach(t),UKo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(ixe,"CODE",{});var Jct=s(Gpe);JKo=r(Jct,"model.train()"),Jct.forEach(t),ixe.forEach(t),YKo=i(pa),T(XF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),XBe=i(f),wd=n(f,"H2",{class:!0});var WIe=s(wd);zF=n(WIe,"A",{id:!0,class:!0,href:!0});var Yct=s(zF);Ope=n(Yct,"SPAN",{});var Kct=s(Ope);T(GL.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),KKo=i(WIe),Vpe=n(WIe,"SPAN",{});var Zct=s(Vpe);ZKo=r(Zct,"AutoModelForSemanticSegmentation"),Zct.forEach(t),WIe.forEach(t),zBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(OL.$$.fragment,rl),eZo=i(rl),Ad=n(rl,"P",{});var XY=s(Ad);oZo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),WV=n(XY,"A",{href:!0});var eft=s(WV);rZo=r(eft,"from_pretrained()"),eft.forEach(t),tZo=r(XY," class method or the "),HV=n(XY,"A",{href:!0});var oft=s(HV);aZo=r(oft,"from_config()"),oft.forEach(t),nZo=r(XY,` class
method.`),XY.forEach(t),sZo=i(rl),VL=n(rl,"P",{});var HIe=s(VL);lZo=r(HIe,"This class cannot be instantiated directly using "),Xpe=n(HIe,"CODE",{});var rft=s(Xpe);iZo=r(rft,"__init__()"),rft.forEach(t),dZo=r(HIe," (throws an error)."),HIe.forEach(t),cZo=i(rl),Ft=n(rl,"DIV",{class:!0});var mw=s(Ft);T(XL.$$.fragment,mw),fZo=i(mw),zpe=n(mw,"P",{});var tft=s(zpe);mZo=r(tft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tft.forEach(t),gZo=i(mw),yd=n(mw,"P",{});var zY=s(yd);hZo=r(zY,`Note:
Loading a model from its configuration file does `),Qpe=n(zY,"STRONG",{});var aft=s(Qpe);pZo=r(aft,"not"),aft.forEach(t),uZo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(zY,"A",{href:!0});var nft=s(UV);_Zo=r(nft,"from_pretrained()"),nft.forEach(t),bZo=r(zY," to load the model weights."),zY.forEach(t),vZo=i(mw),T(QF.$$.fragment,mw),mw.forEach(t),FZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(zL.$$.fragment,ua),TZo=i(ua),Wpe=n(ua,"P",{});var sft=s(Wpe);MZo=r(sft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sft.forEach(t),EZo=i(ua),za=n(ua,"P",{});var gw=s(za);CZo=r(gw,"The model class to instantiate is selected based on the "),Hpe=n(gw,"CODE",{});var lft=s(Hpe);wZo=r(lft,"model_type"),lft.forEach(t),AZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Upe=n(gw,"CODE",{});var ift=s(Upe);yZo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),LZo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(gw,"CODE",{});var dft=s(Jpe);xZo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),$Zo=r(gw,":"),gw.forEach(t),kZo=i(ua),Qa=n(ua,"UL",{});var hw=s(Qa);WF=n(hw,"LI",{});var dxe=s(WF);Ype=n(dxe,"STRONG",{});var cft=s(Ype);SZo=r(cft,"beit"),cft.forEach(t),RZo=r(dxe," \u2014 "),JV=n(dxe,"A",{href:!0});var fft=s(JV);BZo=r(fft,"BeitForSemanticSegmentation"),fft.forEach(t),PZo=r(dxe," (BEiT model)"),dxe.forEach(t),IZo=i(hw),HF=n(hw,"LI",{});var cxe=s(HF);Kpe=n(cxe,"STRONG",{});var mft=s(Kpe);qZo=r(mft,"data2vec-vision"),mft.forEach(t),NZo=r(cxe," \u2014 "),YV=n(cxe,"A",{href:!0});var gft=s(YV);jZo=r(gft,"Data2VecVisionForSemanticSegmentation"),gft.forEach(t),DZo=r(cxe," (Data2VecVision model)"),cxe.forEach(t),GZo=i(hw),UF=n(hw,"LI",{});var fxe=s(UF);Zpe=n(fxe,"STRONG",{});var hft=s(Zpe);OZo=r(hft,"dpt"),hft.forEach(t),VZo=r(fxe," \u2014 "),KV=n(fxe,"A",{href:!0});var pft=s(KV);XZo=r(pft,"DPTForSemanticSegmentation"),pft.forEach(t),zZo=r(fxe," (DPT model)"),fxe.forEach(t),QZo=i(hw),JF=n(hw,"LI",{});var mxe=s(JF);eue=n(mxe,"STRONG",{});var uft=s(eue);WZo=r(uft,"segformer"),uft.forEach(t),HZo=r(mxe," \u2014 "),ZV=n(mxe,"A",{href:!0});var _ft=s(ZV);UZo=r(_ft,"SegformerForSemanticSegmentation"),_ft.forEach(t),JZo=r(mxe," (SegFormer model)"),mxe.forEach(t),hw.forEach(t),YZo=i(ua),YF=n(ua,"P",{});var gxe=s(YF);KZo=r(gxe,"The model is set in evaluation mode by default using "),oue=n(gxe,"CODE",{});var bft=s(oue);ZZo=r(bft,"model.eval()"),bft.forEach(t),eer=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(gxe,"CODE",{});var vft=s(rue);oer=r(vft,"model.train()"),vft.forEach(t),gxe.forEach(t),rer=i(ua),T(KF.$$.fragment,ua),ua.forEach(t),rl.forEach(t),QBe=i(f),Ld=n(f,"H2",{class:!0});var UIe=s(Ld);ZF=n(UIe,"A",{id:!0,class:!0,href:!0});var Fft=s(ZF);tue=n(Fft,"SPAN",{});var Tft=s(tue);T(QL.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),ter=i(UIe),aue=n(UIe,"SPAN",{});var Mft=s(aue);aer=r(Mft,"AutoModelForInstanceSegmentation"),Mft.forEach(t),UIe.forEach(t),WBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(WL.$$.fragment,tl),ner=i(tl),xd=n(tl,"P",{});var QY=s(xd);ser=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eX=n(QY,"A",{href:!0});var Eft=s(eX);ler=r(Eft,"from_pretrained()"),Eft.forEach(t),ier=r(QY," class method or the "),oX=n(QY,"A",{href:!0});var Cft=s(oX);der=r(Cft,"from_config()"),Cft.forEach(t),cer=r(QY,` class
method.`),QY.forEach(t),fer=i(tl),HL=n(tl,"P",{});var JIe=s(HL);mer=r(JIe,"This class cannot be instantiated directly using "),nue=n(JIe,"CODE",{});var wft=s(nue);ger=r(wft,"__init__()"),wft.forEach(t),her=r(JIe," (throws an error)."),JIe.forEach(t),per=i(tl),Tt=n(tl,"DIV",{class:!0});var pw=s(Tt);T(UL.$$.fragment,pw),uer=i(pw),sue=n(pw,"P",{});var Aft=s(sue);_er=r(Aft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Aft.forEach(t),ber=i(pw),$d=n(pw,"P",{});var WY=s($d);ver=r(WY,`Note:
Loading a model from its configuration file does `),lue=n(WY,"STRONG",{});var yft=s(lue);Fer=r(yft,"not"),yft.forEach(t),Ter=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(WY,"A",{href:!0});var Lft=s(rX);Mer=r(Lft,"from_pretrained()"),Lft.forEach(t),Eer=r(WY," to load the model weights."),WY.forEach(t),Cer=i(pw),T(e0.$$.fragment,pw),pw.forEach(t),wer=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(JL.$$.fragment,_a),Aer=i(_a),iue=n(_a,"P",{});var xft=s(iue);yer=r(xft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xft.forEach(t),Ler=i(_a),Wa=n(_a,"P",{});var uw=s(Wa);xer=r(uw,"The model class to instantiate is selected based on the "),due=n(uw,"CODE",{});var $ft=s(due);$er=r($ft,"model_type"),$ft.forEach(t),ker=r(uw,` property of the config object (either
passed as an argument or loaded from `),cue=n(uw,"CODE",{});var kft=s(cue);Ser=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Rer=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(uw,"CODE",{});var Sft=s(fue);Ber=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Per=r(uw,":"),uw.forEach(t),Ier=i(_a),mue=n(_a,"UL",{});var Rft=s(mue);o0=n(Rft,"LI",{});var hxe=s(o0);gue=n(hxe,"STRONG",{});var Bft=s(gue);qer=r(Bft,"maskformer"),Bft.forEach(t),Ner=r(hxe," \u2014 "),tX=n(hxe,"A",{href:!0});var Pft=s(tX);jer=r(Pft,"MaskFormerForInstanceSegmentation"),Pft.forEach(t),Der=r(hxe," (MaskFormer model)"),hxe.forEach(t),Rft.forEach(t),Ger=i(_a),r0=n(_a,"P",{});var pxe=s(r0);Oer=r(pxe,"The model is set in evaluation mode by default using "),hue=n(pxe,"CODE",{});var Ift=s(hue);Ver=r(Ift,"model.eval()"),Ift.forEach(t),Xer=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(pxe,"CODE",{});var qft=s(pue);zer=r(qft,"model.train()"),qft.forEach(t),pxe.forEach(t),Qer=i(_a),T(t0.$$.fragment,_a),_a.forEach(t),tl.forEach(t),HBe=i(f),kd=n(f,"H2",{class:!0});var YIe=s(kd);a0=n(YIe,"A",{id:!0,class:!0,href:!0});var Nft=s(a0);uue=n(Nft,"SPAN",{});var jft=s(uue);T(YL.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),Wer=i(YIe),_ue=n(YIe,"SPAN",{});var Dft=s(_ue);Her=r(Dft,"TFAutoModel"),Dft.forEach(t),YIe.forEach(t),UBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(KL.$$.fragment,al),Uer=i(al),Sd=n(al,"P",{});var HY=s(Sd);Jer=r(HY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aX=n(HY,"A",{href:!0});var Gft=s(aX);Yer=r(Gft,"from_pretrained()"),Gft.forEach(t),Ker=r(HY," class method or the "),nX=n(HY,"A",{href:!0});var Oft=s(nX);Zer=r(Oft,"from_config()"),Oft.forEach(t),eor=r(HY,` class
method.`),HY.forEach(t),oor=i(al),ZL=n(al,"P",{});var KIe=s(ZL);ror=r(KIe,"This class cannot be instantiated directly using "),bue=n(KIe,"CODE",{});var Vft=s(bue);tor=r(Vft,"__init__()"),Vft.forEach(t),aor=r(KIe," (throws an error)."),KIe.forEach(t),nor=i(al),Mt=n(al,"DIV",{class:!0});var _w=s(Mt);T(e8.$$.fragment,_w),sor=i(_w),vue=n(_w,"P",{});var Xft=s(vue);lor=r(Xft,"Instantiates one of the base model classes of the library from a configuration."),Xft.forEach(t),ior=i(_w),Rd=n(_w,"P",{});var UY=s(Rd);dor=r(UY,`Note:
Loading a model from its configuration file does `),Fue=n(UY,"STRONG",{});var zft=s(Fue);cor=r(zft,"not"),zft.forEach(t),mor=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(UY,"A",{href:!0});var Qft=s(sX);gor=r(Qft,"from_pretrained()"),Qft.forEach(t),hor=r(UY," to load the model weights."),UY.forEach(t),por=i(_w),T(n0.$$.fragment,_w),_w.forEach(t),uor=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(o8.$$.fragment,nl),_or=i(nl),Tue=n(nl,"P",{});var Wft=s(Tue);bor=r(Wft,"Instantiate one of the base model classes of the library from a pretrained model."),Wft.forEach(t),vor=i(nl),Ha=n(nl,"P",{});var bw=s(Ha);For=r(bw,"The model class to instantiate is selected based on the "),Mue=n(bw,"CODE",{});var Hft=s(Mue);Tor=r(Hft,"model_type"),Hft.forEach(t),Mor=r(bw,` property of the config object (either
passed as an argument or loaded from `),Eue=n(bw,"CODE",{});var Uft=s(Eue);Eor=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),Cor=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(bw,"CODE",{});var Jft=s(Cue);wor=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),Aor=r(bw,":"),bw.forEach(t),yor=i(nl),j=n(nl,"UL",{});var D=s(j);s0=n(D,"LI",{});var uxe=s(s0);wue=n(uxe,"STRONG",{});var Yft=s(wue);Lor=r(Yft,"albert"),Yft.forEach(t),xor=r(uxe," \u2014 "),lX=n(uxe,"A",{href:!0});var Kft=s(lX);$or=r(Kft,"TFAlbertModel"),Kft.forEach(t),kor=r(uxe," (ALBERT model)"),uxe.forEach(t),Sor=i(D),l0=n(D,"LI",{});var _xe=s(l0);Aue=n(_xe,"STRONG",{});var Zft=s(Aue);Ror=r(Zft,"bart"),Zft.forEach(t),Bor=r(_xe," \u2014 "),iX=n(_xe,"A",{href:!0});var emt=s(iX);Por=r(emt,"TFBartModel"),emt.forEach(t),Ior=r(_xe," (BART model)"),_xe.forEach(t),qor=i(D),i0=n(D,"LI",{});var bxe=s(i0);yue=n(bxe,"STRONG",{});var omt=s(yue);Nor=r(omt,"bert"),omt.forEach(t),jor=r(bxe," \u2014 "),dX=n(bxe,"A",{href:!0});var rmt=s(dX);Dor=r(rmt,"TFBertModel"),rmt.forEach(t),Gor=r(bxe," (BERT model)"),bxe.forEach(t),Oor=i(D),d0=n(D,"LI",{});var vxe=s(d0);Lue=n(vxe,"STRONG",{});var tmt=s(Lue);Vor=r(tmt,"blenderbot"),tmt.forEach(t),Xor=r(vxe," \u2014 "),cX=n(vxe,"A",{href:!0});var amt=s(cX);zor=r(amt,"TFBlenderbotModel"),amt.forEach(t),Qor=r(vxe," (Blenderbot model)"),vxe.forEach(t),Wor=i(D),c0=n(D,"LI",{});var Fxe=s(c0);xue=n(Fxe,"STRONG",{});var nmt=s(xue);Hor=r(nmt,"blenderbot-small"),nmt.forEach(t),Uor=r(Fxe," \u2014 "),fX=n(Fxe,"A",{href:!0});var smt=s(fX);Jor=r(smt,"TFBlenderbotSmallModel"),smt.forEach(t),Yor=r(Fxe," (BlenderbotSmall model)"),Fxe.forEach(t),Kor=i(D),f0=n(D,"LI",{});var Txe=s(f0);$ue=n(Txe,"STRONG",{});var lmt=s($ue);Zor=r(lmt,"camembert"),lmt.forEach(t),err=r(Txe," \u2014 "),mX=n(Txe,"A",{href:!0});var imt=s(mX);orr=r(imt,"TFCamembertModel"),imt.forEach(t),rrr=r(Txe," (CamemBERT model)"),Txe.forEach(t),trr=i(D),m0=n(D,"LI",{});var Mxe=s(m0);kue=n(Mxe,"STRONG",{});var dmt=s(kue);arr=r(dmt,"clip"),dmt.forEach(t),nrr=r(Mxe," \u2014 "),gX=n(Mxe,"A",{href:!0});var cmt=s(gX);srr=r(cmt,"TFCLIPModel"),cmt.forEach(t),lrr=r(Mxe," (CLIP model)"),Mxe.forEach(t),irr=i(D),g0=n(D,"LI",{});var Exe=s(g0);Sue=n(Exe,"STRONG",{});var fmt=s(Sue);drr=r(fmt,"convbert"),fmt.forEach(t),crr=r(Exe," \u2014 "),hX=n(Exe,"A",{href:!0});var mmt=s(hX);frr=r(mmt,"TFConvBertModel"),mmt.forEach(t),mrr=r(Exe," (ConvBERT model)"),Exe.forEach(t),grr=i(D),h0=n(D,"LI",{});var Cxe=s(h0);Rue=n(Cxe,"STRONG",{});var gmt=s(Rue);hrr=r(gmt,"convnext"),gmt.forEach(t),prr=r(Cxe," \u2014 "),pX=n(Cxe,"A",{href:!0});var hmt=s(pX);urr=r(hmt,"TFConvNextModel"),hmt.forEach(t),_rr=r(Cxe," (ConvNext model)"),Cxe.forEach(t),brr=i(D),p0=n(D,"LI",{});var wxe=s(p0);Bue=n(wxe,"STRONG",{});var pmt=s(Bue);vrr=r(pmt,"ctrl"),pmt.forEach(t),Frr=r(wxe," \u2014 "),uX=n(wxe,"A",{href:!0});var umt=s(uX);Trr=r(umt,"TFCTRLModel"),umt.forEach(t),Mrr=r(wxe," (CTRL model)"),wxe.forEach(t),Err=i(D),u0=n(D,"LI",{});var Axe=s(u0);Pue=n(Axe,"STRONG",{});var _mt=s(Pue);Crr=r(_mt,"deberta"),_mt.forEach(t),wrr=r(Axe," \u2014 "),_X=n(Axe,"A",{href:!0});var bmt=s(_X);Arr=r(bmt,"TFDebertaModel"),bmt.forEach(t),yrr=r(Axe," (DeBERTa model)"),Axe.forEach(t),Lrr=i(D),_0=n(D,"LI",{});var yxe=s(_0);Iue=n(yxe,"STRONG",{});var vmt=s(Iue);xrr=r(vmt,"deberta-v2"),vmt.forEach(t),$rr=r(yxe," \u2014 "),bX=n(yxe,"A",{href:!0});var Fmt=s(bX);krr=r(Fmt,"TFDebertaV2Model"),Fmt.forEach(t),Srr=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),Rrr=i(D),b0=n(D,"LI",{});var Lxe=s(b0);que=n(Lxe,"STRONG",{});var Tmt=s(que);Brr=r(Tmt,"distilbert"),Tmt.forEach(t),Prr=r(Lxe," \u2014 "),vX=n(Lxe,"A",{href:!0});var Mmt=s(vX);Irr=r(Mmt,"TFDistilBertModel"),Mmt.forEach(t),qrr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),Nrr=i(D),v0=n(D,"LI",{});var xxe=s(v0);Nue=n(xxe,"STRONG",{});var Emt=s(Nue);jrr=r(Emt,"dpr"),Emt.forEach(t),Drr=r(xxe," \u2014 "),FX=n(xxe,"A",{href:!0});var Cmt=s(FX);Grr=r(Cmt,"TFDPRQuestionEncoder"),Cmt.forEach(t),Orr=r(xxe," (DPR model)"),xxe.forEach(t),Vrr=i(D),F0=n(D,"LI",{});var $xe=s(F0);jue=n($xe,"STRONG",{});var wmt=s(jue);Xrr=r(wmt,"electra"),wmt.forEach(t),zrr=r($xe," \u2014 "),TX=n($xe,"A",{href:!0});var Amt=s(TX);Qrr=r(Amt,"TFElectraModel"),Amt.forEach(t),Wrr=r($xe," (ELECTRA model)"),$xe.forEach(t),Hrr=i(D),T0=n(D,"LI",{});var kxe=s(T0);Due=n(kxe,"STRONG",{});var ymt=s(Due);Urr=r(ymt,"flaubert"),ymt.forEach(t),Jrr=r(kxe," \u2014 "),MX=n(kxe,"A",{href:!0});var Lmt=s(MX);Yrr=r(Lmt,"TFFlaubertModel"),Lmt.forEach(t),Krr=r(kxe," (FlauBERT model)"),kxe.forEach(t),Zrr=i(D),xs=n(D,"LI",{});var y9=s(xs);Gue=n(y9,"STRONG",{});var xmt=s(Gue);etr=r(xmt,"funnel"),xmt.forEach(t),otr=r(y9," \u2014 "),EX=n(y9,"A",{href:!0});var $mt=s(EX);rtr=r($mt,"TFFunnelModel"),$mt.forEach(t),ttr=r(y9," or "),CX=n(y9,"A",{href:!0});var kmt=s(CX);atr=r(kmt,"TFFunnelBaseModel"),kmt.forEach(t),ntr=r(y9," (Funnel Transformer model)"),y9.forEach(t),str=i(D),M0=n(D,"LI",{});var Sxe=s(M0);Oue=n(Sxe,"STRONG",{});var Smt=s(Oue);ltr=r(Smt,"gpt2"),Smt.forEach(t),itr=r(Sxe," \u2014 "),wX=n(Sxe,"A",{href:!0});var Rmt=s(wX);dtr=r(Rmt,"TFGPT2Model"),Rmt.forEach(t),ctr=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),ftr=i(D),E0=n(D,"LI",{});var Rxe=s(E0);Vue=n(Rxe,"STRONG",{});var Bmt=s(Vue);mtr=r(Bmt,"gptj"),Bmt.forEach(t),gtr=r(Rxe," \u2014 "),AX=n(Rxe,"A",{href:!0});var Pmt=s(AX);htr=r(Pmt,"TFGPTJModel"),Pmt.forEach(t),ptr=r(Rxe," (GPT-J model)"),Rxe.forEach(t),utr=i(D),C0=n(D,"LI",{});var Bxe=s(C0);Xue=n(Bxe,"STRONG",{});var Imt=s(Xue);_tr=r(Imt,"hubert"),Imt.forEach(t),btr=r(Bxe," \u2014 "),yX=n(Bxe,"A",{href:!0});var qmt=s(yX);vtr=r(qmt,"TFHubertModel"),qmt.forEach(t),Ftr=r(Bxe," (Hubert model)"),Bxe.forEach(t),Ttr=i(D),w0=n(D,"LI",{});var Pxe=s(w0);zue=n(Pxe,"STRONG",{});var Nmt=s(zue);Mtr=r(Nmt,"layoutlm"),Nmt.forEach(t),Etr=r(Pxe," \u2014 "),LX=n(Pxe,"A",{href:!0});var jmt=s(LX);Ctr=r(jmt,"TFLayoutLMModel"),jmt.forEach(t),wtr=r(Pxe," (LayoutLM model)"),Pxe.forEach(t),Atr=i(D),A0=n(D,"LI",{});var Ixe=s(A0);Que=n(Ixe,"STRONG",{});var Dmt=s(Que);ytr=r(Dmt,"led"),Dmt.forEach(t),Ltr=r(Ixe," \u2014 "),xX=n(Ixe,"A",{href:!0});var Gmt=s(xX);xtr=r(Gmt,"TFLEDModel"),Gmt.forEach(t),$tr=r(Ixe," (LED model)"),Ixe.forEach(t),ktr=i(D),y0=n(D,"LI",{});var qxe=s(y0);Wue=n(qxe,"STRONG",{});var Omt=s(Wue);Str=r(Omt,"longformer"),Omt.forEach(t),Rtr=r(qxe," \u2014 "),$X=n(qxe,"A",{href:!0});var Vmt=s($X);Btr=r(Vmt,"TFLongformerModel"),Vmt.forEach(t),Ptr=r(qxe," (Longformer model)"),qxe.forEach(t),Itr=i(D),L0=n(D,"LI",{});var Nxe=s(L0);Hue=n(Nxe,"STRONG",{});var Xmt=s(Hue);qtr=r(Xmt,"lxmert"),Xmt.forEach(t),Ntr=r(Nxe," \u2014 "),kX=n(Nxe,"A",{href:!0});var zmt=s(kX);jtr=r(zmt,"TFLxmertModel"),zmt.forEach(t),Dtr=r(Nxe," (LXMERT model)"),Nxe.forEach(t),Gtr=i(D),x0=n(D,"LI",{});var jxe=s(x0);Uue=n(jxe,"STRONG",{});var Qmt=s(Uue);Otr=r(Qmt,"marian"),Qmt.forEach(t),Vtr=r(jxe," \u2014 "),SX=n(jxe,"A",{href:!0});var Wmt=s(SX);Xtr=r(Wmt,"TFMarianModel"),Wmt.forEach(t),ztr=r(jxe," (Marian model)"),jxe.forEach(t),Qtr=i(D),$0=n(D,"LI",{});var Dxe=s($0);Jue=n(Dxe,"STRONG",{});var Hmt=s(Jue);Wtr=r(Hmt,"mbart"),Hmt.forEach(t),Htr=r(Dxe," \u2014 "),RX=n(Dxe,"A",{href:!0});var Umt=s(RX);Utr=r(Umt,"TFMBartModel"),Umt.forEach(t),Jtr=r(Dxe," (mBART model)"),Dxe.forEach(t),Ytr=i(D),k0=n(D,"LI",{});var Gxe=s(k0);Yue=n(Gxe,"STRONG",{});var Jmt=s(Yue);Ktr=r(Jmt,"mobilebert"),Jmt.forEach(t),Ztr=r(Gxe," \u2014 "),BX=n(Gxe,"A",{href:!0});var Ymt=s(BX);ear=r(Ymt,"TFMobileBertModel"),Ymt.forEach(t),oar=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),rar=i(D),S0=n(D,"LI",{});var Oxe=s(S0);Kue=n(Oxe,"STRONG",{});var Kmt=s(Kue);tar=r(Kmt,"mpnet"),Kmt.forEach(t),aar=r(Oxe," \u2014 "),PX=n(Oxe,"A",{href:!0});var Zmt=s(PX);nar=r(Zmt,"TFMPNetModel"),Zmt.forEach(t),sar=r(Oxe," (MPNet model)"),Oxe.forEach(t),lar=i(D),R0=n(D,"LI",{});var Vxe=s(R0);Zue=n(Vxe,"STRONG",{});var egt=s(Zue);iar=r(egt,"mt5"),egt.forEach(t),dar=r(Vxe," \u2014 "),IX=n(Vxe,"A",{href:!0});var ogt=s(IX);car=r(ogt,"TFMT5Model"),ogt.forEach(t),far=r(Vxe," (mT5 model)"),Vxe.forEach(t),mar=i(D),B0=n(D,"LI",{});var Xxe=s(B0);e_e=n(Xxe,"STRONG",{});var rgt=s(e_e);gar=r(rgt,"openai-gpt"),rgt.forEach(t),har=r(Xxe," \u2014 "),qX=n(Xxe,"A",{href:!0});var tgt=s(qX);par=r(tgt,"TFOpenAIGPTModel"),tgt.forEach(t),uar=r(Xxe," (OpenAI GPT model)"),Xxe.forEach(t),_ar=i(D),P0=n(D,"LI",{});var zxe=s(P0);o_e=n(zxe,"STRONG",{});var agt=s(o_e);bar=r(agt,"pegasus"),agt.forEach(t),Far=r(zxe," \u2014 "),NX=n(zxe,"A",{href:!0});var ngt=s(NX);Tar=r(ngt,"TFPegasusModel"),ngt.forEach(t),Mar=r(zxe," (Pegasus model)"),zxe.forEach(t),Ear=i(D),I0=n(D,"LI",{});var Qxe=s(I0);r_e=n(Qxe,"STRONG",{});var sgt=s(r_e);Car=r(sgt,"rembert"),sgt.forEach(t),war=r(Qxe," \u2014 "),jX=n(Qxe,"A",{href:!0});var lgt=s(jX);Aar=r(lgt,"TFRemBertModel"),lgt.forEach(t),yar=r(Qxe," (RemBERT model)"),Qxe.forEach(t),Lar=i(D),q0=n(D,"LI",{});var Wxe=s(q0);t_e=n(Wxe,"STRONG",{});var igt=s(t_e);xar=r(igt,"roberta"),igt.forEach(t),$ar=r(Wxe," \u2014 "),DX=n(Wxe,"A",{href:!0});var dgt=s(DX);kar=r(dgt,"TFRobertaModel"),dgt.forEach(t),Sar=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),Rar=i(D),N0=n(D,"LI",{});var Hxe=s(N0);a_e=n(Hxe,"STRONG",{});var cgt=s(a_e);Bar=r(cgt,"roformer"),cgt.forEach(t),Par=r(Hxe," \u2014 "),GX=n(Hxe,"A",{href:!0});var fgt=s(GX);Iar=r(fgt,"TFRoFormerModel"),fgt.forEach(t),qar=r(Hxe," (RoFormer model)"),Hxe.forEach(t),Nar=i(D),j0=n(D,"LI",{});var Uxe=s(j0);n_e=n(Uxe,"STRONG",{});var mgt=s(n_e);jar=r(mgt,"speech_to_text"),mgt.forEach(t),Dar=r(Uxe," \u2014 "),OX=n(Uxe,"A",{href:!0});var ggt=s(OX);Gar=r(ggt,"TFSpeech2TextModel"),ggt.forEach(t),Oar=r(Uxe," (Speech2Text model)"),Uxe.forEach(t),Var=i(D),D0=n(D,"LI",{});var Jxe=s(D0);s_e=n(Jxe,"STRONG",{});var hgt=s(s_e);Xar=r(hgt,"t5"),hgt.forEach(t),zar=r(Jxe," \u2014 "),VX=n(Jxe,"A",{href:!0});var pgt=s(VX);Qar=r(pgt,"TFT5Model"),pgt.forEach(t),War=r(Jxe," (T5 model)"),Jxe.forEach(t),Har=i(D),G0=n(D,"LI",{});var Yxe=s(G0);l_e=n(Yxe,"STRONG",{});var ugt=s(l_e);Uar=r(ugt,"tapas"),ugt.forEach(t),Jar=r(Yxe," \u2014 "),XX=n(Yxe,"A",{href:!0});var _gt=s(XX);Yar=r(_gt,"TFTapasModel"),_gt.forEach(t),Kar=r(Yxe," (TAPAS model)"),Yxe.forEach(t),Zar=i(D),O0=n(D,"LI",{});var Kxe=s(O0);i_e=n(Kxe,"STRONG",{});var bgt=s(i_e);enr=r(bgt,"transfo-xl"),bgt.forEach(t),onr=r(Kxe," \u2014 "),zX=n(Kxe,"A",{href:!0});var vgt=s(zX);rnr=r(vgt,"TFTransfoXLModel"),vgt.forEach(t),tnr=r(Kxe," (Transformer-XL model)"),Kxe.forEach(t),anr=i(D),V0=n(D,"LI",{});var Zxe=s(V0);d_e=n(Zxe,"STRONG",{});var Fgt=s(d_e);nnr=r(Fgt,"vit"),Fgt.forEach(t),snr=r(Zxe," \u2014 "),QX=n(Zxe,"A",{href:!0});var Tgt=s(QX);lnr=r(Tgt,"TFViTModel"),Tgt.forEach(t),inr=r(Zxe," (ViT model)"),Zxe.forEach(t),dnr=i(D),X0=n(D,"LI",{});var e9e=s(X0);c_e=n(e9e,"STRONG",{});var Mgt=s(c_e);cnr=r(Mgt,"vit_mae"),Mgt.forEach(t),fnr=r(e9e," \u2014 "),WX=n(e9e,"A",{href:!0});var Egt=s(WX);mnr=r(Egt,"TFViTMAEModel"),Egt.forEach(t),gnr=r(e9e," (ViTMAE model)"),e9e.forEach(t),hnr=i(D),z0=n(D,"LI",{});var o9e=s(z0);f_e=n(o9e,"STRONG",{});var Cgt=s(f_e);pnr=r(Cgt,"wav2vec2"),Cgt.forEach(t),unr=r(o9e," \u2014 "),HX=n(o9e,"A",{href:!0});var wgt=s(HX);_nr=r(wgt,"TFWav2Vec2Model"),wgt.forEach(t),bnr=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),vnr=i(D),Q0=n(D,"LI",{});var r9e=s(Q0);m_e=n(r9e,"STRONG",{});var Agt=s(m_e);Fnr=r(Agt,"xlm"),Agt.forEach(t),Tnr=r(r9e," \u2014 "),UX=n(r9e,"A",{href:!0});var ygt=s(UX);Mnr=r(ygt,"TFXLMModel"),ygt.forEach(t),Enr=r(r9e," (XLM model)"),r9e.forEach(t),Cnr=i(D),W0=n(D,"LI",{});var t9e=s(W0);g_e=n(t9e,"STRONG",{});var Lgt=s(g_e);wnr=r(Lgt,"xlm-roberta"),Lgt.forEach(t),Anr=r(t9e," \u2014 "),JX=n(t9e,"A",{href:!0});var xgt=s(JX);ynr=r(xgt,"TFXLMRobertaModel"),xgt.forEach(t),Lnr=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),xnr=i(D),H0=n(D,"LI",{});var a9e=s(H0);h_e=n(a9e,"STRONG",{});var $gt=s(h_e);$nr=r($gt,"xlnet"),$gt.forEach(t),knr=r(a9e," \u2014 "),YX=n(a9e,"A",{href:!0});var kgt=s(YX);Snr=r(kgt,"TFXLNetModel"),kgt.forEach(t),Rnr=r(a9e," (XLNet model)"),a9e.forEach(t),D.forEach(t),Bnr=i(nl),T(U0.$$.fragment,nl),nl.forEach(t),al.forEach(t),JBe=i(f),Bd=n(f,"H2",{class:!0});var ZIe=s(Bd);J0=n(ZIe,"A",{id:!0,class:!0,href:!0});var Sgt=s(J0);p_e=n(Sgt,"SPAN",{});var Rgt=s(p_e);T(r8.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Pnr=i(ZIe),u_e=n(ZIe,"SPAN",{});var Bgt=s(u_e);Inr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),ZIe.forEach(t),YBe=i(f),Jo=n(f,"DIV",{class:!0});var sl=s(Jo);T(t8.$$.fragment,sl),qnr=i(sl),Pd=n(sl,"P",{});var JY=s(Pd);Nnr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),KX=n(JY,"A",{href:!0});var Pgt=s(KX);jnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Dnr=r(JY," class method or the "),ZX=n(JY,"A",{href:!0});var Igt=s(ZX);Gnr=r(Igt,"from_config()"),Igt.forEach(t),Onr=r(JY,` class
method.`),JY.forEach(t),Vnr=i(sl),a8=n(sl,"P",{});var eqe=s(a8);Xnr=r(eqe,"This class cannot be instantiated directly using "),__e=n(eqe,"CODE",{});var qgt=s(__e);znr=r(qgt,"__init__()"),qgt.forEach(t),Qnr=r(eqe," (throws an error)."),eqe.forEach(t),Wnr=i(sl),Et=n(sl,"DIV",{class:!0});var vw=s(Et);T(n8.$$.fragment,vw),Hnr=i(vw),b_e=n(vw,"P",{});var Ngt=s(b_e);Unr=r(Ngt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ngt.forEach(t),Jnr=i(vw),Id=n(vw,"P",{});var YY=s(Id);Ynr=r(YY,`Note:
Loading a model from its configuration file does `),v_e=n(YY,"STRONG",{});var jgt=s(v_e);Knr=r(jgt,"not"),jgt.forEach(t),Znr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ez=n(YY,"A",{href:!0});var Dgt=s(ez);esr=r(Dgt,"from_pretrained()"),Dgt.forEach(t),osr=r(YY," to load the model weights."),YY.forEach(t),rsr=i(vw),T(Y0.$$.fragment,vw),vw.forEach(t),tsr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(s8.$$.fragment,ll),asr=i(ll),F_e=n(ll,"P",{});var Ggt=s(F_e);nsr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),ssr=i(ll),Ua=n(ll,"P",{});var Fw=s(Ua);lsr=r(Fw,"The model class to instantiate is selected based on the "),T_e=n(Fw,"CODE",{});var Ogt=s(T_e);isr=r(Ogt,"model_type"),Ogt.forEach(t),dsr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Fw,"CODE",{});var Vgt=s(M_e);csr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),fsr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Fw,"CODE",{});var Xgt=s(E_e);msr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),gsr=r(Fw,":"),Fw.forEach(t),hsr=i(ll),ne=n(ll,"UL",{});var le=s(ne);K0=n(le,"LI",{});var n9e=s(K0);C_e=n(n9e,"STRONG",{});var zgt=s(C_e);psr=r(zgt,"albert"),zgt.forEach(t),usr=r(n9e," \u2014 "),oz=n(n9e,"A",{href:!0});var Qgt=s(oz);_sr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),bsr=r(n9e," (ALBERT model)"),n9e.forEach(t),vsr=i(le),Z0=n(le,"LI",{});var s9e=s(Z0);w_e=n(s9e,"STRONG",{});var Wgt=s(w_e);Fsr=r(Wgt,"bart"),Wgt.forEach(t),Tsr=r(s9e," \u2014 "),rz=n(s9e,"A",{href:!0});var Hgt=s(rz);Msr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Esr=r(s9e," (BART model)"),s9e.forEach(t),Csr=i(le),e6=n(le,"LI",{});var l9e=s(e6);A_e=n(l9e,"STRONG",{});var Ugt=s(A_e);wsr=r(Ugt,"bert"),Ugt.forEach(t),Asr=r(l9e," \u2014 "),tz=n(l9e,"A",{href:!0});var Jgt=s(tz);ysr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),Lsr=r(l9e," (BERT model)"),l9e.forEach(t),xsr=i(le),o6=n(le,"LI",{});var i9e=s(o6);y_e=n(i9e,"STRONG",{});var Ygt=s(y_e);$sr=r(Ygt,"camembert"),Ygt.forEach(t),ksr=r(i9e," \u2014 "),az=n(i9e,"A",{href:!0});var Kgt=s(az);Ssr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Rsr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Bsr=i(le),r6=n(le,"LI",{});var d9e=s(r6);L_e=n(d9e,"STRONG",{});var Zgt=s(L_e);Psr=r(Zgt,"ctrl"),Zgt.forEach(t),Isr=r(d9e," \u2014 "),nz=n(d9e,"A",{href:!0});var eht=s(nz);qsr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),Nsr=r(d9e," (CTRL model)"),d9e.forEach(t),jsr=i(le),t6=n(le,"LI",{});var c9e=s(t6);x_e=n(c9e,"STRONG",{});var oht=s(x_e);Dsr=r(oht,"distilbert"),oht.forEach(t),Gsr=r(c9e," \u2014 "),sz=n(c9e,"A",{href:!0});var rht=s(sz);Osr=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),Vsr=r(c9e," (DistilBERT model)"),c9e.forEach(t),Xsr=i(le),a6=n(le,"LI",{});var f9e=s(a6);$_e=n(f9e,"STRONG",{});var tht=s($_e);zsr=r(tht,"electra"),tht.forEach(t),Qsr=r(f9e," \u2014 "),lz=n(f9e,"A",{href:!0});var aht=s(lz);Wsr=r(aht,"TFElectraForPreTraining"),aht.forEach(t),Hsr=r(f9e," (ELECTRA model)"),f9e.forEach(t),Usr=i(le),n6=n(le,"LI",{});var m9e=s(n6);k_e=n(m9e,"STRONG",{});var nht=s(k_e);Jsr=r(nht,"flaubert"),nht.forEach(t),Ysr=r(m9e," \u2014 "),iz=n(m9e,"A",{href:!0});var sht=s(iz);Ksr=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),Zsr=r(m9e," (FlauBERT model)"),m9e.forEach(t),elr=i(le),s6=n(le,"LI",{});var g9e=s(s6);S_e=n(g9e,"STRONG",{});var lht=s(S_e);olr=r(lht,"funnel"),lht.forEach(t),rlr=r(g9e," \u2014 "),dz=n(g9e,"A",{href:!0});var iht=s(dz);tlr=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),alr=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),nlr=i(le),l6=n(le,"LI",{});var h9e=s(l6);R_e=n(h9e,"STRONG",{});var dht=s(R_e);slr=r(dht,"gpt2"),dht.forEach(t),llr=r(h9e," \u2014 "),cz=n(h9e,"A",{href:!0});var cht=s(cz);ilr=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),dlr=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),clr=i(le),i6=n(le,"LI",{});var p9e=s(i6);B_e=n(p9e,"STRONG",{});var fht=s(B_e);flr=r(fht,"layoutlm"),fht.forEach(t),mlr=r(p9e," \u2014 "),fz=n(p9e,"A",{href:!0});var mht=s(fz);glr=r(mht,"TFLayoutLMForMaskedLM"),mht.forEach(t),hlr=r(p9e," (LayoutLM model)"),p9e.forEach(t),plr=i(le),d6=n(le,"LI",{});var u9e=s(d6);P_e=n(u9e,"STRONG",{});var ght=s(P_e);ulr=r(ght,"lxmert"),ght.forEach(t),_lr=r(u9e," \u2014 "),mz=n(u9e,"A",{href:!0});var hht=s(mz);blr=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),vlr=r(u9e," (LXMERT model)"),u9e.forEach(t),Flr=i(le),c6=n(le,"LI",{});var _9e=s(c6);I_e=n(_9e,"STRONG",{});var pht=s(I_e);Tlr=r(pht,"mobilebert"),pht.forEach(t),Mlr=r(_9e," \u2014 "),gz=n(_9e,"A",{href:!0});var uht=s(gz);Elr=r(uht,"TFMobileBertForPreTraining"),uht.forEach(t),Clr=r(_9e," (MobileBERT model)"),_9e.forEach(t),wlr=i(le),f6=n(le,"LI",{});var b9e=s(f6);q_e=n(b9e,"STRONG",{});var _ht=s(q_e);Alr=r(_ht,"mpnet"),_ht.forEach(t),ylr=r(b9e," \u2014 "),hz=n(b9e,"A",{href:!0});var bht=s(hz);Llr=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),xlr=r(b9e," (MPNet model)"),b9e.forEach(t),$lr=i(le),m6=n(le,"LI",{});var v9e=s(m6);N_e=n(v9e,"STRONG",{});var vht=s(N_e);klr=r(vht,"openai-gpt"),vht.forEach(t),Slr=r(v9e," \u2014 "),pz=n(v9e,"A",{href:!0});var Fht=s(pz);Rlr=r(Fht,"TFOpenAIGPTLMHeadModel"),Fht.forEach(t),Blr=r(v9e," (OpenAI GPT model)"),v9e.forEach(t),Plr=i(le),g6=n(le,"LI",{});var F9e=s(g6);j_e=n(F9e,"STRONG",{});var Tht=s(j_e);Ilr=r(Tht,"roberta"),Tht.forEach(t),qlr=r(F9e," \u2014 "),uz=n(F9e,"A",{href:!0});var Mht=s(uz);Nlr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),jlr=r(F9e," (RoBERTa model)"),F9e.forEach(t),Dlr=i(le),h6=n(le,"LI",{});var T9e=s(h6);D_e=n(T9e,"STRONG",{});var Eht=s(D_e);Glr=r(Eht,"t5"),Eht.forEach(t),Olr=r(T9e," \u2014 "),_z=n(T9e,"A",{href:!0});var Cht=s(_z);Vlr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),Xlr=r(T9e," (T5 model)"),T9e.forEach(t),zlr=i(le),p6=n(le,"LI",{});var M9e=s(p6);G_e=n(M9e,"STRONG",{});var wht=s(G_e);Qlr=r(wht,"tapas"),wht.forEach(t),Wlr=r(M9e," \u2014 "),bz=n(M9e,"A",{href:!0});var Aht=s(bz);Hlr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),Ulr=r(M9e," (TAPAS model)"),M9e.forEach(t),Jlr=i(le),u6=n(le,"LI",{});var E9e=s(u6);O_e=n(E9e,"STRONG",{});var yht=s(O_e);Ylr=r(yht,"transfo-xl"),yht.forEach(t),Klr=r(E9e," \u2014 "),vz=n(E9e,"A",{href:!0});var Lht=s(vz);Zlr=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),eir=r(E9e," (Transformer-XL model)"),E9e.forEach(t),oir=i(le),_6=n(le,"LI",{});var C9e=s(_6);V_e=n(C9e,"STRONG",{});var xht=s(V_e);rir=r(xht,"vit_mae"),xht.forEach(t),tir=r(C9e," \u2014 "),Fz=n(C9e,"A",{href:!0});var $ht=s(Fz);air=r($ht,"TFViTMAEForPreTraining"),$ht.forEach(t),nir=r(C9e," (ViTMAE model)"),C9e.forEach(t),sir=i(le),b6=n(le,"LI",{});var w9e=s(b6);X_e=n(w9e,"STRONG",{});var kht=s(X_e);lir=r(kht,"xlm"),kht.forEach(t),iir=r(w9e," \u2014 "),Tz=n(w9e,"A",{href:!0});var Sht=s(Tz);dir=r(Sht,"TFXLMWithLMHeadModel"),Sht.forEach(t),cir=r(w9e," (XLM model)"),w9e.forEach(t),fir=i(le),v6=n(le,"LI",{});var A9e=s(v6);z_e=n(A9e,"STRONG",{});var Rht=s(z_e);mir=r(Rht,"xlm-roberta"),Rht.forEach(t),gir=r(A9e," \u2014 "),Mz=n(A9e,"A",{href:!0});var Bht=s(Mz);hir=r(Bht,"TFXLMRobertaForMaskedLM"),Bht.forEach(t),pir=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),uir=i(le),F6=n(le,"LI",{});var y9e=s(F6);Q_e=n(y9e,"STRONG",{});var Pht=s(Q_e);_ir=r(Pht,"xlnet"),Pht.forEach(t),bir=r(y9e," \u2014 "),Ez=n(y9e,"A",{href:!0});var Iht=s(Ez);vir=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Fir=r(y9e," (XLNet model)"),y9e.forEach(t),le.forEach(t),Tir=i(ll),T(T6.$$.fragment,ll),ll.forEach(t),sl.forEach(t),KBe=i(f),qd=n(f,"H2",{class:!0});var oqe=s(qd);M6=n(oqe,"A",{id:!0,class:!0,href:!0});var qht=s(M6);W_e=n(qht,"SPAN",{});var Nht=s(W_e);T(l8.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Mir=i(oqe),H_e=n(oqe,"SPAN",{});var jht=s(H_e);Eir=r(jht,"TFAutoModelForCausalLM"),jht.forEach(t),oqe.forEach(t),ZBe=i(f),Yo=n(f,"DIV",{class:!0});var il=s(Yo);T(i8.$$.fragment,il),Cir=i(il),Nd=n(il,"P",{});var KY=s(Nd);wir=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Cz=n(KY,"A",{href:!0});var Dht=s(Cz);Air=r(Dht,"from_pretrained()"),Dht.forEach(t),yir=r(KY," class method or the "),wz=n(KY,"A",{href:!0});var Ght=s(wz);Lir=r(Ght,"from_config()"),Ght.forEach(t),xir=r(KY,` class
method.`),KY.forEach(t),$ir=i(il),d8=n(il,"P",{});var rqe=s(d8);kir=r(rqe,"This class cannot be instantiated directly using "),U_e=n(rqe,"CODE",{});var Oht=s(U_e);Sir=r(Oht,"__init__()"),Oht.forEach(t),Rir=r(rqe," (throws an error)."),rqe.forEach(t),Bir=i(il),Ct=n(il,"DIV",{class:!0});var Tw=s(Ct);T(c8.$$.fragment,Tw),Pir=i(Tw),J_e=n(Tw,"P",{});var Vht=s(J_e);Iir=r(Vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vht.forEach(t),qir=i(Tw),jd=n(Tw,"P",{});var ZY=s(jd);Nir=r(ZY,`Note:
Loading a model from its configuration file does `),Y_e=n(ZY,"STRONG",{});var Xht=s(Y_e);jir=r(Xht,"not"),Xht.forEach(t),Dir=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(ZY,"A",{href:!0});var zht=s(Az);Gir=r(zht,"from_pretrained()"),zht.forEach(t),Oir=r(ZY," to load the model weights."),ZY.forEach(t),Vir=i(Tw),T(E6.$$.fragment,Tw),Tw.forEach(t),Xir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(f8.$$.fragment,dl),zir=i(dl),K_e=n(dl,"P",{});var Qht=s(K_e);Qir=r(Qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qht.forEach(t),Wir=i(dl),Ja=n(dl,"P",{});var Mw=s(Ja);Hir=r(Mw,"The model class to instantiate is selected based on the "),Z_e=n(Mw,"CODE",{});var Wht=s(Z_e);Uir=r(Wht,"model_type"),Wht.forEach(t),Jir=r(Mw,` property of the config object (either
passed as an argument or loaded from `),e2e=n(Mw,"CODE",{});var Hht=s(e2e);Yir=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),Kir=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(Mw,"CODE",{});var Uht=s(o2e);Zir=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),edr=r(Mw,":"),Mw.forEach(t),odr=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);C6=n(Ce,"LI",{});var L9e=s(C6);r2e=n(L9e,"STRONG",{});var Jht=s(r2e);rdr=r(Jht,"bert"),Jht.forEach(t),tdr=r(L9e," \u2014 "),yz=n(L9e,"A",{href:!0});var Yht=s(yz);adr=r(Yht,"TFBertLMHeadModel"),Yht.forEach(t),ndr=r(L9e," (BERT model)"),L9e.forEach(t),sdr=i(Ce),w6=n(Ce,"LI",{});var x9e=s(w6);t2e=n(x9e,"STRONG",{});var Kht=s(t2e);ldr=r(Kht,"camembert"),Kht.forEach(t),idr=r(x9e," \u2014 "),Lz=n(x9e,"A",{href:!0});var Zht=s(Lz);ddr=r(Zht,"TFCamembertForCausalLM"),Zht.forEach(t),cdr=r(x9e," (CamemBERT model)"),x9e.forEach(t),fdr=i(Ce),A6=n(Ce,"LI",{});var $9e=s(A6);a2e=n($9e,"STRONG",{});var ept=s(a2e);mdr=r(ept,"ctrl"),ept.forEach(t),gdr=r($9e," \u2014 "),xz=n($9e,"A",{href:!0});var opt=s(xz);hdr=r(opt,"TFCTRLLMHeadModel"),opt.forEach(t),pdr=r($9e," (CTRL model)"),$9e.forEach(t),udr=i(Ce),y6=n(Ce,"LI",{});var k9e=s(y6);n2e=n(k9e,"STRONG",{});var rpt=s(n2e);_dr=r(rpt,"gpt2"),rpt.forEach(t),bdr=r(k9e," \u2014 "),$z=n(k9e,"A",{href:!0});var tpt=s($z);vdr=r(tpt,"TFGPT2LMHeadModel"),tpt.forEach(t),Fdr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),Tdr=i(Ce),L6=n(Ce,"LI",{});var S9e=s(L6);s2e=n(S9e,"STRONG",{});var apt=s(s2e);Mdr=r(apt,"gptj"),apt.forEach(t),Edr=r(S9e," \u2014 "),kz=n(S9e,"A",{href:!0});var npt=s(kz);Cdr=r(npt,"TFGPTJForCausalLM"),npt.forEach(t),wdr=r(S9e," (GPT-J model)"),S9e.forEach(t),Adr=i(Ce),x6=n(Ce,"LI",{});var R9e=s(x6);l2e=n(R9e,"STRONG",{});var spt=s(l2e);ydr=r(spt,"openai-gpt"),spt.forEach(t),Ldr=r(R9e," \u2014 "),Sz=n(R9e,"A",{href:!0});var lpt=s(Sz);xdr=r(lpt,"TFOpenAIGPTLMHeadModel"),lpt.forEach(t),$dr=r(R9e," (OpenAI GPT model)"),R9e.forEach(t),kdr=i(Ce),$6=n(Ce,"LI",{});var B9e=s($6);i2e=n(B9e,"STRONG",{});var ipt=s(i2e);Sdr=r(ipt,"rembert"),ipt.forEach(t),Rdr=r(B9e," \u2014 "),Rz=n(B9e,"A",{href:!0});var dpt=s(Rz);Bdr=r(dpt,"TFRemBertForCausalLM"),dpt.forEach(t),Pdr=r(B9e," (RemBERT model)"),B9e.forEach(t),Idr=i(Ce),k6=n(Ce,"LI",{});var P9e=s(k6);d2e=n(P9e,"STRONG",{});var cpt=s(d2e);qdr=r(cpt,"roberta"),cpt.forEach(t),Ndr=r(P9e," \u2014 "),Bz=n(P9e,"A",{href:!0});var fpt=s(Bz);jdr=r(fpt,"TFRobertaForCausalLM"),fpt.forEach(t),Ddr=r(P9e," (RoBERTa model)"),P9e.forEach(t),Gdr=i(Ce),S6=n(Ce,"LI",{});var I9e=s(S6);c2e=n(I9e,"STRONG",{});var mpt=s(c2e);Odr=r(mpt,"roformer"),mpt.forEach(t),Vdr=r(I9e," \u2014 "),Pz=n(I9e,"A",{href:!0});var gpt=s(Pz);Xdr=r(gpt,"TFRoFormerForCausalLM"),gpt.forEach(t),zdr=r(I9e," (RoFormer model)"),I9e.forEach(t),Qdr=i(Ce),R6=n(Ce,"LI",{});var q9e=s(R6);f2e=n(q9e,"STRONG",{});var hpt=s(f2e);Wdr=r(hpt,"transfo-xl"),hpt.forEach(t),Hdr=r(q9e," \u2014 "),Iz=n(q9e,"A",{href:!0});var ppt=s(Iz);Udr=r(ppt,"TFTransfoXLLMHeadModel"),ppt.forEach(t),Jdr=r(q9e," (Transformer-XL model)"),q9e.forEach(t),Ydr=i(Ce),B6=n(Ce,"LI",{});var N9e=s(B6);m2e=n(N9e,"STRONG",{});var upt=s(m2e);Kdr=r(upt,"xlm"),upt.forEach(t),Zdr=r(N9e," \u2014 "),qz=n(N9e,"A",{href:!0});var _pt=s(qz);ecr=r(_pt,"TFXLMWithLMHeadModel"),_pt.forEach(t),ocr=r(N9e," (XLM model)"),N9e.forEach(t),rcr=i(Ce),P6=n(Ce,"LI",{});var j9e=s(P6);g2e=n(j9e,"STRONG",{});var bpt=s(g2e);tcr=r(bpt,"xlnet"),bpt.forEach(t),acr=r(j9e," \u2014 "),Nz=n(j9e,"A",{href:!0});var vpt=s(Nz);ncr=r(vpt,"TFXLNetLMHeadModel"),vpt.forEach(t),scr=r(j9e," (XLNet model)"),j9e.forEach(t),Ce.forEach(t),lcr=i(dl),T(I6.$$.fragment,dl),dl.forEach(t),il.forEach(t),ePe=i(f),Dd=n(f,"H2",{class:!0});var tqe=s(Dd);q6=n(tqe,"A",{id:!0,class:!0,href:!0});var Fpt=s(q6);h2e=n(Fpt,"SPAN",{});var Tpt=s(h2e);T(m8.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),icr=i(tqe),p2e=n(tqe,"SPAN",{});var Mpt=s(p2e);dcr=r(Mpt,"TFAutoModelForImageClassification"),Mpt.forEach(t),tqe.forEach(t),oPe=i(f),Ko=n(f,"DIV",{class:!0});var cl=s(Ko);T(g8.$$.fragment,cl),ccr=i(cl),Gd=n(cl,"P",{});var eK=s(Gd);fcr=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jz=n(eK,"A",{href:!0});var Ept=s(jz);mcr=r(Ept,"from_pretrained()"),Ept.forEach(t),gcr=r(eK," class method or the "),Dz=n(eK,"A",{href:!0});var Cpt=s(Dz);hcr=r(Cpt,"from_config()"),Cpt.forEach(t),pcr=r(eK,` class
method.`),eK.forEach(t),ucr=i(cl),h8=n(cl,"P",{});var aqe=s(h8);_cr=r(aqe,"This class cannot be instantiated directly using "),u2e=n(aqe,"CODE",{});var wpt=s(u2e);bcr=r(wpt,"__init__()"),wpt.forEach(t),vcr=r(aqe," (throws an error)."),aqe.forEach(t),Fcr=i(cl),wt=n(cl,"DIV",{class:!0});var Ew=s(wt);T(p8.$$.fragment,Ew),Tcr=i(Ew),_2e=n(Ew,"P",{});var Apt=s(_2e);Mcr=r(Apt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Apt.forEach(t),Ecr=i(Ew),Od=n(Ew,"P",{});var oK=s(Od);Ccr=r(oK,`Note:
Loading a model from its configuration file does `),b2e=n(oK,"STRONG",{});var ypt=s(b2e);wcr=r(ypt,"not"),ypt.forEach(t),Acr=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(oK,"A",{href:!0});var Lpt=s(Gz);ycr=r(Lpt,"from_pretrained()"),Lpt.forEach(t),Lcr=r(oK," to load the model weights."),oK.forEach(t),xcr=i(Ew),T(N6.$$.fragment,Ew),Ew.forEach(t),$cr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(u8.$$.fragment,fl),kcr=i(fl),v2e=n(fl,"P",{});var xpt=s(v2e);Scr=r(xpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xpt.forEach(t),Rcr=i(fl),Ya=n(fl,"P",{});var Cw=s(Ya);Bcr=r(Cw,"The model class to instantiate is selected based on the "),F2e=n(Cw,"CODE",{});var $pt=s(F2e);Pcr=r($pt,"model_type"),$pt.forEach(t),Icr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),T2e=n(Cw,"CODE",{});var kpt=s(T2e);qcr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),Ncr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M2e=n(Cw,"CODE",{});var Spt=s(M2e);jcr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),Dcr=r(Cw,":"),Cw.forEach(t),Gcr=i(fl),_8=n(fl,"UL",{});var nqe=s(_8);j6=n(nqe,"LI",{});var D9e=s(j6);E2e=n(D9e,"STRONG",{});var Rpt=s(E2e);Ocr=r(Rpt,"convnext"),Rpt.forEach(t),Vcr=r(D9e," \u2014 "),Oz=n(D9e,"A",{href:!0});var Bpt=s(Oz);Xcr=r(Bpt,"TFConvNextForImageClassification"),Bpt.forEach(t),zcr=r(D9e," (ConvNext model)"),D9e.forEach(t),Qcr=i(nqe),D6=n(nqe,"LI",{});var G9e=s(D6);C2e=n(G9e,"STRONG",{});var Ppt=s(C2e);Wcr=r(Ppt,"vit"),Ppt.forEach(t),Hcr=r(G9e," \u2014 "),Vz=n(G9e,"A",{href:!0});var Ipt=s(Vz);Ucr=r(Ipt,"TFViTForImageClassification"),Ipt.forEach(t),Jcr=r(G9e," (ViT model)"),G9e.forEach(t),nqe.forEach(t),Ycr=i(fl),T(G6.$$.fragment,fl),fl.forEach(t),cl.forEach(t),rPe=i(f),Vd=n(f,"H2",{class:!0});var sqe=s(Vd);O6=n(sqe,"A",{id:!0,class:!0,href:!0});var qpt=s(O6);w2e=n(qpt,"SPAN",{});var Npt=s(w2e);T(b8.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),Kcr=i(sqe),A2e=n(sqe,"SPAN",{});var jpt=s(A2e);Zcr=r(jpt,"TFAutoModelForMaskedLM"),jpt.forEach(t),sqe.forEach(t),tPe=i(f),Zo=n(f,"DIV",{class:!0});var ml=s(Zo);T(v8.$$.fragment,ml),efr=i(ml),Xd=n(ml,"P",{});var rK=s(Xd);ofr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Xz=n(rK,"A",{href:!0});var Dpt=s(Xz);rfr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),tfr=r(rK," class method or the "),zz=n(rK,"A",{href:!0});var Gpt=s(zz);afr=r(Gpt,"from_config()"),Gpt.forEach(t),nfr=r(rK,` class
method.`),rK.forEach(t),sfr=i(ml),F8=n(ml,"P",{});var lqe=s(F8);lfr=r(lqe,"This class cannot be instantiated directly using "),y2e=n(lqe,"CODE",{});var Opt=s(y2e);ifr=r(Opt,"__init__()"),Opt.forEach(t),dfr=r(lqe," (throws an error)."),lqe.forEach(t),cfr=i(ml),At=n(ml,"DIV",{class:!0});var ww=s(At);T(T8.$$.fragment,ww),ffr=i(ww),L2e=n(ww,"P",{});var Vpt=s(L2e);mfr=r(Vpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vpt.forEach(t),gfr=i(ww),zd=n(ww,"P",{});var tK=s(zd);hfr=r(tK,`Note:
Loading a model from its configuration file does `),x2e=n(tK,"STRONG",{});var Xpt=s(x2e);pfr=r(Xpt,"not"),Xpt.forEach(t),ufr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(tK,"A",{href:!0});var zpt=s(Qz);_fr=r(zpt,"from_pretrained()"),zpt.forEach(t),bfr=r(tK," to load the model weights."),tK.forEach(t),vfr=i(ww),T(V6.$$.fragment,ww),ww.forEach(t),Ffr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(M8.$$.fragment,gl),Tfr=i(gl),$2e=n(gl,"P",{});var Qpt=s($2e);Mfr=r(Qpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qpt.forEach(t),Efr=i(gl),Ka=n(gl,"P",{});var Aw=s(Ka);Cfr=r(Aw,"The model class to instantiate is selected based on the "),k2e=n(Aw,"CODE",{});var Wpt=s(k2e);wfr=r(Wpt,"model_type"),Wpt.forEach(t),Afr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),S2e=n(Aw,"CODE",{});var Hpt=s(S2e);yfr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Lfr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(Aw,"CODE",{});var Upt=s(R2e);xfr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),$fr=r(Aw,":"),Aw.forEach(t),kfr=i(gl),ie=n(gl,"UL",{});var fe=s(ie);X6=n(fe,"LI",{});var O9e=s(X6);B2e=n(O9e,"STRONG",{});var Jpt=s(B2e);Sfr=r(Jpt,"albert"),Jpt.forEach(t),Rfr=r(O9e," \u2014 "),Wz=n(O9e,"A",{href:!0});var Ypt=s(Wz);Bfr=r(Ypt,"TFAlbertForMaskedLM"),Ypt.forEach(t),Pfr=r(O9e," (ALBERT model)"),O9e.forEach(t),Ifr=i(fe),z6=n(fe,"LI",{});var V9e=s(z6);P2e=n(V9e,"STRONG",{});var Kpt=s(P2e);qfr=r(Kpt,"bert"),Kpt.forEach(t),Nfr=r(V9e," \u2014 "),Hz=n(V9e,"A",{href:!0});var Zpt=s(Hz);jfr=r(Zpt,"TFBertForMaskedLM"),Zpt.forEach(t),Dfr=r(V9e," (BERT model)"),V9e.forEach(t),Gfr=i(fe),Q6=n(fe,"LI",{});var X9e=s(Q6);I2e=n(X9e,"STRONG",{});var eut=s(I2e);Ofr=r(eut,"camembert"),eut.forEach(t),Vfr=r(X9e," \u2014 "),Uz=n(X9e,"A",{href:!0});var out=s(Uz);Xfr=r(out,"TFCamembertForMaskedLM"),out.forEach(t),zfr=r(X9e," (CamemBERT model)"),X9e.forEach(t),Qfr=i(fe),W6=n(fe,"LI",{});var z9e=s(W6);q2e=n(z9e,"STRONG",{});var rut=s(q2e);Wfr=r(rut,"convbert"),rut.forEach(t),Hfr=r(z9e," \u2014 "),Jz=n(z9e,"A",{href:!0});var tut=s(Jz);Ufr=r(tut,"TFConvBertForMaskedLM"),tut.forEach(t),Jfr=r(z9e," (ConvBERT model)"),z9e.forEach(t),Yfr=i(fe),H6=n(fe,"LI",{});var Q9e=s(H6);N2e=n(Q9e,"STRONG",{});var aut=s(N2e);Kfr=r(aut,"deberta"),aut.forEach(t),Zfr=r(Q9e," \u2014 "),Yz=n(Q9e,"A",{href:!0});var nut=s(Yz);emr=r(nut,"TFDebertaForMaskedLM"),nut.forEach(t),omr=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),rmr=i(fe),U6=n(fe,"LI",{});var W9e=s(U6);j2e=n(W9e,"STRONG",{});var sut=s(j2e);tmr=r(sut,"deberta-v2"),sut.forEach(t),amr=r(W9e," \u2014 "),Kz=n(W9e,"A",{href:!0});var lut=s(Kz);nmr=r(lut,"TFDebertaV2ForMaskedLM"),lut.forEach(t),smr=r(W9e," (DeBERTa-v2 model)"),W9e.forEach(t),lmr=i(fe),J6=n(fe,"LI",{});var H9e=s(J6);D2e=n(H9e,"STRONG",{});var iut=s(D2e);imr=r(iut,"distilbert"),iut.forEach(t),dmr=r(H9e," \u2014 "),Zz=n(H9e,"A",{href:!0});var dut=s(Zz);cmr=r(dut,"TFDistilBertForMaskedLM"),dut.forEach(t),fmr=r(H9e," (DistilBERT model)"),H9e.forEach(t),mmr=i(fe),Y6=n(fe,"LI",{});var U9e=s(Y6);G2e=n(U9e,"STRONG",{});var cut=s(G2e);gmr=r(cut,"electra"),cut.forEach(t),hmr=r(U9e," \u2014 "),eQ=n(U9e,"A",{href:!0});var fut=s(eQ);pmr=r(fut,"TFElectraForMaskedLM"),fut.forEach(t),umr=r(U9e," (ELECTRA model)"),U9e.forEach(t),_mr=i(fe),K6=n(fe,"LI",{});var J9e=s(K6);O2e=n(J9e,"STRONG",{});var mut=s(O2e);bmr=r(mut,"flaubert"),mut.forEach(t),vmr=r(J9e," \u2014 "),oQ=n(J9e,"A",{href:!0});var gut=s(oQ);Fmr=r(gut,"TFFlaubertWithLMHeadModel"),gut.forEach(t),Tmr=r(J9e," (FlauBERT model)"),J9e.forEach(t),Mmr=i(fe),Z6=n(fe,"LI",{});var Y9e=s(Z6);V2e=n(Y9e,"STRONG",{});var hut=s(V2e);Emr=r(hut,"funnel"),hut.forEach(t),Cmr=r(Y9e," \u2014 "),rQ=n(Y9e,"A",{href:!0});var put=s(rQ);wmr=r(put,"TFFunnelForMaskedLM"),put.forEach(t),Amr=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),ymr=i(fe),eT=n(fe,"LI",{});var K9e=s(eT);X2e=n(K9e,"STRONG",{});var uut=s(X2e);Lmr=r(uut,"layoutlm"),uut.forEach(t),xmr=r(K9e," \u2014 "),tQ=n(K9e,"A",{href:!0});var _ut=s(tQ);$mr=r(_ut,"TFLayoutLMForMaskedLM"),_ut.forEach(t),kmr=r(K9e," (LayoutLM model)"),K9e.forEach(t),Smr=i(fe),oT=n(fe,"LI",{});var Z9e=s(oT);z2e=n(Z9e,"STRONG",{});var but=s(z2e);Rmr=r(but,"longformer"),but.forEach(t),Bmr=r(Z9e," \u2014 "),aQ=n(Z9e,"A",{href:!0});var vut=s(aQ);Pmr=r(vut,"TFLongformerForMaskedLM"),vut.forEach(t),Imr=r(Z9e," (Longformer model)"),Z9e.forEach(t),qmr=i(fe),rT=n(fe,"LI",{});var e$e=s(rT);Q2e=n(e$e,"STRONG",{});var Fut=s(Q2e);Nmr=r(Fut,"mobilebert"),Fut.forEach(t),jmr=r(e$e," \u2014 "),nQ=n(e$e,"A",{href:!0});var Tut=s(nQ);Dmr=r(Tut,"TFMobileBertForMaskedLM"),Tut.forEach(t),Gmr=r(e$e," (MobileBERT model)"),e$e.forEach(t),Omr=i(fe),tT=n(fe,"LI",{});var o$e=s(tT);W2e=n(o$e,"STRONG",{});var Mut=s(W2e);Vmr=r(Mut,"mpnet"),Mut.forEach(t),Xmr=r(o$e," \u2014 "),sQ=n(o$e,"A",{href:!0});var Eut=s(sQ);zmr=r(Eut,"TFMPNetForMaskedLM"),Eut.forEach(t),Qmr=r(o$e," (MPNet model)"),o$e.forEach(t),Wmr=i(fe),aT=n(fe,"LI",{});var r$e=s(aT);H2e=n(r$e,"STRONG",{});var Cut=s(H2e);Hmr=r(Cut,"rembert"),Cut.forEach(t),Umr=r(r$e," \u2014 "),lQ=n(r$e,"A",{href:!0});var wut=s(lQ);Jmr=r(wut,"TFRemBertForMaskedLM"),wut.forEach(t),Ymr=r(r$e," (RemBERT model)"),r$e.forEach(t),Kmr=i(fe),nT=n(fe,"LI",{});var t$e=s(nT);U2e=n(t$e,"STRONG",{});var Aut=s(U2e);Zmr=r(Aut,"roberta"),Aut.forEach(t),egr=r(t$e," \u2014 "),iQ=n(t$e,"A",{href:!0});var yut=s(iQ);ogr=r(yut,"TFRobertaForMaskedLM"),yut.forEach(t),rgr=r(t$e," (RoBERTa model)"),t$e.forEach(t),tgr=i(fe),sT=n(fe,"LI",{});var a$e=s(sT);J2e=n(a$e,"STRONG",{});var Lut=s(J2e);agr=r(Lut,"roformer"),Lut.forEach(t),ngr=r(a$e," \u2014 "),dQ=n(a$e,"A",{href:!0});var xut=s(dQ);sgr=r(xut,"TFRoFormerForMaskedLM"),xut.forEach(t),lgr=r(a$e," (RoFormer model)"),a$e.forEach(t),igr=i(fe),lT=n(fe,"LI",{});var n$e=s(lT);Y2e=n(n$e,"STRONG",{});var $ut=s(Y2e);dgr=r($ut,"tapas"),$ut.forEach(t),cgr=r(n$e," \u2014 "),cQ=n(n$e,"A",{href:!0});var kut=s(cQ);fgr=r(kut,"TFTapasForMaskedLM"),kut.forEach(t),mgr=r(n$e," (TAPAS model)"),n$e.forEach(t),ggr=i(fe),iT=n(fe,"LI",{});var s$e=s(iT);K2e=n(s$e,"STRONG",{});var Sut=s(K2e);hgr=r(Sut,"xlm"),Sut.forEach(t),pgr=r(s$e," \u2014 "),fQ=n(s$e,"A",{href:!0});var Rut=s(fQ);ugr=r(Rut,"TFXLMWithLMHeadModel"),Rut.forEach(t),_gr=r(s$e," (XLM model)"),s$e.forEach(t),bgr=i(fe),dT=n(fe,"LI",{});var l$e=s(dT);Z2e=n(l$e,"STRONG",{});var But=s(Z2e);vgr=r(But,"xlm-roberta"),But.forEach(t),Fgr=r(l$e," \u2014 "),mQ=n(l$e,"A",{href:!0});var Put=s(mQ);Tgr=r(Put,"TFXLMRobertaForMaskedLM"),Put.forEach(t),Mgr=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),fe.forEach(t),Egr=i(gl),T(cT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),aPe=i(f),Qd=n(f,"H2",{class:!0});var iqe=s(Qd);fT=n(iqe,"A",{id:!0,class:!0,href:!0});var Iut=s(fT);e1e=n(Iut,"SPAN",{});var qut=s(e1e);T(E8.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),Cgr=i(iqe),o1e=n(iqe,"SPAN",{});var Nut=s(o1e);wgr=r(Nut,"TFAutoModelForSeq2SeqLM"),Nut.forEach(t),iqe.forEach(t),nPe=i(f),er=n(f,"DIV",{class:!0});var hl=s(er);T(C8.$$.fragment,hl),Agr=i(hl),Wd=n(hl,"P",{});var aK=s(Wd);ygr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gQ=n(aK,"A",{href:!0});var jut=s(gQ);Lgr=r(jut,"from_pretrained()"),jut.forEach(t),xgr=r(aK," class method or the "),hQ=n(aK,"A",{href:!0});var Dut=s(hQ);$gr=r(Dut,"from_config()"),Dut.forEach(t),kgr=r(aK,` class
method.`),aK.forEach(t),Sgr=i(hl),w8=n(hl,"P",{});var dqe=s(w8);Rgr=r(dqe,"This class cannot be instantiated directly using "),r1e=n(dqe,"CODE",{});var Gut=s(r1e);Bgr=r(Gut,"__init__()"),Gut.forEach(t),Pgr=r(dqe," (throws an error)."),dqe.forEach(t),Igr=i(hl),yt=n(hl,"DIV",{class:!0});var yw=s(yt);T(A8.$$.fragment,yw),qgr=i(yw),t1e=n(yw,"P",{});var Out=s(t1e);Ngr=r(Out,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Out.forEach(t),jgr=i(yw),Hd=n(yw,"P",{});var nK=s(Hd);Dgr=r(nK,`Note:
Loading a model from its configuration file does `),a1e=n(nK,"STRONG",{});var Vut=s(a1e);Ggr=r(Vut,"not"),Vut.forEach(t),Ogr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(nK,"A",{href:!0});var Xut=s(pQ);Vgr=r(Xut,"from_pretrained()"),Xut.forEach(t),Xgr=r(nK," to load the model weights."),nK.forEach(t),zgr=i(yw),T(mT.$$.fragment,yw),yw.forEach(t),Qgr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(y8.$$.fragment,pl),Wgr=i(pl),n1e=n(pl,"P",{});var zut=s(n1e);Hgr=r(zut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zut.forEach(t),Ugr=i(pl),Za=n(pl,"P",{});var Lw=s(Za);Jgr=r(Lw,"The model class to instantiate is selected based on the "),s1e=n(Lw,"CODE",{});var Qut=s(s1e);Ygr=r(Qut,"model_type"),Qut.forEach(t),Kgr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),l1e=n(Lw,"CODE",{});var Wut=s(l1e);Zgr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),ehr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i1e=n(Lw,"CODE",{});var Hut=s(i1e);ohr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),rhr=r(Lw,":"),Lw.forEach(t),thr=i(pl),ye=n(pl,"UL",{});var Re=s(ye);gT=n(Re,"LI",{});var i$e=s(gT);d1e=n(i$e,"STRONG",{});var Uut=s(d1e);ahr=r(Uut,"bart"),Uut.forEach(t),nhr=r(i$e," \u2014 "),uQ=n(i$e,"A",{href:!0});var Jut=s(uQ);shr=r(Jut,"TFBartForConditionalGeneration"),Jut.forEach(t),lhr=r(i$e," (BART model)"),i$e.forEach(t),ihr=i(Re),hT=n(Re,"LI",{});var d$e=s(hT);c1e=n(d$e,"STRONG",{});var Yut=s(c1e);dhr=r(Yut,"blenderbot"),Yut.forEach(t),chr=r(d$e," \u2014 "),_Q=n(d$e,"A",{href:!0});var Kut=s(_Q);fhr=r(Kut,"TFBlenderbotForConditionalGeneration"),Kut.forEach(t),mhr=r(d$e," (Blenderbot model)"),d$e.forEach(t),ghr=i(Re),pT=n(Re,"LI",{});var c$e=s(pT);f1e=n(c$e,"STRONG",{});var Zut=s(f1e);hhr=r(Zut,"blenderbot-small"),Zut.forEach(t),phr=r(c$e," \u2014 "),bQ=n(c$e,"A",{href:!0});var e_t=s(bQ);uhr=r(e_t,"TFBlenderbotSmallForConditionalGeneration"),e_t.forEach(t),_hr=r(c$e," (BlenderbotSmall model)"),c$e.forEach(t),bhr=i(Re),uT=n(Re,"LI",{});var f$e=s(uT);m1e=n(f$e,"STRONG",{});var o_t=s(m1e);vhr=r(o_t,"encoder-decoder"),o_t.forEach(t),Fhr=r(f$e," \u2014 "),vQ=n(f$e,"A",{href:!0});var r_t=s(vQ);Thr=r(r_t,"TFEncoderDecoderModel"),r_t.forEach(t),Mhr=r(f$e," (Encoder decoder model)"),f$e.forEach(t),Ehr=i(Re),_T=n(Re,"LI",{});var m$e=s(_T);g1e=n(m$e,"STRONG",{});var t_t=s(g1e);Chr=r(t_t,"led"),t_t.forEach(t),whr=r(m$e," \u2014 "),FQ=n(m$e,"A",{href:!0});var a_t=s(FQ);Ahr=r(a_t,"TFLEDForConditionalGeneration"),a_t.forEach(t),yhr=r(m$e," (LED model)"),m$e.forEach(t),Lhr=i(Re),bT=n(Re,"LI",{});var g$e=s(bT);h1e=n(g$e,"STRONG",{});var n_t=s(h1e);xhr=r(n_t,"marian"),n_t.forEach(t),$hr=r(g$e," \u2014 "),TQ=n(g$e,"A",{href:!0});var s_t=s(TQ);khr=r(s_t,"TFMarianMTModel"),s_t.forEach(t),Shr=r(g$e," (Marian model)"),g$e.forEach(t),Rhr=i(Re),vT=n(Re,"LI",{});var h$e=s(vT);p1e=n(h$e,"STRONG",{});var l_t=s(p1e);Bhr=r(l_t,"mbart"),l_t.forEach(t),Phr=r(h$e," \u2014 "),MQ=n(h$e,"A",{href:!0});var i_t=s(MQ);Ihr=r(i_t,"TFMBartForConditionalGeneration"),i_t.forEach(t),qhr=r(h$e," (mBART model)"),h$e.forEach(t),Nhr=i(Re),FT=n(Re,"LI",{});var p$e=s(FT);u1e=n(p$e,"STRONG",{});var d_t=s(u1e);jhr=r(d_t,"mt5"),d_t.forEach(t),Dhr=r(p$e," \u2014 "),EQ=n(p$e,"A",{href:!0});var c_t=s(EQ);Ghr=r(c_t,"TFMT5ForConditionalGeneration"),c_t.forEach(t),Ohr=r(p$e," (mT5 model)"),p$e.forEach(t),Vhr=i(Re),TT=n(Re,"LI",{});var u$e=s(TT);_1e=n(u$e,"STRONG",{});var f_t=s(_1e);Xhr=r(f_t,"pegasus"),f_t.forEach(t),zhr=r(u$e," \u2014 "),CQ=n(u$e,"A",{href:!0});var m_t=s(CQ);Qhr=r(m_t,"TFPegasusForConditionalGeneration"),m_t.forEach(t),Whr=r(u$e," (Pegasus model)"),u$e.forEach(t),Hhr=i(Re),MT=n(Re,"LI",{});var _$e=s(MT);b1e=n(_$e,"STRONG",{});var g_t=s(b1e);Uhr=r(g_t,"t5"),g_t.forEach(t),Jhr=r(_$e," \u2014 "),wQ=n(_$e,"A",{href:!0});var h_t=s(wQ);Yhr=r(h_t,"TFT5ForConditionalGeneration"),h_t.forEach(t),Khr=r(_$e," (T5 model)"),_$e.forEach(t),Re.forEach(t),Zhr=i(pl),T(ET.$$.fragment,pl),pl.forEach(t),hl.forEach(t),sPe=i(f),Ud=n(f,"H2",{class:!0});var cqe=s(Ud);CT=n(cqe,"A",{id:!0,class:!0,href:!0});var p_t=s(CT);v1e=n(p_t,"SPAN",{});var u_t=s(v1e);T(L8.$$.fragment,u_t),u_t.forEach(t),p_t.forEach(t),epr=i(cqe),F1e=n(cqe,"SPAN",{});var __t=s(F1e);opr=r(__t,"TFAutoModelForSequenceClassification"),__t.forEach(t),cqe.forEach(t),lPe=i(f),or=n(f,"DIV",{class:!0});var ul=s(or);T(x8.$$.fragment,ul),rpr=i(ul),Jd=n(ul,"P",{});var sK=s(Jd);tpr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AQ=n(sK,"A",{href:!0});var b_t=s(AQ);apr=r(b_t,"from_pretrained()"),b_t.forEach(t),npr=r(sK," class method or the "),yQ=n(sK,"A",{href:!0});var v_t=s(yQ);spr=r(v_t,"from_config()"),v_t.forEach(t),lpr=r(sK,` class
method.`),sK.forEach(t),ipr=i(ul),$8=n(ul,"P",{});var fqe=s($8);dpr=r(fqe,"This class cannot be instantiated directly using "),T1e=n(fqe,"CODE",{});var F_t=s(T1e);cpr=r(F_t,"__init__()"),F_t.forEach(t),fpr=r(fqe," (throws an error)."),fqe.forEach(t),mpr=i(ul),Lt=n(ul,"DIV",{class:!0});var xw=s(Lt);T(k8.$$.fragment,xw),gpr=i(xw),M1e=n(xw,"P",{});var T_t=s(M1e);hpr=r(T_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T_t.forEach(t),ppr=i(xw),Yd=n(xw,"P",{});var lK=s(Yd);upr=r(lK,`Note:
Loading a model from its configuration file does `),E1e=n(lK,"STRONG",{});var M_t=s(E1e);_pr=r(M_t,"not"),M_t.forEach(t),bpr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LQ=n(lK,"A",{href:!0});var E_t=s(LQ);vpr=r(E_t,"from_pretrained()"),E_t.forEach(t),Fpr=r(lK," to load the model weights."),lK.forEach(t),Tpr=i(xw),T(wT.$$.fragment,xw),xw.forEach(t),Mpr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(S8.$$.fragment,_l),Epr=i(_l),C1e=n(_l,"P",{});var C_t=s(C1e);Cpr=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),wpr=i(_l),en=n(_l,"P",{});var $w=s(en);Apr=r($w,"The model class to instantiate is selected based on the "),w1e=n($w,"CODE",{});var w_t=s(w1e);ypr=r(w_t,"model_type"),w_t.forEach(t),Lpr=r($w,` property of the config object (either
passed as an argument or loaded from `),A1e=n($w,"CODE",{});var A_t=s(A1e);xpr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),$pr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y1e=n($w,"CODE",{});var y_t=s(y1e);kpr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),Spr=r($w,":"),$w.forEach(t),Rpr=i(_l),Z=n(_l,"UL",{});var re=s(Z);AT=n(re,"LI",{});var b$e=s(AT);L1e=n(b$e,"STRONG",{});var L_t=s(L1e);Bpr=r(L_t,"albert"),L_t.forEach(t),Ppr=r(b$e," \u2014 "),xQ=n(b$e,"A",{href:!0});var x_t=s(xQ);Ipr=r(x_t,"TFAlbertForSequenceClassification"),x_t.forEach(t),qpr=r(b$e," (ALBERT model)"),b$e.forEach(t),Npr=i(re),yT=n(re,"LI",{});var v$e=s(yT);x1e=n(v$e,"STRONG",{});var $_t=s(x1e);jpr=r($_t,"bert"),$_t.forEach(t),Dpr=r(v$e," \u2014 "),$Q=n(v$e,"A",{href:!0});var k_t=s($Q);Gpr=r(k_t,"TFBertForSequenceClassification"),k_t.forEach(t),Opr=r(v$e," (BERT model)"),v$e.forEach(t),Vpr=i(re),LT=n(re,"LI",{});var F$e=s(LT);$1e=n(F$e,"STRONG",{});var S_t=s($1e);Xpr=r(S_t,"camembert"),S_t.forEach(t),zpr=r(F$e," \u2014 "),kQ=n(F$e,"A",{href:!0});var R_t=s(kQ);Qpr=r(R_t,"TFCamembertForSequenceClassification"),R_t.forEach(t),Wpr=r(F$e," (CamemBERT model)"),F$e.forEach(t),Hpr=i(re),xT=n(re,"LI",{});var T$e=s(xT);k1e=n(T$e,"STRONG",{});var B_t=s(k1e);Upr=r(B_t,"convbert"),B_t.forEach(t),Jpr=r(T$e," \u2014 "),SQ=n(T$e,"A",{href:!0});var P_t=s(SQ);Ypr=r(P_t,"TFConvBertForSequenceClassification"),P_t.forEach(t),Kpr=r(T$e," (ConvBERT model)"),T$e.forEach(t),Zpr=i(re),$T=n(re,"LI",{});var M$e=s($T);S1e=n(M$e,"STRONG",{});var I_t=s(S1e);eur=r(I_t,"ctrl"),I_t.forEach(t),our=r(M$e," \u2014 "),RQ=n(M$e,"A",{href:!0});var q_t=s(RQ);rur=r(q_t,"TFCTRLForSequenceClassification"),q_t.forEach(t),tur=r(M$e," (CTRL model)"),M$e.forEach(t),aur=i(re),kT=n(re,"LI",{});var E$e=s(kT);R1e=n(E$e,"STRONG",{});var N_t=s(R1e);nur=r(N_t,"deberta"),N_t.forEach(t),sur=r(E$e," \u2014 "),BQ=n(E$e,"A",{href:!0});var j_t=s(BQ);lur=r(j_t,"TFDebertaForSequenceClassification"),j_t.forEach(t),iur=r(E$e," (DeBERTa model)"),E$e.forEach(t),dur=i(re),ST=n(re,"LI",{});var C$e=s(ST);B1e=n(C$e,"STRONG",{});var D_t=s(B1e);cur=r(D_t,"deberta-v2"),D_t.forEach(t),fur=r(C$e," \u2014 "),PQ=n(C$e,"A",{href:!0});var G_t=s(PQ);mur=r(G_t,"TFDebertaV2ForSequenceClassification"),G_t.forEach(t),gur=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),hur=i(re),RT=n(re,"LI",{});var w$e=s(RT);P1e=n(w$e,"STRONG",{});var O_t=s(P1e);pur=r(O_t,"distilbert"),O_t.forEach(t),uur=r(w$e," \u2014 "),IQ=n(w$e,"A",{href:!0});var V_t=s(IQ);_ur=r(V_t,"TFDistilBertForSequenceClassification"),V_t.forEach(t),bur=r(w$e," (DistilBERT model)"),w$e.forEach(t),vur=i(re),BT=n(re,"LI",{});var A$e=s(BT);I1e=n(A$e,"STRONG",{});var X_t=s(I1e);Fur=r(X_t,"electra"),X_t.forEach(t),Tur=r(A$e," \u2014 "),qQ=n(A$e,"A",{href:!0});var z_t=s(qQ);Mur=r(z_t,"TFElectraForSequenceClassification"),z_t.forEach(t),Eur=r(A$e," (ELECTRA model)"),A$e.forEach(t),Cur=i(re),PT=n(re,"LI",{});var y$e=s(PT);q1e=n(y$e,"STRONG",{});var Q_t=s(q1e);wur=r(Q_t,"flaubert"),Q_t.forEach(t),Aur=r(y$e," \u2014 "),NQ=n(y$e,"A",{href:!0});var W_t=s(NQ);yur=r(W_t,"TFFlaubertForSequenceClassification"),W_t.forEach(t),Lur=r(y$e," (FlauBERT model)"),y$e.forEach(t),xur=i(re),IT=n(re,"LI",{});var L$e=s(IT);N1e=n(L$e,"STRONG",{});var H_t=s(N1e);$ur=r(H_t,"funnel"),H_t.forEach(t),kur=r(L$e," \u2014 "),jQ=n(L$e,"A",{href:!0});var U_t=s(jQ);Sur=r(U_t,"TFFunnelForSequenceClassification"),U_t.forEach(t),Rur=r(L$e," (Funnel Transformer model)"),L$e.forEach(t),Bur=i(re),qT=n(re,"LI",{});var x$e=s(qT);j1e=n(x$e,"STRONG",{});var J_t=s(j1e);Pur=r(J_t,"gpt2"),J_t.forEach(t),Iur=r(x$e," \u2014 "),DQ=n(x$e,"A",{href:!0});var Y_t=s(DQ);qur=r(Y_t,"TFGPT2ForSequenceClassification"),Y_t.forEach(t),Nur=r(x$e," (OpenAI GPT-2 model)"),x$e.forEach(t),jur=i(re),NT=n(re,"LI",{});var $$e=s(NT);D1e=n($$e,"STRONG",{});var K_t=s(D1e);Dur=r(K_t,"gptj"),K_t.forEach(t),Gur=r($$e," \u2014 "),GQ=n($$e,"A",{href:!0});var Z_t=s(GQ);Our=r(Z_t,"TFGPTJForSequenceClassification"),Z_t.forEach(t),Vur=r($$e," (GPT-J model)"),$$e.forEach(t),Xur=i(re),jT=n(re,"LI",{});var k$e=s(jT);G1e=n(k$e,"STRONG",{});var e2t=s(G1e);zur=r(e2t,"layoutlm"),e2t.forEach(t),Qur=r(k$e," \u2014 "),OQ=n(k$e,"A",{href:!0});var o2t=s(OQ);Wur=r(o2t,"TFLayoutLMForSequenceClassification"),o2t.forEach(t),Hur=r(k$e," (LayoutLM model)"),k$e.forEach(t),Uur=i(re),DT=n(re,"LI",{});var S$e=s(DT);O1e=n(S$e,"STRONG",{});var r2t=s(O1e);Jur=r(r2t,"longformer"),r2t.forEach(t),Yur=r(S$e," \u2014 "),VQ=n(S$e,"A",{href:!0});var t2t=s(VQ);Kur=r(t2t,"TFLongformerForSequenceClassification"),t2t.forEach(t),Zur=r(S$e," (Longformer model)"),S$e.forEach(t),e_r=i(re),GT=n(re,"LI",{});var R$e=s(GT);V1e=n(R$e,"STRONG",{});var a2t=s(V1e);o_r=r(a2t,"mobilebert"),a2t.forEach(t),r_r=r(R$e," \u2014 "),XQ=n(R$e,"A",{href:!0});var n2t=s(XQ);t_r=r(n2t,"TFMobileBertForSequenceClassification"),n2t.forEach(t),a_r=r(R$e," (MobileBERT model)"),R$e.forEach(t),n_r=i(re),OT=n(re,"LI",{});var B$e=s(OT);X1e=n(B$e,"STRONG",{});var s2t=s(X1e);s_r=r(s2t,"mpnet"),s2t.forEach(t),l_r=r(B$e," \u2014 "),zQ=n(B$e,"A",{href:!0});var l2t=s(zQ);i_r=r(l2t,"TFMPNetForSequenceClassification"),l2t.forEach(t),d_r=r(B$e," (MPNet model)"),B$e.forEach(t),c_r=i(re),VT=n(re,"LI",{});var P$e=s(VT);z1e=n(P$e,"STRONG",{});var i2t=s(z1e);f_r=r(i2t,"openai-gpt"),i2t.forEach(t),m_r=r(P$e," \u2014 "),QQ=n(P$e,"A",{href:!0});var d2t=s(QQ);g_r=r(d2t,"TFOpenAIGPTForSequenceClassification"),d2t.forEach(t),h_r=r(P$e," (OpenAI GPT model)"),P$e.forEach(t),p_r=i(re),XT=n(re,"LI",{});var I$e=s(XT);Q1e=n(I$e,"STRONG",{});var c2t=s(Q1e);u_r=r(c2t,"rembert"),c2t.forEach(t),__r=r(I$e," \u2014 "),WQ=n(I$e,"A",{href:!0});var f2t=s(WQ);b_r=r(f2t,"TFRemBertForSequenceClassification"),f2t.forEach(t),v_r=r(I$e," (RemBERT model)"),I$e.forEach(t),F_r=i(re),zT=n(re,"LI",{});var q$e=s(zT);W1e=n(q$e,"STRONG",{});var m2t=s(W1e);T_r=r(m2t,"roberta"),m2t.forEach(t),M_r=r(q$e," \u2014 "),HQ=n(q$e,"A",{href:!0});var g2t=s(HQ);E_r=r(g2t,"TFRobertaForSequenceClassification"),g2t.forEach(t),C_r=r(q$e," (RoBERTa model)"),q$e.forEach(t),w_r=i(re),QT=n(re,"LI",{});var N$e=s(QT);H1e=n(N$e,"STRONG",{});var h2t=s(H1e);A_r=r(h2t,"roformer"),h2t.forEach(t),y_r=r(N$e," \u2014 "),UQ=n(N$e,"A",{href:!0});var p2t=s(UQ);L_r=r(p2t,"TFRoFormerForSequenceClassification"),p2t.forEach(t),x_r=r(N$e," (RoFormer model)"),N$e.forEach(t),$_r=i(re),WT=n(re,"LI",{});var j$e=s(WT);U1e=n(j$e,"STRONG",{});var u2t=s(U1e);k_r=r(u2t,"tapas"),u2t.forEach(t),S_r=r(j$e," \u2014 "),JQ=n(j$e,"A",{href:!0});var _2t=s(JQ);R_r=r(_2t,"TFTapasForSequenceClassification"),_2t.forEach(t),B_r=r(j$e," (TAPAS model)"),j$e.forEach(t),P_r=i(re),HT=n(re,"LI",{});var D$e=s(HT);J1e=n(D$e,"STRONG",{});var b2t=s(J1e);I_r=r(b2t,"transfo-xl"),b2t.forEach(t),q_r=r(D$e," \u2014 "),YQ=n(D$e,"A",{href:!0});var v2t=s(YQ);N_r=r(v2t,"TFTransfoXLForSequenceClassification"),v2t.forEach(t),j_r=r(D$e," (Transformer-XL model)"),D$e.forEach(t),D_r=i(re),UT=n(re,"LI",{});var G$e=s(UT);Y1e=n(G$e,"STRONG",{});var F2t=s(Y1e);G_r=r(F2t,"xlm"),F2t.forEach(t),O_r=r(G$e," \u2014 "),KQ=n(G$e,"A",{href:!0});var T2t=s(KQ);V_r=r(T2t,"TFXLMForSequenceClassification"),T2t.forEach(t),X_r=r(G$e," (XLM model)"),G$e.forEach(t),z_r=i(re),JT=n(re,"LI",{});var O$e=s(JT);K1e=n(O$e,"STRONG",{});var M2t=s(K1e);Q_r=r(M2t,"xlm-roberta"),M2t.forEach(t),W_r=r(O$e," \u2014 "),ZQ=n(O$e,"A",{href:!0});var E2t=s(ZQ);H_r=r(E2t,"TFXLMRobertaForSequenceClassification"),E2t.forEach(t),U_r=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),J_r=i(re),YT=n(re,"LI",{});var V$e=s(YT);Z1e=n(V$e,"STRONG",{});var C2t=s(Z1e);Y_r=r(C2t,"xlnet"),C2t.forEach(t),K_r=r(V$e," \u2014 "),eW=n(V$e,"A",{href:!0});var w2t=s(eW);Z_r=r(w2t,"TFXLNetForSequenceClassification"),w2t.forEach(t),e2r=r(V$e," (XLNet model)"),V$e.forEach(t),re.forEach(t),o2r=i(_l),T(KT.$$.fragment,_l),_l.forEach(t),ul.forEach(t),iPe=i(f),Kd=n(f,"H2",{class:!0});var mqe=s(Kd);ZT=n(mqe,"A",{id:!0,class:!0,href:!0});var A2t=s(ZT);ebe=n(A2t,"SPAN",{});var y2t=s(ebe);T(R8.$$.fragment,y2t),y2t.forEach(t),A2t.forEach(t),r2r=i(mqe),obe=n(mqe,"SPAN",{});var L2t=s(obe);t2r=r(L2t,"TFAutoModelForMultipleChoice"),L2t.forEach(t),mqe.forEach(t),dPe=i(f),rr=n(f,"DIV",{class:!0});var bl=s(rr);T(B8.$$.fragment,bl),a2r=i(bl),Zd=n(bl,"P",{});var iK=s(Zd);n2r=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),oW=n(iK,"A",{href:!0});var x2t=s(oW);s2r=r(x2t,"from_pretrained()"),x2t.forEach(t),l2r=r(iK," class method or the "),rW=n(iK,"A",{href:!0});var $2t=s(rW);i2r=r($2t,"from_config()"),$2t.forEach(t),d2r=r(iK,` class
method.`),iK.forEach(t),c2r=i(bl),P8=n(bl,"P",{});var gqe=s(P8);f2r=r(gqe,"This class cannot be instantiated directly using "),rbe=n(gqe,"CODE",{});var k2t=s(rbe);m2r=r(k2t,"__init__()"),k2t.forEach(t),g2r=r(gqe," (throws an error)."),gqe.forEach(t),h2r=i(bl),xt=n(bl,"DIV",{class:!0});var kw=s(xt);T(I8.$$.fragment,kw),p2r=i(kw),tbe=n(kw,"P",{});var S2t=s(tbe);u2r=r(S2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S2t.forEach(t),_2r=i(kw),ec=n(kw,"P",{});var dK=s(ec);b2r=r(dK,`Note:
Loading a model from its configuration file does `),abe=n(dK,"STRONG",{});var R2t=s(abe);v2r=r(R2t,"not"),R2t.forEach(t),F2r=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(dK,"A",{href:!0});var B2t=s(tW);T2r=r(B2t,"from_pretrained()"),B2t.forEach(t),M2r=r(dK," to load the model weights."),dK.forEach(t),E2r=i(kw),T(eM.$$.fragment,kw),kw.forEach(t),C2r=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(q8.$$.fragment,vl),w2r=i(vl),nbe=n(vl,"P",{});var P2t=s(nbe);A2r=r(P2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P2t.forEach(t),y2r=i(vl),on=n(vl,"P",{});var Sw=s(on);L2r=r(Sw,"The model class to instantiate is selected based on the "),sbe=n(Sw,"CODE",{});var I2t=s(sbe);x2r=r(I2t,"model_type"),I2t.forEach(t),$2r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),lbe=n(Sw,"CODE",{});var q2t=s(lbe);k2r=r(q2t,"pretrained_model_name_or_path"),q2t.forEach(t),S2r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(Sw,"CODE",{});var N2t=s(ibe);R2r=r(N2t,"pretrained_model_name_or_path"),N2t.forEach(t),B2r=r(Sw,":"),Sw.forEach(t),P2r=i(vl),pe=n(vl,"UL",{});var _e=s(pe);oM=n(_e,"LI",{});var X$e=s(oM);dbe=n(X$e,"STRONG",{});var j2t=s(dbe);I2r=r(j2t,"albert"),j2t.forEach(t),q2r=r(X$e," \u2014 "),aW=n(X$e,"A",{href:!0});var D2t=s(aW);N2r=r(D2t,"TFAlbertForMultipleChoice"),D2t.forEach(t),j2r=r(X$e," (ALBERT model)"),X$e.forEach(t),D2r=i(_e),rM=n(_e,"LI",{});var z$e=s(rM);cbe=n(z$e,"STRONG",{});var G2t=s(cbe);G2r=r(G2t,"bert"),G2t.forEach(t),O2r=r(z$e," \u2014 "),nW=n(z$e,"A",{href:!0});var O2t=s(nW);V2r=r(O2t,"TFBertForMultipleChoice"),O2t.forEach(t),X2r=r(z$e," (BERT model)"),z$e.forEach(t),z2r=i(_e),tM=n(_e,"LI",{});var Q$e=s(tM);fbe=n(Q$e,"STRONG",{});var V2t=s(fbe);Q2r=r(V2t,"camembert"),V2t.forEach(t),W2r=r(Q$e," \u2014 "),sW=n(Q$e,"A",{href:!0});var X2t=s(sW);H2r=r(X2t,"TFCamembertForMultipleChoice"),X2t.forEach(t),U2r=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),J2r=i(_e),aM=n(_e,"LI",{});var W$e=s(aM);mbe=n(W$e,"STRONG",{});var z2t=s(mbe);Y2r=r(z2t,"convbert"),z2t.forEach(t),K2r=r(W$e," \u2014 "),lW=n(W$e,"A",{href:!0});var Q2t=s(lW);Z2r=r(Q2t,"TFConvBertForMultipleChoice"),Q2t.forEach(t),e1r=r(W$e," (ConvBERT model)"),W$e.forEach(t),o1r=i(_e),nM=n(_e,"LI",{});var H$e=s(nM);gbe=n(H$e,"STRONG",{});var W2t=s(gbe);r1r=r(W2t,"distilbert"),W2t.forEach(t),t1r=r(H$e," \u2014 "),iW=n(H$e,"A",{href:!0});var H2t=s(iW);a1r=r(H2t,"TFDistilBertForMultipleChoice"),H2t.forEach(t),n1r=r(H$e," (DistilBERT model)"),H$e.forEach(t),s1r=i(_e),sM=n(_e,"LI",{});var U$e=s(sM);hbe=n(U$e,"STRONG",{});var U2t=s(hbe);l1r=r(U2t,"electra"),U2t.forEach(t),i1r=r(U$e," \u2014 "),dW=n(U$e,"A",{href:!0});var J2t=s(dW);d1r=r(J2t,"TFElectraForMultipleChoice"),J2t.forEach(t),c1r=r(U$e," (ELECTRA model)"),U$e.forEach(t),f1r=i(_e),lM=n(_e,"LI",{});var J$e=s(lM);pbe=n(J$e,"STRONG",{});var Y2t=s(pbe);m1r=r(Y2t,"flaubert"),Y2t.forEach(t),g1r=r(J$e," \u2014 "),cW=n(J$e,"A",{href:!0});var K2t=s(cW);h1r=r(K2t,"TFFlaubertForMultipleChoice"),K2t.forEach(t),p1r=r(J$e," (FlauBERT model)"),J$e.forEach(t),u1r=i(_e),iM=n(_e,"LI",{});var Y$e=s(iM);ube=n(Y$e,"STRONG",{});var Z2t=s(ube);_1r=r(Z2t,"funnel"),Z2t.forEach(t),b1r=r(Y$e," \u2014 "),fW=n(Y$e,"A",{href:!0});var e1t=s(fW);v1r=r(e1t,"TFFunnelForMultipleChoice"),e1t.forEach(t),F1r=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),T1r=i(_e),dM=n(_e,"LI",{});var K$e=s(dM);_be=n(K$e,"STRONG",{});var o1t=s(_be);M1r=r(o1t,"longformer"),o1t.forEach(t),E1r=r(K$e," \u2014 "),mW=n(K$e,"A",{href:!0});var r1t=s(mW);C1r=r(r1t,"TFLongformerForMultipleChoice"),r1t.forEach(t),w1r=r(K$e," (Longformer model)"),K$e.forEach(t),A1r=i(_e),cM=n(_e,"LI",{});var Z$e=s(cM);bbe=n(Z$e,"STRONG",{});var t1t=s(bbe);y1r=r(t1t,"mobilebert"),t1t.forEach(t),L1r=r(Z$e," \u2014 "),gW=n(Z$e,"A",{href:!0});var a1t=s(gW);x1r=r(a1t,"TFMobileBertForMultipleChoice"),a1t.forEach(t),$1r=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),k1r=i(_e),fM=n(_e,"LI",{});var eke=s(fM);vbe=n(eke,"STRONG",{});var n1t=s(vbe);S1r=r(n1t,"mpnet"),n1t.forEach(t),R1r=r(eke," \u2014 "),hW=n(eke,"A",{href:!0});var s1t=s(hW);B1r=r(s1t,"TFMPNetForMultipleChoice"),s1t.forEach(t),P1r=r(eke," (MPNet model)"),eke.forEach(t),I1r=i(_e),mM=n(_e,"LI",{});var oke=s(mM);Fbe=n(oke,"STRONG",{});var l1t=s(Fbe);q1r=r(l1t,"rembert"),l1t.forEach(t),N1r=r(oke," \u2014 "),pW=n(oke,"A",{href:!0});var i1t=s(pW);j1r=r(i1t,"TFRemBertForMultipleChoice"),i1t.forEach(t),D1r=r(oke," (RemBERT model)"),oke.forEach(t),G1r=i(_e),gM=n(_e,"LI",{});var rke=s(gM);Tbe=n(rke,"STRONG",{});var d1t=s(Tbe);O1r=r(d1t,"roberta"),d1t.forEach(t),V1r=r(rke," \u2014 "),uW=n(rke,"A",{href:!0});var c1t=s(uW);X1r=r(c1t,"TFRobertaForMultipleChoice"),c1t.forEach(t),z1r=r(rke," (RoBERTa model)"),rke.forEach(t),Q1r=i(_e),hM=n(_e,"LI",{});var tke=s(hM);Mbe=n(tke,"STRONG",{});var f1t=s(Mbe);W1r=r(f1t,"roformer"),f1t.forEach(t),H1r=r(tke," \u2014 "),_W=n(tke,"A",{href:!0});var m1t=s(_W);U1r=r(m1t,"TFRoFormerForMultipleChoice"),m1t.forEach(t),J1r=r(tke," (RoFormer model)"),tke.forEach(t),Y1r=i(_e),pM=n(_e,"LI",{});var ake=s(pM);Ebe=n(ake,"STRONG",{});var g1t=s(Ebe);K1r=r(g1t,"xlm"),g1t.forEach(t),Z1r=r(ake," \u2014 "),bW=n(ake,"A",{href:!0});var h1t=s(bW);ebr=r(h1t,"TFXLMForMultipleChoice"),h1t.forEach(t),obr=r(ake," (XLM model)"),ake.forEach(t),rbr=i(_e),uM=n(_e,"LI",{});var nke=s(uM);Cbe=n(nke,"STRONG",{});var p1t=s(Cbe);tbr=r(p1t,"xlm-roberta"),p1t.forEach(t),abr=r(nke," \u2014 "),vW=n(nke,"A",{href:!0});var u1t=s(vW);nbr=r(u1t,"TFXLMRobertaForMultipleChoice"),u1t.forEach(t),sbr=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),lbr=i(_e),_M=n(_e,"LI",{});var ske=s(_M);wbe=n(ske,"STRONG",{});var _1t=s(wbe);ibr=r(_1t,"xlnet"),_1t.forEach(t),dbr=r(ske," \u2014 "),FW=n(ske,"A",{href:!0});var b1t=s(FW);cbr=r(b1t,"TFXLNetForMultipleChoice"),b1t.forEach(t),fbr=r(ske," (XLNet model)"),ske.forEach(t),_e.forEach(t),mbr=i(vl),T(bM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),cPe=i(f),oc=n(f,"H2",{class:!0});var hqe=s(oc);vM=n(hqe,"A",{id:!0,class:!0,href:!0});var v1t=s(vM);Abe=n(v1t,"SPAN",{});var F1t=s(Abe);T(N8.$$.fragment,F1t),F1t.forEach(t),v1t.forEach(t),gbr=i(hqe),ybe=n(hqe,"SPAN",{});var T1t=s(ybe);hbr=r(T1t,"TFAutoModelForTableQuestionAnswering"),T1t.forEach(t),hqe.forEach(t),fPe=i(f),tr=n(f,"DIV",{class:!0});var Fl=s(tr);T(j8.$$.fragment,Fl),pbr=i(Fl),rc=n(Fl,"P",{});var cK=s(rc);ubr=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),TW=n(cK,"A",{href:!0});var M1t=s(TW);_br=r(M1t,"from_pretrained()"),M1t.forEach(t),bbr=r(cK," class method or the "),MW=n(cK,"A",{href:!0});var E1t=s(MW);vbr=r(E1t,"from_config()"),E1t.forEach(t),Fbr=r(cK,` class
method.`),cK.forEach(t),Tbr=i(Fl),D8=n(Fl,"P",{});var pqe=s(D8);Mbr=r(pqe,"This class cannot be instantiated directly using "),Lbe=n(pqe,"CODE",{});var C1t=s(Lbe);Ebr=r(C1t,"__init__()"),C1t.forEach(t),Cbr=r(pqe," (throws an error)."),pqe.forEach(t),wbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Rw=s($t);T(G8.$$.fragment,Rw),Abr=i(Rw),xbe=n(Rw,"P",{});var w1t=s(xbe);ybr=r(w1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),w1t.forEach(t),Lbr=i(Rw),tc=n(Rw,"P",{});var fK=s(tc);xbr=r(fK,`Note:
Loading a model from its configuration file does `),$be=n(fK,"STRONG",{});var A1t=s($be);$br=r(A1t,"not"),A1t.forEach(t),kbr=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(fK,"A",{href:!0});var y1t=s(EW);Sbr=r(y1t,"from_pretrained()"),y1t.forEach(t),Rbr=r(fK," to load the model weights."),fK.forEach(t),Bbr=i(Rw),T(FM.$$.fragment,Rw),Rw.forEach(t),Pbr=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(O8.$$.fragment,Tl),Ibr=i(Tl),kbe=n(Tl,"P",{});var L1t=s(kbe);qbr=r(L1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),L1t.forEach(t),Nbr=i(Tl),rn=n(Tl,"P",{});var Bw=s(rn);jbr=r(Bw,"The model class to instantiate is selected based on the "),Sbe=n(Bw,"CODE",{});var x1t=s(Sbe);Dbr=r(x1t,"model_type"),x1t.forEach(t),Gbr=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(Bw,"CODE",{});var $1t=s(Rbe);Obr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),Vbr=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(Bw,"CODE",{});var k1t=s(Bbe);Xbr=r(k1t,"pretrained_model_name_or_path"),k1t.forEach(t),zbr=r(Bw,":"),Bw.forEach(t),Qbr=i(Tl),Pbe=n(Tl,"UL",{});var S1t=s(Pbe);TM=n(S1t,"LI",{});var lke=s(TM);Ibe=n(lke,"STRONG",{});var R1t=s(Ibe);Wbr=r(R1t,"tapas"),R1t.forEach(t),Hbr=r(lke," \u2014 "),CW=n(lke,"A",{href:!0});var B1t=s(CW);Ubr=r(B1t,"TFTapasForQuestionAnswering"),B1t.forEach(t),Jbr=r(lke," (TAPAS model)"),lke.forEach(t),S1t.forEach(t),Ybr=i(Tl),T(MM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),mPe=i(f),ac=n(f,"H2",{class:!0});var uqe=s(ac);EM=n(uqe,"A",{id:!0,class:!0,href:!0});var P1t=s(EM);qbe=n(P1t,"SPAN",{});var I1t=s(qbe);T(V8.$$.fragment,I1t),I1t.forEach(t),P1t.forEach(t),Kbr=i(uqe),Nbe=n(uqe,"SPAN",{});var q1t=s(Nbe);Zbr=r(q1t,"TFAutoModelForTokenClassification"),q1t.forEach(t),uqe.forEach(t),gPe=i(f),ar=n(f,"DIV",{class:!0});var Ml=s(ar);T(X8.$$.fragment,Ml),e4r=i(Ml),nc=n(Ml,"P",{});var mK=s(nc);o4r=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wW=n(mK,"A",{href:!0});var N1t=s(wW);r4r=r(N1t,"from_pretrained()"),N1t.forEach(t),t4r=r(mK," class method or the "),AW=n(mK,"A",{href:!0});var j1t=s(AW);a4r=r(j1t,"from_config()"),j1t.forEach(t),n4r=r(mK,` class
method.`),mK.forEach(t),s4r=i(Ml),z8=n(Ml,"P",{});var _qe=s(z8);l4r=r(_qe,"This class cannot be instantiated directly using "),jbe=n(_qe,"CODE",{});var D1t=s(jbe);i4r=r(D1t,"__init__()"),D1t.forEach(t),d4r=r(_qe," (throws an error)."),_qe.forEach(t),c4r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Pw=s(kt);T(Q8.$$.fragment,Pw),f4r=i(Pw),Dbe=n(Pw,"P",{});var G1t=s(Dbe);m4r=r(G1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G1t.forEach(t),g4r=i(Pw),sc=n(Pw,"P",{});var gK=s(sc);h4r=r(gK,`Note:
Loading a model from its configuration file does `),Gbe=n(gK,"STRONG",{});var O1t=s(Gbe);p4r=r(O1t,"not"),O1t.forEach(t),u4r=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(gK,"A",{href:!0});var V1t=s(yW);_4r=r(V1t,"from_pretrained()"),V1t.forEach(t),b4r=r(gK," to load the model weights."),gK.forEach(t),v4r=i(Pw),T(CM.$$.fragment,Pw),Pw.forEach(t),F4r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(W8.$$.fragment,El),T4r=i(El),Obe=n(El,"P",{});var X1t=s(Obe);M4r=r(X1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X1t.forEach(t),E4r=i(El),tn=n(El,"P",{});var Iw=s(tn);C4r=r(Iw,"The model class to instantiate is selected based on the "),Vbe=n(Iw,"CODE",{});var z1t=s(Vbe);w4r=r(z1t,"model_type"),z1t.forEach(t),A4r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(Iw,"CODE",{});var Q1t=s(Xbe);y4r=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),L4r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(Iw,"CODE",{});var W1t=s(zbe);x4r=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),$4r=r(Iw,":"),Iw.forEach(t),k4r=i(El),de=n(El,"UL",{});var me=s(de);wM=n(me,"LI",{});var ike=s(wM);Qbe=n(ike,"STRONG",{});var H1t=s(Qbe);S4r=r(H1t,"albert"),H1t.forEach(t),R4r=r(ike," \u2014 "),LW=n(ike,"A",{href:!0});var U1t=s(LW);B4r=r(U1t,"TFAlbertForTokenClassification"),U1t.forEach(t),P4r=r(ike," (ALBERT model)"),ike.forEach(t),I4r=i(me),AM=n(me,"LI",{});var dke=s(AM);Wbe=n(dke,"STRONG",{});var J1t=s(Wbe);q4r=r(J1t,"bert"),J1t.forEach(t),N4r=r(dke," \u2014 "),xW=n(dke,"A",{href:!0});var Y1t=s(xW);j4r=r(Y1t,"TFBertForTokenClassification"),Y1t.forEach(t),D4r=r(dke," (BERT model)"),dke.forEach(t),G4r=i(me),yM=n(me,"LI",{});var cke=s(yM);Hbe=n(cke,"STRONG",{});var K1t=s(Hbe);O4r=r(K1t,"camembert"),K1t.forEach(t),V4r=r(cke," \u2014 "),$W=n(cke,"A",{href:!0});var Z1t=s($W);X4r=r(Z1t,"TFCamembertForTokenClassification"),Z1t.forEach(t),z4r=r(cke," (CamemBERT model)"),cke.forEach(t),Q4r=i(me),LM=n(me,"LI",{});var fke=s(LM);Ube=n(fke,"STRONG",{});var ebt=s(Ube);W4r=r(ebt,"convbert"),ebt.forEach(t),H4r=r(fke," \u2014 "),kW=n(fke,"A",{href:!0});var obt=s(kW);U4r=r(obt,"TFConvBertForTokenClassification"),obt.forEach(t),J4r=r(fke," (ConvBERT model)"),fke.forEach(t),Y4r=i(me),xM=n(me,"LI",{});var mke=s(xM);Jbe=n(mke,"STRONG",{});var rbt=s(Jbe);K4r=r(rbt,"deberta"),rbt.forEach(t),Z4r=r(mke," \u2014 "),SW=n(mke,"A",{href:!0});var tbt=s(SW);evr=r(tbt,"TFDebertaForTokenClassification"),tbt.forEach(t),ovr=r(mke," (DeBERTa model)"),mke.forEach(t),rvr=i(me),$M=n(me,"LI",{});var gke=s($M);Ybe=n(gke,"STRONG",{});var abt=s(Ybe);tvr=r(abt,"deberta-v2"),abt.forEach(t),avr=r(gke," \u2014 "),RW=n(gke,"A",{href:!0});var nbt=s(RW);nvr=r(nbt,"TFDebertaV2ForTokenClassification"),nbt.forEach(t),svr=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),lvr=i(me),kM=n(me,"LI",{});var hke=s(kM);Kbe=n(hke,"STRONG",{});var sbt=s(Kbe);ivr=r(sbt,"distilbert"),sbt.forEach(t),dvr=r(hke," \u2014 "),BW=n(hke,"A",{href:!0});var lbt=s(BW);cvr=r(lbt,"TFDistilBertForTokenClassification"),lbt.forEach(t),fvr=r(hke," (DistilBERT model)"),hke.forEach(t),mvr=i(me),SM=n(me,"LI",{});var pke=s(SM);Zbe=n(pke,"STRONG",{});var ibt=s(Zbe);gvr=r(ibt,"electra"),ibt.forEach(t),hvr=r(pke," \u2014 "),PW=n(pke,"A",{href:!0});var dbt=s(PW);pvr=r(dbt,"TFElectraForTokenClassification"),dbt.forEach(t),uvr=r(pke," (ELECTRA model)"),pke.forEach(t),_vr=i(me),RM=n(me,"LI",{});var uke=s(RM);e4e=n(uke,"STRONG",{});var cbt=s(e4e);bvr=r(cbt,"flaubert"),cbt.forEach(t),vvr=r(uke," \u2014 "),IW=n(uke,"A",{href:!0});var fbt=s(IW);Fvr=r(fbt,"TFFlaubertForTokenClassification"),fbt.forEach(t),Tvr=r(uke," (FlauBERT model)"),uke.forEach(t),Mvr=i(me),BM=n(me,"LI",{});var _ke=s(BM);o4e=n(_ke,"STRONG",{});var mbt=s(o4e);Evr=r(mbt,"funnel"),mbt.forEach(t),Cvr=r(_ke," \u2014 "),qW=n(_ke,"A",{href:!0});var gbt=s(qW);wvr=r(gbt,"TFFunnelForTokenClassification"),gbt.forEach(t),Avr=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),yvr=i(me),PM=n(me,"LI",{});var bke=s(PM);r4e=n(bke,"STRONG",{});var hbt=s(r4e);Lvr=r(hbt,"layoutlm"),hbt.forEach(t),xvr=r(bke," \u2014 "),NW=n(bke,"A",{href:!0});var pbt=s(NW);$vr=r(pbt,"TFLayoutLMForTokenClassification"),pbt.forEach(t),kvr=r(bke," (LayoutLM model)"),bke.forEach(t),Svr=i(me),IM=n(me,"LI",{});var vke=s(IM);t4e=n(vke,"STRONG",{});var ubt=s(t4e);Rvr=r(ubt,"longformer"),ubt.forEach(t),Bvr=r(vke," \u2014 "),jW=n(vke,"A",{href:!0});var _bt=s(jW);Pvr=r(_bt,"TFLongformerForTokenClassification"),_bt.forEach(t),Ivr=r(vke," (Longformer model)"),vke.forEach(t),qvr=i(me),qM=n(me,"LI",{});var Fke=s(qM);a4e=n(Fke,"STRONG",{});var bbt=s(a4e);Nvr=r(bbt,"mobilebert"),bbt.forEach(t),jvr=r(Fke," \u2014 "),DW=n(Fke,"A",{href:!0});var vbt=s(DW);Dvr=r(vbt,"TFMobileBertForTokenClassification"),vbt.forEach(t),Gvr=r(Fke," (MobileBERT model)"),Fke.forEach(t),Ovr=i(me),NM=n(me,"LI",{});var Tke=s(NM);n4e=n(Tke,"STRONG",{});var Fbt=s(n4e);Vvr=r(Fbt,"mpnet"),Fbt.forEach(t),Xvr=r(Tke," \u2014 "),GW=n(Tke,"A",{href:!0});var Tbt=s(GW);zvr=r(Tbt,"TFMPNetForTokenClassification"),Tbt.forEach(t),Qvr=r(Tke," (MPNet model)"),Tke.forEach(t),Wvr=i(me),jM=n(me,"LI",{});var Mke=s(jM);s4e=n(Mke,"STRONG",{});var Mbt=s(s4e);Hvr=r(Mbt,"rembert"),Mbt.forEach(t),Uvr=r(Mke," \u2014 "),OW=n(Mke,"A",{href:!0});var Ebt=s(OW);Jvr=r(Ebt,"TFRemBertForTokenClassification"),Ebt.forEach(t),Yvr=r(Mke," (RemBERT model)"),Mke.forEach(t),Kvr=i(me),DM=n(me,"LI",{});var Eke=s(DM);l4e=n(Eke,"STRONG",{});var Cbt=s(l4e);Zvr=r(Cbt,"roberta"),Cbt.forEach(t),eFr=r(Eke," \u2014 "),VW=n(Eke,"A",{href:!0});var wbt=s(VW);oFr=r(wbt,"TFRobertaForTokenClassification"),wbt.forEach(t),rFr=r(Eke," (RoBERTa model)"),Eke.forEach(t),tFr=i(me),GM=n(me,"LI",{});var Cke=s(GM);i4e=n(Cke,"STRONG",{});var Abt=s(i4e);aFr=r(Abt,"roformer"),Abt.forEach(t),nFr=r(Cke," \u2014 "),XW=n(Cke,"A",{href:!0});var ybt=s(XW);sFr=r(ybt,"TFRoFormerForTokenClassification"),ybt.forEach(t),lFr=r(Cke," (RoFormer model)"),Cke.forEach(t),iFr=i(me),OM=n(me,"LI",{});var wke=s(OM);d4e=n(wke,"STRONG",{});var Lbt=s(d4e);dFr=r(Lbt,"xlm"),Lbt.forEach(t),cFr=r(wke," \u2014 "),zW=n(wke,"A",{href:!0});var xbt=s(zW);fFr=r(xbt,"TFXLMForTokenClassification"),xbt.forEach(t),mFr=r(wke," (XLM model)"),wke.forEach(t),gFr=i(me),VM=n(me,"LI",{});var Ake=s(VM);c4e=n(Ake,"STRONG",{});var $bt=s(c4e);hFr=r($bt,"xlm-roberta"),$bt.forEach(t),pFr=r(Ake," \u2014 "),QW=n(Ake,"A",{href:!0});var kbt=s(QW);uFr=r(kbt,"TFXLMRobertaForTokenClassification"),kbt.forEach(t),_Fr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),bFr=i(me),XM=n(me,"LI",{});var yke=s(XM);f4e=n(yke,"STRONG",{});var Sbt=s(f4e);vFr=r(Sbt,"xlnet"),Sbt.forEach(t),FFr=r(yke," \u2014 "),WW=n(yke,"A",{href:!0});var Rbt=s(WW);TFr=r(Rbt,"TFXLNetForTokenClassification"),Rbt.forEach(t),MFr=r(yke," (XLNet model)"),yke.forEach(t),me.forEach(t),EFr=i(El),T(zM.$$.fragment,El),El.forEach(t),Ml.forEach(t),hPe=i(f),lc=n(f,"H2",{class:!0});var bqe=s(lc);QM=n(bqe,"A",{id:!0,class:!0,href:!0});var Bbt=s(QM);m4e=n(Bbt,"SPAN",{});var Pbt=s(m4e);T(H8.$$.fragment,Pbt),Pbt.forEach(t),Bbt.forEach(t),CFr=i(bqe),g4e=n(bqe,"SPAN",{});var Ibt=s(g4e);wFr=r(Ibt,"TFAutoModelForQuestionAnswering"),Ibt.forEach(t),bqe.forEach(t),pPe=i(f),nr=n(f,"DIV",{class:!0});var Cl=s(nr);T(U8.$$.fragment,Cl),AFr=i(Cl),ic=n(Cl,"P",{});var hK=s(ic);yFr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HW=n(hK,"A",{href:!0});var qbt=s(HW);LFr=r(qbt,"from_pretrained()"),qbt.forEach(t),xFr=r(hK," class method or the "),UW=n(hK,"A",{href:!0});var Nbt=s(UW);$Fr=r(Nbt,"from_config()"),Nbt.forEach(t),kFr=r(hK,` class
method.`),hK.forEach(t),SFr=i(Cl),J8=n(Cl,"P",{});var vqe=s(J8);RFr=r(vqe,"This class cannot be instantiated directly using "),h4e=n(vqe,"CODE",{});var jbt=s(h4e);BFr=r(jbt,"__init__()"),jbt.forEach(t),PFr=r(vqe," (throws an error)."),vqe.forEach(t),IFr=i(Cl),St=n(Cl,"DIV",{class:!0});var qw=s(St);T(Y8.$$.fragment,qw),qFr=i(qw),p4e=n(qw,"P",{});var Dbt=s(p4e);NFr=r(Dbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dbt.forEach(t),jFr=i(qw),dc=n(qw,"P",{});var pK=s(dc);DFr=r(pK,`Note:
Loading a model from its configuration file does `),u4e=n(pK,"STRONG",{});var Gbt=s(u4e);GFr=r(Gbt,"not"),Gbt.forEach(t),OFr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(pK,"A",{href:!0});var Obt=s(JW);VFr=r(Obt,"from_pretrained()"),Obt.forEach(t),XFr=r(pK," to load the model weights."),pK.forEach(t),zFr=i(qw),T(WM.$$.fragment,qw),qw.forEach(t),QFr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(K8.$$.fragment,wl),WFr=i(wl),_4e=n(wl,"P",{});var Vbt=s(_4e);HFr=r(Vbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Vbt.forEach(t),UFr=i(wl),an=n(wl,"P",{});var Nw=s(an);JFr=r(Nw,"The model class to instantiate is selected based on the "),b4e=n(Nw,"CODE",{});var Xbt=s(b4e);YFr=r(Xbt,"model_type"),Xbt.forEach(t),KFr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),v4e=n(Nw,"CODE",{});var zbt=s(v4e);ZFr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),e0r=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(Nw,"CODE",{});var Qbt=s(F4e);o0r=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),r0r=r(Nw,":"),Nw.forEach(t),t0r=i(wl),ce=n(wl,"UL",{});var ge=s(ce);HM=n(ge,"LI",{});var Lke=s(HM);T4e=n(Lke,"STRONG",{});var Wbt=s(T4e);a0r=r(Wbt,"albert"),Wbt.forEach(t),n0r=r(Lke," \u2014 "),YW=n(Lke,"A",{href:!0});var Hbt=s(YW);s0r=r(Hbt,"TFAlbertForQuestionAnswering"),Hbt.forEach(t),l0r=r(Lke," (ALBERT model)"),Lke.forEach(t),i0r=i(ge),UM=n(ge,"LI",{});var xke=s(UM);M4e=n(xke,"STRONG",{});var Ubt=s(M4e);d0r=r(Ubt,"bert"),Ubt.forEach(t),c0r=r(xke," \u2014 "),KW=n(xke,"A",{href:!0});var Jbt=s(KW);f0r=r(Jbt,"TFBertForQuestionAnswering"),Jbt.forEach(t),m0r=r(xke," (BERT model)"),xke.forEach(t),g0r=i(ge),JM=n(ge,"LI",{});var $ke=s(JM);E4e=n($ke,"STRONG",{});var Ybt=s(E4e);h0r=r(Ybt,"camembert"),Ybt.forEach(t),p0r=r($ke," \u2014 "),ZW=n($ke,"A",{href:!0});var Kbt=s(ZW);u0r=r(Kbt,"TFCamembertForQuestionAnswering"),Kbt.forEach(t),_0r=r($ke," (CamemBERT model)"),$ke.forEach(t),b0r=i(ge),YM=n(ge,"LI",{});var kke=s(YM);C4e=n(kke,"STRONG",{});var Zbt=s(C4e);v0r=r(Zbt,"convbert"),Zbt.forEach(t),F0r=r(kke," \u2014 "),eH=n(kke,"A",{href:!0});var e4t=s(eH);T0r=r(e4t,"TFConvBertForQuestionAnswering"),e4t.forEach(t),M0r=r(kke," (ConvBERT model)"),kke.forEach(t),E0r=i(ge),KM=n(ge,"LI",{});var Ske=s(KM);w4e=n(Ske,"STRONG",{});var o4t=s(w4e);C0r=r(o4t,"deberta"),o4t.forEach(t),w0r=r(Ske," \u2014 "),oH=n(Ske,"A",{href:!0});var r4t=s(oH);A0r=r(r4t,"TFDebertaForQuestionAnswering"),r4t.forEach(t),y0r=r(Ske," (DeBERTa model)"),Ske.forEach(t),L0r=i(ge),ZM=n(ge,"LI",{});var Rke=s(ZM);A4e=n(Rke,"STRONG",{});var t4t=s(A4e);x0r=r(t4t,"deberta-v2"),t4t.forEach(t),$0r=r(Rke," \u2014 "),rH=n(Rke,"A",{href:!0});var a4t=s(rH);k0r=r(a4t,"TFDebertaV2ForQuestionAnswering"),a4t.forEach(t),S0r=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),R0r=i(ge),eE=n(ge,"LI",{});var Bke=s(eE);y4e=n(Bke,"STRONG",{});var n4t=s(y4e);B0r=r(n4t,"distilbert"),n4t.forEach(t),P0r=r(Bke," \u2014 "),tH=n(Bke,"A",{href:!0});var s4t=s(tH);I0r=r(s4t,"TFDistilBertForQuestionAnswering"),s4t.forEach(t),q0r=r(Bke," (DistilBERT model)"),Bke.forEach(t),N0r=i(ge),oE=n(ge,"LI",{});var Pke=s(oE);L4e=n(Pke,"STRONG",{});var l4t=s(L4e);j0r=r(l4t,"electra"),l4t.forEach(t),D0r=r(Pke," \u2014 "),aH=n(Pke,"A",{href:!0});var i4t=s(aH);G0r=r(i4t,"TFElectraForQuestionAnswering"),i4t.forEach(t),O0r=r(Pke," (ELECTRA model)"),Pke.forEach(t),V0r=i(ge),rE=n(ge,"LI",{});var Ike=s(rE);x4e=n(Ike,"STRONG",{});var d4t=s(x4e);X0r=r(d4t,"flaubert"),d4t.forEach(t),z0r=r(Ike," \u2014 "),nH=n(Ike,"A",{href:!0});var c4t=s(nH);Q0r=r(c4t,"TFFlaubertForQuestionAnsweringSimple"),c4t.forEach(t),W0r=r(Ike," (FlauBERT model)"),Ike.forEach(t),H0r=i(ge),tE=n(ge,"LI",{});var qke=s(tE);$4e=n(qke,"STRONG",{});var f4t=s($4e);U0r=r(f4t,"funnel"),f4t.forEach(t),J0r=r(qke," \u2014 "),sH=n(qke,"A",{href:!0});var m4t=s(sH);Y0r=r(m4t,"TFFunnelForQuestionAnswering"),m4t.forEach(t),K0r=r(qke," (Funnel Transformer model)"),qke.forEach(t),Z0r=i(ge),aE=n(ge,"LI",{});var Nke=s(aE);k4e=n(Nke,"STRONG",{});var g4t=s(k4e);e6r=r(g4t,"gptj"),g4t.forEach(t),o6r=r(Nke," \u2014 "),lH=n(Nke,"A",{href:!0});var h4t=s(lH);r6r=r(h4t,"TFGPTJForQuestionAnswering"),h4t.forEach(t),t6r=r(Nke," (GPT-J model)"),Nke.forEach(t),a6r=i(ge),nE=n(ge,"LI",{});var jke=s(nE);S4e=n(jke,"STRONG",{});var p4t=s(S4e);n6r=r(p4t,"longformer"),p4t.forEach(t),s6r=r(jke," \u2014 "),iH=n(jke,"A",{href:!0});var u4t=s(iH);l6r=r(u4t,"TFLongformerForQuestionAnswering"),u4t.forEach(t),i6r=r(jke," (Longformer model)"),jke.forEach(t),d6r=i(ge),sE=n(ge,"LI",{});var Dke=s(sE);R4e=n(Dke,"STRONG",{});var _4t=s(R4e);c6r=r(_4t,"mobilebert"),_4t.forEach(t),f6r=r(Dke," \u2014 "),dH=n(Dke,"A",{href:!0});var b4t=s(dH);m6r=r(b4t,"TFMobileBertForQuestionAnswering"),b4t.forEach(t),g6r=r(Dke," (MobileBERT model)"),Dke.forEach(t),h6r=i(ge),lE=n(ge,"LI",{});var Gke=s(lE);B4e=n(Gke,"STRONG",{});var v4t=s(B4e);p6r=r(v4t,"mpnet"),v4t.forEach(t),u6r=r(Gke," \u2014 "),cH=n(Gke,"A",{href:!0});var F4t=s(cH);_6r=r(F4t,"TFMPNetForQuestionAnswering"),F4t.forEach(t),b6r=r(Gke," (MPNet model)"),Gke.forEach(t),v6r=i(ge),iE=n(ge,"LI",{});var Oke=s(iE);P4e=n(Oke,"STRONG",{});var T4t=s(P4e);F6r=r(T4t,"rembert"),T4t.forEach(t),T6r=r(Oke," \u2014 "),fH=n(Oke,"A",{href:!0});var M4t=s(fH);M6r=r(M4t,"TFRemBertForQuestionAnswering"),M4t.forEach(t),E6r=r(Oke," (RemBERT model)"),Oke.forEach(t),C6r=i(ge),dE=n(ge,"LI",{});var Vke=s(dE);I4e=n(Vke,"STRONG",{});var E4t=s(I4e);w6r=r(E4t,"roberta"),E4t.forEach(t),A6r=r(Vke," \u2014 "),mH=n(Vke,"A",{href:!0});var C4t=s(mH);y6r=r(C4t,"TFRobertaForQuestionAnswering"),C4t.forEach(t),L6r=r(Vke," (RoBERTa model)"),Vke.forEach(t),x6r=i(ge),cE=n(ge,"LI",{});var Xke=s(cE);q4e=n(Xke,"STRONG",{});var w4t=s(q4e);$6r=r(w4t,"roformer"),w4t.forEach(t),k6r=r(Xke," \u2014 "),gH=n(Xke,"A",{href:!0});var A4t=s(gH);S6r=r(A4t,"TFRoFormerForQuestionAnswering"),A4t.forEach(t),R6r=r(Xke," (RoFormer model)"),Xke.forEach(t),B6r=i(ge),fE=n(ge,"LI",{});var zke=s(fE);N4e=n(zke,"STRONG",{});var y4t=s(N4e);P6r=r(y4t,"xlm"),y4t.forEach(t),I6r=r(zke," \u2014 "),hH=n(zke,"A",{href:!0});var L4t=s(hH);q6r=r(L4t,"TFXLMForQuestionAnsweringSimple"),L4t.forEach(t),N6r=r(zke," (XLM model)"),zke.forEach(t),j6r=i(ge),mE=n(ge,"LI",{});var Qke=s(mE);j4e=n(Qke,"STRONG",{});var x4t=s(j4e);D6r=r(x4t,"xlm-roberta"),x4t.forEach(t),G6r=r(Qke," \u2014 "),pH=n(Qke,"A",{href:!0});var $4t=s(pH);O6r=r($4t,"TFXLMRobertaForQuestionAnswering"),$4t.forEach(t),V6r=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),X6r=i(ge),gE=n(ge,"LI",{});var Wke=s(gE);D4e=n(Wke,"STRONG",{});var k4t=s(D4e);z6r=r(k4t,"xlnet"),k4t.forEach(t),Q6r=r(Wke," \u2014 "),uH=n(Wke,"A",{href:!0});var S4t=s(uH);W6r=r(S4t,"TFXLNetForQuestionAnsweringSimple"),S4t.forEach(t),H6r=r(Wke," (XLNet model)"),Wke.forEach(t),ge.forEach(t),U6r=i(wl),T(hE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),uPe=i(f),cc=n(f,"H2",{class:!0});var Fqe=s(cc);pE=n(Fqe,"A",{id:!0,class:!0,href:!0});var R4t=s(pE);G4e=n(R4t,"SPAN",{});var B4t=s(G4e);T(Z8.$$.fragment,B4t),B4t.forEach(t),R4t.forEach(t),J6r=i(Fqe),O4e=n(Fqe,"SPAN",{});var P4t=s(O4e);Y6r=r(P4t,"TFAutoModelForVision2Seq"),P4t.forEach(t),Fqe.forEach(t),_Pe=i(f),sr=n(f,"DIV",{class:!0});var Al=s(sr);T(e7.$$.fragment,Al),K6r=i(Al),fc=n(Al,"P",{});var uK=s(fc);Z6r=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),_H=n(uK,"A",{href:!0});var I4t=s(_H);eTr=r(I4t,"from_pretrained()"),I4t.forEach(t),oTr=r(uK," class method or the "),bH=n(uK,"A",{href:!0});var q4t=s(bH);rTr=r(q4t,"from_config()"),q4t.forEach(t),tTr=r(uK,` class
method.`),uK.forEach(t),aTr=i(Al),o7=n(Al,"P",{});var Tqe=s(o7);nTr=r(Tqe,"This class cannot be instantiated directly using "),V4e=n(Tqe,"CODE",{});var N4t=s(V4e);sTr=r(N4t,"__init__()"),N4t.forEach(t),lTr=r(Tqe," (throws an error)."),Tqe.forEach(t),iTr=i(Al),Rt=n(Al,"DIV",{class:!0});var jw=s(Rt);T(r7.$$.fragment,jw),dTr=i(jw),X4e=n(jw,"P",{});var j4t=s(X4e);cTr=r(j4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j4t.forEach(t),fTr=i(jw),mc=n(jw,"P",{});var _K=s(mc);mTr=r(_K,`Note:
Loading a model from its configuration file does `),z4e=n(_K,"STRONG",{});var D4t=s(z4e);gTr=r(D4t,"not"),D4t.forEach(t),hTr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(_K,"A",{href:!0});var G4t=s(vH);pTr=r(G4t,"from_pretrained()"),G4t.forEach(t),uTr=r(_K," to load the model weights."),_K.forEach(t),_Tr=i(jw),T(uE.$$.fragment,jw),jw.forEach(t),bTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(t7.$$.fragment,yl),vTr=i(yl),Q4e=n(yl,"P",{});var O4t=s(Q4e);FTr=r(O4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O4t.forEach(t),TTr=i(yl),nn=n(yl,"P",{});var Dw=s(nn);MTr=r(Dw,"The model class to instantiate is selected based on the "),W4e=n(Dw,"CODE",{});var V4t=s(W4e);ETr=r(V4t,"model_type"),V4t.forEach(t),CTr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),H4e=n(Dw,"CODE",{});var X4t=s(H4e);wTr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),ATr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U4e=n(Dw,"CODE",{});var z4t=s(U4e);yTr=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),LTr=r(Dw,":"),Dw.forEach(t),xTr=i(yl),J4e=n(yl,"UL",{});var Q4t=s(J4e);_E=n(Q4t,"LI",{});var Hke=s(_E);Y4e=n(Hke,"STRONG",{});var W4t=s(Y4e);$Tr=r(W4t,"vision-encoder-decoder"),W4t.forEach(t),kTr=r(Hke," \u2014 "),FH=n(Hke,"A",{href:!0});var H4t=s(FH);STr=r(H4t,"TFVisionEncoderDecoderModel"),H4t.forEach(t),RTr=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),Q4t.forEach(t),BTr=i(yl),T(bE.$$.fragment,yl),yl.forEach(t),Al.forEach(t),bPe=i(f),gc=n(f,"H2",{class:!0});var Mqe=s(gc);vE=n(Mqe,"A",{id:!0,class:!0,href:!0});var U4t=s(vE);K4e=n(U4t,"SPAN",{});var J4t=s(K4e);T(a7.$$.fragment,J4t),J4t.forEach(t),U4t.forEach(t),PTr=i(Mqe),Z4e=n(Mqe,"SPAN",{});var Y4t=s(Z4e);ITr=r(Y4t,"TFAutoModelForSpeechSeq2Seq"),Y4t.forEach(t),Mqe.forEach(t),vPe=i(f),lr=n(f,"DIV",{class:!0});var Ll=s(lr);T(n7.$$.fragment,Ll),qTr=i(Ll),hc=n(Ll,"P",{});var bK=s(hc);NTr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),TH=n(bK,"A",{href:!0});var K4t=s(TH);jTr=r(K4t,"from_pretrained()"),K4t.forEach(t),DTr=r(bK," class method or the "),MH=n(bK,"A",{href:!0});var Z4t=s(MH);GTr=r(Z4t,"from_config()"),Z4t.forEach(t),OTr=r(bK,` class
method.`),bK.forEach(t),VTr=i(Ll),s7=n(Ll,"P",{});var Eqe=s(s7);XTr=r(Eqe,"This class cannot be instantiated directly using "),eve=n(Eqe,"CODE",{});var evt=s(eve);zTr=r(evt,"__init__()"),evt.forEach(t),QTr=r(Eqe," (throws an error)."),Eqe.forEach(t),WTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Gw=s(Bt);T(l7.$$.fragment,Gw),HTr=i(Gw),ove=n(Gw,"P",{});var ovt=s(ove);UTr=r(ovt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ovt.forEach(t),JTr=i(Gw),pc=n(Gw,"P",{});var vK=s(pc);YTr=r(vK,`Note:
Loading a model from its configuration file does `),rve=n(vK,"STRONG",{});var rvt=s(rve);KTr=r(rvt,"not"),rvt.forEach(t),ZTr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EH=n(vK,"A",{href:!0});var tvt=s(EH);eMr=r(tvt,"from_pretrained()"),tvt.forEach(t),oMr=r(vK," to load the model weights."),vK.forEach(t),rMr=i(Gw),T(FE.$$.fragment,Gw),Gw.forEach(t),tMr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(i7.$$.fragment,xl),aMr=i(xl),tve=n(xl,"P",{});var avt=s(tve);nMr=r(avt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),avt.forEach(t),sMr=i(xl),sn=n(xl,"P",{});var Ow=s(sn);lMr=r(Ow,"The model class to instantiate is selected based on the "),ave=n(Ow,"CODE",{});var nvt=s(ave);iMr=r(nvt,"model_type"),nvt.forEach(t),dMr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),nve=n(Ow,"CODE",{});var svt=s(nve);cMr=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),fMr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sve=n(Ow,"CODE",{});var lvt=s(sve);mMr=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),gMr=r(Ow,":"),Ow.forEach(t),hMr=i(xl),lve=n(xl,"UL",{});var ivt=s(lve);TE=n(ivt,"LI",{});var Uke=s(TE);ive=n(Uke,"STRONG",{});var dvt=s(ive);pMr=r(dvt,"speech_to_text"),dvt.forEach(t),uMr=r(Uke," \u2014 "),CH=n(Uke,"A",{href:!0});var cvt=s(CH);_Mr=r(cvt,"TFSpeech2TextForConditionalGeneration"),cvt.forEach(t),bMr=r(Uke," (Speech2Text model)"),Uke.forEach(t),ivt.forEach(t),vMr=i(xl),T(ME.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),FPe=i(f),uc=n(f,"H2",{class:!0});var Cqe=s(uc);EE=n(Cqe,"A",{id:!0,class:!0,href:!0});var fvt=s(EE);dve=n(fvt,"SPAN",{});var mvt=s(dve);T(d7.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),FMr=i(Cqe),cve=n(Cqe,"SPAN",{});var gvt=s(cve);TMr=r(gvt,"FlaxAutoModel"),gvt.forEach(t),Cqe.forEach(t),TPe=i(f),ir=n(f,"DIV",{class:!0});var $l=s(ir);T(c7.$$.fragment,$l),MMr=i($l),_c=n($l,"P",{});var FK=s(_c);EMr=r(FK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wH=n(FK,"A",{href:!0});var hvt=s(wH);CMr=r(hvt,"from_pretrained()"),hvt.forEach(t),wMr=r(FK," class method or the "),AH=n(FK,"A",{href:!0});var pvt=s(AH);AMr=r(pvt,"from_config()"),pvt.forEach(t),yMr=r(FK,` class
method.`),FK.forEach(t),LMr=i($l),f7=n($l,"P",{});var wqe=s(f7);xMr=r(wqe,"This class cannot be instantiated directly using "),fve=n(wqe,"CODE",{});var uvt=s(fve);$Mr=r(uvt,"__init__()"),uvt.forEach(t),kMr=r(wqe," (throws an error)."),wqe.forEach(t),SMr=i($l),Pt=n($l,"DIV",{class:!0});var Vw=s(Pt);T(m7.$$.fragment,Vw),RMr=i(Vw),mve=n(Vw,"P",{});var _vt=s(mve);BMr=r(_vt,"Instantiates one of the base model classes of the library from a configuration."),_vt.forEach(t),PMr=i(Vw),bc=n(Vw,"P",{});var TK=s(bc);IMr=r(TK,`Note:
Loading a model from its configuration file does `),gve=n(TK,"STRONG",{});var bvt=s(gve);qMr=r(bvt,"not"),bvt.forEach(t),NMr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(TK,"A",{href:!0});var vvt=s(yH);jMr=r(vvt,"from_pretrained()"),vvt.forEach(t),DMr=r(TK," to load the model weights."),TK.forEach(t),GMr=i(Vw),T(CE.$$.fragment,Vw),Vw.forEach(t),OMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(g7.$$.fragment,kl),VMr=i(kl),hve=n(kl,"P",{});var Fvt=s(hve);XMr=r(Fvt,"Instantiate one of the base model classes of the library from a pretrained model."),Fvt.forEach(t),zMr=i(kl),ln=n(kl,"P",{});var Xw=s(ln);QMr=r(Xw,"The model class to instantiate is selected based on the "),pve=n(Xw,"CODE",{});var Tvt=s(pve);WMr=r(Tvt,"model_type"),Tvt.forEach(t),HMr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),uve=n(Xw,"CODE",{});var Mvt=s(uve);UMr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),JMr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(Xw,"CODE",{});var Evt=s(_ve);YMr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),KMr=r(Xw,":"),Xw.forEach(t),ZMr=i(kl),oe=n(kl,"UL",{});var ae=s(oe);wE=n(ae,"LI",{});var Jke=s(wE);bve=n(Jke,"STRONG",{});var Cvt=s(bve);eEr=r(Cvt,"albert"),Cvt.forEach(t),oEr=r(Jke," \u2014 "),LH=n(Jke,"A",{href:!0});var wvt=s(LH);rEr=r(wvt,"FlaxAlbertModel"),wvt.forEach(t),tEr=r(Jke," (ALBERT model)"),Jke.forEach(t),aEr=i(ae),AE=n(ae,"LI",{});var Yke=s(AE);vve=n(Yke,"STRONG",{});var Avt=s(vve);nEr=r(Avt,"bart"),Avt.forEach(t),sEr=r(Yke," \u2014 "),xH=n(Yke,"A",{href:!0});var yvt=s(xH);lEr=r(yvt,"FlaxBartModel"),yvt.forEach(t),iEr=r(Yke," (BART model)"),Yke.forEach(t),dEr=i(ae),yE=n(ae,"LI",{});var Kke=s(yE);Fve=n(Kke,"STRONG",{});var Lvt=s(Fve);cEr=r(Lvt,"beit"),Lvt.forEach(t),fEr=r(Kke," \u2014 "),$H=n(Kke,"A",{href:!0});var xvt=s($H);mEr=r(xvt,"FlaxBeitModel"),xvt.forEach(t),gEr=r(Kke," (BEiT model)"),Kke.forEach(t),hEr=i(ae),LE=n(ae,"LI",{});var Zke=s(LE);Tve=n(Zke,"STRONG",{});var $vt=s(Tve);pEr=r($vt,"bert"),$vt.forEach(t),uEr=r(Zke," \u2014 "),kH=n(Zke,"A",{href:!0});var kvt=s(kH);_Er=r(kvt,"FlaxBertModel"),kvt.forEach(t),bEr=r(Zke," (BERT model)"),Zke.forEach(t),vEr=i(ae),xE=n(ae,"LI",{});var eSe=s(xE);Mve=n(eSe,"STRONG",{});var Svt=s(Mve);FEr=r(Svt,"big_bird"),Svt.forEach(t),TEr=r(eSe," \u2014 "),SH=n(eSe,"A",{href:!0});var Rvt=s(SH);MEr=r(Rvt,"FlaxBigBirdModel"),Rvt.forEach(t),EEr=r(eSe," (BigBird model)"),eSe.forEach(t),CEr=i(ae),$E=n(ae,"LI",{});var oSe=s($E);Eve=n(oSe,"STRONG",{});var Bvt=s(Eve);wEr=r(Bvt,"blenderbot"),Bvt.forEach(t),AEr=r(oSe," \u2014 "),RH=n(oSe,"A",{href:!0});var Pvt=s(RH);yEr=r(Pvt,"FlaxBlenderbotModel"),Pvt.forEach(t),LEr=r(oSe," (Blenderbot model)"),oSe.forEach(t),xEr=i(ae),kE=n(ae,"LI",{});var rSe=s(kE);Cve=n(rSe,"STRONG",{});var Ivt=s(Cve);$Er=r(Ivt,"blenderbot-small"),Ivt.forEach(t),kEr=r(rSe," \u2014 "),BH=n(rSe,"A",{href:!0});var qvt=s(BH);SEr=r(qvt,"FlaxBlenderbotSmallModel"),qvt.forEach(t),REr=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),BEr=i(ae),SE=n(ae,"LI",{});var tSe=s(SE);wve=n(tSe,"STRONG",{});var Nvt=s(wve);PEr=r(Nvt,"clip"),Nvt.forEach(t),IEr=r(tSe," \u2014 "),PH=n(tSe,"A",{href:!0});var jvt=s(PH);qEr=r(jvt,"FlaxCLIPModel"),jvt.forEach(t),NEr=r(tSe," (CLIP model)"),tSe.forEach(t),jEr=i(ae),RE=n(ae,"LI",{});var aSe=s(RE);Ave=n(aSe,"STRONG",{});var Dvt=s(Ave);DEr=r(Dvt,"distilbert"),Dvt.forEach(t),GEr=r(aSe," \u2014 "),IH=n(aSe,"A",{href:!0});var Gvt=s(IH);OEr=r(Gvt,"FlaxDistilBertModel"),Gvt.forEach(t),VEr=r(aSe," (DistilBERT model)"),aSe.forEach(t),XEr=i(ae),BE=n(ae,"LI",{});var nSe=s(BE);yve=n(nSe,"STRONG",{});var Ovt=s(yve);zEr=r(Ovt,"electra"),Ovt.forEach(t),QEr=r(nSe," \u2014 "),qH=n(nSe,"A",{href:!0});var Vvt=s(qH);WEr=r(Vvt,"FlaxElectraModel"),Vvt.forEach(t),HEr=r(nSe," (ELECTRA model)"),nSe.forEach(t),UEr=i(ae),PE=n(ae,"LI",{});var sSe=s(PE);Lve=n(sSe,"STRONG",{});var Xvt=s(Lve);JEr=r(Xvt,"gpt2"),Xvt.forEach(t),YEr=r(sSe," \u2014 "),NH=n(sSe,"A",{href:!0});var zvt=s(NH);KEr=r(zvt,"FlaxGPT2Model"),zvt.forEach(t),ZEr=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),eCr=i(ae),IE=n(ae,"LI",{});var lSe=s(IE);xve=n(lSe,"STRONG",{});var Qvt=s(xve);oCr=r(Qvt,"gpt_neo"),Qvt.forEach(t),rCr=r(lSe," \u2014 "),jH=n(lSe,"A",{href:!0});var Wvt=s(jH);tCr=r(Wvt,"FlaxGPTNeoModel"),Wvt.forEach(t),aCr=r(lSe," (GPT Neo model)"),lSe.forEach(t),nCr=i(ae),qE=n(ae,"LI",{});var iSe=s(qE);$ve=n(iSe,"STRONG",{});var Hvt=s($ve);sCr=r(Hvt,"gptj"),Hvt.forEach(t),lCr=r(iSe," \u2014 "),DH=n(iSe,"A",{href:!0});var Uvt=s(DH);iCr=r(Uvt,"FlaxGPTJModel"),Uvt.forEach(t),dCr=r(iSe," (GPT-J model)"),iSe.forEach(t),cCr=i(ae),NE=n(ae,"LI",{});var dSe=s(NE);kve=n(dSe,"STRONG",{});var Jvt=s(kve);fCr=r(Jvt,"marian"),Jvt.forEach(t),mCr=r(dSe," \u2014 "),GH=n(dSe,"A",{href:!0});var Yvt=s(GH);gCr=r(Yvt,"FlaxMarianModel"),Yvt.forEach(t),hCr=r(dSe," (Marian model)"),dSe.forEach(t),pCr=i(ae),jE=n(ae,"LI",{});var cSe=s(jE);Sve=n(cSe,"STRONG",{});var Kvt=s(Sve);uCr=r(Kvt,"mbart"),Kvt.forEach(t),_Cr=r(cSe," \u2014 "),OH=n(cSe,"A",{href:!0});var Zvt=s(OH);bCr=r(Zvt,"FlaxMBartModel"),Zvt.forEach(t),vCr=r(cSe," (mBART model)"),cSe.forEach(t),FCr=i(ae),DE=n(ae,"LI",{});var fSe=s(DE);Rve=n(fSe,"STRONG",{});var eFt=s(Rve);TCr=r(eFt,"mt5"),eFt.forEach(t),MCr=r(fSe," \u2014 "),VH=n(fSe,"A",{href:!0});var oFt=s(VH);ECr=r(oFt,"FlaxMT5Model"),oFt.forEach(t),CCr=r(fSe," (mT5 model)"),fSe.forEach(t),wCr=i(ae),GE=n(ae,"LI",{});var mSe=s(GE);Bve=n(mSe,"STRONG",{});var rFt=s(Bve);ACr=r(rFt,"pegasus"),rFt.forEach(t),yCr=r(mSe," \u2014 "),XH=n(mSe,"A",{href:!0});var tFt=s(XH);LCr=r(tFt,"FlaxPegasusModel"),tFt.forEach(t),xCr=r(mSe," (Pegasus model)"),mSe.forEach(t),$Cr=i(ae),OE=n(ae,"LI",{});var gSe=s(OE);Pve=n(gSe,"STRONG",{});var aFt=s(Pve);kCr=r(aFt,"roberta"),aFt.forEach(t),SCr=r(gSe," \u2014 "),zH=n(gSe,"A",{href:!0});var nFt=s(zH);RCr=r(nFt,"FlaxRobertaModel"),nFt.forEach(t),BCr=r(gSe," (RoBERTa model)"),gSe.forEach(t),PCr=i(ae),VE=n(ae,"LI",{});var hSe=s(VE);Ive=n(hSe,"STRONG",{});var sFt=s(Ive);ICr=r(sFt,"roformer"),sFt.forEach(t),qCr=r(hSe," \u2014 "),QH=n(hSe,"A",{href:!0});var lFt=s(QH);NCr=r(lFt,"FlaxRoFormerModel"),lFt.forEach(t),jCr=r(hSe," (RoFormer model)"),hSe.forEach(t),DCr=i(ae),XE=n(ae,"LI",{});var pSe=s(XE);qve=n(pSe,"STRONG",{});var iFt=s(qve);GCr=r(iFt,"t5"),iFt.forEach(t),OCr=r(pSe," \u2014 "),WH=n(pSe,"A",{href:!0});var dFt=s(WH);VCr=r(dFt,"FlaxT5Model"),dFt.forEach(t),XCr=r(pSe," (T5 model)"),pSe.forEach(t),zCr=i(ae),zE=n(ae,"LI",{});var uSe=s(zE);Nve=n(uSe,"STRONG",{});var cFt=s(Nve);QCr=r(cFt,"vision-text-dual-encoder"),cFt.forEach(t),WCr=r(uSe," \u2014 "),HH=n(uSe,"A",{href:!0});var fFt=s(HH);HCr=r(fFt,"FlaxVisionTextDualEncoderModel"),fFt.forEach(t),UCr=r(uSe," (VisionTextDualEncoder model)"),uSe.forEach(t),JCr=i(ae),QE=n(ae,"LI",{});var _Se=s(QE);jve=n(_Se,"STRONG",{});var mFt=s(jve);YCr=r(mFt,"vit"),mFt.forEach(t),KCr=r(_Se," \u2014 "),UH=n(_Se,"A",{href:!0});var gFt=s(UH);ZCr=r(gFt,"FlaxViTModel"),gFt.forEach(t),e5r=r(_Se," (ViT model)"),_Se.forEach(t),o5r=i(ae),WE=n(ae,"LI",{});var bSe=s(WE);Dve=n(bSe,"STRONG",{});var hFt=s(Dve);r5r=r(hFt,"wav2vec2"),hFt.forEach(t),t5r=r(bSe," \u2014 "),JH=n(bSe,"A",{href:!0});var pFt=s(JH);a5r=r(pFt,"FlaxWav2Vec2Model"),pFt.forEach(t),n5r=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),s5r=i(ae),HE=n(ae,"LI",{});var vSe=s(HE);Gve=n(vSe,"STRONG",{});var uFt=s(Gve);l5r=r(uFt,"xglm"),uFt.forEach(t),i5r=r(vSe," \u2014 "),YH=n(vSe,"A",{href:!0});var _Ft=s(YH);d5r=r(_Ft,"FlaxXGLMModel"),_Ft.forEach(t),c5r=r(vSe," (XGLM model)"),vSe.forEach(t),f5r=i(ae),UE=n(ae,"LI",{});var FSe=s(UE);Ove=n(FSe,"STRONG",{});var bFt=s(Ove);m5r=r(bFt,"xlm-roberta"),bFt.forEach(t),g5r=r(FSe," \u2014 "),KH=n(FSe,"A",{href:!0});var vFt=s(KH);h5r=r(vFt,"FlaxXLMRobertaModel"),vFt.forEach(t),p5r=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),ae.forEach(t),u5r=i(kl),T(JE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),MPe=i(f),vc=n(f,"H2",{class:!0});var Aqe=s(vc);YE=n(Aqe,"A",{id:!0,class:!0,href:!0});var FFt=s(YE);Vve=n(FFt,"SPAN",{});var TFt=s(Vve);T(h7.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),_5r=i(Aqe),Xve=n(Aqe,"SPAN",{});var MFt=s(Xve);b5r=r(MFt,"FlaxAutoModelForCausalLM"),MFt.forEach(t),Aqe.forEach(t),EPe=i(f),dr=n(f,"DIV",{class:!0});var Sl=s(dr);T(p7.$$.fragment,Sl),v5r=i(Sl),Fc=n(Sl,"P",{});var MK=s(Fc);F5r=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=n(MK,"A",{href:!0});var EFt=s(ZH);T5r=r(EFt,"from_pretrained()"),EFt.forEach(t),M5r=r(MK," class method or the "),eU=n(MK,"A",{href:!0});var CFt=s(eU);E5r=r(CFt,"from_config()"),CFt.forEach(t),C5r=r(MK,` class
method.`),MK.forEach(t),w5r=i(Sl),u7=n(Sl,"P",{});var yqe=s(u7);A5r=r(yqe,"This class cannot be instantiated directly using "),zve=n(yqe,"CODE",{});var wFt=s(zve);y5r=r(wFt,"__init__()"),wFt.forEach(t),L5r=r(yqe," (throws an error)."),yqe.forEach(t),x5r=i(Sl),It=n(Sl,"DIV",{class:!0});var zw=s(It);T(_7.$$.fragment,zw),$5r=i(zw),Qve=n(zw,"P",{});var AFt=s(Qve);k5r=r(AFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AFt.forEach(t),S5r=i(zw),Tc=n(zw,"P",{});var EK=s(Tc);R5r=r(EK,`Note:
Loading a model from its configuration file does `),Wve=n(EK,"STRONG",{});var yFt=s(Wve);B5r=r(yFt,"not"),yFt.forEach(t),P5r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(EK,"A",{href:!0});var LFt=s(oU);I5r=r(LFt,"from_pretrained()"),LFt.forEach(t),q5r=r(EK," to load the model weights."),EK.forEach(t),N5r=i(zw),T(KE.$$.fragment,zw),zw.forEach(t),j5r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(b7.$$.fragment,Rl),D5r=i(Rl),Hve=n(Rl,"P",{});var xFt=s(Hve);G5r=r(xFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xFt.forEach(t),O5r=i(Rl),dn=n(Rl,"P",{});var Qw=s(dn);V5r=r(Qw,"The model class to instantiate is selected based on the "),Uve=n(Qw,"CODE",{});var $Ft=s(Uve);X5r=r($Ft,"model_type"),$Ft.forEach(t),z5r=r(Qw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Qw,"CODE",{});var kFt=s(Jve);Q5r=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),W5r=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Qw,"CODE",{});var SFt=s(Yve);H5r=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),U5r=r(Qw,":"),Qw.forEach(t),J5r=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);ZE=n(Bl,"LI",{});var TSe=s(ZE);Kve=n(TSe,"STRONG",{});var RFt=s(Kve);Y5r=r(RFt,"bart"),RFt.forEach(t),K5r=r(TSe," \u2014 "),rU=n(TSe,"A",{href:!0});var BFt=s(rU);Z5r=r(BFt,"FlaxBartForCausalLM"),BFt.forEach(t),e3r=r(TSe," (BART model)"),TSe.forEach(t),o3r=i(Bl),eC=n(Bl,"LI",{});var MSe=s(eC);Zve=n(MSe,"STRONG",{});var PFt=s(Zve);r3r=r(PFt,"gpt2"),PFt.forEach(t),t3r=r(MSe," \u2014 "),tU=n(MSe,"A",{href:!0});var IFt=s(tU);a3r=r(IFt,"FlaxGPT2LMHeadModel"),IFt.forEach(t),n3r=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),s3r=i(Bl),oC=n(Bl,"LI",{});var ESe=s(oC);eFe=n(ESe,"STRONG",{});var qFt=s(eFe);l3r=r(qFt,"gpt_neo"),qFt.forEach(t),i3r=r(ESe," \u2014 "),aU=n(ESe,"A",{href:!0});var NFt=s(aU);d3r=r(NFt,"FlaxGPTNeoForCausalLM"),NFt.forEach(t),c3r=r(ESe," (GPT Neo model)"),ESe.forEach(t),f3r=i(Bl),rC=n(Bl,"LI",{});var CSe=s(rC);oFe=n(CSe,"STRONG",{});var jFt=s(oFe);m3r=r(jFt,"gptj"),jFt.forEach(t),g3r=r(CSe," \u2014 "),nU=n(CSe,"A",{href:!0});var DFt=s(nU);h3r=r(DFt,"FlaxGPTJForCausalLM"),DFt.forEach(t),p3r=r(CSe," (GPT-J model)"),CSe.forEach(t),u3r=i(Bl),tC=n(Bl,"LI",{});var wSe=s(tC);rFe=n(wSe,"STRONG",{});var GFt=s(rFe);_3r=r(GFt,"xglm"),GFt.forEach(t),b3r=r(wSe," \u2014 "),sU=n(wSe,"A",{href:!0});var OFt=s(sU);v3r=r(OFt,"FlaxXGLMForCausalLM"),OFt.forEach(t),F3r=r(wSe," (XGLM model)"),wSe.forEach(t),Bl.forEach(t),T3r=i(Rl),T(aC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),CPe=i(f),Mc=n(f,"H2",{class:!0});var Lqe=s(Mc);nC=n(Lqe,"A",{id:!0,class:!0,href:!0});var VFt=s(nC);tFe=n(VFt,"SPAN",{});var XFt=s(tFe);T(v7.$$.fragment,XFt),XFt.forEach(t),VFt.forEach(t),M3r=i(Lqe),aFe=n(Lqe,"SPAN",{});var zFt=s(aFe);E3r=r(zFt,"FlaxAutoModelForPreTraining"),zFt.forEach(t),Lqe.forEach(t),wPe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(F7.$$.fragment,Pl),C3r=i(Pl),Ec=n(Pl,"P",{});var CK=s(Ec);w3r=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),lU=n(CK,"A",{href:!0});var QFt=s(lU);A3r=r(QFt,"from_pretrained()"),QFt.forEach(t),y3r=r(CK," class method or the "),iU=n(CK,"A",{href:!0});var WFt=s(iU);L3r=r(WFt,"from_config()"),WFt.forEach(t),x3r=r(CK,` class
method.`),CK.forEach(t),$3r=i(Pl),T7=n(Pl,"P",{});var xqe=s(T7);k3r=r(xqe,"This class cannot be instantiated directly using "),nFe=n(xqe,"CODE",{});var HFt=s(nFe);S3r=r(HFt,"__init__()"),HFt.forEach(t),R3r=r(xqe," (throws an error)."),xqe.forEach(t),B3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Ww=s(qt);T(M7.$$.fragment,Ww),P3r=i(Ww),sFe=n(Ww,"P",{});var UFt=s(sFe);I3r=r(UFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),UFt.forEach(t),q3r=i(Ww),Cc=n(Ww,"P",{});var wK=s(Cc);N3r=r(wK,`Note:
Loading a model from its configuration file does `),lFe=n(wK,"STRONG",{});var JFt=s(lFe);j3r=r(JFt,"not"),JFt.forEach(t),D3r=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(wK,"A",{href:!0});var YFt=s(dU);G3r=r(YFt,"from_pretrained()"),YFt.forEach(t),O3r=r(wK," to load the model weights."),wK.forEach(t),V3r=i(Ww),T(sC.$$.fragment,Ww),Ww.forEach(t),X3r=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(E7.$$.fragment,Il),z3r=i(Il),iFe=n(Il,"P",{});var KFt=s(iFe);Q3r=r(KFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),KFt.forEach(t),W3r=i(Il),cn=n(Il,"P",{});var Hw=s(cn);H3r=r(Hw,"The model class to instantiate is selected based on the "),dFe=n(Hw,"CODE",{});var ZFt=s(dFe);U3r=r(ZFt,"model_type"),ZFt.forEach(t),J3r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),cFe=n(Hw,"CODE",{});var e0t=s(cFe);Y3r=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),K3r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(Hw,"CODE",{});var o0t=s(fFe);Z3r=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),ewr=r(Hw,":"),Hw.forEach(t),owr=i(Il),Me=n(Il,"UL",{});var we=s(Me);lC=n(we,"LI",{});var ASe=s(lC);mFe=n(ASe,"STRONG",{});var r0t=s(mFe);rwr=r(r0t,"albert"),r0t.forEach(t),twr=r(ASe," \u2014 "),cU=n(ASe,"A",{href:!0});var t0t=s(cU);awr=r(t0t,"FlaxAlbertForPreTraining"),t0t.forEach(t),nwr=r(ASe," (ALBERT model)"),ASe.forEach(t),swr=i(we),iC=n(we,"LI",{});var ySe=s(iC);gFe=n(ySe,"STRONG",{});var a0t=s(gFe);lwr=r(a0t,"bart"),a0t.forEach(t),iwr=r(ySe," \u2014 "),fU=n(ySe,"A",{href:!0});var n0t=s(fU);dwr=r(n0t,"FlaxBartForConditionalGeneration"),n0t.forEach(t),cwr=r(ySe," (BART model)"),ySe.forEach(t),fwr=i(we),dC=n(we,"LI",{});var LSe=s(dC);hFe=n(LSe,"STRONG",{});var s0t=s(hFe);mwr=r(s0t,"bert"),s0t.forEach(t),gwr=r(LSe," \u2014 "),mU=n(LSe,"A",{href:!0});var l0t=s(mU);hwr=r(l0t,"FlaxBertForPreTraining"),l0t.forEach(t),pwr=r(LSe," (BERT model)"),LSe.forEach(t),uwr=i(we),cC=n(we,"LI",{});var xSe=s(cC);pFe=n(xSe,"STRONG",{});var i0t=s(pFe);_wr=r(i0t,"big_bird"),i0t.forEach(t),bwr=r(xSe," \u2014 "),gU=n(xSe,"A",{href:!0});var d0t=s(gU);vwr=r(d0t,"FlaxBigBirdForPreTraining"),d0t.forEach(t),Fwr=r(xSe," (BigBird model)"),xSe.forEach(t),Twr=i(we),fC=n(we,"LI",{});var $Se=s(fC);uFe=n($Se,"STRONG",{});var c0t=s(uFe);Mwr=r(c0t,"electra"),c0t.forEach(t),Ewr=r($Se," \u2014 "),hU=n($Se,"A",{href:!0});var f0t=s(hU);Cwr=r(f0t,"FlaxElectraForPreTraining"),f0t.forEach(t),wwr=r($Se," (ELECTRA model)"),$Se.forEach(t),Awr=i(we),mC=n(we,"LI",{});var kSe=s(mC);_Fe=n(kSe,"STRONG",{});var m0t=s(_Fe);ywr=r(m0t,"mbart"),m0t.forEach(t),Lwr=r(kSe," \u2014 "),pU=n(kSe,"A",{href:!0});var g0t=s(pU);xwr=r(g0t,"FlaxMBartForConditionalGeneration"),g0t.forEach(t),$wr=r(kSe," (mBART model)"),kSe.forEach(t),kwr=i(we),gC=n(we,"LI",{});var SSe=s(gC);bFe=n(SSe,"STRONG",{});var h0t=s(bFe);Swr=r(h0t,"mt5"),h0t.forEach(t),Rwr=r(SSe," \u2014 "),uU=n(SSe,"A",{href:!0});var p0t=s(uU);Bwr=r(p0t,"FlaxMT5ForConditionalGeneration"),p0t.forEach(t),Pwr=r(SSe," (mT5 model)"),SSe.forEach(t),Iwr=i(we),hC=n(we,"LI",{});var RSe=s(hC);vFe=n(RSe,"STRONG",{});var u0t=s(vFe);qwr=r(u0t,"roberta"),u0t.forEach(t),Nwr=r(RSe," \u2014 "),_U=n(RSe,"A",{href:!0});var _0t=s(_U);jwr=r(_0t,"FlaxRobertaForMaskedLM"),_0t.forEach(t),Dwr=r(RSe," (RoBERTa model)"),RSe.forEach(t),Gwr=i(we),pC=n(we,"LI",{});var BSe=s(pC);FFe=n(BSe,"STRONG",{});var b0t=s(FFe);Owr=r(b0t,"roformer"),b0t.forEach(t),Vwr=r(BSe," \u2014 "),bU=n(BSe,"A",{href:!0});var v0t=s(bU);Xwr=r(v0t,"FlaxRoFormerForMaskedLM"),v0t.forEach(t),zwr=r(BSe," (RoFormer model)"),BSe.forEach(t),Qwr=i(we),uC=n(we,"LI",{});var PSe=s(uC);TFe=n(PSe,"STRONG",{});var F0t=s(TFe);Wwr=r(F0t,"t5"),F0t.forEach(t),Hwr=r(PSe," \u2014 "),vU=n(PSe,"A",{href:!0});var T0t=s(vU);Uwr=r(T0t,"FlaxT5ForConditionalGeneration"),T0t.forEach(t),Jwr=r(PSe," (T5 model)"),PSe.forEach(t),Ywr=i(we),_C=n(we,"LI",{});var ISe=s(_C);MFe=n(ISe,"STRONG",{});var M0t=s(MFe);Kwr=r(M0t,"wav2vec2"),M0t.forEach(t),Zwr=r(ISe," \u2014 "),FU=n(ISe,"A",{href:!0});var E0t=s(FU);eAr=r(E0t,"FlaxWav2Vec2ForPreTraining"),E0t.forEach(t),oAr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),rAr=i(we),bC=n(we,"LI",{});var qSe=s(bC);EFe=n(qSe,"STRONG",{});var C0t=s(EFe);tAr=r(C0t,"xlm-roberta"),C0t.forEach(t),aAr=r(qSe," \u2014 "),TU=n(qSe,"A",{href:!0});var w0t=s(TU);nAr=r(w0t,"FlaxXLMRobertaForMaskedLM"),w0t.forEach(t),sAr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),we.forEach(t),lAr=i(Il),T(vC.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),APe=i(f),wc=n(f,"H2",{class:!0});var $qe=s(wc);FC=n($qe,"A",{id:!0,class:!0,href:!0});var A0t=s(FC);CFe=n(A0t,"SPAN",{});var y0t=s(CFe);T(C7.$$.fragment,y0t),y0t.forEach(t),A0t.forEach(t),iAr=i($qe),wFe=n($qe,"SPAN",{});var L0t=s(wFe);dAr=r(L0t,"FlaxAutoModelForMaskedLM"),L0t.forEach(t),$qe.forEach(t),yPe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(w7.$$.fragment,ql),cAr=i(ql),Ac=n(ql,"P",{});var AK=s(Ac);fAr=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=n(AK,"A",{href:!0});var x0t=s(MU);mAr=r(x0t,"from_pretrained()"),x0t.forEach(t),gAr=r(AK," class method or the "),EU=n(AK,"A",{href:!0});var $0t=s(EU);hAr=r($0t,"from_config()"),$0t.forEach(t),pAr=r(AK,` class
method.`),AK.forEach(t),uAr=i(ql),A7=n(ql,"P",{});var kqe=s(A7);_Ar=r(kqe,"This class cannot be instantiated directly using "),AFe=n(kqe,"CODE",{});var k0t=s(AFe);bAr=r(k0t,"__init__()"),k0t.forEach(t),vAr=r(kqe," (throws an error)."),kqe.forEach(t),FAr=i(ql),Nt=n(ql,"DIV",{class:!0});var Uw=s(Nt);T(y7.$$.fragment,Uw),TAr=i(Uw),yFe=n(Uw,"P",{});var S0t=s(yFe);MAr=r(S0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S0t.forEach(t),EAr=i(Uw),yc=n(Uw,"P",{});var yK=s(yc);CAr=r(yK,`Note:
Loading a model from its configuration file does `),LFe=n(yK,"STRONG",{});var R0t=s(LFe);wAr=r(R0t,"not"),R0t.forEach(t),AAr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(yK,"A",{href:!0});var B0t=s(CU);yAr=r(B0t,"from_pretrained()"),B0t.forEach(t),LAr=r(yK," to load the model weights."),yK.forEach(t),xAr=i(Uw),T(TC.$$.fragment,Uw),Uw.forEach(t),$Ar=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(L7.$$.fragment,Nl),kAr=i(Nl),xFe=n(Nl,"P",{});var P0t=s(xFe);SAr=r(P0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P0t.forEach(t),RAr=i(Nl),fn=n(Nl,"P",{});var Jw=s(fn);BAr=r(Jw,"The model class to instantiate is selected based on the "),$Fe=n(Jw,"CODE",{});var I0t=s($Fe);PAr=r(I0t,"model_type"),I0t.forEach(t),IAr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),kFe=n(Jw,"CODE",{});var q0t=s(kFe);qAr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),NAr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SFe=n(Jw,"CODE",{});var N0t=s(SFe);jAr=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),DAr=r(Jw,":"),Jw.forEach(t),GAr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);MC=n(Be,"LI",{});var NSe=s(MC);RFe=n(NSe,"STRONG",{});var j0t=s(RFe);OAr=r(j0t,"albert"),j0t.forEach(t),VAr=r(NSe," \u2014 "),wU=n(NSe,"A",{href:!0});var D0t=s(wU);XAr=r(D0t,"FlaxAlbertForMaskedLM"),D0t.forEach(t),zAr=r(NSe," (ALBERT model)"),NSe.forEach(t),QAr=i(Be),EC=n(Be,"LI",{});var jSe=s(EC);BFe=n(jSe,"STRONG",{});var G0t=s(BFe);WAr=r(G0t,"bart"),G0t.forEach(t),HAr=r(jSe," \u2014 "),AU=n(jSe,"A",{href:!0});var O0t=s(AU);UAr=r(O0t,"FlaxBartForConditionalGeneration"),O0t.forEach(t),JAr=r(jSe," (BART model)"),jSe.forEach(t),YAr=i(Be),CC=n(Be,"LI",{});var DSe=s(CC);PFe=n(DSe,"STRONG",{});var V0t=s(PFe);KAr=r(V0t,"bert"),V0t.forEach(t),ZAr=r(DSe," \u2014 "),yU=n(DSe,"A",{href:!0});var X0t=s(yU);eyr=r(X0t,"FlaxBertForMaskedLM"),X0t.forEach(t),oyr=r(DSe," (BERT model)"),DSe.forEach(t),ryr=i(Be),wC=n(Be,"LI",{});var GSe=s(wC);IFe=n(GSe,"STRONG",{});var z0t=s(IFe);tyr=r(z0t,"big_bird"),z0t.forEach(t),ayr=r(GSe," \u2014 "),LU=n(GSe,"A",{href:!0});var Q0t=s(LU);nyr=r(Q0t,"FlaxBigBirdForMaskedLM"),Q0t.forEach(t),syr=r(GSe," (BigBird model)"),GSe.forEach(t),lyr=i(Be),AC=n(Be,"LI",{});var OSe=s(AC);qFe=n(OSe,"STRONG",{});var W0t=s(qFe);iyr=r(W0t,"distilbert"),W0t.forEach(t),dyr=r(OSe," \u2014 "),xU=n(OSe,"A",{href:!0});var H0t=s(xU);cyr=r(H0t,"FlaxDistilBertForMaskedLM"),H0t.forEach(t),fyr=r(OSe," (DistilBERT model)"),OSe.forEach(t),myr=i(Be),yC=n(Be,"LI",{});var VSe=s(yC);NFe=n(VSe,"STRONG",{});var U0t=s(NFe);gyr=r(U0t,"electra"),U0t.forEach(t),hyr=r(VSe," \u2014 "),$U=n(VSe,"A",{href:!0});var J0t=s($U);pyr=r(J0t,"FlaxElectraForMaskedLM"),J0t.forEach(t),uyr=r(VSe," (ELECTRA model)"),VSe.forEach(t),_yr=i(Be),LC=n(Be,"LI",{});var XSe=s(LC);jFe=n(XSe,"STRONG",{});var Y0t=s(jFe);byr=r(Y0t,"mbart"),Y0t.forEach(t),vyr=r(XSe," \u2014 "),kU=n(XSe,"A",{href:!0});var K0t=s(kU);Fyr=r(K0t,"FlaxMBartForConditionalGeneration"),K0t.forEach(t),Tyr=r(XSe," (mBART model)"),XSe.forEach(t),Myr=i(Be),xC=n(Be,"LI",{});var zSe=s(xC);DFe=n(zSe,"STRONG",{});var Z0t=s(DFe);Eyr=r(Z0t,"roberta"),Z0t.forEach(t),Cyr=r(zSe," \u2014 "),SU=n(zSe,"A",{href:!0});var e6t=s(SU);wyr=r(e6t,"FlaxRobertaForMaskedLM"),e6t.forEach(t),Ayr=r(zSe," (RoBERTa model)"),zSe.forEach(t),yyr=i(Be),$C=n(Be,"LI",{});var QSe=s($C);GFe=n(QSe,"STRONG",{});var o6t=s(GFe);Lyr=r(o6t,"roformer"),o6t.forEach(t),xyr=r(QSe," \u2014 "),RU=n(QSe,"A",{href:!0});var r6t=s(RU);$yr=r(r6t,"FlaxRoFormerForMaskedLM"),r6t.forEach(t),kyr=r(QSe," (RoFormer model)"),QSe.forEach(t),Syr=i(Be),kC=n(Be,"LI",{});var WSe=s(kC);OFe=n(WSe,"STRONG",{});var t6t=s(OFe);Ryr=r(t6t,"xlm-roberta"),t6t.forEach(t),Byr=r(WSe," \u2014 "),BU=n(WSe,"A",{href:!0});var a6t=s(BU);Pyr=r(a6t,"FlaxXLMRobertaForMaskedLM"),a6t.forEach(t),Iyr=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Be.forEach(t),qyr=i(Nl),T(SC.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),LPe=i(f),Lc=n(f,"H2",{class:!0});var Sqe=s(Lc);RC=n(Sqe,"A",{id:!0,class:!0,href:!0});var n6t=s(RC);VFe=n(n6t,"SPAN",{});var s6t=s(VFe);T(x7.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),Nyr=i(Sqe),XFe=n(Sqe,"SPAN",{});var l6t=s(XFe);jyr=r(l6t,"FlaxAutoModelForSeq2SeqLM"),l6t.forEach(t),Sqe.forEach(t),xPe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T($7.$$.fragment,jl),Dyr=i(jl),xc=n(jl,"P",{});var LK=s(xc);Gyr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),PU=n(LK,"A",{href:!0});var i6t=s(PU);Oyr=r(i6t,"from_pretrained()"),i6t.forEach(t),Vyr=r(LK," class method or the "),IU=n(LK,"A",{href:!0});var d6t=s(IU);Xyr=r(d6t,"from_config()"),d6t.forEach(t),zyr=r(LK,` class
method.`),LK.forEach(t),Qyr=i(jl),k7=n(jl,"P",{});var Rqe=s(k7);Wyr=r(Rqe,"This class cannot be instantiated directly using "),zFe=n(Rqe,"CODE",{});var c6t=s(zFe);Hyr=r(c6t,"__init__()"),c6t.forEach(t),Uyr=r(Rqe," (throws an error)."),Rqe.forEach(t),Jyr=i(jl),jt=n(jl,"DIV",{class:!0});var Yw=s(jt);T(S7.$$.fragment,Yw),Yyr=i(Yw),QFe=n(Yw,"P",{});var f6t=s(QFe);Kyr=r(f6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f6t.forEach(t),Zyr=i(Yw),$c=n(Yw,"P",{});var xK=s($c);eLr=r(xK,`Note:
Loading a model from its configuration file does `),WFe=n(xK,"STRONG",{});var m6t=s(WFe);oLr=r(m6t,"not"),m6t.forEach(t),rLr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(xK,"A",{href:!0});var g6t=s(qU);tLr=r(g6t,"from_pretrained()"),g6t.forEach(t),aLr=r(xK," to load the model weights."),xK.forEach(t),nLr=i(Yw),T(BC.$$.fragment,Yw),Yw.forEach(t),sLr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(R7.$$.fragment,Dl),lLr=i(Dl),HFe=n(Dl,"P",{});var h6t=s(HFe);iLr=r(h6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h6t.forEach(t),dLr=i(Dl),mn=n(Dl,"P",{});var Kw=s(mn);cLr=r(Kw,"The model class to instantiate is selected based on the "),UFe=n(Kw,"CODE",{});var p6t=s(UFe);fLr=r(p6t,"model_type"),p6t.forEach(t),mLr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),JFe=n(Kw,"CODE",{});var u6t=s(JFe);gLr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),hLr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YFe=n(Kw,"CODE",{});var _6t=s(YFe);pLr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),uLr=r(Kw,":"),Kw.forEach(t),_Lr=i(Dl),Se=n(Dl,"UL",{});var Oe=s(Se);PC=n(Oe,"LI",{});var HSe=s(PC);KFe=n(HSe,"STRONG",{});var b6t=s(KFe);bLr=r(b6t,"bart"),b6t.forEach(t),vLr=r(HSe," \u2014 "),NU=n(HSe,"A",{href:!0});var v6t=s(NU);FLr=r(v6t,"FlaxBartForConditionalGeneration"),v6t.forEach(t),TLr=r(HSe," (BART model)"),HSe.forEach(t),MLr=i(Oe),IC=n(Oe,"LI",{});var USe=s(IC);ZFe=n(USe,"STRONG",{});var F6t=s(ZFe);ELr=r(F6t,"blenderbot"),F6t.forEach(t),CLr=r(USe," \u2014 "),jU=n(USe,"A",{href:!0});var T6t=s(jU);wLr=r(T6t,"FlaxBlenderbotForConditionalGeneration"),T6t.forEach(t),ALr=r(USe," (Blenderbot model)"),USe.forEach(t),yLr=i(Oe),qC=n(Oe,"LI",{});var JSe=s(qC);e0e=n(JSe,"STRONG",{});var M6t=s(e0e);LLr=r(M6t,"blenderbot-small"),M6t.forEach(t),xLr=r(JSe," \u2014 "),DU=n(JSe,"A",{href:!0});var E6t=s(DU);$Lr=r(E6t,"FlaxBlenderbotSmallForConditionalGeneration"),E6t.forEach(t),kLr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),SLr=i(Oe),NC=n(Oe,"LI",{});var YSe=s(NC);o0e=n(YSe,"STRONG",{});var C6t=s(o0e);RLr=r(C6t,"encoder-decoder"),C6t.forEach(t),BLr=r(YSe," \u2014 "),GU=n(YSe,"A",{href:!0});var w6t=s(GU);PLr=r(w6t,"FlaxEncoderDecoderModel"),w6t.forEach(t),ILr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),qLr=i(Oe),jC=n(Oe,"LI",{});var KSe=s(jC);r0e=n(KSe,"STRONG",{});var A6t=s(r0e);NLr=r(A6t,"marian"),A6t.forEach(t),jLr=r(KSe," \u2014 "),OU=n(KSe,"A",{href:!0});var y6t=s(OU);DLr=r(y6t,"FlaxMarianMTModel"),y6t.forEach(t),GLr=r(KSe," (Marian model)"),KSe.forEach(t),OLr=i(Oe),DC=n(Oe,"LI",{});var ZSe=s(DC);t0e=n(ZSe,"STRONG",{});var L6t=s(t0e);VLr=r(L6t,"mbart"),L6t.forEach(t),XLr=r(ZSe," \u2014 "),VU=n(ZSe,"A",{href:!0});var x6t=s(VU);zLr=r(x6t,"FlaxMBartForConditionalGeneration"),x6t.forEach(t),QLr=r(ZSe," (mBART model)"),ZSe.forEach(t),WLr=i(Oe),GC=n(Oe,"LI",{});var eRe=s(GC);a0e=n(eRe,"STRONG",{});var $6t=s(a0e);HLr=r($6t,"mt5"),$6t.forEach(t),ULr=r(eRe," \u2014 "),XU=n(eRe,"A",{href:!0});var k6t=s(XU);JLr=r(k6t,"FlaxMT5ForConditionalGeneration"),k6t.forEach(t),YLr=r(eRe," (mT5 model)"),eRe.forEach(t),KLr=i(Oe),OC=n(Oe,"LI",{});var oRe=s(OC);n0e=n(oRe,"STRONG",{});var S6t=s(n0e);ZLr=r(S6t,"pegasus"),S6t.forEach(t),e8r=r(oRe," \u2014 "),zU=n(oRe,"A",{href:!0});var R6t=s(zU);o8r=r(R6t,"FlaxPegasusForConditionalGeneration"),R6t.forEach(t),r8r=r(oRe," (Pegasus model)"),oRe.forEach(t),t8r=i(Oe),VC=n(Oe,"LI",{});var rRe=s(VC);s0e=n(rRe,"STRONG",{});var B6t=s(s0e);a8r=r(B6t,"t5"),B6t.forEach(t),n8r=r(rRe," \u2014 "),QU=n(rRe,"A",{href:!0});var P6t=s(QU);s8r=r(P6t,"FlaxT5ForConditionalGeneration"),P6t.forEach(t),l8r=r(rRe," (T5 model)"),rRe.forEach(t),Oe.forEach(t),i8r=i(Dl),T(XC.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),$Pe=i(f),kc=n(f,"H2",{class:!0});var Bqe=s(kc);zC=n(Bqe,"A",{id:!0,class:!0,href:!0});var I6t=s(zC);l0e=n(I6t,"SPAN",{});var q6t=s(l0e);T(B7.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),d8r=i(Bqe),i0e=n(Bqe,"SPAN",{});var N6t=s(i0e);c8r=r(N6t,"FlaxAutoModelForSequenceClassification"),N6t.forEach(t),Bqe.forEach(t),kPe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(P7.$$.fragment,Gl),f8r=i(Gl),Sc=n(Gl,"P",{});var $K=s(Sc);m8r=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),WU=n($K,"A",{href:!0});var j6t=s(WU);g8r=r(j6t,"from_pretrained()"),j6t.forEach(t),h8r=r($K," class method or the "),HU=n($K,"A",{href:!0});var D6t=s(HU);p8r=r(D6t,"from_config()"),D6t.forEach(t),u8r=r($K,` class
method.`),$K.forEach(t),_8r=i(Gl),I7=n(Gl,"P",{});var Pqe=s(I7);b8r=r(Pqe,"This class cannot be instantiated directly using "),d0e=n(Pqe,"CODE",{});var G6t=s(d0e);v8r=r(G6t,"__init__()"),G6t.forEach(t),F8r=r(Pqe," (throws an error)."),Pqe.forEach(t),T8r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Zw=s(Dt);T(q7.$$.fragment,Zw),M8r=i(Zw),c0e=n(Zw,"P",{});var O6t=s(c0e);E8r=r(O6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O6t.forEach(t),C8r=i(Zw),Rc=n(Zw,"P",{});var kK=s(Rc);w8r=r(kK,`Note:
Loading a model from its configuration file does `),f0e=n(kK,"STRONG",{});var V6t=s(f0e);A8r=r(V6t,"not"),V6t.forEach(t),y8r=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(kK,"A",{href:!0});var X6t=s(UU);L8r=r(X6t,"from_pretrained()"),X6t.forEach(t),x8r=r(kK," to load the model weights."),kK.forEach(t),$8r=i(Zw),T(QC.$$.fragment,Zw),Zw.forEach(t),k8r=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(N7.$$.fragment,Ol),S8r=i(Ol),m0e=n(Ol,"P",{});var z6t=s(m0e);R8r=r(z6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z6t.forEach(t),B8r=i(Ol),gn=n(Ol,"P",{});var eA=s(gn);P8r=r(eA,"The model class to instantiate is selected based on the "),g0e=n(eA,"CODE",{});var Q6t=s(g0e);I8r=r(Q6t,"model_type"),Q6t.forEach(t),q8r=r(eA,` property of the config object (either
passed as an argument or loaded from `),h0e=n(eA,"CODE",{});var W6t=s(h0e);N8r=r(W6t,"pretrained_model_name_or_path"),W6t.forEach(t),j8r=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(eA,"CODE",{});var H6t=s(p0e);D8r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),G8r=r(eA,":"),eA.forEach(t),O8r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);WC=n(Pe,"LI",{});var tRe=s(WC);u0e=n(tRe,"STRONG",{});var U6t=s(u0e);V8r=r(U6t,"albert"),U6t.forEach(t),X8r=r(tRe," \u2014 "),JU=n(tRe,"A",{href:!0});var J6t=s(JU);z8r=r(J6t,"FlaxAlbertForSequenceClassification"),J6t.forEach(t),Q8r=r(tRe," (ALBERT model)"),tRe.forEach(t),W8r=i(Pe),HC=n(Pe,"LI",{});var aRe=s(HC);_0e=n(aRe,"STRONG",{});var Y6t=s(_0e);H8r=r(Y6t,"bart"),Y6t.forEach(t),U8r=r(aRe," \u2014 "),YU=n(aRe,"A",{href:!0});var K6t=s(YU);J8r=r(K6t,"FlaxBartForSequenceClassification"),K6t.forEach(t),Y8r=r(aRe," (BART model)"),aRe.forEach(t),K8r=i(Pe),UC=n(Pe,"LI",{});var nRe=s(UC);b0e=n(nRe,"STRONG",{});var Z6t=s(b0e);Z8r=r(Z6t,"bert"),Z6t.forEach(t),e7r=r(nRe," \u2014 "),KU=n(nRe,"A",{href:!0});var eTt=s(KU);o7r=r(eTt,"FlaxBertForSequenceClassification"),eTt.forEach(t),r7r=r(nRe," (BERT model)"),nRe.forEach(t),t7r=i(Pe),JC=n(Pe,"LI",{});var sRe=s(JC);v0e=n(sRe,"STRONG",{});var oTt=s(v0e);a7r=r(oTt,"big_bird"),oTt.forEach(t),n7r=r(sRe," \u2014 "),ZU=n(sRe,"A",{href:!0});var rTt=s(ZU);s7r=r(rTt,"FlaxBigBirdForSequenceClassification"),rTt.forEach(t),l7r=r(sRe," (BigBird model)"),sRe.forEach(t),i7r=i(Pe),YC=n(Pe,"LI",{});var lRe=s(YC);F0e=n(lRe,"STRONG",{});var tTt=s(F0e);d7r=r(tTt,"distilbert"),tTt.forEach(t),c7r=r(lRe," \u2014 "),eJ=n(lRe,"A",{href:!0});var aTt=s(eJ);f7r=r(aTt,"FlaxDistilBertForSequenceClassification"),aTt.forEach(t),m7r=r(lRe," (DistilBERT model)"),lRe.forEach(t),g7r=i(Pe),KC=n(Pe,"LI",{});var iRe=s(KC);T0e=n(iRe,"STRONG",{});var nTt=s(T0e);h7r=r(nTt,"electra"),nTt.forEach(t),p7r=r(iRe," \u2014 "),oJ=n(iRe,"A",{href:!0});var sTt=s(oJ);u7r=r(sTt,"FlaxElectraForSequenceClassification"),sTt.forEach(t),_7r=r(iRe," (ELECTRA model)"),iRe.forEach(t),b7r=i(Pe),ZC=n(Pe,"LI",{});var dRe=s(ZC);M0e=n(dRe,"STRONG",{});var lTt=s(M0e);v7r=r(lTt,"mbart"),lTt.forEach(t),F7r=r(dRe," \u2014 "),rJ=n(dRe,"A",{href:!0});var iTt=s(rJ);T7r=r(iTt,"FlaxMBartForSequenceClassification"),iTt.forEach(t),M7r=r(dRe," (mBART model)"),dRe.forEach(t),E7r=i(Pe),e5=n(Pe,"LI",{});var cRe=s(e5);E0e=n(cRe,"STRONG",{});var dTt=s(E0e);C7r=r(dTt,"roberta"),dTt.forEach(t),w7r=r(cRe," \u2014 "),tJ=n(cRe,"A",{href:!0});var cTt=s(tJ);A7r=r(cTt,"FlaxRobertaForSequenceClassification"),cTt.forEach(t),y7r=r(cRe," (RoBERTa model)"),cRe.forEach(t),L7r=i(Pe),o5=n(Pe,"LI",{});var fRe=s(o5);C0e=n(fRe,"STRONG",{});var fTt=s(C0e);x7r=r(fTt,"roformer"),fTt.forEach(t),$7r=r(fRe," \u2014 "),aJ=n(fRe,"A",{href:!0});var mTt=s(aJ);k7r=r(mTt,"FlaxRoFormerForSequenceClassification"),mTt.forEach(t),S7r=r(fRe," (RoFormer model)"),fRe.forEach(t),R7r=i(Pe),r5=n(Pe,"LI",{});var mRe=s(r5);w0e=n(mRe,"STRONG",{});var gTt=s(w0e);B7r=r(gTt,"xlm-roberta"),gTt.forEach(t),P7r=r(mRe," \u2014 "),nJ=n(mRe,"A",{href:!0});var hTt=s(nJ);I7r=r(hTt,"FlaxXLMRobertaForSequenceClassification"),hTt.forEach(t),q7r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),Pe.forEach(t),N7r=i(Ol),T(t5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),SPe=i(f),Bc=n(f,"H2",{class:!0});var Iqe=s(Bc);a5=n(Iqe,"A",{id:!0,class:!0,href:!0});var pTt=s(a5);A0e=n(pTt,"SPAN",{});var uTt=s(A0e);T(j7.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),j7r=i(Iqe),y0e=n(Iqe,"SPAN",{});var _Tt=s(y0e);D7r=r(_Tt,"FlaxAutoModelForQuestionAnswering"),_Tt.forEach(t),Iqe.forEach(t),RPe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(D7.$$.fragment,Vl),G7r=i(Vl),Pc=n(Vl,"P",{});var SK=s(Pc);O7r=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),sJ=n(SK,"A",{href:!0});var bTt=s(sJ);V7r=r(bTt,"from_pretrained()"),bTt.forEach(t),X7r=r(SK," class method or the "),lJ=n(SK,"A",{href:!0});var vTt=s(lJ);z7r=r(vTt,"from_config()"),vTt.forEach(t),Q7r=r(SK,` class
method.`),SK.forEach(t),W7r=i(Vl),G7=n(Vl,"P",{});var qqe=s(G7);H7r=r(qqe,"This class cannot be instantiated directly using "),L0e=n(qqe,"CODE",{});var FTt=s(L0e);U7r=r(FTt,"__init__()"),FTt.forEach(t),J7r=r(qqe," (throws an error)."),qqe.forEach(t),Y7r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var oA=s(Gt);T(O7.$$.fragment,oA),K7r=i(oA),x0e=n(oA,"P",{});var TTt=s(x0e);Z7r=r(TTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TTt.forEach(t),exr=i(oA),Ic=n(oA,"P",{});var RK=s(Ic);oxr=r(RK,`Note:
Loading a model from its configuration file does `),$0e=n(RK,"STRONG",{});var MTt=s($0e);rxr=r(MTt,"not"),MTt.forEach(t),txr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(RK,"A",{href:!0});var ETt=s(iJ);axr=r(ETt,"from_pretrained()"),ETt.forEach(t),nxr=r(RK," to load the model weights."),RK.forEach(t),sxr=i(oA),T(n5.$$.fragment,oA),oA.forEach(t),lxr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(V7.$$.fragment,Xl),ixr=i(Xl),k0e=n(Xl,"P",{});var CTt=s(k0e);dxr=r(CTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CTt.forEach(t),cxr=i(Xl),hn=n(Xl,"P",{});var rA=s(hn);fxr=r(rA,"The model class to instantiate is selected based on the "),S0e=n(rA,"CODE",{});var wTt=s(S0e);mxr=r(wTt,"model_type"),wTt.forEach(t),gxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),R0e=n(rA,"CODE",{});var ATt=s(R0e);hxr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),pxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B0e=n(rA,"CODE",{});var yTt=s(B0e);uxr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),_xr=r(rA,":"),rA.forEach(t),bxr=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);s5=n(Ie,"LI",{});var gRe=s(s5);P0e=n(gRe,"STRONG",{});var LTt=s(P0e);vxr=r(LTt,"albert"),LTt.forEach(t),Fxr=r(gRe," \u2014 "),dJ=n(gRe,"A",{href:!0});var xTt=s(dJ);Txr=r(xTt,"FlaxAlbertForQuestionAnswering"),xTt.forEach(t),Mxr=r(gRe," (ALBERT model)"),gRe.forEach(t),Exr=i(Ie),l5=n(Ie,"LI",{});var hRe=s(l5);I0e=n(hRe,"STRONG",{});var $Tt=s(I0e);Cxr=r($Tt,"bart"),$Tt.forEach(t),wxr=r(hRe," \u2014 "),cJ=n(hRe,"A",{href:!0});var kTt=s(cJ);Axr=r(kTt,"FlaxBartForQuestionAnswering"),kTt.forEach(t),yxr=r(hRe," (BART model)"),hRe.forEach(t),Lxr=i(Ie),i5=n(Ie,"LI",{});var pRe=s(i5);q0e=n(pRe,"STRONG",{});var STt=s(q0e);xxr=r(STt,"bert"),STt.forEach(t),$xr=r(pRe," \u2014 "),fJ=n(pRe,"A",{href:!0});var RTt=s(fJ);kxr=r(RTt,"FlaxBertForQuestionAnswering"),RTt.forEach(t),Sxr=r(pRe," (BERT model)"),pRe.forEach(t),Rxr=i(Ie),d5=n(Ie,"LI",{});var uRe=s(d5);N0e=n(uRe,"STRONG",{});var BTt=s(N0e);Bxr=r(BTt,"big_bird"),BTt.forEach(t),Pxr=r(uRe," \u2014 "),mJ=n(uRe,"A",{href:!0});var PTt=s(mJ);Ixr=r(PTt,"FlaxBigBirdForQuestionAnswering"),PTt.forEach(t),qxr=r(uRe," (BigBird model)"),uRe.forEach(t),Nxr=i(Ie),c5=n(Ie,"LI",{});var _Re=s(c5);j0e=n(_Re,"STRONG",{});var ITt=s(j0e);jxr=r(ITt,"distilbert"),ITt.forEach(t),Dxr=r(_Re," \u2014 "),gJ=n(_Re,"A",{href:!0});var qTt=s(gJ);Gxr=r(qTt,"FlaxDistilBertForQuestionAnswering"),qTt.forEach(t),Oxr=r(_Re," (DistilBERT model)"),_Re.forEach(t),Vxr=i(Ie),f5=n(Ie,"LI",{});var bRe=s(f5);D0e=n(bRe,"STRONG",{});var NTt=s(D0e);Xxr=r(NTt,"electra"),NTt.forEach(t),zxr=r(bRe," \u2014 "),hJ=n(bRe,"A",{href:!0});var jTt=s(hJ);Qxr=r(jTt,"FlaxElectraForQuestionAnswering"),jTt.forEach(t),Wxr=r(bRe," (ELECTRA model)"),bRe.forEach(t),Hxr=i(Ie),m5=n(Ie,"LI",{});var vRe=s(m5);G0e=n(vRe,"STRONG",{});var DTt=s(G0e);Uxr=r(DTt,"mbart"),DTt.forEach(t),Jxr=r(vRe," \u2014 "),pJ=n(vRe,"A",{href:!0});var GTt=s(pJ);Yxr=r(GTt,"FlaxMBartForQuestionAnswering"),GTt.forEach(t),Kxr=r(vRe," (mBART model)"),vRe.forEach(t),Zxr=i(Ie),g5=n(Ie,"LI",{});var FRe=s(g5);O0e=n(FRe,"STRONG",{});var OTt=s(O0e);e9r=r(OTt,"roberta"),OTt.forEach(t),o9r=r(FRe," \u2014 "),uJ=n(FRe,"A",{href:!0});var VTt=s(uJ);r9r=r(VTt,"FlaxRobertaForQuestionAnswering"),VTt.forEach(t),t9r=r(FRe," (RoBERTa model)"),FRe.forEach(t),a9r=i(Ie),h5=n(Ie,"LI",{});var TRe=s(h5);V0e=n(TRe,"STRONG",{});var XTt=s(V0e);n9r=r(XTt,"roformer"),XTt.forEach(t),s9r=r(TRe," \u2014 "),_J=n(TRe,"A",{href:!0});var zTt=s(_J);l9r=r(zTt,"FlaxRoFormerForQuestionAnswering"),zTt.forEach(t),i9r=r(TRe," (RoFormer model)"),TRe.forEach(t),d9r=i(Ie),p5=n(Ie,"LI",{});var MRe=s(p5);X0e=n(MRe,"STRONG",{});var QTt=s(X0e);c9r=r(QTt,"xlm-roberta"),QTt.forEach(t),f9r=r(MRe," \u2014 "),bJ=n(MRe,"A",{href:!0});var WTt=s(bJ);m9r=r(WTt,"FlaxXLMRobertaForQuestionAnswering"),WTt.forEach(t),g9r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Ie.forEach(t),h9r=i(Xl),T(u5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),BPe=i(f),qc=n(f,"H2",{class:!0});var Nqe=s(qc);_5=n(Nqe,"A",{id:!0,class:!0,href:!0});var HTt=s(_5);z0e=n(HTt,"SPAN",{});var UTt=s(z0e);T(X7.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),p9r=i(Nqe),Q0e=n(Nqe,"SPAN",{});var JTt=s(Q0e);u9r=r(JTt,"FlaxAutoModelForTokenClassification"),JTt.forEach(t),Nqe.forEach(t),PPe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(z7.$$.fragment,zl),_9r=i(zl),Nc=n(zl,"P",{});var BK=s(Nc);b9r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),vJ=n(BK,"A",{href:!0});var YTt=s(vJ);v9r=r(YTt,"from_pretrained()"),YTt.forEach(t),F9r=r(BK," class method or the "),FJ=n(BK,"A",{href:!0});var KTt=s(FJ);T9r=r(KTt,"from_config()"),KTt.forEach(t),M9r=r(BK,` class
method.`),BK.forEach(t),E9r=i(zl),Q7=n(zl,"P",{});var jqe=s(Q7);C9r=r(jqe,"This class cannot be instantiated directly using "),W0e=n(jqe,"CODE",{});var ZTt=s(W0e);w9r=r(ZTt,"__init__()"),ZTt.forEach(t),A9r=r(jqe," (throws an error)."),jqe.forEach(t),y9r=i(zl),Ot=n(zl,"DIV",{class:!0});var tA=s(Ot);T(W7.$$.fragment,tA),L9r=i(tA),H0e=n(tA,"P",{});var eMt=s(H0e);x9r=r(eMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eMt.forEach(t),$9r=i(tA),jc=n(tA,"P",{});var PK=s(jc);k9r=r(PK,`Note:
Loading a model from its configuration file does `),U0e=n(PK,"STRONG",{});var oMt=s(U0e);S9r=r(oMt,"not"),oMt.forEach(t),R9r=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TJ=n(PK,"A",{href:!0});var rMt=s(TJ);B9r=r(rMt,"from_pretrained()"),rMt.forEach(t),P9r=r(PK," to load the model weights."),PK.forEach(t),I9r=i(tA),T(b5.$$.fragment,tA),tA.forEach(t),q9r=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(H7.$$.fragment,Ql),N9r=i(Ql),J0e=n(Ql,"P",{});var tMt=s(J0e);j9r=r(tMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),tMt.forEach(t),D9r=i(Ql),pn=n(Ql,"P",{});var aA=s(pn);G9r=r(aA,"The model class to instantiate is selected based on the "),Y0e=n(aA,"CODE",{});var aMt=s(Y0e);O9r=r(aMt,"model_type"),aMt.forEach(t),V9r=r(aA,` property of the config object (either
passed as an argument or loaded from `),K0e=n(aA,"CODE",{});var nMt=s(K0e);X9r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),z9r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(aA,"CODE",{});var sMt=s(Z0e);Q9r=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),W9r=r(aA,":"),aA.forEach(t),H9r=i(Ql),je=n(Ql,"UL",{});var bo=s(je);v5=n(bo,"LI",{});var ERe=s(v5);e6e=n(ERe,"STRONG",{});var lMt=s(e6e);U9r=r(lMt,"albert"),lMt.forEach(t),J9r=r(ERe," \u2014 "),MJ=n(ERe,"A",{href:!0});var iMt=s(MJ);Y9r=r(iMt,"FlaxAlbertForTokenClassification"),iMt.forEach(t),K9r=r(ERe," (ALBERT model)"),ERe.forEach(t),Z9r=i(bo),F5=n(bo,"LI",{});var CRe=s(F5);o6e=n(CRe,"STRONG",{});var dMt=s(o6e);e$r=r(dMt,"bert"),dMt.forEach(t),o$r=r(CRe," \u2014 "),EJ=n(CRe,"A",{href:!0});var cMt=s(EJ);r$r=r(cMt,"FlaxBertForTokenClassification"),cMt.forEach(t),t$r=r(CRe," (BERT model)"),CRe.forEach(t),a$r=i(bo),T5=n(bo,"LI",{});var wRe=s(T5);r6e=n(wRe,"STRONG",{});var fMt=s(r6e);n$r=r(fMt,"big_bird"),fMt.forEach(t),s$r=r(wRe," \u2014 "),CJ=n(wRe,"A",{href:!0});var mMt=s(CJ);l$r=r(mMt,"FlaxBigBirdForTokenClassification"),mMt.forEach(t),i$r=r(wRe," (BigBird model)"),wRe.forEach(t),d$r=i(bo),M5=n(bo,"LI",{});var ARe=s(M5);t6e=n(ARe,"STRONG",{});var gMt=s(t6e);c$r=r(gMt,"distilbert"),gMt.forEach(t),f$r=r(ARe," \u2014 "),wJ=n(ARe,"A",{href:!0});var hMt=s(wJ);m$r=r(hMt,"FlaxDistilBertForTokenClassification"),hMt.forEach(t),g$r=r(ARe," (DistilBERT model)"),ARe.forEach(t),h$r=i(bo),E5=n(bo,"LI",{});var yRe=s(E5);a6e=n(yRe,"STRONG",{});var pMt=s(a6e);p$r=r(pMt,"electra"),pMt.forEach(t),u$r=r(yRe," \u2014 "),AJ=n(yRe,"A",{href:!0});var uMt=s(AJ);_$r=r(uMt,"FlaxElectraForTokenClassification"),uMt.forEach(t),b$r=r(yRe," (ELECTRA model)"),yRe.forEach(t),v$r=i(bo),C5=n(bo,"LI",{});var LRe=s(C5);n6e=n(LRe,"STRONG",{});var _Mt=s(n6e);F$r=r(_Mt,"roberta"),_Mt.forEach(t),T$r=r(LRe," \u2014 "),yJ=n(LRe,"A",{href:!0});var bMt=s(yJ);M$r=r(bMt,"FlaxRobertaForTokenClassification"),bMt.forEach(t),E$r=r(LRe," (RoBERTa model)"),LRe.forEach(t),C$r=i(bo),w5=n(bo,"LI",{});var xRe=s(w5);s6e=n(xRe,"STRONG",{});var vMt=s(s6e);w$r=r(vMt,"roformer"),vMt.forEach(t),A$r=r(xRe," \u2014 "),LJ=n(xRe,"A",{href:!0});var FMt=s(LJ);y$r=r(FMt,"FlaxRoFormerForTokenClassification"),FMt.forEach(t),L$r=r(xRe," (RoFormer model)"),xRe.forEach(t),x$r=i(bo),A5=n(bo,"LI",{});var $Re=s(A5);l6e=n($Re,"STRONG",{});var TMt=s(l6e);$$r=r(TMt,"xlm-roberta"),TMt.forEach(t),k$r=r($Re," \u2014 "),xJ=n($Re,"A",{href:!0});var MMt=s(xJ);S$r=r(MMt,"FlaxXLMRobertaForTokenClassification"),MMt.forEach(t),R$r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),bo.forEach(t),B$r=i(Ql),T(y5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),IPe=i(f),Dc=n(f,"H2",{class:!0});var Dqe=s(Dc);L5=n(Dqe,"A",{id:!0,class:!0,href:!0});var EMt=s(L5);i6e=n(EMt,"SPAN",{});var CMt=s(i6e);T(U7.$$.fragment,CMt),CMt.forEach(t),EMt.forEach(t),P$r=i(Dqe),d6e=n(Dqe,"SPAN",{});var wMt=s(d6e);I$r=r(wMt,"FlaxAutoModelForMultipleChoice"),wMt.forEach(t),Dqe.forEach(t),qPe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(J7.$$.fragment,Wl),q$r=i(Wl),Gc=n(Wl,"P",{});var IK=s(Gc);N$r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$J=n(IK,"A",{href:!0});var AMt=s($J);j$r=r(AMt,"from_pretrained()"),AMt.forEach(t),D$r=r(IK," class method or the "),kJ=n(IK,"A",{href:!0});var yMt=s(kJ);G$r=r(yMt,"from_config()"),yMt.forEach(t),O$r=r(IK,` class
method.`),IK.forEach(t),V$r=i(Wl),Y7=n(Wl,"P",{});var Gqe=s(Y7);X$r=r(Gqe,"This class cannot be instantiated directly using "),c6e=n(Gqe,"CODE",{});var LMt=s(c6e);z$r=r(LMt,"__init__()"),LMt.forEach(t),Q$r=r(Gqe," (throws an error)."),Gqe.forEach(t),W$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var nA=s(Vt);T(K7.$$.fragment,nA),H$r=i(nA),f6e=n(nA,"P",{});var xMt=s(f6e);U$r=r(xMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xMt.forEach(t),J$r=i(nA),Oc=n(nA,"P",{});var qK=s(Oc);Y$r=r(qK,`Note:
Loading a model from its configuration file does `),m6e=n(qK,"STRONG",{});var $Mt=s(m6e);K$r=r($Mt,"not"),$Mt.forEach(t),Z$r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SJ=n(qK,"A",{href:!0});var kMt=s(SJ);ekr=r(kMt,"from_pretrained()"),kMt.forEach(t),okr=r(qK," to load the model weights."),qK.forEach(t),rkr=i(nA),T(x5.$$.fragment,nA),nA.forEach(t),tkr=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(Z7.$$.fragment,Hl),akr=i(Hl),g6e=n(Hl,"P",{});var SMt=s(g6e);nkr=r(SMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SMt.forEach(t),skr=i(Hl),un=n(Hl,"P",{});var sA=s(un);lkr=r(sA,"The model class to instantiate is selected based on the "),h6e=n(sA,"CODE",{});var RMt=s(h6e);ikr=r(RMt,"model_type"),RMt.forEach(t),dkr=r(sA,` property of the config object (either
passed as an argument or loaded from `),p6e=n(sA,"CODE",{});var BMt=s(p6e);ckr=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),fkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(sA,"CODE",{});var PMt=s(u6e);mkr=r(PMt,"pretrained_model_name_or_path"),PMt.forEach(t),gkr=r(sA,":"),sA.forEach(t),hkr=i(Hl),De=n(Hl,"UL",{});var vo=s(De);$5=n(vo,"LI",{});var kRe=s($5);_6e=n(kRe,"STRONG",{});var IMt=s(_6e);pkr=r(IMt,"albert"),IMt.forEach(t),ukr=r(kRe," \u2014 "),RJ=n(kRe,"A",{href:!0});var qMt=s(RJ);_kr=r(qMt,"FlaxAlbertForMultipleChoice"),qMt.forEach(t),bkr=r(kRe," (ALBERT model)"),kRe.forEach(t),vkr=i(vo),k5=n(vo,"LI",{});var SRe=s(k5);b6e=n(SRe,"STRONG",{});var NMt=s(b6e);Fkr=r(NMt,"bert"),NMt.forEach(t),Tkr=r(SRe," \u2014 "),BJ=n(SRe,"A",{href:!0});var jMt=s(BJ);Mkr=r(jMt,"FlaxBertForMultipleChoice"),jMt.forEach(t),Ekr=r(SRe," (BERT model)"),SRe.forEach(t),Ckr=i(vo),S5=n(vo,"LI",{});var RRe=s(S5);v6e=n(RRe,"STRONG",{});var DMt=s(v6e);wkr=r(DMt,"big_bird"),DMt.forEach(t),Akr=r(RRe," \u2014 "),PJ=n(RRe,"A",{href:!0});var GMt=s(PJ);ykr=r(GMt,"FlaxBigBirdForMultipleChoice"),GMt.forEach(t),Lkr=r(RRe," (BigBird model)"),RRe.forEach(t),xkr=i(vo),R5=n(vo,"LI",{});var BRe=s(R5);F6e=n(BRe,"STRONG",{});var OMt=s(F6e);$kr=r(OMt,"distilbert"),OMt.forEach(t),kkr=r(BRe," \u2014 "),IJ=n(BRe,"A",{href:!0});var VMt=s(IJ);Skr=r(VMt,"FlaxDistilBertForMultipleChoice"),VMt.forEach(t),Rkr=r(BRe," (DistilBERT model)"),BRe.forEach(t),Bkr=i(vo),B5=n(vo,"LI",{});var PRe=s(B5);T6e=n(PRe,"STRONG",{});var XMt=s(T6e);Pkr=r(XMt,"electra"),XMt.forEach(t),Ikr=r(PRe," \u2014 "),qJ=n(PRe,"A",{href:!0});var zMt=s(qJ);qkr=r(zMt,"FlaxElectraForMultipleChoice"),zMt.forEach(t),Nkr=r(PRe," (ELECTRA model)"),PRe.forEach(t),jkr=i(vo),P5=n(vo,"LI",{});var IRe=s(P5);M6e=n(IRe,"STRONG",{});var QMt=s(M6e);Dkr=r(QMt,"roberta"),QMt.forEach(t),Gkr=r(IRe," \u2014 "),NJ=n(IRe,"A",{href:!0});var WMt=s(NJ);Okr=r(WMt,"FlaxRobertaForMultipleChoice"),WMt.forEach(t),Vkr=r(IRe," (RoBERTa model)"),IRe.forEach(t),Xkr=i(vo),I5=n(vo,"LI",{});var qRe=s(I5);E6e=n(qRe,"STRONG",{});var HMt=s(E6e);zkr=r(HMt,"roformer"),HMt.forEach(t),Qkr=r(qRe," \u2014 "),jJ=n(qRe,"A",{href:!0});var UMt=s(jJ);Wkr=r(UMt,"FlaxRoFormerForMultipleChoice"),UMt.forEach(t),Hkr=r(qRe," (RoFormer model)"),qRe.forEach(t),Ukr=i(vo),q5=n(vo,"LI",{});var NRe=s(q5);C6e=n(NRe,"STRONG",{});var JMt=s(C6e);Jkr=r(JMt,"xlm-roberta"),JMt.forEach(t),Ykr=r(NRe," \u2014 "),DJ=n(NRe,"A",{href:!0});var YMt=s(DJ);Kkr=r(YMt,"FlaxXLMRobertaForMultipleChoice"),YMt.forEach(t),Zkr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),vo.forEach(t),eSr=i(Hl),T(N5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),NPe=i(f),Vc=n(f,"H2",{class:!0});var Oqe=s(Vc);j5=n(Oqe,"A",{id:!0,class:!0,href:!0});var KMt=s(j5);w6e=n(KMt,"SPAN",{});var ZMt=s(w6e);T(ex.$$.fragment,ZMt),ZMt.forEach(t),KMt.forEach(t),oSr=i(Oqe),A6e=n(Oqe,"SPAN",{});var eEt=s(A6e);rSr=r(eEt,"FlaxAutoModelForNextSentencePrediction"),eEt.forEach(t),Oqe.forEach(t),jPe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(ox.$$.fragment,Ul),tSr=i(Ul),Xc=n(Ul,"P",{});var NK=s(Xc);aSr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GJ=n(NK,"A",{href:!0});var oEt=s(GJ);nSr=r(oEt,"from_pretrained()"),oEt.forEach(t),sSr=r(NK," class method or the "),OJ=n(NK,"A",{href:!0});var rEt=s(OJ);lSr=r(rEt,"from_config()"),rEt.forEach(t),iSr=r(NK,` class
method.`),NK.forEach(t),dSr=i(Ul),rx=n(Ul,"P",{});var Vqe=s(rx);cSr=r(Vqe,"This class cannot be instantiated directly using "),y6e=n(Vqe,"CODE",{});var tEt=s(y6e);fSr=r(tEt,"__init__()"),tEt.forEach(t),mSr=r(Vqe," (throws an error)."),Vqe.forEach(t),gSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var lA=s(Xt);T(tx.$$.fragment,lA),hSr=i(lA),L6e=n(lA,"P",{});var aEt=s(L6e);pSr=r(aEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aEt.forEach(t),uSr=i(lA),zc=n(lA,"P",{});var jK=s(zc);_Sr=r(jK,`Note:
Loading a model from its configuration file does `),x6e=n(jK,"STRONG",{});var nEt=s(x6e);bSr=r(nEt,"not"),nEt.forEach(t),vSr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jK,"A",{href:!0});var sEt=s(VJ);FSr=r(sEt,"from_pretrained()"),sEt.forEach(t),TSr=r(jK," to load the model weights."),jK.forEach(t),MSr=i(lA),T(D5.$$.fragment,lA),lA.forEach(t),ESr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(ax.$$.fragment,Jl),CSr=i(Jl),$6e=n(Jl,"P",{});var lEt=s($6e);wSr=r(lEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lEt.forEach(t),ASr=i(Jl),_n=n(Jl,"P",{});var iA=s(_n);ySr=r(iA,"The model class to instantiate is selected based on the "),k6e=n(iA,"CODE",{});var iEt=s(k6e);LSr=r(iEt,"model_type"),iEt.forEach(t),xSr=r(iA,` property of the config object (either
passed as an argument or loaded from `),S6e=n(iA,"CODE",{});var dEt=s(S6e);$Sr=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),kSr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R6e=n(iA,"CODE",{});var cEt=s(R6e);SSr=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),RSr=r(iA,":"),iA.forEach(t),BSr=i(Jl),B6e=n(Jl,"UL",{});var fEt=s(B6e);G5=n(fEt,"LI",{});var jRe=s(G5);P6e=n(jRe,"STRONG",{});var mEt=s(P6e);PSr=r(mEt,"bert"),mEt.forEach(t),ISr=r(jRe," \u2014 "),XJ=n(jRe,"A",{href:!0});var gEt=s(XJ);qSr=r(gEt,"FlaxBertForNextSentencePrediction"),gEt.forEach(t),NSr=r(jRe," (BERT model)"),jRe.forEach(t),fEt.forEach(t),jSr=i(Jl),T(O5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),DPe=i(f),Qc=n(f,"H2",{class:!0});var Xqe=s(Qc);V5=n(Xqe,"A",{id:!0,class:!0,href:!0});var hEt=s(V5);I6e=n(hEt,"SPAN",{});var pEt=s(I6e);T(nx.$$.fragment,pEt),pEt.forEach(t),hEt.forEach(t),DSr=i(Xqe),q6e=n(Xqe,"SPAN",{});var uEt=s(q6e);GSr=r(uEt,"FlaxAutoModelForImageClassification"),uEt.forEach(t),Xqe.forEach(t),GPe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(sx.$$.fragment,Yl),OSr=i(Yl),Wc=n(Yl,"P",{});var DK=s(Wc);VSr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(DK,"A",{href:!0});var _Et=s(zJ);XSr=r(_Et,"from_pretrained()"),_Et.forEach(t),zSr=r(DK," class method or the "),QJ=n(DK,"A",{href:!0});var bEt=s(QJ);QSr=r(bEt,"from_config()"),bEt.forEach(t),WSr=r(DK,` class
method.`),DK.forEach(t),HSr=i(Yl),lx=n(Yl,"P",{});var zqe=s(lx);USr=r(zqe,"This class cannot be instantiated directly using "),N6e=n(zqe,"CODE",{});var vEt=s(N6e);JSr=r(vEt,"__init__()"),vEt.forEach(t),YSr=r(zqe," (throws an error)."),zqe.forEach(t),KSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var dA=s(zt);T(ix.$$.fragment,dA),ZSr=i(dA),j6e=n(dA,"P",{});var FEt=s(j6e);eRr=r(FEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FEt.forEach(t),oRr=i(dA),Hc=n(dA,"P",{});var GK=s(Hc);rRr=r(GK,`Note:
Loading a model from its configuration file does `),D6e=n(GK,"STRONG",{});var TEt=s(D6e);tRr=r(TEt,"not"),TEt.forEach(t),aRr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(GK,"A",{href:!0});var MEt=s(WJ);nRr=r(MEt,"from_pretrained()"),MEt.forEach(t),sRr=r(GK," to load the model weights."),GK.forEach(t),lRr=i(dA),T(X5.$$.fragment,dA),dA.forEach(t),iRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(dx.$$.fragment,Kl),dRr=i(Kl),G6e=n(Kl,"P",{});var EEt=s(G6e);cRr=r(EEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EEt.forEach(t),fRr=i(Kl),bn=n(Kl,"P",{});var cA=s(bn);mRr=r(cA,"The model class to instantiate is selected based on the "),O6e=n(cA,"CODE",{});var CEt=s(O6e);gRr=r(CEt,"model_type"),CEt.forEach(t),hRr=r(cA,` property of the config object (either
passed as an argument or loaded from `),V6e=n(cA,"CODE",{});var wEt=s(V6e);pRr=r(wEt,"pretrained_model_name_or_path"),wEt.forEach(t),uRr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X6e=n(cA,"CODE",{});var AEt=s(X6e);_Rr=r(AEt,"pretrained_model_name_or_path"),AEt.forEach(t),bRr=r(cA,":"),cA.forEach(t),vRr=i(Kl),cx=n(Kl,"UL",{});var Qqe=s(cx);z5=n(Qqe,"LI",{});var DRe=s(z5);z6e=n(DRe,"STRONG",{});var yEt=s(z6e);FRr=r(yEt,"beit"),yEt.forEach(t),TRr=r(DRe," \u2014 "),HJ=n(DRe,"A",{href:!0});var LEt=s(HJ);MRr=r(LEt,"FlaxBeitForImageClassification"),LEt.forEach(t),ERr=r(DRe," (BEiT model)"),DRe.forEach(t),CRr=i(Qqe),Q5=n(Qqe,"LI",{});var GRe=s(Q5);Q6e=n(GRe,"STRONG",{});var xEt=s(Q6e);wRr=r(xEt,"vit"),xEt.forEach(t),ARr=r(GRe," \u2014 "),UJ=n(GRe,"A",{href:!0});var $Et=s(UJ);yRr=r($Et,"FlaxViTForImageClassification"),$Et.forEach(t),LRr=r(GRe," (ViT model)"),GRe.forEach(t),Qqe.forEach(t),xRr=i(Kl),T(W5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),OPe=i(f),Uc=n(f,"H2",{class:!0});var Wqe=s(Uc);H5=n(Wqe,"A",{id:!0,class:!0,href:!0});var kEt=s(H5);W6e=n(kEt,"SPAN",{});var SEt=s(W6e);T(fx.$$.fragment,SEt),SEt.forEach(t),kEt.forEach(t),$Rr=i(Wqe),H6e=n(Wqe,"SPAN",{});var REt=s(H6e);kRr=r(REt,"FlaxAutoModelForVision2Seq"),REt.forEach(t),Wqe.forEach(t),VPe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(mx.$$.fragment,Zl),SRr=i(Zl),Jc=n(Zl,"P",{});var OK=s(Jc);RRr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),JJ=n(OK,"A",{href:!0});var BEt=s(JJ);BRr=r(BEt,"from_pretrained()"),BEt.forEach(t),PRr=r(OK," class method or the "),YJ=n(OK,"A",{href:!0});var PEt=s(YJ);IRr=r(PEt,"from_config()"),PEt.forEach(t),qRr=r(OK,` class
method.`),OK.forEach(t),NRr=i(Zl),gx=n(Zl,"P",{});var Hqe=s(gx);jRr=r(Hqe,"This class cannot be instantiated directly using "),U6e=n(Hqe,"CODE",{});var IEt=s(U6e);DRr=r(IEt,"__init__()"),IEt.forEach(t),GRr=r(Hqe," (throws an error)."),Hqe.forEach(t),ORr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var fA=s(Qt);T(hx.$$.fragment,fA),VRr=i(fA),J6e=n(fA,"P",{});var qEt=s(J6e);XRr=r(qEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qEt.forEach(t),zRr=i(fA),Yc=n(fA,"P",{});var VK=s(Yc);QRr=r(VK,`Note:
Loading a model from its configuration file does `),Y6e=n(VK,"STRONG",{});var NEt=s(Y6e);WRr=r(NEt,"not"),NEt.forEach(t),HRr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(VK,"A",{href:!0});var jEt=s(KJ);URr=r(jEt,"from_pretrained()"),jEt.forEach(t),JRr=r(VK," to load the model weights."),VK.forEach(t),YRr=i(fA),T(U5.$$.fragment,fA),fA.forEach(t),KRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(px.$$.fragment,ei),ZRr=i(ei),K6e=n(ei,"P",{});var DEt=s(K6e);eBr=r(DEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DEt.forEach(t),oBr=i(ei),vn=n(ei,"P",{});var mA=s(vn);rBr=r(mA,"The model class to instantiate is selected based on the "),Z6e=n(mA,"CODE",{});var GEt=s(Z6e);tBr=r(GEt,"model_type"),GEt.forEach(t),aBr=r(mA,` property of the config object (either
passed as an argument or loaded from `),eTe=n(mA,"CODE",{});var OEt=s(eTe);nBr=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),sBr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(mA,"CODE",{});var VEt=s(oTe);lBr=r(VEt,"pretrained_model_name_or_path"),VEt.forEach(t),iBr=r(mA,":"),mA.forEach(t),dBr=i(ei),rTe=n(ei,"UL",{});var XEt=s(rTe);J5=n(XEt,"LI",{});var ORe=s(J5);tTe=n(ORe,"STRONG",{});var zEt=s(tTe);cBr=r(zEt,"vision-encoder-decoder"),zEt.forEach(t),fBr=r(ORe," \u2014 "),ZJ=n(ORe,"A",{href:!0});var QEt=s(ZJ);mBr=r(QEt,"FlaxVisionEncoderDecoderModel"),QEt.forEach(t),gBr=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),XEt.forEach(t),hBr=i(ei),T(Y5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(H5t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(B9,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(P9,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig"),c(I9,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(q9,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig"),c(N9,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig"),c(j9,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(D9,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig"),c(G9,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(O9,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(V9,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(X9,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig"),c(z9,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig"),c(Q9,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig"),c(W9,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig"),c(H9,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig"),c(U9,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig"),c(J9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Y9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(K9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Z9,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig"),c(e$,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(o$,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(r$,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig"),c(t$,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig"),c(a$,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig"),c(n$,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig"),c(s$,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig"),c(l$,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig"),c(i$,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(d$,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig"),c(c$,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig"),c(f$,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig"),c(m$,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig"),c(g$,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig"),c(h$,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config"),c(p$,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(u$,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig"),c(_$,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig"),c(b$,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig"),c(v$,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(F$,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(T$,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(M$,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig"),c(E$,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig"),c(C$,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig"),c(w$,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig"),c(A$,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config"),c(y$,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig"),c(L$,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(x$,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig"),c($$,"href","/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCConfig"),c(k$,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S$,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R$,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig"),c(B$,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config"),c(P$,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I$,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q$,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig"),c(N$,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j$,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig"),c(D$,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(G$,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(O$,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(V$,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagConfig"),c(X$,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmConfig"),c(z$,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig"),c(Q$,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig"),c(W$,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig"),c(H$,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig"),c(U$,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig"),c(J$,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig"),c(Y$,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig"),c(K$,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig"),c(Z$,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig"),c(ek,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig"),c(ok,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rk,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tk,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ak,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig"),c(nk,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sk,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig"),c(lk,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config"),c(ik,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig"),c(dk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fk,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig"),c(mk,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gk,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hk,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig"),c(pk,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig"),c(uk,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bk,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vk,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig"),c(Fk,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Tk,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Mk,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig"),c(Ek,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig"),c(Ck,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig"),c(wk,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ak,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(yk,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Lk,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig"),c(xk,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c($k,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kk,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(Sk,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizer"),c(Bk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Ik,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(qk,"href","/docs/transformers/pr_16402/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Nk,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(jk,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(Dk,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Gk,"href","/docs/transformers/pr_16402/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Ok,"href","/docs/transformers/pr_16402/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Vk,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Xk,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zk,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Qk,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Hk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Uk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Jk,"href","/docs/transformers/pr_16402/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Yk,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Kk,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineTokenizer"),c(eS,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizer"),c(oS,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(tS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(aS,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizer"),c(nS,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(fS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(mS,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gS,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(pS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(uS,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizer"),c(_S,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bS,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vS,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizer"),c(FS,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TS,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MS,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ES,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($S,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizer"),c(kS,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(SS,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(NS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jS,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(DS,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(GS,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizer"),c(OS,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizerFast"),c(VS,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizer"),c(XS,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(zS,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeTokenizer"),c(QS,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(WS,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HS,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(US,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianTokenizer"),c(JS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizer"),c(YS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(oR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(rR,"href","/docs/transformers/pr_16402/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(iR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(cR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(fR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(mR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(gR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(hR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pR,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(uR,"href","/docs/transformers/pr_16402/en/model_doc/phobert#transformers.PhobertTokenizer"),c(_R,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartTokenizer"),c(bR,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(vR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(FR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(TR,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagTokenizer"),c(MR,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizer"),c(ER,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizerFast"),c(CR,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizer"),c(wR,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(AR,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizer"),c(yR,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(LR,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(xR,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c($R,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(kR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(SR,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(RR,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(BR,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(PR,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(IR,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizer"),c(qR,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(NR,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(jR,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(DR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(GR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(OR,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasTokenizer"),c(VR,"href","/docs/transformers/pr_16402/en/model_doc/tapex#transformers.TapexTokenizer"),c(XR,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(zR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(QR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(WR,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(HR,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(UR,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizer"),c(JR,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(YR,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMTokenizer"),c(KR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(ZR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(eB,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(oB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(aB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(nB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(sB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(lB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(iB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(bB,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(vB,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($B,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoProcessor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(SB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(RB,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPProcessor"),c(BB,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(PB,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(IB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(jB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(DB,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRProcessor"),c(GB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltProcessor"),c(XB,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(zB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(WB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel"),c(YB,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel"),c(KB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel"),c(ZB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(eP,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(oP,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel"),c(rP,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(tP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(aP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(nP,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel"),c(sP,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel"),c(lP,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel"),c(iP,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel"),c(dP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel"),c(cP,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel"),c(fP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hP,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel"),c(pP,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(uP,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(_P,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel"),c(bP,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel"),c(vP,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel"),c(FP,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(TP,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel"),c(MP,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel"),c(EP,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel"),c(CP,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel"),c(wP,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel"),c(AP,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel"),c(yP,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel"),c(LP,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel"),c(xP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model"),c($P,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(kP,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel"),c(SP,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel"),c(RP,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel"),c(BP,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(PP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(IP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(qP,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel"),c(NP,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel"),c(jP,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel"),c(DP,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel"),c(GP,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model"),c(OP,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel"),c(VP,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel"),c(XP,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel"),c(zP,"href","/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCModel"),c(QP,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WP,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel"),c(HP,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel"),c(UP,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model"),c(JP,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YP,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KP,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel"),c(ZP,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel"),c(eI,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel"),c(oI,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rI,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tI,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aI,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel"),c(nI,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel"),c(sI,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel"),c(lI,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel"),c(iI,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(dI,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel"),c(cI,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel"),c(fI,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel"),c(mI,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel"),c(gI,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel"),c(hI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(pI,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel"),c(uI,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_I,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel"),c(bI,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model"),c(vI,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel"),c(FI,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(TI,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel"),c(MI,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(EI,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel"),c(CI,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel"),c(wI,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(AI,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yI,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel"),c(LI,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(xI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c($I,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel"),c(kI,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel"),c(SI,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel"),c(RI,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(BI,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(PI,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(II,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel"),c(qI,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoModelForPreTraining"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(NI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GI,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining"),c(OI,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(VI,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining"),c(XI,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(zI,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(QI,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WI,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(HI,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(UI,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(JI,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(YI,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining"),c(KI,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(ZI,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining"),c(eq,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(oq,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(rq,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(tq,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(aq,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(nq,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(sq,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(lq,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(iq,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(dq,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(cq,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(fq,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(mq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gq,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hq,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(pq,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(uq,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(_q,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(bq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(vq,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Fq,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Tq,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Mq,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Eq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(wq,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Aq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xq,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM"),c($q,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel"),c(kq,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Sq,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Rq,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Bq,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Pq,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Iq,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(qq,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Nq,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(jq,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Dq,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Gq,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Oq,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Vq,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM"),c(Xq,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM"),c(zq,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Qq,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Wq,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Hq,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Uq,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Jq,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Yq,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Kq,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Zq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(eN,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(oN,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(rN,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tN,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(aN,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(nN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(lN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(iN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(dN,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForMaskedLM"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(cN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gN,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(hN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pN,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM"),c(uN,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(_N,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bN,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(FN,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TN,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(MN,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(EN,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(CN,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wN,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(AN,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(yN,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xN,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($N,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(kN,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BN,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(PN,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(IN,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(qN,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(NN,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(DN,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(GN,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ON,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(VN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(XN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(zN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QN,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R2,"id","transformers.AutoModelForSeq2SeqLM"),c(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R2,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(WN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(oj,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel"),c(nj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForSequenceClassification"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(gj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uj,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c($j,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForMultipleChoice"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(dD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c($D,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xb,"id","transformers.AutoModelForNextSentencePrediction"),c(xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(DD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(XD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(zD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(QD,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(WD,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nb,"id","transformers.AutoModelForTokenClassification"),c(Nb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(HD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(KD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(eG,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(oG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification"),c(rG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(tG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(aG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(nG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(sG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(lG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(iG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(dG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(cG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(fG,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(mG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(hG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(pG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(uG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(vG,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(FG,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(TG,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(EG,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(CG,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(wG,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(AG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(yG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(LG,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(xG,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T4,"id","transformers.AutoModelForQuestionAnswering"),c(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T4,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c($G,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RG,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(WG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(hO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(_O,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cv,"id","transformers.AutoModelForTableQuestionAnswering"),c(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(bO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pv,"id","transformers.AutoModelForImageClassification"),c(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pv,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(MO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wO,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification"),c(AO,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(yO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(LO,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification"),c(xO,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c($O,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(kO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(SO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(RO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(BO,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PO,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(IO,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(qO,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NO,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification"),c(jO,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification"),c(DO,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForVision2Seq"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(GO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForAudioClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(zO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(KO,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(eV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(oV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForAudioFrameClassification"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(rV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForCTC"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(dV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(gV,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC"),c(hV,"href","/docs/transformers/pr_16402/en/model_doc/mctc#transformers.MCTCForCTC"),c(pV,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC"),c(uV,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC"),c(_V,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(FV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(TV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(wV,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FF,"id","transformers.AutoModelForAudioXVector"),c(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FF,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(AV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c($V,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(kV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(SV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForMaskedImageModeling"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(RV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(qV,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(NV,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PF,"id","transformers.AutoModelForObjectDetection"),c(PF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PF,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(jV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DF,"id","transformers.AutoModelForImageSegmentation"),c(DF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DF,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(VV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForSemanticSegmentation"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(WV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JV,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(YV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(KV,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(ZV,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForInstanceSegmentation"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(eX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.TFAutoModel"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(aX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel"),c(iX,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel"),c(dX,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel"),c(cX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mX,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel"),c(gX,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel"),c(hX,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel"),c(pX,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel"),c(uX,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel"),c(_X,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel"),c(bX,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(vX,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(FX,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(TX,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel"),c(MX,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(EX,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel"),c(CX,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(wX,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model"),c(AX,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel"),c(yX,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel"),c(LX,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(xX,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel"),c($X,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel"),c(kX,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel"),c(SX,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel"),c(RX,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel"),c(BX,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(PX,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel"),c(IX,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model"),c(qX,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(NX,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel"),c(jX,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel"),c(DX,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel"),c(GX,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel"),c(OX,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(VX,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model"),c(XX,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel"),c(zX,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(QX,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel"),c(WX,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(HX,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(UX,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel"),c(JX,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(YX,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.TFAutoModelForPreTraining"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(KX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ez,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oz,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(rz,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(tz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining"),c(az,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nz,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(sz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(lz,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(iz,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(dz,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(cz,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fz,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(mz,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(gz,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(hz,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(pz,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(uz,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(_z,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(bz,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(vz,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Fz,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Tz,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Mz,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ez,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M6,"id","transformers.TFAutoModelForCausalLM"),c(M6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M6,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Cz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Az,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Lz,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(xz,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($z,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kz,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Sz,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Bz,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(Pz,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Iz,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qz,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Nz,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q6,"id","transformers.TFAutoModelForImageClassification"),c(q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q6,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Vz,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O6,"id","transformers.TFAutoModelForMaskedLM"),c(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O6,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Xz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(cQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(mQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uQ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(FQ,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel"),c(MQ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(CQ,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.TFAutoModelForSequenceClassification"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(AQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(eW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForMultipleChoice"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(oW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(_W,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(bW,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(vW,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(FW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(TW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.TFAutoModelForTokenClassification"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(wW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(xW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification"),c($W,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(kW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(SW,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(RW,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(BW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(PW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(IW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(qW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(NW,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(jW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(DW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(GW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(OW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(VW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(XW,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(zW,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(QW,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(WW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.TFAutoModelForQuestionAnswering"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(HW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(sH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(pH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.TFAutoModelForVision2Seq"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(TH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CH,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.FlaxAutoModel"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(wH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel"),c(xH,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel"),c($H,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel"),c(kH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel"),c(SH,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(RH,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(BH,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(PH,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel"),c(IH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(qH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel"),c(NH,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(jH,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(DH,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(GH,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel"),c(OH,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel"),c(VH,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model"),c(XH,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(zH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(QH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(WH,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model"),c(HH,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(UH,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel"),c(JH,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(YH,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(KH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YE,"id","transformers.FlaxAutoModelForCausalLM"),c(YE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YE,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(tU,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(aU,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(nU,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(sU,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nC,"id","transformers.FlaxAutoModelForPreTraining"),c(nC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nC,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(lU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(fU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(gU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(hU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(pU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(uU,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(_U,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vU,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(FU,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(TU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FC,"id","transformers.FlaxAutoModelForMaskedLM"),c(FC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FC,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(MU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(AU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(LU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(xU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c($U,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(kU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(RU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(BU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(PU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(OU,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(VU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zU,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(WU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(sJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_5,"id","transformers.FlaxAutoModelForTokenClassification"),c(_5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(vJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(wJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(yJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(LJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(xJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c($J,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(GJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForImageClassification"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(UJ,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H5,"id","transformers.FlaxAutoModelForVision2Seq"),c(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,gA),e(Yr,rf),b(f,qe,_),b(f,Ve,_),e(Ve,ai),e(Ve,Tn),e(Tn,hA),e(Ve,Mn),e(Ve,En),e(En,pA),e(Ve,ni),e(Ve,Cn),e(Cn,uA),e(Ve,si),b(f,tf,_),M(ba,f,_),b(f,Xe,_),b(f,Ae,_),e(Ae,L9),e(Ae,li),e(li,x9),e(Ae,$9),b(f,To,_),b(f,va,_),e(va,k9),e(va,af),e(af,S9),e(va,Uqe),b(f,VRe,_),b(f,ii,_),e(ii,nf),e(nf,XK),M(_A,XK,null),e(ii,Jqe),e(ii,zK),e(zK,Yqe),b(f,XRe,_),b(f,wn,_),e(wn,Kqe),e(wn,QK),e(QK,Zqe),e(wn,eNe),e(wn,WK),e(WK,oNe),e(wn,rNe),b(f,zRe,_),M(bA,f,_),b(f,QRe,_),b(f,R9,_),e(R9,tNe),b(f,WRe,_),M(sf,f,_),b(f,HRe,_),b(f,di,_),e(di,lf),e(lf,HK),M(vA,HK,null),e(di,aNe),e(di,UK),e(UK,nNe),b(f,URe,_),b(f,Mo,_),M(FA,Mo,null),e(Mo,sNe),e(Mo,TA),e(TA,lNe),e(TA,B9),e(B9,iNe),e(TA,dNe),e(Mo,cNe),e(Mo,MA),e(MA,fNe),e(MA,JK),e(JK,mNe),e(MA,gNe),e(Mo,hNe),e(Mo,Fr),M(EA,Fr,null),e(Fr,pNe),e(Fr,YK),e(YK,uNe),e(Fr,_Ne),e(Fr,ci),e(ci,bNe),e(ci,KK),e(KK,vNe),e(ci,FNe),e(ci,ZK),e(ZK,TNe),e(ci,MNe),e(Fr,ENe),e(Fr,A),e(A,df),e(df,eZ),e(eZ,CNe),e(df,wNe),e(df,P9),e(P9,ANe),e(df,yNe),e(A,LNe),e(A,cf),e(cf,oZ),e(oZ,xNe),e(cf,$Ne),e(cf,I9),e(I9,kNe),e(cf,SNe),e(A,RNe),e(A,ff),e(ff,rZ),e(rZ,BNe),e(ff,PNe),e(ff,q9),e(q9,INe),e(ff,qNe),e(A,NNe),e(A,mf),e(mf,tZ),e(tZ,jNe),e(mf,DNe),e(mf,N9),e(N9,GNe),e(mf,ONe),e(A,VNe),e(A,gf),e(gf,aZ),e(aZ,XNe),e(gf,zNe),e(gf,j9),e(j9,QNe),e(gf,WNe),e(A,HNe),e(A,hf),e(hf,nZ),e(nZ,UNe),e(hf,JNe),e(hf,D9),e(D9,YNe),e(hf,KNe),e(A,ZNe),e(A,pf),e(pf,sZ),e(sZ,eje),e(pf,oje),e(pf,G9),e(G9,rje),e(pf,tje),e(A,aje),e(A,uf),e(uf,lZ),e(lZ,nje),e(uf,sje),e(uf,O9),e(O9,lje),e(uf,ije),e(A,dje),e(A,_f),e(_f,iZ),e(iZ,cje),e(_f,fje),e(_f,V9),e(V9,mje),e(_f,gje),e(A,hje),e(A,bf),e(bf,dZ),e(dZ,pje),e(bf,uje),e(bf,X9),e(X9,_je),e(bf,bje),e(A,vje),e(A,vf),e(vf,cZ),e(cZ,Fje),e(vf,Tje),e(vf,z9),e(z9,Mje),e(vf,Eje),e(A,Cje),e(A,Ff),e(Ff,fZ),e(fZ,wje),e(Ff,Aje),e(Ff,Q9),e(Q9,yje),e(Ff,Lje),e(A,xje),e(A,Tf),e(Tf,mZ),e(mZ,$je),e(Tf,kje),e(Tf,W9),e(W9,Sje),e(Tf,Rje),e(A,Bje),e(A,Mf),e(Mf,gZ),e(gZ,Pje),e(Mf,Ije),e(Mf,H9),e(H9,qje),e(Mf,Nje),e(A,jje),e(A,Ef),e(Ef,hZ),e(hZ,Dje),e(Ef,Gje),e(Ef,U9),e(U9,Oje),e(Ef,Vje),e(A,Xje),e(A,Cf),e(Cf,pZ),e(pZ,zje),e(Cf,Qje),e(Cf,J9),e(J9,Wje),e(Cf,Hje),e(A,Uje),e(A,wf),e(wf,uZ),e(uZ,Jje),e(wf,Yje),e(wf,Y9),e(Y9,Kje),e(wf,Zje),e(A,eDe),e(A,Af),e(Af,_Z),e(_Z,oDe),e(Af,rDe),e(Af,K9),e(K9,tDe),e(Af,aDe),e(A,nDe),e(A,yf),e(yf,bZ),e(bZ,sDe),e(yf,lDe),e(yf,Z9),e(Z9,iDe),e(yf,dDe),e(A,cDe),e(A,Lf),e(Lf,vZ),e(vZ,fDe),e(Lf,mDe),e(Lf,e$),e(e$,gDe),e(Lf,hDe),e(A,pDe),e(A,xf),e(xf,FZ),e(FZ,uDe),e(xf,_De),e(xf,o$),e(o$,bDe),e(xf,vDe),e(A,FDe),e(A,$f),e($f,TZ),e(TZ,TDe),e($f,MDe),e($f,r$),e(r$,EDe),e($f,CDe),e(A,wDe),e(A,kf),e(kf,MZ),e(MZ,ADe),e(kf,yDe),e(kf,t$),e(t$,LDe),e(kf,xDe),e(A,$De),e(A,Sf),e(Sf,EZ),e(EZ,kDe),e(Sf,SDe),e(Sf,a$),e(a$,RDe),e(Sf,BDe),e(A,PDe),e(A,Rf),e(Rf,CZ),e(CZ,IDe),e(Rf,qDe),e(Rf,n$),e(n$,NDe),e(Rf,jDe),e(A,DDe),e(A,Bf),e(Bf,wZ),e(wZ,GDe),e(Bf,ODe),e(Bf,s$),e(s$,VDe),e(Bf,XDe),e(A,zDe),e(A,Pf),e(Pf,AZ),e(AZ,QDe),e(Pf,WDe),e(Pf,l$),e(l$,HDe),e(Pf,UDe),e(A,JDe),e(A,If),e(If,yZ),e(yZ,YDe),e(If,KDe),e(If,i$),e(i$,ZDe),e(If,eGe),e(A,oGe),e(A,qf),e(qf,LZ),e(LZ,rGe),e(qf,tGe),e(qf,d$),e(d$,aGe),e(qf,nGe),e(A,sGe),e(A,Nf),e(Nf,xZ),e(xZ,lGe),e(Nf,iGe),e(Nf,c$),e(c$,dGe),e(Nf,cGe),e(A,fGe),e(A,jf),e(jf,$Z),e($Z,mGe),e(jf,gGe),e(jf,f$),e(f$,hGe),e(jf,pGe),e(A,uGe),e(A,Df),e(Df,kZ),e(kZ,_Ge),e(Df,bGe),e(Df,m$),e(m$,vGe),e(Df,FGe),e(A,TGe),e(A,Gf),e(Gf,SZ),e(SZ,MGe),e(Gf,EGe),e(Gf,g$),e(g$,CGe),e(Gf,wGe),e(A,AGe),e(A,Of),e(Of,RZ),e(RZ,yGe),e(Of,LGe),e(Of,h$),e(h$,xGe),e(Of,$Ge),e(A,kGe),e(A,Vf),e(Vf,BZ),e(BZ,SGe),e(Vf,RGe),e(Vf,p$),e(p$,BGe),e(Vf,PGe),e(A,IGe),e(A,Xf),e(Xf,PZ),e(PZ,qGe),e(Xf,NGe),e(Xf,u$),e(u$,jGe),e(Xf,DGe),e(A,GGe),e(A,zf),e(zf,IZ),e(IZ,OGe),e(zf,VGe),e(zf,_$),e(_$,XGe),e(zf,zGe),e(A,QGe),e(A,Qf),e(Qf,qZ),e(qZ,WGe),e(Qf,HGe),e(Qf,b$),e(b$,UGe),e(Qf,JGe),e(A,YGe),e(A,Wf),e(Wf,NZ),e(NZ,KGe),e(Wf,ZGe),e(Wf,v$),e(v$,eOe),e(Wf,oOe),e(A,rOe),e(A,Hf),e(Hf,jZ),e(jZ,tOe),e(Hf,aOe),e(Hf,F$),e(F$,nOe),e(Hf,sOe),e(A,lOe),e(A,Uf),e(Uf,DZ),e(DZ,iOe),e(Uf,dOe),e(Uf,T$),e(T$,cOe),e(Uf,fOe),e(A,mOe),e(A,Jf),e(Jf,GZ),e(GZ,gOe),e(Jf,hOe),e(Jf,M$),e(M$,pOe),e(Jf,uOe),e(A,_Oe),e(A,Yf),e(Yf,OZ),e(OZ,bOe),e(Yf,vOe),e(Yf,E$),e(E$,FOe),e(Yf,TOe),e(A,MOe),e(A,Kf),e(Kf,VZ),e(VZ,EOe),e(Kf,COe),e(Kf,C$),e(C$,wOe),e(Kf,AOe),e(A,yOe),e(A,Zf),e(Zf,XZ),e(XZ,LOe),e(Zf,xOe),e(Zf,w$),e(w$,$Oe),e(Zf,kOe),e(A,SOe),e(A,em),e(em,zZ),e(zZ,ROe),e(em,BOe),e(em,A$),e(A$,POe),e(em,IOe),e(A,qOe),e(A,om),e(om,QZ),e(QZ,NOe),e(om,jOe),e(om,y$),e(y$,DOe),e(om,GOe),e(A,OOe),e(A,rm),e(rm,WZ),e(WZ,VOe),e(rm,XOe),e(rm,L$),e(L$,zOe),e(rm,QOe),e(A,WOe),e(A,tm),e(tm,HZ),e(HZ,HOe),e(tm,UOe),e(tm,x$),e(x$,JOe),e(tm,YOe),e(A,KOe),e(A,am),e(am,UZ),e(UZ,ZOe),e(am,eVe),e(am,$$),e($$,oVe),e(am,rVe),e(A,tVe),e(A,nm),e(nm,JZ),e(JZ,aVe),e(nm,nVe),e(nm,k$),e(k$,sVe),e(nm,lVe),e(A,iVe),e(A,sm),e(sm,YZ),e(YZ,dVe),e(sm,cVe),e(sm,S$),e(S$,fVe),e(sm,mVe),e(A,gVe),e(A,lm),e(lm,KZ),e(KZ,hVe),e(lm,pVe),e(lm,R$),e(R$,uVe),e(lm,_Ve),e(A,bVe),e(A,im),e(im,ZZ),e(ZZ,vVe),e(im,FVe),e(im,B$),e(B$,TVe),e(im,MVe),e(A,EVe),e(A,dm),e(dm,eee),e(eee,CVe),e(dm,wVe),e(dm,P$),e(P$,AVe),e(dm,yVe),e(A,LVe),e(A,cm),e(cm,oee),e(oee,xVe),e(cm,$Ve),e(cm,I$),e(I$,kVe),e(cm,SVe),e(A,RVe),e(A,fm),e(fm,ree),e(ree,BVe),e(fm,PVe),e(fm,q$),e(q$,IVe),e(fm,qVe),e(A,NVe),e(A,mm),e(mm,tee),e(tee,jVe),e(mm,DVe),e(mm,N$),e(N$,GVe),e(mm,OVe),e(A,VVe),e(A,gm),e(gm,aee),e(aee,XVe),e(gm,zVe),e(gm,j$),e(j$,QVe),e(gm,WVe),e(A,HVe),e(A,hm),e(hm,nee),e(nee,UVe),e(hm,JVe),e(hm,D$),e(D$,YVe),e(hm,KVe),e(A,ZVe),e(A,pm),e(pm,see),e(see,eXe),e(pm,oXe),e(pm,G$),e(G$,rXe),e(pm,tXe),e(A,aXe),e(A,um),e(um,lee),e(lee,nXe),e(um,sXe),e(um,O$),e(O$,lXe),e(um,iXe),e(A,dXe),e(A,_m),e(_m,iee),e(iee,cXe),e(_m,fXe),e(_m,V$),e(V$,mXe),e(_m,gXe),e(A,hXe),e(A,bm),e(bm,dee),e(dee,pXe),e(bm,uXe),e(bm,X$),e(X$,_Xe),e(bm,bXe),e(A,vXe),e(A,vm),e(vm,cee),e(cee,FXe),e(vm,TXe),e(vm,z$),e(z$,MXe),e(vm,EXe),e(A,CXe),e(A,Fm),e(Fm,fee),e(fee,wXe),e(Fm,AXe),e(Fm,Q$),e(Q$,yXe),e(Fm,LXe),e(A,xXe),e(A,Tm),e(Tm,mee),e(mee,$Xe),e(Tm,kXe),e(Tm,W$),e(W$,SXe),e(Tm,RXe),e(A,BXe),e(A,Mm),e(Mm,gee),e(gee,PXe),e(Mm,IXe),e(Mm,H$),e(H$,qXe),e(Mm,NXe),e(A,jXe),e(A,Em),e(Em,hee),e(hee,DXe),e(Em,GXe),e(Em,U$),e(U$,OXe),e(Em,VXe),e(A,XXe),e(A,Cm),e(Cm,pee),e(pee,zXe),e(Cm,QXe),e(Cm,J$),e(J$,WXe),e(Cm,HXe),e(A,UXe),e(A,wm),e(wm,uee),e(uee,JXe),e(wm,YXe),e(wm,Y$),e(Y$,KXe),e(wm,ZXe),e(A,eze),e(A,Am),e(Am,_ee),e(_ee,oze),e(Am,rze),e(Am,K$),e(K$,tze),e(Am,aze),e(A,nze),e(A,ym),e(ym,bee),e(bee,sze),e(ym,lze),e(ym,Z$),e(Z$,ize),e(ym,dze),e(A,cze),e(A,Lm),e(Lm,vee),e(vee,fze),e(Lm,mze),e(Lm,ek),e(ek,gze),e(Lm,hze),e(A,pze),e(A,xm),e(xm,Fee),e(Fee,uze),e(xm,_ze),e(xm,ok),e(ok,bze),e(xm,vze),e(A,Fze),e(A,$m),e($m,Tee),e(Tee,Tze),e($m,Mze),e($m,rk),e(rk,Eze),e($m,Cze),e(A,wze),e(A,km),e(km,Mee),e(Mee,Aze),e(km,yze),e(km,tk),e(tk,Lze),e(km,xze),e(A,$ze),e(A,Sm),e(Sm,Eee),e(Eee,kze),e(Sm,Sze),e(Sm,ak),e(ak,Rze),e(Sm,Bze),e(A,Pze),e(A,Rm),e(Rm,Cee),e(Cee,Ize),e(Rm,qze),e(Rm,nk),e(nk,Nze),e(Rm,jze),e(A,Dze),e(A,Bm),e(Bm,wee),e(wee,Gze),e(Bm,Oze),e(Bm,sk),e(sk,Vze),e(Bm,Xze),e(A,zze),e(A,Pm),e(Pm,Aee),e(Aee,Qze),e(Pm,Wze),e(Pm,lk),e(lk,Hze),e(Pm,Uze),e(A,Jze),e(A,Im),e(Im,yee),e(yee,Yze),e(Im,Kze),e(Im,ik),e(ik,Zze),e(Im,eQe),e(A,oQe),e(A,qm),e(qm,Lee),e(Lee,rQe),e(qm,tQe),e(qm,dk),e(dk,aQe),e(qm,nQe),e(A,sQe),e(A,Nm),e(Nm,xee),e(xee,lQe),e(Nm,iQe),e(Nm,ck),e(ck,dQe),e(Nm,cQe),e(A,fQe),e(A,jm),e(jm,$ee),e($ee,mQe),e(jm,gQe),e(jm,fk),e(fk,hQe),e(jm,pQe),e(A,uQe),e(A,Dm),e(Dm,kee),e(kee,_Qe),e(Dm,bQe),e(Dm,mk),e(mk,vQe),e(Dm,FQe),e(A,TQe),e(A,Gm),e(Gm,See),e(See,MQe),e(Gm,EQe),e(Gm,gk),e(gk,CQe),e(Gm,wQe),e(A,AQe),e(A,Om),e(Om,Ree),e(Ree,yQe),e(Om,LQe),e(Om,hk),e(hk,xQe),e(Om,$Qe),e(A,kQe),e(A,Vm),e(Vm,Bee),e(Bee,SQe),e(Vm,RQe),e(Vm,pk),e(pk,BQe),e(Vm,PQe),e(A,IQe),e(A,Xm),e(Xm,Pee),e(Pee,qQe),e(Xm,NQe),e(Xm,uk),e(uk,jQe),e(Xm,DQe),e(A,GQe),e(A,zm),e(zm,Iee),e(Iee,OQe),e(zm,VQe),e(zm,_k),e(_k,XQe),e(zm,zQe),e(A,QQe),e(A,Qm),e(Qm,qee),e(qee,WQe),e(Qm,HQe),e(Qm,bk),e(bk,UQe),e(Qm,JQe),e(A,YQe),e(A,Wm),e(Wm,Nee),e(Nee,KQe),e(Wm,ZQe),e(Wm,vk),e(vk,eWe),e(Wm,oWe),e(A,rWe),e(A,Hm),e(Hm,jee),e(jee,tWe),e(Hm,aWe),e(Hm,Fk),e(Fk,nWe),e(Hm,sWe),e(A,lWe),e(A,Um),e(Um,Dee),e(Dee,iWe),e(Um,dWe),e(Um,Tk),e(Tk,cWe),e(Um,fWe),e(A,mWe),e(A,Jm),e(Jm,Gee),e(Gee,gWe),e(Jm,hWe),e(Jm,Mk),e(Mk,pWe),e(Jm,uWe),e(A,_We),e(A,Ym),e(Ym,Oee),e(Oee,bWe),e(Ym,vWe),e(Ym,Ek),e(Ek,FWe),e(Ym,TWe),e(A,MWe),e(A,Km),e(Km,Vee),e(Vee,EWe),e(Km,CWe),e(Km,Ck),e(Ck,wWe),e(Km,AWe),e(A,yWe),e(A,Zm),e(Zm,Xee),e(Xee,LWe),e(Zm,xWe),e(Zm,wk),e(wk,$We),e(Zm,kWe),e(A,SWe),e(A,eg),e(eg,zee),e(zee,RWe),e(eg,BWe),e(eg,Ak),e(Ak,PWe),e(eg,IWe),e(A,qWe),e(A,og),e(og,Qee),e(Qee,NWe),e(og,jWe),e(og,yk),e(yk,DWe),e(og,GWe),e(A,OWe),e(A,rg),e(rg,Wee),e(Wee,VWe),e(rg,XWe),e(rg,Lk),e(Lk,zWe),e(rg,QWe),e(A,WWe),e(A,tg),e(tg,Hee),e(Hee,HWe),e(tg,UWe),e(tg,xk),e(xk,JWe),e(tg,YWe),e(Fr,KWe),M(ag,Fr,null),e(Mo,ZWe),e(Mo,ng),M(CA,ng,null),e(ng,eHe),e(ng,Uee),e(Uee,oHe),b(f,JRe,_),b(f,fi,_),e(fi,sg),e(sg,Jee),M(wA,Jee,null),e(fi,rHe),e(fi,Yee),e(Yee,tHe),b(f,YRe,_),b(f,Eo,_),M(AA,Eo,null),e(Eo,aHe),e(Eo,yA),e(yA,nHe),e(yA,$k),e($k,sHe),e(yA,lHe),e(Eo,iHe),e(Eo,LA),e(LA,dHe),e(LA,Kee),e(Kee,cHe),e(LA,fHe),e(Eo,mHe),e(Eo,Tr),M(xA,Tr,null),e(Tr,gHe),e(Tr,Zee),e(Zee,hHe),e(Tr,pHe),e(Tr,Fa),e(Fa,uHe),e(Fa,eoe),e(eoe,_He),e(Fa,bHe),e(Fa,ooe),e(ooe,vHe),e(Fa,FHe),e(Fa,roe),e(roe,THe),e(Fa,MHe),e(Tr,EHe),e(Tr,k),e(k,An),e(An,toe),e(toe,CHe),e(An,wHe),e(An,kk),e(kk,AHe),e(An,yHe),e(An,Sk),e(Sk,LHe),e(An,xHe),e(k,$He),e(k,yn),e(yn,aoe),e(aoe,kHe),e(yn,SHe),e(yn,Rk),e(Rk,RHe),e(yn,BHe),e(yn,Bk),e(Bk,PHe),e(yn,IHe),e(k,qHe),e(k,Ln),e(Ln,noe),e(noe,NHe),e(Ln,jHe),e(Ln,Pk),e(Pk,DHe),e(Ln,GHe),e(Ln,Ik),e(Ik,OHe),e(Ln,VHe),e(k,XHe),e(k,lg),e(lg,soe),e(soe,zHe),e(lg,QHe),e(lg,qk),e(qk,WHe),e(lg,HHe),e(k,UHe),e(k,xn),e(xn,loe),e(loe,JHe),e(xn,YHe),e(xn,Nk),e(Nk,KHe),e(xn,ZHe),e(xn,jk),e(jk,eUe),e(xn,oUe),e(k,rUe),e(k,ig),e(ig,ioe),e(ioe,tUe),e(ig,aUe),e(ig,Dk),e(Dk,nUe),e(ig,sUe),e(k,lUe),e(k,dg),e(dg,doe),e(doe,iUe),e(dg,dUe),e(dg,Gk),e(Gk,cUe),e(dg,fUe),e(k,mUe),e(k,cg),e(cg,coe),e(coe,gUe),e(cg,hUe),e(cg,Ok),e(Ok,pUe),e(cg,uUe),e(k,_Ue),e(k,$n),e($n,foe),e(foe,bUe),e($n,vUe),e($n,Vk),e(Vk,FUe),e($n,TUe),e($n,Xk),e(Xk,MUe),e($n,EUe),e(k,CUe),e(k,kn),e(kn,moe),e(moe,wUe),e(kn,AUe),e(kn,zk),e(zk,yUe),e(kn,LUe),e(kn,Qk),e(Qk,xUe),e(kn,$Ue),e(k,kUe),e(k,Sn),e(Sn,goe),e(goe,SUe),e(Sn,RUe),e(Sn,Wk),e(Wk,BUe),e(Sn,PUe),e(Sn,Hk),e(Hk,IUe),e(Sn,qUe),e(k,NUe),e(k,fg),e(fg,hoe),e(hoe,jUe),e(fg,DUe),e(fg,Uk),e(Uk,GUe),e(fg,OUe),e(k,VUe),e(k,mg),e(mg,poe),e(poe,XUe),e(mg,zUe),e(mg,Jk),e(Jk,QUe),e(mg,WUe),e(k,HUe),e(k,Rn),e(Rn,uoe),e(uoe,UUe),e(Rn,JUe),e(Rn,Yk),e(Yk,YUe),e(Rn,KUe),e(Rn,Kk),e(Kk,ZUe),e(Rn,eJe),e(k,oJe),e(k,gg),e(gg,_oe),e(_oe,rJe),e(gg,tJe),e(gg,Zk),e(Zk,aJe),e(gg,nJe),e(k,sJe),e(k,Bn),e(Bn,boe),e(boe,lJe),e(Bn,iJe),e(Bn,eS),e(eS,dJe),e(Bn,cJe),e(Bn,oS),e(oS,fJe),e(Bn,mJe),e(k,gJe),e(k,Pn),e(Pn,voe),e(voe,hJe),e(Pn,pJe),e(Pn,rS),e(rS,uJe),e(Pn,_Je),e(Pn,tS),e(tS,bJe),e(Pn,vJe),e(k,FJe),e(k,In),e(In,Foe),e(Foe,TJe),e(In,MJe),e(In,aS),e(aS,EJe),e(In,CJe),e(In,Toe),e(Toe,wJe),e(In,AJe),e(k,yJe),e(k,hg),e(hg,Moe),e(Moe,LJe),e(hg,xJe),e(hg,nS),e(nS,$Je),e(hg,kJe),e(k,SJe),e(k,qn),e(qn,Eoe),e(Eoe,RJe),e(qn,BJe),e(qn,sS),e(sS,PJe),e(qn,IJe),e(qn,lS),e(lS,qJe),e(qn,NJe),e(k,jJe),e(k,Nn),e(Nn,Coe),e(Coe,DJe),e(Nn,GJe),e(Nn,iS),e(iS,OJe),e(Nn,VJe),e(Nn,dS),e(dS,XJe),e(Nn,zJe),e(k,QJe),e(k,jn),e(jn,woe),e(woe,WJe),e(jn,HJe),e(jn,cS),e(cS,UJe),e(jn,JJe),e(jn,fS),e(fS,YJe),e(jn,KJe),e(k,ZJe),e(k,Dn),e(Dn,Aoe),e(Aoe,eYe),e(Dn,oYe),e(Dn,mS),e(mS,rYe),e(Dn,tYe),e(Dn,gS),e(gS,aYe),e(Dn,nYe),e(k,sYe),e(k,Gn),e(Gn,yoe),e(yoe,lYe),e(Gn,iYe),e(Gn,hS),e(hS,dYe),e(Gn,cYe),e(Gn,pS),e(pS,fYe),e(Gn,mYe),e(k,gYe),e(k,On),e(On,Loe),e(Loe,hYe),e(On,pYe),e(On,uS),e(uS,uYe),e(On,_Ye),e(On,_S),e(_S,bYe),e(On,vYe),e(k,FYe),e(k,pg),e(pg,xoe),e(xoe,TYe),e(pg,MYe),e(pg,bS),e(bS,EYe),e(pg,CYe),e(k,wYe),e(k,Vn),e(Vn,$oe),e($oe,AYe),e(Vn,yYe),e(Vn,vS),e(vS,LYe),e(Vn,xYe),e(Vn,FS),e(FS,$Ye),e(Vn,kYe),e(k,SYe),e(k,ug),e(ug,koe),e(koe,RYe),e(ug,BYe),e(ug,TS),e(TS,PYe),e(ug,IYe),e(k,qYe),e(k,Xn),e(Xn,Soe),e(Soe,NYe),e(Xn,jYe),e(Xn,MS),e(MS,DYe),e(Xn,GYe),e(Xn,ES),e(ES,OYe),e(Xn,VYe),e(k,XYe),e(k,zn),e(zn,Roe),e(Roe,zYe),e(zn,QYe),e(zn,CS),e(CS,WYe),e(zn,HYe),e(zn,wS),e(wS,UYe),e(zn,JYe),e(k,YYe),e(k,Qn),e(Qn,Boe),e(Boe,KYe),e(Qn,ZYe),e(Qn,AS),e(AS,eKe),e(Qn,oKe),e(Qn,yS),e(yS,rKe),e(Qn,tKe),e(k,aKe),e(k,Wn),e(Wn,Poe),e(Poe,nKe),e(Wn,sKe),e(Wn,LS),e(LS,lKe),e(Wn,iKe),e(Wn,xS),e(xS,dKe),e(Wn,cKe),e(k,fKe),e(k,Hn),e(Hn,Ioe),e(Ioe,mKe),e(Hn,gKe),e(Hn,$S),e($S,hKe),e(Hn,pKe),e(Hn,kS),e(kS,uKe),e(Hn,_Ke),e(k,bKe),e(k,_g),e(_g,qoe),e(qoe,vKe),e(_g,FKe),e(_g,SS),e(SS,TKe),e(_g,MKe),e(k,EKe),e(k,Un),e(Un,Noe),e(Noe,CKe),e(Un,wKe),e(Un,RS),e(RS,AKe),e(Un,yKe),e(Un,BS),e(BS,LKe),e(Un,xKe),e(k,$Ke),e(k,Jn),e(Jn,joe),e(joe,kKe),e(Jn,SKe),e(Jn,PS),e(PS,RKe),e(Jn,BKe),e(Jn,IS),e(IS,PKe),e(Jn,IKe),e(k,qKe),e(k,Yn),e(Yn,Doe),e(Doe,NKe),e(Yn,jKe),e(Yn,qS),e(qS,DKe),e(Yn,GKe),e(Yn,NS),e(NS,OKe),e(Yn,VKe),e(k,XKe),e(k,Kn),e(Kn,Goe),e(Goe,zKe),e(Kn,QKe),e(Kn,jS),e(jS,WKe),e(Kn,HKe),e(Kn,DS),e(DS,UKe),e(Kn,JKe),e(k,YKe),e(k,Zn),e(Zn,Ooe),e(Ooe,KKe),e(Zn,ZKe),e(Zn,GS),e(GS,eZe),e(Zn,oZe),e(Zn,OS),e(OS,rZe),e(Zn,tZe),e(k,aZe),e(k,es),e(es,Voe),e(Voe,nZe),e(es,sZe),e(es,VS),e(VS,lZe),e(es,iZe),e(es,XS),e(XS,dZe),e(es,cZe),e(k,fZe),e(k,bg),e(bg,Xoe),e(Xoe,mZe),e(bg,gZe),e(bg,zS),e(zS,hZe),e(bg,pZe),e(k,uZe),e(k,os),e(os,zoe),e(zoe,_Ze),e(os,bZe),e(os,QS),e(QS,vZe),e(os,FZe),e(os,WS),e(WS,TZe),e(os,MZe),e(k,EZe),e(k,vg),e(vg,Qoe),e(Qoe,CZe),e(vg,wZe),e(vg,HS),e(HS,AZe),e(vg,yZe),e(k,LZe),e(k,Fg),e(Fg,Woe),e(Woe,xZe),e(Fg,$Ze),e(Fg,US),e(US,kZe),e(Fg,SZe),e(k,RZe),e(k,rs),e(rs,Hoe),e(Hoe,BZe),e(rs,PZe),e(rs,JS),e(JS,IZe),e(rs,qZe),e(rs,YS),e(YS,NZe),e(rs,jZe),e(k,DZe),e(k,ts),e(ts,Uoe),e(Uoe,GZe),e(ts,OZe),e(ts,KS),e(KS,VZe),e(ts,XZe),e(ts,ZS),e(ZS,zZe),e(ts,QZe),e(k,WZe),e(k,as),e(as,Joe),e(Joe,HZe),e(as,UZe),e(as,eR),e(eR,JZe),e(as,YZe),e(as,oR),e(oR,KZe),e(as,ZZe),e(k,eeo),e(k,Tg),e(Tg,Yoe),e(Yoe,oeo),e(Tg,reo),e(Tg,rR),e(rR,teo),e(Tg,aeo),e(k,neo),e(k,ns),e(ns,Koe),e(Koe,seo),e(ns,leo),e(ns,tR),e(tR,ieo),e(ns,deo),e(ns,aR),e(aR,ceo),e(ns,feo),e(k,meo),e(k,ss),e(ss,Zoe),e(Zoe,geo),e(ss,heo),e(ss,nR),e(nR,peo),e(ss,ueo),e(ss,sR),e(sR,_eo),e(ss,beo),e(k,veo),e(k,ls),e(ls,ere),e(ere,Feo),e(ls,Teo),e(ls,lR),e(lR,Meo),e(ls,Eeo),e(ls,iR),e(iR,Ceo),e(ls,weo),e(k,Aeo),e(k,is),e(is,ore),e(ore,yeo),e(is,Leo),e(is,dR),e(dR,xeo),e(is,$eo),e(is,cR),e(cR,keo),e(is,Seo),e(k,Reo),e(k,ds),e(ds,rre),e(rre,Beo),e(ds,Peo),e(ds,fR),e(fR,Ieo),e(ds,qeo),e(ds,mR),e(mR,Neo),e(ds,jeo),e(k,Deo),e(k,cs),e(cs,tre),e(tre,Geo),e(cs,Oeo),e(cs,gR),e(gR,Veo),e(cs,Xeo),e(cs,hR),e(hR,zeo),e(cs,Qeo),e(k,Weo),e(k,Mg),e(Mg,are),e(are,Heo),e(Mg,Ueo),e(Mg,pR),e(pR,Jeo),e(Mg,Yeo),e(k,Keo),e(k,Eg),e(Eg,nre),e(nre,Zeo),e(Eg,eoo),e(Eg,uR),e(uR,ooo),e(Eg,roo),e(k,too),e(k,Cg),e(Cg,sre),e(sre,aoo),e(Cg,noo),e(Cg,_R),e(_R,soo),e(Cg,loo),e(k,ioo),e(k,wg),e(wg,lre),e(lre,doo),e(wg,coo),e(wg,bR),e(bR,foo),e(wg,moo),e(k,goo),e(k,fs),e(fs,ire),e(ire,hoo),e(fs,poo),e(fs,vR),e(vR,uoo),e(fs,_oo),e(fs,FR),e(FR,boo),e(fs,voo),e(k,Foo),e(k,Ag),e(Ag,dre),e(dre,Too),e(Ag,Moo),e(Ag,TR),e(TR,Eoo),e(Ag,Coo),e(k,woo),e(k,ms),e(ms,cre),e(cre,Aoo),e(ms,yoo),e(ms,MR),e(MR,Loo),e(ms,xoo),e(ms,ER),e(ER,$oo),e(ms,koo),e(k,Soo),e(k,gs),e(gs,fre),e(fre,Roo),e(gs,Boo),e(gs,CR),e(CR,Poo),e(gs,Ioo),e(gs,wR),e(wR,qoo),e(gs,Noo),e(k,joo),e(k,hs),e(hs,mre),e(mre,Doo),e(hs,Goo),e(hs,AR),e(AR,Ooo),e(hs,Voo),e(hs,yR),e(yR,Xoo),e(hs,zoo),e(k,Qoo),e(k,ps),e(ps,gre),e(gre,Woo),e(ps,Hoo),e(ps,LR),e(LR,Uoo),e(ps,Joo),e(ps,xR),e(xR,Yoo),e(ps,Koo),e(k,Zoo),e(k,us),e(us,hre),e(hre,ero),e(us,oro),e(us,$R),e($R,rro),e(us,tro),e(us,kR),e(kR,aro),e(us,nro),e(k,sro),e(k,_s),e(_s,pre),e(pre,lro),e(_s,iro),e(_s,SR),e(SR,dro),e(_s,cro),e(_s,RR),e(RR,fro),e(_s,mro),e(k,gro),e(k,yg),e(yg,ure),e(ure,hro),e(yg,pro),e(yg,BR),e(BR,uro),e(yg,_ro),e(k,bro),e(k,Lg),e(Lg,_re),e(_re,vro),e(Lg,Fro),e(Lg,PR),e(PR,Tro),e(Lg,Mro),e(k,Ero),e(k,bs),e(bs,bre),e(bre,Cro),e(bs,wro),e(bs,IR),e(IR,Aro),e(bs,yro),e(bs,qR),e(qR,Lro),e(bs,xro),e(k,$ro),e(k,vs),e(vs,vre),e(vre,kro),e(vs,Sro),e(vs,NR),e(NR,Rro),e(vs,Bro),e(vs,jR),e(jR,Pro),e(vs,Iro),e(k,qro),e(k,Fs),e(Fs,Fre),e(Fre,Nro),e(Fs,jro),e(Fs,DR),e(DR,Dro),e(Fs,Gro),e(Fs,GR),e(GR,Oro),e(Fs,Vro),e(k,Xro),e(k,xg),e(xg,Tre),e(Tre,zro),e(xg,Qro),e(xg,OR),e(OR,Wro),e(xg,Hro),e(k,Uro),e(k,$g),e($g,Mre),e(Mre,Jro),e($g,Yro),e($g,VR),e(VR,Kro),e($g,Zro),e(k,eto),e(k,kg),e(kg,Ere),e(Ere,oto),e(kg,rto),e(kg,XR),e(XR,tto),e(kg,ato),e(k,nto),e(k,Ts),e(Ts,Cre),e(Cre,sto),e(Ts,lto),e(Ts,zR),e(zR,ito),e(Ts,dto),e(Ts,QR),e(QR,cto),e(Ts,fto),e(k,mto),e(k,Sg),e(Sg,wre),e(wre,gto),e(Sg,hto),e(Sg,WR),e(WR,pto),e(Sg,uto),e(k,_to),e(k,Rg),e(Rg,Are),e(Are,bto),e(Rg,vto),e(Rg,HR),e(HR,Fto),e(Rg,Tto),e(k,Mto),e(k,Ms),e(Ms,yre),e(yre,Eto),e(Ms,Cto),e(Ms,UR),e(UR,wto),e(Ms,Ato),e(Ms,JR),e(JR,yto),e(Ms,Lto),e(k,xto),e(k,Bg),e(Bg,Lre),e(Lre,$to),e(Bg,kto),e(Bg,YR),e(YR,Sto),e(Bg,Rto),e(k,Bto),e(k,Pg),e(Pg,xre),e(xre,Pto),e(Pg,Ito),e(Pg,KR),e(KR,qto),e(Pg,Nto),e(k,jto),e(k,Es),e(Es,$re),e($re,Dto),e(Es,Gto),e(Es,ZR),e(ZR,Oto),e(Es,Vto),e(Es,eB),e(eB,Xto),e(Es,zto),e(k,Qto),e(k,Cs),e(Cs,kre),e(kre,Wto),e(Cs,Hto),e(Cs,oB),e(oB,Uto),e(Cs,Jto),e(Cs,rB),e(rB,Yto),e(Cs,Kto),e(k,Zto),e(k,ws),e(ws,Sre),e(Sre,eao),e(ws,oao),e(ws,tB),e(tB,rao),e(ws,tao),e(ws,aB),e(aB,aao),e(ws,nao),e(k,sao),e(k,As),e(As,Rre),e(Rre,lao),e(As,iao),e(As,nB),e(nB,dao),e(As,cao),e(As,sB),e(sB,fao),e(As,mao),e(Tr,gao),M(Ig,Tr,null),e(Eo,hao),e(Eo,qg),M($A,qg,null),e(qg,pao),e(qg,Bre),e(Bre,uao),b(f,KRe,_),b(f,mi,_),e(mi,Ng),e(Ng,Pre),M(kA,Pre,null),e(mi,_ao),e(mi,Ire),e(Ire,bao),b(f,ZRe,_),b(f,Co,_),M(SA,Co,null),e(Co,vao),e(Co,RA),e(RA,Fao),e(RA,lB),e(lB,Tao),e(RA,Mao),e(Co,Eao),e(Co,BA),e(BA,Cao),e(BA,qre),e(qre,wao),e(BA,Aao),e(Co,yao),e(Co,ze),M(PA,ze,null),e(ze,Lao),e(ze,Nre),e(Nre,xao),e(ze,$ao),e(ze,Ta),e(Ta,kao),e(Ta,jre),e(jre,Sao),e(Ta,Rao),e(Ta,Dre),e(Dre,Bao),e(Ta,Pao),e(Ta,Gre),e(Gre,Iao),e(Ta,qao),e(ze,Nao),e(ze,te),e(te,jg),e(jg,Ore),e(Ore,jao),e(jg,Dao),e(jg,iB),e(iB,Gao),e(jg,Oao),e(te,Vao),e(te,Dg),e(Dg,Vre),e(Vre,Xao),e(Dg,zao),e(Dg,dB),e(dB,Qao),e(Dg,Wao),e(te,Hao),e(te,Gg),e(Gg,Xre),e(Xre,Uao),e(Gg,Jao),e(Gg,cB),e(cB,Yao),e(Gg,Kao),e(te,Zao),e(te,Og),e(Og,zre),e(zre,eno),e(Og,ono),e(Og,fB),e(fB,rno),e(Og,tno),e(te,ano),e(te,Vg),e(Vg,Qre),e(Qre,nno),e(Vg,sno),e(Vg,mB),e(mB,lno),e(Vg,ino),e(te,dno),e(te,Xg),e(Xg,Wre),e(Wre,cno),e(Xg,fno),e(Xg,gB),e(gB,mno),e(Xg,gno),e(te,hno),e(te,zg),e(zg,Hre),e(Hre,pno),e(zg,uno),e(zg,hB),e(hB,_no),e(zg,bno),e(te,vno),e(te,Qg),e(Qg,Ure),e(Ure,Fno),e(Qg,Tno),e(Qg,pB),e(pB,Mno),e(Qg,Eno),e(te,Cno),e(te,Wg),e(Wg,Jre),e(Jre,wno),e(Wg,Ano),e(Wg,uB),e(uB,yno),e(Wg,Lno),e(te,xno),e(te,Hg),e(Hg,Yre),e(Yre,$no),e(Hg,kno),e(Hg,_B),e(_B,Sno),e(Hg,Rno),e(te,Bno),e(te,Ug),e(Ug,Kre),e(Kre,Pno),e(Ug,Ino),e(Ug,bB),e(bB,qno),e(Ug,Nno),e(te,jno),e(te,Jg),e(Jg,Zre),e(Zre,Dno),e(Jg,Gno),e(Jg,vB),e(vB,Ono),e(Jg,Vno),e(te,Xno),e(te,Yg),e(Yg,ete),e(ete,zno),e(Yg,Qno),e(Yg,FB),e(FB,Wno),e(Yg,Hno),e(te,Uno),e(te,Kg),e(Kg,ote),e(ote,Jno),e(Kg,Yno),e(Kg,TB),e(TB,Kno),e(Kg,Zno),e(te,eso),e(te,Zg),e(Zg,rte),e(rte,oso),e(Zg,rso),e(Zg,MB),e(MB,tso),e(Zg,aso),e(te,nso),e(te,eh),e(eh,tte),e(tte,sso),e(eh,lso),e(eh,EB),e(EB,iso),e(eh,dso),e(te,cso),e(te,oh),e(oh,ate),e(ate,fso),e(oh,mso),e(oh,CB),e(CB,gso),e(oh,hso),e(te,pso),e(te,rh),e(rh,nte),e(nte,uso),e(rh,_so),e(rh,wB),e(wB,bso),e(rh,vso),e(te,Fso),e(te,th),e(th,ste),e(ste,Tso),e(th,Mso),e(th,AB),e(AB,Eso),e(th,Cso),e(te,wso),e(te,ah),e(ah,lte),e(lte,Aso),e(ah,yso),e(ah,yB),e(yB,Lso),e(ah,xso),e(te,$so),e(te,nh),e(nh,ite),e(ite,kso),e(nh,Sso),e(nh,LB),e(LB,Rso),e(nh,Bso),e(te,Pso),e(te,sh),e(sh,dte),e(dte,Iso),e(sh,qso),e(sh,xB),e(xB,Nso),e(sh,jso),e(te,Dso),e(te,lh),e(lh,cte),e(cte,Gso),e(lh,Oso),e(lh,$B),e($B,Vso),e(lh,Xso),e(te,zso),e(te,ih),e(ih,fte),e(fte,Qso),e(ih,Wso),e(ih,kB),e(kB,Hso),e(ih,Uso),e(ze,Jso),M(dh,ze,null),e(ze,Yso),M(ch,ze,null),e(Co,Kso),e(Co,fh),M(IA,fh,null),e(fh,Zso),e(fh,mte),e(mte,elo),b(f,eBe,_),b(f,gi,_),e(gi,mh),e(mh,gte),M(qA,gte,null),e(gi,olo),e(gi,hte),e(hte,rlo),b(f,oBe,_),b(f,wo,_),M(NA,wo,null),e(wo,tlo),e(wo,jA),e(jA,alo),e(jA,SB),e(SB,nlo),e(jA,slo),e(wo,llo),e(wo,DA),e(DA,ilo),e(DA,pte),e(pte,dlo),e(DA,clo),e(wo,flo),e(wo,Qe),M(GA,Qe,null),e(Qe,mlo),e(Qe,ute),e(ute,glo),e(Qe,hlo),e(Qe,hi),e(hi,plo),e(hi,_te),e(_te,ulo),e(hi,_lo),e(hi,bte),e(bte,blo),e(hi,vlo),e(Qe,Flo),e(Qe,be),e(be,gh),e(gh,vte),e(vte,Tlo),e(gh,Mlo),e(gh,RB),e(RB,Elo),e(gh,Clo),e(be,wlo),e(be,hh),e(hh,Fte),e(Fte,Alo),e(hh,ylo),e(hh,BB),e(BB,Llo),e(hh,xlo),e(be,$lo),e(be,ph),e(ph,Tte),e(Tte,klo),e(ph,Slo),e(ph,PB),e(PB,Rlo),e(ph,Blo),e(be,Plo),e(be,uh),e(uh,Mte),e(Mte,Ilo),e(uh,qlo),e(uh,IB),e(IB,Nlo),e(uh,jlo),e(be,Dlo),e(be,_h),e(_h,Ete),e(Ete,Glo),e(_h,Olo),e(_h,qB),e(qB,Vlo),e(_h,Xlo),e(be,zlo),e(be,bh),e(bh,Cte),e(Cte,Qlo),e(bh,Wlo),e(bh,NB),e(NB,Hlo),e(bh,Ulo),e(be,Jlo),e(be,vh),e(vh,wte),e(wte,Ylo),e(vh,Klo),e(vh,jB),e(jB,Zlo),e(vh,eio),e(be,oio),e(be,Fh),e(Fh,Ate),e(Ate,rio),e(Fh,tio),e(Fh,DB),e(DB,aio),e(Fh,nio),e(be,sio),e(be,Th),e(Th,yte),e(yte,lio),e(Th,iio),e(Th,GB),e(GB,dio),e(Th,cio),e(be,fio),e(be,Mh),e(Mh,Lte),e(Lte,mio),e(Mh,gio),e(Mh,OB),e(OB,hio),e(Mh,pio),e(be,uio),e(be,Eh),e(Eh,xte),e(xte,_io),e(Eh,bio),e(Eh,VB),e(VB,vio),e(Eh,Fio),e(be,Tio),e(be,Ch),e(Ch,$te),e($te,Mio),e(Ch,Eio),e(Ch,XB),e(XB,Cio),e(Ch,wio),e(be,Aio),e(be,wh),e(wh,kte),e(kte,yio),e(wh,Lio),e(wh,zB),e(zB,xio),e(wh,$io),e(be,kio),e(be,Ah),e(Ah,Ste),e(Ste,Sio),e(Ah,Rio),e(Ah,QB),e(QB,Bio),e(Ah,Pio),e(Qe,Iio),M(yh,Qe,null),e(Qe,qio),M(Lh,Qe,null),e(wo,Nio),e(wo,xh),M(OA,xh,null),e(xh,jio),e(xh,Rte),e(Rte,Dio),b(f,rBe,_),b(f,pi,_),e(pi,$h),e($h,Bte),M(VA,Bte,null),e(pi,Gio),e(pi,Pte),e(Pte,Oio),b(f,tBe,_),b(f,Ao,_),M(XA,Ao,null),e(Ao,Vio),e(Ao,ui),e(ui,Xio),e(ui,WB),e(WB,zio),e(ui,Qio),e(ui,HB),e(HB,Wio),e(ui,Hio),e(Ao,Uio),e(Ao,zA),e(zA,Jio),e(zA,Ite),e(Ite,Yio),e(zA,Kio),e(Ao,Zio),e(Ao,Kr),M(QA,Kr,null),e(Kr,edo),e(Kr,qte),e(qte,odo),e(Kr,rdo),e(Kr,_i),e(_i,tdo),e(_i,Nte),e(Nte,ado),e(_i,ndo),e(_i,UB),e(UB,sdo),e(_i,ldo),e(Kr,ido),M(kh,Kr,null),e(Ao,ddo),e(Ao,We),M(WA,We,null),e(We,cdo),e(We,jte),e(jte,fdo),e(We,mdo),e(We,Ma),e(Ma,gdo),e(Ma,Dte),e(Dte,hdo),e(Ma,pdo),e(Ma,Gte),e(Gte,udo),e(Ma,_do),e(Ma,Ote),e(Ote,bdo),e(Ma,vdo),e(We,Fdo),e(We,x),e(x,Sh),e(Sh,Vte),e(Vte,Tdo),e(Sh,Mdo),e(Sh,JB),e(JB,Edo),e(Sh,Cdo),e(x,wdo),e(x,Rh),e(Rh,Xte),e(Xte,Ado),e(Rh,ydo),e(Rh,YB),e(YB,Ldo),e(Rh,xdo),e(x,$do),e(x,Bh),e(Bh,zte),e(zte,kdo),e(Bh,Sdo),e(Bh,KB),e(KB,Rdo),e(Bh,Bdo),e(x,Pdo),e(x,Ph),e(Ph,Qte),e(Qte,Ido),e(Ph,qdo),e(Ph,ZB),e(ZB,Ndo),e(Ph,jdo),e(x,Ddo),e(x,Ih),e(Ih,Wte),e(Wte,Gdo),e(Ih,Odo),e(Ih,eP),e(eP,Vdo),e(Ih,Xdo),e(x,zdo),e(x,qh),e(qh,Hte),e(Hte,Qdo),e(qh,Wdo),e(qh,oP),e(oP,Hdo),e(qh,Udo),e(x,Jdo),e(x,Nh),e(Nh,Ute),e(Ute,Ydo),e(Nh,Kdo),e(Nh,rP),e(rP,Zdo),e(Nh,eco),e(x,oco),e(x,jh),e(jh,Jte),e(Jte,rco),e(jh,tco),e(jh,tP),e(tP,aco),e(jh,nco),e(x,sco),e(x,Dh),e(Dh,Yte),e(Yte,lco),e(Dh,ico),e(Dh,aP),e(aP,dco),e(Dh,cco),e(x,fco),e(x,Gh),e(Gh,Kte),e(Kte,mco),e(Gh,gco),e(Gh,nP),e(nP,hco),e(Gh,pco),e(x,uco),e(x,Oh),e(Oh,Zte),e(Zte,_co),e(Oh,bco),e(Oh,sP),e(sP,vco),e(Oh,Fco),e(x,Tco),e(x,Vh),e(Vh,eae),e(eae,Mco),e(Vh,Eco),e(Vh,lP),e(lP,Cco),e(Vh,wco),e(x,Aco),e(x,Xh),e(Xh,oae),e(oae,yco),e(Xh,Lco),e(Xh,iP),e(iP,xco),e(Xh,$co),e(x,kco),e(x,zh),e(zh,rae),e(rae,Sco),e(zh,Rco),e(zh,dP),e(dP,Bco),e(zh,Pco),e(x,Ico),e(x,Qh),e(Qh,tae),e(tae,qco),e(Qh,Nco),e(Qh,cP),e(cP,jco),e(Qh,Dco),e(x,Gco),e(x,Wh),e(Wh,aae),e(aae,Oco),e(Wh,Vco),e(Wh,fP),e(fP,Xco),e(Wh,zco),e(x,Qco),e(x,Hh),e(Hh,nae),e(nae,Wco),e(Hh,Hco),e(Hh,mP),e(mP,Uco),e(Hh,Jco),e(x,Yco),e(x,Uh),e(Uh,sae),e(sae,Kco),e(Uh,Zco),e(Uh,gP),e(gP,efo),e(Uh,ofo),e(x,rfo),e(x,Jh),e(Jh,lae),e(lae,tfo),e(Jh,afo),e(Jh,hP),e(hP,nfo),e(Jh,sfo),e(x,lfo),e(x,Yh),e(Yh,iae),e(iae,ifo),e(Yh,dfo),e(Yh,pP),e(pP,cfo),e(Yh,ffo),e(x,mfo),e(x,Kh),e(Kh,dae),e(dae,gfo),e(Kh,hfo),e(Kh,uP),e(uP,pfo),e(Kh,ufo),e(x,_fo),e(x,Zh),e(Zh,cae),e(cae,bfo),e(Zh,vfo),e(Zh,_P),e(_P,Ffo),e(Zh,Tfo),e(x,Mfo),e(x,ep),e(ep,fae),e(fae,Efo),e(ep,Cfo),e(ep,bP),e(bP,wfo),e(ep,Afo),e(x,yfo),e(x,op),e(op,mae),e(mae,Lfo),e(op,xfo),e(op,vP),e(vP,$fo),e(op,kfo),e(x,Sfo),e(x,rp),e(rp,gae),e(gae,Rfo),e(rp,Bfo),e(rp,FP),e(FP,Pfo),e(rp,Ifo),e(x,qfo),e(x,tp),e(tp,hae),e(hae,Nfo),e(tp,jfo),e(tp,TP),e(TP,Dfo),e(tp,Gfo),e(x,Ofo),e(x,ap),e(ap,pae),e(pae,Vfo),e(ap,Xfo),e(ap,MP),e(MP,zfo),e(ap,Qfo),e(x,Wfo),e(x,np),e(np,uae),e(uae,Hfo),e(np,Ufo),e(np,EP),e(EP,Jfo),e(np,Yfo),e(x,Kfo),e(x,sp),e(sp,_ae),e(_ae,Zfo),e(sp,emo),e(sp,CP),e(CP,omo),e(sp,rmo),e(x,tmo),e(x,lp),e(lp,bae),e(bae,amo),e(lp,nmo),e(lp,wP),e(wP,smo),e(lp,lmo),e(x,imo),e(x,ys),e(ys,vae),e(vae,dmo),e(ys,cmo),e(ys,AP),e(AP,fmo),e(ys,mmo),e(ys,yP),e(yP,gmo),e(ys,hmo),e(x,pmo),e(x,ip),e(ip,Fae),e(Fae,umo),e(ip,_mo),e(ip,LP),e(LP,bmo),e(ip,vmo),e(x,Fmo),e(x,dp),e(dp,Tae),e(Tae,Tmo),e(dp,Mmo),e(dp,xP),e(xP,Emo),e(dp,Cmo),e(x,wmo),e(x,cp),e(cp,Mae),e(Mae,Amo),e(cp,ymo),e(cp,$P),e($P,Lmo),e(cp,xmo),e(x,$mo),e(x,fp),e(fp,Eae),e(Eae,kmo),e(fp,Smo),e(fp,kP),e(kP,Rmo),e(fp,Bmo),e(x,Pmo),e(x,mp),e(mp,Cae),e(Cae,Imo),e(mp,qmo),e(mp,SP),e(SP,Nmo),e(mp,jmo),e(x,Dmo),e(x,gp),e(gp,wae),e(wae,Gmo),e(gp,Omo),e(gp,RP),e(RP,Vmo),e(gp,Xmo),e(x,zmo),e(x,hp),e(hp,Aae),e(Aae,Qmo),e(hp,Wmo),e(hp,BP),e(BP,Hmo),e(hp,Umo),e(x,Jmo),e(x,pp),e(pp,yae),e(yae,Ymo),e(pp,Kmo),e(pp,PP),e(PP,Zmo),e(pp,ego),e(x,ogo),e(x,up),e(up,Lae),e(Lae,rgo),e(up,tgo),e(up,IP),e(IP,ago),e(up,ngo),e(x,sgo),e(x,_p),e(_p,xae),e(xae,lgo),e(_p,igo),e(_p,qP),e(qP,dgo),e(_p,cgo),e(x,fgo),e(x,bp),e(bp,$ae),e($ae,mgo),e(bp,ggo),e(bp,NP),e(NP,hgo),e(bp,pgo),e(x,ugo),e(x,vp),e(vp,kae),e(kae,_go),e(vp,bgo),e(vp,jP),e(jP,vgo),e(vp,Fgo),e(x,Tgo),e(x,Fp),e(Fp,Sae),e(Sae,Mgo),e(Fp,Ego),e(Fp,DP),e(DP,Cgo),e(Fp,wgo),e(x,Ago),e(x,Tp),e(Tp,Rae),e(Rae,ygo),e(Tp,Lgo),e(Tp,GP),e(GP,xgo),e(Tp,$go),e(x,kgo),e(x,Mp),e(Mp,Bae),e(Bae,Sgo),e(Mp,Rgo),e(Mp,OP),e(OP,Bgo),e(Mp,Pgo),e(x,Igo),e(x,Ep),e(Ep,Pae),e(Pae,qgo),e(Ep,Ngo),e(Ep,VP),e(VP,jgo),e(Ep,Dgo),e(x,Ggo),e(x,Cp),e(Cp,Iae),e(Iae,Ogo),e(Cp,Vgo),e(Cp,XP),e(XP,Xgo),e(Cp,zgo),e(x,Qgo),e(x,wp),e(wp,qae),e(qae,Wgo),e(wp,Hgo),e(wp,zP),e(zP,Ugo),e(wp,Jgo),e(x,Ygo),e(x,Ap),e(Ap,Nae),e(Nae,Kgo),e(Ap,Zgo),e(Ap,QP),e(QP,eho),e(Ap,oho),e(x,rho),e(x,yp),e(yp,jae),e(jae,tho),e(yp,aho),e(yp,WP),e(WP,nho),e(yp,sho),e(x,lho),e(x,Lp),e(Lp,Dae),e(Dae,iho),e(Lp,dho),e(Lp,HP),e(HP,cho),e(Lp,fho),e(x,mho),e(x,xp),e(xp,Gae),e(Gae,gho),e(xp,hho),e(xp,UP),e(UP,pho),e(xp,uho),e(x,_ho),e(x,$p),e($p,Oae),e(Oae,bho),e($p,vho),e($p,JP),e(JP,Fho),e($p,Tho),e(x,Mho),e(x,kp),e(kp,Vae),e(Vae,Eho),e(kp,Cho),e(kp,YP),e(YP,who),e(kp,Aho),e(x,yho),e(x,Sp),e(Sp,Xae),e(Xae,Lho),e(Sp,xho),e(Sp,KP),e(KP,$ho),e(Sp,kho),e(x,Sho),e(x,Rp),e(Rp,zae),e(zae,Rho),e(Rp,Bho),e(Rp,ZP),e(ZP,Pho),e(Rp,Iho),e(x,qho),e(x,Bp),e(Bp,Qae),e(Qae,Nho),e(Bp,jho),e(Bp,eI),e(eI,Dho),e(Bp,Gho),e(x,Oho),e(x,Pp),e(Pp,Wae),e(Wae,Vho),e(Pp,Xho),e(Pp,oI),e(oI,zho),e(Pp,Qho),e(x,Who),e(x,Ip),e(Ip,Hae),e(Hae,Hho),e(Ip,Uho),e(Ip,rI),e(rI,Jho),e(Ip,Yho),e(x,Kho),e(x,qp),e(qp,Uae),e(Uae,Zho),e(qp,epo),e(qp,tI),e(tI,opo),e(qp,rpo),e(x,tpo),e(x,Np),e(Np,Jae),e(Jae,apo),e(Np,npo),e(Np,aI),e(aI,spo),e(Np,lpo),e(x,ipo),e(x,jp),e(jp,Yae),e(Yae,dpo),e(jp,cpo),e(jp,nI),e(nI,fpo),e(jp,mpo),e(x,gpo),e(x,Dp),e(Dp,Kae),e(Kae,hpo),e(Dp,ppo),e(Dp,sI),e(sI,upo),e(Dp,_po),e(x,bpo),e(x,Gp),e(Gp,Zae),e(Zae,vpo),e(Gp,Fpo),e(Gp,lI),e(lI,Tpo),e(Gp,Mpo),e(x,Epo),e(x,Op),e(Op,ene),e(ene,Cpo),e(Op,wpo),e(Op,iI),e(iI,Apo),e(Op,ypo),e(x,Lpo),e(x,Vp),e(Vp,one),e(one,xpo),e(Vp,$po),e(Vp,dI),e(dI,kpo),e(Vp,Spo),e(x,Rpo),e(x,Xp),e(Xp,rne),e(rne,Bpo),e(Xp,Ppo),e(Xp,cI),e(cI,Ipo),e(Xp,qpo),e(x,Npo),e(x,zp),e(zp,tne),e(tne,jpo),e(zp,Dpo),e(zp,fI),e(fI,Gpo),e(zp,Opo),e(x,Vpo),e(x,Qp),e(Qp,ane),e(ane,Xpo),e(Qp,zpo),e(Qp,mI),e(mI,Qpo),e(Qp,Wpo),e(x,Hpo),e(x,Wp),e(Wp,nne),e(nne,Upo),e(Wp,Jpo),e(Wp,gI),e(gI,Ypo),e(Wp,Kpo),e(x,Zpo),e(x,Hp),e(Hp,sne),e(sne,euo),e(Hp,ouo),e(Hp,hI),e(hI,ruo),e(Hp,tuo),e(x,auo),e(x,Up),e(Up,lne),e(lne,nuo),e(Up,suo),e(Up,pI),e(pI,luo),e(Up,iuo),e(x,duo),e(x,Jp),e(Jp,ine),e(ine,cuo),e(Jp,fuo),e(Jp,uI),e(uI,muo),e(Jp,guo),e(x,huo),e(x,Yp),e(Yp,dne),e(dne,puo),e(Yp,uuo),e(Yp,_I),e(_I,_uo),e(Yp,buo),e(x,vuo),e(x,Kp),e(Kp,cne),e(cne,Fuo),e(Kp,Tuo),e(Kp,bI),e(bI,Muo),e(Kp,Euo),e(x,Cuo),e(x,Zp),e(Zp,fne),e(fne,wuo),e(Zp,Auo),e(Zp,vI),e(vI,yuo),e(Zp,Luo),e(x,xuo),e(x,eu),e(eu,mne),e(mne,$uo),e(eu,kuo),e(eu,FI),e(FI,Suo),e(eu,Ruo),e(x,Buo),e(x,ou),e(ou,gne),e(gne,Puo),e(ou,Iuo),e(ou,TI),e(TI,quo),e(ou,Nuo),e(x,juo),e(x,ru),e(ru,hne),e(hne,Duo),e(ru,Guo),e(ru,MI),e(MI,Ouo),e(ru,Vuo),e(x,Xuo),e(x,tu),e(tu,pne),e(pne,zuo),e(tu,Quo),e(tu,EI),e(EI,Wuo),e(tu,Huo),e(x,Uuo),e(x,au),e(au,une),e(une,Juo),e(au,Yuo),e(au,CI),e(CI,Kuo),e(au,Zuo),e(x,e_o),e(x,nu),e(nu,_ne),e(_ne,o_o),e(nu,r_o),e(nu,wI),e(wI,t_o),e(nu,a_o),e(x,n_o),e(x,su),e(su,bne),e(bne,s_o),e(su,l_o),e(su,AI),e(AI,i_o),e(su,d_o),e(x,c_o),e(x,lu),e(lu,vne),e(vne,f_o),e(lu,m_o),e(lu,yI),e(yI,g_o),e(lu,h_o),e(x,p_o),e(x,iu),e(iu,Fne),e(Fne,u_o),e(iu,__o),e(iu,LI),e(LI,b_o),e(iu,v_o),e(x,F_o),e(x,du),e(du,Tne),e(Tne,T_o),e(du,M_o),e(du,xI),e(xI,E_o),e(du,C_o),e(x,w_o),e(x,cu),e(cu,Mne),e(Mne,A_o),e(cu,y_o),e(cu,$I),e($I,L_o),e(cu,x_o),e(x,$_o),e(x,fu),e(fu,Ene),e(Ene,k_o),e(fu,S_o),e(fu,kI),e(kI,R_o),e(fu,B_o),e(x,P_o),e(x,mu),e(mu,Cne),e(Cne,I_o),e(mu,q_o),e(mu,SI),e(SI,N_o),e(mu,j_o),e(x,D_o),e(x,gu),e(gu,wne),e(wne,G_o),e(gu,O_o),e(gu,RI),e(RI,V_o),e(gu,X_o),e(x,z_o),e(x,hu),e(hu,Ane),e(Ane,Q_o),e(hu,W_o),e(hu,BI),e(BI,H_o),e(hu,U_o),e(x,J_o),e(x,pu),e(pu,yne),e(yne,Y_o),e(pu,K_o),e(pu,PI),e(PI,Z_o),e(pu,e2o),e(x,o2o),e(x,uu),e(uu,Lne),e(Lne,r2o),e(uu,t2o),e(uu,II),e(II,a2o),e(uu,n2o),e(x,s2o),e(x,_u),e(_u,xne),e(xne,l2o),e(_u,i2o),e(_u,qI),e(qI,d2o),e(_u,c2o),e(We,f2o),e(We,bu),e(bu,m2o),e(bu,$ne),e($ne,g2o),e(bu,h2o),e(bu,kne),e(kne,p2o),e(We,u2o),M(vu,We,null),b(f,aBe,_),b(f,bi,_),e(bi,Fu),e(Fu,Sne),M(HA,Sne,null),e(bi,_2o),e(bi,Rne),e(Rne,b2o),b(f,nBe,_),b(f,yo,_),M(UA,yo,null),e(yo,v2o),e(yo,vi),e(vi,F2o),e(vi,NI),e(NI,T2o),e(vi,M2o),e(vi,jI),e(jI,E2o),e(vi,C2o),e(yo,w2o),e(yo,JA),e(JA,A2o),e(JA,Bne),e(Bne,y2o),e(JA,L2o),e(yo,x2o),e(yo,Zr),M(YA,Zr,null),e(Zr,$2o),e(Zr,Pne),e(Pne,k2o),e(Zr,S2o),e(Zr,Fi),e(Fi,R2o),e(Fi,Ine),e(Ine,B2o),e(Fi,P2o),e(Fi,DI),e(DI,I2o),e(Fi,q2o),e(Zr,N2o),M(Tu,Zr,null),e(yo,j2o),e(yo,He),M(KA,He,null),e(He,D2o),e(He,qne),e(qne,G2o),e(He,O2o),e(He,Ea),e(Ea,V2o),e(Ea,Nne),e(Nne,X2o),e(Ea,z2o),e(Ea,jne),e(jne,Q2o),e(Ea,W2o),e(Ea,Dne),e(Dne,H2o),e(Ea,U2o),e(He,J2o),e(He,G),e(G,Mu),e(Mu,Gne),e(Gne,Y2o),e(Mu,K2o),e(Mu,GI),e(GI,Z2o),e(Mu,e1o),e(G,o1o),e(G,Eu),e(Eu,One),e(One,r1o),e(Eu,t1o),e(Eu,OI),e(OI,a1o),e(Eu,n1o),e(G,s1o),e(G,Cu),e(Cu,Vne),e(Vne,l1o),e(Cu,i1o),e(Cu,VI),e(VI,d1o),e(Cu,c1o),e(G,f1o),e(G,wu),e(wu,Xne),e(Xne,m1o),e(wu,g1o),e(wu,XI),e(XI,h1o),e(wu,p1o),e(G,u1o),e(G,Au),e(Au,zne),e(zne,_1o),e(Au,b1o),e(Au,zI),e(zI,v1o),e(Au,F1o),e(G,T1o),e(G,yu),e(yu,Qne),e(Qne,M1o),e(yu,E1o),e(yu,QI),e(QI,C1o),e(yu,w1o),e(G,A1o),e(G,Lu),e(Lu,Wne),e(Wne,y1o),e(Lu,L1o),e(Lu,WI),e(WI,x1o),e(Lu,$1o),e(G,k1o),e(G,xu),e(xu,Hne),e(Hne,S1o),e(xu,R1o),e(xu,HI),e(HI,B1o),e(xu,P1o),e(G,I1o),e(G,$u),e($u,Une),e(Une,q1o),e($u,N1o),e($u,UI),e(UI,j1o),e($u,D1o),e(G,G1o),e(G,ku),e(ku,Jne),e(Jne,O1o),e(ku,V1o),e(ku,JI),e(JI,X1o),e(ku,z1o),e(G,Q1o),e(G,Su),e(Su,Yne),e(Yne,W1o),e(Su,H1o),e(Su,YI),e(YI,U1o),e(Su,J1o),e(G,Y1o),e(G,Ru),e(Ru,Kne),e(Kne,K1o),e(Ru,Z1o),e(Ru,KI),e(KI,ebo),e(Ru,obo),e(G,rbo),e(G,Bu),e(Bu,Zne),e(Zne,tbo),e(Bu,abo),e(Bu,ZI),e(ZI,nbo),e(Bu,sbo),e(G,lbo),e(G,Pu),e(Pu,ese),e(ese,ibo),e(Pu,dbo),e(Pu,eq),e(eq,cbo),e(Pu,fbo),e(G,mbo),e(G,Iu),e(Iu,ose),e(ose,gbo),e(Iu,hbo),e(Iu,oq),e(oq,pbo),e(Iu,ubo),e(G,_bo),e(G,qu),e(qu,rse),e(rse,bbo),e(qu,vbo),e(qu,rq),e(rq,Fbo),e(qu,Tbo),e(G,Mbo),e(G,Nu),e(Nu,tse),e(tse,Ebo),e(Nu,Cbo),e(Nu,tq),e(tq,wbo),e(Nu,Abo),e(G,ybo),e(G,ju),e(ju,ase),e(ase,Lbo),e(ju,xbo),e(ju,aq),e(aq,$bo),e(ju,kbo),e(G,Sbo),e(G,Du),e(Du,nse),e(nse,Rbo),e(Du,Bbo),e(Du,nq),e(nq,Pbo),e(Du,Ibo),e(G,qbo),e(G,Gu),e(Gu,sse),e(sse,Nbo),e(Gu,jbo),e(Gu,sq),e(sq,Dbo),e(Gu,Gbo),e(G,Obo),e(G,Ou),e(Ou,lse),e(lse,Vbo),e(Ou,Xbo),e(Ou,lq),e(lq,zbo),e(Ou,Qbo),e(G,Wbo),e(G,Vu),e(Vu,ise),e(ise,Hbo),e(Vu,Ubo),e(Vu,iq),e(iq,Jbo),e(Vu,Ybo),e(G,Kbo),e(G,Xu),e(Xu,dse),e(dse,Zbo),e(Xu,e4o),e(Xu,dq),e(dq,o4o),e(Xu,r4o),e(G,t4o),e(G,zu),e(zu,cse),e(cse,a4o),e(zu,n4o),e(zu,cq),e(cq,s4o),e(zu,l4o),e(G,i4o),e(G,Qu),e(Qu,fse),e(fse,d4o),e(Qu,c4o),e(Qu,fq),e(fq,f4o),e(Qu,m4o),e(G,g4o),e(G,Wu),e(Wu,mse),e(mse,h4o),e(Wu,p4o),e(Wu,mq),e(mq,u4o),e(Wu,_4o),e(G,b4o),e(G,Hu),e(Hu,gse),e(gse,v4o),e(Hu,F4o),e(Hu,gq),e(gq,T4o),e(Hu,M4o),e(G,E4o),e(G,Uu),e(Uu,hse),e(hse,C4o),e(Uu,w4o),e(Uu,hq),e(hq,A4o),e(Uu,y4o),e(G,L4o),e(G,Ju),e(Ju,pse),e(pse,x4o),e(Ju,$4o),e(Ju,pq),e(pq,k4o),e(Ju,S4o),e(G,R4o),e(G,Yu),e(Yu,use),e(use,B4o),e(Yu,P4o),e(Yu,uq),e(uq,I4o),e(Yu,q4o),e(G,N4o),e(G,Ku),e(Ku,_se),e(_se,j4o),e(Ku,D4o),e(Ku,_q),e(_q,G4o),e(Ku,O4o),e(G,V4o),e(G,Zu),e(Zu,bse),e(bse,X4o),e(Zu,z4o),e(Zu,bq),e(bq,Q4o),e(Zu,W4o),e(G,H4o),e(G,e_),e(e_,vse),e(vse,U4o),e(e_,J4o),e(e_,vq),e(vq,Y4o),e(e_,K4o),e(G,Z4o),e(G,o_),e(o_,Fse),e(Fse,evo),e(o_,ovo),e(o_,Fq),e(Fq,rvo),e(o_,tvo),e(G,avo),e(G,r_),e(r_,Tse),e(Tse,nvo),e(r_,svo),e(r_,Tq),e(Tq,lvo),e(r_,ivo),e(G,dvo),e(G,t_),e(t_,Mse),e(Mse,cvo),e(t_,fvo),e(t_,Mq),e(Mq,mvo),e(t_,gvo),e(G,hvo),e(G,a_),e(a_,Ese),e(Ese,pvo),e(a_,uvo),e(a_,Eq),e(Eq,_vo),e(a_,bvo),e(G,vvo),e(G,n_),e(n_,Cse),e(Cse,Fvo),e(n_,Tvo),e(n_,Cq),e(Cq,Mvo),e(n_,Evo),e(G,Cvo),e(G,s_),e(s_,wse),e(wse,wvo),e(s_,Avo),e(s_,wq),e(wq,yvo),e(s_,Lvo),e(He,xvo),e(He,l_),e(l_,$vo),e(l_,Ase),e(Ase,kvo),e(l_,Svo),e(l_,yse),e(yse,Rvo),e(He,Bvo),M(i_,He,null),b(f,sBe,_),b(f,Ti,_),e(Ti,d_),e(d_,Lse),M(ZA,Lse,null),e(Ti,Pvo),e(Ti,xse),e(xse,Ivo),b(f,lBe,_),b(f,Lo,_),M(ey,Lo,null),e(Lo,qvo),e(Lo,Mi),e(Mi,Nvo),e(Mi,Aq),e(Aq,jvo),e(Mi,Dvo),e(Mi,yq),e(yq,Gvo),e(Mi,Ovo),e(Lo,Vvo),e(Lo,oy),e(oy,Xvo),e(oy,$se),e($se,zvo),e(oy,Qvo),e(Lo,Wvo),e(Lo,et),M(ry,et,null),e(et,Hvo),e(et,kse),e(kse,Uvo),e(et,Jvo),e(et,Ei),e(Ei,Yvo),e(Ei,Sse),e(Sse,Kvo),e(Ei,Zvo),e(Ei,Lq),e(Lq,eFo),e(Ei,oFo),e(et,rFo),M(c_,et,null),e(Lo,tFo),e(Lo,Ue),M(ty,Ue,null),e(Ue,aFo),e(Ue,Rse),e(Rse,nFo),e(Ue,sFo),e(Ue,Ca),e(Ca,lFo),e(Ca,Bse),e(Bse,iFo),e(Ca,dFo),e(Ca,Pse),e(Pse,cFo),e(Ca,fFo),e(Ca,Ise),e(Ise,mFo),e(Ca,gFo),e(Ue,hFo),e(Ue,z),e(z,f_),e(f_,qse),e(qse,pFo),e(f_,uFo),e(f_,xq),e(xq,_Fo),e(f_,bFo),e(z,vFo),e(z,m_),e(m_,Nse),e(Nse,FFo),e(m_,TFo),e(m_,$q),e($q,MFo),e(m_,EFo),e(z,CFo),e(z,g_),e(g_,jse),e(jse,wFo),e(g_,AFo),e(g_,kq),e(kq,yFo),e(g_,LFo),e(z,xFo),e(z,h_),e(h_,Dse),e(Dse,$Fo),e(h_,kFo),e(h_,Sq),e(Sq,SFo),e(h_,RFo),e(z,BFo),e(z,p_),e(p_,Gse),e(Gse,PFo),e(p_,IFo),e(p_,Rq),e(Rq,qFo),e(p_,NFo),e(z,jFo),e(z,u_),e(u_,Ose),e(Ose,DFo),e(u_,GFo),e(u_,Bq),e(Bq,OFo),e(u_,VFo),e(z,XFo),e(z,__),e(__,Vse),e(Vse,zFo),e(__,QFo),e(__,Pq),e(Pq,WFo),e(__,HFo),e(z,UFo),e(z,b_),e(b_,Xse),e(Xse,JFo),e(b_,YFo),e(b_,Iq),e(Iq,KFo),e(b_,ZFo),e(z,e0o),e(z,v_),e(v_,zse),e(zse,o0o),e(v_,r0o),e(v_,qq),e(qq,t0o),e(v_,a0o),e(z,n0o),e(z,F_),e(F_,Qse),e(Qse,s0o),e(F_,l0o),e(F_,Nq),e(Nq,i0o),e(F_,d0o),e(z,c0o),e(z,T_),e(T_,Wse),e(Wse,f0o),e(T_,m0o),e(T_,jq),e(jq,g0o),e(T_,h0o),e(z,p0o),e(z,M_),e(M_,Hse),e(Hse,u0o),e(M_,_0o),e(M_,Dq),e(Dq,b0o),e(M_,v0o),e(z,F0o),e(z,E_),e(E_,Use),e(Use,T0o),e(E_,M0o),e(E_,Gq),e(Gq,E0o),e(E_,C0o),e(z,w0o),e(z,C_),e(C_,Jse),e(Jse,A0o),e(C_,y0o),e(C_,Oq),e(Oq,L0o),e(C_,x0o),e(z,$0o),e(z,w_),e(w_,Yse),e(Yse,k0o),e(w_,S0o),e(w_,Vq),e(Vq,R0o),e(w_,B0o),e(z,P0o),e(z,A_),e(A_,Kse),e(Kse,I0o),e(A_,q0o),e(A_,Xq),e(Xq,N0o),e(A_,j0o),e(z,D0o),e(z,y_),e(y_,Zse),e(Zse,G0o),e(y_,O0o),e(y_,zq),e(zq,V0o),e(y_,X0o),e(z,z0o),e(z,L_),e(L_,ele),e(ele,Q0o),e(L_,W0o),e(L_,Qq),e(Qq,H0o),e(L_,U0o),e(z,J0o),e(z,x_),e(x_,ole),e(ole,Y0o),e(x_,K0o),e(x_,Wq),e(Wq,Z0o),e(x_,e6o),e(z,o6o),e(z,$_),e($_,rle),e(rle,r6o),e($_,t6o),e($_,Hq),e(Hq,a6o),e($_,n6o),e(z,s6o),e(z,k_),e(k_,tle),e(tle,l6o),e(k_,i6o),e(k_,Uq),e(Uq,d6o),e(k_,c6o),e(z,f6o),e(z,S_),e(S_,ale),e(ale,m6o),e(S_,g6o),e(S_,Jq),e(Jq,h6o),e(S_,p6o),e(z,u6o),e(z,R_),e(R_,nle),e(nle,_6o),e(R_,b6o),e(R_,Yq),e(Yq,v6o),e(R_,F6o),e(z,T6o),e(z,B_),e(B_,sle),e(sle,M6o),e(B_,E6o),e(B_,Kq),e(Kq,C6o),e(B_,w6o),e(z,A6o),e(z,P_),e(P_,lle),e(lle,y6o),e(P_,L6o),e(P_,Zq),e(Zq,x6o),e(P_,$6o),e(z,k6o),e(z,I_),e(I_,ile),e(ile,S6o),e(I_,R6o),e(I_,eN),e(eN,B6o),e(I_,P6o),e(z,I6o),e(z,q_),e(q_,dle),e(dle,q6o),e(q_,N6o),e(q_,oN),e(oN,j6o),e(q_,D6o),e(z,G6o),e(z,N_),e(N_,cle),e(cle,O6o),e(N_,V6o),e(N_,rN),e(rN,X6o),e(N_,z6o),e(z,Q6o),e(z,j_),e(j_,fle),e(fle,W6o),e(j_,H6o),e(j_,tN),e(tN,U6o),e(j_,J6o),e(z,Y6o),e(z,D_),e(D_,mle),e(mle,K6o),e(D_,Z6o),e(D_,aN),e(aN,eTo),e(D_,oTo),e(z,rTo),e(z,G_),e(G_,gle),e(gle,tTo),e(G_,aTo),e(G_,nN),e(nN,nTo),e(G_,sTo),e(z,lTo),e(z,O_),e(O_,hle),e(hle,iTo),e(O_,dTo),e(O_,sN),e(sN,cTo),e(O_,fTo),e(z,mTo),e(z,V_),e(V_,ple),e(ple,gTo),e(V_,hTo),e(V_,lN),e(lN,pTo),e(V_,uTo),e(z,_To),e(z,X_),e(X_,ule),e(ule,bTo),e(X_,vTo),e(X_,iN),e(iN,FTo),e(X_,TTo),e(z,MTo),e(z,z_),e(z_,_le),e(_le,ETo),e(z_,CTo),e(z_,dN),e(dN,wTo),e(z_,ATo),e(Ue,yTo),e(Ue,Q_),e(Q_,LTo),e(Q_,ble),e(ble,xTo),e(Q_,$To),e(Q_,vle),e(vle,kTo),e(Ue,STo),M(W_,Ue,null),b(f,iBe,_),b(f,Ci,_),e(Ci,H_),e(H_,Fle),M(ay,Fle,null),e(Ci,RTo),e(Ci,Tle),e(Tle,BTo),b(f,dBe,_),b(f,xo,_),M(ny,xo,null),e(xo,PTo),e(xo,wi),e(wi,ITo),e(wi,cN),e(cN,qTo),e(wi,NTo),e(wi,fN),e(fN,jTo),e(wi,DTo),e(xo,GTo),e(xo,sy),e(sy,OTo),e(sy,Mle),e(Mle,VTo),e(sy,XTo),e(xo,zTo),e(xo,ot),M(ly,ot,null),e(ot,QTo),e(ot,Ele),e(Ele,WTo),e(ot,HTo),e(ot,Ai),e(Ai,UTo),e(Ai,Cle),e(Cle,JTo),e(Ai,YTo),e(Ai,mN),e(mN,KTo),e(Ai,ZTo),e(ot,eMo),M(U_,ot,null),e(xo,oMo),e(xo,Je),M(iy,Je,null),e(Je,rMo),e(Je,wle),e(wle,tMo),e(Je,aMo),e(Je,wa),e(wa,nMo),e(wa,Ale),e(Ale,sMo),e(wa,lMo),e(wa,yle),e(yle,iMo),e(wa,dMo),e(wa,Lle),e(Lle,cMo),e(wa,fMo),e(Je,mMo),e(Je,Q),e(Q,J_),e(J_,xle),e(xle,gMo),e(J_,hMo),e(J_,gN),e(gN,pMo),e(J_,uMo),e(Q,_Mo),e(Q,Y_),e(Y_,$le),e($le,bMo),e(Y_,vMo),e(Y_,hN),e(hN,FMo),e(Y_,TMo),e(Q,MMo),e(Q,K_),e(K_,kle),e(kle,EMo),e(K_,CMo),e(K_,pN),e(pN,wMo),e(K_,AMo),e(Q,yMo),e(Q,Z_),e(Z_,Sle),e(Sle,LMo),e(Z_,xMo),e(Z_,uN),e(uN,$Mo),e(Z_,kMo),e(Q,SMo),e(Q,e2),e(e2,Rle),e(Rle,RMo),e(e2,BMo),e(e2,_N),e(_N,PMo),e(e2,IMo),e(Q,qMo),e(Q,o2),e(o2,Ble),e(Ble,NMo),e(o2,jMo),e(o2,bN),e(bN,DMo),e(o2,GMo),e(Q,OMo),e(Q,r2),e(r2,Ple),e(Ple,VMo),e(r2,XMo),e(r2,vN),e(vN,zMo),e(r2,QMo),e(Q,WMo),e(Q,t2),e(t2,Ile),e(Ile,HMo),e(t2,UMo),e(t2,FN),e(FN,JMo),e(t2,YMo),e(Q,KMo),e(Q,a2),e(a2,qle),e(qle,ZMo),e(a2,eEo),e(a2,TN),e(TN,oEo),e(a2,rEo),e(Q,tEo),e(Q,n2),e(n2,Nle),e(Nle,aEo),e(n2,nEo),e(n2,MN),e(MN,sEo),e(n2,lEo),e(Q,iEo),e(Q,s2),e(s2,jle),e(jle,dEo),e(s2,cEo),e(s2,EN),e(EN,fEo),e(s2,mEo),e(Q,gEo),e(Q,l2),e(l2,Dle),e(Dle,hEo),e(l2,pEo),e(l2,CN),e(CN,uEo),e(l2,_Eo),e(Q,bEo),e(Q,i2),e(i2,Gle),e(Gle,vEo),e(i2,FEo),e(i2,wN),e(wN,TEo),e(i2,MEo),e(Q,EEo),e(Q,d2),e(d2,Ole),e(Ole,CEo),e(d2,wEo),e(d2,AN),e(AN,AEo),e(d2,yEo),e(Q,LEo),e(Q,c2),e(c2,Vle),e(Vle,xEo),e(c2,$Eo),e(c2,yN),e(yN,kEo),e(c2,SEo),e(Q,REo),e(Q,f2),e(f2,Xle),e(Xle,BEo),e(f2,PEo),e(f2,LN),e(LN,IEo),e(f2,qEo),e(Q,NEo),e(Q,m2),e(m2,zle),e(zle,jEo),e(m2,DEo),e(m2,xN),e(xN,GEo),e(m2,OEo),e(Q,VEo),e(Q,g2),e(g2,Qle),e(Qle,XEo),e(g2,zEo),e(g2,$N),e($N,QEo),e(g2,WEo),e(Q,HEo),e(Q,h2),e(h2,Wle),e(Wle,UEo),e(h2,JEo),e(h2,kN),e(kN,YEo),e(h2,KEo),e(Q,ZEo),e(Q,p2),e(p2,Hle),e(Hle,eCo),e(p2,oCo),e(p2,SN),e(SN,rCo),e(p2,tCo),e(Q,aCo),e(Q,u2),e(u2,Ule),e(Ule,nCo),e(u2,sCo),e(u2,RN),e(RN,lCo),e(u2,iCo),e(Q,dCo),e(Q,_2),e(_2,Jle),e(Jle,cCo),e(_2,fCo),e(_2,BN),e(BN,mCo),e(_2,gCo),e(Q,hCo),e(Q,b2),e(b2,Yle),e(Yle,pCo),e(b2,uCo),e(b2,PN),e(PN,_Co),e(b2,bCo),e(Q,vCo),e(Q,v2),e(v2,Kle),e(Kle,FCo),e(v2,TCo),e(v2,IN),e(IN,MCo),e(v2,ECo),e(Q,CCo),e(Q,F2),e(F2,Zle),e(Zle,wCo),e(F2,ACo),e(F2,qN),e(qN,yCo),e(F2,LCo),e(Q,xCo),e(Q,T2),e(T2,eie),e(eie,$Co),e(T2,kCo),e(T2,NN),e(NN,SCo),e(T2,RCo),e(Q,BCo),e(Q,M2),e(M2,oie),e(oie,PCo),e(M2,ICo),e(M2,jN),e(jN,qCo),e(M2,NCo),e(Q,jCo),e(Q,E2),e(E2,rie),e(rie,DCo),e(E2,GCo),e(E2,DN),e(DN,OCo),e(E2,VCo),e(Q,XCo),e(Q,C2),e(C2,tie),e(tie,zCo),e(C2,QCo),e(C2,GN),e(GN,WCo),e(C2,HCo),e(Q,UCo),e(Q,w2),e(w2,aie),e(aie,JCo),e(w2,YCo),e(w2,ON),e(ON,KCo),e(w2,ZCo),e(Q,e5o),e(Q,A2),e(A2,nie),e(nie,o5o),e(A2,r5o),e(A2,sie),e(sie,t5o),e(A2,a5o),e(Q,n5o),e(Q,y2),e(y2,lie),e(lie,s5o),e(y2,l5o),e(y2,VN),e(VN,i5o),e(y2,d5o),e(Q,c5o),e(Q,L2),e(L2,iie),e(iie,f5o),e(L2,m5o),e(L2,XN),e(XN,g5o),e(L2,h5o),e(Q,p5o),e(Q,x2),e(x2,die),e(die,u5o),e(x2,_5o),e(x2,zN),e(zN,b5o),e(x2,v5o),e(Q,F5o),e(Q,$2),e($2,cie),e(cie,T5o),e($2,M5o),e($2,QN),e(QN,E5o),e($2,C5o),e(Je,w5o),e(Je,k2),e(k2,A5o),e(k2,fie),e(fie,y5o),e(k2,L5o),e(k2,mie),e(mie,x5o),e(Je,$5o),M(S2,Je,null),b(f,cBe,_),b(f,yi,_),e(yi,R2),e(R2,gie),M(dy,gie,null),e(yi,k5o),e(yi,hie),e(hie,S5o),b(f,fBe,_),b(f,$o,_),M(cy,$o,null),e($o,R5o),e($o,Li),e(Li,B5o),e(Li,WN),e(WN,P5o),e(Li,I5o),e(Li,HN),e(HN,q5o),e(Li,N5o),e($o,j5o),e($o,fy),e(fy,D5o),e(fy,pie),e(pie,G5o),e(fy,O5o),e($o,V5o),e($o,rt),M(my,rt,null),e(rt,X5o),e(rt,uie),e(uie,z5o),e(rt,Q5o),e(rt,xi),e(xi,W5o),e(xi,_ie),e(_ie,H5o),e(xi,U5o),e(xi,UN),e(UN,J5o),e(xi,Y5o),e(rt,K5o),M(B2,rt,null),e($o,Z5o),e($o,Ye),M(gy,Ye,null),e(Ye,e3o),e(Ye,bie),e(bie,o3o),e(Ye,r3o),e(Ye,Aa),e(Aa,t3o),e(Aa,vie),e(vie,a3o),e(Aa,n3o),e(Aa,Fie),e(Fie,s3o),e(Aa,l3o),e(Aa,Tie),e(Tie,i3o),e(Aa,d3o),e(Ye,c3o),e(Ye,he),e(he,P2),e(P2,Mie),e(Mie,f3o),e(P2,m3o),e(P2,JN),e(JN,g3o),e(P2,h3o),e(he,p3o),e(he,I2),e(I2,Eie),e(Eie,u3o),e(I2,_3o),e(I2,YN),e(YN,b3o),e(I2,v3o),e(he,F3o),e(he,q2),e(q2,Cie),e(Cie,T3o),e(q2,M3o),e(q2,KN),e(KN,E3o),e(q2,C3o),e(he,w3o),e(he,N2),e(N2,wie),e(wie,A3o),e(N2,y3o),e(N2,ZN),e(ZN,L3o),e(N2,x3o),e(he,$3o),e(he,j2),e(j2,Aie),e(Aie,k3o),e(j2,S3o),e(j2,ej),e(ej,R3o),e(j2,B3o),e(he,P3o),e(he,D2),e(D2,yie),e(yie,I3o),e(D2,q3o),e(D2,oj),e(oj,N3o),e(D2,j3o),e(he,D3o),e(he,G2),e(G2,Lie),e(Lie,G3o),e(G2,O3o),e(G2,rj),e(rj,V3o),e(G2,X3o),e(he,z3o),e(he,O2),e(O2,xie),e(xie,Q3o),e(O2,W3o),e(O2,tj),e(tj,H3o),e(O2,U3o),e(he,J3o),e(he,V2),e(V2,$ie),e($ie,Y3o),e(V2,K3o),e(V2,aj),e(aj,Z3o),e(V2,ewo),e(he,owo),e(he,X2),e(X2,kie),e(kie,rwo),e(X2,two),e(X2,nj),e(nj,awo),e(X2,nwo),e(he,swo),e(he,z2),e(z2,Sie),e(Sie,lwo),e(z2,iwo),e(z2,sj),e(sj,dwo),e(z2,cwo),e(he,fwo),e(he,Q2),e(Q2,Rie),e(Rie,mwo),e(Q2,gwo),e(Q2,lj),e(lj,hwo),e(Q2,pwo),e(he,uwo),e(he,W2),e(W2,Bie),e(Bie,_wo),e(W2,bwo),e(W2,ij),e(ij,vwo),e(W2,Fwo),e(he,Two),e(he,H2),e(H2,Pie),e(Pie,Mwo),e(H2,Ewo),e(H2,dj),e(dj,Cwo),e(H2,wwo),e(he,Awo),e(he,U2),e(U2,Iie),e(Iie,ywo),e(U2,Lwo),e(U2,cj),e(cj,xwo),e(U2,$wo),e(he,kwo),e(he,J2),e(J2,qie),e(qie,Swo),e(J2,Rwo),e(J2,fj),e(fj,Bwo),e(J2,Pwo),e(he,Iwo),e(he,Y2),e(Y2,Nie),e(Nie,qwo),e(Y2,Nwo),e(Y2,mj),e(mj,jwo),e(Y2,Dwo),e(Ye,Gwo),e(Ye,K2),e(K2,Owo),e(K2,jie),e(jie,Vwo),e(K2,Xwo),e(K2,Die),e(Die,zwo),e(Ye,Qwo),M(Z2,Ye,null),b(f,mBe,_),b(f,$i,_),e($i,e1),e(e1,Gie),M(hy,Gie,null),e($i,Wwo),e($i,Oie),e(Oie,Hwo),b(f,gBe,_),b(f,ko,_),M(py,ko,null),e(ko,Uwo),e(ko,ki),e(ki,Jwo),e(ki,gj),e(gj,Ywo),e(ki,Kwo),e(ki,hj),e(hj,Zwo),e(ki,eAo),e(ko,oAo),e(ko,uy),e(uy,rAo),e(uy,Vie),e(Vie,tAo),e(uy,aAo),e(ko,nAo),e(ko,tt),M(_y,tt,null),e(tt,sAo),e(tt,Xie),e(Xie,lAo),e(tt,iAo),e(tt,Si),e(Si,dAo),e(Si,zie),e(zie,cAo),e(Si,fAo),e(Si,pj),e(pj,mAo),e(Si,gAo),e(tt,hAo),M(o1,tt,null),e(ko,pAo),e(ko,Ke),M(by,Ke,null),e(Ke,uAo),e(Ke,Qie),e(Qie,_Ao),e(Ke,bAo),e(Ke,ya),e(ya,vAo),e(ya,Wie),e(Wie,FAo),e(ya,TAo),e(ya,Hie),e(Hie,MAo),e(ya,EAo),e(ya,Uie),e(Uie,CAo),e(ya,wAo),e(Ke,AAo),e(Ke,q),e(q,r1),e(r1,Jie),e(Jie,yAo),e(r1,LAo),e(r1,uj),e(uj,xAo),e(r1,$Ao),e(q,kAo),e(q,t1),e(t1,Yie),e(Yie,SAo),e(t1,RAo),e(t1,_j),e(_j,BAo),e(t1,PAo),e(q,IAo),e(q,a1),e(a1,Kie),e(Kie,qAo),e(a1,NAo),e(a1,bj),e(bj,jAo),e(a1,DAo),e(q,GAo),e(q,n1),e(n1,Zie),e(Zie,OAo),e(n1,VAo),e(n1,vj),e(vj,XAo),e(n1,zAo),e(q,QAo),e(q,s1),e(s1,ede),e(ede,WAo),e(s1,HAo),e(s1,Fj),e(Fj,UAo),e(s1,JAo),e(q,YAo),e(q,l1),e(l1,ode),e(ode,KAo),e(l1,ZAo),e(l1,Tj),e(Tj,eyo),e(l1,oyo),e(q,ryo),e(q,i1),e(i1,rde),e(rde,tyo),e(i1,ayo),e(i1,Mj),e(Mj,nyo),e(i1,syo),e(q,lyo),e(q,d1),e(d1,tde),e(tde,iyo),e(d1,dyo),e(d1,Ej),e(Ej,cyo),e(d1,fyo),e(q,myo),e(q,c1),e(c1,ade),e(ade,gyo),e(c1,hyo),e(c1,Cj),e(Cj,pyo),e(c1,uyo),e(q,_yo),e(q,f1),e(f1,nde),e(nde,byo),e(f1,vyo),e(f1,wj),e(wj,Fyo),e(f1,Tyo),e(q,Myo),e(q,m1),e(m1,sde),e(sde,Eyo),e(m1,Cyo),e(m1,Aj),e(Aj,wyo),e(m1,Ayo),e(q,yyo),e(q,g1),e(g1,lde),e(lde,Lyo),e(g1,xyo),e(g1,yj),e(yj,$yo),e(g1,kyo),e(q,Syo),e(q,h1),e(h1,ide),e(ide,Ryo),e(h1,Byo),e(h1,Lj),e(Lj,Pyo),e(h1,Iyo),e(q,qyo),e(q,p1),e(p1,dde),e(dde,Nyo),e(p1,jyo),e(p1,xj),e(xj,Dyo),e(p1,Gyo),e(q,Oyo),e(q,u1),e(u1,cde),e(cde,Vyo),e(u1,Xyo),e(u1,$j),e($j,zyo),e(u1,Qyo),e(q,Wyo),e(q,_1),e(_1,fde),e(fde,Hyo),e(_1,Uyo),e(_1,kj),e(kj,Jyo),e(_1,Yyo),e(q,Kyo),e(q,b1),e(b1,mde),e(mde,Zyo),e(b1,eLo),e(b1,Sj),e(Sj,oLo),e(b1,rLo),e(q,tLo),e(q,v1),e(v1,gde),e(gde,aLo),e(v1,nLo),e(v1,Rj),e(Rj,sLo),e(v1,lLo),e(q,iLo),e(q,F1),e(F1,hde),e(hde,dLo),e(F1,cLo),e(F1,Bj),e(Bj,fLo),e(F1,mLo),e(q,gLo),e(q,T1),e(T1,pde),e(pde,hLo),e(T1,pLo),e(T1,Pj),e(Pj,uLo),e(T1,_Lo),e(q,bLo),e(q,M1),e(M1,ude),e(ude,vLo),e(M1,FLo),e(M1,Ij),e(Ij,TLo),e(M1,MLo),e(q,ELo),e(q,E1),e(E1,_de),e(_de,CLo),e(E1,wLo),e(E1,qj),e(qj,ALo),e(E1,yLo),e(q,LLo),e(q,C1),e(C1,bde),e(bde,xLo),e(C1,$Lo),e(C1,Nj),e(Nj,kLo),e(C1,SLo),e(q,RLo),e(q,w1),e(w1,vde),e(vde,BLo),e(w1,PLo),e(w1,jj),e(jj,ILo),e(w1,qLo),e(q,NLo),e(q,A1),e(A1,Fde),e(Fde,jLo),e(A1,DLo),e(A1,Dj),e(Dj,GLo),e(A1,OLo),e(q,VLo),e(q,y1),e(y1,Tde),e(Tde,XLo),e(y1,zLo),e(y1,Gj),e(Gj,QLo),e(y1,WLo),e(q,HLo),e(q,L1),e(L1,Mde),e(Mde,ULo),e(L1,JLo),e(L1,Oj),e(Oj,YLo),e(L1,KLo),e(q,ZLo),e(q,x1),e(x1,Ede),e(Ede,e8o),e(x1,o8o),e(x1,Vj),e(Vj,r8o),e(x1,t8o),e(q,a8o),e(q,$1),e($1,Cde),e(Cde,n8o),e($1,s8o),e($1,Xj),e(Xj,l8o),e($1,i8o),e(q,d8o),e(q,k1),e(k1,wde),e(wde,c8o),e(k1,f8o),e(k1,zj),e(zj,m8o),e(k1,g8o),e(q,h8o),e(q,S1),e(S1,Ade),e(Ade,p8o),e(S1,u8o),e(S1,Qj),e(Qj,_8o),e(S1,b8o),e(q,v8o),e(q,R1),e(R1,yde),e(yde,F8o),e(R1,T8o),e(R1,Wj),e(Wj,M8o),e(R1,E8o),e(q,C8o),e(q,B1),e(B1,Lde),e(Lde,w8o),e(B1,A8o),e(B1,Hj),e(Hj,y8o),e(B1,L8o),e(q,x8o),e(q,P1),e(P1,xde),e(xde,$8o),e(P1,k8o),e(P1,Uj),e(Uj,S8o),e(P1,R8o),e(q,B8o),e(q,I1),e(I1,$de),e($de,P8o),e(I1,I8o),e(I1,Jj),e(Jj,q8o),e(I1,N8o),e(q,j8o),e(q,q1),e(q1,kde),e(kde,D8o),e(q1,G8o),e(q1,Yj),e(Yj,O8o),e(q1,V8o),e(q,X8o),e(q,N1),e(N1,Sde),e(Sde,z8o),e(N1,Q8o),e(N1,Kj),e(Kj,W8o),e(N1,H8o),e(q,U8o),e(q,j1),e(j1,Rde),e(Rde,J8o),e(j1,Y8o),e(j1,Zj),e(Zj,K8o),e(j1,Z8o),e(q,e7o),e(q,D1),e(D1,Bde),e(Bde,o7o),e(D1,r7o),e(D1,eD),e(eD,t7o),e(D1,a7o),e(q,n7o),e(q,G1),e(G1,Pde),e(Pde,s7o),e(G1,l7o),e(G1,oD),e(oD,i7o),e(G1,d7o),e(q,c7o),e(q,O1),e(O1,Ide),e(Ide,f7o),e(O1,m7o),e(O1,rD),e(rD,g7o),e(O1,h7o),e(q,p7o),e(q,V1),e(V1,qde),e(qde,u7o),e(V1,_7o),e(V1,tD),e(tD,b7o),e(V1,v7o),e(q,F7o),e(q,X1),e(X1,Nde),e(Nde,T7o),e(X1,M7o),e(X1,aD),e(aD,E7o),e(X1,C7o),e(q,w7o),e(q,z1),e(z1,jde),e(jde,A7o),e(z1,y7o),e(z1,nD),e(nD,L7o),e(z1,x7o),e(q,$7o),e(q,Q1),e(Q1,Dde),e(Dde,k7o),e(Q1,S7o),e(Q1,sD),e(sD,R7o),e(Q1,B7o),e(q,P7o),e(q,W1),e(W1,Gde),e(Gde,I7o),e(W1,q7o),e(W1,lD),e(lD,N7o),e(W1,j7o),e(q,D7o),e(q,H1),e(H1,Ode),e(Ode,G7o),e(H1,O7o),e(H1,iD),e(iD,V7o),e(H1,X7o),e(Ke,z7o),e(Ke,U1),e(U1,Q7o),e(U1,Vde),e(Vde,W7o),e(U1,H7o),e(U1,Xde),e(Xde,U7o),e(Ke,J7o),M(J1,Ke,null),b(f,hBe,_),b(f,Ri,_),e(Ri,Y1),e(Y1,zde),M(vy,zde,null),e(Ri,Y7o),e(Ri,Qde),e(Qde,K7o),b(f,pBe,_),b(f,So,_),M(Fy,So,null),e(So,Z7o),e(So,Bi),e(Bi,exo),e(Bi,dD),e(dD,oxo),e(Bi,rxo),e(Bi,cD),e(cD,txo),e(Bi,axo),e(So,nxo),e(So,Ty),e(Ty,sxo),e(Ty,Wde),e(Wde,lxo),e(Ty,ixo),e(So,dxo),e(So,at),M(My,at,null),e(at,cxo),e(at,Hde),e(Hde,fxo),e(at,mxo),e(at,Pi),e(Pi,gxo),e(Pi,Ude),e(Ude,hxo),e(Pi,pxo),e(Pi,fD),e(fD,uxo),e(Pi,_xo),e(at,bxo),M(K1,at,null),e(So,vxo),e(So,Ze),M(Ey,Ze,null),e(Ze,Fxo),e(Ze,Jde),e(Jde,Txo),e(Ze,Mxo),e(Ze,La),e(La,Exo),e(La,Yde),e(Yde,Cxo),e(La,wxo),e(La,Kde),e(Kde,Axo),e(La,yxo),e(La,Zde),e(Zde,Lxo),e(La,xxo),e(Ze,$xo),e(Ze,Y),e(Y,Z1),e(Z1,ece),e(ece,kxo),e(Z1,Sxo),e(Z1,mD),e(mD,Rxo),e(Z1,Bxo),e(Y,Pxo),e(Y,eb),e(eb,oce),e(oce,Ixo),e(eb,qxo),e(eb,gD),e(gD,Nxo),e(eb,jxo),e(Y,Dxo),e(Y,ob),e(ob,rce),e(rce,Gxo),e(ob,Oxo),e(ob,hD),e(hD,Vxo),e(ob,Xxo),e(Y,zxo),e(Y,rb),e(rb,tce),e(tce,Qxo),e(rb,Wxo),e(rb,pD),e(pD,Hxo),e(rb,Uxo),e(Y,Jxo),e(Y,tb),e(tb,ace),e(ace,Yxo),e(tb,Kxo),e(tb,uD),e(uD,Zxo),e(tb,e9o),e(Y,o9o),e(Y,ab),e(ab,nce),e(nce,r9o),e(ab,t9o),e(ab,_D),e(_D,a9o),e(ab,n9o),e(Y,s9o),e(Y,nb),e(nb,sce),e(sce,l9o),e(nb,i9o),e(nb,bD),e(bD,d9o),e(nb,c9o),e(Y,f9o),e(Y,sb),e(sb,lce),e(lce,m9o),e(sb,g9o),e(sb,vD),e(vD,h9o),e(sb,p9o),e(Y,u9o),e(Y,lb),e(lb,ice),e(ice,_9o),e(lb,b9o),e(lb,FD),e(FD,v9o),e(lb,F9o),e(Y,T9o),e(Y,ib),e(ib,dce),e(dce,M9o),e(ib,E9o),e(ib,TD),e(TD,C9o),e(ib,w9o),e(Y,A9o),e(Y,db),e(db,cce),e(cce,y9o),e(db,L9o),e(db,MD),e(MD,x9o),e(db,$9o),e(Y,k9o),e(Y,cb),e(cb,fce),e(fce,S9o),e(cb,R9o),e(cb,ED),e(ED,B9o),e(cb,P9o),e(Y,I9o),e(Y,fb),e(fb,mce),e(mce,q9o),e(fb,N9o),e(fb,CD),e(CD,j9o),e(fb,D9o),e(Y,G9o),e(Y,mb),e(mb,gce),e(gce,O9o),e(mb,V9o),e(mb,wD),e(wD,X9o),e(mb,z9o),e(Y,Q9o),e(Y,gb),e(gb,hce),e(hce,W9o),e(gb,H9o),e(gb,AD),e(AD,U9o),e(gb,J9o),e(Y,Y9o),e(Y,hb),e(hb,pce),e(pce,K9o),e(hb,Z9o),e(hb,yD),e(yD,e$o),e(hb,o$o),e(Y,r$o),e(Y,pb),e(pb,uce),e(uce,t$o),e(pb,a$o),e(pb,LD),e(LD,n$o),e(pb,s$o),e(Y,l$o),e(Y,ub),e(ub,_ce),e(_ce,i$o),e(ub,d$o),e(ub,xD),e(xD,c$o),e(ub,f$o),e(Y,m$o),e(Y,_b),e(_b,bce),e(bce,g$o),e(_b,h$o),e(_b,$D),e($D,p$o),e(_b,u$o),e(Y,_$o),e(Y,bb),e(bb,vce),e(vce,b$o),e(bb,v$o),e(bb,kD),e(kD,F$o),e(bb,T$o),e(Y,M$o),e(Y,vb),e(vb,Fce),e(Fce,E$o),e(vb,C$o),e(vb,SD),e(SD,w$o),e(vb,A$o),e(Y,y$o),e(Y,Fb),e(Fb,Tce),e(Tce,L$o),e(Fb,x$o),e(Fb,RD),e(RD,$$o),e(Fb,k$o),e(Y,S$o),e(Y,Tb),e(Tb,Mce),e(Mce,R$o),e(Tb,B$o),e(Tb,BD),e(BD,P$o),e(Tb,I$o),e(Y,q$o),e(Y,Mb),e(Mb,Ece),e(Ece,N$o),e(Mb,j$o),e(Mb,PD),e(PD,D$o),e(Mb,G$o),e(Y,O$o),e(Y,Eb),e(Eb,Cce),e(Cce,V$o),e(Eb,X$o),e(Eb,ID),e(ID,z$o),e(Eb,Q$o),e(Y,W$o),e(Y,Cb),e(Cb,wce),e(wce,H$o),e(Cb,U$o),e(Cb,qD),e(qD,J$o),e(Cb,Y$o),e(Y,K$o),e(Y,wb),e(wb,Ace),e(Ace,Z$o),e(wb,eko),e(wb,ND),e(ND,oko),e(wb,rko),e(Y,tko),e(Y,Ab),e(Ab,yce),e(yce,ako),e(Ab,nko),e(Ab,jD),e(jD,sko),e(Ab,lko),e(Ze,iko),e(Ze,yb),e(yb,dko),e(yb,Lce),e(Lce,cko),e(yb,fko),e(yb,xce),e(xce,mko),e(Ze,gko),M(Lb,Ze,null),b(f,uBe,_),b(f,Ii,_),e(Ii,xb),e(xb,$ce),M(Cy,$ce,null),e(Ii,hko),e(Ii,kce),e(kce,pko),b(f,_Be,_),b(f,Ro,_),M(wy,Ro,null),e(Ro,uko),e(Ro,qi),e(qi,_ko),e(qi,DD),e(DD,bko),e(qi,vko),e(qi,GD),e(GD,Fko),e(qi,Tko),e(Ro,Mko),e(Ro,Ay),e(Ay,Eko),e(Ay,Sce),e(Sce,Cko),e(Ay,wko),e(Ro,Ako),e(Ro,nt),M(yy,nt,null),e(nt,yko),e(nt,Rce),e(Rce,Lko),e(nt,xko),e(nt,Ni),e(Ni,$ko),e(Ni,Bce),e(Bce,kko),e(Ni,Sko),e(Ni,OD),e(OD,Rko),e(Ni,Bko),e(nt,Pko),M($b,nt,null),e(Ro,Iko),e(Ro,eo),M(Ly,eo,null),e(eo,qko),e(eo,Pce),e(Pce,Nko),e(eo,jko),e(eo,xa),e(xa,Dko),e(xa,Ice),e(Ice,Gko),e(xa,Oko),e(xa,qce),e(qce,Vko),e(xa,Xko),e(xa,Nce),e(Nce,zko),e(xa,Qko),e(eo,Wko),e(eo,Wr),e(Wr,kb),e(kb,jce),e(jce,Hko),e(kb,Uko),e(kb,VD),e(VD,Jko),e(kb,Yko),e(Wr,Kko),e(Wr,Sb),e(Sb,Dce),e(Dce,Zko),e(Sb,eSo),e(Sb,XD),e(XD,oSo),e(Sb,rSo),e(Wr,tSo),e(Wr,Rb),e(Rb,Gce),e(Gce,aSo),e(Rb,nSo),e(Rb,zD),e(zD,sSo),e(Rb,lSo),e(Wr,iSo),e(Wr,Bb),e(Bb,Oce),e(Oce,dSo),e(Bb,cSo),e(Bb,QD),e(QD,fSo),e(Bb,mSo),e(Wr,gSo),e(Wr,Pb),e(Pb,Vce),e(Vce,hSo),e(Pb,pSo),e(Pb,WD),e(WD,uSo),e(Pb,_So),e(eo,bSo),e(eo,Ib),e(Ib,vSo),e(Ib,Xce),e(Xce,FSo),e(Ib,TSo),e(Ib,zce),e(zce,MSo),e(eo,ESo),M(qb,eo,null),b(f,bBe,_),b(f,ji,_),e(ji,Nb),e(Nb,Qce),M(xy,Qce,null),e(ji,CSo),e(ji,Wce),e(Wce,wSo),b(f,vBe,_),b(f,Bo,_),M($y,Bo,null),e(Bo,ASo),e(Bo,Di),e(Di,ySo),e(Di,HD),e(HD,LSo),e(Di,xSo),e(Di,UD),e(UD,$So),e(Di,kSo),e(Bo,SSo),e(Bo,ky),e(ky,RSo),e(ky,Hce),e(Hce,BSo),e(ky,PSo),e(Bo,ISo),e(Bo,st),M(Sy,st,null),e(st,qSo),e(st,Uce),e(Uce,NSo),e(st,jSo),e(st,Gi),e(Gi,DSo),e(Gi,Jce),e(Jce,GSo),e(Gi,OSo),e(Gi,JD),e(JD,VSo),e(Gi,XSo),e(st,zSo),M(jb,st,null),e(Bo,QSo),e(Bo,oo),M(Ry,oo,null),e(oo,WSo),e(oo,Yce),e(Yce,HSo),e(oo,USo),e(oo,$a),e($a,JSo),e($a,Kce),e(Kce,YSo),e($a,KSo),e($a,Zce),e(Zce,ZSo),e($a,eRo),e($a,efe),e(efe,oRo),e($a,rRo),e(oo,tRo),e(oo,U),e(U,Db),e(Db,ofe),e(ofe,aRo),e(Db,nRo),e(Db,YD),e(YD,sRo),e(Db,lRo),e(U,iRo),e(U,Gb),e(Gb,rfe),e(rfe,dRo),e(Gb,cRo),e(Gb,KD),e(KD,fRo),e(Gb,mRo),e(U,gRo),e(U,Ob),e(Ob,tfe),e(tfe,hRo),e(Ob,pRo),e(Ob,ZD),e(ZD,uRo),e(Ob,_Ro),e(U,bRo),e(U,Vb),e(Vb,afe),e(afe,vRo),e(Vb,FRo),e(Vb,eG),e(eG,TRo),e(Vb,MRo),e(U,ERo),e(U,Xb),e(Xb,nfe),e(nfe,CRo),e(Xb,wRo),e(Xb,oG),e(oG,ARo),e(Xb,yRo),e(U,LRo),e(U,zb),e(zb,sfe),e(sfe,xRo),e(zb,$Ro),e(zb,rG),e(rG,kRo),e(zb,SRo),e(U,RRo),e(U,Qb),e(Qb,lfe),e(lfe,BRo),e(Qb,PRo),e(Qb,tG),e(tG,IRo),e(Qb,qRo),e(U,NRo),e(U,Wb),e(Wb,ife),e(ife,jRo),e(Wb,DRo),e(Wb,aG),e(aG,GRo),e(Wb,ORo),e(U,VRo),e(U,Hb),e(Hb,dfe),e(dfe,XRo),e(Hb,zRo),e(Hb,nG),e(nG,QRo),e(Hb,WRo),e(U,HRo),e(U,Ub),e(Ub,cfe),e(cfe,URo),e(Ub,JRo),e(Ub,sG),e(sG,YRo),e(Ub,KRo),e(U,ZRo),e(U,Jb),e(Jb,ffe),e(ffe,eBo),e(Jb,oBo),e(Jb,lG),e(lG,rBo),e(Jb,tBo),e(U,aBo),e(U,Yb),e(Yb,mfe),e(mfe,nBo),e(Yb,sBo),e(Yb,iG),e(iG,lBo),e(Yb,iBo),e(U,dBo),e(U,Kb),e(Kb,gfe),e(gfe,cBo),e(Kb,fBo),e(Kb,dG),e(dG,mBo),e(Kb,gBo),e(U,hBo),e(U,Zb),e(Zb,hfe),e(hfe,pBo),e(Zb,uBo),e(Zb,cG),e(cG,_Bo),e(Zb,bBo),e(U,vBo),e(U,e4),e(e4,pfe),e(pfe,FBo),e(e4,TBo),e(e4,fG),e(fG,MBo),e(e4,EBo),e(U,CBo),e(U,o4),e(o4,ufe),e(ufe,wBo),e(o4,ABo),e(o4,mG),e(mG,yBo),e(o4,LBo),e(U,xBo),e(U,r4),e(r4,_fe),e(_fe,$Bo),e(r4,kBo),e(r4,gG),e(gG,SBo),e(r4,RBo),e(U,BBo),e(U,t4),e(t4,bfe),e(bfe,PBo),e(t4,IBo),e(t4,hG),e(hG,qBo),e(t4,NBo),e(U,jBo),e(U,a4),e(a4,vfe),e(vfe,DBo),e(a4,GBo),e(a4,pG),e(pG,OBo),e(a4,VBo),e(U,XBo),e(U,n4),e(n4,Ffe),e(Ffe,zBo),e(n4,QBo),e(n4,uG),e(uG,WBo),e(n4,HBo),e(U,UBo),e(U,s4),e(s4,Tfe),e(Tfe,JBo),e(s4,YBo),e(s4,_G),e(_G,KBo),e(s4,ZBo),e(U,ePo),e(U,l4),e(l4,Mfe),e(Mfe,oPo),e(l4,rPo),e(l4,bG),e(bG,tPo),e(l4,aPo),e(U,nPo),e(U,i4),e(i4,Efe),e(Efe,sPo),e(i4,lPo),e(i4,vG),e(vG,iPo),e(i4,dPo),e(U,cPo),e(U,d4),e(d4,Cfe),e(Cfe,fPo),e(d4,mPo),e(d4,FG),e(FG,gPo),e(d4,hPo),e(U,pPo),e(U,c4),e(c4,wfe),e(wfe,uPo),e(c4,_Po),e(c4,TG),e(TG,bPo),e(c4,vPo),e(U,FPo),e(U,f4),e(f4,Afe),e(Afe,TPo),e(f4,MPo),e(f4,MG),e(MG,EPo),e(f4,CPo),e(U,wPo),e(U,m4),e(m4,yfe),e(yfe,APo),e(m4,yPo),e(m4,EG),e(EG,LPo),e(m4,xPo),e(U,$Po),e(U,g4),e(g4,Lfe),e(Lfe,kPo),e(g4,SPo),e(g4,CG),e(CG,RPo),e(g4,BPo),e(U,PPo),e(U,h4),e(h4,xfe),e(xfe,IPo),e(h4,qPo),e(h4,wG),e(wG,NPo),e(h4,jPo),e(U,DPo),e(U,p4),e(p4,$fe),e($fe,GPo),e(p4,OPo),e(p4,AG),e(AG,VPo),e(p4,XPo),e(U,zPo),e(U,u4),e(u4,kfe),e(kfe,QPo),e(u4,WPo),e(u4,yG),e(yG,HPo),e(u4,UPo),e(U,JPo),e(U,_4),e(_4,Sfe),e(Sfe,YPo),e(_4,KPo),e(_4,LG),e(LG,ZPo),e(_4,eIo),e(U,oIo),e(U,b4),e(b4,Rfe),e(Rfe,rIo),e(b4,tIo),e(b4,xG),e(xG,aIo),e(b4,nIo),e(oo,sIo),e(oo,v4),e(v4,lIo),e(v4,Bfe),e(Bfe,iIo),e(v4,dIo),e(v4,Pfe),e(Pfe,cIo),e(oo,fIo),M(F4,oo,null),b(f,FBe,_),b(f,Oi,_),e(Oi,T4),e(T4,Ife),M(By,Ife,null),e(Oi,mIo),e(Oi,qfe),e(qfe,gIo),b(f,TBe,_),b(f,Po,_),M(Py,Po,null),e(Po,hIo),e(Po,Vi),e(Vi,pIo),e(Vi,$G),e($G,uIo),e(Vi,_Io),e(Vi,kG),e(kG,bIo),e(Vi,vIo),e(Po,FIo),e(Po,Iy),e(Iy,TIo),e(Iy,Nfe),e(Nfe,MIo),e(Iy,EIo),e(Po,CIo),e(Po,lt),M(qy,lt,null),e(lt,wIo),e(lt,jfe),e(jfe,AIo),e(lt,yIo),e(lt,Xi),e(Xi,LIo),e(Xi,Dfe),e(Dfe,xIo),e(Xi,$Io),e(Xi,SG),e(SG,kIo),e(Xi,SIo),e(lt,RIo),M(M4,lt,null),e(Po,BIo),e(Po,ro),M(Ny,ro,null),e(ro,PIo),e(ro,Gfe),e(Gfe,IIo),e(ro,qIo),e(ro,ka),e(ka,NIo),e(ka,Ofe),e(Ofe,jIo),e(ka,DIo),e(ka,Vfe),e(Vfe,GIo),e(ka,OIo),e(ka,Xfe),e(Xfe,VIo),e(ka,XIo),e(ro,zIo),e(ro,O),e(O,E4),e(E4,zfe),e(zfe,QIo),e(E4,WIo),e(E4,RG),e(RG,HIo),e(E4,UIo),e(O,JIo),e(O,C4),e(C4,Qfe),e(Qfe,YIo),e(C4,KIo),e(C4,BG),e(BG,ZIo),e(C4,eqo),e(O,oqo),e(O,w4),e(w4,Wfe),e(Wfe,rqo),e(w4,tqo),e(w4,PG),e(PG,aqo),e(w4,nqo),e(O,sqo),e(O,A4),e(A4,Hfe),e(Hfe,lqo),e(A4,iqo),e(A4,IG),e(IG,dqo),e(A4,cqo),e(O,fqo),e(O,y4),e(y4,Ufe),e(Ufe,mqo),e(y4,gqo),e(y4,qG),e(qG,hqo),e(y4,pqo),e(O,uqo),e(O,L4),e(L4,Jfe),e(Jfe,_qo),e(L4,bqo),e(L4,NG),e(NG,vqo),e(L4,Fqo),e(O,Tqo),e(O,x4),e(x4,Yfe),e(Yfe,Mqo),e(x4,Eqo),e(x4,jG),e(jG,Cqo),e(x4,wqo),e(O,Aqo),e(O,$4),e($4,Kfe),e(Kfe,yqo),e($4,Lqo),e($4,DG),e(DG,xqo),e($4,$qo),e(O,kqo),e(O,k4),e(k4,Zfe),e(Zfe,Sqo),e(k4,Rqo),e(k4,GG),e(GG,Bqo),e(k4,Pqo),e(O,Iqo),e(O,S4),e(S4,eme),e(eme,qqo),e(S4,Nqo),e(S4,OG),e(OG,jqo),e(S4,Dqo),e(O,Gqo),e(O,R4),e(R4,ome),e(ome,Oqo),e(R4,Vqo),e(R4,VG),e(VG,Xqo),e(R4,zqo),e(O,Qqo),e(O,B4),e(B4,rme),e(rme,Wqo),e(B4,Hqo),e(B4,XG),e(XG,Uqo),e(B4,Jqo),e(O,Yqo),e(O,P4),e(P4,tme),e(tme,Kqo),e(P4,Zqo),e(P4,zG),e(zG,eNo),e(P4,oNo),e(O,rNo),e(O,I4),e(I4,ame),e(ame,tNo),e(I4,aNo),e(I4,QG),e(QG,nNo),e(I4,sNo),e(O,lNo),e(O,q4),e(q4,nme),e(nme,iNo),e(q4,dNo),e(q4,WG),e(WG,cNo),e(q4,fNo),e(O,mNo),e(O,N4),e(N4,sme),e(sme,gNo),e(N4,hNo),e(N4,HG),e(HG,pNo),e(N4,uNo),e(O,_No),e(O,j4),e(j4,lme),e(lme,bNo),e(j4,vNo),e(j4,UG),e(UG,FNo),e(j4,TNo),e(O,MNo),e(O,D4),e(D4,ime),e(ime,ENo),e(D4,CNo),e(D4,JG),e(JG,wNo),e(D4,ANo),e(O,yNo),e(O,G4),e(G4,dme),e(dme,LNo),e(G4,xNo),e(G4,YG),e(YG,$No),e(G4,kNo),e(O,SNo),e(O,O4),e(O4,cme),e(cme,RNo),e(O4,BNo),e(O4,KG),e(KG,PNo),e(O4,INo),e(O,qNo),e(O,V4),e(V4,fme),e(fme,NNo),e(V4,jNo),e(V4,ZG),e(ZG,DNo),e(V4,GNo),e(O,ONo),e(O,X4),e(X4,mme),e(mme,VNo),e(X4,XNo),e(X4,eO),e(eO,zNo),e(X4,QNo),e(O,WNo),e(O,z4),e(z4,gme),e(gme,HNo),e(z4,UNo),e(z4,oO),e(oO,JNo),e(z4,YNo),e(O,KNo),e(O,Q4),e(Q4,hme),e(hme,ZNo),e(Q4,ejo),e(Q4,rO),e(rO,ojo),e(Q4,rjo),e(O,tjo),e(O,W4),e(W4,pme),e(pme,ajo),e(W4,njo),e(W4,tO),e(tO,sjo),e(W4,ljo),e(O,ijo),e(O,H4),e(H4,ume),e(ume,djo),e(H4,cjo),e(H4,aO),e(aO,fjo),e(H4,mjo),e(O,gjo),e(O,U4),e(U4,_me),e(_me,hjo),e(U4,pjo),e(U4,nO),e(nO,ujo),e(U4,_jo),e(O,bjo),e(O,J4),e(J4,bme),e(bme,vjo),e(J4,Fjo),e(J4,sO),e(sO,Tjo),e(J4,Mjo),e(O,Ejo),e(O,Y4),e(Y4,vme),e(vme,Cjo),e(Y4,wjo),e(Y4,lO),e(lO,Ajo),e(Y4,yjo),e(O,Ljo),e(O,K4),e(K4,Fme),e(Fme,xjo),e(K4,$jo),e(K4,iO),e(iO,kjo),e(K4,Sjo),e(O,Rjo),e(O,Z4),e(Z4,Tme),e(Tme,Bjo),e(Z4,Pjo),e(Z4,dO),e(dO,Ijo),e(Z4,qjo),e(O,Njo),e(O,ev),e(ev,Mme),e(Mme,jjo),e(ev,Djo),e(ev,cO),e(cO,Gjo),e(ev,Ojo),e(O,Vjo),e(O,ov),e(ov,Eme),e(Eme,Xjo),e(ov,zjo),e(ov,fO),e(fO,Qjo),e(ov,Wjo),e(O,Hjo),e(O,rv),e(rv,Cme),e(Cme,Ujo),e(rv,Jjo),e(rv,mO),e(mO,Yjo),e(rv,Kjo),e(O,Zjo),e(O,tv),e(tv,wme),e(wme,eDo),e(tv,oDo),e(tv,gO),e(gO,rDo),e(tv,tDo),e(O,aDo),e(O,av),e(av,Ame),e(Ame,nDo),e(av,sDo),e(av,hO),e(hO,lDo),e(av,iDo),e(O,dDo),e(O,nv),e(nv,yme),e(yme,cDo),e(nv,fDo),e(nv,pO),e(pO,mDo),e(nv,gDo),e(O,hDo),e(O,sv),e(sv,Lme),e(Lme,pDo),e(sv,uDo),e(sv,uO),e(uO,_Do),e(sv,bDo),e(O,vDo),e(O,lv),e(lv,xme),e(xme,FDo),e(lv,TDo),e(lv,_O),e(_O,MDo),e(lv,EDo),e(ro,CDo),e(ro,iv),e(iv,wDo),e(iv,$me),e($me,ADo),e(iv,yDo),e(iv,kme),e(kme,LDo),e(ro,xDo),M(dv,ro,null),b(f,MBe,_),b(f,zi,_),e(zi,cv),e(cv,Sme),M(jy,Sme,null),e(zi,$Do),e(zi,Rme),e(Rme,kDo),b(f,EBe,_),b(f,Io,_),M(Dy,Io,null),e(Io,SDo),e(Io,Qi),e(Qi,RDo),e(Qi,bO),e(bO,BDo),e(Qi,PDo),e(Qi,vO),e(vO,IDo),e(Qi,qDo),e(Io,NDo),e(Io,Gy),e(Gy,jDo),e(Gy,Bme),e(Bme,DDo),e(Gy,GDo),e(Io,ODo),e(Io,it),M(Oy,it,null),e(it,VDo),e(it,Pme),e(Pme,XDo),e(it,zDo),e(it,Wi),e(Wi,QDo),e(Wi,Ime),e(Ime,WDo),e(Wi,HDo),e(Wi,FO),e(FO,UDo),e(Wi,JDo),e(it,YDo),M(fv,it,null),e(Io,KDo),e(Io,to),M(Vy,to,null),e(to,ZDo),e(to,qme),e(qme,eGo),e(to,oGo),e(to,Sa),e(Sa,rGo),e(Sa,Nme),e(Nme,tGo),e(Sa,aGo),e(Sa,jme),e(jme,nGo),e(Sa,sGo),e(Sa,Dme),e(Dme,lGo),e(Sa,iGo),e(to,dGo),e(to,Gme),e(Gme,mv),e(mv,Ome),e(Ome,cGo),e(mv,fGo),e(mv,TO),e(TO,mGo),e(mv,gGo),e(to,hGo),e(to,gv),e(gv,pGo),e(gv,Vme),e(Vme,uGo),e(gv,_Go),e(gv,Xme),e(Xme,bGo),e(to,vGo),M(hv,to,null),b(f,CBe,_),b(f,Hi,_),e(Hi,pv),e(pv,zme),M(Xy,zme,null),e(Hi,FGo),e(Hi,Qme),e(Qme,TGo),b(f,wBe,_),b(f,qo,_),M(zy,qo,null),e(qo,MGo),e(qo,Ui),e(Ui,EGo),e(Ui,MO),e(MO,CGo),e(Ui,wGo),e(Ui,EO),e(EO,AGo),e(Ui,yGo),e(qo,LGo),e(qo,Qy),e(Qy,xGo),e(Qy,Wme),e(Wme,$Go),e(Qy,kGo),e(qo,SGo),e(qo,dt),M(Wy,dt,null),e(dt,RGo),e(dt,Hme),e(Hme,BGo),e(dt,PGo),e(dt,Ji),e(Ji,IGo),e(Ji,Ume),e(Ume,qGo),e(Ji,NGo),e(Ji,CO),e(CO,jGo),e(Ji,DGo),e(dt,GGo),M(uv,dt,null),e(qo,OGo),e(qo,ao),M(Hy,ao,null),e(ao,VGo),e(ao,Jme),e(Jme,XGo),e(ao,zGo),e(ao,Ra),e(Ra,QGo),e(Ra,Yme),e(Yme,WGo),e(Ra,HGo),e(Ra,Kme),e(Kme,UGo),e(Ra,JGo),e(Ra,Zme),e(Zme,YGo),e(Ra,KGo),e(ao,ZGo),e(ao,ve),e(ve,_v),e(_v,ege),e(ege,eOo),e(_v,oOo),e(_v,wO),e(wO,rOo),e(_v,tOo),e(ve,aOo),e(ve,bv),e(bv,oge),e(oge,nOo),e(bv,sOo),e(bv,AO),e(AO,lOo),e(bv,iOo),e(ve,dOo),e(ve,vv),e(vv,rge),e(rge,cOo),e(vv,fOo),e(vv,yO),e(yO,mOo),e(vv,gOo),e(ve,hOo),e(ve,Ls),e(Ls,tge),e(tge,pOo),e(Ls,uOo),e(Ls,LO),e(LO,_Oo),e(Ls,bOo),e(Ls,xO),e(xO,vOo),e(Ls,FOo),e(ve,TOo),e(ve,Fv),e(Fv,age),e(age,MOo),e(Fv,EOo),e(Fv,$O),e($O,COo),e(Fv,wOo),e(ve,AOo),e(ve,ct),e(ct,nge),e(nge,yOo),e(ct,LOo),e(ct,kO),e(kO,xOo),e(ct,$Oo),e(ct,SO),e(SO,kOo),e(ct,SOo),e(ct,RO),e(RO,ROo),e(ct,BOo),e(ve,POo),e(ve,Tv),e(Tv,sge),e(sge,IOo),e(Tv,qOo),e(Tv,BO),e(BO,NOo),e(Tv,jOo),e(ve,DOo),e(ve,Mv),e(Mv,lge),e(lge,GOo),e(Mv,OOo),e(Mv,PO),e(PO,VOo),e(Mv,XOo),e(ve,zOo),e(ve,Ev),e(Ev,ige),e(ige,QOo),e(Ev,WOo),e(Ev,IO),e(IO,HOo),e(Ev,UOo),e(ve,JOo),e(ve,Cv),e(Cv,dge),e(dge,YOo),e(Cv,KOo),e(Cv,qO),e(qO,ZOo),e(Cv,eVo),e(ve,oVo),e(ve,wv),e(wv,cge),e(cge,rVo),e(wv,tVo),e(wv,NO),e(NO,aVo),e(wv,nVo),e(ve,sVo),e(ve,Av),e(Av,fge),e(fge,lVo),e(Av,iVo),e(Av,jO),e(jO,dVo),e(Av,cVo),e(ve,fVo),e(ve,yv),e(yv,mge),e(mge,mVo),e(yv,gVo),e(yv,DO),e(DO,hVo),e(yv,pVo),e(ao,uVo),e(ao,Lv),e(Lv,_Vo),e(Lv,gge),e(gge,bVo),e(Lv,vVo),e(Lv,hge),e(hge,FVo),e(ao,TVo),M(xv,ao,null),b(f,ABe,_),b(f,Yi,_),e(Yi,$v),e($v,pge),M(Uy,pge,null),e(Yi,MVo),e(Yi,uge),e(uge,EVo),b(f,yBe,_),b(f,No,_),M(Jy,No,null),e(No,CVo),e(No,Ki),e(Ki,wVo),e(Ki,GO),e(GO,AVo),e(Ki,yVo),e(Ki,OO),e(OO,LVo),e(Ki,xVo),e(No,$Vo),e(No,Yy),e(Yy,kVo),e(Yy,_ge),e(_ge,SVo),e(Yy,RVo),e(No,BVo),e(No,ft),M(Ky,ft,null),e(ft,PVo),e(ft,bge),e(bge,IVo),e(ft,qVo),e(ft,Zi),e(Zi,NVo),e(Zi,vge),e(vge,jVo),e(Zi,DVo),e(Zi,VO),e(VO,GVo),e(Zi,OVo),e(ft,VVo),M(kv,ft,null),e(No,XVo),e(No,no),M(Zy,no,null),e(no,zVo),e(no,Fge),e(Fge,QVo),e(no,WVo),e(no,Ba),e(Ba,HVo),e(Ba,Tge),e(Tge,UVo),e(Ba,JVo),e(Ba,Mge),e(Mge,YVo),e(Ba,KVo),e(Ba,Ege),e(Ege,ZVo),e(Ba,eXo),e(no,oXo),e(no,Cge),e(Cge,Sv),e(Sv,wge),e(wge,rXo),e(Sv,tXo),e(Sv,XO),e(XO,aXo),e(Sv,nXo),e(no,sXo),e(no,Rv),e(Rv,lXo),e(Rv,Age),e(Age,iXo),e(Rv,dXo),e(Rv,yge),e(yge,cXo),e(no,fXo),M(Bv,no,null),b(f,LBe,_),b(f,ed,_),e(ed,Pv),e(Pv,Lge),M(eL,Lge,null),e(ed,mXo),e(ed,xge),e(xge,gXo),b(f,xBe,_),b(f,jo,_),M(oL,jo,null),e(jo,hXo),e(jo,od),e(od,pXo),e(od,zO),e(zO,uXo),e(od,_Xo),e(od,QO),e(QO,bXo),e(od,vXo),e(jo,FXo),e(jo,rL),e(rL,TXo),e(rL,$ge),e($ge,MXo),e(rL,EXo),e(jo,CXo),e(jo,mt),M(tL,mt,null),e(mt,wXo),e(mt,kge),e(kge,AXo),e(mt,yXo),e(mt,rd),e(rd,LXo),e(rd,Sge),e(Sge,xXo),e(rd,$Xo),e(rd,WO),e(WO,kXo),e(rd,SXo),e(mt,RXo),M(Iv,mt,null),e(jo,BXo),e(jo,so),M(aL,so,null),e(so,PXo),e(so,Rge),e(Rge,IXo),e(so,qXo),e(so,Pa),e(Pa,NXo),e(Pa,Bge),e(Bge,jXo),e(Pa,DXo),e(Pa,Pge),e(Pge,GXo),e(Pa,OXo),e(Pa,Ige),e(Ige,VXo),e(Pa,XXo),e(so,zXo),e(so,Ne),e(Ne,qv),e(qv,qge),e(qge,QXo),e(qv,WXo),e(qv,HO),e(HO,HXo),e(qv,UXo),e(Ne,JXo),e(Ne,Nv),e(Nv,Nge),e(Nge,YXo),e(Nv,KXo),e(Nv,UO),e(UO,ZXo),e(Nv,ezo),e(Ne,ozo),e(Ne,jv),e(jv,jge),e(jge,rzo),e(jv,tzo),e(jv,JO),e(JO,azo),e(jv,nzo),e(Ne,szo),e(Ne,Dv),e(Dv,Dge),e(Dge,lzo),e(Dv,izo),e(Dv,YO),e(YO,dzo),e(Dv,czo),e(Ne,fzo),e(Ne,Gv),e(Gv,Gge),e(Gge,mzo),e(Gv,gzo),e(Gv,KO),e(KO,hzo),e(Gv,pzo),e(Ne,uzo),e(Ne,Ov),e(Ov,Oge),e(Oge,_zo),e(Ov,bzo),e(Ov,ZO),e(ZO,vzo),e(Ov,Fzo),e(Ne,Tzo),e(Ne,Vv),e(Vv,Vge),e(Vge,Mzo),e(Vv,Ezo),e(Vv,eV),e(eV,Czo),e(Vv,wzo),e(Ne,Azo),e(Ne,Xv),e(Xv,Xge),e(Xge,yzo),e(Xv,Lzo),e(Xv,oV),e(oV,xzo),e(Xv,$zo),e(so,kzo),e(so,zv),e(zv,Szo),e(zv,zge),e(zge,Rzo),e(zv,Bzo),e(zv,Qge),e(Qge,Pzo),e(so,Izo),M(Qv,so,null),b(f,$Be,_),b(f,td,_),e(td,Wv),e(Wv,Wge),M(nL,Wge,null),e(td,qzo),e(td,Hge),e(Hge,Nzo),b(f,kBe,_),b(f,Do,_),M(sL,Do,null),e(Do,jzo),e(Do,ad),e(ad,Dzo),e(ad,rV),e(rV,Gzo),e(ad,Ozo),e(ad,tV),e(tV,Vzo),e(ad,Xzo),e(Do,zzo),e(Do,lL),e(lL,Qzo),e(lL,Uge),e(Uge,Wzo),e(lL,Hzo),e(Do,Uzo),e(Do,gt),M(iL,gt,null),e(gt,Jzo),e(gt,Jge),e(Jge,Yzo),e(gt,Kzo),e(gt,nd),e(nd,Zzo),e(nd,Yge),e(Yge,eQo),e(nd,oQo),e(nd,aV),e(aV,rQo),e(nd,tQo),e(gt,aQo),M(Hv,gt,null),e(Do,nQo),e(Do,lo),M(dL,lo,null),e(lo,sQo),e(lo,Kge),e(Kge,lQo),e(lo,iQo),e(lo,Ia),e(Ia,dQo),e(Ia,Zge),e(Zge,cQo),e(Ia,fQo),e(Ia,ehe),e(ehe,mQo),e(Ia,gQo),e(Ia,ohe),e(ohe,hQo),e(Ia,pQo),e(lo,uQo),e(lo,qa),e(qa,Uv),e(Uv,rhe),e(rhe,_Qo),e(Uv,bQo),e(Uv,nV),e(nV,vQo),e(Uv,FQo),e(qa,TQo),e(qa,Jv),e(Jv,the),e(the,MQo),e(Jv,EQo),e(Jv,sV),e(sV,CQo),e(Jv,wQo),e(qa,AQo),e(qa,Yv),e(Yv,ahe),e(ahe,yQo),e(Yv,LQo),e(Yv,lV),e(lV,xQo),e(Yv,$Qo),e(qa,kQo),e(qa,Kv),e(Kv,nhe),e(nhe,SQo),e(Kv,RQo),e(Kv,iV),e(iV,BQo),e(Kv,PQo),e(lo,IQo),e(lo,Zv),e(Zv,qQo),e(Zv,she),e(she,NQo),e(Zv,jQo),e(Zv,lhe),e(lhe,DQo),e(lo,GQo),M(eF,lo,null),b(f,SBe,_),b(f,sd,_),e(sd,oF),e(oF,ihe),M(cL,ihe,null),e(sd,OQo),e(sd,dhe),e(dhe,VQo),b(f,RBe,_),b(f,Go,_),M(fL,Go,null),e(Go,XQo),e(Go,ld),e(ld,zQo),e(ld,dV),e(dV,QQo),e(ld,WQo),e(ld,cV),e(cV,HQo),e(ld,UQo),e(Go,JQo),e(Go,mL),e(mL,YQo),e(mL,che),e(che,KQo),e(mL,ZQo),e(Go,eWo),e(Go,ht),M(gL,ht,null),e(ht,oWo),e(ht,fhe),e(fhe,rWo),e(ht,tWo),e(ht,id),e(id,aWo),e(id,mhe),e(mhe,nWo),e(id,sWo),e(id,fV),e(fV,lWo),e(id,iWo),e(ht,dWo),M(rF,ht,null),e(Go,cWo),e(Go,io),M(hL,io,null),e(io,fWo),e(io,ghe),e(ghe,mWo),e(io,gWo),e(io,Na),e(Na,hWo),e(Na,hhe),e(hhe,pWo),e(Na,uWo),e(Na,phe),e(phe,_Wo),e(Na,bWo),e(Na,uhe),e(uhe,vWo),e(Na,FWo),e(io,TWo),e(io,ke),e(ke,tF),e(tF,_he),e(_he,MWo),e(tF,EWo),e(tF,mV),e(mV,CWo),e(tF,wWo),e(ke,AWo),e(ke,aF),e(aF,bhe),e(bhe,yWo),e(aF,LWo),e(aF,gV),e(gV,xWo),e(aF,$Wo),e(ke,kWo),e(ke,nF),e(nF,vhe),e(vhe,SWo),e(nF,RWo),e(nF,hV),e(hV,BWo),e(nF,PWo),e(ke,IWo),e(ke,sF),e(sF,Fhe),e(Fhe,qWo),e(sF,NWo),e(sF,pV),e(pV,jWo),e(sF,DWo),e(ke,GWo),e(ke,lF),e(lF,The),e(The,OWo),e(lF,VWo),e(lF,uV),e(uV,XWo),e(lF,zWo),e(ke,QWo),e(ke,iF),e(iF,Mhe),e(Mhe,WWo),e(iF,HWo),e(iF,_V),e(_V,UWo),e(iF,JWo),e(ke,YWo),e(ke,dF),e(dF,Ehe),e(Ehe,KWo),e(dF,ZWo),e(dF,bV),e(bV,eHo),e(dF,oHo),e(ke,rHo),e(ke,cF),e(cF,Che),e(Che,tHo),e(cF,aHo),e(cF,vV),e(vV,nHo),e(cF,sHo),e(ke,lHo),e(ke,fF),e(fF,whe),e(whe,iHo),e(fF,dHo),e(fF,FV),e(FV,cHo),e(fF,fHo),e(io,mHo),e(io,mF),e(mF,gHo),e(mF,Ahe),e(Ahe,hHo),e(mF,pHo),e(mF,yhe),e(yhe,uHo),e(io,_Ho),M(gF,io,null),b(f,BBe,_),b(f,dd,_),e(dd,hF),e(hF,Lhe),M(pL,Lhe,null),e(dd,bHo),e(dd,xhe),e(xhe,vHo),b(f,PBe,_),b(f,Oo,_),M(uL,Oo,null),e(Oo,FHo),e(Oo,cd),e(cd,THo),e(cd,TV),e(TV,MHo),e(cd,EHo),e(cd,MV),e(MV,CHo),e(cd,wHo),e(Oo,AHo),e(Oo,_L),e(_L,yHo),e(_L,$he),e($he,LHo),e(_L,xHo),e(Oo,$Ho),e(Oo,pt),M(bL,pt,null),e(pt,kHo),e(pt,khe),e(khe,SHo),e(pt,RHo),e(pt,fd),e(fd,BHo),e(fd,She),e(She,PHo),e(fd,IHo),e(fd,EV),e(EV,qHo),e(fd,NHo),e(pt,jHo),M(pF,pt,null),e(Oo,DHo),e(Oo,co),M(vL,co,null),e(co,GHo),e(co,Rhe),e(Rhe,OHo),e(co,VHo),e(co,ja),e(ja,XHo),e(ja,Bhe),e(Bhe,zHo),e(ja,QHo),e(ja,Phe),e(Phe,WHo),e(ja,HHo),e(ja,Ihe),e(Ihe,UHo),e(ja,JHo),e(co,YHo),e(co,FL),e(FL,uF),e(uF,qhe),e(qhe,KHo),e(uF,ZHo),e(uF,CV),e(CV,eUo),e(uF,oUo),e(FL,rUo),e(FL,_F),e(_F,Nhe),e(Nhe,tUo),e(_F,aUo),e(_F,wV),e(wV,nUo),e(_F,sUo),e(co,lUo),e(co,bF),e(bF,iUo),e(bF,jhe),e(jhe,dUo),e(bF,cUo),e(bF,Dhe),e(Dhe,fUo),e(co,mUo),M(vF,co,null),b(f,IBe,_),b(f,md,_),e(md,FF),e(FF,Ghe),M(TL,Ghe,null),e(md,gUo),e(md,Ohe),e(Ohe,hUo),b(f,qBe,_),b(f,Vo,_),M(ML,Vo,null),e(Vo,pUo),e(Vo,gd),e(gd,uUo),e(gd,AV),e(AV,_Uo),e(gd,bUo),e(gd,yV),e(yV,vUo),e(gd,FUo),e(Vo,TUo),e(Vo,EL),e(EL,MUo),e(EL,Vhe),e(Vhe,EUo),e(EL,CUo),e(Vo,wUo),e(Vo,ut),M(CL,ut,null),e(ut,AUo),e(ut,Xhe),e(Xhe,yUo),e(ut,LUo),e(ut,hd),e(hd,xUo),e(hd,zhe),e(zhe,$Uo),e(hd,kUo),e(hd,LV),e(LV,SUo),e(hd,RUo),e(ut,BUo),M(TF,ut,null),e(Vo,PUo),e(Vo,fo),M(wL,fo,null),e(fo,IUo),e(fo,Qhe),e(Qhe,qUo),e(fo,NUo),e(fo,Da),e(Da,jUo),e(Da,Whe),e(Whe,DUo),e(Da,GUo),e(Da,Hhe),e(Hhe,OUo),e(Da,VUo),e(Da,Uhe),e(Uhe,XUo),e(Da,zUo),e(fo,QUo),e(fo,Ga),e(Ga,MF),e(MF,Jhe),e(Jhe,WUo),e(MF,HUo),e(MF,xV),e(xV,UUo),e(MF,JUo),e(Ga,YUo),e(Ga,EF),e(EF,Yhe),e(Yhe,KUo),e(EF,ZUo),e(EF,$V),e($V,eJo),e(EF,oJo),e(Ga,rJo),e(Ga,CF),e(CF,Khe),e(Khe,tJo),e(CF,aJo),e(CF,kV),e(kV,nJo),e(CF,sJo),e(Ga,lJo),e(Ga,wF),e(wF,Zhe),e(Zhe,iJo),e(wF,dJo),e(wF,SV),e(SV,cJo),e(wF,fJo),e(fo,mJo),e(fo,AF),e(AF,gJo),e(AF,epe),e(epe,hJo),e(AF,pJo),e(AF,ope),e(ope,uJo),e(fo,_Jo),M(yF,fo,null),b(f,NBe,_),b(f,pd,_),e(pd,LF),e(LF,rpe),M(AL,rpe,null),e(pd,bJo),e(pd,tpe),e(tpe,vJo),b(f,jBe,_),b(f,Xo,_),M(yL,Xo,null),e(Xo,FJo),e(Xo,ud),e(ud,TJo),e(ud,RV),e(RV,MJo),e(ud,EJo),e(ud,BV),e(BV,CJo),e(ud,wJo),e(Xo,AJo),e(Xo,LL),e(LL,yJo),e(LL,ape),e(ape,LJo),e(LL,xJo),e(Xo,$Jo),e(Xo,_t),M(xL,_t,null),e(_t,kJo),e(_t,npe),e(npe,SJo),e(_t,RJo),e(_t,_d),e(_d,BJo),e(_d,spe),e(spe,PJo),e(_d,IJo),e(_d,PV),e(PV,qJo),e(_d,NJo),e(_t,jJo),M(xF,_t,null),e(Xo,DJo),e(Xo,mo),M($L,mo,null),e(mo,GJo),e(mo,lpe),e(lpe,OJo),e(mo,VJo),e(mo,Oa),e(Oa,XJo),e(Oa,ipe),e(ipe,zJo),e(Oa,QJo),e(Oa,dpe),e(dpe,WJo),e(Oa,HJo),e(Oa,cpe),e(cpe,UJo),e(Oa,JJo),e(mo,YJo),e(mo,bd),e(bd,$F),e($F,fpe),e(fpe,KJo),e($F,ZJo),e($F,IV),e(IV,eYo),e($F,oYo),e(bd,rYo),e(bd,kF),e(kF,mpe),e(mpe,tYo),e(kF,aYo),e(kF,qV),e(qV,nYo),e(kF,sYo),e(bd,lYo),e(bd,SF),e(SF,gpe),e(gpe,iYo),e(SF,dYo),e(SF,NV),e(NV,cYo),e(SF,fYo),e(mo,mYo),e(mo,RF),e(RF,gYo),e(RF,hpe),e(hpe,hYo),e(RF,pYo),e(RF,ppe),e(ppe,uYo),e(mo,_Yo),M(BF,mo,null),b(f,DBe,_),b(f,vd,_),e(vd,PF),e(PF,upe),M(kL,upe,null),e(vd,bYo),e(vd,_pe),e(_pe,vYo),b(f,GBe,_),b(f,zo,_),M(SL,zo,null),e(zo,FYo),e(zo,Fd),e(Fd,TYo),e(Fd,jV),e(jV,MYo),e(Fd,EYo),e(Fd,DV),e(DV,CYo),e(Fd,wYo),e(zo,AYo),e(zo,RL),e(RL,yYo),e(RL,bpe),e(bpe,LYo),e(RL,xYo),e(zo,$Yo),e(zo,bt),M(BL,bt,null),e(bt,kYo),e(bt,vpe),e(vpe,SYo),e(bt,RYo),e(bt,Td),e(Td,BYo),e(Td,Fpe),e(Fpe,PYo),e(Td,IYo),e(Td,GV),e(GV,qYo),e(Td,NYo),e(bt,jYo),M(IF,bt,null),e(zo,DYo),e(zo,go),M(PL,go,null),e(go,GYo),e(go,Tpe),e(Tpe,OYo),e(go,VYo),e(go,Va),e(Va,XYo),e(Va,Mpe),e(Mpe,zYo),e(Va,QYo),e(Va,Epe),e(Epe,WYo),e(Va,HYo),e(Va,Cpe),e(Cpe,UYo),e(Va,JYo),e(go,YYo),e(go,wpe),e(wpe,qF),e(qF,Ape),e(Ape,KYo),e(qF,ZYo),e(qF,OV),e(OV,eKo),e(qF,oKo),e(go,rKo),e(go,NF),e(NF,tKo),e(NF,ype),e(ype,aKo),e(NF,nKo),e(NF,Lpe),e(Lpe,sKo),e(go,lKo),M(jF,go,null),b(f,OBe,_),b(f,Md,_),e(Md,DF),e(DF,xpe),M(IL,xpe,null),e(Md,iKo),e(Md,$pe),e($pe,dKo),b(f,VBe,_),b(f,Qo,_),M(qL,Qo,null),e(Qo,cKo),e(Qo,Ed),e(Ed,fKo),e(Ed,VV),e(VV,mKo),e(Ed,gKo),e(Ed,XV),e(XV,hKo),e(Ed,pKo),e(Qo,uKo),e(Qo,NL),e(NL,_Ko),e(NL,kpe),e(kpe,bKo),e(NL,vKo),e(Qo,FKo),e(Qo,vt),M(jL,vt,null),e(vt,TKo),e(vt,Spe),e(Spe,MKo),e(vt,EKo),e(vt,Cd),e(Cd,CKo),e(Cd,Rpe),e(Rpe,wKo),e(Cd,AKo),e(Cd,zV),e(zV,yKo),e(Cd,LKo),e(vt,xKo),M(GF,vt,null),e(Qo,$Ko),e(Qo,ho),M(DL,ho,null),e(ho,kKo),e(ho,Bpe),e(Bpe,SKo),e(ho,RKo),e(ho,Xa),e(Xa,BKo),e(Xa,Ppe),e(Ppe,PKo),e(Xa,IKo),e(Xa,Ipe),e(Ipe,qKo),e(Xa,NKo),e(Xa,qpe),e(qpe,jKo),e(Xa,DKo),e(ho,GKo),e(ho,Npe),e(Npe,OF),e(OF,jpe),e(jpe,OKo),e(OF,VKo),e(OF,QV),e(QV,XKo),e(OF,zKo),e(ho,QKo),e(ho,VF),e(VF,WKo),e(VF,Dpe),e(Dpe,HKo),e(VF,UKo),e(VF,Gpe),e(Gpe,JKo),e(ho,YKo),M(XF,ho,null),b(f,XBe,_),b(f,wd,_),e(wd,zF),e(zF,Ope),M(GL,Ope,null),e(wd,KKo),e(wd,Vpe),e(Vpe,ZKo),b(f,zBe,_),b(f,Wo,_),M(OL,Wo,null),e(Wo,eZo),e(Wo,Ad),e(Ad,oZo),e(Ad,WV),e(WV,rZo),e(Ad,tZo),e(Ad,HV),e(HV,aZo),e(Ad,nZo),e(Wo,sZo),e(Wo,VL),e(VL,lZo),e(VL,Xpe),e(Xpe,iZo),e(VL,dZo),e(Wo,cZo),e(Wo,Ft),M(XL,Ft,null),e(Ft,fZo),e(Ft,zpe),e(zpe,mZo),e(Ft,gZo),e(Ft,yd),e(yd,hZo),e(yd,Qpe),e(Qpe,pZo),e(yd,uZo),e(yd,UV),e(UV,_Zo),e(yd,bZo),e(Ft,vZo),M(QF,Ft,null),e(Wo,FZo),e(Wo,po),M(zL,po,null),e(po,TZo),e(po,Wpe),e(Wpe,MZo),e(po,EZo),e(po,za),e(za,CZo),e(za,Hpe),e(Hpe,wZo),e(za,AZo),e(za,Upe),e(Upe,yZo),e(za,LZo),e(za,Jpe),e(Jpe,xZo),e(za,$Zo),e(po,kZo),e(po,Qa),e(Qa,WF),e(WF,Ype),e(Ype,SZo),e(WF,RZo),e(WF,JV),e(JV,BZo),e(WF,PZo),e(Qa,IZo),e(Qa,HF),e(HF,Kpe),e(Kpe,qZo),e(HF,NZo),e(HF,YV),e(YV,jZo),e(HF,DZo),e(Qa,GZo),e(Qa,UF),e(UF,Zpe),e(Zpe,OZo),e(UF,VZo),e(UF,KV),e(KV,XZo),e(UF,zZo),e(Qa,QZo),e(Qa,JF),e(JF,eue),e(eue,WZo),e(JF,HZo),e(JF,ZV),e(ZV,UZo),e(JF,JZo),e(po,YZo),e(po,YF),e(YF,KZo),e(YF,oue),e(oue,ZZo),e(YF,eer),e(YF,rue),e(rue,oer),e(po,rer),M(KF,po,null),b(f,QBe,_),b(f,Ld,_),e(Ld,ZF),e(ZF,tue),M(QL,tue,null),e(Ld,ter),e(Ld,aue),e(aue,aer),b(f,WBe,_),b(f,Ho,_),M(WL,Ho,null),e(Ho,ner),e(Ho,xd),e(xd,ser),e(xd,eX),e(eX,ler),e(xd,ier),e(xd,oX),e(oX,der),e(xd,cer),e(Ho,fer),e(Ho,HL),e(HL,mer),e(HL,nue),e(nue,ger),e(HL,her),e(Ho,per),e(Ho,Tt),M(UL,Tt,null),e(Tt,uer),e(Tt,sue),e(sue,_er),e(Tt,ber),e(Tt,$d),e($d,ver),e($d,lue),e(lue,Fer),e($d,Ter),e($d,rX),e(rX,Mer),e($d,Eer),e(Tt,Cer),M(e0,Tt,null),e(Ho,wer),e(Ho,uo),M(JL,uo,null),e(uo,Aer),e(uo,iue),e(iue,yer),e(uo,Ler),e(uo,Wa),e(Wa,xer),e(Wa,due),e(due,$er),e(Wa,ker),e(Wa,cue),e(cue,Ser),e(Wa,Rer),e(Wa,fue),e(fue,Ber),e(Wa,Per),e(uo,Ier),e(uo,mue),e(mue,o0),e(o0,gue),e(gue,qer),e(o0,Ner),e(o0,tX),e(tX,jer),e(o0,Der),e(uo,Ger),e(uo,r0),e(r0,Oer),e(r0,hue),e(hue,Ver),e(r0,Xer),e(r0,pue),e(pue,zer),e(uo,Qer),M(t0,uo,null),b(f,HBe,_),b(f,kd,_),e(kd,a0),e(a0,uue),M(YL,uue,null),e(kd,Wer),e(kd,_ue),e(_ue,Her),b(f,UBe,_),b(f,Uo,_),M(KL,Uo,null),e(Uo,Uer),e(Uo,Sd),e(Sd,Jer),e(Sd,aX),e(aX,Yer),e(Sd,Ker),e(Sd,nX),e(nX,Zer),e(Sd,eor),e(Uo,oor),e(Uo,ZL),e(ZL,ror),e(ZL,bue),e(bue,tor),e(ZL,aor),e(Uo,nor),e(Uo,Mt),M(e8,Mt,null),e(Mt,sor),e(Mt,vue),e(vue,lor),e(Mt,ior),e(Mt,Rd),e(Rd,dor),e(Rd,Fue),e(Fue,cor),e(Rd,mor),e(Rd,sX),e(sX,gor),e(Rd,hor),e(Mt,por),M(n0,Mt,null),e(Uo,uor),e(Uo,Mr),M(o8,Mr,null),e(Mr,_or),e(Mr,Tue),e(Tue,bor),e(Mr,vor),e(Mr,Ha),e(Ha,For),e(Ha,Mue),e(Mue,Tor),e(Ha,Mor),e(Ha,Eue),e(Eue,Eor),e(Ha,Cor),e(Ha,Cue),e(Cue,wor),e(Ha,Aor),e(Mr,yor),e(Mr,j),e(j,s0),e(s0,wue),e(wue,Lor),e(s0,xor),e(s0,lX),e(lX,$or),e(s0,kor),e(j,Sor),e(j,l0),e(l0,Aue),e(Aue,Ror),e(l0,Bor),e(l0,iX),e(iX,Por),e(l0,Ior),e(j,qor),e(j,i0),e(i0,yue),e(yue,Nor),e(i0,jor),e(i0,dX),e(dX,Dor),e(i0,Gor),e(j,Oor),e(j,d0),e(d0,Lue),e(Lue,Vor),e(d0,Xor),e(d0,cX),e(cX,zor),e(d0,Qor),e(j,Wor),e(j,c0),e(c0,xue),e(xue,Hor),e(c0,Uor),e(c0,fX),e(fX,Jor),e(c0,Yor),e(j,Kor),e(j,f0),e(f0,$ue),e($ue,Zor),e(f0,err),e(f0,mX),e(mX,orr),e(f0,rrr),e(j,trr),e(j,m0),e(m0,kue),e(kue,arr),e(m0,nrr),e(m0,gX),e(gX,srr),e(m0,lrr),e(j,irr),e(j,g0),e(g0,Sue),e(Sue,drr),e(g0,crr),e(g0,hX),e(hX,frr),e(g0,mrr),e(j,grr),e(j,h0),e(h0,Rue),e(Rue,hrr),e(h0,prr),e(h0,pX),e(pX,urr),e(h0,_rr),e(j,brr),e(j,p0),e(p0,Bue),e(Bue,vrr),e(p0,Frr),e(p0,uX),e(uX,Trr),e(p0,Mrr),e(j,Err),e(j,u0),e(u0,Pue),e(Pue,Crr),e(u0,wrr),e(u0,_X),e(_X,Arr),e(u0,yrr),e(j,Lrr),e(j,_0),e(_0,Iue),e(Iue,xrr),e(_0,$rr),e(_0,bX),e(bX,krr),e(_0,Srr),e(j,Rrr),e(j,b0),e(b0,que),e(que,Brr),e(b0,Prr),e(b0,vX),e(vX,Irr),e(b0,qrr),e(j,Nrr),e(j,v0),e(v0,Nue),e(Nue,jrr),e(v0,Drr),e(v0,FX),e(FX,Grr),e(v0,Orr),e(j,Vrr),e(j,F0),e(F0,jue),e(jue,Xrr),e(F0,zrr),e(F0,TX),e(TX,Qrr),e(F0,Wrr),e(j,Hrr),e(j,T0),e(T0,Due),e(Due,Urr),e(T0,Jrr),e(T0,MX),e(MX,Yrr),e(T0,Krr),e(j,Zrr),e(j,xs),e(xs,Gue),e(Gue,etr),e(xs,otr),e(xs,EX),e(EX,rtr),e(xs,ttr),e(xs,CX),e(CX,atr),e(xs,ntr),e(j,str),e(j,M0),e(M0,Oue),e(Oue,ltr),e(M0,itr),e(M0,wX),e(wX,dtr),e(M0,ctr),e(j,ftr),e(j,E0),e(E0,Vue),e(Vue,mtr),e(E0,gtr),e(E0,AX),e(AX,htr),e(E0,ptr),e(j,utr),e(j,C0),e(C0,Xue),e(Xue,_tr),e(C0,btr),e(C0,yX),e(yX,vtr),e(C0,Ftr),e(j,Ttr),e(j,w0),e(w0,zue),e(zue,Mtr),e(w0,Etr),e(w0,LX),e(LX,Ctr),e(w0,wtr),e(j,Atr),e(j,A0),e(A0,Que),e(Que,ytr),e(A0,Ltr),e(A0,xX),e(xX,xtr),e(A0,$tr),e(j,ktr),e(j,y0),e(y0,Wue),e(Wue,Str),e(y0,Rtr),e(y0,$X),e($X,Btr),e(y0,Ptr),e(j,Itr),e(j,L0),e(L0,Hue),e(Hue,qtr),e(L0,Ntr),e(L0,kX),e(kX,jtr),e(L0,Dtr),e(j,Gtr),e(j,x0),e(x0,Uue),e(Uue,Otr),e(x0,Vtr),e(x0,SX),e(SX,Xtr),e(x0,ztr),e(j,Qtr),e(j,$0),e($0,Jue),e(Jue,Wtr),e($0,Htr),e($0,RX),e(RX,Utr),e($0,Jtr),e(j,Ytr),e(j,k0),e(k0,Yue),e(Yue,Ktr),e(k0,Ztr),e(k0,BX),e(BX,ear),e(k0,oar),e(j,rar),e(j,S0),e(S0,Kue),e(Kue,tar),e(S0,aar),e(S0,PX),e(PX,nar),e(S0,sar),e(j,lar),e(j,R0),e(R0,Zue),e(Zue,iar),e(R0,dar),e(R0,IX),e(IX,car),e(R0,far),e(j,mar),e(j,B0),e(B0,e_e),e(e_e,gar),e(B0,har),e(B0,qX),e(qX,par),e(B0,uar),e(j,_ar),e(j,P0),e(P0,o_e),e(o_e,bar),e(P0,Far),e(P0,NX),e(NX,Tar),e(P0,Mar),e(j,Ear),e(j,I0),e(I0,r_e),e(r_e,Car),e(I0,war),e(I0,jX),e(jX,Aar),e(I0,yar),e(j,Lar),e(j,q0),e(q0,t_e),e(t_e,xar),e(q0,$ar),e(q0,DX),e(DX,kar),e(q0,Sar),e(j,Rar),e(j,N0),e(N0,a_e),e(a_e,Bar),e(N0,Par),e(N0,GX),e(GX,Iar),e(N0,qar),e(j,Nar),e(j,j0),e(j0,n_e),e(n_e,jar),e(j0,Dar),e(j0,OX),e(OX,Gar),e(j0,Oar),e(j,Var),e(j,D0),e(D0,s_e),e(s_e,Xar),e(D0,zar),e(D0,VX),e(VX,Qar),e(D0,War),e(j,Har),e(j,G0),e(G0,l_e),e(l_e,Uar),e(G0,Jar),e(G0,XX),e(XX,Yar),e(G0,Kar),e(j,Zar),e(j,O0),e(O0,i_e),e(i_e,enr),e(O0,onr),e(O0,zX),e(zX,rnr),e(O0,tnr),e(j,anr),e(j,V0),e(V0,d_e),e(d_e,nnr),e(V0,snr),e(V0,QX),e(QX,lnr),e(V0,inr),e(j,dnr),e(j,X0),e(X0,c_e),e(c_e,cnr),e(X0,fnr),e(X0,WX),e(WX,mnr),e(X0,gnr),e(j,hnr),e(j,z0),e(z0,f_e),e(f_e,pnr),e(z0,unr),e(z0,HX),e(HX,_nr),e(z0,bnr),e(j,vnr),e(j,Q0),e(Q0,m_e),e(m_e,Fnr),e(Q0,Tnr),e(Q0,UX),e(UX,Mnr),e(Q0,Enr),e(j,Cnr),e(j,W0),e(W0,g_e),e(g_e,wnr),e(W0,Anr),e(W0,JX),e(JX,ynr),e(W0,Lnr),e(j,xnr),e(j,H0),e(H0,h_e),e(h_e,$nr),e(H0,knr),e(H0,YX),e(YX,Snr),e(H0,Rnr),e(Mr,Bnr),M(U0,Mr,null),b(f,JBe,_),b(f,Bd,_),e(Bd,J0),e(J0,p_e),M(r8,p_e,null),e(Bd,Pnr),e(Bd,u_e),e(u_e,Inr),b(f,YBe,_),b(f,Jo,_),M(t8,Jo,null),e(Jo,qnr),e(Jo,Pd),e(Pd,Nnr),e(Pd,KX),e(KX,jnr),e(Pd,Dnr),e(Pd,ZX),e(ZX,Gnr),e(Pd,Onr),e(Jo,Vnr),e(Jo,a8),e(a8,Xnr),e(a8,__e),e(__e,znr),e(a8,Qnr),e(Jo,Wnr),e(Jo,Et),M(n8,Et,null),e(Et,Hnr),e(Et,b_e),e(b_e,Unr),e(Et,Jnr),e(Et,Id),e(Id,Ynr),e(Id,v_e),e(v_e,Knr),e(Id,Znr),e(Id,ez),e(ez,esr),e(Id,osr),e(Et,rsr),M(Y0,Et,null),e(Jo,tsr),e(Jo,Er),M(s8,Er,null),e(Er,asr),e(Er,F_e),e(F_e,nsr),e(Er,ssr),e(Er,Ua),e(Ua,lsr),e(Ua,T_e),e(T_e,isr),e(Ua,dsr),e(Ua,M_e),e(M_e,csr),e(Ua,fsr),e(Ua,E_e),e(E_e,msr),e(Ua,gsr),e(Er,hsr),e(Er,ne),e(ne,K0),e(K0,C_e),e(C_e,psr),e(K0,usr),e(K0,oz),e(oz,_sr),e(K0,bsr),e(ne,vsr),e(ne,Z0),e(Z0,w_e),e(w_e,Fsr),e(Z0,Tsr),e(Z0,rz),e(rz,Msr),e(Z0,Esr),e(ne,Csr),e(ne,e6),e(e6,A_e),e(A_e,wsr),e(e6,Asr),e(e6,tz),e(tz,ysr),e(e6,Lsr),e(ne,xsr),e(ne,o6),e(o6,y_e),e(y_e,$sr),e(o6,ksr),e(o6,az),e(az,Ssr),e(o6,Rsr),e(ne,Bsr),e(ne,r6),e(r6,L_e),e(L_e,Psr),e(r6,Isr),e(r6,nz),e(nz,qsr),e(r6,Nsr),e(ne,jsr),e(ne,t6),e(t6,x_e),e(x_e,Dsr),e(t6,Gsr),e(t6,sz),e(sz,Osr),e(t6,Vsr),e(ne,Xsr),e(ne,a6),e(a6,$_e),e($_e,zsr),e(a6,Qsr),e(a6,lz),e(lz,Wsr),e(a6,Hsr),e(ne,Usr),e(ne,n6),e(n6,k_e),e(k_e,Jsr),e(n6,Ysr),e(n6,iz),e(iz,Ksr),e(n6,Zsr),e(ne,elr),e(ne,s6),e(s6,S_e),e(S_e,olr),e(s6,rlr),e(s6,dz),e(dz,tlr),e(s6,alr),e(ne,nlr),e(ne,l6),e(l6,R_e),e(R_e,slr),e(l6,llr),e(l6,cz),e(cz,ilr),e(l6,dlr),e(ne,clr),e(ne,i6),e(i6,B_e),e(B_e,flr),e(i6,mlr),e(i6,fz),e(fz,glr),e(i6,hlr),e(ne,plr),e(ne,d6),e(d6,P_e),e(P_e,ulr),e(d6,_lr),e(d6,mz),e(mz,blr),e(d6,vlr),e(ne,Flr),e(ne,c6),e(c6,I_e),e(I_e,Tlr),e(c6,Mlr),e(c6,gz),e(gz,Elr),e(c6,Clr),e(ne,wlr),e(ne,f6),e(f6,q_e),e(q_e,Alr),e(f6,ylr),e(f6,hz),e(hz,Llr),e(f6,xlr),e(ne,$lr),e(ne,m6),e(m6,N_e),e(N_e,klr),e(m6,Slr),e(m6,pz),e(pz,Rlr),e(m6,Blr),e(ne,Plr),e(ne,g6),e(g6,j_e),e(j_e,Ilr),e(g6,qlr),e(g6,uz),e(uz,Nlr),e(g6,jlr),e(ne,Dlr),e(ne,h6),e(h6,D_e),e(D_e,Glr),e(h6,Olr),e(h6,_z),e(_z,Vlr),e(h6,Xlr),e(ne,zlr),e(ne,p6),e(p6,G_e),e(G_e,Qlr),e(p6,Wlr),e(p6,bz),e(bz,Hlr),e(p6,Ulr),e(ne,Jlr),e(ne,u6),e(u6,O_e),e(O_e,Ylr),e(u6,Klr),e(u6,vz),e(vz,Zlr),e(u6,eir),e(ne,oir),e(ne,_6),e(_6,V_e),e(V_e,rir),e(_6,tir),e(_6,Fz),e(Fz,air),e(_6,nir),e(ne,sir),e(ne,b6),e(b6,X_e),e(X_e,lir),e(b6,iir),e(b6,Tz),e(Tz,dir),e(b6,cir),e(ne,fir),e(ne,v6),e(v6,z_e),e(z_e,mir),e(v6,gir),e(v6,Mz),e(Mz,hir),e(v6,pir),e(ne,uir),e(ne,F6),e(F6,Q_e),e(Q_e,_ir),e(F6,bir),e(F6,Ez),e(Ez,vir),e(F6,Fir),e(Er,Tir),M(T6,Er,null),b(f,KBe,_),b(f,qd,_),e(qd,M6),e(M6,W_e),M(l8,W_e,null),e(qd,Mir),e(qd,H_e),e(H_e,Eir),b(f,ZBe,_),b(f,Yo,_),M(i8,Yo,null),e(Yo,Cir),e(Yo,Nd),e(Nd,wir),e(Nd,Cz),e(Cz,Air),e(Nd,yir),e(Nd,wz),e(wz,Lir),e(Nd,xir),e(Yo,$ir),e(Yo,d8),e(d8,kir),e(d8,U_e),e(U_e,Sir),e(d8,Rir),e(Yo,Bir),e(Yo,Ct),M(c8,Ct,null),e(Ct,Pir),e(Ct,J_e),e(J_e,Iir),e(Ct,qir),e(Ct,jd),e(jd,Nir),e(jd,Y_e),e(Y_e,jir),e(jd,Dir),e(jd,Az),e(Az,Gir),e(jd,Oir),e(Ct,Vir),M(E6,Ct,null),e(Yo,Xir),e(Yo,Cr),M(f8,Cr,null),e(Cr,zir),e(Cr,K_e),e(K_e,Qir),e(Cr,Wir),e(Cr,Ja),e(Ja,Hir),e(Ja,Z_e),e(Z_e,Uir),e(Ja,Jir),e(Ja,e2e),e(e2e,Yir),e(Ja,Kir),e(Ja,o2e),e(o2e,Zir),e(Ja,edr),e(Cr,odr),e(Cr,Te),e(Te,C6),e(C6,r2e),e(r2e,rdr),e(C6,tdr),e(C6,yz),e(yz,adr),e(C6,ndr),e(Te,sdr),e(Te,w6),e(w6,t2e),e(t2e,ldr),e(w6,idr),e(w6,Lz),e(Lz,ddr),e(w6,cdr),e(Te,fdr),e(Te,A6),e(A6,a2e),e(a2e,mdr),e(A6,gdr),e(A6,xz),e(xz,hdr),e(A6,pdr),e(Te,udr),e(Te,y6),e(y6,n2e),e(n2e,_dr),e(y6,bdr),e(y6,$z),e($z,vdr),e(y6,Fdr),e(Te,Tdr),e(Te,L6),e(L6,s2e),e(s2e,Mdr),e(L6,Edr),e(L6,kz),e(kz,Cdr),e(L6,wdr),e(Te,Adr),e(Te,x6),e(x6,l2e),e(l2e,ydr),e(x6,Ldr),e(x6,Sz),e(Sz,xdr),e(x6,$dr),e(Te,kdr),e(Te,$6),e($6,i2e),e(i2e,Sdr),e($6,Rdr),e($6,Rz),e(Rz,Bdr),e($6,Pdr),e(Te,Idr),e(Te,k6),e(k6,d2e),e(d2e,qdr),e(k6,Ndr),e(k6,Bz),e(Bz,jdr),e(k6,Ddr),e(Te,Gdr),e(Te,S6),e(S6,c2e),e(c2e,Odr),e(S6,Vdr),e(S6,Pz),e(Pz,Xdr),e(S6,zdr),e(Te,Qdr),e(Te,R6),e(R6,f2e),e(f2e,Wdr),e(R6,Hdr),e(R6,Iz),e(Iz,Udr),e(R6,Jdr),e(Te,Ydr),e(Te,B6),e(B6,m2e),e(m2e,Kdr),e(B6,Zdr),e(B6,qz),e(qz,ecr),e(B6,ocr),e(Te,rcr),e(Te,P6),e(P6,g2e),e(g2e,tcr),e(P6,acr),e(P6,Nz),e(Nz,ncr),e(P6,scr),e(Cr,lcr),M(I6,Cr,null),b(f,ePe,_),b(f,Dd,_),e(Dd,q6),e(q6,h2e),M(m8,h2e,null),e(Dd,icr),e(Dd,p2e),e(p2e,dcr),b(f,oPe,_),b(f,Ko,_),M(g8,Ko,null),e(Ko,ccr),e(Ko,Gd),e(Gd,fcr),e(Gd,jz),e(jz,mcr),e(Gd,gcr),e(Gd,Dz),e(Dz,hcr),e(Gd,pcr),e(Ko,ucr),e(Ko,h8),e(h8,_cr),e(h8,u2e),e(u2e,bcr),e(h8,vcr),e(Ko,Fcr),e(Ko,wt),M(p8,wt,null),e(wt,Tcr),e(wt,_2e),e(_2e,Mcr),e(wt,Ecr),e(wt,Od),e(Od,Ccr),e(Od,b2e),e(b2e,wcr),e(Od,Acr),e(Od,Gz),e(Gz,ycr),e(Od,Lcr),e(wt,xcr),M(N6,wt,null),e(Ko,$cr),e(Ko,wr),M(u8,wr,null),e(wr,kcr),e(wr,v2e),e(v2e,Scr),e(wr,Rcr),e(wr,Ya),e(Ya,Bcr),e(Ya,F2e),e(F2e,Pcr),e(Ya,Icr),e(Ya,T2e),e(T2e,qcr),e(Ya,Ncr),e(Ya,M2e),e(M2e,jcr),e(Ya,Dcr),e(wr,Gcr),e(wr,_8),e(_8,j6),e(j6,E2e),e(E2e,Ocr),e(j6,Vcr),e(j6,Oz),e(Oz,Xcr),e(j6,zcr),e(_8,Qcr),e(_8,D6),e(D6,C2e),e(C2e,Wcr),e(D6,Hcr),e(D6,Vz),e(Vz,Ucr),e(D6,Jcr),e(wr,Ycr),M(G6,wr,null),b(f,rPe,_),b(f,Vd,_),e(Vd,O6),e(O6,w2e),M(b8,w2e,null),e(Vd,Kcr),e(Vd,A2e),e(A2e,Zcr),b(f,tPe,_),b(f,Zo,_),M(v8,Zo,null),e(Zo,efr),e(Zo,Xd),e(Xd,ofr),e(Xd,Xz),e(Xz,rfr),e(Xd,tfr),e(Xd,zz),e(zz,afr),e(Xd,nfr),e(Zo,sfr),e(Zo,F8),e(F8,lfr),e(F8,y2e),e(y2e,ifr),e(F8,dfr),e(Zo,cfr),e(Zo,At),M(T8,At,null),e(At,ffr),e(At,L2e),e(L2e,mfr),e(At,gfr),e(At,zd),e(zd,hfr),e(zd,x2e),e(x2e,pfr),e(zd,ufr),e(zd,Qz),e(Qz,_fr),e(zd,bfr),e(At,vfr),M(V6,At,null),e(Zo,Ffr),e(Zo,Ar),M(M8,Ar,null),e(Ar,Tfr),e(Ar,$2e),e($2e,Mfr),e(Ar,Efr),e(Ar,Ka),e(Ka,Cfr),e(Ka,k2e),e(k2e,wfr),e(Ka,Afr),e(Ka,S2e),e(S2e,yfr),e(Ka,Lfr),e(Ka,R2e),e(R2e,xfr),e(Ka,$fr),e(Ar,kfr),e(Ar,ie),e(ie,X6),e(X6,B2e),e(B2e,Sfr),e(X6,Rfr),e(X6,Wz),e(Wz,Bfr),e(X6,Pfr),e(ie,Ifr),e(ie,z6),e(z6,P2e),e(P2e,qfr),e(z6,Nfr),e(z6,Hz),e(Hz,jfr),e(z6,Dfr),e(ie,Gfr),e(ie,Q6),e(Q6,I2e),e(I2e,Ofr),e(Q6,Vfr),e(Q6,Uz),e(Uz,Xfr),e(Q6,zfr),e(ie,Qfr),e(ie,W6),e(W6,q2e),e(q2e,Wfr),e(W6,Hfr),e(W6,Jz),e(Jz,Ufr),e(W6,Jfr),e(ie,Yfr),e(ie,H6),e(H6,N2e),e(N2e,Kfr),e(H6,Zfr),e(H6,Yz),e(Yz,emr),e(H6,omr),e(ie,rmr),e(ie,U6),e(U6,j2e),e(j2e,tmr),e(U6,amr),e(U6,Kz),e(Kz,nmr),e(U6,smr),e(ie,lmr),e(ie,J6),e(J6,D2e),e(D2e,imr),e(J6,dmr),e(J6,Zz),e(Zz,cmr),e(J6,fmr),e(ie,mmr),e(ie,Y6),e(Y6,G2e),e(G2e,gmr),e(Y6,hmr),e(Y6,eQ),e(eQ,pmr),e(Y6,umr),e(ie,_mr),e(ie,K6),e(K6,O2e),e(O2e,bmr),e(K6,vmr),e(K6,oQ),e(oQ,Fmr),e(K6,Tmr),e(ie,Mmr),e(ie,Z6),e(Z6,V2e),e(V2e,Emr),e(Z6,Cmr),e(Z6,rQ),e(rQ,wmr),e(Z6,Amr),e(ie,ymr),e(ie,eT),e(eT,X2e),e(X2e,Lmr),e(eT,xmr),e(eT,tQ),e(tQ,$mr),e(eT,kmr),e(ie,Smr),e(ie,oT),e(oT,z2e),e(z2e,Rmr),e(oT,Bmr),e(oT,aQ),e(aQ,Pmr),e(oT,Imr),e(ie,qmr),e(ie,rT),e(rT,Q2e),e(Q2e,Nmr),e(rT,jmr),e(rT,nQ),e(nQ,Dmr),e(rT,Gmr),e(ie,Omr),e(ie,tT),e(tT,W2e),e(W2e,Vmr),e(tT,Xmr),e(tT,sQ),e(sQ,zmr),e(tT,Qmr),e(ie,Wmr),e(ie,aT),e(aT,H2e),e(H2e,Hmr),e(aT,Umr),e(aT,lQ),e(lQ,Jmr),e(aT,Ymr),e(ie,Kmr),e(ie,nT),e(nT,U2e),e(U2e,Zmr),e(nT,egr),e(nT,iQ),e(iQ,ogr),e(nT,rgr),e(ie,tgr),e(ie,sT),e(sT,J2e),e(J2e,agr),e(sT,ngr),e(sT,dQ),e(dQ,sgr),e(sT,lgr),e(ie,igr),e(ie,lT),e(lT,Y2e),e(Y2e,dgr),e(lT,cgr),e(lT,cQ),e(cQ,fgr),e(lT,mgr),e(ie,ggr),e(ie,iT),e(iT,K2e),e(K2e,hgr),e(iT,pgr),e(iT,fQ),e(fQ,ugr),e(iT,_gr),e(ie,bgr),e(ie,dT),e(dT,Z2e),e(Z2e,vgr),e(dT,Fgr),e(dT,mQ),e(mQ,Tgr),e(dT,Mgr),e(Ar,Egr),M(cT,Ar,null),b(f,aPe,_),b(f,Qd,_),e(Qd,fT),e(fT,e1e),M(E8,e1e,null),e(Qd,Cgr),e(Qd,o1e),e(o1e,wgr),b(f,nPe,_),b(f,er,_),M(C8,er,null),e(er,Agr),e(er,Wd),e(Wd,ygr),e(Wd,gQ),e(gQ,Lgr),e(Wd,xgr),e(Wd,hQ),e(hQ,$gr),e(Wd,kgr),e(er,Sgr),e(er,w8),e(w8,Rgr),e(w8,r1e),e(r1e,Bgr),e(w8,Pgr),e(er,Igr),e(er,yt),M(A8,yt,null),e(yt,qgr),e(yt,t1e),e(t1e,Ngr),e(yt,jgr),e(yt,Hd),e(Hd,Dgr),e(Hd,a1e),e(a1e,Ggr),e(Hd,Ogr),e(Hd,pQ),e(pQ,Vgr),e(Hd,Xgr),e(yt,zgr),M(mT,yt,null),e(er,Qgr),e(er,yr),M(y8,yr,null),e(yr,Wgr),e(yr,n1e),e(n1e,Hgr),e(yr,Ugr),e(yr,Za),e(Za,Jgr),e(Za,s1e),e(s1e,Ygr),e(Za,Kgr),e(Za,l1e),e(l1e,Zgr),e(Za,ehr),e(Za,i1e),e(i1e,ohr),e(Za,rhr),e(yr,thr),e(yr,ye),e(ye,gT),e(gT,d1e),e(d1e,ahr),e(gT,nhr),e(gT,uQ),e(uQ,shr),e(gT,lhr),e(ye,ihr),e(ye,hT),e(hT,c1e),e(c1e,dhr),e(hT,chr),e(hT,_Q),e(_Q,fhr),e(hT,mhr),e(ye,ghr),e(ye,pT),e(pT,f1e),e(f1e,hhr),e(pT,phr),e(pT,bQ),e(bQ,uhr),e(pT,_hr),e(ye,bhr),e(ye,uT),e(uT,m1e),e(m1e,vhr),e(uT,Fhr),e(uT,vQ),e(vQ,Thr),e(uT,Mhr),e(ye,Ehr),e(ye,_T),e(_T,g1e),e(g1e,Chr),e(_T,whr),e(_T,FQ),e(FQ,Ahr),e(_T,yhr),e(ye,Lhr),e(ye,bT),e(bT,h1e),e(h1e,xhr),e(bT,$hr),e(bT,TQ),e(TQ,khr),e(bT,Shr),e(ye,Rhr),e(ye,vT),e(vT,p1e),e(p1e,Bhr),e(vT,Phr),e(vT,MQ),e(MQ,Ihr),e(vT,qhr),e(ye,Nhr),e(ye,FT),e(FT,u1e),e(u1e,jhr),e(FT,Dhr),e(FT,EQ),e(EQ,Ghr),e(FT,Ohr),e(ye,Vhr),e(ye,TT),e(TT,_1e),e(_1e,Xhr),e(TT,zhr),e(TT,CQ),e(CQ,Qhr),e(TT,Whr),e(ye,Hhr),e(ye,MT),e(MT,b1e),e(b1e,Uhr),e(MT,Jhr),e(MT,wQ),e(wQ,Yhr),e(MT,Khr),e(yr,Zhr),M(ET,yr,null),b(f,sPe,_),b(f,Ud,_),e(Ud,CT),e(CT,v1e),M(L8,v1e,null),e(Ud,epr),e(Ud,F1e),e(F1e,opr),b(f,lPe,_),b(f,or,_),M(x8,or,null),e(or,rpr),e(or,Jd),e(Jd,tpr),e(Jd,AQ),e(AQ,apr),e(Jd,npr),e(Jd,yQ),e(yQ,spr),e(Jd,lpr),e(or,ipr),e(or,$8),e($8,dpr),e($8,T1e),e(T1e,cpr),e($8,fpr),e(or,mpr),e(or,Lt),M(k8,Lt,null),e(Lt,gpr),e(Lt,M1e),e(M1e,hpr),e(Lt,ppr),e(Lt,Yd),e(Yd,upr),e(Yd,E1e),e(E1e,_pr),e(Yd,bpr),e(Yd,LQ),e(LQ,vpr),e(Yd,Fpr),e(Lt,Tpr),M(wT,Lt,null),e(or,Mpr),e(or,Lr),M(S8,Lr,null),e(Lr,Epr),e(Lr,C1e),e(C1e,Cpr),e(Lr,wpr),e(Lr,en),e(en,Apr),e(en,w1e),e(w1e,ypr),e(en,Lpr),e(en,A1e),e(A1e,xpr),e(en,$pr),e(en,y1e),e(y1e,kpr),e(en,Spr),e(Lr,Rpr),e(Lr,Z),e(Z,AT),e(AT,L1e),e(L1e,Bpr),e(AT,Ppr),e(AT,xQ),e(xQ,Ipr),e(AT,qpr),e(Z,Npr),e(Z,yT),e(yT,x1e),e(x1e,jpr),e(yT,Dpr),e(yT,$Q),e($Q,Gpr),e(yT,Opr),e(Z,Vpr),e(Z,LT),e(LT,$1e),e($1e,Xpr),e(LT,zpr),e(LT,kQ),e(kQ,Qpr),e(LT,Wpr),e(Z,Hpr),e(Z,xT),e(xT,k1e),e(k1e,Upr),e(xT,Jpr),e(xT,SQ),e(SQ,Ypr),e(xT,Kpr),e(Z,Zpr),e(Z,$T),e($T,S1e),e(S1e,eur),e($T,our),e($T,RQ),e(RQ,rur),e($T,tur),e(Z,aur),e(Z,kT),e(kT,R1e),e(R1e,nur),e(kT,sur),e(kT,BQ),e(BQ,lur),e(kT,iur),e(Z,dur),e(Z,ST),e(ST,B1e),e(B1e,cur),e(ST,fur),e(ST,PQ),e(PQ,mur),e(ST,gur),e(Z,hur),e(Z,RT),e(RT,P1e),e(P1e,pur),e(RT,uur),e(RT,IQ),e(IQ,_ur),e(RT,bur),e(Z,vur),e(Z,BT),e(BT,I1e),e(I1e,Fur),e(BT,Tur),e(BT,qQ),e(qQ,Mur),e(BT,Eur),e(Z,Cur),e(Z,PT),e(PT,q1e),e(q1e,wur),e(PT,Aur),e(PT,NQ),e(NQ,yur),e(PT,Lur),e(Z,xur),e(Z,IT),e(IT,N1e),e(N1e,$ur),e(IT,kur),e(IT,jQ),e(jQ,Sur),e(IT,Rur),e(Z,Bur),e(Z,qT),e(qT,j1e),e(j1e,Pur),e(qT,Iur),e(qT,DQ),e(DQ,qur),e(qT,Nur),e(Z,jur),e(Z,NT),e(NT,D1e),e(D1e,Dur),e(NT,Gur),e(NT,GQ),e(GQ,Our),e(NT,Vur),e(Z,Xur),e(Z,jT),e(jT,G1e),e(G1e,zur),e(jT,Qur),e(jT,OQ),e(OQ,Wur),e(jT,Hur),e(Z,Uur),e(Z,DT),e(DT,O1e),e(O1e,Jur),e(DT,Yur),e(DT,VQ),e(VQ,Kur),e(DT,Zur),e(Z,e_r),e(Z,GT),e(GT,V1e),e(V1e,o_r),e(GT,r_r),e(GT,XQ),e(XQ,t_r),e(GT,a_r),e(Z,n_r),e(Z,OT),e(OT,X1e),e(X1e,s_r),e(OT,l_r),e(OT,zQ),e(zQ,i_r),e(OT,d_r),e(Z,c_r),e(Z,VT),e(VT,z1e),e(z1e,f_r),e(VT,m_r),e(VT,QQ),e(QQ,g_r),e(VT,h_r),e(Z,p_r),e(Z,XT),e(XT,Q1e),e(Q1e,u_r),e(XT,__r),e(XT,WQ),e(WQ,b_r),e(XT,v_r),e(Z,F_r),e(Z,zT),e(zT,W1e),e(W1e,T_r),e(zT,M_r),e(zT,HQ),e(HQ,E_r),e(zT,C_r),e(Z,w_r),e(Z,QT),e(QT,H1e),e(H1e,A_r),e(QT,y_r),e(QT,UQ),e(UQ,L_r),e(QT,x_r),e(Z,$_r),e(Z,WT),e(WT,U1e),e(U1e,k_r),e(WT,S_r),e(WT,JQ),e(JQ,R_r),e(WT,B_r),e(Z,P_r),e(Z,HT),e(HT,J1e),e(J1e,I_r),e(HT,q_r),e(HT,YQ),e(YQ,N_r),e(HT,j_r),e(Z,D_r),e(Z,UT),e(UT,Y1e),e(Y1e,G_r),e(UT,O_r),e(UT,KQ),e(KQ,V_r),e(UT,X_r),e(Z,z_r),e(Z,JT),e(JT,K1e),e(K1e,Q_r),e(JT,W_r),e(JT,ZQ),e(ZQ,H_r),e(JT,U_r),e(Z,J_r),e(Z,YT),e(YT,Z1e),e(Z1e,Y_r),e(YT,K_r),e(YT,eW),e(eW,Z_r),e(YT,e2r),e(Lr,o2r),M(KT,Lr,null),b(f,iPe,_),b(f,Kd,_),e(Kd,ZT),e(ZT,ebe),M(R8,ebe,null),e(Kd,r2r),e(Kd,obe),e(obe,t2r),b(f,dPe,_),b(f,rr,_),M(B8,rr,null),e(rr,a2r),e(rr,Zd),e(Zd,n2r),e(Zd,oW),e(oW,s2r),e(Zd,l2r),e(Zd,rW),e(rW,i2r),e(Zd,d2r),e(rr,c2r),e(rr,P8),e(P8,f2r),e(P8,rbe),e(rbe,m2r),e(P8,g2r),e(rr,h2r),e(rr,xt),M(I8,xt,null),e(xt,p2r),e(xt,tbe),e(tbe,u2r),e(xt,_2r),e(xt,ec),e(ec,b2r),e(ec,abe),e(abe,v2r),e(ec,F2r),e(ec,tW),e(tW,T2r),e(ec,M2r),e(xt,E2r),M(eM,xt,null),e(rr,C2r),e(rr,xr),M(q8,xr,null),e(xr,w2r),e(xr,nbe),e(nbe,A2r),e(xr,y2r),e(xr,on),e(on,L2r),e(on,sbe),e(sbe,x2r),e(on,$2r),e(on,lbe),e(lbe,k2r),e(on,S2r),e(on,ibe),e(ibe,R2r),e(on,B2r),e(xr,P2r),e(xr,pe),e(pe,oM),e(oM,dbe),e(dbe,I2r),e(oM,q2r),e(oM,aW),e(aW,N2r),e(oM,j2r),e(pe,D2r),e(pe,rM),e(rM,cbe),e(cbe,G2r),e(rM,O2r),e(rM,nW),e(nW,V2r),e(rM,X2r),e(pe,z2r),e(pe,tM),e(tM,fbe),e(fbe,Q2r),e(tM,W2r),e(tM,sW),e(sW,H2r),e(tM,U2r),e(pe,J2r),e(pe,aM),e(aM,mbe),e(mbe,Y2r),e(aM,K2r),e(aM,lW),e(lW,Z2r),e(aM,e1r),e(pe,o1r),e(pe,nM),e(nM,gbe),e(gbe,r1r),e(nM,t1r),e(nM,iW),e(iW,a1r),e(nM,n1r),e(pe,s1r),e(pe,sM),e(sM,hbe),e(hbe,l1r),e(sM,i1r),e(sM,dW),e(dW,d1r),e(sM,c1r),e(pe,f1r),e(pe,lM),e(lM,pbe),e(pbe,m1r),e(lM,g1r),e(lM,cW),e(cW,h1r),e(lM,p1r),e(pe,u1r),e(pe,iM),e(iM,ube),e(ube,_1r),e(iM,b1r),e(iM,fW),e(fW,v1r),e(iM,F1r),e(pe,T1r),e(pe,dM),e(dM,_be),e(_be,M1r),e(dM,E1r),e(dM,mW),e(mW,C1r),e(dM,w1r),e(pe,A1r),e(pe,cM),e(cM,bbe),e(bbe,y1r),e(cM,L1r),e(cM,gW),e(gW,x1r),e(cM,$1r),e(pe,k1r),e(pe,fM),e(fM,vbe),e(vbe,S1r),e(fM,R1r),e(fM,hW),e(hW,B1r),e(fM,P1r),e(pe,I1r),e(pe,mM),e(mM,Fbe),e(Fbe,q1r),e(mM,N1r),e(mM,pW),e(pW,j1r),e(mM,D1r),e(pe,G1r),e(pe,gM),e(gM,Tbe),e(Tbe,O1r),e(gM,V1r),e(gM,uW),e(uW,X1r),e(gM,z1r),e(pe,Q1r),e(pe,hM),e(hM,Mbe),e(Mbe,W1r),e(hM,H1r),e(hM,_W),e(_W,U1r),e(hM,J1r),e(pe,Y1r),e(pe,pM),e(pM,Ebe),e(Ebe,K1r),e(pM,Z1r),e(pM,bW),e(bW,ebr),e(pM,obr),e(pe,rbr),e(pe,uM),e(uM,Cbe),e(Cbe,tbr),e(uM,abr),e(uM,vW),e(vW,nbr),e(uM,sbr),e(pe,lbr),e(pe,_M),e(_M,wbe),e(wbe,ibr),e(_M,dbr),e(_M,FW),e(FW,cbr),e(_M,fbr),e(xr,mbr),M(bM,xr,null),b(f,cPe,_),b(f,oc,_),e(oc,vM),e(vM,Abe),M(N8,Abe,null),e(oc,gbr),e(oc,ybe),e(ybe,hbr),b(f,fPe,_),b(f,tr,_),M(j8,tr,null),e(tr,pbr),e(tr,rc),e(rc,ubr),e(rc,TW),e(TW,_br),e(rc,bbr),e(rc,MW),e(MW,vbr),e(rc,Fbr),e(tr,Tbr),e(tr,D8),e(D8,Mbr),e(D8,Lbe),e(Lbe,Ebr),e(D8,Cbr),e(tr,wbr),e(tr,$t),M(G8,$t,null),e($t,Abr),e($t,xbe),e(xbe,ybr),e($t,Lbr),e($t,tc),e(tc,xbr),e(tc,$be),e($be,$br),e(tc,kbr),e(tc,EW),e(EW,Sbr),e(tc,Rbr),e($t,Bbr),M(FM,$t,null),e(tr,Pbr),e(tr,$r),M(O8,$r,null),e($r,Ibr),e($r,kbe),e(kbe,qbr),e($r,Nbr),e($r,rn),e(rn,jbr),e(rn,Sbe),e(Sbe,Dbr),e(rn,Gbr),e(rn,Rbe),e(Rbe,Obr),e(rn,Vbr),e(rn,Bbe),e(Bbe,Xbr),e(rn,zbr),e($r,Qbr),e($r,Pbe),e(Pbe,TM),e(TM,Ibe),e(Ibe,Wbr),e(TM,Hbr),e(TM,CW),e(CW,Ubr),e(TM,Jbr),e($r,Ybr),M(MM,$r,null),b(f,mPe,_),b(f,ac,_),e(ac,EM),e(EM,qbe),M(V8,qbe,null),e(ac,Kbr),e(ac,Nbe),e(Nbe,Zbr),b(f,gPe,_),b(f,ar,_),M(X8,ar,null),e(ar,e4r),e(ar,nc),e(nc,o4r),e(nc,wW),e(wW,r4r),e(nc,t4r),e(nc,AW),e(AW,a4r),e(nc,n4r),e(ar,s4r),e(ar,z8),e(z8,l4r),e(z8,jbe),e(jbe,i4r),e(z8,d4r),e(ar,c4r),e(ar,kt),M(Q8,kt,null),e(kt,f4r),e(kt,Dbe),e(Dbe,m4r),e(kt,g4r),e(kt,sc),e(sc,h4r),e(sc,Gbe),e(Gbe,p4r),e(sc,u4r),e(sc,yW),e(yW,_4r),e(sc,b4r),e(kt,v4r),M(CM,kt,null),e(ar,F4r),e(ar,kr),M(W8,kr,null),e(kr,T4r),e(kr,Obe),e(Obe,M4r),e(kr,E4r),e(kr,tn),e(tn,C4r),e(tn,Vbe),e(Vbe,w4r),e(tn,A4r),e(tn,Xbe),e(Xbe,y4r),e(tn,L4r),e(tn,zbe),e(zbe,x4r),e(tn,$4r),e(kr,k4r),e(kr,de),e(de,wM),e(wM,Qbe),e(Qbe,S4r),e(wM,R4r),e(wM,LW),e(LW,B4r),e(wM,P4r),e(de,I4r),e(de,AM),e(AM,Wbe),e(Wbe,q4r),e(AM,N4r),e(AM,xW),e(xW,j4r),e(AM,D4r),e(de,G4r),e(de,yM),e(yM,Hbe),e(Hbe,O4r),e(yM,V4r),e(yM,$W),e($W,X4r),e(yM,z4r),e(de,Q4r),e(de,LM),e(LM,Ube),e(Ube,W4r),e(LM,H4r),e(LM,kW),e(kW,U4r),e(LM,J4r),e(de,Y4r),e(de,xM),e(xM,Jbe),e(Jbe,K4r),e(xM,Z4r),e(xM,SW),e(SW,evr),e(xM,ovr),e(de,rvr),e(de,$M),e($M,Ybe),e(Ybe,tvr),e($M,avr),e($M,RW),e(RW,nvr),e($M,svr),e(de,lvr),e(de,kM),e(kM,Kbe),e(Kbe,ivr),e(kM,dvr),e(kM,BW),e(BW,cvr),e(kM,fvr),e(de,mvr),e(de,SM),e(SM,Zbe),e(Zbe,gvr),e(SM,hvr),e(SM,PW),e(PW,pvr),e(SM,uvr),e(de,_vr),e(de,RM),e(RM,e4e),e(e4e,bvr),e(RM,vvr),e(RM,IW),e(IW,Fvr),e(RM,Tvr),e(de,Mvr),e(de,BM),e(BM,o4e),e(o4e,Evr),e(BM,Cvr),e(BM,qW),e(qW,wvr),e(BM,Avr),e(de,yvr),e(de,PM),e(PM,r4e),e(r4e,Lvr),e(PM,xvr),e(PM,NW),e(NW,$vr),e(PM,kvr),e(de,Svr),e(de,IM),e(IM,t4e),e(t4e,Rvr),e(IM,Bvr),e(IM,jW),e(jW,Pvr),e(IM,Ivr),e(de,qvr),e(de,qM),e(qM,a4e),e(a4e,Nvr),e(qM,jvr),e(qM,DW),e(DW,Dvr),e(qM,Gvr),e(de,Ovr),e(de,NM),e(NM,n4e),e(n4e,Vvr),e(NM,Xvr),e(NM,GW),e(GW,zvr),e(NM,Qvr),e(de,Wvr),e(de,jM),e(jM,s4e),e(s4e,Hvr),e(jM,Uvr),e(jM,OW),e(OW,Jvr),e(jM,Yvr),e(de,Kvr),e(de,DM),e(DM,l4e),e(l4e,Zvr),e(DM,eFr),e(DM,VW),e(VW,oFr),e(DM,rFr),e(de,tFr),e(de,GM),e(GM,i4e),e(i4e,aFr),e(GM,nFr),e(GM,XW),e(XW,sFr),e(GM,lFr),e(de,iFr),e(de,OM),e(OM,d4e),e(d4e,dFr),e(OM,cFr),e(OM,zW),e(zW,fFr),e(OM,mFr),e(de,gFr),e(de,VM),e(VM,c4e),e(c4e,hFr),e(VM,pFr),e(VM,QW),e(QW,uFr),e(VM,_Fr),e(de,bFr),e(de,XM),e(XM,f4e),e(f4e,vFr),e(XM,FFr),e(XM,WW),e(WW,TFr),e(XM,MFr),e(kr,EFr),M(zM,kr,null),b(f,hPe,_),b(f,lc,_),e(lc,QM),e(QM,m4e),M(H8,m4e,null),e(lc,CFr),e(lc,g4e),e(g4e,wFr),b(f,pPe,_),b(f,nr,_),M(U8,nr,null),e(nr,AFr),e(nr,ic),e(ic,yFr),e(ic,HW),e(HW,LFr),e(ic,xFr),e(ic,UW),e(UW,$Fr),e(ic,kFr),e(nr,SFr),e(nr,J8),e(J8,RFr),e(J8,h4e),e(h4e,BFr),e(J8,PFr),e(nr,IFr),e(nr,St),M(Y8,St,null),e(St,qFr),e(St,p4e),e(p4e,NFr),e(St,jFr),e(St,dc),e(dc,DFr),e(dc,u4e),e(u4e,GFr),e(dc,OFr),e(dc,JW),e(JW,VFr),e(dc,XFr),e(St,zFr),M(WM,St,null),e(nr,QFr),e(nr,Sr),M(K8,Sr,null),e(Sr,WFr),e(Sr,_4e),e(_4e,HFr),e(Sr,UFr),e(Sr,an),e(an,JFr),e(an,b4e),e(b4e,YFr),e(an,KFr),e(an,v4e),e(v4e,ZFr),e(an,e0r),e(an,F4e),e(F4e,o0r),e(an,r0r),e(Sr,t0r),e(Sr,ce),e(ce,HM),e(HM,T4e),e(T4e,a0r),e(HM,n0r),e(HM,YW),e(YW,s0r),e(HM,l0r),e(ce,i0r),e(ce,UM),e(UM,M4e),e(M4e,d0r),e(UM,c0r),e(UM,KW),e(KW,f0r),e(UM,m0r),e(ce,g0r),e(ce,JM),e(JM,E4e),e(E4e,h0r),e(JM,p0r),e(JM,ZW),e(ZW,u0r),e(JM,_0r),e(ce,b0r),e(ce,YM),e(YM,C4e),e(C4e,v0r),e(YM,F0r),e(YM,eH),e(eH,T0r),e(YM,M0r),e(ce,E0r),e(ce,KM),e(KM,w4e),e(w4e,C0r),e(KM,w0r),e(KM,oH),e(oH,A0r),e(KM,y0r),e(ce,L0r),e(ce,ZM),e(ZM,A4e),e(A4e,x0r),e(ZM,$0r),e(ZM,rH),e(rH,k0r),e(ZM,S0r),e(ce,R0r),e(ce,eE),e(eE,y4e),e(y4e,B0r),e(eE,P0r),e(eE,tH),e(tH,I0r),e(eE,q0r),e(ce,N0r),e(ce,oE),e(oE,L4e),e(L4e,j0r),e(oE,D0r),e(oE,aH),e(aH,G0r),e(oE,O0r),e(ce,V0r),e(ce,rE),e(rE,x4e),e(x4e,X0r),e(rE,z0r),e(rE,nH),e(nH,Q0r),e(rE,W0r),e(ce,H0r),e(ce,tE),e(tE,$4e),e($4e,U0r),e(tE,J0r),e(tE,sH),e(sH,Y0r),e(tE,K0r),e(ce,Z0r),e(ce,aE),e(aE,k4e),e(k4e,e6r),e(aE,o6r),e(aE,lH),e(lH,r6r),e(aE,t6r),e(ce,a6r),e(ce,nE),e(nE,S4e),e(S4e,n6r),e(nE,s6r),e(nE,iH),e(iH,l6r),e(nE,i6r),e(ce,d6r),e(ce,sE),e(sE,R4e),e(R4e,c6r),e(sE,f6r),e(sE,dH),e(dH,m6r),e(sE,g6r),e(ce,h6r),e(ce,lE),e(lE,B4e),e(B4e,p6r),e(lE,u6r),e(lE,cH),e(cH,_6r),e(lE,b6r),e(ce,v6r),e(ce,iE),e(iE,P4e),e(P4e,F6r),e(iE,T6r),e(iE,fH),e(fH,M6r),e(iE,E6r),e(ce,C6r),e(ce,dE),e(dE,I4e),e(I4e,w6r),e(dE,A6r),e(dE,mH),e(mH,y6r),e(dE,L6r),e(ce,x6r),e(ce,cE),e(cE,q4e),e(q4e,$6r),e(cE,k6r),e(cE,gH),e(gH,S6r),e(cE,R6r),e(ce,B6r),e(ce,fE),e(fE,N4e),e(N4e,P6r),e(fE,I6r),e(fE,hH),e(hH,q6r),e(fE,N6r),e(ce,j6r),e(ce,mE),e(mE,j4e),e(j4e,D6r),e(mE,G6r),e(mE,pH),e(pH,O6r),e(mE,V6r),e(ce,X6r),e(ce,gE),e(gE,D4e),e(D4e,z6r),e(gE,Q6r),e(gE,uH),e(uH,W6r),e(gE,H6r),e(Sr,U6r),M(hE,Sr,null),b(f,uPe,_),b(f,cc,_),e(cc,pE),e(pE,G4e),M(Z8,G4e,null),e(cc,J6r),e(cc,O4e),e(O4e,Y6r),b(f,_Pe,_),b(f,sr,_),M(e7,sr,null),e(sr,K6r),e(sr,fc),e(fc,Z6r),e(fc,_H),e(_H,eTr),e(fc,oTr),e(fc,bH),e(bH,rTr),e(fc,tTr),e(sr,aTr),e(sr,o7),e(o7,nTr),e(o7,V4e),e(V4e,sTr),e(o7,lTr),e(sr,iTr),e(sr,Rt),M(r7,Rt,null),e(Rt,dTr),e(Rt,X4e),e(X4e,cTr),e(Rt,fTr),e(Rt,mc),e(mc,mTr),e(mc,z4e),e(z4e,gTr),e(mc,hTr),e(mc,vH),e(vH,pTr),e(mc,uTr),e(Rt,_Tr),M(uE,Rt,null),e(sr,bTr),e(sr,Rr),M(t7,Rr,null),e(Rr,vTr),e(Rr,Q4e),e(Q4e,FTr),e(Rr,TTr),e(Rr,nn),e(nn,MTr),e(nn,W4e),e(W4e,ETr),e(nn,CTr),e(nn,H4e),e(H4e,wTr),e(nn,ATr),e(nn,U4e),e(U4e,yTr),e(nn,LTr),e(Rr,xTr),e(Rr,J4e),e(J4e,_E),e(_E,Y4e),e(Y4e,$Tr),e(_E,kTr),e(_E,FH),e(FH,STr),e(_E,RTr),e(Rr,BTr),M(bE,Rr,null),b(f,bPe,_),b(f,gc,_),e(gc,vE),e(vE,K4e),M(a7,K4e,null),e(gc,PTr),e(gc,Z4e),e(Z4e,ITr),b(f,vPe,_),b(f,lr,_),M(n7,lr,null),e(lr,qTr),e(lr,hc),e(hc,NTr),e(hc,TH),e(TH,jTr),e(hc,DTr),e(hc,MH),e(MH,GTr),e(hc,OTr),e(lr,VTr),e(lr,s7),e(s7,XTr),e(s7,eve),e(eve,zTr),e(s7,QTr),e(lr,WTr),e(lr,Bt),M(l7,Bt,null),e(Bt,HTr),e(Bt,ove),e(ove,UTr),e(Bt,JTr),e(Bt,pc),e(pc,YTr),e(pc,rve),e(rve,KTr),e(pc,ZTr),e(pc,EH),e(EH,eMr),e(pc,oMr),e(Bt,rMr),M(FE,Bt,null),e(lr,tMr),e(lr,Br),M(i7,Br,null),e(Br,aMr),e(Br,tve),e(tve,nMr),e(Br,sMr),e(Br,sn),e(sn,lMr),e(sn,ave),e(ave,iMr),e(sn,dMr),e(sn,nve),e(nve,cMr),e(sn,fMr),e(sn,sve),e(sve,mMr),e(sn,gMr),e(Br,hMr),e(Br,lve),e(lve,TE),e(TE,ive),e(ive,pMr),e(TE,uMr),e(TE,CH),e(CH,_Mr),e(TE,bMr),e(Br,vMr),M(ME,Br,null),b(f,FPe,_),b(f,uc,_),e(uc,EE),e(EE,dve),M(d7,dve,null),e(uc,FMr),e(uc,cve),e(cve,TMr),b(f,TPe,_),b(f,ir,_),M(c7,ir,null),e(ir,MMr),e(ir,_c),e(_c,EMr),e(_c,wH),e(wH,CMr),e(_c,wMr),e(_c,AH),e(AH,AMr),e(_c,yMr),e(ir,LMr),e(ir,f7),e(f7,xMr),e(f7,fve),e(fve,$Mr),e(f7,kMr),e(ir,SMr),e(ir,Pt),M(m7,Pt,null),e(Pt,RMr),e(Pt,mve),e(mve,BMr),e(Pt,PMr),e(Pt,bc),e(bc,IMr),e(bc,gve),e(gve,qMr),e(bc,NMr),e(bc,yH),e(yH,jMr),e(bc,DMr),e(Pt,GMr),M(CE,Pt,null),e(ir,OMr),e(ir,Pr),M(g7,Pr,null),e(Pr,VMr),e(Pr,hve),e(hve,XMr),e(Pr,zMr),e(Pr,ln),e(ln,QMr),e(ln,pve),e(pve,WMr),e(ln,HMr),e(ln,uve),e(uve,UMr),e(ln,JMr),e(ln,_ve),e(_ve,YMr),e(ln,KMr),e(Pr,ZMr),e(Pr,oe),e(oe,wE),e(wE,bve),e(bve,eEr),e(wE,oEr),e(wE,LH),e(LH,rEr),e(wE,tEr),e(oe,aEr),e(oe,AE),e(AE,vve),e(vve,nEr),e(AE,sEr),e(AE,xH),e(xH,lEr),e(AE,iEr),e(oe,dEr),e(oe,yE),e(yE,Fve),e(Fve,cEr),e(yE,fEr),e(yE,$H),e($H,mEr),e(yE,gEr),e(oe,hEr),e(oe,LE),e(LE,Tve),e(Tve,pEr),e(LE,uEr),e(LE,kH),e(kH,_Er),e(LE,bEr),e(oe,vEr),e(oe,xE),e(xE,Mve),e(Mve,FEr),e(xE,TEr),e(xE,SH),e(SH,MEr),e(xE,EEr),e(oe,CEr),e(oe,$E),e($E,Eve),e(Eve,wEr),e($E,AEr),e($E,RH),e(RH,yEr),e($E,LEr),e(oe,xEr),e(oe,kE),e(kE,Cve),e(Cve,$Er),e(kE,kEr),e(kE,BH),e(BH,SEr),e(kE,REr),e(oe,BEr),e(oe,SE),e(SE,wve),e(wve,PEr),e(SE,IEr),e(SE,PH),e(PH,qEr),e(SE,NEr),e(oe,jEr),e(oe,RE),e(RE,Ave),e(Ave,DEr),e(RE,GEr),e(RE,IH),e(IH,OEr),e(RE,VEr),e(oe,XEr),e(oe,BE),e(BE,yve),e(yve,zEr),e(BE,QEr),e(BE,qH),e(qH,WEr),e(BE,HEr),e(oe,UEr),e(oe,PE),e(PE,Lve),e(Lve,JEr),e(PE,YEr),e(PE,NH),e(NH,KEr),e(PE,ZEr),e(oe,eCr),e(oe,IE),e(IE,xve),e(xve,oCr),e(IE,rCr),e(IE,jH),e(jH,tCr),e(IE,aCr),e(oe,nCr),e(oe,qE),e(qE,$ve),e($ve,sCr),e(qE,lCr),e(qE,DH),e(DH,iCr),e(qE,dCr),e(oe,cCr),e(oe,NE),e(NE,kve),e(kve,fCr),e(NE,mCr),e(NE,GH),e(GH,gCr),e(NE,hCr),e(oe,pCr),e(oe,jE),e(jE,Sve),e(Sve,uCr),e(jE,_Cr),e(jE,OH),e(OH,bCr),e(jE,vCr),e(oe,FCr),e(oe,DE),e(DE,Rve),e(Rve,TCr),e(DE,MCr),e(DE,VH),e(VH,ECr),e(DE,CCr),e(oe,wCr),e(oe,GE),e(GE,Bve),e(Bve,ACr),e(GE,yCr),e(GE,XH),e(XH,LCr),e(GE,xCr),e(oe,$Cr),e(oe,OE),e(OE,Pve),e(Pve,kCr),e(OE,SCr),e(OE,zH),e(zH,RCr),e(OE,BCr),e(oe,PCr),e(oe,VE),e(VE,Ive),e(Ive,ICr),e(VE,qCr),e(VE,QH),e(QH,NCr),e(VE,jCr),e(oe,DCr),e(oe,XE),e(XE,qve),e(qve,GCr),e(XE,OCr),e(XE,WH),e(WH,VCr),e(XE,XCr),e(oe,zCr),e(oe,zE),e(zE,Nve),e(Nve,QCr),e(zE,WCr),e(zE,HH),e(HH,HCr),e(zE,UCr),e(oe,JCr),e(oe,QE),e(QE,jve),e(jve,YCr),e(QE,KCr),e(QE,UH),e(UH,ZCr),e(QE,e5r),e(oe,o5r),e(oe,WE),e(WE,Dve),e(Dve,r5r),e(WE,t5r),e(WE,JH),e(JH,a5r),e(WE,n5r),e(oe,s5r),e(oe,HE),e(HE,Gve),e(Gve,l5r),e(HE,i5r),e(HE,YH),e(YH,d5r),e(HE,c5r),e(oe,f5r),e(oe,UE),e(UE,Ove),e(Ove,m5r),e(UE,g5r),e(UE,KH),e(KH,h5r),e(UE,p5r),e(Pr,u5r),M(JE,Pr,null),b(f,MPe,_),b(f,vc,_),e(vc,YE),e(YE,Vve),M(h7,Vve,null),e(vc,_5r),e(vc,Xve),e(Xve,b5r),b(f,EPe,_),b(f,dr,_),M(p7,dr,null),e(dr,v5r),e(dr,Fc),e(Fc,F5r),e(Fc,ZH),e(ZH,T5r),e(Fc,M5r),e(Fc,eU),e(eU,E5r),e(Fc,C5r),e(dr,w5r),e(dr,u7),e(u7,A5r),e(u7,zve),e(zve,y5r),e(u7,L5r),e(dr,x5r),e(dr,It),M(_7,It,null),e(It,$5r),e(It,Qve),e(Qve,k5r),e(It,S5r),e(It,Tc),e(Tc,R5r),e(Tc,Wve),e(Wve,B5r),e(Tc,P5r),e(Tc,oU),e(oU,I5r),e(Tc,q5r),e(It,N5r),M(KE,It,null),e(dr,j5r),e(dr,Ir),M(b7,Ir,null),e(Ir,D5r),e(Ir,Hve),e(Hve,G5r),e(Ir,O5r),e(Ir,dn),e(dn,V5r),e(dn,Uve),e(Uve,X5r),e(dn,z5r),e(dn,Jve),e(Jve,Q5r),e(dn,W5r),e(dn,Yve),e(Yve,H5r),e(dn,U5r),e(Ir,J5r),e(Ir,Hr),e(Hr,ZE),e(ZE,Kve),e(Kve,Y5r),e(ZE,K5r),e(ZE,rU),e(rU,Z5r),e(ZE,e3r),e(Hr,o3r),e(Hr,eC),e(eC,Zve),e(Zve,r3r),e(eC,t3r),e(eC,tU),e(tU,a3r),e(eC,n3r),e(Hr,s3r),e(Hr,oC),e(oC,eFe),e(eFe,l3r),e(oC,i3r),e(oC,aU),e(aU,d3r),e(oC,c3r),e(Hr,f3r),e(Hr,rC),e(rC,oFe),e(oFe,m3r),e(rC,g3r),e(rC,nU),e(nU,h3r),e(rC,p3r),e(Hr,u3r),e(Hr,tC),e(tC,rFe),e(rFe,_3r),e(tC,b3r),e(tC,sU),e(sU,v3r),e(tC,F3r),e(Ir,T3r),M(aC,Ir,null),b(f,CPe,_),b(f,Mc,_),e(Mc,nC),e(nC,tFe),M(v7,tFe,null),e(Mc,M3r),e(Mc,aFe),e(aFe,E3r),b(f,wPe,_),b(f,cr,_),M(F7,cr,null),e(cr,C3r),e(cr,Ec),e(Ec,w3r),e(Ec,lU),e(lU,A3r),e(Ec,y3r),e(Ec,iU),e(iU,L3r),e(Ec,x3r),e(cr,$3r),e(cr,T7),e(T7,k3r),e(T7,nFe),e(nFe,S3r),e(T7,R3r),e(cr,B3r),e(cr,qt),M(M7,qt,null),e(qt,P3r),e(qt,sFe),e(sFe,I3r),e(qt,q3r),e(qt,Cc),e(Cc,N3r),e(Cc,lFe),e(lFe,j3r),e(Cc,D3r),e(Cc,dU),e(dU,G3r),e(Cc,O3r),e(qt,V3r),M(sC,qt,null),e(cr,X3r),e(cr,qr),M(E7,qr,null),e(qr,z3r),e(qr,iFe),e(iFe,Q3r),e(qr,W3r),e(qr,cn),e(cn,H3r),e(cn,dFe),e(dFe,U3r),e(cn,J3r),e(cn,cFe),e(cFe,Y3r),e(cn,K3r),e(cn,fFe),e(fFe,Z3r),e(cn,ewr),e(qr,owr),e(qr,Me),e(Me,lC),e(lC,mFe),e(mFe,rwr),e(lC,twr),e(lC,cU),e(cU,awr),e(lC,nwr),e(Me,swr),e(Me,iC),e(iC,gFe),e(gFe,lwr),e(iC,iwr),e(iC,fU),e(fU,dwr),e(iC,cwr),e(Me,fwr),e(Me,dC),e(dC,hFe),e(hFe,mwr),e(dC,gwr),e(dC,mU),e(mU,hwr),e(dC,pwr),e(Me,uwr),e(Me,cC),e(cC,pFe),e(pFe,_wr),e(cC,bwr),e(cC,gU),e(gU,vwr),e(cC,Fwr),e(Me,Twr),e(Me,fC),e(fC,uFe),e(uFe,Mwr),e(fC,Ewr),e(fC,hU),e(hU,Cwr),e(fC,wwr),e(Me,Awr),e(Me,mC),e(mC,_Fe),e(_Fe,ywr),e(mC,Lwr),e(mC,pU),e(pU,xwr),e(mC,$wr),e(Me,kwr),e(Me,gC),e(gC,bFe),e(bFe,Swr),e(gC,Rwr),e(gC,uU),e(uU,Bwr),e(gC,Pwr),e(Me,Iwr),e(Me,hC),e(hC,vFe),e(vFe,qwr),e(hC,Nwr),e(hC,_U),e(_U,jwr),e(hC,Dwr),e(Me,Gwr),e(Me,pC),e(pC,FFe),e(FFe,Owr),e(pC,Vwr),e(pC,bU),e(bU,Xwr),e(pC,zwr),e(Me,Qwr),e(Me,uC),e(uC,TFe),e(TFe,Wwr),e(uC,Hwr),e(uC,vU),e(vU,Uwr),e(uC,Jwr),e(Me,Ywr),e(Me,_C),e(_C,MFe),e(MFe,Kwr),e(_C,Zwr),e(_C,FU),e(FU,eAr),e(_C,oAr),e(Me,rAr),e(Me,bC),e(bC,EFe),e(EFe,tAr),e(bC,aAr),e(bC,TU),e(TU,nAr),e(bC,sAr),e(qr,lAr),M(vC,qr,null),b(f,APe,_),b(f,wc,_),e(wc,FC),e(FC,CFe),M(C7,CFe,null),e(wc,iAr),e(wc,wFe),e(wFe,dAr),b(f,yPe,_),b(f,fr,_),M(w7,fr,null),e(fr,cAr),e(fr,Ac),e(Ac,fAr),e(Ac,MU),e(MU,mAr),e(Ac,gAr),e(Ac,EU),e(EU,hAr),e(Ac,pAr),e(fr,uAr),e(fr,A7),e(A7,_Ar),e(A7,AFe),e(AFe,bAr),e(A7,vAr),e(fr,FAr),e(fr,Nt),M(y7,Nt,null),e(Nt,TAr),e(Nt,yFe),e(yFe,MAr),e(Nt,EAr),e(Nt,yc),e(yc,CAr),e(yc,LFe),e(LFe,wAr),e(yc,AAr),e(yc,CU),e(CU,yAr),e(yc,LAr),e(Nt,xAr),M(TC,Nt,null),e(fr,$Ar),e(fr,Nr),M(L7,Nr,null),e(Nr,kAr),e(Nr,xFe),e(xFe,SAr),e(Nr,RAr),e(Nr,fn),e(fn,BAr),e(fn,$Fe),e($Fe,PAr),e(fn,IAr),e(fn,kFe),e(kFe,qAr),e(fn,NAr),e(fn,SFe),e(SFe,jAr),e(fn,DAr),e(Nr,GAr),e(Nr,Le),e(Le,MC),e(MC,RFe),e(RFe,OAr),e(MC,VAr),e(MC,wU),e(wU,XAr),e(MC,zAr),e(Le,QAr),e(Le,EC),e(EC,BFe),e(BFe,WAr),e(EC,HAr),e(EC,AU),e(AU,UAr),e(EC,JAr),e(Le,YAr),e(Le,CC),e(CC,PFe),e(PFe,KAr),e(CC,ZAr),e(CC,yU),e(yU,eyr),e(CC,oyr),e(Le,ryr),e(Le,wC),e(wC,IFe),e(IFe,tyr),e(wC,ayr),e(wC,LU),e(LU,nyr),e(wC,syr),e(Le,lyr),e(Le,AC),e(AC,qFe),e(qFe,iyr),e(AC,dyr),e(AC,xU),e(xU,cyr),e(AC,fyr),e(Le,myr),e(Le,yC),e(yC,NFe),e(NFe,gyr),e(yC,hyr),e(yC,$U),e($U,pyr),e(yC,uyr),e(Le,_yr),e(Le,LC),e(LC,jFe),e(jFe,byr),e(LC,vyr),e(LC,kU),e(kU,Fyr),e(LC,Tyr),e(Le,Myr),e(Le,xC),e(xC,DFe),e(DFe,Eyr),e(xC,Cyr),e(xC,SU),e(SU,wyr),e(xC,Ayr),e(Le,yyr),e(Le,$C),e($C,GFe),e(GFe,Lyr),e($C,xyr),e($C,RU),e(RU,$yr),e($C,kyr),e(Le,Syr),e(Le,kC),e(kC,OFe),e(OFe,Ryr),e(kC,Byr),e(kC,BU),e(BU,Pyr),e(kC,Iyr),e(Nr,qyr),M(SC,Nr,null),b(f,LPe,_),b(f,Lc,_),e(Lc,RC),e(RC,VFe),M(x7,VFe,null),e(Lc,Nyr),e(Lc,XFe),e(XFe,jyr),b(f,xPe,_),b(f,mr,_),M($7,mr,null),e(mr,Dyr),e(mr,xc),e(xc,Gyr),e(xc,PU),e(PU,Oyr),e(xc,Vyr),e(xc,IU),e(IU,Xyr),e(xc,zyr),e(mr,Qyr),e(mr,k7),e(k7,Wyr),e(k7,zFe),e(zFe,Hyr),e(k7,Uyr),e(mr,Jyr),e(mr,jt),M(S7,jt,null),e(jt,Yyr),e(jt,QFe),e(QFe,Kyr),e(jt,Zyr),e(jt,$c),e($c,eLr),e($c,WFe),e(WFe,oLr),e($c,rLr),e($c,qU),e(qU,tLr),e($c,aLr),e(jt,nLr),M(BC,jt,null),e(mr,sLr),e(mr,jr),M(R7,jr,null),e(jr,lLr),e(jr,HFe),e(HFe,iLr),e(jr,dLr),e(jr,mn),e(mn,cLr),e(mn,UFe),e(UFe,fLr),e(mn,mLr),e(mn,JFe),e(JFe,gLr),e(mn,hLr),e(mn,YFe),e(YFe,pLr),e(mn,uLr),e(jr,_Lr),e(jr,Se),e(Se,PC),e(PC,KFe),e(KFe,bLr),e(PC,vLr),e(PC,NU),e(NU,FLr),e(PC,TLr),e(Se,MLr),e(Se,IC),e(IC,ZFe),e(ZFe,ELr),e(IC,CLr),e(IC,jU),e(jU,wLr),e(IC,ALr),e(Se,yLr),e(Se,qC),e(qC,e0e),e(e0e,LLr),e(qC,xLr),e(qC,DU),e(DU,$Lr),e(qC,kLr),e(Se,SLr),e(Se,NC),e(NC,o0e),e(o0e,RLr),e(NC,BLr),e(NC,GU),e(GU,PLr),e(NC,ILr),e(Se,qLr),e(Se,jC),e(jC,r0e),e(r0e,NLr),e(jC,jLr),e(jC,OU),e(OU,DLr),e(jC,GLr),e(Se,OLr),e(Se,DC),e(DC,t0e),e(t0e,VLr),e(DC,XLr),e(DC,VU),e(VU,zLr),e(DC,QLr),e(Se,WLr),e(Se,GC),e(GC,a0e),e(a0e,HLr),e(GC,ULr),e(GC,XU),e(XU,JLr),e(GC,YLr),e(Se,KLr),e(Se,OC),e(OC,n0e),e(n0e,ZLr),e(OC,e8r),e(OC,zU),e(zU,o8r),e(OC,r8r),e(Se,t8r),e(Se,VC),e(VC,s0e),e(s0e,a8r),e(VC,n8r),e(VC,QU),e(QU,s8r),e(VC,l8r),e(jr,i8r),M(XC,jr,null),b(f,$Pe,_),b(f,kc,_),e(kc,zC),e(zC,l0e),M(B7,l0e,null),e(kc,d8r),e(kc,i0e),e(i0e,c8r),b(f,kPe,_),b(f,gr,_),M(P7,gr,null),e(gr,f8r),e(gr,Sc),e(Sc,m8r),e(Sc,WU),e(WU,g8r),e(Sc,h8r),e(Sc,HU),e(HU,p8r),e(Sc,u8r),e(gr,_8r),e(gr,I7),e(I7,b8r),e(I7,d0e),e(d0e,v8r),e(I7,F8r),e(gr,T8r),e(gr,Dt),M(q7,Dt,null),e(Dt,M8r),e(Dt,c0e),e(c0e,E8r),e(Dt,C8r),e(Dt,Rc),e(Rc,w8r),e(Rc,f0e),e(f0e,A8r),e(Rc,y8r),e(Rc,UU),e(UU,L8r),e(Rc,x8r),e(Dt,$8r),M(QC,Dt,null),e(gr,k8r),e(gr,Dr),M(N7,Dr,null),e(Dr,S8r),e(Dr,m0e),e(m0e,R8r),e(Dr,B8r),e(Dr,gn),e(gn,P8r),e(gn,g0e),e(g0e,I8r),e(gn,q8r),e(gn,h0e),e(h0e,N8r),e(gn,j8r),e(gn,p0e),e(p0e,D8r),e(gn,G8r),e(Dr,O8r),e(Dr,xe),e(xe,WC),e(WC,u0e),e(u0e,V8r),e(WC,X8r),e(WC,JU),e(JU,z8r),e(WC,Q8r),e(xe,W8r),e(xe,HC),e(HC,_0e),e(_0e,H8r),e(HC,U8r),e(HC,YU),e(YU,J8r),e(HC,Y8r),e(xe,K8r),e(xe,UC),e(UC,b0e),e(b0e,Z8r),e(UC,e7r),e(UC,KU),e(KU,o7r),e(UC,r7r),e(xe,t7r),e(xe,JC),e(JC,v0e),e(v0e,a7r),e(JC,n7r),e(JC,ZU),e(ZU,s7r),e(JC,l7r),e(xe,i7r),e(xe,YC),e(YC,F0e),e(F0e,d7r),e(YC,c7r),e(YC,eJ),e(eJ,f7r),e(YC,m7r),e(xe,g7r),e(xe,KC),e(KC,T0e),e(T0e,h7r),e(KC,p7r),e(KC,oJ),e(oJ,u7r),e(KC,_7r),e(xe,b7r),e(xe,ZC),e(ZC,M0e),e(M0e,v7r),e(ZC,F7r),e(ZC,rJ),e(rJ,T7r),e(ZC,M7r),e(xe,E7r),e(xe,e5),e(e5,E0e),e(E0e,C7r),e(e5,w7r),e(e5,tJ),e(tJ,A7r),e(e5,y7r),e(xe,L7r),e(xe,o5),e(o5,C0e),e(C0e,x7r),e(o5,$7r),e(o5,aJ),e(aJ,k7r),e(o5,S7r),e(xe,R7r),e(xe,r5),e(r5,w0e),e(w0e,B7r),e(r5,P7r),e(r5,nJ),e(nJ,I7r),e(r5,q7r),e(Dr,N7r),M(t5,Dr,null),b(f,SPe,_),b(f,Bc,_),e(Bc,a5),e(a5,A0e),M(j7,A0e,null),e(Bc,j7r),e(Bc,y0e),e(y0e,D7r),b(f,RPe,_),b(f,hr,_),M(D7,hr,null),e(hr,G7r),e(hr,Pc),e(Pc,O7r),e(Pc,sJ),e(sJ,V7r),e(Pc,X7r),e(Pc,lJ),e(lJ,z7r),e(Pc,Q7r),e(hr,W7r),e(hr,G7),e(G7,H7r),e(G7,L0e),e(L0e,U7r),e(G7,J7r),e(hr,Y7r),e(hr,Gt),M(O7,Gt,null),e(Gt,K7r),e(Gt,x0e),e(x0e,Z7r),e(Gt,exr),e(Gt,Ic),e(Ic,oxr),e(Ic,$0e),e($0e,rxr),e(Ic,txr),e(Ic,iJ),e(iJ,axr),e(Ic,nxr),e(Gt,sxr),M(n5,Gt,null),e(hr,lxr),e(hr,Gr),M(V7,Gr,null),e(Gr,ixr),e(Gr,k0e),e(k0e,dxr),e(Gr,cxr),e(Gr,hn),e(hn,fxr),e(hn,S0e),e(S0e,mxr),e(hn,gxr),e(hn,R0e),e(R0e,hxr),e(hn,pxr),e(hn,B0e),e(B0e,uxr),e(hn,_xr),e(Gr,bxr),e(Gr,$e),e($e,s5),e(s5,P0e),e(P0e,vxr),e(s5,Fxr),e(s5,dJ),e(dJ,Txr),e(s5,Mxr),e($e,Exr),e($e,l5),e(l5,I0e),e(I0e,Cxr),e(l5,wxr),e(l5,cJ),e(cJ,Axr),e(l5,yxr),e($e,Lxr),e($e,i5),e(i5,q0e),e(q0e,xxr),e(i5,$xr),e(i5,fJ),e(fJ,kxr),e(i5,Sxr),e($e,Rxr),e($e,d5),e(d5,N0e),e(N0e,Bxr),e(d5,Pxr),e(d5,mJ),e(mJ,Ixr),e(d5,qxr),e($e,Nxr),e($e,c5),e(c5,j0e),e(j0e,jxr),e(c5,Dxr),e(c5,gJ),e(gJ,Gxr),e(c5,Oxr),e($e,Vxr),e($e,f5),e(f5,D0e),e(D0e,Xxr),e(f5,zxr),e(f5,hJ),e(hJ,Qxr),e(f5,Wxr),e($e,Hxr),e($e,m5),e(m5,G0e),e(G0e,Uxr),e(m5,Jxr),e(m5,pJ),e(pJ,Yxr),e(m5,Kxr),e($e,Zxr),e($e,g5),e(g5,O0e),e(O0e,e9r),e(g5,o9r),e(g5,uJ),e(uJ,r9r),e(g5,t9r),e($e,a9r),e($e,h5),e(h5,V0e),e(V0e,n9r),e(h5,s9r),e(h5,_J),e(_J,l9r),e(h5,i9r),e($e,d9r),e($e,p5),e(p5,X0e),e(X0e,c9r),e(p5,f9r),e(p5,bJ),e(bJ,m9r),e(p5,g9r),e(Gr,h9r),M(u5,Gr,null),b(f,BPe,_),b(f,qc,_),e(qc,_5),e(_5,z0e),M(X7,z0e,null),e(qc,p9r),e(qc,Q0e),e(Q0e,u9r),b(f,PPe,_),b(f,pr,_),M(z7,pr,null),e(pr,_9r),e(pr,Nc),e(Nc,b9r),e(Nc,vJ),e(vJ,v9r),e(Nc,F9r),e(Nc,FJ),e(FJ,T9r),e(Nc,M9r),e(pr,E9r),e(pr,Q7),e(Q7,C9r),e(Q7,W0e),e(W0e,w9r),e(Q7,A9r),e(pr,y9r),e(pr,Ot),M(W7,Ot,null),e(Ot,L9r),e(Ot,H0e),e(H0e,x9r),e(Ot,$9r),e(Ot,jc),e(jc,k9r),e(jc,U0e),e(U0e,S9r),e(jc,R9r),e(jc,TJ),e(TJ,B9r),e(jc,P9r),e(Ot,I9r),M(b5,Ot,null),e(pr,q9r),e(pr,Or),M(H7,Or,null),e(Or,N9r),e(Or,J0e),e(J0e,j9r),e(Or,D9r),e(Or,pn),e(pn,G9r),e(pn,Y0e),e(Y0e,O9r),e(pn,V9r),e(pn,K0e),e(K0e,X9r),e(pn,z9r),e(pn,Z0e),e(Z0e,Q9r),e(pn,W9r),e(Or,H9r),e(Or,je),e(je,v5),e(v5,e6e),e(e6e,U9r),e(v5,J9r),e(v5,MJ),e(MJ,Y9r),e(v5,K9r),e(je,Z9r),e(je,F5),e(F5,o6e),e(o6e,e$r),e(F5,o$r),e(F5,EJ),e(EJ,r$r),e(F5,t$r),e(je,a$r),e(je,T5),e(T5,r6e),e(r6e,n$r),e(T5,s$r),e(T5,CJ),e(CJ,l$r),e(T5,i$r),e(je,d$r),e(je,M5),e(M5,t6e),e(t6e,c$r),e(M5,f$r),e(M5,wJ),e(wJ,m$r),e(M5,g$r),e(je,h$r),e(je,E5),e(E5,a6e),e(a6e,p$r),e(E5,u$r),e(E5,AJ),e(AJ,_$r),e(E5,b$r),e(je,v$r),e(je,C5),e(C5,n6e),e(n6e,F$r),e(C5,T$r),e(C5,yJ),e(yJ,M$r),e(C5,E$r),e(je,C$r),e(je,w5),e(w5,s6e),e(s6e,w$r),e(w5,A$r),e(w5,LJ),e(LJ,y$r),e(w5,L$r),e(je,x$r),e(je,A5),e(A5,l6e),e(l6e,$$r),e(A5,k$r),e(A5,xJ),e(xJ,S$r),e(A5,R$r),e(Or,B$r),M(y5,Or,null),b(f,IPe,_),b(f,Dc,_),e(Dc,L5),e(L5,i6e),M(U7,i6e,null),e(Dc,P$r),e(Dc,d6e),e(d6e,I$r),b(f,qPe,_),b(f,ur,_),M(J7,ur,null),e(ur,q$r),e(ur,Gc),e(Gc,N$r),e(Gc,$J),e($J,j$r),e(Gc,D$r),e(Gc,kJ),e(kJ,G$r),e(Gc,O$r),e(ur,V$r),e(ur,Y7),e(Y7,X$r),e(Y7,c6e),e(c6e,z$r),e(Y7,Q$r),e(ur,W$r),e(ur,Vt),M(K7,Vt,null),e(Vt,H$r),e(Vt,f6e),e(f6e,U$r),e(Vt,J$r),e(Vt,Oc),e(Oc,Y$r),e(Oc,m6e),e(m6e,K$r),e(Oc,Z$r),e(Oc,SJ),e(SJ,ekr),e(Oc,okr),e(Vt,rkr),M(x5,Vt,null),e(ur,tkr),e(ur,Vr),M(Z7,Vr,null),e(Vr,akr),e(Vr,g6e),e(g6e,nkr),e(Vr,skr),e(Vr,un),e(un,lkr),e(un,h6e),e(h6e,ikr),e(un,dkr),e(un,p6e),e(p6e,ckr),e(un,fkr),e(un,u6e),e(u6e,mkr),e(un,gkr),e(Vr,hkr),e(Vr,De),e(De,$5),e($5,_6e),e(_6e,pkr),e($5,ukr),e($5,RJ),e(RJ,_kr),e($5,bkr),e(De,vkr),e(De,k5),e(k5,b6e),e(b6e,Fkr),e(k5,Tkr),e(k5,BJ),e(BJ,Mkr),e(k5,Ekr),e(De,Ckr),e(De,S5),e(S5,v6e),e(v6e,wkr),e(S5,Akr),e(S5,PJ),e(PJ,ykr),e(S5,Lkr),e(De,xkr),e(De,R5),e(R5,F6e),e(F6e,$kr),e(R5,kkr),e(R5,IJ),e(IJ,Skr),e(R5,Rkr),e(De,Bkr),e(De,B5),e(B5,T6e),e(T6e,Pkr),e(B5,Ikr),e(B5,qJ),e(qJ,qkr),e(B5,Nkr),e(De,jkr),e(De,P5),e(P5,M6e),e(M6e,Dkr),e(P5,Gkr),e(P5,NJ),e(NJ,Okr),e(P5,Vkr),e(De,Xkr),e(De,I5),e(I5,E6e),e(E6e,zkr),e(I5,Qkr),e(I5,jJ),e(jJ,Wkr),e(I5,Hkr),e(De,Ukr),e(De,q5),e(q5,C6e),e(C6e,Jkr),e(q5,Ykr),e(q5,DJ),e(DJ,Kkr),e(q5,Zkr),e(Vr,eSr),M(N5,Vr,null),b(f,NPe,_),b(f,Vc,_),e(Vc,j5),e(j5,w6e),M(ex,w6e,null),e(Vc,oSr),e(Vc,A6e),e(A6e,rSr),b(f,jPe,_),b(f,_r,_),M(ox,_r,null),e(_r,tSr),e(_r,Xc),e(Xc,aSr),e(Xc,GJ),e(GJ,nSr),e(Xc,sSr),e(Xc,OJ),e(OJ,lSr),e(Xc,iSr),e(_r,dSr),e(_r,rx),e(rx,cSr),e(rx,y6e),e(y6e,fSr),e(rx,mSr),e(_r,gSr),e(_r,Xt),M(tx,Xt,null),e(Xt,hSr),e(Xt,L6e),e(L6e,pSr),e(Xt,uSr),e(Xt,zc),e(zc,_Sr),e(zc,x6e),e(x6e,bSr),e(zc,vSr),e(zc,VJ),e(VJ,FSr),e(zc,TSr),e(Xt,MSr),M(D5,Xt,null),e(_r,ESr),e(_r,Xr),M(ax,Xr,null),e(Xr,CSr),e(Xr,$6e),e($6e,wSr),e(Xr,ASr),e(Xr,_n),e(_n,ySr),e(_n,k6e),e(k6e,LSr),e(_n,xSr),e(_n,S6e),e(S6e,$Sr),e(_n,kSr),e(_n,R6e),e(R6e,SSr),e(_n,RSr),e(Xr,BSr),e(Xr,B6e),e(B6e,G5),e(G5,P6e),e(P6e,PSr),e(G5,ISr),e(G5,XJ),e(XJ,qSr),e(G5,NSr),e(Xr,jSr),M(O5,Xr,null),b(f,DPe,_),b(f,Qc,_),e(Qc,V5),e(V5,I6e),M(nx,I6e,null),e(Qc,DSr),e(Qc,q6e),e(q6e,GSr),b(f,GPe,_),b(f,br,_),M(sx,br,null),e(br,OSr),e(br,Wc),e(Wc,VSr),e(Wc,zJ),e(zJ,XSr),e(Wc,zSr),e(Wc,QJ),e(QJ,QSr),e(Wc,WSr),e(br,HSr),e(br,lx),e(lx,USr),e(lx,N6e),e(N6e,JSr),e(lx,YSr),e(br,KSr),e(br,zt),M(ix,zt,null),e(zt,ZSr),e(zt,j6e),e(j6e,eRr),e(zt,oRr),e(zt,Hc),e(Hc,rRr),e(Hc,D6e),e(D6e,tRr),e(Hc,aRr),e(Hc,WJ),e(WJ,nRr),e(Hc,sRr),e(zt,lRr),M(X5,zt,null),e(br,iRr),e(br,zr),M(dx,zr,null),e(zr,dRr),e(zr,G6e),e(G6e,cRr),e(zr,fRr),e(zr,bn),e(bn,mRr),e(bn,O6e),e(O6e,gRr),e(bn,hRr),e(bn,V6e),e(V6e,pRr),e(bn,uRr),e(bn,X6e),e(X6e,_Rr),e(bn,bRr),e(zr,vRr),e(zr,cx),e(cx,z5),e(z5,z6e),e(z6e,FRr),e(z5,TRr),e(z5,HJ),e(HJ,MRr),e(z5,ERr),e(cx,CRr),e(cx,Q5),e(Q5,Q6e),e(Q6e,wRr),e(Q5,ARr),e(Q5,UJ),e(UJ,yRr),e(Q5,LRr),e(zr,xRr),M(W5,zr,null),b(f,OPe,_),b(f,Uc,_),e(Uc,H5),e(H5,W6e),M(fx,W6e,null),e(Uc,$Rr),e(Uc,H6e),e(H6e,kRr),b(f,VPe,_),b(f,vr,_),M(mx,vr,null),e(vr,SRr),e(vr,Jc),e(Jc,RRr),e(Jc,JJ),e(JJ,BRr),e(Jc,PRr),e(Jc,YJ),e(YJ,IRr),e(Jc,qRr),e(vr,NRr),e(vr,gx),e(gx,jRr),e(gx,U6e),e(U6e,DRr),e(gx,GRr),e(vr,ORr),e(vr,Qt),M(hx,Qt,null),e(Qt,VRr),e(Qt,J6e),e(J6e,XRr),e(Qt,zRr),e(Qt,Yc),e(Yc,QRr),e(Yc,Y6e),e(Y6e,WRr),e(Yc,HRr),e(Yc,KJ),e(KJ,URr),e(Yc,JRr),e(Qt,YRr),M(U5,Qt,null),e(vr,KRr),e(vr,Qr),M(px,Qr,null),e(Qr,ZRr),e(Qr,K6e),e(K6e,eBr),e(Qr,oBr),e(Qr,vn),e(vn,rBr),e(vn,Z6e),e(Z6e,tBr),e(vn,aBr),e(vn,eTe),e(eTe,nBr),e(vn,sBr),e(vn,oTe),e(oTe,lBr),e(vn,iBr),e(Qr,dBr),e(Qr,rTe),e(rTe,J5),e(J5,tTe),e(tTe,cBr),e(J5,fBr),e(J5,ZJ),e(ZJ,mBr),e(J5,gBr),e(Qr,hBr),M(Y5,Qr,null),XPe=!0},p(f,[_]){const ux={};_&2&&(ux.$$scope={dirty:_,ctx:f}),sf.$set(ux);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),ag.$set(aTe);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),Ig.$set(nTe);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),dh.$set(sTe);const _x={};_&2&&(_x.$$scope={dirty:_,ctx:f}),ch.$set(_x);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),yh.$set(lTe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),Lh.$set(Fn);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),kh.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),vu.$set(dTe);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),Tu.$set(cTe);const bx={};_&2&&(bx.$$scope={dirty:_,ctx:f}),i_.$set(bx);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),c_.$set(fTe);const vx={};_&2&&(vx.$$scope={dirty:_,ctx:f}),W_.$set(vx);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),U_.$set(mTe);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:f}),S2.$set(Fx);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),B2.$set(gTe);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),Z2.$set(hTe);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),o1.$set(pTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),J1.$set(Kc);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),K1.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),Lb.$set(_Te);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),$b.$set(bTe);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),qb.$set(Tx);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),jb.$set(vTe);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),F4.$set(FTe);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),M4.$set(TTe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),dv.$set(Ur);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),fv.$set(Mx);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),hv.$set(MTe);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),uv.$set(Ex);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),xv.$set(ETe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),kv.$set(Jr);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),Bv.$set(CTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Iv.$set(Zc);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),Qv.$set(wTe);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),Hv.$set(ATe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),eF.$set(y);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),rF.$set(K5);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),gF.$set(yTe);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),pF.$set(LTe);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),vF.$set(Z5);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),TF.$set(xTe);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),yF.$set($Te);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),xF.$set(e3);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),BF.$set(kTe);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),IF.$set(STe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),jF.$set(o3);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),GF.$set(RTe);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),XF.$set(BTe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),QF.$set(r3);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),KF.$set(PTe);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),e0.$set(ITe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),t0.$set(t3);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),n0.$set(qTe);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),U0.$set(NTe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),Y0.$set(a3);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),T6.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),E6.$set(DTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),I6.$set(n3);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),N6.$set(GTe);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),G6.$set(OTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),V6.$set(s3);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),cT.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),mT.$set(XTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),ET.$set(l3);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),wT.$set(zTe);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),KT.$set(QTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),eM.$set(i3);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),bM.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),FM.$set(HTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),MM.$set(d3);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),CM.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),zM.$set(JTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),WM.$set(c3);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),hE.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),uE.$set(KTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),bE.$set(f3);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),FE.$set(ZTe);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),ME.$set(eMe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),CE.$set(m3);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),JE.$set(oMe);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),KE.$set(rMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),aC.$set(g3);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),sC.$set(tMe);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),vC.$set(aMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),TC.$set(h3);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),SC.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),BC.$set(sMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),XC.$set(p3);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),QC.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),t5.$set(iMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),n5.$set(u3);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),u5.$set(dMe);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),b5.$set(cMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),y5.$set(_3);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),x5.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),N5.$set(mMe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),D5.$set(b3);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),O5.$set(gMe);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),X5.$set(hMe);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),W5.$set(v3);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),U5.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),Y5.$set(uMe)},i(f){XPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(sf.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(ag.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Ig.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(dh.$$.fragment,f),E(ch.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(kh.$$.fragment,f),E(WA.$$.fragment,f),E(vu.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(Tu.$$.fragment,f),E(KA.$$.fragment,f),E(i_.$$.fragment,f),E(ZA.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(c_.$$.fragment,f),E(ty.$$.fragment,f),E(W_.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(U_.$$.fragment,f),E(iy.$$.fragment,f),E(S2.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(B2.$$.fragment,f),E(gy.$$.fragment,f),E(Z2.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(o1.$$.fragment,f),E(by.$$.fragment,f),E(J1.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(K1.$$.fragment,f),E(Ey.$$.fragment,f),E(Lb.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E($b.$$.fragment,f),E(Ly.$$.fragment,f),E(qb.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(jb.$$.fragment,f),E(Ry.$$.fragment,f),E(F4.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(M4.$$.fragment,f),E(Ny.$$.fragment,f),E(dv.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(fv.$$.fragment,f),E(Vy.$$.fragment,f),E(hv.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(uv.$$.fragment,f),E(Hy.$$.fragment,f),E(xv.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(kv.$$.fragment,f),E(Zy.$$.fragment,f),E(Bv.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(Iv.$$.fragment,f),E(aL.$$.fragment,f),E(Qv.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(Hv.$$.fragment,f),E(dL.$$.fragment,f),E(eF.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(rF.$$.fragment,f),E(hL.$$.fragment,f),E(gF.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(pF.$$.fragment,f),E(vL.$$.fragment,f),E(vF.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(TF.$$.fragment,f),E(wL.$$.fragment,f),E(yF.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(xF.$$.fragment,f),E($L.$$.fragment,f),E(BF.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(BL.$$.fragment,f),E(IF.$$.fragment,f),E(PL.$$.fragment,f),E(jF.$$.fragment,f),E(IL.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GF.$$.fragment,f),E(DL.$$.fragment,f),E(XF.$$.fragment,f),E(GL.$$.fragment,f),E(OL.$$.fragment,f),E(XL.$$.fragment,f),E(QF.$$.fragment,f),E(zL.$$.fragment,f),E(KF.$$.fragment,f),E(QL.$$.fragment,f),E(WL.$$.fragment,f),E(UL.$$.fragment,f),E(e0.$$.fragment,f),E(JL.$$.fragment,f),E(t0.$$.fragment,f),E(YL.$$.fragment,f),E(KL.$$.fragment,f),E(e8.$$.fragment,f),E(n0.$$.fragment,f),E(o8.$$.fragment,f),E(U0.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(Y0.$$.fragment,f),E(s8.$$.fragment,f),E(T6.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(E6.$$.fragment,f),E(f8.$$.fragment,f),E(I6.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(N6.$$.fragment,f),E(u8.$$.fragment,f),E(G6.$$.fragment,f),E(b8.$$.fragment,f),E(v8.$$.fragment,f),E(T8.$$.fragment,f),E(V6.$$.fragment,f),E(M8.$$.fragment,f),E(cT.$$.fragment,f),E(E8.$$.fragment,f),E(C8.$$.fragment,f),E(A8.$$.fragment,f),E(mT.$$.fragment,f),E(y8.$$.fragment,f),E(ET.$$.fragment,f),E(L8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(wT.$$.fragment,f),E(S8.$$.fragment,f),E(KT.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(eM.$$.fragment,f),E(q8.$$.fragment,f),E(bM.$$.fragment,f),E(N8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(FM.$$.fragment,f),E(O8.$$.fragment,f),E(MM.$$.fragment,f),E(V8.$$.fragment,f),E(X8.$$.fragment,f),E(Q8.$$.fragment,f),E(CM.$$.fragment,f),E(W8.$$.fragment,f),E(zM.$$.fragment,f),E(H8.$$.fragment,f),E(U8.$$.fragment,f),E(Y8.$$.fragment,f),E(WM.$$.fragment,f),E(K8.$$.fragment,f),E(hE.$$.fragment,f),E(Z8.$$.fragment,f),E(e7.$$.fragment,f),E(r7.$$.fragment,f),E(uE.$$.fragment,f),E(t7.$$.fragment,f),E(bE.$$.fragment,f),E(a7.$$.fragment,f),E(n7.$$.fragment,f),E(l7.$$.fragment,f),E(FE.$$.fragment,f),E(i7.$$.fragment,f),E(ME.$$.fragment,f),E(d7.$$.fragment,f),E(c7.$$.fragment,f),E(m7.$$.fragment,f),E(CE.$$.fragment,f),E(g7.$$.fragment,f),E(JE.$$.fragment,f),E(h7.$$.fragment,f),E(p7.$$.fragment,f),E(_7.$$.fragment,f),E(KE.$$.fragment,f),E(b7.$$.fragment,f),E(aC.$$.fragment,f),E(v7.$$.fragment,f),E(F7.$$.fragment,f),E(M7.$$.fragment,f),E(sC.$$.fragment,f),E(E7.$$.fragment,f),E(vC.$$.fragment,f),E(C7.$$.fragment,f),E(w7.$$.fragment,f),E(y7.$$.fragment,f),E(TC.$$.fragment,f),E(L7.$$.fragment,f),E(SC.$$.fragment,f),E(x7.$$.fragment,f),E($7.$$.fragment,f),E(S7.$$.fragment,f),E(BC.$$.fragment,f),E(R7.$$.fragment,f),E(XC.$$.fragment,f),E(B7.$$.fragment,f),E(P7.$$.fragment,f),E(q7.$$.fragment,f),E(QC.$$.fragment,f),E(N7.$$.fragment,f),E(t5.$$.fragment,f),E(j7.$$.fragment,f),E(D7.$$.fragment,f),E(O7.$$.fragment,f),E(n5.$$.fragment,f),E(V7.$$.fragment,f),E(u5.$$.fragment,f),E(X7.$$.fragment,f),E(z7.$$.fragment,f),E(W7.$$.fragment,f),E(b5.$$.fragment,f),E(H7.$$.fragment,f),E(y5.$$.fragment,f),E(U7.$$.fragment,f),E(J7.$$.fragment,f),E(K7.$$.fragment,f),E(x5.$$.fragment,f),E(Z7.$$.fragment,f),E(N5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(D5.$$.fragment,f),E(ax.$$.fragment,f),E(O5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(X5.$$.fragment,f),E(dx.$$.fragment,f),E(W5.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(U5.$$.fragment,f),E(px.$$.fragment,f),E(Y5.$$.fragment,f),XPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(sf.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(ag.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Ig.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(dh.$$.fragment,f),C(ch.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(kh.$$.fragment,f),C(WA.$$.fragment,f),C(vu.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(Tu.$$.fragment,f),C(KA.$$.fragment,f),C(i_.$$.fragment,f),C(ZA.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(c_.$$.fragment,f),C(ty.$$.fragment,f),C(W_.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(U_.$$.fragment,f),C(iy.$$.fragment,f),C(S2.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(B2.$$.fragment,f),C(gy.$$.fragment,f),C(Z2.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(o1.$$.fragment,f),C(by.$$.fragment,f),C(J1.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(K1.$$.fragment,f),C(Ey.$$.fragment,f),C(Lb.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C($b.$$.fragment,f),C(Ly.$$.fragment,f),C(qb.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(jb.$$.fragment,f),C(Ry.$$.fragment,f),C(F4.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(M4.$$.fragment,f),C(Ny.$$.fragment,f),C(dv.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(fv.$$.fragment,f),C(Vy.$$.fragment,f),C(hv.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(uv.$$.fragment,f),C(Hy.$$.fragment,f),C(xv.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(kv.$$.fragment,f),C(Zy.$$.fragment,f),C(Bv.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(Iv.$$.fragment,f),C(aL.$$.fragment,f),C(Qv.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(Hv.$$.fragment,f),C(dL.$$.fragment,f),C(eF.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(rF.$$.fragment,f),C(hL.$$.fragment,f),C(gF.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(pF.$$.fragment,f),C(vL.$$.fragment,f),C(vF.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(TF.$$.fragment,f),C(wL.$$.fragment,f),C(yF.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(xF.$$.fragment,f),C($L.$$.fragment,f),C(BF.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(BL.$$.fragment,f),C(IF.$$.fragment,f),C(PL.$$.fragment,f),C(jF.$$.fragment,f),C(IL.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GF.$$.fragment,f),C(DL.$$.fragment,f),C(XF.$$.fragment,f),C(GL.$$.fragment,f),C(OL.$$.fragment,f),C(XL.$$.fragment,f),C(QF.$$.fragment,f),C(zL.$$.fragment,f),C(KF.$$.fragment,f),C(QL.$$.fragment,f),C(WL.$$.fragment,f),C(UL.$$.fragment,f),C(e0.$$.fragment,f),C(JL.$$.fragment,f),C(t0.$$.fragment,f),C(YL.$$.fragment,f),C(KL.$$.fragment,f),C(e8.$$.fragment,f),C(n0.$$.fragment,f),C(o8.$$.fragment,f),C(U0.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(Y0.$$.fragment,f),C(s8.$$.fragment,f),C(T6.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(E6.$$.fragment,f),C(f8.$$.fragment,f),C(I6.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(N6.$$.fragment,f),C(u8.$$.fragment,f),C(G6.$$.fragment,f),C(b8.$$.fragment,f),C(v8.$$.fragment,f),C(T8.$$.fragment,f),C(V6.$$.fragment,f),C(M8.$$.fragment,f),C(cT.$$.fragment,f),C(E8.$$.fragment,f),C(C8.$$.fragment,f),C(A8.$$.fragment,f),C(mT.$$.fragment,f),C(y8.$$.fragment,f),C(ET.$$.fragment,f),C(L8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(wT.$$.fragment,f),C(S8.$$.fragment,f),C(KT.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(eM.$$.fragment,f),C(q8.$$.fragment,f),C(bM.$$.fragment,f),C(N8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(FM.$$.fragment,f),C(O8.$$.fragment,f),C(MM.$$.fragment,f),C(V8.$$.fragment,f),C(X8.$$.fragment,f),C(Q8.$$.fragment,f),C(CM.$$.fragment,f),C(W8.$$.fragment,f),C(zM.$$.fragment,f),C(H8.$$.fragment,f),C(U8.$$.fragment,f),C(Y8.$$.fragment,f),C(WM.$$.fragment,f),C(K8.$$.fragment,f),C(hE.$$.fragment,f),C(Z8.$$.fragment,f),C(e7.$$.fragment,f),C(r7.$$.fragment,f),C(uE.$$.fragment,f),C(t7.$$.fragment,f),C(bE.$$.fragment,f),C(a7.$$.fragment,f),C(n7.$$.fragment,f),C(l7.$$.fragment,f),C(FE.$$.fragment,f),C(i7.$$.fragment,f),C(ME.$$.fragment,f),C(d7.$$.fragment,f),C(c7.$$.fragment,f),C(m7.$$.fragment,f),C(CE.$$.fragment,f),C(g7.$$.fragment,f),C(JE.$$.fragment,f),C(h7.$$.fragment,f),C(p7.$$.fragment,f),C(_7.$$.fragment,f),C(KE.$$.fragment,f),C(b7.$$.fragment,f),C(aC.$$.fragment,f),C(v7.$$.fragment,f),C(F7.$$.fragment,f),C(M7.$$.fragment,f),C(sC.$$.fragment,f),C(E7.$$.fragment,f),C(vC.$$.fragment,f),C(C7.$$.fragment,f),C(w7.$$.fragment,f),C(y7.$$.fragment,f),C(TC.$$.fragment,f),C(L7.$$.fragment,f),C(SC.$$.fragment,f),C(x7.$$.fragment,f),C($7.$$.fragment,f),C(S7.$$.fragment,f),C(BC.$$.fragment,f),C(R7.$$.fragment,f),C(XC.$$.fragment,f),C(B7.$$.fragment,f),C(P7.$$.fragment,f),C(q7.$$.fragment,f),C(QC.$$.fragment,f),C(N7.$$.fragment,f),C(t5.$$.fragment,f),C(j7.$$.fragment,f),C(D7.$$.fragment,f),C(O7.$$.fragment,f),C(n5.$$.fragment,f),C(V7.$$.fragment,f),C(u5.$$.fragment,f),C(X7.$$.fragment,f),C(z7.$$.fragment,f),C(W7.$$.fragment,f),C(b5.$$.fragment,f),C(H7.$$.fragment,f),C(y5.$$.fragment,f),C(U7.$$.fragment,f),C(J7.$$.fragment,f),C(K7.$$.fragment,f),C(x5.$$.fragment,f),C(Z7.$$.fragment,f),C(N5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(D5.$$.fragment,f),C(ax.$$.fragment,f),C(O5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(X5.$$.fragment,f),C(dx.$$.fragment,f),C(W5.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(U5.$$.fragment,f),C(px.$$.fragment,f),C(Y5.$$.fragment,f),XPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(qe),f&&t(Ve),f&&t(tf),w(ba,f),f&&t(Xe),f&&t(Ae),f&&t(To),f&&t(va),f&&t(VRe),f&&t(ii),w(_A),f&&t(XRe),f&&t(wn),f&&t(zRe),w(bA,f),f&&t(QRe),f&&t(R9),f&&t(WRe),w(sf,f),f&&t(HRe),f&&t(di),w(vA),f&&t(URe),f&&t(Mo),w(FA),w(EA),w(ag),w(CA),f&&t(JRe),f&&t(fi),w(wA),f&&t(YRe),f&&t(Eo),w(AA),w(xA),w(Ig),w($A),f&&t(KRe),f&&t(mi),w(kA),f&&t(ZRe),f&&t(Co),w(SA),w(PA),w(dh),w(ch),w(IA),f&&t(eBe),f&&t(gi),w(qA),f&&t(oBe),f&&t(wo),w(NA),w(GA),w(yh),w(Lh),w(OA),f&&t(rBe),f&&t(pi),w(VA),f&&t(tBe),f&&t(Ao),w(XA),w(QA),w(kh),w(WA),w(vu),f&&t(aBe),f&&t(bi),w(HA),f&&t(nBe),f&&t(yo),w(UA),w(YA),w(Tu),w(KA),w(i_),f&&t(sBe),f&&t(Ti),w(ZA),f&&t(lBe),f&&t(Lo),w(ey),w(ry),w(c_),w(ty),w(W_),f&&t(iBe),f&&t(Ci),w(ay),f&&t(dBe),f&&t(xo),w(ny),w(ly),w(U_),w(iy),w(S2),f&&t(cBe),f&&t(yi),w(dy),f&&t(fBe),f&&t($o),w(cy),w(my),w(B2),w(gy),w(Z2),f&&t(mBe),f&&t($i),w(hy),f&&t(gBe),f&&t(ko),w(py),w(_y),w(o1),w(by),w(J1),f&&t(hBe),f&&t(Ri),w(vy),f&&t(pBe),f&&t(So),w(Fy),w(My),w(K1),w(Ey),w(Lb),f&&t(uBe),f&&t(Ii),w(Cy),f&&t(_Be),f&&t(Ro),w(wy),w(yy),w($b),w(Ly),w(qb),f&&t(bBe),f&&t(ji),w(xy),f&&t(vBe),f&&t(Bo),w($y),w(Sy),w(jb),w(Ry),w(F4),f&&t(FBe),f&&t(Oi),w(By),f&&t(TBe),f&&t(Po),w(Py),w(qy),w(M4),w(Ny),w(dv),f&&t(MBe),f&&t(zi),w(jy),f&&t(EBe),f&&t(Io),w(Dy),w(Oy),w(fv),w(Vy),w(hv),f&&t(CBe),f&&t(Hi),w(Xy),f&&t(wBe),f&&t(qo),w(zy),w(Wy),w(uv),w(Hy),w(xv),f&&t(ABe),f&&t(Yi),w(Uy),f&&t(yBe),f&&t(No),w(Jy),w(Ky),w(kv),w(Zy),w(Bv),f&&t(LBe),f&&t(ed),w(eL),f&&t(xBe),f&&t(jo),w(oL),w(tL),w(Iv),w(aL),w(Qv),f&&t($Be),f&&t(td),w(nL),f&&t(kBe),f&&t(Do),w(sL),w(iL),w(Hv),w(dL),w(eF),f&&t(SBe),f&&t(sd),w(cL),f&&t(RBe),f&&t(Go),w(fL),w(gL),w(rF),w(hL),w(gF),f&&t(BBe),f&&t(dd),w(pL),f&&t(PBe),f&&t(Oo),w(uL),w(bL),w(pF),w(vL),w(vF),f&&t(IBe),f&&t(md),w(TL),f&&t(qBe),f&&t(Vo),w(ML),w(CL),w(TF),w(wL),w(yF),f&&t(NBe),f&&t(pd),w(AL),f&&t(jBe),f&&t(Xo),w(yL),w(xL),w(xF),w($L),w(BF),f&&t(DBe),f&&t(vd),w(kL),f&&t(GBe),f&&t(zo),w(SL),w(BL),w(IF),w(PL),w(jF),f&&t(OBe),f&&t(Md),w(IL),f&&t(VBe),f&&t(Qo),w(qL),w(jL),w(GF),w(DL),w(XF),f&&t(XBe),f&&t(wd),w(GL),f&&t(zBe),f&&t(Wo),w(OL),w(XL),w(QF),w(zL),w(KF),f&&t(QBe),f&&t(Ld),w(QL),f&&t(WBe),f&&t(Ho),w(WL),w(UL),w(e0),w(JL),w(t0),f&&t(HBe),f&&t(kd),w(YL),f&&t(UBe),f&&t(Uo),w(KL),w(e8),w(n0),w(o8),w(U0),f&&t(JBe),f&&t(Bd),w(r8),f&&t(YBe),f&&t(Jo),w(t8),w(n8),w(Y0),w(s8),w(T6),f&&t(KBe),f&&t(qd),w(l8),f&&t(ZBe),f&&t(Yo),w(i8),w(c8),w(E6),w(f8),w(I6),f&&t(ePe),f&&t(Dd),w(m8),f&&t(oPe),f&&t(Ko),w(g8),w(p8),w(N6),w(u8),w(G6),f&&t(rPe),f&&t(Vd),w(b8),f&&t(tPe),f&&t(Zo),w(v8),w(T8),w(V6),w(M8),w(cT),f&&t(aPe),f&&t(Qd),w(E8),f&&t(nPe),f&&t(er),w(C8),w(A8),w(mT),w(y8),w(ET),f&&t(sPe),f&&t(Ud),w(L8),f&&t(lPe),f&&t(or),w(x8),w(k8),w(wT),w(S8),w(KT),f&&t(iPe),f&&t(Kd),w(R8),f&&t(dPe),f&&t(rr),w(B8),w(I8),w(eM),w(q8),w(bM),f&&t(cPe),f&&t(oc),w(N8),f&&t(fPe),f&&t(tr),w(j8),w(G8),w(FM),w(O8),w(MM),f&&t(mPe),f&&t(ac),w(V8),f&&t(gPe),f&&t(ar),w(X8),w(Q8),w(CM),w(W8),w(zM),f&&t(hPe),f&&t(lc),w(H8),f&&t(pPe),f&&t(nr),w(U8),w(Y8),w(WM),w(K8),w(hE),f&&t(uPe),f&&t(cc),w(Z8),f&&t(_Pe),f&&t(sr),w(e7),w(r7),w(uE),w(t7),w(bE),f&&t(bPe),f&&t(gc),w(a7),f&&t(vPe),f&&t(lr),w(n7),w(l7),w(FE),w(i7),w(ME),f&&t(FPe),f&&t(uc),w(d7),f&&t(TPe),f&&t(ir),w(c7),w(m7),w(CE),w(g7),w(JE),f&&t(MPe),f&&t(vc),w(h7),f&&t(EPe),f&&t(dr),w(p7),w(_7),w(KE),w(b7),w(aC),f&&t(CPe),f&&t(Mc),w(v7),f&&t(wPe),f&&t(cr),w(F7),w(M7),w(sC),w(E7),w(vC),f&&t(APe),f&&t(wc),w(C7),f&&t(yPe),f&&t(fr),w(w7),w(y7),w(TC),w(L7),w(SC),f&&t(LPe),f&&t(Lc),w(x7),f&&t(xPe),f&&t(mr),w($7),w(S7),w(BC),w(R7),w(XC),f&&t($Pe),f&&t(kc),w(B7),f&&t(kPe),f&&t(gr),w(P7),w(q7),w(QC),w(N7),w(t5),f&&t(SPe),f&&t(Bc),w(j7),f&&t(RPe),f&&t(hr),w(D7),w(O7),w(n5),w(V7),w(u5),f&&t(BPe),f&&t(qc),w(X7),f&&t(PPe),f&&t(pr),w(z7),w(W7),w(b5),w(H7),w(y5),f&&t(IPe),f&&t(Dc),w(U7),f&&t(qPe),f&&t(ur),w(J7),w(K7),w(x5),w(Z7),w(N5),f&&t(NPe),f&&t(Vc),w(ex),f&&t(jPe),f&&t(_r),w(ox),w(tx),w(D5),w(ax),w(O5),f&&t(DPe),f&&t(Qc),w(nx),f&&t(GPe),f&&t(br),w(sx),w(ix),w(X5),w(dx),w(W5),f&&t(OPe),f&&t(Uc),w(fx),f&&t(VPe),f&&t(vr),w(mx),w(hx),w(U5),w(px),w(Y5)}}}const H5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function U5t(L){return YEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class r3t extends WEt{constructor(g){super();HEt(this,g,U5t,W5t,UEt,{})}}export{r3t as default,H5t as metadata};
