import{S as ml,i as hl,s as fl,e as r,k as c,w as T,t as s,M as ul,c as n,d as o,m as p,a,x as v,h as i,b as l,F as e,g,y as C,q as b,o as w,B as k,v as gl,L as sr}from"../../chunks/vendor-6b77c823.js";import{T as Qr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-1088f2fb.js";import{C as ir}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ue}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as ar}from"../../chunks/ExampleCodeBlock-5212b321.js";function _l(z){let d,$,h,u,y;return u=new ir({props:{code:`from transformers import MCTCTModel, MCTCTConfig

# Initializing a M-CTC-T mctct-large style configuration
configuration = MCTCTConfig()

# Initializing a model from the mctct-large style configuration
model = MCTCTModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MCTCTModel, MCTCTConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a M-CTC-T mctct-large style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MCTCTConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the mctct-large style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MCTCTModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),{c(){d=r("p"),$=s("Example:"),h=c(),T(u.$$.fragment)},l(m){d=n(m,"P",{});var _=a(d);$=i(_,"Example:"),_.forEach(o),h=p(m),v(u.$$.fragment,m)},m(m,_){g(m,d,_),e(d,$),g(m,h,_),C(u,m,_),y=!0},p:sr,i(m){y||(b(u.$$.fragment,m),y=!0)},o(m){w(u.$$.fragment,m),y=!1},d(m){m&&o(d),m&&o(h),k(u,m)}}}function Tl(z){let d,$,h,u,y,m,_,F;return{c(){d=r("p"),$=s(`This class method is simply calling the feature extractor
`),h=r("a"),u=s("from_pretrained()"),y=s(` and the tokenizer
`),m=r("code"),_=s("from_pretrained"),F=s(` methods. Please refer to the docstrings of the
methods above for more information.`),this.h()},l(j){d=n(j,"P",{});var x=a(d);$=i(x,`This class method is simply calling the feature extractor
`),h=n(x,"A",{href:!0});var V=a(h);u=i(V,"from_pretrained()"),V.forEach(o),y=i(x,` and the tokenizer
`),m=n(x,"CODE",{});var A=a(m);_=i(A,"from_pretrained"),A.forEach(o),F=i(x,` methods. Please refer to the docstrings of the
methods above for more information.`),x.forEach(o),this.h()},h(){l(h,"href","/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained")},m(j,x){g(j,d,x),e(d,$),e(d,h),e(h,u),e(d,y),e(d,m),e(m,_),e(d,F)},d(j){j&&o(d)}}}function vl(z){let d,$,h,u,y,m,_,F;return{c(){d=r("p"),$=s("This class method is simply calling "),h=r("a"),u=s("save_pretrained()"),y=s(` and
`),m=r("code"),_=s("save_pretrained"),F=s(`. Please refer to the docstrings of the methods
above for more information.`),this.h()},l(j){d=n(j,"P",{});var x=a(d);$=i(x,"This class method is simply calling "),h=n(x,"A",{href:!0});var V=a(h);u=i(V,"save_pretrained()"),V.forEach(o),y=i(x,` and
`),m=n(x,"CODE",{});var A=a(m);_=i(A,"save_pretrained"),A.forEach(o),F=i(x,`. Please refer to the docstrings of the methods
above for more information.`),x.forEach(o),this.h()},h(){l(h,"href","/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained")},m(j,x){g(j,d,x),e(d,$),e(d,h),e(h,u),e(d,y),e(d,m),e(m,_),e(d,F)},d(j){j&&o(d)}}}function Cl(z){let d,$,h,u,y;return{c(){d=r("p"),$=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),u=s("Module"),y=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){d=n(m,"P",{});var _=a(d);$=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(_,"CODE",{});var F=a(h);u=i(F,"Module"),F.forEach(o),y=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(m,_){g(m,d,_),e(d,$),e(d,h),e(h,u),e(d,y)},d(m){m&&o(d)}}}function bl(z){let d,$,h,u,y;return u=new ir({props:{code:`from transformers import Wav2Vec2CTCTokenizer, MCTCTModel
from datasets import load_dataset
import torch

dataset = load_dataset("hf-internal-testing/librispeech_asr_demo", "clean", split="validation")
dataset = dataset.sort("id")
sampling_rate = dataset.features["audio"].sampling_rate

processor = Wav2Vec2CTCTokenizer.from_pretrained("mctct-large")
model = MCTCTModel.from_pretrained("mctct-large")

# audio file is decoded on the fly
inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
with torch.no_grad():
    logits = model(**inputs).logits
predicted_ids = torch.argmax(logits, dim=-1)

# transcribe speech
transcription = processor.batch_decode(predicted_ids)
transcription[0]
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Wav2Vec2CTCTokenizer, MCTCTModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_demo&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.sort(<span class="hljs-string">&quot;id&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sampling_rate = dataset.features[<span class="hljs-string">&quot;audio&quot;</span>].sampling_rate

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = Wav2Vec2CTCTokenizer.from_pretrained(<span class="hljs-string">&quot;mctct-large&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MCTCTModel.from_pretrained(<span class="hljs-string">&quot;mctct-large&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># audio file is decoded on the fly</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>], sampling_rate=sampling_rate, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_ids = torch.argmax(logits, dim=-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># transcribe speech</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>transcription = processor.batch_decode(predicted_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>transcription[<span class="hljs-number">0</span>]
`}}),{c(){d=r("p"),$=s("Example:"),h=c(),T(u.$$.fragment)},l(m){d=n(m,"P",{});var _=a(d);$=i(_,"Example:"),_.forEach(o),h=p(m),v(u.$$.fragment,m)},m(m,_){g(m,d,_),e(d,$),g(m,h,_),C(u,m,_),y=!0},p:sr,i(m){y||(b(u.$$.fragment,m),y=!0)},o(m){w(u.$$.fragment,m),y=!1},d(m){m&&o(d),m&&o(h),k(u,m)}}}function wl(z){let d,$;return d=new ir({props:{code:`with processor.as_target_processor():
    inputs["labels"] = processor(dataset[0]["text"], return_tensors="pt").input_ids

# compute loss
loss = model(**inputs).loss
round(loss.item(), 2)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> processor.as_target_processor():
<span class="hljs-meta">... </span>    inputs[<span class="hljs-string">&quot;labels&quot;</span>] = processor(dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># compute loss</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
`}}),{c(){T(d.$$.fragment)},l(h){v(d.$$.fragment,h)},m(h,u){C(d,h,u),$=!0},p:sr,i(h){$||(b(d.$$.fragment,h),$=!0)},o(h){w(d.$$.fragment,h),$=!1},d(h){k(d,h)}}}function kl(z){let d,$,h,u,y;return{c(){d=r("p"),$=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),h=r("code"),u=s("Module"),y=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(m){d=n(m,"P",{});var _=a(d);$=i(_,"Although the recipe for forward pass needs to be defined within this function, one should call the "),h=n(_,"CODE",{});var F=a(h);u=i(F,"Module"),F.forEach(o),y=i(_,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),_.forEach(o)},m(m,_){g(m,d,_),e(d,$),e(d,h),e(h,u),e(d,y)},d(m){m&&o(d)}}}function $l(z){let d,$,h,u,y;return u=new ir({props:{code:`from transformers import MCTCTProcessor, MCTCTForCTC
from datasets import load_dataset
import torch

dataset = load_dataset("hf-internal-testing/librispeech_asr_demo", "clean", split="validation")
dataset = dataset.sort("id")
sampling_rate = dataset.features["audio"].sampling_rate

processor = MCTCTProcessor.from_pretrained("mctct-large")
model = MCTCTForCTC.from_pretrained("mctct-large")

# audio file is decoded on the fly
inputs = processor(dataset[0]["audio"]["array"], sampling_rate=sampling_rate, return_tensors="pt")
with torch.no_grad():
    logits = model(**inputs).logits
predicted_ids = torch.argmax(logits, dim=-1)

# transcribe speech
transcription = processor.batch_decode(predicted_ids)
transcription[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MCTCTProcessor, MCTCTForCTC
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;hf-internal-testing/librispeech_asr_demo&quot;</span>, <span class="hljs-string">&quot;clean&quot;</span>, split=<span class="hljs-string">&quot;validation&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.sort(<span class="hljs-string">&quot;id&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>sampling_rate = dataset.features[<span class="hljs-string">&quot;audio&quot;</span>].sampling_rate

<span class="hljs-meta">&gt;&gt;&gt; </span>processor = MCTCTProcessor.from_pretrained(<span class="hljs-string">&quot;mctct-large&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MCTCTForCTC.from_pretrained(<span class="hljs-string">&quot;mctct-large&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># audio file is decoded on the fly</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = processor(dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;audio&quot;</span>][<span class="hljs-string">&quot;array&quot;</span>], sampling_rate=sampling_rate, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_ids = torch.argmax(logits, dim=-<span class="hljs-number">1</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># transcribe speech</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>transcription = processor.batch_decode(predicted_ids)
<span class="hljs-meta">&gt;&gt;&gt; </span>transcription[<span class="hljs-number">0</span>]
<span class="hljs-string">&#x27;MISTER QUILTER IS THE APOSTLE OF THE MIDDLE CLASSES AND WE ARE GLAD TO WELCOME HIS GOSPEL&#x27;</span>`}}),{c(){d=r("p"),$=s("Example:"),h=c(),T(u.$$.fragment)},l(m){d=n(m,"P",{});var _=a(d);$=i(_,"Example:"),_.forEach(o),h=p(m),v(u.$$.fragment,m)},m(m,_){g(m,d,_),e(d,$),g(m,h,_),C(u,m,_),y=!0},p:sr,i(m){y||(b(u.$$.fragment,m),y=!0)},o(m){w(u.$$.fragment,m),y=!1},d(m){m&&o(d),m&&o(h),k(u,m)}}}function yl(z){let d,$;return d=new ir({props:{code:`with processor.as_target_processor():
    inputs["labels"] = processor(dataset[0]["text"], return_tensors="pt").input_ids

# compute loss
loss = model(**inputs).loss
round(loss.item(), 2)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> processor.as_target_processor():
<span class="hljs-meta">... </span>    inputs[<span class="hljs-string">&quot;labels&quot;</span>] = processor(dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>], return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># compute loss</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>loss = model(**inputs).loss
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">round</span>(loss.item(), <span class="hljs-number">2</span>)
<span class="hljs-number">53.48</span>`}}),{c(){T(d.$$.fragment)},l(h){v(d.$$.fragment,h)},m(h,u){C(d,h,u),$=!0},p:sr,i(h){$||(b(d.$$.fragment,h),$=!0)},o(h){w(d.$$.fragment,h),$=!1},d(h){k(d,h)}}}function Ml(z){let d,$,h,u,y,m,_,F,j,x,V,A,To,Ne,Xr,vo,Yr,lr,ge,Zr,Be,en,tn,dr,At,on,cr,Wt,Co,rn,pr,R,nn,Lt,an,sn,He,ln,dn,mr,Z,_e,bo,Ue,cn,wo,pn,hr,O,Re,mn,ee,hn,Dt,fn,un,Ge,gn,_n,Tn,te,vn,It,Cn,bn,Ot,wn,kn,$n,Te,fr,oe,ve,ko,Je,yn,$o,Mn,ur,P,Ke,xn,yo,En,zn,Qe,Fn,St,Pn,qn,jn,G,Xe,Vn,Mo,An,Wn,xo,Ln,Dn,Ce,Ye,In,re,On,Eo,Sn,Nn,zo,Bn,Hn,Un,J,Ze,Rn,Nt,Gn,Bt,Jn,Kn,Fo,Qn,Xn,Ht,et,gr,ne,be,Po,tt,Yn,qo,Zn,_r,S,ot,ea,jo,ta,oa,ae,ra,Ut,na,aa,rt,sa,ia,la,we,nt,da,Vo,ca,Tr,se,ke,Ao,at,pa,Wo,ma,vr,M,st,ha,Lo,fa,ua,W,Rt,ga,_a,Gt,Ta,va,Jt,Ca,ba,it,Do,wa,ka,$a,Kt,ya,Ma,xa,$e,lt,Ea,N,za,dt,Io,Fa,Pa,qa,Qt,ja,Va,Oo,Aa,Wa,La,K,ct,Da,So,Ia,Oa,ye,Sa,Q,pt,Na,mt,Ba,Xt,Ha,Ua,Ra,Me,Ga,xe,ht,Ja,ft,Ka,Yt,Qa,Xa,Ya,Ee,ut,Za,gt,es,Zt,ts,os,rs,ze,_t,ns,No,as,Cr,ie,Fe,Bo,Tt,ss,Ho,is,br,le,vt,ls,Ct,ds,Uo,cs,ps,wr,de,bt,ms,wt,hs,eo,fs,us,kr,ce,Pe,Ro,kt,gs,Go,_s,$r,B,$t,Ts,yt,vs,Mt,Cs,bs,ws,L,xt,ks,pe,$s,to,ys,Ms,Jo,xs,Es,zs,qe,Fs,je,Ps,Ve,yr,me,Ae,Ko,Et,qs,Qo,js,Mr,H,zt,Vs,he,As,Xo,Ws,Ls,Ft,Ds,Is,Os,D,Pt,Ss,fe,Ns,oo,Bs,Hs,Yo,Us,Rs,Gs,We,Js,Le,Ks,De,xr;return m=new ue({}),Ne=new ue({}),Ue=new ue({}),Re=new E({props:{name:"class transformers.MCTCTConfig",anchor:"transformers.MCTCTConfig",parameters:[{name:"vocab_size",val:" = 8065"},{name:"hidden_size",val:" = 1536"},{name:"num_hidden_layers",val:" = 36"},{name:"intermediate_size",val:" = 6144"},{name:"num_attention_heads",val:" = 4"},{name:"attention_head_dim",val:" = 384"},{name:"max_position_embeddings",val:" = 920"},{name:"layer_norm_eps",val:" = 1e-05"},{name:"layerdrop",val:" = 0.3"},{name:"hidden_act",val:" = 'relu'"},{name:"initializer_range",val:" = 0.02"},{name:"hidden_dropout_prob",val:" = 0.3"},{name:"attention_probs_dropout_prob",val:" = 0.3"},{name:"pad_token_id",val:" = 1"},{name:"bos_token_id",val:" = 0"},{name:"eos_token_id",val:" = 2"},{name:"conv_glu_dim",val:" = 1"},{name:"conv_dropout",val:" = 0.3"},{name:"num_conv_layers",val:" = 1"},{name:"conv_kernel",val:" = (7,)"},{name:"conv_stride",val:" = (3,)"},{name:"input_feat_per_channel",val:" = 80"},{name:"input_channels",val:" = 1"},{name:"conv_channels",val:" = None"},{name:"ctc_loss_reduction",val:" = 'sum'"},{name:"ctc_zero_infinity",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MCTCTConfig.vocab_size",description:`<strong>vocab_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8065) &#x2014;
Vocabulary size of the MCTCT model. Defines the number of different tokens that can be represented by the
<code>inputs_ids</code> passed when calling <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel">~MCTCTModel</a> or <code>~TFMCTCTModel</code>.`,name:"vocab_size"},{anchor:"transformers.MCTCTConfig.hidden_size",description:`<strong>hidden_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1536) &#x2014;
Dimension of the encoder layers and the pooler layer.`,name:"hidden_size"},{anchor:"transformers.MCTCTConfig.num_hidden_layers",description:`<strong>num_hidden_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 36) &#x2014;
Number of hidden layers in the Transformer encoder.`,name:"num_hidden_layers"},{anchor:"transformers.MCTCTConfig.intermediate_size",description:`<strong>intermediate_size</strong> (<code>int</code>, <em>optional</em>, defaults to 6144) &#x2014;
Dimension of the &#x201C;intermediate&#x201D; (i.e., feed-forward) layer in the Transformer encoder.`,name:"intermediate_size"},{anchor:"transformers.MCTCTConfig.num_attention_heads",description:`<strong>num_attention_heads</strong> (<code>int</code>, <em>optional</em>, defaults to 4) &#x2014;
Number of attention heads for each attention layer in the Transformer encoder.`,name:"num_attention_heads"},{anchor:"transformers.MCTCTConfig.attention_head_dim",description:`<strong>attention_head_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 384) &#x2014;
Dimensions of each attention head for each attention layer in the Transformer encoder.`,name:"attention_head_dim"},{anchor:"transformers.MCTCTConfig.max_position_embeddings",description:`<strong>max_position_embeddings</strong> (<code>int</code>, <em>optional</em>, defaults to 920) &#x2014;
The maximum sequence length that this model might ever be used with (after log-mel spectrogram extraction).`,name:"max_position_embeddings"},{anchor:"transformers.MCTCTConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-5) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.MCTCTConfig.layerdrop",description:`<strong>layerdrop</strong> (<code>float</code>, <em>optional</em>, defaults to 0.3) &#x2014;
The probability of dropping an encoder layer during training. The default 0.3 value is used in the original
implementation.`,name:"layerdrop"},{anchor:"transformers.MCTCTConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;relu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in the encoder and pooler. If string, <code>&quot;gelu&quot;</code>,
<code>&quot;relu&quot;</code>, <code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.MCTCTConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.MCTCTConfig.hidden_dropout_prob",description:`<strong>hidden_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout probabilitiy for all fully connected layers in the embeddings, encoder, and pooler.`,name:"hidden_dropout_prob"},{anchor:"transformers.MCTCTConfig.attention_probs_dropout_prob",description:`<strong>attention_probs_dropout_prob</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
The dropout ratio for the attention probabilities.`,name:"attention_probs_dropout_prob"},{anchor:"transformers.MCTCTConfig.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The tokenizer index of the pad token.`,name:"pad_token_id"},{anchor:"transformers.MCTCTConfig.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
The tokenizer index of the bos token.`,name:"bos_token_id"},{anchor:"transformers.MCTCTConfig.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>, defaults to 2) &#x2014;
The tokenizer index of the eos token.`,name:"eos_token_id"},{anchor:"transformers.MCTCTConfig.conv_glu_dim",description:`<strong>conv_glu_dim</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The dimension of the output of the <code>Conv1dSubsampler</code> layer in which GLU is applied on. Though the original
Flashlight code uses the value of 2, here it&#x2019;s adapted to 1 due to transposition differences.`,name:"conv_glu_dim"},{anchor:"transformers.MCTCTConfig.conv_dropout",description:`<strong>conv_dropout</strong> (<code>int</code>, <em>optional</em>, defaults to 0.3) &#x2014;
The probability of randomly dropping the <code>Conv1dSubsampler</code> layer during training.`,name:"conv_dropout"},{anchor:"transformers.MCTCTConfig.num_conv_layers",description:`<strong>num_conv_layers</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of convolution layers before applying transformer encoder layers.`,name:"num_conv_layers"},{anchor:"transformers.MCTCTConfig.conv_kernel",description:`<strong>conv_kernel</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [7]) &#x2014;
The kernel size of the 1D convolution applied before transformer layers. <code>len(conv_kernel)</code> must be equal
to <code>num_conv_layers</code>.`,name:"conv_kernel"},{anchor:"transformers.MCTCTConfig.conv_stride",description:`<strong>conv_stride</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3]) &#x2014;
The stride length of the 1D convolution applied before transformer layers. <code>len(conv_stride)</code> must be equal
to <code>num_conv_layers</code>.`,name:"conv_stride"},{anchor:"transformers.MCTCTConfig.input_feat_per_channel",description:`<strong>input_feat_per_channel</strong> (<code>int</code>, <em>optional</em>, defaults to 80) &#x2014;
Feature dimensions of the channels of the input to the Conv1D layer.`,name:"input_feat_per_channel"},{anchor:"transformers.MCTCTConfig.input_channels",description:`<strong>input_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of input channels of the input to the Conv1D layer.`,name:"input_channels"},{anchor:"transformers.MCTCTConfig.conv_channels",description:`<strong>conv_channels</strong> (<code>List[int]</code>, <em>optional</em>, defaults to None) &#x2014;
Channel sizes of intermediate Conv1D layers.`,name:"conv_channels"},{anchor:"transformers.MCTCTConfig.ctc_loss_reduction",description:`<strong>ctc_loss_reduction</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;sum&quot;</code>) &#x2014;
Specifies the reduction to apply to the output of <code>torch.nn.CTCLoss</code>. Only relevant when training an
instance of <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a>.`,name:"ctc_loss_reduction"},{anchor:"transformers.MCTCTConfig.ctc_zero_infinity",description:`<strong>ctc_zero_infinity</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to zero infinite losses and the associated gradients of <code>torch.nn.CTCLoss</code>. Infinite losses mainly
occur when the inputs are too short to be aligned to the targets. Only relevant when training an instance
of <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a>.`,name:"ctc_zero_infinity"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/configuration_mctct.py#L29"}}),Te=new ar({props:{anchor:"transformers.MCTCTConfig.example",$$slots:{default:[_l]},$$scope:{ctx:z}}}),Je=new ue({}),Ke=new E({props:{name:"class transformers.Wav2Vec2CTCTokenizer",anchor:"transformers.Wav2Vec2CTCTokenizer",parameters:[{name:"vocab_file",val:""},{name:"bos_token",val:" = '<s>'"},{name:"eos_token",val:" = '</s>'"},{name:"unk_token",val:" = '<unk>'"},{name:"pad_token",val:" = '<pad>'"},{name:"word_delimiter_token",val:" = '|'"},{name:"replace_word_delimiter_char",val:" = ' '"},{name:"do_lower_case",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.Wav2Vec2CTCTokenizer.vocab_file",description:`<strong>vocab_file</strong> (<code>str</code>) &#x2014;
File containing the vocabulary.`,name:"vocab_file"},{anchor:"transformers.Wav2Vec2CTCTokenizer.bos_token",description:`<strong>bos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;s&gt;&quot;</code>) &#x2014;
The beginning of sentence token.`,name:"bos_token"},{anchor:"transformers.Wav2Vec2CTCTokenizer.eos_token",description:`<strong>eos_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;/s&gt;&quot;</code>) &#x2014;
The end of sentence token.`,name:"eos_token"},{anchor:"transformers.Wav2Vec2CTCTokenizer.unk_token",description:`<strong>unk_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;unk&gt;&quot;</code>) &#x2014;
The unknown token. A token that is not in the vocabulary cannot be converted to an ID and is set to be this
token instead.`,name:"unk_token"},{anchor:"transformers.Wav2Vec2CTCTokenizer.pad_token",description:`<strong>pad_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;&lt;pad&gt;&quot;</code>) &#x2014;
The token used for padding, for example when batching sequences of different lengths.`,name:"pad_token"},{anchor:"transformers.Wav2Vec2CTCTokenizer.word_delimiter_token",description:`<strong>word_delimiter_token</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;|&quot;</code>) &#x2014;
The token used for defining the end of a word.`,name:"word_delimiter_token"},{anchor:"transformers.Wav2Vec2CTCTokenizer.do_lower_case",description:`<strong>do_lower_case</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to accept lowercase input and lowercase the output when decoding.</p>
<p>**kwargs &#x2014;
Additional keyword arguments passed along to <a href="/docs/transformers/pr_16402/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>`,name:"do_lower_case"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/wav2vec2/tokenization_wav2vec2.py#L125"}}),Xe=new E({props:{name:"build_inputs_with_special_tokens",anchor:"transformers.Wav2Vec2CTCTokenizer.build_inputs_with_special_tokens",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.Wav2Vec2CTCTokenizer.build_inputs_with_special_tokens.token_ids_0",description:"<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014; The first tokenized sequence.",name:"token_ids_0"},{anchor:"transformers.Wav2Vec2CTCTokenizer.build_inputs_with_special_tokens.token_ids_1",description:"<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014; The second tokenized sequence.",name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/tokenization_utils_base.py#L2898",returnDescription:`
<p>The model input with special tokens.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),Ye=new E({props:{name:"get_special_tokens_mask",anchor:"transformers.Wav2Vec2CTCTokenizer.get_special_tokens_mask",parameters:[{name:"token_ids_0",val:": typing.List"},{name:"token_ids_1",val:": typing.Optional[typing.List] = None"},{name:"already_has_special_tokens",val:": bool = False"}],parametersDescription:[{anchor:"transformers.Wav2Vec2CTCTokenizer.get_special_tokens_mask.token_ids_0",description:`<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014;
List of ids of the first sequence.`,name:"token_ids_0"},{anchor:"transformers.Wav2Vec2CTCTokenizer.get_special_tokens_mask.token_ids_1",description:`<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014;
List of ids of the second sequence.`,name:"token_ids_1"},{anchor:"transformers.Wav2Vec2CTCTokenizer.get_special_tokens_mask.already_has_special_tokens",description:`<strong>already_has_special_tokens</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not the token list is already formatted with special tokens for the model.`,name:"already_has_special_tokens"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/tokenization_utils.py#L842",returnDescription:`
<p>1 for a special token, 0 for a sequence token.</p>
`,returnType:`
<p>A list of integers in the range [0, 1]</p>
`}}),Ze=new E({props:{name:"create_token_type_ids_from_sequences",anchor:"transformers.Wav2Vec2CTCTokenizer.create_token_type_ids_from_sequences",parameters:[{name:"token_ids_0",val:": typing.List[int]"},{name:"token_ids_1",val:": typing.Optional[typing.List[int]] = None"}],parametersDescription:[{anchor:"transformers.Wav2Vec2CTCTokenizer.create_token_type_ids_from_sequences.token_ids_0",description:"<strong>token_ids_0</strong> (<code>List[int]</code>) &#x2014; The first tokenized sequence.",name:"token_ids_0"},{anchor:"transformers.Wav2Vec2CTCTokenizer.create_token_type_ids_from_sequences.token_ids_1",description:"<strong>token_ids_1</strong> (<code>List[int]</code>, <em>optional</em>) &#x2014; The second tokenized sequence.",name:"token_ids_1"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/tokenization_utils_base.py#L2878",returnDescription:`
<p>The token type ids.</p>
`,returnType:`
<p><code>List[int]</code></p>
`}}),et=new E({props:{name:"save_vocabulary",anchor:"transformers.Wav2Vec2CTCTokenizer.save_vocabulary",parameters:[{name:"save_directory",val:": str"},{name:"filename_prefix",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/wav2vec2/tokenization_wav2vec2.py#L595"}}),tt=new ue({}),ot=new E({props:{name:"class transformers.MCTCTFeatureExtractor",anchor:"transformers.MCTCTFeatureExtractor",parameters:[{name:"feature_size",val:" = 80"},{name:"sampling_rate",val:" = 16000"},{name:"padding_value",val:" = 0.0"},{name:"hop_length",val:" = 10"},{name:"win_length",val:" = 25"},{name:"win_function",val:" = 'hamming_window'"},{name:"frame_signal_scale",val:" = 32768.0"},{name:"preemphasis_coeff",val:" = 0.97"},{name:"mel_floor",val:" = 1.0"},{name:"normalize_means",val:" = True"},{name:"normalize_vars",val:" = True"},{name:"return_attention_mask",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MCTCTFeatureExtractor.feature_size",description:`<strong>feature_size</strong> (<code>int</code>, defaults to 80) &#x2014;
The feature dimension of the extracted features. This is the number of mel_frequency`,name:"feature_size"},{anchor:"transformers.MCTCTFeatureExtractor.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, defaults to 16000) &#x2014;
The sampling rate at which the audio files should be digitalized expressed in Hertz per second (Hz).`,name:"sampling_rate"},{anchor:"transformers.MCTCTFeatureExtractor.padding_value",description:`<strong>padding_value</strong> (<code>float</code>, defaults to 0.0) &#x2014;
The value that is used to fill the padding values.`,name:"padding_value"},{anchor:"transformers.MCTCTFeatureExtractor.hop_length",description:`<strong>hop_length</strong> (<code>int</code>, defaults to 10) &#x2014;
Number of audio samples between windows. Otherwise referred to as &#x201C;shift&#x201D; in many papers.`,name:"hop_length"},{anchor:"transformers.MCTCTFeatureExtractor.win_length",description:`<strong>win_length</strong> (<code>int</code>, defaults to 25) &#x2014;
Number of ms per window`,name:"win_length"},{anchor:"transformers.MCTCTFeatureExtractor.win_function",description:`<strong>win_function</strong> (<code>str</code>, defaults to <code>hamming_window</code>) &#x2014;
Name for the window function used for windowing, must be accessible via <code>torch.{win_function}</code>`,name:"win_function"},{anchor:"transformers.MCTCTFeatureExtractor.frame_signal_scale",description:`<strong>frame_signal_scale</strong> (<code>float</code>, defaults to 32768.0) &#x2014;
Constant multiplied in creating the frames before applying DFT.`,name:"frame_signal_scale"},{anchor:"transformers.MCTCTFeatureExtractor.preemphasis_coeff",description:`<strong>preemphasis_coeff</strong> (<code>float</code>, defaults to 0.97) &#x2014;
Constant multiplied in applying Pre-emphasis before DFT.`,name:"preemphasis_coeff"},{anchor:"transformers.MCTCTFeatureExtractor.mel_floor",description:`<strong>mel_floor</strong> (<code>float</code> defaults to 1.0) &#x2014;
Minimum value of mel frequency banks.`,name:"mel_floor"},{anchor:"transformers.MCTCTFeatureExtractor.normalize_means",description:`<strong>normalize_means</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to zero-mean normalize the extracted features.`,name:"normalize_means"},{anchor:"transformers.MCTCTFeatureExtractor.normalize_vars",description:`<strong>normalize_vars</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to unit-variance normalize the extracted features.`,name:"normalize_vars"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/feature_extraction_mctct.py#L34"}}),nt=new E({props:{name:"__call__",anchor:"transformers.MCTCTFeatureExtractor.__call__",parameters:[{name:"raw_speech",val:": typing.Union[numpy.ndarray, typing.List[float], typing.List[numpy.ndarray], typing.List[typing.List[float]]]"},{name:"padding",val:": typing.Union[bool, str, transformers.utils.generic.PaddingStrategy] = False"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"truncation",val:": bool = False"},{name:"pad_to_multiple_of",val:": typing.Optional[int] = None"},{name:"return_attention_mask",val:": typing.Optional[bool] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MCTCTFeatureExtractor.__call__.raw_speech",description:`<strong>raw_speech</strong> (<code>torch.Tensor</code>, <code>np.ndarray</code>, <code>List[float]</code>, <code>List[torch.Tensor]</code>, <code>List[np.ndarray]</code>, <code>List[List[float]]</code>) &#x2014;
The sequence or batch of sequences to be padded. Each sequence can be a tensor, a numpy array, a list
of float values, a list of tensors, a list of numpy arrays or a list of list of float values.`,name:"raw_speech"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.padding",description:`<strong>padding</strong> (<code>bool</code>, <code>str</code> or <a href="/docs/transformers/pr_16402/en/internal/file_utils#transformers.utils.PaddingStrategy">PaddingStrategy</a>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Select a strategy to pad the returned sequences (according to the model&#x2019;s padding side and padding
index) among:</p>
<ul>
<li><code>True</code> or <code>&apos;longest&apos;</code>: Pad to the longest sequence in the batch (or no padding if only a single
sequence if provided).</li>
<li><code>&apos;max_length&apos;</code>: Pad to a maximum length specified with the argument <code>max_length</code> or to the maximum
acceptable input length for the model if that argument is not provided.</li>
<li><code>False</code> or <code>&apos;do_not_pad&apos;</code> (default): No padding (i.e., can output a batch with sequences of different
lengths).</li>
</ul>`,name:"padding"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Maximum length of the returned list and optionally padding length (see above).`,name:"max_length"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.truncation",description:`<strong>truncation</strong> (<code>bool</code>) &#x2014;
Activates truncation to cut input sequences longer than <em>max_length</em> to <em>max_length</em>.`,name:"truncation"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.pad_to_multiple_of",description:`<strong>pad_to_multiple_of</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If set will pad the sequence to a multiple of the provided value.</p>
<p>This is especially useful to enable the use of Tensor Cores on NVIDIA hardware with compute capability</p>
<blockquote>
<p>= 7.5 (Volta), or on TPUs which benefit from having sequence lengths be a multiple of 128.</p>
</blockquote>`,name:"pad_to_multiple_of"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.return_attention_mask",description:`<strong>return_attention_mask</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to return the attention mask. If left to the default, will return the attention mask according
to the specific feature_extractor&#x2019;s default.</p>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"return_attention_mask"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_16402/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of list of python integers. Acceptable values are:</p>
<ul>
<li><code>&apos;tf&apos;</code>: Return TensorFlow <code>tf.constant</code> objects.</li>
<li><code>&apos;pt&apos;</code>: Return PyTorch <code>torch.Tensor</code> objects.</li>
<li><code>&apos;np&apos;</code>: Return Numpy <code>np.ndarray</code> objects.</li>
</ul>`,name:"return_tensors"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.sampling_rate",description:`<strong>sampling_rate</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The sampling rate at which the <code>raw_speech</code> input was sampled. It is strongly recommended to pass
<code>sampling_rate</code> at the forward call to prevent silent errors.`,name:"sampling_rate"},{anchor:"transformers.MCTCTFeatureExtractor.__call__.padding_value",description:"<strong>padding_value</strong> (<code>float</code>, defaults to 0.0) &#x2014;",name:"padding_value"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/feature_extraction_mctct.py#L233"}}),at=new ue({}),st=new E({props:{name:"class transformers.MCTCTProcessor",anchor:"transformers.MCTCTProcessor",parameters:[{name:"feature_extractor",val:""},{name:"tokenizer",val:""}],parametersDescription:[{anchor:"transformers.MCTCTProcessor.feature_extractor",description:`<strong>feature_extractor</strong> (<code>MCTCTFeatureExtractor</code>) &#x2014;
An instance of <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTFeatureExtractor">MCTCTFeatureExtractor</a>. The feature extractor is a required input.`,name:"feature_extractor"},{anchor:"transformers.MCTCTProcessor.tokenizer",description:`<strong>tokenizer</strong> (<code>AutoTokenizer</code>) &#x2014;
An instance of <a href="/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer">AutoTokenizer</a>. The tokenizer is a required input.`,name:"tokenizer"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/processing_mctct.py#L23"}}),lt=new E({props:{name:"__call__",anchor:"transformers.MCTCTProcessor.__call__",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/processing_mctct.py#L43"}}),ct=new E({props:{name:"from_pretrained",anchor:"transformers.MCTCTProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MCTCTProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.
**kwargs &#x2014;
Additional keyword arguments passed along to both
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.from_pretrained">from_pretrained()</a> and
<code>from_pretrained</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/processing_utils.py#L156"}}),ye=new Qr({props:{$$slots:{default:[Tl]},$$scope:{ctx:z}}}),pt=new E({props:{name:"save_pretrained",anchor:"transformers.MCTCTProcessor.save_pretrained",parameters:[{name:"save_directory",val:""},{name:"push_to_hub",val:": bool = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MCTCTProcessor.save_pretrained.save_directory",description:`<strong>save_directory</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Directory where the feature extractor JSON file and the tokenizer files will be saved (directory will
be created if it does not exist).`,name:"save_directory"},{anchor:"transformers.MCTCTProcessor.save_pretrained.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push your processor to the Hugging Face model hub after saving it.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>Using <code>push_to_hub=True</code> will synchronize the repository you are pushing to with <code>save_directory</code>,
which requires <code>save_directory</code> to be a local clone of the repo you are pushing to if it&#x2019;s an existing
folder. Pass along <code>temp_dir=True</code> to use a temporary directory instead.</p>

					</div>
<p>kwargs &#x2014;
Additional key word arguments passed along to the <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.push_to_hub">push_to_hub()</a> method.`,name:"push_to_hub"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/processing_utils.py#L94"}}),Me=new Qr({props:{$$slots:{default:[vl]},$$scope:{ctx:z}}}),ht=new E({props:{name:"batch_decode",anchor:"transformers.MCTCTProcessor.batch_decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/processing_mctct.py#L52"}}),ut=new E({props:{name:"decode",anchor:"transformers.MCTCTProcessor.decode",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/processing_mctct.py#L59"}}),_t=new E({props:{name:"as_target_processor",anchor:"transformers.MCTCTProcessor.as_target_processor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/processing_mctct.py#L66"}}),Tt=new ue({}),vt=new E({props:{name:"class transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput",anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"extract_features",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Sequence of hidden-states at the output of the last layer of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput.extract_features",description:`<strong>extract_features</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, conv_dim[-1])</code>) &#x2014;
Sequence of extracted feature vectors of the last convolutional layer of the model.`,name:"extract_features"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/wav2vec2/modeling_wav2vec2.py#L92"}}),bt=new E({props:{name:"class transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput",anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"projected_states",val:": FloatTensor = None"},{name:"projected_quantized_states",val:": FloatTensor = None"},{name:"codevector_perplexity",val:": FloatTensor = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"contrastive_loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"diversity_loss",val:": typing.Optional[torch.FloatTensor] = None"}],parametersDescription:[{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.loss",description:`<strong>loss</strong> (<em>optional</em>, returned when <code>sample_negative_indices</code> are passed, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) &#x2014;
Total loss as the sum of the contrastive loss (L_m) and the diversity loss (L_d) as stated in the <a href="https://arxiv.org/pdf/2006.11477.pdf" rel="nofollow">official
paper</a> . (classification) loss.`,name:"loss"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.projected_states",description:`<strong>projected_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.proj_codevector_dim)</code>) &#x2014;
Hidden-states of the model projected to <em>config.proj_codevector_dim</em> that can be used to predict the masked
projected quantized states.`,name:"projected_states"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.projected_quantized_states",description:`<strong>projected_quantized_states</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.proj_codevector_dim)</code>) &#x2014;
Quantized extracted feature vectors projected to <em>config.proj_codevector_dim</em> representing the positive
target vectors for contrastive loss.`,name:"projected_quantized_states"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the initial embedding outputs.`,name:"hidden_states"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.`,name:"attentions"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.contrastive_loss",description:`<strong>contrastive_loss</strong> (<em>optional</em>, returned when <code>sample_negative_indices</code> are passed, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) &#x2014;
The contrastive loss (L_m) as stated in the <a href="https://arxiv.org/pdf/2006.11477.pdf" rel="nofollow">official paper</a> .`,name:"contrastive_loss"},{anchor:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2ForPreTrainingOutput.diversity_loss",description:`<strong>diversity_loss</strong> (<em>optional</em>, returned when <code>sample_negative_indices</code> are passed, <code>torch.FloatTensor</code> of shape <code>(1,)</code>) &#x2014;
The diversity loss (L_d) as stated in the <a href="https://arxiv.org/pdf/2006.11477.pdf" rel="nofollow">official paper</a> .`,name:"diversity_loss"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/wav2vec2/modeling_wav2vec2.py#L121"}}),kt=new ue({}),$t=new E({props:{name:"class transformers.MCTCTModel",anchor:"transformers.MCTCTModel",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.MCTCTModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">~MCTCTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/modeling_mctct.py#L703"}}),xt=new E({props:{name:"forward",anchor:"transformers.MCTCTModel.forward",parameters:[{name:"input_features",val:""},{name:"attention_mask",val:" = None"},{name:"head_mask",val:" = None"},{name:"use_cache",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],parametersDescription:[{anchor:"transformers.MCTCTModel.forward.input_features",description:`<strong>input_features</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.Wav2Vec2CTCTokenizer">Wav2Vec2CTCTokenizer</a>. See <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_features"},{anchor:"transformers.MCTCTModel.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.MCTCTModel.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.MCTCTModel.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.MCTCTModel.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.MCTCTModel.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_features</code> you can choose to directly pass an embedded representation.
This is useful if you want more control over how to convert <em>input_features</em> indices into associated
vectors than the model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.MCTCTModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.MCTCTModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MCTCTModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16402/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/modeling_mctct.py#L713",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16402/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig"
>MCTCTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Sequence of hidden-states at the output of the last layer of the model.</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16402/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput"
>transformers.modeling_outputs.BaseModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),qe=new Qr({props:{$$slots:{default:[Cl]},$$scope:{ctx:z}}}),je=new ar({props:{anchor:"transformers.MCTCTModel.forward.example",$$slots:{default:[bl]},$$scope:{ctx:z}}}),Ve=new ar({props:{anchor:"transformers.MCTCTModel.forward.example-2",$$slots:{default:[wl]},$$scope:{ctx:z}}}),Et=new ue({}),zt=new E({props:{name:"class transformers.MCTCTForCTC",anchor:"transformers.MCTCTForCTC",parameters:[{name:"config",val:""}],parametersDescription:[{anchor:"transformers.MCTCTForCTC.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig">~MCTCTConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/modeling_mctct.py#L771"}}),Pt=new E({props:{name:"forward",anchor:"transformers.MCTCTForCTC.forward",parameters:[{name:"input_features",val:""},{name:"attention_mask",val:" = None"},{name:"output_attentions",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"},{name:"labels",val:" = None"}],parametersDescription:[{anchor:"transformers.MCTCTForCTC.forward.input_features",description:`<strong>input_features</strong> (<code>torch.LongTensor</code> of shape <code>({0})</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.Wav2Vec2CTCTokenizer">Wav2Vec2CTCTokenizer</a>. See <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_features"},{anchor:"transformers.MCTCTForCTC.forward.attention_mask",description:`<strong>attention_mask</strong> (<code>torch.FloatTensor</code> of shape <code>({0})</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding token indices. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for tokens that are <strong>not masked</strong>,</li>
<li>0 for tokens that are <strong>masked</strong>.</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"attention_mask"},{anchor:"transformers.MCTCTForCTC.forward.token_type_ids",description:`<strong>token_type_ids</strong> (<code>torch.LongTensor</code> of shape <code>({0})</code>, <em>optional</em>) &#x2014;
Segment token indices to indicate first and second portions of the inputs. Indices are selected in <code>[0, 1]</code>:</p>
<ul>
<li>0 corresponds to a <em>sentence A</em> token,</li>
<li>1 corresponds to a <em>sentence B</em> token.</li>
</ul>
<p><a href="../glossary#token-type-ids">What are token type IDs?</a>`,name:"token_type_ids"},{anchor:"transformers.MCTCTForCTC.forward.position_ids",description:`<strong>position_ids</strong> (<code>torch.LongTensor</code> of shape <code>({0})</code>, <em>optional</em>) &#x2014;
Indices of positions of each input sequence tokens in the position embeddings. Selected in the range <code>[0, config.max_position_embeddings - 1]</code>.</p>
<p><a href="../glossary#position-ids">What are position IDs?</a>`,name:"position_ids"},{anchor:"transformers.MCTCTForCTC.forward.head_mask",description:`<strong>head_mask</strong> (<code>torch.FloatTensor</code> of shape <code>(num_heads,)</code> or <code>(num_layers, num_heads)</code>, <em>optional</em>) &#x2014;
Mask to nullify selected heads of the self-attention modules. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 indicates the head is <strong>not masked</strong>,</li>
<li>0 indicates the head is <strong>masked</strong>.</li>
</ul>`,name:"head_mask"},{anchor:"transformers.MCTCTForCTC.forward.inputs_embeds",description:`<strong>inputs_embeds</strong> (<code>torch.FloatTensor</code> of shape <code>({0}, hidden_size)</code>, <em>optional</em>) &#x2014;
Optionally, instead of passing <code>input_features</code> you can choose to directly pass an embedded representation.
This is useful if you want more control over how to convert <em>input_features</em> indices into associated
vectors than the model&#x2019;s internal embedding lookup matrix.`,name:"inputs_embeds"},{anchor:"transformers.MCTCTForCTC.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of all attention layers. See <code>attentions</code> under returned
tensors for more detail.`,name:"output_attentions"},{anchor:"transformers.MCTCTForCTC.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MCTCTForCTC.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_16402/en/main_classes/output#transformers.utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MCTCTForCTC.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, target_length)</code>, <em>optional</em>) &#x2014;
Labels for connectionist temporal classification. Note that <code>target_length</code> has to be smaller or equal to
the sequence length of the output logits. Indices are selected in <code>[-100, 0, ..., config.vocab_size - 1]</code>.
All labels set to <code>-100</code> are ignored (masked), the loss is only computed for labels in <code>[0, ..., config.vocab_size - 1]</code>.`,name:"labels"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/mctct/modeling_mctct.py#L791",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16402/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTConfig"
>MCTCTConfig</a>) and inputs.</p>
<ul>
<li>
<p><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Language modeling loss (for next-token prediction).</p>
</li>
<li>
<p><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, config.vocab_size)</code>) \u2014 Prediction scores of the language modeling head (scores for each vocabulary token before SoftMax).</p>
</li>
<li>
<p><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings, if the model has an embedding layer, +
one for the output of each layer) of shape <code>(batch_size, sequence_length, hidden_size)</code>.</p>
<p>Hidden-states of the model at the output of each layer plus the optional initial embedding outputs.</p>
</li>
<li>
<p><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.</p>
<p>Attentions weights after the attention softmax, used to compute the weighted average in the self-attention
heads.</p>
</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16402/en/main_classes/output#transformers.modeling_outputs.CausalLMOutput"
>transformers.modeling_outputs.CausalLMOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),We=new Qr({props:{$$slots:{default:[kl]},$$scope:{ctx:z}}}),Le=new ar({props:{anchor:"transformers.MCTCTForCTC.forward.example",$$slots:{default:[$l]},$$scope:{ctx:z}}}),De=new ar({props:{anchor:"transformers.MCTCTForCTC.forward.example-2",$$slots:{default:[yl]},$$scope:{ctx:z}}}),{c(){d=r("meta"),$=c(),h=r("h1"),u=r("a"),y=r("span"),T(m.$$.fragment),_=c(),F=r("span"),j=s("MCTCT"),x=c(),V=r("h2"),A=r("a"),To=r("span"),T(Ne.$$.fragment),Xr=c(),vo=r("span"),Yr=s("Overview"),lr=c(),ge=r("p"),Zr=s("The MCTCT model was proposed in "),Be=r("a"),en=s("Pseudo-Labeling For Massively Multilingual Speech Recognition"),tn=s(" by Loren Lugosch, Tatiana Likhomanenko, Gabriel Synnaeve, and Ronan Collobert. The model is a 1B-param transformer encoder, with a CTC head over 8065 character labels and a language identification head over 60 language ID labels. It is trained on Common Voice (version 6.1, December 2020 release) and VoxPopuli. After training on Common Voice and VoxPopuli, the model is trained on Common Voice only. The labels are unnormalized character-level transcripts (punctuation and capitalization are not removed). The model takes as input Mel filterbank features from a 16Khz audio signal."),dr=c(),At=r("p"),on=s("The abstract from the paper is the following:"),cr=c(),Wt=r("p"),Co=r("em"),rn=s(`Semi-supervised learning through pseudo-labeling has become a staple of state-of-the-art monolingual
speech recognition systems. In this work, we extend pseudo-labeling to massively multilingual speech
recognition with 60 languages. We propose a simple pseudo-labeling recipe that works well even
with low-resource languages: train a supervised multilingual model, fine-tune it with semi-supervised
learning on a target language, generate pseudo-labels for that language, and train a final model using
pseudo-labels for all languages, either from scratch or by fine-tuning. Experiments on the labeled
Common Voice and unlabeled VoxPopuli datasets show that our recipe can yield a model with better
performance for many languages that also transfers well to LibriSpeech.`),pr=c(),R=r("p"),nn=s("This model was contributed by "),Lt=r("a"),an=s("cwkeam"),sn=s(". The original code can be found "),He=r("a"),ln=s("here"),dn=s("."),mr=c(),Z=r("h2"),_e=r("a"),bo=r("span"),T(Ue.$$.fragment),cn=c(),wo=r("span"),pn=s("MCTCTConfig"),hr=c(),O=r("div"),T(Re.$$.fragment),mn=c(),ee=r("p"),hn=s("This is the configuration class to store the configuration of a "),Dt=r("a"),fn=s("~MCTCTModel"),un=s(`. It is used to instantiate an
M-CTC-T model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the M-CTC-T
`),Ge=r("a"),gn=s("mctct-large"),_n=s(" architecture."),Tn=c(),te=r("p"),vn=s("Configuration objects inherit from "),It=r("a"),Cn=s("PretrainedConfig"),bn=s(` and can be used to control the model outputs. Read the
documentation from `),Ot=r("a"),wn=s("PretrainedConfig"),kn=s(" for more information."),$n=c(),T(Te.$$.fragment),fr=c(),oe=r("h2"),ve=r("a"),ko=r("span"),T(Je.$$.fragment),yn=c(),$o=r("span"),Mn=s("Wav2Vec2CTCTokenizer"),ur=c(),P=r("div"),T(Ke.$$.fragment),xn=c(),yo=r("p"),En=s("Constructs a Wav2Vec2CTC tokenizer."),zn=c(),Qe=r("p"),Fn=s("This tokenizer inherits from "),St=r("a"),Pn=s("PreTrainedTokenizer"),qn=s(` which contains some of the main methods. Users should refer to
the superclass for more information regarding such methods.`),jn=c(),G=r("div"),T(Xe.$$.fragment),Vn=c(),Mo=r("p"),An=s(`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens.`),Wn=c(),xo=r("p"),Ln=s("This implementation does not add special tokens and this method should be overridden in a subclass."),Dn=c(),Ce=r("div"),T(Ye.$$.fragment),In=c(),re=r("p"),On=s(`Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Eo=r("code"),Sn=s("prepare_for_model"),Nn=s(" or "),zo=r("code"),Bn=s("encode_plus"),Hn=s(" methods."),Un=c(),J=r("div"),T(Ze.$$.fragment),Rn=c(),Nt=r("p"),Gn=s("Create the token type IDs corresponding to the sequences passed. "),Bt=r("a"),Jn=s(`What are token type
IDs?`),Kn=c(),Fo=r("p"),Qn=s("Should be overridden in a subclass if the model has a special way of building those."),Xn=c(),Ht=r("div"),T(et.$$.fragment),gr=c(),ne=r("h2"),be=r("a"),Po=r("span"),T(tt.$$.fragment),Yn=c(),qo=r("span"),Zn=s("MCTCTFeatureExtractor"),_r=c(),S=r("div"),T(ot.$$.fragment),ea=c(),jo=r("p"),ta=s("Constructs a M-CTC-T feature extractor."),oa=c(),ae=r("p"),ra=s("This feature extractor inherits from "),Ut=r("a"),na=s("SequenceFeatureExtractor"),aa=s(` which contains
most of the main methods. Users should refer to this superclass for more information regarding those methods. This
code has been adapted from Flashlight\u2019s C++ code. For more information about the implementation, one can refer to
this `),rt=r("a"),sa=s("notebook"),ia=s(`
that takes the user step-by-step in the implementation.`),la=c(),we=r("div"),T(nt.$$.fragment),da=c(),Vo=r("p"),ca=s(`Main method to featurize and prepare for the model one or several sequence(s). sequences. It returns the
log-mel spectrogram of the input audio, as implemented in the original Flashlight MFSC feature extraction code.`),Tr=c(),se=r("h2"),ke=r("a"),Ao=r("span"),T(at.$$.fragment),pa=c(),Wo=r("span"),ma=s("MCTCTProcessor"),vr=c(),M=r("div"),T(st.$$.fragment),ha=c(),Lo=r("p"),fa=s("Constructs a MCTCT processor which wraps a MCTCT feature extractor and a MCTCT tokenizer into a single processor."),ua=c(),W=r("p"),Rt=r("a"),ga=s("MCTCTProcessor"),_a=s(" offers all the functionalities of "),Gt=r("a"),Ta=s("MCTCTFeatureExtractor"),va=s(" and "),Jt=r("a"),Ca=s("AutoTokenizer"),ba=s(`. See the
`),it=r("a"),Do=r("strong"),wa=s("call"),ka=s("()"),$a=s(" and "),Kt=r("a"),ya=s("decode()"),Ma=s(" for more information."),xa=c(),$e=r("div"),T(lt.$$.fragment),Ea=c(),N=r("p"),za=s(`When used in normal mode, this method forwards all its arguments to MCTCTFeatureExtractor\u2019s
`),dt=r("a"),Io=r("strong"),Fa=s("call"),Pa=s("()"),qa=s(` and returns its output. If used in the context
`),Qt=r("a"),ja=s("as_target_processor()"),Va=s(` this method forwards all its arguments to AutoTokenizer\u2019s
`),Oo=r("code"),Aa=s("__call__()"),Wa=s(". Please refer to the doctsring of the above two methods for more information."),La=c(),K=r("div"),T(ct.$$.fragment),Da=c(),So=r("p"),Ia=s("Instantiate a processor associated with a pretrained model."),Oa=c(),T(ye.$$.fragment),Sa=c(),Q=r("div"),T(pt.$$.fragment),Na=c(),mt=r("p"),Ba=s(`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Xt=r("a"),Ha=s("from_pretrained()"),Ua=s(" method."),Ra=c(),T(Me.$$.fragment),Ga=c(),xe=r("div"),T(ht.$$.fragment),Ja=c(),ft=r("p"),Ka=s("This method forwards all its arguments to AutoTokenizer\u2019s "),Yt=r("a"),Qa=s("batch_decode()"),Xa=s(`. Please refer
to the docstring of this method for more information.`),Ya=c(),Ee=r("div"),T(ut.$$.fragment),Za=c(),gt=r("p"),es=s("This method forwards all its arguments to AutoTokenizer\u2019s "),Zt=r("a"),ts=s("decode()"),os=s(`. Please refer to the
docstring of this method for more information.`),rs=c(),ze=r("div"),T(_t.$$.fragment),ns=c(),No=r("p"),as=s("Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning MCTCT."),Cr=c(),ie=r("h2"),Fe=r("a"),Bo=r("span"),T(Tt.$$.fragment),ss=c(),Ho=r("span"),is=s("Wav2Vec2 specific outputs"),br=c(),le=r("div"),T(vt.$$.fragment),ls=c(),Ct=r("p"),ds=s("Output type of "),Uo=r("code"),cs=s("Wav2Vec2BaseModelOutput"),ps=s(", with potential hidden states and attentions."),wr=c(),de=r("div"),T(bt.$$.fragment),ms=c(),wt=r("p"),hs=s("Output type of "),eo=r("a"),fs=s("Wav2Vec2ForPreTraining"),us=s(", with potential hidden states and attentions."),kr=c(),ce=r("h2"),Pe=r("a"),Ro=r("span"),T(kt.$$.fragment),gs=c(),Go=r("span"),_s=s("MCTCTModel"),$r=c(),B=r("div"),T($t.$$.fragment),Ts=c(),yt=r("p"),vs=s(`The bare M-CTC-T Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Mt=r("a"),Cs=s("torch.nn.Module"),bs=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),ws=c(),L=r("div"),T(xt.$$.fragment),ks=c(),pe=r("p"),$s=s("The "),to=r("a"),ys=s("MCTCTModel"),Ms=s(" forward method, overrides the "),Jo=r("code"),xs=s("__call__"),Es=s(" special method."),zs=c(),T(qe.$$.fragment),Fs=c(),T(je.$$.fragment),Ps=c(),T(Ve.$$.fragment),yr=c(),me=r("h2"),Ae=r("a"),Ko=r("span"),T(Et.$$.fragment),qs=c(),Qo=r("span"),js=s("MCTCTForCTC"),Mr=c(),H=r("div"),T(zt.$$.fragment),Vs=c(),he=r("p"),As=s("MCTCT Model with a "),Xo=r("code"),Ws=s("language modeling"),Ls=s(` head on top for Connectionist Temporal Classification (CTC).
This model is a PyTorch `),Ft=r("a"),Ds=s("torch.nn.Module"),Is=s(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Os=c(),D=r("div"),T(Pt.$$.fragment),Ss=c(),fe=r("p"),Ns=s("The "),oo=r("a"),Bs=s("MCTCTForCTC"),Hs=s(" forward method, overrides the "),Yo=r("code"),Us=s("__call__"),Rs=s(" special method."),Gs=c(),T(We.$$.fragment),Js=c(),T(Le.$$.fragment),Ks=c(),T(De.$$.fragment),this.h()},l(t){const f=ul('[data-svelte="svelte-1phssyn"]',document.head);d=n(f,"META",{name:!0,content:!0}),f.forEach(o),$=p(t),h=n(t,"H1",{class:!0});var qt=a(h);u=n(qt,"A",{id:!0,class:!0,href:!0});var Zo=a(u);y=n(Zo,"SPAN",{});var er=a(y);v(m.$$.fragment,er),er.forEach(o),Zo.forEach(o),_=p(qt),F=n(qt,"SPAN",{});var tr=a(F);j=i(tr,"MCTCT"),tr.forEach(o),qt.forEach(o),x=p(t),V=n(t,"H2",{class:!0});var jt=a(V);A=n(jt,"A",{id:!0,class:!0,href:!0});var or=a(A);To=n(or,"SPAN",{});var rr=a(To);v(Ne.$$.fragment,rr),rr.forEach(o),or.forEach(o),Xr=p(jt),vo=n(jt,"SPAN",{});var nr=a(vo);Yr=i(nr,"Overview"),nr.forEach(o),jt.forEach(o),lr=p(t),ge=n(t,"P",{});var Vt=a(ge);Zr=i(Vt,"The MCTCT model was proposed in "),Be=n(Vt,"A",{href:!0,rel:!0});var Zs=a(Be);en=i(Zs,"Pseudo-Labeling For Massively Multilingual Speech Recognition"),Zs.forEach(o),tn=i(Vt," by Loren Lugosch, Tatiana Likhomanenko, Gabriel Synnaeve, and Ronan Collobert. The model is a 1B-param transformer encoder, with a CTC head over 8065 character labels and a language identification head over 60 language ID labels. It is trained on Common Voice (version 6.1, December 2020 release) and VoxPopuli. After training on Common Voice and VoxPopuli, the model is trained on Common Voice only. The labels are unnormalized character-level transcripts (punctuation and capitalization are not removed). The model takes as input Mel filterbank features from a 16Khz audio signal."),Vt.forEach(o),dr=p(t),At=n(t,"P",{});var ei=a(At);on=i(ei,"The abstract from the paper is the following:"),ei.forEach(o),cr=p(t),Wt=n(t,"P",{});var ti=a(Wt);Co=n(ti,"EM",{});var oi=a(Co);rn=i(oi,`Semi-supervised learning through pseudo-labeling has become a staple of state-of-the-art monolingual
speech recognition systems. In this work, we extend pseudo-labeling to massively multilingual speech
recognition with 60 languages. We propose a simple pseudo-labeling recipe that works well even
with low-resource languages: train a supervised multilingual model, fine-tune it with semi-supervised
learning on a target language, generate pseudo-labels for that language, and train a final model using
pseudo-labels for all languages, either from scratch or by fine-tuning. Experiments on the labeled
Common Voice and unlabeled VoxPopuli datasets show that our recipe can yield a model with better
performance for many languages that also transfers well to LibriSpeech.`),oi.forEach(o),ti.forEach(o),pr=p(t),R=n(t,"P",{});var ro=a(R);nn=i(ro,"This model was contributed by "),Lt=n(ro,"A",{href:!0});var ri=a(Lt);an=i(ri,"cwkeam"),ri.forEach(o),sn=i(ro,". The original code can be found "),He=n(ro,"A",{href:!0,rel:!0});var ni=a(He);ln=i(ni,"here"),ni.forEach(o),dn=i(ro,"."),ro.forEach(o),mr=p(t),Z=n(t,"H2",{class:!0});var Er=a(Z);_e=n(Er,"A",{id:!0,class:!0,href:!0});var ai=a(_e);bo=n(ai,"SPAN",{});var si=a(bo);v(Ue.$$.fragment,si),si.forEach(o),ai.forEach(o),cn=p(Er),wo=n(Er,"SPAN",{});var ii=a(wo);pn=i(ii,"MCTCTConfig"),ii.forEach(o),Er.forEach(o),hr=p(t),O=n(t,"DIV",{class:!0});var Ie=a(O);v(Re.$$.fragment,Ie),mn=p(Ie),ee=n(Ie,"P",{});var no=a(ee);hn=i(no,"This is the configuration class to store the configuration of a "),Dt=n(no,"A",{href:!0});var li=a(Dt);fn=i(li,"~MCTCTModel"),li.forEach(o),un=i(no,`. It is used to instantiate an
M-CTC-T model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the M-CTC-T
`),Ge=n(no,"A",{href:!0,rel:!0});var di=a(Ge);gn=i(di,"mctct-large"),di.forEach(o),_n=i(no," architecture."),no.forEach(o),Tn=p(Ie),te=n(Ie,"P",{});var ao=a(te);vn=i(ao,"Configuration objects inherit from "),It=n(ao,"A",{href:!0});var ci=a(It);Cn=i(ci,"PretrainedConfig"),ci.forEach(o),bn=i(ao,` and can be used to control the model outputs. Read the
documentation from `),Ot=n(ao,"A",{href:!0});var pi=a(Ot);wn=i(pi,"PretrainedConfig"),pi.forEach(o),kn=i(ao," for more information."),ao.forEach(o),$n=p(Ie),v(Te.$$.fragment,Ie),Ie.forEach(o),fr=p(t),oe=n(t,"H2",{class:!0});var zr=a(oe);ve=n(zr,"A",{id:!0,class:!0,href:!0});var mi=a(ve);ko=n(mi,"SPAN",{});var hi=a(ko);v(Je.$$.fragment,hi),hi.forEach(o),mi.forEach(o),yn=p(zr),$o=n(zr,"SPAN",{});var fi=a($o);Mn=i(fi,"Wav2Vec2CTCTokenizer"),fi.forEach(o),zr.forEach(o),ur=p(t),P=n(t,"DIV",{class:!0});var I=a(P);v(Ke.$$.fragment,I),xn=p(I),yo=n(I,"P",{});var ui=a(yo);En=i(ui,"Constructs a Wav2Vec2CTC tokenizer."),ui.forEach(o),zn=p(I),Qe=n(I,"P",{});var Fr=a(Qe);Fn=i(Fr,"This tokenizer inherits from "),St=n(Fr,"A",{href:!0});var gi=a(St);Pn=i(gi,"PreTrainedTokenizer"),gi.forEach(o),qn=i(Fr,` which contains some of the main methods. Users should refer to
the superclass for more information regarding such methods.`),Fr.forEach(o),jn=p(I),G=n(I,"DIV",{class:!0});var so=a(G);v(Xe.$$.fragment,so),Vn=p(so),Mo=n(so,"P",{});var _i=a(Mo);An=i(_i,`Build model inputs from a sequence or a pair of sequence for sequence classification tasks by concatenating and
adding special tokens.`),_i.forEach(o),Wn=p(so),xo=n(so,"P",{});var Ti=a(xo);Ln=i(Ti,"This implementation does not add special tokens and this method should be overridden in a subclass."),Ti.forEach(o),so.forEach(o),Dn=p(I),Ce=n(I,"DIV",{class:!0});var Pr=a(Ce);v(Ye.$$.fragment,Pr),In=p(Pr),re=n(Pr,"P",{});var io=a(re);On=i(io,`Retrieves sequence ids from a token list that has no special tokens added. This method is called when adding
special tokens using the tokenizer `),Eo=n(io,"CODE",{});var vi=a(Eo);Sn=i(vi,"prepare_for_model"),vi.forEach(o),Nn=i(io," or "),zo=n(io,"CODE",{});var Ci=a(zo);Bn=i(Ci,"encode_plus"),Ci.forEach(o),Hn=i(io," methods."),io.forEach(o),Pr.forEach(o),Un=p(I),J=n(I,"DIV",{class:!0});var lo=a(J);v(Ze.$$.fragment,lo),Rn=p(lo),Nt=n(lo,"P",{});var Qs=a(Nt);Gn=i(Qs,"Create the token type IDs corresponding to the sequences passed. "),Bt=n(Qs,"A",{href:!0});var bi=a(Bt);Jn=i(bi,`What are token type
IDs?`),bi.forEach(o),Qs.forEach(o),Kn=p(lo),Fo=n(lo,"P",{});var wi=a(Fo);Qn=i(wi,"Should be overridden in a subclass if the model has a special way of building those."),wi.forEach(o),lo.forEach(o),Xn=p(I),Ht=n(I,"DIV",{class:!0});var ki=a(Ht);v(et.$$.fragment,ki),ki.forEach(o),I.forEach(o),gr=p(t),ne=n(t,"H2",{class:!0});var qr=a(ne);be=n(qr,"A",{id:!0,class:!0,href:!0});var $i=a(be);Po=n($i,"SPAN",{});var yi=a(Po);v(tt.$$.fragment,yi),yi.forEach(o),$i.forEach(o),Yn=p(qr),qo=n(qr,"SPAN",{});var Mi=a(qo);Zn=i(Mi,"MCTCTFeatureExtractor"),Mi.forEach(o),qr.forEach(o),_r=p(t),S=n(t,"DIV",{class:!0});var Oe=a(S);v(ot.$$.fragment,Oe),ea=p(Oe),jo=n(Oe,"P",{});var xi=a(jo);ta=i(xi,"Constructs a M-CTC-T feature extractor."),xi.forEach(o),oa=p(Oe),ae=n(Oe,"P",{});var co=a(ae);ra=i(co,"This feature extractor inherits from "),Ut=n(co,"A",{href:!0});var Ei=a(Ut);na=i(Ei,"SequenceFeatureExtractor"),Ei.forEach(o),aa=i(co,` which contains
most of the main methods. Users should refer to this superclass for more information regarding those methods. This
code has been adapted from Flashlight\u2019s C++ code. For more information about the implementation, one can refer to
this `),rt=n(co,"A",{href:!0,rel:!0});var zi=a(rt);sa=i(zi,"notebook"),zi.forEach(o),ia=i(co,`
that takes the user step-by-step in the implementation.`),co.forEach(o),la=p(Oe),we=n(Oe,"DIV",{class:!0});var jr=a(we);v(nt.$$.fragment,jr),da=p(jr),Vo=n(jr,"P",{});var Fi=a(Vo);ca=i(Fi,`Main method to featurize and prepare for the model one or several sequence(s). sequences. It returns the
log-mel spectrogram of the input audio, as implemented in the original Flashlight MFSC feature extraction code.`),Fi.forEach(o),jr.forEach(o),Oe.forEach(o),Tr=p(t),se=n(t,"H2",{class:!0});var Vr=a(se);ke=n(Vr,"A",{id:!0,class:!0,href:!0});var Pi=a(ke);Ao=n(Pi,"SPAN",{});var qi=a(Ao);v(at.$$.fragment,qi),qi.forEach(o),Pi.forEach(o),pa=p(Vr),Wo=n(Vr,"SPAN",{});var ji=a(Wo);ma=i(ji,"MCTCTProcessor"),ji.forEach(o),Vr.forEach(o),vr=p(t),M=n(t,"DIV",{class:!0});var q=a(M);v(st.$$.fragment,q),ha=p(q),Lo=n(q,"P",{});var Vi=a(Lo);fa=i(Vi,"Constructs a MCTCT processor which wraps a MCTCT feature extractor and a MCTCT tokenizer into a single processor."),Vi.forEach(o),ua=p(q),W=n(q,"P",{});var U=a(W);Rt=n(U,"A",{href:!0});var Ai=a(Rt);ga=i(Ai,"MCTCTProcessor"),Ai.forEach(o),_a=i(U," offers all the functionalities of "),Gt=n(U,"A",{href:!0});var Wi=a(Gt);Ta=i(Wi,"MCTCTFeatureExtractor"),Wi.forEach(o),va=i(U," and "),Jt=n(U,"A",{href:!0});var Li=a(Jt);Ca=i(Li,"AutoTokenizer"),Li.forEach(o),ba=i(U,`. See the
`),it=n(U,"A",{href:!0});var Xs=a(it);Do=n(Xs,"STRONG",{});var Di=a(Do);wa=i(Di,"call"),Di.forEach(o),ka=i(Xs,"()"),Xs.forEach(o),$a=i(U," and "),Kt=n(U,"A",{href:!0});var Ii=a(Kt);ya=i(Ii,"decode()"),Ii.forEach(o),Ma=i(U," for more information."),U.forEach(o),xa=p(q),$e=n(q,"DIV",{class:!0});var Ar=a($e);v(lt.$$.fragment,Ar),Ea=p(Ar),N=n(Ar,"P",{});var Se=a(N);za=i(Se,`When used in normal mode, this method forwards all its arguments to MCTCTFeatureExtractor\u2019s
`),dt=n(Se,"A",{href:!0});var Ys=a(dt);Io=n(Ys,"STRONG",{});var Oi=a(Io);Fa=i(Oi,"call"),Oi.forEach(o),Pa=i(Ys,"()"),Ys.forEach(o),qa=i(Se,` and returns its output. If used in the context
`),Qt=n(Se,"A",{href:!0});var Si=a(Qt);ja=i(Si,"as_target_processor()"),Si.forEach(o),Va=i(Se,` this method forwards all its arguments to AutoTokenizer\u2019s
`),Oo=n(Se,"CODE",{});var Ni=a(Oo);Aa=i(Ni,"__call__()"),Ni.forEach(o),Wa=i(Se,". Please refer to the doctsring of the above two methods for more information."),Se.forEach(o),Ar.forEach(o),La=p(q),K=n(q,"DIV",{class:!0});var po=a(K);v(ct.$$.fragment,po),Da=p(po),So=n(po,"P",{});var Bi=a(So);Ia=i(Bi,"Instantiate a processor associated with a pretrained model."),Bi.forEach(o),Oa=p(po),v(ye.$$.fragment,po),po.forEach(o),Sa=p(q),Q=n(q,"DIV",{class:!0});var mo=a(Q);v(pt.$$.fragment,mo),Na=p(mo),mt=n(mo,"P",{});var Wr=a(mt);Ba=i(Wr,`Saves the attributes of this processor (feature extractor, tokenizer\u2026) in the specified directory so that it
can be reloaded using the `),Xt=n(Wr,"A",{href:!0});var Hi=a(Xt);Ha=i(Hi,"from_pretrained()"),Hi.forEach(o),Ua=i(Wr," method."),Wr.forEach(o),Ra=p(mo),v(Me.$$.fragment,mo),mo.forEach(o),Ga=p(q),xe=n(q,"DIV",{class:!0});var Lr=a(xe);v(ht.$$.fragment,Lr),Ja=p(Lr),ft=n(Lr,"P",{});var Dr=a(ft);Ka=i(Dr,"This method forwards all its arguments to AutoTokenizer\u2019s "),Yt=n(Dr,"A",{href:!0});var Ui=a(Yt);Qa=i(Ui,"batch_decode()"),Ui.forEach(o),Xa=i(Dr,`. Please refer
to the docstring of this method for more information.`),Dr.forEach(o),Lr.forEach(o),Ya=p(q),Ee=n(q,"DIV",{class:!0});var Ir=a(Ee);v(ut.$$.fragment,Ir),Za=p(Ir),gt=n(Ir,"P",{});var Or=a(gt);es=i(Or,"This method forwards all its arguments to AutoTokenizer\u2019s "),Zt=n(Or,"A",{href:!0});var Ri=a(Zt);ts=i(Ri,"decode()"),Ri.forEach(o),os=i(Or,`. Please refer to the
docstring of this method for more information.`),Or.forEach(o),Ir.forEach(o),rs=p(q),ze=n(q,"DIV",{class:!0});var Sr=a(ze);v(_t.$$.fragment,Sr),ns=p(Sr),No=n(Sr,"P",{});var Gi=a(No);as=i(Gi,"Temporarily sets the tokenizer for processing the input. Useful for encoding the labels when fine-tuning MCTCT."),Gi.forEach(o),Sr.forEach(o),q.forEach(o),Cr=p(t),ie=n(t,"H2",{class:!0});var Nr=a(ie);Fe=n(Nr,"A",{id:!0,class:!0,href:!0});var Ji=a(Fe);Bo=n(Ji,"SPAN",{});var Ki=a(Bo);v(Tt.$$.fragment,Ki),Ki.forEach(o),Ji.forEach(o),ss=p(Nr),Ho=n(Nr,"SPAN",{});var Qi=a(Ho);is=i(Qi,"Wav2Vec2 specific outputs"),Qi.forEach(o),Nr.forEach(o),br=p(t),le=n(t,"DIV",{class:!0});var Br=a(le);v(vt.$$.fragment,Br),ls=p(Br),Ct=n(Br,"P",{});var Hr=a(Ct);ds=i(Hr,"Output type of "),Uo=n(Hr,"CODE",{});var Xi=a(Uo);cs=i(Xi,"Wav2Vec2BaseModelOutput"),Xi.forEach(o),ps=i(Hr,", with potential hidden states and attentions."),Hr.forEach(o),Br.forEach(o),wr=p(t),de=n(t,"DIV",{class:!0});var Ur=a(de);v(bt.$$.fragment,Ur),ms=p(Ur),wt=n(Ur,"P",{});var Rr=a(wt);hs=i(Rr,"Output type of "),eo=n(Rr,"A",{href:!0});var Yi=a(eo);fs=i(Yi,"Wav2Vec2ForPreTraining"),Yi.forEach(o),us=i(Rr,", with potential hidden states and attentions."),Rr.forEach(o),Ur.forEach(o),kr=p(t),ce=n(t,"H2",{class:!0});var Gr=a(ce);Pe=n(Gr,"A",{id:!0,class:!0,href:!0});var Zi=a(Pe);Ro=n(Zi,"SPAN",{});var el=a(Ro);v(kt.$$.fragment,el),el.forEach(o),Zi.forEach(o),gs=p(Gr),Go=n(Gr,"SPAN",{});var tl=a(Go);_s=i(tl,"MCTCTModel"),tl.forEach(o),Gr.forEach(o),$r=p(t),B=n(t,"DIV",{class:!0});var ho=a(B);v($t.$$.fragment,ho),Ts=p(ho),yt=n(ho,"P",{});var Jr=a(yt);vs=i(Jr,`The bare M-CTC-T Model transformer outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),Mt=n(Jr,"A",{href:!0,rel:!0});var ol=a(Mt);Cs=i(ol,"torch.nn.Module"),ol.forEach(o),bs=i(Jr,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Jr.forEach(o),ws=p(ho),L=n(ho,"DIV",{class:!0});var X=a(L);v(xt.$$.fragment,X),ks=p(X),pe=n(X,"P",{});var fo=a(pe);$s=i(fo,"The "),to=n(fo,"A",{href:!0});var rl=a(to);ys=i(rl,"MCTCTModel"),rl.forEach(o),Ms=i(fo," forward method, overrides the "),Jo=n(fo,"CODE",{});var nl=a(Jo);xs=i(nl,"__call__"),nl.forEach(o),Es=i(fo," special method."),fo.forEach(o),zs=p(X),v(qe.$$.fragment,X),Fs=p(X),v(je.$$.fragment,X),Ps=p(X),v(Ve.$$.fragment,X),X.forEach(o),ho.forEach(o),yr=p(t),me=n(t,"H2",{class:!0});var Kr=a(me);Ae=n(Kr,"A",{id:!0,class:!0,href:!0});var al=a(Ae);Ko=n(al,"SPAN",{});var sl=a(Ko);v(Et.$$.fragment,sl),sl.forEach(o),al.forEach(o),qs=p(Kr),Qo=n(Kr,"SPAN",{});var il=a(Qo);js=i(il,"MCTCTForCTC"),il.forEach(o),Kr.forEach(o),Mr=p(t),H=n(t,"DIV",{class:!0});var uo=a(H);v(zt.$$.fragment,uo),Vs=p(uo),he=n(uo,"P",{});var go=a(he);As=i(go,"MCTCT Model with a "),Xo=n(go,"CODE",{});var ll=a(Xo);Ws=i(ll,"language modeling"),ll.forEach(o),Ls=i(go,` head on top for Connectionist Temporal Classification (CTC).
This model is a PyTorch `),Ft=n(go,"A",{href:!0,rel:!0});var dl=a(Ft);Ds=i(dl,"torch.nn.Module"),dl.forEach(o),Is=i(go,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),go.forEach(o),Os=p(uo),D=n(uo,"DIV",{class:!0});var Y=a(D);v(Pt.$$.fragment,Y),Ss=p(Y),fe=n(Y,"P",{});var _o=a(fe);Ns=i(_o,"The "),oo=n(_o,"A",{href:!0});var cl=a(oo);Bs=i(cl,"MCTCTForCTC"),cl.forEach(o),Hs=i(_o," forward method, overrides the "),Yo=n(_o,"CODE",{});var pl=a(Yo);Us=i(pl,"__call__"),pl.forEach(o),Rs=i(_o," special method."),_o.forEach(o),Gs=p(Y),v(We.$$.fragment,Y),Js=p(Y),v(Le.$$.fragment,Y),Ks=p(Y),v(De.$$.fragment,Y),Y.forEach(o),uo.forEach(o),this.h()},h(){l(d,"name","hf:doc:metadata"),l(d,"content",JSON.stringify(xl)),l(u,"id","mctct"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#mctct"),l(h,"class","relative group"),l(A,"id","overview"),l(A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(A,"href","#overview"),l(V,"class","relative group"),l(Be,"href","https://arxiv.org/abs/2111.00161"),l(Be,"rel","nofollow"),l(Lt,"href","<https://huggingface.co/cwkeam"),l(He,"href","https://github.com/flashlight/wav2letter/tree/main/recipes/mling_pl"),l(He,"rel","nofollow"),l(_e,"id","transformers.MCTCTConfig"),l(_e,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(_e,"href","#transformers.MCTCTConfig"),l(Z,"class","relative group"),l(Dt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel"),l(Ge,"href","https://huggingface.co/mctct-large"),l(Ge,"rel","nofollow"),l(It,"href","/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig"),l(Ot,"href","/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig"),l(O,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ve,"id","transformers.Wav2Vec2CTCTokenizer"),l(ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ve,"href","#transformers.Wav2Vec2CTCTokenizer"),l(oe,"class","relative group"),l(St,"href","/docs/transformers/pr_16402/en/main_classes/tokenizer#transformers.PreTrainedTokenizer"),l(G,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ce,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Bt,"href","../glossary#token-type-ids"),l(J,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(P,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(be,"id","transformers.MCTCTFeatureExtractor"),l(be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(be,"href","#transformers.MCTCTFeatureExtractor"),l(ne,"class","relative group"),l(Ut,"href","/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.SequenceFeatureExtractor"),l(rt,"href","https://colab.research.google.com/drive/1GLtINkkhzms-IsdcGy_-tVCkv0qNF-Gt#scrollTo=pMCRGMmUC_an"),l(rt,"rel","nofollow"),l(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(S,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ke,"id","transformers.MCTCTProcessor"),l(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ke,"href","#transformers.MCTCTProcessor"),l(se,"class","relative group"),l(Rt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTProcessor"),l(Gt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),l(Jt,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer"),l(it,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTProcessor.__call__"),l(Kt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTProcessor.decode"),l(dt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTFeatureExtractor.__call__"),l(Qt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTProcessor.as_target_processor"),l($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(K,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Xt,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTProcessor.from_pretrained"),l(Q,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Yt,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer.batch_decode"),l(xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Zt,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer.decode"),l(Ee,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Fe,"id","transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput"),l(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Fe,"href","#transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput"),l(ie,"class","relative group"),l(le,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(eo,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),l(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Pe,"id","transformers.MCTCTModel"),l(Pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Pe,"href","#transformers.MCTCTModel"),l(ce,"class","relative group"),l(Mt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Mt,"rel","nofollow"),l(to,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTModel"),l(L,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(B,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(Ae,"id","transformers.MCTCTForCTC"),l(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Ae,"href","#transformers.MCTCTForCTC"),l(me,"class","relative group"),l(Ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Ft,"rel","nofollow"),l(oo,"href","/docs/transformers/pr_16402/en/model_doc/mctct#transformers.MCTCTForCTC"),l(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),l(H,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,f){e(document.head,d),g(t,$,f),g(t,h,f),e(h,u),e(u,y),C(m,y,null),e(h,_),e(h,F),e(F,j),g(t,x,f),g(t,V,f),e(V,A),e(A,To),C(Ne,To,null),e(V,Xr),e(V,vo),e(vo,Yr),g(t,lr,f),g(t,ge,f),e(ge,Zr),e(ge,Be),e(Be,en),e(ge,tn),g(t,dr,f),g(t,At,f),e(At,on),g(t,cr,f),g(t,Wt,f),e(Wt,Co),e(Co,rn),g(t,pr,f),g(t,R,f),e(R,nn),e(R,Lt),e(Lt,an),e(R,sn),e(R,He),e(He,ln),e(R,dn),g(t,mr,f),g(t,Z,f),e(Z,_e),e(_e,bo),C(Ue,bo,null),e(Z,cn),e(Z,wo),e(wo,pn),g(t,hr,f),g(t,O,f),C(Re,O,null),e(O,mn),e(O,ee),e(ee,hn),e(ee,Dt),e(Dt,fn),e(ee,un),e(ee,Ge),e(Ge,gn),e(ee,_n),e(O,Tn),e(O,te),e(te,vn),e(te,It),e(It,Cn),e(te,bn),e(te,Ot),e(Ot,wn),e(te,kn),e(O,$n),C(Te,O,null),g(t,fr,f),g(t,oe,f),e(oe,ve),e(ve,ko),C(Je,ko,null),e(oe,yn),e(oe,$o),e($o,Mn),g(t,ur,f),g(t,P,f),C(Ke,P,null),e(P,xn),e(P,yo),e(yo,En),e(P,zn),e(P,Qe),e(Qe,Fn),e(Qe,St),e(St,Pn),e(Qe,qn),e(P,jn),e(P,G),C(Xe,G,null),e(G,Vn),e(G,Mo),e(Mo,An),e(G,Wn),e(G,xo),e(xo,Ln),e(P,Dn),e(P,Ce),C(Ye,Ce,null),e(Ce,In),e(Ce,re),e(re,On),e(re,Eo),e(Eo,Sn),e(re,Nn),e(re,zo),e(zo,Bn),e(re,Hn),e(P,Un),e(P,J),C(Ze,J,null),e(J,Rn),e(J,Nt),e(Nt,Gn),e(Nt,Bt),e(Bt,Jn),e(J,Kn),e(J,Fo),e(Fo,Qn),e(P,Xn),e(P,Ht),C(et,Ht,null),g(t,gr,f),g(t,ne,f),e(ne,be),e(be,Po),C(tt,Po,null),e(ne,Yn),e(ne,qo),e(qo,Zn),g(t,_r,f),g(t,S,f),C(ot,S,null),e(S,ea),e(S,jo),e(jo,ta),e(S,oa),e(S,ae),e(ae,ra),e(ae,Ut),e(Ut,na),e(ae,aa),e(ae,rt),e(rt,sa),e(ae,ia),e(S,la),e(S,we),C(nt,we,null),e(we,da),e(we,Vo),e(Vo,ca),g(t,Tr,f),g(t,se,f),e(se,ke),e(ke,Ao),C(at,Ao,null),e(se,pa),e(se,Wo),e(Wo,ma),g(t,vr,f),g(t,M,f),C(st,M,null),e(M,ha),e(M,Lo),e(Lo,fa),e(M,ua),e(M,W),e(W,Rt),e(Rt,ga),e(W,_a),e(W,Gt),e(Gt,Ta),e(W,va),e(W,Jt),e(Jt,Ca),e(W,ba),e(W,it),e(it,Do),e(Do,wa),e(it,ka),e(W,$a),e(W,Kt),e(Kt,ya),e(W,Ma),e(M,xa),e(M,$e),C(lt,$e,null),e($e,Ea),e($e,N),e(N,za),e(N,dt),e(dt,Io),e(Io,Fa),e(dt,Pa),e(N,qa),e(N,Qt),e(Qt,ja),e(N,Va),e(N,Oo),e(Oo,Aa),e(N,Wa),e(M,La),e(M,K),C(ct,K,null),e(K,Da),e(K,So),e(So,Ia),e(K,Oa),C(ye,K,null),e(M,Sa),e(M,Q),C(pt,Q,null),e(Q,Na),e(Q,mt),e(mt,Ba),e(mt,Xt),e(Xt,Ha),e(mt,Ua),e(Q,Ra),C(Me,Q,null),e(M,Ga),e(M,xe),C(ht,xe,null),e(xe,Ja),e(xe,ft),e(ft,Ka),e(ft,Yt),e(Yt,Qa),e(ft,Xa),e(M,Ya),e(M,Ee),C(ut,Ee,null),e(Ee,Za),e(Ee,gt),e(gt,es),e(gt,Zt),e(Zt,ts),e(gt,os),e(M,rs),e(M,ze),C(_t,ze,null),e(ze,ns),e(ze,No),e(No,as),g(t,Cr,f),g(t,ie,f),e(ie,Fe),e(Fe,Bo),C(Tt,Bo,null),e(ie,ss),e(ie,Ho),e(Ho,is),g(t,br,f),g(t,le,f),C(vt,le,null),e(le,ls),e(le,Ct),e(Ct,ds),e(Ct,Uo),e(Uo,cs),e(Ct,ps),g(t,wr,f),g(t,de,f),C(bt,de,null),e(de,ms),e(de,wt),e(wt,hs),e(wt,eo),e(eo,fs),e(wt,us),g(t,kr,f),g(t,ce,f),e(ce,Pe),e(Pe,Ro),C(kt,Ro,null),e(ce,gs),e(ce,Go),e(Go,_s),g(t,$r,f),g(t,B,f),C($t,B,null),e(B,Ts),e(B,yt),e(yt,vs),e(yt,Mt),e(Mt,Cs),e(yt,bs),e(B,ws),e(B,L),C(xt,L,null),e(L,ks),e(L,pe),e(pe,$s),e(pe,to),e(to,ys),e(pe,Ms),e(pe,Jo),e(Jo,xs),e(pe,Es),e(L,zs),C(qe,L,null),e(L,Fs),C(je,L,null),e(L,Ps),C(Ve,L,null),g(t,yr,f),g(t,me,f),e(me,Ae),e(Ae,Ko),C(Et,Ko,null),e(me,qs),e(me,Qo),e(Qo,js),g(t,Mr,f),g(t,H,f),C(zt,H,null),e(H,Vs),e(H,he),e(he,As),e(he,Xo),e(Xo,Ws),e(he,Ls),e(he,Ft),e(Ft,Ds),e(he,Is),e(H,Os),e(H,D),C(Pt,D,null),e(D,Ss),e(D,fe),e(fe,Ns),e(fe,oo),e(oo,Bs),e(fe,Hs),e(fe,Yo),e(Yo,Us),e(fe,Rs),e(D,Gs),C(We,D,null),e(D,Js),C(Le,D,null),e(D,Ks),C(De,D,null),xr=!0},p(t,[f]){const qt={};f&2&&(qt.$$scope={dirty:f,ctx:t}),Te.$set(qt);const Zo={};f&2&&(Zo.$$scope={dirty:f,ctx:t}),ye.$set(Zo);const er={};f&2&&(er.$$scope={dirty:f,ctx:t}),Me.$set(er);const tr={};f&2&&(tr.$$scope={dirty:f,ctx:t}),qe.$set(tr);const jt={};f&2&&(jt.$$scope={dirty:f,ctx:t}),je.$set(jt);const or={};f&2&&(or.$$scope={dirty:f,ctx:t}),Ve.$set(or);const rr={};f&2&&(rr.$$scope={dirty:f,ctx:t}),We.$set(rr);const nr={};f&2&&(nr.$$scope={dirty:f,ctx:t}),Le.$set(nr);const Vt={};f&2&&(Vt.$$scope={dirty:f,ctx:t}),De.$set(Vt)},i(t){xr||(b(m.$$.fragment,t),b(Ne.$$.fragment,t),b(Ue.$$.fragment,t),b(Re.$$.fragment,t),b(Te.$$.fragment,t),b(Je.$$.fragment,t),b(Ke.$$.fragment,t),b(Xe.$$.fragment,t),b(Ye.$$.fragment,t),b(Ze.$$.fragment,t),b(et.$$.fragment,t),b(tt.$$.fragment,t),b(ot.$$.fragment,t),b(nt.$$.fragment,t),b(at.$$.fragment,t),b(st.$$.fragment,t),b(lt.$$.fragment,t),b(ct.$$.fragment,t),b(ye.$$.fragment,t),b(pt.$$.fragment,t),b(Me.$$.fragment,t),b(ht.$$.fragment,t),b(ut.$$.fragment,t),b(_t.$$.fragment,t),b(Tt.$$.fragment,t),b(vt.$$.fragment,t),b(bt.$$.fragment,t),b(kt.$$.fragment,t),b($t.$$.fragment,t),b(xt.$$.fragment,t),b(qe.$$.fragment,t),b(je.$$.fragment,t),b(Ve.$$.fragment,t),b(Et.$$.fragment,t),b(zt.$$.fragment,t),b(Pt.$$.fragment,t),b(We.$$.fragment,t),b(Le.$$.fragment,t),b(De.$$.fragment,t),xr=!0)},o(t){w(m.$$.fragment,t),w(Ne.$$.fragment,t),w(Ue.$$.fragment,t),w(Re.$$.fragment,t),w(Te.$$.fragment,t),w(Je.$$.fragment,t),w(Ke.$$.fragment,t),w(Xe.$$.fragment,t),w(Ye.$$.fragment,t),w(Ze.$$.fragment,t),w(et.$$.fragment,t),w(tt.$$.fragment,t),w(ot.$$.fragment,t),w(nt.$$.fragment,t),w(at.$$.fragment,t),w(st.$$.fragment,t),w(lt.$$.fragment,t),w(ct.$$.fragment,t),w(ye.$$.fragment,t),w(pt.$$.fragment,t),w(Me.$$.fragment,t),w(ht.$$.fragment,t),w(ut.$$.fragment,t),w(_t.$$.fragment,t),w(Tt.$$.fragment,t),w(vt.$$.fragment,t),w(bt.$$.fragment,t),w(kt.$$.fragment,t),w($t.$$.fragment,t),w(xt.$$.fragment,t),w(qe.$$.fragment,t),w(je.$$.fragment,t),w(Ve.$$.fragment,t),w(Et.$$.fragment,t),w(zt.$$.fragment,t),w(Pt.$$.fragment,t),w(We.$$.fragment,t),w(Le.$$.fragment,t),w(De.$$.fragment,t),xr=!1},d(t){o(d),t&&o($),t&&o(h),k(m),t&&o(x),t&&o(V),k(Ne),t&&o(lr),t&&o(ge),t&&o(dr),t&&o(At),t&&o(cr),t&&o(Wt),t&&o(pr),t&&o(R),t&&o(mr),t&&o(Z),k(Ue),t&&o(hr),t&&o(O),k(Re),k(Te),t&&o(fr),t&&o(oe),k(Je),t&&o(ur),t&&o(P),k(Ke),k(Xe),k(Ye),k(Ze),k(et),t&&o(gr),t&&o(ne),k(tt),t&&o(_r),t&&o(S),k(ot),k(nt),t&&o(Tr),t&&o(se),k(at),t&&o(vr),t&&o(M),k(st),k(lt),k(ct),k(ye),k(pt),k(Me),k(ht),k(ut),k(_t),t&&o(Cr),t&&o(ie),k(Tt),t&&o(br),t&&o(le),k(vt),t&&o(wr),t&&o(de),k(bt),t&&o(kr),t&&o(ce),k(kt),t&&o($r),t&&o(B),k($t),k(xt),k(qe),k(je),k(Ve),t&&o(yr),t&&o(me),k(Et),t&&o(Mr),t&&o(H),k(zt),k(Pt),k(We),k(Le),k(De)}}}const xl={local:"mctct",sections:[{local:"overview",title:"Overview"},{local:"transformers.MCTCTConfig",title:"MCTCTConfig"},{local:"transformers.Wav2Vec2CTCTokenizer",title:"Wav2Vec2CTCTokenizer"},{local:"transformers.MCTCTFeatureExtractor",title:"MCTCTFeatureExtractor"},{local:"transformers.MCTCTProcessor",title:"MCTCTProcessor"},{local:"transformers.models.wav2vec2.modeling_wav2vec2.Wav2Vec2BaseModelOutput",title:"Wav2Vec2 specific outputs"},{local:"transformers.MCTCTModel",title:"MCTCTModel"},{local:"transformers.MCTCTForCTC",title:"MCTCTForCTC"}],title:"MCTCT"};function El(z){return gl(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Al extends ml{constructor(d){super();hl(this,d,El,Ml,fl,{})}}export{Al as default,xl as metadata};
