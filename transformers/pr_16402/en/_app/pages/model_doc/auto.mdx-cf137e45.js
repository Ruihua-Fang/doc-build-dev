import{S as IEt,i as qEt,s as NEt,e as a,k as l,w as F,t as o,M as jEt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as DEt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as sBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function GEt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,mA,rf,qe,Ve,ai,Tn,gA,Mn,En,hA,ni,Cn,pA,si,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),mA=o(")."),rf=l(),qe=a("p"),Ve=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),gA=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),hA=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),pA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Xe){g=n(Xe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var y9=s(p);m=r(y9,"NewModelConfig"),y9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var L9=s(oi);of=r(L9,"model_type"),L9.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var x9=s(ri);ti=r(x9,'"new-model"'),x9.forEach(t),mA=r(Ae,")."),Ae.forEach(t),rf=i(Xe),qe=n(Xe,"P",{});var To=s(qe);Ve=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var va=s(ai);Tn=r(va,"NewModel"),va.forEach(t),gA=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var $9=s(Mn);En=r($9,"PreTrainedModel"),$9.forEach(t),hA=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);Cn=r(af,"config_class"),af.forEach(t),pA=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var k9=s(si);tf=r(k9,"NewModelConfig"),k9.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel")},m(Xe,Ae){b(Xe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,mA),b(Xe,rf,Ae),b(Xe,qe,Ae),e(qe,Ve),e(qe,ai),e(ai,Tn),e(qe,gA),e(qe,Mn),e(Mn,En),e(qe,hA),e(qe,ni),e(ni,Cn),e(qe,pA),e(qe,si),e(si,tf),e(qe,ba)},d(Xe){Xe&&t(g),Xe&&t(rf),Xe&&t(qe)}}}function OEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function zEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function WEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z5t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,mA,rf,qe,Ve,ai,Tn,gA,Mn,En,hA,ni,Cn,pA,si,tf,ba,Xe,Ae,y9,li,L9,x9,To,va,$9,af,k9,zqe,jRe,ii,nf,jK,uA,Qqe,DK,Wqe,DRe,wn,Hqe,GK,Uqe,Jqe,OK,Yqe,Kqe,GRe,_A,ORe,S9,Zqe,VRe,sf,XRe,di,lf,VK,bA,eNe,XK,oNe,zRe,Mo,vA,rNe,FA,tNe,R9,aNe,nNe,sNe,TA,lNe,zK,iNe,dNe,cNe,Fr,MA,fNe,QK,mNe,gNe,ci,hNe,WK,pNe,uNe,HK,_Ne,bNe,vNe,A,df,UK,FNe,TNe,B9,MNe,ENe,CNe,cf,JK,wNe,ANe,P9,yNe,LNe,xNe,ff,YK,$Ne,kNe,I9,SNe,RNe,BNe,mf,KK,PNe,INe,q9,qNe,NNe,jNe,gf,ZK,DNe,GNe,N9,ONe,VNe,XNe,hf,eZ,zNe,QNe,j9,WNe,HNe,UNe,pf,oZ,JNe,YNe,D9,KNe,ZNe,eje,uf,rZ,oje,rje,G9,tje,aje,nje,_f,tZ,sje,lje,O9,ije,dje,cje,bf,aZ,fje,mje,V9,gje,hje,pje,vf,nZ,uje,_je,X9,bje,vje,Fje,Ff,sZ,Tje,Mje,z9,Eje,Cje,wje,Tf,lZ,Aje,yje,Q9,Lje,xje,$je,Mf,iZ,kje,Sje,W9,Rje,Bje,Pje,Ef,dZ,Ije,qje,H9,Nje,jje,Dje,Cf,cZ,Gje,Oje,U9,Vje,Xje,zje,wf,fZ,Qje,Wje,J9,Hje,Uje,Jje,Af,mZ,Yje,Kje,Y9,Zje,eDe,oDe,yf,gZ,rDe,tDe,K9,aDe,nDe,sDe,Lf,hZ,lDe,iDe,Z9,dDe,cDe,fDe,xf,pZ,mDe,gDe,e$,hDe,pDe,uDe,$f,uZ,_De,bDe,o$,vDe,FDe,TDe,kf,_Z,MDe,EDe,r$,CDe,wDe,ADe,Sf,bZ,yDe,LDe,t$,xDe,$De,kDe,Rf,vZ,SDe,RDe,a$,BDe,PDe,IDe,Bf,FZ,qDe,NDe,n$,jDe,DDe,GDe,Pf,TZ,ODe,VDe,s$,XDe,zDe,QDe,If,MZ,WDe,HDe,l$,UDe,JDe,YDe,qf,EZ,KDe,ZDe,i$,eGe,oGe,rGe,Nf,CZ,tGe,aGe,d$,nGe,sGe,lGe,jf,wZ,iGe,dGe,c$,cGe,fGe,mGe,Df,AZ,gGe,hGe,f$,pGe,uGe,_Ge,Gf,yZ,bGe,vGe,m$,FGe,TGe,MGe,Of,LZ,EGe,CGe,g$,wGe,AGe,yGe,Vf,xZ,LGe,xGe,h$,$Ge,kGe,SGe,Xf,$Z,RGe,BGe,p$,PGe,IGe,qGe,zf,kZ,NGe,jGe,u$,DGe,GGe,OGe,Qf,SZ,VGe,XGe,_$,zGe,QGe,WGe,Wf,RZ,HGe,UGe,b$,JGe,YGe,KGe,Hf,BZ,ZGe,eOe,v$,oOe,rOe,tOe,Uf,PZ,aOe,nOe,F$,sOe,lOe,iOe,Jf,IZ,dOe,cOe,T$,fOe,mOe,gOe,Yf,qZ,hOe,pOe,M$,uOe,_Oe,bOe,Kf,NZ,vOe,FOe,E$,TOe,MOe,EOe,Zf,jZ,COe,wOe,C$,AOe,yOe,LOe,em,DZ,xOe,$Oe,w$,kOe,SOe,ROe,om,GZ,BOe,POe,A$,IOe,qOe,NOe,rm,OZ,jOe,DOe,y$,GOe,OOe,VOe,tm,VZ,XOe,zOe,L$,QOe,WOe,HOe,am,XZ,UOe,JOe,zZ,YOe,KOe,ZOe,nm,QZ,eVe,oVe,x$,rVe,tVe,aVe,sm,WZ,nVe,sVe,$$,lVe,iVe,dVe,lm,HZ,cVe,fVe,k$,mVe,gVe,hVe,im,UZ,pVe,uVe,S$,_Ve,bVe,vVe,dm,JZ,FVe,TVe,R$,MVe,EVe,CVe,cm,YZ,wVe,AVe,B$,yVe,LVe,xVe,fm,KZ,$Ve,kVe,P$,SVe,RVe,BVe,mm,ZZ,PVe,IVe,I$,qVe,NVe,jVe,gm,eee,DVe,GVe,q$,OVe,VVe,XVe,hm,oee,zVe,QVe,N$,WVe,HVe,UVe,pm,ree,JVe,YVe,j$,KVe,ZVe,eXe,um,tee,oXe,rXe,D$,tXe,aXe,nXe,_m,aee,sXe,lXe,G$,iXe,dXe,cXe,bm,nee,fXe,mXe,O$,gXe,hXe,pXe,vm,see,uXe,_Xe,V$,bXe,vXe,FXe,Fm,lee,TXe,MXe,X$,EXe,CXe,wXe,Tm,iee,AXe,yXe,z$,LXe,xXe,$Xe,Mm,dee,kXe,SXe,Q$,RXe,BXe,PXe,Em,cee,IXe,qXe,W$,NXe,jXe,DXe,Cm,fee,GXe,OXe,H$,VXe,XXe,zXe,wm,mee,QXe,WXe,U$,HXe,UXe,JXe,Am,gee,YXe,KXe,J$,ZXe,eze,oze,ym,hee,rze,tze,Y$,aze,nze,sze,Lm,pee,lze,ize,K$,dze,cze,fze,xm,uee,mze,gze,Z$,hze,pze,uze,$m,_ee,_ze,bze,ek,vze,Fze,Tze,km,bee,Mze,Eze,ok,Cze,wze,Aze,Sm,vee,yze,Lze,rk,xze,$ze,kze,Rm,Fee,Sze,Rze,tk,Bze,Pze,Ize,Bm,Tee,qze,Nze,ak,jze,Dze,Gze,Pm,Mee,Oze,Vze,nk,Xze,zze,Qze,Im,Eee,Wze,Hze,sk,Uze,Jze,Yze,qm,Cee,Kze,Zze,lk,eQe,oQe,rQe,Nm,wee,tQe,aQe,ik,nQe,sQe,lQe,jm,Aee,iQe,dQe,dk,cQe,fQe,mQe,Dm,yee,gQe,hQe,ck,pQe,uQe,_Qe,Gm,Lee,bQe,vQe,fk,FQe,TQe,MQe,Om,xee,EQe,CQe,mk,wQe,AQe,yQe,Vm,$ee,LQe,xQe,gk,$Qe,kQe,SQe,Xm,kee,RQe,BQe,hk,PQe,IQe,qQe,zm,See,NQe,jQe,pk,DQe,GQe,OQe,Qm,Ree,VQe,XQe,uk,zQe,QQe,WQe,Wm,Bee,HQe,UQe,_k,JQe,YQe,KQe,Hm,Pee,ZQe,eWe,bk,oWe,rWe,tWe,Um,Iee,aWe,nWe,vk,sWe,lWe,iWe,Jm,qee,dWe,cWe,Fk,fWe,mWe,gWe,Ym,Nee,hWe,pWe,Tk,uWe,_We,bWe,Km,jee,vWe,FWe,Mk,TWe,MWe,EWe,Zm,Dee,CWe,wWe,Ek,AWe,yWe,LWe,eg,Gee,xWe,$We,Ck,kWe,SWe,RWe,og,Oee,BWe,PWe,wk,IWe,qWe,NWe,rg,Vee,jWe,DWe,Ak,GWe,OWe,VWe,tg,Xee,XWe,zWe,yk,QWe,WWe,HWe,ag,UWe,ng,EA,JWe,zee,YWe,QRe,fi,sg,Qee,CA,KWe,Wee,ZWe,WRe,Eo,wA,eHe,AA,oHe,Lk,rHe,tHe,aHe,yA,nHe,Hee,sHe,lHe,iHe,Tr,LA,dHe,Uee,cHe,fHe,Fa,mHe,Jee,gHe,hHe,Yee,pHe,uHe,Kee,_He,bHe,vHe,k,An,Zee,FHe,THe,xk,MHe,EHe,$k,CHe,wHe,AHe,yn,eoe,yHe,LHe,kk,xHe,$He,Sk,kHe,SHe,RHe,Ln,ooe,BHe,PHe,Rk,IHe,qHe,Bk,NHe,jHe,DHe,lg,roe,GHe,OHe,Pk,VHe,XHe,zHe,xn,toe,QHe,WHe,Ik,HHe,UHe,qk,JHe,YHe,KHe,ig,aoe,ZHe,eUe,Nk,oUe,rUe,tUe,dg,noe,aUe,nUe,jk,sUe,lUe,iUe,cg,soe,dUe,cUe,Dk,fUe,mUe,gUe,$n,loe,hUe,pUe,Gk,uUe,_Ue,Ok,bUe,vUe,FUe,kn,ioe,TUe,MUe,Vk,EUe,CUe,Xk,wUe,AUe,yUe,Sn,doe,LUe,xUe,zk,$Ue,kUe,Qk,SUe,RUe,BUe,fg,coe,PUe,IUe,Wk,qUe,NUe,jUe,mg,foe,DUe,GUe,Hk,OUe,VUe,XUe,Rn,moe,zUe,QUe,Uk,WUe,HUe,Jk,UUe,JUe,YUe,gg,goe,KUe,ZUe,Yk,eJe,oJe,rJe,Bn,hoe,tJe,aJe,Kk,nJe,sJe,Zk,lJe,iJe,dJe,Pn,poe,cJe,fJe,eS,mJe,gJe,oS,hJe,pJe,uJe,In,uoe,_Je,bJe,rS,vJe,FJe,_oe,TJe,MJe,EJe,hg,boe,CJe,wJe,tS,AJe,yJe,LJe,qn,voe,xJe,$Je,aS,kJe,SJe,nS,RJe,BJe,PJe,Nn,Foe,IJe,qJe,sS,NJe,jJe,lS,DJe,GJe,OJe,jn,Toe,VJe,XJe,iS,zJe,QJe,dS,WJe,HJe,UJe,Dn,Moe,JJe,YJe,cS,KJe,ZJe,fS,eYe,oYe,rYe,Gn,Eoe,tYe,aYe,mS,nYe,sYe,gS,lYe,iYe,dYe,On,Coe,cYe,fYe,hS,mYe,gYe,pS,hYe,pYe,uYe,pg,woe,_Ye,bYe,uS,vYe,FYe,TYe,Vn,Aoe,MYe,EYe,_S,CYe,wYe,bS,AYe,yYe,LYe,ug,yoe,xYe,$Ye,vS,kYe,SYe,RYe,Xn,Loe,BYe,PYe,FS,IYe,qYe,TS,NYe,jYe,DYe,zn,xoe,GYe,OYe,MS,VYe,XYe,ES,zYe,QYe,WYe,Qn,$oe,HYe,UYe,CS,JYe,YYe,wS,KYe,ZYe,eKe,Wn,koe,oKe,rKe,AS,tKe,aKe,yS,nKe,sKe,lKe,Hn,Soe,iKe,dKe,LS,cKe,fKe,xS,mKe,gKe,hKe,_g,Roe,pKe,uKe,$S,_Ke,bKe,vKe,Un,Boe,FKe,TKe,kS,MKe,EKe,SS,CKe,wKe,AKe,Jn,Poe,yKe,LKe,RS,xKe,$Ke,BS,kKe,SKe,RKe,Yn,Ioe,BKe,PKe,PS,IKe,qKe,IS,NKe,jKe,DKe,Kn,qoe,GKe,OKe,qS,VKe,XKe,NS,zKe,QKe,WKe,Zn,Noe,HKe,UKe,jS,JKe,YKe,DS,KKe,ZKe,eZe,es,joe,oZe,rZe,GS,tZe,aZe,OS,nZe,sZe,lZe,bg,Doe,iZe,dZe,VS,cZe,fZe,mZe,os,Goe,gZe,hZe,XS,pZe,uZe,zS,_Ze,bZe,vZe,vg,Ooe,FZe,TZe,QS,MZe,EZe,CZe,Fg,Voe,wZe,AZe,WS,yZe,LZe,xZe,rs,Xoe,$Ze,kZe,HS,SZe,RZe,US,BZe,PZe,IZe,ts,zoe,qZe,NZe,JS,jZe,DZe,YS,GZe,OZe,VZe,as,Qoe,XZe,zZe,KS,QZe,WZe,ZS,HZe,UZe,JZe,Tg,Woe,YZe,KZe,eR,ZZe,eeo,oeo,ns,Hoe,reo,teo,oR,aeo,neo,rR,seo,leo,ieo,ss,Uoe,deo,ceo,tR,feo,meo,aR,geo,heo,peo,ls,Joe,ueo,_eo,nR,beo,veo,sR,Feo,Teo,Meo,is,Yoe,Eeo,Ceo,lR,weo,Aeo,iR,yeo,Leo,xeo,ds,Koe,$eo,keo,dR,Seo,Reo,cR,Beo,Peo,Ieo,cs,Zoe,qeo,Neo,fR,jeo,Deo,mR,Geo,Oeo,Veo,Mg,ere,Xeo,zeo,gR,Qeo,Weo,Heo,Eg,ore,Ueo,Jeo,hR,Yeo,Keo,Zeo,Cg,rre,eoo,ooo,pR,roo,too,aoo,wg,tre,noo,soo,uR,loo,ioo,doo,fs,are,coo,foo,_R,moo,goo,bR,hoo,poo,uoo,Ag,nre,_oo,boo,vR,voo,Foo,Too,ms,sre,Moo,Eoo,FR,Coo,woo,TR,Aoo,yoo,Loo,gs,lre,xoo,$oo,MR,koo,Soo,ER,Roo,Boo,Poo,hs,ire,Ioo,qoo,CR,Noo,joo,wR,Doo,Goo,Ooo,ps,dre,Voo,Xoo,AR,zoo,Qoo,yR,Woo,Hoo,Uoo,us,cre,Joo,Yoo,LR,Koo,Zoo,xR,ero,oro,rro,_s,fre,tro,aro,$R,nro,sro,kR,lro,iro,dro,yg,mre,cro,fro,SR,mro,gro,hro,Lg,gre,pro,uro,RR,_ro,bro,vro,bs,hre,Fro,Tro,BR,Mro,Ero,PR,Cro,wro,Aro,vs,pre,yro,Lro,IR,xro,$ro,qR,kro,Sro,Rro,Fs,ure,Bro,Pro,NR,Iro,qro,jR,Nro,jro,Dro,xg,_re,Gro,Oro,DR,Vro,Xro,zro,$g,bre,Qro,Wro,GR,Hro,Uro,Jro,kg,vre,Yro,Kro,OR,Zro,eto,oto,Ts,Fre,rto,tto,VR,ato,nto,XR,sto,lto,ito,Sg,Tre,dto,cto,zR,fto,mto,gto,Rg,Mre,hto,pto,QR,uto,_to,bto,Ms,Ere,vto,Fto,WR,Tto,Mto,HR,Eto,Cto,wto,Bg,Cre,Ato,yto,UR,Lto,xto,$to,Pg,wre,kto,Sto,JR,Rto,Bto,Pto,Es,Are,Ito,qto,YR,Nto,jto,KR,Dto,Gto,Oto,Cs,yre,Vto,Xto,ZR,zto,Qto,eB,Wto,Hto,Uto,ws,Lre,Jto,Yto,oB,Kto,Zto,rB,eao,oao,rao,As,xre,tao,aao,tB,nao,sao,aB,lao,iao,dao,Ig,cao,qg,xA,fao,$re,mao,HRe,mi,Ng,kre,$A,gao,Sre,hao,URe,Co,kA,pao,SA,uao,nB,_ao,bao,vao,RA,Fao,Rre,Tao,Mao,Eao,ze,BA,Cao,Bre,wao,Aao,Ta,yao,Pre,Lao,xao,Ire,$ao,kao,qre,Sao,Rao,Bao,ae,jg,Nre,Pao,Iao,sB,qao,Nao,jao,Dg,jre,Dao,Gao,lB,Oao,Vao,Xao,Gg,Dre,zao,Qao,iB,Wao,Hao,Uao,Og,Gre,Jao,Yao,dB,Kao,Zao,eno,Vg,Ore,ono,rno,cB,tno,ano,nno,Xg,Vre,sno,lno,fB,ino,dno,cno,zg,Xre,fno,mno,mB,gno,hno,pno,Qg,zre,uno,_no,gB,bno,vno,Fno,Wg,Qre,Tno,Mno,hB,Eno,Cno,wno,Hg,Wre,Ano,yno,pB,Lno,xno,$no,Ug,Hre,kno,Sno,uB,Rno,Bno,Pno,Jg,Ure,Ino,qno,_B,Nno,jno,Dno,Yg,Jre,Gno,Ono,bB,Vno,Xno,zno,Kg,Yre,Qno,Wno,vB,Hno,Uno,Jno,Zg,Kre,Yno,Kno,FB,Zno,eso,oso,eh,Zre,rso,tso,TB,aso,nso,sso,oh,ete,lso,iso,MB,dso,cso,fso,rh,ote,mso,gso,EB,hso,pso,uso,th,rte,_so,bso,CB,vso,Fso,Tso,ah,tte,Mso,Eso,wB,Cso,wso,Aso,nh,ate,yso,Lso,AB,xso,$so,kso,sh,nte,Sso,Rso,yB,Bso,Pso,Iso,lh,ste,qso,Nso,LB,jso,Dso,Gso,ih,Oso,dh,Vso,ch,PA,Xso,lte,zso,JRe,gi,fh,ite,IA,Qso,dte,Wso,YRe,wo,qA,Hso,NA,Uso,xB,Jso,Yso,Kso,jA,Zso,cte,elo,olo,rlo,Qe,DA,tlo,fte,alo,nlo,hi,slo,mte,llo,ilo,gte,dlo,clo,flo,be,mh,hte,mlo,glo,$B,hlo,plo,ulo,gh,pte,_lo,blo,kB,vlo,Flo,Tlo,hh,ute,Mlo,Elo,SB,Clo,wlo,Alo,ph,_te,ylo,Llo,RB,xlo,$lo,klo,uh,bte,Slo,Rlo,BB,Blo,Plo,Ilo,_h,vte,qlo,Nlo,PB,jlo,Dlo,Glo,bh,Fte,Olo,Vlo,IB,Xlo,zlo,Qlo,vh,Tte,Wlo,Hlo,qB,Ulo,Jlo,Ylo,Fh,Mte,Klo,Zlo,NB,eio,oio,rio,Th,Ete,tio,aio,jB,nio,sio,lio,Mh,Cte,iio,dio,DB,cio,fio,mio,Eh,wte,gio,hio,GB,pio,uio,_io,Ch,Ate,bio,vio,OB,Fio,Tio,Mio,wh,yte,Eio,Cio,VB,wio,Aio,yio,Ah,Lio,yh,xio,Lh,GA,$io,Lte,kio,KRe,pi,xh,xte,OA,Sio,$te,Rio,ZRe,Ao,VA,Bio,ui,Pio,XB,Iio,qio,zB,Nio,jio,Dio,XA,Gio,kte,Oio,Vio,Xio,Kr,zA,zio,Ste,Qio,Wio,_i,Hio,Rte,Uio,Jio,QB,Yio,Kio,Zio,$h,edo,We,QA,odo,Bte,rdo,tdo,Ma,ado,Pte,ndo,sdo,Ite,ldo,ido,qte,ddo,cdo,fdo,x,kh,Nte,mdo,gdo,WB,hdo,pdo,udo,Sh,jte,_do,bdo,HB,vdo,Fdo,Tdo,Rh,Dte,Mdo,Edo,UB,Cdo,wdo,Ado,Bh,Gte,ydo,Ldo,JB,xdo,$do,kdo,Ph,Ote,Sdo,Rdo,YB,Bdo,Pdo,Ido,Ih,Vte,qdo,Ndo,KB,jdo,Ddo,Gdo,qh,Xte,Odo,Vdo,ZB,Xdo,zdo,Qdo,Nh,zte,Wdo,Hdo,eP,Udo,Jdo,Ydo,jh,Qte,Kdo,Zdo,oP,eco,oco,rco,Dh,Wte,tco,aco,rP,nco,sco,lco,Gh,Hte,ico,dco,tP,cco,fco,mco,Oh,Ute,gco,hco,aP,pco,uco,_co,Vh,Jte,bco,vco,nP,Fco,Tco,Mco,Xh,Yte,Eco,Cco,sP,wco,Aco,yco,zh,Kte,Lco,xco,lP,$co,kco,Sco,Qh,Zte,Rco,Bco,iP,Pco,Ico,qco,Wh,eae,Nco,jco,dP,Dco,Gco,Oco,Hh,oae,Vco,Xco,cP,zco,Qco,Wco,Uh,rae,Hco,Uco,fP,Jco,Yco,Kco,Jh,tae,Zco,efo,mP,ofo,rfo,tfo,Yh,aae,afo,nfo,gP,sfo,lfo,ifo,Kh,nae,dfo,cfo,hP,ffo,mfo,gfo,Zh,sae,hfo,pfo,pP,ufo,_fo,bfo,ep,lae,vfo,Ffo,uP,Tfo,Mfo,Efo,op,iae,Cfo,wfo,_P,Afo,yfo,Lfo,rp,dae,xfo,$fo,bP,kfo,Sfo,Rfo,tp,cae,Bfo,Pfo,vP,Ifo,qfo,Nfo,ap,fae,jfo,Dfo,FP,Gfo,Ofo,Vfo,np,mae,Xfo,zfo,TP,Qfo,Wfo,Hfo,sp,gae,Ufo,Jfo,MP,Yfo,Kfo,Zfo,ys,hae,emo,omo,EP,rmo,tmo,CP,amo,nmo,smo,lp,pae,lmo,imo,wP,dmo,cmo,fmo,ip,uae,mmo,gmo,AP,hmo,pmo,umo,dp,_ae,_mo,bmo,yP,vmo,Fmo,Tmo,cp,bae,Mmo,Emo,LP,Cmo,wmo,Amo,fp,vae,ymo,Lmo,xP,xmo,$mo,kmo,mp,Fae,Smo,Rmo,$P,Bmo,Pmo,Imo,gp,Tae,qmo,Nmo,kP,jmo,Dmo,Gmo,hp,Mae,Omo,Vmo,SP,Xmo,zmo,Qmo,pp,Eae,Wmo,Hmo,RP,Umo,Jmo,Ymo,up,Cae,Kmo,Zmo,BP,ego,ogo,rgo,_p,wae,tgo,ago,PP,ngo,sgo,lgo,bp,Aae,igo,dgo,IP,cgo,fgo,mgo,vp,yae,ggo,hgo,qP,pgo,ugo,_go,Fp,Lae,bgo,vgo,NP,Fgo,Tgo,Mgo,Tp,xae,Ego,Cgo,jP,wgo,Ago,ygo,Mp,$ae,Lgo,xgo,DP,$go,kgo,Sgo,Ep,kae,Rgo,Bgo,GP,Pgo,Igo,qgo,Cp,Sae,Ngo,jgo,Rae,Dgo,Ggo,Ogo,wp,Bae,Vgo,Xgo,OP,zgo,Qgo,Wgo,Ap,Pae,Hgo,Ugo,VP,Jgo,Ygo,Kgo,yp,Iae,Zgo,eho,XP,oho,rho,tho,Lp,qae,aho,nho,zP,sho,lho,iho,xp,Nae,dho,cho,QP,fho,mho,gho,$p,jae,hho,pho,WP,uho,_ho,bho,kp,Dae,vho,Fho,HP,Tho,Mho,Eho,Sp,Gae,Cho,who,UP,Aho,yho,Lho,Rp,Oae,xho,$ho,JP,kho,Sho,Rho,Bp,Vae,Bho,Pho,YP,Iho,qho,Nho,Pp,Xae,jho,Dho,KP,Gho,Oho,Vho,Ip,zae,Xho,zho,ZP,Qho,Who,Hho,qp,Qae,Uho,Jho,eI,Yho,Kho,Zho,Np,Wae,epo,opo,oI,rpo,tpo,apo,jp,Hae,npo,spo,rI,lpo,ipo,dpo,Dp,Uae,cpo,fpo,tI,mpo,gpo,hpo,Gp,Jae,ppo,upo,aI,_po,bpo,vpo,Op,Yae,Fpo,Tpo,nI,Mpo,Epo,Cpo,Vp,Kae,wpo,Apo,sI,ypo,Lpo,xpo,Xp,Zae,$po,kpo,lI,Spo,Rpo,Bpo,zp,ene,Ppo,Ipo,iI,qpo,Npo,jpo,Qp,one,Dpo,Gpo,dI,Opo,Vpo,Xpo,Wp,rne,zpo,Qpo,cI,Wpo,Hpo,Upo,Hp,tne,Jpo,Ypo,fI,Kpo,Zpo,euo,Up,ane,ouo,ruo,mI,tuo,auo,nuo,Jp,nne,suo,luo,gI,iuo,duo,cuo,Yp,sne,fuo,muo,hI,guo,huo,puo,Kp,lne,uuo,_uo,pI,buo,vuo,Fuo,Zp,ine,Tuo,Muo,uI,Euo,Cuo,wuo,eu,dne,Auo,yuo,_I,Luo,xuo,$uo,ou,cne,kuo,Suo,bI,Ruo,Buo,Puo,ru,fne,Iuo,quo,vI,Nuo,juo,Duo,tu,mne,Guo,Ouo,FI,Vuo,Xuo,zuo,au,gne,Quo,Wuo,TI,Huo,Uuo,Juo,nu,hne,Yuo,Kuo,MI,Zuo,e_o,o_o,su,pne,r_o,t_o,EI,a_o,n_o,s_o,lu,une,l_o,i_o,CI,d_o,c_o,f_o,iu,_ne,m_o,g_o,wI,h_o,p_o,u_o,du,bne,__o,b_o,AI,v_o,F_o,T_o,cu,vne,M_o,E_o,yI,C_o,w_o,A_o,fu,Fne,y_o,L_o,LI,x_o,$_o,k_o,mu,Tne,S_o,R_o,xI,B_o,P_o,I_o,gu,Mne,q_o,N_o,$I,j_o,D_o,G_o,hu,Ene,O_o,V_o,kI,X_o,z_o,Q_o,pu,Cne,W_o,H_o,SI,U_o,J_o,Y_o,uu,wne,K_o,Z_o,RI,e2o,o2o,r2o,_u,t2o,Ane,a2o,n2o,yne,s2o,l2o,bu,eBe,bi,vu,Lne,WA,i2o,xne,d2o,oBe,yo,HA,c2o,vi,f2o,BI,m2o,g2o,PI,h2o,p2o,u2o,UA,_2o,$ne,b2o,v2o,F2o,Zr,JA,T2o,kne,M2o,E2o,Fi,C2o,Sne,w2o,A2o,II,y2o,L2o,x2o,Fu,$2o,He,YA,k2o,Rne,S2o,R2o,Ea,B2o,Bne,P2o,I2o,Pne,q2o,N2o,Ine,j2o,D2o,G2o,G,Tu,qne,O2o,V2o,qI,X2o,z2o,Q2o,Mu,Nne,W2o,H2o,NI,U2o,J2o,Y2o,Eu,jne,K2o,Z2o,jI,e1o,o1o,r1o,Cu,Dne,t1o,a1o,DI,n1o,s1o,l1o,wu,Gne,i1o,d1o,GI,c1o,f1o,m1o,Au,One,g1o,h1o,OI,p1o,u1o,_1o,yu,Vne,b1o,v1o,VI,F1o,T1o,M1o,Lu,Xne,E1o,C1o,XI,w1o,A1o,y1o,xu,zne,L1o,x1o,zI,$1o,k1o,S1o,$u,Qne,R1o,B1o,QI,P1o,I1o,q1o,ku,Wne,N1o,j1o,WI,D1o,G1o,O1o,Su,Hne,V1o,X1o,HI,z1o,Q1o,W1o,Ru,Une,H1o,U1o,UI,J1o,Y1o,K1o,Bu,Jne,Z1o,ebo,JI,obo,rbo,tbo,Pu,Yne,abo,nbo,YI,sbo,lbo,ibo,Iu,Kne,dbo,cbo,KI,fbo,mbo,gbo,qu,Zne,hbo,pbo,ZI,ubo,_bo,bbo,Nu,ese,vbo,Fbo,eq,Tbo,Mbo,Ebo,ju,ose,Cbo,wbo,oq,Abo,ybo,Lbo,Du,rse,xbo,$bo,rq,kbo,Sbo,Rbo,Gu,tse,Bbo,Pbo,tq,Ibo,qbo,Nbo,Ou,ase,jbo,Dbo,aq,Gbo,Obo,Vbo,Vu,nse,Xbo,zbo,nq,Qbo,Wbo,Hbo,Xu,sse,Ubo,Jbo,sq,Ybo,Kbo,Zbo,zu,lse,e4o,o4o,lq,r4o,t4o,a4o,Qu,ise,n4o,s4o,iq,l4o,i4o,d4o,Wu,dse,c4o,f4o,dq,m4o,g4o,h4o,Hu,cse,p4o,u4o,cq,_4o,b4o,v4o,Uu,fse,F4o,T4o,fq,M4o,E4o,C4o,Ju,mse,w4o,A4o,mq,y4o,L4o,x4o,Yu,gse,$4o,k4o,gq,S4o,R4o,B4o,Ku,hse,P4o,I4o,hq,q4o,N4o,j4o,Zu,pse,D4o,G4o,pq,O4o,V4o,X4o,e_,use,z4o,Q4o,uq,W4o,H4o,U4o,o_,_se,J4o,Y4o,_q,K4o,Z4o,evo,r_,bse,ovo,rvo,bq,tvo,avo,nvo,t_,vse,svo,lvo,vq,ivo,dvo,cvo,a_,Fse,fvo,mvo,Fq,gvo,hvo,pvo,n_,Tse,uvo,_vo,Tq,bvo,vvo,Fvo,s_,Tvo,Mse,Mvo,Evo,Ese,Cvo,wvo,l_,rBe,Ti,i_,Cse,KA,Avo,wse,yvo,tBe,Lo,ZA,Lvo,Mi,xvo,Mq,$vo,kvo,Eq,Svo,Rvo,Bvo,ey,Pvo,Ase,Ivo,qvo,Nvo,et,oy,jvo,yse,Dvo,Gvo,Ei,Ovo,Lse,Vvo,Xvo,Cq,zvo,Qvo,Wvo,d_,Hvo,Ue,ry,Uvo,xse,Jvo,Yvo,Ca,Kvo,$se,Zvo,eFo,kse,oFo,rFo,Sse,tFo,aFo,nFo,z,c_,Rse,sFo,lFo,wq,iFo,dFo,cFo,f_,Bse,fFo,mFo,Aq,gFo,hFo,pFo,m_,Pse,uFo,_Fo,yq,bFo,vFo,FFo,g_,Ise,TFo,MFo,Lq,EFo,CFo,wFo,h_,qse,AFo,yFo,xq,LFo,xFo,$Fo,p_,Nse,kFo,SFo,$q,RFo,BFo,PFo,u_,jse,IFo,qFo,kq,NFo,jFo,DFo,__,Dse,GFo,OFo,Sq,VFo,XFo,zFo,b_,Gse,QFo,WFo,Rq,HFo,UFo,JFo,v_,Ose,YFo,KFo,Bq,ZFo,e0o,o0o,F_,Vse,r0o,t0o,Pq,a0o,n0o,s0o,T_,Xse,l0o,i0o,Iq,d0o,c0o,f0o,M_,zse,m0o,g0o,qq,h0o,p0o,u0o,E_,Qse,_0o,b0o,Nq,v0o,F0o,T0o,C_,Wse,M0o,E0o,jq,C0o,w0o,A0o,w_,Hse,y0o,L0o,Dq,x0o,$0o,k0o,A_,Use,S0o,R0o,Gq,B0o,P0o,I0o,y_,Jse,q0o,N0o,Oq,j0o,D0o,G0o,L_,Yse,O0o,V0o,Vq,X0o,z0o,Q0o,x_,Kse,W0o,H0o,Xq,U0o,J0o,Y0o,$_,Zse,K0o,Z0o,zq,e6o,o6o,r6o,k_,ele,t6o,a6o,Qq,n6o,s6o,l6o,S_,ole,i6o,d6o,Wq,c6o,f6o,m6o,R_,rle,g6o,h6o,Hq,p6o,u6o,_6o,B_,tle,b6o,v6o,Uq,F6o,T6o,M6o,P_,ale,E6o,C6o,Jq,w6o,A6o,y6o,I_,nle,L6o,x6o,Yq,$6o,k6o,S6o,q_,sle,R6o,B6o,Kq,P6o,I6o,q6o,N_,lle,N6o,j6o,Zq,D6o,G6o,O6o,j_,ile,V6o,X6o,eN,z6o,Q6o,W6o,D_,dle,H6o,U6o,oN,J6o,Y6o,K6o,G_,cle,Z6o,eTo,rN,oTo,rTo,tTo,O_,fle,aTo,nTo,tN,sTo,lTo,iTo,V_,mle,dTo,cTo,aN,fTo,mTo,gTo,X_,gle,hTo,pTo,nN,uTo,_To,bTo,z_,vTo,hle,FTo,TTo,ple,MTo,ETo,Q_,aBe,Ci,W_,ule,ty,CTo,_le,wTo,nBe,xo,ay,ATo,wi,yTo,sN,LTo,xTo,lN,$To,kTo,STo,ny,RTo,ble,BTo,PTo,ITo,ot,sy,qTo,vle,NTo,jTo,Ai,DTo,Fle,GTo,OTo,iN,VTo,XTo,zTo,H_,QTo,Je,ly,WTo,Tle,HTo,UTo,wa,JTo,Mle,YTo,KTo,Ele,ZTo,eMo,Cle,oMo,rMo,tMo,Q,U_,wle,aMo,nMo,dN,sMo,lMo,iMo,J_,Ale,dMo,cMo,cN,fMo,mMo,gMo,Y_,yle,hMo,pMo,fN,uMo,_Mo,bMo,K_,Lle,vMo,FMo,mN,TMo,MMo,EMo,Z_,xle,CMo,wMo,gN,AMo,yMo,LMo,e2,$le,xMo,$Mo,hN,kMo,SMo,RMo,o2,kle,BMo,PMo,pN,IMo,qMo,NMo,r2,Sle,jMo,DMo,uN,GMo,OMo,VMo,t2,Rle,XMo,zMo,_N,QMo,WMo,HMo,a2,Ble,UMo,JMo,bN,YMo,KMo,ZMo,n2,Ple,eEo,oEo,vN,rEo,tEo,aEo,s2,Ile,nEo,sEo,FN,lEo,iEo,dEo,l2,qle,cEo,fEo,TN,mEo,gEo,hEo,i2,Nle,pEo,uEo,MN,_Eo,bEo,vEo,d2,jle,FEo,TEo,EN,MEo,EEo,CEo,c2,Dle,wEo,AEo,CN,yEo,LEo,xEo,f2,Gle,$Eo,kEo,wN,SEo,REo,BEo,m2,Ole,PEo,IEo,AN,qEo,NEo,jEo,g2,Vle,DEo,GEo,yN,OEo,VEo,XEo,h2,Xle,zEo,QEo,LN,WEo,HEo,UEo,p2,zle,JEo,YEo,xN,KEo,ZEo,e5o,u2,Qle,o5o,r5o,$N,t5o,a5o,n5o,_2,Wle,s5o,l5o,kN,i5o,d5o,c5o,b2,Hle,f5o,m5o,SN,g5o,h5o,p5o,v2,Ule,u5o,_5o,RN,b5o,v5o,F5o,F2,Jle,T5o,M5o,BN,E5o,C5o,w5o,T2,Yle,A5o,y5o,PN,L5o,x5o,$5o,M2,Kle,k5o,S5o,IN,R5o,B5o,P5o,E2,Zle,I5o,q5o,qN,N5o,j5o,D5o,C2,eie,G5o,O5o,NN,V5o,X5o,z5o,w2,oie,Q5o,W5o,rie,H5o,U5o,J5o,A2,tie,Y5o,K5o,jN,Z5o,eCo,oCo,y2,aie,rCo,tCo,DN,aCo,nCo,sCo,L2,nie,lCo,iCo,GN,dCo,cCo,fCo,x2,sie,mCo,gCo,ON,hCo,pCo,uCo,$2,_Co,lie,bCo,vCo,iie,FCo,TCo,k2,sBe,yi,S2,die,iy,MCo,cie,ECo,lBe,$o,dy,CCo,Li,wCo,VN,ACo,yCo,XN,LCo,xCo,$Co,cy,kCo,fie,SCo,RCo,BCo,rt,fy,PCo,mie,ICo,qCo,xi,NCo,gie,jCo,DCo,zN,GCo,OCo,VCo,R2,XCo,Ye,my,zCo,hie,QCo,WCo,Aa,HCo,pie,UCo,JCo,uie,YCo,KCo,_ie,ZCo,e3o,o3o,he,B2,bie,r3o,t3o,QN,a3o,n3o,s3o,P2,vie,l3o,i3o,WN,d3o,c3o,f3o,I2,Fie,m3o,g3o,HN,h3o,p3o,u3o,q2,Tie,_3o,b3o,UN,v3o,F3o,T3o,N2,Mie,M3o,E3o,JN,C3o,w3o,A3o,j2,Eie,y3o,L3o,YN,x3o,$3o,k3o,D2,Cie,S3o,R3o,KN,B3o,P3o,I3o,G2,wie,q3o,N3o,ZN,j3o,D3o,G3o,O2,Aie,O3o,V3o,ej,X3o,z3o,Q3o,V2,yie,W3o,H3o,oj,U3o,J3o,Y3o,X2,Lie,K3o,Z3o,rj,ewo,owo,rwo,z2,xie,two,awo,tj,nwo,swo,lwo,Q2,$ie,iwo,dwo,aj,cwo,fwo,mwo,W2,kie,gwo,hwo,nj,pwo,uwo,_wo,H2,Sie,bwo,vwo,sj,Fwo,Two,Mwo,U2,Rie,Ewo,Cwo,lj,wwo,Awo,ywo,J2,Bie,Lwo,xwo,ij,$wo,kwo,Swo,Y2,Rwo,Pie,Bwo,Pwo,Iie,Iwo,qwo,K2,iBe,$i,Z2,qie,gy,Nwo,Nie,jwo,dBe,ko,hy,Dwo,ki,Gwo,dj,Owo,Vwo,cj,Xwo,zwo,Qwo,py,Wwo,jie,Hwo,Uwo,Jwo,tt,uy,Ywo,Die,Kwo,Zwo,Si,eAo,Gie,oAo,rAo,fj,tAo,aAo,nAo,e1,sAo,Ke,_y,lAo,Oie,iAo,dAo,ya,cAo,Vie,fAo,mAo,Xie,gAo,hAo,zie,pAo,uAo,_Ao,q,o1,Qie,bAo,vAo,mj,FAo,TAo,MAo,r1,Wie,EAo,CAo,gj,wAo,AAo,yAo,t1,Hie,LAo,xAo,hj,$Ao,kAo,SAo,a1,Uie,RAo,BAo,pj,PAo,IAo,qAo,n1,Jie,NAo,jAo,uj,DAo,GAo,OAo,s1,Yie,VAo,XAo,_j,zAo,QAo,WAo,l1,Kie,HAo,UAo,bj,JAo,YAo,KAo,i1,Zie,ZAo,eyo,vj,oyo,ryo,tyo,d1,ede,ayo,nyo,Fj,syo,lyo,iyo,c1,ode,dyo,cyo,Tj,fyo,myo,gyo,f1,rde,hyo,pyo,Mj,uyo,_yo,byo,m1,tde,vyo,Fyo,Ej,Tyo,Myo,Eyo,g1,ade,Cyo,wyo,Cj,Ayo,yyo,Lyo,h1,nde,xyo,$yo,wj,kyo,Syo,Ryo,p1,sde,Byo,Pyo,Aj,Iyo,qyo,Nyo,u1,lde,jyo,Dyo,yj,Gyo,Oyo,Vyo,_1,ide,Xyo,zyo,Lj,Qyo,Wyo,Hyo,b1,dde,Uyo,Jyo,xj,Yyo,Kyo,Zyo,v1,cde,eLo,oLo,$j,rLo,tLo,aLo,F1,fde,nLo,sLo,kj,lLo,iLo,dLo,T1,mde,cLo,fLo,Sj,mLo,gLo,hLo,M1,gde,pLo,uLo,Rj,_Lo,bLo,vLo,E1,hde,FLo,TLo,Bj,MLo,ELo,CLo,C1,pde,wLo,ALo,Pj,yLo,LLo,xLo,w1,ude,$Lo,kLo,Ij,SLo,RLo,BLo,A1,_de,PLo,ILo,qj,qLo,NLo,jLo,y1,bde,DLo,GLo,Nj,OLo,VLo,XLo,L1,vde,zLo,QLo,jj,WLo,HLo,ULo,x1,Fde,JLo,YLo,Dj,KLo,ZLo,e8o,$1,Tde,o8o,r8o,Gj,t8o,a8o,n8o,k1,Mde,s8o,l8o,Oj,i8o,d8o,c8o,S1,Ede,f8o,m8o,Vj,g8o,h8o,p8o,R1,Cde,u8o,_8o,Xj,b8o,v8o,F8o,B1,wde,T8o,M8o,zj,E8o,C8o,w8o,P1,Ade,A8o,y8o,Qj,L8o,x8o,$8o,I1,yde,k8o,S8o,Wj,R8o,B8o,P8o,q1,Lde,I8o,q8o,Hj,N8o,j8o,D8o,N1,xde,G8o,O8o,Uj,V8o,X8o,z8o,j1,$de,Q8o,W8o,Jj,H8o,U8o,J8o,D1,kde,Y8o,K8o,Yj,Z8o,e7o,o7o,G1,Sde,r7o,t7o,Kj,a7o,n7o,s7o,O1,Rde,l7o,i7o,Zj,d7o,c7o,f7o,V1,Bde,m7o,g7o,eD,h7o,p7o,u7o,X1,Pde,_7o,b7o,oD,v7o,F7o,T7o,z1,Ide,M7o,E7o,rD,C7o,w7o,A7o,Q1,qde,y7o,L7o,tD,x7o,$7o,k7o,W1,Nde,S7o,R7o,aD,B7o,P7o,I7o,H1,q7o,jde,N7o,j7o,Dde,D7o,G7o,U1,cBe,Ri,J1,Gde,by,O7o,Ode,V7o,fBe,So,vy,X7o,Bi,z7o,nD,Q7o,W7o,sD,H7o,U7o,J7o,Fy,Y7o,Vde,K7o,Z7o,exo,at,Ty,oxo,Xde,rxo,txo,Pi,axo,zde,nxo,sxo,lD,lxo,ixo,dxo,Y1,cxo,Ze,My,fxo,Qde,mxo,gxo,La,hxo,Wde,pxo,uxo,Hde,_xo,bxo,Ude,vxo,Fxo,Txo,Y,K1,Jde,Mxo,Exo,iD,Cxo,wxo,Axo,Z1,Yde,yxo,Lxo,dD,xxo,$xo,kxo,eb,Kde,Sxo,Rxo,cD,Bxo,Pxo,Ixo,ob,Zde,qxo,Nxo,fD,jxo,Dxo,Gxo,rb,ece,Oxo,Vxo,mD,Xxo,zxo,Qxo,tb,oce,Wxo,Hxo,gD,Uxo,Jxo,Yxo,ab,rce,Kxo,Zxo,hD,e9o,o9o,r9o,nb,tce,t9o,a9o,pD,n9o,s9o,l9o,sb,ace,i9o,d9o,uD,c9o,f9o,m9o,lb,nce,g9o,h9o,_D,p9o,u9o,_9o,ib,sce,b9o,v9o,bD,F9o,T9o,M9o,db,lce,E9o,C9o,vD,w9o,A9o,y9o,cb,ice,L9o,x9o,FD,$9o,k9o,S9o,fb,dce,R9o,B9o,TD,P9o,I9o,q9o,mb,cce,N9o,j9o,MD,D9o,G9o,O9o,gb,fce,V9o,X9o,ED,z9o,Q9o,W9o,hb,mce,H9o,U9o,CD,J9o,Y9o,K9o,pb,gce,Z9o,e$o,wD,o$o,r$o,t$o,ub,hce,a$o,n$o,AD,s$o,l$o,i$o,_b,pce,d$o,c$o,yD,f$o,m$o,g$o,bb,uce,h$o,p$o,LD,u$o,_$o,b$o,vb,_ce,v$o,F$o,xD,T$o,M$o,E$o,Fb,bce,C$o,w$o,$D,A$o,y$o,L$o,Tb,vce,x$o,$$o,kD,k$o,S$o,R$o,Mb,Fce,B$o,P$o,SD,I$o,q$o,N$o,Eb,Tce,j$o,D$o,RD,G$o,O$o,V$o,Cb,Mce,X$o,z$o,BD,Q$o,W$o,H$o,wb,Ece,U$o,J$o,PD,Y$o,K$o,Z$o,Ab,eko,Cce,oko,rko,wce,tko,ako,yb,mBe,Ii,Lb,Ace,Ey,nko,yce,sko,gBe,Ro,Cy,lko,qi,iko,ID,dko,cko,qD,fko,mko,gko,wy,hko,Lce,pko,uko,_ko,nt,Ay,bko,xce,vko,Fko,Ni,Tko,$ce,Mko,Eko,ND,Cko,wko,Ako,xb,yko,eo,yy,Lko,kce,xko,$ko,xa,kko,Sce,Sko,Rko,Rce,Bko,Pko,Bce,Iko,qko,Nko,Wr,$b,Pce,jko,Dko,jD,Gko,Oko,Vko,kb,Ice,Xko,zko,DD,Qko,Wko,Hko,Sb,qce,Uko,Jko,GD,Yko,Kko,Zko,Rb,Nce,eSo,oSo,OD,rSo,tSo,aSo,Bb,jce,nSo,sSo,VD,lSo,iSo,dSo,Pb,cSo,Dce,fSo,mSo,Gce,gSo,hSo,Ib,hBe,ji,qb,Oce,Ly,pSo,Vce,uSo,pBe,Bo,xy,_So,Di,bSo,XD,vSo,FSo,zD,TSo,MSo,ESo,$y,CSo,Xce,wSo,ASo,ySo,st,ky,LSo,zce,xSo,$So,Gi,kSo,Qce,SSo,RSo,QD,BSo,PSo,ISo,Nb,qSo,oo,Sy,NSo,Wce,jSo,DSo,$a,GSo,Hce,OSo,VSo,Uce,XSo,zSo,Jce,QSo,WSo,HSo,U,jb,Yce,USo,JSo,WD,YSo,KSo,ZSo,Db,Kce,eRo,oRo,HD,rRo,tRo,aRo,Gb,Zce,nRo,sRo,UD,lRo,iRo,dRo,Ob,efe,cRo,fRo,JD,mRo,gRo,hRo,Vb,ofe,pRo,uRo,YD,_Ro,bRo,vRo,Xb,rfe,FRo,TRo,KD,MRo,ERo,CRo,zb,tfe,wRo,ARo,ZD,yRo,LRo,xRo,Qb,afe,$Ro,kRo,eG,SRo,RRo,BRo,Wb,nfe,PRo,IRo,oG,qRo,NRo,jRo,Hb,sfe,DRo,GRo,rG,ORo,VRo,XRo,Ub,lfe,zRo,QRo,tG,WRo,HRo,URo,Jb,ife,JRo,YRo,aG,KRo,ZRo,eBo,Yb,dfe,oBo,rBo,nG,tBo,aBo,nBo,Kb,cfe,sBo,lBo,sG,iBo,dBo,cBo,Zb,ffe,fBo,mBo,lG,gBo,hBo,pBo,e4,mfe,uBo,_Bo,iG,bBo,vBo,FBo,o4,gfe,TBo,MBo,dG,EBo,CBo,wBo,r4,hfe,ABo,yBo,cG,LBo,xBo,$Bo,t4,pfe,kBo,SBo,fG,RBo,BBo,PBo,a4,ufe,IBo,qBo,mG,NBo,jBo,DBo,n4,_fe,GBo,OBo,gG,VBo,XBo,zBo,s4,bfe,QBo,WBo,hG,HBo,UBo,JBo,l4,vfe,YBo,KBo,pG,ZBo,ePo,oPo,i4,Ffe,rPo,tPo,uG,aPo,nPo,sPo,d4,Tfe,lPo,iPo,_G,dPo,cPo,fPo,c4,Mfe,mPo,gPo,bG,hPo,pPo,uPo,f4,Efe,_Po,bPo,vG,vPo,FPo,TPo,m4,Cfe,MPo,EPo,FG,CPo,wPo,APo,g4,wfe,yPo,LPo,TG,xPo,$Po,kPo,h4,Afe,SPo,RPo,MG,BPo,PPo,IPo,p4,yfe,qPo,NPo,EG,jPo,DPo,GPo,u4,Lfe,OPo,VPo,CG,XPo,zPo,QPo,_4,xfe,WPo,HPo,wG,UPo,JPo,YPo,b4,KPo,$fe,ZPo,eIo,kfe,oIo,rIo,v4,uBe,Oi,F4,Sfe,Ry,tIo,Rfe,aIo,_Be,Po,By,nIo,Vi,sIo,AG,lIo,iIo,yG,dIo,cIo,fIo,Py,mIo,Bfe,gIo,hIo,pIo,lt,Iy,uIo,Pfe,_Io,bIo,Xi,vIo,Ife,FIo,TIo,LG,MIo,EIo,CIo,T4,wIo,ro,qy,AIo,qfe,yIo,LIo,ka,xIo,Nfe,$Io,kIo,jfe,SIo,RIo,Dfe,BIo,PIo,IIo,O,M4,Gfe,qIo,NIo,xG,jIo,DIo,GIo,E4,Ofe,OIo,VIo,$G,XIo,zIo,QIo,C4,Vfe,WIo,HIo,kG,UIo,JIo,YIo,w4,Xfe,KIo,ZIo,SG,eqo,oqo,rqo,A4,zfe,tqo,aqo,RG,nqo,sqo,lqo,y4,Qfe,iqo,dqo,BG,cqo,fqo,mqo,L4,Wfe,gqo,hqo,PG,pqo,uqo,_qo,x4,Hfe,bqo,vqo,IG,Fqo,Tqo,Mqo,$4,Ufe,Eqo,Cqo,qG,wqo,Aqo,yqo,k4,Jfe,Lqo,xqo,NG,$qo,kqo,Sqo,S4,Yfe,Rqo,Bqo,jG,Pqo,Iqo,qqo,R4,Kfe,Nqo,jqo,DG,Dqo,Gqo,Oqo,B4,Zfe,Vqo,Xqo,GG,zqo,Qqo,Wqo,P4,eme,Hqo,Uqo,OG,Jqo,Yqo,Kqo,I4,ome,Zqo,eNo,VG,oNo,rNo,tNo,q4,rme,aNo,nNo,XG,sNo,lNo,iNo,N4,tme,dNo,cNo,zG,fNo,mNo,gNo,j4,ame,hNo,pNo,QG,uNo,_No,bNo,D4,nme,vNo,FNo,WG,TNo,MNo,ENo,G4,sme,CNo,wNo,HG,ANo,yNo,LNo,O4,lme,xNo,$No,UG,kNo,SNo,RNo,V4,ime,BNo,PNo,JG,INo,qNo,NNo,X4,dme,jNo,DNo,YG,GNo,ONo,VNo,z4,cme,XNo,zNo,KG,QNo,WNo,HNo,Q4,fme,UNo,JNo,ZG,YNo,KNo,ZNo,W4,mme,ejo,ojo,eO,rjo,tjo,ajo,H4,gme,njo,sjo,oO,ljo,ijo,djo,U4,hme,cjo,fjo,rO,mjo,gjo,hjo,J4,pme,pjo,ujo,tO,_jo,bjo,vjo,Y4,ume,Fjo,Tjo,aO,Mjo,Ejo,Cjo,K4,_me,wjo,Ajo,nO,yjo,Ljo,xjo,Z4,bme,$jo,kjo,sO,Sjo,Rjo,Bjo,ev,vme,Pjo,Ijo,lO,qjo,Njo,jjo,ov,Fme,Djo,Gjo,iO,Ojo,Vjo,Xjo,rv,Tme,zjo,Qjo,dO,Wjo,Hjo,Ujo,tv,Mme,Jjo,Yjo,cO,Kjo,Zjo,eDo,av,Eme,oDo,rDo,fO,tDo,aDo,nDo,nv,Cme,sDo,lDo,mO,iDo,dDo,cDo,sv,wme,fDo,mDo,gO,gDo,hDo,pDo,lv,uDo,Ame,_Do,bDo,yme,vDo,FDo,iv,bBe,zi,dv,Lme,Ny,TDo,xme,MDo,vBe,Io,jy,EDo,Qi,CDo,hO,wDo,ADo,pO,yDo,LDo,xDo,Dy,$Do,$me,kDo,SDo,RDo,it,Gy,BDo,kme,PDo,IDo,Wi,qDo,Sme,NDo,jDo,uO,DDo,GDo,ODo,cv,VDo,to,Oy,XDo,Rme,zDo,QDo,Sa,WDo,Bme,HDo,UDo,Pme,JDo,YDo,Ime,KDo,ZDo,eGo,qme,fv,Nme,oGo,rGo,_O,tGo,aGo,nGo,mv,sGo,jme,lGo,iGo,Dme,dGo,cGo,gv,FBe,Hi,hv,Gme,Vy,fGo,Ome,mGo,TBe,qo,Xy,gGo,Ui,hGo,bO,pGo,uGo,vO,_Go,bGo,vGo,zy,FGo,Vme,TGo,MGo,EGo,dt,Qy,CGo,Xme,wGo,AGo,Ji,yGo,zme,LGo,xGo,FO,$Go,kGo,SGo,pv,RGo,ao,Wy,BGo,Qme,PGo,IGo,Ra,qGo,Wme,NGo,jGo,Hme,DGo,GGo,Ume,OGo,VGo,XGo,ve,uv,Jme,zGo,QGo,TO,WGo,HGo,UGo,_v,Yme,JGo,YGo,MO,KGo,ZGo,eOo,bv,Kme,oOo,rOo,EO,tOo,aOo,nOo,Ls,Zme,sOo,lOo,CO,iOo,dOo,wO,cOo,fOo,mOo,vv,ege,gOo,hOo,AO,pOo,uOo,_Oo,ct,oge,bOo,vOo,yO,FOo,TOo,LO,MOo,EOo,xO,COo,wOo,AOo,Fv,rge,yOo,LOo,$O,xOo,$Oo,kOo,Tv,tge,SOo,ROo,kO,BOo,POo,IOo,Mv,age,qOo,NOo,SO,jOo,DOo,GOo,Ev,nge,OOo,VOo,RO,XOo,zOo,QOo,Cv,sge,WOo,HOo,BO,UOo,JOo,YOo,wv,lge,KOo,ZOo,PO,eVo,oVo,rVo,Av,ige,tVo,aVo,IO,nVo,sVo,lVo,yv,iVo,dge,dVo,cVo,cge,fVo,mVo,Lv,MBe,Yi,xv,fge,Hy,gVo,mge,hVo,EBe,No,Uy,pVo,Ki,uVo,qO,_Vo,bVo,NO,vVo,FVo,TVo,Jy,MVo,gge,EVo,CVo,wVo,ft,Yy,AVo,hge,yVo,LVo,Zi,xVo,pge,$Vo,kVo,jO,SVo,RVo,BVo,$v,PVo,no,Ky,IVo,uge,qVo,NVo,Ba,jVo,_ge,DVo,GVo,bge,OVo,VVo,vge,XVo,zVo,QVo,Fge,kv,Tge,WVo,HVo,DO,UVo,JVo,YVo,Sv,KVo,Mge,ZVo,eXo,Ege,oXo,rXo,Rv,CBe,ed,Bv,Cge,Zy,tXo,wge,aXo,wBe,jo,eL,nXo,od,sXo,GO,lXo,iXo,OO,dXo,cXo,fXo,oL,mXo,Age,gXo,hXo,pXo,mt,rL,uXo,yge,_Xo,bXo,rd,vXo,Lge,FXo,TXo,VO,MXo,EXo,CXo,Pv,wXo,so,tL,AXo,xge,yXo,LXo,Pa,xXo,$ge,$Xo,kXo,kge,SXo,RXo,Sge,BXo,PXo,IXo,Ne,Iv,Rge,qXo,NXo,XO,jXo,DXo,GXo,qv,Bge,OXo,VXo,zO,XXo,zXo,QXo,Nv,Pge,WXo,HXo,QO,UXo,JXo,YXo,jv,Ige,KXo,ZXo,WO,ezo,ozo,rzo,Dv,qge,tzo,azo,HO,nzo,szo,lzo,Gv,Nge,izo,dzo,UO,czo,fzo,mzo,Ov,jge,gzo,hzo,JO,pzo,uzo,_zo,Vv,Dge,bzo,vzo,YO,Fzo,Tzo,Mzo,Xv,Ezo,Gge,Czo,wzo,Oge,Azo,yzo,zv,ABe,td,Qv,Vge,aL,Lzo,Xge,xzo,yBe,Do,nL,$zo,ad,kzo,KO,Szo,Rzo,ZO,Bzo,Pzo,Izo,sL,qzo,zge,Nzo,jzo,Dzo,gt,lL,Gzo,Qge,Ozo,Vzo,nd,Xzo,Wge,zzo,Qzo,eV,Wzo,Hzo,Uzo,Wv,Jzo,lo,iL,Yzo,Hge,Kzo,Zzo,Ia,eQo,Uge,oQo,rQo,Jge,tQo,aQo,Yge,nQo,sQo,lQo,qa,Hv,Kge,iQo,dQo,oV,cQo,fQo,mQo,Uv,Zge,gQo,hQo,rV,pQo,uQo,_Qo,Jv,ehe,bQo,vQo,tV,FQo,TQo,MQo,Yv,ohe,EQo,CQo,aV,wQo,AQo,yQo,Kv,LQo,rhe,xQo,$Qo,the,kQo,SQo,Zv,LBe,sd,eF,ahe,dL,RQo,nhe,BQo,xBe,Go,cL,PQo,ld,IQo,nV,qQo,NQo,sV,jQo,DQo,GQo,fL,OQo,she,VQo,XQo,zQo,ht,mL,QQo,lhe,WQo,HQo,id,UQo,ihe,JQo,YQo,lV,KQo,ZQo,eWo,oF,oWo,io,gL,rWo,dhe,tWo,aWo,Na,nWo,che,sWo,lWo,fhe,iWo,dWo,mhe,cWo,fWo,mWo,ke,rF,ghe,gWo,hWo,iV,pWo,uWo,_Wo,tF,hhe,bWo,vWo,dV,FWo,TWo,MWo,aF,phe,EWo,CWo,uhe,wWo,AWo,yWo,nF,_he,LWo,xWo,cV,$Wo,kWo,SWo,sF,bhe,RWo,BWo,fV,PWo,IWo,qWo,lF,vhe,NWo,jWo,mV,DWo,GWo,OWo,iF,Fhe,VWo,XWo,gV,zWo,QWo,WWo,dF,The,HWo,UWo,hV,JWo,YWo,KWo,cF,Mhe,ZWo,eHo,pV,oHo,rHo,tHo,fF,aHo,Ehe,nHo,sHo,Che,lHo,iHo,mF,$Be,dd,gF,whe,hL,dHo,Ahe,cHo,kBe,Oo,pL,fHo,cd,mHo,uV,gHo,hHo,_V,pHo,uHo,_Ho,uL,bHo,yhe,vHo,FHo,THo,pt,_L,MHo,Lhe,EHo,CHo,fd,wHo,xhe,AHo,yHo,bV,LHo,xHo,$Ho,hF,kHo,co,bL,SHo,$he,RHo,BHo,ja,PHo,khe,IHo,qHo,She,NHo,jHo,Rhe,DHo,GHo,OHo,vL,pF,Bhe,VHo,XHo,vV,zHo,QHo,WHo,uF,Phe,HHo,UHo,FV,JHo,YHo,KHo,_F,ZHo,Ihe,eUo,oUo,qhe,rUo,tUo,bF,SBe,md,vF,Nhe,FL,aUo,jhe,nUo,RBe,Vo,TL,sUo,gd,lUo,TV,iUo,dUo,MV,cUo,fUo,mUo,ML,gUo,Dhe,hUo,pUo,uUo,ut,EL,_Uo,Ghe,bUo,vUo,hd,FUo,Ohe,TUo,MUo,EV,EUo,CUo,wUo,FF,AUo,fo,CL,yUo,Vhe,LUo,xUo,Da,$Uo,Xhe,kUo,SUo,zhe,RUo,BUo,Qhe,PUo,IUo,qUo,Ga,TF,Whe,NUo,jUo,CV,DUo,GUo,OUo,MF,Hhe,VUo,XUo,wV,zUo,QUo,WUo,EF,Uhe,HUo,UUo,AV,JUo,YUo,KUo,CF,Jhe,ZUo,eJo,yV,oJo,rJo,tJo,wF,aJo,Yhe,nJo,sJo,Khe,lJo,iJo,AF,BBe,pd,yF,Zhe,wL,dJo,epe,cJo,PBe,Xo,AL,fJo,ud,mJo,LV,gJo,hJo,xV,pJo,uJo,_Jo,yL,bJo,ope,vJo,FJo,TJo,_t,LL,MJo,rpe,EJo,CJo,_d,wJo,tpe,AJo,yJo,$V,LJo,xJo,$Jo,LF,kJo,mo,xL,SJo,ape,RJo,BJo,Oa,PJo,npe,IJo,qJo,spe,NJo,jJo,lpe,DJo,GJo,OJo,bd,xF,ipe,VJo,XJo,kV,zJo,QJo,WJo,$F,dpe,HJo,UJo,SV,JJo,YJo,KJo,kF,cpe,ZJo,eYo,RV,oYo,rYo,tYo,SF,aYo,fpe,nYo,sYo,mpe,lYo,iYo,RF,IBe,vd,BF,gpe,$L,dYo,hpe,cYo,qBe,zo,kL,fYo,Fd,mYo,BV,gYo,hYo,PV,pYo,uYo,_Yo,SL,bYo,ppe,vYo,FYo,TYo,bt,RL,MYo,upe,EYo,CYo,Td,wYo,_pe,AYo,yYo,IV,LYo,xYo,$Yo,PF,kYo,go,BL,SYo,bpe,RYo,BYo,Va,PYo,vpe,IYo,qYo,Fpe,NYo,jYo,Tpe,DYo,GYo,OYo,Mpe,IF,Epe,VYo,XYo,qV,zYo,QYo,WYo,qF,HYo,Cpe,UYo,JYo,wpe,YYo,KYo,NF,NBe,Md,jF,Ape,PL,ZYo,ype,eKo,jBe,Qo,IL,oKo,Ed,rKo,NV,tKo,aKo,jV,nKo,sKo,lKo,qL,iKo,Lpe,dKo,cKo,fKo,vt,NL,mKo,xpe,gKo,hKo,Cd,pKo,$pe,uKo,_Ko,DV,bKo,vKo,FKo,DF,TKo,ho,jL,MKo,kpe,EKo,CKo,Xa,wKo,Spe,AKo,yKo,Rpe,LKo,xKo,Bpe,$Ko,kKo,SKo,Ppe,GF,Ipe,RKo,BKo,GV,PKo,IKo,qKo,OF,NKo,qpe,jKo,DKo,Npe,GKo,OKo,VF,DBe,wd,XF,jpe,DL,VKo,Dpe,XKo,GBe,Wo,GL,zKo,Ad,QKo,OV,WKo,HKo,VV,UKo,JKo,YKo,OL,KKo,Gpe,ZKo,eZo,oZo,Ft,VL,rZo,Ope,tZo,aZo,yd,nZo,Vpe,sZo,lZo,XV,iZo,dZo,cZo,zF,fZo,po,XL,mZo,Xpe,gZo,hZo,za,pZo,zpe,uZo,_Zo,Qpe,bZo,vZo,Wpe,FZo,TZo,MZo,Qa,QF,Hpe,EZo,CZo,zV,wZo,AZo,yZo,WF,Upe,LZo,xZo,QV,$Zo,kZo,SZo,HF,Jpe,RZo,BZo,WV,PZo,IZo,qZo,UF,Ype,NZo,jZo,HV,DZo,GZo,OZo,JF,VZo,Kpe,XZo,zZo,Zpe,QZo,WZo,YF,OBe,Ld,KF,eue,zL,HZo,oue,UZo,VBe,Ho,QL,JZo,xd,YZo,UV,KZo,ZZo,JV,eer,oer,rer,WL,ter,rue,aer,ner,ser,Tt,HL,ler,tue,ier,der,$d,cer,aue,fer,mer,YV,ger,her,per,ZF,uer,uo,UL,_er,nue,ber,ver,Wa,Fer,sue,Ter,Mer,lue,Eer,Cer,iue,wer,Aer,yer,due,e0,cue,Ler,xer,KV,$er,ker,Ser,o0,Rer,fue,Ber,Per,mue,Ier,qer,r0,XBe,kd,t0,gue,JL,Ner,hue,jer,zBe,Uo,YL,Der,Sd,Ger,ZV,Oer,Ver,eX,Xer,zer,Qer,KL,Wer,pue,Her,Uer,Jer,Mt,ZL,Yer,uue,Ker,Zer,Rd,eor,_ue,oor,ror,oX,tor,aor,nor,a0,sor,Mr,e8,lor,bue,ior,dor,Ha,cor,vue,mor,gor,Fue,hor,por,Tue,uor,_or,bor,j,n0,Mue,vor,For,rX,Tor,Mor,Eor,s0,Eue,Cor,wor,tX,Aor,yor,Lor,l0,Cue,xor,$or,aX,kor,Sor,Ror,i0,wue,Bor,Por,nX,Ior,qor,Nor,d0,Aue,jor,Dor,sX,Gor,Oor,Vor,c0,yue,Xor,zor,lX,Qor,Wor,Hor,f0,Lue,Uor,Jor,iX,Yor,Kor,Zor,m0,xue,err,orr,dX,rrr,trr,arr,g0,$ue,nrr,srr,cX,lrr,irr,drr,h0,kue,crr,frr,fX,mrr,grr,hrr,p0,Sue,prr,urr,mX,_rr,brr,vrr,u0,Rue,Frr,Trr,gX,Mrr,Err,Crr,_0,Bue,wrr,Arr,hX,yrr,Lrr,xrr,b0,Pue,$rr,krr,pX,Srr,Rrr,Brr,v0,Iue,Prr,Irr,uX,qrr,Nrr,jrr,F0,que,Drr,Grr,_X,Orr,Vrr,Xrr,xs,Nue,zrr,Qrr,bX,Wrr,Hrr,vX,Urr,Jrr,Yrr,T0,jue,Krr,Zrr,FX,etr,otr,rtr,M0,Due,ttr,atr,TX,ntr,str,ltr,E0,Gue,itr,dtr,MX,ctr,ftr,mtr,C0,Oue,gtr,htr,EX,ptr,utr,_tr,w0,Vue,btr,vtr,CX,Ftr,Ttr,Mtr,A0,Xue,Etr,Ctr,wX,wtr,Atr,ytr,y0,zue,Ltr,xtr,AX,$tr,ktr,Str,L0,Que,Rtr,Btr,yX,Ptr,Itr,qtr,x0,Wue,Ntr,jtr,LX,Dtr,Gtr,Otr,$0,Hue,Vtr,Xtr,xX,ztr,Qtr,Wtr,k0,Uue,Htr,Utr,$X,Jtr,Ytr,Ktr,S0,Jue,Ztr,ear,kX,oar,rar,tar,R0,Yue,aar,nar,SX,sar,lar,iar,B0,Kue,dar,car,RX,far,mar,gar,P0,Zue,har,par,BX,uar,_ar,bar,I0,e_e,Far,Tar,PX,Mar,Ear,Car,q0,o_e,war,Aar,IX,yar,Lar,xar,N0,r_e,$ar,kar,qX,Sar,Rar,Bar,j0,t_e,Par,Iar,NX,qar,Nar,jar,D0,a_e,Dar,Gar,jX,Oar,Var,Xar,G0,n_e,zar,Qar,DX,War,Har,Uar,O0,s_e,Jar,Yar,GX,Kar,Zar,enr,V0,l_e,onr,rnr,OX,tnr,anr,nnr,X0,i_e,snr,lnr,VX,inr,dnr,cnr,z0,d_e,fnr,mnr,XX,gnr,hnr,pnr,Q0,c_e,unr,_nr,zX,bnr,vnr,Fnr,W0,f_e,Tnr,Mnr,QX,Enr,Cnr,wnr,H0,QBe,Bd,U0,m_e,o8,Anr,g_e,ynr,WBe,Jo,r8,Lnr,Pd,xnr,WX,$nr,knr,HX,Snr,Rnr,Bnr,t8,Pnr,h_e,Inr,qnr,Nnr,Et,a8,jnr,p_e,Dnr,Gnr,Id,Onr,u_e,Vnr,Xnr,UX,znr,Qnr,Wnr,J0,Hnr,Er,n8,Unr,__e,Jnr,Ynr,Ua,Knr,b_e,Znr,esr,v_e,osr,rsr,F_e,tsr,asr,nsr,ne,Y0,T_e,ssr,lsr,JX,isr,dsr,csr,K0,M_e,fsr,msr,YX,gsr,hsr,psr,Z0,E_e,usr,_sr,KX,bsr,vsr,Fsr,e6,C_e,Tsr,Msr,ZX,Esr,Csr,wsr,o6,w_e,Asr,ysr,ez,Lsr,xsr,$sr,r6,A_e,ksr,Ssr,oz,Rsr,Bsr,Psr,t6,y_e,Isr,qsr,rz,Nsr,jsr,Dsr,a6,L_e,Gsr,Osr,tz,Vsr,Xsr,zsr,n6,x_e,Qsr,Wsr,az,Hsr,Usr,Jsr,s6,$_e,Ysr,Ksr,nz,Zsr,elr,olr,l6,k_e,rlr,tlr,sz,alr,nlr,slr,i6,S_e,llr,ilr,lz,dlr,clr,flr,d6,R_e,mlr,glr,iz,hlr,plr,ulr,c6,B_e,_lr,blr,dz,vlr,Flr,Tlr,f6,P_e,Mlr,Elr,cz,Clr,wlr,Alr,m6,I_e,ylr,Llr,fz,xlr,$lr,klr,g6,q_e,Slr,Rlr,mz,Blr,Plr,Ilr,h6,N_e,qlr,Nlr,gz,jlr,Dlr,Glr,p6,j_e,Olr,Vlr,hz,Xlr,zlr,Qlr,u6,D_e,Wlr,Hlr,pz,Ulr,Jlr,Ylr,_6,G_e,Klr,Zlr,uz,eir,oir,rir,b6,O_e,tir,air,_z,nir,sir,lir,v6,V_e,iir,dir,bz,cir,fir,mir,F6,HBe,qd,T6,X_e,s8,gir,z_e,hir,UBe,Yo,l8,pir,Nd,uir,vz,_ir,bir,Fz,vir,Fir,Tir,i8,Mir,Q_e,Eir,Cir,wir,Ct,d8,Air,W_e,yir,Lir,jd,xir,H_e,$ir,kir,Tz,Sir,Rir,Bir,M6,Pir,Cr,c8,Iir,U_e,qir,Nir,Ja,jir,J_e,Dir,Gir,Y_e,Oir,Vir,K_e,Xir,zir,Qir,Te,E6,Z_e,Wir,Hir,Mz,Uir,Jir,Yir,C6,e2e,Kir,Zir,Ez,edr,odr,rdr,w6,o2e,tdr,adr,Cz,ndr,sdr,ldr,A6,r2e,idr,ddr,wz,cdr,fdr,mdr,y6,t2e,gdr,hdr,Az,pdr,udr,_dr,L6,a2e,bdr,vdr,yz,Fdr,Tdr,Mdr,x6,n2e,Edr,Cdr,Lz,wdr,Adr,ydr,$6,s2e,Ldr,xdr,xz,$dr,kdr,Sdr,k6,l2e,Rdr,Bdr,$z,Pdr,Idr,qdr,S6,i2e,Ndr,jdr,kz,Ddr,Gdr,Odr,R6,d2e,Vdr,Xdr,Sz,zdr,Qdr,Wdr,B6,c2e,Hdr,Udr,Rz,Jdr,Ydr,Kdr,P6,JBe,Dd,I6,f2e,f8,Zdr,m2e,ecr,YBe,Ko,m8,ocr,Gd,rcr,Bz,tcr,acr,Pz,ncr,scr,lcr,g8,icr,g2e,dcr,ccr,fcr,wt,h8,mcr,h2e,gcr,hcr,Od,pcr,p2e,ucr,_cr,Iz,bcr,vcr,Fcr,q6,Tcr,wr,p8,Mcr,u2e,Ecr,Ccr,Ya,wcr,_2e,Acr,ycr,b2e,Lcr,xcr,v2e,$cr,kcr,Scr,u8,N6,F2e,Rcr,Bcr,qz,Pcr,Icr,qcr,j6,T2e,Ncr,jcr,Nz,Dcr,Gcr,Ocr,D6,KBe,Vd,G6,M2e,_8,Vcr,E2e,Xcr,ZBe,Zo,b8,zcr,Xd,Qcr,jz,Wcr,Hcr,Dz,Ucr,Jcr,Ycr,v8,Kcr,C2e,Zcr,efr,ofr,At,F8,rfr,w2e,tfr,afr,zd,nfr,A2e,sfr,lfr,Gz,ifr,dfr,cfr,O6,ffr,Ar,T8,mfr,y2e,gfr,hfr,Ka,pfr,L2e,ufr,_fr,x2e,bfr,vfr,$2e,Ffr,Tfr,Mfr,ie,V6,k2e,Efr,Cfr,Oz,wfr,Afr,yfr,X6,S2e,Lfr,xfr,Vz,$fr,kfr,Sfr,z6,R2e,Rfr,Bfr,Xz,Pfr,Ifr,qfr,Q6,B2e,Nfr,jfr,zz,Dfr,Gfr,Ofr,W6,P2e,Vfr,Xfr,Qz,zfr,Qfr,Wfr,H6,I2e,Hfr,Ufr,Wz,Jfr,Yfr,Kfr,U6,q2e,Zfr,emr,Hz,omr,rmr,tmr,J6,N2e,amr,nmr,Uz,smr,lmr,imr,Y6,j2e,dmr,cmr,Jz,fmr,mmr,gmr,K6,D2e,hmr,pmr,Yz,umr,_mr,bmr,Z6,G2e,vmr,Fmr,Kz,Tmr,Mmr,Emr,eT,O2e,Cmr,wmr,Zz,Amr,ymr,Lmr,oT,V2e,xmr,$mr,eQ,kmr,Smr,Rmr,rT,X2e,Bmr,Pmr,oQ,Imr,qmr,Nmr,tT,z2e,jmr,Dmr,rQ,Gmr,Omr,Vmr,aT,Q2e,Xmr,zmr,tQ,Qmr,Wmr,Hmr,nT,W2e,Umr,Jmr,aQ,Ymr,Kmr,Zmr,sT,H2e,egr,ogr,nQ,rgr,tgr,agr,lT,U2e,ngr,sgr,sQ,lgr,igr,dgr,iT,J2e,cgr,fgr,lQ,mgr,ggr,hgr,dT,ePe,Qd,cT,Y2e,M8,pgr,K2e,ugr,oPe,er,E8,_gr,Wd,bgr,iQ,vgr,Fgr,dQ,Tgr,Mgr,Egr,C8,Cgr,Z2e,wgr,Agr,ygr,yt,w8,Lgr,e1e,xgr,$gr,Hd,kgr,o1e,Sgr,Rgr,cQ,Bgr,Pgr,Igr,fT,qgr,yr,A8,Ngr,r1e,jgr,Dgr,Za,Ggr,t1e,Ogr,Vgr,a1e,Xgr,zgr,n1e,Qgr,Wgr,Hgr,ye,mT,s1e,Ugr,Jgr,fQ,Ygr,Kgr,Zgr,gT,l1e,ehr,ohr,mQ,rhr,thr,ahr,hT,i1e,nhr,shr,gQ,lhr,ihr,dhr,pT,d1e,chr,fhr,hQ,mhr,ghr,hhr,uT,c1e,phr,uhr,pQ,_hr,bhr,vhr,_T,f1e,Fhr,Thr,uQ,Mhr,Ehr,Chr,bT,m1e,whr,Ahr,_Q,yhr,Lhr,xhr,vT,g1e,$hr,khr,bQ,Shr,Rhr,Bhr,FT,h1e,Phr,Ihr,vQ,qhr,Nhr,jhr,TT,p1e,Dhr,Ghr,FQ,Ohr,Vhr,Xhr,MT,rPe,Ud,ET,u1e,y8,zhr,_1e,Qhr,tPe,or,L8,Whr,Jd,Hhr,TQ,Uhr,Jhr,MQ,Yhr,Khr,Zhr,x8,epr,b1e,opr,rpr,tpr,Lt,$8,apr,v1e,npr,spr,Yd,lpr,F1e,ipr,dpr,EQ,cpr,fpr,mpr,CT,gpr,Lr,k8,hpr,T1e,ppr,upr,en,_pr,M1e,bpr,vpr,E1e,Fpr,Tpr,C1e,Mpr,Epr,Cpr,Z,wT,w1e,wpr,Apr,CQ,ypr,Lpr,xpr,AT,A1e,$pr,kpr,wQ,Spr,Rpr,Bpr,yT,y1e,Ppr,Ipr,AQ,qpr,Npr,jpr,LT,L1e,Dpr,Gpr,yQ,Opr,Vpr,Xpr,xT,x1e,zpr,Qpr,LQ,Wpr,Hpr,Upr,$T,$1e,Jpr,Ypr,xQ,Kpr,Zpr,eur,kT,k1e,our,rur,$Q,tur,aur,nur,ST,S1e,sur,lur,kQ,iur,dur,cur,RT,R1e,fur,mur,SQ,gur,hur,pur,BT,B1e,uur,_ur,RQ,bur,vur,Fur,PT,P1e,Tur,Mur,BQ,Eur,Cur,wur,IT,I1e,Aur,yur,PQ,Lur,xur,$ur,qT,q1e,kur,Sur,IQ,Rur,Bur,Pur,NT,N1e,Iur,qur,qQ,Nur,jur,Dur,jT,j1e,Gur,Our,NQ,Vur,Xur,zur,DT,D1e,Qur,Wur,jQ,Hur,Uur,Jur,GT,G1e,Yur,Kur,DQ,Zur,e_r,o_r,OT,O1e,r_r,t_r,GQ,a_r,n_r,s_r,VT,V1e,l_r,i_r,OQ,d_r,c_r,f_r,XT,X1e,m_r,g_r,VQ,h_r,p_r,u_r,zT,z1e,__r,b_r,XQ,v_r,F_r,T_r,QT,Q1e,M_r,E_r,zQ,C_r,w_r,A_r,WT,W1e,y_r,L_r,QQ,x_r,$_r,k_r,HT,H1e,S_r,R_r,WQ,B_r,P_r,I_r,UT,U1e,q_r,N_r,HQ,j_r,D_r,G_r,JT,J1e,O_r,V_r,UQ,X_r,z_r,Q_r,YT,aPe,Kd,KT,Y1e,S8,W_r,K1e,H_r,nPe,rr,R8,U_r,Zd,J_r,JQ,Y_r,K_r,YQ,Z_r,e2r,o2r,B8,r2r,Z1e,t2r,a2r,n2r,xt,P8,s2r,ebe,l2r,i2r,ec,d2r,obe,c2r,f2r,KQ,m2r,g2r,h2r,ZT,p2r,xr,I8,u2r,rbe,_2r,b2r,on,v2r,tbe,F2r,T2r,abe,M2r,E2r,nbe,C2r,w2r,A2r,pe,eM,sbe,y2r,L2r,ZQ,x2r,$2r,k2r,oM,lbe,S2r,R2r,eW,B2r,P2r,I2r,rM,ibe,q2r,N2r,oW,j2r,D2r,G2r,tM,dbe,O2r,V2r,rW,X2r,z2r,Q2r,aM,cbe,W2r,H2r,tW,U2r,J2r,Y2r,nM,fbe,K2r,Z2r,aW,e1r,o1r,r1r,sM,mbe,t1r,a1r,nW,n1r,s1r,l1r,lM,gbe,i1r,d1r,sW,c1r,f1r,m1r,iM,hbe,g1r,h1r,lW,p1r,u1r,_1r,dM,pbe,b1r,v1r,iW,F1r,T1r,M1r,cM,ube,E1r,C1r,dW,w1r,A1r,y1r,fM,_be,L1r,x1r,cW,$1r,k1r,S1r,mM,bbe,R1r,B1r,fW,P1r,I1r,q1r,gM,vbe,N1r,j1r,mW,D1r,G1r,O1r,hM,Fbe,V1r,X1r,gW,z1r,Q1r,W1r,pM,Tbe,H1r,U1r,hW,J1r,Y1r,K1r,uM,Mbe,Z1r,ebr,pW,obr,rbr,tbr,_M,sPe,oc,bM,Ebe,q8,abr,Cbe,nbr,lPe,tr,N8,sbr,rc,lbr,uW,ibr,dbr,_W,cbr,fbr,mbr,j8,gbr,wbe,hbr,pbr,ubr,$t,D8,_br,Abe,bbr,vbr,tc,Fbr,ybe,Tbr,Mbr,bW,Ebr,Cbr,wbr,vM,Abr,$r,G8,ybr,Lbe,Lbr,xbr,rn,$br,xbe,kbr,Sbr,$be,Rbr,Bbr,kbe,Pbr,Ibr,qbr,Sbe,FM,Rbe,Nbr,jbr,vW,Dbr,Gbr,Obr,TM,iPe,ac,MM,Bbe,O8,Vbr,Pbe,Xbr,dPe,ar,V8,zbr,nc,Qbr,FW,Wbr,Hbr,TW,Ubr,Jbr,Ybr,X8,Kbr,Ibe,Zbr,e4r,o4r,kt,z8,r4r,qbe,t4r,a4r,sc,n4r,Nbe,s4r,l4r,MW,i4r,d4r,c4r,EM,f4r,kr,Q8,m4r,jbe,g4r,h4r,tn,p4r,Dbe,u4r,_4r,Gbe,b4r,v4r,Obe,F4r,T4r,M4r,de,CM,Vbe,E4r,C4r,EW,w4r,A4r,y4r,wM,Xbe,L4r,x4r,CW,$4r,k4r,S4r,AM,zbe,R4r,B4r,wW,P4r,I4r,q4r,yM,Qbe,N4r,j4r,AW,D4r,G4r,O4r,LM,Wbe,V4r,X4r,yW,z4r,Q4r,W4r,xM,Hbe,H4r,U4r,LW,J4r,Y4r,K4r,$M,Ube,Z4r,evr,xW,ovr,rvr,tvr,kM,Jbe,avr,nvr,$W,svr,lvr,ivr,SM,Ybe,dvr,cvr,kW,fvr,mvr,gvr,RM,Kbe,hvr,pvr,SW,uvr,_vr,bvr,BM,Zbe,vvr,Fvr,RW,Tvr,Mvr,Evr,PM,e4e,Cvr,wvr,BW,Avr,yvr,Lvr,IM,o4e,xvr,$vr,PW,kvr,Svr,Rvr,qM,r4e,Bvr,Pvr,IW,Ivr,qvr,Nvr,NM,t4e,jvr,Dvr,qW,Gvr,Ovr,Vvr,jM,a4e,Xvr,zvr,NW,Qvr,Wvr,Hvr,DM,n4e,Uvr,Jvr,jW,Yvr,Kvr,Zvr,GM,s4e,eFr,oFr,DW,rFr,tFr,aFr,OM,l4e,nFr,sFr,GW,lFr,iFr,dFr,VM,i4e,cFr,fFr,OW,mFr,gFr,hFr,XM,cPe,lc,zM,d4e,W8,pFr,c4e,uFr,fPe,nr,H8,_Fr,ic,bFr,VW,vFr,FFr,XW,TFr,MFr,EFr,U8,CFr,f4e,wFr,AFr,yFr,St,J8,LFr,m4e,xFr,$Fr,dc,kFr,g4e,SFr,RFr,zW,BFr,PFr,IFr,QM,qFr,Sr,Y8,NFr,h4e,jFr,DFr,an,GFr,p4e,OFr,VFr,u4e,XFr,zFr,_4e,QFr,WFr,HFr,ce,WM,b4e,UFr,JFr,QW,YFr,KFr,ZFr,HM,v4e,e0r,o0r,WW,r0r,t0r,a0r,UM,F4e,n0r,s0r,HW,l0r,i0r,d0r,JM,T4e,c0r,f0r,UW,m0r,g0r,h0r,YM,M4e,p0r,u0r,JW,_0r,b0r,v0r,KM,E4e,F0r,T0r,YW,M0r,E0r,C0r,ZM,C4e,w0r,A0r,KW,y0r,L0r,x0r,eE,w4e,$0r,k0r,ZW,S0r,R0r,B0r,oE,A4e,P0r,I0r,eH,q0r,N0r,j0r,rE,y4e,D0r,G0r,oH,O0r,V0r,X0r,tE,L4e,z0r,Q0r,rH,W0r,H0r,U0r,aE,x4e,J0r,Y0r,tH,K0r,Z0r,e6r,nE,$4e,o6r,r6r,aH,t6r,a6r,n6r,sE,k4e,s6r,l6r,nH,i6r,d6r,c6r,lE,S4e,f6r,m6r,sH,g6r,h6r,p6r,iE,R4e,u6r,_6r,lH,b6r,v6r,F6r,dE,B4e,T6r,M6r,iH,E6r,C6r,w6r,cE,P4e,A6r,y6r,dH,L6r,x6r,$6r,fE,I4e,k6r,S6r,cH,R6r,B6r,P6r,mE,q4e,I6r,q6r,fH,N6r,j6r,D6r,gE,mPe,cc,hE,N4e,K8,G6r,j4e,O6r,gPe,sr,Z8,V6r,fc,X6r,mH,z6r,Q6r,gH,W6r,H6r,U6r,e7,J6r,D4e,Y6r,K6r,Z6r,Rt,o7,eTr,G4e,oTr,rTr,mc,tTr,O4e,aTr,nTr,hH,sTr,lTr,iTr,pE,dTr,Rr,r7,cTr,V4e,fTr,mTr,nn,gTr,X4e,hTr,pTr,z4e,uTr,_Tr,Q4e,bTr,vTr,FTr,W4e,uE,H4e,TTr,MTr,pH,ETr,CTr,wTr,_E,hPe,gc,bE,U4e,t7,ATr,J4e,yTr,pPe,lr,a7,LTr,hc,xTr,uH,$Tr,kTr,_H,STr,RTr,BTr,n7,PTr,Y4e,ITr,qTr,NTr,Bt,s7,jTr,K4e,DTr,GTr,pc,OTr,Z4e,VTr,XTr,bH,zTr,QTr,WTr,vE,HTr,Br,l7,UTr,eve,JTr,YTr,sn,KTr,ove,ZTr,eMr,rve,oMr,rMr,tve,tMr,aMr,nMr,ave,FE,nve,sMr,lMr,vH,iMr,dMr,cMr,TE,uPe,uc,ME,sve,i7,fMr,lve,mMr,_Pe,ir,d7,gMr,_c,hMr,FH,pMr,uMr,TH,_Mr,bMr,vMr,c7,FMr,ive,TMr,MMr,EMr,Pt,f7,CMr,dve,wMr,AMr,bc,yMr,cve,LMr,xMr,MH,$Mr,kMr,SMr,EE,RMr,Pr,m7,BMr,fve,PMr,IMr,ln,qMr,mve,NMr,jMr,gve,DMr,GMr,hve,OMr,VMr,XMr,oe,CE,pve,zMr,QMr,EH,WMr,HMr,UMr,wE,uve,JMr,YMr,CH,KMr,ZMr,eEr,AE,_ve,oEr,rEr,wH,tEr,aEr,nEr,yE,bve,sEr,lEr,AH,iEr,dEr,cEr,LE,vve,fEr,mEr,yH,gEr,hEr,pEr,xE,Fve,uEr,_Er,LH,bEr,vEr,FEr,$E,Tve,TEr,MEr,xH,EEr,CEr,wEr,kE,Mve,AEr,yEr,$H,LEr,xEr,$Er,SE,Eve,kEr,SEr,kH,REr,BEr,PEr,RE,Cve,IEr,qEr,SH,NEr,jEr,DEr,BE,wve,GEr,OEr,RH,VEr,XEr,zEr,PE,Ave,QEr,WEr,BH,HEr,UEr,JEr,IE,yve,YEr,KEr,PH,ZEr,e5r,o5r,qE,Lve,r5r,t5r,IH,a5r,n5r,s5r,NE,xve,l5r,i5r,qH,d5r,c5r,f5r,jE,$ve,m5r,g5r,NH,h5r,p5r,u5r,DE,kve,_5r,b5r,jH,v5r,F5r,T5r,GE,Sve,M5r,E5r,DH,C5r,w5r,A5r,OE,Rve,y5r,L5r,GH,x5r,$5r,k5r,VE,Bve,S5r,R5r,OH,B5r,P5r,I5r,XE,Pve,q5r,N5r,VH,j5r,D5r,G5r,zE,Ive,O5r,V5r,XH,X5r,z5r,Q5r,QE,qve,W5r,H5r,zH,U5r,J5r,Y5r,WE,Nve,K5r,Z5r,QH,eCr,oCr,rCr,HE,jve,tCr,aCr,WH,nCr,sCr,lCr,UE,bPe,vc,JE,Dve,g7,iCr,Gve,dCr,vPe,dr,h7,cCr,Fc,fCr,HH,mCr,gCr,UH,hCr,pCr,uCr,p7,_Cr,Ove,bCr,vCr,FCr,It,u7,TCr,Vve,MCr,ECr,Tc,CCr,Xve,wCr,ACr,JH,yCr,LCr,xCr,YE,$Cr,Ir,_7,kCr,zve,SCr,RCr,dn,BCr,Qve,PCr,ICr,Wve,qCr,NCr,Hve,jCr,DCr,GCr,Hr,KE,Uve,OCr,VCr,YH,XCr,zCr,QCr,ZE,Jve,WCr,HCr,KH,UCr,JCr,YCr,e5,Yve,KCr,ZCr,ZH,e3r,o3r,r3r,o5,Kve,t3r,a3r,eU,n3r,s3r,l3r,r5,Zve,i3r,d3r,oU,c3r,f3r,m3r,t5,FPe,Mc,a5,eFe,b7,g3r,oFe,h3r,TPe,cr,v7,p3r,Ec,u3r,rU,_3r,b3r,tU,v3r,F3r,T3r,F7,M3r,rFe,E3r,C3r,w3r,qt,T7,A3r,tFe,y3r,L3r,Cc,x3r,aFe,$3r,k3r,aU,S3r,R3r,B3r,n5,P3r,qr,M7,I3r,nFe,q3r,N3r,cn,j3r,sFe,D3r,G3r,lFe,O3r,V3r,iFe,X3r,z3r,Q3r,Me,s5,dFe,W3r,H3r,nU,U3r,J3r,Y3r,l5,cFe,K3r,Z3r,sU,ewr,owr,rwr,i5,fFe,twr,awr,lU,nwr,swr,lwr,d5,mFe,iwr,dwr,iU,cwr,fwr,mwr,c5,gFe,gwr,hwr,dU,pwr,uwr,_wr,f5,hFe,bwr,vwr,cU,Fwr,Twr,Mwr,m5,pFe,Ewr,Cwr,fU,wwr,Awr,ywr,g5,uFe,Lwr,xwr,mU,$wr,kwr,Swr,h5,_Fe,Rwr,Bwr,gU,Pwr,Iwr,qwr,p5,bFe,Nwr,jwr,hU,Dwr,Gwr,Owr,u5,vFe,Vwr,Xwr,pU,zwr,Qwr,Wwr,_5,FFe,Hwr,Uwr,uU,Jwr,Ywr,Kwr,b5,MPe,wc,v5,TFe,E7,Zwr,MFe,eAr,EPe,fr,C7,oAr,Ac,rAr,_U,tAr,aAr,bU,nAr,sAr,lAr,w7,iAr,EFe,dAr,cAr,fAr,Nt,A7,mAr,CFe,gAr,hAr,yc,pAr,wFe,uAr,_Ar,vU,bAr,vAr,FAr,F5,TAr,Nr,y7,MAr,AFe,EAr,CAr,fn,wAr,yFe,AAr,yAr,LFe,LAr,xAr,xFe,$Ar,kAr,SAr,Le,T5,$Fe,RAr,BAr,FU,PAr,IAr,qAr,M5,kFe,NAr,jAr,TU,DAr,GAr,OAr,E5,SFe,VAr,XAr,MU,zAr,QAr,WAr,C5,RFe,HAr,UAr,EU,JAr,YAr,KAr,w5,BFe,ZAr,eyr,CU,oyr,ryr,tyr,A5,PFe,ayr,nyr,wU,syr,lyr,iyr,y5,IFe,dyr,cyr,AU,fyr,myr,gyr,L5,qFe,hyr,pyr,yU,uyr,_yr,byr,x5,NFe,vyr,Fyr,LU,Tyr,Myr,Eyr,$5,jFe,Cyr,wyr,xU,Ayr,yyr,Lyr,k5,CPe,Lc,S5,DFe,L7,xyr,GFe,$yr,wPe,mr,x7,kyr,xc,Syr,$U,Ryr,Byr,kU,Pyr,Iyr,qyr,$7,Nyr,OFe,jyr,Dyr,Gyr,jt,k7,Oyr,VFe,Vyr,Xyr,$c,zyr,XFe,Qyr,Wyr,SU,Hyr,Uyr,Jyr,R5,Yyr,jr,S7,Kyr,zFe,Zyr,eLr,mn,oLr,QFe,rLr,tLr,WFe,aLr,nLr,HFe,sLr,lLr,iLr,Se,B5,UFe,dLr,cLr,RU,fLr,mLr,gLr,P5,JFe,hLr,pLr,BU,uLr,_Lr,bLr,I5,YFe,vLr,FLr,PU,TLr,MLr,ELr,q5,KFe,CLr,wLr,IU,ALr,yLr,LLr,N5,ZFe,xLr,$Lr,qU,kLr,SLr,RLr,j5,e0e,BLr,PLr,NU,ILr,qLr,NLr,D5,o0e,jLr,DLr,jU,GLr,OLr,VLr,G5,r0e,XLr,zLr,DU,QLr,WLr,HLr,O5,t0e,ULr,JLr,GU,YLr,KLr,ZLr,V5,APe,kc,X5,a0e,R7,e8r,n0e,o8r,yPe,gr,B7,r8r,Sc,t8r,OU,a8r,n8r,VU,s8r,l8r,i8r,P7,d8r,s0e,c8r,f8r,m8r,Dt,I7,g8r,l0e,h8r,p8r,Rc,u8r,i0e,_8r,b8r,XU,v8r,F8r,T8r,z5,M8r,Dr,q7,E8r,d0e,C8r,w8r,gn,A8r,c0e,y8r,L8r,f0e,x8r,$8r,m0e,k8r,S8r,R8r,xe,Q5,g0e,B8r,P8r,zU,I8r,q8r,N8r,W5,h0e,j8r,D8r,QU,G8r,O8r,V8r,H5,p0e,X8r,z8r,WU,Q8r,W8r,H8r,U5,u0e,U8r,J8r,HU,Y8r,K8r,Z8r,J5,_0e,e7r,o7r,UU,r7r,t7r,a7r,Y5,b0e,n7r,s7r,JU,l7r,i7r,d7r,K5,v0e,c7r,f7r,YU,m7r,g7r,h7r,Z5,F0e,p7r,u7r,KU,_7r,b7r,v7r,eC,T0e,F7r,T7r,ZU,M7r,E7r,C7r,oC,M0e,w7r,A7r,eJ,y7r,L7r,x7r,rC,LPe,Bc,tC,E0e,N7,$7r,C0e,k7r,xPe,hr,j7,S7r,Pc,R7r,oJ,B7r,P7r,rJ,I7r,q7r,N7r,D7,j7r,w0e,D7r,G7r,O7r,Gt,G7,V7r,A0e,X7r,z7r,Ic,Q7r,y0e,W7r,H7r,tJ,U7r,J7r,Y7r,aC,K7r,Gr,O7,Z7r,L0e,exr,oxr,hn,rxr,x0e,txr,axr,$0e,nxr,sxr,k0e,lxr,ixr,dxr,$e,nC,S0e,cxr,fxr,aJ,mxr,gxr,hxr,sC,R0e,pxr,uxr,nJ,_xr,bxr,vxr,lC,B0e,Fxr,Txr,sJ,Mxr,Exr,Cxr,iC,P0e,wxr,Axr,lJ,yxr,Lxr,xxr,dC,I0e,$xr,kxr,iJ,Sxr,Rxr,Bxr,cC,q0e,Pxr,Ixr,dJ,qxr,Nxr,jxr,fC,N0e,Dxr,Gxr,cJ,Oxr,Vxr,Xxr,mC,j0e,zxr,Qxr,fJ,Wxr,Hxr,Uxr,gC,D0e,Jxr,Yxr,mJ,Kxr,Zxr,e9r,hC,G0e,o9r,r9r,gJ,t9r,a9r,n9r,pC,$Pe,qc,uC,O0e,V7,s9r,V0e,l9r,kPe,pr,X7,i9r,Nc,d9r,hJ,c9r,f9r,pJ,m9r,g9r,h9r,z7,p9r,X0e,u9r,_9r,b9r,Ot,Q7,v9r,z0e,F9r,T9r,jc,M9r,Q0e,E9r,C9r,uJ,w9r,A9r,y9r,_C,L9r,Or,W7,x9r,W0e,$9r,k9r,pn,S9r,H0e,R9r,B9r,U0e,P9r,I9r,J0e,q9r,N9r,j9r,je,bC,Y0e,D9r,G9r,_J,O9r,V9r,X9r,vC,K0e,z9r,Q9r,bJ,W9r,H9r,U9r,FC,Z0e,J9r,Y9r,vJ,K9r,Z9r,e$r,TC,e6e,o$r,r$r,FJ,t$r,a$r,n$r,MC,o6e,s$r,l$r,TJ,i$r,d$r,c$r,EC,r6e,f$r,m$r,MJ,g$r,h$r,p$r,CC,t6e,u$r,_$r,EJ,b$r,v$r,F$r,wC,a6e,T$r,M$r,CJ,E$r,C$r,w$r,AC,SPe,Dc,yC,n6e,H7,A$r,s6e,y$r,RPe,ur,U7,L$r,Gc,x$r,wJ,$$r,k$r,AJ,S$r,R$r,B$r,J7,P$r,l6e,I$r,q$r,N$r,Vt,Y7,j$r,i6e,D$r,G$r,Oc,O$r,d6e,V$r,X$r,yJ,z$r,Q$r,W$r,LC,H$r,Vr,K7,U$r,c6e,J$r,Y$r,un,K$r,f6e,Z$r,ekr,m6e,okr,rkr,g6e,tkr,akr,nkr,De,xC,h6e,skr,lkr,LJ,ikr,dkr,ckr,$C,p6e,fkr,mkr,xJ,gkr,hkr,pkr,kC,u6e,ukr,_kr,$J,bkr,vkr,Fkr,SC,_6e,Tkr,Mkr,kJ,Ekr,Ckr,wkr,RC,b6e,Akr,ykr,SJ,Lkr,xkr,$kr,BC,v6e,kkr,Skr,RJ,Rkr,Bkr,Pkr,PC,F6e,Ikr,qkr,BJ,Nkr,jkr,Dkr,IC,T6e,Gkr,Okr,PJ,Vkr,Xkr,zkr,qC,BPe,Vc,NC,M6e,Z7,Qkr,E6e,Wkr,PPe,_r,ex,Hkr,Xc,Ukr,IJ,Jkr,Ykr,qJ,Kkr,Zkr,eSr,ox,oSr,C6e,rSr,tSr,aSr,Xt,rx,nSr,w6e,sSr,lSr,zc,iSr,A6e,dSr,cSr,NJ,fSr,mSr,gSr,jC,hSr,Xr,tx,pSr,y6e,uSr,_Sr,_n,bSr,L6e,vSr,FSr,x6e,TSr,MSr,$6e,ESr,CSr,wSr,k6e,DC,S6e,ASr,ySr,jJ,LSr,xSr,$Sr,GC,IPe,Qc,OC,R6e,ax,kSr,B6e,SSr,qPe,br,nx,RSr,Wc,BSr,DJ,PSr,ISr,GJ,qSr,NSr,jSr,sx,DSr,P6e,GSr,OSr,VSr,zt,lx,XSr,I6e,zSr,QSr,Hc,WSr,q6e,HSr,USr,OJ,JSr,YSr,KSr,VC,ZSr,zr,ix,eRr,N6e,oRr,rRr,bn,tRr,j6e,aRr,nRr,D6e,sRr,lRr,G6e,iRr,dRr,cRr,dx,XC,O6e,fRr,mRr,VJ,gRr,hRr,pRr,zC,V6e,uRr,_Rr,XJ,bRr,vRr,FRr,QC,NPe,Uc,WC,X6e,cx,TRr,z6e,MRr,jPe,vr,fx,ERr,Jc,CRr,zJ,wRr,ARr,QJ,yRr,LRr,xRr,mx,$Rr,Q6e,kRr,SRr,RRr,Qt,gx,BRr,W6e,PRr,IRr,Yc,qRr,H6e,NRr,jRr,WJ,DRr,GRr,ORr,HC,VRr,Qr,hx,XRr,U6e,zRr,QRr,vn,WRr,J6e,HRr,URr,Y6e,JRr,YRr,K6e,KRr,ZRr,eBr,Z6e,UC,eTe,oBr,rBr,HJ,tBr,aBr,nBr,JC,DPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),uA=new ee({}),_A=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new sBr({props:{warning:!0,$$slots:{default:[GEt]},$$scope:{ctx:L}}}),bA=new ee({}),vA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L563"}}),MA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:L}}}),EA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/configuration_auto.py#L708"}}),CA=new ee({}),wA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L377"}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16402/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[VEt]},$$scope:{ctx:L}}}),xA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/tokenization_auto.py#L587"}}),$A=new ee({}),kA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16402/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),ih=new sBr({props:{$$slots:{default:[XEt]},$$scope:{ctx:L}}}),dh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[zEt]},$$scope:{ctx:L}}}),PA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),IA=new ee({}),qA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L76"}}),DA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L90"}}),Ah=new sBr({props:{$$slots:{default:[QEt]},$$scope:{ctx:L}}}),yh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[WEt]},$$scope:{ctx:L}}}),GA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/processing_auto.py#L243"}}),OA=new ee({}),VA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L716"}}),zA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><code>MCTCConfig</code> configuration class: <code>MCTCModel</code> (MCTC model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$h=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[HEt]},$$scope:{ctx:L}}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),bu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[UEt]},$$scope:{ctx:L}}}),WA=new ee({}),HA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L723"}}),JA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Fu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[JEt]},$$scope:{ctx:L}}}),YA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),l_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[YEt]},$$scope:{ctx:L}}}),KA=new ee({}),ZA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L738"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),d_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[KEt]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Q_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ZEt]},$$scope:{ctx:L}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L745"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),H_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[e5t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o5t]},$$scope:{ctx:L}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L752"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r5t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),K2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t5t]},$$scope:{ctx:L}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L761"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),e1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[a5t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),U1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n5t]},$$scope:{ctx:L}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L795"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Y1=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[s5t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),yb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[l5t]},$$scope:{ctx:L}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L802"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),xb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[i5t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Ib=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[d5t]},$$scope:{ctx:L}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L788"}}),ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Nb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[c5t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[f5t]},$$scope:{ctx:L}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L770"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[m5t]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),iv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[g5t]},$$scope:{ctx:L}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L777"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),cv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[h5t]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),gv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[p5t]},$$scope:{ctx:L}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L811"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[u5t]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Lv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[_5t]},$$scope:{ctx:L}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L850"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[b5t]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[v5t]},$$scope:{ctx:L}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L857"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[F5t]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[T5t]},$$scope:{ctx:L}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L880"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[M5t]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[E5t]},$$scope:{ctx:L}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L864"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><code>MCTCConfig</code> configuration class: <code>MCTCForCTC</code> (MCTC model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[C5t]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[w5t]},$$scope:{ctx:L}}}),hL=new ee({}),pL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L871"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[A5t]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[y5t]},$$scope:{ctx:L}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L889"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[L5t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[x5t]},$$scope:{ctx:L}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L896"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[$5t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),RF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[k5t]},$$scope:{ctx:L}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L843"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),PF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[S5t]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[R5t]},$$scope:{ctx:L}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L818"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),DF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[B5t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[P5t]},$$scope:{ctx:L}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L825"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[I5t]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),YF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[q5t]},$$scope:{ctx:L}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_auto.py#L834"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),ZF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[N5t]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),r0=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[j5t]},$$scope:{ctx:L}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),a0=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[D5t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[G5t]},$$scope:{ctx:L}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),a8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[O5t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),F6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V5t]},$$scope:{ctx:L}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),d8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),M6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[X5t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),P6=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z5t]},$$scope:{ctx:L}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),h8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Q5t]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[W5t]},$$scope:{ctx:L}}}),_8=new ee({}),b8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),F8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),O6=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[H5t]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[U5t]},$$scope:{ctx:L}}}),M8=new ee({}),E8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),w8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[J5t]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),MT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Y5t]},$$scope:{ctx:L}}}),y8=new ee({}),L8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),$8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),CT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[K5t]},$$scope:{ctx:L}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),YT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Z5t]},$$scope:{ctx:L}}}),S8=new ee({}),R8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),P8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),ZT=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),q8=new ee({}),N8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),D8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),TM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),EM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),XM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),W8=new ee({}),H8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),QM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),K8=new ee({}),Z8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),o7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),r7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),t7=new ee({}),a7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),s7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),l7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),i7=new ee({}),d7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),f7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),m7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),g7=new ee({}),h7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),u7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),_7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),b7=new ee({}),v7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),T7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),M7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),E7=new ee({}),C7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),A7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),L7=new ee({}),x7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),k7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),S7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),R7=new ee({}),B7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),I7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),N7=new ee({}),j7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),G7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),O7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),pC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),V7=new ee({}),X7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Q7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),W7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),H7=new ee({}),U7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Y7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),LC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),K7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),Z7=new ee({}),ex=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),ax=new ee({}),nx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),QC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L389"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16402/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16402/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16402/src/transformers/models/auto/auto_factory.py#L417"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),mA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Ve=a("p"),ai=o("Instantiating one of "),Tn=a("a"),gA=o("AutoConfig"),Mn=o(", "),En=a("a"),hA=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),pA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Xe=l(),Ae=a("p"),y9=o("will create a model that is an instance of "),li=a("a"),L9=o("BertModel"),x9=o("."),To=l(),va=a("p"),$9=o("There is one class of "),af=a("code"),k9=o("AutoModel"),zqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),jRe=l(),ii=a("h2"),nf=a("a"),jK=a("span"),F(uA.$$.fragment),Qqe=l(),DK=a("span"),Wqe=o("Extending the Auto Classes"),DRe=l(),wn=a("p"),Hqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GK=a("code"),Uqe=o("NewModel"),Jqe=o(", make sure you have a "),OK=a("code"),Yqe=o("NewModelConfig"),Kqe=o(` then you can add those to the auto
classes like this:`),GRe=l(),F(_A.$$.fragment),ORe=l(),S9=a("p"),Zqe=o("You will then be able to use the auto classes like you would usually do!"),VRe=l(),F(sf.$$.fragment),XRe=l(),di=a("h2"),lf=a("a"),VK=a("span"),F(bA.$$.fragment),eNe=l(),XK=a("span"),oNe=o("AutoConfig"),zRe=l(),Mo=a("div"),F(vA.$$.fragment),rNe=l(),FA=a("p"),tNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R9=a("a"),aNe=o("from_pretrained()"),nNe=o(" class method."),sNe=l(),TA=a("p"),lNe=o("This class cannot be instantiated directly using "),zK=a("code"),iNe=o("__init__()"),dNe=o(" (throws an error)."),cNe=l(),Fr=a("div"),F(MA.$$.fragment),fNe=l(),QK=a("p"),mNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),gNe=l(),ci=a("p"),hNe=o("The configuration class to instantiate is selected based on the "),WK=a("code"),pNe=o("model_type"),uNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HK=a("code"),_Ne=o("pretrained_model_name_or_path"),bNe=o(":"),vNe=l(),A=a("ul"),df=a("li"),UK=a("strong"),FNe=o("albert"),TNe=o(" \u2014 "),B9=a("a"),MNe=o("AlbertConfig"),ENe=o(" (ALBERT model)"),CNe=l(),cf=a("li"),JK=a("strong"),wNe=o("bart"),ANe=o(" \u2014 "),P9=a("a"),yNe=o("BartConfig"),LNe=o(" (BART model)"),xNe=l(),ff=a("li"),YK=a("strong"),$Ne=o("beit"),kNe=o(" \u2014 "),I9=a("a"),SNe=o("BeitConfig"),RNe=o(" (BEiT model)"),BNe=l(),mf=a("li"),KK=a("strong"),PNe=o("bert"),INe=o(" \u2014 "),q9=a("a"),qNe=o("BertConfig"),NNe=o(" (BERT model)"),jNe=l(),gf=a("li"),ZK=a("strong"),DNe=o("bert-generation"),GNe=o(" \u2014 "),N9=a("a"),ONe=o("BertGenerationConfig"),VNe=o(" (Bert Generation model)"),XNe=l(),hf=a("li"),eZ=a("strong"),zNe=o("big_bird"),QNe=o(" \u2014 "),j9=a("a"),WNe=o("BigBirdConfig"),HNe=o(" (BigBird model)"),UNe=l(),pf=a("li"),oZ=a("strong"),JNe=o("bigbird_pegasus"),YNe=o(" \u2014 "),D9=a("a"),KNe=o("BigBirdPegasusConfig"),ZNe=o(" (BigBirdPegasus model)"),eje=l(),uf=a("li"),rZ=a("strong"),oje=o("blenderbot"),rje=o(" \u2014 "),G9=a("a"),tje=o("BlenderbotConfig"),aje=o(" (Blenderbot model)"),nje=l(),_f=a("li"),tZ=a("strong"),sje=o("blenderbot-small"),lje=o(" \u2014 "),O9=a("a"),ije=o("BlenderbotSmallConfig"),dje=o(" (BlenderbotSmall model)"),cje=l(),bf=a("li"),aZ=a("strong"),fje=o("camembert"),mje=o(" \u2014 "),V9=a("a"),gje=o("CamembertConfig"),hje=o(" (CamemBERT model)"),pje=l(),vf=a("li"),nZ=a("strong"),uje=o("canine"),_je=o(" \u2014 "),X9=a("a"),bje=o("CanineConfig"),vje=o(" (Canine model)"),Fje=l(),Ff=a("li"),sZ=a("strong"),Tje=o("clip"),Mje=o(" \u2014 "),z9=a("a"),Eje=o("CLIPConfig"),Cje=o(" (CLIP model)"),wje=l(),Tf=a("li"),lZ=a("strong"),Aje=o("convbert"),yje=o(" \u2014 "),Q9=a("a"),Lje=o("ConvBertConfig"),xje=o(" (ConvBERT model)"),$je=l(),Mf=a("li"),iZ=a("strong"),kje=o("convnext"),Sje=o(" \u2014 "),W9=a("a"),Rje=o("ConvNextConfig"),Bje=o(" (ConvNext model)"),Pje=l(),Ef=a("li"),dZ=a("strong"),Ije=o("ctrl"),qje=o(" \u2014 "),H9=a("a"),Nje=o("CTRLConfig"),jje=o(" (CTRL model)"),Dje=l(),Cf=a("li"),cZ=a("strong"),Gje=o("data2vec-audio"),Oje=o(" \u2014 "),U9=a("a"),Vje=o("Data2VecAudioConfig"),Xje=o(" (Data2VecAudio model)"),zje=l(),wf=a("li"),fZ=a("strong"),Qje=o("data2vec-text"),Wje=o(" \u2014 "),J9=a("a"),Hje=o("Data2VecTextConfig"),Uje=o(" (Data2VecText model)"),Jje=l(),Af=a("li"),mZ=a("strong"),Yje=o("data2vec-vision"),Kje=o(" \u2014 "),Y9=a("a"),Zje=o("Data2VecVisionConfig"),eDe=o(" (Data2VecVision model)"),oDe=l(),yf=a("li"),gZ=a("strong"),rDe=o("deberta"),tDe=o(" \u2014 "),K9=a("a"),aDe=o("DebertaConfig"),nDe=o(" (DeBERTa model)"),sDe=l(),Lf=a("li"),hZ=a("strong"),lDe=o("deberta-v2"),iDe=o(" \u2014 "),Z9=a("a"),dDe=o("DebertaV2Config"),cDe=o(" (DeBERTa-v2 model)"),fDe=l(),xf=a("li"),pZ=a("strong"),mDe=o("decision_transformer"),gDe=o(" \u2014 "),e$=a("a"),hDe=o("DecisionTransformerConfig"),pDe=o(" (Decision Transformer model)"),uDe=l(),$f=a("li"),uZ=a("strong"),_De=o("deit"),bDe=o(" \u2014 "),o$=a("a"),vDe=o("DeiTConfig"),FDe=o(" (DeiT model)"),TDe=l(),kf=a("li"),_Z=a("strong"),MDe=o("detr"),EDe=o(" \u2014 "),r$=a("a"),CDe=o("DetrConfig"),wDe=o(" (DETR model)"),ADe=l(),Sf=a("li"),bZ=a("strong"),yDe=o("distilbert"),LDe=o(" \u2014 "),t$=a("a"),xDe=o("DistilBertConfig"),$De=o(" (DistilBERT model)"),kDe=l(),Rf=a("li"),vZ=a("strong"),SDe=o("dpr"),RDe=o(" \u2014 "),a$=a("a"),BDe=o("DPRConfig"),PDe=o(" (DPR model)"),IDe=l(),Bf=a("li"),FZ=a("strong"),qDe=o("dpt"),NDe=o(" \u2014 "),n$=a("a"),jDe=o("DPTConfig"),DDe=o(" (DPT model)"),GDe=l(),Pf=a("li"),TZ=a("strong"),ODe=o("electra"),VDe=o(" \u2014 "),s$=a("a"),XDe=o("ElectraConfig"),zDe=o(" (ELECTRA model)"),QDe=l(),If=a("li"),MZ=a("strong"),WDe=o("encoder-decoder"),HDe=o(" \u2014 "),l$=a("a"),UDe=o("EncoderDecoderConfig"),JDe=o(" (Encoder decoder model)"),YDe=l(),qf=a("li"),EZ=a("strong"),KDe=o("flaubert"),ZDe=o(" \u2014 "),i$=a("a"),eGe=o("FlaubertConfig"),oGe=o(" (FlauBERT model)"),rGe=l(),Nf=a("li"),CZ=a("strong"),tGe=o("fnet"),aGe=o(" \u2014 "),d$=a("a"),nGe=o("FNetConfig"),sGe=o(" (FNet model)"),lGe=l(),jf=a("li"),wZ=a("strong"),iGe=o("fsmt"),dGe=o(" \u2014 "),c$=a("a"),cGe=o("FSMTConfig"),fGe=o(" (FairSeq Machine-Translation model)"),mGe=l(),Df=a("li"),AZ=a("strong"),gGe=o("funnel"),hGe=o(" \u2014 "),f$=a("a"),pGe=o("FunnelConfig"),uGe=o(" (Funnel Transformer model)"),_Ge=l(),Gf=a("li"),yZ=a("strong"),bGe=o("glpn"),vGe=o(" \u2014 "),m$=a("a"),FGe=o("GLPNConfig"),TGe=o(" (GLPN model)"),MGe=l(),Of=a("li"),LZ=a("strong"),EGe=o("gpt2"),CGe=o(" \u2014 "),g$=a("a"),wGe=o("GPT2Config"),AGe=o(" (OpenAI GPT-2 model)"),yGe=l(),Vf=a("li"),xZ=a("strong"),LGe=o("gpt_neo"),xGe=o(" \u2014 "),h$=a("a"),$Ge=o("GPTNeoConfig"),kGe=o(" (GPT Neo model)"),SGe=l(),Xf=a("li"),$Z=a("strong"),RGe=o("gptj"),BGe=o(" \u2014 "),p$=a("a"),PGe=o("GPTJConfig"),IGe=o(" (GPT-J model)"),qGe=l(),zf=a("li"),kZ=a("strong"),NGe=o("hubert"),jGe=o(" \u2014 "),u$=a("a"),DGe=o("HubertConfig"),GGe=o(" (Hubert model)"),OGe=l(),Qf=a("li"),SZ=a("strong"),VGe=o("ibert"),XGe=o(" \u2014 "),_$=a("a"),zGe=o("IBertConfig"),QGe=o(" (I-BERT model)"),WGe=l(),Wf=a("li"),RZ=a("strong"),HGe=o("imagegpt"),UGe=o(" \u2014 "),b$=a("a"),JGe=o("ImageGPTConfig"),YGe=o(" (ImageGPT model)"),KGe=l(),Hf=a("li"),BZ=a("strong"),ZGe=o("layoutlm"),eOe=o(" \u2014 "),v$=a("a"),oOe=o("LayoutLMConfig"),rOe=o(" (LayoutLM model)"),tOe=l(),Uf=a("li"),PZ=a("strong"),aOe=o("layoutlmv2"),nOe=o(" \u2014 "),F$=a("a"),sOe=o("LayoutLMv2Config"),lOe=o(" (LayoutLMv2 model)"),iOe=l(),Jf=a("li"),IZ=a("strong"),dOe=o("led"),cOe=o(" \u2014 "),T$=a("a"),fOe=o("LEDConfig"),mOe=o(" (LED model)"),gOe=l(),Yf=a("li"),qZ=a("strong"),hOe=o("longformer"),pOe=o(" \u2014 "),M$=a("a"),uOe=o("LongformerConfig"),_Oe=o(" (Longformer model)"),bOe=l(),Kf=a("li"),NZ=a("strong"),vOe=o("luke"),FOe=o(" \u2014 "),E$=a("a"),TOe=o("LukeConfig"),MOe=o(" (LUKE model)"),EOe=l(),Zf=a("li"),jZ=a("strong"),COe=o("lxmert"),wOe=o(" \u2014 "),C$=a("a"),AOe=o("LxmertConfig"),yOe=o(" (LXMERT model)"),LOe=l(),em=a("li"),DZ=a("strong"),xOe=o("m2m_100"),$Oe=o(" \u2014 "),w$=a("a"),kOe=o("M2M100Config"),SOe=o(" (M2M100 model)"),ROe=l(),om=a("li"),GZ=a("strong"),BOe=o("marian"),POe=o(" \u2014 "),A$=a("a"),IOe=o("MarianConfig"),qOe=o(" (Marian model)"),NOe=l(),rm=a("li"),OZ=a("strong"),jOe=o("maskformer"),DOe=o(" \u2014 "),y$=a("a"),GOe=o("MaskFormerConfig"),OOe=o(" (MaskFormer model)"),VOe=l(),tm=a("li"),VZ=a("strong"),XOe=o("mbart"),zOe=o(" \u2014 "),L$=a("a"),QOe=o("MBartConfig"),WOe=o(" (mBART model)"),HOe=l(),am=a("li"),XZ=a("strong"),UOe=o("mctc"),JOe=o(" \u2014 "),zZ=a("code"),YOe=o("MCTCConfig"),KOe=o(" (MCTC model)"),ZOe=l(),nm=a("li"),QZ=a("strong"),eVe=o("megatron-bert"),oVe=o(" \u2014 "),x$=a("a"),rVe=o("MegatronBertConfig"),tVe=o(" (MegatronBert model)"),aVe=l(),sm=a("li"),WZ=a("strong"),nVe=o("mobilebert"),sVe=o(" \u2014 "),$$=a("a"),lVe=o("MobileBertConfig"),iVe=o(" (MobileBERT model)"),dVe=l(),lm=a("li"),HZ=a("strong"),cVe=o("mpnet"),fVe=o(" \u2014 "),k$=a("a"),mVe=o("MPNetConfig"),gVe=o(" (MPNet model)"),hVe=l(),im=a("li"),UZ=a("strong"),pVe=o("mt5"),uVe=o(" \u2014 "),S$=a("a"),_Ve=o("MT5Config"),bVe=o(" (mT5 model)"),vVe=l(),dm=a("li"),JZ=a("strong"),FVe=o("nystromformer"),TVe=o(" \u2014 "),R$=a("a"),MVe=o("NystromformerConfig"),EVe=o(" (Nystromformer model)"),CVe=l(),cm=a("li"),YZ=a("strong"),wVe=o("openai-gpt"),AVe=o(" \u2014 "),B$=a("a"),yVe=o("OpenAIGPTConfig"),LVe=o(" (OpenAI GPT model)"),xVe=l(),fm=a("li"),KZ=a("strong"),$Ve=o("pegasus"),kVe=o(" \u2014 "),P$=a("a"),SVe=o("PegasusConfig"),RVe=o(" (Pegasus model)"),BVe=l(),mm=a("li"),ZZ=a("strong"),PVe=o("perceiver"),IVe=o(" \u2014 "),I$=a("a"),qVe=o("PerceiverConfig"),NVe=o(" (Perceiver model)"),jVe=l(),gm=a("li"),eee=a("strong"),DVe=o("plbart"),GVe=o(" \u2014 "),q$=a("a"),OVe=o("PLBartConfig"),VVe=o(" (PLBart model)"),XVe=l(),hm=a("li"),oee=a("strong"),zVe=o("poolformer"),QVe=o(" \u2014 "),N$=a("a"),WVe=o("PoolFormerConfig"),HVe=o(" (PoolFormer model)"),UVe=l(),pm=a("li"),ree=a("strong"),JVe=o("prophetnet"),YVe=o(" \u2014 "),j$=a("a"),KVe=o("ProphetNetConfig"),ZVe=o(" (ProphetNet model)"),eXe=l(),um=a("li"),tee=a("strong"),oXe=o("qdqbert"),rXe=o(" \u2014 "),D$=a("a"),tXe=o("QDQBertConfig"),aXe=o(" (QDQBert model)"),nXe=l(),_m=a("li"),aee=a("strong"),sXe=o("rag"),lXe=o(" \u2014 "),G$=a("a"),iXe=o("RagConfig"),dXe=o(" (RAG model)"),cXe=l(),bm=a("li"),nee=a("strong"),fXe=o("realm"),mXe=o(" \u2014 "),O$=a("a"),gXe=o("RealmConfig"),hXe=o(" (Realm model)"),pXe=l(),vm=a("li"),see=a("strong"),uXe=o("reformer"),_Xe=o(" \u2014 "),V$=a("a"),bXe=o("ReformerConfig"),vXe=o(" (Reformer model)"),FXe=l(),Fm=a("li"),lee=a("strong"),TXe=o("regnet"),MXe=o(" \u2014 "),X$=a("a"),EXe=o("RegNetConfig"),CXe=o(" (RegNet model)"),wXe=l(),Tm=a("li"),iee=a("strong"),AXe=o("rembert"),yXe=o(" \u2014 "),z$=a("a"),LXe=o("RemBertConfig"),xXe=o(" (RemBERT model)"),$Xe=l(),Mm=a("li"),dee=a("strong"),kXe=o("resnet"),SXe=o(" \u2014 "),Q$=a("a"),RXe=o("ResNetConfig"),BXe=o(" (ResNet model)"),PXe=l(),Em=a("li"),cee=a("strong"),IXe=o("retribert"),qXe=o(" \u2014 "),W$=a("a"),NXe=o("RetriBertConfig"),jXe=o(" (RetriBERT model)"),DXe=l(),Cm=a("li"),fee=a("strong"),GXe=o("roberta"),OXe=o(" \u2014 "),H$=a("a"),VXe=o("RobertaConfig"),XXe=o(" (RoBERTa model)"),zXe=l(),wm=a("li"),mee=a("strong"),QXe=o("roformer"),WXe=o(" \u2014 "),U$=a("a"),HXe=o("RoFormerConfig"),UXe=o(" (RoFormer model)"),JXe=l(),Am=a("li"),gee=a("strong"),YXe=o("segformer"),KXe=o(" \u2014 "),J$=a("a"),ZXe=o("SegformerConfig"),eze=o(" (SegFormer model)"),oze=l(),ym=a("li"),hee=a("strong"),rze=o("sew"),tze=o(" \u2014 "),Y$=a("a"),aze=o("SEWConfig"),nze=o(" (SEW model)"),sze=l(),Lm=a("li"),pee=a("strong"),lze=o("sew-d"),ize=o(" \u2014 "),K$=a("a"),dze=o("SEWDConfig"),cze=o(" (SEW-D model)"),fze=l(),xm=a("li"),uee=a("strong"),mze=o("speech-encoder-decoder"),gze=o(" \u2014 "),Z$=a("a"),hze=o("SpeechEncoderDecoderConfig"),pze=o(" (Speech Encoder decoder model)"),uze=l(),$m=a("li"),_ee=a("strong"),_ze=o("speech_to_text"),bze=o(" \u2014 "),ek=a("a"),vze=o("Speech2TextConfig"),Fze=o(" (Speech2Text model)"),Tze=l(),km=a("li"),bee=a("strong"),Mze=o("speech_to_text_2"),Eze=o(" \u2014 "),ok=a("a"),Cze=o("Speech2Text2Config"),wze=o(" (Speech2Text2 model)"),Aze=l(),Sm=a("li"),vee=a("strong"),yze=o("splinter"),Lze=o(" \u2014 "),rk=a("a"),xze=o("SplinterConfig"),$ze=o(" (Splinter model)"),kze=l(),Rm=a("li"),Fee=a("strong"),Sze=o("squeezebert"),Rze=o(" \u2014 "),tk=a("a"),Bze=o("SqueezeBertConfig"),Pze=o(" (SqueezeBERT model)"),Ize=l(),Bm=a("li"),Tee=a("strong"),qze=o("swin"),Nze=o(" \u2014 "),ak=a("a"),jze=o("SwinConfig"),Dze=o(" (Swin model)"),Gze=l(),Pm=a("li"),Mee=a("strong"),Oze=o("t5"),Vze=o(" \u2014 "),nk=a("a"),Xze=o("T5Config"),zze=o(" (T5 model)"),Qze=l(),Im=a("li"),Eee=a("strong"),Wze=o("tapas"),Hze=o(" \u2014 "),sk=a("a"),Uze=o("TapasConfig"),Jze=o(" (TAPAS model)"),Yze=l(),qm=a("li"),Cee=a("strong"),Kze=o("tapex"),Zze=o(" \u2014 "),lk=a("a"),eQe=o("BartConfig"),oQe=o(" (TAPEX model)"),rQe=l(),Nm=a("li"),wee=a("strong"),tQe=o("transfo-xl"),aQe=o(" \u2014 "),ik=a("a"),nQe=o("TransfoXLConfig"),sQe=o(" (Transformer-XL model)"),lQe=l(),jm=a("li"),Aee=a("strong"),iQe=o("trocr"),dQe=o(" \u2014 "),dk=a("a"),cQe=o("TrOCRConfig"),fQe=o(" (TrOCR model)"),mQe=l(),Dm=a("li"),yee=a("strong"),gQe=o("unispeech"),hQe=o(" \u2014 "),ck=a("a"),pQe=o("UniSpeechConfig"),uQe=o(" (UniSpeech model)"),_Qe=l(),Gm=a("li"),Lee=a("strong"),bQe=o("unispeech-sat"),vQe=o(" \u2014 "),fk=a("a"),FQe=o("UniSpeechSatConfig"),TQe=o(" (UniSpeechSat model)"),MQe=l(),Om=a("li"),xee=a("strong"),EQe=o("van"),CQe=o(" \u2014 "),mk=a("a"),wQe=o("VanConfig"),AQe=o(" (VAN model)"),yQe=l(),Vm=a("li"),$ee=a("strong"),LQe=o("vilt"),xQe=o(" \u2014 "),gk=a("a"),$Qe=o("ViltConfig"),kQe=o(" (ViLT model)"),SQe=l(),Xm=a("li"),kee=a("strong"),RQe=o("vision-encoder-decoder"),BQe=o(" \u2014 "),hk=a("a"),PQe=o("VisionEncoderDecoderConfig"),IQe=o(" (Vision Encoder decoder model)"),qQe=l(),zm=a("li"),See=a("strong"),NQe=o("vision-text-dual-encoder"),jQe=o(" \u2014 "),pk=a("a"),DQe=o("VisionTextDualEncoderConfig"),GQe=o(" (VisionTextDualEncoder model)"),OQe=l(),Qm=a("li"),Ree=a("strong"),VQe=o("visual_bert"),XQe=o(" \u2014 "),uk=a("a"),zQe=o("VisualBertConfig"),QQe=o(" (VisualBert model)"),WQe=l(),Wm=a("li"),Bee=a("strong"),HQe=o("vit"),UQe=o(" \u2014 "),_k=a("a"),JQe=o("ViTConfig"),YQe=o(" (ViT model)"),KQe=l(),Hm=a("li"),Pee=a("strong"),ZQe=o("vit_mae"),eWe=o(" \u2014 "),bk=a("a"),oWe=o("ViTMAEConfig"),rWe=o(" (ViTMAE model)"),tWe=l(),Um=a("li"),Iee=a("strong"),aWe=o("wav2vec2"),nWe=o(" \u2014 "),vk=a("a"),sWe=o("Wav2Vec2Config"),lWe=o(" (Wav2Vec2 model)"),iWe=l(),Jm=a("li"),qee=a("strong"),dWe=o("wavlm"),cWe=o(" \u2014 "),Fk=a("a"),fWe=o("WavLMConfig"),mWe=o(" (WavLM model)"),gWe=l(),Ym=a("li"),Nee=a("strong"),hWe=o("xglm"),pWe=o(" \u2014 "),Tk=a("a"),uWe=o("XGLMConfig"),_We=o(" (XGLM model)"),bWe=l(),Km=a("li"),jee=a("strong"),vWe=o("xlm"),FWe=o(" \u2014 "),Mk=a("a"),TWe=o("XLMConfig"),MWe=o(" (XLM model)"),EWe=l(),Zm=a("li"),Dee=a("strong"),CWe=o("xlm-prophetnet"),wWe=o(" \u2014 "),Ek=a("a"),AWe=o("XLMProphetNetConfig"),yWe=o(" (XLMProphetNet model)"),LWe=l(),eg=a("li"),Gee=a("strong"),xWe=o("xlm-roberta"),$We=o(" \u2014 "),Ck=a("a"),kWe=o("XLMRobertaConfig"),SWe=o(" (XLM-RoBERTa model)"),RWe=l(),og=a("li"),Oee=a("strong"),BWe=o("xlm-roberta-xl"),PWe=o(" \u2014 "),wk=a("a"),IWe=o("XLMRobertaXLConfig"),qWe=o(" (XLM-RoBERTa-XL model)"),NWe=l(),rg=a("li"),Vee=a("strong"),jWe=o("xlnet"),DWe=o(" \u2014 "),Ak=a("a"),GWe=o("XLNetConfig"),OWe=o(" (XLNet model)"),VWe=l(),tg=a("li"),Xee=a("strong"),XWe=o("yoso"),zWe=o(" \u2014 "),yk=a("a"),QWe=o("YosoConfig"),WWe=o(" (YOSO model)"),HWe=l(),F(ag.$$.fragment),UWe=l(),ng=a("div"),F(EA.$$.fragment),JWe=l(),zee=a("p"),YWe=o("Register a new configuration for this class."),QRe=l(),fi=a("h2"),sg=a("a"),Qee=a("span"),F(CA.$$.fragment),KWe=l(),Wee=a("span"),ZWe=o("AutoTokenizer"),WRe=l(),Eo=a("div"),F(wA.$$.fragment),eHe=l(),AA=a("p"),oHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Lk=a("a"),rHe=o("AutoTokenizer.from_pretrained()"),tHe=o(" class method."),aHe=l(),yA=a("p"),nHe=o("This class cannot be instantiated directly using "),Hee=a("code"),sHe=o("__init__()"),lHe=o(" (throws an error)."),iHe=l(),Tr=a("div"),F(LA.$$.fragment),dHe=l(),Uee=a("p"),cHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),fHe=l(),Fa=a("p"),mHe=o("The tokenizer class to instantiate is selected based on the "),Jee=a("code"),gHe=o("model_type"),hHe=o(` property of the config object (either
passed as an argument or loaded from `),Yee=a("code"),pHe=o("pretrained_model_name_or_path"),uHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kee=a("code"),_He=o("pretrained_model_name_or_path"),bHe=o(":"),vHe=l(),k=a("ul"),An=a("li"),Zee=a("strong"),FHe=o("albert"),THe=o(" \u2014 "),xk=a("a"),MHe=o("AlbertTokenizer"),EHe=o(" or "),$k=a("a"),CHe=o("AlbertTokenizerFast"),wHe=o(" (ALBERT model)"),AHe=l(),yn=a("li"),eoe=a("strong"),yHe=o("bart"),LHe=o(" \u2014 "),kk=a("a"),xHe=o("BartTokenizer"),$He=o(" or "),Sk=a("a"),kHe=o("BartTokenizerFast"),SHe=o(" (BART model)"),RHe=l(),Ln=a("li"),ooe=a("strong"),BHe=o("barthez"),PHe=o(" \u2014 "),Rk=a("a"),IHe=o("BarthezTokenizer"),qHe=o(" or "),Bk=a("a"),NHe=o("BarthezTokenizerFast"),jHe=o(" (BARThez model)"),DHe=l(),lg=a("li"),roe=a("strong"),GHe=o("bartpho"),OHe=o(" \u2014 "),Pk=a("a"),VHe=o("BartphoTokenizer"),XHe=o(" (BARTpho model)"),zHe=l(),xn=a("li"),toe=a("strong"),QHe=o("bert"),WHe=o(" \u2014 "),Ik=a("a"),HHe=o("BertTokenizer"),UHe=o(" or "),qk=a("a"),JHe=o("BertTokenizerFast"),YHe=o(" (BERT model)"),KHe=l(),ig=a("li"),aoe=a("strong"),ZHe=o("bert-generation"),eUe=o(" \u2014 "),Nk=a("a"),oUe=o("BertGenerationTokenizer"),rUe=o(" (Bert Generation model)"),tUe=l(),dg=a("li"),noe=a("strong"),aUe=o("bert-japanese"),nUe=o(" \u2014 "),jk=a("a"),sUe=o("BertJapaneseTokenizer"),lUe=o(" (BertJapanese model)"),iUe=l(),cg=a("li"),soe=a("strong"),dUe=o("bertweet"),cUe=o(" \u2014 "),Dk=a("a"),fUe=o("BertweetTokenizer"),mUe=o(" (Bertweet model)"),gUe=l(),$n=a("li"),loe=a("strong"),hUe=o("big_bird"),pUe=o(" \u2014 "),Gk=a("a"),uUe=o("BigBirdTokenizer"),_Ue=o(" or "),Ok=a("a"),bUe=o("BigBirdTokenizerFast"),vUe=o(" (BigBird model)"),FUe=l(),kn=a("li"),ioe=a("strong"),TUe=o("bigbird_pegasus"),MUe=o(" \u2014 "),Vk=a("a"),EUe=o("PegasusTokenizer"),CUe=o(" or "),Xk=a("a"),wUe=o("PegasusTokenizerFast"),AUe=o(" (BigBirdPegasus model)"),yUe=l(),Sn=a("li"),doe=a("strong"),LUe=o("blenderbot"),xUe=o(" \u2014 "),zk=a("a"),$Ue=o("BlenderbotTokenizer"),kUe=o(" or "),Qk=a("a"),SUe=o("BlenderbotTokenizerFast"),RUe=o(" (Blenderbot model)"),BUe=l(),fg=a("li"),coe=a("strong"),PUe=o("blenderbot-small"),IUe=o(" \u2014 "),Wk=a("a"),qUe=o("BlenderbotSmallTokenizer"),NUe=o(" (BlenderbotSmall model)"),jUe=l(),mg=a("li"),foe=a("strong"),DUe=o("byt5"),GUe=o(" \u2014 "),Hk=a("a"),OUe=o("ByT5Tokenizer"),VUe=o(" (ByT5 model)"),XUe=l(),Rn=a("li"),moe=a("strong"),zUe=o("camembert"),QUe=o(" \u2014 "),Uk=a("a"),WUe=o("CamembertTokenizer"),HUe=o(" or "),Jk=a("a"),UUe=o("CamembertTokenizerFast"),JUe=o(" (CamemBERT model)"),YUe=l(),gg=a("li"),goe=a("strong"),KUe=o("canine"),ZUe=o(" \u2014 "),Yk=a("a"),eJe=o("CanineTokenizer"),oJe=o(" (Canine model)"),rJe=l(),Bn=a("li"),hoe=a("strong"),tJe=o("clip"),aJe=o(" \u2014 "),Kk=a("a"),nJe=o("CLIPTokenizer"),sJe=o(" or "),Zk=a("a"),lJe=o("CLIPTokenizerFast"),iJe=o(" (CLIP model)"),dJe=l(),Pn=a("li"),poe=a("strong"),cJe=o("convbert"),fJe=o(" \u2014 "),eS=a("a"),mJe=o("ConvBertTokenizer"),gJe=o(" or "),oS=a("a"),hJe=o("ConvBertTokenizerFast"),pJe=o(" (ConvBERT model)"),uJe=l(),In=a("li"),uoe=a("strong"),_Je=o("cpm"),bJe=o(" \u2014 "),rS=a("a"),vJe=o("CpmTokenizer"),FJe=o(" or "),_oe=a("code"),TJe=o("CpmTokenizerFast"),MJe=o(" (CPM model)"),EJe=l(),hg=a("li"),boe=a("strong"),CJe=o("ctrl"),wJe=o(" \u2014 "),tS=a("a"),AJe=o("CTRLTokenizer"),yJe=o(" (CTRL model)"),LJe=l(),qn=a("li"),voe=a("strong"),xJe=o("data2vec-text"),$Je=o(" \u2014 "),aS=a("a"),kJe=o("RobertaTokenizer"),SJe=o(" or "),nS=a("a"),RJe=o("RobertaTokenizerFast"),BJe=o(" (Data2VecText model)"),PJe=l(),Nn=a("li"),Foe=a("strong"),IJe=o("deberta"),qJe=o(" \u2014 "),sS=a("a"),NJe=o("DebertaTokenizer"),jJe=o(" or "),lS=a("a"),DJe=o("DebertaTokenizerFast"),GJe=o(" (DeBERTa model)"),OJe=l(),jn=a("li"),Toe=a("strong"),VJe=o("deberta-v2"),XJe=o(" \u2014 "),iS=a("a"),zJe=o("DebertaV2Tokenizer"),QJe=o(" or "),dS=a("a"),WJe=o("DebertaV2TokenizerFast"),HJe=o(" (DeBERTa-v2 model)"),UJe=l(),Dn=a("li"),Moe=a("strong"),JJe=o("distilbert"),YJe=o(" \u2014 "),cS=a("a"),KJe=o("DistilBertTokenizer"),ZJe=o(" or "),fS=a("a"),eYe=o("DistilBertTokenizerFast"),oYe=o(" (DistilBERT model)"),rYe=l(),Gn=a("li"),Eoe=a("strong"),tYe=o("dpr"),aYe=o(" \u2014 "),mS=a("a"),nYe=o("DPRQuestionEncoderTokenizer"),sYe=o(" or "),gS=a("a"),lYe=o("DPRQuestionEncoderTokenizerFast"),iYe=o(" (DPR model)"),dYe=l(),On=a("li"),Coe=a("strong"),cYe=o("electra"),fYe=o(" \u2014 "),hS=a("a"),mYe=o("ElectraTokenizer"),gYe=o(" or "),pS=a("a"),hYe=o("ElectraTokenizerFast"),pYe=o(" (ELECTRA model)"),uYe=l(),pg=a("li"),woe=a("strong"),_Ye=o("flaubert"),bYe=o(" \u2014 "),uS=a("a"),vYe=o("FlaubertTokenizer"),FYe=o(" (FlauBERT model)"),TYe=l(),Vn=a("li"),Aoe=a("strong"),MYe=o("fnet"),EYe=o(" \u2014 "),_S=a("a"),CYe=o("FNetTokenizer"),wYe=o(" or "),bS=a("a"),AYe=o("FNetTokenizerFast"),yYe=o(" (FNet model)"),LYe=l(),ug=a("li"),yoe=a("strong"),xYe=o("fsmt"),$Ye=o(" \u2014 "),vS=a("a"),kYe=o("FSMTTokenizer"),SYe=o(" (FairSeq Machine-Translation model)"),RYe=l(),Xn=a("li"),Loe=a("strong"),BYe=o("funnel"),PYe=o(" \u2014 "),FS=a("a"),IYe=o("FunnelTokenizer"),qYe=o(" or "),TS=a("a"),NYe=o("FunnelTokenizerFast"),jYe=o(" (Funnel Transformer model)"),DYe=l(),zn=a("li"),xoe=a("strong"),GYe=o("gpt2"),OYe=o(" \u2014 "),MS=a("a"),VYe=o("GPT2Tokenizer"),XYe=o(" or "),ES=a("a"),zYe=o("GPT2TokenizerFast"),QYe=o(" (OpenAI GPT-2 model)"),WYe=l(),Qn=a("li"),$oe=a("strong"),HYe=o("gpt_neo"),UYe=o(" \u2014 "),CS=a("a"),JYe=o("GPT2Tokenizer"),YYe=o(" or "),wS=a("a"),KYe=o("GPT2TokenizerFast"),ZYe=o(" (GPT Neo model)"),eKe=l(),Wn=a("li"),koe=a("strong"),oKe=o("gptj"),rKe=o(" \u2014 "),AS=a("a"),tKe=o("GPT2Tokenizer"),aKe=o(" or "),yS=a("a"),nKe=o("GPT2TokenizerFast"),sKe=o(" (GPT-J model)"),lKe=l(),Hn=a("li"),Soe=a("strong"),iKe=o("herbert"),dKe=o(" \u2014 "),LS=a("a"),cKe=o("HerbertTokenizer"),fKe=o(" or "),xS=a("a"),mKe=o("HerbertTokenizerFast"),gKe=o(" (HerBERT model)"),hKe=l(),_g=a("li"),Roe=a("strong"),pKe=o("hubert"),uKe=o(" \u2014 "),$S=a("a"),_Ke=o("Wav2Vec2CTCTokenizer"),bKe=o(" (Hubert model)"),vKe=l(),Un=a("li"),Boe=a("strong"),FKe=o("ibert"),TKe=o(" \u2014 "),kS=a("a"),MKe=o("RobertaTokenizer"),EKe=o(" or "),SS=a("a"),CKe=o("RobertaTokenizerFast"),wKe=o(" (I-BERT model)"),AKe=l(),Jn=a("li"),Poe=a("strong"),yKe=o("layoutlm"),LKe=o(" \u2014 "),RS=a("a"),xKe=o("LayoutLMTokenizer"),$Ke=o(" or "),BS=a("a"),kKe=o("LayoutLMTokenizerFast"),SKe=o(" (LayoutLM model)"),RKe=l(),Yn=a("li"),Ioe=a("strong"),BKe=o("layoutlmv2"),PKe=o(" \u2014 "),PS=a("a"),IKe=o("LayoutLMv2Tokenizer"),qKe=o(" or "),IS=a("a"),NKe=o("LayoutLMv2TokenizerFast"),jKe=o(" (LayoutLMv2 model)"),DKe=l(),Kn=a("li"),qoe=a("strong"),GKe=o("layoutxlm"),OKe=o(" \u2014 "),qS=a("a"),VKe=o("LayoutXLMTokenizer"),XKe=o(" or "),NS=a("a"),zKe=o("LayoutXLMTokenizerFast"),QKe=o(" (LayoutXLM model)"),WKe=l(),Zn=a("li"),Noe=a("strong"),HKe=o("led"),UKe=o(" \u2014 "),jS=a("a"),JKe=o("LEDTokenizer"),YKe=o(" or "),DS=a("a"),KKe=o("LEDTokenizerFast"),ZKe=o(" (LED model)"),eZe=l(),es=a("li"),joe=a("strong"),oZe=o("longformer"),rZe=o(" \u2014 "),GS=a("a"),tZe=o("LongformerTokenizer"),aZe=o(" or "),OS=a("a"),nZe=o("LongformerTokenizerFast"),sZe=o(" (Longformer model)"),lZe=l(),bg=a("li"),Doe=a("strong"),iZe=o("luke"),dZe=o(" \u2014 "),VS=a("a"),cZe=o("LukeTokenizer"),fZe=o(" (LUKE model)"),mZe=l(),os=a("li"),Goe=a("strong"),gZe=o("lxmert"),hZe=o(" \u2014 "),XS=a("a"),pZe=o("LxmertTokenizer"),uZe=o(" or "),zS=a("a"),_Ze=o("LxmertTokenizerFast"),bZe=o(" (LXMERT model)"),vZe=l(),vg=a("li"),Ooe=a("strong"),FZe=o("m2m_100"),TZe=o(" \u2014 "),QS=a("a"),MZe=o("M2M100Tokenizer"),EZe=o(" (M2M100 model)"),CZe=l(),Fg=a("li"),Voe=a("strong"),wZe=o("marian"),AZe=o(" \u2014 "),WS=a("a"),yZe=o("MarianTokenizer"),LZe=o(" (Marian model)"),xZe=l(),rs=a("li"),Xoe=a("strong"),$Ze=o("mbart"),kZe=o(" \u2014 "),HS=a("a"),SZe=o("MBartTokenizer"),RZe=o(" or "),US=a("a"),BZe=o("MBartTokenizerFast"),PZe=o(" (mBART model)"),IZe=l(),ts=a("li"),zoe=a("strong"),qZe=o("mbart50"),NZe=o(" \u2014 "),JS=a("a"),jZe=o("MBart50Tokenizer"),DZe=o(" or "),YS=a("a"),GZe=o("MBart50TokenizerFast"),OZe=o(" (mBART-50 model)"),VZe=l(),as=a("li"),Qoe=a("strong"),XZe=o("megatron-bert"),zZe=o(" \u2014 "),KS=a("a"),QZe=o("BertTokenizer"),WZe=o(" or "),ZS=a("a"),HZe=o("BertTokenizerFast"),UZe=o(" (MegatronBert model)"),JZe=l(),Tg=a("li"),Woe=a("strong"),YZe=o("mluke"),KZe=o(" \u2014 "),eR=a("a"),ZZe=o("MLukeTokenizer"),eeo=o(" (mLUKE model)"),oeo=l(),ns=a("li"),Hoe=a("strong"),reo=o("mobilebert"),teo=o(" \u2014 "),oR=a("a"),aeo=o("MobileBertTokenizer"),neo=o(" or "),rR=a("a"),seo=o("MobileBertTokenizerFast"),leo=o(" (MobileBERT model)"),ieo=l(),ss=a("li"),Uoe=a("strong"),deo=o("mpnet"),ceo=o(" \u2014 "),tR=a("a"),feo=o("MPNetTokenizer"),meo=o(" or "),aR=a("a"),geo=o("MPNetTokenizerFast"),heo=o(" (MPNet model)"),peo=l(),ls=a("li"),Joe=a("strong"),ueo=o("mt5"),_eo=o(" \u2014 "),nR=a("a"),beo=o("MT5Tokenizer"),veo=o(" or "),sR=a("a"),Feo=o("MT5TokenizerFast"),Teo=o(" (mT5 model)"),Meo=l(),is=a("li"),Yoe=a("strong"),Eeo=o("nystromformer"),Ceo=o(" \u2014 "),lR=a("a"),weo=o("AlbertTokenizer"),Aeo=o(" or "),iR=a("a"),yeo=o("AlbertTokenizerFast"),Leo=o(" (Nystromformer model)"),xeo=l(),ds=a("li"),Koe=a("strong"),$eo=o("openai-gpt"),keo=o(" \u2014 "),dR=a("a"),Seo=o("OpenAIGPTTokenizer"),Reo=o(" or "),cR=a("a"),Beo=o("OpenAIGPTTokenizerFast"),Peo=o(" (OpenAI GPT model)"),Ieo=l(),cs=a("li"),Zoe=a("strong"),qeo=o("pegasus"),Neo=o(" \u2014 "),fR=a("a"),jeo=o("PegasusTokenizer"),Deo=o(" or "),mR=a("a"),Geo=o("PegasusTokenizerFast"),Oeo=o(" (Pegasus model)"),Veo=l(),Mg=a("li"),ere=a("strong"),Xeo=o("perceiver"),zeo=o(" \u2014 "),gR=a("a"),Qeo=o("PerceiverTokenizer"),Weo=o(" (Perceiver model)"),Heo=l(),Eg=a("li"),ore=a("strong"),Ueo=o("phobert"),Jeo=o(" \u2014 "),hR=a("a"),Yeo=o("PhobertTokenizer"),Keo=o(" (PhoBERT model)"),Zeo=l(),Cg=a("li"),rre=a("strong"),eoo=o("plbart"),ooo=o(" \u2014 "),pR=a("a"),roo=o("PLBartTokenizer"),too=o(" (PLBart model)"),aoo=l(),wg=a("li"),tre=a("strong"),noo=o("prophetnet"),soo=o(" \u2014 "),uR=a("a"),loo=o("ProphetNetTokenizer"),ioo=o(" (ProphetNet model)"),doo=l(),fs=a("li"),are=a("strong"),coo=o("qdqbert"),foo=o(" \u2014 "),_R=a("a"),moo=o("BertTokenizer"),goo=o(" or "),bR=a("a"),hoo=o("BertTokenizerFast"),poo=o(" (QDQBert model)"),uoo=l(),Ag=a("li"),nre=a("strong"),_oo=o("rag"),boo=o(" \u2014 "),vR=a("a"),voo=o("RagTokenizer"),Foo=o(" (RAG model)"),Too=l(),ms=a("li"),sre=a("strong"),Moo=o("realm"),Eoo=o(" \u2014 "),FR=a("a"),Coo=o("RealmTokenizer"),woo=o(" or "),TR=a("a"),Aoo=o("RealmTokenizerFast"),yoo=o(" (Realm model)"),Loo=l(),gs=a("li"),lre=a("strong"),xoo=o("reformer"),$oo=o(" \u2014 "),MR=a("a"),koo=o("ReformerTokenizer"),Soo=o(" or "),ER=a("a"),Roo=o("ReformerTokenizerFast"),Boo=o(" (Reformer model)"),Poo=l(),hs=a("li"),ire=a("strong"),Ioo=o("rembert"),qoo=o(" \u2014 "),CR=a("a"),Noo=o("RemBertTokenizer"),joo=o(" or "),wR=a("a"),Doo=o("RemBertTokenizerFast"),Goo=o(" (RemBERT model)"),Ooo=l(),ps=a("li"),dre=a("strong"),Voo=o("retribert"),Xoo=o(" \u2014 "),AR=a("a"),zoo=o("RetriBertTokenizer"),Qoo=o(" or "),yR=a("a"),Woo=o("RetriBertTokenizerFast"),Hoo=o(" (RetriBERT model)"),Uoo=l(),us=a("li"),cre=a("strong"),Joo=o("roberta"),Yoo=o(" \u2014 "),LR=a("a"),Koo=o("RobertaTokenizer"),Zoo=o(" or "),xR=a("a"),ero=o("RobertaTokenizerFast"),oro=o(" (RoBERTa model)"),rro=l(),_s=a("li"),fre=a("strong"),tro=o("roformer"),aro=o(" \u2014 "),$R=a("a"),nro=o("RoFormerTokenizer"),sro=o(" or "),kR=a("a"),lro=o("RoFormerTokenizerFast"),iro=o(" (RoFormer model)"),dro=l(),yg=a("li"),mre=a("strong"),cro=o("speech_to_text"),fro=o(" \u2014 "),SR=a("a"),mro=o("Speech2TextTokenizer"),gro=o(" (Speech2Text model)"),hro=l(),Lg=a("li"),gre=a("strong"),pro=o("speech_to_text_2"),uro=o(" \u2014 "),RR=a("a"),_ro=o("Speech2Text2Tokenizer"),bro=o(" (Speech2Text2 model)"),vro=l(),bs=a("li"),hre=a("strong"),Fro=o("splinter"),Tro=o(" \u2014 "),BR=a("a"),Mro=o("SplinterTokenizer"),Ero=o(" or "),PR=a("a"),Cro=o("SplinterTokenizerFast"),wro=o(" (Splinter model)"),Aro=l(),vs=a("li"),pre=a("strong"),yro=o("squeezebert"),Lro=o(" \u2014 "),IR=a("a"),xro=o("SqueezeBertTokenizer"),$ro=o(" or "),qR=a("a"),kro=o("SqueezeBertTokenizerFast"),Sro=o(" (SqueezeBERT model)"),Rro=l(),Fs=a("li"),ure=a("strong"),Bro=o("t5"),Pro=o(" \u2014 "),NR=a("a"),Iro=o("T5Tokenizer"),qro=o(" or "),jR=a("a"),Nro=o("T5TokenizerFast"),jro=o(" (T5 model)"),Dro=l(),xg=a("li"),_re=a("strong"),Gro=o("tapas"),Oro=o(" \u2014 "),DR=a("a"),Vro=o("TapasTokenizer"),Xro=o(" (TAPAS model)"),zro=l(),$g=a("li"),bre=a("strong"),Qro=o("tapex"),Wro=o(" \u2014 "),GR=a("a"),Hro=o("TapexTokenizer"),Uro=o(" (TAPEX model)"),Jro=l(),kg=a("li"),vre=a("strong"),Yro=o("transfo-xl"),Kro=o(" \u2014 "),OR=a("a"),Zro=o("TransfoXLTokenizer"),eto=o(" (Transformer-XL model)"),oto=l(),Ts=a("li"),Fre=a("strong"),rto=o("visual_bert"),tto=o(" \u2014 "),VR=a("a"),ato=o("BertTokenizer"),nto=o(" or "),XR=a("a"),sto=o("BertTokenizerFast"),lto=o(" (VisualBert model)"),ito=l(),Sg=a("li"),Tre=a("strong"),dto=o("wav2vec2"),cto=o(" \u2014 "),zR=a("a"),fto=o("Wav2Vec2CTCTokenizer"),mto=o(" (Wav2Vec2 model)"),gto=l(),Rg=a("li"),Mre=a("strong"),hto=o("wav2vec2_phoneme"),pto=o(" \u2014 "),QR=a("a"),uto=o("Wav2Vec2PhonemeCTCTokenizer"),_to=o(" (Wav2Vec2Phoneme model)"),bto=l(),Ms=a("li"),Ere=a("strong"),vto=o("xglm"),Fto=o(" \u2014 "),WR=a("a"),Tto=o("XGLMTokenizer"),Mto=o(" or "),HR=a("a"),Eto=o("XGLMTokenizerFast"),Cto=o(" (XGLM model)"),wto=l(),Bg=a("li"),Cre=a("strong"),Ato=o("xlm"),yto=o(" \u2014 "),UR=a("a"),Lto=o("XLMTokenizer"),xto=o(" (XLM model)"),$to=l(),Pg=a("li"),wre=a("strong"),kto=o("xlm-prophetnet"),Sto=o(" \u2014 "),JR=a("a"),Rto=o("XLMProphetNetTokenizer"),Bto=o(" (XLMProphetNet model)"),Pto=l(),Es=a("li"),Are=a("strong"),Ito=o("xlm-roberta"),qto=o(" \u2014 "),YR=a("a"),Nto=o("XLMRobertaTokenizer"),jto=o(" or "),KR=a("a"),Dto=o("XLMRobertaTokenizerFast"),Gto=o(" (XLM-RoBERTa model)"),Oto=l(),Cs=a("li"),yre=a("strong"),Vto=o("xlm-roberta-xl"),Xto=o(" \u2014 "),ZR=a("a"),zto=o("RobertaTokenizer"),Qto=o(" or "),eB=a("a"),Wto=o("RobertaTokenizerFast"),Hto=o(" (XLM-RoBERTa-XL model)"),Uto=l(),ws=a("li"),Lre=a("strong"),Jto=o("xlnet"),Yto=o(" \u2014 "),oB=a("a"),Kto=o("XLNetTokenizer"),Zto=o(" or "),rB=a("a"),eao=o("XLNetTokenizerFast"),oao=o(" (XLNet model)"),rao=l(),As=a("li"),xre=a("strong"),tao=o("yoso"),aao=o(" \u2014 "),tB=a("a"),nao=o("AlbertTokenizer"),sao=o(" or "),aB=a("a"),lao=o("AlbertTokenizerFast"),iao=o(" (YOSO model)"),dao=l(),F(Ig.$$.fragment),cao=l(),qg=a("div"),F(xA.$$.fragment),fao=l(),$re=a("p"),mao=o("Register a new tokenizer in this mapping."),HRe=l(),mi=a("h2"),Ng=a("a"),kre=a("span"),F($A.$$.fragment),gao=l(),Sre=a("span"),hao=o("AutoFeatureExtractor"),URe=l(),Co=a("div"),F(kA.$$.fragment),pao=l(),SA=a("p"),uao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nB=a("a"),_ao=o("AutoFeatureExtractor.from_pretrained()"),bao=o(" class method."),vao=l(),RA=a("p"),Fao=o("This class cannot be instantiated directly using "),Rre=a("code"),Tao=o("__init__()"),Mao=o(" (throws an error)."),Eao=l(),ze=a("div"),F(BA.$$.fragment),Cao=l(),Bre=a("p"),wao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Aao=l(),Ta=a("p"),yao=o("The feature extractor class to instantiate is selected based on the "),Pre=a("code"),Lao=o("model_type"),xao=o(` property of the config object
(either passed as an argument or loaded from `),Ire=a("code"),$ao=o("pretrained_model_name_or_path"),kao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qre=a("code"),Sao=o("pretrained_model_name_or_path"),Rao=o(":"),Bao=l(),ae=a("ul"),jg=a("li"),Nre=a("strong"),Pao=o("beit"),Iao=o(" \u2014 "),sB=a("a"),qao=o("BeitFeatureExtractor"),Nao=o(" (BEiT model)"),jao=l(),Dg=a("li"),jre=a("strong"),Dao=o("clip"),Gao=o(" \u2014 "),lB=a("a"),Oao=o("CLIPFeatureExtractor"),Vao=o(" (CLIP model)"),Xao=l(),Gg=a("li"),Dre=a("strong"),zao=o("convnext"),Qao=o(" \u2014 "),iB=a("a"),Wao=o("ConvNextFeatureExtractor"),Hao=o(" (ConvNext model)"),Uao=l(),Og=a("li"),Gre=a("strong"),Jao=o("data2vec-audio"),Yao=o(" \u2014 "),dB=a("a"),Kao=o("Wav2Vec2FeatureExtractor"),Zao=o(" (Data2VecAudio model)"),eno=l(),Vg=a("li"),Ore=a("strong"),ono=o("data2vec-vision"),rno=o(" \u2014 "),cB=a("a"),tno=o("BeitFeatureExtractor"),ano=o(" (Data2VecVision model)"),nno=l(),Xg=a("li"),Vre=a("strong"),sno=o("deit"),lno=o(" \u2014 "),fB=a("a"),ino=o("DeiTFeatureExtractor"),dno=o(" (DeiT model)"),cno=l(),zg=a("li"),Xre=a("strong"),fno=o("detr"),mno=o(" \u2014 "),mB=a("a"),gno=o("DetrFeatureExtractor"),hno=o(" (DETR model)"),pno=l(),Qg=a("li"),zre=a("strong"),uno=o("dpt"),_no=o(" \u2014 "),gB=a("a"),bno=o("DPTFeatureExtractor"),vno=o(" (DPT model)"),Fno=l(),Wg=a("li"),Qre=a("strong"),Tno=o("glpn"),Mno=o(" \u2014 "),hB=a("a"),Eno=o("GLPNFeatureExtractor"),Cno=o(" (GLPN model)"),wno=l(),Hg=a("li"),Wre=a("strong"),Ano=o("hubert"),yno=o(" \u2014 "),pB=a("a"),Lno=o("Wav2Vec2FeatureExtractor"),xno=o(" (Hubert model)"),$no=l(),Ug=a("li"),Hre=a("strong"),kno=o("layoutlmv2"),Sno=o(" \u2014 "),uB=a("a"),Rno=o("LayoutLMv2FeatureExtractor"),Bno=o(" (LayoutLMv2 model)"),Pno=l(),Jg=a("li"),Ure=a("strong"),Ino=o("maskformer"),qno=o(" \u2014 "),_B=a("a"),Nno=o("MaskFormerFeatureExtractor"),jno=o(" (MaskFormer model)"),Dno=l(),Yg=a("li"),Jre=a("strong"),Gno=o("perceiver"),Ono=o(" \u2014 "),bB=a("a"),Vno=o("PerceiverFeatureExtractor"),Xno=o(" (Perceiver model)"),zno=l(),Kg=a("li"),Yre=a("strong"),Qno=o("poolformer"),Wno=o(" \u2014 "),vB=a("a"),Hno=o("PoolFormerFeatureExtractor"),Uno=o(" (PoolFormer model)"),Jno=l(),Zg=a("li"),Kre=a("strong"),Yno=o("regnet"),Kno=o(" \u2014 "),FB=a("a"),Zno=o("ConvNextFeatureExtractor"),eso=o(" (RegNet model)"),oso=l(),eh=a("li"),Zre=a("strong"),rso=o("resnet"),tso=o(" \u2014 "),TB=a("a"),aso=o("ConvNextFeatureExtractor"),nso=o(" (ResNet model)"),sso=l(),oh=a("li"),ete=a("strong"),lso=o("segformer"),iso=o(" \u2014 "),MB=a("a"),dso=o("SegformerFeatureExtractor"),cso=o(" (SegFormer model)"),fso=l(),rh=a("li"),ote=a("strong"),mso=o("speech_to_text"),gso=o(" \u2014 "),EB=a("a"),hso=o("Speech2TextFeatureExtractor"),pso=o(" (Speech2Text model)"),uso=l(),th=a("li"),rte=a("strong"),_so=o("swin"),bso=o(" \u2014 "),CB=a("a"),vso=o("ViTFeatureExtractor"),Fso=o(" (Swin model)"),Tso=l(),ah=a("li"),tte=a("strong"),Mso=o("van"),Eso=o(" \u2014 "),wB=a("a"),Cso=o("ConvNextFeatureExtractor"),wso=o(" (VAN model)"),Aso=l(),nh=a("li"),ate=a("strong"),yso=o("vit"),Lso=o(" \u2014 "),AB=a("a"),xso=o("ViTFeatureExtractor"),$so=o(" (ViT model)"),kso=l(),sh=a("li"),nte=a("strong"),Sso=o("vit_mae"),Rso=o(" \u2014 "),yB=a("a"),Bso=o("ViTFeatureExtractor"),Pso=o(" (ViTMAE model)"),Iso=l(),lh=a("li"),ste=a("strong"),qso=o("wav2vec2"),Nso=o(" \u2014 "),LB=a("a"),jso=o("Wav2Vec2FeatureExtractor"),Dso=o(" (Wav2Vec2 model)"),Gso=l(),F(ih.$$.fragment),Oso=l(),F(dh.$$.fragment),Vso=l(),ch=a("div"),F(PA.$$.fragment),Xso=l(),lte=a("p"),zso=o("Register a new feature extractor for this class."),JRe=l(),gi=a("h2"),fh=a("a"),ite=a("span"),F(IA.$$.fragment),Qso=l(),dte=a("span"),Wso=o("AutoProcessor"),YRe=l(),wo=a("div"),F(qA.$$.fragment),Hso=l(),NA=a("p"),Uso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xB=a("a"),Jso=o("AutoProcessor.from_pretrained()"),Yso=o(" class method."),Kso=l(),jA=a("p"),Zso=o("This class cannot be instantiated directly using "),cte=a("code"),elo=o("__init__()"),olo=o(" (throws an error)."),rlo=l(),Qe=a("div"),F(DA.$$.fragment),tlo=l(),fte=a("p"),alo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),nlo=l(),hi=a("p"),slo=o("The processor class to instantiate is selected based on the "),mte=a("code"),llo=o("model_type"),ilo=o(` property of the config object (either
passed as an argument or loaded from `),gte=a("code"),dlo=o("pretrained_model_name_or_path"),clo=o(" if possible):"),flo=l(),be=a("ul"),mh=a("li"),hte=a("strong"),mlo=o("clip"),glo=o(" \u2014 "),$B=a("a"),hlo=o("CLIPProcessor"),plo=o(" (CLIP model)"),ulo=l(),gh=a("li"),pte=a("strong"),_lo=o("layoutlmv2"),blo=o(" \u2014 "),kB=a("a"),vlo=o("LayoutLMv2Processor"),Flo=o(" (LayoutLMv2 model)"),Tlo=l(),hh=a("li"),ute=a("strong"),Mlo=o("layoutxlm"),Elo=o(" \u2014 "),SB=a("a"),Clo=o("LayoutXLMProcessor"),wlo=o(" (LayoutXLM model)"),Alo=l(),ph=a("li"),_te=a("strong"),ylo=o("sew"),Llo=o(" \u2014 "),RB=a("a"),xlo=o("Wav2Vec2Processor"),$lo=o(" (SEW model)"),klo=l(),uh=a("li"),bte=a("strong"),Slo=o("sew-d"),Rlo=o(" \u2014 "),BB=a("a"),Blo=o("Wav2Vec2Processor"),Plo=o(" (SEW-D model)"),Ilo=l(),_h=a("li"),vte=a("strong"),qlo=o("speech_to_text"),Nlo=o(" \u2014 "),PB=a("a"),jlo=o("Speech2TextProcessor"),Dlo=o(" (Speech2Text model)"),Glo=l(),bh=a("li"),Fte=a("strong"),Olo=o("speech_to_text_2"),Vlo=o(" \u2014 "),IB=a("a"),Xlo=o("Speech2Text2Processor"),zlo=o(" (Speech2Text2 model)"),Qlo=l(),vh=a("li"),Tte=a("strong"),Wlo=o("trocr"),Hlo=o(" \u2014 "),qB=a("a"),Ulo=o("TrOCRProcessor"),Jlo=o(" (TrOCR model)"),Ylo=l(),Fh=a("li"),Mte=a("strong"),Klo=o("unispeech"),Zlo=o(" \u2014 "),NB=a("a"),eio=o("Wav2Vec2Processor"),oio=o(" (UniSpeech model)"),rio=l(),Th=a("li"),Ete=a("strong"),tio=o("unispeech-sat"),aio=o(" \u2014 "),jB=a("a"),nio=o("Wav2Vec2Processor"),sio=o(" (UniSpeechSat model)"),lio=l(),Mh=a("li"),Cte=a("strong"),iio=o("vilt"),dio=o(" \u2014 "),DB=a("a"),cio=o("ViltProcessor"),fio=o(" (ViLT model)"),mio=l(),Eh=a("li"),wte=a("strong"),gio=o("vision-text-dual-encoder"),hio=o(" \u2014 "),GB=a("a"),pio=o("VisionTextDualEncoderProcessor"),uio=o(" (VisionTextDualEncoder model)"),_io=l(),Ch=a("li"),Ate=a("strong"),bio=o("wav2vec2"),vio=o(" \u2014 "),OB=a("a"),Fio=o("Wav2Vec2Processor"),Tio=o(" (Wav2Vec2 model)"),Mio=l(),wh=a("li"),yte=a("strong"),Eio=o("wavlm"),Cio=o(" \u2014 "),VB=a("a"),wio=o("Wav2Vec2Processor"),Aio=o(" (WavLM model)"),yio=l(),F(Ah.$$.fragment),Lio=l(),F(yh.$$.fragment),xio=l(),Lh=a("div"),F(GA.$$.fragment),$io=l(),Lte=a("p"),kio=o("Register a new processor for this class."),KRe=l(),pi=a("h2"),xh=a("a"),xte=a("span"),F(OA.$$.fragment),Sio=l(),$te=a("span"),Rio=o("AutoModel"),ZRe=l(),Ao=a("div"),F(VA.$$.fragment),Bio=l(),ui=a("p"),Pio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XB=a("a"),Iio=o("from_pretrained()"),qio=o(" class method or the "),zB=a("a"),Nio=o("from_config()"),jio=o(` class
method.`),Dio=l(),XA=a("p"),Gio=o("This class cannot be instantiated directly using "),kte=a("code"),Oio=o("__init__()"),Vio=o(" (throws an error)."),Xio=l(),Kr=a("div"),F(zA.$$.fragment),zio=l(),Ste=a("p"),Qio=o("Instantiates one of the base model classes of the library from a configuration."),Wio=l(),_i=a("p"),Hio=o(`Note:
Loading a model from its configuration file does `),Rte=a("strong"),Uio=o("not"),Jio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QB=a("a"),Yio=o("from_pretrained()"),Kio=o(" to load the model weights."),Zio=l(),F($h.$$.fragment),edo=l(),We=a("div"),F(QA.$$.fragment),odo=l(),Bte=a("p"),rdo=o("Instantiate one of the base model classes of the library from a pretrained model."),tdo=l(),Ma=a("p"),ado=o("The model class to instantiate is selected based on the "),Pte=a("code"),ndo=o("model_type"),sdo=o(` property of the config object (either
passed as an argument or loaded from `),Ite=a("code"),ldo=o("pretrained_model_name_or_path"),ido=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=a("code"),ddo=o("pretrained_model_name_or_path"),cdo=o(":"),fdo=l(),x=a("ul"),kh=a("li"),Nte=a("strong"),mdo=o("albert"),gdo=o(" \u2014 "),WB=a("a"),hdo=o("AlbertModel"),pdo=o(" (ALBERT model)"),udo=l(),Sh=a("li"),jte=a("strong"),_do=o("bart"),bdo=o(" \u2014 "),HB=a("a"),vdo=o("BartModel"),Fdo=o(" (BART model)"),Tdo=l(),Rh=a("li"),Dte=a("strong"),Mdo=o("beit"),Edo=o(" \u2014 "),UB=a("a"),Cdo=o("BeitModel"),wdo=o(" (BEiT model)"),Ado=l(),Bh=a("li"),Gte=a("strong"),ydo=o("bert"),Ldo=o(" \u2014 "),JB=a("a"),xdo=o("BertModel"),$do=o(" (BERT model)"),kdo=l(),Ph=a("li"),Ote=a("strong"),Sdo=o("bert-generation"),Rdo=o(" \u2014 "),YB=a("a"),Bdo=o("BertGenerationEncoder"),Pdo=o(" (Bert Generation model)"),Ido=l(),Ih=a("li"),Vte=a("strong"),qdo=o("big_bird"),Ndo=o(" \u2014 "),KB=a("a"),jdo=o("BigBirdModel"),Ddo=o(" (BigBird model)"),Gdo=l(),qh=a("li"),Xte=a("strong"),Odo=o("bigbird_pegasus"),Vdo=o(" \u2014 "),ZB=a("a"),Xdo=o("BigBirdPegasusModel"),zdo=o(" (BigBirdPegasus model)"),Qdo=l(),Nh=a("li"),zte=a("strong"),Wdo=o("blenderbot"),Hdo=o(" \u2014 "),eP=a("a"),Udo=o("BlenderbotModel"),Jdo=o(" (Blenderbot model)"),Ydo=l(),jh=a("li"),Qte=a("strong"),Kdo=o("blenderbot-small"),Zdo=o(" \u2014 "),oP=a("a"),eco=o("BlenderbotSmallModel"),oco=o(" (BlenderbotSmall model)"),rco=l(),Dh=a("li"),Wte=a("strong"),tco=o("camembert"),aco=o(" \u2014 "),rP=a("a"),nco=o("CamembertModel"),sco=o(" (CamemBERT model)"),lco=l(),Gh=a("li"),Hte=a("strong"),ico=o("canine"),dco=o(" \u2014 "),tP=a("a"),cco=o("CanineModel"),fco=o(" (Canine model)"),mco=l(),Oh=a("li"),Ute=a("strong"),gco=o("clip"),hco=o(" \u2014 "),aP=a("a"),pco=o("CLIPModel"),uco=o(" (CLIP model)"),_co=l(),Vh=a("li"),Jte=a("strong"),bco=o("convbert"),vco=o(" \u2014 "),nP=a("a"),Fco=o("ConvBertModel"),Tco=o(" (ConvBERT model)"),Mco=l(),Xh=a("li"),Yte=a("strong"),Eco=o("convnext"),Cco=o(" \u2014 "),sP=a("a"),wco=o("ConvNextModel"),Aco=o(" (ConvNext model)"),yco=l(),zh=a("li"),Kte=a("strong"),Lco=o("ctrl"),xco=o(" \u2014 "),lP=a("a"),$co=o("CTRLModel"),kco=o(" (CTRL model)"),Sco=l(),Qh=a("li"),Zte=a("strong"),Rco=o("data2vec-audio"),Bco=o(" \u2014 "),iP=a("a"),Pco=o("Data2VecAudioModel"),Ico=o(" (Data2VecAudio model)"),qco=l(),Wh=a("li"),eae=a("strong"),Nco=o("data2vec-text"),jco=o(" \u2014 "),dP=a("a"),Dco=o("Data2VecTextModel"),Gco=o(" (Data2VecText model)"),Oco=l(),Hh=a("li"),oae=a("strong"),Vco=o("data2vec-vision"),Xco=o(" \u2014 "),cP=a("a"),zco=o("Data2VecVisionModel"),Qco=o(" (Data2VecVision model)"),Wco=l(),Uh=a("li"),rae=a("strong"),Hco=o("deberta"),Uco=o(" \u2014 "),fP=a("a"),Jco=o("DebertaModel"),Yco=o(" (DeBERTa model)"),Kco=l(),Jh=a("li"),tae=a("strong"),Zco=o("deberta-v2"),efo=o(" \u2014 "),mP=a("a"),ofo=o("DebertaV2Model"),rfo=o(" (DeBERTa-v2 model)"),tfo=l(),Yh=a("li"),aae=a("strong"),afo=o("decision_transformer"),nfo=o(" \u2014 "),gP=a("a"),sfo=o("DecisionTransformerModel"),lfo=o(" (Decision Transformer model)"),ifo=l(),Kh=a("li"),nae=a("strong"),dfo=o("deit"),cfo=o(" \u2014 "),hP=a("a"),ffo=o("DeiTModel"),mfo=o(" (DeiT model)"),gfo=l(),Zh=a("li"),sae=a("strong"),hfo=o("detr"),pfo=o(" \u2014 "),pP=a("a"),ufo=o("DetrModel"),_fo=o(" (DETR model)"),bfo=l(),ep=a("li"),lae=a("strong"),vfo=o("distilbert"),Ffo=o(" \u2014 "),uP=a("a"),Tfo=o("DistilBertModel"),Mfo=o(" (DistilBERT model)"),Efo=l(),op=a("li"),iae=a("strong"),Cfo=o("dpr"),wfo=o(" \u2014 "),_P=a("a"),Afo=o("DPRQuestionEncoder"),yfo=o(" (DPR model)"),Lfo=l(),rp=a("li"),dae=a("strong"),xfo=o("dpt"),$fo=o(" \u2014 "),bP=a("a"),kfo=o("DPTModel"),Sfo=o(" (DPT model)"),Rfo=l(),tp=a("li"),cae=a("strong"),Bfo=o("electra"),Pfo=o(" \u2014 "),vP=a("a"),Ifo=o("ElectraModel"),qfo=o(" (ELECTRA model)"),Nfo=l(),ap=a("li"),fae=a("strong"),jfo=o("flaubert"),Dfo=o(" \u2014 "),FP=a("a"),Gfo=o("FlaubertModel"),Ofo=o(" (FlauBERT model)"),Vfo=l(),np=a("li"),mae=a("strong"),Xfo=o("fnet"),zfo=o(" \u2014 "),TP=a("a"),Qfo=o("FNetModel"),Wfo=o(" (FNet model)"),Hfo=l(),sp=a("li"),gae=a("strong"),Ufo=o("fsmt"),Jfo=o(" \u2014 "),MP=a("a"),Yfo=o("FSMTModel"),Kfo=o(" (FairSeq Machine-Translation model)"),Zfo=l(),ys=a("li"),hae=a("strong"),emo=o("funnel"),omo=o(" \u2014 "),EP=a("a"),rmo=o("FunnelModel"),tmo=o(" or "),CP=a("a"),amo=o("FunnelBaseModel"),nmo=o(" (Funnel Transformer model)"),smo=l(),lp=a("li"),pae=a("strong"),lmo=o("glpn"),imo=o(" \u2014 "),wP=a("a"),dmo=o("GLPNModel"),cmo=o(" (GLPN model)"),fmo=l(),ip=a("li"),uae=a("strong"),mmo=o("gpt2"),gmo=o(" \u2014 "),AP=a("a"),hmo=o("GPT2Model"),pmo=o(" (OpenAI GPT-2 model)"),umo=l(),dp=a("li"),_ae=a("strong"),_mo=o("gpt_neo"),bmo=o(" \u2014 "),yP=a("a"),vmo=o("GPTNeoModel"),Fmo=o(" (GPT Neo model)"),Tmo=l(),cp=a("li"),bae=a("strong"),Mmo=o("gptj"),Emo=o(" \u2014 "),LP=a("a"),Cmo=o("GPTJModel"),wmo=o(" (GPT-J model)"),Amo=l(),fp=a("li"),vae=a("strong"),ymo=o("hubert"),Lmo=o(" \u2014 "),xP=a("a"),xmo=o("HubertModel"),$mo=o(" (Hubert model)"),kmo=l(),mp=a("li"),Fae=a("strong"),Smo=o("ibert"),Rmo=o(" \u2014 "),$P=a("a"),Bmo=o("IBertModel"),Pmo=o(" (I-BERT model)"),Imo=l(),gp=a("li"),Tae=a("strong"),qmo=o("imagegpt"),Nmo=o(" \u2014 "),kP=a("a"),jmo=o("ImageGPTModel"),Dmo=o(" (ImageGPT model)"),Gmo=l(),hp=a("li"),Mae=a("strong"),Omo=o("layoutlm"),Vmo=o(" \u2014 "),SP=a("a"),Xmo=o("LayoutLMModel"),zmo=o(" (LayoutLM model)"),Qmo=l(),pp=a("li"),Eae=a("strong"),Wmo=o("layoutlmv2"),Hmo=o(" \u2014 "),RP=a("a"),Umo=o("LayoutLMv2Model"),Jmo=o(" (LayoutLMv2 model)"),Ymo=l(),up=a("li"),Cae=a("strong"),Kmo=o("led"),Zmo=o(" \u2014 "),BP=a("a"),ego=o("LEDModel"),ogo=o(" (LED model)"),rgo=l(),_p=a("li"),wae=a("strong"),tgo=o("longformer"),ago=o(" \u2014 "),PP=a("a"),ngo=o("LongformerModel"),sgo=o(" (Longformer model)"),lgo=l(),bp=a("li"),Aae=a("strong"),igo=o("luke"),dgo=o(" \u2014 "),IP=a("a"),cgo=o("LukeModel"),fgo=o(" (LUKE model)"),mgo=l(),vp=a("li"),yae=a("strong"),ggo=o("lxmert"),hgo=o(" \u2014 "),qP=a("a"),pgo=o("LxmertModel"),ugo=o(" (LXMERT model)"),_go=l(),Fp=a("li"),Lae=a("strong"),bgo=o("m2m_100"),vgo=o(" \u2014 "),NP=a("a"),Fgo=o("M2M100Model"),Tgo=o(" (M2M100 model)"),Mgo=l(),Tp=a("li"),xae=a("strong"),Ego=o("marian"),Cgo=o(" \u2014 "),jP=a("a"),wgo=o("MarianModel"),Ago=o(" (Marian model)"),ygo=l(),Mp=a("li"),$ae=a("strong"),Lgo=o("maskformer"),xgo=o(" \u2014 "),DP=a("a"),$go=o("MaskFormerModel"),kgo=o(" (MaskFormer model)"),Sgo=l(),Ep=a("li"),kae=a("strong"),Rgo=o("mbart"),Bgo=o(" \u2014 "),GP=a("a"),Pgo=o("MBartModel"),Igo=o(" (mBART model)"),qgo=l(),Cp=a("li"),Sae=a("strong"),Ngo=o("mctc"),jgo=o(" \u2014 "),Rae=a("code"),Dgo=o("MCTCModel"),Ggo=o(" (MCTC model)"),Ogo=l(),wp=a("li"),Bae=a("strong"),Vgo=o("megatron-bert"),Xgo=o(" \u2014 "),OP=a("a"),zgo=o("MegatronBertModel"),Qgo=o(" (MegatronBert model)"),Wgo=l(),Ap=a("li"),Pae=a("strong"),Hgo=o("mobilebert"),Ugo=o(" \u2014 "),VP=a("a"),Jgo=o("MobileBertModel"),Ygo=o(" (MobileBERT model)"),Kgo=l(),yp=a("li"),Iae=a("strong"),Zgo=o("mpnet"),eho=o(" \u2014 "),XP=a("a"),oho=o("MPNetModel"),rho=o(" (MPNet model)"),tho=l(),Lp=a("li"),qae=a("strong"),aho=o("mt5"),nho=o(" \u2014 "),zP=a("a"),sho=o("MT5Model"),lho=o(" (mT5 model)"),iho=l(),xp=a("li"),Nae=a("strong"),dho=o("nystromformer"),cho=o(" \u2014 "),QP=a("a"),fho=o("NystromformerModel"),mho=o(" (Nystromformer model)"),gho=l(),$p=a("li"),jae=a("strong"),hho=o("openai-gpt"),pho=o(" \u2014 "),WP=a("a"),uho=o("OpenAIGPTModel"),_ho=o(" (OpenAI GPT model)"),bho=l(),kp=a("li"),Dae=a("strong"),vho=o("pegasus"),Fho=o(" \u2014 "),HP=a("a"),Tho=o("PegasusModel"),Mho=o(" (Pegasus model)"),Eho=l(),Sp=a("li"),Gae=a("strong"),Cho=o("perceiver"),who=o(" \u2014 "),UP=a("a"),Aho=o("PerceiverModel"),yho=o(" (Perceiver model)"),Lho=l(),Rp=a("li"),Oae=a("strong"),xho=o("plbart"),$ho=o(" \u2014 "),JP=a("a"),kho=o("PLBartModel"),Sho=o(" (PLBart model)"),Rho=l(),Bp=a("li"),Vae=a("strong"),Bho=o("poolformer"),Pho=o(" \u2014 "),YP=a("a"),Iho=o("PoolFormerModel"),qho=o(" (PoolFormer model)"),Nho=l(),Pp=a("li"),Xae=a("strong"),jho=o("prophetnet"),Dho=o(" \u2014 "),KP=a("a"),Gho=o("ProphetNetModel"),Oho=o(" (ProphetNet model)"),Vho=l(),Ip=a("li"),zae=a("strong"),Xho=o("qdqbert"),zho=o(" \u2014 "),ZP=a("a"),Qho=o("QDQBertModel"),Who=o(" (QDQBert model)"),Hho=l(),qp=a("li"),Qae=a("strong"),Uho=o("reformer"),Jho=o(" \u2014 "),eI=a("a"),Yho=o("ReformerModel"),Kho=o(" (Reformer model)"),Zho=l(),Np=a("li"),Wae=a("strong"),epo=o("regnet"),opo=o(" \u2014 "),oI=a("a"),rpo=o("RegNetModel"),tpo=o(" (RegNet model)"),apo=l(),jp=a("li"),Hae=a("strong"),npo=o("rembert"),spo=o(" \u2014 "),rI=a("a"),lpo=o("RemBertModel"),ipo=o(" (RemBERT model)"),dpo=l(),Dp=a("li"),Uae=a("strong"),cpo=o("resnet"),fpo=o(" \u2014 "),tI=a("a"),mpo=o("ResNetModel"),gpo=o(" (ResNet model)"),hpo=l(),Gp=a("li"),Jae=a("strong"),ppo=o("retribert"),upo=o(" \u2014 "),aI=a("a"),_po=o("RetriBertModel"),bpo=o(" (RetriBERT model)"),vpo=l(),Op=a("li"),Yae=a("strong"),Fpo=o("roberta"),Tpo=o(" \u2014 "),nI=a("a"),Mpo=o("RobertaModel"),Epo=o(" (RoBERTa model)"),Cpo=l(),Vp=a("li"),Kae=a("strong"),wpo=o("roformer"),Apo=o(" \u2014 "),sI=a("a"),ypo=o("RoFormerModel"),Lpo=o(" (RoFormer model)"),xpo=l(),Xp=a("li"),Zae=a("strong"),$po=o("segformer"),kpo=o(" \u2014 "),lI=a("a"),Spo=o("SegformerModel"),Rpo=o(" (SegFormer model)"),Bpo=l(),zp=a("li"),ene=a("strong"),Ppo=o("sew"),Ipo=o(" \u2014 "),iI=a("a"),qpo=o("SEWModel"),Npo=o(" (SEW model)"),jpo=l(),Qp=a("li"),one=a("strong"),Dpo=o("sew-d"),Gpo=o(" \u2014 "),dI=a("a"),Opo=o("SEWDModel"),Vpo=o(" (SEW-D model)"),Xpo=l(),Wp=a("li"),rne=a("strong"),zpo=o("speech_to_text"),Qpo=o(" \u2014 "),cI=a("a"),Wpo=o("Speech2TextModel"),Hpo=o(" (Speech2Text model)"),Upo=l(),Hp=a("li"),tne=a("strong"),Jpo=o("splinter"),Ypo=o(" \u2014 "),fI=a("a"),Kpo=o("SplinterModel"),Zpo=o(" (Splinter model)"),euo=l(),Up=a("li"),ane=a("strong"),ouo=o("squeezebert"),ruo=o(" \u2014 "),mI=a("a"),tuo=o("SqueezeBertModel"),auo=o(" (SqueezeBERT model)"),nuo=l(),Jp=a("li"),nne=a("strong"),suo=o("swin"),luo=o(" \u2014 "),gI=a("a"),iuo=o("SwinModel"),duo=o(" (Swin model)"),cuo=l(),Yp=a("li"),sne=a("strong"),fuo=o("t5"),muo=o(" \u2014 "),hI=a("a"),guo=o("T5Model"),huo=o(" (T5 model)"),puo=l(),Kp=a("li"),lne=a("strong"),uuo=o("tapas"),_uo=o(" \u2014 "),pI=a("a"),buo=o("TapasModel"),vuo=o(" (TAPAS model)"),Fuo=l(),Zp=a("li"),ine=a("strong"),Tuo=o("transfo-xl"),Muo=o(" \u2014 "),uI=a("a"),Euo=o("TransfoXLModel"),Cuo=o(" (Transformer-XL model)"),wuo=l(),eu=a("li"),dne=a("strong"),Auo=o("unispeech"),yuo=o(" \u2014 "),_I=a("a"),Luo=o("UniSpeechModel"),xuo=o(" (UniSpeech model)"),$uo=l(),ou=a("li"),cne=a("strong"),kuo=o("unispeech-sat"),Suo=o(" \u2014 "),bI=a("a"),Ruo=o("UniSpeechSatModel"),Buo=o(" (UniSpeechSat model)"),Puo=l(),ru=a("li"),fne=a("strong"),Iuo=o("van"),quo=o(" \u2014 "),vI=a("a"),Nuo=o("VanModel"),juo=o(" (VAN model)"),Duo=l(),tu=a("li"),mne=a("strong"),Guo=o("vilt"),Ouo=o(" \u2014 "),FI=a("a"),Vuo=o("ViltModel"),Xuo=o(" (ViLT model)"),zuo=l(),au=a("li"),gne=a("strong"),Quo=o("vision-text-dual-encoder"),Wuo=o(" \u2014 "),TI=a("a"),Huo=o("VisionTextDualEncoderModel"),Uuo=o(" (VisionTextDualEncoder model)"),Juo=l(),nu=a("li"),hne=a("strong"),Yuo=o("visual_bert"),Kuo=o(" \u2014 "),MI=a("a"),Zuo=o("VisualBertModel"),e_o=o(" (VisualBert model)"),o_o=l(),su=a("li"),pne=a("strong"),r_o=o("vit"),t_o=o(" \u2014 "),EI=a("a"),a_o=o("ViTModel"),n_o=o(" (ViT model)"),s_o=l(),lu=a("li"),une=a("strong"),l_o=o("vit_mae"),i_o=o(" \u2014 "),CI=a("a"),d_o=o("ViTMAEModel"),c_o=o(" (ViTMAE model)"),f_o=l(),iu=a("li"),_ne=a("strong"),m_o=o("wav2vec2"),g_o=o(" \u2014 "),wI=a("a"),h_o=o("Wav2Vec2Model"),p_o=o(" (Wav2Vec2 model)"),u_o=l(),du=a("li"),bne=a("strong"),__o=o("wavlm"),b_o=o(" \u2014 "),AI=a("a"),v_o=o("WavLMModel"),F_o=o(" (WavLM model)"),T_o=l(),cu=a("li"),vne=a("strong"),M_o=o("xglm"),E_o=o(" \u2014 "),yI=a("a"),C_o=o("XGLMModel"),w_o=o(" (XGLM model)"),A_o=l(),fu=a("li"),Fne=a("strong"),y_o=o("xlm"),L_o=o(" \u2014 "),LI=a("a"),x_o=o("XLMModel"),$_o=o(" (XLM model)"),k_o=l(),mu=a("li"),Tne=a("strong"),S_o=o("xlm-prophetnet"),R_o=o(" \u2014 "),xI=a("a"),B_o=o("XLMProphetNetModel"),P_o=o(" (XLMProphetNet model)"),I_o=l(),gu=a("li"),Mne=a("strong"),q_o=o("xlm-roberta"),N_o=o(" \u2014 "),$I=a("a"),j_o=o("XLMRobertaModel"),D_o=o(" (XLM-RoBERTa model)"),G_o=l(),hu=a("li"),Ene=a("strong"),O_o=o("xlm-roberta-xl"),V_o=o(" \u2014 "),kI=a("a"),X_o=o("XLMRobertaXLModel"),z_o=o(" (XLM-RoBERTa-XL model)"),Q_o=l(),pu=a("li"),Cne=a("strong"),W_o=o("xlnet"),H_o=o(" \u2014 "),SI=a("a"),U_o=o("XLNetModel"),J_o=o(" (XLNet model)"),Y_o=l(),uu=a("li"),wne=a("strong"),K_o=o("yoso"),Z_o=o(" \u2014 "),RI=a("a"),e2o=o("YosoModel"),o2o=o(" (YOSO model)"),r2o=l(),_u=a("p"),t2o=o("The model is set in evaluation mode by default using "),Ane=a("code"),a2o=o("model.eval()"),n2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=a("code"),s2o=o("model.train()"),l2o=l(),F(bu.$$.fragment),eBe=l(),bi=a("h2"),vu=a("a"),Lne=a("span"),F(WA.$$.fragment),i2o=l(),xne=a("span"),d2o=o("AutoModelForPreTraining"),oBe=l(),yo=a("div"),F(HA.$$.fragment),c2o=l(),vi=a("p"),f2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BI=a("a"),m2o=o("from_pretrained()"),g2o=o(" class method or the "),PI=a("a"),h2o=o("from_config()"),p2o=o(` class
method.`),u2o=l(),UA=a("p"),_2o=o("This class cannot be instantiated directly using "),$ne=a("code"),b2o=o("__init__()"),v2o=o(" (throws an error)."),F2o=l(),Zr=a("div"),F(JA.$$.fragment),T2o=l(),kne=a("p"),M2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),E2o=l(),Fi=a("p"),C2o=o(`Note:
Loading a model from its configuration file does `),Sne=a("strong"),w2o=o("not"),A2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),y2o=o("from_pretrained()"),L2o=o(" to load the model weights."),x2o=l(),F(Fu.$$.fragment),$2o=l(),He=a("div"),F(YA.$$.fragment),k2o=l(),Rne=a("p"),S2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R2o=l(),Ea=a("p"),B2o=o("The model class to instantiate is selected based on the "),Bne=a("code"),P2o=o("model_type"),I2o=o(` property of the config object (either
passed as an argument or loaded from `),Pne=a("code"),q2o=o("pretrained_model_name_or_path"),N2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ine=a("code"),j2o=o("pretrained_model_name_or_path"),D2o=o(":"),G2o=l(),G=a("ul"),Tu=a("li"),qne=a("strong"),O2o=o("albert"),V2o=o(" \u2014 "),qI=a("a"),X2o=o("AlbertForPreTraining"),z2o=o(" (ALBERT model)"),Q2o=l(),Mu=a("li"),Nne=a("strong"),W2o=o("bart"),H2o=o(" \u2014 "),NI=a("a"),U2o=o("BartForConditionalGeneration"),J2o=o(" (BART model)"),Y2o=l(),Eu=a("li"),jne=a("strong"),K2o=o("bert"),Z2o=o(" \u2014 "),jI=a("a"),e1o=o("BertForPreTraining"),o1o=o(" (BERT model)"),r1o=l(),Cu=a("li"),Dne=a("strong"),t1o=o("big_bird"),a1o=o(" \u2014 "),DI=a("a"),n1o=o("BigBirdForPreTraining"),s1o=o(" (BigBird model)"),l1o=l(),wu=a("li"),Gne=a("strong"),i1o=o("camembert"),d1o=o(" \u2014 "),GI=a("a"),c1o=o("CamembertForMaskedLM"),f1o=o(" (CamemBERT model)"),m1o=l(),Au=a("li"),One=a("strong"),g1o=o("ctrl"),h1o=o(" \u2014 "),OI=a("a"),p1o=o("CTRLLMHeadModel"),u1o=o(" (CTRL model)"),_1o=l(),yu=a("li"),Vne=a("strong"),b1o=o("data2vec-text"),v1o=o(" \u2014 "),VI=a("a"),F1o=o("Data2VecTextForMaskedLM"),T1o=o(" (Data2VecText model)"),M1o=l(),Lu=a("li"),Xne=a("strong"),E1o=o("deberta"),C1o=o(" \u2014 "),XI=a("a"),w1o=o("DebertaForMaskedLM"),A1o=o(" (DeBERTa model)"),y1o=l(),xu=a("li"),zne=a("strong"),L1o=o("deberta-v2"),x1o=o(" \u2014 "),zI=a("a"),$1o=o("DebertaV2ForMaskedLM"),k1o=o(" (DeBERTa-v2 model)"),S1o=l(),$u=a("li"),Qne=a("strong"),R1o=o("distilbert"),B1o=o(" \u2014 "),QI=a("a"),P1o=o("DistilBertForMaskedLM"),I1o=o(" (DistilBERT model)"),q1o=l(),ku=a("li"),Wne=a("strong"),N1o=o("electra"),j1o=o(" \u2014 "),WI=a("a"),D1o=o("ElectraForPreTraining"),G1o=o(" (ELECTRA model)"),O1o=l(),Su=a("li"),Hne=a("strong"),V1o=o("flaubert"),X1o=o(" \u2014 "),HI=a("a"),z1o=o("FlaubertWithLMHeadModel"),Q1o=o(" (FlauBERT model)"),W1o=l(),Ru=a("li"),Une=a("strong"),H1o=o("fnet"),U1o=o(" \u2014 "),UI=a("a"),J1o=o("FNetForPreTraining"),Y1o=o(" (FNet model)"),K1o=l(),Bu=a("li"),Jne=a("strong"),Z1o=o("fsmt"),ebo=o(" \u2014 "),JI=a("a"),obo=o("FSMTForConditionalGeneration"),rbo=o(" (FairSeq Machine-Translation model)"),tbo=l(),Pu=a("li"),Yne=a("strong"),abo=o("funnel"),nbo=o(" \u2014 "),YI=a("a"),sbo=o("FunnelForPreTraining"),lbo=o(" (Funnel Transformer model)"),ibo=l(),Iu=a("li"),Kne=a("strong"),dbo=o("gpt2"),cbo=o(" \u2014 "),KI=a("a"),fbo=o("GPT2LMHeadModel"),mbo=o(" (OpenAI GPT-2 model)"),gbo=l(),qu=a("li"),Zne=a("strong"),hbo=o("ibert"),pbo=o(" \u2014 "),ZI=a("a"),ubo=o("IBertForMaskedLM"),_bo=o(" (I-BERT model)"),bbo=l(),Nu=a("li"),ese=a("strong"),vbo=o("layoutlm"),Fbo=o(" \u2014 "),eq=a("a"),Tbo=o("LayoutLMForMaskedLM"),Mbo=o(" (LayoutLM model)"),Ebo=l(),ju=a("li"),ose=a("strong"),Cbo=o("longformer"),wbo=o(" \u2014 "),oq=a("a"),Abo=o("LongformerForMaskedLM"),ybo=o(" (Longformer model)"),Lbo=l(),Du=a("li"),rse=a("strong"),xbo=o("lxmert"),$bo=o(" \u2014 "),rq=a("a"),kbo=o("LxmertForPreTraining"),Sbo=o(" (LXMERT model)"),Rbo=l(),Gu=a("li"),tse=a("strong"),Bbo=o("megatron-bert"),Pbo=o(" \u2014 "),tq=a("a"),Ibo=o("MegatronBertForPreTraining"),qbo=o(" (MegatronBert model)"),Nbo=l(),Ou=a("li"),ase=a("strong"),jbo=o("mobilebert"),Dbo=o(" \u2014 "),aq=a("a"),Gbo=o("MobileBertForPreTraining"),Obo=o(" (MobileBERT model)"),Vbo=l(),Vu=a("li"),nse=a("strong"),Xbo=o("mpnet"),zbo=o(" \u2014 "),nq=a("a"),Qbo=o("MPNetForMaskedLM"),Wbo=o(" (MPNet model)"),Hbo=l(),Xu=a("li"),sse=a("strong"),Ubo=o("openai-gpt"),Jbo=o(" \u2014 "),sq=a("a"),Ybo=o("OpenAIGPTLMHeadModel"),Kbo=o(" (OpenAI GPT model)"),Zbo=l(),zu=a("li"),lse=a("strong"),e4o=o("retribert"),o4o=o(" \u2014 "),lq=a("a"),r4o=o("RetriBertModel"),t4o=o(" (RetriBERT model)"),a4o=l(),Qu=a("li"),ise=a("strong"),n4o=o("roberta"),s4o=o(" \u2014 "),iq=a("a"),l4o=o("RobertaForMaskedLM"),i4o=o(" (RoBERTa model)"),d4o=l(),Wu=a("li"),dse=a("strong"),c4o=o("squeezebert"),f4o=o(" \u2014 "),dq=a("a"),m4o=o("SqueezeBertForMaskedLM"),g4o=o(" (SqueezeBERT model)"),h4o=l(),Hu=a("li"),cse=a("strong"),p4o=o("t5"),u4o=o(" \u2014 "),cq=a("a"),_4o=o("T5ForConditionalGeneration"),b4o=o(" (T5 model)"),v4o=l(),Uu=a("li"),fse=a("strong"),F4o=o("tapas"),T4o=o(" \u2014 "),fq=a("a"),M4o=o("TapasForMaskedLM"),E4o=o(" (TAPAS model)"),C4o=l(),Ju=a("li"),mse=a("strong"),w4o=o("transfo-xl"),A4o=o(" \u2014 "),mq=a("a"),y4o=o("TransfoXLLMHeadModel"),L4o=o(" (Transformer-XL model)"),x4o=l(),Yu=a("li"),gse=a("strong"),$4o=o("unispeech"),k4o=o(" \u2014 "),gq=a("a"),S4o=o("UniSpeechForPreTraining"),R4o=o(" (UniSpeech model)"),B4o=l(),Ku=a("li"),hse=a("strong"),P4o=o("unispeech-sat"),I4o=o(" \u2014 "),hq=a("a"),q4o=o("UniSpeechSatForPreTraining"),N4o=o(" (UniSpeechSat model)"),j4o=l(),Zu=a("li"),pse=a("strong"),D4o=o("visual_bert"),G4o=o(" \u2014 "),pq=a("a"),O4o=o("VisualBertForPreTraining"),V4o=o(" (VisualBert model)"),X4o=l(),e_=a("li"),use=a("strong"),z4o=o("vit_mae"),Q4o=o(" \u2014 "),uq=a("a"),W4o=o("ViTMAEForPreTraining"),H4o=o(" (ViTMAE model)"),U4o=l(),o_=a("li"),_se=a("strong"),J4o=o("wav2vec2"),Y4o=o(" \u2014 "),_q=a("a"),K4o=o("Wav2Vec2ForPreTraining"),Z4o=o(" (Wav2Vec2 model)"),evo=l(),r_=a("li"),bse=a("strong"),ovo=o("xlm"),rvo=o(" \u2014 "),bq=a("a"),tvo=o("XLMWithLMHeadModel"),avo=o(" (XLM model)"),nvo=l(),t_=a("li"),vse=a("strong"),svo=o("xlm-roberta"),lvo=o(" \u2014 "),vq=a("a"),ivo=o("XLMRobertaForMaskedLM"),dvo=o(" (XLM-RoBERTa model)"),cvo=l(),a_=a("li"),Fse=a("strong"),fvo=o("xlm-roberta-xl"),mvo=o(" \u2014 "),Fq=a("a"),gvo=o("XLMRobertaXLForMaskedLM"),hvo=o(" (XLM-RoBERTa-XL model)"),pvo=l(),n_=a("li"),Tse=a("strong"),uvo=o("xlnet"),_vo=o(" \u2014 "),Tq=a("a"),bvo=o("XLNetLMHeadModel"),vvo=o(" (XLNet model)"),Fvo=l(),s_=a("p"),Tvo=o("The model is set in evaluation mode by default using "),Mse=a("code"),Mvo=o("model.eval()"),Evo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),Cvo=o("model.train()"),wvo=l(),F(l_.$$.fragment),rBe=l(),Ti=a("h2"),i_=a("a"),Cse=a("span"),F(KA.$$.fragment),Avo=l(),wse=a("span"),yvo=o("AutoModelForCausalLM"),tBe=l(),Lo=a("div"),F(ZA.$$.fragment),Lvo=l(),Mi=a("p"),xvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mq=a("a"),$vo=o("from_pretrained()"),kvo=o(" class method or the "),Eq=a("a"),Svo=o("from_config()"),Rvo=o(` class
method.`),Bvo=l(),ey=a("p"),Pvo=o("This class cannot be instantiated directly using "),Ase=a("code"),Ivo=o("__init__()"),qvo=o(" (throws an error)."),Nvo=l(),et=a("div"),F(oy.$$.fragment),jvo=l(),yse=a("p"),Dvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Gvo=l(),Ei=a("p"),Ovo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),Vvo=o("not"),Xvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=a("a"),zvo=o("from_pretrained()"),Qvo=o(" to load the model weights."),Wvo=l(),F(d_.$$.fragment),Hvo=l(),Ue=a("div"),F(ry.$$.fragment),Uvo=l(),xse=a("p"),Jvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yvo=l(),Ca=a("p"),Kvo=o("The model class to instantiate is selected based on the "),$se=a("code"),Zvo=o("model_type"),eFo=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),oFo=o("pretrained_model_name_or_path"),rFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),tFo=o("pretrained_model_name_or_path"),aFo=o(":"),nFo=l(),z=a("ul"),c_=a("li"),Rse=a("strong"),sFo=o("bart"),lFo=o(" \u2014 "),wq=a("a"),iFo=o("BartForCausalLM"),dFo=o(" (BART model)"),cFo=l(),f_=a("li"),Bse=a("strong"),fFo=o("bert"),mFo=o(" \u2014 "),Aq=a("a"),gFo=o("BertLMHeadModel"),hFo=o(" (BERT model)"),pFo=l(),m_=a("li"),Pse=a("strong"),uFo=o("bert-generation"),_Fo=o(" \u2014 "),yq=a("a"),bFo=o("BertGenerationDecoder"),vFo=o(" (Bert Generation model)"),FFo=l(),g_=a("li"),Ise=a("strong"),TFo=o("big_bird"),MFo=o(" \u2014 "),Lq=a("a"),EFo=o("BigBirdForCausalLM"),CFo=o(" (BigBird model)"),wFo=l(),h_=a("li"),qse=a("strong"),AFo=o("bigbird_pegasus"),yFo=o(" \u2014 "),xq=a("a"),LFo=o("BigBirdPegasusForCausalLM"),xFo=o(" (BigBirdPegasus model)"),$Fo=l(),p_=a("li"),Nse=a("strong"),kFo=o("blenderbot"),SFo=o(" \u2014 "),$q=a("a"),RFo=o("BlenderbotForCausalLM"),BFo=o(" (Blenderbot model)"),PFo=l(),u_=a("li"),jse=a("strong"),IFo=o("blenderbot-small"),qFo=o(" \u2014 "),kq=a("a"),NFo=o("BlenderbotSmallForCausalLM"),jFo=o(" (BlenderbotSmall model)"),DFo=l(),__=a("li"),Dse=a("strong"),GFo=o("camembert"),OFo=o(" \u2014 "),Sq=a("a"),VFo=o("CamembertForCausalLM"),XFo=o(" (CamemBERT model)"),zFo=l(),b_=a("li"),Gse=a("strong"),QFo=o("ctrl"),WFo=o(" \u2014 "),Rq=a("a"),HFo=o("CTRLLMHeadModel"),UFo=o(" (CTRL model)"),JFo=l(),v_=a("li"),Ose=a("strong"),YFo=o("data2vec-text"),KFo=o(" \u2014 "),Bq=a("a"),ZFo=o("Data2VecTextForCausalLM"),e0o=o(" (Data2VecText model)"),o0o=l(),F_=a("li"),Vse=a("strong"),r0o=o("electra"),t0o=o(" \u2014 "),Pq=a("a"),a0o=o("ElectraForCausalLM"),n0o=o(" (ELECTRA model)"),s0o=l(),T_=a("li"),Xse=a("strong"),l0o=o("gpt2"),i0o=o(" \u2014 "),Iq=a("a"),d0o=o("GPT2LMHeadModel"),c0o=o(" (OpenAI GPT-2 model)"),f0o=l(),M_=a("li"),zse=a("strong"),m0o=o("gpt_neo"),g0o=o(" \u2014 "),qq=a("a"),h0o=o("GPTNeoForCausalLM"),p0o=o(" (GPT Neo model)"),u0o=l(),E_=a("li"),Qse=a("strong"),_0o=o("gptj"),b0o=o(" \u2014 "),Nq=a("a"),v0o=o("GPTJForCausalLM"),F0o=o(" (GPT-J model)"),T0o=l(),C_=a("li"),Wse=a("strong"),M0o=o("marian"),E0o=o(" \u2014 "),jq=a("a"),C0o=o("MarianForCausalLM"),w0o=o(" (Marian model)"),A0o=l(),w_=a("li"),Hse=a("strong"),y0o=o("mbart"),L0o=o(" \u2014 "),Dq=a("a"),x0o=o("MBartForCausalLM"),$0o=o(" (mBART model)"),k0o=l(),A_=a("li"),Use=a("strong"),S0o=o("megatron-bert"),R0o=o(" \u2014 "),Gq=a("a"),B0o=o("MegatronBertForCausalLM"),P0o=o(" (MegatronBert model)"),I0o=l(),y_=a("li"),Jse=a("strong"),q0o=o("openai-gpt"),N0o=o(" \u2014 "),Oq=a("a"),j0o=o("OpenAIGPTLMHeadModel"),D0o=o(" (OpenAI GPT model)"),G0o=l(),L_=a("li"),Yse=a("strong"),O0o=o("pegasus"),V0o=o(" \u2014 "),Vq=a("a"),X0o=o("PegasusForCausalLM"),z0o=o(" (Pegasus model)"),Q0o=l(),x_=a("li"),Kse=a("strong"),W0o=o("plbart"),H0o=o(" \u2014 "),Xq=a("a"),U0o=o("PLBartForCausalLM"),J0o=o(" (PLBart model)"),Y0o=l(),$_=a("li"),Zse=a("strong"),K0o=o("prophetnet"),Z0o=o(" \u2014 "),zq=a("a"),e6o=o("ProphetNetForCausalLM"),o6o=o(" (ProphetNet model)"),r6o=l(),k_=a("li"),ele=a("strong"),t6o=o("qdqbert"),a6o=o(" \u2014 "),Qq=a("a"),n6o=o("QDQBertLMHeadModel"),s6o=o(" (QDQBert model)"),l6o=l(),S_=a("li"),ole=a("strong"),i6o=o("reformer"),d6o=o(" \u2014 "),Wq=a("a"),c6o=o("ReformerModelWithLMHead"),f6o=o(" (Reformer model)"),m6o=l(),R_=a("li"),rle=a("strong"),g6o=o("rembert"),h6o=o(" \u2014 "),Hq=a("a"),p6o=o("RemBertForCausalLM"),u6o=o(" (RemBERT model)"),_6o=l(),B_=a("li"),tle=a("strong"),b6o=o("roberta"),v6o=o(" \u2014 "),Uq=a("a"),F6o=o("RobertaForCausalLM"),T6o=o(" (RoBERTa model)"),M6o=l(),P_=a("li"),ale=a("strong"),E6o=o("roformer"),C6o=o(" \u2014 "),Jq=a("a"),w6o=o("RoFormerForCausalLM"),A6o=o(" (RoFormer model)"),y6o=l(),I_=a("li"),nle=a("strong"),L6o=o("speech_to_text_2"),x6o=o(" \u2014 "),Yq=a("a"),$6o=o("Speech2Text2ForCausalLM"),k6o=o(" (Speech2Text2 model)"),S6o=l(),q_=a("li"),sle=a("strong"),R6o=o("transfo-xl"),B6o=o(" \u2014 "),Kq=a("a"),P6o=o("TransfoXLLMHeadModel"),I6o=o(" (Transformer-XL model)"),q6o=l(),N_=a("li"),lle=a("strong"),N6o=o("trocr"),j6o=o(" \u2014 "),Zq=a("a"),D6o=o("TrOCRForCausalLM"),G6o=o(" (TrOCR model)"),O6o=l(),j_=a("li"),ile=a("strong"),V6o=o("xglm"),X6o=o(" \u2014 "),eN=a("a"),z6o=o("XGLMForCausalLM"),Q6o=o(" (XGLM model)"),W6o=l(),D_=a("li"),dle=a("strong"),H6o=o("xlm"),U6o=o(" \u2014 "),oN=a("a"),J6o=o("XLMWithLMHeadModel"),Y6o=o(" (XLM model)"),K6o=l(),G_=a("li"),cle=a("strong"),Z6o=o("xlm-prophetnet"),eTo=o(" \u2014 "),rN=a("a"),oTo=o("XLMProphetNetForCausalLM"),rTo=o(" (XLMProphetNet model)"),tTo=l(),O_=a("li"),fle=a("strong"),aTo=o("xlm-roberta"),nTo=o(" \u2014 "),tN=a("a"),sTo=o("XLMRobertaForCausalLM"),lTo=o(" (XLM-RoBERTa model)"),iTo=l(),V_=a("li"),mle=a("strong"),dTo=o("xlm-roberta-xl"),cTo=o(" \u2014 "),aN=a("a"),fTo=o("XLMRobertaXLForCausalLM"),mTo=o(" (XLM-RoBERTa-XL model)"),gTo=l(),X_=a("li"),gle=a("strong"),hTo=o("xlnet"),pTo=o(" \u2014 "),nN=a("a"),uTo=o("XLNetLMHeadModel"),_To=o(" (XLNet model)"),bTo=l(),z_=a("p"),vTo=o("The model is set in evaluation mode by default using "),hle=a("code"),FTo=o("model.eval()"),TTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=a("code"),MTo=o("model.train()"),ETo=l(),F(Q_.$$.fragment),aBe=l(),Ci=a("h2"),W_=a("a"),ule=a("span"),F(ty.$$.fragment),CTo=l(),_le=a("span"),wTo=o("AutoModelForMaskedLM"),nBe=l(),xo=a("div"),F(ay.$$.fragment),ATo=l(),wi=a("p"),yTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sN=a("a"),LTo=o("from_pretrained()"),xTo=o(" class method or the "),lN=a("a"),$To=o("from_config()"),kTo=o(` class
method.`),STo=l(),ny=a("p"),RTo=o("This class cannot be instantiated directly using "),ble=a("code"),BTo=o("__init__()"),PTo=o(" (throws an error)."),ITo=l(),ot=a("div"),F(sy.$$.fragment),qTo=l(),vle=a("p"),NTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jTo=l(),Ai=a("p"),DTo=o(`Note:
Loading a model from its configuration file does `),Fle=a("strong"),GTo=o("not"),OTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=a("a"),VTo=o("from_pretrained()"),XTo=o(" to load the model weights."),zTo=l(),F(H_.$$.fragment),QTo=l(),Je=a("div"),F(ly.$$.fragment),WTo=l(),Tle=a("p"),HTo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UTo=l(),wa=a("p"),JTo=o("The model class to instantiate is selected based on the "),Mle=a("code"),YTo=o("model_type"),KTo=o(` property of the config object (either
passed as an argument or loaded from `),Ele=a("code"),ZTo=o("pretrained_model_name_or_path"),eMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=a("code"),oMo=o("pretrained_model_name_or_path"),rMo=o(":"),tMo=l(),Q=a("ul"),U_=a("li"),wle=a("strong"),aMo=o("albert"),nMo=o(" \u2014 "),dN=a("a"),sMo=o("AlbertForMaskedLM"),lMo=o(" (ALBERT model)"),iMo=l(),J_=a("li"),Ale=a("strong"),dMo=o("bart"),cMo=o(" \u2014 "),cN=a("a"),fMo=o("BartForConditionalGeneration"),mMo=o(" (BART model)"),gMo=l(),Y_=a("li"),yle=a("strong"),hMo=o("bert"),pMo=o(" \u2014 "),fN=a("a"),uMo=o("BertForMaskedLM"),_Mo=o(" (BERT model)"),bMo=l(),K_=a("li"),Lle=a("strong"),vMo=o("big_bird"),FMo=o(" \u2014 "),mN=a("a"),TMo=o("BigBirdForMaskedLM"),MMo=o(" (BigBird model)"),EMo=l(),Z_=a("li"),xle=a("strong"),CMo=o("camembert"),wMo=o(" \u2014 "),gN=a("a"),AMo=o("CamembertForMaskedLM"),yMo=o(" (CamemBERT model)"),LMo=l(),e2=a("li"),$le=a("strong"),xMo=o("convbert"),$Mo=o(" \u2014 "),hN=a("a"),kMo=o("ConvBertForMaskedLM"),SMo=o(" (ConvBERT model)"),RMo=l(),o2=a("li"),kle=a("strong"),BMo=o("data2vec-text"),PMo=o(" \u2014 "),pN=a("a"),IMo=o("Data2VecTextForMaskedLM"),qMo=o(" (Data2VecText model)"),NMo=l(),r2=a("li"),Sle=a("strong"),jMo=o("deberta"),DMo=o(" \u2014 "),uN=a("a"),GMo=o("DebertaForMaskedLM"),OMo=o(" (DeBERTa model)"),VMo=l(),t2=a("li"),Rle=a("strong"),XMo=o("deberta-v2"),zMo=o(" \u2014 "),_N=a("a"),QMo=o("DebertaV2ForMaskedLM"),WMo=o(" (DeBERTa-v2 model)"),HMo=l(),a2=a("li"),Ble=a("strong"),UMo=o("distilbert"),JMo=o(" \u2014 "),bN=a("a"),YMo=o("DistilBertForMaskedLM"),KMo=o(" (DistilBERT model)"),ZMo=l(),n2=a("li"),Ple=a("strong"),eEo=o("electra"),oEo=o(" \u2014 "),vN=a("a"),rEo=o("ElectraForMaskedLM"),tEo=o(" (ELECTRA model)"),aEo=l(),s2=a("li"),Ile=a("strong"),nEo=o("flaubert"),sEo=o(" \u2014 "),FN=a("a"),lEo=o("FlaubertWithLMHeadModel"),iEo=o(" (FlauBERT model)"),dEo=l(),l2=a("li"),qle=a("strong"),cEo=o("fnet"),fEo=o(" \u2014 "),TN=a("a"),mEo=o("FNetForMaskedLM"),gEo=o(" (FNet model)"),hEo=l(),i2=a("li"),Nle=a("strong"),pEo=o("funnel"),uEo=o(" \u2014 "),MN=a("a"),_Eo=o("FunnelForMaskedLM"),bEo=o(" (Funnel Transformer model)"),vEo=l(),d2=a("li"),jle=a("strong"),FEo=o("ibert"),TEo=o(" \u2014 "),EN=a("a"),MEo=o("IBertForMaskedLM"),EEo=o(" (I-BERT model)"),CEo=l(),c2=a("li"),Dle=a("strong"),wEo=o("layoutlm"),AEo=o(" \u2014 "),CN=a("a"),yEo=o("LayoutLMForMaskedLM"),LEo=o(" (LayoutLM model)"),xEo=l(),f2=a("li"),Gle=a("strong"),$Eo=o("longformer"),kEo=o(" \u2014 "),wN=a("a"),SEo=o("LongformerForMaskedLM"),REo=o(" (Longformer model)"),BEo=l(),m2=a("li"),Ole=a("strong"),PEo=o("mbart"),IEo=o(" \u2014 "),AN=a("a"),qEo=o("MBartForConditionalGeneration"),NEo=o(" (mBART model)"),jEo=l(),g2=a("li"),Vle=a("strong"),DEo=o("megatron-bert"),GEo=o(" \u2014 "),yN=a("a"),OEo=o("MegatronBertForMaskedLM"),VEo=o(" (MegatronBert model)"),XEo=l(),h2=a("li"),Xle=a("strong"),zEo=o("mobilebert"),QEo=o(" \u2014 "),LN=a("a"),WEo=o("MobileBertForMaskedLM"),HEo=o(" (MobileBERT model)"),UEo=l(),p2=a("li"),zle=a("strong"),JEo=o("mpnet"),YEo=o(" \u2014 "),xN=a("a"),KEo=o("MPNetForMaskedLM"),ZEo=o(" (MPNet model)"),e5o=l(),u2=a("li"),Qle=a("strong"),o5o=o("nystromformer"),r5o=o(" \u2014 "),$N=a("a"),t5o=o("NystromformerForMaskedLM"),a5o=o(" (Nystromformer model)"),n5o=l(),_2=a("li"),Wle=a("strong"),s5o=o("perceiver"),l5o=o(" \u2014 "),kN=a("a"),i5o=o("PerceiverForMaskedLM"),d5o=o(" (Perceiver model)"),c5o=l(),b2=a("li"),Hle=a("strong"),f5o=o("qdqbert"),m5o=o(" \u2014 "),SN=a("a"),g5o=o("QDQBertForMaskedLM"),h5o=o(" (QDQBert model)"),p5o=l(),v2=a("li"),Ule=a("strong"),u5o=o("reformer"),_5o=o(" \u2014 "),RN=a("a"),b5o=o("ReformerForMaskedLM"),v5o=o(" (Reformer model)"),F5o=l(),F2=a("li"),Jle=a("strong"),T5o=o("rembert"),M5o=o(" \u2014 "),BN=a("a"),E5o=o("RemBertForMaskedLM"),C5o=o(" (RemBERT model)"),w5o=l(),T2=a("li"),Yle=a("strong"),A5o=o("roberta"),y5o=o(" \u2014 "),PN=a("a"),L5o=o("RobertaForMaskedLM"),x5o=o(" (RoBERTa model)"),$5o=l(),M2=a("li"),Kle=a("strong"),k5o=o("roformer"),S5o=o(" \u2014 "),IN=a("a"),R5o=o("RoFormerForMaskedLM"),B5o=o(" (RoFormer model)"),P5o=l(),E2=a("li"),Zle=a("strong"),I5o=o("squeezebert"),q5o=o(" \u2014 "),qN=a("a"),N5o=o("SqueezeBertForMaskedLM"),j5o=o(" (SqueezeBERT model)"),D5o=l(),C2=a("li"),eie=a("strong"),G5o=o("tapas"),O5o=o(" \u2014 "),NN=a("a"),V5o=o("TapasForMaskedLM"),X5o=o(" (TAPAS model)"),z5o=l(),w2=a("li"),oie=a("strong"),Q5o=o("wav2vec2"),W5o=o(" \u2014 "),rie=a("code"),H5o=o("Wav2Vec2ForMaskedLM"),U5o=o(" (Wav2Vec2 model)"),J5o=l(),A2=a("li"),tie=a("strong"),Y5o=o("xlm"),K5o=o(" \u2014 "),jN=a("a"),Z5o=o("XLMWithLMHeadModel"),eCo=o(" (XLM model)"),oCo=l(),y2=a("li"),aie=a("strong"),rCo=o("xlm-roberta"),tCo=o(" \u2014 "),DN=a("a"),aCo=o("XLMRobertaForMaskedLM"),nCo=o(" (XLM-RoBERTa model)"),sCo=l(),L2=a("li"),nie=a("strong"),lCo=o("xlm-roberta-xl"),iCo=o(" \u2014 "),GN=a("a"),dCo=o("XLMRobertaXLForMaskedLM"),cCo=o(" (XLM-RoBERTa-XL model)"),fCo=l(),x2=a("li"),sie=a("strong"),mCo=o("yoso"),gCo=o(" \u2014 "),ON=a("a"),hCo=o("YosoForMaskedLM"),pCo=o(" (YOSO model)"),uCo=l(),$2=a("p"),_Co=o("The model is set in evaluation mode by default using "),lie=a("code"),bCo=o("model.eval()"),vCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=a("code"),FCo=o("model.train()"),TCo=l(),F(k2.$$.fragment),sBe=l(),yi=a("h2"),S2=a("a"),die=a("span"),F(iy.$$.fragment),MCo=l(),cie=a("span"),ECo=o("AutoModelForSeq2SeqLM"),lBe=l(),$o=a("div"),F(dy.$$.fragment),CCo=l(),Li=a("p"),wCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VN=a("a"),ACo=o("from_pretrained()"),yCo=o(" class method or the "),XN=a("a"),LCo=o("from_config()"),xCo=o(` class
method.`),$Co=l(),cy=a("p"),kCo=o("This class cannot be instantiated directly using "),fie=a("code"),SCo=o("__init__()"),RCo=o(" (throws an error)."),BCo=l(),rt=a("div"),F(fy.$$.fragment),PCo=l(),mie=a("p"),ICo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qCo=l(),xi=a("p"),NCo=o(`Note:
Loading a model from its configuration file does `),gie=a("strong"),jCo=o("not"),DCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=a("a"),GCo=o("from_pretrained()"),OCo=o(" to load the model weights."),VCo=l(),F(R2.$$.fragment),XCo=l(),Ye=a("div"),F(my.$$.fragment),zCo=l(),hie=a("p"),QCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),WCo=l(),Aa=a("p"),HCo=o("The model class to instantiate is selected based on the "),pie=a("code"),UCo=o("model_type"),JCo=o(` property of the config object (either
passed as an argument or loaded from `),uie=a("code"),YCo=o("pretrained_model_name_or_path"),KCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=a("code"),ZCo=o("pretrained_model_name_or_path"),e3o=o(":"),o3o=l(),he=a("ul"),B2=a("li"),bie=a("strong"),r3o=o("bart"),t3o=o(" \u2014 "),QN=a("a"),a3o=o("BartForConditionalGeneration"),n3o=o(" (BART model)"),s3o=l(),P2=a("li"),vie=a("strong"),l3o=o("bigbird_pegasus"),i3o=o(" \u2014 "),WN=a("a"),d3o=o("BigBirdPegasusForConditionalGeneration"),c3o=o(" (BigBirdPegasus model)"),f3o=l(),I2=a("li"),Fie=a("strong"),m3o=o("blenderbot"),g3o=o(" \u2014 "),HN=a("a"),h3o=o("BlenderbotForConditionalGeneration"),p3o=o(" (Blenderbot model)"),u3o=l(),q2=a("li"),Tie=a("strong"),_3o=o("blenderbot-small"),b3o=o(" \u2014 "),UN=a("a"),v3o=o("BlenderbotSmallForConditionalGeneration"),F3o=o(" (BlenderbotSmall model)"),T3o=l(),N2=a("li"),Mie=a("strong"),M3o=o("encoder-decoder"),E3o=o(" \u2014 "),JN=a("a"),C3o=o("EncoderDecoderModel"),w3o=o(" (Encoder decoder model)"),A3o=l(),j2=a("li"),Eie=a("strong"),y3o=o("fsmt"),L3o=o(" \u2014 "),YN=a("a"),x3o=o("FSMTForConditionalGeneration"),$3o=o(" (FairSeq Machine-Translation model)"),k3o=l(),D2=a("li"),Cie=a("strong"),S3o=o("led"),R3o=o(" \u2014 "),KN=a("a"),B3o=o("LEDForConditionalGeneration"),P3o=o(" (LED model)"),I3o=l(),G2=a("li"),wie=a("strong"),q3o=o("m2m_100"),N3o=o(" \u2014 "),ZN=a("a"),j3o=o("M2M100ForConditionalGeneration"),D3o=o(" (M2M100 model)"),G3o=l(),O2=a("li"),Aie=a("strong"),O3o=o("marian"),V3o=o(" \u2014 "),ej=a("a"),X3o=o("MarianMTModel"),z3o=o(" (Marian model)"),Q3o=l(),V2=a("li"),yie=a("strong"),W3o=o("mbart"),H3o=o(" \u2014 "),oj=a("a"),U3o=o("MBartForConditionalGeneration"),J3o=o(" (mBART model)"),Y3o=l(),X2=a("li"),Lie=a("strong"),K3o=o("mt5"),Z3o=o(" \u2014 "),rj=a("a"),ewo=o("MT5ForConditionalGeneration"),owo=o(" (mT5 model)"),rwo=l(),z2=a("li"),xie=a("strong"),two=o("pegasus"),awo=o(" \u2014 "),tj=a("a"),nwo=o("PegasusForConditionalGeneration"),swo=o(" (Pegasus model)"),lwo=l(),Q2=a("li"),$ie=a("strong"),iwo=o("plbart"),dwo=o(" \u2014 "),aj=a("a"),cwo=o("PLBartForConditionalGeneration"),fwo=o(" (PLBart model)"),mwo=l(),W2=a("li"),kie=a("strong"),gwo=o("prophetnet"),hwo=o(" \u2014 "),nj=a("a"),pwo=o("ProphetNetForConditionalGeneration"),uwo=o(" (ProphetNet model)"),_wo=l(),H2=a("li"),Sie=a("strong"),bwo=o("t5"),vwo=o(" \u2014 "),sj=a("a"),Fwo=o("T5ForConditionalGeneration"),Two=o(" (T5 model)"),Mwo=l(),U2=a("li"),Rie=a("strong"),Ewo=o("tapex"),Cwo=o(" \u2014 "),lj=a("a"),wwo=o("BartForConditionalGeneration"),Awo=o(" (TAPEX model)"),ywo=l(),J2=a("li"),Bie=a("strong"),Lwo=o("xlm-prophetnet"),xwo=o(" \u2014 "),ij=a("a"),$wo=o("XLMProphetNetForConditionalGeneration"),kwo=o(" (XLMProphetNet model)"),Swo=l(),Y2=a("p"),Rwo=o("The model is set in evaluation mode by default using "),Pie=a("code"),Bwo=o("model.eval()"),Pwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=a("code"),Iwo=o("model.train()"),qwo=l(),F(K2.$$.fragment),iBe=l(),$i=a("h2"),Z2=a("a"),qie=a("span"),F(gy.$$.fragment),Nwo=l(),Nie=a("span"),jwo=o("AutoModelForSequenceClassification"),dBe=l(),ko=a("div"),F(hy.$$.fragment),Dwo=l(),ki=a("p"),Gwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dj=a("a"),Owo=o("from_pretrained()"),Vwo=o(" class method or the "),cj=a("a"),Xwo=o("from_config()"),zwo=o(` class
method.`),Qwo=l(),py=a("p"),Wwo=o("This class cannot be instantiated directly using "),jie=a("code"),Hwo=o("__init__()"),Uwo=o(" (throws an error)."),Jwo=l(),tt=a("div"),F(uy.$$.fragment),Ywo=l(),Die=a("p"),Kwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zwo=l(),Si=a("p"),eAo=o(`Note:
Loading a model from its configuration file does `),Gie=a("strong"),oAo=o("not"),rAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=a("a"),tAo=o("from_pretrained()"),aAo=o(" to load the model weights."),nAo=l(),F(e1.$$.fragment),sAo=l(),Ke=a("div"),F(_y.$$.fragment),lAo=l(),Oie=a("p"),iAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dAo=l(),ya=a("p"),cAo=o("The model class to instantiate is selected based on the "),Vie=a("code"),fAo=o("model_type"),mAo=o(` property of the config object (either
passed as an argument or loaded from `),Xie=a("code"),gAo=o("pretrained_model_name_or_path"),hAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=a("code"),pAo=o("pretrained_model_name_or_path"),uAo=o(":"),_Ao=l(),q=a("ul"),o1=a("li"),Qie=a("strong"),bAo=o("albert"),vAo=o(" \u2014 "),mj=a("a"),FAo=o("AlbertForSequenceClassification"),TAo=o(" (ALBERT model)"),MAo=l(),r1=a("li"),Wie=a("strong"),EAo=o("bart"),CAo=o(" \u2014 "),gj=a("a"),wAo=o("BartForSequenceClassification"),AAo=o(" (BART model)"),yAo=l(),t1=a("li"),Hie=a("strong"),LAo=o("bert"),xAo=o(" \u2014 "),hj=a("a"),$Ao=o("BertForSequenceClassification"),kAo=o(" (BERT model)"),SAo=l(),a1=a("li"),Uie=a("strong"),RAo=o("big_bird"),BAo=o(" \u2014 "),pj=a("a"),PAo=o("BigBirdForSequenceClassification"),IAo=o(" (BigBird model)"),qAo=l(),n1=a("li"),Jie=a("strong"),NAo=o("bigbird_pegasus"),jAo=o(" \u2014 "),uj=a("a"),DAo=o("BigBirdPegasusForSequenceClassification"),GAo=o(" (BigBirdPegasus model)"),OAo=l(),s1=a("li"),Yie=a("strong"),VAo=o("camembert"),XAo=o(" \u2014 "),_j=a("a"),zAo=o("CamembertForSequenceClassification"),QAo=o(" (CamemBERT model)"),WAo=l(),l1=a("li"),Kie=a("strong"),HAo=o("canine"),UAo=o(" \u2014 "),bj=a("a"),JAo=o("CanineForSequenceClassification"),YAo=o(" (Canine model)"),KAo=l(),i1=a("li"),Zie=a("strong"),ZAo=o("convbert"),eyo=o(" \u2014 "),vj=a("a"),oyo=o("ConvBertForSequenceClassification"),ryo=o(" (ConvBERT model)"),tyo=l(),d1=a("li"),ede=a("strong"),ayo=o("ctrl"),nyo=o(" \u2014 "),Fj=a("a"),syo=o("CTRLForSequenceClassification"),lyo=o(" (CTRL model)"),iyo=l(),c1=a("li"),ode=a("strong"),dyo=o("data2vec-text"),cyo=o(" \u2014 "),Tj=a("a"),fyo=o("Data2VecTextForSequenceClassification"),myo=o(" (Data2VecText model)"),gyo=l(),f1=a("li"),rde=a("strong"),hyo=o("deberta"),pyo=o(" \u2014 "),Mj=a("a"),uyo=o("DebertaForSequenceClassification"),_yo=o(" (DeBERTa model)"),byo=l(),m1=a("li"),tde=a("strong"),vyo=o("deberta-v2"),Fyo=o(" \u2014 "),Ej=a("a"),Tyo=o("DebertaV2ForSequenceClassification"),Myo=o(" (DeBERTa-v2 model)"),Eyo=l(),g1=a("li"),ade=a("strong"),Cyo=o("distilbert"),wyo=o(" \u2014 "),Cj=a("a"),Ayo=o("DistilBertForSequenceClassification"),yyo=o(" (DistilBERT model)"),Lyo=l(),h1=a("li"),nde=a("strong"),xyo=o("electra"),$yo=o(" \u2014 "),wj=a("a"),kyo=o("ElectraForSequenceClassification"),Syo=o(" (ELECTRA model)"),Ryo=l(),p1=a("li"),sde=a("strong"),Byo=o("flaubert"),Pyo=o(" \u2014 "),Aj=a("a"),Iyo=o("FlaubertForSequenceClassification"),qyo=o(" (FlauBERT model)"),Nyo=l(),u1=a("li"),lde=a("strong"),jyo=o("fnet"),Dyo=o(" \u2014 "),yj=a("a"),Gyo=o("FNetForSequenceClassification"),Oyo=o(" (FNet model)"),Vyo=l(),_1=a("li"),ide=a("strong"),Xyo=o("funnel"),zyo=o(" \u2014 "),Lj=a("a"),Qyo=o("FunnelForSequenceClassification"),Wyo=o(" (Funnel Transformer model)"),Hyo=l(),b1=a("li"),dde=a("strong"),Uyo=o("gpt2"),Jyo=o(" \u2014 "),xj=a("a"),Yyo=o("GPT2ForSequenceClassification"),Kyo=o(" (OpenAI GPT-2 model)"),Zyo=l(),v1=a("li"),cde=a("strong"),eLo=o("gpt_neo"),oLo=o(" \u2014 "),$j=a("a"),rLo=o("GPTNeoForSequenceClassification"),tLo=o(" (GPT Neo model)"),aLo=l(),F1=a("li"),fde=a("strong"),nLo=o("gptj"),sLo=o(" \u2014 "),kj=a("a"),lLo=o("GPTJForSequenceClassification"),iLo=o(" (GPT-J model)"),dLo=l(),T1=a("li"),mde=a("strong"),cLo=o("ibert"),fLo=o(" \u2014 "),Sj=a("a"),mLo=o("IBertForSequenceClassification"),gLo=o(" (I-BERT model)"),hLo=l(),M1=a("li"),gde=a("strong"),pLo=o("layoutlm"),uLo=o(" \u2014 "),Rj=a("a"),_Lo=o("LayoutLMForSequenceClassification"),bLo=o(" (LayoutLM model)"),vLo=l(),E1=a("li"),hde=a("strong"),FLo=o("layoutlmv2"),TLo=o(" \u2014 "),Bj=a("a"),MLo=o("LayoutLMv2ForSequenceClassification"),ELo=o(" (LayoutLMv2 model)"),CLo=l(),C1=a("li"),pde=a("strong"),wLo=o("led"),ALo=o(" \u2014 "),Pj=a("a"),yLo=o("LEDForSequenceClassification"),LLo=o(" (LED model)"),xLo=l(),w1=a("li"),ude=a("strong"),$Lo=o("longformer"),kLo=o(" \u2014 "),Ij=a("a"),SLo=o("LongformerForSequenceClassification"),RLo=o(" (Longformer model)"),BLo=l(),A1=a("li"),_de=a("strong"),PLo=o("mbart"),ILo=o(" \u2014 "),qj=a("a"),qLo=o("MBartForSequenceClassification"),NLo=o(" (mBART model)"),jLo=l(),y1=a("li"),bde=a("strong"),DLo=o("megatron-bert"),GLo=o(" \u2014 "),Nj=a("a"),OLo=o("MegatronBertForSequenceClassification"),VLo=o(" (MegatronBert model)"),XLo=l(),L1=a("li"),vde=a("strong"),zLo=o("mobilebert"),QLo=o(" \u2014 "),jj=a("a"),WLo=o("MobileBertForSequenceClassification"),HLo=o(" (MobileBERT model)"),ULo=l(),x1=a("li"),Fde=a("strong"),JLo=o("mpnet"),YLo=o(" \u2014 "),Dj=a("a"),KLo=o("MPNetForSequenceClassification"),ZLo=o(" (MPNet model)"),e8o=l(),$1=a("li"),Tde=a("strong"),o8o=o("nystromformer"),r8o=o(" \u2014 "),Gj=a("a"),t8o=o("NystromformerForSequenceClassification"),a8o=o(" (Nystromformer model)"),n8o=l(),k1=a("li"),Mde=a("strong"),s8o=o("openai-gpt"),l8o=o(" \u2014 "),Oj=a("a"),i8o=o("OpenAIGPTForSequenceClassification"),d8o=o(" (OpenAI GPT model)"),c8o=l(),S1=a("li"),Ede=a("strong"),f8o=o("perceiver"),m8o=o(" \u2014 "),Vj=a("a"),g8o=o("PerceiverForSequenceClassification"),h8o=o(" (Perceiver model)"),p8o=l(),R1=a("li"),Cde=a("strong"),u8o=o("plbart"),_8o=o(" \u2014 "),Xj=a("a"),b8o=o("PLBartForSequenceClassification"),v8o=o(" (PLBart model)"),F8o=l(),B1=a("li"),wde=a("strong"),T8o=o("qdqbert"),M8o=o(" \u2014 "),zj=a("a"),E8o=o("QDQBertForSequenceClassification"),C8o=o(" (QDQBert model)"),w8o=l(),P1=a("li"),Ade=a("strong"),A8o=o("reformer"),y8o=o(" \u2014 "),Qj=a("a"),L8o=o("ReformerForSequenceClassification"),x8o=o(" (Reformer model)"),$8o=l(),I1=a("li"),yde=a("strong"),k8o=o("rembert"),S8o=o(" \u2014 "),Wj=a("a"),R8o=o("RemBertForSequenceClassification"),B8o=o(" (RemBERT model)"),P8o=l(),q1=a("li"),Lde=a("strong"),I8o=o("roberta"),q8o=o(" \u2014 "),Hj=a("a"),N8o=o("RobertaForSequenceClassification"),j8o=o(" (RoBERTa model)"),D8o=l(),N1=a("li"),xde=a("strong"),G8o=o("roformer"),O8o=o(" \u2014 "),Uj=a("a"),V8o=o("RoFormerForSequenceClassification"),X8o=o(" (RoFormer model)"),z8o=l(),j1=a("li"),$de=a("strong"),Q8o=o("squeezebert"),W8o=o(" \u2014 "),Jj=a("a"),H8o=o("SqueezeBertForSequenceClassification"),U8o=o(" (SqueezeBERT model)"),J8o=l(),D1=a("li"),kde=a("strong"),Y8o=o("tapas"),K8o=o(" \u2014 "),Yj=a("a"),Z8o=o("TapasForSequenceClassification"),e7o=o(" (TAPAS model)"),o7o=l(),G1=a("li"),Sde=a("strong"),r7o=o("tapex"),t7o=o(" \u2014 "),Kj=a("a"),a7o=o("BartForSequenceClassification"),n7o=o(" (TAPEX model)"),s7o=l(),O1=a("li"),Rde=a("strong"),l7o=o("transfo-xl"),i7o=o(" \u2014 "),Zj=a("a"),d7o=o("TransfoXLForSequenceClassification"),c7o=o(" (Transformer-XL model)"),f7o=l(),V1=a("li"),Bde=a("strong"),m7o=o("xlm"),g7o=o(" \u2014 "),eD=a("a"),h7o=o("XLMForSequenceClassification"),p7o=o(" (XLM model)"),u7o=l(),X1=a("li"),Pde=a("strong"),_7o=o("xlm-roberta"),b7o=o(" \u2014 "),oD=a("a"),v7o=o("XLMRobertaForSequenceClassification"),F7o=o(" (XLM-RoBERTa model)"),T7o=l(),z1=a("li"),Ide=a("strong"),M7o=o("xlm-roberta-xl"),E7o=o(" \u2014 "),rD=a("a"),C7o=o("XLMRobertaXLForSequenceClassification"),w7o=o(" (XLM-RoBERTa-XL model)"),A7o=l(),Q1=a("li"),qde=a("strong"),y7o=o("xlnet"),L7o=o(" \u2014 "),tD=a("a"),x7o=o("XLNetForSequenceClassification"),$7o=o(" (XLNet model)"),k7o=l(),W1=a("li"),Nde=a("strong"),S7o=o("yoso"),R7o=o(" \u2014 "),aD=a("a"),B7o=o("YosoForSequenceClassification"),P7o=o(" (YOSO model)"),I7o=l(),H1=a("p"),q7o=o("The model is set in evaluation mode by default using "),jde=a("code"),N7o=o("model.eval()"),j7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=a("code"),D7o=o("model.train()"),G7o=l(),F(U1.$$.fragment),cBe=l(),Ri=a("h2"),J1=a("a"),Gde=a("span"),F(by.$$.fragment),O7o=l(),Ode=a("span"),V7o=o("AutoModelForMultipleChoice"),fBe=l(),So=a("div"),F(vy.$$.fragment),X7o=l(),Bi=a("p"),z7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nD=a("a"),Q7o=o("from_pretrained()"),W7o=o(" class method or the "),sD=a("a"),H7o=o("from_config()"),U7o=o(` class
method.`),J7o=l(),Fy=a("p"),Y7o=o("This class cannot be instantiated directly using "),Vde=a("code"),K7o=o("__init__()"),Z7o=o(" (throws an error)."),exo=l(),at=a("div"),F(Ty.$$.fragment),oxo=l(),Xde=a("p"),rxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),txo=l(),Pi=a("p"),axo=o(`Note:
Loading a model from its configuration file does `),zde=a("strong"),nxo=o("not"),sxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),lxo=o("from_pretrained()"),ixo=o(" to load the model weights."),dxo=l(),F(Y1.$$.fragment),cxo=l(),Ze=a("div"),F(My.$$.fragment),fxo=l(),Qde=a("p"),mxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gxo=l(),La=a("p"),hxo=o("The model class to instantiate is selected based on the "),Wde=a("code"),pxo=o("model_type"),uxo=o(` property of the config object (either
passed as an argument or loaded from `),Hde=a("code"),_xo=o("pretrained_model_name_or_path"),bxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=a("code"),vxo=o("pretrained_model_name_or_path"),Fxo=o(":"),Txo=l(),Y=a("ul"),K1=a("li"),Jde=a("strong"),Mxo=o("albert"),Exo=o(" \u2014 "),iD=a("a"),Cxo=o("AlbertForMultipleChoice"),wxo=o(" (ALBERT model)"),Axo=l(),Z1=a("li"),Yde=a("strong"),yxo=o("bert"),Lxo=o(" \u2014 "),dD=a("a"),xxo=o("BertForMultipleChoice"),$xo=o(" (BERT model)"),kxo=l(),eb=a("li"),Kde=a("strong"),Sxo=o("big_bird"),Rxo=o(" \u2014 "),cD=a("a"),Bxo=o("BigBirdForMultipleChoice"),Pxo=o(" (BigBird model)"),Ixo=l(),ob=a("li"),Zde=a("strong"),qxo=o("camembert"),Nxo=o(" \u2014 "),fD=a("a"),jxo=o("CamembertForMultipleChoice"),Dxo=o(" (CamemBERT model)"),Gxo=l(),rb=a("li"),ece=a("strong"),Oxo=o("canine"),Vxo=o(" \u2014 "),mD=a("a"),Xxo=o("CanineForMultipleChoice"),zxo=o(" (Canine model)"),Qxo=l(),tb=a("li"),oce=a("strong"),Wxo=o("convbert"),Hxo=o(" \u2014 "),gD=a("a"),Uxo=o("ConvBertForMultipleChoice"),Jxo=o(" (ConvBERT model)"),Yxo=l(),ab=a("li"),rce=a("strong"),Kxo=o("data2vec-text"),Zxo=o(" \u2014 "),hD=a("a"),e9o=o("Data2VecTextForMultipleChoice"),o9o=o(" (Data2VecText model)"),r9o=l(),nb=a("li"),tce=a("strong"),t9o=o("distilbert"),a9o=o(" \u2014 "),pD=a("a"),n9o=o("DistilBertForMultipleChoice"),s9o=o(" (DistilBERT model)"),l9o=l(),sb=a("li"),ace=a("strong"),i9o=o("electra"),d9o=o(" \u2014 "),uD=a("a"),c9o=o("ElectraForMultipleChoice"),f9o=o(" (ELECTRA model)"),m9o=l(),lb=a("li"),nce=a("strong"),g9o=o("flaubert"),h9o=o(" \u2014 "),_D=a("a"),p9o=o("FlaubertForMultipleChoice"),u9o=o(" (FlauBERT model)"),_9o=l(),ib=a("li"),sce=a("strong"),b9o=o("fnet"),v9o=o(" \u2014 "),bD=a("a"),F9o=o("FNetForMultipleChoice"),T9o=o(" (FNet model)"),M9o=l(),db=a("li"),lce=a("strong"),E9o=o("funnel"),C9o=o(" \u2014 "),vD=a("a"),w9o=o("FunnelForMultipleChoice"),A9o=o(" (Funnel Transformer model)"),y9o=l(),cb=a("li"),ice=a("strong"),L9o=o("ibert"),x9o=o(" \u2014 "),FD=a("a"),$9o=o("IBertForMultipleChoice"),k9o=o(" (I-BERT model)"),S9o=l(),fb=a("li"),dce=a("strong"),R9o=o("longformer"),B9o=o(" \u2014 "),TD=a("a"),P9o=o("LongformerForMultipleChoice"),I9o=o(" (Longformer model)"),q9o=l(),mb=a("li"),cce=a("strong"),N9o=o("megatron-bert"),j9o=o(" \u2014 "),MD=a("a"),D9o=o("MegatronBertForMultipleChoice"),G9o=o(" (MegatronBert model)"),O9o=l(),gb=a("li"),fce=a("strong"),V9o=o("mobilebert"),X9o=o(" \u2014 "),ED=a("a"),z9o=o("MobileBertForMultipleChoice"),Q9o=o(" (MobileBERT model)"),W9o=l(),hb=a("li"),mce=a("strong"),H9o=o("mpnet"),U9o=o(" \u2014 "),CD=a("a"),J9o=o("MPNetForMultipleChoice"),Y9o=o(" (MPNet model)"),K9o=l(),pb=a("li"),gce=a("strong"),Z9o=o("nystromformer"),e$o=o(" \u2014 "),wD=a("a"),o$o=o("NystromformerForMultipleChoice"),r$o=o(" (Nystromformer model)"),t$o=l(),ub=a("li"),hce=a("strong"),a$o=o("qdqbert"),n$o=o(" \u2014 "),AD=a("a"),s$o=o("QDQBertForMultipleChoice"),l$o=o(" (QDQBert model)"),i$o=l(),_b=a("li"),pce=a("strong"),d$o=o("rembert"),c$o=o(" \u2014 "),yD=a("a"),f$o=o("RemBertForMultipleChoice"),m$o=o(" (RemBERT model)"),g$o=l(),bb=a("li"),uce=a("strong"),h$o=o("roberta"),p$o=o(" \u2014 "),LD=a("a"),u$o=o("RobertaForMultipleChoice"),_$o=o(" (RoBERTa model)"),b$o=l(),vb=a("li"),_ce=a("strong"),v$o=o("roformer"),F$o=o(" \u2014 "),xD=a("a"),T$o=o("RoFormerForMultipleChoice"),M$o=o(" (RoFormer model)"),E$o=l(),Fb=a("li"),bce=a("strong"),C$o=o("squeezebert"),w$o=o(" \u2014 "),$D=a("a"),A$o=o("SqueezeBertForMultipleChoice"),y$o=o(" (SqueezeBERT model)"),L$o=l(),Tb=a("li"),vce=a("strong"),x$o=o("xlm"),$$o=o(" \u2014 "),kD=a("a"),k$o=o("XLMForMultipleChoice"),S$o=o(" (XLM model)"),R$o=l(),Mb=a("li"),Fce=a("strong"),B$o=o("xlm-roberta"),P$o=o(" \u2014 "),SD=a("a"),I$o=o("XLMRobertaForMultipleChoice"),q$o=o(" (XLM-RoBERTa model)"),N$o=l(),Eb=a("li"),Tce=a("strong"),j$o=o("xlm-roberta-xl"),D$o=o(" \u2014 "),RD=a("a"),G$o=o("XLMRobertaXLForMultipleChoice"),O$o=o(" (XLM-RoBERTa-XL model)"),V$o=l(),Cb=a("li"),Mce=a("strong"),X$o=o("xlnet"),z$o=o(" \u2014 "),BD=a("a"),Q$o=o("XLNetForMultipleChoice"),W$o=o(" (XLNet model)"),H$o=l(),wb=a("li"),Ece=a("strong"),U$o=o("yoso"),J$o=o(" \u2014 "),PD=a("a"),Y$o=o("YosoForMultipleChoice"),K$o=o(" (YOSO model)"),Z$o=l(),Ab=a("p"),eko=o("The model is set in evaluation mode by default using "),Cce=a("code"),oko=o("model.eval()"),rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=a("code"),tko=o("model.train()"),ako=l(),F(yb.$$.fragment),mBe=l(),Ii=a("h2"),Lb=a("a"),Ace=a("span"),F(Ey.$$.fragment),nko=l(),yce=a("span"),sko=o("AutoModelForNextSentencePrediction"),gBe=l(),Ro=a("div"),F(Cy.$$.fragment),lko=l(),qi=a("p"),iko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ID=a("a"),dko=o("from_pretrained()"),cko=o(" class method or the "),qD=a("a"),fko=o("from_config()"),mko=o(` class
method.`),gko=l(),wy=a("p"),hko=o("This class cannot be instantiated directly using "),Lce=a("code"),pko=o("__init__()"),uko=o(" (throws an error)."),_ko=l(),nt=a("div"),F(Ay.$$.fragment),bko=l(),xce=a("p"),vko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Fko=l(),Ni=a("p"),Tko=o(`Note:
Loading a model from its configuration file does `),$ce=a("strong"),Mko=o("not"),Eko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),Cko=o("from_pretrained()"),wko=o(" to load the model weights."),Ako=l(),F(xb.$$.fragment),yko=l(),eo=a("div"),F(yy.$$.fragment),Lko=l(),kce=a("p"),xko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$ko=l(),xa=a("p"),kko=o("The model class to instantiate is selected based on the "),Sce=a("code"),Sko=o("model_type"),Rko=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),Bko=o("pretrained_model_name_or_path"),Pko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),Iko=o("pretrained_model_name_or_path"),qko=o(":"),Nko=l(),Wr=a("ul"),$b=a("li"),Pce=a("strong"),jko=o("bert"),Dko=o(" \u2014 "),jD=a("a"),Gko=o("BertForNextSentencePrediction"),Oko=o(" (BERT model)"),Vko=l(),kb=a("li"),Ice=a("strong"),Xko=o("fnet"),zko=o(" \u2014 "),DD=a("a"),Qko=o("FNetForNextSentencePrediction"),Wko=o(" (FNet model)"),Hko=l(),Sb=a("li"),qce=a("strong"),Uko=o("megatron-bert"),Jko=o(" \u2014 "),GD=a("a"),Yko=o("MegatronBertForNextSentencePrediction"),Kko=o(" (MegatronBert model)"),Zko=l(),Rb=a("li"),Nce=a("strong"),eSo=o("mobilebert"),oSo=o(" \u2014 "),OD=a("a"),rSo=o("MobileBertForNextSentencePrediction"),tSo=o(" (MobileBERT model)"),aSo=l(),Bb=a("li"),jce=a("strong"),nSo=o("qdqbert"),sSo=o(" \u2014 "),VD=a("a"),lSo=o("QDQBertForNextSentencePrediction"),iSo=o(" (QDQBert model)"),dSo=l(),Pb=a("p"),cSo=o("The model is set in evaluation mode by default using "),Dce=a("code"),fSo=o("model.eval()"),mSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=a("code"),gSo=o("model.train()"),hSo=l(),F(Ib.$$.fragment),hBe=l(),ji=a("h2"),qb=a("a"),Oce=a("span"),F(Ly.$$.fragment),pSo=l(),Vce=a("span"),uSo=o("AutoModelForTokenClassification"),pBe=l(),Bo=a("div"),F(xy.$$.fragment),_So=l(),Di=a("p"),bSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XD=a("a"),vSo=o("from_pretrained()"),FSo=o(" class method or the "),zD=a("a"),TSo=o("from_config()"),MSo=o(` class
method.`),ESo=l(),$y=a("p"),CSo=o("This class cannot be instantiated directly using "),Xce=a("code"),wSo=o("__init__()"),ASo=o(" (throws an error)."),ySo=l(),st=a("div"),F(ky.$$.fragment),LSo=l(),zce=a("p"),xSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$So=l(),Gi=a("p"),kSo=o(`Note:
Loading a model from its configuration file does `),Qce=a("strong"),SSo=o("not"),RSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=a("a"),BSo=o("from_pretrained()"),PSo=o(" to load the model weights."),ISo=l(),F(Nb.$$.fragment),qSo=l(),oo=a("div"),F(Sy.$$.fragment),NSo=l(),Wce=a("p"),jSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DSo=l(),$a=a("p"),GSo=o("The model class to instantiate is selected based on the "),Hce=a("code"),OSo=o("model_type"),VSo=o(` property of the config object (either
passed as an argument or loaded from `),Uce=a("code"),XSo=o("pretrained_model_name_or_path"),zSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=a("code"),QSo=o("pretrained_model_name_or_path"),WSo=o(":"),HSo=l(),U=a("ul"),jb=a("li"),Yce=a("strong"),USo=o("albert"),JSo=o(" \u2014 "),WD=a("a"),YSo=o("AlbertForTokenClassification"),KSo=o(" (ALBERT model)"),ZSo=l(),Db=a("li"),Kce=a("strong"),eRo=o("bert"),oRo=o(" \u2014 "),HD=a("a"),rRo=o("BertForTokenClassification"),tRo=o(" (BERT model)"),aRo=l(),Gb=a("li"),Zce=a("strong"),nRo=o("big_bird"),sRo=o(" \u2014 "),UD=a("a"),lRo=o("BigBirdForTokenClassification"),iRo=o(" (BigBird model)"),dRo=l(),Ob=a("li"),efe=a("strong"),cRo=o("camembert"),fRo=o(" \u2014 "),JD=a("a"),mRo=o("CamembertForTokenClassification"),gRo=o(" (CamemBERT model)"),hRo=l(),Vb=a("li"),ofe=a("strong"),pRo=o("canine"),uRo=o(" \u2014 "),YD=a("a"),_Ro=o("CanineForTokenClassification"),bRo=o(" (Canine model)"),vRo=l(),Xb=a("li"),rfe=a("strong"),FRo=o("convbert"),TRo=o(" \u2014 "),KD=a("a"),MRo=o("ConvBertForTokenClassification"),ERo=o(" (ConvBERT model)"),CRo=l(),zb=a("li"),tfe=a("strong"),wRo=o("data2vec-text"),ARo=o(" \u2014 "),ZD=a("a"),yRo=o("Data2VecTextForTokenClassification"),LRo=o(" (Data2VecText model)"),xRo=l(),Qb=a("li"),afe=a("strong"),$Ro=o("deberta"),kRo=o(" \u2014 "),eG=a("a"),SRo=o("DebertaForTokenClassification"),RRo=o(" (DeBERTa model)"),BRo=l(),Wb=a("li"),nfe=a("strong"),PRo=o("deberta-v2"),IRo=o(" \u2014 "),oG=a("a"),qRo=o("DebertaV2ForTokenClassification"),NRo=o(" (DeBERTa-v2 model)"),jRo=l(),Hb=a("li"),sfe=a("strong"),DRo=o("distilbert"),GRo=o(" \u2014 "),rG=a("a"),ORo=o("DistilBertForTokenClassification"),VRo=o(" (DistilBERT model)"),XRo=l(),Ub=a("li"),lfe=a("strong"),zRo=o("electra"),QRo=o(" \u2014 "),tG=a("a"),WRo=o("ElectraForTokenClassification"),HRo=o(" (ELECTRA model)"),URo=l(),Jb=a("li"),ife=a("strong"),JRo=o("flaubert"),YRo=o(" \u2014 "),aG=a("a"),KRo=o("FlaubertForTokenClassification"),ZRo=o(" (FlauBERT model)"),eBo=l(),Yb=a("li"),dfe=a("strong"),oBo=o("fnet"),rBo=o(" \u2014 "),nG=a("a"),tBo=o("FNetForTokenClassification"),aBo=o(" (FNet model)"),nBo=l(),Kb=a("li"),cfe=a("strong"),sBo=o("funnel"),lBo=o(" \u2014 "),sG=a("a"),iBo=o("FunnelForTokenClassification"),dBo=o(" (Funnel Transformer model)"),cBo=l(),Zb=a("li"),ffe=a("strong"),fBo=o("gpt2"),mBo=o(" \u2014 "),lG=a("a"),gBo=o("GPT2ForTokenClassification"),hBo=o(" (OpenAI GPT-2 model)"),pBo=l(),e4=a("li"),mfe=a("strong"),uBo=o("ibert"),_Bo=o(" \u2014 "),iG=a("a"),bBo=o("IBertForTokenClassification"),vBo=o(" (I-BERT model)"),FBo=l(),o4=a("li"),gfe=a("strong"),TBo=o("layoutlm"),MBo=o(" \u2014 "),dG=a("a"),EBo=o("LayoutLMForTokenClassification"),CBo=o(" (LayoutLM model)"),wBo=l(),r4=a("li"),hfe=a("strong"),ABo=o("layoutlmv2"),yBo=o(" \u2014 "),cG=a("a"),LBo=o("LayoutLMv2ForTokenClassification"),xBo=o(" (LayoutLMv2 model)"),$Bo=l(),t4=a("li"),pfe=a("strong"),kBo=o("longformer"),SBo=o(" \u2014 "),fG=a("a"),RBo=o("LongformerForTokenClassification"),BBo=o(" (Longformer model)"),PBo=l(),a4=a("li"),ufe=a("strong"),IBo=o("megatron-bert"),qBo=o(" \u2014 "),mG=a("a"),NBo=o("MegatronBertForTokenClassification"),jBo=o(" (MegatronBert model)"),DBo=l(),n4=a("li"),_fe=a("strong"),GBo=o("mobilebert"),OBo=o(" \u2014 "),gG=a("a"),VBo=o("MobileBertForTokenClassification"),XBo=o(" (MobileBERT model)"),zBo=l(),s4=a("li"),bfe=a("strong"),QBo=o("mpnet"),WBo=o(" \u2014 "),hG=a("a"),HBo=o("MPNetForTokenClassification"),UBo=o(" (MPNet model)"),JBo=l(),l4=a("li"),vfe=a("strong"),YBo=o("nystromformer"),KBo=o(" \u2014 "),pG=a("a"),ZBo=o("NystromformerForTokenClassification"),ePo=o(" (Nystromformer model)"),oPo=l(),i4=a("li"),Ffe=a("strong"),rPo=o("qdqbert"),tPo=o(" \u2014 "),uG=a("a"),aPo=o("QDQBertForTokenClassification"),nPo=o(" (QDQBert model)"),sPo=l(),d4=a("li"),Tfe=a("strong"),lPo=o("rembert"),iPo=o(" \u2014 "),_G=a("a"),dPo=o("RemBertForTokenClassification"),cPo=o(" (RemBERT model)"),fPo=l(),c4=a("li"),Mfe=a("strong"),mPo=o("roberta"),gPo=o(" \u2014 "),bG=a("a"),hPo=o("RobertaForTokenClassification"),pPo=o(" (RoBERTa model)"),uPo=l(),f4=a("li"),Efe=a("strong"),_Po=o("roformer"),bPo=o(" \u2014 "),vG=a("a"),vPo=o("RoFormerForTokenClassification"),FPo=o(" (RoFormer model)"),TPo=l(),m4=a("li"),Cfe=a("strong"),MPo=o("squeezebert"),EPo=o(" \u2014 "),FG=a("a"),CPo=o("SqueezeBertForTokenClassification"),wPo=o(" (SqueezeBERT model)"),APo=l(),g4=a("li"),wfe=a("strong"),yPo=o("xlm"),LPo=o(" \u2014 "),TG=a("a"),xPo=o("XLMForTokenClassification"),$Po=o(" (XLM model)"),kPo=l(),h4=a("li"),Afe=a("strong"),SPo=o("xlm-roberta"),RPo=o(" \u2014 "),MG=a("a"),BPo=o("XLMRobertaForTokenClassification"),PPo=o(" (XLM-RoBERTa model)"),IPo=l(),p4=a("li"),yfe=a("strong"),qPo=o("xlm-roberta-xl"),NPo=o(" \u2014 "),EG=a("a"),jPo=o("XLMRobertaXLForTokenClassification"),DPo=o(" (XLM-RoBERTa-XL model)"),GPo=l(),u4=a("li"),Lfe=a("strong"),OPo=o("xlnet"),VPo=o(" \u2014 "),CG=a("a"),XPo=o("XLNetForTokenClassification"),zPo=o(" (XLNet model)"),QPo=l(),_4=a("li"),xfe=a("strong"),WPo=o("yoso"),HPo=o(" \u2014 "),wG=a("a"),UPo=o("YosoForTokenClassification"),JPo=o(" (YOSO model)"),YPo=l(),b4=a("p"),KPo=o("The model is set in evaluation mode by default using "),$fe=a("code"),ZPo=o("model.eval()"),eIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),oIo=o("model.train()"),rIo=l(),F(v4.$$.fragment),uBe=l(),Oi=a("h2"),F4=a("a"),Sfe=a("span"),F(Ry.$$.fragment),tIo=l(),Rfe=a("span"),aIo=o("AutoModelForQuestionAnswering"),_Be=l(),Po=a("div"),F(By.$$.fragment),nIo=l(),Vi=a("p"),sIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AG=a("a"),lIo=o("from_pretrained()"),iIo=o(" class method or the "),yG=a("a"),dIo=o("from_config()"),cIo=o(` class
method.`),fIo=l(),Py=a("p"),mIo=o("This class cannot be instantiated directly using "),Bfe=a("code"),gIo=o("__init__()"),hIo=o(" (throws an error)."),pIo=l(),lt=a("div"),F(Iy.$$.fragment),uIo=l(),Pfe=a("p"),_Io=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bIo=l(),Xi=a("p"),vIo=o(`Note:
Loading a model from its configuration file does `),Ife=a("strong"),FIo=o("not"),TIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),MIo=o("from_pretrained()"),EIo=o(" to load the model weights."),CIo=l(),F(T4.$$.fragment),wIo=l(),ro=a("div"),F(qy.$$.fragment),AIo=l(),qfe=a("p"),yIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LIo=l(),ka=a("p"),xIo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),$Io=o("model_type"),kIo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),SIo=o("pretrained_model_name_or_path"),RIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),BIo=o("pretrained_model_name_or_path"),PIo=o(":"),IIo=l(),O=a("ul"),M4=a("li"),Gfe=a("strong"),qIo=o("albert"),NIo=o(" \u2014 "),xG=a("a"),jIo=o("AlbertForQuestionAnswering"),DIo=o(" (ALBERT model)"),GIo=l(),E4=a("li"),Ofe=a("strong"),OIo=o("bart"),VIo=o(" \u2014 "),$G=a("a"),XIo=o("BartForQuestionAnswering"),zIo=o(" (BART model)"),QIo=l(),C4=a("li"),Vfe=a("strong"),WIo=o("bert"),HIo=o(" \u2014 "),kG=a("a"),UIo=o("BertForQuestionAnswering"),JIo=o(" (BERT model)"),YIo=l(),w4=a("li"),Xfe=a("strong"),KIo=o("big_bird"),ZIo=o(" \u2014 "),SG=a("a"),eqo=o("BigBirdForQuestionAnswering"),oqo=o(" (BigBird model)"),rqo=l(),A4=a("li"),zfe=a("strong"),tqo=o("bigbird_pegasus"),aqo=o(" \u2014 "),RG=a("a"),nqo=o("BigBirdPegasusForQuestionAnswering"),sqo=o(" (BigBirdPegasus model)"),lqo=l(),y4=a("li"),Qfe=a("strong"),iqo=o("camembert"),dqo=o(" \u2014 "),BG=a("a"),cqo=o("CamembertForQuestionAnswering"),fqo=o(" (CamemBERT model)"),mqo=l(),L4=a("li"),Wfe=a("strong"),gqo=o("canine"),hqo=o(" \u2014 "),PG=a("a"),pqo=o("CanineForQuestionAnswering"),uqo=o(" (Canine model)"),_qo=l(),x4=a("li"),Hfe=a("strong"),bqo=o("convbert"),vqo=o(" \u2014 "),IG=a("a"),Fqo=o("ConvBertForQuestionAnswering"),Tqo=o(" (ConvBERT model)"),Mqo=l(),$4=a("li"),Ufe=a("strong"),Eqo=o("data2vec-text"),Cqo=o(" \u2014 "),qG=a("a"),wqo=o("Data2VecTextForQuestionAnswering"),Aqo=o(" (Data2VecText model)"),yqo=l(),k4=a("li"),Jfe=a("strong"),Lqo=o("deberta"),xqo=o(" \u2014 "),NG=a("a"),$qo=o("DebertaForQuestionAnswering"),kqo=o(" (DeBERTa model)"),Sqo=l(),S4=a("li"),Yfe=a("strong"),Rqo=o("deberta-v2"),Bqo=o(" \u2014 "),jG=a("a"),Pqo=o("DebertaV2ForQuestionAnswering"),Iqo=o(" (DeBERTa-v2 model)"),qqo=l(),R4=a("li"),Kfe=a("strong"),Nqo=o("distilbert"),jqo=o(" \u2014 "),DG=a("a"),Dqo=o("DistilBertForQuestionAnswering"),Gqo=o(" (DistilBERT model)"),Oqo=l(),B4=a("li"),Zfe=a("strong"),Vqo=o("electra"),Xqo=o(" \u2014 "),GG=a("a"),zqo=o("ElectraForQuestionAnswering"),Qqo=o(" (ELECTRA model)"),Wqo=l(),P4=a("li"),eme=a("strong"),Hqo=o("flaubert"),Uqo=o(" \u2014 "),OG=a("a"),Jqo=o("FlaubertForQuestionAnsweringSimple"),Yqo=o(" (FlauBERT model)"),Kqo=l(),I4=a("li"),ome=a("strong"),Zqo=o("fnet"),eNo=o(" \u2014 "),VG=a("a"),oNo=o("FNetForQuestionAnswering"),rNo=o(" (FNet model)"),tNo=l(),q4=a("li"),rme=a("strong"),aNo=o("funnel"),nNo=o(" \u2014 "),XG=a("a"),sNo=o("FunnelForQuestionAnswering"),lNo=o(" (Funnel Transformer model)"),iNo=l(),N4=a("li"),tme=a("strong"),dNo=o("gptj"),cNo=o(" \u2014 "),zG=a("a"),fNo=o("GPTJForQuestionAnswering"),mNo=o(" (GPT-J model)"),gNo=l(),j4=a("li"),ame=a("strong"),hNo=o("ibert"),pNo=o(" \u2014 "),QG=a("a"),uNo=o("IBertForQuestionAnswering"),_No=o(" (I-BERT model)"),bNo=l(),D4=a("li"),nme=a("strong"),vNo=o("layoutlmv2"),FNo=o(" \u2014 "),WG=a("a"),TNo=o("LayoutLMv2ForQuestionAnswering"),MNo=o(" (LayoutLMv2 model)"),ENo=l(),G4=a("li"),sme=a("strong"),CNo=o("led"),wNo=o(" \u2014 "),HG=a("a"),ANo=o("LEDForQuestionAnswering"),yNo=o(" (LED model)"),LNo=l(),O4=a("li"),lme=a("strong"),xNo=o("longformer"),$No=o(" \u2014 "),UG=a("a"),kNo=o("LongformerForQuestionAnswering"),SNo=o(" (Longformer model)"),RNo=l(),V4=a("li"),ime=a("strong"),BNo=o("lxmert"),PNo=o(" \u2014 "),JG=a("a"),INo=o("LxmertForQuestionAnswering"),qNo=o(" (LXMERT model)"),NNo=l(),X4=a("li"),dme=a("strong"),jNo=o("mbart"),DNo=o(" \u2014 "),YG=a("a"),GNo=o("MBartForQuestionAnswering"),ONo=o(" (mBART model)"),VNo=l(),z4=a("li"),cme=a("strong"),XNo=o("megatron-bert"),zNo=o(" \u2014 "),KG=a("a"),QNo=o("MegatronBertForQuestionAnswering"),WNo=o(" (MegatronBert model)"),HNo=l(),Q4=a("li"),fme=a("strong"),UNo=o("mobilebert"),JNo=o(" \u2014 "),ZG=a("a"),YNo=o("MobileBertForQuestionAnswering"),KNo=o(" (MobileBERT model)"),ZNo=l(),W4=a("li"),mme=a("strong"),ejo=o("mpnet"),ojo=o(" \u2014 "),eO=a("a"),rjo=o("MPNetForQuestionAnswering"),tjo=o(" (MPNet model)"),ajo=l(),H4=a("li"),gme=a("strong"),njo=o("nystromformer"),sjo=o(" \u2014 "),oO=a("a"),ljo=o("NystromformerForQuestionAnswering"),ijo=o(" (Nystromformer model)"),djo=l(),U4=a("li"),hme=a("strong"),cjo=o("qdqbert"),fjo=o(" \u2014 "),rO=a("a"),mjo=o("QDQBertForQuestionAnswering"),gjo=o(" (QDQBert model)"),hjo=l(),J4=a("li"),pme=a("strong"),pjo=o("reformer"),ujo=o(" \u2014 "),tO=a("a"),_jo=o("ReformerForQuestionAnswering"),bjo=o(" (Reformer model)"),vjo=l(),Y4=a("li"),ume=a("strong"),Fjo=o("rembert"),Tjo=o(" \u2014 "),aO=a("a"),Mjo=o("RemBertForQuestionAnswering"),Ejo=o(" (RemBERT model)"),Cjo=l(),K4=a("li"),_me=a("strong"),wjo=o("roberta"),Ajo=o(" \u2014 "),nO=a("a"),yjo=o("RobertaForQuestionAnswering"),Ljo=o(" (RoBERTa model)"),xjo=l(),Z4=a("li"),bme=a("strong"),$jo=o("roformer"),kjo=o(" \u2014 "),sO=a("a"),Sjo=o("RoFormerForQuestionAnswering"),Rjo=o(" (RoFormer model)"),Bjo=l(),ev=a("li"),vme=a("strong"),Pjo=o("splinter"),Ijo=o(" \u2014 "),lO=a("a"),qjo=o("SplinterForQuestionAnswering"),Njo=o(" (Splinter model)"),jjo=l(),ov=a("li"),Fme=a("strong"),Djo=o("squeezebert"),Gjo=o(" \u2014 "),iO=a("a"),Ojo=o("SqueezeBertForQuestionAnswering"),Vjo=o(" (SqueezeBERT model)"),Xjo=l(),rv=a("li"),Tme=a("strong"),zjo=o("xlm"),Qjo=o(" \u2014 "),dO=a("a"),Wjo=o("XLMForQuestionAnsweringSimple"),Hjo=o(" (XLM model)"),Ujo=l(),tv=a("li"),Mme=a("strong"),Jjo=o("xlm-roberta"),Yjo=o(" \u2014 "),cO=a("a"),Kjo=o("XLMRobertaForQuestionAnswering"),Zjo=o(" (XLM-RoBERTa model)"),eDo=l(),av=a("li"),Eme=a("strong"),oDo=o("xlm-roberta-xl"),rDo=o(" \u2014 "),fO=a("a"),tDo=o("XLMRobertaXLForQuestionAnswering"),aDo=o(" (XLM-RoBERTa-XL model)"),nDo=l(),nv=a("li"),Cme=a("strong"),sDo=o("xlnet"),lDo=o(" \u2014 "),mO=a("a"),iDo=o("XLNetForQuestionAnsweringSimple"),dDo=o(" (XLNet model)"),cDo=l(),sv=a("li"),wme=a("strong"),fDo=o("yoso"),mDo=o(" \u2014 "),gO=a("a"),gDo=o("YosoForQuestionAnswering"),hDo=o(" (YOSO model)"),pDo=l(),lv=a("p"),uDo=o("The model is set in evaluation mode by default using "),Ame=a("code"),_Do=o("model.eval()"),bDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),vDo=o("model.train()"),FDo=l(),F(iv.$$.fragment),bBe=l(),zi=a("h2"),dv=a("a"),Lme=a("span"),F(Ny.$$.fragment),TDo=l(),xme=a("span"),MDo=o("AutoModelForTableQuestionAnswering"),vBe=l(),Io=a("div"),F(jy.$$.fragment),EDo=l(),Qi=a("p"),CDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hO=a("a"),wDo=o("from_pretrained()"),ADo=o(" class method or the "),pO=a("a"),yDo=o("from_config()"),LDo=o(` class
method.`),xDo=l(),Dy=a("p"),$Do=o("This class cannot be instantiated directly using "),$me=a("code"),kDo=o("__init__()"),SDo=o(" (throws an error)."),RDo=l(),it=a("div"),F(Gy.$$.fragment),BDo=l(),kme=a("p"),PDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),IDo=l(),Wi=a("p"),qDo=o(`Note:
Loading a model from its configuration file does `),Sme=a("strong"),NDo=o("not"),jDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=a("a"),DDo=o("from_pretrained()"),GDo=o(" to load the model weights."),ODo=l(),F(cv.$$.fragment),VDo=l(),to=a("div"),F(Oy.$$.fragment),XDo=l(),Rme=a("p"),zDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),QDo=l(),Sa=a("p"),WDo=o("The model class to instantiate is selected based on the "),Bme=a("code"),HDo=o("model_type"),UDo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=a("code"),KDo=o("pretrained_model_name_or_path"),ZDo=o(":"),eGo=l(),qme=a("ul"),fv=a("li"),Nme=a("strong"),oGo=o("tapas"),rGo=o(" \u2014 "),_O=a("a"),tGo=o("TapasForQuestionAnswering"),aGo=o(" (TAPAS model)"),nGo=l(),mv=a("p"),sGo=o("The model is set in evaluation mode by default using "),jme=a("code"),lGo=o("model.eval()"),iGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),dGo=o("model.train()"),cGo=l(),F(gv.$$.fragment),FBe=l(),Hi=a("h2"),hv=a("a"),Gme=a("span"),F(Vy.$$.fragment),fGo=l(),Ome=a("span"),mGo=o("AutoModelForImageClassification"),TBe=l(),qo=a("div"),F(Xy.$$.fragment),gGo=l(),Ui=a("p"),hGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bO=a("a"),pGo=o("from_pretrained()"),uGo=o(" class method or the "),vO=a("a"),_Go=o("from_config()"),bGo=o(` class
method.`),vGo=l(),zy=a("p"),FGo=o("This class cannot be instantiated directly using "),Vme=a("code"),TGo=o("__init__()"),MGo=o(" (throws an error)."),EGo=l(),dt=a("div"),F(Qy.$$.fragment),CGo=l(),Xme=a("p"),wGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),AGo=l(),Ji=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),LGo=o("not"),xGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),$Go=o("from_pretrained()"),kGo=o(" to load the model weights."),SGo=l(),F(pv.$$.fragment),RGo=l(),ao=a("div"),F(Wy.$$.fragment),BGo=l(),Qme=a("p"),PGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),IGo=l(),Ra=a("p"),qGo=o("The model class to instantiate is selected based on the "),Wme=a("code"),NGo=o("model_type"),jGo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),DGo=o("pretrained_model_name_or_path"),GGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),OGo=o("pretrained_model_name_or_path"),VGo=o(":"),XGo=l(),ve=a("ul"),uv=a("li"),Jme=a("strong"),zGo=o("beit"),QGo=o(" \u2014 "),TO=a("a"),WGo=o("BeitForImageClassification"),HGo=o(" (BEiT model)"),UGo=l(),_v=a("li"),Yme=a("strong"),JGo=o("convnext"),YGo=o(" \u2014 "),MO=a("a"),KGo=o("ConvNextForImageClassification"),ZGo=o(" (ConvNext model)"),eOo=l(),bv=a("li"),Kme=a("strong"),oOo=o("data2vec-vision"),rOo=o(" \u2014 "),EO=a("a"),tOo=o("Data2VecVisionForImageClassification"),aOo=o(" (Data2VecVision model)"),nOo=l(),Ls=a("li"),Zme=a("strong"),sOo=o("deit"),lOo=o(" \u2014 "),CO=a("a"),iOo=o("DeiTForImageClassification"),dOo=o(" or "),wO=a("a"),cOo=o("DeiTForImageClassificationWithTeacher"),fOo=o(" (DeiT model)"),mOo=l(),vv=a("li"),ege=a("strong"),gOo=o("imagegpt"),hOo=o(" \u2014 "),AO=a("a"),pOo=o("ImageGPTForImageClassification"),uOo=o(" (ImageGPT model)"),_Oo=l(),ct=a("li"),oge=a("strong"),bOo=o("perceiver"),vOo=o(" \u2014 "),yO=a("a"),FOo=o("PerceiverForImageClassificationLearned"),TOo=o(" or "),LO=a("a"),MOo=o("PerceiverForImageClassificationFourier"),EOo=o(" or "),xO=a("a"),COo=o("PerceiverForImageClassificationConvProcessing"),wOo=o(" (Perceiver model)"),AOo=l(),Fv=a("li"),rge=a("strong"),yOo=o("poolformer"),LOo=o(" \u2014 "),$O=a("a"),xOo=o("PoolFormerForImageClassification"),$Oo=o(" (PoolFormer model)"),kOo=l(),Tv=a("li"),tge=a("strong"),SOo=o("regnet"),ROo=o(" \u2014 "),kO=a("a"),BOo=o("RegNetForImageClassification"),POo=o(" (RegNet model)"),IOo=l(),Mv=a("li"),age=a("strong"),qOo=o("resnet"),NOo=o(" \u2014 "),SO=a("a"),jOo=o("ResNetForImageClassification"),DOo=o(" (ResNet model)"),GOo=l(),Ev=a("li"),nge=a("strong"),OOo=o("segformer"),VOo=o(" \u2014 "),RO=a("a"),XOo=o("SegformerForImageClassification"),zOo=o(" (SegFormer model)"),QOo=l(),Cv=a("li"),sge=a("strong"),WOo=o("swin"),HOo=o(" \u2014 "),BO=a("a"),UOo=o("SwinForImageClassification"),JOo=o(" (Swin model)"),YOo=l(),wv=a("li"),lge=a("strong"),KOo=o("van"),ZOo=o(" \u2014 "),PO=a("a"),eVo=o("VanForImageClassification"),oVo=o(" (VAN model)"),rVo=l(),Av=a("li"),ige=a("strong"),tVo=o("vit"),aVo=o(" \u2014 "),IO=a("a"),nVo=o("ViTForImageClassification"),sVo=o(" (ViT model)"),lVo=l(),yv=a("p"),iVo=o("The model is set in evaluation mode by default using "),dge=a("code"),dVo=o("model.eval()"),cVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),fVo=o("model.train()"),mVo=l(),F(Lv.$$.fragment),MBe=l(),Yi=a("h2"),xv=a("a"),fge=a("span"),F(Hy.$$.fragment),gVo=l(),mge=a("span"),hVo=o("AutoModelForVision2Seq"),EBe=l(),No=a("div"),F(Uy.$$.fragment),pVo=l(),Ki=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qO=a("a"),_Vo=o("from_pretrained()"),bVo=o(" class method or the "),NO=a("a"),vVo=o("from_config()"),FVo=o(` class
method.`),TVo=l(),Jy=a("p"),MVo=o("This class cannot be instantiated directly using "),gge=a("code"),EVo=o("__init__()"),CVo=o(" (throws an error)."),wVo=l(),ft=a("div"),F(Yy.$$.fragment),AVo=l(),hge=a("p"),yVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),LVo=l(),Zi=a("p"),xVo=o(`Note:
Loading a model from its configuration file does `),pge=a("strong"),$Vo=o("not"),kVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=a("a"),SVo=o("from_pretrained()"),RVo=o(" to load the model weights."),BVo=l(),F($v.$$.fragment),PVo=l(),no=a("div"),F(Ky.$$.fragment),IVo=l(),uge=a("p"),qVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NVo=l(),Ba=a("p"),jVo=o("The model class to instantiate is selected based on the "),_ge=a("code"),DVo=o("model_type"),GVo=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),OVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),XVo=o("pretrained_model_name_or_path"),zVo=o(":"),QVo=l(),Fge=a("ul"),kv=a("li"),Tge=a("strong"),WVo=o("vision-encoder-decoder"),HVo=o(" \u2014 "),DO=a("a"),UVo=o("VisionEncoderDecoderModel"),JVo=o(" (Vision Encoder decoder model)"),YVo=l(),Sv=a("p"),KVo=o("The model is set in evaluation mode by default using "),Mge=a("code"),ZVo=o("model.eval()"),eXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),oXo=o("model.train()"),rXo=l(),F(Rv.$$.fragment),CBe=l(),ed=a("h2"),Bv=a("a"),Cge=a("span"),F(Zy.$$.fragment),tXo=l(),wge=a("span"),aXo=o("AutoModelForAudioClassification"),wBe=l(),jo=a("div"),F(eL.$$.fragment),nXo=l(),od=a("p"),sXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GO=a("a"),lXo=o("from_pretrained()"),iXo=o(" class method or the "),OO=a("a"),dXo=o("from_config()"),cXo=o(` class
method.`),fXo=l(),oL=a("p"),mXo=o("This class cannot be instantiated directly using "),Age=a("code"),gXo=o("__init__()"),hXo=o(" (throws an error)."),pXo=l(),mt=a("div"),F(rL.$$.fragment),uXo=l(),yge=a("p"),_Xo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),bXo=l(),rd=a("p"),vXo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),FXo=o("not"),TXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),MXo=o("from_pretrained()"),EXo=o(" to load the model weights."),CXo=l(),F(Pv.$$.fragment),wXo=l(),so=a("div"),F(tL.$$.fragment),AXo=l(),xge=a("p"),yXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),LXo=l(),Pa=a("p"),xXo=o("The model class to instantiate is selected based on the "),$ge=a("code"),$Xo=o("model_type"),kXo=o(` property of the config object (either
passed as an argument or loaded from `),kge=a("code"),SXo=o("pretrained_model_name_or_path"),RXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=a("code"),BXo=o("pretrained_model_name_or_path"),PXo=o(":"),IXo=l(),Ne=a("ul"),Iv=a("li"),Rge=a("strong"),qXo=o("data2vec-audio"),NXo=o(" \u2014 "),XO=a("a"),jXo=o("Data2VecAudioForSequenceClassification"),DXo=o(" (Data2VecAudio model)"),GXo=l(),qv=a("li"),Bge=a("strong"),OXo=o("hubert"),VXo=o(" \u2014 "),zO=a("a"),XXo=o("HubertForSequenceClassification"),zXo=o(" (Hubert model)"),QXo=l(),Nv=a("li"),Pge=a("strong"),WXo=o("sew"),HXo=o(" \u2014 "),QO=a("a"),UXo=o("SEWForSequenceClassification"),JXo=o(" (SEW model)"),YXo=l(),jv=a("li"),Ige=a("strong"),KXo=o("sew-d"),ZXo=o(" \u2014 "),WO=a("a"),ezo=o("SEWDForSequenceClassification"),ozo=o(" (SEW-D model)"),rzo=l(),Dv=a("li"),qge=a("strong"),tzo=o("unispeech"),azo=o(" \u2014 "),HO=a("a"),nzo=o("UniSpeechForSequenceClassification"),szo=o(" (UniSpeech model)"),lzo=l(),Gv=a("li"),Nge=a("strong"),izo=o("unispeech-sat"),dzo=o(" \u2014 "),UO=a("a"),czo=o("UniSpeechSatForSequenceClassification"),fzo=o(" (UniSpeechSat model)"),mzo=l(),Ov=a("li"),jge=a("strong"),gzo=o("wav2vec2"),hzo=o(" \u2014 "),JO=a("a"),pzo=o("Wav2Vec2ForSequenceClassification"),uzo=o(" (Wav2Vec2 model)"),_zo=l(),Vv=a("li"),Dge=a("strong"),bzo=o("wavlm"),vzo=o(" \u2014 "),YO=a("a"),Fzo=o("WavLMForSequenceClassification"),Tzo=o(" (WavLM model)"),Mzo=l(),Xv=a("p"),Ezo=o("The model is set in evaluation mode by default using "),Gge=a("code"),Czo=o("model.eval()"),wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=a("code"),Azo=o("model.train()"),yzo=l(),F(zv.$$.fragment),ABe=l(),td=a("h2"),Qv=a("a"),Vge=a("span"),F(aL.$$.fragment),Lzo=l(),Xge=a("span"),xzo=o("AutoModelForAudioFrameClassification"),yBe=l(),Do=a("div"),F(nL.$$.fragment),$zo=l(),ad=a("p"),kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KO=a("a"),Szo=o("from_pretrained()"),Rzo=o(" class method or the "),ZO=a("a"),Bzo=o("from_config()"),Pzo=o(` class
method.`),Izo=l(),sL=a("p"),qzo=o("This class cannot be instantiated directly using "),zge=a("code"),Nzo=o("__init__()"),jzo=o(" (throws an error)."),Dzo=l(),gt=a("div"),F(lL.$$.fragment),Gzo=l(),Qge=a("p"),Ozo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Vzo=l(),nd=a("p"),Xzo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),zzo=o("not"),Qzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" to load the model weights."),Uzo=l(),F(Wv.$$.fragment),Jzo=l(),lo=a("div"),F(iL.$$.fragment),Yzo=l(),Hge=a("p"),Kzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Zzo=l(),Ia=a("p"),eQo=o("The model class to instantiate is selected based on the "),Uge=a("code"),oQo=o("model_type"),rQo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),tQo=o("pretrained_model_name_or_path"),aQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),nQo=o("pretrained_model_name_or_path"),sQo=o(":"),lQo=l(),qa=a("ul"),Hv=a("li"),Kge=a("strong"),iQo=o("data2vec-audio"),dQo=o(" \u2014 "),oV=a("a"),cQo=o("Data2VecAudioForAudioFrameClassification"),fQo=o(" (Data2VecAudio model)"),mQo=l(),Uv=a("li"),Zge=a("strong"),gQo=o("unispeech-sat"),hQo=o(" \u2014 "),rV=a("a"),pQo=o("UniSpeechSatForAudioFrameClassification"),uQo=o(" (UniSpeechSat model)"),_Qo=l(),Jv=a("li"),ehe=a("strong"),bQo=o("wav2vec2"),vQo=o(" \u2014 "),tV=a("a"),FQo=o("Wav2Vec2ForAudioFrameClassification"),TQo=o(" (Wav2Vec2 model)"),MQo=l(),Yv=a("li"),ohe=a("strong"),EQo=o("wavlm"),CQo=o(" \u2014 "),aV=a("a"),wQo=o("WavLMForAudioFrameClassification"),AQo=o(" (WavLM model)"),yQo=l(),Kv=a("p"),LQo=o("The model is set in evaluation mode by default using "),rhe=a("code"),xQo=o("model.eval()"),$Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=a("code"),kQo=o("model.train()"),SQo=l(),F(Zv.$$.fragment),LBe=l(),sd=a("h2"),eF=a("a"),ahe=a("span"),F(dL.$$.fragment),RQo=l(),nhe=a("span"),BQo=o("AutoModelForCTC"),xBe=l(),Go=a("div"),F(cL.$$.fragment),PQo=l(),ld=a("p"),IQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nV=a("a"),qQo=o("from_pretrained()"),NQo=o(" class method or the "),sV=a("a"),jQo=o("from_config()"),DQo=o(` class
method.`),GQo=l(),fL=a("p"),OQo=o("This class cannot be instantiated directly using "),she=a("code"),VQo=o("__init__()"),XQo=o(" (throws an error)."),zQo=l(),ht=a("div"),F(mL.$$.fragment),QQo=l(),lhe=a("p"),WQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),HQo=l(),id=a("p"),UQo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),JQo=o("not"),YQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=a("a"),KQo=o("from_pretrained()"),ZQo=o(" to load the model weights."),eWo=l(),F(oF.$$.fragment),oWo=l(),io=a("div"),F(gL.$$.fragment),rWo=l(),dhe=a("p"),tWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),aWo=l(),Na=a("p"),nWo=o("The model class to instantiate is selected based on the "),che=a("code"),sWo=o("model_type"),lWo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),iWo=o("pretrained_model_name_or_path"),dWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),cWo=o("pretrained_model_name_or_path"),fWo=o(":"),mWo=l(),ke=a("ul"),rF=a("li"),ghe=a("strong"),gWo=o("data2vec-audio"),hWo=o(" \u2014 "),iV=a("a"),pWo=o("Data2VecAudioForCTC"),uWo=o(" (Data2VecAudio model)"),_Wo=l(),tF=a("li"),hhe=a("strong"),bWo=o("hubert"),vWo=o(" \u2014 "),dV=a("a"),FWo=o("HubertForCTC"),TWo=o(" (Hubert model)"),MWo=l(),aF=a("li"),phe=a("strong"),EWo=o("mctc"),CWo=o(" \u2014 "),uhe=a("code"),wWo=o("MCTCForCTC"),AWo=o(" (MCTC model)"),yWo=l(),nF=a("li"),_he=a("strong"),LWo=o("sew"),xWo=o(" \u2014 "),cV=a("a"),$Wo=o("SEWForCTC"),kWo=o(" (SEW model)"),SWo=l(),sF=a("li"),bhe=a("strong"),RWo=o("sew-d"),BWo=o(" \u2014 "),fV=a("a"),PWo=o("SEWDForCTC"),IWo=o(" (SEW-D model)"),qWo=l(),lF=a("li"),vhe=a("strong"),NWo=o("unispeech"),jWo=o(" \u2014 "),mV=a("a"),DWo=o("UniSpeechForCTC"),GWo=o(" (UniSpeech model)"),OWo=l(),iF=a("li"),Fhe=a("strong"),VWo=o("unispeech-sat"),XWo=o(" \u2014 "),gV=a("a"),zWo=o("UniSpeechSatForCTC"),QWo=o(" (UniSpeechSat model)"),WWo=l(),dF=a("li"),The=a("strong"),HWo=o("wav2vec2"),UWo=o(" \u2014 "),hV=a("a"),JWo=o("Wav2Vec2ForCTC"),YWo=o(" (Wav2Vec2 model)"),KWo=l(),cF=a("li"),Mhe=a("strong"),ZWo=o("wavlm"),eHo=o(" \u2014 "),pV=a("a"),oHo=o("WavLMForCTC"),rHo=o(" (WavLM model)"),tHo=l(),fF=a("p"),aHo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),nHo=o("model.eval()"),sHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),lHo=o("model.train()"),iHo=l(),F(mF.$$.fragment),$Be=l(),dd=a("h2"),gF=a("a"),whe=a("span"),F(hL.$$.fragment),dHo=l(),Ahe=a("span"),cHo=o("AutoModelForSpeechSeq2Seq"),kBe=l(),Oo=a("div"),F(pL.$$.fragment),fHo=l(),cd=a("p"),mHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uV=a("a"),gHo=o("from_pretrained()"),hHo=o(" class method or the "),_V=a("a"),pHo=o("from_config()"),uHo=o(` class
method.`),_Ho=l(),uL=a("p"),bHo=o("This class cannot be instantiated directly using "),yhe=a("code"),vHo=o("__init__()"),FHo=o(" (throws an error)."),THo=l(),pt=a("div"),F(_L.$$.fragment),MHo=l(),Lhe=a("p"),EHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CHo=l(),fd=a("p"),wHo=o(`Note:
Loading a model from its configuration file does `),xhe=a("strong"),AHo=o("not"),yHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=a("a"),LHo=o("from_pretrained()"),xHo=o(" to load the model weights."),$Ho=l(),F(hF.$$.fragment),kHo=l(),co=a("div"),F(bL.$$.fragment),SHo=l(),$he=a("p"),RHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BHo=l(),ja=a("p"),PHo=o("The model class to instantiate is selected based on the "),khe=a("code"),IHo=o("model_type"),qHo=o(` property of the config object (either
passed as an argument or loaded from `),She=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(":"),OHo=l(),vL=a("ul"),pF=a("li"),Bhe=a("strong"),VHo=o("speech-encoder-decoder"),XHo=o(" \u2014 "),vV=a("a"),zHo=o("SpeechEncoderDecoderModel"),QHo=o(" (Speech Encoder decoder model)"),WHo=l(),uF=a("li"),Phe=a("strong"),HHo=o("speech_to_text"),UHo=o(" \u2014 "),FV=a("a"),JHo=o("Speech2TextForConditionalGeneration"),YHo=o(" (Speech2Text model)"),KHo=l(),_F=a("p"),ZHo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),eUo=o("model.eval()"),oUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),rUo=o("model.train()"),tUo=l(),F(bF.$$.fragment),SBe=l(),md=a("h2"),vF=a("a"),Nhe=a("span"),F(FL.$$.fragment),aUo=l(),jhe=a("span"),nUo=o("AutoModelForAudioXVector"),RBe=l(),Vo=a("div"),F(TL.$$.fragment),sUo=l(),gd=a("p"),lUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TV=a("a"),iUo=o("from_pretrained()"),dUo=o(" class method or the "),MV=a("a"),cUo=o("from_config()"),fUo=o(` class
method.`),mUo=l(),ML=a("p"),gUo=o("This class cannot be instantiated directly using "),Dhe=a("code"),hUo=o("__init__()"),pUo=o(" (throws an error)."),uUo=l(),ut=a("div"),F(EL.$$.fragment),_Uo=l(),Ghe=a("p"),bUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),vUo=l(),hd=a("p"),FUo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),TUo=o("not"),MUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),EUo=o("from_pretrained()"),CUo=o(" to load the model weights."),wUo=l(),F(FF.$$.fragment),AUo=l(),fo=a("div"),F(CL.$$.fragment),yUo=l(),Vhe=a("p"),LUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),xUo=l(),Da=a("p"),$Uo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),kUo=o("model_type"),SUo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),PUo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),Ga=a("ul"),TF=a("li"),Whe=a("strong"),NUo=o("data2vec-audio"),jUo=o(" \u2014 "),CV=a("a"),DUo=o("Data2VecAudioForXVector"),GUo=o(" (Data2VecAudio model)"),OUo=l(),MF=a("li"),Hhe=a("strong"),VUo=o("unispeech-sat"),XUo=o(" \u2014 "),wV=a("a"),zUo=o("UniSpeechSatForXVector"),QUo=o(" (UniSpeechSat model)"),WUo=l(),EF=a("li"),Uhe=a("strong"),HUo=o("wav2vec2"),UUo=o(" \u2014 "),AV=a("a"),JUo=o("Wav2Vec2ForXVector"),YUo=o(" (Wav2Vec2 model)"),KUo=l(),CF=a("li"),Jhe=a("strong"),ZUo=o("wavlm"),eJo=o(" \u2014 "),yV=a("a"),oJo=o("WavLMForXVector"),rJo=o(" (WavLM model)"),tJo=l(),wF=a("p"),aJo=o("The model is set in evaluation mode by default using "),Yhe=a("code"),nJo=o("model.eval()"),sJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=a("code"),lJo=o("model.train()"),iJo=l(),F(AF.$$.fragment),BBe=l(),pd=a("h2"),yF=a("a"),Zhe=a("span"),F(wL.$$.fragment),dJo=l(),epe=a("span"),cJo=o("AutoModelForMaskedImageModeling"),PBe=l(),Xo=a("div"),F(AL.$$.fragment),fJo=l(),ud=a("p"),mJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LV=a("a"),gJo=o("from_pretrained()"),hJo=o(" class method or the "),xV=a("a"),pJo=o("from_config()"),uJo=o(` class
method.`),_Jo=l(),yL=a("p"),bJo=o("This class cannot be instantiated directly using "),ope=a("code"),vJo=o("__init__()"),FJo=o(" (throws an error)."),TJo=l(),_t=a("div"),F(LL.$$.fragment),MJo=l(),rpe=a("p"),EJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),CJo=l(),_d=a("p"),wJo=o(`Note:
Loading a model from its configuration file does `),tpe=a("strong"),AJo=o("not"),yJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),LJo=o("from_pretrained()"),xJo=o(" to load the model weights."),$Jo=l(),F(LF.$$.fragment),kJo=l(),mo=a("div"),F(xL.$$.fragment),SJo=l(),ape=a("p"),RJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),BJo=l(),Oa=a("p"),PJo=o("The model class to instantiate is selected based on the "),npe=a("code"),IJo=o("model_type"),qJo=o(` property of the config object (either
passed as an argument or loaded from `),spe=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=a("code"),DJo=o("pretrained_model_name_or_path"),GJo=o(":"),OJo=l(),bd=a("ul"),xF=a("li"),ipe=a("strong"),VJo=o("deit"),XJo=o(" \u2014 "),kV=a("a"),zJo=o("DeiTForMaskedImageModeling"),QJo=o(" (DeiT model)"),WJo=l(),$F=a("li"),dpe=a("strong"),HJo=o("swin"),UJo=o(" \u2014 "),SV=a("a"),JJo=o("SwinForMaskedImageModeling"),YJo=o(" (Swin model)"),KJo=l(),kF=a("li"),cpe=a("strong"),ZJo=o("vit"),eYo=o(" \u2014 "),RV=a("a"),oYo=o("ViTForMaskedImageModeling"),rYo=o(" (ViT model)"),tYo=l(),SF=a("p"),aYo=o("The model is set in evaluation mode by default using "),fpe=a("code"),nYo=o("model.eval()"),sYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=a("code"),lYo=o("model.train()"),iYo=l(),F(RF.$$.fragment),IBe=l(),vd=a("h2"),BF=a("a"),gpe=a("span"),F($L.$$.fragment),dYo=l(),hpe=a("span"),cYo=o("AutoModelForObjectDetection"),qBe=l(),zo=a("div"),F(kL.$$.fragment),fYo=l(),Fd=a("p"),mYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BV=a("a"),gYo=o("from_pretrained()"),hYo=o(" class method or the "),PV=a("a"),pYo=o("from_config()"),uYo=o(` class
method.`),_Yo=l(),SL=a("p"),bYo=o("This class cannot be instantiated directly using "),ppe=a("code"),vYo=o("__init__()"),FYo=o(" (throws an error)."),TYo=l(),bt=a("div"),F(RL.$$.fragment),MYo=l(),upe=a("p"),EYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),CYo=l(),Td=a("p"),wYo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),AYo=o("not"),yYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),LYo=o("from_pretrained()"),xYo=o(" to load the model weights."),$Yo=l(),F(PF.$$.fragment),kYo=l(),go=a("div"),F(BL.$$.fragment),SYo=l(),bpe=a("p"),RYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),BYo=l(),Va=a("p"),PYo=o("The model class to instantiate is selected based on the "),vpe=a("code"),IYo=o("model_type"),qYo=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),NYo=o("pretrained_model_name_or_path"),jYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),DYo=o("pretrained_model_name_or_path"),GYo=o(":"),OYo=l(),Mpe=a("ul"),IF=a("li"),Epe=a("strong"),VYo=o("detr"),XYo=o(" \u2014 "),qV=a("a"),zYo=o("DetrForObjectDetection"),QYo=o(" (DETR model)"),WYo=l(),qF=a("p"),HYo=o("The model is set in evaluation mode by default using "),Cpe=a("code"),UYo=o("model.eval()"),JYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=a("code"),YYo=o("model.train()"),KYo=l(),F(NF.$$.fragment),NBe=l(),Md=a("h2"),jF=a("a"),Ape=a("span"),F(PL.$$.fragment),ZYo=l(),ype=a("span"),eKo=o("AutoModelForImageSegmentation"),jBe=l(),Qo=a("div"),F(IL.$$.fragment),oKo=l(),Ed=a("p"),rKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NV=a("a"),tKo=o("from_pretrained()"),aKo=o(" class method or the "),jV=a("a"),nKo=o("from_config()"),sKo=o(` class
method.`),lKo=l(),qL=a("p"),iKo=o("This class cannot be instantiated directly using "),Lpe=a("code"),dKo=o("__init__()"),cKo=o(" (throws an error)."),fKo=l(),vt=a("div"),F(NL.$$.fragment),mKo=l(),xpe=a("p"),gKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hKo=l(),Cd=a("p"),pKo=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),uKo=o("not"),_Ko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),bKo=o("from_pretrained()"),vKo=o(" to load the model weights."),FKo=l(),F(DF.$$.fragment),TKo=l(),ho=a("div"),F(jL.$$.fragment),MKo=l(),kpe=a("p"),EKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CKo=l(),Xa=a("p"),wKo=o("The model class to instantiate is selected based on the "),Spe=a("code"),AKo=o("model_type"),yKo=o(` property of the config object (either
passed as an argument or loaded from `),Rpe=a("code"),LKo=o("pretrained_model_name_or_path"),xKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),$Ko=o("pretrained_model_name_or_path"),kKo=o(":"),SKo=l(),Ppe=a("ul"),GF=a("li"),Ipe=a("strong"),RKo=o("detr"),BKo=o(" \u2014 "),GV=a("a"),PKo=o("DetrForSegmentation"),IKo=o(" (DETR model)"),qKo=l(),OF=a("p"),NKo=o("The model is set in evaluation mode by default using "),qpe=a("code"),jKo=o("model.eval()"),DKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=a("code"),GKo=o("model.train()"),OKo=l(),F(VF.$$.fragment),DBe=l(),wd=a("h2"),XF=a("a"),jpe=a("span"),F(DL.$$.fragment),VKo=l(),Dpe=a("span"),XKo=o("AutoModelForSemanticSegmentation"),GBe=l(),Wo=a("div"),F(GL.$$.fragment),zKo=l(),Ad=a("p"),QKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OV=a("a"),WKo=o("from_pretrained()"),HKo=o(" class method or the "),VV=a("a"),UKo=o("from_config()"),JKo=o(` class
method.`),YKo=l(),OL=a("p"),KKo=o("This class cannot be instantiated directly using "),Gpe=a("code"),ZKo=o("__init__()"),eZo=o(" (throws an error)."),oZo=l(),Ft=a("div"),F(VL.$$.fragment),rZo=l(),Ope=a("p"),tZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),aZo=l(),yd=a("p"),nZo=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),sZo=o("not"),lZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),iZo=o("from_pretrained()"),dZo=o(" to load the model weights."),cZo=l(),F(zF.$$.fragment),fZo=l(),po=a("div"),F(XL.$$.fragment),mZo=l(),Xpe=a("p"),gZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hZo=l(),za=a("p"),pZo=o("The model class to instantiate is selected based on the "),zpe=a("code"),uZo=o("model_type"),_Zo=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),FZo=o("pretrained_model_name_or_path"),TZo=o(":"),MZo=l(),Qa=a("ul"),QF=a("li"),Hpe=a("strong"),EZo=o("beit"),CZo=o(" \u2014 "),zV=a("a"),wZo=o("BeitForSemanticSegmentation"),AZo=o(" (BEiT model)"),yZo=l(),WF=a("li"),Upe=a("strong"),LZo=o("data2vec-vision"),xZo=o(" \u2014 "),QV=a("a"),$Zo=o("Data2VecVisionForSemanticSegmentation"),kZo=o(" (Data2VecVision model)"),SZo=l(),HF=a("li"),Jpe=a("strong"),RZo=o("dpt"),BZo=o(" \u2014 "),WV=a("a"),PZo=o("DPTForSemanticSegmentation"),IZo=o(" (DPT model)"),qZo=l(),UF=a("li"),Ype=a("strong"),NZo=o("segformer"),jZo=o(" \u2014 "),HV=a("a"),DZo=o("SegformerForSemanticSegmentation"),GZo=o(" (SegFormer model)"),OZo=l(),JF=a("p"),VZo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),XZo=o("model.eval()"),zZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),QZo=o("model.train()"),WZo=l(),F(YF.$$.fragment),OBe=l(),Ld=a("h2"),KF=a("a"),eue=a("span"),F(zL.$$.fragment),HZo=l(),oue=a("span"),UZo=o("AutoModelForInstanceSegmentation"),VBe=l(),Ho=a("div"),F(QL.$$.fragment),JZo=l(),xd=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UV=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),JV=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),WL=a("p"),ter=o("This class cannot be instantiated directly using "),rue=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),Tt=a("div"),F(HL.$$.fragment),ler=l(),tue=a("p"),ier=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),der=l(),$d=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),fer=o("not"),mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),per=l(),F(ZF.$$.fragment),uer=l(),uo=a("div"),F(UL.$$.fragment),_er=l(),nue=a("p"),ber=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ver=l(),Wa=a("p"),Fer=o("The model class to instantiate is selected based on the "),sue=a("code"),Ter=o("model_type"),Mer=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),Eer=o("pretrained_model_name_or_path"),Cer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(":"),yer=l(),due=a("ul"),e0=a("li"),cue=a("strong"),Ler=o("maskformer"),xer=o(" \u2014 "),KV=a("a"),$er=o("MaskFormerForInstanceSegmentation"),ker=o(" (MaskFormer model)"),Ser=l(),o0=a("p"),Rer=o("The model is set in evaluation mode by default using "),fue=a("code"),Ber=o("model.eval()"),Per=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=a("code"),Ier=o("model.train()"),qer=l(),F(r0.$$.fragment),XBe=l(),kd=a("h2"),t0=a("a"),gue=a("span"),F(JL.$$.fragment),Ner=l(),hue=a("span"),jer=o("TFAutoModel"),zBe=l(),Uo=a("div"),F(YL.$$.fragment),Der=l(),Sd=a("p"),Ger=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZV=a("a"),Oer=o("from_pretrained()"),Ver=o(" class method or the "),eX=a("a"),Xer=o("from_config()"),zer=o(` class
method.`),Qer=l(),KL=a("p"),Wer=o("This class cannot be instantiated directly using "),pue=a("code"),Her=o("__init__()"),Uer=o(" (throws an error)."),Jer=l(),Mt=a("div"),F(ZL.$$.fragment),Yer=l(),uue=a("p"),Ker=o("Instantiates one of the base model classes of the library from a configuration."),Zer=l(),Rd=a("p"),eor=o(`Note:
Loading a model from its configuration file does `),_ue=a("strong"),oor=o("not"),ror=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),tor=o("from_pretrained()"),aor=o(" to load the model weights."),nor=l(),F(a0.$$.fragment),sor=l(),Mr=a("div"),F(e8.$$.fragment),lor=l(),bue=a("p"),ior=o("Instantiate one of the base model classes of the library from a pretrained model."),dor=l(),Ha=a("p"),cor=o("The model class to instantiate is selected based on the "),vue=a("code"),mor=o("model_type"),gor=o(` property of the config object (either
passed as an argument or loaded from `),Fue=a("code"),hor=o("pretrained_model_name_or_path"),por=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=a("code"),uor=o("pretrained_model_name_or_path"),_or=o(":"),bor=l(),j=a("ul"),n0=a("li"),Mue=a("strong"),vor=o("albert"),For=o(" \u2014 "),rX=a("a"),Tor=o("TFAlbertModel"),Mor=o(" (ALBERT model)"),Eor=l(),s0=a("li"),Eue=a("strong"),Cor=o("bart"),wor=o(" \u2014 "),tX=a("a"),Aor=o("TFBartModel"),yor=o(" (BART model)"),Lor=l(),l0=a("li"),Cue=a("strong"),xor=o("bert"),$or=o(" \u2014 "),aX=a("a"),kor=o("TFBertModel"),Sor=o(" (BERT model)"),Ror=l(),i0=a("li"),wue=a("strong"),Bor=o("blenderbot"),Por=o(" \u2014 "),nX=a("a"),Ior=o("TFBlenderbotModel"),qor=o(" (Blenderbot model)"),Nor=l(),d0=a("li"),Aue=a("strong"),jor=o("blenderbot-small"),Dor=o(" \u2014 "),sX=a("a"),Gor=o("TFBlenderbotSmallModel"),Oor=o(" (BlenderbotSmall model)"),Vor=l(),c0=a("li"),yue=a("strong"),Xor=o("camembert"),zor=o(" \u2014 "),lX=a("a"),Qor=o("TFCamembertModel"),Wor=o(" (CamemBERT model)"),Hor=l(),f0=a("li"),Lue=a("strong"),Uor=o("clip"),Jor=o(" \u2014 "),iX=a("a"),Yor=o("TFCLIPModel"),Kor=o(" (CLIP model)"),Zor=l(),m0=a("li"),xue=a("strong"),err=o("convbert"),orr=o(" \u2014 "),dX=a("a"),rrr=o("TFConvBertModel"),trr=o(" (ConvBERT model)"),arr=l(),g0=a("li"),$ue=a("strong"),nrr=o("convnext"),srr=o(" \u2014 "),cX=a("a"),lrr=o("TFConvNextModel"),irr=o(" (ConvNext model)"),drr=l(),h0=a("li"),kue=a("strong"),crr=o("ctrl"),frr=o(" \u2014 "),fX=a("a"),mrr=o("TFCTRLModel"),grr=o(" (CTRL model)"),hrr=l(),p0=a("li"),Sue=a("strong"),prr=o("deberta"),urr=o(" \u2014 "),mX=a("a"),_rr=o("TFDebertaModel"),brr=o(" (DeBERTa model)"),vrr=l(),u0=a("li"),Rue=a("strong"),Frr=o("deberta-v2"),Trr=o(" \u2014 "),gX=a("a"),Mrr=o("TFDebertaV2Model"),Err=o(" (DeBERTa-v2 model)"),Crr=l(),_0=a("li"),Bue=a("strong"),wrr=o("distilbert"),Arr=o(" \u2014 "),hX=a("a"),yrr=o("TFDistilBertModel"),Lrr=o(" (DistilBERT model)"),xrr=l(),b0=a("li"),Pue=a("strong"),$rr=o("dpr"),krr=o(" \u2014 "),pX=a("a"),Srr=o("TFDPRQuestionEncoder"),Rrr=o(" (DPR model)"),Brr=l(),v0=a("li"),Iue=a("strong"),Prr=o("electra"),Irr=o(" \u2014 "),uX=a("a"),qrr=o("TFElectraModel"),Nrr=o(" (ELECTRA model)"),jrr=l(),F0=a("li"),que=a("strong"),Drr=o("flaubert"),Grr=o(" \u2014 "),_X=a("a"),Orr=o("TFFlaubertModel"),Vrr=o(" (FlauBERT model)"),Xrr=l(),xs=a("li"),Nue=a("strong"),zrr=o("funnel"),Qrr=o(" \u2014 "),bX=a("a"),Wrr=o("TFFunnelModel"),Hrr=o(" or "),vX=a("a"),Urr=o("TFFunnelBaseModel"),Jrr=o(" (Funnel Transformer model)"),Yrr=l(),T0=a("li"),jue=a("strong"),Krr=o("gpt2"),Zrr=o(" \u2014 "),FX=a("a"),etr=o("TFGPT2Model"),otr=o(" (OpenAI GPT-2 model)"),rtr=l(),M0=a("li"),Due=a("strong"),ttr=o("gptj"),atr=o(" \u2014 "),TX=a("a"),ntr=o("TFGPTJModel"),str=o(" (GPT-J model)"),ltr=l(),E0=a("li"),Gue=a("strong"),itr=o("hubert"),dtr=o(" \u2014 "),MX=a("a"),ctr=o("TFHubertModel"),ftr=o(" (Hubert model)"),mtr=l(),C0=a("li"),Oue=a("strong"),gtr=o("layoutlm"),htr=o(" \u2014 "),EX=a("a"),ptr=o("TFLayoutLMModel"),utr=o(" (LayoutLM model)"),_tr=l(),w0=a("li"),Vue=a("strong"),btr=o("led"),vtr=o(" \u2014 "),CX=a("a"),Ftr=o("TFLEDModel"),Ttr=o(" (LED model)"),Mtr=l(),A0=a("li"),Xue=a("strong"),Etr=o("longformer"),Ctr=o(" \u2014 "),wX=a("a"),wtr=o("TFLongformerModel"),Atr=o(" (Longformer model)"),ytr=l(),y0=a("li"),zue=a("strong"),Ltr=o("lxmert"),xtr=o(" \u2014 "),AX=a("a"),$tr=o("TFLxmertModel"),ktr=o(" (LXMERT model)"),Str=l(),L0=a("li"),Que=a("strong"),Rtr=o("marian"),Btr=o(" \u2014 "),yX=a("a"),Ptr=o("TFMarianModel"),Itr=o(" (Marian model)"),qtr=l(),x0=a("li"),Wue=a("strong"),Ntr=o("mbart"),jtr=o(" \u2014 "),LX=a("a"),Dtr=o("TFMBartModel"),Gtr=o(" (mBART model)"),Otr=l(),$0=a("li"),Hue=a("strong"),Vtr=o("mobilebert"),Xtr=o(" \u2014 "),xX=a("a"),ztr=o("TFMobileBertModel"),Qtr=o(" (MobileBERT model)"),Wtr=l(),k0=a("li"),Uue=a("strong"),Htr=o("mpnet"),Utr=o(" \u2014 "),$X=a("a"),Jtr=o("TFMPNetModel"),Ytr=o(" (MPNet model)"),Ktr=l(),S0=a("li"),Jue=a("strong"),Ztr=o("mt5"),ear=o(" \u2014 "),kX=a("a"),oar=o("TFMT5Model"),rar=o(" (mT5 model)"),tar=l(),R0=a("li"),Yue=a("strong"),aar=o("openai-gpt"),nar=o(" \u2014 "),SX=a("a"),sar=o("TFOpenAIGPTModel"),lar=o(" (OpenAI GPT model)"),iar=l(),B0=a("li"),Kue=a("strong"),dar=o("pegasus"),car=o(" \u2014 "),RX=a("a"),far=o("TFPegasusModel"),mar=o(" (Pegasus model)"),gar=l(),P0=a("li"),Zue=a("strong"),har=o("rembert"),par=o(" \u2014 "),BX=a("a"),uar=o("TFRemBertModel"),_ar=o(" (RemBERT model)"),bar=l(),I0=a("li"),e_e=a("strong"),Far=o("roberta"),Tar=o(" \u2014 "),PX=a("a"),Mar=o("TFRobertaModel"),Ear=o(" (RoBERTa model)"),Car=l(),q0=a("li"),o_e=a("strong"),war=o("roformer"),Aar=o(" \u2014 "),IX=a("a"),yar=o("TFRoFormerModel"),Lar=o(" (RoFormer model)"),xar=l(),N0=a("li"),r_e=a("strong"),$ar=o("speech_to_text"),kar=o(" \u2014 "),qX=a("a"),Sar=o("TFSpeech2TextModel"),Rar=o(" (Speech2Text model)"),Bar=l(),j0=a("li"),t_e=a("strong"),Par=o("t5"),Iar=o(" \u2014 "),NX=a("a"),qar=o("TFT5Model"),Nar=o(" (T5 model)"),jar=l(),D0=a("li"),a_e=a("strong"),Dar=o("tapas"),Gar=o(" \u2014 "),jX=a("a"),Oar=o("TFTapasModel"),Var=o(" (TAPAS model)"),Xar=l(),G0=a("li"),n_e=a("strong"),zar=o("transfo-xl"),Qar=o(" \u2014 "),DX=a("a"),War=o("TFTransfoXLModel"),Har=o(" (Transformer-XL model)"),Uar=l(),O0=a("li"),s_e=a("strong"),Jar=o("vit"),Yar=o(" \u2014 "),GX=a("a"),Kar=o("TFViTModel"),Zar=o(" (ViT model)"),enr=l(),V0=a("li"),l_e=a("strong"),onr=o("vit_mae"),rnr=o(" \u2014 "),OX=a("a"),tnr=o("TFViTMAEModel"),anr=o(" (ViTMAE model)"),nnr=l(),X0=a("li"),i_e=a("strong"),snr=o("wav2vec2"),lnr=o(" \u2014 "),VX=a("a"),inr=o("TFWav2Vec2Model"),dnr=o(" (Wav2Vec2 model)"),cnr=l(),z0=a("li"),d_e=a("strong"),fnr=o("xlm"),mnr=o(" \u2014 "),XX=a("a"),gnr=o("TFXLMModel"),hnr=o(" (XLM model)"),pnr=l(),Q0=a("li"),c_e=a("strong"),unr=o("xlm-roberta"),_nr=o(" \u2014 "),zX=a("a"),bnr=o("TFXLMRobertaModel"),vnr=o(" (XLM-RoBERTa model)"),Fnr=l(),W0=a("li"),f_e=a("strong"),Tnr=o("xlnet"),Mnr=o(" \u2014 "),QX=a("a"),Enr=o("TFXLNetModel"),Cnr=o(" (XLNet model)"),wnr=l(),F(H0.$$.fragment),QBe=l(),Bd=a("h2"),U0=a("a"),m_e=a("span"),F(o8.$$.fragment),Anr=l(),g_e=a("span"),ynr=o("TFAutoModelForPreTraining"),WBe=l(),Jo=a("div"),F(r8.$$.fragment),Lnr=l(),Pd=a("p"),xnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WX=a("a"),$nr=o("from_pretrained()"),knr=o(" class method or the "),HX=a("a"),Snr=o("from_config()"),Rnr=o(` class
method.`),Bnr=l(),t8=a("p"),Pnr=o("This class cannot be instantiated directly using "),h_e=a("code"),Inr=o("__init__()"),qnr=o(" (throws an error)."),Nnr=l(),Et=a("div"),F(a8.$$.fragment),jnr=l(),p_e=a("p"),Dnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gnr=l(),Id=a("p"),Onr=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),Vnr=o("not"),Xnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),znr=o("from_pretrained()"),Qnr=o(" to load the model weights."),Wnr=l(),F(J0.$$.fragment),Hnr=l(),Er=a("div"),F(n8.$$.fragment),Unr=l(),__e=a("p"),Jnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ynr=l(),Ua=a("p"),Knr=o("The model class to instantiate is selected based on the "),b_e=a("code"),Znr=o("model_type"),esr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),osr=o("pretrained_model_name_or_path"),rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),tsr=o("pretrained_model_name_or_path"),asr=o(":"),nsr=l(),ne=a("ul"),Y0=a("li"),T_e=a("strong"),ssr=o("albert"),lsr=o(" \u2014 "),JX=a("a"),isr=o("TFAlbertForPreTraining"),dsr=o(" (ALBERT model)"),csr=l(),K0=a("li"),M_e=a("strong"),fsr=o("bart"),msr=o(" \u2014 "),YX=a("a"),gsr=o("TFBartForConditionalGeneration"),hsr=o(" (BART model)"),psr=l(),Z0=a("li"),E_e=a("strong"),usr=o("bert"),_sr=o(" \u2014 "),KX=a("a"),bsr=o("TFBertForPreTraining"),vsr=o(" (BERT model)"),Fsr=l(),e6=a("li"),C_e=a("strong"),Tsr=o("camembert"),Msr=o(" \u2014 "),ZX=a("a"),Esr=o("TFCamembertForMaskedLM"),Csr=o(" (CamemBERT model)"),wsr=l(),o6=a("li"),w_e=a("strong"),Asr=o("ctrl"),ysr=o(" \u2014 "),ez=a("a"),Lsr=o("TFCTRLLMHeadModel"),xsr=o(" (CTRL model)"),$sr=l(),r6=a("li"),A_e=a("strong"),ksr=o("distilbert"),Ssr=o(" \u2014 "),oz=a("a"),Rsr=o("TFDistilBertForMaskedLM"),Bsr=o(" (DistilBERT model)"),Psr=l(),t6=a("li"),y_e=a("strong"),Isr=o("electra"),qsr=o(" \u2014 "),rz=a("a"),Nsr=o("TFElectraForPreTraining"),jsr=o(" (ELECTRA model)"),Dsr=l(),a6=a("li"),L_e=a("strong"),Gsr=o("flaubert"),Osr=o(" \u2014 "),tz=a("a"),Vsr=o("TFFlaubertWithLMHeadModel"),Xsr=o(" (FlauBERT model)"),zsr=l(),n6=a("li"),x_e=a("strong"),Qsr=o("funnel"),Wsr=o(" \u2014 "),az=a("a"),Hsr=o("TFFunnelForPreTraining"),Usr=o(" (Funnel Transformer model)"),Jsr=l(),s6=a("li"),$_e=a("strong"),Ysr=o("gpt2"),Ksr=o(" \u2014 "),nz=a("a"),Zsr=o("TFGPT2LMHeadModel"),elr=o(" (OpenAI GPT-2 model)"),olr=l(),l6=a("li"),k_e=a("strong"),rlr=o("layoutlm"),tlr=o(" \u2014 "),sz=a("a"),alr=o("TFLayoutLMForMaskedLM"),nlr=o(" (LayoutLM model)"),slr=l(),i6=a("li"),S_e=a("strong"),llr=o("lxmert"),ilr=o(" \u2014 "),lz=a("a"),dlr=o("TFLxmertForPreTraining"),clr=o(" (LXMERT model)"),flr=l(),d6=a("li"),R_e=a("strong"),mlr=o("mobilebert"),glr=o(" \u2014 "),iz=a("a"),hlr=o("TFMobileBertForPreTraining"),plr=o(" (MobileBERT model)"),ulr=l(),c6=a("li"),B_e=a("strong"),_lr=o("mpnet"),blr=o(" \u2014 "),dz=a("a"),vlr=o("TFMPNetForMaskedLM"),Flr=o(" (MPNet model)"),Tlr=l(),f6=a("li"),P_e=a("strong"),Mlr=o("openai-gpt"),Elr=o(" \u2014 "),cz=a("a"),Clr=o("TFOpenAIGPTLMHeadModel"),wlr=o(" (OpenAI GPT model)"),Alr=l(),m6=a("li"),I_e=a("strong"),ylr=o("roberta"),Llr=o(" \u2014 "),fz=a("a"),xlr=o("TFRobertaForMaskedLM"),$lr=o(" (RoBERTa model)"),klr=l(),g6=a("li"),q_e=a("strong"),Slr=o("t5"),Rlr=o(" \u2014 "),mz=a("a"),Blr=o("TFT5ForConditionalGeneration"),Plr=o(" (T5 model)"),Ilr=l(),h6=a("li"),N_e=a("strong"),qlr=o("tapas"),Nlr=o(" \u2014 "),gz=a("a"),jlr=o("TFTapasForMaskedLM"),Dlr=o(" (TAPAS model)"),Glr=l(),p6=a("li"),j_e=a("strong"),Olr=o("transfo-xl"),Vlr=o(" \u2014 "),hz=a("a"),Xlr=o("TFTransfoXLLMHeadModel"),zlr=o(" (Transformer-XL model)"),Qlr=l(),u6=a("li"),D_e=a("strong"),Wlr=o("vit_mae"),Hlr=o(" \u2014 "),pz=a("a"),Ulr=o("TFViTMAEForPreTraining"),Jlr=o(" (ViTMAE model)"),Ylr=l(),_6=a("li"),G_e=a("strong"),Klr=o("xlm"),Zlr=o(" \u2014 "),uz=a("a"),eir=o("TFXLMWithLMHeadModel"),oir=o(" (XLM model)"),rir=l(),b6=a("li"),O_e=a("strong"),tir=o("xlm-roberta"),air=o(" \u2014 "),_z=a("a"),nir=o("TFXLMRobertaForMaskedLM"),sir=o(" (XLM-RoBERTa model)"),lir=l(),v6=a("li"),V_e=a("strong"),iir=o("xlnet"),dir=o(" \u2014 "),bz=a("a"),cir=o("TFXLNetLMHeadModel"),fir=o(" (XLNet model)"),mir=l(),F(F6.$$.fragment),HBe=l(),qd=a("h2"),T6=a("a"),X_e=a("span"),F(s8.$$.fragment),gir=l(),z_e=a("span"),hir=o("TFAutoModelForCausalLM"),UBe=l(),Yo=a("div"),F(l8.$$.fragment),pir=l(),Nd=a("p"),uir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vz=a("a"),_ir=o("from_pretrained()"),bir=o(" class method or the "),Fz=a("a"),vir=o("from_config()"),Fir=o(` class
method.`),Tir=l(),i8=a("p"),Mir=o("This class cannot be instantiated directly using "),Q_e=a("code"),Eir=o("__init__()"),Cir=o(" (throws an error)."),wir=l(),Ct=a("div"),F(d8.$$.fragment),Air=l(),W_e=a("p"),yir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lir=l(),jd=a("p"),xir=o(`Note:
Loading a model from its configuration file does `),H_e=a("strong"),$ir=o("not"),kir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Sir=o("from_pretrained()"),Rir=o(" to load the model weights."),Bir=l(),F(M6.$$.fragment),Pir=l(),Cr=a("div"),F(c8.$$.fragment),Iir=l(),U_e=a("p"),qir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nir=l(),Ja=a("p"),jir=o("The model class to instantiate is selected based on the "),J_e=a("code"),Dir=o("model_type"),Gir=o(` property of the config object (either
passed as an argument or loaded from `),Y_e=a("code"),Oir=o("pretrained_model_name_or_path"),Vir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(":"),Qir=l(),Te=a("ul"),E6=a("li"),Z_e=a("strong"),Wir=o("bert"),Hir=o(" \u2014 "),Mz=a("a"),Uir=o("TFBertLMHeadModel"),Jir=o(" (BERT model)"),Yir=l(),C6=a("li"),e2e=a("strong"),Kir=o("camembert"),Zir=o(" \u2014 "),Ez=a("a"),edr=o("TFCamembertForCausalLM"),odr=o(" (CamemBERT model)"),rdr=l(),w6=a("li"),o2e=a("strong"),tdr=o("ctrl"),adr=o(" \u2014 "),Cz=a("a"),ndr=o("TFCTRLLMHeadModel"),sdr=o(" (CTRL model)"),ldr=l(),A6=a("li"),r2e=a("strong"),idr=o("gpt2"),ddr=o(" \u2014 "),wz=a("a"),cdr=o("TFGPT2LMHeadModel"),fdr=o(" (OpenAI GPT-2 model)"),mdr=l(),y6=a("li"),t2e=a("strong"),gdr=o("gptj"),hdr=o(" \u2014 "),Az=a("a"),pdr=o("TFGPTJForCausalLM"),udr=o(" (GPT-J model)"),_dr=l(),L6=a("li"),a2e=a("strong"),bdr=o("openai-gpt"),vdr=o(" \u2014 "),yz=a("a"),Fdr=o("TFOpenAIGPTLMHeadModel"),Tdr=o(" (OpenAI GPT model)"),Mdr=l(),x6=a("li"),n2e=a("strong"),Edr=o("rembert"),Cdr=o(" \u2014 "),Lz=a("a"),wdr=o("TFRemBertForCausalLM"),Adr=o(" (RemBERT model)"),ydr=l(),$6=a("li"),s2e=a("strong"),Ldr=o("roberta"),xdr=o(" \u2014 "),xz=a("a"),$dr=o("TFRobertaForCausalLM"),kdr=o(" (RoBERTa model)"),Sdr=l(),k6=a("li"),l2e=a("strong"),Rdr=o("roformer"),Bdr=o(" \u2014 "),$z=a("a"),Pdr=o("TFRoFormerForCausalLM"),Idr=o(" (RoFormer model)"),qdr=l(),S6=a("li"),i2e=a("strong"),Ndr=o("transfo-xl"),jdr=o(" \u2014 "),kz=a("a"),Ddr=o("TFTransfoXLLMHeadModel"),Gdr=o(" (Transformer-XL model)"),Odr=l(),R6=a("li"),d2e=a("strong"),Vdr=o("xlm"),Xdr=o(" \u2014 "),Sz=a("a"),zdr=o("TFXLMWithLMHeadModel"),Qdr=o(" (XLM model)"),Wdr=l(),B6=a("li"),c2e=a("strong"),Hdr=o("xlnet"),Udr=o(" \u2014 "),Rz=a("a"),Jdr=o("TFXLNetLMHeadModel"),Ydr=o(" (XLNet model)"),Kdr=l(),F(P6.$$.fragment),JBe=l(),Dd=a("h2"),I6=a("a"),f2e=a("span"),F(f8.$$.fragment),Zdr=l(),m2e=a("span"),ecr=o("TFAutoModelForImageClassification"),YBe=l(),Ko=a("div"),F(m8.$$.fragment),ocr=l(),Gd=a("p"),rcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bz=a("a"),tcr=o("from_pretrained()"),acr=o(" class method or the "),Pz=a("a"),ncr=o("from_config()"),scr=o(` class
method.`),lcr=l(),g8=a("p"),icr=o("This class cannot be instantiated directly using "),g2e=a("code"),dcr=o("__init__()"),ccr=o(" (throws an error)."),fcr=l(),wt=a("div"),F(h8.$$.fragment),mcr=l(),h2e=a("p"),gcr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hcr=l(),Od=a("p"),pcr=o(`Note:
Loading a model from its configuration file does `),p2e=a("strong"),ucr=o("not"),_cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),bcr=o("from_pretrained()"),vcr=o(" to load the model weights."),Fcr=l(),F(q6.$$.fragment),Tcr=l(),wr=a("div"),F(p8.$$.fragment),Mcr=l(),u2e=a("p"),Ecr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ccr=l(),Ya=a("p"),wcr=o("The model class to instantiate is selected based on the "),_2e=a("code"),Acr=o("model_type"),ycr=o(` property of the config object (either
passed as an argument or loaded from `),b2e=a("code"),Lcr=o("pretrained_model_name_or_path"),xcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(":"),Scr=l(),u8=a("ul"),N6=a("li"),F2e=a("strong"),Rcr=o("convnext"),Bcr=o(" \u2014 "),qz=a("a"),Pcr=o("TFConvNextForImageClassification"),Icr=o(" (ConvNext model)"),qcr=l(),j6=a("li"),T2e=a("strong"),Ncr=o("vit"),jcr=o(" \u2014 "),Nz=a("a"),Dcr=o("TFViTForImageClassification"),Gcr=o(" (ViT model)"),Ocr=l(),F(D6.$$.fragment),KBe=l(),Vd=a("h2"),G6=a("a"),M2e=a("span"),F(_8.$$.fragment),Vcr=l(),E2e=a("span"),Xcr=o("TFAutoModelForMaskedLM"),ZBe=l(),Zo=a("div"),F(b8.$$.fragment),zcr=l(),Xd=a("p"),Qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jz=a("a"),Wcr=o("from_pretrained()"),Hcr=o(" class method or the "),Dz=a("a"),Ucr=o("from_config()"),Jcr=o(` class
method.`),Ycr=l(),v8=a("p"),Kcr=o("This class cannot be instantiated directly using "),C2e=a("code"),Zcr=o("__init__()"),efr=o(" (throws an error)."),ofr=l(),At=a("div"),F(F8.$$.fragment),rfr=l(),w2e=a("p"),tfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),afr=l(),zd=a("p"),nfr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),sfr=o("not"),lfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=a("a"),ifr=o("from_pretrained()"),dfr=o(" to load the model weights."),cfr=l(),F(O6.$$.fragment),ffr=l(),Ar=a("div"),F(T8.$$.fragment),mfr=l(),y2e=a("p"),gfr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hfr=l(),Ka=a("p"),pfr=o("The model class to instantiate is selected based on the "),L2e=a("code"),ufr=o("model_type"),_fr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),bfr=o("pretrained_model_name_or_path"),vfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Ffr=o("pretrained_model_name_or_path"),Tfr=o(":"),Mfr=l(),ie=a("ul"),V6=a("li"),k2e=a("strong"),Efr=o("albert"),Cfr=o(" \u2014 "),Oz=a("a"),wfr=o("TFAlbertForMaskedLM"),Afr=o(" (ALBERT model)"),yfr=l(),X6=a("li"),S2e=a("strong"),Lfr=o("bert"),xfr=o(" \u2014 "),Vz=a("a"),$fr=o("TFBertForMaskedLM"),kfr=o(" (BERT model)"),Sfr=l(),z6=a("li"),R2e=a("strong"),Rfr=o("camembert"),Bfr=o(" \u2014 "),Xz=a("a"),Pfr=o("TFCamembertForMaskedLM"),Ifr=o(" (CamemBERT model)"),qfr=l(),Q6=a("li"),B2e=a("strong"),Nfr=o("convbert"),jfr=o(" \u2014 "),zz=a("a"),Dfr=o("TFConvBertForMaskedLM"),Gfr=o(" (ConvBERT model)"),Ofr=l(),W6=a("li"),P2e=a("strong"),Vfr=o("deberta"),Xfr=o(" \u2014 "),Qz=a("a"),zfr=o("TFDebertaForMaskedLM"),Qfr=o(" (DeBERTa model)"),Wfr=l(),H6=a("li"),I2e=a("strong"),Hfr=o("deberta-v2"),Ufr=o(" \u2014 "),Wz=a("a"),Jfr=o("TFDebertaV2ForMaskedLM"),Yfr=o(" (DeBERTa-v2 model)"),Kfr=l(),U6=a("li"),q2e=a("strong"),Zfr=o("distilbert"),emr=o(" \u2014 "),Hz=a("a"),omr=o("TFDistilBertForMaskedLM"),rmr=o(" (DistilBERT model)"),tmr=l(),J6=a("li"),N2e=a("strong"),amr=o("electra"),nmr=o(" \u2014 "),Uz=a("a"),smr=o("TFElectraForMaskedLM"),lmr=o(" (ELECTRA model)"),imr=l(),Y6=a("li"),j2e=a("strong"),dmr=o("flaubert"),cmr=o(" \u2014 "),Jz=a("a"),fmr=o("TFFlaubertWithLMHeadModel"),mmr=o(" (FlauBERT model)"),gmr=l(),K6=a("li"),D2e=a("strong"),hmr=o("funnel"),pmr=o(" \u2014 "),Yz=a("a"),umr=o("TFFunnelForMaskedLM"),_mr=o(" (Funnel Transformer model)"),bmr=l(),Z6=a("li"),G2e=a("strong"),vmr=o("layoutlm"),Fmr=o(" \u2014 "),Kz=a("a"),Tmr=o("TFLayoutLMForMaskedLM"),Mmr=o(" (LayoutLM model)"),Emr=l(),eT=a("li"),O2e=a("strong"),Cmr=o("longformer"),wmr=o(" \u2014 "),Zz=a("a"),Amr=o("TFLongformerForMaskedLM"),ymr=o(" (Longformer model)"),Lmr=l(),oT=a("li"),V2e=a("strong"),xmr=o("mobilebert"),$mr=o(" \u2014 "),eQ=a("a"),kmr=o("TFMobileBertForMaskedLM"),Smr=o(" (MobileBERT model)"),Rmr=l(),rT=a("li"),X2e=a("strong"),Bmr=o("mpnet"),Pmr=o(" \u2014 "),oQ=a("a"),Imr=o("TFMPNetForMaskedLM"),qmr=o(" (MPNet model)"),Nmr=l(),tT=a("li"),z2e=a("strong"),jmr=o("rembert"),Dmr=o(" \u2014 "),rQ=a("a"),Gmr=o("TFRemBertForMaskedLM"),Omr=o(" (RemBERT model)"),Vmr=l(),aT=a("li"),Q2e=a("strong"),Xmr=o("roberta"),zmr=o(" \u2014 "),tQ=a("a"),Qmr=o("TFRobertaForMaskedLM"),Wmr=o(" (RoBERTa model)"),Hmr=l(),nT=a("li"),W2e=a("strong"),Umr=o("roformer"),Jmr=o(" \u2014 "),aQ=a("a"),Ymr=o("TFRoFormerForMaskedLM"),Kmr=o(" (RoFormer model)"),Zmr=l(),sT=a("li"),H2e=a("strong"),egr=o("tapas"),ogr=o(" \u2014 "),nQ=a("a"),rgr=o("TFTapasForMaskedLM"),tgr=o(" (TAPAS model)"),agr=l(),lT=a("li"),U2e=a("strong"),ngr=o("xlm"),sgr=o(" \u2014 "),sQ=a("a"),lgr=o("TFXLMWithLMHeadModel"),igr=o(" (XLM model)"),dgr=l(),iT=a("li"),J2e=a("strong"),cgr=o("xlm-roberta"),fgr=o(" \u2014 "),lQ=a("a"),mgr=o("TFXLMRobertaForMaskedLM"),ggr=o(" (XLM-RoBERTa model)"),hgr=l(),F(dT.$$.fragment),ePe=l(),Qd=a("h2"),cT=a("a"),Y2e=a("span"),F(M8.$$.fragment),pgr=l(),K2e=a("span"),ugr=o("TFAutoModelForSeq2SeqLM"),oPe=l(),er=a("div"),F(E8.$$.fragment),_gr=l(),Wd=a("p"),bgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iQ=a("a"),vgr=o("from_pretrained()"),Fgr=o(" class method or the "),dQ=a("a"),Tgr=o("from_config()"),Mgr=o(` class
method.`),Egr=l(),C8=a("p"),Cgr=o("This class cannot be instantiated directly using "),Z2e=a("code"),wgr=o("__init__()"),Agr=o(" (throws an error)."),ygr=l(),yt=a("div"),F(w8.$$.fragment),Lgr=l(),e1e=a("p"),xgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),$gr=l(),Hd=a("p"),kgr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),Sgr=o("not"),Rgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Bgr=o("from_pretrained()"),Pgr=o(" to load the model weights."),Igr=l(),F(fT.$$.fragment),qgr=l(),yr=a("div"),F(A8.$$.fragment),Ngr=l(),r1e=a("p"),jgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Dgr=l(),Za=a("p"),Ggr=o("The model class to instantiate is selected based on the "),t1e=a("code"),Ogr=o("model_type"),Vgr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Xgr=o("pretrained_model_name_or_path"),zgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Qgr=o("pretrained_model_name_or_path"),Wgr=o(":"),Hgr=l(),ye=a("ul"),mT=a("li"),s1e=a("strong"),Ugr=o("bart"),Jgr=o(" \u2014 "),fQ=a("a"),Ygr=o("TFBartForConditionalGeneration"),Kgr=o(" (BART model)"),Zgr=l(),gT=a("li"),l1e=a("strong"),ehr=o("blenderbot"),ohr=o(" \u2014 "),mQ=a("a"),rhr=o("TFBlenderbotForConditionalGeneration"),thr=o(" (Blenderbot model)"),ahr=l(),hT=a("li"),i1e=a("strong"),nhr=o("blenderbot-small"),shr=o(" \u2014 "),gQ=a("a"),lhr=o("TFBlenderbotSmallForConditionalGeneration"),ihr=o(" (BlenderbotSmall model)"),dhr=l(),pT=a("li"),d1e=a("strong"),chr=o("encoder-decoder"),fhr=o(" \u2014 "),hQ=a("a"),mhr=o("TFEncoderDecoderModel"),ghr=o(" (Encoder decoder model)"),hhr=l(),uT=a("li"),c1e=a("strong"),phr=o("led"),uhr=o(" \u2014 "),pQ=a("a"),_hr=o("TFLEDForConditionalGeneration"),bhr=o(" (LED model)"),vhr=l(),_T=a("li"),f1e=a("strong"),Fhr=o("marian"),Thr=o(" \u2014 "),uQ=a("a"),Mhr=o("TFMarianMTModel"),Ehr=o(" (Marian model)"),Chr=l(),bT=a("li"),m1e=a("strong"),whr=o("mbart"),Ahr=o(" \u2014 "),_Q=a("a"),yhr=o("TFMBartForConditionalGeneration"),Lhr=o(" (mBART model)"),xhr=l(),vT=a("li"),g1e=a("strong"),$hr=o("mt5"),khr=o(" \u2014 "),bQ=a("a"),Shr=o("TFMT5ForConditionalGeneration"),Rhr=o(" (mT5 model)"),Bhr=l(),FT=a("li"),h1e=a("strong"),Phr=o("pegasus"),Ihr=o(" \u2014 "),vQ=a("a"),qhr=o("TFPegasusForConditionalGeneration"),Nhr=o(" (Pegasus model)"),jhr=l(),TT=a("li"),p1e=a("strong"),Dhr=o("t5"),Ghr=o(" \u2014 "),FQ=a("a"),Ohr=o("TFT5ForConditionalGeneration"),Vhr=o(" (T5 model)"),Xhr=l(),F(MT.$$.fragment),rPe=l(),Ud=a("h2"),ET=a("a"),u1e=a("span"),F(y8.$$.fragment),zhr=l(),_1e=a("span"),Qhr=o("TFAutoModelForSequenceClassification"),tPe=l(),or=a("div"),F(L8.$$.fragment),Whr=l(),Jd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),MQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),x8=a("p"),epr=o("This class cannot be instantiated directly using "),b1e=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),Lt=a("div"),F($8.$$.fragment),apr=l(),v1e=a("p"),npr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),spr=l(),Yd=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),cpr=o("from_pretrained()"),fpr=o(" to load the model weights."),mpr=l(),F(CT.$$.fragment),gpr=l(),Lr=a("div"),F(k8.$$.fragment),hpr=l(),T1e=a("p"),ppr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),upr=l(),en=a("p"),_pr=o("The model class to instantiate is selected based on the "),M1e=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),Z=a("ul"),wT=a("li"),w1e=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),CQ=a("a"),ypr=o("TFAlbertForSequenceClassification"),Lpr=o(" (ALBERT model)"),xpr=l(),AT=a("li"),A1e=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),wQ=a("a"),Spr=o("TFBertForSequenceClassification"),Rpr=o(" (BERT model)"),Bpr=l(),yT=a("li"),y1e=a("strong"),Ppr=o("camembert"),Ipr=o(" \u2014 "),AQ=a("a"),qpr=o("TFCamembertForSequenceClassification"),Npr=o(" (CamemBERT model)"),jpr=l(),LT=a("li"),L1e=a("strong"),Dpr=o("convbert"),Gpr=o(" \u2014 "),yQ=a("a"),Opr=o("TFConvBertForSequenceClassification"),Vpr=o(" (ConvBERT model)"),Xpr=l(),xT=a("li"),x1e=a("strong"),zpr=o("ctrl"),Qpr=o(" \u2014 "),LQ=a("a"),Wpr=o("TFCTRLForSequenceClassification"),Hpr=o(" (CTRL model)"),Upr=l(),$T=a("li"),$1e=a("strong"),Jpr=o("deberta"),Ypr=o(" \u2014 "),xQ=a("a"),Kpr=o("TFDebertaForSequenceClassification"),Zpr=o(" (DeBERTa model)"),eur=l(),kT=a("li"),k1e=a("strong"),our=o("deberta-v2"),rur=o(" \u2014 "),$Q=a("a"),tur=o("TFDebertaV2ForSequenceClassification"),aur=o(" (DeBERTa-v2 model)"),nur=l(),ST=a("li"),S1e=a("strong"),sur=o("distilbert"),lur=o(" \u2014 "),kQ=a("a"),iur=o("TFDistilBertForSequenceClassification"),dur=o(" (DistilBERT model)"),cur=l(),RT=a("li"),R1e=a("strong"),fur=o("electra"),mur=o(" \u2014 "),SQ=a("a"),gur=o("TFElectraForSequenceClassification"),hur=o(" (ELECTRA model)"),pur=l(),BT=a("li"),B1e=a("strong"),uur=o("flaubert"),_ur=o(" \u2014 "),RQ=a("a"),bur=o("TFFlaubertForSequenceClassification"),vur=o(" (FlauBERT model)"),Fur=l(),PT=a("li"),P1e=a("strong"),Tur=o("funnel"),Mur=o(" \u2014 "),BQ=a("a"),Eur=o("TFFunnelForSequenceClassification"),Cur=o(" (Funnel Transformer model)"),wur=l(),IT=a("li"),I1e=a("strong"),Aur=o("gpt2"),yur=o(" \u2014 "),PQ=a("a"),Lur=o("TFGPT2ForSequenceClassification"),xur=o(" (OpenAI GPT-2 model)"),$ur=l(),qT=a("li"),q1e=a("strong"),kur=o("gptj"),Sur=o(" \u2014 "),IQ=a("a"),Rur=o("TFGPTJForSequenceClassification"),Bur=o(" (GPT-J model)"),Pur=l(),NT=a("li"),N1e=a("strong"),Iur=o("layoutlm"),qur=o(" \u2014 "),qQ=a("a"),Nur=o("TFLayoutLMForSequenceClassification"),jur=o(" (LayoutLM model)"),Dur=l(),jT=a("li"),j1e=a("strong"),Gur=o("longformer"),Our=o(" \u2014 "),NQ=a("a"),Vur=o("TFLongformerForSequenceClassification"),Xur=o(" (Longformer model)"),zur=l(),DT=a("li"),D1e=a("strong"),Qur=o("mobilebert"),Wur=o(" \u2014 "),jQ=a("a"),Hur=o("TFMobileBertForSequenceClassification"),Uur=o(" (MobileBERT model)"),Jur=l(),GT=a("li"),G1e=a("strong"),Yur=o("mpnet"),Kur=o(" \u2014 "),DQ=a("a"),Zur=o("TFMPNetForSequenceClassification"),e_r=o(" (MPNet model)"),o_r=l(),OT=a("li"),O1e=a("strong"),r_r=o("openai-gpt"),t_r=o(" \u2014 "),GQ=a("a"),a_r=o("TFOpenAIGPTForSequenceClassification"),n_r=o(" (OpenAI GPT model)"),s_r=l(),VT=a("li"),V1e=a("strong"),l_r=o("rembert"),i_r=o(" \u2014 "),OQ=a("a"),d_r=o("TFRemBertForSequenceClassification"),c_r=o(" (RemBERT model)"),f_r=l(),XT=a("li"),X1e=a("strong"),m_r=o("roberta"),g_r=o(" \u2014 "),VQ=a("a"),h_r=o("TFRobertaForSequenceClassification"),p_r=o(" (RoBERTa model)"),u_r=l(),zT=a("li"),z1e=a("strong"),__r=o("roformer"),b_r=o(" \u2014 "),XQ=a("a"),v_r=o("TFRoFormerForSequenceClassification"),F_r=o(" (RoFormer model)"),T_r=l(),QT=a("li"),Q1e=a("strong"),M_r=o("tapas"),E_r=o(" \u2014 "),zQ=a("a"),C_r=o("TFTapasForSequenceClassification"),w_r=o(" (TAPAS model)"),A_r=l(),WT=a("li"),W1e=a("strong"),y_r=o("transfo-xl"),L_r=o(" \u2014 "),QQ=a("a"),x_r=o("TFTransfoXLForSequenceClassification"),$_r=o(" (Transformer-XL model)"),k_r=l(),HT=a("li"),H1e=a("strong"),S_r=o("xlm"),R_r=o(" \u2014 "),WQ=a("a"),B_r=o("TFXLMForSequenceClassification"),P_r=o(" (XLM model)"),I_r=l(),UT=a("li"),U1e=a("strong"),q_r=o("xlm-roberta"),N_r=o(" \u2014 "),HQ=a("a"),j_r=o("TFXLMRobertaForSequenceClassification"),D_r=o(" (XLM-RoBERTa model)"),G_r=l(),JT=a("li"),J1e=a("strong"),O_r=o("xlnet"),V_r=o(" \u2014 "),UQ=a("a"),X_r=o("TFXLNetForSequenceClassification"),z_r=o(" (XLNet model)"),Q_r=l(),F(YT.$$.fragment),aPe=l(),Kd=a("h2"),KT=a("a"),Y1e=a("span"),F(S8.$$.fragment),W_r=l(),K1e=a("span"),H_r=o("TFAutoModelForMultipleChoice"),nPe=l(),rr=a("div"),F(R8.$$.fragment),U_r=l(),Zd=a("p"),J_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JQ=a("a"),Y_r=o("from_pretrained()"),K_r=o(" class method or the "),YQ=a("a"),Z_r=o("from_config()"),e2r=o(` class
method.`),o2r=l(),B8=a("p"),r2r=o("This class cannot be instantiated directly using "),Z1e=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),xt=a("div"),F(P8.$$.fragment),s2r=l(),ebe=a("p"),l2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),i2r=l(),ec=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),obe=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(ZT.$$.fragment),p2r=l(),xr=a("div"),F(I8.$$.fragment),u2r=l(),rbe=a("p"),_2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),b2r=l(),on=a("p"),v2r=o("The model class to instantiate is selected based on the "),tbe=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),abe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),pe=a("ul"),eM=a("li"),sbe=a("strong"),y2r=o("albert"),L2r=o(" \u2014 "),ZQ=a("a"),x2r=o("TFAlbertForMultipleChoice"),$2r=o(" (ALBERT model)"),k2r=l(),oM=a("li"),lbe=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),eW=a("a"),B2r=o("TFBertForMultipleChoice"),P2r=o(" (BERT model)"),I2r=l(),rM=a("li"),ibe=a("strong"),q2r=o("camembert"),N2r=o(" \u2014 "),oW=a("a"),j2r=o("TFCamembertForMultipleChoice"),D2r=o(" (CamemBERT model)"),G2r=l(),tM=a("li"),dbe=a("strong"),O2r=o("convbert"),V2r=o(" \u2014 "),rW=a("a"),X2r=o("TFConvBertForMultipleChoice"),z2r=o(" (ConvBERT model)"),Q2r=l(),aM=a("li"),cbe=a("strong"),W2r=o("distilbert"),H2r=o(" \u2014 "),tW=a("a"),U2r=o("TFDistilBertForMultipleChoice"),J2r=o(" (DistilBERT model)"),Y2r=l(),nM=a("li"),fbe=a("strong"),K2r=o("electra"),Z2r=o(" \u2014 "),aW=a("a"),e1r=o("TFElectraForMultipleChoice"),o1r=o(" (ELECTRA model)"),r1r=l(),sM=a("li"),mbe=a("strong"),t1r=o("flaubert"),a1r=o(" \u2014 "),nW=a("a"),n1r=o("TFFlaubertForMultipleChoice"),s1r=o(" (FlauBERT model)"),l1r=l(),lM=a("li"),gbe=a("strong"),i1r=o("funnel"),d1r=o(" \u2014 "),sW=a("a"),c1r=o("TFFunnelForMultipleChoice"),f1r=o(" (Funnel Transformer model)"),m1r=l(),iM=a("li"),hbe=a("strong"),g1r=o("longformer"),h1r=o(" \u2014 "),lW=a("a"),p1r=o("TFLongformerForMultipleChoice"),u1r=o(" (Longformer model)"),_1r=l(),dM=a("li"),pbe=a("strong"),b1r=o("mobilebert"),v1r=o(" \u2014 "),iW=a("a"),F1r=o("TFMobileBertForMultipleChoice"),T1r=o(" (MobileBERT model)"),M1r=l(),cM=a("li"),ube=a("strong"),E1r=o("mpnet"),C1r=o(" \u2014 "),dW=a("a"),w1r=o("TFMPNetForMultipleChoice"),A1r=o(" (MPNet model)"),y1r=l(),fM=a("li"),_be=a("strong"),L1r=o("rembert"),x1r=o(" \u2014 "),cW=a("a"),$1r=o("TFRemBertForMultipleChoice"),k1r=o(" (RemBERT model)"),S1r=l(),mM=a("li"),bbe=a("strong"),R1r=o("roberta"),B1r=o(" \u2014 "),fW=a("a"),P1r=o("TFRobertaForMultipleChoice"),I1r=o(" (RoBERTa model)"),q1r=l(),gM=a("li"),vbe=a("strong"),N1r=o("roformer"),j1r=o(" \u2014 "),mW=a("a"),D1r=o("TFRoFormerForMultipleChoice"),G1r=o(" (RoFormer model)"),O1r=l(),hM=a("li"),Fbe=a("strong"),V1r=o("xlm"),X1r=o(" \u2014 "),gW=a("a"),z1r=o("TFXLMForMultipleChoice"),Q1r=o(" (XLM model)"),W1r=l(),pM=a("li"),Tbe=a("strong"),H1r=o("xlm-roberta"),U1r=o(" \u2014 "),hW=a("a"),J1r=o("TFXLMRobertaForMultipleChoice"),Y1r=o(" (XLM-RoBERTa model)"),K1r=l(),uM=a("li"),Mbe=a("strong"),Z1r=o("xlnet"),ebr=o(" \u2014 "),pW=a("a"),obr=o("TFXLNetForMultipleChoice"),rbr=o(" (XLNet model)"),tbr=l(),F(_M.$$.fragment),sPe=l(),oc=a("h2"),bM=a("a"),Ebe=a("span"),F(q8.$$.fragment),abr=l(),Cbe=a("span"),nbr=o("TFAutoModelForTableQuestionAnswering"),lPe=l(),tr=a("div"),F(N8.$$.fragment),sbr=l(),rc=a("p"),lbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=a("a"),ibr=o("from_pretrained()"),dbr=o(" class method or the "),_W=a("a"),cbr=o("from_config()"),fbr=o(` class
method.`),mbr=l(),j8=a("p"),gbr=o("This class cannot be instantiated directly using "),wbe=a("code"),hbr=o("__init__()"),pbr=o(" (throws an error)."),ubr=l(),$t=a("div"),F(D8.$$.fragment),_br=l(),Abe=a("p"),bbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vbr=l(),tc=a("p"),Fbr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),Tbr=o("not"),Mbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" to load the model weights."),wbr=l(),F(vM.$$.fragment),Abr=l(),$r=a("div"),F(G8.$$.fragment),ybr=l(),Lbe=a("p"),Lbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xbr=l(),rn=a("p"),$br=o("The model class to instantiate is selected based on the "),xbe=a("code"),kbr=o("model_type"),Sbr=o(` property of the config object (either
passed as an argument or loaded from `),$be=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=a("code"),Pbr=o("pretrained_model_name_or_path"),Ibr=o(":"),qbr=l(),Sbe=a("ul"),FM=a("li"),Rbe=a("strong"),Nbr=o("tapas"),jbr=o(" \u2014 "),vW=a("a"),Dbr=o("TFTapasForQuestionAnswering"),Gbr=o(" (TAPAS model)"),Obr=l(),F(TM.$$.fragment),iPe=l(),ac=a("h2"),MM=a("a"),Bbe=a("span"),F(O8.$$.fragment),Vbr=l(),Pbe=a("span"),Xbr=o("TFAutoModelForTokenClassification"),dPe=l(),ar=a("div"),F(V8.$$.fragment),zbr=l(),nc=a("p"),Qbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FW=a("a"),Wbr=o("from_pretrained()"),Hbr=o(" class method or the "),TW=a("a"),Ubr=o("from_config()"),Jbr=o(` class
method.`),Ybr=l(),X8=a("p"),Kbr=o("This class cannot be instantiated directly using "),Ibe=a("code"),Zbr=o("__init__()"),e4r=o(" (throws an error)."),o4r=l(),kt=a("div"),F(z8.$$.fragment),r4r=l(),qbe=a("p"),t4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),a4r=l(),sc=a("p"),n4r=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),s4r=o("not"),l4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),i4r=o("from_pretrained()"),d4r=o(" to load the model weights."),c4r=l(),F(EM.$$.fragment),f4r=l(),kr=a("div"),F(Q8.$$.fragment),m4r=l(),jbe=a("p"),g4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),h4r=l(),tn=a("p"),p4r=o("The model class to instantiate is selected based on the "),Dbe=a("code"),u4r=o("model_type"),_4r=o(` property of the config object (either
passed as an argument or loaded from `),Gbe=a("code"),b4r=o("pretrained_model_name_or_path"),v4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(":"),M4r=l(),de=a("ul"),CM=a("li"),Vbe=a("strong"),E4r=o("albert"),C4r=o(" \u2014 "),EW=a("a"),w4r=o("TFAlbertForTokenClassification"),A4r=o(" (ALBERT model)"),y4r=l(),wM=a("li"),Xbe=a("strong"),L4r=o("bert"),x4r=o(" \u2014 "),CW=a("a"),$4r=o("TFBertForTokenClassification"),k4r=o(" (BERT model)"),S4r=l(),AM=a("li"),zbe=a("strong"),R4r=o("camembert"),B4r=o(" \u2014 "),wW=a("a"),P4r=o("TFCamembertForTokenClassification"),I4r=o(" (CamemBERT model)"),q4r=l(),yM=a("li"),Qbe=a("strong"),N4r=o("convbert"),j4r=o(" \u2014 "),AW=a("a"),D4r=o("TFConvBertForTokenClassification"),G4r=o(" (ConvBERT model)"),O4r=l(),LM=a("li"),Wbe=a("strong"),V4r=o("deberta"),X4r=o(" \u2014 "),yW=a("a"),z4r=o("TFDebertaForTokenClassification"),Q4r=o(" (DeBERTa model)"),W4r=l(),xM=a("li"),Hbe=a("strong"),H4r=o("deberta-v2"),U4r=o(" \u2014 "),LW=a("a"),J4r=o("TFDebertaV2ForTokenClassification"),Y4r=o(" (DeBERTa-v2 model)"),K4r=l(),$M=a("li"),Ube=a("strong"),Z4r=o("distilbert"),evr=o(" \u2014 "),xW=a("a"),ovr=o("TFDistilBertForTokenClassification"),rvr=o(" (DistilBERT model)"),tvr=l(),kM=a("li"),Jbe=a("strong"),avr=o("electra"),nvr=o(" \u2014 "),$W=a("a"),svr=o("TFElectraForTokenClassification"),lvr=o(" (ELECTRA model)"),ivr=l(),SM=a("li"),Ybe=a("strong"),dvr=o("flaubert"),cvr=o(" \u2014 "),kW=a("a"),fvr=o("TFFlaubertForTokenClassification"),mvr=o(" (FlauBERT model)"),gvr=l(),RM=a("li"),Kbe=a("strong"),hvr=o("funnel"),pvr=o(" \u2014 "),SW=a("a"),uvr=o("TFFunnelForTokenClassification"),_vr=o(" (Funnel Transformer model)"),bvr=l(),BM=a("li"),Zbe=a("strong"),vvr=o("layoutlm"),Fvr=o(" \u2014 "),RW=a("a"),Tvr=o("TFLayoutLMForTokenClassification"),Mvr=o(" (LayoutLM model)"),Evr=l(),PM=a("li"),e4e=a("strong"),Cvr=o("longformer"),wvr=o(" \u2014 "),BW=a("a"),Avr=o("TFLongformerForTokenClassification"),yvr=o(" (Longformer model)"),Lvr=l(),IM=a("li"),o4e=a("strong"),xvr=o("mobilebert"),$vr=o(" \u2014 "),PW=a("a"),kvr=o("TFMobileBertForTokenClassification"),Svr=o(" (MobileBERT model)"),Rvr=l(),qM=a("li"),r4e=a("strong"),Bvr=o("mpnet"),Pvr=o(" \u2014 "),IW=a("a"),Ivr=o("TFMPNetForTokenClassification"),qvr=o(" (MPNet model)"),Nvr=l(),NM=a("li"),t4e=a("strong"),jvr=o("rembert"),Dvr=o(" \u2014 "),qW=a("a"),Gvr=o("TFRemBertForTokenClassification"),Ovr=o(" (RemBERT model)"),Vvr=l(),jM=a("li"),a4e=a("strong"),Xvr=o("roberta"),zvr=o(" \u2014 "),NW=a("a"),Qvr=o("TFRobertaForTokenClassification"),Wvr=o(" (RoBERTa model)"),Hvr=l(),DM=a("li"),n4e=a("strong"),Uvr=o("roformer"),Jvr=o(" \u2014 "),jW=a("a"),Yvr=o("TFRoFormerForTokenClassification"),Kvr=o(" (RoFormer model)"),Zvr=l(),GM=a("li"),s4e=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),DW=a("a"),rFr=o("TFXLMForTokenClassification"),tFr=o(" (XLM model)"),aFr=l(),OM=a("li"),l4e=a("strong"),nFr=o("xlm-roberta"),sFr=o(" \u2014 "),GW=a("a"),lFr=o("TFXLMRobertaForTokenClassification"),iFr=o(" (XLM-RoBERTa model)"),dFr=l(),VM=a("li"),i4e=a("strong"),cFr=o("xlnet"),fFr=o(" \u2014 "),OW=a("a"),mFr=o("TFXLNetForTokenClassification"),gFr=o(" (XLNet model)"),hFr=l(),F(XM.$$.fragment),cPe=l(),lc=a("h2"),zM=a("a"),d4e=a("span"),F(W8.$$.fragment),pFr=l(),c4e=a("span"),uFr=o("TFAutoModelForQuestionAnswering"),fPe=l(),nr=a("div"),F(H8.$$.fragment),_Fr=l(),ic=a("p"),bFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VW=a("a"),vFr=o("from_pretrained()"),FFr=o(" class method or the "),XW=a("a"),TFr=o("from_config()"),MFr=o(` class
method.`),EFr=l(),U8=a("p"),CFr=o("This class cannot be instantiated directly using "),f4e=a("code"),wFr=o("__init__()"),AFr=o(" (throws an error)."),yFr=l(),St=a("div"),F(J8.$$.fragment),LFr=l(),m4e=a("p"),xFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$Fr=l(),dc=a("p"),kFr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),SFr=o("not"),RFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=a("a"),BFr=o("from_pretrained()"),PFr=o(" to load the model weights."),IFr=l(),F(QM.$$.fragment),qFr=l(),Sr=a("div"),F(Y8.$$.fragment),NFr=l(),h4e=a("p"),jFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DFr=l(),an=a("p"),GFr=o("The model class to instantiate is selected based on the "),p4e=a("code"),OFr=o("model_type"),VFr=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),XFr=o("pretrained_model_name_or_path"),zFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),QFr=o("pretrained_model_name_or_path"),WFr=o(":"),HFr=l(),ce=a("ul"),WM=a("li"),b4e=a("strong"),UFr=o("albert"),JFr=o(" \u2014 "),QW=a("a"),YFr=o("TFAlbertForQuestionAnswering"),KFr=o(" (ALBERT model)"),ZFr=l(),HM=a("li"),v4e=a("strong"),e0r=o("bert"),o0r=o(" \u2014 "),WW=a("a"),r0r=o("TFBertForQuestionAnswering"),t0r=o(" (BERT model)"),a0r=l(),UM=a("li"),F4e=a("strong"),n0r=o("camembert"),s0r=o(" \u2014 "),HW=a("a"),l0r=o("TFCamembertForQuestionAnswering"),i0r=o(" (CamemBERT model)"),d0r=l(),JM=a("li"),T4e=a("strong"),c0r=o("convbert"),f0r=o(" \u2014 "),UW=a("a"),m0r=o("TFConvBertForQuestionAnswering"),g0r=o(" (ConvBERT model)"),h0r=l(),YM=a("li"),M4e=a("strong"),p0r=o("deberta"),u0r=o(" \u2014 "),JW=a("a"),_0r=o("TFDebertaForQuestionAnswering"),b0r=o(" (DeBERTa model)"),v0r=l(),KM=a("li"),E4e=a("strong"),F0r=o("deberta-v2"),T0r=o(" \u2014 "),YW=a("a"),M0r=o("TFDebertaV2ForQuestionAnswering"),E0r=o(" (DeBERTa-v2 model)"),C0r=l(),ZM=a("li"),C4e=a("strong"),w0r=o("distilbert"),A0r=o(" \u2014 "),KW=a("a"),y0r=o("TFDistilBertForQuestionAnswering"),L0r=o(" (DistilBERT model)"),x0r=l(),eE=a("li"),w4e=a("strong"),$0r=o("electra"),k0r=o(" \u2014 "),ZW=a("a"),S0r=o("TFElectraForQuestionAnswering"),R0r=o(" (ELECTRA model)"),B0r=l(),oE=a("li"),A4e=a("strong"),P0r=o("flaubert"),I0r=o(" \u2014 "),eH=a("a"),q0r=o("TFFlaubertForQuestionAnsweringSimple"),N0r=o(" (FlauBERT model)"),j0r=l(),rE=a("li"),y4e=a("strong"),D0r=o("funnel"),G0r=o(" \u2014 "),oH=a("a"),O0r=o("TFFunnelForQuestionAnswering"),V0r=o(" (Funnel Transformer model)"),X0r=l(),tE=a("li"),L4e=a("strong"),z0r=o("gptj"),Q0r=o(" \u2014 "),rH=a("a"),W0r=o("TFGPTJForQuestionAnswering"),H0r=o(" (GPT-J model)"),U0r=l(),aE=a("li"),x4e=a("strong"),J0r=o("longformer"),Y0r=o(" \u2014 "),tH=a("a"),K0r=o("TFLongformerForQuestionAnswering"),Z0r=o(" (Longformer model)"),e6r=l(),nE=a("li"),$4e=a("strong"),o6r=o("mobilebert"),r6r=o(" \u2014 "),aH=a("a"),t6r=o("TFMobileBertForQuestionAnswering"),a6r=o(" (MobileBERT model)"),n6r=l(),sE=a("li"),k4e=a("strong"),s6r=o("mpnet"),l6r=o(" \u2014 "),nH=a("a"),i6r=o("TFMPNetForQuestionAnswering"),d6r=o(" (MPNet model)"),c6r=l(),lE=a("li"),S4e=a("strong"),f6r=o("rembert"),m6r=o(" \u2014 "),sH=a("a"),g6r=o("TFRemBertForQuestionAnswering"),h6r=o(" (RemBERT model)"),p6r=l(),iE=a("li"),R4e=a("strong"),u6r=o("roberta"),_6r=o(" \u2014 "),lH=a("a"),b6r=o("TFRobertaForQuestionAnswering"),v6r=o(" (RoBERTa model)"),F6r=l(),dE=a("li"),B4e=a("strong"),T6r=o("roformer"),M6r=o(" \u2014 "),iH=a("a"),E6r=o("TFRoFormerForQuestionAnswering"),C6r=o(" (RoFormer model)"),w6r=l(),cE=a("li"),P4e=a("strong"),A6r=o("xlm"),y6r=o(" \u2014 "),dH=a("a"),L6r=o("TFXLMForQuestionAnsweringSimple"),x6r=o(" (XLM model)"),$6r=l(),fE=a("li"),I4e=a("strong"),k6r=o("xlm-roberta"),S6r=o(" \u2014 "),cH=a("a"),R6r=o("TFXLMRobertaForQuestionAnswering"),B6r=o(" (XLM-RoBERTa model)"),P6r=l(),mE=a("li"),q4e=a("strong"),I6r=o("xlnet"),q6r=o(" \u2014 "),fH=a("a"),N6r=o("TFXLNetForQuestionAnsweringSimple"),j6r=o(" (XLNet model)"),D6r=l(),F(gE.$$.fragment),mPe=l(),cc=a("h2"),hE=a("a"),N4e=a("span"),F(K8.$$.fragment),G6r=l(),j4e=a("span"),O6r=o("TFAutoModelForVision2Seq"),gPe=l(),sr=a("div"),F(Z8.$$.fragment),V6r=l(),fc=a("p"),X6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mH=a("a"),z6r=o("from_pretrained()"),Q6r=o(" class method or the "),gH=a("a"),W6r=o("from_config()"),H6r=o(` class
method.`),U6r=l(),e7=a("p"),J6r=o("This class cannot be instantiated directly using "),D4e=a("code"),Y6r=o("__init__()"),K6r=o(" (throws an error)."),Z6r=l(),Rt=a("div"),F(o7.$$.fragment),eTr=l(),G4e=a("p"),oTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rTr=l(),mc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),O4e=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),F(pE.$$.fragment),dTr=l(),Rr=a("div"),F(r7.$$.fragment),cTr=l(),V4e=a("p"),fTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mTr=l(),nn=a("p"),gTr=o("The model class to instantiate is selected based on the "),X4e=a("code"),hTr=o("model_type"),pTr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),uTr=o("pretrained_model_name_or_path"),_Tr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(":"),FTr=l(),W4e=a("ul"),uE=a("li"),H4e=a("strong"),TTr=o("vision-encoder-decoder"),MTr=o(" \u2014 "),pH=a("a"),ETr=o("TFVisionEncoderDecoderModel"),CTr=o(" (Vision Encoder decoder model)"),wTr=l(),F(_E.$$.fragment),hPe=l(),gc=a("h2"),bE=a("a"),U4e=a("span"),F(t7.$$.fragment),ATr=l(),J4e=a("span"),yTr=o("TFAutoModelForSpeechSeq2Seq"),pPe=l(),lr=a("div"),F(a7.$$.fragment),LTr=l(),hc=a("p"),xTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uH=a("a"),$Tr=o("from_pretrained()"),kTr=o(" class method or the "),_H=a("a"),STr=o("from_config()"),RTr=o(` class
method.`),BTr=l(),n7=a("p"),PTr=o("This class cannot be instantiated directly using "),Y4e=a("code"),ITr=o("__init__()"),qTr=o(" (throws an error)."),NTr=l(),Bt=a("div"),F(s7.$$.fragment),jTr=l(),K4e=a("p"),DTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GTr=l(),pc=a("p"),OTr=o(`Note:
Loading a model from its configuration file does `),Z4e=a("strong"),VTr=o("not"),XTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),zTr=o("from_pretrained()"),QTr=o(" to load the model weights."),WTr=l(),F(vE.$$.fragment),HTr=l(),Br=a("div"),F(l7.$$.fragment),UTr=l(),eve=a("p"),JTr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),YTr=l(),sn=a("p"),KTr=o("The model class to instantiate is selected based on the "),ove=a("code"),ZTr=o("model_type"),eMr=o(` property of the config object (either
passed as an argument or loaded from `),rve=a("code"),oMr=o("pretrained_model_name_or_path"),rMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=a("code"),tMr=o("pretrained_model_name_or_path"),aMr=o(":"),nMr=l(),ave=a("ul"),FE=a("li"),nve=a("strong"),sMr=o("speech_to_text"),lMr=o(" \u2014 "),vH=a("a"),iMr=o("TFSpeech2TextForConditionalGeneration"),dMr=o(" (Speech2Text model)"),cMr=l(),F(TE.$$.fragment),uPe=l(),uc=a("h2"),ME=a("a"),sve=a("span"),F(i7.$$.fragment),fMr=l(),lve=a("span"),mMr=o("FlaxAutoModel"),_Pe=l(),ir=a("div"),F(d7.$$.fragment),gMr=l(),_c=a("p"),hMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=a("a"),pMr=o("from_pretrained()"),uMr=o(" class method or the "),TH=a("a"),_Mr=o("from_config()"),bMr=o(` class
method.`),vMr=l(),c7=a("p"),FMr=o("This class cannot be instantiated directly using "),ive=a("code"),TMr=o("__init__()"),MMr=o(" (throws an error)."),EMr=l(),Pt=a("div"),F(f7.$$.fragment),CMr=l(),dve=a("p"),wMr=o("Instantiates one of the base model classes of the library from a configuration."),AMr=l(),bc=a("p"),yMr=o(`Note:
Loading a model from its configuration file does `),cve=a("strong"),LMr=o("not"),xMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),$Mr=o("from_pretrained()"),kMr=o(" to load the model weights."),SMr=l(),F(EE.$$.fragment),RMr=l(),Pr=a("div"),F(m7.$$.fragment),BMr=l(),fve=a("p"),PMr=o("Instantiate one of the base model classes of the library from a pretrained model."),IMr=l(),ln=a("p"),qMr=o("The model class to instantiate is selected based on the "),mve=a("code"),NMr=o("model_type"),jMr=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),DMr=o("pretrained_model_name_or_path"),GMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),OMr=o("pretrained_model_name_or_path"),VMr=o(":"),XMr=l(),oe=a("ul"),CE=a("li"),pve=a("strong"),zMr=o("albert"),QMr=o(" \u2014 "),EH=a("a"),WMr=o("FlaxAlbertModel"),HMr=o(" (ALBERT model)"),UMr=l(),wE=a("li"),uve=a("strong"),JMr=o("bart"),YMr=o(" \u2014 "),CH=a("a"),KMr=o("FlaxBartModel"),ZMr=o(" (BART model)"),eEr=l(),AE=a("li"),_ve=a("strong"),oEr=o("beit"),rEr=o(" \u2014 "),wH=a("a"),tEr=o("FlaxBeitModel"),aEr=o(" (BEiT model)"),nEr=l(),yE=a("li"),bve=a("strong"),sEr=o("bert"),lEr=o(" \u2014 "),AH=a("a"),iEr=o("FlaxBertModel"),dEr=o(" (BERT model)"),cEr=l(),LE=a("li"),vve=a("strong"),fEr=o("big_bird"),mEr=o(" \u2014 "),yH=a("a"),gEr=o("FlaxBigBirdModel"),hEr=o(" (BigBird model)"),pEr=l(),xE=a("li"),Fve=a("strong"),uEr=o("blenderbot"),_Er=o(" \u2014 "),LH=a("a"),bEr=o("FlaxBlenderbotModel"),vEr=o(" (Blenderbot model)"),FEr=l(),$E=a("li"),Tve=a("strong"),TEr=o("blenderbot-small"),MEr=o(" \u2014 "),xH=a("a"),EEr=o("FlaxBlenderbotSmallModel"),CEr=o(" (BlenderbotSmall model)"),wEr=l(),kE=a("li"),Mve=a("strong"),AEr=o("clip"),yEr=o(" \u2014 "),$H=a("a"),LEr=o("FlaxCLIPModel"),xEr=o(" (CLIP model)"),$Er=l(),SE=a("li"),Eve=a("strong"),kEr=o("distilbert"),SEr=o(" \u2014 "),kH=a("a"),REr=o("FlaxDistilBertModel"),BEr=o(" (DistilBERT model)"),PEr=l(),RE=a("li"),Cve=a("strong"),IEr=o("electra"),qEr=o(" \u2014 "),SH=a("a"),NEr=o("FlaxElectraModel"),jEr=o(" (ELECTRA model)"),DEr=l(),BE=a("li"),wve=a("strong"),GEr=o("gpt2"),OEr=o(" \u2014 "),RH=a("a"),VEr=o("FlaxGPT2Model"),XEr=o(" (OpenAI GPT-2 model)"),zEr=l(),PE=a("li"),Ave=a("strong"),QEr=o("gpt_neo"),WEr=o(" \u2014 "),BH=a("a"),HEr=o("FlaxGPTNeoModel"),UEr=o(" (GPT Neo model)"),JEr=l(),IE=a("li"),yve=a("strong"),YEr=o("gptj"),KEr=o(" \u2014 "),PH=a("a"),ZEr=o("FlaxGPTJModel"),e5r=o(" (GPT-J model)"),o5r=l(),qE=a("li"),Lve=a("strong"),r5r=o("marian"),t5r=o(" \u2014 "),IH=a("a"),a5r=o("FlaxMarianModel"),n5r=o(" (Marian model)"),s5r=l(),NE=a("li"),xve=a("strong"),l5r=o("mbart"),i5r=o(" \u2014 "),qH=a("a"),d5r=o("FlaxMBartModel"),c5r=o(" (mBART model)"),f5r=l(),jE=a("li"),$ve=a("strong"),m5r=o("mt5"),g5r=o(" \u2014 "),NH=a("a"),h5r=o("FlaxMT5Model"),p5r=o(" (mT5 model)"),u5r=l(),DE=a("li"),kve=a("strong"),_5r=o("pegasus"),b5r=o(" \u2014 "),jH=a("a"),v5r=o("FlaxPegasusModel"),F5r=o(" (Pegasus model)"),T5r=l(),GE=a("li"),Sve=a("strong"),M5r=o("roberta"),E5r=o(" \u2014 "),DH=a("a"),C5r=o("FlaxRobertaModel"),w5r=o(" (RoBERTa model)"),A5r=l(),OE=a("li"),Rve=a("strong"),y5r=o("roformer"),L5r=o(" \u2014 "),GH=a("a"),x5r=o("FlaxRoFormerModel"),$5r=o(" (RoFormer model)"),k5r=l(),VE=a("li"),Bve=a("strong"),S5r=o("t5"),R5r=o(" \u2014 "),OH=a("a"),B5r=o("FlaxT5Model"),P5r=o(" (T5 model)"),I5r=l(),XE=a("li"),Pve=a("strong"),q5r=o("vision-text-dual-encoder"),N5r=o(" \u2014 "),VH=a("a"),j5r=o("FlaxVisionTextDualEncoderModel"),D5r=o(" (VisionTextDualEncoder model)"),G5r=l(),zE=a("li"),Ive=a("strong"),O5r=o("vit"),V5r=o(" \u2014 "),XH=a("a"),X5r=o("FlaxViTModel"),z5r=o(" (ViT model)"),Q5r=l(),QE=a("li"),qve=a("strong"),W5r=o("wav2vec2"),H5r=o(" \u2014 "),zH=a("a"),U5r=o("FlaxWav2Vec2Model"),J5r=o(" (Wav2Vec2 model)"),Y5r=l(),WE=a("li"),Nve=a("strong"),K5r=o("xglm"),Z5r=o(" \u2014 "),QH=a("a"),eCr=o("FlaxXGLMModel"),oCr=o(" (XGLM model)"),rCr=l(),HE=a("li"),jve=a("strong"),tCr=o("xlm-roberta"),aCr=o(" \u2014 "),WH=a("a"),nCr=o("FlaxXLMRobertaModel"),sCr=o(" (XLM-RoBERTa model)"),lCr=l(),F(UE.$$.fragment),bPe=l(),vc=a("h2"),JE=a("a"),Dve=a("span"),F(g7.$$.fragment),iCr=l(),Gve=a("span"),dCr=o("FlaxAutoModelForCausalLM"),vPe=l(),dr=a("div"),F(h7.$$.fragment),cCr=l(),Fc=a("p"),fCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HH=a("a"),mCr=o("from_pretrained()"),gCr=o(" class method or the "),UH=a("a"),hCr=o("from_config()"),pCr=o(` class
method.`),uCr=l(),p7=a("p"),_Cr=o("This class cannot be instantiated directly using "),Ove=a("code"),bCr=o("__init__()"),vCr=o(" (throws an error)."),FCr=l(),It=a("div"),F(u7.$$.fragment),TCr=l(),Vve=a("p"),MCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ECr=l(),Tc=a("p"),CCr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),wCr=o("not"),ACr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),yCr=o("from_pretrained()"),LCr=o(" to load the model weights."),xCr=l(),F(YE.$$.fragment),$Cr=l(),Ir=a("div"),F(_7.$$.fragment),kCr=l(),zve=a("p"),SCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RCr=l(),dn=a("p"),BCr=o("The model class to instantiate is selected based on the "),Qve=a("code"),PCr=o("model_type"),ICr=o(` property of the config object (either
passed as an argument or loaded from `),Wve=a("code"),qCr=o("pretrained_model_name_or_path"),NCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),jCr=o("pretrained_model_name_or_path"),DCr=o(":"),GCr=l(),Hr=a("ul"),KE=a("li"),Uve=a("strong"),OCr=o("bart"),VCr=o(" \u2014 "),YH=a("a"),XCr=o("FlaxBartForCausalLM"),zCr=o(" (BART model)"),QCr=l(),ZE=a("li"),Jve=a("strong"),WCr=o("gpt2"),HCr=o(" \u2014 "),KH=a("a"),UCr=o("FlaxGPT2LMHeadModel"),JCr=o(" (OpenAI GPT-2 model)"),YCr=l(),e5=a("li"),Yve=a("strong"),KCr=o("gpt_neo"),ZCr=o(" \u2014 "),ZH=a("a"),e3r=o("FlaxGPTNeoForCausalLM"),o3r=o(" (GPT Neo model)"),r3r=l(),o5=a("li"),Kve=a("strong"),t3r=o("gptj"),a3r=o(" \u2014 "),eU=a("a"),n3r=o("FlaxGPTJForCausalLM"),s3r=o(" (GPT-J model)"),l3r=l(),r5=a("li"),Zve=a("strong"),i3r=o("xglm"),d3r=o(" \u2014 "),oU=a("a"),c3r=o("FlaxXGLMForCausalLM"),f3r=o(" (XGLM model)"),m3r=l(),F(t5.$$.fragment),FPe=l(),Mc=a("h2"),a5=a("a"),eFe=a("span"),F(b7.$$.fragment),g3r=l(),oFe=a("span"),h3r=o("FlaxAutoModelForPreTraining"),TPe=l(),cr=a("div"),F(v7.$$.fragment),p3r=l(),Ec=a("p"),u3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rU=a("a"),_3r=o("from_pretrained()"),b3r=o(" class method or the "),tU=a("a"),v3r=o("from_config()"),F3r=o(` class
method.`),T3r=l(),F7=a("p"),M3r=o("This class cannot be instantiated directly using "),rFe=a("code"),E3r=o("__init__()"),C3r=o(" (throws an error)."),w3r=l(),qt=a("div"),F(T7.$$.fragment),A3r=l(),tFe=a("p"),y3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L3r=l(),Cc=a("p"),x3r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),$3r=o("not"),k3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),S3r=o("from_pretrained()"),R3r=o(" to load the model weights."),B3r=l(),F(n5.$$.fragment),P3r=l(),qr=a("div"),F(M7.$$.fragment),I3r=l(),nFe=a("p"),q3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N3r=l(),cn=a("p"),j3r=o("The model class to instantiate is selected based on the "),sFe=a("code"),D3r=o("model_type"),G3r=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(":"),Q3r=l(),Me=a("ul"),s5=a("li"),dFe=a("strong"),W3r=o("albert"),H3r=o(" \u2014 "),nU=a("a"),U3r=o("FlaxAlbertForPreTraining"),J3r=o(" (ALBERT model)"),Y3r=l(),l5=a("li"),cFe=a("strong"),K3r=o("bart"),Z3r=o(" \u2014 "),sU=a("a"),ewr=o("FlaxBartForConditionalGeneration"),owr=o(" (BART model)"),rwr=l(),i5=a("li"),fFe=a("strong"),twr=o("bert"),awr=o(" \u2014 "),lU=a("a"),nwr=o("FlaxBertForPreTraining"),swr=o(" (BERT model)"),lwr=l(),d5=a("li"),mFe=a("strong"),iwr=o("big_bird"),dwr=o(" \u2014 "),iU=a("a"),cwr=o("FlaxBigBirdForPreTraining"),fwr=o(" (BigBird model)"),mwr=l(),c5=a("li"),gFe=a("strong"),gwr=o("electra"),hwr=o(" \u2014 "),dU=a("a"),pwr=o("FlaxElectraForPreTraining"),uwr=o(" (ELECTRA model)"),_wr=l(),f5=a("li"),hFe=a("strong"),bwr=o("mbart"),vwr=o(" \u2014 "),cU=a("a"),Fwr=o("FlaxMBartForConditionalGeneration"),Twr=o(" (mBART model)"),Mwr=l(),m5=a("li"),pFe=a("strong"),Ewr=o("mt5"),Cwr=o(" \u2014 "),fU=a("a"),wwr=o("FlaxMT5ForConditionalGeneration"),Awr=o(" (mT5 model)"),ywr=l(),g5=a("li"),uFe=a("strong"),Lwr=o("roberta"),xwr=o(" \u2014 "),mU=a("a"),$wr=o("FlaxRobertaForMaskedLM"),kwr=o(" (RoBERTa model)"),Swr=l(),h5=a("li"),_Fe=a("strong"),Rwr=o("roformer"),Bwr=o(" \u2014 "),gU=a("a"),Pwr=o("FlaxRoFormerForMaskedLM"),Iwr=o(" (RoFormer model)"),qwr=l(),p5=a("li"),bFe=a("strong"),Nwr=o("t5"),jwr=o(" \u2014 "),hU=a("a"),Dwr=o("FlaxT5ForConditionalGeneration"),Gwr=o(" (T5 model)"),Owr=l(),u5=a("li"),vFe=a("strong"),Vwr=o("wav2vec2"),Xwr=o(" \u2014 "),pU=a("a"),zwr=o("FlaxWav2Vec2ForPreTraining"),Qwr=o(" (Wav2Vec2 model)"),Wwr=l(),_5=a("li"),FFe=a("strong"),Hwr=o("xlm-roberta"),Uwr=o(" \u2014 "),uU=a("a"),Jwr=o("FlaxXLMRobertaForMaskedLM"),Ywr=o(" (XLM-RoBERTa model)"),Kwr=l(),F(b5.$$.fragment),MPe=l(),wc=a("h2"),v5=a("a"),TFe=a("span"),F(E7.$$.fragment),Zwr=l(),MFe=a("span"),eAr=o("FlaxAutoModelForMaskedLM"),EPe=l(),fr=a("div"),F(C7.$$.fragment),oAr=l(),Ac=a("p"),rAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_U=a("a"),tAr=o("from_pretrained()"),aAr=o(" class method or the "),bU=a("a"),nAr=o("from_config()"),sAr=o(` class
method.`),lAr=l(),w7=a("p"),iAr=o("This class cannot be instantiated directly using "),EFe=a("code"),dAr=o("__init__()"),cAr=o(" (throws an error)."),fAr=l(),Nt=a("div"),F(A7.$$.fragment),mAr=l(),CFe=a("p"),gAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hAr=l(),yc=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),wFe=a("strong"),uAr=o("not"),_Ar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),bAr=o("from_pretrained()"),vAr=o(" to load the model weights."),FAr=l(),F(F5.$$.fragment),TAr=l(),Nr=a("div"),F(y7.$$.fragment),MAr=l(),AFe=a("p"),EAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CAr=l(),fn=a("p"),wAr=o("The model class to instantiate is selected based on the "),yFe=a("code"),AAr=o("model_type"),yAr=o(` property of the config object (either
passed as an argument or loaded from `),LFe=a("code"),LAr=o("pretrained_model_name_or_path"),xAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(":"),SAr=l(),Le=a("ul"),T5=a("li"),$Fe=a("strong"),RAr=o("albert"),BAr=o(" \u2014 "),FU=a("a"),PAr=o("FlaxAlbertForMaskedLM"),IAr=o(" (ALBERT model)"),qAr=l(),M5=a("li"),kFe=a("strong"),NAr=o("bart"),jAr=o(" \u2014 "),TU=a("a"),DAr=o("FlaxBartForConditionalGeneration"),GAr=o(" (BART model)"),OAr=l(),E5=a("li"),SFe=a("strong"),VAr=o("bert"),XAr=o(" \u2014 "),MU=a("a"),zAr=o("FlaxBertForMaskedLM"),QAr=o(" (BERT model)"),WAr=l(),C5=a("li"),RFe=a("strong"),HAr=o("big_bird"),UAr=o(" \u2014 "),EU=a("a"),JAr=o("FlaxBigBirdForMaskedLM"),YAr=o(" (BigBird model)"),KAr=l(),w5=a("li"),BFe=a("strong"),ZAr=o("distilbert"),eyr=o(" \u2014 "),CU=a("a"),oyr=o("FlaxDistilBertForMaskedLM"),ryr=o(" (DistilBERT model)"),tyr=l(),A5=a("li"),PFe=a("strong"),ayr=o("electra"),nyr=o(" \u2014 "),wU=a("a"),syr=o("FlaxElectraForMaskedLM"),lyr=o(" (ELECTRA model)"),iyr=l(),y5=a("li"),IFe=a("strong"),dyr=o("mbart"),cyr=o(" \u2014 "),AU=a("a"),fyr=o("FlaxMBartForConditionalGeneration"),myr=o(" (mBART model)"),gyr=l(),L5=a("li"),qFe=a("strong"),hyr=o("roberta"),pyr=o(" \u2014 "),yU=a("a"),uyr=o("FlaxRobertaForMaskedLM"),_yr=o(" (RoBERTa model)"),byr=l(),x5=a("li"),NFe=a("strong"),vyr=o("roformer"),Fyr=o(" \u2014 "),LU=a("a"),Tyr=o("FlaxRoFormerForMaskedLM"),Myr=o(" (RoFormer model)"),Eyr=l(),$5=a("li"),jFe=a("strong"),Cyr=o("xlm-roberta"),wyr=o(" \u2014 "),xU=a("a"),Ayr=o("FlaxXLMRobertaForMaskedLM"),yyr=o(" (XLM-RoBERTa model)"),Lyr=l(),F(k5.$$.fragment),CPe=l(),Lc=a("h2"),S5=a("a"),DFe=a("span"),F(L7.$$.fragment),xyr=l(),GFe=a("span"),$yr=o("FlaxAutoModelForSeq2SeqLM"),wPe=l(),mr=a("div"),F(x7.$$.fragment),kyr=l(),xc=a("p"),Syr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$U=a("a"),Ryr=o("from_pretrained()"),Byr=o(" class method or the "),kU=a("a"),Pyr=o("from_config()"),Iyr=o(` class
method.`),qyr=l(),$7=a("p"),Nyr=o("This class cannot be instantiated directly using "),OFe=a("code"),jyr=o("__init__()"),Dyr=o(" (throws an error)."),Gyr=l(),jt=a("div"),F(k7.$$.fragment),Oyr=l(),VFe=a("p"),Vyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xyr=l(),$c=a("p"),zyr=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),Qyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" to load the model weights."),Jyr=l(),F(R5.$$.fragment),Yyr=l(),jr=a("div"),F(S7.$$.fragment),Kyr=l(),zFe=a("p"),Zyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eLr=l(),mn=a("p"),oLr=o("The model class to instantiate is selected based on the "),QFe=a("code"),rLr=o("model_type"),tLr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),aLr=o("pretrained_model_name_or_path"),nLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),sLr=o("pretrained_model_name_or_path"),lLr=o(":"),iLr=l(),Se=a("ul"),B5=a("li"),UFe=a("strong"),dLr=o("bart"),cLr=o(" \u2014 "),RU=a("a"),fLr=o("FlaxBartForConditionalGeneration"),mLr=o(" (BART model)"),gLr=l(),P5=a("li"),JFe=a("strong"),hLr=o("blenderbot"),pLr=o(" \u2014 "),BU=a("a"),uLr=o("FlaxBlenderbotForConditionalGeneration"),_Lr=o(" (Blenderbot model)"),bLr=l(),I5=a("li"),YFe=a("strong"),vLr=o("blenderbot-small"),FLr=o(" \u2014 "),PU=a("a"),TLr=o("FlaxBlenderbotSmallForConditionalGeneration"),MLr=o(" (BlenderbotSmall model)"),ELr=l(),q5=a("li"),KFe=a("strong"),CLr=o("encoder-decoder"),wLr=o(" \u2014 "),IU=a("a"),ALr=o("FlaxEncoderDecoderModel"),yLr=o(" (Encoder decoder model)"),LLr=l(),N5=a("li"),ZFe=a("strong"),xLr=o("marian"),$Lr=o(" \u2014 "),qU=a("a"),kLr=o("FlaxMarianMTModel"),SLr=o(" (Marian model)"),RLr=l(),j5=a("li"),e0e=a("strong"),BLr=o("mbart"),PLr=o(" \u2014 "),NU=a("a"),ILr=o("FlaxMBartForConditionalGeneration"),qLr=o(" (mBART model)"),NLr=l(),D5=a("li"),o0e=a("strong"),jLr=o("mt5"),DLr=o(" \u2014 "),jU=a("a"),GLr=o("FlaxMT5ForConditionalGeneration"),OLr=o(" (mT5 model)"),VLr=l(),G5=a("li"),r0e=a("strong"),XLr=o("pegasus"),zLr=o(" \u2014 "),DU=a("a"),QLr=o("FlaxPegasusForConditionalGeneration"),WLr=o(" (Pegasus model)"),HLr=l(),O5=a("li"),t0e=a("strong"),ULr=o("t5"),JLr=o(" \u2014 "),GU=a("a"),YLr=o("FlaxT5ForConditionalGeneration"),KLr=o(" (T5 model)"),ZLr=l(),F(V5.$$.fragment),APe=l(),kc=a("h2"),X5=a("a"),a0e=a("span"),F(R7.$$.fragment),e8r=l(),n0e=a("span"),o8r=o("FlaxAutoModelForSequenceClassification"),yPe=l(),gr=a("div"),F(B7.$$.fragment),r8r=l(),Sc=a("p"),t8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OU=a("a"),a8r=o("from_pretrained()"),n8r=o(" class method or the "),VU=a("a"),s8r=o("from_config()"),l8r=o(` class
method.`),i8r=l(),P7=a("p"),d8r=o("This class cannot be instantiated directly using "),s0e=a("code"),c8r=o("__init__()"),f8r=o(" (throws an error)."),m8r=l(),Dt=a("div"),F(I7.$$.fragment),g8r=l(),l0e=a("p"),h8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p8r=l(),Rc=a("p"),u8r=o(`Note:
Loading a model from its configuration file does `),i0e=a("strong"),_8r=o("not"),b8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=a("a"),v8r=o("from_pretrained()"),F8r=o(" to load the model weights."),T8r=l(),F(z5.$$.fragment),M8r=l(),Dr=a("div"),F(q7.$$.fragment),E8r=l(),d0e=a("p"),C8r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w8r=l(),gn=a("p"),A8r=o("The model class to instantiate is selected based on the "),c0e=a("code"),y8r=o("model_type"),L8r=o(` property of the config object (either
passed as an argument or loaded from `),f0e=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),xe=a("ul"),Q5=a("li"),g0e=a("strong"),B8r=o("albert"),P8r=o(" \u2014 "),zU=a("a"),I8r=o("FlaxAlbertForSequenceClassification"),q8r=o(" (ALBERT model)"),N8r=l(),W5=a("li"),h0e=a("strong"),j8r=o("bart"),D8r=o(" \u2014 "),QU=a("a"),G8r=o("FlaxBartForSequenceClassification"),O8r=o(" (BART model)"),V8r=l(),H5=a("li"),p0e=a("strong"),X8r=o("bert"),z8r=o(" \u2014 "),WU=a("a"),Q8r=o("FlaxBertForSequenceClassification"),W8r=o(" (BERT model)"),H8r=l(),U5=a("li"),u0e=a("strong"),U8r=o("big_bird"),J8r=o(" \u2014 "),HU=a("a"),Y8r=o("FlaxBigBirdForSequenceClassification"),K8r=o(" (BigBird model)"),Z8r=l(),J5=a("li"),_0e=a("strong"),e7r=o("distilbert"),o7r=o(" \u2014 "),UU=a("a"),r7r=o("FlaxDistilBertForSequenceClassification"),t7r=o(" (DistilBERT model)"),a7r=l(),Y5=a("li"),b0e=a("strong"),n7r=o("electra"),s7r=o(" \u2014 "),JU=a("a"),l7r=o("FlaxElectraForSequenceClassification"),i7r=o(" (ELECTRA model)"),d7r=l(),K5=a("li"),v0e=a("strong"),c7r=o("mbart"),f7r=o(" \u2014 "),YU=a("a"),m7r=o("FlaxMBartForSequenceClassification"),g7r=o(" (mBART model)"),h7r=l(),Z5=a("li"),F0e=a("strong"),p7r=o("roberta"),u7r=o(" \u2014 "),KU=a("a"),_7r=o("FlaxRobertaForSequenceClassification"),b7r=o(" (RoBERTa model)"),v7r=l(),eC=a("li"),T0e=a("strong"),F7r=o("roformer"),T7r=o(" \u2014 "),ZU=a("a"),M7r=o("FlaxRoFormerForSequenceClassification"),E7r=o(" (RoFormer model)"),C7r=l(),oC=a("li"),M0e=a("strong"),w7r=o("xlm-roberta"),A7r=o(" \u2014 "),eJ=a("a"),y7r=o("FlaxXLMRobertaForSequenceClassification"),L7r=o(" (XLM-RoBERTa model)"),x7r=l(),F(rC.$$.fragment),LPe=l(),Bc=a("h2"),tC=a("a"),E0e=a("span"),F(N7.$$.fragment),$7r=l(),C0e=a("span"),k7r=o("FlaxAutoModelForQuestionAnswering"),xPe=l(),hr=a("div"),F(j7.$$.fragment),S7r=l(),Pc=a("p"),R7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oJ=a("a"),B7r=o("from_pretrained()"),P7r=o(" class method or the "),rJ=a("a"),I7r=o("from_config()"),q7r=o(` class
method.`),N7r=l(),D7=a("p"),j7r=o("This class cannot be instantiated directly using "),w0e=a("code"),D7r=o("__init__()"),G7r=o(" (throws an error)."),O7r=l(),Gt=a("div"),F(G7.$$.fragment),V7r=l(),A0e=a("p"),X7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),z7r=l(),Ic=a("p"),Q7r=o(`Note:
Loading a model from its configuration file does `),y0e=a("strong"),W7r=o("not"),H7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=a("a"),U7r=o("from_pretrained()"),J7r=o(" to load the model weights."),Y7r=l(),F(aC.$$.fragment),K7r=l(),Gr=a("div"),F(O7.$$.fragment),Z7r=l(),L0e=a("p"),exr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),oxr=l(),hn=a("p"),rxr=o("The model class to instantiate is selected based on the "),x0e=a("code"),txr=o("model_type"),axr=o(` property of the config object (either
passed as an argument or loaded from `),$0e=a("code"),nxr=o("pretrained_model_name_or_path"),sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(":"),dxr=l(),$e=a("ul"),nC=a("li"),S0e=a("strong"),cxr=o("albert"),fxr=o(" \u2014 "),aJ=a("a"),mxr=o("FlaxAlbertForQuestionAnswering"),gxr=o(" (ALBERT model)"),hxr=l(),sC=a("li"),R0e=a("strong"),pxr=o("bart"),uxr=o(" \u2014 "),nJ=a("a"),_xr=o("FlaxBartForQuestionAnswering"),bxr=o(" (BART model)"),vxr=l(),lC=a("li"),B0e=a("strong"),Fxr=o("bert"),Txr=o(" \u2014 "),sJ=a("a"),Mxr=o("FlaxBertForQuestionAnswering"),Exr=o(" (BERT model)"),Cxr=l(),iC=a("li"),P0e=a("strong"),wxr=o("big_bird"),Axr=o(" \u2014 "),lJ=a("a"),yxr=o("FlaxBigBirdForQuestionAnswering"),Lxr=o(" (BigBird model)"),xxr=l(),dC=a("li"),I0e=a("strong"),$xr=o("distilbert"),kxr=o(" \u2014 "),iJ=a("a"),Sxr=o("FlaxDistilBertForQuestionAnswering"),Rxr=o(" (DistilBERT model)"),Bxr=l(),cC=a("li"),q0e=a("strong"),Pxr=o("electra"),Ixr=o(" \u2014 "),dJ=a("a"),qxr=o("FlaxElectraForQuestionAnswering"),Nxr=o(" (ELECTRA model)"),jxr=l(),fC=a("li"),N0e=a("strong"),Dxr=o("mbart"),Gxr=o(" \u2014 "),cJ=a("a"),Oxr=o("FlaxMBartForQuestionAnswering"),Vxr=o(" (mBART model)"),Xxr=l(),mC=a("li"),j0e=a("strong"),zxr=o("roberta"),Qxr=o(" \u2014 "),fJ=a("a"),Wxr=o("FlaxRobertaForQuestionAnswering"),Hxr=o(" (RoBERTa model)"),Uxr=l(),gC=a("li"),D0e=a("strong"),Jxr=o("roformer"),Yxr=o(" \u2014 "),mJ=a("a"),Kxr=o("FlaxRoFormerForQuestionAnswering"),Zxr=o(" (RoFormer model)"),e9r=l(),hC=a("li"),G0e=a("strong"),o9r=o("xlm-roberta"),r9r=o(" \u2014 "),gJ=a("a"),t9r=o("FlaxXLMRobertaForQuestionAnswering"),a9r=o(" (XLM-RoBERTa model)"),n9r=l(),F(pC.$$.fragment),$Pe=l(),qc=a("h2"),uC=a("a"),O0e=a("span"),F(V7.$$.fragment),s9r=l(),V0e=a("span"),l9r=o("FlaxAutoModelForTokenClassification"),kPe=l(),pr=a("div"),F(X7.$$.fragment),i9r=l(),Nc=a("p"),d9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hJ=a("a"),c9r=o("from_pretrained()"),f9r=o(" class method or the "),pJ=a("a"),m9r=o("from_config()"),g9r=o(` class
method.`),h9r=l(),z7=a("p"),p9r=o("This class cannot be instantiated directly using "),X0e=a("code"),u9r=o("__init__()"),_9r=o(" (throws an error)."),b9r=l(),Ot=a("div"),F(Q7.$$.fragment),v9r=l(),z0e=a("p"),F9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T9r=l(),jc=a("p"),M9r=o(`Note:
Loading a model from its configuration file does `),Q0e=a("strong"),E9r=o("not"),C9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=a("a"),w9r=o("from_pretrained()"),A9r=o(" to load the model weights."),y9r=l(),F(_C.$$.fragment),L9r=l(),Or=a("div"),F(W7.$$.fragment),x9r=l(),W0e=a("p"),$9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k9r=l(),pn=a("p"),S9r=o("The model class to instantiate is selected based on the "),H0e=a("code"),R9r=o("model_type"),B9r=o(` property of the config object (either
passed as an argument or loaded from `),U0e=a("code"),P9r=o("pretrained_model_name_or_path"),I9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=a("code"),q9r=o("pretrained_model_name_or_path"),N9r=o(":"),j9r=l(),je=a("ul"),bC=a("li"),Y0e=a("strong"),D9r=o("albert"),G9r=o(" \u2014 "),_J=a("a"),O9r=o("FlaxAlbertForTokenClassification"),V9r=o(" (ALBERT model)"),X9r=l(),vC=a("li"),K0e=a("strong"),z9r=o("bert"),Q9r=o(" \u2014 "),bJ=a("a"),W9r=o("FlaxBertForTokenClassification"),H9r=o(" (BERT model)"),U9r=l(),FC=a("li"),Z0e=a("strong"),J9r=o("big_bird"),Y9r=o(" \u2014 "),vJ=a("a"),K9r=o("FlaxBigBirdForTokenClassification"),Z9r=o(" (BigBird model)"),e$r=l(),TC=a("li"),e6e=a("strong"),o$r=o("distilbert"),r$r=o(" \u2014 "),FJ=a("a"),t$r=o("FlaxDistilBertForTokenClassification"),a$r=o(" (DistilBERT model)"),n$r=l(),MC=a("li"),o6e=a("strong"),s$r=o("electra"),l$r=o(" \u2014 "),TJ=a("a"),i$r=o("FlaxElectraForTokenClassification"),d$r=o(" (ELECTRA model)"),c$r=l(),EC=a("li"),r6e=a("strong"),f$r=o("roberta"),m$r=o(" \u2014 "),MJ=a("a"),g$r=o("FlaxRobertaForTokenClassification"),h$r=o(" (RoBERTa model)"),p$r=l(),CC=a("li"),t6e=a("strong"),u$r=o("roformer"),_$r=o(" \u2014 "),EJ=a("a"),b$r=o("FlaxRoFormerForTokenClassification"),v$r=o(" (RoFormer model)"),F$r=l(),wC=a("li"),a6e=a("strong"),T$r=o("xlm-roberta"),M$r=o(" \u2014 "),CJ=a("a"),E$r=o("FlaxXLMRobertaForTokenClassification"),C$r=o(" (XLM-RoBERTa model)"),w$r=l(),F(AC.$$.fragment),SPe=l(),Dc=a("h2"),yC=a("a"),n6e=a("span"),F(H7.$$.fragment),A$r=l(),s6e=a("span"),y$r=o("FlaxAutoModelForMultipleChoice"),RPe=l(),ur=a("div"),F(U7.$$.fragment),L$r=l(),Gc=a("p"),x$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wJ=a("a"),$$r=o("from_pretrained()"),k$r=o(" class method or the "),AJ=a("a"),S$r=o("from_config()"),R$r=o(` class
method.`),B$r=l(),J7=a("p"),P$r=o("This class cannot be instantiated directly using "),l6e=a("code"),I$r=o("__init__()"),q$r=o(" (throws an error)."),N$r=l(),Vt=a("div"),F(Y7.$$.fragment),j$r=l(),i6e=a("p"),D$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),G$r=l(),Oc=a("p"),O$r=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),V$r=o("not"),X$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),z$r=o("from_pretrained()"),Q$r=o(" to load the model weights."),W$r=l(),F(LC.$$.fragment),H$r=l(),Vr=a("div"),F(K7.$$.fragment),U$r=l(),c6e=a("p"),J$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Y$r=l(),un=a("p"),K$r=o("The model class to instantiate is selected based on the "),f6e=a("code"),Z$r=o("model_type"),ekr=o(` property of the config object (either
passed as an argument or loaded from `),m6e=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=a("code"),tkr=o("pretrained_model_name_or_path"),akr=o(":"),nkr=l(),De=a("ul"),xC=a("li"),h6e=a("strong"),skr=o("albert"),lkr=o(" \u2014 "),LJ=a("a"),ikr=o("FlaxAlbertForMultipleChoice"),dkr=o(" (ALBERT model)"),ckr=l(),$C=a("li"),p6e=a("strong"),fkr=o("bert"),mkr=o(" \u2014 "),xJ=a("a"),gkr=o("FlaxBertForMultipleChoice"),hkr=o(" (BERT model)"),pkr=l(),kC=a("li"),u6e=a("strong"),ukr=o("big_bird"),_kr=o(" \u2014 "),$J=a("a"),bkr=o("FlaxBigBirdForMultipleChoice"),vkr=o(" (BigBird model)"),Fkr=l(),SC=a("li"),_6e=a("strong"),Tkr=o("distilbert"),Mkr=o(" \u2014 "),kJ=a("a"),Ekr=o("FlaxDistilBertForMultipleChoice"),Ckr=o(" (DistilBERT model)"),wkr=l(),RC=a("li"),b6e=a("strong"),Akr=o("electra"),ykr=o(" \u2014 "),SJ=a("a"),Lkr=o("FlaxElectraForMultipleChoice"),xkr=o(" (ELECTRA model)"),$kr=l(),BC=a("li"),v6e=a("strong"),kkr=o("roberta"),Skr=o(" \u2014 "),RJ=a("a"),Rkr=o("FlaxRobertaForMultipleChoice"),Bkr=o(" (RoBERTa model)"),Pkr=l(),PC=a("li"),F6e=a("strong"),Ikr=o("roformer"),qkr=o(" \u2014 "),BJ=a("a"),Nkr=o("FlaxRoFormerForMultipleChoice"),jkr=o(" (RoFormer model)"),Dkr=l(),IC=a("li"),T6e=a("strong"),Gkr=o("xlm-roberta"),Okr=o(" \u2014 "),PJ=a("a"),Vkr=o("FlaxXLMRobertaForMultipleChoice"),Xkr=o(" (XLM-RoBERTa model)"),zkr=l(),F(qC.$$.fragment),BPe=l(),Vc=a("h2"),NC=a("a"),M6e=a("span"),F(Z7.$$.fragment),Qkr=l(),E6e=a("span"),Wkr=o("FlaxAutoModelForNextSentencePrediction"),PPe=l(),_r=a("div"),F(ex.$$.fragment),Hkr=l(),Xc=a("p"),Ukr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IJ=a("a"),Jkr=o("from_pretrained()"),Ykr=o(" class method or the "),qJ=a("a"),Kkr=o("from_config()"),Zkr=o(` class
method.`),eSr=l(),ox=a("p"),oSr=o("This class cannot be instantiated directly using "),C6e=a("code"),rSr=o("__init__()"),tSr=o(" (throws an error)."),aSr=l(),Xt=a("div"),F(rx.$$.fragment),nSr=l(),w6e=a("p"),sSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lSr=l(),zc=a("p"),iSr=o(`Note:
Loading a model from its configuration file does `),A6e=a("strong"),dSr=o("not"),cSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),fSr=o("from_pretrained()"),mSr=o(" to load the model weights."),gSr=l(),F(jC.$$.fragment),hSr=l(),Xr=a("div"),F(tx.$$.fragment),pSr=l(),y6e=a("p"),uSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Sr=l(),_n=a("p"),bSr=o("The model class to instantiate is selected based on the "),L6e=a("code"),vSr=o("model_type"),FSr=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),TSr=o("pretrained_model_name_or_path"),MSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=a("code"),ESr=o("pretrained_model_name_or_path"),CSr=o(":"),wSr=l(),k6e=a("ul"),DC=a("li"),S6e=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),jJ=a("a"),LSr=o("FlaxBertForNextSentencePrediction"),xSr=o(" (BERT model)"),$Sr=l(),F(GC.$$.fragment),IPe=l(),Qc=a("h2"),OC=a("a"),R6e=a("span"),F(ax.$$.fragment),kSr=l(),B6e=a("span"),SSr=o("FlaxAutoModelForImageClassification"),qPe=l(),br=a("div"),F(nx.$$.fragment),RSr=l(),Wc=a("p"),BSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DJ=a("a"),PSr=o("from_pretrained()"),ISr=o(" class method or the "),GJ=a("a"),qSr=o("from_config()"),NSr=o(` class
method.`),jSr=l(),sx=a("p"),DSr=o("This class cannot be instantiated directly using "),P6e=a("code"),GSr=o("__init__()"),OSr=o(" (throws an error)."),VSr=l(),zt=a("div"),F(lx.$$.fragment),XSr=l(),I6e=a("p"),zSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),QSr=l(),Hc=a("p"),WSr=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),HSr=o("not"),USr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=a("a"),JSr=o("from_pretrained()"),YSr=o(" to load the model weights."),KSr=l(),F(VC.$$.fragment),ZSr=l(),zr=a("div"),F(ix.$$.fragment),eRr=l(),N6e=a("p"),oRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rRr=l(),bn=a("p"),tRr=o("The model class to instantiate is selected based on the "),j6e=a("code"),aRr=o("model_type"),nRr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(":"),cRr=l(),dx=a("ul"),XC=a("li"),O6e=a("strong"),fRr=o("beit"),mRr=o(" \u2014 "),VJ=a("a"),gRr=o("FlaxBeitForImageClassification"),hRr=o(" (BEiT model)"),pRr=l(),zC=a("li"),V6e=a("strong"),uRr=o("vit"),_Rr=o(" \u2014 "),XJ=a("a"),bRr=o("FlaxViTForImageClassification"),vRr=o(" (ViT model)"),FRr=l(),F(QC.$$.fragment),NPe=l(),Uc=a("h2"),WC=a("a"),X6e=a("span"),F(cx.$$.fragment),TRr=l(),z6e=a("span"),MRr=o("FlaxAutoModelForVision2Seq"),jPe=l(),vr=a("div"),F(fx.$$.fragment),ERr=l(),Jc=a("p"),CRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=a("a"),wRr=o("from_pretrained()"),ARr=o(" class method or the "),QJ=a("a"),yRr=o("from_config()"),LRr=o(` class
method.`),xRr=l(),mx=a("p"),$Rr=o("This class cannot be instantiated directly using "),Q6e=a("code"),kRr=o("__init__()"),SRr=o(" (throws an error)."),RRr=l(),Qt=a("div"),F(gx.$$.fragment),BRr=l(),W6e=a("p"),PRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IRr=l(),Yc=a("p"),qRr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),NRr=o("not"),jRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),DRr=o("from_pretrained()"),GRr=o(" to load the model weights."),ORr=l(),F(HC.$$.fragment),VRr=l(),Qr=a("div"),F(hx.$$.fragment),XRr=l(),U6e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QRr=l(),vn=a("p"),WRr=o("The model class to instantiate is selected based on the "),J6e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),Y6e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),eBr=l(),Z6e=a("ul"),UC=a("li"),eTe=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),HJ=a("a"),tBr=o("FlaxVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),F(JC.$$.fragment),this.h()},l(f){const _=jEt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var px=s(p);m=n(px,"A",{id:!0,class:!0,href:!0});var oTe=s(m);u=n(oTe,"SPAN",{});var rTe=s(u);T(d.$$.fragment,rTe),rTe.forEach(t),oTe.forEach(t),h=i(px),Fo=n(px,"SPAN",{});var tTe=s(Fo);oi=r(tTe,"Auto Classes"),tTe.forEach(t),px.forEach(t),of=i(f),Yr=n(f,"P",{});var ux=s(Yr);ri=r(ux,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(ux,"CODE",{});var aTe=s(ti);mA=r(aTe,"from_pretrained()"),aTe.forEach(t),rf=r(ux,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ux.forEach(t),qe=i(f),Ve=n(f,"P",{});var Fn=s(Ve);ai=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var nTe=s(Tn);gA=r(nTe,"AutoConfig"),nTe.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var sTe=s(En);hA=r(sTe,"AutoModel"),sTe.forEach(t),ni=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var lTe=s(Cn);pA=r(lTe,"AutoTokenizer"),lTe.forEach(t),si=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Xe=i(f),Ae=n(f,"P",{});var _x=s(Ae);y9=r(_x,"will create a model that is an instance of "),li=n(_x,"A",{href:!0});var iTe=s(li);L9=r(iTe,"BertModel"),iTe.forEach(t),x9=r(_x,"."),_x.forEach(t),To=i(f),va=n(f,"P",{});var bx=s(va);$9=r(bx,"There is one class of "),af=n(bx,"CODE",{});var dTe=s(af);k9=r(dTe,"AutoModel"),dTe.forEach(t),zqe=r(bx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),bx.forEach(t),jRe=i(f),ii=n(f,"H2",{class:!0});var vx=s(ii);nf=n(vx,"A",{id:!0,class:!0,href:!0});var cTe=s(nf);jK=n(cTe,"SPAN",{});var fTe=s(jK);T(uA.$$.fragment,fTe),fTe.forEach(t),cTe.forEach(t),Qqe=i(vx),DK=n(vx,"SPAN",{});var mTe=s(DK);Wqe=r(mTe,"Extending the Auto Classes"),mTe.forEach(t),vx.forEach(t),DRe=i(f),wn=n(f,"P",{});var Kc=s(wn);Hqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),GK=n(Kc,"CODE",{});var gTe=s(GK);Uqe=r(gTe,"NewModel"),gTe.forEach(t),Jqe=r(Kc,", make sure you have a "),OK=n(Kc,"CODE",{});var hTe=s(OK);Yqe=r(hTe,"NewModelConfig"),hTe.forEach(t),Kqe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),GRe=i(f),T(_A.$$.fragment,f),ORe=i(f),S9=n(f,"P",{});var pTe=s(S9);Zqe=r(pTe,"You will then be able to use the auto classes like you would usually do!"),pTe.forEach(t),VRe=i(f),T(sf.$$.fragment,f),XRe=i(f),di=n(f,"H2",{class:!0});var Fx=s(di);lf=n(Fx,"A",{id:!0,class:!0,href:!0});var uTe=s(lf);VK=n(uTe,"SPAN",{});var _Te=s(VK);T(bA.$$.fragment,_Te),_Te.forEach(t),uTe.forEach(t),eNe=i(Fx),XK=n(Fx,"SPAN",{});var bTe=s(XK);oNe=r(bTe,"AutoConfig"),bTe.forEach(t),Fx.forEach(t),zRe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(vA.$$.fragment,Ur),rNe=i(Ur),FA=n(Ur,"P",{});var Tx=s(FA);tNe=r(Tx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),R9=n(Tx,"A",{href:!0});var vTe=s(R9);aNe=r(vTe,"from_pretrained()"),vTe.forEach(t),nNe=r(Tx," class method."),Tx.forEach(t),sNe=i(Ur),TA=n(Ur,"P",{});var Mx=s(TA);lNe=r(Mx,"This class cannot be instantiated directly using "),zK=n(Mx,"CODE",{});var FTe=s(zK);iNe=r(FTe,"__init__()"),FTe.forEach(t),dNe=r(Mx," (throws an error)."),Mx.forEach(t),cNe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(MA.$$.fragment,Jr),fNe=i(Jr),QK=n(Jr,"P",{});var TTe=s(QK);mNe=r(TTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),TTe.forEach(t),gNe=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);hNe=r(Zc,"The configuration class to instantiate is selected based on the "),WK=n(Zc,"CODE",{});var MTe=s(WK);pNe=r(MTe,"model_type"),MTe.forEach(t),uNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),HK=n(Zc,"CODE",{});var ETe=s(HK);_Ne=r(ETe,"pretrained_model_name_or_path"),ETe.forEach(t),bNe=r(Zc,":"),Zc.forEach(t),vNe=i(Jr),A=n(Jr,"UL",{});var y=s(A);df=n(y,"LI",{});var YC=s(df);UK=n(YC,"STRONG",{});var CTe=s(UK);FNe=r(CTe,"albert"),CTe.forEach(t),TNe=r(YC," \u2014 "),B9=n(YC,"A",{href:!0});var wTe=s(B9);MNe=r(wTe,"AlbertConfig"),wTe.forEach(t),ENe=r(YC," (ALBERT model)"),YC.forEach(t),CNe=i(y),cf=n(y,"LI",{});var KC=s(cf);JK=n(KC,"STRONG",{});var ATe=s(JK);wNe=r(ATe,"bart"),ATe.forEach(t),ANe=r(KC," \u2014 "),P9=n(KC,"A",{href:!0});var yTe=s(P9);yNe=r(yTe,"BartConfig"),yTe.forEach(t),LNe=r(KC," (BART model)"),KC.forEach(t),xNe=i(y),ff=n(y,"LI",{});var ZC=s(ff);YK=n(ZC,"STRONG",{});var LTe=s(YK);$Ne=r(LTe,"beit"),LTe.forEach(t),kNe=r(ZC," \u2014 "),I9=n(ZC,"A",{href:!0});var xTe=s(I9);SNe=r(xTe,"BeitConfig"),xTe.forEach(t),RNe=r(ZC," (BEiT model)"),ZC.forEach(t),BNe=i(y),mf=n(y,"LI",{});var e3=s(mf);KK=n(e3,"STRONG",{});var $Te=s(KK);PNe=r($Te,"bert"),$Te.forEach(t),INe=r(e3," \u2014 "),q9=n(e3,"A",{href:!0});var kTe=s(q9);qNe=r(kTe,"BertConfig"),kTe.forEach(t),NNe=r(e3," (BERT model)"),e3.forEach(t),jNe=i(y),gf=n(y,"LI",{});var o3=s(gf);ZK=n(o3,"STRONG",{});var STe=s(ZK);DNe=r(STe,"bert-generation"),STe.forEach(t),GNe=r(o3," \u2014 "),N9=n(o3,"A",{href:!0});var RTe=s(N9);ONe=r(RTe,"BertGenerationConfig"),RTe.forEach(t),VNe=r(o3," (Bert Generation model)"),o3.forEach(t),XNe=i(y),hf=n(y,"LI",{});var r3=s(hf);eZ=n(r3,"STRONG",{});var BTe=s(eZ);zNe=r(BTe,"big_bird"),BTe.forEach(t),QNe=r(r3," \u2014 "),j9=n(r3,"A",{href:!0});var PTe=s(j9);WNe=r(PTe,"BigBirdConfig"),PTe.forEach(t),HNe=r(r3," (BigBird model)"),r3.forEach(t),UNe=i(y),pf=n(y,"LI",{});var t3=s(pf);oZ=n(t3,"STRONG",{});var ITe=s(oZ);JNe=r(ITe,"bigbird_pegasus"),ITe.forEach(t),YNe=r(t3," \u2014 "),D9=n(t3,"A",{href:!0});var qTe=s(D9);KNe=r(qTe,"BigBirdPegasusConfig"),qTe.forEach(t),ZNe=r(t3," (BigBirdPegasus model)"),t3.forEach(t),eje=i(y),uf=n(y,"LI",{});var a3=s(uf);rZ=n(a3,"STRONG",{});var NTe=s(rZ);oje=r(NTe,"blenderbot"),NTe.forEach(t),rje=r(a3," \u2014 "),G9=n(a3,"A",{href:!0});var jTe=s(G9);tje=r(jTe,"BlenderbotConfig"),jTe.forEach(t),aje=r(a3," (Blenderbot model)"),a3.forEach(t),nje=i(y),_f=n(y,"LI",{});var n3=s(_f);tZ=n(n3,"STRONG",{});var DTe=s(tZ);sje=r(DTe,"blenderbot-small"),DTe.forEach(t),lje=r(n3," \u2014 "),O9=n(n3,"A",{href:!0});var GTe=s(O9);ije=r(GTe,"BlenderbotSmallConfig"),GTe.forEach(t),dje=r(n3," (BlenderbotSmall model)"),n3.forEach(t),cje=i(y),bf=n(y,"LI",{});var s3=s(bf);aZ=n(s3,"STRONG",{});var OTe=s(aZ);fje=r(OTe,"camembert"),OTe.forEach(t),mje=r(s3," \u2014 "),V9=n(s3,"A",{href:!0});var VTe=s(V9);gje=r(VTe,"CamembertConfig"),VTe.forEach(t),hje=r(s3," (CamemBERT model)"),s3.forEach(t),pje=i(y),vf=n(y,"LI",{});var l3=s(vf);nZ=n(l3,"STRONG",{});var XTe=s(nZ);uje=r(XTe,"canine"),XTe.forEach(t),_je=r(l3," \u2014 "),X9=n(l3,"A",{href:!0});var zTe=s(X9);bje=r(zTe,"CanineConfig"),zTe.forEach(t),vje=r(l3," (Canine model)"),l3.forEach(t),Fje=i(y),Ff=n(y,"LI",{});var i3=s(Ff);sZ=n(i3,"STRONG",{});var QTe=s(sZ);Tje=r(QTe,"clip"),QTe.forEach(t),Mje=r(i3," \u2014 "),z9=n(i3,"A",{href:!0});var WTe=s(z9);Eje=r(WTe,"CLIPConfig"),WTe.forEach(t),Cje=r(i3," (CLIP model)"),i3.forEach(t),wje=i(y),Tf=n(y,"LI",{});var d3=s(Tf);lZ=n(d3,"STRONG",{});var HTe=s(lZ);Aje=r(HTe,"convbert"),HTe.forEach(t),yje=r(d3," \u2014 "),Q9=n(d3,"A",{href:!0});var UTe=s(Q9);Lje=r(UTe,"ConvBertConfig"),UTe.forEach(t),xje=r(d3," (ConvBERT model)"),d3.forEach(t),$je=i(y),Mf=n(y,"LI",{});var c3=s(Mf);iZ=n(c3,"STRONG",{});var JTe=s(iZ);kje=r(JTe,"convnext"),JTe.forEach(t),Sje=r(c3," \u2014 "),W9=n(c3,"A",{href:!0});var YTe=s(W9);Rje=r(YTe,"ConvNextConfig"),YTe.forEach(t),Bje=r(c3," (ConvNext model)"),c3.forEach(t),Pje=i(y),Ef=n(y,"LI",{});var f3=s(Ef);dZ=n(f3,"STRONG",{});var KTe=s(dZ);Ije=r(KTe,"ctrl"),KTe.forEach(t),qje=r(f3," \u2014 "),H9=n(f3,"A",{href:!0});var ZTe=s(H9);Nje=r(ZTe,"CTRLConfig"),ZTe.forEach(t),jje=r(f3," (CTRL model)"),f3.forEach(t),Dje=i(y),Cf=n(y,"LI",{});var m3=s(Cf);cZ=n(m3,"STRONG",{});var eMe=s(cZ);Gje=r(eMe,"data2vec-audio"),eMe.forEach(t),Oje=r(m3," \u2014 "),U9=n(m3,"A",{href:!0});var oMe=s(U9);Vje=r(oMe,"Data2VecAudioConfig"),oMe.forEach(t),Xje=r(m3," (Data2VecAudio model)"),m3.forEach(t),zje=i(y),wf=n(y,"LI",{});var g3=s(wf);fZ=n(g3,"STRONG",{});var rMe=s(fZ);Qje=r(rMe,"data2vec-text"),rMe.forEach(t),Wje=r(g3," \u2014 "),J9=n(g3,"A",{href:!0});var tMe=s(J9);Hje=r(tMe,"Data2VecTextConfig"),tMe.forEach(t),Uje=r(g3," (Data2VecText model)"),g3.forEach(t),Jje=i(y),Af=n(y,"LI",{});var h3=s(Af);mZ=n(h3,"STRONG",{});var aMe=s(mZ);Yje=r(aMe,"data2vec-vision"),aMe.forEach(t),Kje=r(h3," \u2014 "),Y9=n(h3,"A",{href:!0});var nMe=s(Y9);Zje=r(nMe,"Data2VecVisionConfig"),nMe.forEach(t),eDe=r(h3," (Data2VecVision model)"),h3.forEach(t),oDe=i(y),yf=n(y,"LI",{});var p3=s(yf);gZ=n(p3,"STRONG",{});var sMe=s(gZ);rDe=r(sMe,"deberta"),sMe.forEach(t),tDe=r(p3," \u2014 "),K9=n(p3,"A",{href:!0});var lMe=s(K9);aDe=r(lMe,"DebertaConfig"),lMe.forEach(t),nDe=r(p3," (DeBERTa model)"),p3.forEach(t),sDe=i(y),Lf=n(y,"LI",{});var u3=s(Lf);hZ=n(u3,"STRONG",{});var iMe=s(hZ);lDe=r(iMe,"deberta-v2"),iMe.forEach(t),iDe=r(u3," \u2014 "),Z9=n(u3,"A",{href:!0});var dMe=s(Z9);dDe=r(dMe,"DebertaV2Config"),dMe.forEach(t),cDe=r(u3," (DeBERTa-v2 model)"),u3.forEach(t),fDe=i(y),xf=n(y,"LI",{});var _3=s(xf);pZ=n(_3,"STRONG",{});var cMe=s(pZ);mDe=r(cMe,"decision_transformer"),cMe.forEach(t),gDe=r(_3," \u2014 "),e$=n(_3,"A",{href:!0});var fMe=s(e$);hDe=r(fMe,"DecisionTransformerConfig"),fMe.forEach(t),pDe=r(_3," (Decision Transformer model)"),_3.forEach(t),uDe=i(y),$f=n(y,"LI",{});var b3=s($f);uZ=n(b3,"STRONG",{});var mMe=s(uZ);_De=r(mMe,"deit"),mMe.forEach(t),bDe=r(b3," \u2014 "),o$=n(b3,"A",{href:!0});var gMe=s(o$);vDe=r(gMe,"DeiTConfig"),gMe.forEach(t),FDe=r(b3," (DeiT model)"),b3.forEach(t),TDe=i(y),kf=n(y,"LI",{});var hMe=s(kf);_Z=n(hMe,"STRONG",{});var lBr=s(_Z);MDe=r(lBr,"detr"),lBr.forEach(t),EDe=r(hMe," \u2014 "),r$=n(hMe,"A",{href:!0});var iBr=s(r$);CDe=r(iBr,"DetrConfig"),iBr.forEach(t),wDe=r(hMe," (DETR model)"),hMe.forEach(t),ADe=i(y),Sf=n(y,"LI",{});var pMe=s(Sf);bZ=n(pMe,"STRONG",{});var dBr=s(bZ);yDe=r(dBr,"distilbert"),dBr.forEach(t),LDe=r(pMe," \u2014 "),t$=n(pMe,"A",{href:!0});var cBr=s(t$);xDe=r(cBr,"DistilBertConfig"),cBr.forEach(t),$De=r(pMe," (DistilBERT model)"),pMe.forEach(t),kDe=i(y),Rf=n(y,"LI",{});var uMe=s(Rf);vZ=n(uMe,"STRONG",{});var fBr=s(vZ);SDe=r(fBr,"dpr"),fBr.forEach(t),RDe=r(uMe," \u2014 "),a$=n(uMe,"A",{href:!0});var mBr=s(a$);BDe=r(mBr,"DPRConfig"),mBr.forEach(t),PDe=r(uMe," (DPR model)"),uMe.forEach(t),IDe=i(y),Bf=n(y,"LI",{});var _Me=s(Bf);FZ=n(_Me,"STRONG",{});var gBr=s(FZ);qDe=r(gBr,"dpt"),gBr.forEach(t),NDe=r(_Me," \u2014 "),n$=n(_Me,"A",{href:!0});var hBr=s(n$);jDe=r(hBr,"DPTConfig"),hBr.forEach(t),DDe=r(_Me," (DPT model)"),_Me.forEach(t),GDe=i(y),Pf=n(y,"LI",{});var bMe=s(Pf);TZ=n(bMe,"STRONG",{});var pBr=s(TZ);ODe=r(pBr,"electra"),pBr.forEach(t),VDe=r(bMe," \u2014 "),s$=n(bMe,"A",{href:!0});var uBr=s(s$);XDe=r(uBr,"ElectraConfig"),uBr.forEach(t),zDe=r(bMe," (ELECTRA model)"),bMe.forEach(t),QDe=i(y),If=n(y,"LI",{});var vMe=s(If);MZ=n(vMe,"STRONG",{});var _Br=s(MZ);WDe=r(_Br,"encoder-decoder"),_Br.forEach(t),HDe=r(vMe," \u2014 "),l$=n(vMe,"A",{href:!0});var bBr=s(l$);UDe=r(bBr,"EncoderDecoderConfig"),bBr.forEach(t),JDe=r(vMe," (Encoder decoder model)"),vMe.forEach(t),YDe=i(y),qf=n(y,"LI",{});var FMe=s(qf);EZ=n(FMe,"STRONG",{});var vBr=s(EZ);KDe=r(vBr,"flaubert"),vBr.forEach(t),ZDe=r(FMe," \u2014 "),i$=n(FMe,"A",{href:!0});var FBr=s(i$);eGe=r(FBr,"FlaubertConfig"),FBr.forEach(t),oGe=r(FMe," (FlauBERT model)"),FMe.forEach(t),rGe=i(y),Nf=n(y,"LI",{});var TMe=s(Nf);CZ=n(TMe,"STRONG",{});var TBr=s(CZ);tGe=r(TBr,"fnet"),TBr.forEach(t),aGe=r(TMe," \u2014 "),d$=n(TMe,"A",{href:!0});var MBr=s(d$);nGe=r(MBr,"FNetConfig"),MBr.forEach(t),sGe=r(TMe," (FNet model)"),TMe.forEach(t),lGe=i(y),jf=n(y,"LI",{});var MMe=s(jf);wZ=n(MMe,"STRONG",{});var EBr=s(wZ);iGe=r(EBr,"fsmt"),EBr.forEach(t),dGe=r(MMe," \u2014 "),c$=n(MMe,"A",{href:!0});var CBr=s(c$);cGe=r(CBr,"FSMTConfig"),CBr.forEach(t),fGe=r(MMe," (FairSeq Machine-Translation model)"),MMe.forEach(t),mGe=i(y),Df=n(y,"LI",{});var EMe=s(Df);AZ=n(EMe,"STRONG",{});var wBr=s(AZ);gGe=r(wBr,"funnel"),wBr.forEach(t),hGe=r(EMe," \u2014 "),f$=n(EMe,"A",{href:!0});var ABr=s(f$);pGe=r(ABr,"FunnelConfig"),ABr.forEach(t),uGe=r(EMe," (Funnel Transformer model)"),EMe.forEach(t),_Ge=i(y),Gf=n(y,"LI",{});var CMe=s(Gf);yZ=n(CMe,"STRONG",{});var yBr=s(yZ);bGe=r(yBr,"glpn"),yBr.forEach(t),vGe=r(CMe," \u2014 "),m$=n(CMe,"A",{href:!0});var LBr=s(m$);FGe=r(LBr,"GLPNConfig"),LBr.forEach(t),TGe=r(CMe," (GLPN model)"),CMe.forEach(t),MGe=i(y),Of=n(y,"LI",{});var wMe=s(Of);LZ=n(wMe,"STRONG",{});var xBr=s(LZ);EGe=r(xBr,"gpt2"),xBr.forEach(t),CGe=r(wMe," \u2014 "),g$=n(wMe,"A",{href:!0});var $Br=s(g$);wGe=r($Br,"GPT2Config"),$Br.forEach(t),AGe=r(wMe," (OpenAI GPT-2 model)"),wMe.forEach(t),yGe=i(y),Vf=n(y,"LI",{});var AMe=s(Vf);xZ=n(AMe,"STRONG",{});var kBr=s(xZ);LGe=r(kBr,"gpt_neo"),kBr.forEach(t),xGe=r(AMe," \u2014 "),h$=n(AMe,"A",{href:!0});var SBr=s(h$);$Ge=r(SBr,"GPTNeoConfig"),SBr.forEach(t),kGe=r(AMe," (GPT Neo model)"),AMe.forEach(t),SGe=i(y),Xf=n(y,"LI",{});var yMe=s(Xf);$Z=n(yMe,"STRONG",{});var RBr=s($Z);RGe=r(RBr,"gptj"),RBr.forEach(t),BGe=r(yMe," \u2014 "),p$=n(yMe,"A",{href:!0});var BBr=s(p$);PGe=r(BBr,"GPTJConfig"),BBr.forEach(t),IGe=r(yMe," (GPT-J model)"),yMe.forEach(t),qGe=i(y),zf=n(y,"LI",{});var LMe=s(zf);kZ=n(LMe,"STRONG",{});var PBr=s(kZ);NGe=r(PBr,"hubert"),PBr.forEach(t),jGe=r(LMe," \u2014 "),u$=n(LMe,"A",{href:!0});var IBr=s(u$);DGe=r(IBr,"HubertConfig"),IBr.forEach(t),GGe=r(LMe," (Hubert model)"),LMe.forEach(t),OGe=i(y),Qf=n(y,"LI",{});var xMe=s(Qf);SZ=n(xMe,"STRONG",{});var qBr=s(SZ);VGe=r(qBr,"ibert"),qBr.forEach(t),XGe=r(xMe," \u2014 "),_$=n(xMe,"A",{href:!0});var NBr=s(_$);zGe=r(NBr,"IBertConfig"),NBr.forEach(t),QGe=r(xMe," (I-BERT model)"),xMe.forEach(t),WGe=i(y),Wf=n(y,"LI",{});var $Me=s(Wf);RZ=n($Me,"STRONG",{});var jBr=s(RZ);HGe=r(jBr,"imagegpt"),jBr.forEach(t),UGe=r($Me," \u2014 "),b$=n($Me,"A",{href:!0});var DBr=s(b$);JGe=r(DBr,"ImageGPTConfig"),DBr.forEach(t),YGe=r($Me," (ImageGPT model)"),$Me.forEach(t),KGe=i(y),Hf=n(y,"LI",{});var kMe=s(Hf);BZ=n(kMe,"STRONG",{});var GBr=s(BZ);ZGe=r(GBr,"layoutlm"),GBr.forEach(t),eOe=r(kMe," \u2014 "),v$=n(kMe,"A",{href:!0});var OBr=s(v$);oOe=r(OBr,"LayoutLMConfig"),OBr.forEach(t),rOe=r(kMe," (LayoutLM model)"),kMe.forEach(t),tOe=i(y),Uf=n(y,"LI",{});var SMe=s(Uf);PZ=n(SMe,"STRONG",{});var VBr=s(PZ);aOe=r(VBr,"layoutlmv2"),VBr.forEach(t),nOe=r(SMe," \u2014 "),F$=n(SMe,"A",{href:!0});var XBr=s(F$);sOe=r(XBr,"LayoutLMv2Config"),XBr.forEach(t),lOe=r(SMe," (LayoutLMv2 model)"),SMe.forEach(t),iOe=i(y),Jf=n(y,"LI",{});var RMe=s(Jf);IZ=n(RMe,"STRONG",{});var zBr=s(IZ);dOe=r(zBr,"led"),zBr.forEach(t),cOe=r(RMe," \u2014 "),T$=n(RMe,"A",{href:!0});var QBr=s(T$);fOe=r(QBr,"LEDConfig"),QBr.forEach(t),mOe=r(RMe," (LED model)"),RMe.forEach(t),gOe=i(y),Yf=n(y,"LI",{});var BMe=s(Yf);qZ=n(BMe,"STRONG",{});var WBr=s(qZ);hOe=r(WBr,"longformer"),WBr.forEach(t),pOe=r(BMe," \u2014 "),M$=n(BMe,"A",{href:!0});var HBr=s(M$);uOe=r(HBr,"LongformerConfig"),HBr.forEach(t),_Oe=r(BMe," (Longformer model)"),BMe.forEach(t),bOe=i(y),Kf=n(y,"LI",{});var PMe=s(Kf);NZ=n(PMe,"STRONG",{});var UBr=s(NZ);vOe=r(UBr,"luke"),UBr.forEach(t),FOe=r(PMe," \u2014 "),E$=n(PMe,"A",{href:!0});var JBr=s(E$);TOe=r(JBr,"LukeConfig"),JBr.forEach(t),MOe=r(PMe," (LUKE model)"),PMe.forEach(t),EOe=i(y),Zf=n(y,"LI",{});var IMe=s(Zf);jZ=n(IMe,"STRONG",{});var YBr=s(jZ);COe=r(YBr,"lxmert"),YBr.forEach(t),wOe=r(IMe," \u2014 "),C$=n(IMe,"A",{href:!0});var KBr=s(C$);AOe=r(KBr,"LxmertConfig"),KBr.forEach(t),yOe=r(IMe," (LXMERT model)"),IMe.forEach(t),LOe=i(y),em=n(y,"LI",{});var qMe=s(em);DZ=n(qMe,"STRONG",{});var ZBr=s(DZ);xOe=r(ZBr,"m2m_100"),ZBr.forEach(t),$Oe=r(qMe," \u2014 "),w$=n(qMe,"A",{href:!0});var ePr=s(w$);kOe=r(ePr,"M2M100Config"),ePr.forEach(t),SOe=r(qMe," (M2M100 model)"),qMe.forEach(t),ROe=i(y),om=n(y,"LI",{});var NMe=s(om);GZ=n(NMe,"STRONG",{});var oPr=s(GZ);BOe=r(oPr,"marian"),oPr.forEach(t),POe=r(NMe," \u2014 "),A$=n(NMe,"A",{href:!0});var rPr=s(A$);IOe=r(rPr,"MarianConfig"),rPr.forEach(t),qOe=r(NMe," (Marian model)"),NMe.forEach(t),NOe=i(y),rm=n(y,"LI",{});var jMe=s(rm);OZ=n(jMe,"STRONG",{});var tPr=s(OZ);jOe=r(tPr,"maskformer"),tPr.forEach(t),DOe=r(jMe," \u2014 "),y$=n(jMe,"A",{href:!0});var aPr=s(y$);GOe=r(aPr,"MaskFormerConfig"),aPr.forEach(t),OOe=r(jMe," (MaskFormer model)"),jMe.forEach(t),VOe=i(y),tm=n(y,"LI",{});var DMe=s(tm);VZ=n(DMe,"STRONG",{});var nPr=s(VZ);XOe=r(nPr,"mbart"),nPr.forEach(t),zOe=r(DMe," \u2014 "),L$=n(DMe,"A",{href:!0});var sPr=s(L$);QOe=r(sPr,"MBartConfig"),sPr.forEach(t),WOe=r(DMe," (mBART model)"),DMe.forEach(t),HOe=i(y),am=n(y,"LI",{});var GMe=s(am);XZ=n(GMe,"STRONG",{});var lPr=s(XZ);UOe=r(lPr,"mctc"),lPr.forEach(t),JOe=r(GMe," \u2014 "),zZ=n(GMe,"CODE",{});var iPr=s(zZ);YOe=r(iPr,"MCTCConfig"),iPr.forEach(t),KOe=r(GMe," (MCTC model)"),GMe.forEach(t),ZOe=i(y),nm=n(y,"LI",{});var OMe=s(nm);QZ=n(OMe,"STRONG",{});var dPr=s(QZ);eVe=r(dPr,"megatron-bert"),dPr.forEach(t),oVe=r(OMe," \u2014 "),x$=n(OMe,"A",{href:!0});var cPr=s(x$);rVe=r(cPr,"MegatronBertConfig"),cPr.forEach(t),tVe=r(OMe," (MegatronBert model)"),OMe.forEach(t),aVe=i(y),sm=n(y,"LI",{});var VMe=s(sm);WZ=n(VMe,"STRONG",{});var fPr=s(WZ);nVe=r(fPr,"mobilebert"),fPr.forEach(t),sVe=r(VMe," \u2014 "),$$=n(VMe,"A",{href:!0});var mPr=s($$);lVe=r(mPr,"MobileBertConfig"),mPr.forEach(t),iVe=r(VMe," (MobileBERT model)"),VMe.forEach(t),dVe=i(y),lm=n(y,"LI",{});var XMe=s(lm);HZ=n(XMe,"STRONG",{});var gPr=s(HZ);cVe=r(gPr,"mpnet"),gPr.forEach(t),fVe=r(XMe," \u2014 "),k$=n(XMe,"A",{href:!0});var hPr=s(k$);mVe=r(hPr,"MPNetConfig"),hPr.forEach(t),gVe=r(XMe," (MPNet model)"),XMe.forEach(t),hVe=i(y),im=n(y,"LI",{});var zMe=s(im);UZ=n(zMe,"STRONG",{});var pPr=s(UZ);pVe=r(pPr,"mt5"),pPr.forEach(t),uVe=r(zMe," \u2014 "),S$=n(zMe,"A",{href:!0});var uPr=s(S$);_Ve=r(uPr,"MT5Config"),uPr.forEach(t),bVe=r(zMe," (mT5 model)"),zMe.forEach(t),vVe=i(y),dm=n(y,"LI",{});var QMe=s(dm);JZ=n(QMe,"STRONG",{});var _Pr=s(JZ);FVe=r(_Pr,"nystromformer"),_Pr.forEach(t),TVe=r(QMe," \u2014 "),R$=n(QMe,"A",{href:!0});var bPr=s(R$);MVe=r(bPr,"NystromformerConfig"),bPr.forEach(t),EVe=r(QMe," (Nystromformer model)"),QMe.forEach(t),CVe=i(y),cm=n(y,"LI",{});var WMe=s(cm);YZ=n(WMe,"STRONG",{});var vPr=s(YZ);wVe=r(vPr,"openai-gpt"),vPr.forEach(t),AVe=r(WMe," \u2014 "),B$=n(WMe,"A",{href:!0});var FPr=s(B$);yVe=r(FPr,"OpenAIGPTConfig"),FPr.forEach(t),LVe=r(WMe," (OpenAI GPT model)"),WMe.forEach(t),xVe=i(y),fm=n(y,"LI",{});var HMe=s(fm);KZ=n(HMe,"STRONG",{});var TPr=s(KZ);$Ve=r(TPr,"pegasus"),TPr.forEach(t),kVe=r(HMe," \u2014 "),P$=n(HMe,"A",{href:!0});var MPr=s(P$);SVe=r(MPr,"PegasusConfig"),MPr.forEach(t),RVe=r(HMe," (Pegasus model)"),HMe.forEach(t),BVe=i(y),mm=n(y,"LI",{});var UMe=s(mm);ZZ=n(UMe,"STRONG",{});var EPr=s(ZZ);PVe=r(EPr,"perceiver"),EPr.forEach(t),IVe=r(UMe," \u2014 "),I$=n(UMe,"A",{href:!0});var CPr=s(I$);qVe=r(CPr,"PerceiverConfig"),CPr.forEach(t),NVe=r(UMe," (Perceiver model)"),UMe.forEach(t),jVe=i(y),gm=n(y,"LI",{});var JMe=s(gm);eee=n(JMe,"STRONG",{});var wPr=s(eee);DVe=r(wPr,"plbart"),wPr.forEach(t),GVe=r(JMe," \u2014 "),q$=n(JMe,"A",{href:!0});var APr=s(q$);OVe=r(APr,"PLBartConfig"),APr.forEach(t),VVe=r(JMe," (PLBart model)"),JMe.forEach(t),XVe=i(y),hm=n(y,"LI",{});var YMe=s(hm);oee=n(YMe,"STRONG",{});var yPr=s(oee);zVe=r(yPr,"poolformer"),yPr.forEach(t),QVe=r(YMe," \u2014 "),N$=n(YMe,"A",{href:!0});var LPr=s(N$);WVe=r(LPr,"PoolFormerConfig"),LPr.forEach(t),HVe=r(YMe," (PoolFormer model)"),YMe.forEach(t),UVe=i(y),pm=n(y,"LI",{});var KMe=s(pm);ree=n(KMe,"STRONG",{});var xPr=s(ree);JVe=r(xPr,"prophetnet"),xPr.forEach(t),YVe=r(KMe," \u2014 "),j$=n(KMe,"A",{href:!0});var $Pr=s(j$);KVe=r($Pr,"ProphetNetConfig"),$Pr.forEach(t),ZVe=r(KMe," (ProphetNet model)"),KMe.forEach(t),eXe=i(y),um=n(y,"LI",{});var ZMe=s(um);tee=n(ZMe,"STRONG",{});var kPr=s(tee);oXe=r(kPr,"qdqbert"),kPr.forEach(t),rXe=r(ZMe," \u2014 "),D$=n(ZMe,"A",{href:!0});var SPr=s(D$);tXe=r(SPr,"QDQBertConfig"),SPr.forEach(t),aXe=r(ZMe," (QDQBert model)"),ZMe.forEach(t),nXe=i(y),_m=n(y,"LI",{});var eEe=s(_m);aee=n(eEe,"STRONG",{});var RPr=s(aee);sXe=r(RPr,"rag"),RPr.forEach(t),lXe=r(eEe," \u2014 "),G$=n(eEe,"A",{href:!0});var BPr=s(G$);iXe=r(BPr,"RagConfig"),BPr.forEach(t),dXe=r(eEe," (RAG model)"),eEe.forEach(t),cXe=i(y),bm=n(y,"LI",{});var oEe=s(bm);nee=n(oEe,"STRONG",{});var PPr=s(nee);fXe=r(PPr,"realm"),PPr.forEach(t),mXe=r(oEe," \u2014 "),O$=n(oEe,"A",{href:!0});var IPr=s(O$);gXe=r(IPr,"RealmConfig"),IPr.forEach(t),hXe=r(oEe," (Realm model)"),oEe.forEach(t),pXe=i(y),vm=n(y,"LI",{});var rEe=s(vm);see=n(rEe,"STRONG",{});var qPr=s(see);uXe=r(qPr,"reformer"),qPr.forEach(t),_Xe=r(rEe," \u2014 "),V$=n(rEe,"A",{href:!0});var NPr=s(V$);bXe=r(NPr,"ReformerConfig"),NPr.forEach(t),vXe=r(rEe," (Reformer model)"),rEe.forEach(t),FXe=i(y),Fm=n(y,"LI",{});var tEe=s(Fm);lee=n(tEe,"STRONG",{});var jPr=s(lee);TXe=r(jPr,"regnet"),jPr.forEach(t),MXe=r(tEe," \u2014 "),X$=n(tEe,"A",{href:!0});var DPr=s(X$);EXe=r(DPr,"RegNetConfig"),DPr.forEach(t),CXe=r(tEe," (RegNet model)"),tEe.forEach(t),wXe=i(y),Tm=n(y,"LI",{});var aEe=s(Tm);iee=n(aEe,"STRONG",{});var GPr=s(iee);AXe=r(GPr,"rembert"),GPr.forEach(t),yXe=r(aEe," \u2014 "),z$=n(aEe,"A",{href:!0});var OPr=s(z$);LXe=r(OPr,"RemBertConfig"),OPr.forEach(t),xXe=r(aEe," (RemBERT model)"),aEe.forEach(t),$Xe=i(y),Mm=n(y,"LI",{});var nEe=s(Mm);dee=n(nEe,"STRONG",{});var VPr=s(dee);kXe=r(VPr,"resnet"),VPr.forEach(t),SXe=r(nEe," \u2014 "),Q$=n(nEe,"A",{href:!0});var XPr=s(Q$);RXe=r(XPr,"ResNetConfig"),XPr.forEach(t),BXe=r(nEe," (ResNet model)"),nEe.forEach(t),PXe=i(y),Em=n(y,"LI",{});var sEe=s(Em);cee=n(sEe,"STRONG",{});var zPr=s(cee);IXe=r(zPr,"retribert"),zPr.forEach(t),qXe=r(sEe," \u2014 "),W$=n(sEe,"A",{href:!0});var QPr=s(W$);NXe=r(QPr,"RetriBertConfig"),QPr.forEach(t),jXe=r(sEe," (RetriBERT model)"),sEe.forEach(t),DXe=i(y),Cm=n(y,"LI",{});var lEe=s(Cm);fee=n(lEe,"STRONG",{});var WPr=s(fee);GXe=r(WPr,"roberta"),WPr.forEach(t),OXe=r(lEe," \u2014 "),H$=n(lEe,"A",{href:!0});var HPr=s(H$);VXe=r(HPr,"RobertaConfig"),HPr.forEach(t),XXe=r(lEe," (RoBERTa model)"),lEe.forEach(t),zXe=i(y),wm=n(y,"LI",{});var iEe=s(wm);mee=n(iEe,"STRONG",{});var UPr=s(mee);QXe=r(UPr,"roformer"),UPr.forEach(t),WXe=r(iEe," \u2014 "),U$=n(iEe,"A",{href:!0});var JPr=s(U$);HXe=r(JPr,"RoFormerConfig"),JPr.forEach(t),UXe=r(iEe," (RoFormer model)"),iEe.forEach(t),JXe=i(y),Am=n(y,"LI",{});var dEe=s(Am);gee=n(dEe,"STRONG",{});var YPr=s(gee);YXe=r(YPr,"segformer"),YPr.forEach(t),KXe=r(dEe," \u2014 "),J$=n(dEe,"A",{href:!0});var KPr=s(J$);ZXe=r(KPr,"SegformerConfig"),KPr.forEach(t),eze=r(dEe," (SegFormer model)"),dEe.forEach(t),oze=i(y),ym=n(y,"LI",{});var cEe=s(ym);hee=n(cEe,"STRONG",{});var ZPr=s(hee);rze=r(ZPr,"sew"),ZPr.forEach(t),tze=r(cEe," \u2014 "),Y$=n(cEe,"A",{href:!0});var eIr=s(Y$);aze=r(eIr,"SEWConfig"),eIr.forEach(t),nze=r(cEe," (SEW model)"),cEe.forEach(t),sze=i(y),Lm=n(y,"LI",{});var fEe=s(Lm);pee=n(fEe,"STRONG",{});var oIr=s(pee);lze=r(oIr,"sew-d"),oIr.forEach(t),ize=r(fEe," \u2014 "),K$=n(fEe,"A",{href:!0});var rIr=s(K$);dze=r(rIr,"SEWDConfig"),rIr.forEach(t),cze=r(fEe," (SEW-D model)"),fEe.forEach(t),fze=i(y),xm=n(y,"LI",{});var mEe=s(xm);uee=n(mEe,"STRONG",{});var tIr=s(uee);mze=r(tIr,"speech-encoder-decoder"),tIr.forEach(t),gze=r(mEe," \u2014 "),Z$=n(mEe,"A",{href:!0});var aIr=s(Z$);hze=r(aIr,"SpeechEncoderDecoderConfig"),aIr.forEach(t),pze=r(mEe," (Speech Encoder decoder model)"),mEe.forEach(t),uze=i(y),$m=n(y,"LI",{});var gEe=s($m);_ee=n(gEe,"STRONG",{});var nIr=s(_ee);_ze=r(nIr,"speech_to_text"),nIr.forEach(t),bze=r(gEe," \u2014 "),ek=n(gEe,"A",{href:!0});var sIr=s(ek);vze=r(sIr,"Speech2TextConfig"),sIr.forEach(t),Fze=r(gEe," (Speech2Text model)"),gEe.forEach(t),Tze=i(y),km=n(y,"LI",{});var hEe=s(km);bee=n(hEe,"STRONG",{});var lIr=s(bee);Mze=r(lIr,"speech_to_text_2"),lIr.forEach(t),Eze=r(hEe," \u2014 "),ok=n(hEe,"A",{href:!0});var iIr=s(ok);Cze=r(iIr,"Speech2Text2Config"),iIr.forEach(t),wze=r(hEe," (Speech2Text2 model)"),hEe.forEach(t),Aze=i(y),Sm=n(y,"LI",{});var pEe=s(Sm);vee=n(pEe,"STRONG",{});var dIr=s(vee);yze=r(dIr,"splinter"),dIr.forEach(t),Lze=r(pEe," \u2014 "),rk=n(pEe,"A",{href:!0});var cIr=s(rk);xze=r(cIr,"SplinterConfig"),cIr.forEach(t),$ze=r(pEe," (Splinter model)"),pEe.forEach(t),kze=i(y),Rm=n(y,"LI",{});var uEe=s(Rm);Fee=n(uEe,"STRONG",{});var fIr=s(Fee);Sze=r(fIr,"squeezebert"),fIr.forEach(t),Rze=r(uEe," \u2014 "),tk=n(uEe,"A",{href:!0});var mIr=s(tk);Bze=r(mIr,"SqueezeBertConfig"),mIr.forEach(t),Pze=r(uEe," (SqueezeBERT model)"),uEe.forEach(t),Ize=i(y),Bm=n(y,"LI",{});var _Ee=s(Bm);Tee=n(_Ee,"STRONG",{});var gIr=s(Tee);qze=r(gIr,"swin"),gIr.forEach(t),Nze=r(_Ee," \u2014 "),ak=n(_Ee,"A",{href:!0});var hIr=s(ak);jze=r(hIr,"SwinConfig"),hIr.forEach(t),Dze=r(_Ee," (Swin model)"),_Ee.forEach(t),Gze=i(y),Pm=n(y,"LI",{});var bEe=s(Pm);Mee=n(bEe,"STRONG",{});var pIr=s(Mee);Oze=r(pIr,"t5"),pIr.forEach(t),Vze=r(bEe," \u2014 "),nk=n(bEe,"A",{href:!0});var uIr=s(nk);Xze=r(uIr,"T5Config"),uIr.forEach(t),zze=r(bEe," (T5 model)"),bEe.forEach(t),Qze=i(y),Im=n(y,"LI",{});var vEe=s(Im);Eee=n(vEe,"STRONG",{});var _Ir=s(Eee);Wze=r(_Ir,"tapas"),_Ir.forEach(t),Hze=r(vEe," \u2014 "),sk=n(vEe,"A",{href:!0});var bIr=s(sk);Uze=r(bIr,"TapasConfig"),bIr.forEach(t),Jze=r(vEe," (TAPAS model)"),vEe.forEach(t),Yze=i(y),qm=n(y,"LI",{});var FEe=s(qm);Cee=n(FEe,"STRONG",{});var vIr=s(Cee);Kze=r(vIr,"tapex"),vIr.forEach(t),Zze=r(FEe," \u2014 "),lk=n(FEe,"A",{href:!0});var FIr=s(lk);eQe=r(FIr,"BartConfig"),FIr.forEach(t),oQe=r(FEe," (TAPEX model)"),FEe.forEach(t),rQe=i(y),Nm=n(y,"LI",{});var TEe=s(Nm);wee=n(TEe,"STRONG",{});var TIr=s(wee);tQe=r(TIr,"transfo-xl"),TIr.forEach(t),aQe=r(TEe," \u2014 "),ik=n(TEe,"A",{href:!0});var MIr=s(ik);nQe=r(MIr,"TransfoXLConfig"),MIr.forEach(t),sQe=r(TEe," (Transformer-XL model)"),TEe.forEach(t),lQe=i(y),jm=n(y,"LI",{});var MEe=s(jm);Aee=n(MEe,"STRONG",{});var EIr=s(Aee);iQe=r(EIr,"trocr"),EIr.forEach(t),dQe=r(MEe," \u2014 "),dk=n(MEe,"A",{href:!0});var CIr=s(dk);cQe=r(CIr,"TrOCRConfig"),CIr.forEach(t),fQe=r(MEe," (TrOCR model)"),MEe.forEach(t),mQe=i(y),Dm=n(y,"LI",{});var EEe=s(Dm);yee=n(EEe,"STRONG",{});var wIr=s(yee);gQe=r(wIr,"unispeech"),wIr.forEach(t),hQe=r(EEe," \u2014 "),ck=n(EEe,"A",{href:!0});var AIr=s(ck);pQe=r(AIr,"UniSpeechConfig"),AIr.forEach(t),uQe=r(EEe," (UniSpeech model)"),EEe.forEach(t),_Qe=i(y),Gm=n(y,"LI",{});var CEe=s(Gm);Lee=n(CEe,"STRONG",{});var yIr=s(Lee);bQe=r(yIr,"unispeech-sat"),yIr.forEach(t),vQe=r(CEe," \u2014 "),fk=n(CEe,"A",{href:!0});var LIr=s(fk);FQe=r(LIr,"UniSpeechSatConfig"),LIr.forEach(t),TQe=r(CEe," (UniSpeechSat model)"),CEe.forEach(t),MQe=i(y),Om=n(y,"LI",{});var wEe=s(Om);xee=n(wEe,"STRONG",{});var xIr=s(xee);EQe=r(xIr,"van"),xIr.forEach(t),CQe=r(wEe," \u2014 "),mk=n(wEe,"A",{href:!0});var $Ir=s(mk);wQe=r($Ir,"VanConfig"),$Ir.forEach(t),AQe=r(wEe," (VAN model)"),wEe.forEach(t),yQe=i(y),Vm=n(y,"LI",{});var AEe=s(Vm);$ee=n(AEe,"STRONG",{});var kIr=s($ee);LQe=r(kIr,"vilt"),kIr.forEach(t),xQe=r(AEe," \u2014 "),gk=n(AEe,"A",{href:!0});var SIr=s(gk);$Qe=r(SIr,"ViltConfig"),SIr.forEach(t),kQe=r(AEe," (ViLT model)"),AEe.forEach(t),SQe=i(y),Xm=n(y,"LI",{});var yEe=s(Xm);kee=n(yEe,"STRONG",{});var RIr=s(kee);RQe=r(RIr,"vision-encoder-decoder"),RIr.forEach(t),BQe=r(yEe," \u2014 "),hk=n(yEe,"A",{href:!0});var BIr=s(hk);PQe=r(BIr,"VisionEncoderDecoderConfig"),BIr.forEach(t),IQe=r(yEe," (Vision Encoder decoder model)"),yEe.forEach(t),qQe=i(y),zm=n(y,"LI",{});var LEe=s(zm);See=n(LEe,"STRONG",{});var PIr=s(See);NQe=r(PIr,"vision-text-dual-encoder"),PIr.forEach(t),jQe=r(LEe," \u2014 "),pk=n(LEe,"A",{href:!0});var IIr=s(pk);DQe=r(IIr,"VisionTextDualEncoderConfig"),IIr.forEach(t),GQe=r(LEe," (VisionTextDualEncoder model)"),LEe.forEach(t),OQe=i(y),Qm=n(y,"LI",{});var xEe=s(Qm);Ree=n(xEe,"STRONG",{});var qIr=s(Ree);VQe=r(qIr,"visual_bert"),qIr.forEach(t),XQe=r(xEe," \u2014 "),uk=n(xEe,"A",{href:!0});var NIr=s(uk);zQe=r(NIr,"VisualBertConfig"),NIr.forEach(t),QQe=r(xEe," (VisualBert model)"),xEe.forEach(t),WQe=i(y),Wm=n(y,"LI",{});var $Ee=s(Wm);Bee=n($Ee,"STRONG",{});var jIr=s(Bee);HQe=r(jIr,"vit"),jIr.forEach(t),UQe=r($Ee," \u2014 "),_k=n($Ee,"A",{href:!0});var DIr=s(_k);JQe=r(DIr,"ViTConfig"),DIr.forEach(t),YQe=r($Ee," (ViT model)"),$Ee.forEach(t),KQe=i(y),Hm=n(y,"LI",{});var kEe=s(Hm);Pee=n(kEe,"STRONG",{});var GIr=s(Pee);ZQe=r(GIr,"vit_mae"),GIr.forEach(t),eWe=r(kEe," \u2014 "),bk=n(kEe,"A",{href:!0});var OIr=s(bk);oWe=r(OIr,"ViTMAEConfig"),OIr.forEach(t),rWe=r(kEe," (ViTMAE model)"),kEe.forEach(t),tWe=i(y),Um=n(y,"LI",{});var SEe=s(Um);Iee=n(SEe,"STRONG",{});var VIr=s(Iee);aWe=r(VIr,"wav2vec2"),VIr.forEach(t),nWe=r(SEe," \u2014 "),vk=n(SEe,"A",{href:!0});var XIr=s(vk);sWe=r(XIr,"Wav2Vec2Config"),XIr.forEach(t),lWe=r(SEe," (Wav2Vec2 model)"),SEe.forEach(t),iWe=i(y),Jm=n(y,"LI",{});var REe=s(Jm);qee=n(REe,"STRONG",{});var zIr=s(qee);dWe=r(zIr,"wavlm"),zIr.forEach(t),cWe=r(REe," \u2014 "),Fk=n(REe,"A",{href:!0});var QIr=s(Fk);fWe=r(QIr,"WavLMConfig"),QIr.forEach(t),mWe=r(REe," (WavLM model)"),REe.forEach(t),gWe=i(y),Ym=n(y,"LI",{});var BEe=s(Ym);Nee=n(BEe,"STRONG",{});var WIr=s(Nee);hWe=r(WIr,"xglm"),WIr.forEach(t),pWe=r(BEe," \u2014 "),Tk=n(BEe,"A",{href:!0});var HIr=s(Tk);uWe=r(HIr,"XGLMConfig"),HIr.forEach(t),_We=r(BEe," (XGLM model)"),BEe.forEach(t),bWe=i(y),Km=n(y,"LI",{});var PEe=s(Km);jee=n(PEe,"STRONG",{});var UIr=s(jee);vWe=r(UIr,"xlm"),UIr.forEach(t),FWe=r(PEe," \u2014 "),Mk=n(PEe,"A",{href:!0});var JIr=s(Mk);TWe=r(JIr,"XLMConfig"),JIr.forEach(t),MWe=r(PEe," (XLM model)"),PEe.forEach(t),EWe=i(y),Zm=n(y,"LI",{});var IEe=s(Zm);Dee=n(IEe,"STRONG",{});var YIr=s(Dee);CWe=r(YIr,"xlm-prophetnet"),YIr.forEach(t),wWe=r(IEe," \u2014 "),Ek=n(IEe,"A",{href:!0});var KIr=s(Ek);AWe=r(KIr,"XLMProphetNetConfig"),KIr.forEach(t),yWe=r(IEe," (XLMProphetNet model)"),IEe.forEach(t),LWe=i(y),eg=n(y,"LI",{});var qEe=s(eg);Gee=n(qEe,"STRONG",{});var ZIr=s(Gee);xWe=r(ZIr,"xlm-roberta"),ZIr.forEach(t),$We=r(qEe," \u2014 "),Ck=n(qEe,"A",{href:!0});var eqr=s(Ck);kWe=r(eqr,"XLMRobertaConfig"),eqr.forEach(t),SWe=r(qEe," (XLM-RoBERTa model)"),qEe.forEach(t),RWe=i(y),og=n(y,"LI",{});var NEe=s(og);Oee=n(NEe,"STRONG",{});var oqr=s(Oee);BWe=r(oqr,"xlm-roberta-xl"),oqr.forEach(t),PWe=r(NEe," \u2014 "),wk=n(NEe,"A",{href:!0});var rqr=s(wk);IWe=r(rqr,"XLMRobertaXLConfig"),rqr.forEach(t),qWe=r(NEe," (XLM-RoBERTa-XL model)"),NEe.forEach(t),NWe=i(y),rg=n(y,"LI",{});var jEe=s(rg);Vee=n(jEe,"STRONG",{});var tqr=s(Vee);jWe=r(tqr,"xlnet"),tqr.forEach(t),DWe=r(jEe," \u2014 "),Ak=n(jEe,"A",{href:!0});var aqr=s(Ak);GWe=r(aqr,"XLNetConfig"),aqr.forEach(t),OWe=r(jEe," (XLNet model)"),jEe.forEach(t),VWe=i(y),tg=n(y,"LI",{});var DEe=s(tg);Xee=n(DEe,"STRONG",{});var nqr=s(Xee);XWe=r(nqr,"yoso"),nqr.forEach(t),zWe=r(DEe," \u2014 "),yk=n(DEe,"A",{href:!0});var sqr=s(yk);QWe=r(sqr,"YosoConfig"),sqr.forEach(t),WWe=r(DEe," (YOSO model)"),DEe.forEach(t),y.forEach(t),HWe=i(Jr),T(ag.$$.fragment,Jr),Jr.forEach(t),UWe=i(Ur),ng=n(Ur,"DIV",{class:!0});var GPe=s(ng);T(EA.$$.fragment,GPe),JWe=i(GPe),zee=n(GPe,"P",{});var lqr=s(zee);YWe=r(lqr,"Register a new configuration for this class."),lqr.forEach(t),GPe.forEach(t),Ur.forEach(t),QRe=i(f),fi=n(f,"H2",{class:!0});var OPe=s(fi);sg=n(OPe,"A",{id:!0,class:!0,href:!0});var iqr=s(sg);Qee=n(iqr,"SPAN",{});var dqr=s(Qee);T(CA.$$.fragment,dqr),dqr.forEach(t),iqr.forEach(t),KWe=i(OPe),Wee=n(OPe,"SPAN",{});var cqr=s(Wee);ZWe=r(cqr,"AutoTokenizer"),cqr.forEach(t),OPe.forEach(t),WRe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(wA.$$.fragment,$s),eHe=i($s),AA=n($s,"P",{});var VPe=s(AA);oHe=r(VPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Lk=n(VPe,"A",{href:!0});var fqr=s(Lk);rHe=r(fqr,"AutoTokenizer.from_pretrained()"),fqr.forEach(t),tHe=r(VPe," class method."),VPe.forEach(t),aHe=i($s),yA=n($s,"P",{});var XPe=s(yA);nHe=r(XPe,"This class cannot be instantiated directly using "),Hee=n(XPe,"CODE",{});var mqr=s(Hee);sHe=r(mqr,"__init__()"),mqr.forEach(t),lHe=r(XPe," (throws an error)."),XPe.forEach(t),iHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(LA.$$.fragment,ks),dHe=i(ks),Uee=n(ks,"P",{});var gqr=s(Uee);cHe=r(gqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gqr.forEach(t),fHe=i(ks),Fa=n(ks,"P",{});var v3=s(Fa);mHe=r(v3,"The tokenizer class to instantiate is selected based on the "),Jee=n(v3,"CODE",{});var hqr=s(Jee);gHe=r(hqr,"model_type"),hqr.forEach(t),hHe=r(v3,` property of the config object (either
passed as an argument or loaded from `),Yee=n(v3,"CODE",{});var pqr=s(Yee);pHe=r(pqr,"pretrained_model_name_or_path"),pqr.forEach(t),uHe=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kee=n(v3,"CODE",{});var uqr=s(Kee);_He=r(uqr,"pretrained_model_name_or_path"),uqr.forEach(t),bHe=r(v3,":"),v3.forEach(t),vHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var Ex=s(An);Zee=n(Ex,"STRONG",{});var _qr=s(Zee);FHe=r(_qr,"albert"),_qr.forEach(t),THe=r(Ex," \u2014 "),xk=n(Ex,"A",{href:!0});var bqr=s(xk);MHe=r(bqr,"AlbertTokenizer"),bqr.forEach(t),EHe=r(Ex," or "),$k=n(Ex,"A",{href:!0});var vqr=s($k);CHe=r(vqr,"AlbertTokenizerFast"),vqr.forEach(t),wHe=r(Ex," (ALBERT model)"),Ex.forEach(t),AHe=i(S),yn=n(S,"LI",{});var Cx=s(yn);eoe=n(Cx,"STRONG",{});var Fqr=s(eoe);yHe=r(Fqr,"bart"),Fqr.forEach(t),LHe=r(Cx," \u2014 "),kk=n(Cx,"A",{href:!0});var Tqr=s(kk);xHe=r(Tqr,"BartTokenizer"),Tqr.forEach(t),$He=r(Cx," or "),Sk=n(Cx,"A",{href:!0});var Mqr=s(Sk);kHe=r(Mqr,"BartTokenizerFast"),Mqr.forEach(t),SHe=r(Cx," (BART model)"),Cx.forEach(t),RHe=i(S),Ln=n(S,"LI",{});var wx=s(Ln);ooe=n(wx,"STRONG",{});var Eqr=s(ooe);BHe=r(Eqr,"barthez"),Eqr.forEach(t),PHe=r(wx," \u2014 "),Rk=n(wx,"A",{href:!0});var Cqr=s(Rk);IHe=r(Cqr,"BarthezTokenizer"),Cqr.forEach(t),qHe=r(wx," or "),Bk=n(wx,"A",{href:!0});var wqr=s(Bk);NHe=r(wqr,"BarthezTokenizerFast"),wqr.forEach(t),jHe=r(wx," (BARThez model)"),wx.forEach(t),DHe=i(S),lg=n(S,"LI",{});var GEe=s(lg);roe=n(GEe,"STRONG",{});var Aqr=s(roe);GHe=r(Aqr,"bartpho"),Aqr.forEach(t),OHe=r(GEe," \u2014 "),Pk=n(GEe,"A",{href:!0});var yqr=s(Pk);VHe=r(yqr,"BartphoTokenizer"),yqr.forEach(t),XHe=r(GEe," (BARTpho model)"),GEe.forEach(t),zHe=i(S),xn=n(S,"LI",{});var Ax=s(xn);toe=n(Ax,"STRONG",{});var Lqr=s(toe);QHe=r(Lqr,"bert"),Lqr.forEach(t),WHe=r(Ax," \u2014 "),Ik=n(Ax,"A",{href:!0});var xqr=s(Ik);HHe=r(xqr,"BertTokenizer"),xqr.forEach(t),UHe=r(Ax," or "),qk=n(Ax,"A",{href:!0});var $qr=s(qk);JHe=r($qr,"BertTokenizerFast"),$qr.forEach(t),YHe=r(Ax," (BERT model)"),Ax.forEach(t),KHe=i(S),ig=n(S,"LI",{});var OEe=s(ig);aoe=n(OEe,"STRONG",{});var kqr=s(aoe);ZHe=r(kqr,"bert-generation"),kqr.forEach(t),eUe=r(OEe," \u2014 "),Nk=n(OEe,"A",{href:!0});var Sqr=s(Nk);oUe=r(Sqr,"BertGenerationTokenizer"),Sqr.forEach(t),rUe=r(OEe," (Bert Generation model)"),OEe.forEach(t),tUe=i(S),dg=n(S,"LI",{});var VEe=s(dg);noe=n(VEe,"STRONG",{});var Rqr=s(noe);aUe=r(Rqr,"bert-japanese"),Rqr.forEach(t),nUe=r(VEe," \u2014 "),jk=n(VEe,"A",{href:!0});var Bqr=s(jk);sUe=r(Bqr,"BertJapaneseTokenizer"),Bqr.forEach(t),lUe=r(VEe," (BertJapanese model)"),VEe.forEach(t),iUe=i(S),cg=n(S,"LI",{});var XEe=s(cg);soe=n(XEe,"STRONG",{});var Pqr=s(soe);dUe=r(Pqr,"bertweet"),Pqr.forEach(t),cUe=r(XEe," \u2014 "),Dk=n(XEe,"A",{href:!0});var Iqr=s(Dk);fUe=r(Iqr,"BertweetTokenizer"),Iqr.forEach(t),mUe=r(XEe," (Bertweet model)"),XEe.forEach(t),gUe=i(S),$n=n(S,"LI",{});var yx=s($n);loe=n(yx,"STRONG",{});var qqr=s(loe);hUe=r(qqr,"big_bird"),qqr.forEach(t),pUe=r(yx," \u2014 "),Gk=n(yx,"A",{href:!0});var Nqr=s(Gk);uUe=r(Nqr,"BigBirdTokenizer"),Nqr.forEach(t),_Ue=r(yx," or "),Ok=n(yx,"A",{href:!0});var jqr=s(Ok);bUe=r(jqr,"BigBirdTokenizerFast"),jqr.forEach(t),vUe=r(yx," (BigBird model)"),yx.forEach(t),FUe=i(S),kn=n(S,"LI",{});var Lx=s(kn);ioe=n(Lx,"STRONG",{});var Dqr=s(ioe);TUe=r(Dqr,"bigbird_pegasus"),Dqr.forEach(t),MUe=r(Lx," \u2014 "),Vk=n(Lx,"A",{href:!0});var Gqr=s(Vk);EUe=r(Gqr,"PegasusTokenizer"),Gqr.forEach(t),CUe=r(Lx," or "),Xk=n(Lx,"A",{href:!0});var Oqr=s(Xk);wUe=r(Oqr,"PegasusTokenizerFast"),Oqr.forEach(t),AUe=r(Lx," (BigBirdPegasus model)"),Lx.forEach(t),yUe=i(S),Sn=n(S,"LI",{});var xx=s(Sn);doe=n(xx,"STRONG",{});var Vqr=s(doe);LUe=r(Vqr,"blenderbot"),Vqr.forEach(t),xUe=r(xx," \u2014 "),zk=n(xx,"A",{href:!0});var Xqr=s(zk);$Ue=r(Xqr,"BlenderbotTokenizer"),Xqr.forEach(t),kUe=r(xx," or "),Qk=n(xx,"A",{href:!0});var zqr=s(Qk);SUe=r(zqr,"BlenderbotTokenizerFast"),zqr.forEach(t),RUe=r(xx," (Blenderbot model)"),xx.forEach(t),BUe=i(S),fg=n(S,"LI",{});var zEe=s(fg);coe=n(zEe,"STRONG",{});var Qqr=s(coe);PUe=r(Qqr,"blenderbot-small"),Qqr.forEach(t),IUe=r(zEe," \u2014 "),Wk=n(zEe,"A",{href:!0});var Wqr=s(Wk);qUe=r(Wqr,"BlenderbotSmallTokenizer"),Wqr.forEach(t),NUe=r(zEe," (BlenderbotSmall model)"),zEe.forEach(t),jUe=i(S),mg=n(S,"LI",{});var QEe=s(mg);foe=n(QEe,"STRONG",{});var Hqr=s(foe);DUe=r(Hqr,"byt5"),Hqr.forEach(t),GUe=r(QEe," \u2014 "),Hk=n(QEe,"A",{href:!0});var Uqr=s(Hk);OUe=r(Uqr,"ByT5Tokenizer"),Uqr.forEach(t),VUe=r(QEe," (ByT5 model)"),QEe.forEach(t),XUe=i(S),Rn=n(S,"LI",{});var $x=s(Rn);moe=n($x,"STRONG",{});var Jqr=s(moe);zUe=r(Jqr,"camembert"),Jqr.forEach(t),QUe=r($x," \u2014 "),Uk=n($x,"A",{href:!0});var Yqr=s(Uk);WUe=r(Yqr,"CamembertTokenizer"),Yqr.forEach(t),HUe=r($x," or "),Jk=n($x,"A",{href:!0});var Kqr=s(Jk);UUe=r(Kqr,"CamembertTokenizerFast"),Kqr.forEach(t),JUe=r($x," (CamemBERT model)"),$x.forEach(t),YUe=i(S),gg=n(S,"LI",{});var WEe=s(gg);goe=n(WEe,"STRONG",{});var Zqr=s(goe);KUe=r(Zqr,"canine"),Zqr.forEach(t),ZUe=r(WEe," \u2014 "),Yk=n(WEe,"A",{href:!0});var eNr=s(Yk);eJe=r(eNr,"CanineTokenizer"),eNr.forEach(t),oJe=r(WEe," (Canine model)"),WEe.forEach(t),rJe=i(S),Bn=n(S,"LI",{});var kx=s(Bn);hoe=n(kx,"STRONG",{});var oNr=s(hoe);tJe=r(oNr,"clip"),oNr.forEach(t),aJe=r(kx," \u2014 "),Kk=n(kx,"A",{href:!0});var rNr=s(Kk);nJe=r(rNr,"CLIPTokenizer"),rNr.forEach(t),sJe=r(kx," or "),Zk=n(kx,"A",{href:!0});var tNr=s(Zk);lJe=r(tNr,"CLIPTokenizerFast"),tNr.forEach(t),iJe=r(kx," (CLIP model)"),kx.forEach(t),dJe=i(S),Pn=n(S,"LI",{});var Sx=s(Pn);poe=n(Sx,"STRONG",{});var aNr=s(poe);cJe=r(aNr,"convbert"),aNr.forEach(t),fJe=r(Sx," \u2014 "),eS=n(Sx,"A",{href:!0});var nNr=s(eS);mJe=r(nNr,"ConvBertTokenizer"),nNr.forEach(t),gJe=r(Sx," or "),oS=n(Sx,"A",{href:!0});var sNr=s(oS);hJe=r(sNr,"ConvBertTokenizerFast"),sNr.forEach(t),pJe=r(Sx," (ConvBERT model)"),Sx.forEach(t),uJe=i(S),In=n(S,"LI",{});var Rx=s(In);uoe=n(Rx,"STRONG",{});var lNr=s(uoe);_Je=r(lNr,"cpm"),lNr.forEach(t),bJe=r(Rx," \u2014 "),rS=n(Rx,"A",{href:!0});var iNr=s(rS);vJe=r(iNr,"CpmTokenizer"),iNr.forEach(t),FJe=r(Rx," or "),_oe=n(Rx,"CODE",{});var dNr=s(_oe);TJe=r(dNr,"CpmTokenizerFast"),dNr.forEach(t),MJe=r(Rx," (CPM model)"),Rx.forEach(t),EJe=i(S),hg=n(S,"LI",{});var HEe=s(hg);boe=n(HEe,"STRONG",{});var cNr=s(boe);CJe=r(cNr,"ctrl"),cNr.forEach(t),wJe=r(HEe," \u2014 "),tS=n(HEe,"A",{href:!0});var fNr=s(tS);AJe=r(fNr,"CTRLTokenizer"),fNr.forEach(t),yJe=r(HEe," (CTRL model)"),HEe.forEach(t),LJe=i(S),qn=n(S,"LI",{});var Bx=s(qn);voe=n(Bx,"STRONG",{});var mNr=s(voe);xJe=r(mNr,"data2vec-text"),mNr.forEach(t),$Je=r(Bx," \u2014 "),aS=n(Bx,"A",{href:!0});var gNr=s(aS);kJe=r(gNr,"RobertaTokenizer"),gNr.forEach(t),SJe=r(Bx," or "),nS=n(Bx,"A",{href:!0});var hNr=s(nS);RJe=r(hNr,"RobertaTokenizerFast"),hNr.forEach(t),BJe=r(Bx," (Data2VecText model)"),Bx.forEach(t),PJe=i(S),Nn=n(S,"LI",{});var Px=s(Nn);Foe=n(Px,"STRONG",{});var pNr=s(Foe);IJe=r(pNr,"deberta"),pNr.forEach(t),qJe=r(Px," \u2014 "),sS=n(Px,"A",{href:!0});var uNr=s(sS);NJe=r(uNr,"DebertaTokenizer"),uNr.forEach(t),jJe=r(Px," or "),lS=n(Px,"A",{href:!0});var _Nr=s(lS);DJe=r(_Nr,"DebertaTokenizerFast"),_Nr.forEach(t),GJe=r(Px," (DeBERTa model)"),Px.forEach(t),OJe=i(S),jn=n(S,"LI",{});var Ix=s(jn);Toe=n(Ix,"STRONG",{});var bNr=s(Toe);VJe=r(bNr,"deberta-v2"),bNr.forEach(t),XJe=r(Ix," \u2014 "),iS=n(Ix,"A",{href:!0});var vNr=s(iS);zJe=r(vNr,"DebertaV2Tokenizer"),vNr.forEach(t),QJe=r(Ix," or "),dS=n(Ix,"A",{href:!0});var FNr=s(dS);WJe=r(FNr,"DebertaV2TokenizerFast"),FNr.forEach(t),HJe=r(Ix," (DeBERTa-v2 model)"),Ix.forEach(t),UJe=i(S),Dn=n(S,"LI",{});var qx=s(Dn);Moe=n(qx,"STRONG",{});var TNr=s(Moe);JJe=r(TNr,"distilbert"),TNr.forEach(t),YJe=r(qx," \u2014 "),cS=n(qx,"A",{href:!0});var MNr=s(cS);KJe=r(MNr,"DistilBertTokenizer"),MNr.forEach(t),ZJe=r(qx," or "),fS=n(qx,"A",{href:!0});var ENr=s(fS);eYe=r(ENr,"DistilBertTokenizerFast"),ENr.forEach(t),oYe=r(qx," (DistilBERT model)"),qx.forEach(t),rYe=i(S),Gn=n(S,"LI",{});var Nx=s(Gn);Eoe=n(Nx,"STRONG",{});var CNr=s(Eoe);tYe=r(CNr,"dpr"),CNr.forEach(t),aYe=r(Nx," \u2014 "),mS=n(Nx,"A",{href:!0});var wNr=s(mS);nYe=r(wNr,"DPRQuestionEncoderTokenizer"),wNr.forEach(t),sYe=r(Nx," or "),gS=n(Nx,"A",{href:!0});var ANr=s(gS);lYe=r(ANr,"DPRQuestionEncoderTokenizerFast"),ANr.forEach(t),iYe=r(Nx," (DPR model)"),Nx.forEach(t),dYe=i(S),On=n(S,"LI",{});var jx=s(On);Coe=n(jx,"STRONG",{});var yNr=s(Coe);cYe=r(yNr,"electra"),yNr.forEach(t),fYe=r(jx," \u2014 "),hS=n(jx,"A",{href:!0});var LNr=s(hS);mYe=r(LNr,"ElectraTokenizer"),LNr.forEach(t),gYe=r(jx," or "),pS=n(jx,"A",{href:!0});var xNr=s(pS);hYe=r(xNr,"ElectraTokenizerFast"),xNr.forEach(t),pYe=r(jx," (ELECTRA model)"),jx.forEach(t),uYe=i(S),pg=n(S,"LI",{});var UEe=s(pg);woe=n(UEe,"STRONG",{});var $Nr=s(woe);_Ye=r($Nr,"flaubert"),$Nr.forEach(t),bYe=r(UEe," \u2014 "),uS=n(UEe,"A",{href:!0});var kNr=s(uS);vYe=r(kNr,"FlaubertTokenizer"),kNr.forEach(t),FYe=r(UEe," (FlauBERT model)"),UEe.forEach(t),TYe=i(S),Vn=n(S,"LI",{});var Dx=s(Vn);Aoe=n(Dx,"STRONG",{});var SNr=s(Aoe);MYe=r(SNr,"fnet"),SNr.forEach(t),EYe=r(Dx," \u2014 "),_S=n(Dx,"A",{href:!0});var RNr=s(_S);CYe=r(RNr,"FNetTokenizer"),RNr.forEach(t),wYe=r(Dx," or "),bS=n(Dx,"A",{href:!0});var BNr=s(bS);AYe=r(BNr,"FNetTokenizerFast"),BNr.forEach(t),yYe=r(Dx," (FNet model)"),Dx.forEach(t),LYe=i(S),ug=n(S,"LI",{});var JEe=s(ug);yoe=n(JEe,"STRONG",{});var PNr=s(yoe);xYe=r(PNr,"fsmt"),PNr.forEach(t),$Ye=r(JEe," \u2014 "),vS=n(JEe,"A",{href:!0});var INr=s(vS);kYe=r(INr,"FSMTTokenizer"),INr.forEach(t),SYe=r(JEe," (FairSeq Machine-Translation model)"),JEe.forEach(t),RYe=i(S),Xn=n(S,"LI",{});var Gx=s(Xn);Loe=n(Gx,"STRONG",{});var qNr=s(Loe);BYe=r(qNr,"funnel"),qNr.forEach(t),PYe=r(Gx," \u2014 "),FS=n(Gx,"A",{href:!0});var NNr=s(FS);IYe=r(NNr,"FunnelTokenizer"),NNr.forEach(t),qYe=r(Gx," or "),TS=n(Gx,"A",{href:!0});var jNr=s(TS);NYe=r(jNr,"FunnelTokenizerFast"),jNr.forEach(t),jYe=r(Gx," (Funnel Transformer model)"),Gx.forEach(t),DYe=i(S),zn=n(S,"LI",{});var Ox=s(zn);xoe=n(Ox,"STRONG",{});var DNr=s(xoe);GYe=r(DNr,"gpt2"),DNr.forEach(t),OYe=r(Ox," \u2014 "),MS=n(Ox,"A",{href:!0});var GNr=s(MS);VYe=r(GNr,"GPT2Tokenizer"),GNr.forEach(t),XYe=r(Ox," or "),ES=n(Ox,"A",{href:!0});var ONr=s(ES);zYe=r(ONr,"GPT2TokenizerFast"),ONr.forEach(t),QYe=r(Ox," (OpenAI GPT-2 model)"),Ox.forEach(t),WYe=i(S),Qn=n(S,"LI",{});var Vx=s(Qn);$oe=n(Vx,"STRONG",{});var VNr=s($oe);HYe=r(VNr,"gpt_neo"),VNr.forEach(t),UYe=r(Vx," \u2014 "),CS=n(Vx,"A",{href:!0});var XNr=s(CS);JYe=r(XNr,"GPT2Tokenizer"),XNr.forEach(t),YYe=r(Vx," or "),wS=n(Vx,"A",{href:!0});var zNr=s(wS);KYe=r(zNr,"GPT2TokenizerFast"),zNr.forEach(t),ZYe=r(Vx," (GPT Neo model)"),Vx.forEach(t),eKe=i(S),Wn=n(S,"LI",{});var Xx=s(Wn);koe=n(Xx,"STRONG",{});var QNr=s(koe);oKe=r(QNr,"gptj"),QNr.forEach(t),rKe=r(Xx," \u2014 "),AS=n(Xx,"A",{href:!0});var WNr=s(AS);tKe=r(WNr,"GPT2Tokenizer"),WNr.forEach(t),aKe=r(Xx," or "),yS=n(Xx,"A",{href:!0});var HNr=s(yS);nKe=r(HNr,"GPT2TokenizerFast"),HNr.forEach(t),sKe=r(Xx," (GPT-J model)"),Xx.forEach(t),lKe=i(S),Hn=n(S,"LI",{});var zx=s(Hn);Soe=n(zx,"STRONG",{});var UNr=s(Soe);iKe=r(UNr,"herbert"),UNr.forEach(t),dKe=r(zx," \u2014 "),LS=n(zx,"A",{href:!0});var JNr=s(LS);cKe=r(JNr,"HerbertTokenizer"),JNr.forEach(t),fKe=r(zx," or "),xS=n(zx,"A",{href:!0});var YNr=s(xS);mKe=r(YNr,"HerbertTokenizerFast"),YNr.forEach(t),gKe=r(zx," (HerBERT model)"),zx.forEach(t),hKe=i(S),_g=n(S,"LI",{});var YEe=s(_g);Roe=n(YEe,"STRONG",{});var KNr=s(Roe);pKe=r(KNr,"hubert"),KNr.forEach(t),uKe=r(YEe," \u2014 "),$S=n(YEe,"A",{href:!0});var ZNr=s($S);_Ke=r(ZNr,"Wav2Vec2CTCTokenizer"),ZNr.forEach(t),bKe=r(YEe," (Hubert model)"),YEe.forEach(t),vKe=i(S),Un=n(S,"LI",{});var Qx=s(Un);Boe=n(Qx,"STRONG",{});var ejr=s(Boe);FKe=r(ejr,"ibert"),ejr.forEach(t),TKe=r(Qx," \u2014 "),kS=n(Qx,"A",{href:!0});var ojr=s(kS);MKe=r(ojr,"RobertaTokenizer"),ojr.forEach(t),EKe=r(Qx," or "),SS=n(Qx,"A",{href:!0});var rjr=s(SS);CKe=r(rjr,"RobertaTokenizerFast"),rjr.forEach(t),wKe=r(Qx," (I-BERT model)"),Qx.forEach(t),AKe=i(S),Jn=n(S,"LI",{});var Wx=s(Jn);Poe=n(Wx,"STRONG",{});var tjr=s(Poe);yKe=r(tjr,"layoutlm"),tjr.forEach(t),LKe=r(Wx," \u2014 "),RS=n(Wx,"A",{href:!0});var ajr=s(RS);xKe=r(ajr,"LayoutLMTokenizer"),ajr.forEach(t),$Ke=r(Wx," or "),BS=n(Wx,"A",{href:!0});var njr=s(BS);kKe=r(njr,"LayoutLMTokenizerFast"),njr.forEach(t),SKe=r(Wx," (LayoutLM model)"),Wx.forEach(t),RKe=i(S),Yn=n(S,"LI",{});var Hx=s(Yn);Ioe=n(Hx,"STRONG",{});var sjr=s(Ioe);BKe=r(sjr,"layoutlmv2"),sjr.forEach(t),PKe=r(Hx," \u2014 "),PS=n(Hx,"A",{href:!0});var ljr=s(PS);IKe=r(ljr,"LayoutLMv2Tokenizer"),ljr.forEach(t),qKe=r(Hx," or "),IS=n(Hx,"A",{href:!0});var ijr=s(IS);NKe=r(ijr,"LayoutLMv2TokenizerFast"),ijr.forEach(t),jKe=r(Hx," (LayoutLMv2 model)"),Hx.forEach(t),DKe=i(S),Kn=n(S,"LI",{});var Ux=s(Kn);qoe=n(Ux,"STRONG",{});var djr=s(qoe);GKe=r(djr,"layoutxlm"),djr.forEach(t),OKe=r(Ux," \u2014 "),qS=n(Ux,"A",{href:!0});var cjr=s(qS);VKe=r(cjr,"LayoutXLMTokenizer"),cjr.forEach(t),XKe=r(Ux," or "),NS=n(Ux,"A",{href:!0});var fjr=s(NS);zKe=r(fjr,"LayoutXLMTokenizerFast"),fjr.forEach(t),QKe=r(Ux," (LayoutXLM model)"),Ux.forEach(t),WKe=i(S),Zn=n(S,"LI",{});var Jx=s(Zn);Noe=n(Jx,"STRONG",{});var mjr=s(Noe);HKe=r(mjr,"led"),mjr.forEach(t),UKe=r(Jx," \u2014 "),jS=n(Jx,"A",{href:!0});var gjr=s(jS);JKe=r(gjr,"LEDTokenizer"),gjr.forEach(t),YKe=r(Jx," or "),DS=n(Jx,"A",{href:!0});var hjr=s(DS);KKe=r(hjr,"LEDTokenizerFast"),hjr.forEach(t),ZKe=r(Jx," (LED model)"),Jx.forEach(t),eZe=i(S),es=n(S,"LI",{});var Yx=s(es);joe=n(Yx,"STRONG",{});var pjr=s(joe);oZe=r(pjr,"longformer"),pjr.forEach(t),rZe=r(Yx," \u2014 "),GS=n(Yx,"A",{href:!0});var ujr=s(GS);tZe=r(ujr,"LongformerTokenizer"),ujr.forEach(t),aZe=r(Yx," or "),OS=n(Yx,"A",{href:!0});var _jr=s(OS);nZe=r(_jr,"LongformerTokenizerFast"),_jr.forEach(t),sZe=r(Yx," (Longformer model)"),Yx.forEach(t),lZe=i(S),bg=n(S,"LI",{});var KEe=s(bg);Doe=n(KEe,"STRONG",{});var bjr=s(Doe);iZe=r(bjr,"luke"),bjr.forEach(t),dZe=r(KEe," \u2014 "),VS=n(KEe,"A",{href:!0});var vjr=s(VS);cZe=r(vjr,"LukeTokenizer"),vjr.forEach(t),fZe=r(KEe," (LUKE model)"),KEe.forEach(t),mZe=i(S),os=n(S,"LI",{});var Kx=s(os);Goe=n(Kx,"STRONG",{});var Fjr=s(Goe);gZe=r(Fjr,"lxmert"),Fjr.forEach(t),hZe=r(Kx," \u2014 "),XS=n(Kx,"A",{href:!0});var Tjr=s(XS);pZe=r(Tjr,"LxmertTokenizer"),Tjr.forEach(t),uZe=r(Kx," or "),zS=n(Kx,"A",{href:!0});var Mjr=s(zS);_Ze=r(Mjr,"LxmertTokenizerFast"),Mjr.forEach(t),bZe=r(Kx," (LXMERT model)"),Kx.forEach(t),vZe=i(S),vg=n(S,"LI",{});var ZEe=s(vg);Ooe=n(ZEe,"STRONG",{});var Ejr=s(Ooe);FZe=r(Ejr,"m2m_100"),Ejr.forEach(t),TZe=r(ZEe," \u2014 "),QS=n(ZEe,"A",{href:!0});var Cjr=s(QS);MZe=r(Cjr,"M2M100Tokenizer"),Cjr.forEach(t),EZe=r(ZEe," (M2M100 model)"),ZEe.forEach(t),CZe=i(S),Fg=n(S,"LI",{});var e5e=s(Fg);Voe=n(e5e,"STRONG",{});var wjr=s(Voe);wZe=r(wjr,"marian"),wjr.forEach(t),AZe=r(e5e," \u2014 "),WS=n(e5e,"A",{href:!0});var Ajr=s(WS);yZe=r(Ajr,"MarianTokenizer"),Ajr.forEach(t),LZe=r(e5e," (Marian model)"),e5e.forEach(t),xZe=i(S),rs=n(S,"LI",{});var Zx=s(rs);Xoe=n(Zx,"STRONG",{});var yjr=s(Xoe);$Ze=r(yjr,"mbart"),yjr.forEach(t),kZe=r(Zx," \u2014 "),HS=n(Zx,"A",{href:!0});var Ljr=s(HS);SZe=r(Ljr,"MBartTokenizer"),Ljr.forEach(t),RZe=r(Zx," or "),US=n(Zx,"A",{href:!0});var xjr=s(US);BZe=r(xjr,"MBartTokenizerFast"),xjr.forEach(t),PZe=r(Zx," (mBART model)"),Zx.forEach(t),IZe=i(S),ts=n(S,"LI",{});var e9=s(ts);zoe=n(e9,"STRONG",{});var $jr=s(zoe);qZe=r($jr,"mbart50"),$jr.forEach(t),NZe=r(e9," \u2014 "),JS=n(e9,"A",{href:!0});var kjr=s(JS);jZe=r(kjr,"MBart50Tokenizer"),kjr.forEach(t),DZe=r(e9," or "),YS=n(e9,"A",{href:!0});var Sjr=s(YS);GZe=r(Sjr,"MBart50TokenizerFast"),Sjr.forEach(t),OZe=r(e9," (mBART-50 model)"),e9.forEach(t),VZe=i(S),as=n(S,"LI",{});var o9=s(as);Qoe=n(o9,"STRONG",{});var Rjr=s(Qoe);XZe=r(Rjr,"megatron-bert"),Rjr.forEach(t),zZe=r(o9," \u2014 "),KS=n(o9,"A",{href:!0});var Bjr=s(KS);QZe=r(Bjr,"BertTokenizer"),Bjr.forEach(t),WZe=r(o9," or "),ZS=n(o9,"A",{href:!0});var Pjr=s(ZS);HZe=r(Pjr,"BertTokenizerFast"),Pjr.forEach(t),UZe=r(o9," (MegatronBert model)"),o9.forEach(t),JZe=i(S),Tg=n(S,"LI",{});var o5e=s(Tg);Woe=n(o5e,"STRONG",{});var Ijr=s(Woe);YZe=r(Ijr,"mluke"),Ijr.forEach(t),KZe=r(o5e," \u2014 "),eR=n(o5e,"A",{href:!0});var qjr=s(eR);ZZe=r(qjr,"MLukeTokenizer"),qjr.forEach(t),eeo=r(o5e," (mLUKE model)"),o5e.forEach(t),oeo=i(S),ns=n(S,"LI",{});var r9=s(ns);Hoe=n(r9,"STRONG",{});var Njr=s(Hoe);reo=r(Njr,"mobilebert"),Njr.forEach(t),teo=r(r9," \u2014 "),oR=n(r9,"A",{href:!0});var jjr=s(oR);aeo=r(jjr,"MobileBertTokenizer"),jjr.forEach(t),neo=r(r9," or "),rR=n(r9,"A",{href:!0});var Djr=s(rR);seo=r(Djr,"MobileBertTokenizerFast"),Djr.forEach(t),leo=r(r9," (MobileBERT model)"),r9.forEach(t),ieo=i(S),ss=n(S,"LI",{});var t9=s(ss);Uoe=n(t9,"STRONG",{});var Gjr=s(Uoe);deo=r(Gjr,"mpnet"),Gjr.forEach(t),ceo=r(t9," \u2014 "),tR=n(t9,"A",{href:!0});var Ojr=s(tR);feo=r(Ojr,"MPNetTokenizer"),Ojr.forEach(t),meo=r(t9," or "),aR=n(t9,"A",{href:!0});var Vjr=s(aR);geo=r(Vjr,"MPNetTokenizerFast"),Vjr.forEach(t),heo=r(t9," (MPNet model)"),t9.forEach(t),peo=i(S),ls=n(S,"LI",{});var a9=s(ls);Joe=n(a9,"STRONG",{});var Xjr=s(Joe);ueo=r(Xjr,"mt5"),Xjr.forEach(t),_eo=r(a9," \u2014 "),nR=n(a9,"A",{href:!0});var zjr=s(nR);beo=r(zjr,"MT5Tokenizer"),zjr.forEach(t),veo=r(a9," or "),sR=n(a9,"A",{href:!0});var Qjr=s(sR);Feo=r(Qjr,"MT5TokenizerFast"),Qjr.forEach(t),Teo=r(a9," (mT5 model)"),a9.forEach(t),Meo=i(S),is=n(S,"LI",{});var n9=s(is);Yoe=n(n9,"STRONG",{});var Wjr=s(Yoe);Eeo=r(Wjr,"nystromformer"),Wjr.forEach(t),Ceo=r(n9," \u2014 "),lR=n(n9,"A",{href:!0});var Hjr=s(lR);weo=r(Hjr,"AlbertTokenizer"),Hjr.forEach(t),Aeo=r(n9," or "),iR=n(n9,"A",{href:!0});var Ujr=s(iR);yeo=r(Ujr,"AlbertTokenizerFast"),Ujr.forEach(t),Leo=r(n9," (Nystromformer model)"),n9.forEach(t),xeo=i(S),ds=n(S,"LI",{});var s9=s(ds);Koe=n(s9,"STRONG",{});var Jjr=s(Koe);$eo=r(Jjr,"openai-gpt"),Jjr.forEach(t),keo=r(s9," \u2014 "),dR=n(s9,"A",{href:!0});var Yjr=s(dR);Seo=r(Yjr,"OpenAIGPTTokenizer"),Yjr.forEach(t),Reo=r(s9," or "),cR=n(s9,"A",{href:!0});var Kjr=s(cR);Beo=r(Kjr,"OpenAIGPTTokenizerFast"),Kjr.forEach(t),Peo=r(s9," (OpenAI GPT model)"),s9.forEach(t),Ieo=i(S),cs=n(S,"LI",{});var l9=s(cs);Zoe=n(l9,"STRONG",{});var Zjr=s(Zoe);qeo=r(Zjr,"pegasus"),Zjr.forEach(t),Neo=r(l9," \u2014 "),fR=n(l9,"A",{href:!0});var eDr=s(fR);jeo=r(eDr,"PegasusTokenizer"),eDr.forEach(t),Deo=r(l9," or "),mR=n(l9,"A",{href:!0});var oDr=s(mR);Geo=r(oDr,"PegasusTokenizerFast"),oDr.forEach(t),Oeo=r(l9," (Pegasus model)"),l9.forEach(t),Veo=i(S),Mg=n(S,"LI",{});var r5e=s(Mg);ere=n(r5e,"STRONG",{});var rDr=s(ere);Xeo=r(rDr,"perceiver"),rDr.forEach(t),zeo=r(r5e," \u2014 "),gR=n(r5e,"A",{href:!0});var tDr=s(gR);Qeo=r(tDr,"PerceiverTokenizer"),tDr.forEach(t),Weo=r(r5e," (Perceiver model)"),r5e.forEach(t),Heo=i(S),Eg=n(S,"LI",{});var t5e=s(Eg);ore=n(t5e,"STRONG",{});var aDr=s(ore);Ueo=r(aDr,"phobert"),aDr.forEach(t),Jeo=r(t5e," \u2014 "),hR=n(t5e,"A",{href:!0});var nDr=s(hR);Yeo=r(nDr,"PhobertTokenizer"),nDr.forEach(t),Keo=r(t5e," (PhoBERT model)"),t5e.forEach(t),Zeo=i(S),Cg=n(S,"LI",{});var a5e=s(Cg);rre=n(a5e,"STRONG",{});var sDr=s(rre);eoo=r(sDr,"plbart"),sDr.forEach(t),ooo=r(a5e," \u2014 "),pR=n(a5e,"A",{href:!0});var lDr=s(pR);roo=r(lDr,"PLBartTokenizer"),lDr.forEach(t),too=r(a5e," (PLBart model)"),a5e.forEach(t),aoo=i(S),wg=n(S,"LI",{});var n5e=s(wg);tre=n(n5e,"STRONG",{});var iDr=s(tre);noo=r(iDr,"prophetnet"),iDr.forEach(t),soo=r(n5e," \u2014 "),uR=n(n5e,"A",{href:!0});var dDr=s(uR);loo=r(dDr,"ProphetNetTokenizer"),dDr.forEach(t),ioo=r(n5e," (ProphetNet model)"),n5e.forEach(t),doo=i(S),fs=n(S,"LI",{});var i9=s(fs);are=n(i9,"STRONG",{});var cDr=s(are);coo=r(cDr,"qdqbert"),cDr.forEach(t),foo=r(i9," \u2014 "),_R=n(i9,"A",{href:!0});var fDr=s(_R);moo=r(fDr,"BertTokenizer"),fDr.forEach(t),goo=r(i9," or "),bR=n(i9,"A",{href:!0});var mDr=s(bR);hoo=r(mDr,"BertTokenizerFast"),mDr.forEach(t),poo=r(i9," (QDQBert model)"),i9.forEach(t),uoo=i(S),Ag=n(S,"LI",{});var s5e=s(Ag);nre=n(s5e,"STRONG",{});var gDr=s(nre);_oo=r(gDr,"rag"),gDr.forEach(t),boo=r(s5e," \u2014 "),vR=n(s5e,"A",{href:!0});var hDr=s(vR);voo=r(hDr,"RagTokenizer"),hDr.forEach(t),Foo=r(s5e," (RAG model)"),s5e.forEach(t),Too=i(S),ms=n(S,"LI",{});var d9=s(ms);sre=n(d9,"STRONG",{});var pDr=s(sre);Moo=r(pDr,"realm"),pDr.forEach(t),Eoo=r(d9," \u2014 "),FR=n(d9,"A",{href:!0});var uDr=s(FR);Coo=r(uDr,"RealmTokenizer"),uDr.forEach(t),woo=r(d9," or "),TR=n(d9,"A",{href:!0});var _Dr=s(TR);Aoo=r(_Dr,"RealmTokenizerFast"),_Dr.forEach(t),yoo=r(d9," (Realm model)"),d9.forEach(t),Loo=i(S),gs=n(S,"LI",{});var c9=s(gs);lre=n(c9,"STRONG",{});var bDr=s(lre);xoo=r(bDr,"reformer"),bDr.forEach(t),$oo=r(c9," \u2014 "),MR=n(c9,"A",{href:!0});var vDr=s(MR);koo=r(vDr,"ReformerTokenizer"),vDr.forEach(t),Soo=r(c9," or "),ER=n(c9,"A",{href:!0});var FDr=s(ER);Roo=r(FDr,"ReformerTokenizerFast"),FDr.forEach(t),Boo=r(c9," (Reformer model)"),c9.forEach(t),Poo=i(S),hs=n(S,"LI",{});var f9=s(hs);ire=n(f9,"STRONG",{});var TDr=s(ire);Ioo=r(TDr,"rembert"),TDr.forEach(t),qoo=r(f9," \u2014 "),CR=n(f9,"A",{href:!0});var MDr=s(CR);Noo=r(MDr,"RemBertTokenizer"),MDr.forEach(t),joo=r(f9," or "),wR=n(f9,"A",{href:!0});var EDr=s(wR);Doo=r(EDr,"RemBertTokenizerFast"),EDr.forEach(t),Goo=r(f9," (RemBERT model)"),f9.forEach(t),Ooo=i(S),ps=n(S,"LI",{});var m9=s(ps);dre=n(m9,"STRONG",{});var CDr=s(dre);Voo=r(CDr,"retribert"),CDr.forEach(t),Xoo=r(m9," \u2014 "),AR=n(m9,"A",{href:!0});var wDr=s(AR);zoo=r(wDr,"RetriBertTokenizer"),wDr.forEach(t),Qoo=r(m9," or "),yR=n(m9,"A",{href:!0});var ADr=s(yR);Woo=r(ADr,"RetriBertTokenizerFast"),ADr.forEach(t),Hoo=r(m9," (RetriBERT model)"),m9.forEach(t),Uoo=i(S),us=n(S,"LI",{});var g9=s(us);cre=n(g9,"STRONG",{});var yDr=s(cre);Joo=r(yDr,"roberta"),yDr.forEach(t),Yoo=r(g9," \u2014 "),LR=n(g9,"A",{href:!0});var LDr=s(LR);Koo=r(LDr,"RobertaTokenizer"),LDr.forEach(t),Zoo=r(g9," or "),xR=n(g9,"A",{href:!0});var xDr=s(xR);ero=r(xDr,"RobertaTokenizerFast"),xDr.forEach(t),oro=r(g9," (RoBERTa model)"),g9.forEach(t),rro=i(S),_s=n(S,"LI",{});var h9=s(_s);fre=n(h9,"STRONG",{});var $Dr=s(fre);tro=r($Dr,"roformer"),$Dr.forEach(t),aro=r(h9," \u2014 "),$R=n(h9,"A",{href:!0});var kDr=s($R);nro=r(kDr,"RoFormerTokenizer"),kDr.forEach(t),sro=r(h9," or "),kR=n(h9,"A",{href:!0});var SDr=s(kR);lro=r(SDr,"RoFormerTokenizerFast"),SDr.forEach(t),iro=r(h9," (RoFormer model)"),h9.forEach(t),dro=i(S),yg=n(S,"LI",{});var l5e=s(yg);mre=n(l5e,"STRONG",{});var RDr=s(mre);cro=r(RDr,"speech_to_text"),RDr.forEach(t),fro=r(l5e," \u2014 "),SR=n(l5e,"A",{href:!0});var BDr=s(SR);mro=r(BDr,"Speech2TextTokenizer"),BDr.forEach(t),gro=r(l5e," (Speech2Text model)"),l5e.forEach(t),hro=i(S),Lg=n(S,"LI",{});var i5e=s(Lg);gre=n(i5e,"STRONG",{});var PDr=s(gre);pro=r(PDr,"speech_to_text_2"),PDr.forEach(t),uro=r(i5e," \u2014 "),RR=n(i5e,"A",{href:!0});var IDr=s(RR);_ro=r(IDr,"Speech2Text2Tokenizer"),IDr.forEach(t),bro=r(i5e," (Speech2Text2 model)"),i5e.forEach(t),vro=i(S),bs=n(S,"LI",{});var p9=s(bs);hre=n(p9,"STRONG",{});var qDr=s(hre);Fro=r(qDr,"splinter"),qDr.forEach(t),Tro=r(p9," \u2014 "),BR=n(p9,"A",{href:!0});var NDr=s(BR);Mro=r(NDr,"SplinterTokenizer"),NDr.forEach(t),Ero=r(p9," or "),PR=n(p9,"A",{href:!0});var jDr=s(PR);Cro=r(jDr,"SplinterTokenizerFast"),jDr.forEach(t),wro=r(p9," (Splinter model)"),p9.forEach(t),Aro=i(S),vs=n(S,"LI",{});var u9=s(vs);pre=n(u9,"STRONG",{});var DDr=s(pre);yro=r(DDr,"squeezebert"),DDr.forEach(t),Lro=r(u9," \u2014 "),IR=n(u9,"A",{href:!0});var GDr=s(IR);xro=r(GDr,"SqueezeBertTokenizer"),GDr.forEach(t),$ro=r(u9," or "),qR=n(u9,"A",{href:!0});var ODr=s(qR);kro=r(ODr,"SqueezeBertTokenizerFast"),ODr.forEach(t),Sro=r(u9," (SqueezeBERT model)"),u9.forEach(t),Rro=i(S),Fs=n(S,"LI",{});var _9=s(Fs);ure=n(_9,"STRONG",{});var VDr=s(ure);Bro=r(VDr,"t5"),VDr.forEach(t),Pro=r(_9," \u2014 "),NR=n(_9,"A",{href:!0});var XDr=s(NR);Iro=r(XDr,"T5Tokenizer"),XDr.forEach(t),qro=r(_9," or "),jR=n(_9,"A",{href:!0});var zDr=s(jR);Nro=r(zDr,"T5TokenizerFast"),zDr.forEach(t),jro=r(_9," (T5 model)"),_9.forEach(t),Dro=i(S),xg=n(S,"LI",{});var d5e=s(xg);_re=n(d5e,"STRONG",{});var QDr=s(_re);Gro=r(QDr,"tapas"),QDr.forEach(t),Oro=r(d5e," \u2014 "),DR=n(d5e,"A",{href:!0});var WDr=s(DR);Vro=r(WDr,"TapasTokenizer"),WDr.forEach(t),Xro=r(d5e," (TAPAS model)"),d5e.forEach(t),zro=i(S),$g=n(S,"LI",{});var c5e=s($g);bre=n(c5e,"STRONG",{});var HDr=s(bre);Qro=r(HDr,"tapex"),HDr.forEach(t),Wro=r(c5e," \u2014 "),GR=n(c5e,"A",{href:!0});var UDr=s(GR);Hro=r(UDr,"TapexTokenizer"),UDr.forEach(t),Uro=r(c5e," (TAPEX model)"),c5e.forEach(t),Jro=i(S),kg=n(S,"LI",{});var f5e=s(kg);vre=n(f5e,"STRONG",{});var JDr=s(vre);Yro=r(JDr,"transfo-xl"),JDr.forEach(t),Kro=r(f5e," \u2014 "),OR=n(f5e,"A",{href:!0});var YDr=s(OR);Zro=r(YDr,"TransfoXLTokenizer"),YDr.forEach(t),eto=r(f5e," (Transformer-XL model)"),f5e.forEach(t),oto=i(S),Ts=n(S,"LI",{});var b9=s(Ts);Fre=n(b9,"STRONG",{});var KDr=s(Fre);rto=r(KDr,"visual_bert"),KDr.forEach(t),tto=r(b9," \u2014 "),VR=n(b9,"A",{href:!0});var ZDr=s(VR);ato=r(ZDr,"BertTokenizer"),ZDr.forEach(t),nto=r(b9," or "),XR=n(b9,"A",{href:!0});var eGr=s(XR);sto=r(eGr,"BertTokenizerFast"),eGr.forEach(t),lto=r(b9," (VisualBert model)"),b9.forEach(t),ito=i(S),Sg=n(S,"LI",{});var m5e=s(Sg);Tre=n(m5e,"STRONG",{});var oGr=s(Tre);dto=r(oGr,"wav2vec2"),oGr.forEach(t),cto=r(m5e," \u2014 "),zR=n(m5e,"A",{href:!0});var rGr=s(zR);fto=r(rGr,"Wav2Vec2CTCTokenizer"),rGr.forEach(t),mto=r(m5e," (Wav2Vec2 model)"),m5e.forEach(t),gto=i(S),Rg=n(S,"LI",{});var g5e=s(Rg);Mre=n(g5e,"STRONG",{});var tGr=s(Mre);hto=r(tGr,"wav2vec2_phoneme"),tGr.forEach(t),pto=r(g5e," \u2014 "),QR=n(g5e,"A",{href:!0});var aGr=s(QR);uto=r(aGr,"Wav2Vec2PhonemeCTCTokenizer"),aGr.forEach(t),_to=r(g5e," (Wav2Vec2Phoneme model)"),g5e.forEach(t),bto=i(S),Ms=n(S,"LI",{});var v9=s(Ms);Ere=n(v9,"STRONG",{});var nGr=s(Ere);vto=r(nGr,"xglm"),nGr.forEach(t),Fto=r(v9," \u2014 "),WR=n(v9,"A",{href:!0});var sGr=s(WR);Tto=r(sGr,"XGLMTokenizer"),sGr.forEach(t),Mto=r(v9," or "),HR=n(v9,"A",{href:!0});var lGr=s(HR);Eto=r(lGr,"XGLMTokenizerFast"),lGr.forEach(t),Cto=r(v9," (XGLM model)"),v9.forEach(t),wto=i(S),Bg=n(S,"LI",{});var h5e=s(Bg);Cre=n(h5e,"STRONG",{});var iGr=s(Cre);Ato=r(iGr,"xlm"),iGr.forEach(t),yto=r(h5e," \u2014 "),UR=n(h5e,"A",{href:!0});var dGr=s(UR);Lto=r(dGr,"XLMTokenizer"),dGr.forEach(t),xto=r(h5e," (XLM model)"),h5e.forEach(t),$to=i(S),Pg=n(S,"LI",{});var p5e=s(Pg);wre=n(p5e,"STRONG",{});var cGr=s(wre);kto=r(cGr,"xlm-prophetnet"),cGr.forEach(t),Sto=r(p5e," \u2014 "),JR=n(p5e,"A",{href:!0});var fGr=s(JR);Rto=r(fGr,"XLMProphetNetTokenizer"),fGr.forEach(t),Bto=r(p5e," (XLMProphetNet model)"),p5e.forEach(t),Pto=i(S),Es=n(S,"LI",{});var F9=s(Es);Are=n(F9,"STRONG",{});var mGr=s(Are);Ito=r(mGr,"xlm-roberta"),mGr.forEach(t),qto=r(F9," \u2014 "),YR=n(F9,"A",{href:!0});var gGr=s(YR);Nto=r(gGr,"XLMRobertaTokenizer"),gGr.forEach(t),jto=r(F9," or "),KR=n(F9,"A",{href:!0});var hGr=s(KR);Dto=r(hGr,"XLMRobertaTokenizerFast"),hGr.forEach(t),Gto=r(F9," (XLM-RoBERTa model)"),F9.forEach(t),Oto=i(S),Cs=n(S,"LI",{});var T9=s(Cs);yre=n(T9,"STRONG",{});var pGr=s(yre);Vto=r(pGr,"xlm-roberta-xl"),pGr.forEach(t),Xto=r(T9," \u2014 "),ZR=n(T9,"A",{href:!0});var uGr=s(ZR);zto=r(uGr,"RobertaTokenizer"),uGr.forEach(t),Qto=r(T9," or "),eB=n(T9,"A",{href:!0});var _Gr=s(eB);Wto=r(_Gr,"RobertaTokenizerFast"),_Gr.forEach(t),Hto=r(T9," (XLM-RoBERTa-XL model)"),T9.forEach(t),Uto=i(S),ws=n(S,"LI",{});var M9=s(ws);Lre=n(M9,"STRONG",{});var bGr=s(Lre);Jto=r(bGr,"xlnet"),bGr.forEach(t),Yto=r(M9," \u2014 "),oB=n(M9,"A",{href:!0});var vGr=s(oB);Kto=r(vGr,"XLNetTokenizer"),vGr.forEach(t),Zto=r(M9," or "),rB=n(M9,"A",{href:!0});var FGr=s(rB);eao=r(FGr,"XLNetTokenizerFast"),FGr.forEach(t),oao=r(M9," (XLNet model)"),M9.forEach(t),rao=i(S),As=n(S,"LI",{});var E9=s(As);xre=n(E9,"STRONG",{});var TGr=s(xre);tao=r(TGr,"yoso"),TGr.forEach(t),aao=r(E9," \u2014 "),tB=n(E9,"A",{href:!0});var MGr=s(tB);nao=r(MGr,"AlbertTokenizer"),MGr.forEach(t),sao=r(E9," or "),aB=n(E9,"A",{href:!0});var EGr=s(aB);lao=r(EGr,"AlbertTokenizerFast"),EGr.forEach(t),iao=r(E9," (YOSO model)"),E9.forEach(t),S.forEach(t),dao=i(ks),T(Ig.$$.fragment,ks),ks.forEach(t),cao=i($s),qg=n($s,"DIV",{class:!0});var zPe=s(qg);T(xA.$$.fragment,zPe),fao=i(zPe),$re=n(zPe,"P",{});var CGr=s($re);mao=r(CGr,"Register a new tokenizer in this mapping."),CGr.forEach(t),zPe.forEach(t),$s.forEach(t),HRe=i(f),mi=n(f,"H2",{class:!0});var QPe=s(mi);Ng=n(QPe,"A",{id:!0,class:!0,href:!0});var wGr=s(Ng);kre=n(wGr,"SPAN",{});var AGr=s(kre);T($A.$$.fragment,AGr),AGr.forEach(t),wGr.forEach(t),gao=i(QPe),Sre=n(QPe,"SPAN",{});var yGr=s(Sre);hao=r(yGr,"AutoFeatureExtractor"),yGr.forEach(t),QPe.forEach(t),URe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(kA.$$.fragment,Ss),pao=i(Ss),SA=n(Ss,"P",{});var WPe=s(SA);uao=r(WPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),nB=n(WPe,"A",{href:!0});var LGr=s(nB);_ao=r(LGr,"AutoFeatureExtractor.from_pretrained()"),LGr.forEach(t),bao=r(WPe," class method."),WPe.forEach(t),vao=i(Ss),RA=n(Ss,"P",{});var HPe=s(RA);Fao=r(HPe,"This class cannot be instantiated directly using "),Rre=n(HPe,"CODE",{});var xGr=s(Rre);Tao=r(xGr,"__init__()"),xGr.forEach(t),Mao=r(HPe," (throws an error)."),HPe.forEach(t),Eao=i(Ss),ze=n(Ss,"DIV",{class:!0});var Wt=s(ze);T(BA.$$.fragment,Wt),Cao=i(Wt),Bre=n(Wt,"P",{});var $Gr=s(Bre);wao=r($Gr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),$Gr.forEach(t),Aao=i(Wt),Ta=n(Wt,"P",{});var F3=s(Ta);yao=r(F3,"The feature extractor class to instantiate is selected based on the "),Pre=n(F3,"CODE",{});var kGr=s(Pre);Lao=r(kGr,"model_type"),kGr.forEach(t),xao=r(F3,` property of the config object
(either passed as an argument or loaded from `),Ire=n(F3,"CODE",{});var SGr=s(Ire);$ao=r(SGr,"pretrained_model_name_or_path"),SGr.forEach(t),kao=r(F3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),qre=n(F3,"CODE",{});var RGr=s(qre);Sao=r(RGr,"pretrained_model_name_or_path"),RGr.forEach(t),Rao=r(F3,":"),F3.forEach(t),Bao=i(Wt),ae=n(Wt,"UL",{});var se=s(ae);jg=n(se,"LI",{});var u5e=s(jg);Nre=n(u5e,"STRONG",{});var BGr=s(Nre);Pao=r(BGr,"beit"),BGr.forEach(t),Iao=r(u5e," \u2014 "),sB=n(u5e,"A",{href:!0});var PGr=s(sB);qao=r(PGr,"BeitFeatureExtractor"),PGr.forEach(t),Nao=r(u5e," (BEiT model)"),u5e.forEach(t),jao=i(se),Dg=n(se,"LI",{});var _5e=s(Dg);jre=n(_5e,"STRONG",{});var IGr=s(jre);Dao=r(IGr,"clip"),IGr.forEach(t),Gao=r(_5e," \u2014 "),lB=n(_5e,"A",{href:!0});var qGr=s(lB);Oao=r(qGr,"CLIPFeatureExtractor"),qGr.forEach(t),Vao=r(_5e," (CLIP model)"),_5e.forEach(t),Xao=i(se),Gg=n(se,"LI",{});var b5e=s(Gg);Dre=n(b5e,"STRONG",{});var NGr=s(Dre);zao=r(NGr,"convnext"),NGr.forEach(t),Qao=r(b5e," \u2014 "),iB=n(b5e,"A",{href:!0});var jGr=s(iB);Wao=r(jGr,"ConvNextFeatureExtractor"),jGr.forEach(t),Hao=r(b5e," (ConvNext model)"),b5e.forEach(t),Uao=i(se),Og=n(se,"LI",{});var v5e=s(Og);Gre=n(v5e,"STRONG",{});var DGr=s(Gre);Jao=r(DGr,"data2vec-audio"),DGr.forEach(t),Yao=r(v5e," \u2014 "),dB=n(v5e,"A",{href:!0});var GGr=s(dB);Kao=r(GGr,"Wav2Vec2FeatureExtractor"),GGr.forEach(t),Zao=r(v5e," (Data2VecAudio model)"),v5e.forEach(t),eno=i(se),Vg=n(se,"LI",{});var F5e=s(Vg);Ore=n(F5e,"STRONG",{});var OGr=s(Ore);ono=r(OGr,"data2vec-vision"),OGr.forEach(t),rno=r(F5e," \u2014 "),cB=n(F5e,"A",{href:!0});var VGr=s(cB);tno=r(VGr,"BeitFeatureExtractor"),VGr.forEach(t),ano=r(F5e," (Data2VecVision model)"),F5e.forEach(t),nno=i(se),Xg=n(se,"LI",{});var T5e=s(Xg);Vre=n(T5e,"STRONG",{});var XGr=s(Vre);sno=r(XGr,"deit"),XGr.forEach(t),lno=r(T5e," \u2014 "),fB=n(T5e,"A",{href:!0});var zGr=s(fB);ino=r(zGr,"DeiTFeatureExtractor"),zGr.forEach(t),dno=r(T5e," (DeiT model)"),T5e.forEach(t),cno=i(se),zg=n(se,"LI",{});var M5e=s(zg);Xre=n(M5e,"STRONG",{});var QGr=s(Xre);fno=r(QGr,"detr"),QGr.forEach(t),mno=r(M5e," \u2014 "),mB=n(M5e,"A",{href:!0});var WGr=s(mB);gno=r(WGr,"DetrFeatureExtractor"),WGr.forEach(t),hno=r(M5e," (DETR model)"),M5e.forEach(t),pno=i(se),Qg=n(se,"LI",{});var E5e=s(Qg);zre=n(E5e,"STRONG",{});var HGr=s(zre);uno=r(HGr,"dpt"),HGr.forEach(t),_no=r(E5e," \u2014 "),gB=n(E5e,"A",{href:!0});var UGr=s(gB);bno=r(UGr,"DPTFeatureExtractor"),UGr.forEach(t),vno=r(E5e," (DPT model)"),E5e.forEach(t),Fno=i(se),Wg=n(se,"LI",{});var C5e=s(Wg);Qre=n(C5e,"STRONG",{});var JGr=s(Qre);Tno=r(JGr,"glpn"),JGr.forEach(t),Mno=r(C5e," \u2014 "),hB=n(C5e,"A",{href:!0});var YGr=s(hB);Eno=r(YGr,"GLPNFeatureExtractor"),YGr.forEach(t),Cno=r(C5e," (GLPN model)"),C5e.forEach(t),wno=i(se),Hg=n(se,"LI",{});var w5e=s(Hg);Wre=n(w5e,"STRONG",{});var KGr=s(Wre);Ano=r(KGr,"hubert"),KGr.forEach(t),yno=r(w5e," \u2014 "),pB=n(w5e,"A",{href:!0});var ZGr=s(pB);Lno=r(ZGr,"Wav2Vec2FeatureExtractor"),ZGr.forEach(t),xno=r(w5e," (Hubert model)"),w5e.forEach(t),$no=i(se),Ug=n(se,"LI",{});var A5e=s(Ug);Hre=n(A5e,"STRONG",{});var eOr=s(Hre);kno=r(eOr,"layoutlmv2"),eOr.forEach(t),Sno=r(A5e," \u2014 "),uB=n(A5e,"A",{href:!0});var oOr=s(uB);Rno=r(oOr,"LayoutLMv2FeatureExtractor"),oOr.forEach(t),Bno=r(A5e," (LayoutLMv2 model)"),A5e.forEach(t),Pno=i(se),Jg=n(se,"LI",{});var y5e=s(Jg);Ure=n(y5e,"STRONG",{});var rOr=s(Ure);Ino=r(rOr,"maskformer"),rOr.forEach(t),qno=r(y5e," \u2014 "),_B=n(y5e,"A",{href:!0});var tOr=s(_B);Nno=r(tOr,"MaskFormerFeatureExtractor"),tOr.forEach(t),jno=r(y5e," (MaskFormer model)"),y5e.forEach(t),Dno=i(se),Yg=n(se,"LI",{});var L5e=s(Yg);Jre=n(L5e,"STRONG",{});var aOr=s(Jre);Gno=r(aOr,"perceiver"),aOr.forEach(t),Ono=r(L5e," \u2014 "),bB=n(L5e,"A",{href:!0});var nOr=s(bB);Vno=r(nOr,"PerceiverFeatureExtractor"),nOr.forEach(t),Xno=r(L5e," (Perceiver model)"),L5e.forEach(t),zno=i(se),Kg=n(se,"LI",{});var x5e=s(Kg);Yre=n(x5e,"STRONG",{});var sOr=s(Yre);Qno=r(sOr,"poolformer"),sOr.forEach(t),Wno=r(x5e," \u2014 "),vB=n(x5e,"A",{href:!0});var lOr=s(vB);Hno=r(lOr,"PoolFormerFeatureExtractor"),lOr.forEach(t),Uno=r(x5e," (PoolFormer model)"),x5e.forEach(t),Jno=i(se),Zg=n(se,"LI",{});var $5e=s(Zg);Kre=n($5e,"STRONG",{});var iOr=s(Kre);Yno=r(iOr,"regnet"),iOr.forEach(t),Kno=r($5e," \u2014 "),FB=n($5e,"A",{href:!0});var dOr=s(FB);Zno=r(dOr,"ConvNextFeatureExtractor"),dOr.forEach(t),eso=r($5e," (RegNet model)"),$5e.forEach(t),oso=i(se),eh=n(se,"LI",{});var k5e=s(eh);Zre=n(k5e,"STRONG",{});var cOr=s(Zre);rso=r(cOr,"resnet"),cOr.forEach(t),tso=r(k5e," \u2014 "),TB=n(k5e,"A",{href:!0});var fOr=s(TB);aso=r(fOr,"ConvNextFeatureExtractor"),fOr.forEach(t),nso=r(k5e," (ResNet model)"),k5e.forEach(t),sso=i(se),oh=n(se,"LI",{});var S5e=s(oh);ete=n(S5e,"STRONG",{});var mOr=s(ete);lso=r(mOr,"segformer"),mOr.forEach(t),iso=r(S5e," \u2014 "),MB=n(S5e,"A",{href:!0});var gOr=s(MB);dso=r(gOr,"SegformerFeatureExtractor"),gOr.forEach(t),cso=r(S5e," (SegFormer model)"),S5e.forEach(t),fso=i(se),rh=n(se,"LI",{});var R5e=s(rh);ote=n(R5e,"STRONG",{});var hOr=s(ote);mso=r(hOr,"speech_to_text"),hOr.forEach(t),gso=r(R5e," \u2014 "),EB=n(R5e,"A",{href:!0});var pOr=s(EB);hso=r(pOr,"Speech2TextFeatureExtractor"),pOr.forEach(t),pso=r(R5e," (Speech2Text model)"),R5e.forEach(t),uso=i(se),th=n(se,"LI",{});var B5e=s(th);rte=n(B5e,"STRONG",{});var uOr=s(rte);_so=r(uOr,"swin"),uOr.forEach(t),bso=r(B5e," \u2014 "),CB=n(B5e,"A",{href:!0});var _Or=s(CB);vso=r(_Or,"ViTFeatureExtractor"),_Or.forEach(t),Fso=r(B5e," (Swin model)"),B5e.forEach(t),Tso=i(se),ah=n(se,"LI",{});var P5e=s(ah);tte=n(P5e,"STRONG",{});var bOr=s(tte);Mso=r(bOr,"van"),bOr.forEach(t),Eso=r(P5e," \u2014 "),wB=n(P5e,"A",{href:!0});var vOr=s(wB);Cso=r(vOr,"ConvNextFeatureExtractor"),vOr.forEach(t),wso=r(P5e," (VAN model)"),P5e.forEach(t),Aso=i(se),nh=n(se,"LI",{});var I5e=s(nh);ate=n(I5e,"STRONG",{});var FOr=s(ate);yso=r(FOr,"vit"),FOr.forEach(t),Lso=r(I5e," \u2014 "),AB=n(I5e,"A",{href:!0});var TOr=s(AB);xso=r(TOr,"ViTFeatureExtractor"),TOr.forEach(t),$so=r(I5e," (ViT model)"),I5e.forEach(t),kso=i(se),sh=n(se,"LI",{});var q5e=s(sh);nte=n(q5e,"STRONG",{});var MOr=s(nte);Sso=r(MOr,"vit_mae"),MOr.forEach(t),Rso=r(q5e," \u2014 "),yB=n(q5e,"A",{href:!0});var EOr=s(yB);Bso=r(EOr,"ViTFeatureExtractor"),EOr.forEach(t),Pso=r(q5e," (ViTMAE model)"),q5e.forEach(t),Iso=i(se),lh=n(se,"LI",{});var N5e=s(lh);ste=n(N5e,"STRONG",{});var COr=s(ste);qso=r(COr,"wav2vec2"),COr.forEach(t),Nso=r(N5e," \u2014 "),LB=n(N5e,"A",{href:!0});var wOr=s(LB);jso=r(wOr,"Wav2Vec2FeatureExtractor"),wOr.forEach(t),Dso=r(N5e," (Wav2Vec2 model)"),N5e.forEach(t),se.forEach(t),Gso=i(Wt),T(ih.$$.fragment,Wt),Oso=i(Wt),T(dh.$$.fragment,Wt),Wt.forEach(t),Vso=i(Ss),ch=n(Ss,"DIV",{class:!0});var UPe=s(ch);T(PA.$$.fragment,UPe),Xso=i(UPe),lte=n(UPe,"P",{});var AOr=s(lte);zso=r(AOr,"Register a new feature extractor for this class."),AOr.forEach(t),UPe.forEach(t),Ss.forEach(t),JRe=i(f),gi=n(f,"H2",{class:!0});var JPe=s(gi);fh=n(JPe,"A",{id:!0,class:!0,href:!0});var yOr=s(fh);ite=n(yOr,"SPAN",{});var LOr=s(ite);T(IA.$$.fragment,LOr),LOr.forEach(t),yOr.forEach(t),Qso=i(JPe),dte=n(JPe,"SPAN",{});var xOr=s(dte);Wso=r(xOr,"AutoProcessor"),xOr.forEach(t),JPe.forEach(t),YRe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(qA.$$.fragment,Rs),Hso=i(Rs),NA=n(Rs,"P",{});var YPe=s(NA);Uso=r(YPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),xB=n(YPe,"A",{href:!0});var $Or=s(xB);Jso=r($Or,"AutoProcessor.from_pretrained()"),$Or.forEach(t),Yso=r(YPe," class method."),YPe.forEach(t),Kso=i(Rs),jA=n(Rs,"P",{});var KPe=s(jA);Zso=r(KPe,"This class cannot be instantiated directly using "),cte=n(KPe,"CODE",{});var kOr=s(cte);elo=r(kOr,"__init__()"),kOr.forEach(t),olo=r(KPe," (throws an error)."),KPe.forEach(t),rlo=i(Rs),Qe=n(Rs,"DIV",{class:!0});var Ht=s(Qe);T(DA.$$.fragment,Ht),tlo=i(Ht),fte=n(Ht,"P",{});var SOr=s(fte);alo=r(SOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),SOr.forEach(t),nlo=i(Ht),hi=n(Ht,"P",{});var UJ=s(hi);slo=r(UJ,"The processor class to instantiate is selected based on the "),mte=n(UJ,"CODE",{});var ROr=s(mte);llo=r(ROr,"model_type"),ROr.forEach(t),ilo=r(UJ,` property of the config object (either
passed as an argument or loaded from `),gte=n(UJ,"CODE",{});var BOr=s(gte);dlo=r(BOr,"pretrained_model_name_or_path"),BOr.forEach(t),clo=r(UJ," if possible):"),UJ.forEach(t),flo=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);mh=n(Fe,"LI",{});var j5e=s(mh);hte=n(j5e,"STRONG",{});var POr=s(hte);mlo=r(POr,"clip"),POr.forEach(t),glo=r(j5e," \u2014 "),$B=n(j5e,"A",{href:!0});var IOr=s($B);hlo=r(IOr,"CLIPProcessor"),IOr.forEach(t),plo=r(j5e," (CLIP model)"),j5e.forEach(t),ulo=i(Fe),gh=n(Fe,"LI",{});var D5e=s(gh);pte=n(D5e,"STRONG",{});var qOr=s(pte);_lo=r(qOr,"layoutlmv2"),qOr.forEach(t),blo=r(D5e," \u2014 "),kB=n(D5e,"A",{href:!0});var NOr=s(kB);vlo=r(NOr,"LayoutLMv2Processor"),NOr.forEach(t),Flo=r(D5e," (LayoutLMv2 model)"),D5e.forEach(t),Tlo=i(Fe),hh=n(Fe,"LI",{});var G5e=s(hh);ute=n(G5e,"STRONG",{});var jOr=s(ute);Mlo=r(jOr,"layoutxlm"),jOr.forEach(t),Elo=r(G5e," \u2014 "),SB=n(G5e,"A",{href:!0});var DOr=s(SB);Clo=r(DOr,"LayoutXLMProcessor"),DOr.forEach(t),wlo=r(G5e," (LayoutXLM model)"),G5e.forEach(t),Alo=i(Fe),ph=n(Fe,"LI",{});var O5e=s(ph);_te=n(O5e,"STRONG",{});var GOr=s(_te);ylo=r(GOr,"sew"),GOr.forEach(t),Llo=r(O5e," \u2014 "),RB=n(O5e,"A",{href:!0});var OOr=s(RB);xlo=r(OOr,"Wav2Vec2Processor"),OOr.forEach(t),$lo=r(O5e," (SEW model)"),O5e.forEach(t),klo=i(Fe),uh=n(Fe,"LI",{});var V5e=s(uh);bte=n(V5e,"STRONG",{});var VOr=s(bte);Slo=r(VOr,"sew-d"),VOr.forEach(t),Rlo=r(V5e," \u2014 "),BB=n(V5e,"A",{href:!0});var XOr=s(BB);Blo=r(XOr,"Wav2Vec2Processor"),XOr.forEach(t),Plo=r(V5e," (SEW-D model)"),V5e.forEach(t),Ilo=i(Fe),_h=n(Fe,"LI",{});var X5e=s(_h);vte=n(X5e,"STRONG",{});var zOr=s(vte);qlo=r(zOr,"speech_to_text"),zOr.forEach(t),Nlo=r(X5e," \u2014 "),PB=n(X5e,"A",{href:!0});var QOr=s(PB);jlo=r(QOr,"Speech2TextProcessor"),QOr.forEach(t),Dlo=r(X5e," (Speech2Text model)"),X5e.forEach(t),Glo=i(Fe),bh=n(Fe,"LI",{});var z5e=s(bh);Fte=n(z5e,"STRONG",{});var WOr=s(Fte);Olo=r(WOr,"speech_to_text_2"),WOr.forEach(t),Vlo=r(z5e," \u2014 "),IB=n(z5e,"A",{href:!0});var HOr=s(IB);Xlo=r(HOr,"Speech2Text2Processor"),HOr.forEach(t),zlo=r(z5e," (Speech2Text2 model)"),z5e.forEach(t),Qlo=i(Fe),vh=n(Fe,"LI",{});var Q5e=s(vh);Tte=n(Q5e,"STRONG",{});var UOr=s(Tte);Wlo=r(UOr,"trocr"),UOr.forEach(t),Hlo=r(Q5e," \u2014 "),qB=n(Q5e,"A",{href:!0});var JOr=s(qB);Ulo=r(JOr,"TrOCRProcessor"),JOr.forEach(t),Jlo=r(Q5e," (TrOCR model)"),Q5e.forEach(t),Ylo=i(Fe),Fh=n(Fe,"LI",{});var W5e=s(Fh);Mte=n(W5e,"STRONG",{});var YOr=s(Mte);Klo=r(YOr,"unispeech"),YOr.forEach(t),Zlo=r(W5e," \u2014 "),NB=n(W5e,"A",{href:!0});var KOr=s(NB);eio=r(KOr,"Wav2Vec2Processor"),KOr.forEach(t),oio=r(W5e," (UniSpeech model)"),W5e.forEach(t),rio=i(Fe),Th=n(Fe,"LI",{});var H5e=s(Th);Ete=n(H5e,"STRONG",{});var ZOr=s(Ete);tio=r(ZOr,"unispeech-sat"),ZOr.forEach(t),aio=r(H5e," \u2014 "),jB=n(H5e,"A",{href:!0});var eVr=s(jB);nio=r(eVr,"Wav2Vec2Processor"),eVr.forEach(t),sio=r(H5e," (UniSpeechSat model)"),H5e.forEach(t),lio=i(Fe),Mh=n(Fe,"LI",{});var U5e=s(Mh);Cte=n(U5e,"STRONG",{});var oVr=s(Cte);iio=r(oVr,"vilt"),oVr.forEach(t),dio=r(U5e," \u2014 "),DB=n(U5e,"A",{href:!0});var rVr=s(DB);cio=r(rVr,"ViltProcessor"),rVr.forEach(t),fio=r(U5e," (ViLT model)"),U5e.forEach(t),mio=i(Fe),Eh=n(Fe,"LI",{});var J5e=s(Eh);wte=n(J5e,"STRONG",{});var tVr=s(wte);gio=r(tVr,"vision-text-dual-encoder"),tVr.forEach(t),hio=r(J5e," \u2014 "),GB=n(J5e,"A",{href:!0});var aVr=s(GB);pio=r(aVr,"VisionTextDualEncoderProcessor"),aVr.forEach(t),uio=r(J5e," (VisionTextDualEncoder model)"),J5e.forEach(t),_io=i(Fe),Ch=n(Fe,"LI",{});var Y5e=s(Ch);Ate=n(Y5e,"STRONG",{});var nVr=s(Ate);bio=r(nVr,"wav2vec2"),nVr.forEach(t),vio=r(Y5e," \u2014 "),OB=n(Y5e,"A",{href:!0});var sVr=s(OB);Fio=r(sVr,"Wav2Vec2Processor"),sVr.forEach(t),Tio=r(Y5e," (Wav2Vec2 model)"),Y5e.forEach(t),Mio=i(Fe),wh=n(Fe,"LI",{});var K5e=s(wh);yte=n(K5e,"STRONG",{});var lVr=s(yte);Eio=r(lVr,"wavlm"),lVr.forEach(t),Cio=r(K5e," \u2014 "),VB=n(K5e,"A",{href:!0});var iVr=s(VB);wio=r(iVr,"Wav2Vec2Processor"),iVr.forEach(t),Aio=r(K5e," (WavLM model)"),K5e.forEach(t),Fe.forEach(t),yio=i(Ht),T(Ah.$$.fragment,Ht),Lio=i(Ht),T(yh.$$.fragment,Ht),Ht.forEach(t),xio=i(Rs),Lh=n(Rs,"DIV",{class:!0});var ZPe=s(Lh);T(GA.$$.fragment,ZPe),$io=i(ZPe),Lte=n(ZPe,"P",{});var dVr=s(Lte);kio=r(dVr,"Register a new processor for this class."),dVr.forEach(t),ZPe.forEach(t),Rs.forEach(t),KRe=i(f),pi=n(f,"H2",{class:!0});var eIe=s(pi);xh=n(eIe,"A",{id:!0,class:!0,href:!0});var cVr=s(xh);xte=n(cVr,"SPAN",{});var fVr=s(xte);T(OA.$$.fragment,fVr),fVr.forEach(t),cVr.forEach(t),Sio=i(eIe),$te=n(eIe,"SPAN",{});var mVr=s($te);Rio=r(mVr,"AutoModel"),mVr.forEach(t),eIe.forEach(t),ZRe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(VA.$$.fragment,Bs),Bio=i(Bs),ui=n(Bs,"P",{});var JJ=s(ui);Pio=r(JJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XB=n(JJ,"A",{href:!0});var gVr=s(XB);Iio=r(gVr,"from_pretrained()"),gVr.forEach(t),qio=r(JJ," class method or the "),zB=n(JJ,"A",{href:!0});var hVr=s(zB);Nio=r(hVr,"from_config()"),hVr.forEach(t),jio=r(JJ,` class
method.`),JJ.forEach(t),Dio=i(Bs),XA=n(Bs,"P",{});var oIe=s(XA);Gio=r(oIe,"This class cannot be instantiated directly using "),kte=n(oIe,"CODE",{});var pVr=s(kte);Oio=r(pVr,"__init__()"),pVr.forEach(t),Vio=r(oIe," (throws an error)."),oIe.forEach(t),Xio=i(Bs),Kr=n(Bs,"DIV",{class:!0});var T3=s(Kr);T(zA.$$.fragment,T3),zio=i(T3),Ste=n(T3,"P",{});var uVr=s(Ste);Qio=r(uVr,"Instantiates one of the base model classes of the library from a configuration."),uVr.forEach(t),Wio=i(T3),_i=n(T3,"P",{});var YJ=s(_i);Hio=r(YJ,`Note:
Loading a model from its configuration file does `),Rte=n(YJ,"STRONG",{});var _Vr=s(Rte);Uio=r(_Vr,"not"),_Vr.forEach(t),Jio=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QB=n(YJ,"A",{href:!0});var bVr=s(QB);Yio=r(bVr,"from_pretrained()"),bVr.forEach(t),Kio=r(YJ," to load the model weights."),YJ.forEach(t),Zio=i(T3),T($h.$$.fragment,T3),T3.forEach(t),edo=i(Bs),We=n(Bs,"DIV",{class:!0});var Ut=s(We);T(QA.$$.fragment,Ut),odo=i(Ut),Bte=n(Ut,"P",{});var vVr=s(Bte);rdo=r(vVr,"Instantiate one of the base model classes of the library from a pretrained model."),vVr.forEach(t),tdo=i(Ut),Ma=n(Ut,"P",{});var M3=s(Ma);ado=r(M3,"The model class to instantiate is selected based on the "),Pte=n(M3,"CODE",{});var FVr=s(Pte);ndo=r(FVr,"model_type"),FVr.forEach(t),sdo=r(M3,` property of the config object (either
passed as an argument or loaded from `),Ite=n(M3,"CODE",{});var TVr=s(Ite);ldo=r(TVr,"pretrained_model_name_or_path"),TVr.forEach(t),ido=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=n(M3,"CODE",{});var MVr=s(qte);ddo=r(MVr,"pretrained_model_name_or_path"),MVr.forEach(t),cdo=r(M3,":"),M3.forEach(t),fdo=i(Ut),x=n(Ut,"UL",{});var $=s(x);kh=n($,"LI",{});var Z5e=s(kh);Nte=n(Z5e,"STRONG",{});var EVr=s(Nte);mdo=r(EVr,"albert"),EVr.forEach(t),gdo=r(Z5e," \u2014 "),WB=n(Z5e,"A",{href:!0});var CVr=s(WB);hdo=r(CVr,"AlbertModel"),CVr.forEach(t),pdo=r(Z5e," (ALBERT model)"),Z5e.forEach(t),udo=i($),Sh=n($,"LI",{});var eCe=s(Sh);jte=n(eCe,"STRONG",{});var wVr=s(jte);_do=r(wVr,"bart"),wVr.forEach(t),bdo=r(eCe," \u2014 "),HB=n(eCe,"A",{href:!0});var AVr=s(HB);vdo=r(AVr,"BartModel"),AVr.forEach(t),Fdo=r(eCe," (BART model)"),eCe.forEach(t),Tdo=i($),Rh=n($,"LI",{});var oCe=s(Rh);Dte=n(oCe,"STRONG",{});var yVr=s(Dte);Mdo=r(yVr,"beit"),yVr.forEach(t),Edo=r(oCe," \u2014 "),UB=n(oCe,"A",{href:!0});var LVr=s(UB);Cdo=r(LVr,"BeitModel"),LVr.forEach(t),wdo=r(oCe," (BEiT model)"),oCe.forEach(t),Ado=i($),Bh=n($,"LI",{});var rCe=s(Bh);Gte=n(rCe,"STRONG",{});var xVr=s(Gte);ydo=r(xVr,"bert"),xVr.forEach(t),Ldo=r(rCe," \u2014 "),JB=n(rCe,"A",{href:!0});var $Vr=s(JB);xdo=r($Vr,"BertModel"),$Vr.forEach(t),$do=r(rCe," (BERT model)"),rCe.forEach(t),kdo=i($),Ph=n($,"LI",{});var tCe=s(Ph);Ote=n(tCe,"STRONG",{});var kVr=s(Ote);Sdo=r(kVr,"bert-generation"),kVr.forEach(t),Rdo=r(tCe," \u2014 "),YB=n(tCe,"A",{href:!0});var SVr=s(YB);Bdo=r(SVr,"BertGenerationEncoder"),SVr.forEach(t),Pdo=r(tCe," (Bert Generation model)"),tCe.forEach(t),Ido=i($),Ih=n($,"LI",{});var aCe=s(Ih);Vte=n(aCe,"STRONG",{});var RVr=s(Vte);qdo=r(RVr,"big_bird"),RVr.forEach(t),Ndo=r(aCe," \u2014 "),KB=n(aCe,"A",{href:!0});var BVr=s(KB);jdo=r(BVr,"BigBirdModel"),BVr.forEach(t),Ddo=r(aCe," (BigBird model)"),aCe.forEach(t),Gdo=i($),qh=n($,"LI",{});var nCe=s(qh);Xte=n(nCe,"STRONG",{});var PVr=s(Xte);Odo=r(PVr,"bigbird_pegasus"),PVr.forEach(t),Vdo=r(nCe," \u2014 "),ZB=n(nCe,"A",{href:!0});var IVr=s(ZB);Xdo=r(IVr,"BigBirdPegasusModel"),IVr.forEach(t),zdo=r(nCe," (BigBirdPegasus model)"),nCe.forEach(t),Qdo=i($),Nh=n($,"LI",{});var sCe=s(Nh);zte=n(sCe,"STRONG",{});var qVr=s(zte);Wdo=r(qVr,"blenderbot"),qVr.forEach(t),Hdo=r(sCe," \u2014 "),eP=n(sCe,"A",{href:!0});var NVr=s(eP);Udo=r(NVr,"BlenderbotModel"),NVr.forEach(t),Jdo=r(sCe," (Blenderbot model)"),sCe.forEach(t),Ydo=i($),jh=n($,"LI",{});var lCe=s(jh);Qte=n(lCe,"STRONG",{});var jVr=s(Qte);Kdo=r(jVr,"blenderbot-small"),jVr.forEach(t),Zdo=r(lCe," \u2014 "),oP=n(lCe,"A",{href:!0});var DVr=s(oP);eco=r(DVr,"BlenderbotSmallModel"),DVr.forEach(t),oco=r(lCe," (BlenderbotSmall model)"),lCe.forEach(t),rco=i($),Dh=n($,"LI",{});var iCe=s(Dh);Wte=n(iCe,"STRONG",{});var GVr=s(Wte);tco=r(GVr,"camembert"),GVr.forEach(t),aco=r(iCe," \u2014 "),rP=n(iCe,"A",{href:!0});var OVr=s(rP);nco=r(OVr,"CamembertModel"),OVr.forEach(t),sco=r(iCe," (CamemBERT model)"),iCe.forEach(t),lco=i($),Gh=n($,"LI",{});var dCe=s(Gh);Hte=n(dCe,"STRONG",{});var VVr=s(Hte);ico=r(VVr,"canine"),VVr.forEach(t),dco=r(dCe," \u2014 "),tP=n(dCe,"A",{href:!0});var XVr=s(tP);cco=r(XVr,"CanineModel"),XVr.forEach(t),fco=r(dCe," (Canine model)"),dCe.forEach(t),mco=i($),Oh=n($,"LI",{});var cCe=s(Oh);Ute=n(cCe,"STRONG",{});var zVr=s(Ute);gco=r(zVr,"clip"),zVr.forEach(t),hco=r(cCe," \u2014 "),aP=n(cCe,"A",{href:!0});var QVr=s(aP);pco=r(QVr,"CLIPModel"),QVr.forEach(t),uco=r(cCe," (CLIP model)"),cCe.forEach(t),_co=i($),Vh=n($,"LI",{});var fCe=s(Vh);Jte=n(fCe,"STRONG",{});var WVr=s(Jte);bco=r(WVr,"convbert"),WVr.forEach(t),vco=r(fCe," \u2014 "),nP=n(fCe,"A",{href:!0});var HVr=s(nP);Fco=r(HVr,"ConvBertModel"),HVr.forEach(t),Tco=r(fCe," (ConvBERT model)"),fCe.forEach(t),Mco=i($),Xh=n($,"LI",{});var mCe=s(Xh);Yte=n(mCe,"STRONG",{});var UVr=s(Yte);Eco=r(UVr,"convnext"),UVr.forEach(t),Cco=r(mCe," \u2014 "),sP=n(mCe,"A",{href:!0});var JVr=s(sP);wco=r(JVr,"ConvNextModel"),JVr.forEach(t),Aco=r(mCe," (ConvNext model)"),mCe.forEach(t),yco=i($),zh=n($,"LI",{});var gCe=s(zh);Kte=n(gCe,"STRONG",{});var YVr=s(Kte);Lco=r(YVr,"ctrl"),YVr.forEach(t),xco=r(gCe," \u2014 "),lP=n(gCe,"A",{href:!0});var KVr=s(lP);$co=r(KVr,"CTRLModel"),KVr.forEach(t),kco=r(gCe," (CTRL model)"),gCe.forEach(t),Sco=i($),Qh=n($,"LI",{});var hCe=s(Qh);Zte=n(hCe,"STRONG",{});var ZVr=s(Zte);Rco=r(ZVr,"data2vec-audio"),ZVr.forEach(t),Bco=r(hCe," \u2014 "),iP=n(hCe,"A",{href:!0});var eXr=s(iP);Pco=r(eXr,"Data2VecAudioModel"),eXr.forEach(t),Ico=r(hCe," (Data2VecAudio model)"),hCe.forEach(t),qco=i($),Wh=n($,"LI",{});var pCe=s(Wh);eae=n(pCe,"STRONG",{});var oXr=s(eae);Nco=r(oXr,"data2vec-text"),oXr.forEach(t),jco=r(pCe," \u2014 "),dP=n(pCe,"A",{href:!0});var rXr=s(dP);Dco=r(rXr,"Data2VecTextModel"),rXr.forEach(t),Gco=r(pCe," (Data2VecText model)"),pCe.forEach(t),Oco=i($),Hh=n($,"LI",{});var uCe=s(Hh);oae=n(uCe,"STRONG",{});var tXr=s(oae);Vco=r(tXr,"data2vec-vision"),tXr.forEach(t),Xco=r(uCe," \u2014 "),cP=n(uCe,"A",{href:!0});var aXr=s(cP);zco=r(aXr,"Data2VecVisionModel"),aXr.forEach(t),Qco=r(uCe," (Data2VecVision model)"),uCe.forEach(t),Wco=i($),Uh=n($,"LI",{});var _Ce=s(Uh);rae=n(_Ce,"STRONG",{});var nXr=s(rae);Hco=r(nXr,"deberta"),nXr.forEach(t),Uco=r(_Ce," \u2014 "),fP=n(_Ce,"A",{href:!0});var sXr=s(fP);Jco=r(sXr,"DebertaModel"),sXr.forEach(t),Yco=r(_Ce," (DeBERTa model)"),_Ce.forEach(t),Kco=i($),Jh=n($,"LI",{});var bCe=s(Jh);tae=n(bCe,"STRONG",{});var lXr=s(tae);Zco=r(lXr,"deberta-v2"),lXr.forEach(t),efo=r(bCe," \u2014 "),mP=n(bCe,"A",{href:!0});var iXr=s(mP);ofo=r(iXr,"DebertaV2Model"),iXr.forEach(t),rfo=r(bCe," (DeBERTa-v2 model)"),bCe.forEach(t),tfo=i($),Yh=n($,"LI",{});var vCe=s(Yh);aae=n(vCe,"STRONG",{});var dXr=s(aae);afo=r(dXr,"decision_transformer"),dXr.forEach(t),nfo=r(vCe," \u2014 "),gP=n(vCe,"A",{href:!0});var cXr=s(gP);sfo=r(cXr,"DecisionTransformerModel"),cXr.forEach(t),lfo=r(vCe," (Decision Transformer model)"),vCe.forEach(t),ifo=i($),Kh=n($,"LI",{});var FCe=s(Kh);nae=n(FCe,"STRONG",{});var fXr=s(nae);dfo=r(fXr,"deit"),fXr.forEach(t),cfo=r(FCe," \u2014 "),hP=n(FCe,"A",{href:!0});var mXr=s(hP);ffo=r(mXr,"DeiTModel"),mXr.forEach(t),mfo=r(FCe," (DeiT model)"),FCe.forEach(t),gfo=i($),Zh=n($,"LI",{});var TCe=s(Zh);sae=n(TCe,"STRONG",{});var gXr=s(sae);hfo=r(gXr,"detr"),gXr.forEach(t),pfo=r(TCe," \u2014 "),pP=n(TCe,"A",{href:!0});var hXr=s(pP);ufo=r(hXr,"DetrModel"),hXr.forEach(t),_fo=r(TCe," (DETR model)"),TCe.forEach(t),bfo=i($),ep=n($,"LI",{});var MCe=s(ep);lae=n(MCe,"STRONG",{});var pXr=s(lae);vfo=r(pXr,"distilbert"),pXr.forEach(t),Ffo=r(MCe," \u2014 "),uP=n(MCe,"A",{href:!0});var uXr=s(uP);Tfo=r(uXr,"DistilBertModel"),uXr.forEach(t),Mfo=r(MCe," (DistilBERT model)"),MCe.forEach(t),Efo=i($),op=n($,"LI",{});var ECe=s(op);iae=n(ECe,"STRONG",{});var _Xr=s(iae);Cfo=r(_Xr,"dpr"),_Xr.forEach(t),wfo=r(ECe," \u2014 "),_P=n(ECe,"A",{href:!0});var bXr=s(_P);Afo=r(bXr,"DPRQuestionEncoder"),bXr.forEach(t),yfo=r(ECe," (DPR model)"),ECe.forEach(t),Lfo=i($),rp=n($,"LI",{});var CCe=s(rp);dae=n(CCe,"STRONG",{});var vXr=s(dae);xfo=r(vXr,"dpt"),vXr.forEach(t),$fo=r(CCe," \u2014 "),bP=n(CCe,"A",{href:!0});var FXr=s(bP);kfo=r(FXr,"DPTModel"),FXr.forEach(t),Sfo=r(CCe," (DPT model)"),CCe.forEach(t),Rfo=i($),tp=n($,"LI",{});var wCe=s(tp);cae=n(wCe,"STRONG",{});var TXr=s(cae);Bfo=r(TXr,"electra"),TXr.forEach(t),Pfo=r(wCe," \u2014 "),vP=n(wCe,"A",{href:!0});var MXr=s(vP);Ifo=r(MXr,"ElectraModel"),MXr.forEach(t),qfo=r(wCe," (ELECTRA model)"),wCe.forEach(t),Nfo=i($),ap=n($,"LI",{});var ACe=s(ap);fae=n(ACe,"STRONG",{});var EXr=s(fae);jfo=r(EXr,"flaubert"),EXr.forEach(t),Dfo=r(ACe," \u2014 "),FP=n(ACe,"A",{href:!0});var CXr=s(FP);Gfo=r(CXr,"FlaubertModel"),CXr.forEach(t),Ofo=r(ACe," (FlauBERT model)"),ACe.forEach(t),Vfo=i($),np=n($,"LI",{});var yCe=s(np);mae=n(yCe,"STRONG",{});var wXr=s(mae);Xfo=r(wXr,"fnet"),wXr.forEach(t),zfo=r(yCe," \u2014 "),TP=n(yCe,"A",{href:!0});var AXr=s(TP);Qfo=r(AXr,"FNetModel"),AXr.forEach(t),Wfo=r(yCe," (FNet model)"),yCe.forEach(t),Hfo=i($),sp=n($,"LI",{});var LCe=s(sp);gae=n(LCe,"STRONG",{});var yXr=s(gae);Ufo=r(yXr,"fsmt"),yXr.forEach(t),Jfo=r(LCe," \u2014 "),MP=n(LCe,"A",{href:!0});var LXr=s(MP);Yfo=r(LXr,"FSMTModel"),LXr.forEach(t),Kfo=r(LCe," (FairSeq Machine-Translation model)"),LCe.forEach(t),Zfo=i($),ys=n($,"LI",{});var C9=s(ys);hae=n(C9,"STRONG",{});var xXr=s(hae);emo=r(xXr,"funnel"),xXr.forEach(t),omo=r(C9," \u2014 "),EP=n(C9,"A",{href:!0});var $Xr=s(EP);rmo=r($Xr,"FunnelModel"),$Xr.forEach(t),tmo=r(C9," or "),CP=n(C9,"A",{href:!0});var kXr=s(CP);amo=r(kXr,"FunnelBaseModel"),kXr.forEach(t),nmo=r(C9," (Funnel Transformer model)"),C9.forEach(t),smo=i($),lp=n($,"LI",{});var xCe=s(lp);pae=n(xCe,"STRONG",{});var SXr=s(pae);lmo=r(SXr,"glpn"),SXr.forEach(t),imo=r(xCe," \u2014 "),wP=n(xCe,"A",{href:!0});var RXr=s(wP);dmo=r(RXr,"GLPNModel"),RXr.forEach(t),cmo=r(xCe," (GLPN model)"),xCe.forEach(t),fmo=i($),ip=n($,"LI",{});var $Ce=s(ip);uae=n($Ce,"STRONG",{});var BXr=s(uae);mmo=r(BXr,"gpt2"),BXr.forEach(t),gmo=r($Ce," \u2014 "),AP=n($Ce,"A",{href:!0});var PXr=s(AP);hmo=r(PXr,"GPT2Model"),PXr.forEach(t),pmo=r($Ce," (OpenAI GPT-2 model)"),$Ce.forEach(t),umo=i($),dp=n($,"LI",{});var kCe=s(dp);_ae=n(kCe,"STRONG",{});var IXr=s(_ae);_mo=r(IXr,"gpt_neo"),IXr.forEach(t),bmo=r(kCe," \u2014 "),yP=n(kCe,"A",{href:!0});var qXr=s(yP);vmo=r(qXr,"GPTNeoModel"),qXr.forEach(t),Fmo=r(kCe," (GPT Neo model)"),kCe.forEach(t),Tmo=i($),cp=n($,"LI",{});var SCe=s(cp);bae=n(SCe,"STRONG",{});var NXr=s(bae);Mmo=r(NXr,"gptj"),NXr.forEach(t),Emo=r(SCe," \u2014 "),LP=n(SCe,"A",{href:!0});var jXr=s(LP);Cmo=r(jXr,"GPTJModel"),jXr.forEach(t),wmo=r(SCe," (GPT-J model)"),SCe.forEach(t),Amo=i($),fp=n($,"LI",{});var RCe=s(fp);vae=n(RCe,"STRONG",{});var DXr=s(vae);ymo=r(DXr,"hubert"),DXr.forEach(t),Lmo=r(RCe," \u2014 "),xP=n(RCe,"A",{href:!0});var GXr=s(xP);xmo=r(GXr,"HubertModel"),GXr.forEach(t),$mo=r(RCe," (Hubert model)"),RCe.forEach(t),kmo=i($),mp=n($,"LI",{});var BCe=s(mp);Fae=n(BCe,"STRONG",{});var OXr=s(Fae);Smo=r(OXr,"ibert"),OXr.forEach(t),Rmo=r(BCe," \u2014 "),$P=n(BCe,"A",{href:!0});var VXr=s($P);Bmo=r(VXr,"IBertModel"),VXr.forEach(t),Pmo=r(BCe," (I-BERT model)"),BCe.forEach(t),Imo=i($),gp=n($,"LI",{});var PCe=s(gp);Tae=n(PCe,"STRONG",{});var XXr=s(Tae);qmo=r(XXr,"imagegpt"),XXr.forEach(t),Nmo=r(PCe," \u2014 "),kP=n(PCe,"A",{href:!0});var zXr=s(kP);jmo=r(zXr,"ImageGPTModel"),zXr.forEach(t),Dmo=r(PCe," (ImageGPT model)"),PCe.forEach(t),Gmo=i($),hp=n($,"LI",{});var ICe=s(hp);Mae=n(ICe,"STRONG",{});var QXr=s(Mae);Omo=r(QXr,"layoutlm"),QXr.forEach(t),Vmo=r(ICe," \u2014 "),SP=n(ICe,"A",{href:!0});var WXr=s(SP);Xmo=r(WXr,"LayoutLMModel"),WXr.forEach(t),zmo=r(ICe," (LayoutLM model)"),ICe.forEach(t),Qmo=i($),pp=n($,"LI",{});var qCe=s(pp);Eae=n(qCe,"STRONG",{});var HXr=s(Eae);Wmo=r(HXr,"layoutlmv2"),HXr.forEach(t),Hmo=r(qCe," \u2014 "),RP=n(qCe,"A",{href:!0});var UXr=s(RP);Umo=r(UXr,"LayoutLMv2Model"),UXr.forEach(t),Jmo=r(qCe," (LayoutLMv2 model)"),qCe.forEach(t),Ymo=i($),up=n($,"LI",{});var NCe=s(up);Cae=n(NCe,"STRONG",{});var JXr=s(Cae);Kmo=r(JXr,"led"),JXr.forEach(t),Zmo=r(NCe," \u2014 "),BP=n(NCe,"A",{href:!0});var YXr=s(BP);ego=r(YXr,"LEDModel"),YXr.forEach(t),ogo=r(NCe," (LED model)"),NCe.forEach(t),rgo=i($),_p=n($,"LI",{});var jCe=s(_p);wae=n(jCe,"STRONG",{});var KXr=s(wae);tgo=r(KXr,"longformer"),KXr.forEach(t),ago=r(jCe," \u2014 "),PP=n(jCe,"A",{href:!0});var ZXr=s(PP);ngo=r(ZXr,"LongformerModel"),ZXr.forEach(t),sgo=r(jCe," (Longformer model)"),jCe.forEach(t),lgo=i($),bp=n($,"LI",{});var DCe=s(bp);Aae=n(DCe,"STRONG",{});var ezr=s(Aae);igo=r(ezr,"luke"),ezr.forEach(t),dgo=r(DCe," \u2014 "),IP=n(DCe,"A",{href:!0});var ozr=s(IP);cgo=r(ozr,"LukeModel"),ozr.forEach(t),fgo=r(DCe," (LUKE model)"),DCe.forEach(t),mgo=i($),vp=n($,"LI",{});var GCe=s(vp);yae=n(GCe,"STRONG",{});var rzr=s(yae);ggo=r(rzr,"lxmert"),rzr.forEach(t),hgo=r(GCe," \u2014 "),qP=n(GCe,"A",{href:!0});var tzr=s(qP);pgo=r(tzr,"LxmertModel"),tzr.forEach(t),ugo=r(GCe," (LXMERT model)"),GCe.forEach(t),_go=i($),Fp=n($,"LI",{});var OCe=s(Fp);Lae=n(OCe,"STRONG",{});var azr=s(Lae);bgo=r(azr,"m2m_100"),azr.forEach(t),vgo=r(OCe," \u2014 "),NP=n(OCe,"A",{href:!0});var nzr=s(NP);Fgo=r(nzr,"M2M100Model"),nzr.forEach(t),Tgo=r(OCe," (M2M100 model)"),OCe.forEach(t),Mgo=i($),Tp=n($,"LI",{});var VCe=s(Tp);xae=n(VCe,"STRONG",{});var szr=s(xae);Ego=r(szr,"marian"),szr.forEach(t),Cgo=r(VCe," \u2014 "),jP=n(VCe,"A",{href:!0});var lzr=s(jP);wgo=r(lzr,"MarianModel"),lzr.forEach(t),Ago=r(VCe," (Marian model)"),VCe.forEach(t),ygo=i($),Mp=n($,"LI",{});var XCe=s(Mp);$ae=n(XCe,"STRONG",{});var izr=s($ae);Lgo=r(izr,"maskformer"),izr.forEach(t),xgo=r(XCe," \u2014 "),DP=n(XCe,"A",{href:!0});var dzr=s(DP);$go=r(dzr,"MaskFormerModel"),dzr.forEach(t),kgo=r(XCe," (MaskFormer model)"),XCe.forEach(t),Sgo=i($),Ep=n($,"LI",{});var zCe=s(Ep);kae=n(zCe,"STRONG",{});var czr=s(kae);Rgo=r(czr,"mbart"),czr.forEach(t),Bgo=r(zCe," \u2014 "),GP=n(zCe,"A",{href:!0});var fzr=s(GP);Pgo=r(fzr,"MBartModel"),fzr.forEach(t),Igo=r(zCe," (mBART model)"),zCe.forEach(t),qgo=i($),Cp=n($,"LI",{});var QCe=s(Cp);Sae=n(QCe,"STRONG",{});var mzr=s(Sae);Ngo=r(mzr,"mctc"),mzr.forEach(t),jgo=r(QCe," \u2014 "),Rae=n(QCe,"CODE",{});var gzr=s(Rae);Dgo=r(gzr,"MCTCModel"),gzr.forEach(t),Ggo=r(QCe," (MCTC model)"),QCe.forEach(t),Ogo=i($),wp=n($,"LI",{});var WCe=s(wp);Bae=n(WCe,"STRONG",{});var hzr=s(Bae);Vgo=r(hzr,"megatron-bert"),hzr.forEach(t),Xgo=r(WCe," \u2014 "),OP=n(WCe,"A",{href:!0});var pzr=s(OP);zgo=r(pzr,"MegatronBertModel"),pzr.forEach(t),Qgo=r(WCe," (MegatronBert model)"),WCe.forEach(t),Wgo=i($),Ap=n($,"LI",{});var HCe=s(Ap);Pae=n(HCe,"STRONG",{});var uzr=s(Pae);Hgo=r(uzr,"mobilebert"),uzr.forEach(t),Ugo=r(HCe," \u2014 "),VP=n(HCe,"A",{href:!0});var _zr=s(VP);Jgo=r(_zr,"MobileBertModel"),_zr.forEach(t),Ygo=r(HCe," (MobileBERT model)"),HCe.forEach(t),Kgo=i($),yp=n($,"LI",{});var UCe=s(yp);Iae=n(UCe,"STRONG",{});var bzr=s(Iae);Zgo=r(bzr,"mpnet"),bzr.forEach(t),eho=r(UCe," \u2014 "),XP=n(UCe,"A",{href:!0});var vzr=s(XP);oho=r(vzr,"MPNetModel"),vzr.forEach(t),rho=r(UCe," (MPNet model)"),UCe.forEach(t),tho=i($),Lp=n($,"LI",{});var JCe=s(Lp);qae=n(JCe,"STRONG",{});var Fzr=s(qae);aho=r(Fzr,"mt5"),Fzr.forEach(t),nho=r(JCe," \u2014 "),zP=n(JCe,"A",{href:!0});var Tzr=s(zP);sho=r(Tzr,"MT5Model"),Tzr.forEach(t),lho=r(JCe," (mT5 model)"),JCe.forEach(t),iho=i($),xp=n($,"LI",{});var YCe=s(xp);Nae=n(YCe,"STRONG",{});var Mzr=s(Nae);dho=r(Mzr,"nystromformer"),Mzr.forEach(t),cho=r(YCe," \u2014 "),QP=n(YCe,"A",{href:!0});var Ezr=s(QP);fho=r(Ezr,"NystromformerModel"),Ezr.forEach(t),mho=r(YCe," (Nystromformer model)"),YCe.forEach(t),gho=i($),$p=n($,"LI",{});var KCe=s($p);jae=n(KCe,"STRONG",{});var Czr=s(jae);hho=r(Czr,"openai-gpt"),Czr.forEach(t),pho=r(KCe," \u2014 "),WP=n(KCe,"A",{href:!0});var wzr=s(WP);uho=r(wzr,"OpenAIGPTModel"),wzr.forEach(t),_ho=r(KCe," (OpenAI GPT model)"),KCe.forEach(t),bho=i($),kp=n($,"LI",{});var ZCe=s(kp);Dae=n(ZCe,"STRONG",{});var Azr=s(Dae);vho=r(Azr,"pegasus"),Azr.forEach(t),Fho=r(ZCe," \u2014 "),HP=n(ZCe,"A",{href:!0});var yzr=s(HP);Tho=r(yzr,"PegasusModel"),yzr.forEach(t),Mho=r(ZCe," (Pegasus model)"),ZCe.forEach(t),Eho=i($),Sp=n($,"LI",{});var e3e=s(Sp);Gae=n(e3e,"STRONG",{});var Lzr=s(Gae);Cho=r(Lzr,"perceiver"),Lzr.forEach(t),who=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var xzr=s(UP);Aho=r(xzr,"PerceiverModel"),xzr.forEach(t),yho=r(e3e," (Perceiver model)"),e3e.forEach(t),Lho=i($),Rp=n($,"LI",{});var o3e=s(Rp);Oae=n(o3e,"STRONG",{});var $zr=s(Oae);xho=r($zr,"plbart"),$zr.forEach(t),$ho=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var kzr=s(JP);kho=r(kzr,"PLBartModel"),kzr.forEach(t),Sho=r(o3e," (PLBart model)"),o3e.forEach(t),Rho=i($),Bp=n($,"LI",{});var r3e=s(Bp);Vae=n(r3e,"STRONG",{});var Szr=s(Vae);Bho=r(Szr,"poolformer"),Szr.forEach(t),Pho=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var Rzr=s(YP);Iho=r(Rzr,"PoolFormerModel"),Rzr.forEach(t),qho=r(r3e," (PoolFormer model)"),r3e.forEach(t),Nho=i($),Pp=n($,"LI",{});var t3e=s(Pp);Xae=n(t3e,"STRONG",{});var Bzr=s(Xae);jho=r(Bzr,"prophetnet"),Bzr.forEach(t),Dho=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var Pzr=s(KP);Gho=r(Pzr,"ProphetNetModel"),Pzr.forEach(t),Oho=r(t3e," (ProphetNet model)"),t3e.forEach(t),Vho=i($),Ip=n($,"LI",{});var a3e=s(Ip);zae=n(a3e,"STRONG",{});var Izr=s(zae);Xho=r(Izr,"qdqbert"),Izr.forEach(t),zho=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var qzr=s(ZP);Qho=r(qzr,"QDQBertModel"),qzr.forEach(t),Who=r(a3e," (QDQBert model)"),a3e.forEach(t),Hho=i($),qp=n($,"LI",{});var n3e=s(qp);Qae=n(n3e,"STRONG",{});var Nzr=s(Qae);Uho=r(Nzr,"reformer"),Nzr.forEach(t),Jho=r(n3e," \u2014 "),eI=n(n3e,"A",{href:!0});var jzr=s(eI);Yho=r(jzr,"ReformerModel"),jzr.forEach(t),Kho=r(n3e," (Reformer model)"),n3e.forEach(t),Zho=i($),Np=n($,"LI",{});var s3e=s(Np);Wae=n(s3e,"STRONG",{});var Dzr=s(Wae);epo=r(Dzr,"regnet"),Dzr.forEach(t),opo=r(s3e," \u2014 "),oI=n(s3e,"A",{href:!0});var Gzr=s(oI);rpo=r(Gzr,"RegNetModel"),Gzr.forEach(t),tpo=r(s3e," (RegNet model)"),s3e.forEach(t),apo=i($),jp=n($,"LI",{});var l3e=s(jp);Hae=n(l3e,"STRONG",{});var Ozr=s(Hae);npo=r(Ozr,"rembert"),Ozr.forEach(t),spo=r(l3e," \u2014 "),rI=n(l3e,"A",{href:!0});var Vzr=s(rI);lpo=r(Vzr,"RemBertModel"),Vzr.forEach(t),ipo=r(l3e," (RemBERT model)"),l3e.forEach(t),dpo=i($),Dp=n($,"LI",{});var i3e=s(Dp);Uae=n(i3e,"STRONG",{});var Xzr=s(Uae);cpo=r(Xzr,"resnet"),Xzr.forEach(t),fpo=r(i3e," \u2014 "),tI=n(i3e,"A",{href:!0});var zzr=s(tI);mpo=r(zzr,"ResNetModel"),zzr.forEach(t),gpo=r(i3e," (ResNet model)"),i3e.forEach(t),hpo=i($),Gp=n($,"LI",{});var d3e=s(Gp);Jae=n(d3e,"STRONG",{});var Qzr=s(Jae);ppo=r(Qzr,"retribert"),Qzr.forEach(t),upo=r(d3e," \u2014 "),aI=n(d3e,"A",{href:!0});var Wzr=s(aI);_po=r(Wzr,"RetriBertModel"),Wzr.forEach(t),bpo=r(d3e," (RetriBERT model)"),d3e.forEach(t),vpo=i($),Op=n($,"LI",{});var c3e=s(Op);Yae=n(c3e,"STRONG",{});var Hzr=s(Yae);Fpo=r(Hzr,"roberta"),Hzr.forEach(t),Tpo=r(c3e," \u2014 "),nI=n(c3e,"A",{href:!0});var Uzr=s(nI);Mpo=r(Uzr,"RobertaModel"),Uzr.forEach(t),Epo=r(c3e," (RoBERTa model)"),c3e.forEach(t),Cpo=i($),Vp=n($,"LI",{});var f3e=s(Vp);Kae=n(f3e,"STRONG",{});var Jzr=s(Kae);wpo=r(Jzr,"roformer"),Jzr.forEach(t),Apo=r(f3e," \u2014 "),sI=n(f3e,"A",{href:!0});var Yzr=s(sI);ypo=r(Yzr,"RoFormerModel"),Yzr.forEach(t),Lpo=r(f3e," (RoFormer model)"),f3e.forEach(t),xpo=i($),Xp=n($,"LI",{});var m3e=s(Xp);Zae=n(m3e,"STRONG",{});var Kzr=s(Zae);$po=r(Kzr,"segformer"),Kzr.forEach(t),kpo=r(m3e," \u2014 "),lI=n(m3e,"A",{href:!0});var Zzr=s(lI);Spo=r(Zzr,"SegformerModel"),Zzr.forEach(t),Rpo=r(m3e," (SegFormer model)"),m3e.forEach(t),Bpo=i($),zp=n($,"LI",{});var g3e=s(zp);ene=n(g3e,"STRONG",{});var eQr=s(ene);Ppo=r(eQr,"sew"),eQr.forEach(t),Ipo=r(g3e," \u2014 "),iI=n(g3e,"A",{href:!0});var oQr=s(iI);qpo=r(oQr,"SEWModel"),oQr.forEach(t),Npo=r(g3e," (SEW model)"),g3e.forEach(t),jpo=i($),Qp=n($,"LI",{});var h3e=s(Qp);one=n(h3e,"STRONG",{});var rQr=s(one);Dpo=r(rQr,"sew-d"),rQr.forEach(t),Gpo=r(h3e," \u2014 "),dI=n(h3e,"A",{href:!0});var tQr=s(dI);Opo=r(tQr,"SEWDModel"),tQr.forEach(t),Vpo=r(h3e," (SEW-D model)"),h3e.forEach(t),Xpo=i($),Wp=n($,"LI",{});var p3e=s(Wp);rne=n(p3e,"STRONG",{});var aQr=s(rne);zpo=r(aQr,"speech_to_text"),aQr.forEach(t),Qpo=r(p3e," \u2014 "),cI=n(p3e,"A",{href:!0});var nQr=s(cI);Wpo=r(nQr,"Speech2TextModel"),nQr.forEach(t),Hpo=r(p3e," (Speech2Text model)"),p3e.forEach(t),Upo=i($),Hp=n($,"LI",{});var u3e=s(Hp);tne=n(u3e,"STRONG",{});var sQr=s(tne);Jpo=r(sQr,"splinter"),sQr.forEach(t),Ypo=r(u3e," \u2014 "),fI=n(u3e,"A",{href:!0});var lQr=s(fI);Kpo=r(lQr,"SplinterModel"),lQr.forEach(t),Zpo=r(u3e," (Splinter model)"),u3e.forEach(t),euo=i($),Up=n($,"LI",{});var _3e=s(Up);ane=n(_3e,"STRONG",{});var iQr=s(ane);ouo=r(iQr,"squeezebert"),iQr.forEach(t),ruo=r(_3e," \u2014 "),mI=n(_3e,"A",{href:!0});var dQr=s(mI);tuo=r(dQr,"SqueezeBertModel"),dQr.forEach(t),auo=r(_3e," (SqueezeBERT model)"),_3e.forEach(t),nuo=i($),Jp=n($,"LI",{});var b3e=s(Jp);nne=n(b3e,"STRONG",{});var cQr=s(nne);suo=r(cQr,"swin"),cQr.forEach(t),luo=r(b3e," \u2014 "),gI=n(b3e,"A",{href:!0});var fQr=s(gI);iuo=r(fQr,"SwinModel"),fQr.forEach(t),duo=r(b3e," (Swin model)"),b3e.forEach(t),cuo=i($),Yp=n($,"LI",{});var v3e=s(Yp);sne=n(v3e,"STRONG",{});var mQr=s(sne);fuo=r(mQr,"t5"),mQr.forEach(t),muo=r(v3e," \u2014 "),hI=n(v3e,"A",{href:!0});var gQr=s(hI);guo=r(gQr,"T5Model"),gQr.forEach(t),huo=r(v3e," (T5 model)"),v3e.forEach(t),puo=i($),Kp=n($,"LI",{});var F3e=s(Kp);lne=n(F3e,"STRONG",{});var hQr=s(lne);uuo=r(hQr,"tapas"),hQr.forEach(t),_uo=r(F3e," \u2014 "),pI=n(F3e,"A",{href:!0});var pQr=s(pI);buo=r(pQr,"TapasModel"),pQr.forEach(t),vuo=r(F3e," (TAPAS model)"),F3e.forEach(t),Fuo=i($),Zp=n($,"LI",{});var T3e=s(Zp);ine=n(T3e,"STRONG",{});var uQr=s(ine);Tuo=r(uQr,"transfo-xl"),uQr.forEach(t),Muo=r(T3e," \u2014 "),uI=n(T3e,"A",{href:!0});var _Qr=s(uI);Euo=r(_Qr,"TransfoXLModel"),_Qr.forEach(t),Cuo=r(T3e," (Transformer-XL model)"),T3e.forEach(t),wuo=i($),eu=n($,"LI",{});var M3e=s(eu);dne=n(M3e,"STRONG",{});var bQr=s(dne);Auo=r(bQr,"unispeech"),bQr.forEach(t),yuo=r(M3e," \u2014 "),_I=n(M3e,"A",{href:!0});var vQr=s(_I);Luo=r(vQr,"UniSpeechModel"),vQr.forEach(t),xuo=r(M3e," (UniSpeech model)"),M3e.forEach(t),$uo=i($),ou=n($,"LI",{});var E3e=s(ou);cne=n(E3e,"STRONG",{});var FQr=s(cne);kuo=r(FQr,"unispeech-sat"),FQr.forEach(t),Suo=r(E3e," \u2014 "),bI=n(E3e,"A",{href:!0});var TQr=s(bI);Ruo=r(TQr,"UniSpeechSatModel"),TQr.forEach(t),Buo=r(E3e," (UniSpeechSat model)"),E3e.forEach(t),Puo=i($),ru=n($,"LI",{});var C3e=s(ru);fne=n(C3e,"STRONG",{});var MQr=s(fne);Iuo=r(MQr,"van"),MQr.forEach(t),quo=r(C3e," \u2014 "),vI=n(C3e,"A",{href:!0});var EQr=s(vI);Nuo=r(EQr,"VanModel"),EQr.forEach(t),juo=r(C3e," (VAN model)"),C3e.forEach(t),Duo=i($),tu=n($,"LI",{});var w3e=s(tu);mne=n(w3e,"STRONG",{});var CQr=s(mne);Guo=r(CQr,"vilt"),CQr.forEach(t),Ouo=r(w3e," \u2014 "),FI=n(w3e,"A",{href:!0});var wQr=s(FI);Vuo=r(wQr,"ViltModel"),wQr.forEach(t),Xuo=r(w3e," (ViLT model)"),w3e.forEach(t),zuo=i($),au=n($,"LI",{});var A3e=s(au);gne=n(A3e,"STRONG",{});var AQr=s(gne);Quo=r(AQr,"vision-text-dual-encoder"),AQr.forEach(t),Wuo=r(A3e," \u2014 "),TI=n(A3e,"A",{href:!0});var yQr=s(TI);Huo=r(yQr,"VisionTextDualEncoderModel"),yQr.forEach(t),Uuo=r(A3e," (VisionTextDualEncoder model)"),A3e.forEach(t),Juo=i($),nu=n($,"LI",{});var y3e=s(nu);hne=n(y3e,"STRONG",{});var LQr=s(hne);Yuo=r(LQr,"visual_bert"),LQr.forEach(t),Kuo=r(y3e," \u2014 "),MI=n(y3e,"A",{href:!0});var xQr=s(MI);Zuo=r(xQr,"VisualBertModel"),xQr.forEach(t),e_o=r(y3e," (VisualBert model)"),y3e.forEach(t),o_o=i($),su=n($,"LI",{});var L3e=s(su);pne=n(L3e,"STRONG",{});var $Qr=s(pne);r_o=r($Qr,"vit"),$Qr.forEach(t),t_o=r(L3e," \u2014 "),EI=n(L3e,"A",{href:!0});var kQr=s(EI);a_o=r(kQr,"ViTModel"),kQr.forEach(t),n_o=r(L3e," (ViT model)"),L3e.forEach(t),s_o=i($),lu=n($,"LI",{});var x3e=s(lu);une=n(x3e,"STRONG",{});var SQr=s(une);l_o=r(SQr,"vit_mae"),SQr.forEach(t),i_o=r(x3e," \u2014 "),CI=n(x3e,"A",{href:!0});var RQr=s(CI);d_o=r(RQr,"ViTMAEModel"),RQr.forEach(t),c_o=r(x3e," (ViTMAE model)"),x3e.forEach(t),f_o=i($),iu=n($,"LI",{});var $3e=s(iu);_ne=n($3e,"STRONG",{});var BQr=s(_ne);m_o=r(BQr,"wav2vec2"),BQr.forEach(t),g_o=r($3e," \u2014 "),wI=n($3e,"A",{href:!0});var PQr=s(wI);h_o=r(PQr,"Wav2Vec2Model"),PQr.forEach(t),p_o=r($3e," (Wav2Vec2 model)"),$3e.forEach(t),u_o=i($),du=n($,"LI",{});var k3e=s(du);bne=n(k3e,"STRONG",{});var IQr=s(bne);__o=r(IQr,"wavlm"),IQr.forEach(t),b_o=r(k3e," \u2014 "),AI=n(k3e,"A",{href:!0});var qQr=s(AI);v_o=r(qQr,"WavLMModel"),qQr.forEach(t),F_o=r(k3e," (WavLM model)"),k3e.forEach(t),T_o=i($),cu=n($,"LI",{});var S3e=s(cu);vne=n(S3e,"STRONG",{});var NQr=s(vne);M_o=r(NQr,"xglm"),NQr.forEach(t),E_o=r(S3e," \u2014 "),yI=n(S3e,"A",{href:!0});var jQr=s(yI);C_o=r(jQr,"XGLMModel"),jQr.forEach(t),w_o=r(S3e," (XGLM model)"),S3e.forEach(t),A_o=i($),fu=n($,"LI",{});var R3e=s(fu);Fne=n(R3e,"STRONG",{});var DQr=s(Fne);y_o=r(DQr,"xlm"),DQr.forEach(t),L_o=r(R3e," \u2014 "),LI=n(R3e,"A",{href:!0});var GQr=s(LI);x_o=r(GQr,"XLMModel"),GQr.forEach(t),$_o=r(R3e," (XLM model)"),R3e.forEach(t),k_o=i($),mu=n($,"LI",{});var B3e=s(mu);Tne=n(B3e,"STRONG",{});var OQr=s(Tne);S_o=r(OQr,"xlm-prophetnet"),OQr.forEach(t),R_o=r(B3e," \u2014 "),xI=n(B3e,"A",{href:!0});var VQr=s(xI);B_o=r(VQr,"XLMProphetNetModel"),VQr.forEach(t),P_o=r(B3e," (XLMProphetNet model)"),B3e.forEach(t),I_o=i($),gu=n($,"LI",{});var P3e=s(gu);Mne=n(P3e,"STRONG",{});var XQr=s(Mne);q_o=r(XQr,"xlm-roberta"),XQr.forEach(t),N_o=r(P3e," \u2014 "),$I=n(P3e,"A",{href:!0});var zQr=s($I);j_o=r(zQr,"XLMRobertaModel"),zQr.forEach(t),D_o=r(P3e," (XLM-RoBERTa model)"),P3e.forEach(t),G_o=i($),hu=n($,"LI",{});var I3e=s(hu);Ene=n(I3e,"STRONG",{});var QQr=s(Ene);O_o=r(QQr,"xlm-roberta-xl"),QQr.forEach(t),V_o=r(I3e," \u2014 "),kI=n(I3e,"A",{href:!0});var WQr=s(kI);X_o=r(WQr,"XLMRobertaXLModel"),WQr.forEach(t),z_o=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),Q_o=i($),pu=n($,"LI",{});var q3e=s(pu);Cne=n(q3e,"STRONG",{});var HQr=s(Cne);W_o=r(HQr,"xlnet"),HQr.forEach(t),H_o=r(q3e," \u2014 "),SI=n(q3e,"A",{href:!0});var UQr=s(SI);U_o=r(UQr,"XLNetModel"),UQr.forEach(t),J_o=r(q3e," (XLNet model)"),q3e.forEach(t),Y_o=i($),uu=n($,"LI",{});var N3e=s(uu);wne=n(N3e,"STRONG",{});var JQr=s(wne);K_o=r(JQr,"yoso"),JQr.forEach(t),Z_o=r(N3e," \u2014 "),RI=n(N3e,"A",{href:!0});var YQr=s(RI);e2o=r(YQr,"YosoModel"),YQr.forEach(t),o2o=r(N3e," (YOSO model)"),N3e.forEach(t),$.forEach(t),r2o=i(Ut),_u=n(Ut,"P",{});var j3e=s(_u);t2o=r(j3e,"The model is set in evaluation mode by default using "),Ane=n(j3e,"CODE",{});var KQr=s(Ane);a2o=r(KQr,"model.eval()"),KQr.forEach(t),n2o=r(j3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=n(j3e,"CODE",{});var ZQr=s(yne);s2o=r(ZQr,"model.train()"),ZQr.forEach(t),j3e.forEach(t),l2o=i(Ut),T(bu.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),eBe=i(f),bi=n(f,"H2",{class:!0});var rIe=s(bi);vu=n(rIe,"A",{id:!0,class:!0,href:!0});var eWr=s(vu);Lne=n(eWr,"SPAN",{});var oWr=s(Lne);T(WA.$$.fragment,oWr),oWr.forEach(t),eWr.forEach(t),i2o=i(rIe),xne=n(rIe,"SPAN",{});var rWr=s(xne);d2o=r(rWr,"AutoModelForPreTraining"),rWr.forEach(t),rIe.forEach(t),oBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(HA.$$.fragment,Ps),c2o=i(Ps),vi=n(Ps,"P",{});var KJ=s(vi);f2o=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BI=n(KJ,"A",{href:!0});var tWr=s(BI);m2o=r(tWr,"from_pretrained()"),tWr.forEach(t),g2o=r(KJ," class method or the "),PI=n(KJ,"A",{href:!0});var aWr=s(PI);h2o=r(aWr,"from_config()"),aWr.forEach(t),p2o=r(KJ,` class
method.`),KJ.forEach(t),u2o=i(Ps),UA=n(Ps,"P",{});var tIe=s(UA);_2o=r(tIe,"This class cannot be instantiated directly using "),$ne=n(tIe,"CODE",{});var nWr=s($ne);b2o=r(nWr,"__init__()"),nWr.forEach(t),v2o=r(tIe," (throws an error)."),tIe.forEach(t),F2o=i(Ps),Zr=n(Ps,"DIV",{class:!0});var E3=s(Zr);T(JA.$$.fragment,E3),T2o=i(E3),kne=n(E3,"P",{});var sWr=s(kne);M2o=r(sWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sWr.forEach(t),E2o=i(E3),Fi=n(E3,"P",{});var ZJ=s(Fi);C2o=r(ZJ,`Note:
Loading a model from its configuration file does `),Sne=n(ZJ,"STRONG",{});var lWr=s(Sne);w2o=r(lWr,"not"),lWr.forEach(t),A2o=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(ZJ,"A",{href:!0});var iWr=s(II);y2o=r(iWr,"from_pretrained()"),iWr.forEach(t),L2o=r(ZJ," to load the model weights."),ZJ.forEach(t),x2o=i(E3),T(Fu.$$.fragment,E3),E3.forEach(t),$2o=i(Ps),He=n(Ps,"DIV",{class:!0});var Jt=s(He);T(YA.$$.fragment,Jt),k2o=i(Jt),Rne=n(Jt,"P",{});var dWr=s(Rne);S2o=r(dWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dWr.forEach(t),R2o=i(Jt),Ea=n(Jt,"P",{});var C3=s(Ea);B2o=r(C3,"The model class to instantiate is selected based on the "),Bne=n(C3,"CODE",{});var cWr=s(Bne);P2o=r(cWr,"model_type"),cWr.forEach(t),I2o=r(C3,` property of the config object (either
passed as an argument or loaded from `),Pne=n(C3,"CODE",{});var fWr=s(Pne);q2o=r(fWr,"pretrained_model_name_or_path"),fWr.forEach(t),N2o=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ine=n(C3,"CODE",{});var mWr=s(Ine);j2o=r(mWr,"pretrained_model_name_or_path"),mWr.forEach(t),D2o=r(C3,":"),C3.forEach(t),G2o=i(Jt),G=n(Jt,"UL",{});var V=s(G);Tu=n(V,"LI",{});var D3e=s(Tu);qne=n(D3e,"STRONG",{});var gWr=s(qne);O2o=r(gWr,"albert"),gWr.forEach(t),V2o=r(D3e," \u2014 "),qI=n(D3e,"A",{href:!0});var hWr=s(qI);X2o=r(hWr,"AlbertForPreTraining"),hWr.forEach(t),z2o=r(D3e," (ALBERT model)"),D3e.forEach(t),Q2o=i(V),Mu=n(V,"LI",{});var G3e=s(Mu);Nne=n(G3e,"STRONG",{});var pWr=s(Nne);W2o=r(pWr,"bart"),pWr.forEach(t),H2o=r(G3e," \u2014 "),NI=n(G3e,"A",{href:!0});var uWr=s(NI);U2o=r(uWr,"BartForConditionalGeneration"),uWr.forEach(t),J2o=r(G3e," (BART model)"),G3e.forEach(t),Y2o=i(V),Eu=n(V,"LI",{});var O3e=s(Eu);jne=n(O3e,"STRONG",{});var _Wr=s(jne);K2o=r(_Wr,"bert"),_Wr.forEach(t),Z2o=r(O3e," \u2014 "),jI=n(O3e,"A",{href:!0});var bWr=s(jI);e1o=r(bWr,"BertForPreTraining"),bWr.forEach(t),o1o=r(O3e," (BERT model)"),O3e.forEach(t),r1o=i(V),Cu=n(V,"LI",{});var V3e=s(Cu);Dne=n(V3e,"STRONG",{});var vWr=s(Dne);t1o=r(vWr,"big_bird"),vWr.forEach(t),a1o=r(V3e," \u2014 "),DI=n(V3e,"A",{href:!0});var FWr=s(DI);n1o=r(FWr,"BigBirdForPreTraining"),FWr.forEach(t),s1o=r(V3e," (BigBird model)"),V3e.forEach(t),l1o=i(V),wu=n(V,"LI",{});var X3e=s(wu);Gne=n(X3e,"STRONG",{});var TWr=s(Gne);i1o=r(TWr,"camembert"),TWr.forEach(t),d1o=r(X3e," \u2014 "),GI=n(X3e,"A",{href:!0});var MWr=s(GI);c1o=r(MWr,"CamembertForMaskedLM"),MWr.forEach(t),f1o=r(X3e," (CamemBERT model)"),X3e.forEach(t),m1o=i(V),Au=n(V,"LI",{});var z3e=s(Au);One=n(z3e,"STRONG",{});var EWr=s(One);g1o=r(EWr,"ctrl"),EWr.forEach(t),h1o=r(z3e," \u2014 "),OI=n(z3e,"A",{href:!0});var CWr=s(OI);p1o=r(CWr,"CTRLLMHeadModel"),CWr.forEach(t),u1o=r(z3e," (CTRL model)"),z3e.forEach(t),_1o=i(V),yu=n(V,"LI",{});var Q3e=s(yu);Vne=n(Q3e,"STRONG",{});var wWr=s(Vne);b1o=r(wWr,"data2vec-text"),wWr.forEach(t),v1o=r(Q3e," \u2014 "),VI=n(Q3e,"A",{href:!0});var AWr=s(VI);F1o=r(AWr,"Data2VecTextForMaskedLM"),AWr.forEach(t),T1o=r(Q3e," (Data2VecText model)"),Q3e.forEach(t),M1o=i(V),Lu=n(V,"LI",{});var W3e=s(Lu);Xne=n(W3e,"STRONG",{});var yWr=s(Xne);E1o=r(yWr,"deberta"),yWr.forEach(t),C1o=r(W3e," \u2014 "),XI=n(W3e,"A",{href:!0});var LWr=s(XI);w1o=r(LWr,"DebertaForMaskedLM"),LWr.forEach(t),A1o=r(W3e," (DeBERTa model)"),W3e.forEach(t),y1o=i(V),xu=n(V,"LI",{});var H3e=s(xu);zne=n(H3e,"STRONG",{});var xWr=s(zne);L1o=r(xWr,"deberta-v2"),xWr.forEach(t),x1o=r(H3e," \u2014 "),zI=n(H3e,"A",{href:!0});var $Wr=s(zI);$1o=r($Wr,"DebertaV2ForMaskedLM"),$Wr.forEach(t),k1o=r(H3e," (DeBERTa-v2 model)"),H3e.forEach(t),S1o=i(V),$u=n(V,"LI",{});var U3e=s($u);Qne=n(U3e,"STRONG",{});var kWr=s(Qne);R1o=r(kWr,"distilbert"),kWr.forEach(t),B1o=r(U3e," \u2014 "),QI=n(U3e,"A",{href:!0});var SWr=s(QI);P1o=r(SWr,"DistilBertForMaskedLM"),SWr.forEach(t),I1o=r(U3e," (DistilBERT model)"),U3e.forEach(t),q1o=i(V),ku=n(V,"LI",{});var J3e=s(ku);Wne=n(J3e,"STRONG",{});var RWr=s(Wne);N1o=r(RWr,"electra"),RWr.forEach(t),j1o=r(J3e," \u2014 "),WI=n(J3e,"A",{href:!0});var BWr=s(WI);D1o=r(BWr,"ElectraForPreTraining"),BWr.forEach(t),G1o=r(J3e," (ELECTRA model)"),J3e.forEach(t),O1o=i(V),Su=n(V,"LI",{});var Y3e=s(Su);Hne=n(Y3e,"STRONG",{});var PWr=s(Hne);V1o=r(PWr,"flaubert"),PWr.forEach(t),X1o=r(Y3e," \u2014 "),HI=n(Y3e,"A",{href:!0});var IWr=s(HI);z1o=r(IWr,"FlaubertWithLMHeadModel"),IWr.forEach(t),Q1o=r(Y3e," (FlauBERT model)"),Y3e.forEach(t),W1o=i(V),Ru=n(V,"LI",{});var K3e=s(Ru);Une=n(K3e,"STRONG",{});var qWr=s(Une);H1o=r(qWr,"fnet"),qWr.forEach(t),U1o=r(K3e," \u2014 "),UI=n(K3e,"A",{href:!0});var NWr=s(UI);J1o=r(NWr,"FNetForPreTraining"),NWr.forEach(t),Y1o=r(K3e," (FNet model)"),K3e.forEach(t),K1o=i(V),Bu=n(V,"LI",{});var Z3e=s(Bu);Jne=n(Z3e,"STRONG",{});var jWr=s(Jne);Z1o=r(jWr,"fsmt"),jWr.forEach(t),ebo=r(Z3e," \u2014 "),JI=n(Z3e,"A",{href:!0});var DWr=s(JI);obo=r(DWr,"FSMTForConditionalGeneration"),DWr.forEach(t),rbo=r(Z3e," (FairSeq Machine-Translation model)"),Z3e.forEach(t),tbo=i(V),Pu=n(V,"LI",{});var ewe=s(Pu);Yne=n(ewe,"STRONG",{});var GWr=s(Yne);abo=r(GWr,"funnel"),GWr.forEach(t),nbo=r(ewe," \u2014 "),YI=n(ewe,"A",{href:!0});var OWr=s(YI);sbo=r(OWr,"FunnelForPreTraining"),OWr.forEach(t),lbo=r(ewe," (Funnel Transformer model)"),ewe.forEach(t),ibo=i(V),Iu=n(V,"LI",{});var owe=s(Iu);Kne=n(owe,"STRONG",{});var VWr=s(Kne);dbo=r(VWr,"gpt2"),VWr.forEach(t),cbo=r(owe," \u2014 "),KI=n(owe,"A",{href:!0});var XWr=s(KI);fbo=r(XWr,"GPT2LMHeadModel"),XWr.forEach(t),mbo=r(owe," (OpenAI GPT-2 model)"),owe.forEach(t),gbo=i(V),qu=n(V,"LI",{});var rwe=s(qu);Zne=n(rwe,"STRONG",{});var zWr=s(Zne);hbo=r(zWr,"ibert"),zWr.forEach(t),pbo=r(rwe," \u2014 "),ZI=n(rwe,"A",{href:!0});var QWr=s(ZI);ubo=r(QWr,"IBertForMaskedLM"),QWr.forEach(t),_bo=r(rwe," (I-BERT model)"),rwe.forEach(t),bbo=i(V),Nu=n(V,"LI",{});var twe=s(Nu);ese=n(twe,"STRONG",{});var WWr=s(ese);vbo=r(WWr,"layoutlm"),WWr.forEach(t),Fbo=r(twe," \u2014 "),eq=n(twe,"A",{href:!0});var HWr=s(eq);Tbo=r(HWr,"LayoutLMForMaskedLM"),HWr.forEach(t),Mbo=r(twe," (LayoutLM model)"),twe.forEach(t),Ebo=i(V),ju=n(V,"LI",{});var awe=s(ju);ose=n(awe,"STRONG",{});var UWr=s(ose);Cbo=r(UWr,"longformer"),UWr.forEach(t),wbo=r(awe," \u2014 "),oq=n(awe,"A",{href:!0});var JWr=s(oq);Abo=r(JWr,"LongformerForMaskedLM"),JWr.forEach(t),ybo=r(awe," (Longformer model)"),awe.forEach(t),Lbo=i(V),Du=n(V,"LI",{});var nwe=s(Du);rse=n(nwe,"STRONG",{});var YWr=s(rse);xbo=r(YWr,"lxmert"),YWr.forEach(t),$bo=r(nwe," \u2014 "),rq=n(nwe,"A",{href:!0});var KWr=s(rq);kbo=r(KWr,"LxmertForPreTraining"),KWr.forEach(t),Sbo=r(nwe," (LXMERT model)"),nwe.forEach(t),Rbo=i(V),Gu=n(V,"LI",{});var swe=s(Gu);tse=n(swe,"STRONG",{});var ZWr=s(tse);Bbo=r(ZWr,"megatron-bert"),ZWr.forEach(t),Pbo=r(swe," \u2014 "),tq=n(swe,"A",{href:!0});var eHr=s(tq);Ibo=r(eHr,"MegatronBertForPreTraining"),eHr.forEach(t),qbo=r(swe," (MegatronBert model)"),swe.forEach(t),Nbo=i(V),Ou=n(V,"LI",{});var lwe=s(Ou);ase=n(lwe,"STRONG",{});var oHr=s(ase);jbo=r(oHr,"mobilebert"),oHr.forEach(t),Dbo=r(lwe," \u2014 "),aq=n(lwe,"A",{href:!0});var rHr=s(aq);Gbo=r(rHr,"MobileBertForPreTraining"),rHr.forEach(t),Obo=r(lwe," (MobileBERT model)"),lwe.forEach(t),Vbo=i(V),Vu=n(V,"LI",{});var iwe=s(Vu);nse=n(iwe,"STRONG",{});var tHr=s(nse);Xbo=r(tHr,"mpnet"),tHr.forEach(t),zbo=r(iwe," \u2014 "),nq=n(iwe,"A",{href:!0});var aHr=s(nq);Qbo=r(aHr,"MPNetForMaskedLM"),aHr.forEach(t),Wbo=r(iwe," (MPNet model)"),iwe.forEach(t),Hbo=i(V),Xu=n(V,"LI",{});var dwe=s(Xu);sse=n(dwe,"STRONG",{});var nHr=s(sse);Ubo=r(nHr,"openai-gpt"),nHr.forEach(t),Jbo=r(dwe," \u2014 "),sq=n(dwe,"A",{href:!0});var sHr=s(sq);Ybo=r(sHr,"OpenAIGPTLMHeadModel"),sHr.forEach(t),Kbo=r(dwe," (OpenAI GPT model)"),dwe.forEach(t),Zbo=i(V),zu=n(V,"LI",{});var cwe=s(zu);lse=n(cwe,"STRONG",{});var lHr=s(lse);e4o=r(lHr,"retribert"),lHr.forEach(t),o4o=r(cwe," \u2014 "),lq=n(cwe,"A",{href:!0});var iHr=s(lq);r4o=r(iHr,"RetriBertModel"),iHr.forEach(t),t4o=r(cwe," (RetriBERT model)"),cwe.forEach(t),a4o=i(V),Qu=n(V,"LI",{});var fwe=s(Qu);ise=n(fwe,"STRONG",{});var dHr=s(ise);n4o=r(dHr,"roberta"),dHr.forEach(t),s4o=r(fwe," \u2014 "),iq=n(fwe,"A",{href:!0});var cHr=s(iq);l4o=r(cHr,"RobertaForMaskedLM"),cHr.forEach(t),i4o=r(fwe," (RoBERTa model)"),fwe.forEach(t),d4o=i(V),Wu=n(V,"LI",{});var mwe=s(Wu);dse=n(mwe,"STRONG",{});var fHr=s(dse);c4o=r(fHr,"squeezebert"),fHr.forEach(t),f4o=r(mwe," \u2014 "),dq=n(mwe,"A",{href:!0});var mHr=s(dq);m4o=r(mHr,"SqueezeBertForMaskedLM"),mHr.forEach(t),g4o=r(mwe," (SqueezeBERT model)"),mwe.forEach(t),h4o=i(V),Hu=n(V,"LI",{});var gwe=s(Hu);cse=n(gwe,"STRONG",{});var gHr=s(cse);p4o=r(gHr,"t5"),gHr.forEach(t),u4o=r(gwe," \u2014 "),cq=n(gwe,"A",{href:!0});var hHr=s(cq);_4o=r(hHr,"T5ForConditionalGeneration"),hHr.forEach(t),b4o=r(gwe," (T5 model)"),gwe.forEach(t),v4o=i(V),Uu=n(V,"LI",{});var hwe=s(Uu);fse=n(hwe,"STRONG",{});var pHr=s(fse);F4o=r(pHr,"tapas"),pHr.forEach(t),T4o=r(hwe," \u2014 "),fq=n(hwe,"A",{href:!0});var uHr=s(fq);M4o=r(uHr,"TapasForMaskedLM"),uHr.forEach(t),E4o=r(hwe," (TAPAS model)"),hwe.forEach(t),C4o=i(V),Ju=n(V,"LI",{});var pwe=s(Ju);mse=n(pwe,"STRONG",{});var _Hr=s(mse);w4o=r(_Hr,"transfo-xl"),_Hr.forEach(t),A4o=r(pwe," \u2014 "),mq=n(pwe,"A",{href:!0});var bHr=s(mq);y4o=r(bHr,"TransfoXLLMHeadModel"),bHr.forEach(t),L4o=r(pwe," (Transformer-XL model)"),pwe.forEach(t),x4o=i(V),Yu=n(V,"LI",{});var uwe=s(Yu);gse=n(uwe,"STRONG",{});var vHr=s(gse);$4o=r(vHr,"unispeech"),vHr.forEach(t),k4o=r(uwe," \u2014 "),gq=n(uwe,"A",{href:!0});var FHr=s(gq);S4o=r(FHr,"UniSpeechForPreTraining"),FHr.forEach(t),R4o=r(uwe," (UniSpeech model)"),uwe.forEach(t),B4o=i(V),Ku=n(V,"LI",{});var _we=s(Ku);hse=n(_we,"STRONG",{});var THr=s(hse);P4o=r(THr,"unispeech-sat"),THr.forEach(t),I4o=r(_we," \u2014 "),hq=n(_we,"A",{href:!0});var MHr=s(hq);q4o=r(MHr,"UniSpeechSatForPreTraining"),MHr.forEach(t),N4o=r(_we," (UniSpeechSat model)"),_we.forEach(t),j4o=i(V),Zu=n(V,"LI",{});var bwe=s(Zu);pse=n(bwe,"STRONG",{});var EHr=s(pse);D4o=r(EHr,"visual_bert"),EHr.forEach(t),G4o=r(bwe," \u2014 "),pq=n(bwe,"A",{href:!0});var CHr=s(pq);O4o=r(CHr,"VisualBertForPreTraining"),CHr.forEach(t),V4o=r(bwe," (VisualBert model)"),bwe.forEach(t),X4o=i(V),e_=n(V,"LI",{});var vwe=s(e_);use=n(vwe,"STRONG",{});var wHr=s(use);z4o=r(wHr,"vit_mae"),wHr.forEach(t),Q4o=r(vwe," \u2014 "),uq=n(vwe,"A",{href:!0});var AHr=s(uq);W4o=r(AHr,"ViTMAEForPreTraining"),AHr.forEach(t),H4o=r(vwe," (ViTMAE model)"),vwe.forEach(t),U4o=i(V),o_=n(V,"LI",{});var Fwe=s(o_);_se=n(Fwe,"STRONG",{});var yHr=s(_se);J4o=r(yHr,"wav2vec2"),yHr.forEach(t),Y4o=r(Fwe," \u2014 "),_q=n(Fwe,"A",{href:!0});var LHr=s(_q);K4o=r(LHr,"Wav2Vec2ForPreTraining"),LHr.forEach(t),Z4o=r(Fwe," (Wav2Vec2 model)"),Fwe.forEach(t),evo=i(V),r_=n(V,"LI",{});var Twe=s(r_);bse=n(Twe,"STRONG",{});var xHr=s(bse);ovo=r(xHr,"xlm"),xHr.forEach(t),rvo=r(Twe," \u2014 "),bq=n(Twe,"A",{href:!0});var $Hr=s(bq);tvo=r($Hr,"XLMWithLMHeadModel"),$Hr.forEach(t),avo=r(Twe," (XLM model)"),Twe.forEach(t),nvo=i(V),t_=n(V,"LI",{});var Mwe=s(t_);vse=n(Mwe,"STRONG",{});var kHr=s(vse);svo=r(kHr,"xlm-roberta"),kHr.forEach(t),lvo=r(Mwe," \u2014 "),vq=n(Mwe,"A",{href:!0});var SHr=s(vq);ivo=r(SHr,"XLMRobertaForMaskedLM"),SHr.forEach(t),dvo=r(Mwe," (XLM-RoBERTa model)"),Mwe.forEach(t),cvo=i(V),a_=n(V,"LI",{});var Ewe=s(a_);Fse=n(Ewe,"STRONG",{});var RHr=s(Fse);fvo=r(RHr,"xlm-roberta-xl"),RHr.forEach(t),mvo=r(Ewe," \u2014 "),Fq=n(Ewe,"A",{href:!0});var BHr=s(Fq);gvo=r(BHr,"XLMRobertaXLForMaskedLM"),BHr.forEach(t),hvo=r(Ewe," (XLM-RoBERTa-XL model)"),Ewe.forEach(t),pvo=i(V),n_=n(V,"LI",{});var Cwe=s(n_);Tse=n(Cwe,"STRONG",{});var PHr=s(Tse);uvo=r(PHr,"xlnet"),PHr.forEach(t),_vo=r(Cwe," \u2014 "),Tq=n(Cwe,"A",{href:!0});var IHr=s(Tq);bvo=r(IHr,"XLNetLMHeadModel"),IHr.forEach(t),vvo=r(Cwe," (XLNet model)"),Cwe.forEach(t),V.forEach(t),Fvo=i(Jt),s_=n(Jt,"P",{});var wwe=s(s_);Tvo=r(wwe,"The model is set in evaluation mode by default using "),Mse=n(wwe,"CODE",{});var qHr=s(Mse);Mvo=r(qHr,"model.eval()"),qHr.forEach(t),Evo=r(wwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(wwe,"CODE",{});var NHr=s(Ese);Cvo=r(NHr,"model.train()"),NHr.forEach(t),wwe.forEach(t),wvo=i(Jt),T(l_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),rBe=i(f),Ti=n(f,"H2",{class:!0});var aIe=s(Ti);i_=n(aIe,"A",{id:!0,class:!0,href:!0});var jHr=s(i_);Cse=n(jHr,"SPAN",{});var DHr=s(Cse);T(KA.$$.fragment,DHr),DHr.forEach(t),jHr.forEach(t),Avo=i(aIe),wse=n(aIe,"SPAN",{});var GHr=s(wse);yvo=r(GHr,"AutoModelForCausalLM"),GHr.forEach(t),aIe.forEach(t),tBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(ZA.$$.fragment,Is),Lvo=i(Is),Mi=n(Is,"P",{});var eY=s(Mi);xvo=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Mq=n(eY,"A",{href:!0});var OHr=s(Mq);$vo=r(OHr,"from_pretrained()"),OHr.forEach(t),kvo=r(eY," class method or the "),Eq=n(eY,"A",{href:!0});var VHr=s(Eq);Svo=r(VHr,"from_config()"),VHr.forEach(t),Rvo=r(eY,` class
method.`),eY.forEach(t),Bvo=i(Is),ey=n(Is,"P",{});var nIe=s(ey);Pvo=r(nIe,"This class cannot be instantiated directly using "),Ase=n(nIe,"CODE",{});var XHr=s(Ase);Ivo=r(XHr,"__init__()"),XHr.forEach(t),qvo=r(nIe," (throws an error)."),nIe.forEach(t),Nvo=i(Is),et=n(Is,"DIV",{class:!0});var w3=s(et);T(oy.$$.fragment,w3),jvo=i(w3),yse=n(w3,"P",{});var zHr=s(yse);Dvo=r(zHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zHr.forEach(t),Gvo=i(w3),Ei=n(w3,"P",{});var oY=s(Ei);Ovo=r(oY,`Note:
Loading a model from its configuration file does `),Lse=n(oY,"STRONG",{});var QHr=s(Lse);Vvo=r(QHr,"not"),QHr.forEach(t),Xvo=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cq=n(oY,"A",{href:!0});var WHr=s(Cq);zvo=r(WHr,"from_pretrained()"),WHr.forEach(t),Qvo=r(oY," to load the model weights."),oY.forEach(t),Wvo=i(w3),T(d_.$$.fragment,w3),w3.forEach(t),Hvo=i(Is),Ue=n(Is,"DIV",{class:!0});var Yt=s(Ue);T(ry.$$.fragment,Yt),Uvo=i(Yt),xse=n(Yt,"P",{});var HHr=s(xse);Jvo=r(HHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HHr.forEach(t),Yvo=i(Yt),Ca=n(Yt,"P",{});var A3=s(Ca);Kvo=r(A3,"The model class to instantiate is selected based on the "),$se=n(A3,"CODE",{});var UHr=s($se);Zvo=r(UHr,"model_type"),UHr.forEach(t),eFo=r(A3,` property of the config object (either
passed as an argument or loaded from `),kse=n(A3,"CODE",{});var JHr=s(kse);oFo=r(JHr,"pretrained_model_name_or_path"),JHr.forEach(t),rFo=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(A3,"CODE",{});var YHr=s(Sse);tFo=r(YHr,"pretrained_model_name_or_path"),YHr.forEach(t),aFo=r(A3,":"),A3.forEach(t),nFo=i(Yt),z=n(Yt,"UL",{});var W=s(z);c_=n(W,"LI",{});var Awe=s(c_);Rse=n(Awe,"STRONG",{});var KHr=s(Rse);sFo=r(KHr,"bart"),KHr.forEach(t),lFo=r(Awe," \u2014 "),wq=n(Awe,"A",{href:!0});var ZHr=s(wq);iFo=r(ZHr,"BartForCausalLM"),ZHr.forEach(t),dFo=r(Awe," (BART model)"),Awe.forEach(t),cFo=i(W),f_=n(W,"LI",{});var ywe=s(f_);Bse=n(ywe,"STRONG",{});var eUr=s(Bse);fFo=r(eUr,"bert"),eUr.forEach(t),mFo=r(ywe," \u2014 "),Aq=n(ywe,"A",{href:!0});var oUr=s(Aq);gFo=r(oUr,"BertLMHeadModel"),oUr.forEach(t),hFo=r(ywe," (BERT model)"),ywe.forEach(t),pFo=i(W),m_=n(W,"LI",{});var Lwe=s(m_);Pse=n(Lwe,"STRONG",{});var rUr=s(Pse);uFo=r(rUr,"bert-generation"),rUr.forEach(t),_Fo=r(Lwe," \u2014 "),yq=n(Lwe,"A",{href:!0});var tUr=s(yq);bFo=r(tUr,"BertGenerationDecoder"),tUr.forEach(t),vFo=r(Lwe," (Bert Generation model)"),Lwe.forEach(t),FFo=i(W),g_=n(W,"LI",{});var xwe=s(g_);Ise=n(xwe,"STRONG",{});var aUr=s(Ise);TFo=r(aUr,"big_bird"),aUr.forEach(t),MFo=r(xwe," \u2014 "),Lq=n(xwe,"A",{href:!0});var nUr=s(Lq);EFo=r(nUr,"BigBirdForCausalLM"),nUr.forEach(t),CFo=r(xwe," (BigBird model)"),xwe.forEach(t),wFo=i(W),h_=n(W,"LI",{});var $we=s(h_);qse=n($we,"STRONG",{});var sUr=s(qse);AFo=r(sUr,"bigbird_pegasus"),sUr.forEach(t),yFo=r($we," \u2014 "),xq=n($we,"A",{href:!0});var lUr=s(xq);LFo=r(lUr,"BigBirdPegasusForCausalLM"),lUr.forEach(t),xFo=r($we," (BigBirdPegasus model)"),$we.forEach(t),$Fo=i(W),p_=n(W,"LI",{});var kwe=s(p_);Nse=n(kwe,"STRONG",{});var iUr=s(Nse);kFo=r(iUr,"blenderbot"),iUr.forEach(t),SFo=r(kwe," \u2014 "),$q=n(kwe,"A",{href:!0});var dUr=s($q);RFo=r(dUr,"BlenderbotForCausalLM"),dUr.forEach(t),BFo=r(kwe," (Blenderbot model)"),kwe.forEach(t),PFo=i(W),u_=n(W,"LI",{});var Swe=s(u_);jse=n(Swe,"STRONG",{});var cUr=s(jse);IFo=r(cUr,"blenderbot-small"),cUr.forEach(t),qFo=r(Swe," \u2014 "),kq=n(Swe,"A",{href:!0});var fUr=s(kq);NFo=r(fUr,"BlenderbotSmallForCausalLM"),fUr.forEach(t),jFo=r(Swe," (BlenderbotSmall model)"),Swe.forEach(t),DFo=i(W),__=n(W,"LI",{});var Rwe=s(__);Dse=n(Rwe,"STRONG",{});var mUr=s(Dse);GFo=r(mUr,"camembert"),mUr.forEach(t),OFo=r(Rwe," \u2014 "),Sq=n(Rwe,"A",{href:!0});var gUr=s(Sq);VFo=r(gUr,"CamembertForCausalLM"),gUr.forEach(t),XFo=r(Rwe," (CamemBERT model)"),Rwe.forEach(t),zFo=i(W),b_=n(W,"LI",{});var Bwe=s(b_);Gse=n(Bwe,"STRONG",{});var hUr=s(Gse);QFo=r(hUr,"ctrl"),hUr.forEach(t),WFo=r(Bwe," \u2014 "),Rq=n(Bwe,"A",{href:!0});var pUr=s(Rq);HFo=r(pUr,"CTRLLMHeadModel"),pUr.forEach(t),UFo=r(Bwe," (CTRL model)"),Bwe.forEach(t),JFo=i(W),v_=n(W,"LI",{});var Pwe=s(v_);Ose=n(Pwe,"STRONG",{});var uUr=s(Ose);YFo=r(uUr,"data2vec-text"),uUr.forEach(t),KFo=r(Pwe," \u2014 "),Bq=n(Pwe,"A",{href:!0});var _Ur=s(Bq);ZFo=r(_Ur,"Data2VecTextForCausalLM"),_Ur.forEach(t),e0o=r(Pwe," (Data2VecText model)"),Pwe.forEach(t),o0o=i(W),F_=n(W,"LI",{});var Iwe=s(F_);Vse=n(Iwe,"STRONG",{});var bUr=s(Vse);r0o=r(bUr,"electra"),bUr.forEach(t),t0o=r(Iwe," \u2014 "),Pq=n(Iwe,"A",{href:!0});var vUr=s(Pq);a0o=r(vUr,"ElectraForCausalLM"),vUr.forEach(t),n0o=r(Iwe," (ELECTRA model)"),Iwe.forEach(t),s0o=i(W),T_=n(W,"LI",{});var qwe=s(T_);Xse=n(qwe,"STRONG",{});var FUr=s(Xse);l0o=r(FUr,"gpt2"),FUr.forEach(t),i0o=r(qwe," \u2014 "),Iq=n(qwe,"A",{href:!0});var TUr=s(Iq);d0o=r(TUr,"GPT2LMHeadModel"),TUr.forEach(t),c0o=r(qwe," (OpenAI GPT-2 model)"),qwe.forEach(t),f0o=i(W),M_=n(W,"LI",{});var Nwe=s(M_);zse=n(Nwe,"STRONG",{});var MUr=s(zse);m0o=r(MUr,"gpt_neo"),MUr.forEach(t),g0o=r(Nwe," \u2014 "),qq=n(Nwe,"A",{href:!0});var EUr=s(qq);h0o=r(EUr,"GPTNeoForCausalLM"),EUr.forEach(t),p0o=r(Nwe," (GPT Neo model)"),Nwe.forEach(t),u0o=i(W),E_=n(W,"LI",{});var jwe=s(E_);Qse=n(jwe,"STRONG",{});var CUr=s(Qse);_0o=r(CUr,"gptj"),CUr.forEach(t),b0o=r(jwe," \u2014 "),Nq=n(jwe,"A",{href:!0});var wUr=s(Nq);v0o=r(wUr,"GPTJForCausalLM"),wUr.forEach(t),F0o=r(jwe," (GPT-J model)"),jwe.forEach(t),T0o=i(W),C_=n(W,"LI",{});var Dwe=s(C_);Wse=n(Dwe,"STRONG",{});var AUr=s(Wse);M0o=r(AUr,"marian"),AUr.forEach(t),E0o=r(Dwe," \u2014 "),jq=n(Dwe,"A",{href:!0});var yUr=s(jq);C0o=r(yUr,"MarianForCausalLM"),yUr.forEach(t),w0o=r(Dwe," (Marian model)"),Dwe.forEach(t),A0o=i(W),w_=n(W,"LI",{});var Gwe=s(w_);Hse=n(Gwe,"STRONG",{});var LUr=s(Hse);y0o=r(LUr,"mbart"),LUr.forEach(t),L0o=r(Gwe," \u2014 "),Dq=n(Gwe,"A",{href:!0});var xUr=s(Dq);x0o=r(xUr,"MBartForCausalLM"),xUr.forEach(t),$0o=r(Gwe," (mBART model)"),Gwe.forEach(t),k0o=i(W),A_=n(W,"LI",{});var Owe=s(A_);Use=n(Owe,"STRONG",{});var $Ur=s(Use);S0o=r($Ur,"megatron-bert"),$Ur.forEach(t),R0o=r(Owe," \u2014 "),Gq=n(Owe,"A",{href:!0});var kUr=s(Gq);B0o=r(kUr,"MegatronBertForCausalLM"),kUr.forEach(t),P0o=r(Owe," (MegatronBert model)"),Owe.forEach(t),I0o=i(W),y_=n(W,"LI",{});var Vwe=s(y_);Jse=n(Vwe,"STRONG",{});var SUr=s(Jse);q0o=r(SUr,"openai-gpt"),SUr.forEach(t),N0o=r(Vwe," \u2014 "),Oq=n(Vwe,"A",{href:!0});var RUr=s(Oq);j0o=r(RUr,"OpenAIGPTLMHeadModel"),RUr.forEach(t),D0o=r(Vwe," (OpenAI GPT model)"),Vwe.forEach(t),G0o=i(W),L_=n(W,"LI",{});var Xwe=s(L_);Yse=n(Xwe,"STRONG",{});var BUr=s(Yse);O0o=r(BUr,"pegasus"),BUr.forEach(t),V0o=r(Xwe," \u2014 "),Vq=n(Xwe,"A",{href:!0});var PUr=s(Vq);X0o=r(PUr,"PegasusForCausalLM"),PUr.forEach(t),z0o=r(Xwe," (Pegasus model)"),Xwe.forEach(t),Q0o=i(W),x_=n(W,"LI",{});var zwe=s(x_);Kse=n(zwe,"STRONG",{});var IUr=s(Kse);W0o=r(IUr,"plbart"),IUr.forEach(t),H0o=r(zwe," \u2014 "),Xq=n(zwe,"A",{href:!0});var qUr=s(Xq);U0o=r(qUr,"PLBartForCausalLM"),qUr.forEach(t),J0o=r(zwe," (PLBart model)"),zwe.forEach(t),Y0o=i(W),$_=n(W,"LI",{});var Qwe=s($_);Zse=n(Qwe,"STRONG",{});var NUr=s(Zse);K0o=r(NUr,"prophetnet"),NUr.forEach(t),Z0o=r(Qwe," \u2014 "),zq=n(Qwe,"A",{href:!0});var jUr=s(zq);e6o=r(jUr,"ProphetNetForCausalLM"),jUr.forEach(t),o6o=r(Qwe," (ProphetNet model)"),Qwe.forEach(t),r6o=i(W),k_=n(W,"LI",{});var Wwe=s(k_);ele=n(Wwe,"STRONG",{});var DUr=s(ele);t6o=r(DUr,"qdqbert"),DUr.forEach(t),a6o=r(Wwe," \u2014 "),Qq=n(Wwe,"A",{href:!0});var GUr=s(Qq);n6o=r(GUr,"QDQBertLMHeadModel"),GUr.forEach(t),s6o=r(Wwe," (QDQBert model)"),Wwe.forEach(t),l6o=i(W),S_=n(W,"LI",{});var Hwe=s(S_);ole=n(Hwe,"STRONG",{});var OUr=s(ole);i6o=r(OUr,"reformer"),OUr.forEach(t),d6o=r(Hwe," \u2014 "),Wq=n(Hwe,"A",{href:!0});var VUr=s(Wq);c6o=r(VUr,"ReformerModelWithLMHead"),VUr.forEach(t),f6o=r(Hwe," (Reformer model)"),Hwe.forEach(t),m6o=i(W),R_=n(W,"LI",{});var Uwe=s(R_);rle=n(Uwe,"STRONG",{});var XUr=s(rle);g6o=r(XUr,"rembert"),XUr.forEach(t),h6o=r(Uwe," \u2014 "),Hq=n(Uwe,"A",{href:!0});var zUr=s(Hq);p6o=r(zUr,"RemBertForCausalLM"),zUr.forEach(t),u6o=r(Uwe," (RemBERT model)"),Uwe.forEach(t),_6o=i(W),B_=n(W,"LI",{});var Jwe=s(B_);tle=n(Jwe,"STRONG",{});var QUr=s(tle);b6o=r(QUr,"roberta"),QUr.forEach(t),v6o=r(Jwe," \u2014 "),Uq=n(Jwe,"A",{href:!0});var WUr=s(Uq);F6o=r(WUr,"RobertaForCausalLM"),WUr.forEach(t),T6o=r(Jwe," (RoBERTa model)"),Jwe.forEach(t),M6o=i(W),P_=n(W,"LI",{});var Ywe=s(P_);ale=n(Ywe,"STRONG",{});var HUr=s(ale);E6o=r(HUr,"roformer"),HUr.forEach(t),C6o=r(Ywe," \u2014 "),Jq=n(Ywe,"A",{href:!0});var UUr=s(Jq);w6o=r(UUr,"RoFormerForCausalLM"),UUr.forEach(t),A6o=r(Ywe," (RoFormer model)"),Ywe.forEach(t),y6o=i(W),I_=n(W,"LI",{});var Kwe=s(I_);nle=n(Kwe,"STRONG",{});var JUr=s(nle);L6o=r(JUr,"speech_to_text_2"),JUr.forEach(t),x6o=r(Kwe," \u2014 "),Yq=n(Kwe,"A",{href:!0});var YUr=s(Yq);$6o=r(YUr,"Speech2Text2ForCausalLM"),YUr.forEach(t),k6o=r(Kwe," (Speech2Text2 model)"),Kwe.forEach(t),S6o=i(W),q_=n(W,"LI",{});var Zwe=s(q_);sle=n(Zwe,"STRONG",{});var KUr=s(sle);R6o=r(KUr,"transfo-xl"),KUr.forEach(t),B6o=r(Zwe," \u2014 "),Kq=n(Zwe,"A",{href:!0});var ZUr=s(Kq);P6o=r(ZUr,"TransfoXLLMHeadModel"),ZUr.forEach(t),I6o=r(Zwe," (Transformer-XL model)"),Zwe.forEach(t),q6o=i(W),N_=n(W,"LI",{});var eAe=s(N_);lle=n(eAe,"STRONG",{});var eJr=s(lle);N6o=r(eJr,"trocr"),eJr.forEach(t),j6o=r(eAe," \u2014 "),Zq=n(eAe,"A",{href:!0});var oJr=s(Zq);D6o=r(oJr,"TrOCRForCausalLM"),oJr.forEach(t),G6o=r(eAe," (TrOCR model)"),eAe.forEach(t),O6o=i(W),j_=n(W,"LI",{});var oAe=s(j_);ile=n(oAe,"STRONG",{});var rJr=s(ile);V6o=r(rJr,"xglm"),rJr.forEach(t),X6o=r(oAe," \u2014 "),eN=n(oAe,"A",{href:!0});var tJr=s(eN);z6o=r(tJr,"XGLMForCausalLM"),tJr.forEach(t),Q6o=r(oAe," (XGLM model)"),oAe.forEach(t),W6o=i(W),D_=n(W,"LI",{});var rAe=s(D_);dle=n(rAe,"STRONG",{});var aJr=s(dle);H6o=r(aJr,"xlm"),aJr.forEach(t),U6o=r(rAe," \u2014 "),oN=n(rAe,"A",{href:!0});var nJr=s(oN);J6o=r(nJr,"XLMWithLMHeadModel"),nJr.forEach(t),Y6o=r(rAe," (XLM model)"),rAe.forEach(t),K6o=i(W),G_=n(W,"LI",{});var tAe=s(G_);cle=n(tAe,"STRONG",{});var sJr=s(cle);Z6o=r(sJr,"xlm-prophetnet"),sJr.forEach(t),eTo=r(tAe," \u2014 "),rN=n(tAe,"A",{href:!0});var lJr=s(rN);oTo=r(lJr,"XLMProphetNetForCausalLM"),lJr.forEach(t),rTo=r(tAe," (XLMProphetNet model)"),tAe.forEach(t),tTo=i(W),O_=n(W,"LI",{});var aAe=s(O_);fle=n(aAe,"STRONG",{});var iJr=s(fle);aTo=r(iJr,"xlm-roberta"),iJr.forEach(t),nTo=r(aAe," \u2014 "),tN=n(aAe,"A",{href:!0});var dJr=s(tN);sTo=r(dJr,"XLMRobertaForCausalLM"),dJr.forEach(t),lTo=r(aAe," (XLM-RoBERTa model)"),aAe.forEach(t),iTo=i(W),V_=n(W,"LI",{});var nAe=s(V_);mle=n(nAe,"STRONG",{});var cJr=s(mle);dTo=r(cJr,"xlm-roberta-xl"),cJr.forEach(t),cTo=r(nAe," \u2014 "),aN=n(nAe,"A",{href:!0});var fJr=s(aN);fTo=r(fJr,"XLMRobertaXLForCausalLM"),fJr.forEach(t),mTo=r(nAe," (XLM-RoBERTa-XL model)"),nAe.forEach(t),gTo=i(W),X_=n(W,"LI",{});var sAe=s(X_);gle=n(sAe,"STRONG",{});var mJr=s(gle);hTo=r(mJr,"xlnet"),mJr.forEach(t),pTo=r(sAe," \u2014 "),nN=n(sAe,"A",{href:!0});var gJr=s(nN);uTo=r(gJr,"XLNetLMHeadModel"),gJr.forEach(t),_To=r(sAe," (XLNet model)"),sAe.forEach(t),W.forEach(t),bTo=i(Yt),z_=n(Yt,"P",{});var lAe=s(z_);vTo=r(lAe,"The model is set in evaluation mode by default using "),hle=n(lAe,"CODE",{});var hJr=s(hle);FTo=r(hJr,"model.eval()"),hJr.forEach(t),TTo=r(lAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ple=n(lAe,"CODE",{});var pJr=s(ple);MTo=r(pJr,"model.train()"),pJr.forEach(t),lAe.forEach(t),ETo=i(Yt),T(Q_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),aBe=i(f),Ci=n(f,"H2",{class:!0});var sIe=s(Ci);W_=n(sIe,"A",{id:!0,class:!0,href:!0});var uJr=s(W_);ule=n(uJr,"SPAN",{});var _Jr=s(ule);T(ty.$$.fragment,_Jr),_Jr.forEach(t),uJr.forEach(t),CTo=i(sIe),_le=n(sIe,"SPAN",{});var bJr=s(_le);wTo=r(bJr,"AutoModelForMaskedLM"),bJr.forEach(t),sIe.forEach(t),nBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(ay.$$.fragment,qs),ATo=i(qs),wi=n(qs,"P",{});var rY=s(wi);yTo=r(rY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sN=n(rY,"A",{href:!0});var vJr=s(sN);LTo=r(vJr,"from_pretrained()"),vJr.forEach(t),xTo=r(rY," class method or the "),lN=n(rY,"A",{href:!0});var FJr=s(lN);$To=r(FJr,"from_config()"),FJr.forEach(t),kTo=r(rY,` class
method.`),rY.forEach(t),STo=i(qs),ny=n(qs,"P",{});var lIe=s(ny);RTo=r(lIe,"This class cannot be instantiated directly using "),ble=n(lIe,"CODE",{});var TJr=s(ble);BTo=r(TJr,"__init__()"),TJr.forEach(t),PTo=r(lIe," (throws an error)."),lIe.forEach(t),ITo=i(qs),ot=n(qs,"DIV",{class:!0});var y3=s(ot);T(sy.$$.fragment,y3),qTo=i(y3),vle=n(y3,"P",{});var MJr=s(vle);NTo=r(MJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),MJr.forEach(t),jTo=i(y3),Ai=n(y3,"P",{});var tY=s(Ai);DTo=r(tY,`Note:
Loading a model from its configuration file does `),Fle=n(tY,"STRONG",{});var EJr=s(Fle);GTo=r(EJr,"not"),EJr.forEach(t),OTo=r(tY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=n(tY,"A",{href:!0});var CJr=s(iN);VTo=r(CJr,"from_pretrained()"),CJr.forEach(t),XTo=r(tY," to load the model weights."),tY.forEach(t),zTo=i(y3),T(H_.$$.fragment,y3),y3.forEach(t),QTo=i(qs),Je=n(qs,"DIV",{class:!0});var Kt=s(Je);T(ly.$$.fragment,Kt),WTo=i(Kt),Tle=n(Kt,"P",{});var wJr=s(Tle);HTo=r(wJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),wJr.forEach(t),UTo=i(Kt),wa=n(Kt,"P",{});var L3=s(wa);JTo=r(L3,"The model class to instantiate is selected based on the "),Mle=n(L3,"CODE",{});var AJr=s(Mle);YTo=r(AJr,"model_type"),AJr.forEach(t),KTo=r(L3,` property of the config object (either
passed as an argument or loaded from `),Ele=n(L3,"CODE",{});var yJr=s(Ele);ZTo=r(yJr,"pretrained_model_name_or_path"),yJr.forEach(t),eMo=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cle=n(L3,"CODE",{});var LJr=s(Cle);oMo=r(LJr,"pretrained_model_name_or_path"),LJr.forEach(t),rMo=r(L3,":"),L3.forEach(t),tMo=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);U_=n(H,"LI",{});var iAe=s(U_);wle=n(iAe,"STRONG",{});var xJr=s(wle);aMo=r(xJr,"albert"),xJr.forEach(t),nMo=r(iAe," \u2014 "),dN=n(iAe,"A",{href:!0});var $Jr=s(dN);sMo=r($Jr,"AlbertForMaskedLM"),$Jr.forEach(t),lMo=r(iAe," (ALBERT model)"),iAe.forEach(t),iMo=i(H),J_=n(H,"LI",{});var dAe=s(J_);Ale=n(dAe,"STRONG",{});var kJr=s(Ale);dMo=r(kJr,"bart"),kJr.forEach(t),cMo=r(dAe," \u2014 "),cN=n(dAe,"A",{href:!0});var SJr=s(cN);fMo=r(SJr,"BartForConditionalGeneration"),SJr.forEach(t),mMo=r(dAe," (BART model)"),dAe.forEach(t),gMo=i(H),Y_=n(H,"LI",{});var cAe=s(Y_);yle=n(cAe,"STRONG",{});var RJr=s(yle);hMo=r(RJr,"bert"),RJr.forEach(t),pMo=r(cAe," \u2014 "),fN=n(cAe,"A",{href:!0});var BJr=s(fN);uMo=r(BJr,"BertForMaskedLM"),BJr.forEach(t),_Mo=r(cAe," (BERT model)"),cAe.forEach(t),bMo=i(H),K_=n(H,"LI",{});var fAe=s(K_);Lle=n(fAe,"STRONG",{});var PJr=s(Lle);vMo=r(PJr,"big_bird"),PJr.forEach(t),FMo=r(fAe," \u2014 "),mN=n(fAe,"A",{href:!0});var IJr=s(mN);TMo=r(IJr,"BigBirdForMaskedLM"),IJr.forEach(t),MMo=r(fAe," (BigBird model)"),fAe.forEach(t),EMo=i(H),Z_=n(H,"LI",{});var mAe=s(Z_);xle=n(mAe,"STRONG",{});var qJr=s(xle);CMo=r(qJr,"camembert"),qJr.forEach(t),wMo=r(mAe," \u2014 "),gN=n(mAe,"A",{href:!0});var NJr=s(gN);AMo=r(NJr,"CamembertForMaskedLM"),NJr.forEach(t),yMo=r(mAe," (CamemBERT model)"),mAe.forEach(t),LMo=i(H),e2=n(H,"LI",{});var gAe=s(e2);$le=n(gAe,"STRONG",{});var jJr=s($le);xMo=r(jJr,"convbert"),jJr.forEach(t),$Mo=r(gAe," \u2014 "),hN=n(gAe,"A",{href:!0});var DJr=s(hN);kMo=r(DJr,"ConvBertForMaskedLM"),DJr.forEach(t),SMo=r(gAe," (ConvBERT model)"),gAe.forEach(t),RMo=i(H),o2=n(H,"LI",{});var hAe=s(o2);kle=n(hAe,"STRONG",{});var GJr=s(kle);BMo=r(GJr,"data2vec-text"),GJr.forEach(t),PMo=r(hAe," \u2014 "),pN=n(hAe,"A",{href:!0});var OJr=s(pN);IMo=r(OJr,"Data2VecTextForMaskedLM"),OJr.forEach(t),qMo=r(hAe," (Data2VecText model)"),hAe.forEach(t),NMo=i(H),r2=n(H,"LI",{});var pAe=s(r2);Sle=n(pAe,"STRONG",{});var VJr=s(Sle);jMo=r(VJr,"deberta"),VJr.forEach(t),DMo=r(pAe," \u2014 "),uN=n(pAe,"A",{href:!0});var XJr=s(uN);GMo=r(XJr,"DebertaForMaskedLM"),XJr.forEach(t),OMo=r(pAe," (DeBERTa model)"),pAe.forEach(t),VMo=i(H),t2=n(H,"LI",{});var uAe=s(t2);Rle=n(uAe,"STRONG",{});var zJr=s(Rle);XMo=r(zJr,"deberta-v2"),zJr.forEach(t),zMo=r(uAe," \u2014 "),_N=n(uAe,"A",{href:!0});var QJr=s(_N);QMo=r(QJr,"DebertaV2ForMaskedLM"),QJr.forEach(t),WMo=r(uAe," (DeBERTa-v2 model)"),uAe.forEach(t),HMo=i(H),a2=n(H,"LI",{});var _Ae=s(a2);Ble=n(_Ae,"STRONG",{});var WJr=s(Ble);UMo=r(WJr,"distilbert"),WJr.forEach(t),JMo=r(_Ae," \u2014 "),bN=n(_Ae,"A",{href:!0});var HJr=s(bN);YMo=r(HJr,"DistilBertForMaskedLM"),HJr.forEach(t),KMo=r(_Ae," (DistilBERT model)"),_Ae.forEach(t),ZMo=i(H),n2=n(H,"LI",{});var bAe=s(n2);Ple=n(bAe,"STRONG",{});var UJr=s(Ple);eEo=r(UJr,"electra"),UJr.forEach(t),oEo=r(bAe," \u2014 "),vN=n(bAe,"A",{href:!0});var JJr=s(vN);rEo=r(JJr,"ElectraForMaskedLM"),JJr.forEach(t),tEo=r(bAe," (ELECTRA model)"),bAe.forEach(t),aEo=i(H),s2=n(H,"LI",{});var vAe=s(s2);Ile=n(vAe,"STRONG",{});var YJr=s(Ile);nEo=r(YJr,"flaubert"),YJr.forEach(t),sEo=r(vAe," \u2014 "),FN=n(vAe,"A",{href:!0});var KJr=s(FN);lEo=r(KJr,"FlaubertWithLMHeadModel"),KJr.forEach(t),iEo=r(vAe," (FlauBERT model)"),vAe.forEach(t),dEo=i(H),l2=n(H,"LI",{});var FAe=s(l2);qle=n(FAe,"STRONG",{});var ZJr=s(qle);cEo=r(ZJr,"fnet"),ZJr.forEach(t),fEo=r(FAe," \u2014 "),TN=n(FAe,"A",{href:!0});var eYr=s(TN);mEo=r(eYr,"FNetForMaskedLM"),eYr.forEach(t),gEo=r(FAe," (FNet model)"),FAe.forEach(t),hEo=i(H),i2=n(H,"LI",{});var TAe=s(i2);Nle=n(TAe,"STRONG",{});var oYr=s(Nle);pEo=r(oYr,"funnel"),oYr.forEach(t),uEo=r(TAe," \u2014 "),MN=n(TAe,"A",{href:!0});var rYr=s(MN);_Eo=r(rYr,"FunnelForMaskedLM"),rYr.forEach(t),bEo=r(TAe," (Funnel Transformer model)"),TAe.forEach(t),vEo=i(H),d2=n(H,"LI",{});var MAe=s(d2);jle=n(MAe,"STRONG",{});var tYr=s(jle);FEo=r(tYr,"ibert"),tYr.forEach(t),TEo=r(MAe," \u2014 "),EN=n(MAe,"A",{href:!0});var aYr=s(EN);MEo=r(aYr,"IBertForMaskedLM"),aYr.forEach(t),EEo=r(MAe," (I-BERT model)"),MAe.forEach(t),CEo=i(H),c2=n(H,"LI",{});var EAe=s(c2);Dle=n(EAe,"STRONG",{});var nYr=s(Dle);wEo=r(nYr,"layoutlm"),nYr.forEach(t),AEo=r(EAe," \u2014 "),CN=n(EAe,"A",{href:!0});var sYr=s(CN);yEo=r(sYr,"LayoutLMForMaskedLM"),sYr.forEach(t),LEo=r(EAe," (LayoutLM model)"),EAe.forEach(t),xEo=i(H),f2=n(H,"LI",{});var CAe=s(f2);Gle=n(CAe,"STRONG",{});var lYr=s(Gle);$Eo=r(lYr,"longformer"),lYr.forEach(t),kEo=r(CAe," \u2014 "),wN=n(CAe,"A",{href:!0});var iYr=s(wN);SEo=r(iYr,"LongformerForMaskedLM"),iYr.forEach(t),REo=r(CAe," (Longformer model)"),CAe.forEach(t),BEo=i(H),m2=n(H,"LI",{});var wAe=s(m2);Ole=n(wAe,"STRONG",{});var dYr=s(Ole);PEo=r(dYr,"mbart"),dYr.forEach(t),IEo=r(wAe," \u2014 "),AN=n(wAe,"A",{href:!0});var cYr=s(AN);qEo=r(cYr,"MBartForConditionalGeneration"),cYr.forEach(t),NEo=r(wAe," (mBART model)"),wAe.forEach(t),jEo=i(H),g2=n(H,"LI",{});var AAe=s(g2);Vle=n(AAe,"STRONG",{});var fYr=s(Vle);DEo=r(fYr,"megatron-bert"),fYr.forEach(t),GEo=r(AAe," \u2014 "),yN=n(AAe,"A",{href:!0});var mYr=s(yN);OEo=r(mYr,"MegatronBertForMaskedLM"),mYr.forEach(t),VEo=r(AAe," (MegatronBert model)"),AAe.forEach(t),XEo=i(H),h2=n(H,"LI",{});var yAe=s(h2);Xle=n(yAe,"STRONG",{});var gYr=s(Xle);zEo=r(gYr,"mobilebert"),gYr.forEach(t),QEo=r(yAe," \u2014 "),LN=n(yAe,"A",{href:!0});var hYr=s(LN);WEo=r(hYr,"MobileBertForMaskedLM"),hYr.forEach(t),HEo=r(yAe," (MobileBERT model)"),yAe.forEach(t),UEo=i(H),p2=n(H,"LI",{});var LAe=s(p2);zle=n(LAe,"STRONG",{});var pYr=s(zle);JEo=r(pYr,"mpnet"),pYr.forEach(t),YEo=r(LAe," \u2014 "),xN=n(LAe,"A",{href:!0});var uYr=s(xN);KEo=r(uYr,"MPNetForMaskedLM"),uYr.forEach(t),ZEo=r(LAe," (MPNet model)"),LAe.forEach(t),e5o=i(H),u2=n(H,"LI",{});var xAe=s(u2);Qle=n(xAe,"STRONG",{});var _Yr=s(Qle);o5o=r(_Yr,"nystromformer"),_Yr.forEach(t),r5o=r(xAe," \u2014 "),$N=n(xAe,"A",{href:!0});var bYr=s($N);t5o=r(bYr,"NystromformerForMaskedLM"),bYr.forEach(t),a5o=r(xAe," (Nystromformer model)"),xAe.forEach(t),n5o=i(H),_2=n(H,"LI",{});var $Ae=s(_2);Wle=n($Ae,"STRONG",{});var vYr=s(Wle);s5o=r(vYr,"perceiver"),vYr.forEach(t),l5o=r($Ae," \u2014 "),kN=n($Ae,"A",{href:!0});var FYr=s(kN);i5o=r(FYr,"PerceiverForMaskedLM"),FYr.forEach(t),d5o=r($Ae," (Perceiver model)"),$Ae.forEach(t),c5o=i(H),b2=n(H,"LI",{});var kAe=s(b2);Hle=n(kAe,"STRONG",{});var TYr=s(Hle);f5o=r(TYr,"qdqbert"),TYr.forEach(t),m5o=r(kAe," \u2014 "),SN=n(kAe,"A",{href:!0});var MYr=s(SN);g5o=r(MYr,"QDQBertForMaskedLM"),MYr.forEach(t),h5o=r(kAe," (QDQBert model)"),kAe.forEach(t),p5o=i(H),v2=n(H,"LI",{});var SAe=s(v2);Ule=n(SAe,"STRONG",{});var EYr=s(Ule);u5o=r(EYr,"reformer"),EYr.forEach(t),_5o=r(SAe," \u2014 "),RN=n(SAe,"A",{href:!0});var CYr=s(RN);b5o=r(CYr,"ReformerForMaskedLM"),CYr.forEach(t),v5o=r(SAe," (Reformer model)"),SAe.forEach(t),F5o=i(H),F2=n(H,"LI",{});var RAe=s(F2);Jle=n(RAe,"STRONG",{});var wYr=s(Jle);T5o=r(wYr,"rembert"),wYr.forEach(t),M5o=r(RAe," \u2014 "),BN=n(RAe,"A",{href:!0});var AYr=s(BN);E5o=r(AYr,"RemBertForMaskedLM"),AYr.forEach(t),C5o=r(RAe," (RemBERT model)"),RAe.forEach(t),w5o=i(H),T2=n(H,"LI",{});var BAe=s(T2);Yle=n(BAe,"STRONG",{});var yYr=s(Yle);A5o=r(yYr,"roberta"),yYr.forEach(t),y5o=r(BAe," \u2014 "),PN=n(BAe,"A",{href:!0});var LYr=s(PN);L5o=r(LYr,"RobertaForMaskedLM"),LYr.forEach(t),x5o=r(BAe," (RoBERTa model)"),BAe.forEach(t),$5o=i(H),M2=n(H,"LI",{});var PAe=s(M2);Kle=n(PAe,"STRONG",{});var xYr=s(Kle);k5o=r(xYr,"roformer"),xYr.forEach(t),S5o=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var $Yr=s(IN);R5o=r($Yr,"RoFormerForMaskedLM"),$Yr.forEach(t),B5o=r(PAe," (RoFormer model)"),PAe.forEach(t),P5o=i(H),E2=n(H,"LI",{});var IAe=s(E2);Zle=n(IAe,"STRONG",{});var kYr=s(Zle);I5o=r(kYr,"squeezebert"),kYr.forEach(t),q5o=r(IAe," \u2014 "),qN=n(IAe,"A",{href:!0});var SYr=s(qN);N5o=r(SYr,"SqueezeBertForMaskedLM"),SYr.forEach(t),j5o=r(IAe," (SqueezeBERT model)"),IAe.forEach(t),D5o=i(H),C2=n(H,"LI",{});var qAe=s(C2);eie=n(qAe,"STRONG",{});var RYr=s(eie);G5o=r(RYr,"tapas"),RYr.forEach(t),O5o=r(qAe," \u2014 "),NN=n(qAe,"A",{href:!0});var BYr=s(NN);V5o=r(BYr,"TapasForMaskedLM"),BYr.forEach(t),X5o=r(qAe," (TAPAS model)"),qAe.forEach(t),z5o=i(H),w2=n(H,"LI",{});var NAe=s(w2);oie=n(NAe,"STRONG",{});var PYr=s(oie);Q5o=r(PYr,"wav2vec2"),PYr.forEach(t),W5o=r(NAe," \u2014 "),rie=n(NAe,"CODE",{});var IYr=s(rie);H5o=r(IYr,"Wav2Vec2ForMaskedLM"),IYr.forEach(t),U5o=r(NAe," (Wav2Vec2 model)"),NAe.forEach(t),J5o=i(H),A2=n(H,"LI",{});var jAe=s(A2);tie=n(jAe,"STRONG",{});var qYr=s(tie);Y5o=r(qYr,"xlm"),qYr.forEach(t),K5o=r(jAe," \u2014 "),jN=n(jAe,"A",{href:!0});var NYr=s(jN);Z5o=r(NYr,"XLMWithLMHeadModel"),NYr.forEach(t),eCo=r(jAe," (XLM model)"),jAe.forEach(t),oCo=i(H),y2=n(H,"LI",{});var DAe=s(y2);aie=n(DAe,"STRONG",{});var jYr=s(aie);rCo=r(jYr,"xlm-roberta"),jYr.forEach(t),tCo=r(DAe," \u2014 "),DN=n(DAe,"A",{href:!0});var DYr=s(DN);aCo=r(DYr,"XLMRobertaForMaskedLM"),DYr.forEach(t),nCo=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),sCo=i(H),L2=n(H,"LI",{});var GAe=s(L2);nie=n(GAe,"STRONG",{});var GYr=s(nie);lCo=r(GYr,"xlm-roberta-xl"),GYr.forEach(t),iCo=r(GAe," \u2014 "),GN=n(GAe,"A",{href:!0});var OYr=s(GN);dCo=r(OYr,"XLMRobertaXLForMaskedLM"),OYr.forEach(t),cCo=r(GAe," (XLM-RoBERTa-XL model)"),GAe.forEach(t),fCo=i(H),x2=n(H,"LI",{});var OAe=s(x2);sie=n(OAe,"STRONG",{});var VYr=s(sie);mCo=r(VYr,"yoso"),VYr.forEach(t),gCo=r(OAe," \u2014 "),ON=n(OAe,"A",{href:!0});var XYr=s(ON);hCo=r(XYr,"YosoForMaskedLM"),XYr.forEach(t),pCo=r(OAe," (YOSO model)"),OAe.forEach(t),H.forEach(t),uCo=i(Kt),$2=n(Kt,"P",{});var VAe=s($2);_Co=r(VAe,"The model is set in evaluation mode by default using "),lie=n(VAe,"CODE",{});var zYr=s(lie);bCo=r(zYr,"model.eval()"),zYr.forEach(t),vCo=r(VAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iie=n(VAe,"CODE",{});var QYr=s(iie);FCo=r(QYr,"model.train()"),QYr.forEach(t),VAe.forEach(t),TCo=i(Kt),T(k2.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),sBe=i(f),yi=n(f,"H2",{class:!0});var iIe=s(yi);S2=n(iIe,"A",{id:!0,class:!0,href:!0});var WYr=s(S2);die=n(WYr,"SPAN",{});var HYr=s(die);T(iy.$$.fragment,HYr),HYr.forEach(t),WYr.forEach(t),MCo=i(iIe),cie=n(iIe,"SPAN",{});var UYr=s(cie);ECo=r(UYr,"AutoModelForSeq2SeqLM"),UYr.forEach(t),iIe.forEach(t),lBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(dy.$$.fragment,Ns),CCo=i(Ns),Li=n(Ns,"P",{});var aY=s(Li);wCo=r(aY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VN=n(aY,"A",{href:!0});var JYr=s(VN);ACo=r(JYr,"from_pretrained()"),JYr.forEach(t),yCo=r(aY," class method or the "),XN=n(aY,"A",{href:!0});var YYr=s(XN);LCo=r(YYr,"from_config()"),YYr.forEach(t),xCo=r(aY,` class
method.`),aY.forEach(t),$Co=i(Ns),cy=n(Ns,"P",{});var dIe=s(cy);kCo=r(dIe,"This class cannot be instantiated directly using "),fie=n(dIe,"CODE",{});var KYr=s(fie);SCo=r(KYr,"__init__()"),KYr.forEach(t),RCo=r(dIe," (throws an error)."),dIe.forEach(t),BCo=i(Ns),rt=n(Ns,"DIV",{class:!0});var x3=s(rt);T(fy.$$.fragment,x3),PCo=i(x3),mie=n(x3,"P",{});var ZYr=s(mie);ICo=r(ZYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZYr.forEach(t),qCo=i(x3),xi=n(x3,"P",{});var nY=s(xi);NCo=r(nY,`Note:
Loading a model from its configuration file does `),gie=n(nY,"STRONG",{});var eKr=s(gie);jCo=r(eKr,"not"),eKr.forEach(t),DCo=r(nY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zN=n(nY,"A",{href:!0});var oKr=s(zN);GCo=r(oKr,"from_pretrained()"),oKr.forEach(t),OCo=r(nY," to load the model weights."),nY.forEach(t),VCo=i(x3),T(R2.$$.fragment,x3),x3.forEach(t),XCo=i(Ns),Ye=n(Ns,"DIV",{class:!0});var Zt=s(Ye);T(my.$$.fragment,Zt),zCo=i(Zt),hie=n(Zt,"P",{});var rKr=s(hie);QCo=r(rKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rKr.forEach(t),WCo=i(Zt),Aa=n(Zt,"P",{});var $3=s(Aa);HCo=r($3,"The model class to instantiate is selected based on the "),pie=n($3,"CODE",{});var tKr=s(pie);UCo=r(tKr,"model_type"),tKr.forEach(t),JCo=r($3,` property of the config object (either
passed as an argument or loaded from `),uie=n($3,"CODE",{});var aKr=s(uie);YCo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),KCo=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ie=n($3,"CODE",{});var nKr=s(_ie);ZCo=r(nKr,"pretrained_model_name_or_path"),nKr.forEach(t),e3o=r($3,":"),$3.forEach(t),o3o=i(Zt),he=n(Zt,"UL",{});var ue=s(he);B2=n(ue,"LI",{});var XAe=s(B2);bie=n(XAe,"STRONG",{});var sKr=s(bie);r3o=r(sKr,"bart"),sKr.forEach(t),t3o=r(XAe," \u2014 "),QN=n(XAe,"A",{href:!0});var lKr=s(QN);a3o=r(lKr,"BartForConditionalGeneration"),lKr.forEach(t),n3o=r(XAe," (BART model)"),XAe.forEach(t),s3o=i(ue),P2=n(ue,"LI",{});var zAe=s(P2);vie=n(zAe,"STRONG",{});var iKr=s(vie);l3o=r(iKr,"bigbird_pegasus"),iKr.forEach(t),i3o=r(zAe," \u2014 "),WN=n(zAe,"A",{href:!0});var dKr=s(WN);d3o=r(dKr,"BigBirdPegasusForConditionalGeneration"),dKr.forEach(t),c3o=r(zAe," (BigBirdPegasus model)"),zAe.forEach(t),f3o=i(ue),I2=n(ue,"LI",{});var QAe=s(I2);Fie=n(QAe,"STRONG",{});var cKr=s(Fie);m3o=r(cKr,"blenderbot"),cKr.forEach(t),g3o=r(QAe," \u2014 "),HN=n(QAe,"A",{href:!0});var fKr=s(HN);h3o=r(fKr,"BlenderbotForConditionalGeneration"),fKr.forEach(t),p3o=r(QAe," (Blenderbot model)"),QAe.forEach(t),u3o=i(ue),q2=n(ue,"LI",{});var WAe=s(q2);Tie=n(WAe,"STRONG",{});var mKr=s(Tie);_3o=r(mKr,"blenderbot-small"),mKr.forEach(t),b3o=r(WAe," \u2014 "),UN=n(WAe,"A",{href:!0});var gKr=s(UN);v3o=r(gKr,"BlenderbotSmallForConditionalGeneration"),gKr.forEach(t),F3o=r(WAe," (BlenderbotSmall model)"),WAe.forEach(t),T3o=i(ue),N2=n(ue,"LI",{});var HAe=s(N2);Mie=n(HAe,"STRONG",{});var hKr=s(Mie);M3o=r(hKr,"encoder-decoder"),hKr.forEach(t),E3o=r(HAe," \u2014 "),JN=n(HAe,"A",{href:!0});var pKr=s(JN);C3o=r(pKr,"EncoderDecoderModel"),pKr.forEach(t),w3o=r(HAe," (Encoder decoder model)"),HAe.forEach(t),A3o=i(ue),j2=n(ue,"LI",{});var UAe=s(j2);Eie=n(UAe,"STRONG",{});var uKr=s(Eie);y3o=r(uKr,"fsmt"),uKr.forEach(t),L3o=r(UAe," \u2014 "),YN=n(UAe,"A",{href:!0});var _Kr=s(YN);x3o=r(_Kr,"FSMTForConditionalGeneration"),_Kr.forEach(t),$3o=r(UAe," (FairSeq Machine-Translation model)"),UAe.forEach(t),k3o=i(ue),D2=n(ue,"LI",{});var JAe=s(D2);Cie=n(JAe,"STRONG",{});var bKr=s(Cie);S3o=r(bKr,"led"),bKr.forEach(t),R3o=r(JAe," \u2014 "),KN=n(JAe,"A",{href:!0});var vKr=s(KN);B3o=r(vKr,"LEDForConditionalGeneration"),vKr.forEach(t),P3o=r(JAe," (LED model)"),JAe.forEach(t),I3o=i(ue),G2=n(ue,"LI",{});var YAe=s(G2);wie=n(YAe,"STRONG",{});var FKr=s(wie);q3o=r(FKr,"m2m_100"),FKr.forEach(t),N3o=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var TKr=s(ZN);j3o=r(TKr,"M2M100ForConditionalGeneration"),TKr.forEach(t),D3o=r(YAe," (M2M100 model)"),YAe.forEach(t),G3o=i(ue),O2=n(ue,"LI",{});var KAe=s(O2);Aie=n(KAe,"STRONG",{});var MKr=s(Aie);O3o=r(MKr,"marian"),MKr.forEach(t),V3o=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var EKr=s(ej);X3o=r(EKr,"MarianMTModel"),EKr.forEach(t),z3o=r(KAe," (Marian model)"),KAe.forEach(t),Q3o=i(ue),V2=n(ue,"LI",{});var ZAe=s(V2);yie=n(ZAe,"STRONG",{});var CKr=s(yie);W3o=r(CKr,"mbart"),CKr.forEach(t),H3o=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var wKr=s(oj);U3o=r(wKr,"MBartForConditionalGeneration"),wKr.forEach(t),J3o=r(ZAe," (mBART model)"),ZAe.forEach(t),Y3o=i(ue),X2=n(ue,"LI",{});var eye=s(X2);Lie=n(eye,"STRONG",{});var AKr=s(Lie);K3o=r(AKr,"mt5"),AKr.forEach(t),Z3o=r(eye," \u2014 "),rj=n(eye,"A",{href:!0});var yKr=s(rj);ewo=r(yKr,"MT5ForConditionalGeneration"),yKr.forEach(t),owo=r(eye," (mT5 model)"),eye.forEach(t),rwo=i(ue),z2=n(ue,"LI",{});var oye=s(z2);xie=n(oye,"STRONG",{});var LKr=s(xie);two=r(LKr,"pegasus"),LKr.forEach(t),awo=r(oye," \u2014 "),tj=n(oye,"A",{href:!0});var xKr=s(tj);nwo=r(xKr,"PegasusForConditionalGeneration"),xKr.forEach(t),swo=r(oye," (Pegasus model)"),oye.forEach(t),lwo=i(ue),Q2=n(ue,"LI",{});var rye=s(Q2);$ie=n(rye,"STRONG",{});var $Kr=s($ie);iwo=r($Kr,"plbart"),$Kr.forEach(t),dwo=r(rye," \u2014 "),aj=n(rye,"A",{href:!0});var kKr=s(aj);cwo=r(kKr,"PLBartForConditionalGeneration"),kKr.forEach(t),fwo=r(rye," (PLBart model)"),rye.forEach(t),mwo=i(ue),W2=n(ue,"LI",{});var tye=s(W2);kie=n(tye,"STRONG",{});var SKr=s(kie);gwo=r(SKr,"prophetnet"),SKr.forEach(t),hwo=r(tye," \u2014 "),nj=n(tye,"A",{href:!0});var RKr=s(nj);pwo=r(RKr,"ProphetNetForConditionalGeneration"),RKr.forEach(t),uwo=r(tye," (ProphetNet model)"),tye.forEach(t),_wo=i(ue),H2=n(ue,"LI",{});var aye=s(H2);Sie=n(aye,"STRONG",{});var BKr=s(Sie);bwo=r(BKr,"t5"),BKr.forEach(t),vwo=r(aye," \u2014 "),sj=n(aye,"A",{href:!0});var PKr=s(sj);Fwo=r(PKr,"T5ForConditionalGeneration"),PKr.forEach(t),Two=r(aye," (T5 model)"),aye.forEach(t),Mwo=i(ue),U2=n(ue,"LI",{});var nye=s(U2);Rie=n(nye,"STRONG",{});var IKr=s(Rie);Ewo=r(IKr,"tapex"),IKr.forEach(t),Cwo=r(nye," \u2014 "),lj=n(nye,"A",{href:!0});var qKr=s(lj);wwo=r(qKr,"BartForConditionalGeneration"),qKr.forEach(t),Awo=r(nye," (TAPEX model)"),nye.forEach(t),ywo=i(ue),J2=n(ue,"LI",{});var sye=s(J2);Bie=n(sye,"STRONG",{});var NKr=s(Bie);Lwo=r(NKr,"xlm-prophetnet"),NKr.forEach(t),xwo=r(sye," \u2014 "),ij=n(sye,"A",{href:!0});var jKr=s(ij);$wo=r(jKr,"XLMProphetNetForConditionalGeneration"),jKr.forEach(t),kwo=r(sye," (XLMProphetNet model)"),sye.forEach(t),ue.forEach(t),Swo=i(Zt),Y2=n(Zt,"P",{});var lye=s(Y2);Rwo=r(lye,"The model is set in evaluation mode by default using "),Pie=n(lye,"CODE",{});var DKr=s(Pie);Bwo=r(DKr,"model.eval()"),DKr.forEach(t),Pwo=r(lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Iie=n(lye,"CODE",{});var GKr=s(Iie);Iwo=r(GKr,"model.train()"),GKr.forEach(t),lye.forEach(t),qwo=i(Zt),T(K2.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),iBe=i(f),$i=n(f,"H2",{class:!0});var cIe=s($i);Z2=n(cIe,"A",{id:!0,class:!0,href:!0});var OKr=s(Z2);qie=n(OKr,"SPAN",{});var VKr=s(qie);T(gy.$$.fragment,VKr),VKr.forEach(t),OKr.forEach(t),Nwo=i(cIe),Nie=n(cIe,"SPAN",{});var XKr=s(Nie);jwo=r(XKr,"AutoModelForSequenceClassification"),XKr.forEach(t),cIe.forEach(t),dBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(hy.$$.fragment,js),Dwo=i(js),ki=n(js,"P",{});var sY=s(ki);Gwo=r(sY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),dj=n(sY,"A",{href:!0});var zKr=s(dj);Owo=r(zKr,"from_pretrained()"),zKr.forEach(t),Vwo=r(sY," class method or the "),cj=n(sY,"A",{href:!0});var QKr=s(cj);Xwo=r(QKr,"from_config()"),QKr.forEach(t),zwo=r(sY,` class
method.`),sY.forEach(t),Qwo=i(js),py=n(js,"P",{});var fIe=s(py);Wwo=r(fIe,"This class cannot be instantiated directly using "),jie=n(fIe,"CODE",{});var WKr=s(jie);Hwo=r(WKr,"__init__()"),WKr.forEach(t),Uwo=r(fIe," (throws an error)."),fIe.forEach(t),Jwo=i(js),tt=n(js,"DIV",{class:!0});var k3=s(tt);T(uy.$$.fragment,k3),Ywo=i(k3),Die=n(k3,"P",{});var HKr=s(Die);Kwo=r(HKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),HKr.forEach(t),Zwo=i(k3),Si=n(k3,"P",{});var lY=s(Si);eAo=r(lY,`Note:
Loading a model from its configuration file does `),Gie=n(lY,"STRONG",{});var UKr=s(Gie);oAo=r(UKr,"not"),UKr.forEach(t),rAo=r(lY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fj=n(lY,"A",{href:!0});var JKr=s(fj);tAo=r(JKr,"from_pretrained()"),JKr.forEach(t),aAo=r(lY," to load the model weights."),lY.forEach(t),nAo=i(k3),T(e1.$$.fragment,k3),k3.forEach(t),sAo=i(js),Ke=n(js,"DIV",{class:!0});var ea=s(Ke);T(_y.$$.fragment,ea),lAo=i(ea),Oie=n(ea,"P",{});var YKr=s(Oie);iAo=r(YKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),YKr.forEach(t),dAo=i(ea),ya=n(ea,"P",{});var S3=s(ya);cAo=r(S3,"The model class to instantiate is selected based on the "),Vie=n(S3,"CODE",{});var KKr=s(Vie);fAo=r(KKr,"model_type"),KKr.forEach(t),mAo=r(S3,` property of the config object (either
passed as an argument or loaded from `),Xie=n(S3,"CODE",{});var ZKr=s(Xie);gAo=r(ZKr,"pretrained_model_name_or_path"),ZKr.forEach(t),hAo=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zie=n(S3,"CODE",{});var eZr=s(zie);pAo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),uAo=r(S3,":"),S3.forEach(t),_Ao=i(ea),q=n(ea,"UL",{});var N=s(q);o1=n(N,"LI",{});var iye=s(o1);Qie=n(iye,"STRONG",{});var oZr=s(Qie);bAo=r(oZr,"albert"),oZr.forEach(t),vAo=r(iye," \u2014 "),mj=n(iye,"A",{href:!0});var rZr=s(mj);FAo=r(rZr,"AlbertForSequenceClassification"),rZr.forEach(t),TAo=r(iye," (ALBERT model)"),iye.forEach(t),MAo=i(N),r1=n(N,"LI",{});var dye=s(r1);Wie=n(dye,"STRONG",{});var tZr=s(Wie);EAo=r(tZr,"bart"),tZr.forEach(t),CAo=r(dye," \u2014 "),gj=n(dye,"A",{href:!0});var aZr=s(gj);wAo=r(aZr,"BartForSequenceClassification"),aZr.forEach(t),AAo=r(dye," (BART model)"),dye.forEach(t),yAo=i(N),t1=n(N,"LI",{});var cye=s(t1);Hie=n(cye,"STRONG",{});var nZr=s(Hie);LAo=r(nZr,"bert"),nZr.forEach(t),xAo=r(cye," \u2014 "),hj=n(cye,"A",{href:!0});var sZr=s(hj);$Ao=r(sZr,"BertForSequenceClassification"),sZr.forEach(t),kAo=r(cye," (BERT model)"),cye.forEach(t),SAo=i(N),a1=n(N,"LI",{});var fye=s(a1);Uie=n(fye,"STRONG",{});var lZr=s(Uie);RAo=r(lZr,"big_bird"),lZr.forEach(t),BAo=r(fye," \u2014 "),pj=n(fye,"A",{href:!0});var iZr=s(pj);PAo=r(iZr,"BigBirdForSequenceClassification"),iZr.forEach(t),IAo=r(fye," (BigBird model)"),fye.forEach(t),qAo=i(N),n1=n(N,"LI",{});var mye=s(n1);Jie=n(mye,"STRONG",{});var dZr=s(Jie);NAo=r(dZr,"bigbird_pegasus"),dZr.forEach(t),jAo=r(mye," \u2014 "),uj=n(mye,"A",{href:!0});var cZr=s(uj);DAo=r(cZr,"BigBirdPegasusForSequenceClassification"),cZr.forEach(t),GAo=r(mye," (BigBirdPegasus model)"),mye.forEach(t),OAo=i(N),s1=n(N,"LI",{});var gye=s(s1);Yie=n(gye,"STRONG",{});var fZr=s(Yie);VAo=r(fZr,"camembert"),fZr.forEach(t),XAo=r(gye," \u2014 "),_j=n(gye,"A",{href:!0});var mZr=s(_j);zAo=r(mZr,"CamembertForSequenceClassification"),mZr.forEach(t),QAo=r(gye," (CamemBERT model)"),gye.forEach(t),WAo=i(N),l1=n(N,"LI",{});var hye=s(l1);Kie=n(hye,"STRONG",{});var gZr=s(Kie);HAo=r(gZr,"canine"),gZr.forEach(t),UAo=r(hye," \u2014 "),bj=n(hye,"A",{href:!0});var hZr=s(bj);JAo=r(hZr,"CanineForSequenceClassification"),hZr.forEach(t),YAo=r(hye," (Canine model)"),hye.forEach(t),KAo=i(N),i1=n(N,"LI",{});var pye=s(i1);Zie=n(pye,"STRONG",{});var pZr=s(Zie);ZAo=r(pZr,"convbert"),pZr.forEach(t),eyo=r(pye," \u2014 "),vj=n(pye,"A",{href:!0});var uZr=s(vj);oyo=r(uZr,"ConvBertForSequenceClassification"),uZr.forEach(t),ryo=r(pye," (ConvBERT model)"),pye.forEach(t),tyo=i(N),d1=n(N,"LI",{});var uye=s(d1);ede=n(uye,"STRONG",{});var _Zr=s(ede);ayo=r(_Zr,"ctrl"),_Zr.forEach(t),nyo=r(uye," \u2014 "),Fj=n(uye,"A",{href:!0});var bZr=s(Fj);syo=r(bZr,"CTRLForSequenceClassification"),bZr.forEach(t),lyo=r(uye," (CTRL model)"),uye.forEach(t),iyo=i(N),c1=n(N,"LI",{});var _ye=s(c1);ode=n(_ye,"STRONG",{});var vZr=s(ode);dyo=r(vZr,"data2vec-text"),vZr.forEach(t),cyo=r(_ye," \u2014 "),Tj=n(_ye,"A",{href:!0});var FZr=s(Tj);fyo=r(FZr,"Data2VecTextForSequenceClassification"),FZr.forEach(t),myo=r(_ye," (Data2VecText model)"),_ye.forEach(t),gyo=i(N),f1=n(N,"LI",{});var bye=s(f1);rde=n(bye,"STRONG",{});var TZr=s(rde);hyo=r(TZr,"deberta"),TZr.forEach(t),pyo=r(bye," \u2014 "),Mj=n(bye,"A",{href:!0});var MZr=s(Mj);uyo=r(MZr,"DebertaForSequenceClassification"),MZr.forEach(t),_yo=r(bye," (DeBERTa model)"),bye.forEach(t),byo=i(N),m1=n(N,"LI",{});var vye=s(m1);tde=n(vye,"STRONG",{});var EZr=s(tde);vyo=r(EZr,"deberta-v2"),EZr.forEach(t),Fyo=r(vye," \u2014 "),Ej=n(vye,"A",{href:!0});var CZr=s(Ej);Tyo=r(CZr,"DebertaV2ForSequenceClassification"),CZr.forEach(t),Myo=r(vye," (DeBERTa-v2 model)"),vye.forEach(t),Eyo=i(N),g1=n(N,"LI",{});var Fye=s(g1);ade=n(Fye,"STRONG",{});var wZr=s(ade);Cyo=r(wZr,"distilbert"),wZr.forEach(t),wyo=r(Fye," \u2014 "),Cj=n(Fye,"A",{href:!0});var AZr=s(Cj);Ayo=r(AZr,"DistilBertForSequenceClassification"),AZr.forEach(t),yyo=r(Fye," (DistilBERT model)"),Fye.forEach(t),Lyo=i(N),h1=n(N,"LI",{});var Tye=s(h1);nde=n(Tye,"STRONG",{});var yZr=s(nde);xyo=r(yZr,"electra"),yZr.forEach(t),$yo=r(Tye," \u2014 "),wj=n(Tye,"A",{href:!0});var LZr=s(wj);kyo=r(LZr,"ElectraForSequenceClassification"),LZr.forEach(t),Syo=r(Tye," (ELECTRA model)"),Tye.forEach(t),Ryo=i(N),p1=n(N,"LI",{});var Mye=s(p1);sde=n(Mye,"STRONG",{});var xZr=s(sde);Byo=r(xZr,"flaubert"),xZr.forEach(t),Pyo=r(Mye," \u2014 "),Aj=n(Mye,"A",{href:!0});var $Zr=s(Aj);Iyo=r($Zr,"FlaubertForSequenceClassification"),$Zr.forEach(t),qyo=r(Mye," (FlauBERT model)"),Mye.forEach(t),Nyo=i(N),u1=n(N,"LI",{});var Eye=s(u1);lde=n(Eye,"STRONG",{});var kZr=s(lde);jyo=r(kZr,"fnet"),kZr.forEach(t),Dyo=r(Eye," \u2014 "),yj=n(Eye,"A",{href:!0});var SZr=s(yj);Gyo=r(SZr,"FNetForSequenceClassification"),SZr.forEach(t),Oyo=r(Eye," (FNet model)"),Eye.forEach(t),Vyo=i(N),_1=n(N,"LI",{});var Cye=s(_1);ide=n(Cye,"STRONG",{});var RZr=s(ide);Xyo=r(RZr,"funnel"),RZr.forEach(t),zyo=r(Cye," \u2014 "),Lj=n(Cye,"A",{href:!0});var BZr=s(Lj);Qyo=r(BZr,"FunnelForSequenceClassification"),BZr.forEach(t),Wyo=r(Cye," (Funnel Transformer model)"),Cye.forEach(t),Hyo=i(N),b1=n(N,"LI",{});var wye=s(b1);dde=n(wye,"STRONG",{});var PZr=s(dde);Uyo=r(PZr,"gpt2"),PZr.forEach(t),Jyo=r(wye," \u2014 "),xj=n(wye,"A",{href:!0});var IZr=s(xj);Yyo=r(IZr,"GPT2ForSequenceClassification"),IZr.forEach(t),Kyo=r(wye," (OpenAI GPT-2 model)"),wye.forEach(t),Zyo=i(N),v1=n(N,"LI",{});var Aye=s(v1);cde=n(Aye,"STRONG",{});var qZr=s(cde);eLo=r(qZr,"gpt_neo"),qZr.forEach(t),oLo=r(Aye," \u2014 "),$j=n(Aye,"A",{href:!0});var NZr=s($j);rLo=r(NZr,"GPTNeoForSequenceClassification"),NZr.forEach(t),tLo=r(Aye," (GPT Neo model)"),Aye.forEach(t),aLo=i(N),F1=n(N,"LI",{});var yye=s(F1);fde=n(yye,"STRONG",{});var jZr=s(fde);nLo=r(jZr,"gptj"),jZr.forEach(t),sLo=r(yye," \u2014 "),kj=n(yye,"A",{href:!0});var DZr=s(kj);lLo=r(DZr,"GPTJForSequenceClassification"),DZr.forEach(t),iLo=r(yye," (GPT-J model)"),yye.forEach(t),dLo=i(N),T1=n(N,"LI",{});var Lye=s(T1);mde=n(Lye,"STRONG",{});var GZr=s(mde);cLo=r(GZr,"ibert"),GZr.forEach(t),fLo=r(Lye," \u2014 "),Sj=n(Lye,"A",{href:!0});var OZr=s(Sj);mLo=r(OZr,"IBertForSequenceClassification"),OZr.forEach(t),gLo=r(Lye," (I-BERT model)"),Lye.forEach(t),hLo=i(N),M1=n(N,"LI",{});var xye=s(M1);gde=n(xye,"STRONG",{});var VZr=s(gde);pLo=r(VZr,"layoutlm"),VZr.forEach(t),uLo=r(xye," \u2014 "),Rj=n(xye,"A",{href:!0});var XZr=s(Rj);_Lo=r(XZr,"LayoutLMForSequenceClassification"),XZr.forEach(t),bLo=r(xye," (LayoutLM model)"),xye.forEach(t),vLo=i(N),E1=n(N,"LI",{});var $ye=s(E1);hde=n($ye,"STRONG",{});var zZr=s(hde);FLo=r(zZr,"layoutlmv2"),zZr.forEach(t),TLo=r($ye," \u2014 "),Bj=n($ye,"A",{href:!0});var QZr=s(Bj);MLo=r(QZr,"LayoutLMv2ForSequenceClassification"),QZr.forEach(t),ELo=r($ye," (LayoutLMv2 model)"),$ye.forEach(t),CLo=i(N),C1=n(N,"LI",{});var kye=s(C1);pde=n(kye,"STRONG",{});var WZr=s(pde);wLo=r(WZr,"led"),WZr.forEach(t),ALo=r(kye," \u2014 "),Pj=n(kye,"A",{href:!0});var HZr=s(Pj);yLo=r(HZr,"LEDForSequenceClassification"),HZr.forEach(t),LLo=r(kye," (LED model)"),kye.forEach(t),xLo=i(N),w1=n(N,"LI",{});var Sye=s(w1);ude=n(Sye,"STRONG",{});var UZr=s(ude);$Lo=r(UZr,"longformer"),UZr.forEach(t),kLo=r(Sye," \u2014 "),Ij=n(Sye,"A",{href:!0});var JZr=s(Ij);SLo=r(JZr,"LongformerForSequenceClassification"),JZr.forEach(t),RLo=r(Sye," (Longformer model)"),Sye.forEach(t),BLo=i(N),A1=n(N,"LI",{});var Rye=s(A1);_de=n(Rye,"STRONG",{});var YZr=s(_de);PLo=r(YZr,"mbart"),YZr.forEach(t),ILo=r(Rye," \u2014 "),qj=n(Rye,"A",{href:!0});var KZr=s(qj);qLo=r(KZr,"MBartForSequenceClassification"),KZr.forEach(t),NLo=r(Rye," (mBART model)"),Rye.forEach(t),jLo=i(N),y1=n(N,"LI",{});var Bye=s(y1);bde=n(Bye,"STRONG",{});var ZZr=s(bde);DLo=r(ZZr,"megatron-bert"),ZZr.forEach(t),GLo=r(Bye," \u2014 "),Nj=n(Bye,"A",{href:!0});var eet=s(Nj);OLo=r(eet,"MegatronBertForSequenceClassification"),eet.forEach(t),VLo=r(Bye," (MegatronBert model)"),Bye.forEach(t),XLo=i(N),L1=n(N,"LI",{});var Pye=s(L1);vde=n(Pye,"STRONG",{});var oet=s(vde);zLo=r(oet,"mobilebert"),oet.forEach(t),QLo=r(Pye," \u2014 "),jj=n(Pye,"A",{href:!0});var ret=s(jj);WLo=r(ret,"MobileBertForSequenceClassification"),ret.forEach(t),HLo=r(Pye," (MobileBERT model)"),Pye.forEach(t),ULo=i(N),x1=n(N,"LI",{});var Iye=s(x1);Fde=n(Iye,"STRONG",{});var tet=s(Fde);JLo=r(tet,"mpnet"),tet.forEach(t),YLo=r(Iye," \u2014 "),Dj=n(Iye,"A",{href:!0});var aet=s(Dj);KLo=r(aet,"MPNetForSequenceClassification"),aet.forEach(t),ZLo=r(Iye," (MPNet model)"),Iye.forEach(t),e8o=i(N),$1=n(N,"LI",{});var qye=s($1);Tde=n(qye,"STRONG",{});var net=s(Tde);o8o=r(net,"nystromformer"),net.forEach(t),r8o=r(qye," \u2014 "),Gj=n(qye,"A",{href:!0});var set=s(Gj);t8o=r(set,"NystromformerForSequenceClassification"),set.forEach(t),a8o=r(qye," (Nystromformer model)"),qye.forEach(t),n8o=i(N),k1=n(N,"LI",{});var Nye=s(k1);Mde=n(Nye,"STRONG",{});var iet=s(Mde);s8o=r(iet,"openai-gpt"),iet.forEach(t),l8o=r(Nye," \u2014 "),Oj=n(Nye,"A",{href:!0});var det=s(Oj);i8o=r(det,"OpenAIGPTForSequenceClassification"),det.forEach(t),d8o=r(Nye," (OpenAI GPT model)"),Nye.forEach(t),c8o=i(N),S1=n(N,"LI",{});var jye=s(S1);Ede=n(jye,"STRONG",{});var cet=s(Ede);f8o=r(cet,"perceiver"),cet.forEach(t),m8o=r(jye," \u2014 "),Vj=n(jye,"A",{href:!0});var fet=s(Vj);g8o=r(fet,"PerceiverForSequenceClassification"),fet.forEach(t),h8o=r(jye," (Perceiver model)"),jye.forEach(t),p8o=i(N),R1=n(N,"LI",{});var Dye=s(R1);Cde=n(Dye,"STRONG",{});var met=s(Cde);u8o=r(met,"plbart"),met.forEach(t),_8o=r(Dye," \u2014 "),Xj=n(Dye,"A",{href:!0});var get=s(Xj);b8o=r(get,"PLBartForSequenceClassification"),get.forEach(t),v8o=r(Dye," (PLBart model)"),Dye.forEach(t),F8o=i(N),B1=n(N,"LI",{});var Gye=s(B1);wde=n(Gye,"STRONG",{});var het=s(wde);T8o=r(het,"qdqbert"),het.forEach(t),M8o=r(Gye," \u2014 "),zj=n(Gye,"A",{href:!0});var pet=s(zj);E8o=r(pet,"QDQBertForSequenceClassification"),pet.forEach(t),C8o=r(Gye," (QDQBert model)"),Gye.forEach(t),w8o=i(N),P1=n(N,"LI",{});var Oye=s(P1);Ade=n(Oye,"STRONG",{});var uet=s(Ade);A8o=r(uet,"reformer"),uet.forEach(t),y8o=r(Oye," \u2014 "),Qj=n(Oye,"A",{href:!0});var _et=s(Qj);L8o=r(_et,"ReformerForSequenceClassification"),_et.forEach(t),x8o=r(Oye," (Reformer model)"),Oye.forEach(t),$8o=i(N),I1=n(N,"LI",{});var Vye=s(I1);yde=n(Vye,"STRONG",{});var bet=s(yde);k8o=r(bet,"rembert"),bet.forEach(t),S8o=r(Vye," \u2014 "),Wj=n(Vye,"A",{href:!0});var vet=s(Wj);R8o=r(vet,"RemBertForSequenceClassification"),vet.forEach(t),B8o=r(Vye," (RemBERT model)"),Vye.forEach(t),P8o=i(N),q1=n(N,"LI",{});var Xye=s(q1);Lde=n(Xye,"STRONG",{});var Fet=s(Lde);I8o=r(Fet,"roberta"),Fet.forEach(t),q8o=r(Xye," \u2014 "),Hj=n(Xye,"A",{href:!0});var Tet=s(Hj);N8o=r(Tet,"RobertaForSequenceClassification"),Tet.forEach(t),j8o=r(Xye," (RoBERTa model)"),Xye.forEach(t),D8o=i(N),N1=n(N,"LI",{});var zye=s(N1);xde=n(zye,"STRONG",{});var Met=s(xde);G8o=r(Met,"roformer"),Met.forEach(t),O8o=r(zye," \u2014 "),Uj=n(zye,"A",{href:!0});var Eet=s(Uj);V8o=r(Eet,"RoFormerForSequenceClassification"),Eet.forEach(t),X8o=r(zye," (RoFormer model)"),zye.forEach(t),z8o=i(N),j1=n(N,"LI",{});var Qye=s(j1);$de=n(Qye,"STRONG",{});var Cet=s($de);Q8o=r(Cet,"squeezebert"),Cet.forEach(t),W8o=r(Qye," \u2014 "),Jj=n(Qye,"A",{href:!0});var wet=s(Jj);H8o=r(wet,"SqueezeBertForSequenceClassification"),wet.forEach(t),U8o=r(Qye," (SqueezeBERT model)"),Qye.forEach(t),J8o=i(N),D1=n(N,"LI",{});var Wye=s(D1);kde=n(Wye,"STRONG",{});var Aet=s(kde);Y8o=r(Aet,"tapas"),Aet.forEach(t),K8o=r(Wye," \u2014 "),Yj=n(Wye,"A",{href:!0});var yet=s(Yj);Z8o=r(yet,"TapasForSequenceClassification"),yet.forEach(t),e7o=r(Wye," (TAPAS model)"),Wye.forEach(t),o7o=i(N),G1=n(N,"LI",{});var Hye=s(G1);Sde=n(Hye,"STRONG",{});var Let=s(Sde);r7o=r(Let,"tapex"),Let.forEach(t),t7o=r(Hye," \u2014 "),Kj=n(Hye,"A",{href:!0});var xet=s(Kj);a7o=r(xet,"BartForSequenceClassification"),xet.forEach(t),n7o=r(Hye," (TAPEX model)"),Hye.forEach(t),s7o=i(N),O1=n(N,"LI",{});var Uye=s(O1);Rde=n(Uye,"STRONG",{});var $et=s(Rde);l7o=r($et,"transfo-xl"),$et.forEach(t),i7o=r(Uye," \u2014 "),Zj=n(Uye,"A",{href:!0});var ket=s(Zj);d7o=r(ket,"TransfoXLForSequenceClassification"),ket.forEach(t),c7o=r(Uye," (Transformer-XL model)"),Uye.forEach(t),f7o=i(N),V1=n(N,"LI",{});var Jye=s(V1);Bde=n(Jye,"STRONG",{});var Set=s(Bde);m7o=r(Set,"xlm"),Set.forEach(t),g7o=r(Jye," \u2014 "),eD=n(Jye,"A",{href:!0});var Ret=s(eD);h7o=r(Ret,"XLMForSequenceClassification"),Ret.forEach(t),p7o=r(Jye," (XLM model)"),Jye.forEach(t),u7o=i(N),X1=n(N,"LI",{});var Yye=s(X1);Pde=n(Yye,"STRONG",{});var Bet=s(Pde);_7o=r(Bet,"xlm-roberta"),Bet.forEach(t),b7o=r(Yye," \u2014 "),oD=n(Yye,"A",{href:!0});var Pet=s(oD);v7o=r(Pet,"XLMRobertaForSequenceClassification"),Pet.forEach(t),F7o=r(Yye," (XLM-RoBERTa model)"),Yye.forEach(t),T7o=i(N),z1=n(N,"LI",{});var Kye=s(z1);Ide=n(Kye,"STRONG",{});var Iet=s(Ide);M7o=r(Iet,"xlm-roberta-xl"),Iet.forEach(t),E7o=r(Kye," \u2014 "),rD=n(Kye,"A",{href:!0});var qet=s(rD);C7o=r(qet,"XLMRobertaXLForSequenceClassification"),qet.forEach(t),w7o=r(Kye," (XLM-RoBERTa-XL model)"),Kye.forEach(t),A7o=i(N),Q1=n(N,"LI",{});var Zye=s(Q1);qde=n(Zye,"STRONG",{});var Net=s(qde);y7o=r(Net,"xlnet"),Net.forEach(t),L7o=r(Zye," \u2014 "),tD=n(Zye,"A",{href:!0});var jet=s(tD);x7o=r(jet,"XLNetForSequenceClassification"),jet.forEach(t),$7o=r(Zye," (XLNet model)"),Zye.forEach(t),k7o=i(N),W1=n(N,"LI",{});var eLe=s(W1);Nde=n(eLe,"STRONG",{});var Det=s(Nde);S7o=r(Det,"yoso"),Det.forEach(t),R7o=r(eLe," \u2014 "),aD=n(eLe,"A",{href:!0});var Get=s(aD);B7o=r(Get,"YosoForSequenceClassification"),Get.forEach(t),P7o=r(eLe," (YOSO model)"),eLe.forEach(t),N.forEach(t),I7o=i(ea),H1=n(ea,"P",{});var oLe=s(H1);q7o=r(oLe,"The model is set in evaluation mode by default using "),jde=n(oLe,"CODE",{});var Oet=s(jde);N7o=r(Oet,"model.eval()"),Oet.forEach(t),j7o=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dde=n(oLe,"CODE",{});var Vet=s(Dde);D7o=r(Vet,"model.train()"),Vet.forEach(t),oLe.forEach(t),G7o=i(ea),T(U1.$$.fragment,ea),ea.forEach(t),js.forEach(t),cBe=i(f),Ri=n(f,"H2",{class:!0});var mIe=s(Ri);J1=n(mIe,"A",{id:!0,class:!0,href:!0});var Xet=s(J1);Gde=n(Xet,"SPAN",{});var zet=s(Gde);T(by.$$.fragment,zet),zet.forEach(t),Xet.forEach(t),O7o=i(mIe),Ode=n(mIe,"SPAN",{});var Qet=s(Ode);V7o=r(Qet,"AutoModelForMultipleChoice"),Qet.forEach(t),mIe.forEach(t),fBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(vy.$$.fragment,Ds),X7o=i(Ds),Bi=n(Ds,"P",{});var iY=s(Bi);z7o=r(iY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),nD=n(iY,"A",{href:!0});var Wet=s(nD);Q7o=r(Wet,"from_pretrained()"),Wet.forEach(t),W7o=r(iY," class method or the "),sD=n(iY,"A",{href:!0});var Het=s(sD);H7o=r(Het,"from_config()"),Het.forEach(t),U7o=r(iY,` class
method.`),iY.forEach(t),J7o=i(Ds),Fy=n(Ds,"P",{});var gIe=s(Fy);Y7o=r(gIe,"This class cannot be instantiated directly using "),Vde=n(gIe,"CODE",{});var Uet=s(Vde);K7o=r(Uet,"__init__()"),Uet.forEach(t),Z7o=r(gIe," (throws an error)."),gIe.forEach(t),exo=i(Ds),at=n(Ds,"DIV",{class:!0});var R3=s(at);T(Ty.$$.fragment,R3),oxo=i(R3),Xde=n(R3,"P",{});var Jet=s(Xde);rxo=r(Jet,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jet.forEach(t),txo=i(R3),Pi=n(R3,"P",{});var dY=s(Pi);axo=r(dY,`Note:
Loading a model from its configuration file does `),zde=n(dY,"STRONG",{});var Yet=s(zde);nxo=r(Yet,"not"),Yet.forEach(t),sxo=r(dY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(dY,"A",{href:!0});var Ket=s(lD);lxo=r(Ket,"from_pretrained()"),Ket.forEach(t),ixo=r(dY," to load the model weights."),dY.forEach(t),dxo=i(R3),T(Y1.$$.fragment,R3),R3.forEach(t),cxo=i(Ds),Ze=n(Ds,"DIV",{class:!0});var oa=s(Ze);T(My.$$.fragment,oa),fxo=i(oa),Qde=n(oa,"P",{});var Zet=s(Qde);mxo=r(Zet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zet.forEach(t),gxo=i(oa),La=n(oa,"P",{});var B3=s(La);hxo=r(B3,"The model class to instantiate is selected based on the "),Wde=n(B3,"CODE",{});var eot=s(Wde);pxo=r(eot,"model_type"),eot.forEach(t),uxo=r(B3,` property of the config object (either
passed as an argument or loaded from `),Hde=n(B3,"CODE",{});var oot=s(Hde);_xo=r(oot,"pretrained_model_name_or_path"),oot.forEach(t),bxo=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ude=n(B3,"CODE",{});var rot=s(Ude);vxo=r(rot,"pretrained_model_name_or_path"),rot.forEach(t),Fxo=r(B3,":"),B3.forEach(t),Txo=i(oa),Y=n(oa,"UL",{});var K=s(Y);K1=n(K,"LI",{});var rLe=s(K1);Jde=n(rLe,"STRONG",{});var tot=s(Jde);Mxo=r(tot,"albert"),tot.forEach(t),Exo=r(rLe," \u2014 "),iD=n(rLe,"A",{href:!0});var aot=s(iD);Cxo=r(aot,"AlbertForMultipleChoice"),aot.forEach(t),wxo=r(rLe," (ALBERT model)"),rLe.forEach(t),Axo=i(K),Z1=n(K,"LI",{});var tLe=s(Z1);Yde=n(tLe,"STRONG",{});var not=s(Yde);yxo=r(not,"bert"),not.forEach(t),Lxo=r(tLe," \u2014 "),dD=n(tLe,"A",{href:!0});var sot=s(dD);xxo=r(sot,"BertForMultipleChoice"),sot.forEach(t),$xo=r(tLe," (BERT model)"),tLe.forEach(t),kxo=i(K),eb=n(K,"LI",{});var aLe=s(eb);Kde=n(aLe,"STRONG",{});var lot=s(Kde);Sxo=r(lot,"big_bird"),lot.forEach(t),Rxo=r(aLe," \u2014 "),cD=n(aLe,"A",{href:!0});var iot=s(cD);Bxo=r(iot,"BigBirdForMultipleChoice"),iot.forEach(t),Pxo=r(aLe," (BigBird model)"),aLe.forEach(t),Ixo=i(K),ob=n(K,"LI",{});var nLe=s(ob);Zde=n(nLe,"STRONG",{});var dot=s(Zde);qxo=r(dot,"camembert"),dot.forEach(t),Nxo=r(nLe," \u2014 "),fD=n(nLe,"A",{href:!0});var cot=s(fD);jxo=r(cot,"CamembertForMultipleChoice"),cot.forEach(t),Dxo=r(nLe," (CamemBERT model)"),nLe.forEach(t),Gxo=i(K),rb=n(K,"LI",{});var sLe=s(rb);ece=n(sLe,"STRONG",{});var fot=s(ece);Oxo=r(fot,"canine"),fot.forEach(t),Vxo=r(sLe," \u2014 "),mD=n(sLe,"A",{href:!0});var mot=s(mD);Xxo=r(mot,"CanineForMultipleChoice"),mot.forEach(t),zxo=r(sLe," (Canine model)"),sLe.forEach(t),Qxo=i(K),tb=n(K,"LI",{});var lLe=s(tb);oce=n(lLe,"STRONG",{});var got=s(oce);Wxo=r(got,"convbert"),got.forEach(t),Hxo=r(lLe," \u2014 "),gD=n(lLe,"A",{href:!0});var hot=s(gD);Uxo=r(hot,"ConvBertForMultipleChoice"),hot.forEach(t),Jxo=r(lLe," (ConvBERT model)"),lLe.forEach(t),Yxo=i(K),ab=n(K,"LI",{});var iLe=s(ab);rce=n(iLe,"STRONG",{});var pot=s(rce);Kxo=r(pot,"data2vec-text"),pot.forEach(t),Zxo=r(iLe," \u2014 "),hD=n(iLe,"A",{href:!0});var uot=s(hD);e9o=r(uot,"Data2VecTextForMultipleChoice"),uot.forEach(t),o9o=r(iLe," (Data2VecText model)"),iLe.forEach(t),r9o=i(K),nb=n(K,"LI",{});var dLe=s(nb);tce=n(dLe,"STRONG",{});var _ot=s(tce);t9o=r(_ot,"distilbert"),_ot.forEach(t),a9o=r(dLe," \u2014 "),pD=n(dLe,"A",{href:!0});var bot=s(pD);n9o=r(bot,"DistilBertForMultipleChoice"),bot.forEach(t),s9o=r(dLe," (DistilBERT model)"),dLe.forEach(t),l9o=i(K),sb=n(K,"LI",{});var cLe=s(sb);ace=n(cLe,"STRONG",{});var vot=s(ace);i9o=r(vot,"electra"),vot.forEach(t),d9o=r(cLe," \u2014 "),uD=n(cLe,"A",{href:!0});var Fot=s(uD);c9o=r(Fot,"ElectraForMultipleChoice"),Fot.forEach(t),f9o=r(cLe," (ELECTRA model)"),cLe.forEach(t),m9o=i(K),lb=n(K,"LI",{});var fLe=s(lb);nce=n(fLe,"STRONG",{});var Tot=s(nce);g9o=r(Tot,"flaubert"),Tot.forEach(t),h9o=r(fLe," \u2014 "),_D=n(fLe,"A",{href:!0});var Mot=s(_D);p9o=r(Mot,"FlaubertForMultipleChoice"),Mot.forEach(t),u9o=r(fLe," (FlauBERT model)"),fLe.forEach(t),_9o=i(K),ib=n(K,"LI",{});var mLe=s(ib);sce=n(mLe,"STRONG",{});var Eot=s(sce);b9o=r(Eot,"fnet"),Eot.forEach(t),v9o=r(mLe," \u2014 "),bD=n(mLe,"A",{href:!0});var Cot=s(bD);F9o=r(Cot,"FNetForMultipleChoice"),Cot.forEach(t),T9o=r(mLe," (FNet model)"),mLe.forEach(t),M9o=i(K),db=n(K,"LI",{});var gLe=s(db);lce=n(gLe,"STRONG",{});var wot=s(lce);E9o=r(wot,"funnel"),wot.forEach(t),C9o=r(gLe," \u2014 "),vD=n(gLe,"A",{href:!0});var Aot=s(vD);w9o=r(Aot,"FunnelForMultipleChoice"),Aot.forEach(t),A9o=r(gLe," (Funnel Transformer model)"),gLe.forEach(t),y9o=i(K),cb=n(K,"LI",{});var hLe=s(cb);ice=n(hLe,"STRONG",{});var yot=s(ice);L9o=r(yot,"ibert"),yot.forEach(t),x9o=r(hLe," \u2014 "),FD=n(hLe,"A",{href:!0});var Lot=s(FD);$9o=r(Lot,"IBertForMultipleChoice"),Lot.forEach(t),k9o=r(hLe," (I-BERT model)"),hLe.forEach(t),S9o=i(K),fb=n(K,"LI",{});var pLe=s(fb);dce=n(pLe,"STRONG",{});var xot=s(dce);R9o=r(xot,"longformer"),xot.forEach(t),B9o=r(pLe," \u2014 "),TD=n(pLe,"A",{href:!0});var $ot=s(TD);P9o=r($ot,"LongformerForMultipleChoice"),$ot.forEach(t),I9o=r(pLe," (Longformer model)"),pLe.forEach(t),q9o=i(K),mb=n(K,"LI",{});var uLe=s(mb);cce=n(uLe,"STRONG",{});var kot=s(cce);N9o=r(kot,"megatron-bert"),kot.forEach(t),j9o=r(uLe," \u2014 "),MD=n(uLe,"A",{href:!0});var Sot=s(MD);D9o=r(Sot,"MegatronBertForMultipleChoice"),Sot.forEach(t),G9o=r(uLe," (MegatronBert model)"),uLe.forEach(t),O9o=i(K),gb=n(K,"LI",{});var _Le=s(gb);fce=n(_Le,"STRONG",{});var Rot=s(fce);V9o=r(Rot,"mobilebert"),Rot.forEach(t),X9o=r(_Le," \u2014 "),ED=n(_Le,"A",{href:!0});var Bot=s(ED);z9o=r(Bot,"MobileBertForMultipleChoice"),Bot.forEach(t),Q9o=r(_Le," (MobileBERT model)"),_Le.forEach(t),W9o=i(K),hb=n(K,"LI",{});var bLe=s(hb);mce=n(bLe,"STRONG",{});var Pot=s(mce);H9o=r(Pot,"mpnet"),Pot.forEach(t),U9o=r(bLe," \u2014 "),CD=n(bLe,"A",{href:!0});var Iot=s(CD);J9o=r(Iot,"MPNetForMultipleChoice"),Iot.forEach(t),Y9o=r(bLe," (MPNet model)"),bLe.forEach(t),K9o=i(K),pb=n(K,"LI",{});var vLe=s(pb);gce=n(vLe,"STRONG",{});var qot=s(gce);Z9o=r(qot,"nystromformer"),qot.forEach(t),e$o=r(vLe," \u2014 "),wD=n(vLe,"A",{href:!0});var Not=s(wD);o$o=r(Not,"NystromformerForMultipleChoice"),Not.forEach(t),r$o=r(vLe," (Nystromformer model)"),vLe.forEach(t),t$o=i(K),ub=n(K,"LI",{});var FLe=s(ub);hce=n(FLe,"STRONG",{});var jot=s(hce);a$o=r(jot,"qdqbert"),jot.forEach(t),n$o=r(FLe," \u2014 "),AD=n(FLe,"A",{href:!0});var Dot=s(AD);s$o=r(Dot,"QDQBertForMultipleChoice"),Dot.forEach(t),l$o=r(FLe," (QDQBert model)"),FLe.forEach(t),i$o=i(K),_b=n(K,"LI",{});var TLe=s(_b);pce=n(TLe,"STRONG",{});var Got=s(pce);d$o=r(Got,"rembert"),Got.forEach(t),c$o=r(TLe," \u2014 "),yD=n(TLe,"A",{href:!0});var Oot=s(yD);f$o=r(Oot,"RemBertForMultipleChoice"),Oot.forEach(t),m$o=r(TLe," (RemBERT model)"),TLe.forEach(t),g$o=i(K),bb=n(K,"LI",{});var MLe=s(bb);uce=n(MLe,"STRONG",{});var Vot=s(uce);h$o=r(Vot,"roberta"),Vot.forEach(t),p$o=r(MLe," \u2014 "),LD=n(MLe,"A",{href:!0});var Xot=s(LD);u$o=r(Xot,"RobertaForMultipleChoice"),Xot.forEach(t),_$o=r(MLe," (RoBERTa model)"),MLe.forEach(t),b$o=i(K),vb=n(K,"LI",{});var ELe=s(vb);_ce=n(ELe,"STRONG",{});var zot=s(_ce);v$o=r(zot,"roformer"),zot.forEach(t),F$o=r(ELe," \u2014 "),xD=n(ELe,"A",{href:!0});var Qot=s(xD);T$o=r(Qot,"RoFormerForMultipleChoice"),Qot.forEach(t),M$o=r(ELe," (RoFormer model)"),ELe.forEach(t),E$o=i(K),Fb=n(K,"LI",{});var CLe=s(Fb);bce=n(CLe,"STRONG",{});var Wot=s(bce);C$o=r(Wot,"squeezebert"),Wot.forEach(t),w$o=r(CLe," \u2014 "),$D=n(CLe,"A",{href:!0});var Hot=s($D);A$o=r(Hot,"SqueezeBertForMultipleChoice"),Hot.forEach(t),y$o=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),L$o=i(K),Tb=n(K,"LI",{});var wLe=s(Tb);vce=n(wLe,"STRONG",{});var Uot=s(vce);x$o=r(Uot,"xlm"),Uot.forEach(t),$$o=r(wLe," \u2014 "),kD=n(wLe,"A",{href:!0});var Jot=s(kD);k$o=r(Jot,"XLMForMultipleChoice"),Jot.forEach(t),S$o=r(wLe," (XLM model)"),wLe.forEach(t),R$o=i(K),Mb=n(K,"LI",{});var ALe=s(Mb);Fce=n(ALe,"STRONG",{});var Yot=s(Fce);B$o=r(Yot,"xlm-roberta"),Yot.forEach(t),P$o=r(ALe," \u2014 "),SD=n(ALe,"A",{href:!0});var Kot=s(SD);I$o=r(Kot,"XLMRobertaForMultipleChoice"),Kot.forEach(t),q$o=r(ALe," (XLM-RoBERTa model)"),ALe.forEach(t),N$o=i(K),Eb=n(K,"LI",{});var yLe=s(Eb);Tce=n(yLe,"STRONG",{});var Zot=s(Tce);j$o=r(Zot,"xlm-roberta-xl"),Zot.forEach(t),D$o=r(yLe," \u2014 "),RD=n(yLe,"A",{href:!0});var ert=s(RD);G$o=r(ert,"XLMRobertaXLForMultipleChoice"),ert.forEach(t),O$o=r(yLe," (XLM-RoBERTa-XL model)"),yLe.forEach(t),V$o=i(K),Cb=n(K,"LI",{});var LLe=s(Cb);Mce=n(LLe,"STRONG",{});var ort=s(Mce);X$o=r(ort,"xlnet"),ort.forEach(t),z$o=r(LLe," \u2014 "),BD=n(LLe,"A",{href:!0});var rrt=s(BD);Q$o=r(rrt,"XLNetForMultipleChoice"),rrt.forEach(t),W$o=r(LLe," (XLNet model)"),LLe.forEach(t),H$o=i(K),wb=n(K,"LI",{});var xLe=s(wb);Ece=n(xLe,"STRONG",{});var trt=s(Ece);U$o=r(trt,"yoso"),trt.forEach(t),J$o=r(xLe," \u2014 "),PD=n(xLe,"A",{href:!0});var art=s(PD);Y$o=r(art,"YosoForMultipleChoice"),art.forEach(t),K$o=r(xLe," (YOSO model)"),xLe.forEach(t),K.forEach(t),Z$o=i(oa),Ab=n(oa,"P",{});var $Le=s(Ab);eko=r($Le,"The model is set in evaluation mode by default using "),Cce=n($Le,"CODE",{});var nrt=s(Cce);oko=r(nrt,"model.eval()"),nrt.forEach(t),rko=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=n($Le,"CODE",{});var srt=s(wce);tko=r(srt,"model.train()"),srt.forEach(t),$Le.forEach(t),ako=i(oa),T(yb.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),mBe=i(f),Ii=n(f,"H2",{class:!0});var hIe=s(Ii);Lb=n(hIe,"A",{id:!0,class:!0,href:!0});var lrt=s(Lb);Ace=n(lrt,"SPAN",{});var irt=s(Ace);T(Ey.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),nko=i(hIe),yce=n(hIe,"SPAN",{});var drt=s(yce);sko=r(drt,"AutoModelForNextSentencePrediction"),drt.forEach(t),hIe.forEach(t),gBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(Cy.$$.fragment,Gs),lko=i(Gs),qi=n(Gs,"P",{});var cY=s(qi);iko=r(cY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ID=n(cY,"A",{href:!0});var crt=s(ID);dko=r(crt,"from_pretrained()"),crt.forEach(t),cko=r(cY," class method or the "),qD=n(cY,"A",{href:!0});var frt=s(qD);fko=r(frt,"from_config()"),frt.forEach(t),mko=r(cY,` class
method.`),cY.forEach(t),gko=i(Gs),wy=n(Gs,"P",{});var pIe=s(wy);hko=r(pIe,"This class cannot be instantiated directly using "),Lce=n(pIe,"CODE",{});var mrt=s(Lce);pko=r(mrt,"__init__()"),mrt.forEach(t),uko=r(pIe," (throws an error)."),pIe.forEach(t),_ko=i(Gs),nt=n(Gs,"DIV",{class:!0});var P3=s(nt);T(Ay.$$.fragment,P3),bko=i(P3),xce=n(P3,"P",{});var grt=s(xce);vko=r(grt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),grt.forEach(t),Fko=i(P3),Ni=n(P3,"P",{});var fY=s(Ni);Tko=r(fY,`Note:
Loading a model from its configuration file does `),$ce=n(fY,"STRONG",{});var hrt=s($ce);Mko=r(hrt,"not"),hrt.forEach(t),Eko=r(fY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(fY,"A",{href:!0});var prt=s(ND);Cko=r(prt,"from_pretrained()"),prt.forEach(t),wko=r(fY," to load the model weights."),fY.forEach(t),Ako=i(P3),T(xb.$$.fragment,P3),P3.forEach(t),yko=i(Gs),eo=n(Gs,"DIV",{class:!0});var ra=s(eo);T(yy.$$.fragment,ra),Lko=i(ra),kce=n(ra,"P",{});var urt=s(kce);xko=r(urt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),urt.forEach(t),$ko=i(ra),xa=n(ra,"P",{});var I3=s(xa);kko=r(I3,"The model class to instantiate is selected based on the "),Sce=n(I3,"CODE",{});var _rt=s(Sce);Sko=r(_rt,"model_type"),_rt.forEach(t),Rko=r(I3,` property of the config object (either
passed as an argument or loaded from `),Rce=n(I3,"CODE",{});var brt=s(Rce);Bko=r(brt,"pretrained_model_name_or_path"),brt.forEach(t),Pko=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(I3,"CODE",{});var vrt=s(Bce);Iko=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),qko=r(I3,":"),I3.forEach(t),Nko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);$b=n(Os,"LI",{});var kLe=s($b);Pce=n(kLe,"STRONG",{});var Frt=s(Pce);jko=r(Frt,"bert"),Frt.forEach(t),Dko=r(kLe," \u2014 "),jD=n(kLe,"A",{href:!0});var Trt=s(jD);Gko=r(Trt,"BertForNextSentencePrediction"),Trt.forEach(t),Oko=r(kLe," (BERT model)"),kLe.forEach(t),Vko=i(Os),kb=n(Os,"LI",{});var SLe=s(kb);Ice=n(SLe,"STRONG",{});var Mrt=s(Ice);Xko=r(Mrt,"fnet"),Mrt.forEach(t),zko=r(SLe," \u2014 "),DD=n(SLe,"A",{href:!0});var Ert=s(DD);Qko=r(Ert,"FNetForNextSentencePrediction"),Ert.forEach(t),Wko=r(SLe," (FNet model)"),SLe.forEach(t),Hko=i(Os),Sb=n(Os,"LI",{});var RLe=s(Sb);qce=n(RLe,"STRONG",{});var Crt=s(qce);Uko=r(Crt,"megatron-bert"),Crt.forEach(t),Jko=r(RLe," \u2014 "),GD=n(RLe,"A",{href:!0});var wrt=s(GD);Yko=r(wrt,"MegatronBertForNextSentencePrediction"),wrt.forEach(t),Kko=r(RLe," (MegatronBert model)"),RLe.forEach(t),Zko=i(Os),Rb=n(Os,"LI",{});var BLe=s(Rb);Nce=n(BLe,"STRONG",{});var Art=s(Nce);eSo=r(Art,"mobilebert"),Art.forEach(t),oSo=r(BLe," \u2014 "),OD=n(BLe,"A",{href:!0});var yrt=s(OD);rSo=r(yrt,"MobileBertForNextSentencePrediction"),yrt.forEach(t),tSo=r(BLe," (MobileBERT model)"),BLe.forEach(t),aSo=i(Os),Bb=n(Os,"LI",{});var PLe=s(Bb);jce=n(PLe,"STRONG",{});var Lrt=s(jce);nSo=r(Lrt,"qdqbert"),Lrt.forEach(t),sSo=r(PLe," \u2014 "),VD=n(PLe,"A",{href:!0});var xrt=s(VD);lSo=r(xrt,"QDQBertForNextSentencePrediction"),xrt.forEach(t),iSo=r(PLe," (QDQBert model)"),PLe.forEach(t),Os.forEach(t),dSo=i(ra),Pb=n(ra,"P",{});var ILe=s(Pb);cSo=r(ILe,"The model is set in evaluation mode by default using "),Dce=n(ILe,"CODE",{});var $rt=s(Dce);fSo=r($rt,"model.eval()"),$rt.forEach(t),mSo=r(ILe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gce=n(ILe,"CODE",{});var krt=s(Gce);gSo=r(krt,"model.train()"),krt.forEach(t),ILe.forEach(t),hSo=i(ra),T(Ib.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),hBe=i(f),ji=n(f,"H2",{class:!0});var uIe=s(ji);qb=n(uIe,"A",{id:!0,class:!0,href:!0});var Srt=s(qb);Oce=n(Srt,"SPAN",{});var Rrt=s(Oce);T(Ly.$$.fragment,Rrt),Rrt.forEach(t),Srt.forEach(t),pSo=i(uIe),Vce=n(uIe,"SPAN",{});var Brt=s(Vce);uSo=r(Brt,"AutoModelForTokenClassification"),Brt.forEach(t),uIe.forEach(t),pBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T(xy.$$.fragment,Vs),_So=i(Vs),Di=n(Vs,"P",{});var mY=s(Di);bSo=r(mY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XD=n(mY,"A",{href:!0});var Prt=s(XD);vSo=r(Prt,"from_pretrained()"),Prt.forEach(t),FSo=r(mY," class method or the "),zD=n(mY,"A",{href:!0});var Irt=s(zD);TSo=r(Irt,"from_config()"),Irt.forEach(t),MSo=r(mY,` class
method.`),mY.forEach(t),ESo=i(Vs),$y=n(Vs,"P",{});var _Ie=s($y);CSo=r(_Ie,"This class cannot be instantiated directly using "),Xce=n(_Ie,"CODE",{});var qrt=s(Xce);wSo=r(qrt,"__init__()"),qrt.forEach(t),ASo=r(_Ie," (throws an error)."),_Ie.forEach(t),ySo=i(Vs),st=n(Vs,"DIV",{class:!0});var q3=s(st);T(ky.$$.fragment,q3),LSo=i(q3),zce=n(q3,"P",{});var Nrt=s(zce);xSo=r(Nrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Nrt.forEach(t),$So=i(q3),Gi=n(q3,"P",{});var gY=s(Gi);kSo=r(gY,`Note:
Loading a model from its configuration file does `),Qce=n(gY,"STRONG",{});var jrt=s(Qce);SSo=r(jrt,"not"),jrt.forEach(t),RSo=r(gY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QD=n(gY,"A",{href:!0});var Drt=s(QD);BSo=r(Drt,"from_pretrained()"),Drt.forEach(t),PSo=r(gY," to load the model weights."),gY.forEach(t),ISo=i(q3),T(Nb.$$.fragment,q3),q3.forEach(t),qSo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(Sy.$$.fragment,ta),NSo=i(ta),Wce=n(ta,"P",{});var Grt=s(Wce);jSo=r(Grt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Grt.forEach(t),DSo=i(ta),$a=n(ta,"P",{});var N3=s($a);GSo=r(N3,"The model class to instantiate is selected based on the "),Hce=n(N3,"CODE",{});var Ort=s(Hce);OSo=r(Ort,"model_type"),Ort.forEach(t),VSo=r(N3,` property of the config object (either
passed as an argument or loaded from `),Uce=n(N3,"CODE",{});var Vrt=s(Uce);XSo=r(Vrt,"pretrained_model_name_or_path"),Vrt.forEach(t),zSo=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jce=n(N3,"CODE",{});var Xrt=s(Jce);QSo=r(Xrt,"pretrained_model_name_or_path"),Xrt.forEach(t),WSo=r(N3,":"),N3.forEach(t),HSo=i(ta),U=n(ta,"UL",{});var J=s(U);jb=n(J,"LI",{});var qLe=s(jb);Yce=n(qLe,"STRONG",{});var zrt=s(Yce);USo=r(zrt,"albert"),zrt.forEach(t),JSo=r(qLe," \u2014 "),WD=n(qLe,"A",{href:!0});var Qrt=s(WD);YSo=r(Qrt,"AlbertForTokenClassification"),Qrt.forEach(t),KSo=r(qLe," (ALBERT model)"),qLe.forEach(t),ZSo=i(J),Db=n(J,"LI",{});var NLe=s(Db);Kce=n(NLe,"STRONG",{});var Wrt=s(Kce);eRo=r(Wrt,"bert"),Wrt.forEach(t),oRo=r(NLe," \u2014 "),HD=n(NLe,"A",{href:!0});var Hrt=s(HD);rRo=r(Hrt,"BertForTokenClassification"),Hrt.forEach(t),tRo=r(NLe," (BERT model)"),NLe.forEach(t),aRo=i(J),Gb=n(J,"LI",{});var jLe=s(Gb);Zce=n(jLe,"STRONG",{});var Urt=s(Zce);nRo=r(Urt,"big_bird"),Urt.forEach(t),sRo=r(jLe," \u2014 "),UD=n(jLe,"A",{href:!0});var Jrt=s(UD);lRo=r(Jrt,"BigBirdForTokenClassification"),Jrt.forEach(t),iRo=r(jLe," (BigBird model)"),jLe.forEach(t),dRo=i(J),Ob=n(J,"LI",{});var DLe=s(Ob);efe=n(DLe,"STRONG",{});var Yrt=s(efe);cRo=r(Yrt,"camembert"),Yrt.forEach(t),fRo=r(DLe," \u2014 "),JD=n(DLe,"A",{href:!0});var Krt=s(JD);mRo=r(Krt,"CamembertForTokenClassification"),Krt.forEach(t),gRo=r(DLe," (CamemBERT model)"),DLe.forEach(t),hRo=i(J),Vb=n(J,"LI",{});var GLe=s(Vb);ofe=n(GLe,"STRONG",{});var Zrt=s(ofe);pRo=r(Zrt,"canine"),Zrt.forEach(t),uRo=r(GLe," \u2014 "),YD=n(GLe,"A",{href:!0});var ett=s(YD);_Ro=r(ett,"CanineForTokenClassification"),ett.forEach(t),bRo=r(GLe," (Canine model)"),GLe.forEach(t),vRo=i(J),Xb=n(J,"LI",{});var OLe=s(Xb);rfe=n(OLe,"STRONG",{});var ott=s(rfe);FRo=r(ott,"convbert"),ott.forEach(t),TRo=r(OLe," \u2014 "),KD=n(OLe,"A",{href:!0});var rtt=s(KD);MRo=r(rtt,"ConvBertForTokenClassification"),rtt.forEach(t),ERo=r(OLe," (ConvBERT model)"),OLe.forEach(t),CRo=i(J),zb=n(J,"LI",{});var VLe=s(zb);tfe=n(VLe,"STRONG",{});var ttt=s(tfe);wRo=r(ttt,"data2vec-text"),ttt.forEach(t),ARo=r(VLe," \u2014 "),ZD=n(VLe,"A",{href:!0});var att=s(ZD);yRo=r(att,"Data2VecTextForTokenClassification"),att.forEach(t),LRo=r(VLe," (Data2VecText model)"),VLe.forEach(t),xRo=i(J),Qb=n(J,"LI",{});var XLe=s(Qb);afe=n(XLe,"STRONG",{});var ntt=s(afe);$Ro=r(ntt,"deberta"),ntt.forEach(t),kRo=r(XLe," \u2014 "),eG=n(XLe,"A",{href:!0});var stt=s(eG);SRo=r(stt,"DebertaForTokenClassification"),stt.forEach(t),RRo=r(XLe," (DeBERTa model)"),XLe.forEach(t),BRo=i(J),Wb=n(J,"LI",{});var zLe=s(Wb);nfe=n(zLe,"STRONG",{});var ltt=s(nfe);PRo=r(ltt,"deberta-v2"),ltt.forEach(t),IRo=r(zLe," \u2014 "),oG=n(zLe,"A",{href:!0});var itt=s(oG);qRo=r(itt,"DebertaV2ForTokenClassification"),itt.forEach(t),NRo=r(zLe," (DeBERTa-v2 model)"),zLe.forEach(t),jRo=i(J),Hb=n(J,"LI",{});var QLe=s(Hb);sfe=n(QLe,"STRONG",{});var dtt=s(sfe);DRo=r(dtt,"distilbert"),dtt.forEach(t),GRo=r(QLe," \u2014 "),rG=n(QLe,"A",{href:!0});var ctt=s(rG);ORo=r(ctt,"DistilBertForTokenClassification"),ctt.forEach(t),VRo=r(QLe," (DistilBERT model)"),QLe.forEach(t),XRo=i(J),Ub=n(J,"LI",{});var WLe=s(Ub);lfe=n(WLe,"STRONG",{});var ftt=s(lfe);zRo=r(ftt,"electra"),ftt.forEach(t),QRo=r(WLe," \u2014 "),tG=n(WLe,"A",{href:!0});var mtt=s(tG);WRo=r(mtt,"ElectraForTokenClassification"),mtt.forEach(t),HRo=r(WLe," (ELECTRA model)"),WLe.forEach(t),URo=i(J),Jb=n(J,"LI",{});var HLe=s(Jb);ife=n(HLe,"STRONG",{});var gtt=s(ife);JRo=r(gtt,"flaubert"),gtt.forEach(t),YRo=r(HLe," \u2014 "),aG=n(HLe,"A",{href:!0});var htt=s(aG);KRo=r(htt,"FlaubertForTokenClassification"),htt.forEach(t),ZRo=r(HLe," (FlauBERT model)"),HLe.forEach(t),eBo=i(J),Yb=n(J,"LI",{});var ULe=s(Yb);dfe=n(ULe,"STRONG",{});var ptt=s(dfe);oBo=r(ptt,"fnet"),ptt.forEach(t),rBo=r(ULe," \u2014 "),nG=n(ULe,"A",{href:!0});var utt=s(nG);tBo=r(utt,"FNetForTokenClassification"),utt.forEach(t),aBo=r(ULe," (FNet model)"),ULe.forEach(t),nBo=i(J),Kb=n(J,"LI",{});var JLe=s(Kb);cfe=n(JLe,"STRONG",{});var _tt=s(cfe);sBo=r(_tt,"funnel"),_tt.forEach(t),lBo=r(JLe," \u2014 "),sG=n(JLe,"A",{href:!0});var btt=s(sG);iBo=r(btt,"FunnelForTokenClassification"),btt.forEach(t),dBo=r(JLe," (Funnel Transformer model)"),JLe.forEach(t),cBo=i(J),Zb=n(J,"LI",{});var YLe=s(Zb);ffe=n(YLe,"STRONG",{});var vtt=s(ffe);fBo=r(vtt,"gpt2"),vtt.forEach(t),mBo=r(YLe," \u2014 "),lG=n(YLe,"A",{href:!0});var Ftt=s(lG);gBo=r(Ftt,"GPT2ForTokenClassification"),Ftt.forEach(t),hBo=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),pBo=i(J),e4=n(J,"LI",{});var KLe=s(e4);mfe=n(KLe,"STRONG",{});var Ttt=s(mfe);uBo=r(Ttt,"ibert"),Ttt.forEach(t),_Bo=r(KLe," \u2014 "),iG=n(KLe,"A",{href:!0});var Mtt=s(iG);bBo=r(Mtt,"IBertForTokenClassification"),Mtt.forEach(t),vBo=r(KLe," (I-BERT model)"),KLe.forEach(t),FBo=i(J),o4=n(J,"LI",{});var ZLe=s(o4);gfe=n(ZLe,"STRONG",{});var Ett=s(gfe);TBo=r(Ett,"layoutlm"),Ett.forEach(t),MBo=r(ZLe," \u2014 "),dG=n(ZLe,"A",{href:!0});var Ctt=s(dG);EBo=r(Ctt,"LayoutLMForTokenClassification"),Ctt.forEach(t),CBo=r(ZLe," (LayoutLM model)"),ZLe.forEach(t),wBo=i(J),r4=n(J,"LI",{});var e8e=s(r4);hfe=n(e8e,"STRONG",{});var wtt=s(hfe);ABo=r(wtt,"layoutlmv2"),wtt.forEach(t),yBo=r(e8e," \u2014 "),cG=n(e8e,"A",{href:!0});var Att=s(cG);LBo=r(Att,"LayoutLMv2ForTokenClassification"),Att.forEach(t),xBo=r(e8e," (LayoutLMv2 model)"),e8e.forEach(t),$Bo=i(J),t4=n(J,"LI",{});var o8e=s(t4);pfe=n(o8e,"STRONG",{});var ytt=s(pfe);kBo=r(ytt,"longformer"),ytt.forEach(t),SBo=r(o8e," \u2014 "),fG=n(o8e,"A",{href:!0});var Ltt=s(fG);RBo=r(Ltt,"LongformerForTokenClassification"),Ltt.forEach(t),BBo=r(o8e," (Longformer model)"),o8e.forEach(t),PBo=i(J),a4=n(J,"LI",{});var r8e=s(a4);ufe=n(r8e,"STRONG",{});var xtt=s(ufe);IBo=r(xtt,"megatron-bert"),xtt.forEach(t),qBo=r(r8e," \u2014 "),mG=n(r8e,"A",{href:!0});var $tt=s(mG);NBo=r($tt,"MegatronBertForTokenClassification"),$tt.forEach(t),jBo=r(r8e," (MegatronBert model)"),r8e.forEach(t),DBo=i(J),n4=n(J,"LI",{});var t8e=s(n4);_fe=n(t8e,"STRONG",{});var ktt=s(_fe);GBo=r(ktt,"mobilebert"),ktt.forEach(t),OBo=r(t8e," \u2014 "),gG=n(t8e,"A",{href:!0});var Stt=s(gG);VBo=r(Stt,"MobileBertForTokenClassification"),Stt.forEach(t),XBo=r(t8e," (MobileBERT model)"),t8e.forEach(t),zBo=i(J),s4=n(J,"LI",{});var a8e=s(s4);bfe=n(a8e,"STRONG",{});var Rtt=s(bfe);QBo=r(Rtt,"mpnet"),Rtt.forEach(t),WBo=r(a8e," \u2014 "),hG=n(a8e,"A",{href:!0});var Btt=s(hG);HBo=r(Btt,"MPNetForTokenClassification"),Btt.forEach(t),UBo=r(a8e," (MPNet model)"),a8e.forEach(t),JBo=i(J),l4=n(J,"LI",{});var n8e=s(l4);vfe=n(n8e,"STRONG",{});var Ptt=s(vfe);YBo=r(Ptt,"nystromformer"),Ptt.forEach(t),KBo=r(n8e," \u2014 "),pG=n(n8e,"A",{href:!0});var Itt=s(pG);ZBo=r(Itt,"NystromformerForTokenClassification"),Itt.forEach(t),ePo=r(n8e," (Nystromformer model)"),n8e.forEach(t),oPo=i(J),i4=n(J,"LI",{});var s8e=s(i4);Ffe=n(s8e,"STRONG",{});var qtt=s(Ffe);rPo=r(qtt,"qdqbert"),qtt.forEach(t),tPo=r(s8e," \u2014 "),uG=n(s8e,"A",{href:!0});var Ntt=s(uG);aPo=r(Ntt,"QDQBertForTokenClassification"),Ntt.forEach(t),nPo=r(s8e," (QDQBert model)"),s8e.forEach(t),sPo=i(J),d4=n(J,"LI",{});var l8e=s(d4);Tfe=n(l8e,"STRONG",{});var jtt=s(Tfe);lPo=r(jtt,"rembert"),jtt.forEach(t),iPo=r(l8e," \u2014 "),_G=n(l8e,"A",{href:!0});var Dtt=s(_G);dPo=r(Dtt,"RemBertForTokenClassification"),Dtt.forEach(t),cPo=r(l8e," (RemBERT model)"),l8e.forEach(t),fPo=i(J),c4=n(J,"LI",{});var i8e=s(c4);Mfe=n(i8e,"STRONG",{});var Gtt=s(Mfe);mPo=r(Gtt,"roberta"),Gtt.forEach(t),gPo=r(i8e," \u2014 "),bG=n(i8e,"A",{href:!0});var Ott=s(bG);hPo=r(Ott,"RobertaForTokenClassification"),Ott.forEach(t),pPo=r(i8e," (RoBERTa model)"),i8e.forEach(t),uPo=i(J),f4=n(J,"LI",{});var d8e=s(f4);Efe=n(d8e,"STRONG",{});var Vtt=s(Efe);_Po=r(Vtt,"roformer"),Vtt.forEach(t),bPo=r(d8e," \u2014 "),vG=n(d8e,"A",{href:!0});var Xtt=s(vG);vPo=r(Xtt,"RoFormerForTokenClassification"),Xtt.forEach(t),FPo=r(d8e," (RoFormer model)"),d8e.forEach(t),TPo=i(J),m4=n(J,"LI",{});var c8e=s(m4);Cfe=n(c8e,"STRONG",{});var ztt=s(Cfe);MPo=r(ztt,"squeezebert"),ztt.forEach(t),EPo=r(c8e," \u2014 "),FG=n(c8e,"A",{href:!0});var Qtt=s(FG);CPo=r(Qtt,"SqueezeBertForTokenClassification"),Qtt.forEach(t),wPo=r(c8e," (SqueezeBERT model)"),c8e.forEach(t),APo=i(J),g4=n(J,"LI",{});var f8e=s(g4);wfe=n(f8e,"STRONG",{});var Wtt=s(wfe);yPo=r(Wtt,"xlm"),Wtt.forEach(t),LPo=r(f8e," \u2014 "),TG=n(f8e,"A",{href:!0});var Htt=s(TG);xPo=r(Htt,"XLMForTokenClassification"),Htt.forEach(t),$Po=r(f8e," (XLM model)"),f8e.forEach(t),kPo=i(J),h4=n(J,"LI",{});var m8e=s(h4);Afe=n(m8e,"STRONG",{});var Utt=s(Afe);SPo=r(Utt,"xlm-roberta"),Utt.forEach(t),RPo=r(m8e," \u2014 "),MG=n(m8e,"A",{href:!0});var Jtt=s(MG);BPo=r(Jtt,"XLMRobertaForTokenClassification"),Jtt.forEach(t),PPo=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),IPo=i(J),p4=n(J,"LI",{});var g8e=s(p4);yfe=n(g8e,"STRONG",{});var Ytt=s(yfe);qPo=r(Ytt,"xlm-roberta-xl"),Ytt.forEach(t),NPo=r(g8e," \u2014 "),EG=n(g8e,"A",{href:!0});var Ktt=s(EG);jPo=r(Ktt,"XLMRobertaXLForTokenClassification"),Ktt.forEach(t),DPo=r(g8e," (XLM-RoBERTa-XL model)"),g8e.forEach(t),GPo=i(J),u4=n(J,"LI",{});var h8e=s(u4);Lfe=n(h8e,"STRONG",{});var Ztt=s(Lfe);OPo=r(Ztt,"xlnet"),Ztt.forEach(t),VPo=r(h8e," \u2014 "),CG=n(h8e,"A",{href:!0});var eat=s(CG);XPo=r(eat,"XLNetForTokenClassification"),eat.forEach(t),zPo=r(h8e," (XLNet model)"),h8e.forEach(t),QPo=i(J),_4=n(J,"LI",{});var p8e=s(_4);xfe=n(p8e,"STRONG",{});var oat=s(xfe);WPo=r(oat,"yoso"),oat.forEach(t),HPo=r(p8e," \u2014 "),wG=n(p8e,"A",{href:!0});var rat=s(wG);UPo=r(rat,"YosoForTokenClassification"),rat.forEach(t),JPo=r(p8e," (YOSO model)"),p8e.forEach(t),J.forEach(t),YPo=i(ta),b4=n(ta,"P",{});var u8e=s(b4);KPo=r(u8e,"The model is set in evaluation mode by default using "),$fe=n(u8e,"CODE",{});var tat=s($fe);ZPo=r(tat,"model.eval()"),tat.forEach(t),eIo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(u8e,"CODE",{});var aat=s(kfe);oIo=r(aat,"model.train()"),aat.forEach(t),u8e.forEach(t),rIo=i(ta),T(v4.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),uBe=i(f),Oi=n(f,"H2",{class:!0});var bIe=s(Oi);F4=n(bIe,"A",{id:!0,class:!0,href:!0});var nat=s(F4);Sfe=n(nat,"SPAN",{});var sat=s(Sfe);T(Ry.$$.fragment,sat),sat.forEach(t),nat.forEach(t),tIo=i(bIe),Rfe=n(bIe,"SPAN",{});var lat=s(Rfe);aIo=r(lat,"AutoModelForQuestionAnswering"),lat.forEach(t),bIe.forEach(t),_Be=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(By.$$.fragment,Xs),nIo=i(Xs),Vi=n(Xs,"P",{});var hY=s(Vi);sIo=r(hY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AG=n(hY,"A",{href:!0});var iat=s(AG);lIo=r(iat,"from_pretrained()"),iat.forEach(t),iIo=r(hY," class method or the "),yG=n(hY,"A",{href:!0});var dat=s(yG);dIo=r(dat,"from_config()"),dat.forEach(t),cIo=r(hY,` class
method.`),hY.forEach(t),fIo=i(Xs),Py=n(Xs,"P",{});var vIe=s(Py);mIo=r(vIe,"This class cannot be instantiated directly using "),Bfe=n(vIe,"CODE",{});var cat=s(Bfe);gIo=r(cat,"__init__()"),cat.forEach(t),hIo=r(vIe," (throws an error)."),vIe.forEach(t),pIo=i(Xs),lt=n(Xs,"DIV",{class:!0});var j3=s(lt);T(Iy.$$.fragment,j3),uIo=i(j3),Pfe=n(j3,"P",{});var fat=s(Pfe);_Io=r(fat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),fat.forEach(t),bIo=i(j3),Xi=n(j3,"P",{});var pY=s(Xi);vIo=r(pY,`Note:
Loading a model from its configuration file does `),Ife=n(pY,"STRONG",{});var mat=s(Ife);FIo=r(mat,"not"),mat.forEach(t),TIo=r(pY,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(pY,"A",{href:!0});var gat=s(LG);MIo=r(gat,"from_pretrained()"),gat.forEach(t),EIo=r(pY," to load the model weights."),pY.forEach(t),CIo=i(j3),T(T4.$$.fragment,j3),j3.forEach(t),wIo=i(Xs),ro=n(Xs,"DIV",{class:!0});var aa=s(ro);T(qy.$$.fragment,aa),AIo=i(aa),qfe=n(aa,"P",{});var hat=s(qfe);yIo=r(hat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hat.forEach(t),LIo=i(aa),ka=n(aa,"P",{});var D3=s(ka);xIo=r(D3,"The model class to instantiate is selected based on the "),Nfe=n(D3,"CODE",{});var pat=s(Nfe);$Io=r(pat,"model_type"),pat.forEach(t),kIo=r(D3,` property of the config object (either
passed as an argument or loaded from `),jfe=n(D3,"CODE",{});var uat=s(jfe);SIo=r(uat,"pretrained_model_name_or_path"),uat.forEach(t),RIo=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n(D3,"CODE",{});var _at=s(Dfe);BIo=r(_at,"pretrained_model_name_or_path"),_at.forEach(t),PIo=r(D3,":"),D3.forEach(t),IIo=i(aa),O=n(aa,"UL",{});var X=s(O);M4=n(X,"LI",{});var _8e=s(M4);Gfe=n(_8e,"STRONG",{});var bat=s(Gfe);qIo=r(bat,"albert"),bat.forEach(t),NIo=r(_8e," \u2014 "),xG=n(_8e,"A",{href:!0});var vat=s(xG);jIo=r(vat,"AlbertForQuestionAnswering"),vat.forEach(t),DIo=r(_8e," (ALBERT model)"),_8e.forEach(t),GIo=i(X),E4=n(X,"LI",{});var b8e=s(E4);Ofe=n(b8e,"STRONG",{});var Fat=s(Ofe);OIo=r(Fat,"bart"),Fat.forEach(t),VIo=r(b8e," \u2014 "),$G=n(b8e,"A",{href:!0});var Tat=s($G);XIo=r(Tat,"BartForQuestionAnswering"),Tat.forEach(t),zIo=r(b8e," (BART model)"),b8e.forEach(t),QIo=i(X),C4=n(X,"LI",{});var v8e=s(C4);Vfe=n(v8e,"STRONG",{});var Mat=s(Vfe);WIo=r(Mat,"bert"),Mat.forEach(t),HIo=r(v8e," \u2014 "),kG=n(v8e,"A",{href:!0});var Eat=s(kG);UIo=r(Eat,"BertForQuestionAnswering"),Eat.forEach(t),JIo=r(v8e," (BERT model)"),v8e.forEach(t),YIo=i(X),w4=n(X,"LI",{});var F8e=s(w4);Xfe=n(F8e,"STRONG",{});var Cat=s(Xfe);KIo=r(Cat,"big_bird"),Cat.forEach(t),ZIo=r(F8e," \u2014 "),SG=n(F8e,"A",{href:!0});var wat=s(SG);eqo=r(wat,"BigBirdForQuestionAnswering"),wat.forEach(t),oqo=r(F8e," (BigBird model)"),F8e.forEach(t),rqo=i(X),A4=n(X,"LI",{});var T8e=s(A4);zfe=n(T8e,"STRONG",{});var Aat=s(zfe);tqo=r(Aat,"bigbird_pegasus"),Aat.forEach(t),aqo=r(T8e," \u2014 "),RG=n(T8e,"A",{href:!0});var yat=s(RG);nqo=r(yat,"BigBirdPegasusForQuestionAnswering"),yat.forEach(t),sqo=r(T8e," (BigBirdPegasus model)"),T8e.forEach(t),lqo=i(X),y4=n(X,"LI",{});var M8e=s(y4);Qfe=n(M8e,"STRONG",{});var Lat=s(Qfe);iqo=r(Lat,"camembert"),Lat.forEach(t),dqo=r(M8e," \u2014 "),BG=n(M8e,"A",{href:!0});var xat=s(BG);cqo=r(xat,"CamembertForQuestionAnswering"),xat.forEach(t),fqo=r(M8e," (CamemBERT model)"),M8e.forEach(t),mqo=i(X),L4=n(X,"LI",{});var E8e=s(L4);Wfe=n(E8e,"STRONG",{});var $at=s(Wfe);gqo=r($at,"canine"),$at.forEach(t),hqo=r(E8e," \u2014 "),PG=n(E8e,"A",{href:!0});var kat=s(PG);pqo=r(kat,"CanineForQuestionAnswering"),kat.forEach(t),uqo=r(E8e," (Canine model)"),E8e.forEach(t),_qo=i(X),x4=n(X,"LI",{});var C8e=s(x4);Hfe=n(C8e,"STRONG",{});var Sat=s(Hfe);bqo=r(Sat,"convbert"),Sat.forEach(t),vqo=r(C8e," \u2014 "),IG=n(C8e,"A",{href:!0});var Rat=s(IG);Fqo=r(Rat,"ConvBertForQuestionAnswering"),Rat.forEach(t),Tqo=r(C8e," (ConvBERT model)"),C8e.forEach(t),Mqo=i(X),$4=n(X,"LI",{});var w8e=s($4);Ufe=n(w8e,"STRONG",{});var Bat=s(Ufe);Eqo=r(Bat,"data2vec-text"),Bat.forEach(t),Cqo=r(w8e," \u2014 "),qG=n(w8e,"A",{href:!0});var Pat=s(qG);wqo=r(Pat,"Data2VecTextForQuestionAnswering"),Pat.forEach(t),Aqo=r(w8e," (Data2VecText model)"),w8e.forEach(t),yqo=i(X),k4=n(X,"LI",{});var A8e=s(k4);Jfe=n(A8e,"STRONG",{});var Iat=s(Jfe);Lqo=r(Iat,"deberta"),Iat.forEach(t),xqo=r(A8e," \u2014 "),NG=n(A8e,"A",{href:!0});var qat=s(NG);$qo=r(qat,"DebertaForQuestionAnswering"),qat.forEach(t),kqo=r(A8e," (DeBERTa model)"),A8e.forEach(t),Sqo=i(X),S4=n(X,"LI",{});var y8e=s(S4);Yfe=n(y8e,"STRONG",{});var Nat=s(Yfe);Rqo=r(Nat,"deberta-v2"),Nat.forEach(t),Bqo=r(y8e," \u2014 "),jG=n(y8e,"A",{href:!0});var jat=s(jG);Pqo=r(jat,"DebertaV2ForQuestionAnswering"),jat.forEach(t),Iqo=r(y8e," (DeBERTa-v2 model)"),y8e.forEach(t),qqo=i(X),R4=n(X,"LI",{});var L8e=s(R4);Kfe=n(L8e,"STRONG",{});var Dat=s(Kfe);Nqo=r(Dat,"distilbert"),Dat.forEach(t),jqo=r(L8e," \u2014 "),DG=n(L8e,"A",{href:!0});var Gat=s(DG);Dqo=r(Gat,"DistilBertForQuestionAnswering"),Gat.forEach(t),Gqo=r(L8e," (DistilBERT model)"),L8e.forEach(t),Oqo=i(X),B4=n(X,"LI",{});var x8e=s(B4);Zfe=n(x8e,"STRONG",{});var Oat=s(Zfe);Vqo=r(Oat,"electra"),Oat.forEach(t),Xqo=r(x8e," \u2014 "),GG=n(x8e,"A",{href:!0});var Vat=s(GG);zqo=r(Vat,"ElectraForQuestionAnswering"),Vat.forEach(t),Qqo=r(x8e," (ELECTRA model)"),x8e.forEach(t),Wqo=i(X),P4=n(X,"LI",{});var $8e=s(P4);eme=n($8e,"STRONG",{});var Xat=s(eme);Hqo=r(Xat,"flaubert"),Xat.forEach(t),Uqo=r($8e," \u2014 "),OG=n($8e,"A",{href:!0});var zat=s(OG);Jqo=r(zat,"FlaubertForQuestionAnsweringSimple"),zat.forEach(t),Yqo=r($8e," (FlauBERT model)"),$8e.forEach(t),Kqo=i(X),I4=n(X,"LI",{});var k8e=s(I4);ome=n(k8e,"STRONG",{});var Qat=s(ome);Zqo=r(Qat,"fnet"),Qat.forEach(t),eNo=r(k8e," \u2014 "),VG=n(k8e,"A",{href:!0});var Wat=s(VG);oNo=r(Wat,"FNetForQuestionAnswering"),Wat.forEach(t),rNo=r(k8e," (FNet model)"),k8e.forEach(t),tNo=i(X),q4=n(X,"LI",{});var S8e=s(q4);rme=n(S8e,"STRONG",{});var Hat=s(rme);aNo=r(Hat,"funnel"),Hat.forEach(t),nNo=r(S8e," \u2014 "),XG=n(S8e,"A",{href:!0});var Uat=s(XG);sNo=r(Uat,"FunnelForQuestionAnswering"),Uat.forEach(t),lNo=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),iNo=i(X),N4=n(X,"LI",{});var R8e=s(N4);tme=n(R8e,"STRONG",{});var Jat=s(tme);dNo=r(Jat,"gptj"),Jat.forEach(t),cNo=r(R8e," \u2014 "),zG=n(R8e,"A",{href:!0});var Yat=s(zG);fNo=r(Yat,"GPTJForQuestionAnswering"),Yat.forEach(t),mNo=r(R8e," (GPT-J model)"),R8e.forEach(t),gNo=i(X),j4=n(X,"LI",{});var B8e=s(j4);ame=n(B8e,"STRONG",{});var Kat=s(ame);hNo=r(Kat,"ibert"),Kat.forEach(t),pNo=r(B8e," \u2014 "),QG=n(B8e,"A",{href:!0});var Zat=s(QG);uNo=r(Zat,"IBertForQuestionAnswering"),Zat.forEach(t),_No=r(B8e," (I-BERT model)"),B8e.forEach(t),bNo=i(X),D4=n(X,"LI",{});var P8e=s(D4);nme=n(P8e,"STRONG",{});var ent=s(nme);vNo=r(ent,"layoutlmv2"),ent.forEach(t),FNo=r(P8e," \u2014 "),WG=n(P8e,"A",{href:!0});var ont=s(WG);TNo=r(ont,"LayoutLMv2ForQuestionAnswering"),ont.forEach(t),MNo=r(P8e," (LayoutLMv2 model)"),P8e.forEach(t),ENo=i(X),G4=n(X,"LI",{});var I8e=s(G4);sme=n(I8e,"STRONG",{});var rnt=s(sme);CNo=r(rnt,"led"),rnt.forEach(t),wNo=r(I8e," \u2014 "),HG=n(I8e,"A",{href:!0});var tnt=s(HG);ANo=r(tnt,"LEDForQuestionAnswering"),tnt.forEach(t),yNo=r(I8e," (LED model)"),I8e.forEach(t),LNo=i(X),O4=n(X,"LI",{});var q8e=s(O4);lme=n(q8e,"STRONG",{});var ant=s(lme);xNo=r(ant,"longformer"),ant.forEach(t),$No=r(q8e," \u2014 "),UG=n(q8e,"A",{href:!0});var nnt=s(UG);kNo=r(nnt,"LongformerForQuestionAnswering"),nnt.forEach(t),SNo=r(q8e," (Longformer model)"),q8e.forEach(t),RNo=i(X),V4=n(X,"LI",{});var N8e=s(V4);ime=n(N8e,"STRONG",{});var snt=s(ime);BNo=r(snt,"lxmert"),snt.forEach(t),PNo=r(N8e," \u2014 "),JG=n(N8e,"A",{href:!0});var lnt=s(JG);INo=r(lnt,"LxmertForQuestionAnswering"),lnt.forEach(t),qNo=r(N8e," (LXMERT model)"),N8e.forEach(t),NNo=i(X),X4=n(X,"LI",{});var j8e=s(X4);dme=n(j8e,"STRONG",{});var int=s(dme);jNo=r(int,"mbart"),int.forEach(t),DNo=r(j8e," \u2014 "),YG=n(j8e,"A",{href:!0});var dnt=s(YG);GNo=r(dnt,"MBartForQuestionAnswering"),dnt.forEach(t),ONo=r(j8e," (mBART model)"),j8e.forEach(t),VNo=i(X),z4=n(X,"LI",{});var D8e=s(z4);cme=n(D8e,"STRONG",{});var cnt=s(cme);XNo=r(cnt,"megatron-bert"),cnt.forEach(t),zNo=r(D8e," \u2014 "),KG=n(D8e,"A",{href:!0});var fnt=s(KG);QNo=r(fnt,"MegatronBertForQuestionAnswering"),fnt.forEach(t),WNo=r(D8e," (MegatronBert model)"),D8e.forEach(t),HNo=i(X),Q4=n(X,"LI",{});var G8e=s(Q4);fme=n(G8e,"STRONG",{});var mnt=s(fme);UNo=r(mnt,"mobilebert"),mnt.forEach(t),JNo=r(G8e," \u2014 "),ZG=n(G8e,"A",{href:!0});var gnt=s(ZG);YNo=r(gnt,"MobileBertForQuestionAnswering"),gnt.forEach(t),KNo=r(G8e," (MobileBERT model)"),G8e.forEach(t),ZNo=i(X),W4=n(X,"LI",{});var O8e=s(W4);mme=n(O8e,"STRONG",{});var hnt=s(mme);ejo=r(hnt,"mpnet"),hnt.forEach(t),ojo=r(O8e," \u2014 "),eO=n(O8e,"A",{href:!0});var pnt=s(eO);rjo=r(pnt,"MPNetForQuestionAnswering"),pnt.forEach(t),tjo=r(O8e," (MPNet model)"),O8e.forEach(t),ajo=i(X),H4=n(X,"LI",{});var V8e=s(H4);gme=n(V8e,"STRONG",{});var unt=s(gme);njo=r(unt,"nystromformer"),unt.forEach(t),sjo=r(V8e," \u2014 "),oO=n(V8e,"A",{href:!0});var _nt=s(oO);ljo=r(_nt,"NystromformerForQuestionAnswering"),_nt.forEach(t),ijo=r(V8e," (Nystromformer model)"),V8e.forEach(t),djo=i(X),U4=n(X,"LI",{});var X8e=s(U4);hme=n(X8e,"STRONG",{});var bnt=s(hme);cjo=r(bnt,"qdqbert"),bnt.forEach(t),fjo=r(X8e," \u2014 "),rO=n(X8e,"A",{href:!0});var vnt=s(rO);mjo=r(vnt,"QDQBertForQuestionAnswering"),vnt.forEach(t),gjo=r(X8e," (QDQBert model)"),X8e.forEach(t),hjo=i(X),J4=n(X,"LI",{});var z8e=s(J4);pme=n(z8e,"STRONG",{});var Fnt=s(pme);pjo=r(Fnt,"reformer"),Fnt.forEach(t),ujo=r(z8e," \u2014 "),tO=n(z8e,"A",{href:!0});var Tnt=s(tO);_jo=r(Tnt,"ReformerForQuestionAnswering"),Tnt.forEach(t),bjo=r(z8e," (Reformer model)"),z8e.forEach(t),vjo=i(X),Y4=n(X,"LI",{});var Q8e=s(Y4);ume=n(Q8e,"STRONG",{});var Mnt=s(ume);Fjo=r(Mnt,"rembert"),Mnt.forEach(t),Tjo=r(Q8e," \u2014 "),aO=n(Q8e,"A",{href:!0});var Ent=s(aO);Mjo=r(Ent,"RemBertForQuestionAnswering"),Ent.forEach(t),Ejo=r(Q8e," (RemBERT model)"),Q8e.forEach(t),Cjo=i(X),K4=n(X,"LI",{});var W8e=s(K4);_me=n(W8e,"STRONG",{});var Cnt=s(_me);wjo=r(Cnt,"roberta"),Cnt.forEach(t),Ajo=r(W8e," \u2014 "),nO=n(W8e,"A",{href:!0});var wnt=s(nO);yjo=r(wnt,"RobertaForQuestionAnswering"),wnt.forEach(t),Ljo=r(W8e," (RoBERTa model)"),W8e.forEach(t),xjo=i(X),Z4=n(X,"LI",{});var H8e=s(Z4);bme=n(H8e,"STRONG",{});var Ant=s(bme);$jo=r(Ant,"roformer"),Ant.forEach(t),kjo=r(H8e," \u2014 "),sO=n(H8e,"A",{href:!0});var ynt=s(sO);Sjo=r(ynt,"RoFormerForQuestionAnswering"),ynt.forEach(t),Rjo=r(H8e," (RoFormer model)"),H8e.forEach(t),Bjo=i(X),ev=n(X,"LI",{});var U8e=s(ev);vme=n(U8e,"STRONG",{});var Lnt=s(vme);Pjo=r(Lnt,"splinter"),Lnt.forEach(t),Ijo=r(U8e," \u2014 "),lO=n(U8e,"A",{href:!0});var xnt=s(lO);qjo=r(xnt,"SplinterForQuestionAnswering"),xnt.forEach(t),Njo=r(U8e," (Splinter model)"),U8e.forEach(t),jjo=i(X),ov=n(X,"LI",{});var J8e=s(ov);Fme=n(J8e,"STRONG",{});var $nt=s(Fme);Djo=r($nt,"squeezebert"),$nt.forEach(t),Gjo=r(J8e," \u2014 "),iO=n(J8e,"A",{href:!0});var knt=s(iO);Ojo=r(knt,"SqueezeBertForQuestionAnswering"),knt.forEach(t),Vjo=r(J8e," (SqueezeBERT model)"),J8e.forEach(t),Xjo=i(X),rv=n(X,"LI",{});var Y8e=s(rv);Tme=n(Y8e,"STRONG",{});var Snt=s(Tme);zjo=r(Snt,"xlm"),Snt.forEach(t),Qjo=r(Y8e," \u2014 "),dO=n(Y8e,"A",{href:!0});var Rnt=s(dO);Wjo=r(Rnt,"XLMForQuestionAnsweringSimple"),Rnt.forEach(t),Hjo=r(Y8e," (XLM model)"),Y8e.forEach(t),Ujo=i(X),tv=n(X,"LI",{});var K8e=s(tv);Mme=n(K8e,"STRONG",{});var Bnt=s(Mme);Jjo=r(Bnt,"xlm-roberta"),Bnt.forEach(t),Yjo=r(K8e," \u2014 "),cO=n(K8e,"A",{href:!0});var Pnt=s(cO);Kjo=r(Pnt,"XLMRobertaForQuestionAnswering"),Pnt.forEach(t),Zjo=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),eDo=i(X),av=n(X,"LI",{});var Z8e=s(av);Eme=n(Z8e,"STRONG",{});var Int=s(Eme);oDo=r(Int,"xlm-roberta-xl"),Int.forEach(t),rDo=r(Z8e," \u2014 "),fO=n(Z8e,"A",{href:!0});var qnt=s(fO);tDo=r(qnt,"XLMRobertaXLForQuestionAnswering"),qnt.forEach(t),aDo=r(Z8e," (XLM-RoBERTa-XL model)"),Z8e.forEach(t),nDo=i(X),nv=n(X,"LI",{});var e7e=s(nv);Cme=n(e7e,"STRONG",{});var Nnt=s(Cme);sDo=r(Nnt,"xlnet"),Nnt.forEach(t),lDo=r(e7e," \u2014 "),mO=n(e7e,"A",{href:!0});var jnt=s(mO);iDo=r(jnt,"XLNetForQuestionAnsweringSimple"),jnt.forEach(t),dDo=r(e7e," (XLNet model)"),e7e.forEach(t),cDo=i(X),sv=n(X,"LI",{});var o7e=s(sv);wme=n(o7e,"STRONG",{});var Dnt=s(wme);fDo=r(Dnt,"yoso"),Dnt.forEach(t),mDo=r(o7e," \u2014 "),gO=n(o7e,"A",{href:!0});var Gnt=s(gO);gDo=r(Gnt,"YosoForQuestionAnswering"),Gnt.forEach(t),hDo=r(o7e," (YOSO model)"),o7e.forEach(t),X.forEach(t),pDo=i(aa),lv=n(aa,"P",{});var r7e=s(lv);uDo=r(r7e,"The model is set in evaluation mode by default using "),Ame=n(r7e,"CODE",{});var Ont=s(Ame);_Do=r(Ont,"model.eval()"),Ont.forEach(t),bDo=r(r7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(r7e,"CODE",{});var Vnt=s(yme);vDo=r(Vnt,"model.train()"),Vnt.forEach(t),r7e.forEach(t),FDo=i(aa),T(iv.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),bBe=i(f),zi=n(f,"H2",{class:!0});var FIe=s(zi);dv=n(FIe,"A",{id:!0,class:!0,href:!0});var Xnt=s(dv);Lme=n(Xnt,"SPAN",{});var znt=s(Lme);T(Ny.$$.fragment,znt),znt.forEach(t),Xnt.forEach(t),TDo=i(FIe),xme=n(FIe,"SPAN",{});var Qnt=s(xme);MDo=r(Qnt,"AutoModelForTableQuestionAnswering"),Qnt.forEach(t),FIe.forEach(t),vBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(jy.$$.fragment,zs),EDo=i(zs),Qi=n(zs,"P",{});var uY=s(Qi);CDo=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hO=n(uY,"A",{href:!0});var Wnt=s(hO);wDo=r(Wnt,"from_pretrained()"),Wnt.forEach(t),ADo=r(uY," class method or the "),pO=n(uY,"A",{href:!0});var Hnt=s(pO);yDo=r(Hnt,"from_config()"),Hnt.forEach(t),LDo=r(uY,` class
method.`),uY.forEach(t),xDo=i(zs),Dy=n(zs,"P",{});var TIe=s(Dy);$Do=r(TIe,"This class cannot be instantiated directly using "),$me=n(TIe,"CODE",{});var Unt=s($me);kDo=r(Unt,"__init__()"),Unt.forEach(t),SDo=r(TIe," (throws an error)."),TIe.forEach(t),RDo=i(zs),it=n(zs,"DIV",{class:!0});var G3=s(it);T(Gy.$$.fragment,G3),BDo=i(G3),kme=n(G3,"P",{});var Jnt=s(kme);PDo=r(Jnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jnt.forEach(t),IDo=i(G3),Wi=n(G3,"P",{});var _Y=s(Wi);qDo=r(_Y,`Note:
Loading a model from its configuration file does `),Sme=n(_Y,"STRONG",{});var Ynt=s(Sme);NDo=r(Ynt,"not"),Ynt.forEach(t),jDo=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),uO=n(_Y,"A",{href:!0});var Knt=s(uO);DDo=r(Knt,"from_pretrained()"),Knt.forEach(t),GDo=r(_Y," to load the model weights."),_Y.forEach(t),ODo=i(G3),T(cv.$$.fragment,G3),G3.forEach(t),VDo=i(zs),to=n(zs,"DIV",{class:!0});var na=s(to);T(Oy.$$.fragment,na),XDo=i(na),Rme=n(na,"P",{});var Znt=s(Rme);zDo=r(Znt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Znt.forEach(t),QDo=i(na),Sa=n(na,"P",{});var O3=s(Sa);WDo=r(O3,"The model class to instantiate is selected based on the "),Bme=n(O3,"CODE",{});var est=s(Bme);HDo=r(est,"model_type"),est.forEach(t),UDo=r(O3,` property of the config object (either
passed as an argument or loaded from `),Pme=n(O3,"CODE",{});var ost=s(Pme);JDo=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),YDo=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ime=n(O3,"CODE",{});var rst=s(Ime);KDo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),ZDo=r(O3,":"),O3.forEach(t),eGo=i(na),qme=n(na,"UL",{});var tst=s(qme);fv=n(tst,"LI",{});var t7e=s(fv);Nme=n(t7e,"STRONG",{});var ast=s(Nme);oGo=r(ast,"tapas"),ast.forEach(t),rGo=r(t7e," \u2014 "),_O=n(t7e,"A",{href:!0});var nst=s(_O);tGo=r(nst,"TapasForQuestionAnswering"),nst.forEach(t),aGo=r(t7e," (TAPAS model)"),t7e.forEach(t),tst.forEach(t),nGo=i(na),mv=n(na,"P",{});var a7e=s(mv);sGo=r(a7e,"The model is set in evaluation mode by default using "),jme=n(a7e,"CODE",{});var sst=s(jme);lGo=r(sst,"model.eval()"),sst.forEach(t),iGo=r(a7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(a7e,"CODE",{});var lst=s(Dme);dGo=r(lst,"model.train()"),lst.forEach(t),a7e.forEach(t),cGo=i(na),T(gv.$$.fragment,na),na.forEach(t),zs.forEach(t),FBe=i(f),Hi=n(f,"H2",{class:!0});var MIe=s(Hi);hv=n(MIe,"A",{id:!0,class:!0,href:!0});var ist=s(hv);Gme=n(ist,"SPAN",{});var dst=s(Gme);T(Vy.$$.fragment,dst),dst.forEach(t),ist.forEach(t),fGo=i(MIe),Ome=n(MIe,"SPAN",{});var cst=s(Ome);mGo=r(cst,"AutoModelForImageClassification"),cst.forEach(t),MIe.forEach(t),TBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(Xy.$$.fragment,Qs),gGo=i(Qs),Ui=n(Qs,"P",{});var bY=s(Ui);hGo=r(bY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bO=n(bY,"A",{href:!0});var fst=s(bO);pGo=r(fst,"from_pretrained()"),fst.forEach(t),uGo=r(bY," class method or the "),vO=n(bY,"A",{href:!0});var mst=s(vO);_Go=r(mst,"from_config()"),mst.forEach(t),bGo=r(bY,` class
method.`),bY.forEach(t),vGo=i(Qs),zy=n(Qs,"P",{});var EIe=s(zy);FGo=r(EIe,"This class cannot be instantiated directly using "),Vme=n(EIe,"CODE",{});var gst=s(Vme);TGo=r(gst,"__init__()"),gst.forEach(t),MGo=r(EIe," (throws an error)."),EIe.forEach(t),EGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var V3=s(dt);T(Qy.$$.fragment,V3),CGo=i(V3),Xme=n(V3,"P",{});var hst=s(Xme);wGo=r(hst,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hst.forEach(t),AGo=i(V3),Ji=n(V3,"P",{});var vY=s(Ji);yGo=r(vY,`Note:
Loading a model from its configuration file does `),zme=n(vY,"STRONG",{});var pst=s(zme);LGo=r(pst,"not"),pst.forEach(t),xGo=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(vY,"A",{href:!0});var ust=s(FO);$Go=r(ust,"from_pretrained()"),ust.forEach(t),kGo=r(vY," to load the model weights."),vY.forEach(t),SGo=i(V3),T(pv.$$.fragment,V3),V3.forEach(t),RGo=i(Qs),ao=n(Qs,"DIV",{class:!0});var sa=s(ao);T(Wy.$$.fragment,sa),BGo=i(sa),Qme=n(sa,"P",{});var _st=s(Qme);PGo=r(_st,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_st.forEach(t),IGo=i(sa),Ra=n(sa,"P",{});var X3=s(Ra);qGo=r(X3,"The model class to instantiate is selected based on the "),Wme=n(X3,"CODE",{});var bst=s(Wme);NGo=r(bst,"model_type"),bst.forEach(t),jGo=r(X3,` property of the config object (either
passed as an argument or loaded from `),Hme=n(X3,"CODE",{});var vst=s(Hme);DGo=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),GGo=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(X3,"CODE",{});var Fst=s(Ume);OGo=r(Fst,"pretrained_model_name_or_path"),Fst.forEach(t),VGo=r(X3,":"),X3.forEach(t),XGo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);uv=n(Ee,"LI",{});var n7e=s(uv);Jme=n(n7e,"STRONG",{});var Tst=s(Jme);zGo=r(Tst,"beit"),Tst.forEach(t),QGo=r(n7e," \u2014 "),TO=n(n7e,"A",{href:!0});var Mst=s(TO);WGo=r(Mst,"BeitForImageClassification"),Mst.forEach(t),HGo=r(n7e," (BEiT model)"),n7e.forEach(t),UGo=i(Ee),_v=n(Ee,"LI",{});var s7e=s(_v);Yme=n(s7e,"STRONG",{});var Est=s(Yme);JGo=r(Est,"convnext"),Est.forEach(t),YGo=r(s7e," \u2014 "),MO=n(s7e,"A",{href:!0});var Cst=s(MO);KGo=r(Cst,"ConvNextForImageClassification"),Cst.forEach(t),ZGo=r(s7e," (ConvNext model)"),s7e.forEach(t),eOo=i(Ee),bv=n(Ee,"LI",{});var l7e=s(bv);Kme=n(l7e,"STRONG",{});var wst=s(Kme);oOo=r(wst,"data2vec-vision"),wst.forEach(t),rOo=r(l7e," \u2014 "),EO=n(l7e,"A",{href:!0});var Ast=s(EO);tOo=r(Ast,"Data2VecVisionForImageClassification"),Ast.forEach(t),aOo=r(l7e," (Data2VecVision model)"),l7e.forEach(t),nOo=i(Ee),Ls=n(Ee,"LI",{});var w9=s(Ls);Zme=n(w9,"STRONG",{});var yst=s(Zme);sOo=r(yst,"deit"),yst.forEach(t),lOo=r(w9," \u2014 "),CO=n(w9,"A",{href:!0});var Lst=s(CO);iOo=r(Lst,"DeiTForImageClassification"),Lst.forEach(t),dOo=r(w9," or "),wO=n(w9,"A",{href:!0});var xst=s(wO);cOo=r(xst,"DeiTForImageClassificationWithTeacher"),xst.forEach(t),fOo=r(w9," (DeiT model)"),w9.forEach(t),mOo=i(Ee),vv=n(Ee,"LI",{});var i7e=s(vv);ege=n(i7e,"STRONG",{});var $st=s(ege);gOo=r($st,"imagegpt"),$st.forEach(t),hOo=r(i7e," \u2014 "),AO=n(i7e,"A",{href:!0});var kst=s(AO);pOo=r(kst,"ImageGPTForImageClassification"),kst.forEach(t),uOo=r(i7e," (ImageGPT model)"),i7e.forEach(t),_Oo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);oge=n(ef,"STRONG",{});var Sst=s(oge);bOo=r(Sst,"perceiver"),Sst.forEach(t),vOo=r(ef," \u2014 "),yO=n(ef,"A",{href:!0});var Rst=s(yO);FOo=r(Rst,"PerceiverForImageClassificationLearned"),Rst.forEach(t),TOo=r(ef," or "),LO=n(ef,"A",{href:!0});var Bst=s(LO);MOo=r(Bst,"PerceiverForImageClassificationFourier"),Bst.forEach(t),EOo=r(ef," or "),xO=n(ef,"A",{href:!0});var Pst=s(xO);COo=r(Pst,"PerceiverForImageClassificationConvProcessing"),Pst.forEach(t),wOo=r(ef," (Perceiver model)"),ef.forEach(t),AOo=i(Ee),Fv=n(Ee,"LI",{});var d7e=s(Fv);rge=n(d7e,"STRONG",{});var Ist=s(rge);yOo=r(Ist,"poolformer"),Ist.forEach(t),LOo=r(d7e," \u2014 "),$O=n(d7e,"A",{href:!0});var qst=s($O);xOo=r(qst,"PoolFormerForImageClassification"),qst.forEach(t),$Oo=r(d7e," (PoolFormer model)"),d7e.forEach(t),kOo=i(Ee),Tv=n(Ee,"LI",{});var c7e=s(Tv);tge=n(c7e,"STRONG",{});var Nst=s(tge);SOo=r(Nst,"regnet"),Nst.forEach(t),ROo=r(c7e," \u2014 "),kO=n(c7e,"A",{href:!0});var jst=s(kO);BOo=r(jst,"RegNetForImageClassification"),jst.forEach(t),POo=r(c7e," (RegNet model)"),c7e.forEach(t),IOo=i(Ee),Mv=n(Ee,"LI",{});var f7e=s(Mv);age=n(f7e,"STRONG",{});var Dst=s(age);qOo=r(Dst,"resnet"),Dst.forEach(t),NOo=r(f7e," \u2014 "),SO=n(f7e,"A",{href:!0});var Gst=s(SO);jOo=r(Gst,"ResNetForImageClassification"),Gst.forEach(t),DOo=r(f7e," (ResNet model)"),f7e.forEach(t),GOo=i(Ee),Ev=n(Ee,"LI",{});var m7e=s(Ev);nge=n(m7e,"STRONG",{});var Ost=s(nge);OOo=r(Ost,"segformer"),Ost.forEach(t),VOo=r(m7e," \u2014 "),RO=n(m7e,"A",{href:!0});var Vst=s(RO);XOo=r(Vst,"SegformerForImageClassification"),Vst.forEach(t),zOo=r(m7e," (SegFormer model)"),m7e.forEach(t),QOo=i(Ee),Cv=n(Ee,"LI",{});var g7e=s(Cv);sge=n(g7e,"STRONG",{});var Xst=s(sge);WOo=r(Xst,"swin"),Xst.forEach(t),HOo=r(g7e," \u2014 "),BO=n(g7e,"A",{href:!0});var zst=s(BO);UOo=r(zst,"SwinForImageClassification"),zst.forEach(t),JOo=r(g7e," (Swin model)"),g7e.forEach(t),YOo=i(Ee),wv=n(Ee,"LI",{});var h7e=s(wv);lge=n(h7e,"STRONG",{});var Qst=s(lge);KOo=r(Qst,"van"),Qst.forEach(t),ZOo=r(h7e," \u2014 "),PO=n(h7e,"A",{href:!0});var Wst=s(PO);eVo=r(Wst,"VanForImageClassification"),Wst.forEach(t),oVo=r(h7e," (VAN model)"),h7e.forEach(t),rVo=i(Ee),Av=n(Ee,"LI",{});var p7e=s(Av);ige=n(p7e,"STRONG",{});var Hst=s(ige);tVo=r(Hst,"vit"),Hst.forEach(t),aVo=r(p7e," \u2014 "),IO=n(p7e,"A",{href:!0});var Ust=s(IO);nVo=r(Ust,"ViTForImageClassification"),Ust.forEach(t),sVo=r(p7e," (ViT model)"),p7e.forEach(t),Ee.forEach(t),lVo=i(sa),yv=n(sa,"P",{});var u7e=s(yv);iVo=r(u7e,"The model is set in evaluation mode by default using "),dge=n(u7e,"CODE",{});var Jst=s(dge);dVo=r(Jst,"model.eval()"),Jst.forEach(t),cVo=r(u7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(u7e,"CODE",{});var Yst=s(cge);fVo=r(Yst,"model.train()"),Yst.forEach(t),u7e.forEach(t),mVo=i(sa),T(Lv.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),MBe=i(f),Yi=n(f,"H2",{class:!0});var CIe=s(Yi);xv=n(CIe,"A",{id:!0,class:!0,href:!0});var Kst=s(xv);fge=n(Kst,"SPAN",{});var Zst=s(fge);T(Hy.$$.fragment,Zst),Zst.forEach(t),Kst.forEach(t),gVo=i(CIe),mge=n(CIe,"SPAN",{});var elt=s(mge);hVo=r(elt,"AutoModelForVision2Seq"),elt.forEach(t),CIe.forEach(t),EBe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(Uy.$$.fragment,Ws),pVo=i(Ws),Ki=n(Ws,"P",{});var FY=s(Ki);uVo=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qO=n(FY,"A",{href:!0});var olt=s(qO);_Vo=r(olt,"from_pretrained()"),olt.forEach(t),bVo=r(FY," class method or the "),NO=n(FY,"A",{href:!0});var rlt=s(NO);vVo=r(rlt,"from_config()"),rlt.forEach(t),FVo=r(FY,` class
method.`),FY.forEach(t),TVo=i(Ws),Jy=n(Ws,"P",{});var wIe=s(Jy);MVo=r(wIe,"This class cannot be instantiated directly using "),gge=n(wIe,"CODE",{});var tlt=s(gge);EVo=r(tlt,"__init__()"),tlt.forEach(t),CVo=r(wIe," (throws an error)."),wIe.forEach(t),wVo=i(Ws),ft=n(Ws,"DIV",{class:!0});var z3=s(ft);T(Yy.$$.fragment,z3),AVo=i(z3),hge=n(z3,"P",{});var alt=s(hge);yVo=r(alt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),alt.forEach(t),LVo=i(z3),Zi=n(z3,"P",{});var TY=s(Zi);xVo=r(TY,`Note:
Loading a model from its configuration file does `),pge=n(TY,"STRONG",{});var nlt=s(pge);$Vo=r(nlt,"not"),nlt.forEach(t),kVo=r(TY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jO=n(TY,"A",{href:!0});var slt=s(jO);SVo=r(slt,"from_pretrained()"),slt.forEach(t),RVo=r(TY," to load the model weights."),TY.forEach(t),BVo=i(z3),T($v.$$.fragment,z3),z3.forEach(t),PVo=i(Ws),no=n(Ws,"DIV",{class:!0});var la=s(no);T(Ky.$$.fragment,la),IVo=i(la),uge=n(la,"P",{});var llt=s(uge);qVo=r(llt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),llt.forEach(t),NVo=i(la),Ba=n(la,"P",{});var Q3=s(Ba);jVo=r(Q3,"The model class to instantiate is selected based on the "),_ge=n(Q3,"CODE",{});var ilt=s(_ge);DVo=r(ilt,"model_type"),ilt.forEach(t),GVo=r(Q3,` property of the config object (either
passed as an argument or loaded from `),bge=n(Q3,"CODE",{});var dlt=s(bge);OVo=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),VVo=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n(Q3,"CODE",{});var clt=s(vge);XVo=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),zVo=r(Q3,":"),Q3.forEach(t),QVo=i(la),Fge=n(la,"UL",{});var flt=s(Fge);kv=n(flt,"LI",{});var _7e=s(kv);Tge=n(_7e,"STRONG",{});var mlt=s(Tge);WVo=r(mlt,"vision-encoder-decoder"),mlt.forEach(t),HVo=r(_7e," \u2014 "),DO=n(_7e,"A",{href:!0});var glt=s(DO);UVo=r(glt,"VisionEncoderDecoderModel"),glt.forEach(t),JVo=r(_7e," (Vision Encoder decoder model)"),_7e.forEach(t),flt.forEach(t),YVo=i(la),Sv=n(la,"P",{});var b7e=s(Sv);KVo=r(b7e,"The model is set in evaluation mode by default using "),Mge=n(b7e,"CODE",{});var hlt=s(Mge);ZVo=r(hlt,"model.eval()"),hlt.forEach(t),eXo=r(b7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(b7e,"CODE",{});var plt=s(Ege);oXo=r(plt,"model.train()"),plt.forEach(t),b7e.forEach(t),rXo=i(la),T(Rv.$$.fragment,la),la.forEach(t),Ws.forEach(t),CBe=i(f),ed=n(f,"H2",{class:!0});var AIe=s(ed);Bv=n(AIe,"A",{id:!0,class:!0,href:!0});var ult=s(Bv);Cge=n(ult,"SPAN",{});var _lt=s(Cge);T(Zy.$$.fragment,_lt),_lt.forEach(t),ult.forEach(t),tXo=i(AIe),wge=n(AIe,"SPAN",{});var blt=s(wge);aXo=r(blt,"AutoModelForAudioClassification"),blt.forEach(t),AIe.forEach(t),wBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(eL.$$.fragment,Hs),nXo=i(Hs),od=n(Hs,"P",{});var MY=s(od);sXo=r(MY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GO=n(MY,"A",{href:!0});var vlt=s(GO);lXo=r(vlt,"from_pretrained()"),vlt.forEach(t),iXo=r(MY," class method or the "),OO=n(MY,"A",{href:!0});var Flt=s(OO);dXo=r(Flt,"from_config()"),Flt.forEach(t),cXo=r(MY,` class
method.`),MY.forEach(t),fXo=i(Hs),oL=n(Hs,"P",{});var yIe=s(oL);mXo=r(yIe,"This class cannot be instantiated directly using "),Age=n(yIe,"CODE",{});var Tlt=s(Age);gXo=r(Tlt,"__init__()"),Tlt.forEach(t),hXo=r(yIe," (throws an error)."),yIe.forEach(t),pXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var W3=s(mt);T(rL.$$.fragment,W3),uXo=i(W3),yge=n(W3,"P",{});var Mlt=s(yge);_Xo=r(Mlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Mlt.forEach(t),bXo=i(W3),rd=n(W3,"P",{});var EY=s(rd);vXo=r(EY,`Note:
Loading a model from its configuration file does `),Lge=n(EY,"STRONG",{});var Elt=s(Lge);FXo=r(Elt,"not"),Elt.forEach(t),TXo=r(EY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(EY,"A",{href:!0});var Clt=s(VO);MXo=r(Clt,"from_pretrained()"),Clt.forEach(t),EXo=r(EY," to load the model weights."),EY.forEach(t),CXo=i(W3),T(Pv.$$.fragment,W3),W3.forEach(t),wXo=i(Hs),so=n(Hs,"DIV",{class:!0});var ia=s(so);T(tL.$$.fragment,ia),AXo=i(ia),xge=n(ia,"P",{});var wlt=s(xge);yXo=r(wlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),wlt.forEach(t),LXo=i(ia),Pa=n(ia,"P",{});var H3=s(Pa);xXo=r(H3,"The model class to instantiate is selected based on the "),$ge=n(H3,"CODE",{});var Alt=s($ge);$Xo=r(Alt,"model_type"),Alt.forEach(t),kXo=r(H3,` property of the config object (either
passed as an argument or loaded from `),kge=n(H3,"CODE",{});var ylt=s(kge);SXo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),RXo=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sge=n(H3,"CODE",{});var Llt=s(Sge);BXo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),PXo=r(H3,":"),H3.forEach(t),IXo=i(ia),Ne=n(ia,"UL",{});var _o=s(Ne);Iv=n(_o,"LI",{});var v7e=s(Iv);Rge=n(v7e,"STRONG",{});var xlt=s(Rge);qXo=r(xlt,"data2vec-audio"),xlt.forEach(t),NXo=r(v7e," \u2014 "),XO=n(v7e,"A",{href:!0});var $lt=s(XO);jXo=r($lt,"Data2VecAudioForSequenceClassification"),$lt.forEach(t),DXo=r(v7e," (Data2VecAudio model)"),v7e.forEach(t),GXo=i(_o),qv=n(_o,"LI",{});var F7e=s(qv);Bge=n(F7e,"STRONG",{});var klt=s(Bge);OXo=r(klt,"hubert"),klt.forEach(t),VXo=r(F7e," \u2014 "),zO=n(F7e,"A",{href:!0});var Slt=s(zO);XXo=r(Slt,"HubertForSequenceClassification"),Slt.forEach(t),zXo=r(F7e," (Hubert model)"),F7e.forEach(t),QXo=i(_o),Nv=n(_o,"LI",{});var T7e=s(Nv);Pge=n(T7e,"STRONG",{});var Rlt=s(Pge);WXo=r(Rlt,"sew"),Rlt.forEach(t),HXo=r(T7e," \u2014 "),QO=n(T7e,"A",{href:!0});var Blt=s(QO);UXo=r(Blt,"SEWForSequenceClassification"),Blt.forEach(t),JXo=r(T7e," (SEW model)"),T7e.forEach(t),YXo=i(_o),jv=n(_o,"LI",{});var M7e=s(jv);Ige=n(M7e,"STRONG",{});var Plt=s(Ige);KXo=r(Plt,"sew-d"),Plt.forEach(t),ZXo=r(M7e," \u2014 "),WO=n(M7e,"A",{href:!0});var Ilt=s(WO);ezo=r(Ilt,"SEWDForSequenceClassification"),Ilt.forEach(t),ozo=r(M7e," (SEW-D model)"),M7e.forEach(t),rzo=i(_o),Dv=n(_o,"LI",{});var E7e=s(Dv);qge=n(E7e,"STRONG",{});var qlt=s(qge);tzo=r(qlt,"unispeech"),qlt.forEach(t),azo=r(E7e," \u2014 "),HO=n(E7e,"A",{href:!0});var Nlt=s(HO);nzo=r(Nlt,"UniSpeechForSequenceClassification"),Nlt.forEach(t),szo=r(E7e," (UniSpeech model)"),E7e.forEach(t),lzo=i(_o),Gv=n(_o,"LI",{});var C7e=s(Gv);Nge=n(C7e,"STRONG",{});var jlt=s(Nge);izo=r(jlt,"unispeech-sat"),jlt.forEach(t),dzo=r(C7e," \u2014 "),UO=n(C7e,"A",{href:!0});var Dlt=s(UO);czo=r(Dlt,"UniSpeechSatForSequenceClassification"),Dlt.forEach(t),fzo=r(C7e," (UniSpeechSat model)"),C7e.forEach(t),mzo=i(_o),Ov=n(_o,"LI",{});var w7e=s(Ov);jge=n(w7e,"STRONG",{});var Glt=s(jge);gzo=r(Glt,"wav2vec2"),Glt.forEach(t),hzo=r(w7e," \u2014 "),JO=n(w7e,"A",{href:!0});var Olt=s(JO);pzo=r(Olt,"Wav2Vec2ForSequenceClassification"),Olt.forEach(t),uzo=r(w7e," (Wav2Vec2 model)"),w7e.forEach(t),_zo=i(_o),Vv=n(_o,"LI",{});var A7e=s(Vv);Dge=n(A7e,"STRONG",{});var Vlt=s(Dge);bzo=r(Vlt,"wavlm"),Vlt.forEach(t),vzo=r(A7e," \u2014 "),YO=n(A7e,"A",{href:!0});var Xlt=s(YO);Fzo=r(Xlt,"WavLMForSequenceClassification"),Xlt.forEach(t),Tzo=r(A7e," (WavLM model)"),A7e.forEach(t),_o.forEach(t),Mzo=i(ia),Xv=n(ia,"P",{});var y7e=s(Xv);Ezo=r(y7e,"The model is set in evaluation mode by default using "),Gge=n(y7e,"CODE",{});var zlt=s(Gge);Czo=r(zlt,"model.eval()"),zlt.forEach(t),wzo=r(y7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oge=n(y7e,"CODE",{});var Qlt=s(Oge);Azo=r(Qlt,"model.train()"),Qlt.forEach(t),y7e.forEach(t),yzo=i(ia),T(zv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),ABe=i(f),td=n(f,"H2",{class:!0});var LIe=s(td);Qv=n(LIe,"A",{id:!0,class:!0,href:!0});var Wlt=s(Qv);Vge=n(Wlt,"SPAN",{});var Hlt=s(Vge);T(aL.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),Lzo=i(LIe),Xge=n(LIe,"SPAN",{});var Ult=s(Xge);xzo=r(Ult,"AutoModelForAudioFrameClassification"),Ult.forEach(t),LIe.forEach(t),yBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(nL.$$.fragment,Us),$zo=i(Us),ad=n(Us,"P",{});var CY=s(ad);kzo=r(CY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KO=n(CY,"A",{href:!0});var Jlt=s(KO);Szo=r(Jlt,"from_pretrained()"),Jlt.forEach(t),Rzo=r(CY," class method or the "),ZO=n(CY,"A",{href:!0});var Ylt=s(ZO);Bzo=r(Ylt,"from_config()"),Ylt.forEach(t),Pzo=r(CY,` class
method.`),CY.forEach(t),Izo=i(Us),sL=n(Us,"P",{});var xIe=s(sL);qzo=r(xIe,"This class cannot be instantiated directly using "),zge=n(xIe,"CODE",{});var Klt=s(zge);Nzo=r(Klt,"__init__()"),Klt.forEach(t),jzo=r(xIe," (throws an error)."),xIe.forEach(t),Dzo=i(Us),gt=n(Us,"DIV",{class:!0});var U3=s(gt);T(lL.$$.fragment,U3),Gzo=i(U3),Qge=n(U3,"P",{});var Zlt=s(Qge);Ozo=r(Zlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zlt.forEach(t),Vzo=i(U3),nd=n(U3,"P",{});var wY=s(nd);Xzo=r(wY,`Note:
Loading a model from its configuration file does `),Wge=n(wY,"STRONG",{});var eit=s(Wge);zzo=r(eit,"not"),eit.forEach(t),Qzo=r(wY,` load the model weights. It only affects the
model\u2019s configuration. Use `),eV=n(wY,"A",{href:!0});var oit=s(eV);Wzo=r(oit,"from_pretrained()"),oit.forEach(t),Hzo=r(wY," to load the model weights."),wY.forEach(t),Uzo=i(U3),T(Wv.$$.fragment,U3),U3.forEach(t),Jzo=i(Us),lo=n(Us,"DIV",{class:!0});var da=s(lo);T(iL.$$.fragment,da),Yzo=i(da),Hge=n(da,"P",{});var rit=s(Hge);Kzo=r(rit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rit.forEach(t),Zzo=i(da),Ia=n(da,"P",{});var J3=s(Ia);eQo=r(J3,"The model class to instantiate is selected based on the "),Uge=n(J3,"CODE",{});var tit=s(Uge);oQo=r(tit,"model_type"),tit.forEach(t),rQo=r(J3,` property of the config object (either
passed as an argument or loaded from `),Jge=n(J3,"CODE",{});var ait=s(Jge);tQo=r(ait,"pretrained_model_name_or_path"),ait.forEach(t),aQo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(J3,"CODE",{});var nit=s(Yge);nQo=r(nit,"pretrained_model_name_or_path"),nit.forEach(t),sQo=r(J3,":"),J3.forEach(t),lQo=i(da),qa=n(da,"UL",{});var Y3=s(qa);Hv=n(Y3,"LI",{});var L7e=s(Hv);Kge=n(L7e,"STRONG",{});var sit=s(Kge);iQo=r(sit,"data2vec-audio"),sit.forEach(t),dQo=r(L7e," \u2014 "),oV=n(L7e,"A",{href:!0});var lit=s(oV);cQo=r(lit,"Data2VecAudioForAudioFrameClassification"),lit.forEach(t),fQo=r(L7e," (Data2VecAudio model)"),L7e.forEach(t),mQo=i(Y3),Uv=n(Y3,"LI",{});var x7e=s(Uv);Zge=n(x7e,"STRONG",{});var iit=s(Zge);gQo=r(iit,"unispeech-sat"),iit.forEach(t),hQo=r(x7e," \u2014 "),rV=n(x7e,"A",{href:!0});var dit=s(rV);pQo=r(dit,"UniSpeechSatForAudioFrameClassification"),dit.forEach(t),uQo=r(x7e," (UniSpeechSat model)"),x7e.forEach(t),_Qo=i(Y3),Jv=n(Y3,"LI",{});var $7e=s(Jv);ehe=n($7e,"STRONG",{});var cit=s(ehe);bQo=r(cit,"wav2vec2"),cit.forEach(t),vQo=r($7e," \u2014 "),tV=n($7e,"A",{href:!0});var fit=s(tV);FQo=r(fit,"Wav2Vec2ForAudioFrameClassification"),fit.forEach(t),TQo=r($7e," (Wav2Vec2 model)"),$7e.forEach(t),MQo=i(Y3),Yv=n(Y3,"LI",{});var k7e=s(Yv);ohe=n(k7e,"STRONG",{});var mit=s(ohe);EQo=r(mit,"wavlm"),mit.forEach(t),CQo=r(k7e," \u2014 "),aV=n(k7e,"A",{href:!0});var git=s(aV);wQo=r(git,"WavLMForAudioFrameClassification"),git.forEach(t),AQo=r(k7e," (WavLM model)"),k7e.forEach(t),Y3.forEach(t),yQo=i(da),Kv=n(da,"P",{});var S7e=s(Kv);LQo=r(S7e,"The model is set in evaluation mode by default using "),rhe=n(S7e,"CODE",{});var hit=s(rhe);xQo=r(hit,"model.eval()"),hit.forEach(t),$Qo=r(S7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),the=n(S7e,"CODE",{});var pit=s(the);kQo=r(pit,"model.train()"),pit.forEach(t),S7e.forEach(t),SQo=i(da),T(Zv.$$.fragment,da),da.forEach(t),Us.forEach(t),LBe=i(f),sd=n(f,"H2",{class:!0});var $Ie=s(sd);eF=n($Ie,"A",{id:!0,class:!0,href:!0});var uit=s(eF);ahe=n(uit,"SPAN",{});var _it=s(ahe);T(dL.$$.fragment,_it),_it.forEach(t),uit.forEach(t),RQo=i($Ie),nhe=n($Ie,"SPAN",{});var bit=s(nhe);BQo=r(bit,"AutoModelForCTC"),bit.forEach(t),$Ie.forEach(t),xBe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(cL.$$.fragment,Js),PQo=i(Js),ld=n(Js,"P",{});var AY=s(ld);IQo=r(AY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nV=n(AY,"A",{href:!0});var vit=s(nV);qQo=r(vit,"from_pretrained()"),vit.forEach(t),NQo=r(AY," class method or the "),sV=n(AY,"A",{href:!0});var Fit=s(sV);jQo=r(Fit,"from_config()"),Fit.forEach(t),DQo=r(AY,` class
method.`),AY.forEach(t),GQo=i(Js),fL=n(Js,"P",{});var kIe=s(fL);OQo=r(kIe,"This class cannot be instantiated directly using "),she=n(kIe,"CODE",{});var Tit=s(she);VQo=r(Tit,"__init__()"),Tit.forEach(t),XQo=r(kIe," (throws an error)."),kIe.forEach(t),zQo=i(Js),ht=n(Js,"DIV",{class:!0});var K3=s(ht);T(mL.$$.fragment,K3),QQo=i(K3),lhe=n(K3,"P",{});var Mit=s(lhe);WQo=r(Mit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Mit.forEach(t),HQo=i(K3),id=n(K3,"P",{});var yY=s(id);UQo=r(yY,`Note:
Loading a model from its configuration file does `),ihe=n(yY,"STRONG",{});var Eit=s(ihe);JQo=r(Eit,"not"),Eit.forEach(t),YQo=r(yY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lV=n(yY,"A",{href:!0});var Cit=s(lV);KQo=r(Cit,"from_pretrained()"),Cit.forEach(t),ZQo=r(yY," to load the model weights."),yY.forEach(t),eWo=i(K3),T(oF.$$.fragment,K3),K3.forEach(t),oWo=i(Js),io=n(Js,"DIV",{class:!0});var ca=s(io);T(gL.$$.fragment,ca),rWo=i(ca),dhe=n(ca,"P",{});var wit=s(dhe);tWo=r(wit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wit.forEach(t),aWo=i(ca),Na=n(ca,"P",{});var Z3=s(Na);nWo=r(Z3,"The model class to instantiate is selected based on the "),che=n(Z3,"CODE",{});var Ait=s(che);sWo=r(Ait,"model_type"),Ait.forEach(t),lWo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),fhe=n(Z3,"CODE",{});var yit=s(fhe);iWo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),dWo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(Z3,"CODE",{});var Lit=s(mhe);cWo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),fWo=r(Z3,":"),Z3.forEach(t),mWo=i(ca),ke=n(ca,"UL",{});var Ge=s(ke);rF=n(Ge,"LI",{});var R7e=s(rF);ghe=n(R7e,"STRONG",{});var xit=s(ghe);gWo=r(xit,"data2vec-audio"),xit.forEach(t),hWo=r(R7e," \u2014 "),iV=n(R7e,"A",{href:!0});var $it=s(iV);pWo=r($it,"Data2VecAudioForCTC"),$it.forEach(t),uWo=r(R7e," (Data2VecAudio model)"),R7e.forEach(t),_Wo=i(Ge),tF=n(Ge,"LI",{});var B7e=s(tF);hhe=n(B7e,"STRONG",{});var kit=s(hhe);bWo=r(kit,"hubert"),kit.forEach(t),vWo=r(B7e," \u2014 "),dV=n(B7e,"A",{href:!0});var Sit=s(dV);FWo=r(Sit,"HubertForCTC"),Sit.forEach(t),TWo=r(B7e," (Hubert model)"),B7e.forEach(t),MWo=i(Ge),aF=n(Ge,"LI",{});var P7e=s(aF);phe=n(P7e,"STRONG",{});var Rit=s(phe);EWo=r(Rit,"mctc"),Rit.forEach(t),CWo=r(P7e," \u2014 "),uhe=n(P7e,"CODE",{});var Bit=s(uhe);wWo=r(Bit,"MCTCForCTC"),Bit.forEach(t),AWo=r(P7e," (MCTC model)"),P7e.forEach(t),yWo=i(Ge),nF=n(Ge,"LI",{});var I7e=s(nF);_he=n(I7e,"STRONG",{});var Pit=s(_he);LWo=r(Pit,"sew"),Pit.forEach(t),xWo=r(I7e," \u2014 "),cV=n(I7e,"A",{href:!0});var Iit=s(cV);$Wo=r(Iit,"SEWForCTC"),Iit.forEach(t),kWo=r(I7e," (SEW model)"),I7e.forEach(t),SWo=i(Ge),sF=n(Ge,"LI",{});var q7e=s(sF);bhe=n(q7e,"STRONG",{});var qit=s(bhe);RWo=r(qit,"sew-d"),qit.forEach(t),BWo=r(q7e," \u2014 "),fV=n(q7e,"A",{href:!0});var Nit=s(fV);PWo=r(Nit,"SEWDForCTC"),Nit.forEach(t),IWo=r(q7e," (SEW-D model)"),q7e.forEach(t),qWo=i(Ge),lF=n(Ge,"LI",{});var N7e=s(lF);vhe=n(N7e,"STRONG",{});var jit=s(vhe);NWo=r(jit,"unispeech"),jit.forEach(t),jWo=r(N7e," \u2014 "),mV=n(N7e,"A",{href:!0});var Dit=s(mV);DWo=r(Dit,"UniSpeechForCTC"),Dit.forEach(t),GWo=r(N7e," (UniSpeech model)"),N7e.forEach(t),OWo=i(Ge),iF=n(Ge,"LI",{});var j7e=s(iF);Fhe=n(j7e,"STRONG",{});var Git=s(Fhe);VWo=r(Git,"unispeech-sat"),Git.forEach(t),XWo=r(j7e," \u2014 "),gV=n(j7e,"A",{href:!0});var Oit=s(gV);zWo=r(Oit,"UniSpeechSatForCTC"),Oit.forEach(t),QWo=r(j7e," (UniSpeechSat model)"),j7e.forEach(t),WWo=i(Ge),dF=n(Ge,"LI",{});var D7e=s(dF);The=n(D7e,"STRONG",{});var Vit=s(The);HWo=r(Vit,"wav2vec2"),Vit.forEach(t),UWo=r(D7e," \u2014 "),hV=n(D7e,"A",{href:!0});var Xit=s(hV);JWo=r(Xit,"Wav2Vec2ForCTC"),Xit.forEach(t),YWo=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),KWo=i(Ge),cF=n(Ge,"LI",{});var G7e=s(cF);Mhe=n(G7e,"STRONG",{});var zit=s(Mhe);ZWo=r(zit,"wavlm"),zit.forEach(t),eHo=r(G7e," \u2014 "),pV=n(G7e,"A",{href:!0});var Qit=s(pV);oHo=r(Qit,"WavLMForCTC"),Qit.forEach(t),rHo=r(G7e," (WavLM model)"),G7e.forEach(t),Ge.forEach(t),tHo=i(ca),fF=n(ca,"P",{});var O7e=s(fF);aHo=r(O7e,"The model is set in evaluation mode by default using "),Ehe=n(O7e,"CODE",{});var Wit=s(Ehe);nHo=r(Wit,"model.eval()"),Wit.forEach(t),sHo=r(O7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(O7e,"CODE",{});var Hit=s(Che);lHo=r(Hit,"model.train()"),Hit.forEach(t),O7e.forEach(t),iHo=i(ca),T(mF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),$Be=i(f),dd=n(f,"H2",{class:!0});var SIe=s(dd);gF=n(SIe,"A",{id:!0,class:!0,href:!0});var Uit=s(gF);whe=n(Uit,"SPAN",{});var Jit=s(whe);T(hL.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),dHo=i(SIe),Ahe=n(SIe,"SPAN",{});var Yit=s(Ahe);cHo=r(Yit,"AutoModelForSpeechSeq2Seq"),Yit.forEach(t),SIe.forEach(t),kBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(pL.$$.fragment,Ys),fHo=i(Ys),cd=n(Ys,"P",{});var LY=s(cd);mHo=r(LY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uV=n(LY,"A",{href:!0});var Kit=s(uV);gHo=r(Kit,"from_pretrained()"),Kit.forEach(t),hHo=r(LY," class method or the "),_V=n(LY,"A",{href:!0});var Zit=s(_V);pHo=r(Zit,"from_config()"),Zit.forEach(t),uHo=r(LY,` class
method.`),LY.forEach(t),_Ho=i(Ys),uL=n(Ys,"P",{});var RIe=s(uL);bHo=r(RIe,"This class cannot be instantiated directly using "),yhe=n(RIe,"CODE",{});var edt=s(yhe);vHo=r(edt,"__init__()"),edt.forEach(t),FHo=r(RIe," (throws an error)."),RIe.forEach(t),THo=i(Ys),pt=n(Ys,"DIV",{class:!0});var ew=s(pt);T(_L.$$.fragment,ew),MHo=i(ew),Lhe=n(ew,"P",{});var odt=s(Lhe);EHo=r(odt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),odt.forEach(t),CHo=i(ew),fd=n(ew,"P",{});var xY=s(fd);wHo=r(xY,`Note:
Loading a model from its configuration file does `),xhe=n(xY,"STRONG",{});var rdt=s(xhe);AHo=r(rdt,"not"),rdt.forEach(t),yHo=r(xY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bV=n(xY,"A",{href:!0});var tdt=s(bV);LHo=r(tdt,"from_pretrained()"),tdt.forEach(t),xHo=r(xY," to load the model weights."),xY.forEach(t),$Ho=i(ew),T(hF.$$.fragment,ew),ew.forEach(t),kHo=i(Ys),co=n(Ys,"DIV",{class:!0});var fa=s(co);T(bL.$$.fragment,fa),SHo=i(fa),$he=n(fa,"P",{});var adt=s($he);RHo=r(adt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),adt.forEach(t),BHo=i(fa),ja=n(fa,"P",{});var ow=s(ja);PHo=r(ow,"The model class to instantiate is selected based on the "),khe=n(ow,"CODE",{});var ndt=s(khe);IHo=r(ndt,"model_type"),ndt.forEach(t),qHo=r(ow,` property of the config object (either
passed as an argument or loaded from `),She=n(ow,"CODE",{});var sdt=s(She);NHo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),jHo=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rhe=n(ow,"CODE",{});var ldt=s(Rhe);DHo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),GHo=r(ow,":"),ow.forEach(t),OHo=i(fa),vL=n(fa,"UL",{});var BIe=s(vL);pF=n(BIe,"LI",{});var V7e=s(pF);Bhe=n(V7e,"STRONG",{});var idt=s(Bhe);VHo=r(idt,"speech-encoder-decoder"),idt.forEach(t),XHo=r(V7e," \u2014 "),vV=n(V7e,"A",{href:!0});var ddt=s(vV);zHo=r(ddt,"SpeechEncoderDecoderModel"),ddt.forEach(t),QHo=r(V7e," (Speech Encoder decoder model)"),V7e.forEach(t),WHo=i(BIe),uF=n(BIe,"LI",{});var X7e=s(uF);Phe=n(X7e,"STRONG",{});var cdt=s(Phe);HHo=r(cdt,"speech_to_text"),cdt.forEach(t),UHo=r(X7e," \u2014 "),FV=n(X7e,"A",{href:!0});var fdt=s(FV);JHo=r(fdt,"Speech2TextForConditionalGeneration"),fdt.forEach(t),YHo=r(X7e," (Speech2Text model)"),X7e.forEach(t),BIe.forEach(t),KHo=i(fa),_F=n(fa,"P",{});var z7e=s(_F);ZHo=r(z7e,"The model is set in evaluation mode by default using "),Ihe=n(z7e,"CODE",{});var mdt=s(Ihe);eUo=r(mdt,"model.eval()"),mdt.forEach(t),oUo=r(z7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(z7e,"CODE",{});var gdt=s(qhe);rUo=r(gdt,"model.train()"),gdt.forEach(t),z7e.forEach(t),tUo=i(fa),T(bF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),SBe=i(f),md=n(f,"H2",{class:!0});var PIe=s(md);vF=n(PIe,"A",{id:!0,class:!0,href:!0});var hdt=s(vF);Nhe=n(hdt,"SPAN",{});var pdt=s(Nhe);T(FL.$$.fragment,pdt),pdt.forEach(t),hdt.forEach(t),aUo=i(PIe),jhe=n(PIe,"SPAN",{});var udt=s(jhe);nUo=r(udt,"AutoModelForAudioXVector"),udt.forEach(t),PIe.forEach(t),RBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(TL.$$.fragment,Ks),sUo=i(Ks),gd=n(Ks,"P",{});var $Y=s(gd);lUo=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TV=n($Y,"A",{href:!0});var _dt=s(TV);iUo=r(_dt,"from_pretrained()"),_dt.forEach(t),dUo=r($Y," class method or the "),MV=n($Y,"A",{href:!0});var bdt=s(MV);cUo=r(bdt,"from_config()"),bdt.forEach(t),fUo=r($Y,` class
method.`),$Y.forEach(t),mUo=i(Ks),ML=n(Ks,"P",{});var IIe=s(ML);gUo=r(IIe,"This class cannot be instantiated directly using "),Dhe=n(IIe,"CODE",{});var vdt=s(Dhe);hUo=r(vdt,"__init__()"),vdt.forEach(t),pUo=r(IIe," (throws an error)."),IIe.forEach(t),uUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var rw=s(ut);T(EL.$$.fragment,rw),_Uo=i(rw),Ghe=n(rw,"P",{});var Fdt=s(Ghe);bUo=r(Fdt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Fdt.forEach(t),vUo=i(rw),hd=n(rw,"P",{});var kY=s(hd);FUo=r(kY,`Note:
Loading a model from its configuration file does `),Ohe=n(kY,"STRONG",{});var Tdt=s(Ohe);TUo=r(Tdt,"not"),Tdt.forEach(t),MUo=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(kY,"A",{href:!0});var Mdt=s(EV);EUo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),CUo=r(kY," to load the model weights."),kY.forEach(t),wUo=i(rw),T(FF.$$.fragment,rw),rw.forEach(t),AUo=i(Ks),fo=n(Ks,"DIV",{class:!0});var ma=s(fo);T(CL.$$.fragment,ma),yUo=i(ma),Vhe=n(ma,"P",{});var Edt=s(Vhe);LUo=r(Edt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Edt.forEach(t),xUo=i(ma),Da=n(ma,"P",{});var tw=s(Da);$Uo=r(tw,"The model class to instantiate is selected based on the "),Xhe=n(tw,"CODE",{});var Cdt=s(Xhe);kUo=r(Cdt,"model_type"),Cdt.forEach(t),SUo=r(tw,` property of the config object (either
passed as an argument or loaded from `),zhe=n(tw,"CODE",{});var wdt=s(zhe);RUo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),BUo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(tw,"CODE",{});var Adt=s(Qhe);PUo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),IUo=r(tw,":"),tw.forEach(t),qUo=i(ma),Ga=n(ma,"UL",{});var aw=s(Ga);TF=n(aw,"LI",{});var Q7e=s(TF);Whe=n(Q7e,"STRONG",{});var ydt=s(Whe);NUo=r(ydt,"data2vec-audio"),ydt.forEach(t),jUo=r(Q7e," \u2014 "),CV=n(Q7e,"A",{href:!0});var Ldt=s(CV);DUo=r(Ldt,"Data2VecAudioForXVector"),Ldt.forEach(t),GUo=r(Q7e," (Data2VecAudio model)"),Q7e.forEach(t),OUo=i(aw),MF=n(aw,"LI",{});var W7e=s(MF);Hhe=n(W7e,"STRONG",{});var xdt=s(Hhe);VUo=r(xdt,"unispeech-sat"),xdt.forEach(t),XUo=r(W7e," \u2014 "),wV=n(W7e,"A",{href:!0});var $dt=s(wV);zUo=r($dt,"UniSpeechSatForXVector"),$dt.forEach(t),QUo=r(W7e," (UniSpeechSat model)"),W7e.forEach(t),WUo=i(aw),EF=n(aw,"LI",{});var H7e=s(EF);Uhe=n(H7e,"STRONG",{});var kdt=s(Uhe);HUo=r(kdt,"wav2vec2"),kdt.forEach(t),UUo=r(H7e," \u2014 "),AV=n(H7e,"A",{href:!0});var Sdt=s(AV);JUo=r(Sdt,"Wav2Vec2ForXVector"),Sdt.forEach(t),YUo=r(H7e," (Wav2Vec2 model)"),H7e.forEach(t),KUo=i(aw),CF=n(aw,"LI",{});var U7e=s(CF);Jhe=n(U7e,"STRONG",{});var Rdt=s(Jhe);ZUo=r(Rdt,"wavlm"),Rdt.forEach(t),eJo=r(U7e," \u2014 "),yV=n(U7e,"A",{href:!0});var Bdt=s(yV);oJo=r(Bdt,"WavLMForXVector"),Bdt.forEach(t),rJo=r(U7e," (WavLM model)"),U7e.forEach(t),aw.forEach(t),tJo=i(ma),wF=n(ma,"P",{});var J7e=s(wF);aJo=r(J7e,"The model is set in evaluation mode by default using "),Yhe=n(J7e,"CODE",{});var Pdt=s(Yhe);nJo=r(Pdt,"model.eval()"),Pdt.forEach(t),sJo=r(J7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Khe=n(J7e,"CODE",{});var Idt=s(Khe);lJo=r(Idt,"model.train()"),Idt.forEach(t),J7e.forEach(t),iJo=i(ma),T(AF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),BBe=i(f),pd=n(f,"H2",{class:!0});var qIe=s(pd);yF=n(qIe,"A",{id:!0,class:!0,href:!0});var qdt=s(yF);Zhe=n(qdt,"SPAN",{});var Ndt=s(Zhe);T(wL.$$.fragment,Ndt),Ndt.forEach(t),qdt.forEach(t),dJo=i(qIe),epe=n(qIe,"SPAN",{});var jdt=s(epe);cJo=r(jdt,"AutoModelForMaskedImageModeling"),jdt.forEach(t),qIe.forEach(t),PBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(AL.$$.fragment,Zs),fJo=i(Zs),ud=n(Zs,"P",{});var SY=s(ud);mJo=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LV=n(SY,"A",{href:!0});var Ddt=s(LV);gJo=r(Ddt,"from_pretrained()"),Ddt.forEach(t),hJo=r(SY," class method or the "),xV=n(SY,"A",{href:!0});var Gdt=s(xV);pJo=r(Gdt,"from_config()"),Gdt.forEach(t),uJo=r(SY,` class
method.`),SY.forEach(t),_Jo=i(Zs),yL=n(Zs,"P",{});var NIe=s(yL);bJo=r(NIe,"This class cannot be instantiated directly using "),ope=n(NIe,"CODE",{});var Odt=s(ope);vJo=r(Odt,"__init__()"),Odt.forEach(t),FJo=r(NIe," (throws an error)."),NIe.forEach(t),TJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var nw=s(_t);T(LL.$$.fragment,nw),MJo=i(nw),rpe=n(nw,"P",{});var Vdt=s(rpe);EJo=r(Vdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Vdt.forEach(t),CJo=i(nw),_d=n(nw,"P",{});var RY=s(_d);wJo=r(RY,`Note:
Loading a model from its configuration file does `),tpe=n(RY,"STRONG",{});var Xdt=s(tpe);AJo=r(Xdt,"not"),Xdt.forEach(t),yJo=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(RY,"A",{href:!0});var zdt=s($V);LJo=r(zdt,"from_pretrained()"),zdt.forEach(t),xJo=r(RY," to load the model weights."),RY.forEach(t),$Jo=i(nw),T(LF.$$.fragment,nw),nw.forEach(t),kJo=i(Zs),mo=n(Zs,"DIV",{class:!0});var ga=s(mo);T(xL.$$.fragment,ga),SJo=i(ga),ape=n(ga,"P",{});var Qdt=s(ape);RJo=r(Qdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Qdt.forEach(t),BJo=i(ga),Oa=n(ga,"P",{});var sw=s(Oa);PJo=r(sw,"The model class to instantiate is selected based on the "),npe=n(sw,"CODE",{});var Wdt=s(npe);IJo=r(Wdt,"model_type"),Wdt.forEach(t),qJo=r(sw,` property of the config object (either
passed as an argument or loaded from `),spe=n(sw,"CODE",{});var Hdt=s(spe);NJo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),jJo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lpe=n(sw,"CODE",{});var Udt=s(lpe);DJo=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),GJo=r(sw,":"),sw.forEach(t),OJo=i(ga),bd=n(ga,"UL",{});var BY=s(bd);xF=n(BY,"LI",{});var Y7e=s(xF);ipe=n(Y7e,"STRONG",{});var Jdt=s(ipe);VJo=r(Jdt,"deit"),Jdt.forEach(t),XJo=r(Y7e," \u2014 "),kV=n(Y7e,"A",{href:!0});var Ydt=s(kV);zJo=r(Ydt,"DeiTForMaskedImageModeling"),Ydt.forEach(t),QJo=r(Y7e," (DeiT model)"),Y7e.forEach(t),WJo=i(BY),$F=n(BY,"LI",{});var K7e=s($F);dpe=n(K7e,"STRONG",{});var Kdt=s(dpe);HJo=r(Kdt,"swin"),Kdt.forEach(t),UJo=r(K7e," \u2014 "),SV=n(K7e,"A",{href:!0});var Zdt=s(SV);JJo=r(Zdt,"SwinForMaskedImageModeling"),Zdt.forEach(t),YJo=r(K7e," (Swin model)"),K7e.forEach(t),KJo=i(BY),kF=n(BY,"LI",{});var Z7e=s(kF);cpe=n(Z7e,"STRONG",{});var ect=s(cpe);ZJo=r(ect,"vit"),ect.forEach(t),eYo=r(Z7e," \u2014 "),RV=n(Z7e,"A",{href:!0});var oct=s(RV);oYo=r(oct,"ViTForMaskedImageModeling"),oct.forEach(t),rYo=r(Z7e," (ViT model)"),Z7e.forEach(t),BY.forEach(t),tYo=i(ga),SF=n(ga,"P",{});var exe=s(SF);aYo=r(exe,"The model is set in evaluation mode by default using "),fpe=n(exe,"CODE",{});var rct=s(fpe);nYo=r(rct,"model.eval()"),rct.forEach(t),sYo=r(exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mpe=n(exe,"CODE",{});var tct=s(mpe);lYo=r(tct,"model.train()"),tct.forEach(t),exe.forEach(t),iYo=i(ga),T(RF.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),IBe=i(f),vd=n(f,"H2",{class:!0});var jIe=s(vd);BF=n(jIe,"A",{id:!0,class:!0,href:!0});var act=s(BF);gpe=n(act,"SPAN",{});var nct=s(gpe);T($L.$$.fragment,nct),nct.forEach(t),act.forEach(t),dYo=i(jIe),hpe=n(jIe,"SPAN",{});var sct=s(hpe);cYo=r(sct,"AutoModelForObjectDetection"),sct.forEach(t),jIe.forEach(t),qBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(kL.$$.fragment,el),fYo=i(el),Fd=n(el,"P",{});var PY=s(Fd);mYo=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BV=n(PY,"A",{href:!0});var lct=s(BV);gYo=r(lct,"from_pretrained()"),lct.forEach(t),hYo=r(PY," class method or the "),PV=n(PY,"A",{href:!0});var ict=s(PV);pYo=r(ict,"from_config()"),ict.forEach(t),uYo=r(PY,` class
method.`),PY.forEach(t),_Yo=i(el),SL=n(el,"P",{});var DIe=s(SL);bYo=r(DIe,"This class cannot be instantiated directly using "),ppe=n(DIe,"CODE",{});var dct=s(ppe);vYo=r(dct,"__init__()"),dct.forEach(t),FYo=r(DIe," (throws an error)."),DIe.forEach(t),TYo=i(el),bt=n(el,"DIV",{class:!0});var lw=s(bt);T(RL.$$.fragment,lw),MYo=i(lw),upe=n(lw,"P",{});var cct=s(upe);EYo=r(cct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),cct.forEach(t),CYo=i(lw),Td=n(lw,"P",{});var IY=s(Td);wYo=r(IY,`Note:
Loading a model from its configuration file does `),_pe=n(IY,"STRONG",{});var fct=s(_pe);AYo=r(fct,"not"),fct.forEach(t),yYo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(IY,"A",{href:!0});var mct=s(IV);LYo=r(mct,"from_pretrained()"),mct.forEach(t),xYo=r(IY," to load the model weights."),IY.forEach(t),$Yo=i(lw),T(PF.$$.fragment,lw),lw.forEach(t),kYo=i(el),go=n(el,"DIV",{class:!0});var ha=s(go);T(BL.$$.fragment,ha),SYo=i(ha),bpe=n(ha,"P",{});var gct=s(bpe);RYo=r(gct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),gct.forEach(t),BYo=i(ha),Va=n(ha,"P",{});var iw=s(Va);PYo=r(iw,"The model class to instantiate is selected based on the "),vpe=n(iw,"CODE",{});var hct=s(vpe);IYo=r(hct,"model_type"),hct.forEach(t),qYo=r(iw,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(iw,"CODE",{});var pct=s(Fpe);NYo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),jYo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(iw,"CODE",{});var uct=s(Tpe);DYo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),GYo=r(iw,":"),iw.forEach(t),OYo=i(ha),Mpe=n(ha,"UL",{});var _ct=s(Mpe);IF=n(_ct,"LI",{});var oxe=s(IF);Epe=n(oxe,"STRONG",{});var bct=s(Epe);VYo=r(bct,"detr"),bct.forEach(t),XYo=r(oxe," \u2014 "),qV=n(oxe,"A",{href:!0});var vct=s(qV);zYo=r(vct,"DetrForObjectDetection"),vct.forEach(t),QYo=r(oxe," (DETR model)"),oxe.forEach(t),_ct.forEach(t),WYo=i(ha),qF=n(ha,"P",{});var rxe=s(qF);HYo=r(rxe,"The model is set in evaluation mode by default using "),Cpe=n(rxe,"CODE",{});var Fct=s(Cpe);UYo=r(Fct,"model.eval()"),Fct.forEach(t),JYo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wpe=n(rxe,"CODE",{});var Tct=s(wpe);YYo=r(Tct,"model.train()"),Tct.forEach(t),rxe.forEach(t),KYo=i(ha),T(NF.$$.fragment,ha),ha.forEach(t),el.forEach(t),NBe=i(f),Md=n(f,"H2",{class:!0});var GIe=s(Md);jF=n(GIe,"A",{id:!0,class:!0,href:!0});var Mct=s(jF);Ape=n(Mct,"SPAN",{});var Ect=s(Ape);T(PL.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),ZYo=i(GIe),ype=n(GIe,"SPAN",{});var Cct=s(ype);eKo=r(Cct,"AutoModelForImageSegmentation"),Cct.forEach(t),GIe.forEach(t),jBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(IL.$$.fragment,ol),oKo=i(ol),Ed=n(ol,"P",{});var qY=s(Ed);rKo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NV=n(qY,"A",{href:!0});var wct=s(NV);tKo=r(wct,"from_pretrained()"),wct.forEach(t),aKo=r(qY," class method or the "),jV=n(qY,"A",{href:!0});var Act=s(jV);nKo=r(Act,"from_config()"),Act.forEach(t),sKo=r(qY,` class
method.`),qY.forEach(t),lKo=i(ol),qL=n(ol,"P",{});var OIe=s(qL);iKo=r(OIe,"This class cannot be instantiated directly using "),Lpe=n(OIe,"CODE",{});var yct=s(Lpe);dKo=r(yct,"__init__()"),yct.forEach(t),cKo=r(OIe," (throws an error)."),OIe.forEach(t),fKo=i(ol),vt=n(ol,"DIV",{class:!0});var dw=s(vt);T(NL.$$.fragment,dw),mKo=i(dw),xpe=n(dw,"P",{});var Lct=s(xpe);gKo=r(Lct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Lct.forEach(t),hKo=i(dw),Cd=n(dw,"P",{});var NY=s(Cd);pKo=r(NY,`Note:
Loading a model from its configuration file does `),$pe=n(NY,"STRONG",{});var xct=s($pe);uKo=r(xct,"not"),xct.forEach(t),_Ko=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(NY,"A",{href:!0});var $ct=s(DV);bKo=r($ct,"from_pretrained()"),$ct.forEach(t),vKo=r(NY," to load the model weights."),NY.forEach(t),FKo=i(dw),T(DF.$$.fragment,dw),dw.forEach(t),TKo=i(ol),ho=n(ol,"DIV",{class:!0});var pa=s(ho);T(jL.$$.fragment,pa),MKo=i(pa),kpe=n(pa,"P",{});var kct=s(kpe);EKo=r(kct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),kct.forEach(t),CKo=i(pa),Xa=n(pa,"P",{});var cw=s(Xa);wKo=r(cw,"The model class to instantiate is selected based on the "),Spe=n(cw,"CODE",{});var Sct=s(Spe);AKo=r(Sct,"model_type"),Sct.forEach(t),yKo=r(cw,` property of the config object (either
passed as an argument or loaded from `),Rpe=n(cw,"CODE",{});var Rct=s(Rpe);LKo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),xKo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(cw,"CODE",{});var Bct=s(Bpe);$Ko=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),kKo=r(cw,":"),cw.forEach(t),SKo=i(pa),Ppe=n(pa,"UL",{});var Pct=s(Ppe);GF=n(Pct,"LI",{});var txe=s(GF);Ipe=n(txe,"STRONG",{});var Ict=s(Ipe);RKo=r(Ict,"detr"),Ict.forEach(t),BKo=r(txe," \u2014 "),GV=n(txe,"A",{href:!0});var qct=s(GV);PKo=r(qct,"DetrForSegmentation"),qct.forEach(t),IKo=r(txe," (DETR model)"),txe.forEach(t),Pct.forEach(t),qKo=i(pa),OF=n(pa,"P",{});var axe=s(OF);NKo=r(axe,"The model is set in evaluation mode by default using "),qpe=n(axe,"CODE",{});var Nct=s(qpe);jKo=r(Nct,"model.eval()"),Nct.forEach(t),DKo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Npe=n(axe,"CODE",{});var jct=s(Npe);GKo=r(jct,"model.train()"),jct.forEach(t),axe.forEach(t),OKo=i(pa),T(VF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),DBe=i(f),wd=n(f,"H2",{class:!0});var VIe=s(wd);XF=n(VIe,"A",{id:!0,class:!0,href:!0});var Dct=s(XF);jpe=n(Dct,"SPAN",{});var Gct=s(jpe);T(DL.$$.fragment,Gct),Gct.forEach(t),Dct.forEach(t),VKo=i(VIe),Dpe=n(VIe,"SPAN",{});var Oct=s(Dpe);XKo=r(Oct,"AutoModelForSemanticSegmentation"),Oct.forEach(t),VIe.forEach(t),GBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(GL.$$.fragment,rl),zKo=i(rl),Ad=n(rl,"P",{});var jY=s(Ad);QKo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OV=n(jY,"A",{href:!0});var Vct=s(OV);WKo=r(Vct,"from_pretrained()"),Vct.forEach(t),HKo=r(jY," class method or the "),VV=n(jY,"A",{href:!0});var Xct=s(VV);UKo=r(Xct,"from_config()"),Xct.forEach(t),JKo=r(jY,` class
method.`),jY.forEach(t),YKo=i(rl),OL=n(rl,"P",{});var XIe=s(OL);KKo=r(XIe,"This class cannot be instantiated directly using "),Gpe=n(XIe,"CODE",{});var zct=s(Gpe);ZKo=r(zct,"__init__()"),zct.forEach(t),eZo=r(XIe," (throws an error)."),XIe.forEach(t),oZo=i(rl),Ft=n(rl,"DIV",{class:!0});var fw=s(Ft);T(VL.$$.fragment,fw),rZo=i(fw),Ope=n(fw,"P",{});var Qct=s(Ope);tZo=r(Qct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Qct.forEach(t),aZo=i(fw),yd=n(fw,"P",{});var DY=s(yd);nZo=r(DY,`Note:
Loading a model from its configuration file does `),Vpe=n(DY,"STRONG",{});var Wct=s(Vpe);sZo=r(Wct,"not"),Wct.forEach(t),lZo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(DY,"A",{href:!0});var Hct=s(XV);iZo=r(Hct,"from_pretrained()"),Hct.forEach(t),dZo=r(DY," to load the model weights."),DY.forEach(t),cZo=i(fw),T(zF.$$.fragment,fw),fw.forEach(t),fZo=i(rl),po=n(rl,"DIV",{class:!0});var ua=s(po);T(XL.$$.fragment,ua),mZo=i(ua),Xpe=n(ua,"P",{});var Uct=s(Xpe);gZo=r(Uct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Uct.forEach(t),hZo=i(ua),za=n(ua,"P",{});var mw=s(za);pZo=r(mw,"The model class to instantiate is selected based on the "),zpe=n(mw,"CODE",{});var Jct=s(zpe);uZo=r(Jct,"model_type"),Jct.forEach(t),_Zo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(mw,"CODE",{});var Yct=s(Qpe);bZo=r(Yct,"pretrained_model_name_or_path"),Yct.forEach(t),vZo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(mw,"CODE",{});var Kct=s(Wpe);FZo=r(Kct,"pretrained_model_name_or_path"),Kct.forEach(t),TZo=r(mw,":"),mw.forEach(t),MZo=i(ua),Qa=n(ua,"UL",{});var gw=s(Qa);QF=n(gw,"LI",{});var nxe=s(QF);Hpe=n(nxe,"STRONG",{});var Zct=s(Hpe);EZo=r(Zct,"beit"),Zct.forEach(t),CZo=r(nxe," \u2014 "),zV=n(nxe,"A",{href:!0});var eft=s(zV);wZo=r(eft,"BeitForSemanticSegmentation"),eft.forEach(t),AZo=r(nxe," (BEiT model)"),nxe.forEach(t),yZo=i(gw),WF=n(gw,"LI",{});var sxe=s(WF);Upe=n(sxe,"STRONG",{});var oft=s(Upe);LZo=r(oft,"data2vec-vision"),oft.forEach(t),xZo=r(sxe," \u2014 "),QV=n(sxe,"A",{href:!0});var rft=s(QV);$Zo=r(rft,"Data2VecVisionForSemanticSegmentation"),rft.forEach(t),kZo=r(sxe," (Data2VecVision model)"),sxe.forEach(t),SZo=i(gw),HF=n(gw,"LI",{});var lxe=s(HF);Jpe=n(lxe,"STRONG",{});var tft=s(Jpe);RZo=r(tft,"dpt"),tft.forEach(t),BZo=r(lxe," \u2014 "),WV=n(lxe,"A",{href:!0});var aft=s(WV);PZo=r(aft,"DPTForSemanticSegmentation"),aft.forEach(t),IZo=r(lxe," (DPT model)"),lxe.forEach(t),qZo=i(gw),UF=n(gw,"LI",{});var ixe=s(UF);Ype=n(ixe,"STRONG",{});var nft=s(Ype);NZo=r(nft,"segformer"),nft.forEach(t),jZo=r(ixe," \u2014 "),HV=n(ixe,"A",{href:!0});var sft=s(HV);DZo=r(sft,"SegformerForSemanticSegmentation"),sft.forEach(t),GZo=r(ixe," (SegFormer model)"),ixe.forEach(t),gw.forEach(t),OZo=i(ua),JF=n(ua,"P",{});var dxe=s(JF);VZo=r(dxe,"The model is set in evaluation mode by default using "),Kpe=n(dxe,"CODE",{});var lft=s(Kpe);XZo=r(lft,"model.eval()"),lft.forEach(t),zZo=r(dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(dxe,"CODE",{});var ift=s(Zpe);QZo=r(ift,"model.train()"),ift.forEach(t),dxe.forEach(t),WZo=i(ua),T(YF.$$.fragment,ua),ua.forEach(t),rl.forEach(t),OBe=i(f),Ld=n(f,"H2",{class:!0});var zIe=s(Ld);KF=n(zIe,"A",{id:!0,class:!0,href:!0});var dft=s(KF);eue=n(dft,"SPAN",{});var cft=s(eue);T(zL.$$.fragment,cft),cft.forEach(t),dft.forEach(t),HZo=i(zIe),oue=n(zIe,"SPAN",{});var fft=s(oue);UZo=r(fft,"AutoModelForInstanceSegmentation"),fft.forEach(t),zIe.forEach(t),VBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(QL.$$.fragment,tl),JZo=i(tl),xd=n(tl,"P",{});var GY=s(xd);YZo=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),UV=n(GY,"A",{href:!0});var mft=s(UV);KZo=r(mft,"from_pretrained()"),mft.forEach(t),ZZo=r(GY," class method or the "),JV=n(GY,"A",{href:!0});var gft=s(JV);eer=r(gft,"from_config()"),gft.forEach(t),oer=r(GY,` class
method.`),GY.forEach(t),rer=i(tl),WL=n(tl,"P",{});var QIe=s(WL);ter=r(QIe,"This class cannot be instantiated directly using "),rue=n(QIe,"CODE",{});var hft=s(rue);aer=r(hft,"__init__()"),hft.forEach(t),ner=r(QIe," (throws an error)."),QIe.forEach(t),ser=i(tl),Tt=n(tl,"DIV",{class:!0});var hw=s(Tt);T(HL.$$.fragment,hw),ler=i(hw),tue=n(hw,"P",{});var pft=s(tue);ier=r(pft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pft.forEach(t),der=i(hw),$d=n(hw,"P",{});var OY=s($d);cer=r(OY,`Note:
Loading a model from its configuration file does `),aue=n(OY,"STRONG",{});var uft=s(aue);fer=r(uft,"not"),uft.forEach(t),mer=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(OY,"A",{href:!0});var _ft=s(YV);ger=r(_ft,"from_pretrained()"),_ft.forEach(t),her=r(OY," to load the model weights."),OY.forEach(t),per=i(hw),T(ZF.$$.fragment,hw),hw.forEach(t),uer=i(tl),uo=n(tl,"DIV",{class:!0});var _a=s(uo);T(UL.$$.fragment,_a),_er=i(_a),nue=n(_a,"P",{});var bft=s(nue);ber=r(bft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),bft.forEach(t),ver=i(_a),Wa=n(_a,"P",{});var pw=s(Wa);Fer=r(pw,"The model class to instantiate is selected based on the "),sue=n(pw,"CODE",{});var vft=s(sue);Ter=r(vft,"model_type"),vft.forEach(t),Mer=r(pw,` property of the config object (either
passed as an argument or loaded from `),lue=n(pw,"CODE",{});var Fft=s(lue);Eer=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),Cer=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(pw,"CODE",{});var Tft=s(iue);wer=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),Aer=r(pw,":"),pw.forEach(t),yer=i(_a),due=n(_a,"UL",{});var Mft=s(due);e0=n(Mft,"LI",{});var cxe=s(e0);cue=n(cxe,"STRONG",{});var Eft=s(cue);Ler=r(Eft,"maskformer"),Eft.forEach(t),xer=r(cxe," \u2014 "),KV=n(cxe,"A",{href:!0});var Cft=s(KV);$er=r(Cft,"MaskFormerForInstanceSegmentation"),Cft.forEach(t),ker=r(cxe," (MaskFormer model)"),cxe.forEach(t),Mft.forEach(t),Ser=i(_a),o0=n(_a,"P",{});var fxe=s(o0);Rer=r(fxe,"The model is set in evaluation mode by default using "),fue=n(fxe,"CODE",{});var wft=s(fue);Ber=r(wft,"model.eval()"),wft.forEach(t),Per=r(fxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mue=n(fxe,"CODE",{});var Aft=s(mue);Ier=r(Aft,"model.train()"),Aft.forEach(t),fxe.forEach(t),qer=i(_a),T(r0.$$.fragment,_a),_a.forEach(t),tl.forEach(t),XBe=i(f),kd=n(f,"H2",{class:!0});var WIe=s(kd);t0=n(WIe,"A",{id:!0,class:!0,href:!0});var yft=s(t0);gue=n(yft,"SPAN",{});var Lft=s(gue);T(JL.$$.fragment,Lft),Lft.forEach(t),yft.forEach(t),Ner=i(WIe),hue=n(WIe,"SPAN",{});var xft=s(hue);jer=r(xft,"TFAutoModel"),xft.forEach(t),WIe.forEach(t),zBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(YL.$$.fragment,al),Der=i(al),Sd=n(al,"P",{});var VY=s(Sd);Ger=r(VY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZV=n(VY,"A",{href:!0});var $ft=s(ZV);Oer=r($ft,"from_pretrained()"),$ft.forEach(t),Ver=r(VY," class method or the "),eX=n(VY,"A",{href:!0});var kft=s(eX);Xer=r(kft,"from_config()"),kft.forEach(t),zer=r(VY,` class
method.`),VY.forEach(t),Qer=i(al),KL=n(al,"P",{});var HIe=s(KL);Wer=r(HIe,"This class cannot be instantiated directly using "),pue=n(HIe,"CODE",{});var Sft=s(pue);Her=r(Sft,"__init__()"),Sft.forEach(t),Uer=r(HIe," (throws an error)."),HIe.forEach(t),Jer=i(al),Mt=n(al,"DIV",{class:!0});var uw=s(Mt);T(ZL.$$.fragment,uw),Yer=i(uw),uue=n(uw,"P",{});var Rft=s(uue);Ker=r(Rft,"Instantiates one of the base model classes of the library from a configuration."),Rft.forEach(t),Zer=i(uw),Rd=n(uw,"P",{});var XY=s(Rd);eor=r(XY,`Note:
Loading a model from its configuration file does `),_ue=n(XY,"STRONG",{});var Bft=s(_ue);oor=r(Bft,"not"),Bft.forEach(t),ror=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(XY,"A",{href:!0});var Pft=s(oX);tor=r(Pft,"from_pretrained()"),Pft.forEach(t),aor=r(XY," to load the model weights."),XY.forEach(t),nor=i(uw),T(a0.$$.fragment,uw),uw.forEach(t),sor=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(e8.$$.fragment,nl),lor=i(nl),bue=n(nl,"P",{});var Ift=s(bue);ior=r(Ift,"Instantiate one of the base model classes of the library from a pretrained model."),Ift.forEach(t),dor=i(nl),Ha=n(nl,"P",{});var _w=s(Ha);cor=r(_w,"The model class to instantiate is selected based on the "),vue=n(_w,"CODE",{});var qft=s(vue);mor=r(qft,"model_type"),qft.forEach(t),gor=r(_w,` property of the config object (either
passed as an argument or loaded from `),Fue=n(_w,"CODE",{});var Nft=s(Fue);hor=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),por=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tue=n(_w,"CODE",{});var jft=s(Tue);uor=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),_or=r(_w,":"),_w.forEach(t),bor=i(nl),j=n(nl,"UL",{});var D=s(j);n0=n(D,"LI",{});var mxe=s(n0);Mue=n(mxe,"STRONG",{});var Dft=s(Mue);vor=r(Dft,"albert"),Dft.forEach(t),For=r(mxe," \u2014 "),rX=n(mxe,"A",{href:!0});var Gft=s(rX);Tor=r(Gft,"TFAlbertModel"),Gft.forEach(t),Mor=r(mxe," (ALBERT model)"),mxe.forEach(t),Eor=i(D),s0=n(D,"LI",{});var gxe=s(s0);Eue=n(gxe,"STRONG",{});var Oft=s(Eue);Cor=r(Oft,"bart"),Oft.forEach(t),wor=r(gxe," \u2014 "),tX=n(gxe,"A",{href:!0});var Vft=s(tX);Aor=r(Vft,"TFBartModel"),Vft.forEach(t),yor=r(gxe," (BART model)"),gxe.forEach(t),Lor=i(D),l0=n(D,"LI",{});var hxe=s(l0);Cue=n(hxe,"STRONG",{});var Xft=s(Cue);xor=r(Xft,"bert"),Xft.forEach(t),$or=r(hxe," \u2014 "),aX=n(hxe,"A",{href:!0});var zft=s(aX);kor=r(zft,"TFBertModel"),zft.forEach(t),Sor=r(hxe," (BERT model)"),hxe.forEach(t),Ror=i(D),i0=n(D,"LI",{});var pxe=s(i0);wue=n(pxe,"STRONG",{});var Qft=s(wue);Bor=r(Qft,"blenderbot"),Qft.forEach(t),Por=r(pxe," \u2014 "),nX=n(pxe,"A",{href:!0});var Wft=s(nX);Ior=r(Wft,"TFBlenderbotModel"),Wft.forEach(t),qor=r(pxe," (Blenderbot model)"),pxe.forEach(t),Nor=i(D),d0=n(D,"LI",{});var uxe=s(d0);Aue=n(uxe,"STRONG",{});var Hft=s(Aue);jor=r(Hft,"blenderbot-small"),Hft.forEach(t),Dor=r(uxe," \u2014 "),sX=n(uxe,"A",{href:!0});var Uft=s(sX);Gor=r(Uft,"TFBlenderbotSmallModel"),Uft.forEach(t),Oor=r(uxe," (BlenderbotSmall model)"),uxe.forEach(t),Vor=i(D),c0=n(D,"LI",{});var _xe=s(c0);yue=n(_xe,"STRONG",{});var Jft=s(yue);Xor=r(Jft,"camembert"),Jft.forEach(t),zor=r(_xe," \u2014 "),lX=n(_xe,"A",{href:!0});var Yft=s(lX);Qor=r(Yft,"TFCamembertModel"),Yft.forEach(t),Wor=r(_xe," (CamemBERT model)"),_xe.forEach(t),Hor=i(D),f0=n(D,"LI",{});var bxe=s(f0);Lue=n(bxe,"STRONG",{});var Kft=s(Lue);Uor=r(Kft,"clip"),Kft.forEach(t),Jor=r(bxe," \u2014 "),iX=n(bxe,"A",{href:!0});var Zft=s(iX);Yor=r(Zft,"TFCLIPModel"),Zft.forEach(t),Kor=r(bxe," (CLIP model)"),bxe.forEach(t),Zor=i(D),m0=n(D,"LI",{});var vxe=s(m0);xue=n(vxe,"STRONG",{});var emt=s(xue);err=r(emt,"convbert"),emt.forEach(t),orr=r(vxe," \u2014 "),dX=n(vxe,"A",{href:!0});var omt=s(dX);rrr=r(omt,"TFConvBertModel"),omt.forEach(t),trr=r(vxe," (ConvBERT model)"),vxe.forEach(t),arr=i(D),g0=n(D,"LI",{});var Fxe=s(g0);$ue=n(Fxe,"STRONG",{});var rmt=s($ue);nrr=r(rmt,"convnext"),rmt.forEach(t),srr=r(Fxe," \u2014 "),cX=n(Fxe,"A",{href:!0});var tmt=s(cX);lrr=r(tmt,"TFConvNextModel"),tmt.forEach(t),irr=r(Fxe," (ConvNext model)"),Fxe.forEach(t),drr=i(D),h0=n(D,"LI",{});var Txe=s(h0);kue=n(Txe,"STRONG",{});var amt=s(kue);crr=r(amt,"ctrl"),amt.forEach(t),frr=r(Txe," \u2014 "),fX=n(Txe,"A",{href:!0});var nmt=s(fX);mrr=r(nmt,"TFCTRLModel"),nmt.forEach(t),grr=r(Txe," (CTRL model)"),Txe.forEach(t),hrr=i(D),p0=n(D,"LI",{});var Mxe=s(p0);Sue=n(Mxe,"STRONG",{});var smt=s(Sue);prr=r(smt,"deberta"),smt.forEach(t),urr=r(Mxe," \u2014 "),mX=n(Mxe,"A",{href:!0});var lmt=s(mX);_rr=r(lmt,"TFDebertaModel"),lmt.forEach(t),brr=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),vrr=i(D),u0=n(D,"LI",{});var Exe=s(u0);Rue=n(Exe,"STRONG",{});var imt=s(Rue);Frr=r(imt,"deberta-v2"),imt.forEach(t),Trr=r(Exe," \u2014 "),gX=n(Exe,"A",{href:!0});var dmt=s(gX);Mrr=r(dmt,"TFDebertaV2Model"),dmt.forEach(t),Err=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),Crr=i(D),_0=n(D,"LI",{});var Cxe=s(_0);Bue=n(Cxe,"STRONG",{});var cmt=s(Bue);wrr=r(cmt,"distilbert"),cmt.forEach(t),Arr=r(Cxe," \u2014 "),hX=n(Cxe,"A",{href:!0});var fmt=s(hX);yrr=r(fmt,"TFDistilBertModel"),fmt.forEach(t),Lrr=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),xrr=i(D),b0=n(D,"LI",{});var wxe=s(b0);Pue=n(wxe,"STRONG",{});var mmt=s(Pue);$rr=r(mmt,"dpr"),mmt.forEach(t),krr=r(wxe," \u2014 "),pX=n(wxe,"A",{href:!0});var gmt=s(pX);Srr=r(gmt,"TFDPRQuestionEncoder"),gmt.forEach(t),Rrr=r(wxe," (DPR model)"),wxe.forEach(t),Brr=i(D),v0=n(D,"LI",{});var Axe=s(v0);Iue=n(Axe,"STRONG",{});var hmt=s(Iue);Prr=r(hmt,"electra"),hmt.forEach(t),Irr=r(Axe," \u2014 "),uX=n(Axe,"A",{href:!0});var pmt=s(uX);qrr=r(pmt,"TFElectraModel"),pmt.forEach(t),Nrr=r(Axe," (ELECTRA model)"),Axe.forEach(t),jrr=i(D),F0=n(D,"LI",{});var yxe=s(F0);que=n(yxe,"STRONG",{});var umt=s(que);Drr=r(umt,"flaubert"),umt.forEach(t),Grr=r(yxe," \u2014 "),_X=n(yxe,"A",{href:!0});var _mt=s(_X);Orr=r(_mt,"TFFlaubertModel"),_mt.forEach(t),Vrr=r(yxe," (FlauBERT model)"),yxe.forEach(t),Xrr=i(D),xs=n(D,"LI",{});var A9=s(xs);Nue=n(A9,"STRONG",{});var bmt=s(Nue);zrr=r(bmt,"funnel"),bmt.forEach(t),Qrr=r(A9," \u2014 "),bX=n(A9,"A",{href:!0});var vmt=s(bX);Wrr=r(vmt,"TFFunnelModel"),vmt.forEach(t),Hrr=r(A9," or "),vX=n(A9,"A",{href:!0});var Fmt=s(vX);Urr=r(Fmt,"TFFunnelBaseModel"),Fmt.forEach(t),Jrr=r(A9," (Funnel Transformer model)"),A9.forEach(t),Yrr=i(D),T0=n(D,"LI",{});var Lxe=s(T0);jue=n(Lxe,"STRONG",{});var Tmt=s(jue);Krr=r(Tmt,"gpt2"),Tmt.forEach(t),Zrr=r(Lxe," \u2014 "),FX=n(Lxe,"A",{href:!0});var Mmt=s(FX);etr=r(Mmt,"TFGPT2Model"),Mmt.forEach(t),otr=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),rtr=i(D),M0=n(D,"LI",{});var xxe=s(M0);Due=n(xxe,"STRONG",{});var Emt=s(Due);ttr=r(Emt,"gptj"),Emt.forEach(t),atr=r(xxe," \u2014 "),TX=n(xxe,"A",{href:!0});var Cmt=s(TX);ntr=r(Cmt,"TFGPTJModel"),Cmt.forEach(t),str=r(xxe," (GPT-J model)"),xxe.forEach(t),ltr=i(D),E0=n(D,"LI",{});var $xe=s(E0);Gue=n($xe,"STRONG",{});var wmt=s(Gue);itr=r(wmt,"hubert"),wmt.forEach(t),dtr=r($xe," \u2014 "),MX=n($xe,"A",{href:!0});var Amt=s(MX);ctr=r(Amt,"TFHubertModel"),Amt.forEach(t),ftr=r($xe," (Hubert model)"),$xe.forEach(t),mtr=i(D),C0=n(D,"LI",{});var kxe=s(C0);Oue=n(kxe,"STRONG",{});var ymt=s(Oue);gtr=r(ymt,"layoutlm"),ymt.forEach(t),htr=r(kxe," \u2014 "),EX=n(kxe,"A",{href:!0});var Lmt=s(EX);ptr=r(Lmt,"TFLayoutLMModel"),Lmt.forEach(t),utr=r(kxe," (LayoutLM model)"),kxe.forEach(t),_tr=i(D),w0=n(D,"LI",{});var Sxe=s(w0);Vue=n(Sxe,"STRONG",{});var xmt=s(Vue);btr=r(xmt,"led"),xmt.forEach(t),vtr=r(Sxe," \u2014 "),CX=n(Sxe,"A",{href:!0});var $mt=s(CX);Ftr=r($mt,"TFLEDModel"),$mt.forEach(t),Ttr=r(Sxe," (LED model)"),Sxe.forEach(t),Mtr=i(D),A0=n(D,"LI",{});var Rxe=s(A0);Xue=n(Rxe,"STRONG",{});var kmt=s(Xue);Etr=r(kmt,"longformer"),kmt.forEach(t),Ctr=r(Rxe," \u2014 "),wX=n(Rxe,"A",{href:!0});var Smt=s(wX);wtr=r(Smt,"TFLongformerModel"),Smt.forEach(t),Atr=r(Rxe," (Longformer model)"),Rxe.forEach(t),ytr=i(D),y0=n(D,"LI",{});var Bxe=s(y0);zue=n(Bxe,"STRONG",{});var Rmt=s(zue);Ltr=r(Rmt,"lxmert"),Rmt.forEach(t),xtr=r(Bxe," \u2014 "),AX=n(Bxe,"A",{href:!0});var Bmt=s(AX);$tr=r(Bmt,"TFLxmertModel"),Bmt.forEach(t),ktr=r(Bxe," (LXMERT model)"),Bxe.forEach(t),Str=i(D),L0=n(D,"LI",{});var Pxe=s(L0);Que=n(Pxe,"STRONG",{});var Pmt=s(Que);Rtr=r(Pmt,"marian"),Pmt.forEach(t),Btr=r(Pxe," \u2014 "),yX=n(Pxe,"A",{href:!0});var Imt=s(yX);Ptr=r(Imt,"TFMarianModel"),Imt.forEach(t),Itr=r(Pxe," (Marian model)"),Pxe.forEach(t),qtr=i(D),x0=n(D,"LI",{});var Ixe=s(x0);Wue=n(Ixe,"STRONG",{});var qmt=s(Wue);Ntr=r(qmt,"mbart"),qmt.forEach(t),jtr=r(Ixe," \u2014 "),LX=n(Ixe,"A",{href:!0});var Nmt=s(LX);Dtr=r(Nmt,"TFMBartModel"),Nmt.forEach(t),Gtr=r(Ixe," (mBART model)"),Ixe.forEach(t),Otr=i(D),$0=n(D,"LI",{});var qxe=s($0);Hue=n(qxe,"STRONG",{});var jmt=s(Hue);Vtr=r(jmt,"mobilebert"),jmt.forEach(t),Xtr=r(qxe," \u2014 "),xX=n(qxe,"A",{href:!0});var Dmt=s(xX);ztr=r(Dmt,"TFMobileBertModel"),Dmt.forEach(t),Qtr=r(qxe," (MobileBERT model)"),qxe.forEach(t),Wtr=i(D),k0=n(D,"LI",{});var Nxe=s(k0);Uue=n(Nxe,"STRONG",{});var Gmt=s(Uue);Htr=r(Gmt,"mpnet"),Gmt.forEach(t),Utr=r(Nxe," \u2014 "),$X=n(Nxe,"A",{href:!0});var Omt=s($X);Jtr=r(Omt,"TFMPNetModel"),Omt.forEach(t),Ytr=r(Nxe," (MPNet model)"),Nxe.forEach(t),Ktr=i(D),S0=n(D,"LI",{});var jxe=s(S0);Jue=n(jxe,"STRONG",{});var Vmt=s(Jue);Ztr=r(Vmt,"mt5"),Vmt.forEach(t),ear=r(jxe," \u2014 "),kX=n(jxe,"A",{href:!0});var Xmt=s(kX);oar=r(Xmt,"TFMT5Model"),Xmt.forEach(t),rar=r(jxe," (mT5 model)"),jxe.forEach(t),tar=i(D),R0=n(D,"LI",{});var Dxe=s(R0);Yue=n(Dxe,"STRONG",{});var zmt=s(Yue);aar=r(zmt,"openai-gpt"),zmt.forEach(t),nar=r(Dxe," \u2014 "),SX=n(Dxe,"A",{href:!0});var Qmt=s(SX);sar=r(Qmt,"TFOpenAIGPTModel"),Qmt.forEach(t),lar=r(Dxe," (OpenAI GPT model)"),Dxe.forEach(t),iar=i(D),B0=n(D,"LI",{});var Gxe=s(B0);Kue=n(Gxe,"STRONG",{});var Wmt=s(Kue);dar=r(Wmt,"pegasus"),Wmt.forEach(t),car=r(Gxe," \u2014 "),RX=n(Gxe,"A",{href:!0});var Hmt=s(RX);far=r(Hmt,"TFPegasusModel"),Hmt.forEach(t),mar=r(Gxe," (Pegasus model)"),Gxe.forEach(t),gar=i(D),P0=n(D,"LI",{});var Oxe=s(P0);Zue=n(Oxe,"STRONG",{});var Umt=s(Zue);har=r(Umt,"rembert"),Umt.forEach(t),par=r(Oxe," \u2014 "),BX=n(Oxe,"A",{href:!0});var Jmt=s(BX);uar=r(Jmt,"TFRemBertModel"),Jmt.forEach(t),_ar=r(Oxe," (RemBERT model)"),Oxe.forEach(t),bar=i(D),I0=n(D,"LI",{});var Vxe=s(I0);e_e=n(Vxe,"STRONG",{});var Ymt=s(e_e);Far=r(Ymt,"roberta"),Ymt.forEach(t),Tar=r(Vxe," \u2014 "),PX=n(Vxe,"A",{href:!0});var Kmt=s(PX);Mar=r(Kmt,"TFRobertaModel"),Kmt.forEach(t),Ear=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),Car=i(D),q0=n(D,"LI",{});var Xxe=s(q0);o_e=n(Xxe,"STRONG",{});var Zmt=s(o_e);war=r(Zmt,"roformer"),Zmt.forEach(t),Aar=r(Xxe," \u2014 "),IX=n(Xxe,"A",{href:!0});var egt=s(IX);yar=r(egt,"TFRoFormerModel"),egt.forEach(t),Lar=r(Xxe," (RoFormer model)"),Xxe.forEach(t),xar=i(D),N0=n(D,"LI",{});var zxe=s(N0);r_e=n(zxe,"STRONG",{});var ogt=s(r_e);$ar=r(ogt,"speech_to_text"),ogt.forEach(t),kar=r(zxe," \u2014 "),qX=n(zxe,"A",{href:!0});var rgt=s(qX);Sar=r(rgt,"TFSpeech2TextModel"),rgt.forEach(t),Rar=r(zxe," (Speech2Text model)"),zxe.forEach(t),Bar=i(D),j0=n(D,"LI",{});var Qxe=s(j0);t_e=n(Qxe,"STRONG",{});var tgt=s(t_e);Par=r(tgt,"t5"),tgt.forEach(t),Iar=r(Qxe," \u2014 "),NX=n(Qxe,"A",{href:!0});var agt=s(NX);qar=r(agt,"TFT5Model"),agt.forEach(t),Nar=r(Qxe," (T5 model)"),Qxe.forEach(t),jar=i(D),D0=n(D,"LI",{});var Wxe=s(D0);a_e=n(Wxe,"STRONG",{});var ngt=s(a_e);Dar=r(ngt,"tapas"),ngt.forEach(t),Gar=r(Wxe," \u2014 "),jX=n(Wxe,"A",{href:!0});var sgt=s(jX);Oar=r(sgt,"TFTapasModel"),sgt.forEach(t),Var=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Xar=i(D),G0=n(D,"LI",{});var Hxe=s(G0);n_e=n(Hxe,"STRONG",{});var lgt=s(n_e);zar=r(lgt,"transfo-xl"),lgt.forEach(t),Qar=r(Hxe," \u2014 "),DX=n(Hxe,"A",{href:!0});var igt=s(DX);War=r(igt,"TFTransfoXLModel"),igt.forEach(t),Har=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),Uar=i(D),O0=n(D,"LI",{});var Uxe=s(O0);s_e=n(Uxe,"STRONG",{});var dgt=s(s_e);Jar=r(dgt,"vit"),dgt.forEach(t),Yar=r(Uxe," \u2014 "),GX=n(Uxe,"A",{href:!0});var cgt=s(GX);Kar=r(cgt,"TFViTModel"),cgt.forEach(t),Zar=r(Uxe," (ViT model)"),Uxe.forEach(t),enr=i(D),V0=n(D,"LI",{});var Jxe=s(V0);l_e=n(Jxe,"STRONG",{});var fgt=s(l_e);onr=r(fgt,"vit_mae"),fgt.forEach(t),rnr=r(Jxe," \u2014 "),OX=n(Jxe,"A",{href:!0});var mgt=s(OX);tnr=r(mgt,"TFViTMAEModel"),mgt.forEach(t),anr=r(Jxe," (ViTMAE model)"),Jxe.forEach(t),nnr=i(D),X0=n(D,"LI",{});var Yxe=s(X0);i_e=n(Yxe,"STRONG",{});var ggt=s(i_e);snr=r(ggt,"wav2vec2"),ggt.forEach(t),lnr=r(Yxe," \u2014 "),VX=n(Yxe,"A",{href:!0});var hgt=s(VX);inr=r(hgt,"TFWav2Vec2Model"),hgt.forEach(t),dnr=r(Yxe," (Wav2Vec2 model)"),Yxe.forEach(t),cnr=i(D),z0=n(D,"LI",{});var Kxe=s(z0);d_e=n(Kxe,"STRONG",{});var pgt=s(d_e);fnr=r(pgt,"xlm"),pgt.forEach(t),mnr=r(Kxe," \u2014 "),XX=n(Kxe,"A",{href:!0});var ugt=s(XX);gnr=r(ugt,"TFXLMModel"),ugt.forEach(t),hnr=r(Kxe," (XLM model)"),Kxe.forEach(t),pnr=i(D),Q0=n(D,"LI",{});var Zxe=s(Q0);c_e=n(Zxe,"STRONG",{});var _gt=s(c_e);unr=r(_gt,"xlm-roberta"),_gt.forEach(t),_nr=r(Zxe," \u2014 "),zX=n(Zxe,"A",{href:!0});var bgt=s(zX);bnr=r(bgt,"TFXLMRobertaModel"),bgt.forEach(t),vnr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),Fnr=i(D),W0=n(D,"LI",{});var e9e=s(W0);f_e=n(e9e,"STRONG",{});var vgt=s(f_e);Tnr=r(vgt,"xlnet"),vgt.forEach(t),Mnr=r(e9e," \u2014 "),QX=n(e9e,"A",{href:!0});var Fgt=s(QX);Enr=r(Fgt,"TFXLNetModel"),Fgt.forEach(t),Cnr=r(e9e," (XLNet model)"),e9e.forEach(t),D.forEach(t),wnr=i(nl),T(H0.$$.fragment,nl),nl.forEach(t),al.forEach(t),QBe=i(f),Bd=n(f,"H2",{class:!0});var UIe=s(Bd);U0=n(UIe,"A",{id:!0,class:!0,href:!0});var Tgt=s(U0);m_e=n(Tgt,"SPAN",{});var Mgt=s(m_e);T(o8.$$.fragment,Mgt),Mgt.forEach(t),Tgt.forEach(t),Anr=i(UIe),g_e=n(UIe,"SPAN",{});var Egt=s(g_e);ynr=r(Egt,"TFAutoModelForPreTraining"),Egt.forEach(t),UIe.forEach(t),WBe=i(f),Jo=n(f,"DIV",{class:!0});var sl=s(Jo);T(r8.$$.fragment,sl),Lnr=i(sl),Pd=n(sl,"P",{});var zY=s(Pd);xnr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),WX=n(zY,"A",{href:!0});var Cgt=s(WX);$nr=r(Cgt,"from_pretrained()"),Cgt.forEach(t),knr=r(zY," class method or the "),HX=n(zY,"A",{href:!0});var wgt=s(HX);Snr=r(wgt,"from_config()"),wgt.forEach(t),Rnr=r(zY,` class
method.`),zY.forEach(t),Bnr=i(sl),t8=n(sl,"P",{});var JIe=s(t8);Pnr=r(JIe,"This class cannot be instantiated directly using "),h_e=n(JIe,"CODE",{});var Agt=s(h_e);Inr=r(Agt,"__init__()"),Agt.forEach(t),qnr=r(JIe," (throws an error)."),JIe.forEach(t),Nnr=i(sl),Et=n(sl,"DIV",{class:!0});var bw=s(Et);T(a8.$$.fragment,bw),jnr=i(bw),p_e=n(bw,"P",{});var ygt=s(p_e);Dnr=r(ygt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ygt.forEach(t),Gnr=i(bw),Id=n(bw,"P",{});var QY=s(Id);Onr=r(QY,`Note:
Loading a model from its configuration file does `),u_e=n(QY,"STRONG",{});var Lgt=s(u_e);Vnr=r(Lgt,"not"),Lgt.forEach(t),Xnr=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(QY,"A",{href:!0});var xgt=s(UX);znr=r(xgt,"from_pretrained()"),xgt.forEach(t),Qnr=r(QY," to load the model weights."),QY.forEach(t),Wnr=i(bw),T(J0.$$.fragment,bw),bw.forEach(t),Hnr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(n8.$$.fragment,ll),Unr=i(ll),__e=n(ll,"P",{});var $gt=s(__e);Jnr=r($gt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$gt.forEach(t),Ynr=i(ll),Ua=n(ll,"P",{});var vw=s(Ua);Knr=r(vw,"The model class to instantiate is selected based on the "),b_e=n(vw,"CODE",{});var kgt=s(b_e);Znr=r(kgt,"model_type"),kgt.forEach(t),esr=r(vw,` property of the config object (either
passed as an argument or loaded from `),v_e=n(vw,"CODE",{});var Sgt=s(v_e);osr=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),rsr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(vw,"CODE",{});var Rgt=s(F_e);tsr=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),asr=r(vw,":"),vw.forEach(t),nsr=i(ll),ne=n(ll,"UL",{});var le=s(ne);Y0=n(le,"LI",{});var o9e=s(Y0);T_e=n(o9e,"STRONG",{});var Bgt=s(T_e);ssr=r(Bgt,"albert"),Bgt.forEach(t),lsr=r(o9e," \u2014 "),JX=n(o9e,"A",{href:!0});var Pgt=s(JX);isr=r(Pgt,"TFAlbertForPreTraining"),Pgt.forEach(t),dsr=r(o9e," (ALBERT model)"),o9e.forEach(t),csr=i(le),K0=n(le,"LI",{});var r9e=s(K0);M_e=n(r9e,"STRONG",{});var Igt=s(M_e);fsr=r(Igt,"bart"),Igt.forEach(t),msr=r(r9e," \u2014 "),YX=n(r9e,"A",{href:!0});var qgt=s(YX);gsr=r(qgt,"TFBartForConditionalGeneration"),qgt.forEach(t),hsr=r(r9e," (BART model)"),r9e.forEach(t),psr=i(le),Z0=n(le,"LI",{});var t9e=s(Z0);E_e=n(t9e,"STRONG",{});var Ngt=s(E_e);usr=r(Ngt,"bert"),Ngt.forEach(t),_sr=r(t9e," \u2014 "),KX=n(t9e,"A",{href:!0});var jgt=s(KX);bsr=r(jgt,"TFBertForPreTraining"),jgt.forEach(t),vsr=r(t9e," (BERT model)"),t9e.forEach(t),Fsr=i(le),e6=n(le,"LI",{});var a9e=s(e6);C_e=n(a9e,"STRONG",{});var Dgt=s(C_e);Tsr=r(Dgt,"camembert"),Dgt.forEach(t),Msr=r(a9e," \u2014 "),ZX=n(a9e,"A",{href:!0});var Ggt=s(ZX);Esr=r(Ggt,"TFCamembertForMaskedLM"),Ggt.forEach(t),Csr=r(a9e," (CamemBERT model)"),a9e.forEach(t),wsr=i(le),o6=n(le,"LI",{});var n9e=s(o6);w_e=n(n9e,"STRONG",{});var Ogt=s(w_e);Asr=r(Ogt,"ctrl"),Ogt.forEach(t),ysr=r(n9e," \u2014 "),ez=n(n9e,"A",{href:!0});var Vgt=s(ez);Lsr=r(Vgt,"TFCTRLLMHeadModel"),Vgt.forEach(t),xsr=r(n9e," (CTRL model)"),n9e.forEach(t),$sr=i(le),r6=n(le,"LI",{});var s9e=s(r6);A_e=n(s9e,"STRONG",{});var Xgt=s(A_e);ksr=r(Xgt,"distilbert"),Xgt.forEach(t),Ssr=r(s9e," \u2014 "),oz=n(s9e,"A",{href:!0});var zgt=s(oz);Rsr=r(zgt,"TFDistilBertForMaskedLM"),zgt.forEach(t),Bsr=r(s9e," (DistilBERT model)"),s9e.forEach(t),Psr=i(le),t6=n(le,"LI",{});var l9e=s(t6);y_e=n(l9e,"STRONG",{});var Qgt=s(y_e);Isr=r(Qgt,"electra"),Qgt.forEach(t),qsr=r(l9e," \u2014 "),rz=n(l9e,"A",{href:!0});var Wgt=s(rz);Nsr=r(Wgt,"TFElectraForPreTraining"),Wgt.forEach(t),jsr=r(l9e," (ELECTRA model)"),l9e.forEach(t),Dsr=i(le),a6=n(le,"LI",{});var i9e=s(a6);L_e=n(i9e,"STRONG",{});var Hgt=s(L_e);Gsr=r(Hgt,"flaubert"),Hgt.forEach(t),Osr=r(i9e," \u2014 "),tz=n(i9e,"A",{href:!0});var Ugt=s(tz);Vsr=r(Ugt,"TFFlaubertWithLMHeadModel"),Ugt.forEach(t),Xsr=r(i9e," (FlauBERT model)"),i9e.forEach(t),zsr=i(le),n6=n(le,"LI",{});var d9e=s(n6);x_e=n(d9e,"STRONG",{});var Jgt=s(x_e);Qsr=r(Jgt,"funnel"),Jgt.forEach(t),Wsr=r(d9e," \u2014 "),az=n(d9e,"A",{href:!0});var Ygt=s(az);Hsr=r(Ygt,"TFFunnelForPreTraining"),Ygt.forEach(t),Usr=r(d9e," (Funnel Transformer model)"),d9e.forEach(t),Jsr=i(le),s6=n(le,"LI",{});var c9e=s(s6);$_e=n(c9e,"STRONG",{});var Kgt=s($_e);Ysr=r(Kgt,"gpt2"),Kgt.forEach(t),Ksr=r(c9e," \u2014 "),nz=n(c9e,"A",{href:!0});var Zgt=s(nz);Zsr=r(Zgt,"TFGPT2LMHeadModel"),Zgt.forEach(t),elr=r(c9e," (OpenAI GPT-2 model)"),c9e.forEach(t),olr=i(le),l6=n(le,"LI",{});var f9e=s(l6);k_e=n(f9e,"STRONG",{});var eht=s(k_e);rlr=r(eht,"layoutlm"),eht.forEach(t),tlr=r(f9e," \u2014 "),sz=n(f9e,"A",{href:!0});var oht=s(sz);alr=r(oht,"TFLayoutLMForMaskedLM"),oht.forEach(t),nlr=r(f9e," (LayoutLM model)"),f9e.forEach(t),slr=i(le),i6=n(le,"LI",{});var m9e=s(i6);S_e=n(m9e,"STRONG",{});var rht=s(S_e);llr=r(rht,"lxmert"),rht.forEach(t),ilr=r(m9e," \u2014 "),lz=n(m9e,"A",{href:!0});var tht=s(lz);dlr=r(tht,"TFLxmertForPreTraining"),tht.forEach(t),clr=r(m9e," (LXMERT model)"),m9e.forEach(t),flr=i(le),d6=n(le,"LI",{});var g9e=s(d6);R_e=n(g9e,"STRONG",{});var aht=s(R_e);mlr=r(aht,"mobilebert"),aht.forEach(t),glr=r(g9e," \u2014 "),iz=n(g9e,"A",{href:!0});var nht=s(iz);hlr=r(nht,"TFMobileBertForPreTraining"),nht.forEach(t),plr=r(g9e," (MobileBERT model)"),g9e.forEach(t),ulr=i(le),c6=n(le,"LI",{});var h9e=s(c6);B_e=n(h9e,"STRONG",{});var sht=s(B_e);_lr=r(sht,"mpnet"),sht.forEach(t),blr=r(h9e," \u2014 "),dz=n(h9e,"A",{href:!0});var lht=s(dz);vlr=r(lht,"TFMPNetForMaskedLM"),lht.forEach(t),Flr=r(h9e," (MPNet model)"),h9e.forEach(t),Tlr=i(le),f6=n(le,"LI",{});var p9e=s(f6);P_e=n(p9e,"STRONG",{});var iht=s(P_e);Mlr=r(iht,"openai-gpt"),iht.forEach(t),Elr=r(p9e," \u2014 "),cz=n(p9e,"A",{href:!0});var dht=s(cz);Clr=r(dht,"TFOpenAIGPTLMHeadModel"),dht.forEach(t),wlr=r(p9e," (OpenAI GPT model)"),p9e.forEach(t),Alr=i(le),m6=n(le,"LI",{});var u9e=s(m6);I_e=n(u9e,"STRONG",{});var cht=s(I_e);ylr=r(cht,"roberta"),cht.forEach(t),Llr=r(u9e," \u2014 "),fz=n(u9e,"A",{href:!0});var fht=s(fz);xlr=r(fht,"TFRobertaForMaskedLM"),fht.forEach(t),$lr=r(u9e," (RoBERTa model)"),u9e.forEach(t),klr=i(le),g6=n(le,"LI",{});var _9e=s(g6);q_e=n(_9e,"STRONG",{});var mht=s(q_e);Slr=r(mht,"t5"),mht.forEach(t),Rlr=r(_9e," \u2014 "),mz=n(_9e,"A",{href:!0});var ght=s(mz);Blr=r(ght,"TFT5ForConditionalGeneration"),ght.forEach(t),Plr=r(_9e," (T5 model)"),_9e.forEach(t),Ilr=i(le),h6=n(le,"LI",{});var b9e=s(h6);N_e=n(b9e,"STRONG",{});var hht=s(N_e);qlr=r(hht,"tapas"),hht.forEach(t),Nlr=r(b9e," \u2014 "),gz=n(b9e,"A",{href:!0});var pht=s(gz);jlr=r(pht,"TFTapasForMaskedLM"),pht.forEach(t),Dlr=r(b9e," (TAPAS model)"),b9e.forEach(t),Glr=i(le),p6=n(le,"LI",{});var v9e=s(p6);j_e=n(v9e,"STRONG",{});var uht=s(j_e);Olr=r(uht,"transfo-xl"),uht.forEach(t),Vlr=r(v9e," \u2014 "),hz=n(v9e,"A",{href:!0});var _ht=s(hz);Xlr=r(_ht,"TFTransfoXLLMHeadModel"),_ht.forEach(t),zlr=r(v9e," (Transformer-XL model)"),v9e.forEach(t),Qlr=i(le),u6=n(le,"LI",{});var F9e=s(u6);D_e=n(F9e,"STRONG",{});var bht=s(D_e);Wlr=r(bht,"vit_mae"),bht.forEach(t),Hlr=r(F9e," \u2014 "),pz=n(F9e,"A",{href:!0});var vht=s(pz);Ulr=r(vht,"TFViTMAEForPreTraining"),vht.forEach(t),Jlr=r(F9e," (ViTMAE model)"),F9e.forEach(t),Ylr=i(le),_6=n(le,"LI",{});var T9e=s(_6);G_e=n(T9e,"STRONG",{});var Fht=s(G_e);Klr=r(Fht,"xlm"),Fht.forEach(t),Zlr=r(T9e," \u2014 "),uz=n(T9e,"A",{href:!0});var Tht=s(uz);eir=r(Tht,"TFXLMWithLMHeadModel"),Tht.forEach(t),oir=r(T9e," (XLM model)"),T9e.forEach(t),rir=i(le),b6=n(le,"LI",{});var M9e=s(b6);O_e=n(M9e,"STRONG",{});var Mht=s(O_e);tir=r(Mht,"xlm-roberta"),Mht.forEach(t),air=r(M9e," \u2014 "),_z=n(M9e,"A",{href:!0});var Eht=s(_z);nir=r(Eht,"TFXLMRobertaForMaskedLM"),Eht.forEach(t),sir=r(M9e," (XLM-RoBERTa model)"),M9e.forEach(t),lir=i(le),v6=n(le,"LI",{});var E9e=s(v6);V_e=n(E9e,"STRONG",{});var Cht=s(V_e);iir=r(Cht,"xlnet"),Cht.forEach(t),dir=r(E9e," \u2014 "),bz=n(E9e,"A",{href:!0});var wht=s(bz);cir=r(wht,"TFXLNetLMHeadModel"),wht.forEach(t),fir=r(E9e," (XLNet model)"),E9e.forEach(t),le.forEach(t),mir=i(ll),T(F6.$$.fragment,ll),ll.forEach(t),sl.forEach(t),HBe=i(f),qd=n(f,"H2",{class:!0});var YIe=s(qd);T6=n(YIe,"A",{id:!0,class:!0,href:!0});var Aht=s(T6);X_e=n(Aht,"SPAN",{});var yht=s(X_e);T(s8.$$.fragment,yht),yht.forEach(t),Aht.forEach(t),gir=i(YIe),z_e=n(YIe,"SPAN",{});var Lht=s(z_e);hir=r(Lht,"TFAutoModelForCausalLM"),Lht.forEach(t),YIe.forEach(t),UBe=i(f),Yo=n(f,"DIV",{class:!0});var il=s(Yo);T(l8.$$.fragment,il),pir=i(il),Nd=n(il,"P",{});var WY=s(Nd);uir=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vz=n(WY,"A",{href:!0});var xht=s(vz);_ir=r(xht,"from_pretrained()"),xht.forEach(t),bir=r(WY," class method or the "),Fz=n(WY,"A",{href:!0});var $ht=s(Fz);vir=r($ht,"from_config()"),$ht.forEach(t),Fir=r(WY,` class
method.`),WY.forEach(t),Tir=i(il),i8=n(il,"P",{});var KIe=s(i8);Mir=r(KIe,"This class cannot be instantiated directly using "),Q_e=n(KIe,"CODE",{});var kht=s(Q_e);Eir=r(kht,"__init__()"),kht.forEach(t),Cir=r(KIe," (throws an error)."),KIe.forEach(t),wir=i(il),Ct=n(il,"DIV",{class:!0});var Fw=s(Ct);T(d8.$$.fragment,Fw),Air=i(Fw),W_e=n(Fw,"P",{});var Sht=s(W_e);yir=r(Sht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Sht.forEach(t),Lir=i(Fw),jd=n(Fw,"P",{});var HY=s(jd);xir=r(HY,`Note:
Loading a model from its configuration file does `),H_e=n(HY,"STRONG",{});var Rht=s(H_e);$ir=r(Rht,"not"),Rht.forEach(t),kir=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(HY,"A",{href:!0});var Bht=s(Tz);Sir=r(Bht,"from_pretrained()"),Bht.forEach(t),Rir=r(HY," to load the model weights."),HY.forEach(t),Bir=i(Fw),T(M6.$$.fragment,Fw),Fw.forEach(t),Pir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(c8.$$.fragment,dl),Iir=i(dl),U_e=n(dl,"P",{});var Pht=s(U_e);qir=r(Pht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pht.forEach(t),Nir=i(dl),Ja=n(dl,"P",{});var Tw=s(Ja);jir=r(Tw,"The model class to instantiate is selected based on the "),J_e=n(Tw,"CODE",{});var Iht=s(J_e);Dir=r(Iht,"model_type"),Iht.forEach(t),Gir=r(Tw,` property of the config object (either
passed as an argument or loaded from `),Y_e=n(Tw,"CODE",{});var qht=s(Y_e);Oir=r(qht,"pretrained_model_name_or_path"),qht.forEach(t),Vir=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K_e=n(Tw,"CODE",{});var Nht=s(K_e);Xir=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),zir=r(Tw,":"),Tw.forEach(t),Qir=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);E6=n(Ce,"LI",{});var C9e=s(E6);Z_e=n(C9e,"STRONG",{});var jht=s(Z_e);Wir=r(jht,"bert"),jht.forEach(t),Hir=r(C9e," \u2014 "),Mz=n(C9e,"A",{href:!0});var Dht=s(Mz);Uir=r(Dht,"TFBertLMHeadModel"),Dht.forEach(t),Jir=r(C9e," (BERT model)"),C9e.forEach(t),Yir=i(Ce),C6=n(Ce,"LI",{});var w9e=s(C6);e2e=n(w9e,"STRONG",{});var Ght=s(e2e);Kir=r(Ght,"camembert"),Ght.forEach(t),Zir=r(w9e," \u2014 "),Ez=n(w9e,"A",{href:!0});var Oht=s(Ez);edr=r(Oht,"TFCamembertForCausalLM"),Oht.forEach(t),odr=r(w9e," (CamemBERT model)"),w9e.forEach(t),rdr=i(Ce),w6=n(Ce,"LI",{});var A9e=s(w6);o2e=n(A9e,"STRONG",{});var Vht=s(o2e);tdr=r(Vht,"ctrl"),Vht.forEach(t),adr=r(A9e," \u2014 "),Cz=n(A9e,"A",{href:!0});var Xht=s(Cz);ndr=r(Xht,"TFCTRLLMHeadModel"),Xht.forEach(t),sdr=r(A9e," (CTRL model)"),A9e.forEach(t),ldr=i(Ce),A6=n(Ce,"LI",{});var y9e=s(A6);r2e=n(y9e,"STRONG",{});var zht=s(r2e);idr=r(zht,"gpt2"),zht.forEach(t),ddr=r(y9e," \u2014 "),wz=n(y9e,"A",{href:!0});var Qht=s(wz);cdr=r(Qht,"TFGPT2LMHeadModel"),Qht.forEach(t),fdr=r(y9e," (OpenAI GPT-2 model)"),y9e.forEach(t),mdr=i(Ce),y6=n(Ce,"LI",{});var L9e=s(y6);t2e=n(L9e,"STRONG",{});var Wht=s(t2e);gdr=r(Wht,"gptj"),Wht.forEach(t),hdr=r(L9e," \u2014 "),Az=n(L9e,"A",{href:!0});var Hht=s(Az);pdr=r(Hht,"TFGPTJForCausalLM"),Hht.forEach(t),udr=r(L9e," (GPT-J model)"),L9e.forEach(t),_dr=i(Ce),L6=n(Ce,"LI",{});var x9e=s(L6);a2e=n(x9e,"STRONG",{});var Uht=s(a2e);bdr=r(Uht,"openai-gpt"),Uht.forEach(t),vdr=r(x9e," \u2014 "),yz=n(x9e,"A",{href:!0});var Jht=s(yz);Fdr=r(Jht,"TFOpenAIGPTLMHeadModel"),Jht.forEach(t),Tdr=r(x9e," (OpenAI GPT model)"),x9e.forEach(t),Mdr=i(Ce),x6=n(Ce,"LI",{});var $9e=s(x6);n2e=n($9e,"STRONG",{});var Yht=s(n2e);Edr=r(Yht,"rembert"),Yht.forEach(t),Cdr=r($9e," \u2014 "),Lz=n($9e,"A",{href:!0});var Kht=s(Lz);wdr=r(Kht,"TFRemBertForCausalLM"),Kht.forEach(t),Adr=r($9e," (RemBERT model)"),$9e.forEach(t),ydr=i(Ce),$6=n(Ce,"LI",{});var k9e=s($6);s2e=n(k9e,"STRONG",{});var Zht=s(s2e);Ldr=r(Zht,"roberta"),Zht.forEach(t),xdr=r(k9e," \u2014 "),xz=n(k9e,"A",{href:!0});var ept=s(xz);$dr=r(ept,"TFRobertaForCausalLM"),ept.forEach(t),kdr=r(k9e," (RoBERTa model)"),k9e.forEach(t),Sdr=i(Ce),k6=n(Ce,"LI",{});var S9e=s(k6);l2e=n(S9e,"STRONG",{});var opt=s(l2e);Rdr=r(opt,"roformer"),opt.forEach(t),Bdr=r(S9e," \u2014 "),$z=n(S9e,"A",{href:!0});var rpt=s($z);Pdr=r(rpt,"TFRoFormerForCausalLM"),rpt.forEach(t),Idr=r(S9e," (RoFormer model)"),S9e.forEach(t),qdr=i(Ce),S6=n(Ce,"LI",{});var R9e=s(S6);i2e=n(R9e,"STRONG",{});var tpt=s(i2e);Ndr=r(tpt,"transfo-xl"),tpt.forEach(t),jdr=r(R9e," \u2014 "),kz=n(R9e,"A",{href:!0});var apt=s(kz);Ddr=r(apt,"TFTransfoXLLMHeadModel"),apt.forEach(t),Gdr=r(R9e," (Transformer-XL model)"),R9e.forEach(t),Odr=i(Ce),R6=n(Ce,"LI",{});var B9e=s(R6);d2e=n(B9e,"STRONG",{});var npt=s(d2e);Vdr=r(npt,"xlm"),npt.forEach(t),Xdr=r(B9e," \u2014 "),Sz=n(B9e,"A",{href:!0});var spt=s(Sz);zdr=r(spt,"TFXLMWithLMHeadModel"),spt.forEach(t),Qdr=r(B9e," (XLM model)"),B9e.forEach(t),Wdr=i(Ce),B6=n(Ce,"LI",{});var P9e=s(B6);c2e=n(P9e,"STRONG",{});var lpt=s(c2e);Hdr=r(lpt,"xlnet"),lpt.forEach(t),Udr=r(P9e," \u2014 "),Rz=n(P9e,"A",{href:!0});var ipt=s(Rz);Jdr=r(ipt,"TFXLNetLMHeadModel"),ipt.forEach(t),Ydr=r(P9e," (XLNet model)"),P9e.forEach(t),Ce.forEach(t),Kdr=i(dl),T(P6.$$.fragment,dl),dl.forEach(t),il.forEach(t),JBe=i(f),Dd=n(f,"H2",{class:!0});var ZIe=s(Dd);I6=n(ZIe,"A",{id:!0,class:!0,href:!0});var dpt=s(I6);f2e=n(dpt,"SPAN",{});var cpt=s(f2e);T(f8.$$.fragment,cpt),cpt.forEach(t),dpt.forEach(t),Zdr=i(ZIe),m2e=n(ZIe,"SPAN",{});var fpt=s(m2e);ecr=r(fpt,"TFAutoModelForImageClassification"),fpt.forEach(t),ZIe.forEach(t),YBe=i(f),Ko=n(f,"DIV",{class:!0});var cl=s(Ko);T(m8.$$.fragment,cl),ocr=i(cl),Gd=n(cl,"P",{});var UY=s(Gd);rcr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Bz=n(UY,"A",{href:!0});var mpt=s(Bz);tcr=r(mpt,"from_pretrained()"),mpt.forEach(t),acr=r(UY," class method or the "),Pz=n(UY,"A",{href:!0});var gpt=s(Pz);ncr=r(gpt,"from_config()"),gpt.forEach(t),scr=r(UY,` class
method.`),UY.forEach(t),lcr=i(cl),g8=n(cl,"P",{});var eqe=s(g8);icr=r(eqe,"This class cannot be instantiated directly using "),g2e=n(eqe,"CODE",{});var hpt=s(g2e);dcr=r(hpt,"__init__()"),hpt.forEach(t),ccr=r(eqe," (throws an error)."),eqe.forEach(t),fcr=i(cl),wt=n(cl,"DIV",{class:!0});var Mw=s(wt);T(h8.$$.fragment,Mw),mcr=i(Mw),h2e=n(Mw,"P",{});var ppt=s(h2e);gcr=r(ppt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ppt.forEach(t),hcr=i(Mw),Od=n(Mw,"P",{});var JY=s(Od);pcr=r(JY,`Note:
Loading a model from its configuration file does `),p2e=n(JY,"STRONG",{});var upt=s(p2e);ucr=r(upt,"not"),upt.forEach(t),_cr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(JY,"A",{href:!0});var _pt=s(Iz);bcr=r(_pt,"from_pretrained()"),_pt.forEach(t),vcr=r(JY," to load the model weights."),JY.forEach(t),Fcr=i(Mw),T(q6.$$.fragment,Mw),Mw.forEach(t),Tcr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(p8.$$.fragment,fl),Mcr=i(fl),u2e=n(fl,"P",{});var bpt=s(u2e);Ecr=r(bpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),bpt.forEach(t),Ccr=i(fl),Ya=n(fl,"P",{});var Ew=s(Ya);wcr=r(Ew,"The model class to instantiate is selected based on the "),_2e=n(Ew,"CODE",{});var vpt=s(_2e);Acr=r(vpt,"model_type"),vpt.forEach(t),ycr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),b2e=n(Ew,"CODE",{});var Fpt=s(b2e);Lcr=r(Fpt,"pretrained_model_name_or_path"),Fpt.forEach(t),xcr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v2e=n(Ew,"CODE",{});var Tpt=s(v2e);$cr=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),kcr=r(Ew,":"),Ew.forEach(t),Scr=i(fl),u8=n(fl,"UL",{});var oqe=s(u8);N6=n(oqe,"LI",{});var I9e=s(N6);F2e=n(I9e,"STRONG",{});var Mpt=s(F2e);Rcr=r(Mpt,"convnext"),Mpt.forEach(t),Bcr=r(I9e," \u2014 "),qz=n(I9e,"A",{href:!0});var Ept=s(qz);Pcr=r(Ept,"TFConvNextForImageClassification"),Ept.forEach(t),Icr=r(I9e," (ConvNext model)"),I9e.forEach(t),qcr=i(oqe),j6=n(oqe,"LI",{});var q9e=s(j6);T2e=n(q9e,"STRONG",{});var Cpt=s(T2e);Ncr=r(Cpt,"vit"),Cpt.forEach(t),jcr=r(q9e," \u2014 "),Nz=n(q9e,"A",{href:!0});var wpt=s(Nz);Dcr=r(wpt,"TFViTForImageClassification"),wpt.forEach(t),Gcr=r(q9e," (ViT model)"),q9e.forEach(t),oqe.forEach(t),Ocr=i(fl),T(D6.$$.fragment,fl),fl.forEach(t),cl.forEach(t),KBe=i(f),Vd=n(f,"H2",{class:!0});var rqe=s(Vd);G6=n(rqe,"A",{id:!0,class:!0,href:!0});var Apt=s(G6);M2e=n(Apt,"SPAN",{});var ypt=s(M2e);T(_8.$$.fragment,ypt),ypt.forEach(t),Apt.forEach(t),Vcr=i(rqe),E2e=n(rqe,"SPAN",{});var Lpt=s(E2e);Xcr=r(Lpt,"TFAutoModelForMaskedLM"),Lpt.forEach(t),rqe.forEach(t),ZBe=i(f),Zo=n(f,"DIV",{class:!0});var ml=s(Zo);T(b8.$$.fragment,ml),zcr=i(ml),Xd=n(ml,"P",{});var YY=s(Xd);Qcr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jz=n(YY,"A",{href:!0});var xpt=s(jz);Wcr=r(xpt,"from_pretrained()"),xpt.forEach(t),Hcr=r(YY," class method or the "),Dz=n(YY,"A",{href:!0});var $pt=s(Dz);Ucr=r($pt,"from_config()"),$pt.forEach(t),Jcr=r(YY,` class
method.`),YY.forEach(t),Ycr=i(ml),v8=n(ml,"P",{});var tqe=s(v8);Kcr=r(tqe,"This class cannot be instantiated directly using "),C2e=n(tqe,"CODE",{});var kpt=s(C2e);Zcr=r(kpt,"__init__()"),kpt.forEach(t),efr=r(tqe," (throws an error)."),tqe.forEach(t),ofr=i(ml),At=n(ml,"DIV",{class:!0});var Cw=s(At);T(F8.$$.fragment,Cw),rfr=i(Cw),w2e=n(Cw,"P",{});var Spt=s(w2e);tfr=r(Spt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Spt.forEach(t),afr=i(Cw),zd=n(Cw,"P",{});var KY=s(zd);nfr=r(KY,`Note:
Loading a model from its configuration file does `),A2e=n(KY,"STRONG",{});var Rpt=s(A2e);sfr=r(Rpt,"not"),Rpt.forEach(t),lfr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gz=n(KY,"A",{href:!0});var Bpt=s(Gz);ifr=r(Bpt,"from_pretrained()"),Bpt.forEach(t),dfr=r(KY," to load the model weights."),KY.forEach(t),cfr=i(Cw),T(O6.$$.fragment,Cw),Cw.forEach(t),ffr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(T8.$$.fragment,gl),mfr=i(gl),y2e=n(gl,"P",{});var Ppt=s(y2e);gfr=r(Ppt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ppt.forEach(t),hfr=i(gl),Ka=n(gl,"P",{});var ww=s(Ka);pfr=r(ww,"The model class to instantiate is selected based on the "),L2e=n(ww,"CODE",{});var Ipt=s(L2e);ufr=r(Ipt,"model_type"),Ipt.forEach(t),_fr=r(ww,` property of the config object (either
passed as an argument or loaded from `),x2e=n(ww,"CODE",{});var qpt=s(x2e);bfr=r(qpt,"pretrained_model_name_or_path"),qpt.forEach(t),vfr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(ww,"CODE",{});var Npt=s($2e);Ffr=r(Npt,"pretrained_model_name_or_path"),Npt.forEach(t),Tfr=r(ww,":"),ww.forEach(t),Mfr=i(gl),ie=n(gl,"UL",{});var fe=s(ie);V6=n(fe,"LI",{});var N9e=s(V6);k2e=n(N9e,"STRONG",{});var jpt=s(k2e);Efr=r(jpt,"albert"),jpt.forEach(t),Cfr=r(N9e," \u2014 "),Oz=n(N9e,"A",{href:!0});var Dpt=s(Oz);wfr=r(Dpt,"TFAlbertForMaskedLM"),Dpt.forEach(t),Afr=r(N9e," (ALBERT model)"),N9e.forEach(t),yfr=i(fe),X6=n(fe,"LI",{});var j9e=s(X6);S2e=n(j9e,"STRONG",{});var Gpt=s(S2e);Lfr=r(Gpt,"bert"),Gpt.forEach(t),xfr=r(j9e," \u2014 "),Vz=n(j9e,"A",{href:!0});var Opt=s(Vz);$fr=r(Opt,"TFBertForMaskedLM"),Opt.forEach(t),kfr=r(j9e," (BERT model)"),j9e.forEach(t),Sfr=i(fe),z6=n(fe,"LI",{});var D9e=s(z6);R2e=n(D9e,"STRONG",{});var Vpt=s(R2e);Rfr=r(Vpt,"camembert"),Vpt.forEach(t),Bfr=r(D9e," \u2014 "),Xz=n(D9e,"A",{href:!0});var Xpt=s(Xz);Pfr=r(Xpt,"TFCamembertForMaskedLM"),Xpt.forEach(t),Ifr=r(D9e," (CamemBERT model)"),D9e.forEach(t),qfr=i(fe),Q6=n(fe,"LI",{});var G9e=s(Q6);B2e=n(G9e,"STRONG",{});var zpt=s(B2e);Nfr=r(zpt,"convbert"),zpt.forEach(t),jfr=r(G9e," \u2014 "),zz=n(G9e,"A",{href:!0});var Qpt=s(zz);Dfr=r(Qpt,"TFConvBertForMaskedLM"),Qpt.forEach(t),Gfr=r(G9e," (ConvBERT model)"),G9e.forEach(t),Ofr=i(fe),W6=n(fe,"LI",{});var O9e=s(W6);P2e=n(O9e,"STRONG",{});var Wpt=s(P2e);Vfr=r(Wpt,"deberta"),Wpt.forEach(t),Xfr=r(O9e," \u2014 "),Qz=n(O9e,"A",{href:!0});var Hpt=s(Qz);zfr=r(Hpt,"TFDebertaForMaskedLM"),Hpt.forEach(t),Qfr=r(O9e," (DeBERTa model)"),O9e.forEach(t),Wfr=i(fe),H6=n(fe,"LI",{});var V9e=s(H6);I2e=n(V9e,"STRONG",{});var Upt=s(I2e);Hfr=r(Upt,"deberta-v2"),Upt.forEach(t),Ufr=r(V9e," \u2014 "),Wz=n(V9e,"A",{href:!0});var Jpt=s(Wz);Jfr=r(Jpt,"TFDebertaV2ForMaskedLM"),Jpt.forEach(t),Yfr=r(V9e," (DeBERTa-v2 model)"),V9e.forEach(t),Kfr=i(fe),U6=n(fe,"LI",{});var X9e=s(U6);q2e=n(X9e,"STRONG",{});var Ypt=s(q2e);Zfr=r(Ypt,"distilbert"),Ypt.forEach(t),emr=r(X9e," \u2014 "),Hz=n(X9e,"A",{href:!0});var Kpt=s(Hz);omr=r(Kpt,"TFDistilBertForMaskedLM"),Kpt.forEach(t),rmr=r(X9e," (DistilBERT model)"),X9e.forEach(t),tmr=i(fe),J6=n(fe,"LI",{});var z9e=s(J6);N2e=n(z9e,"STRONG",{});var Zpt=s(N2e);amr=r(Zpt,"electra"),Zpt.forEach(t),nmr=r(z9e," \u2014 "),Uz=n(z9e,"A",{href:!0});var eut=s(Uz);smr=r(eut,"TFElectraForMaskedLM"),eut.forEach(t),lmr=r(z9e," (ELECTRA model)"),z9e.forEach(t),imr=i(fe),Y6=n(fe,"LI",{});var Q9e=s(Y6);j2e=n(Q9e,"STRONG",{});var out=s(j2e);dmr=r(out,"flaubert"),out.forEach(t),cmr=r(Q9e," \u2014 "),Jz=n(Q9e,"A",{href:!0});var rut=s(Jz);fmr=r(rut,"TFFlaubertWithLMHeadModel"),rut.forEach(t),mmr=r(Q9e," (FlauBERT model)"),Q9e.forEach(t),gmr=i(fe),K6=n(fe,"LI",{});var W9e=s(K6);D2e=n(W9e,"STRONG",{});var tut=s(D2e);hmr=r(tut,"funnel"),tut.forEach(t),pmr=r(W9e," \u2014 "),Yz=n(W9e,"A",{href:!0});var aut=s(Yz);umr=r(aut,"TFFunnelForMaskedLM"),aut.forEach(t),_mr=r(W9e," (Funnel Transformer model)"),W9e.forEach(t),bmr=i(fe),Z6=n(fe,"LI",{});var H9e=s(Z6);G2e=n(H9e,"STRONG",{});var nut=s(G2e);vmr=r(nut,"layoutlm"),nut.forEach(t),Fmr=r(H9e," \u2014 "),Kz=n(H9e,"A",{href:!0});var sut=s(Kz);Tmr=r(sut,"TFLayoutLMForMaskedLM"),sut.forEach(t),Mmr=r(H9e," (LayoutLM model)"),H9e.forEach(t),Emr=i(fe),eT=n(fe,"LI",{});var U9e=s(eT);O2e=n(U9e,"STRONG",{});var lut=s(O2e);Cmr=r(lut,"longformer"),lut.forEach(t),wmr=r(U9e," \u2014 "),Zz=n(U9e,"A",{href:!0});var iut=s(Zz);Amr=r(iut,"TFLongformerForMaskedLM"),iut.forEach(t),ymr=r(U9e," (Longformer model)"),U9e.forEach(t),Lmr=i(fe),oT=n(fe,"LI",{});var J9e=s(oT);V2e=n(J9e,"STRONG",{});var dut=s(V2e);xmr=r(dut,"mobilebert"),dut.forEach(t),$mr=r(J9e," \u2014 "),eQ=n(J9e,"A",{href:!0});var cut=s(eQ);kmr=r(cut,"TFMobileBertForMaskedLM"),cut.forEach(t),Smr=r(J9e," (MobileBERT model)"),J9e.forEach(t),Rmr=i(fe),rT=n(fe,"LI",{});var Y9e=s(rT);X2e=n(Y9e,"STRONG",{});var fut=s(X2e);Bmr=r(fut,"mpnet"),fut.forEach(t),Pmr=r(Y9e," \u2014 "),oQ=n(Y9e,"A",{href:!0});var mut=s(oQ);Imr=r(mut,"TFMPNetForMaskedLM"),mut.forEach(t),qmr=r(Y9e," (MPNet model)"),Y9e.forEach(t),Nmr=i(fe),tT=n(fe,"LI",{});var K9e=s(tT);z2e=n(K9e,"STRONG",{});var gut=s(z2e);jmr=r(gut,"rembert"),gut.forEach(t),Dmr=r(K9e," \u2014 "),rQ=n(K9e,"A",{href:!0});var hut=s(rQ);Gmr=r(hut,"TFRemBertForMaskedLM"),hut.forEach(t),Omr=r(K9e," (RemBERT model)"),K9e.forEach(t),Vmr=i(fe),aT=n(fe,"LI",{});var Z9e=s(aT);Q2e=n(Z9e,"STRONG",{});var put=s(Q2e);Xmr=r(put,"roberta"),put.forEach(t),zmr=r(Z9e," \u2014 "),tQ=n(Z9e,"A",{href:!0});var uut=s(tQ);Qmr=r(uut,"TFRobertaForMaskedLM"),uut.forEach(t),Wmr=r(Z9e," (RoBERTa model)"),Z9e.forEach(t),Hmr=i(fe),nT=n(fe,"LI",{});var e$e=s(nT);W2e=n(e$e,"STRONG",{});var _ut=s(W2e);Umr=r(_ut,"roformer"),_ut.forEach(t),Jmr=r(e$e," \u2014 "),aQ=n(e$e,"A",{href:!0});var but=s(aQ);Ymr=r(but,"TFRoFormerForMaskedLM"),but.forEach(t),Kmr=r(e$e," (RoFormer model)"),e$e.forEach(t),Zmr=i(fe),sT=n(fe,"LI",{});var o$e=s(sT);H2e=n(o$e,"STRONG",{});var vut=s(H2e);egr=r(vut,"tapas"),vut.forEach(t),ogr=r(o$e," \u2014 "),nQ=n(o$e,"A",{href:!0});var Fut=s(nQ);rgr=r(Fut,"TFTapasForMaskedLM"),Fut.forEach(t),tgr=r(o$e," (TAPAS model)"),o$e.forEach(t),agr=i(fe),lT=n(fe,"LI",{});var r$e=s(lT);U2e=n(r$e,"STRONG",{});var Tut=s(U2e);ngr=r(Tut,"xlm"),Tut.forEach(t),sgr=r(r$e," \u2014 "),sQ=n(r$e,"A",{href:!0});var Mut=s(sQ);lgr=r(Mut,"TFXLMWithLMHeadModel"),Mut.forEach(t),igr=r(r$e," (XLM model)"),r$e.forEach(t),dgr=i(fe),iT=n(fe,"LI",{});var t$e=s(iT);J2e=n(t$e,"STRONG",{});var Eut=s(J2e);cgr=r(Eut,"xlm-roberta"),Eut.forEach(t),fgr=r(t$e," \u2014 "),lQ=n(t$e,"A",{href:!0});var Cut=s(lQ);mgr=r(Cut,"TFXLMRobertaForMaskedLM"),Cut.forEach(t),ggr=r(t$e," (XLM-RoBERTa model)"),t$e.forEach(t),fe.forEach(t),hgr=i(gl),T(dT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),ePe=i(f),Qd=n(f,"H2",{class:!0});var aqe=s(Qd);cT=n(aqe,"A",{id:!0,class:!0,href:!0});var wut=s(cT);Y2e=n(wut,"SPAN",{});var Aut=s(Y2e);T(M8.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),pgr=i(aqe),K2e=n(aqe,"SPAN",{});var yut=s(K2e);ugr=r(yut,"TFAutoModelForSeq2SeqLM"),yut.forEach(t),aqe.forEach(t),oPe=i(f),er=n(f,"DIV",{class:!0});var hl=s(er);T(E8.$$.fragment,hl),_gr=i(hl),Wd=n(hl,"P",{});var ZY=s(Wd);bgr=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),iQ=n(ZY,"A",{href:!0});var Lut=s(iQ);vgr=r(Lut,"from_pretrained()"),Lut.forEach(t),Fgr=r(ZY," class method or the "),dQ=n(ZY,"A",{href:!0});var xut=s(dQ);Tgr=r(xut,"from_config()"),xut.forEach(t),Mgr=r(ZY,` class
method.`),ZY.forEach(t),Egr=i(hl),C8=n(hl,"P",{});var nqe=s(C8);Cgr=r(nqe,"This class cannot be instantiated directly using "),Z2e=n(nqe,"CODE",{});var $ut=s(Z2e);wgr=r($ut,"__init__()"),$ut.forEach(t),Agr=r(nqe," (throws an error)."),nqe.forEach(t),ygr=i(hl),yt=n(hl,"DIV",{class:!0});var Aw=s(yt);T(w8.$$.fragment,Aw),Lgr=i(Aw),e1e=n(Aw,"P",{});var kut=s(e1e);xgr=r(kut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kut.forEach(t),$gr=i(Aw),Hd=n(Aw,"P",{});var eK=s(Hd);kgr=r(eK,`Note:
Loading a model from its configuration file does `),o1e=n(eK,"STRONG",{});var Sut=s(o1e);Sgr=r(Sut,"not"),Sut.forEach(t),Rgr=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(eK,"A",{href:!0});var Rut=s(cQ);Bgr=r(Rut,"from_pretrained()"),Rut.forEach(t),Pgr=r(eK," to load the model weights."),eK.forEach(t),Igr=i(Aw),T(fT.$$.fragment,Aw),Aw.forEach(t),qgr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(A8.$$.fragment,pl),Ngr=i(pl),r1e=n(pl,"P",{});var But=s(r1e);jgr=r(But,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),But.forEach(t),Dgr=i(pl),Za=n(pl,"P",{});var yw=s(Za);Ggr=r(yw,"The model class to instantiate is selected based on the "),t1e=n(yw,"CODE",{});var Put=s(t1e);Ogr=r(Put,"model_type"),Put.forEach(t),Vgr=r(yw,` property of the config object (either
passed as an argument or loaded from `),a1e=n(yw,"CODE",{});var Iut=s(a1e);Xgr=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),zgr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(yw,"CODE",{});var qut=s(n1e);Qgr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),Wgr=r(yw,":"),yw.forEach(t),Hgr=i(pl),ye=n(pl,"UL",{});var Re=s(ye);mT=n(Re,"LI",{});var a$e=s(mT);s1e=n(a$e,"STRONG",{});var Nut=s(s1e);Ugr=r(Nut,"bart"),Nut.forEach(t),Jgr=r(a$e," \u2014 "),fQ=n(a$e,"A",{href:!0});var jut=s(fQ);Ygr=r(jut,"TFBartForConditionalGeneration"),jut.forEach(t),Kgr=r(a$e," (BART model)"),a$e.forEach(t),Zgr=i(Re),gT=n(Re,"LI",{});var n$e=s(gT);l1e=n(n$e,"STRONG",{});var Dut=s(l1e);ehr=r(Dut,"blenderbot"),Dut.forEach(t),ohr=r(n$e," \u2014 "),mQ=n(n$e,"A",{href:!0});var Gut=s(mQ);rhr=r(Gut,"TFBlenderbotForConditionalGeneration"),Gut.forEach(t),thr=r(n$e," (Blenderbot model)"),n$e.forEach(t),ahr=i(Re),hT=n(Re,"LI",{});var s$e=s(hT);i1e=n(s$e,"STRONG",{});var Out=s(i1e);nhr=r(Out,"blenderbot-small"),Out.forEach(t),shr=r(s$e," \u2014 "),gQ=n(s$e,"A",{href:!0});var Vut=s(gQ);lhr=r(Vut,"TFBlenderbotSmallForConditionalGeneration"),Vut.forEach(t),ihr=r(s$e," (BlenderbotSmall model)"),s$e.forEach(t),dhr=i(Re),pT=n(Re,"LI",{});var l$e=s(pT);d1e=n(l$e,"STRONG",{});var Xut=s(d1e);chr=r(Xut,"encoder-decoder"),Xut.forEach(t),fhr=r(l$e," \u2014 "),hQ=n(l$e,"A",{href:!0});var zut=s(hQ);mhr=r(zut,"TFEncoderDecoderModel"),zut.forEach(t),ghr=r(l$e," (Encoder decoder model)"),l$e.forEach(t),hhr=i(Re),uT=n(Re,"LI",{});var i$e=s(uT);c1e=n(i$e,"STRONG",{});var Qut=s(c1e);phr=r(Qut,"led"),Qut.forEach(t),uhr=r(i$e," \u2014 "),pQ=n(i$e,"A",{href:!0});var Wut=s(pQ);_hr=r(Wut,"TFLEDForConditionalGeneration"),Wut.forEach(t),bhr=r(i$e," (LED model)"),i$e.forEach(t),vhr=i(Re),_T=n(Re,"LI",{});var d$e=s(_T);f1e=n(d$e,"STRONG",{});var Hut=s(f1e);Fhr=r(Hut,"marian"),Hut.forEach(t),Thr=r(d$e," \u2014 "),uQ=n(d$e,"A",{href:!0});var Uut=s(uQ);Mhr=r(Uut,"TFMarianMTModel"),Uut.forEach(t),Ehr=r(d$e," (Marian model)"),d$e.forEach(t),Chr=i(Re),bT=n(Re,"LI",{});var c$e=s(bT);m1e=n(c$e,"STRONG",{});var Jut=s(m1e);whr=r(Jut,"mbart"),Jut.forEach(t),Ahr=r(c$e," \u2014 "),_Q=n(c$e,"A",{href:!0});var Yut=s(_Q);yhr=r(Yut,"TFMBartForConditionalGeneration"),Yut.forEach(t),Lhr=r(c$e," (mBART model)"),c$e.forEach(t),xhr=i(Re),vT=n(Re,"LI",{});var f$e=s(vT);g1e=n(f$e,"STRONG",{});var Kut=s(g1e);$hr=r(Kut,"mt5"),Kut.forEach(t),khr=r(f$e," \u2014 "),bQ=n(f$e,"A",{href:!0});var Zut=s(bQ);Shr=r(Zut,"TFMT5ForConditionalGeneration"),Zut.forEach(t),Rhr=r(f$e," (mT5 model)"),f$e.forEach(t),Bhr=i(Re),FT=n(Re,"LI",{});var m$e=s(FT);h1e=n(m$e,"STRONG",{});var e_t=s(h1e);Phr=r(e_t,"pegasus"),e_t.forEach(t),Ihr=r(m$e," \u2014 "),vQ=n(m$e,"A",{href:!0});var o_t=s(vQ);qhr=r(o_t,"TFPegasusForConditionalGeneration"),o_t.forEach(t),Nhr=r(m$e," (Pegasus model)"),m$e.forEach(t),jhr=i(Re),TT=n(Re,"LI",{});var g$e=s(TT);p1e=n(g$e,"STRONG",{});var r_t=s(p1e);Dhr=r(r_t,"t5"),r_t.forEach(t),Ghr=r(g$e," \u2014 "),FQ=n(g$e,"A",{href:!0});var t_t=s(FQ);Ohr=r(t_t,"TFT5ForConditionalGeneration"),t_t.forEach(t),Vhr=r(g$e," (T5 model)"),g$e.forEach(t),Re.forEach(t),Xhr=i(pl),T(MT.$$.fragment,pl),pl.forEach(t),hl.forEach(t),rPe=i(f),Ud=n(f,"H2",{class:!0});var sqe=s(Ud);ET=n(sqe,"A",{id:!0,class:!0,href:!0});var a_t=s(ET);u1e=n(a_t,"SPAN",{});var n_t=s(u1e);T(y8.$$.fragment,n_t),n_t.forEach(t),a_t.forEach(t),zhr=i(sqe),_1e=n(sqe,"SPAN",{});var s_t=s(_1e);Qhr=r(s_t,"TFAutoModelForSequenceClassification"),s_t.forEach(t),sqe.forEach(t),tPe=i(f),or=n(f,"DIV",{class:!0});var ul=s(or);T(L8.$$.fragment,ul),Whr=i(ul),Jd=n(ul,"P",{});var oK=s(Jd);Hhr=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TQ=n(oK,"A",{href:!0});var l_t=s(TQ);Uhr=r(l_t,"from_pretrained()"),l_t.forEach(t),Jhr=r(oK," class method or the "),MQ=n(oK,"A",{href:!0});var i_t=s(MQ);Yhr=r(i_t,"from_config()"),i_t.forEach(t),Khr=r(oK,` class
method.`),oK.forEach(t),Zhr=i(ul),x8=n(ul,"P",{});var lqe=s(x8);epr=r(lqe,"This class cannot be instantiated directly using "),b1e=n(lqe,"CODE",{});var d_t=s(b1e);opr=r(d_t,"__init__()"),d_t.forEach(t),rpr=r(lqe," (throws an error)."),lqe.forEach(t),tpr=i(ul),Lt=n(ul,"DIV",{class:!0});var Lw=s(Lt);T($8.$$.fragment,Lw),apr=i(Lw),v1e=n(Lw,"P",{});var c_t=s(v1e);npr=r(c_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c_t.forEach(t),spr=i(Lw),Yd=n(Lw,"P",{});var rK=s(Yd);lpr=r(rK,`Note:
Loading a model from its configuration file does `),F1e=n(rK,"STRONG",{});var f_t=s(F1e);ipr=r(f_t,"not"),f_t.forEach(t),dpr=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(rK,"A",{href:!0});var m_t=s(EQ);cpr=r(m_t,"from_pretrained()"),m_t.forEach(t),fpr=r(rK," to load the model weights."),rK.forEach(t),mpr=i(Lw),T(CT.$$.fragment,Lw),Lw.forEach(t),gpr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(k8.$$.fragment,_l),hpr=i(_l),T1e=n(_l,"P",{});var g_t=s(T1e);ppr=r(g_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),g_t.forEach(t),upr=i(_l),en=n(_l,"P",{});var xw=s(en);_pr=r(xw,"The model class to instantiate is selected based on the "),M1e=n(xw,"CODE",{});var h_t=s(M1e);bpr=r(h_t,"model_type"),h_t.forEach(t),vpr=r(xw,` property of the config object (either
passed as an argument or loaded from `),E1e=n(xw,"CODE",{});var p_t=s(E1e);Fpr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),Tpr=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(xw,"CODE",{});var u_t=s(C1e);Mpr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),Epr=r(xw,":"),xw.forEach(t),Cpr=i(_l),Z=n(_l,"UL",{});var re=s(Z);wT=n(re,"LI",{});var h$e=s(wT);w1e=n(h$e,"STRONG",{});var __t=s(w1e);wpr=r(__t,"albert"),__t.forEach(t),Apr=r(h$e," \u2014 "),CQ=n(h$e,"A",{href:!0});var b_t=s(CQ);ypr=r(b_t,"TFAlbertForSequenceClassification"),b_t.forEach(t),Lpr=r(h$e," (ALBERT model)"),h$e.forEach(t),xpr=i(re),AT=n(re,"LI",{});var p$e=s(AT);A1e=n(p$e,"STRONG",{});var v_t=s(A1e);$pr=r(v_t,"bert"),v_t.forEach(t),kpr=r(p$e," \u2014 "),wQ=n(p$e,"A",{href:!0});var F_t=s(wQ);Spr=r(F_t,"TFBertForSequenceClassification"),F_t.forEach(t),Rpr=r(p$e," (BERT model)"),p$e.forEach(t),Bpr=i(re),yT=n(re,"LI",{});var u$e=s(yT);y1e=n(u$e,"STRONG",{});var T_t=s(y1e);Ppr=r(T_t,"camembert"),T_t.forEach(t),Ipr=r(u$e," \u2014 "),AQ=n(u$e,"A",{href:!0});var M_t=s(AQ);qpr=r(M_t,"TFCamembertForSequenceClassification"),M_t.forEach(t),Npr=r(u$e," (CamemBERT model)"),u$e.forEach(t),jpr=i(re),LT=n(re,"LI",{});var _$e=s(LT);L1e=n(_$e,"STRONG",{});var E_t=s(L1e);Dpr=r(E_t,"convbert"),E_t.forEach(t),Gpr=r(_$e," \u2014 "),yQ=n(_$e,"A",{href:!0});var C_t=s(yQ);Opr=r(C_t,"TFConvBertForSequenceClassification"),C_t.forEach(t),Vpr=r(_$e," (ConvBERT model)"),_$e.forEach(t),Xpr=i(re),xT=n(re,"LI",{});var b$e=s(xT);x1e=n(b$e,"STRONG",{});var w_t=s(x1e);zpr=r(w_t,"ctrl"),w_t.forEach(t),Qpr=r(b$e," \u2014 "),LQ=n(b$e,"A",{href:!0});var A_t=s(LQ);Wpr=r(A_t,"TFCTRLForSequenceClassification"),A_t.forEach(t),Hpr=r(b$e," (CTRL model)"),b$e.forEach(t),Upr=i(re),$T=n(re,"LI",{});var v$e=s($T);$1e=n(v$e,"STRONG",{});var y_t=s($1e);Jpr=r(y_t,"deberta"),y_t.forEach(t),Ypr=r(v$e," \u2014 "),xQ=n(v$e,"A",{href:!0});var L_t=s(xQ);Kpr=r(L_t,"TFDebertaForSequenceClassification"),L_t.forEach(t),Zpr=r(v$e," (DeBERTa model)"),v$e.forEach(t),eur=i(re),kT=n(re,"LI",{});var F$e=s(kT);k1e=n(F$e,"STRONG",{});var x_t=s(k1e);our=r(x_t,"deberta-v2"),x_t.forEach(t),rur=r(F$e," \u2014 "),$Q=n(F$e,"A",{href:!0});var $_t=s($Q);tur=r($_t,"TFDebertaV2ForSequenceClassification"),$_t.forEach(t),aur=r(F$e," (DeBERTa-v2 model)"),F$e.forEach(t),nur=i(re),ST=n(re,"LI",{});var T$e=s(ST);S1e=n(T$e,"STRONG",{});var k_t=s(S1e);sur=r(k_t,"distilbert"),k_t.forEach(t),lur=r(T$e," \u2014 "),kQ=n(T$e,"A",{href:!0});var S_t=s(kQ);iur=r(S_t,"TFDistilBertForSequenceClassification"),S_t.forEach(t),dur=r(T$e," (DistilBERT model)"),T$e.forEach(t),cur=i(re),RT=n(re,"LI",{});var M$e=s(RT);R1e=n(M$e,"STRONG",{});var R_t=s(R1e);fur=r(R_t,"electra"),R_t.forEach(t),mur=r(M$e," \u2014 "),SQ=n(M$e,"A",{href:!0});var B_t=s(SQ);gur=r(B_t,"TFElectraForSequenceClassification"),B_t.forEach(t),hur=r(M$e," (ELECTRA model)"),M$e.forEach(t),pur=i(re),BT=n(re,"LI",{});var E$e=s(BT);B1e=n(E$e,"STRONG",{});var P_t=s(B1e);uur=r(P_t,"flaubert"),P_t.forEach(t),_ur=r(E$e," \u2014 "),RQ=n(E$e,"A",{href:!0});var I_t=s(RQ);bur=r(I_t,"TFFlaubertForSequenceClassification"),I_t.forEach(t),vur=r(E$e," (FlauBERT model)"),E$e.forEach(t),Fur=i(re),PT=n(re,"LI",{});var C$e=s(PT);P1e=n(C$e,"STRONG",{});var q_t=s(P1e);Tur=r(q_t,"funnel"),q_t.forEach(t),Mur=r(C$e," \u2014 "),BQ=n(C$e,"A",{href:!0});var N_t=s(BQ);Eur=r(N_t,"TFFunnelForSequenceClassification"),N_t.forEach(t),Cur=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),wur=i(re),IT=n(re,"LI",{});var w$e=s(IT);I1e=n(w$e,"STRONG",{});var j_t=s(I1e);Aur=r(j_t,"gpt2"),j_t.forEach(t),yur=r(w$e," \u2014 "),PQ=n(w$e,"A",{href:!0});var D_t=s(PQ);Lur=r(D_t,"TFGPT2ForSequenceClassification"),D_t.forEach(t),xur=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),$ur=i(re),qT=n(re,"LI",{});var A$e=s(qT);q1e=n(A$e,"STRONG",{});var G_t=s(q1e);kur=r(G_t,"gptj"),G_t.forEach(t),Sur=r(A$e," \u2014 "),IQ=n(A$e,"A",{href:!0});var O_t=s(IQ);Rur=r(O_t,"TFGPTJForSequenceClassification"),O_t.forEach(t),Bur=r(A$e," (GPT-J model)"),A$e.forEach(t),Pur=i(re),NT=n(re,"LI",{});var y$e=s(NT);N1e=n(y$e,"STRONG",{});var V_t=s(N1e);Iur=r(V_t,"layoutlm"),V_t.forEach(t),qur=r(y$e," \u2014 "),qQ=n(y$e,"A",{href:!0});var X_t=s(qQ);Nur=r(X_t,"TFLayoutLMForSequenceClassification"),X_t.forEach(t),jur=r(y$e," (LayoutLM model)"),y$e.forEach(t),Dur=i(re),jT=n(re,"LI",{});var L$e=s(jT);j1e=n(L$e,"STRONG",{});var z_t=s(j1e);Gur=r(z_t,"longformer"),z_t.forEach(t),Our=r(L$e," \u2014 "),NQ=n(L$e,"A",{href:!0});var Q_t=s(NQ);Vur=r(Q_t,"TFLongformerForSequenceClassification"),Q_t.forEach(t),Xur=r(L$e," (Longformer model)"),L$e.forEach(t),zur=i(re),DT=n(re,"LI",{});var x$e=s(DT);D1e=n(x$e,"STRONG",{});var W_t=s(D1e);Qur=r(W_t,"mobilebert"),W_t.forEach(t),Wur=r(x$e," \u2014 "),jQ=n(x$e,"A",{href:!0});var H_t=s(jQ);Hur=r(H_t,"TFMobileBertForSequenceClassification"),H_t.forEach(t),Uur=r(x$e," (MobileBERT model)"),x$e.forEach(t),Jur=i(re),GT=n(re,"LI",{});var $$e=s(GT);G1e=n($$e,"STRONG",{});var U_t=s(G1e);Yur=r(U_t,"mpnet"),U_t.forEach(t),Kur=r($$e," \u2014 "),DQ=n($$e,"A",{href:!0});var J_t=s(DQ);Zur=r(J_t,"TFMPNetForSequenceClassification"),J_t.forEach(t),e_r=r($$e," (MPNet model)"),$$e.forEach(t),o_r=i(re),OT=n(re,"LI",{});var k$e=s(OT);O1e=n(k$e,"STRONG",{});var Y_t=s(O1e);r_r=r(Y_t,"openai-gpt"),Y_t.forEach(t),t_r=r(k$e," \u2014 "),GQ=n(k$e,"A",{href:!0});var K_t=s(GQ);a_r=r(K_t,"TFOpenAIGPTForSequenceClassification"),K_t.forEach(t),n_r=r(k$e," (OpenAI GPT model)"),k$e.forEach(t),s_r=i(re),VT=n(re,"LI",{});var S$e=s(VT);V1e=n(S$e,"STRONG",{});var Z_t=s(V1e);l_r=r(Z_t,"rembert"),Z_t.forEach(t),i_r=r(S$e," \u2014 "),OQ=n(S$e,"A",{href:!0});var e2t=s(OQ);d_r=r(e2t,"TFRemBertForSequenceClassification"),e2t.forEach(t),c_r=r(S$e," (RemBERT model)"),S$e.forEach(t),f_r=i(re),XT=n(re,"LI",{});var R$e=s(XT);X1e=n(R$e,"STRONG",{});var o2t=s(X1e);m_r=r(o2t,"roberta"),o2t.forEach(t),g_r=r(R$e," \u2014 "),VQ=n(R$e,"A",{href:!0});var r2t=s(VQ);h_r=r(r2t,"TFRobertaForSequenceClassification"),r2t.forEach(t),p_r=r(R$e," (RoBERTa model)"),R$e.forEach(t),u_r=i(re),zT=n(re,"LI",{});var B$e=s(zT);z1e=n(B$e,"STRONG",{});var t2t=s(z1e);__r=r(t2t,"roformer"),t2t.forEach(t),b_r=r(B$e," \u2014 "),XQ=n(B$e,"A",{href:!0});var a2t=s(XQ);v_r=r(a2t,"TFRoFormerForSequenceClassification"),a2t.forEach(t),F_r=r(B$e," (RoFormer model)"),B$e.forEach(t),T_r=i(re),QT=n(re,"LI",{});var P$e=s(QT);Q1e=n(P$e,"STRONG",{});var n2t=s(Q1e);M_r=r(n2t,"tapas"),n2t.forEach(t),E_r=r(P$e," \u2014 "),zQ=n(P$e,"A",{href:!0});var s2t=s(zQ);C_r=r(s2t,"TFTapasForSequenceClassification"),s2t.forEach(t),w_r=r(P$e," (TAPAS model)"),P$e.forEach(t),A_r=i(re),WT=n(re,"LI",{});var I$e=s(WT);W1e=n(I$e,"STRONG",{});var l2t=s(W1e);y_r=r(l2t,"transfo-xl"),l2t.forEach(t),L_r=r(I$e," \u2014 "),QQ=n(I$e,"A",{href:!0});var i2t=s(QQ);x_r=r(i2t,"TFTransfoXLForSequenceClassification"),i2t.forEach(t),$_r=r(I$e," (Transformer-XL model)"),I$e.forEach(t),k_r=i(re),HT=n(re,"LI",{});var q$e=s(HT);H1e=n(q$e,"STRONG",{});var d2t=s(H1e);S_r=r(d2t,"xlm"),d2t.forEach(t),R_r=r(q$e," \u2014 "),WQ=n(q$e,"A",{href:!0});var c2t=s(WQ);B_r=r(c2t,"TFXLMForSequenceClassification"),c2t.forEach(t),P_r=r(q$e," (XLM model)"),q$e.forEach(t),I_r=i(re),UT=n(re,"LI",{});var N$e=s(UT);U1e=n(N$e,"STRONG",{});var f2t=s(U1e);q_r=r(f2t,"xlm-roberta"),f2t.forEach(t),N_r=r(N$e," \u2014 "),HQ=n(N$e,"A",{href:!0});var m2t=s(HQ);j_r=r(m2t,"TFXLMRobertaForSequenceClassification"),m2t.forEach(t),D_r=r(N$e," (XLM-RoBERTa model)"),N$e.forEach(t),G_r=i(re),JT=n(re,"LI",{});var j$e=s(JT);J1e=n(j$e,"STRONG",{});var g2t=s(J1e);O_r=r(g2t,"xlnet"),g2t.forEach(t),V_r=r(j$e," \u2014 "),UQ=n(j$e,"A",{href:!0});var h2t=s(UQ);X_r=r(h2t,"TFXLNetForSequenceClassification"),h2t.forEach(t),z_r=r(j$e," (XLNet model)"),j$e.forEach(t),re.forEach(t),Q_r=i(_l),T(YT.$$.fragment,_l),_l.forEach(t),ul.forEach(t),aPe=i(f),Kd=n(f,"H2",{class:!0});var iqe=s(Kd);KT=n(iqe,"A",{id:!0,class:!0,href:!0});var p2t=s(KT);Y1e=n(p2t,"SPAN",{});var u2t=s(Y1e);T(S8.$$.fragment,u2t),u2t.forEach(t),p2t.forEach(t),W_r=i(iqe),K1e=n(iqe,"SPAN",{});var _2t=s(K1e);H_r=r(_2t,"TFAutoModelForMultipleChoice"),_2t.forEach(t),iqe.forEach(t),nPe=i(f),rr=n(f,"DIV",{class:!0});var bl=s(rr);T(R8.$$.fragment,bl),U_r=i(bl),Zd=n(bl,"P",{});var tK=s(Zd);J_r=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),JQ=n(tK,"A",{href:!0});var b2t=s(JQ);Y_r=r(b2t,"from_pretrained()"),b2t.forEach(t),K_r=r(tK," class method or the "),YQ=n(tK,"A",{href:!0});var v2t=s(YQ);Z_r=r(v2t,"from_config()"),v2t.forEach(t),e2r=r(tK,` class
method.`),tK.forEach(t),o2r=i(bl),B8=n(bl,"P",{});var dqe=s(B8);r2r=r(dqe,"This class cannot be instantiated directly using "),Z1e=n(dqe,"CODE",{});var F2t=s(Z1e);t2r=r(F2t,"__init__()"),F2t.forEach(t),a2r=r(dqe," (throws an error)."),dqe.forEach(t),n2r=i(bl),xt=n(bl,"DIV",{class:!0});var $w=s(xt);T(P8.$$.fragment,$w),s2r=i($w),ebe=n($w,"P",{});var T2t=s(ebe);l2r=r(T2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),T2t.forEach(t),i2r=i($w),ec=n($w,"P",{});var aK=s(ec);d2r=r(aK,`Note:
Loading a model from its configuration file does `),obe=n(aK,"STRONG",{});var M2t=s(obe);c2r=r(M2t,"not"),M2t.forEach(t),f2r=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KQ=n(aK,"A",{href:!0});var E2t=s(KQ);m2r=r(E2t,"from_pretrained()"),E2t.forEach(t),g2r=r(aK," to load the model weights."),aK.forEach(t),h2r=i($w),T(ZT.$$.fragment,$w),$w.forEach(t),p2r=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(I8.$$.fragment,vl),u2r=i(vl),rbe=n(vl,"P",{});var C2t=s(rbe);_2r=r(C2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C2t.forEach(t),b2r=i(vl),on=n(vl,"P",{});var kw=s(on);v2r=r(kw,"The model class to instantiate is selected based on the "),tbe=n(kw,"CODE",{});var w2t=s(tbe);F2r=r(w2t,"model_type"),w2t.forEach(t),T2r=r(kw,` property of the config object (either
passed as an argument or loaded from `),abe=n(kw,"CODE",{});var A2t=s(abe);M2r=r(A2t,"pretrained_model_name_or_path"),A2t.forEach(t),E2r=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nbe=n(kw,"CODE",{});var y2t=s(nbe);C2r=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),w2r=r(kw,":"),kw.forEach(t),A2r=i(vl),pe=n(vl,"UL",{});var _e=s(pe);eM=n(_e,"LI",{});var D$e=s(eM);sbe=n(D$e,"STRONG",{});var L2t=s(sbe);y2r=r(L2t,"albert"),L2t.forEach(t),L2r=r(D$e," \u2014 "),ZQ=n(D$e,"A",{href:!0});var x2t=s(ZQ);x2r=r(x2t,"TFAlbertForMultipleChoice"),x2t.forEach(t),$2r=r(D$e," (ALBERT model)"),D$e.forEach(t),k2r=i(_e),oM=n(_e,"LI",{});var G$e=s(oM);lbe=n(G$e,"STRONG",{});var $2t=s(lbe);S2r=r($2t,"bert"),$2t.forEach(t),R2r=r(G$e," \u2014 "),eW=n(G$e,"A",{href:!0});var k2t=s(eW);B2r=r(k2t,"TFBertForMultipleChoice"),k2t.forEach(t),P2r=r(G$e," (BERT model)"),G$e.forEach(t),I2r=i(_e),rM=n(_e,"LI",{});var O$e=s(rM);ibe=n(O$e,"STRONG",{});var S2t=s(ibe);q2r=r(S2t,"camembert"),S2t.forEach(t),N2r=r(O$e," \u2014 "),oW=n(O$e,"A",{href:!0});var R2t=s(oW);j2r=r(R2t,"TFCamembertForMultipleChoice"),R2t.forEach(t),D2r=r(O$e," (CamemBERT model)"),O$e.forEach(t),G2r=i(_e),tM=n(_e,"LI",{});var V$e=s(tM);dbe=n(V$e,"STRONG",{});var B2t=s(dbe);O2r=r(B2t,"convbert"),B2t.forEach(t),V2r=r(V$e," \u2014 "),rW=n(V$e,"A",{href:!0});var P2t=s(rW);X2r=r(P2t,"TFConvBertForMultipleChoice"),P2t.forEach(t),z2r=r(V$e," (ConvBERT model)"),V$e.forEach(t),Q2r=i(_e),aM=n(_e,"LI",{});var X$e=s(aM);cbe=n(X$e,"STRONG",{});var I2t=s(cbe);W2r=r(I2t,"distilbert"),I2t.forEach(t),H2r=r(X$e," \u2014 "),tW=n(X$e,"A",{href:!0});var q2t=s(tW);U2r=r(q2t,"TFDistilBertForMultipleChoice"),q2t.forEach(t),J2r=r(X$e," (DistilBERT model)"),X$e.forEach(t),Y2r=i(_e),nM=n(_e,"LI",{});var z$e=s(nM);fbe=n(z$e,"STRONG",{});var N2t=s(fbe);K2r=r(N2t,"electra"),N2t.forEach(t),Z2r=r(z$e," \u2014 "),aW=n(z$e,"A",{href:!0});var j2t=s(aW);e1r=r(j2t,"TFElectraForMultipleChoice"),j2t.forEach(t),o1r=r(z$e," (ELECTRA model)"),z$e.forEach(t),r1r=i(_e),sM=n(_e,"LI",{});var Q$e=s(sM);mbe=n(Q$e,"STRONG",{});var D2t=s(mbe);t1r=r(D2t,"flaubert"),D2t.forEach(t),a1r=r(Q$e," \u2014 "),nW=n(Q$e,"A",{href:!0});var G2t=s(nW);n1r=r(G2t,"TFFlaubertForMultipleChoice"),G2t.forEach(t),s1r=r(Q$e," (FlauBERT model)"),Q$e.forEach(t),l1r=i(_e),lM=n(_e,"LI",{});var W$e=s(lM);gbe=n(W$e,"STRONG",{});var O2t=s(gbe);i1r=r(O2t,"funnel"),O2t.forEach(t),d1r=r(W$e," \u2014 "),sW=n(W$e,"A",{href:!0});var V2t=s(sW);c1r=r(V2t,"TFFunnelForMultipleChoice"),V2t.forEach(t),f1r=r(W$e," (Funnel Transformer model)"),W$e.forEach(t),m1r=i(_e),iM=n(_e,"LI",{});var H$e=s(iM);hbe=n(H$e,"STRONG",{});var X2t=s(hbe);g1r=r(X2t,"longformer"),X2t.forEach(t),h1r=r(H$e," \u2014 "),lW=n(H$e,"A",{href:!0});var z2t=s(lW);p1r=r(z2t,"TFLongformerForMultipleChoice"),z2t.forEach(t),u1r=r(H$e," (Longformer model)"),H$e.forEach(t),_1r=i(_e),dM=n(_e,"LI",{});var U$e=s(dM);pbe=n(U$e,"STRONG",{});var Q2t=s(pbe);b1r=r(Q2t,"mobilebert"),Q2t.forEach(t),v1r=r(U$e," \u2014 "),iW=n(U$e,"A",{href:!0});var W2t=s(iW);F1r=r(W2t,"TFMobileBertForMultipleChoice"),W2t.forEach(t),T1r=r(U$e," (MobileBERT model)"),U$e.forEach(t),M1r=i(_e),cM=n(_e,"LI",{});var J$e=s(cM);ube=n(J$e,"STRONG",{});var H2t=s(ube);E1r=r(H2t,"mpnet"),H2t.forEach(t),C1r=r(J$e," \u2014 "),dW=n(J$e,"A",{href:!0});var U2t=s(dW);w1r=r(U2t,"TFMPNetForMultipleChoice"),U2t.forEach(t),A1r=r(J$e," (MPNet model)"),J$e.forEach(t),y1r=i(_e),fM=n(_e,"LI",{});var Y$e=s(fM);_be=n(Y$e,"STRONG",{});var J2t=s(_be);L1r=r(J2t,"rembert"),J2t.forEach(t),x1r=r(Y$e," \u2014 "),cW=n(Y$e,"A",{href:!0});var Y2t=s(cW);$1r=r(Y2t,"TFRemBertForMultipleChoice"),Y2t.forEach(t),k1r=r(Y$e," (RemBERT model)"),Y$e.forEach(t),S1r=i(_e),mM=n(_e,"LI",{});var K$e=s(mM);bbe=n(K$e,"STRONG",{});var K2t=s(bbe);R1r=r(K2t,"roberta"),K2t.forEach(t),B1r=r(K$e," \u2014 "),fW=n(K$e,"A",{href:!0});var Z2t=s(fW);P1r=r(Z2t,"TFRobertaForMultipleChoice"),Z2t.forEach(t),I1r=r(K$e," (RoBERTa model)"),K$e.forEach(t),q1r=i(_e),gM=n(_e,"LI",{});var Z$e=s(gM);vbe=n(Z$e,"STRONG",{});var e1t=s(vbe);N1r=r(e1t,"roformer"),e1t.forEach(t),j1r=r(Z$e," \u2014 "),mW=n(Z$e,"A",{href:!0});var o1t=s(mW);D1r=r(o1t,"TFRoFormerForMultipleChoice"),o1t.forEach(t),G1r=r(Z$e," (RoFormer model)"),Z$e.forEach(t),O1r=i(_e),hM=n(_e,"LI",{});var eke=s(hM);Fbe=n(eke,"STRONG",{});var r1t=s(Fbe);V1r=r(r1t,"xlm"),r1t.forEach(t),X1r=r(eke," \u2014 "),gW=n(eke,"A",{href:!0});var t1t=s(gW);z1r=r(t1t,"TFXLMForMultipleChoice"),t1t.forEach(t),Q1r=r(eke," (XLM model)"),eke.forEach(t),W1r=i(_e),pM=n(_e,"LI",{});var oke=s(pM);Tbe=n(oke,"STRONG",{});var a1t=s(Tbe);H1r=r(a1t,"xlm-roberta"),a1t.forEach(t),U1r=r(oke," \u2014 "),hW=n(oke,"A",{href:!0});var n1t=s(hW);J1r=r(n1t,"TFXLMRobertaForMultipleChoice"),n1t.forEach(t),Y1r=r(oke," (XLM-RoBERTa model)"),oke.forEach(t),K1r=i(_e),uM=n(_e,"LI",{});var rke=s(uM);Mbe=n(rke,"STRONG",{});var s1t=s(Mbe);Z1r=r(s1t,"xlnet"),s1t.forEach(t),ebr=r(rke," \u2014 "),pW=n(rke,"A",{href:!0});var l1t=s(pW);obr=r(l1t,"TFXLNetForMultipleChoice"),l1t.forEach(t),rbr=r(rke," (XLNet model)"),rke.forEach(t),_e.forEach(t),tbr=i(vl),T(_M.$$.fragment,vl),vl.forEach(t),bl.forEach(t),sPe=i(f),oc=n(f,"H2",{class:!0});var cqe=s(oc);bM=n(cqe,"A",{id:!0,class:!0,href:!0});var i1t=s(bM);Ebe=n(i1t,"SPAN",{});var d1t=s(Ebe);T(q8.$$.fragment,d1t),d1t.forEach(t),i1t.forEach(t),abr=i(cqe),Cbe=n(cqe,"SPAN",{});var c1t=s(Cbe);nbr=r(c1t,"TFAutoModelForTableQuestionAnswering"),c1t.forEach(t),cqe.forEach(t),lPe=i(f),tr=n(f,"DIV",{class:!0});var Fl=s(tr);T(N8.$$.fragment,Fl),sbr=i(Fl),rc=n(Fl,"P",{});var nK=s(rc);lbr=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),uW=n(nK,"A",{href:!0});var f1t=s(uW);ibr=r(f1t,"from_pretrained()"),f1t.forEach(t),dbr=r(nK," class method or the "),_W=n(nK,"A",{href:!0});var m1t=s(_W);cbr=r(m1t,"from_config()"),m1t.forEach(t),fbr=r(nK,` class
method.`),nK.forEach(t),mbr=i(Fl),j8=n(Fl,"P",{});var fqe=s(j8);gbr=r(fqe,"This class cannot be instantiated directly using "),wbe=n(fqe,"CODE",{});var g1t=s(wbe);hbr=r(g1t,"__init__()"),g1t.forEach(t),pbr=r(fqe," (throws an error)."),fqe.forEach(t),ubr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Sw=s($t);T(D8.$$.fragment,Sw),_br=i(Sw),Abe=n(Sw,"P",{});var h1t=s(Abe);bbr=r(h1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),h1t.forEach(t),vbr=i(Sw),tc=n(Sw,"P",{});var sK=s(tc);Fbr=r(sK,`Note:
Loading a model from its configuration file does `),ybe=n(sK,"STRONG",{});var p1t=s(ybe);Tbr=r(p1t,"not"),p1t.forEach(t),Mbr=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(sK,"A",{href:!0});var u1t=s(bW);Ebr=r(u1t,"from_pretrained()"),u1t.forEach(t),Cbr=r(sK," to load the model weights."),sK.forEach(t),wbr=i(Sw),T(vM.$$.fragment,Sw),Sw.forEach(t),Abr=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(G8.$$.fragment,Tl),ybr=i(Tl),Lbe=n(Tl,"P",{});var _1t=s(Lbe);Lbr=r(_1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_1t.forEach(t),xbr=i(Tl),rn=n(Tl,"P",{});var Rw=s(rn);$br=r(Rw,"The model class to instantiate is selected based on the "),xbe=n(Rw,"CODE",{});var b1t=s(xbe);kbr=r(b1t,"model_type"),b1t.forEach(t),Sbr=r(Rw,` property of the config object (either
passed as an argument or loaded from `),$be=n(Rw,"CODE",{});var v1t=s($be);Rbr=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Bbr=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kbe=n(Rw,"CODE",{});var F1t=s(kbe);Pbr=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),Ibr=r(Rw,":"),Rw.forEach(t),qbr=i(Tl),Sbe=n(Tl,"UL",{});var T1t=s(Sbe);FM=n(T1t,"LI",{});var tke=s(FM);Rbe=n(tke,"STRONG",{});var M1t=s(Rbe);Nbr=r(M1t,"tapas"),M1t.forEach(t),jbr=r(tke," \u2014 "),vW=n(tke,"A",{href:!0});var E1t=s(vW);Dbr=r(E1t,"TFTapasForQuestionAnswering"),E1t.forEach(t),Gbr=r(tke," (TAPAS model)"),tke.forEach(t),T1t.forEach(t),Obr=i(Tl),T(TM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),iPe=i(f),ac=n(f,"H2",{class:!0});var mqe=s(ac);MM=n(mqe,"A",{id:!0,class:!0,href:!0});var C1t=s(MM);Bbe=n(C1t,"SPAN",{});var w1t=s(Bbe);T(O8.$$.fragment,w1t),w1t.forEach(t),C1t.forEach(t),Vbr=i(mqe),Pbe=n(mqe,"SPAN",{});var A1t=s(Pbe);Xbr=r(A1t,"TFAutoModelForTokenClassification"),A1t.forEach(t),mqe.forEach(t),dPe=i(f),ar=n(f,"DIV",{class:!0});var Ml=s(ar);T(V8.$$.fragment,Ml),zbr=i(Ml),nc=n(Ml,"P",{});var lK=s(nc);Qbr=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),FW=n(lK,"A",{href:!0});var y1t=s(FW);Wbr=r(y1t,"from_pretrained()"),y1t.forEach(t),Hbr=r(lK," class method or the "),TW=n(lK,"A",{href:!0});var L1t=s(TW);Ubr=r(L1t,"from_config()"),L1t.forEach(t),Jbr=r(lK,` class
method.`),lK.forEach(t),Ybr=i(Ml),X8=n(Ml,"P",{});var gqe=s(X8);Kbr=r(gqe,"This class cannot be instantiated directly using "),Ibe=n(gqe,"CODE",{});var x1t=s(Ibe);Zbr=r(x1t,"__init__()"),x1t.forEach(t),e4r=r(gqe," (throws an error)."),gqe.forEach(t),o4r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Bw=s(kt);T(z8.$$.fragment,Bw),r4r=i(Bw),qbe=n(Bw,"P",{});var $1t=s(qbe);t4r=r($1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$1t.forEach(t),a4r=i(Bw),sc=n(Bw,"P",{});var iK=s(sc);n4r=r(iK,`Note:
Loading a model from its configuration file does `),Nbe=n(iK,"STRONG",{});var k1t=s(Nbe);s4r=r(k1t,"not"),k1t.forEach(t),l4r=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(iK,"A",{href:!0});var S1t=s(MW);i4r=r(S1t,"from_pretrained()"),S1t.forEach(t),d4r=r(iK," to load the model weights."),iK.forEach(t),c4r=i(Bw),T(EM.$$.fragment,Bw),Bw.forEach(t),f4r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(Q8.$$.fragment,El),m4r=i(El),jbe=n(El,"P",{});var R1t=s(jbe);g4r=r(R1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),R1t.forEach(t),h4r=i(El),tn=n(El,"P",{});var Pw=s(tn);p4r=r(Pw,"The model class to instantiate is selected based on the "),Dbe=n(Pw,"CODE",{});var B1t=s(Dbe);u4r=r(B1t,"model_type"),B1t.forEach(t),_4r=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Gbe=n(Pw,"CODE",{});var P1t=s(Gbe);b4r=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),v4r=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Obe=n(Pw,"CODE",{});var I1t=s(Obe);F4r=r(I1t,"pretrained_model_name_or_path"),I1t.forEach(t),T4r=r(Pw,":"),Pw.forEach(t),M4r=i(El),de=n(El,"UL",{});var me=s(de);CM=n(me,"LI",{});var ake=s(CM);Vbe=n(ake,"STRONG",{});var q1t=s(Vbe);E4r=r(q1t,"albert"),q1t.forEach(t),C4r=r(ake," \u2014 "),EW=n(ake,"A",{href:!0});var N1t=s(EW);w4r=r(N1t,"TFAlbertForTokenClassification"),N1t.forEach(t),A4r=r(ake," (ALBERT model)"),ake.forEach(t),y4r=i(me),wM=n(me,"LI",{});var nke=s(wM);Xbe=n(nke,"STRONG",{});var j1t=s(Xbe);L4r=r(j1t,"bert"),j1t.forEach(t),x4r=r(nke," \u2014 "),CW=n(nke,"A",{href:!0});var D1t=s(CW);$4r=r(D1t,"TFBertForTokenClassification"),D1t.forEach(t),k4r=r(nke," (BERT model)"),nke.forEach(t),S4r=i(me),AM=n(me,"LI",{});var ske=s(AM);zbe=n(ske,"STRONG",{});var G1t=s(zbe);R4r=r(G1t,"camembert"),G1t.forEach(t),B4r=r(ske," \u2014 "),wW=n(ske,"A",{href:!0});var O1t=s(wW);P4r=r(O1t,"TFCamembertForTokenClassification"),O1t.forEach(t),I4r=r(ske," (CamemBERT model)"),ske.forEach(t),q4r=i(me),yM=n(me,"LI",{});var lke=s(yM);Qbe=n(lke,"STRONG",{});var V1t=s(Qbe);N4r=r(V1t,"convbert"),V1t.forEach(t),j4r=r(lke," \u2014 "),AW=n(lke,"A",{href:!0});var X1t=s(AW);D4r=r(X1t,"TFConvBertForTokenClassification"),X1t.forEach(t),G4r=r(lke," (ConvBERT model)"),lke.forEach(t),O4r=i(me),LM=n(me,"LI",{});var ike=s(LM);Wbe=n(ike,"STRONG",{});var z1t=s(Wbe);V4r=r(z1t,"deberta"),z1t.forEach(t),X4r=r(ike," \u2014 "),yW=n(ike,"A",{href:!0});var Q1t=s(yW);z4r=r(Q1t,"TFDebertaForTokenClassification"),Q1t.forEach(t),Q4r=r(ike," (DeBERTa model)"),ike.forEach(t),W4r=i(me),xM=n(me,"LI",{});var dke=s(xM);Hbe=n(dke,"STRONG",{});var W1t=s(Hbe);H4r=r(W1t,"deberta-v2"),W1t.forEach(t),U4r=r(dke," \u2014 "),LW=n(dke,"A",{href:!0});var H1t=s(LW);J4r=r(H1t,"TFDebertaV2ForTokenClassification"),H1t.forEach(t),Y4r=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),K4r=i(me),$M=n(me,"LI",{});var cke=s($M);Ube=n(cke,"STRONG",{});var U1t=s(Ube);Z4r=r(U1t,"distilbert"),U1t.forEach(t),evr=r(cke," \u2014 "),xW=n(cke,"A",{href:!0});var J1t=s(xW);ovr=r(J1t,"TFDistilBertForTokenClassification"),J1t.forEach(t),rvr=r(cke," (DistilBERT model)"),cke.forEach(t),tvr=i(me),kM=n(me,"LI",{});var fke=s(kM);Jbe=n(fke,"STRONG",{});var Y1t=s(Jbe);avr=r(Y1t,"electra"),Y1t.forEach(t),nvr=r(fke," \u2014 "),$W=n(fke,"A",{href:!0});var K1t=s($W);svr=r(K1t,"TFElectraForTokenClassification"),K1t.forEach(t),lvr=r(fke," (ELECTRA model)"),fke.forEach(t),ivr=i(me),SM=n(me,"LI",{});var mke=s(SM);Ybe=n(mke,"STRONG",{});var Z1t=s(Ybe);dvr=r(Z1t,"flaubert"),Z1t.forEach(t),cvr=r(mke," \u2014 "),kW=n(mke,"A",{href:!0});var ebt=s(kW);fvr=r(ebt,"TFFlaubertForTokenClassification"),ebt.forEach(t),mvr=r(mke," (FlauBERT model)"),mke.forEach(t),gvr=i(me),RM=n(me,"LI",{});var gke=s(RM);Kbe=n(gke,"STRONG",{});var obt=s(Kbe);hvr=r(obt,"funnel"),obt.forEach(t),pvr=r(gke," \u2014 "),SW=n(gke,"A",{href:!0});var rbt=s(SW);uvr=r(rbt,"TFFunnelForTokenClassification"),rbt.forEach(t),_vr=r(gke," (Funnel Transformer model)"),gke.forEach(t),bvr=i(me),BM=n(me,"LI",{});var hke=s(BM);Zbe=n(hke,"STRONG",{});var tbt=s(Zbe);vvr=r(tbt,"layoutlm"),tbt.forEach(t),Fvr=r(hke," \u2014 "),RW=n(hke,"A",{href:!0});var abt=s(RW);Tvr=r(abt,"TFLayoutLMForTokenClassification"),abt.forEach(t),Mvr=r(hke," (LayoutLM model)"),hke.forEach(t),Evr=i(me),PM=n(me,"LI",{});var pke=s(PM);e4e=n(pke,"STRONG",{});var nbt=s(e4e);Cvr=r(nbt,"longformer"),nbt.forEach(t),wvr=r(pke," \u2014 "),BW=n(pke,"A",{href:!0});var sbt=s(BW);Avr=r(sbt,"TFLongformerForTokenClassification"),sbt.forEach(t),yvr=r(pke," (Longformer model)"),pke.forEach(t),Lvr=i(me),IM=n(me,"LI",{});var uke=s(IM);o4e=n(uke,"STRONG",{});var lbt=s(o4e);xvr=r(lbt,"mobilebert"),lbt.forEach(t),$vr=r(uke," \u2014 "),PW=n(uke,"A",{href:!0});var ibt=s(PW);kvr=r(ibt,"TFMobileBertForTokenClassification"),ibt.forEach(t),Svr=r(uke," (MobileBERT model)"),uke.forEach(t),Rvr=i(me),qM=n(me,"LI",{});var _ke=s(qM);r4e=n(_ke,"STRONG",{});var dbt=s(r4e);Bvr=r(dbt,"mpnet"),dbt.forEach(t),Pvr=r(_ke," \u2014 "),IW=n(_ke,"A",{href:!0});var cbt=s(IW);Ivr=r(cbt,"TFMPNetForTokenClassification"),cbt.forEach(t),qvr=r(_ke," (MPNet model)"),_ke.forEach(t),Nvr=i(me),NM=n(me,"LI",{});var bke=s(NM);t4e=n(bke,"STRONG",{});var fbt=s(t4e);jvr=r(fbt,"rembert"),fbt.forEach(t),Dvr=r(bke," \u2014 "),qW=n(bke,"A",{href:!0});var mbt=s(qW);Gvr=r(mbt,"TFRemBertForTokenClassification"),mbt.forEach(t),Ovr=r(bke," (RemBERT model)"),bke.forEach(t),Vvr=i(me),jM=n(me,"LI",{});var vke=s(jM);a4e=n(vke,"STRONG",{});var gbt=s(a4e);Xvr=r(gbt,"roberta"),gbt.forEach(t),zvr=r(vke," \u2014 "),NW=n(vke,"A",{href:!0});var hbt=s(NW);Qvr=r(hbt,"TFRobertaForTokenClassification"),hbt.forEach(t),Wvr=r(vke," (RoBERTa model)"),vke.forEach(t),Hvr=i(me),DM=n(me,"LI",{});var Fke=s(DM);n4e=n(Fke,"STRONG",{});var pbt=s(n4e);Uvr=r(pbt,"roformer"),pbt.forEach(t),Jvr=r(Fke," \u2014 "),jW=n(Fke,"A",{href:!0});var ubt=s(jW);Yvr=r(ubt,"TFRoFormerForTokenClassification"),ubt.forEach(t),Kvr=r(Fke," (RoFormer model)"),Fke.forEach(t),Zvr=i(me),GM=n(me,"LI",{});var Tke=s(GM);s4e=n(Tke,"STRONG",{});var _bt=s(s4e);eFr=r(_bt,"xlm"),_bt.forEach(t),oFr=r(Tke," \u2014 "),DW=n(Tke,"A",{href:!0});var bbt=s(DW);rFr=r(bbt,"TFXLMForTokenClassification"),bbt.forEach(t),tFr=r(Tke," (XLM model)"),Tke.forEach(t),aFr=i(me),OM=n(me,"LI",{});var Mke=s(OM);l4e=n(Mke,"STRONG",{});var vbt=s(l4e);nFr=r(vbt,"xlm-roberta"),vbt.forEach(t),sFr=r(Mke," \u2014 "),GW=n(Mke,"A",{href:!0});var Fbt=s(GW);lFr=r(Fbt,"TFXLMRobertaForTokenClassification"),Fbt.forEach(t),iFr=r(Mke," (XLM-RoBERTa model)"),Mke.forEach(t),dFr=i(me),VM=n(me,"LI",{});var Eke=s(VM);i4e=n(Eke,"STRONG",{});var Tbt=s(i4e);cFr=r(Tbt,"xlnet"),Tbt.forEach(t),fFr=r(Eke," \u2014 "),OW=n(Eke,"A",{href:!0});var Mbt=s(OW);mFr=r(Mbt,"TFXLNetForTokenClassification"),Mbt.forEach(t),gFr=r(Eke," (XLNet model)"),Eke.forEach(t),me.forEach(t),hFr=i(El),T(XM.$$.fragment,El),El.forEach(t),Ml.forEach(t),cPe=i(f),lc=n(f,"H2",{class:!0});var hqe=s(lc);zM=n(hqe,"A",{id:!0,class:!0,href:!0});var Ebt=s(zM);d4e=n(Ebt,"SPAN",{});var Cbt=s(d4e);T(W8.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),pFr=i(hqe),c4e=n(hqe,"SPAN",{});var wbt=s(c4e);uFr=r(wbt,"TFAutoModelForQuestionAnswering"),wbt.forEach(t),hqe.forEach(t),fPe=i(f),nr=n(f,"DIV",{class:!0});var Cl=s(nr);T(H8.$$.fragment,Cl),_Fr=i(Cl),ic=n(Cl,"P",{});var dK=s(ic);bFr=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VW=n(dK,"A",{href:!0});var Abt=s(VW);vFr=r(Abt,"from_pretrained()"),Abt.forEach(t),FFr=r(dK," class method or the "),XW=n(dK,"A",{href:!0});var ybt=s(XW);TFr=r(ybt,"from_config()"),ybt.forEach(t),MFr=r(dK,` class
method.`),dK.forEach(t),EFr=i(Cl),U8=n(Cl,"P",{});var pqe=s(U8);CFr=r(pqe,"This class cannot be instantiated directly using "),f4e=n(pqe,"CODE",{});var Lbt=s(f4e);wFr=r(Lbt,"__init__()"),Lbt.forEach(t),AFr=r(pqe," (throws an error)."),pqe.forEach(t),yFr=i(Cl),St=n(Cl,"DIV",{class:!0});var Iw=s(St);T(J8.$$.fragment,Iw),LFr=i(Iw),m4e=n(Iw,"P",{});var xbt=s(m4e);xFr=r(xbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xbt.forEach(t),$Fr=i(Iw),dc=n(Iw,"P",{});var cK=s(dc);kFr=r(cK,`Note:
Loading a model from its configuration file does `),g4e=n(cK,"STRONG",{});var $bt=s(g4e);SFr=r($bt,"not"),$bt.forEach(t),RFr=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zW=n(cK,"A",{href:!0});var kbt=s(zW);BFr=r(kbt,"from_pretrained()"),kbt.forEach(t),PFr=r(cK," to load the model weights."),cK.forEach(t),IFr=i(Iw),T(QM.$$.fragment,Iw),Iw.forEach(t),qFr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(Y8.$$.fragment,wl),NFr=i(wl),h4e=n(wl,"P",{});var Sbt=s(h4e);jFr=r(Sbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Sbt.forEach(t),DFr=i(wl),an=n(wl,"P",{});var qw=s(an);GFr=r(qw,"The model class to instantiate is selected based on the "),p4e=n(qw,"CODE",{});var Rbt=s(p4e);OFr=r(Rbt,"model_type"),Rbt.forEach(t),VFr=r(qw,` property of the config object (either
passed as an argument or loaded from `),u4e=n(qw,"CODE",{});var Bbt=s(u4e);XFr=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),zFr=r(qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(qw,"CODE",{});var Pbt=s(_4e);QFr=r(Pbt,"pretrained_model_name_or_path"),Pbt.forEach(t),WFr=r(qw,":"),qw.forEach(t),HFr=i(wl),ce=n(wl,"UL",{});var ge=s(ce);WM=n(ge,"LI",{});var Cke=s(WM);b4e=n(Cke,"STRONG",{});var Ibt=s(b4e);UFr=r(Ibt,"albert"),Ibt.forEach(t),JFr=r(Cke," \u2014 "),QW=n(Cke,"A",{href:!0});var qbt=s(QW);YFr=r(qbt,"TFAlbertForQuestionAnswering"),qbt.forEach(t),KFr=r(Cke," (ALBERT model)"),Cke.forEach(t),ZFr=i(ge),HM=n(ge,"LI",{});var wke=s(HM);v4e=n(wke,"STRONG",{});var Nbt=s(v4e);e0r=r(Nbt,"bert"),Nbt.forEach(t),o0r=r(wke," \u2014 "),WW=n(wke,"A",{href:!0});var jbt=s(WW);r0r=r(jbt,"TFBertForQuestionAnswering"),jbt.forEach(t),t0r=r(wke," (BERT model)"),wke.forEach(t),a0r=i(ge),UM=n(ge,"LI",{});var Ake=s(UM);F4e=n(Ake,"STRONG",{});var Dbt=s(F4e);n0r=r(Dbt,"camembert"),Dbt.forEach(t),s0r=r(Ake," \u2014 "),HW=n(Ake,"A",{href:!0});var Gbt=s(HW);l0r=r(Gbt,"TFCamembertForQuestionAnswering"),Gbt.forEach(t),i0r=r(Ake," (CamemBERT model)"),Ake.forEach(t),d0r=i(ge),JM=n(ge,"LI",{});var yke=s(JM);T4e=n(yke,"STRONG",{});var Obt=s(T4e);c0r=r(Obt,"convbert"),Obt.forEach(t),f0r=r(yke," \u2014 "),UW=n(yke,"A",{href:!0});var Vbt=s(UW);m0r=r(Vbt,"TFConvBertForQuestionAnswering"),Vbt.forEach(t),g0r=r(yke," (ConvBERT model)"),yke.forEach(t),h0r=i(ge),YM=n(ge,"LI",{});var Lke=s(YM);M4e=n(Lke,"STRONG",{});var Xbt=s(M4e);p0r=r(Xbt,"deberta"),Xbt.forEach(t),u0r=r(Lke," \u2014 "),JW=n(Lke,"A",{href:!0});var zbt=s(JW);_0r=r(zbt,"TFDebertaForQuestionAnswering"),zbt.forEach(t),b0r=r(Lke," (DeBERTa model)"),Lke.forEach(t),v0r=i(ge),KM=n(ge,"LI",{});var xke=s(KM);E4e=n(xke,"STRONG",{});var Qbt=s(E4e);F0r=r(Qbt,"deberta-v2"),Qbt.forEach(t),T0r=r(xke," \u2014 "),YW=n(xke,"A",{href:!0});var Wbt=s(YW);M0r=r(Wbt,"TFDebertaV2ForQuestionAnswering"),Wbt.forEach(t),E0r=r(xke," (DeBERTa-v2 model)"),xke.forEach(t),C0r=i(ge),ZM=n(ge,"LI",{});var $ke=s(ZM);C4e=n($ke,"STRONG",{});var Hbt=s(C4e);w0r=r(Hbt,"distilbert"),Hbt.forEach(t),A0r=r($ke," \u2014 "),KW=n($ke,"A",{href:!0});var Ubt=s(KW);y0r=r(Ubt,"TFDistilBertForQuestionAnswering"),Ubt.forEach(t),L0r=r($ke," (DistilBERT model)"),$ke.forEach(t),x0r=i(ge),eE=n(ge,"LI",{});var kke=s(eE);w4e=n(kke,"STRONG",{});var Jbt=s(w4e);$0r=r(Jbt,"electra"),Jbt.forEach(t),k0r=r(kke," \u2014 "),ZW=n(kke,"A",{href:!0});var Ybt=s(ZW);S0r=r(Ybt,"TFElectraForQuestionAnswering"),Ybt.forEach(t),R0r=r(kke," (ELECTRA model)"),kke.forEach(t),B0r=i(ge),oE=n(ge,"LI",{});var Ske=s(oE);A4e=n(Ske,"STRONG",{});var Kbt=s(A4e);P0r=r(Kbt,"flaubert"),Kbt.forEach(t),I0r=r(Ske," \u2014 "),eH=n(Ske,"A",{href:!0});var Zbt=s(eH);q0r=r(Zbt,"TFFlaubertForQuestionAnsweringSimple"),Zbt.forEach(t),N0r=r(Ske," (FlauBERT model)"),Ske.forEach(t),j0r=i(ge),rE=n(ge,"LI",{});var Rke=s(rE);y4e=n(Rke,"STRONG",{});var e4t=s(y4e);D0r=r(e4t,"funnel"),e4t.forEach(t),G0r=r(Rke," \u2014 "),oH=n(Rke,"A",{href:!0});var o4t=s(oH);O0r=r(o4t,"TFFunnelForQuestionAnswering"),o4t.forEach(t),V0r=r(Rke," (Funnel Transformer model)"),Rke.forEach(t),X0r=i(ge),tE=n(ge,"LI",{});var Bke=s(tE);L4e=n(Bke,"STRONG",{});var r4t=s(L4e);z0r=r(r4t,"gptj"),r4t.forEach(t),Q0r=r(Bke," \u2014 "),rH=n(Bke,"A",{href:!0});var t4t=s(rH);W0r=r(t4t,"TFGPTJForQuestionAnswering"),t4t.forEach(t),H0r=r(Bke," (GPT-J model)"),Bke.forEach(t),U0r=i(ge),aE=n(ge,"LI",{});var Pke=s(aE);x4e=n(Pke,"STRONG",{});var a4t=s(x4e);J0r=r(a4t,"longformer"),a4t.forEach(t),Y0r=r(Pke," \u2014 "),tH=n(Pke,"A",{href:!0});var n4t=s(tH);K0r=r(n4t,"TFLongformerForQuestionAnswering"),n4t.forEach(t),Z0r=r(Pke," (Longformer model)"),Pke.forEach(t),e6r=i(ge),nE=n(ge,"LI",{});var Ike=s(nE);$4e=n(Ike,"STRONG",{});var s4t=s($4e);o6r=r(s4t,"mobilebert"),s4t.forEach(t),r6r=r(Ike," \u2014 "),aH=n(Ike,"A",{href:!0});var l4t=s(aH);t6r=r(l4t,"TFMobileBertForQuestionAnswering"),l4t.forEach(t),a6r=r(Ike," (MobileBERT model)"),Ike.forEach(t),n6r=i(ge),sE=n(ge,"LI",{});var qke=s(sE);k4e=n(qke,"STRONG",{});var i4t=s(k4e);s6r=r(i4t,"mpnet"),i4t.forEach(t),l6r=r(qke," \u2014 "),nH=n(qke,"A",{href:!0});var d4t=s(nH);i6r=r(d4t,"TFMPNetForQuestionAnswering"),d4t.forEach(t),d6r=r(qke," (MPNet model)"),qke.forEach(t),c6r=i(ge),lE=n(ge,"LI",{});var Nke=s(lE);S4e=n(Nke,"STRONG",{});var c4t=s(S4e);f6r=r(c4t,"rembert"),c4t.forEach(t),m6r=r(Nke," \u2014 "),sH=n(Nke,"A",{href:!0});var f4t=s(sH);g6r=r(f4t,"TFRemBertForQuestionAnswering"),f4t.forEach(t),h6r=r(Nke," (RemBERT model)"),Nke.forEach(t),p6r=i(ge),iE=n(ge,"LI",{});var jke=s(iE);R4e=n(jke,"STRONG",{});var m4t=s(R4e);u6r=r(m4t,"roberta"),m4t.forEach(t),_6r=r(jke," \u2014 "),lH=n(jke,"A",{href:!0});var g4t=s(lH);b6r=r(g4t,"TFRobertaForQuestionAnswering"),g4t.forEach(t),v6r=r(jke," (RoBERTa model)"),jke.forEach(t),F6r=i(ge),dE=n(ge,"LI",{});var Dke=s(dE);B4e=n(Dke,"STRONG",{});var h4t=s(B4e);T6r=r(h4t,"roformer"),h4t.forEach(t),M6r=r(Dke," \u2014 "),iH=n(Dke,"A",{href:!0});var p4t=s(iH);E6r=r(p4t,"TFRoFormerForQuestionAnswering"),p4t.forEach(t),C6r=r(Dke," (RoFormer model)"),Dke.forEach(t),w6r=i(ge),cE=n(ge,"LI",{});var Gke=s(cE);P4e=n(Gke,"STRONG",{});var u4t=s(P4e);A6r=r(u4t,"xlm"),u4t.forEach(t),y6r=r(Gke," \u2014 "),dH=n(Gke,"A",{href:!0});var _4t=s(dH);L6r=r(_4t,"TFXLMForQuestionAnsweringSimple"),_4t.forEach(t),x6r=r(Gke," (XLM model)"),Gke.forEach(t),$6r=i(ge),fE=n(ge,"LI",{});var Oke=s(fE);I4e=n(Oke,"STRONG",{});var b4t=s(I4e);k6r=r(b4t,"xlm-roberta"),b4t.forEach(t),S6r=r(Oke," \u2014 "),cH=n(Oke,"A",{href:!0});var v4t=s(cH);R6r=r(v4t,"TFXLMRobertaForQuestionAnswering"),v4t.forEach(t),B6r=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),P6r=i(ge),mE=n(ge,"LI",{});var Vke=s(mE);q4e=n(Vke,"STRONG",{});var F4t=s(q4e);I6r=r(F4t,"xlnet"),F4t.forEach(t),q6r=r(Vke," \u2014 "),fH=n(Vke,"A",{href:!0});var T4t=s(fH);N6r=r(T4t,"TFXLNetForQuestionAnsweringSimple"),T4t.forEach(t),j6r=r(Vke," (XLNet model)"),Vke.forEach(t),ge.forEach(t),D6r=i(wl),T(gE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),mPe=i(f),cc=n(f,"H2",{class:!0});var uqe=s(cc);hE=n(uqe,"A",{id:!0,class:!0,href:!0});var M4t=s(hE);N4e=n(M4t,"SPAN",{});var E4t=s(N4e);T(K8.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),G6r=i(uqe),j4e=n(uqe,"SPAN",{});var C4t=s(j4e);O6r=r(C4t,"TFAutoModelForVision2Seq"),C4t.forEach(t),uqe.forEach(t),gPe=i(f),sr=n(f,"DIV",{class:!0});var Al=s(sr);T(Z8.$$.fragment,Al),V6r=i(Al),fc=n(Al,"P",{});var fK=s(fc);X6r=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),mH=n(fK,"A",{href:!0});var w4t=s(mH);z6r=r(w4t,"from_pretrained()"),w4t.forEach(t),Q6r=r(fK," class method or the "),gH=n(fK,"A",{href:!0});var A4t=s(gH);W6r=r(A4t,"from_config()"),A4t.forEach(t),H6r=r(fK,` class
method.`),fK.forEach(t),U6r=i(Al),e7=n(Al,"P",{});var _qe=s(e7);J6r=r(_qe,"This class cannot be instantiated directly using "),D4e=n(_qe,"CODE",{});var y4t=s(D4e);Y6r=r(y4t,"__init__()"),y4t.forEach(t),K6r=r(_qe," (throws an error)."),_qe.forEach(t),Z6r=i(Al),Rt=n(Al,"DIV",{class:!0});var Nw=s(Rt);T(o7.$$.fragment,Nw),eTr=i(Nw),G4e=n(Nw,"P",{});var L4t=s(G4e);oTr=r(L4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),L4t.forEach(t),rTr=i(Nw),mc=n(Nw,"P",{});var mK=s(mc);tTr=r(mK,`Note:
Loading a model from its configuration file does `),O4e=n(mK,"STRONG",{});var x4t=s(O4e);aTr=r(x4t,"not"),x4t.forEach(t),nTr=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(mK,"A",{href:!0});var $4t=s(hH);sTr=r($4t,"from_pretrained()"),$4t.forEach(t),lTr=r(mK," to load the model weights."),mK.forEach(t),iTr=i(Nw),T(pE.$$.fragment,Nw),Nw.forEach(t),dTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(r7.$$.fragment,yl),cTr=i(yl),V4e=n(yl,"P",{});var k4t=s(V4e);fTr=r(k4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k4t.forEach(t),mTr=i(yl),nn=n(yl,"P",{});var jw=s(nn);gTr=r(jw,"The model class to instantiate is selected based on the "),X4e=n(jw,"CODE",{});var S4t=s(X4e);hTr=r(S4t,"model_type"),S4t.forEach(t),pTr=r(jw,` property of the config object (either
passed as an argument or loaded from `),z4e=n(jw,"CODE",{});var R4t=s(z4e);uTr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),_Tr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(jw,"CODE",{});var B4t=s(Q4e);bTr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),vTr=r(jw,":"),jw.forEach(t),FTr=i(yl),W4e=n(yl,"UL",{});var P4t=s(W4e);uE=n(P4t,"LI",{});var Xke=s(uE);H4e=n(Xke,"STRONG",{});var I4t=s(H4e);TTr=r(I4t,"vision-encoder-decoder"),I4t.forEach(t),MTr=r(Xke," \u2014 "),pH=n(Xke,"A",{href:!0});var q4t=s(pH);ETr=r(q4t,"TFVisionEncoderDecoderModel"),q4t.forEach(t),CTr=r(Xke," (Vision Encoder decoder model)"),Xke.forEach(t),P4t.forEach(t),wTr=i(yl),T(_E.$$.fragment,yl),yl.forEach(t),Al.forEach(t),hPe=i(f),gc=n(f,"H2",{class:!0});var bqe=s(gc);bE=n(bqe,"A",{id:!0,class:!0,href:!0});var N4t=s(bE);U4e=n(N4t,"SPAN",{});var j4t=s(U4e);T(t7.$$.fragment,j4t),j4t.forEach(t),N4t.forEach(t),ATr=i(bqe),J4e=n(bqe,"SPAN",{});var D4t=s(J4e);yTr=r(D4t,"TFAutoModelForSpeechSeq2Seq"),D4t.forEach(t),bqe.forEach(t),pPe=i(f),lr=n(f,"DIV",{class:!0});var Ll=s(lr);T(a7.$$.fragment,Ll),LTr=i(Ll),hc=n(Ll,"P",{});var gK=s(hc);xTr=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),uH=n(gK,"A",{href:!0});var G4t=s(uH);$Tr=r(G4t,"from_pretrained()"),G4t.forEach(t),kTr=r(gK," class method or the "),_H=n(gK,"A",{href:!0});var O4t=s(_H);STr=r(O4t,"from_config()"),O4t.forEach(t),RTr=r(gK,` class
method.`),gK.forEach(t),BTr=i(Ll),n7=n(Ll,"P",{});var vqe=s(n7);PTr=r(vqe,"This class cannot be instantiated directly using "),Y4e=n(vqe,"CODE",{});var V4t=s(Y4e);ITr=r(V4t,"__init__()"),V4t.forEach(t),qTr=r(vqe," (throws an error)."),vqe.forEach(t),NTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Dw=s(Bt);T(s7.$$.fragment,Dw),jTr=i(Dw),K4e=n(Dw,"P",{});var X4t=s(K4e);DTr=r(X4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),X4t.forEach(t),GTr=i(Dw),pc=n(Dw,"P",{});var hK=s(pc);OTr=r(hK,`Note:
Loading a model from its configuration file does `),Z4e=n(hK,"STRONG",{});var z4t=s(Z4e);VTr=r(z4t,"not"),z4t.forEach(t),XTr=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(hK,"A",{href:!0});var Q4t=s(bH);zTr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),QTr=r(hK," to load the model weights."),hK.forEach(t),WTr=i(Dw),T(vE.$$.fragment,Dw),Dw.forEach(t),HTr=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(l7.$$.fragment,xl),UTr=i(xl),eve=n(xl,"P",{});var W4t=s(eve);JTr=r(W4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W4t.forEach(t),YTr=i(xl),sn=n(xl,"P",{});var Gw=s(sn);KTr=r(Gw,"The model class to instantiate is selected based on the "),ove=n(Gw,"CODE",{});var H4t=s(ove);ZTr=r(H4t,"model_type"),H4t.forEach(t),eMr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),rve=n(Gw,"CODE",{});var U4t=s(rve);oMr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),rMr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tve=n(Gw,"CODE",{});var J4t=s(tve);tMr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),aMr=r(Gw,":"),Gw.forEach(t),nMr=i(xl),ave=n(xl,"UL",{});var Y4t=s(ave);FE=n(Y4t,"LI",{});var zke=s(FE);nve=n(zke,"STRONG",{});var K4t=s(nve);sMr=r(K4t,"speech_to_text"),K4t.forEach(t),lMr=r(zke," \u2014 "),vH=n(zke,"A",{href:!0});var Z4t=s(vH);iMr=r(Z4t,"TFSpeech2TextForConditionalGeneration"),Z4t.forEach(t),dMr=r(zke," (Speech2Text model)"),zke.forEach(t),Y4t.forEach(t),cMr=i(xl),T(TE.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),uPe=i(f),uc=n(f,"H2",{class:!0});var Fqe=s(uc);ME=n(Fqe,"A",{id:!0,class:!0,href:!0});var evt=s(ME);sve=n(evt,"SPAN",{});var ovt=s(sve);T(i7.$$.fragment,ovt),ovt.forEach(t),evt.forEach(t),fMr=i(Fqe),lve=n(Fqe,"SPAN",{});var rvt=s(lve);mMr=r(rvt,"FlaxAutoModel"),rvt.forEach(t),Fqe.forEach(t),_Pe=i(f),ir=n(f,"DIV",{class:!0});var $l=s(ir);T(d7.$$.fragment,$l),gMr=i($l),_c=n($l,"P",{});var pK=s(_c);hMr=r(pK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FH=n(pK,"A",{href:!0});var tvt=s(FH);pMr=r(tvt,"from_pretrained()"),tvt.forEach(t),uMr=r(pK," class method or the "),TH=n(pK,"A",{href:!0});var avt=s(TH);_Mr=r(avt,"from_config()"),avt.forEach(t),bMr=r(pK,` class
method.`),pK.forEach(t),vMr=i($l),c7=n($l,"P",{});var Tqe=s(c7);FMr=r(Tqe,"This class cannot be instantiated directly using "),ive=n(Tqe,"CODE",{});var nvt=s(ive);TMr=r(nvt,"__init__()"),nvt.forEach(t),MMr=r(Tqe," (throws an error)."),Tqe.forEach(t),EMr=i($l),Pt=n($l,"DIV",{class:!0});var Ow=s(Pt);T(f7.$$.fragment,Ow),CMr=i(Ow),dve=n(Ow,"P",{});var svt=s(dve);wMr=r(svt,"Instantiates one of the base model classes of the library from a configuration."),svt.forEach(t),AMr=i(Ow),bc=n(Ow,"P",{});var uK=s(bc);yMr=r(uK,`Note:
Loading a model from its configuration file does `),cve=n(uK,"STRONG",{});var lvt=s(cve);LMr=r(lvt,"not"),lvt.forEach(t),xMr=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(uK,"A",{href:!0});var ivt=s(MH);$Mr=r(ivt,"from_pretrained()"),ivt.forEach(t),kMr=r(uK," to load the model weights."),uK.forEach(t),SMr=i(Ow),T(EE.$$.fragment,Ow),Ow.forEach(t),RMr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(m7.$$.fragment,kl),BMr=i(kl),fve=n(kl,"P",{});var dvt=s(fve);PMr=r(dvt,"Instantiate one of the base model classes of the library from a pretrained model."),dvt.forEach(t),IMr=i(kl),ln=n(kl,"P",{});var Vw=s(ln);qMr=r(Vw,"The model class to instantiate is selected based on the "),mve=n(Vw,"CODE",{});var cvt=s(mve);NMr=r(cvt,"model_type"),cvt.forEach(t),jMr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),gve=n(Vw,"CODE",{});var fvt=s(gve);DMr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),GMr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(Vw,"CODE",{});var mvt=s(hve);OMr=r(mvt,"pretrained_model_name_or_path"),mvt.forEach(t),VMr=r(Vw,":"),Vw.forEach(t),XMr=i(kl),oe=n(kl,"UL",{});var te=s(oe);CE=n(te,"LI",{});var Qke=s(CE);pve=n(Qke,"STRONG",{});var gvt=s(pve);zMr=r(gvt,"albert"),gvt.forEach(t),QMr=r(Qke," \u2014 "),EH=n(Qke,"A",{href:!0});var hvt=s(EH);WMr=r(hvt,"FlaxAlbertModel"),hvt.forEach(t),HMr=r(Qke," (ALBERT model)"),Qke.forEach(t),UMr=i(te),wE=n(te,"LI",{});var Wke=s(wE);uve=n(Wke,"STRONG",{});var pvt=s(uve);JMr=r(pvt,"bart"),pvt.forEach(t),YMr=r(Wke," \u2014 "),CH=n(Wke,"A",{href:!0});var uvt=s(CH);KMr=r(uvt,"FlaxBartModel"),uvt.forEach(t),ZMr=r(Wke," (BART model)"),Wke.forEach(t),eEr=i(te),AE=n(te,"LI",{});var Hke=s(AE);_ve=n(Hke,"STRONG",{});var _vt=s(_ve);oEr=r(_vt,"beit"),_vt.forEach(t),rEr=r(Hke," \u2014 "),wH=n(Hke,"A",{href:!0});var bvt=s(wH);tEr=r(bvt,"FlaxBeitModel"),bvt.forEach(t),aEr=r(Hke," (BEiT model)"),Hke.forEach(t),nEr=i(te),yE=n(te,"LI",{});var Uke=s(yE);bve=n(Uke,"STRONG",{});var vvt=s(bve);sEr=r(vvt,"bert"),vvt.forEach(t),lEr=r(Uke," \u2014 "),AH=n(Uke,"A",{href:!0});var Fvt=s(AH);iEr=r(Fvt,"FlaxBertModel"),Fvt.forEach(t),dEr=r(Uke," (BERT model)"),Uke.forEach(t),cEr=i(te),LE=n(te,"LI",{});var Jke=s(LE);vve=n(Jke,"STRONG",{});var Tvt=s(vve);fEr=r(Tvt,"big_bird"),Tvt.forEach(t),mEr=r(Jke," \u2014 "),yH=n(Jke,"A",{href:!0});var Mvt=s(yH);gEr=r(Mvt,"FlaxBigBirdModel"),Mvt.forEach(t),hEr=r(Jke," (BigBird model)"),Jke.forEach(t),pEr=i(te),xE=n(te,"LI",{});var Yke=s(xE);Fve=n(Yke,"STRONG",{});var Evt=s(Fve);uEr=r(Evt,"blenderbot"),Evt.forEach(t),_Er=r(Yke," \u2014 "),LH=n(Yke,"A",{href:!0});var Cvt=s(LH);bEr=r(Cvt,"FlaxBlenderbotModel"),Cvt.forEach(t),vEr=r(Yke," (Blenderbot model)"),Yke.forEach(t),FEr=i(te),$E=n(te,"LI",{});var Kke=s($E);Tve=n(Kke,"STRONG",{});var wvt=s(Tve);TEr=r(wvt,"blenderbot-small"),wvt.forEach(t),MEr=r(Kke," \u2014 "),xH=n(Kke,"A",{href:!0});var Avt=s(xH);EEr=r(Avt,"FlaxBlenderbotSmallModel"),Avt.forEach(t),CEr=r(Kke," (BlenderbotSmall model)"),Kke.forEach(t),wEr=i(te),kE=n(te,"LI",{});var Zke=s(kE);Mve=n(Zke,"STRONG",{});var yvt=s(Mve);AEr=r(yvt,"clip"),yvt.forEach(t),yEr=r(Zke," \u2014 "),$H=n(Zke,"A",{href:!0});var Lvt=s($H);LEr=r(Lvt,"FlaxCLIPModel"),Lvt.forEach(t),xEr=r(Zke," (CLIP model)"),Zke.forEach(t),$Er=i(te),SE=n(te,"LI",{});var eSe=s(SE);Eve=n(eSe,"STRONG",{});var xvt=s(Eve);kEr=r(xvt,"distilbert"),xvt.forEach(t),SEr=r(eSe," \u2014 "),kH=n(eSe,"A",{href:!0});var $vt=s(kH);REr=r($vt,"FlaxDistilBertModel"),$vt.forEach(t),BEr=r(eSe," (DistilBERT model)"),eSe.forEach(t),PEr=i(te),RE=n(te,"LI",{});var oSe=s(RE);Cve=n(oSe,"STRONG",{});var kvt=s(Cve);IEr=r(kvt,"electra"),kvt.forEach(t),qEr=r(oSe," \u2014 "),SH=n(oSe,"A",{href:!0});var Svt=s(SH);NEr=r(Svt,"FlaxElectraModel"),Svt.forEach(t),jEr=r(oSe," (ELECTRA model)"),oSe.forEach(t),DEr=i(te),BE=n(te,"LI",{});var rSe=s(BE);wve=n(rSe,"STRONG",{});var Rvt=s(wve);GEr=r(Rvt,"gpt2"),Rvt.forEach(t),OEr=r(rSe," \u2014 "),RH=n(rSe,"A",{href:!0});var Bvt=s(RH);VEr=r(Bvt,"FlaxGPT2Model"),Bvt.forEach(t),XEr=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),zEr=i(te),PE=n(te,"LI",{});var tSe=s(PE);Ave=n(tSe,"STRONG",{});var Pvt=s(Ave);QEr=r(Pvt,"gpt_neo"),Pvt.forEach(t),WEr=r(tSe," \u2014 "),BH=n(tSe,"A",{href:!0});var Ivt=s(BH);HEr=r(Ivt,"FlaxGPTNeoModel"),Ivt.forEach(t),UEr=r(tSe," (GPT Neo model)"),tSe.forEach(t),JEr=i(te),IE=n(te,"LI",{});var aSe=s(IE);yve=n(aSe,"STRONG",{});var qvt=s(yve);YEr=r(qvt,"gptj"),qvt.forEach(t),KEr=r(aSe," \u2014 "),PH=n(aSe,"A",{href:!0});var Nvt=s(PH);ZEr=r(Nvt,"FlaxGPTJModel"),Nvt.forEach(t),e5r=r(aSe," (GPT-J model)"),aSe.forEach(t),o5r=i(te),qE=n(te,"LI",{});var nSe=s(qE);Lve=n(nSe,"STRONG",{});var jvt=s(Lve);r5r=r(jvt,"marian"),jvt.forEach(t),t5r=r(nSe," \u2014 "),IH=n(nSe,"A",{href:!0});var Dvt=s(IH);a5r=r(Dvt,"FlaxMarianModel"),Dvt.forEach(t),n5r=r(nSe," (Marian model)"),nSe.forEach(t),s5r=i(te),NE=n(te,"LI",{});var sSe=s(NE);xve=n(sSe,"STRONG",{});var Gvt=s(xve);l5r=r(Gvt,"mbart"),Gvt.forEach(t),i5r=r(sSe," \u2014 "),qH=n(sSe,"A",{href:!0});var Ovt=s(qH);d5r=r(Ovt,"FlaxMBartModel"),Ovt.forEach(t),c5r=r(sSe," (mBART model)"),sSe.forEach(t),f5r=i(te),jE=n(te,"LI",{});var lSe=s(jE);$ve=n(lSe,"STRONG",{});var Vvt=s($ve);m5r=r(Vvt,"mt5"),Vvt.forEach(t),g5r=r(lSe," \u2014 "),NH=n(lSe,"A",{href:!0});var Xvt=s(NH);h5r=r(Xvt,"FlaxMT5Model"),Xvt.forEach(t),p5r=r(lSe," (mT5 model)"),lSe.forEach(t),u5r=i(te),DE=n(te,"LI",{});var iSe=s(DE);kve=n(iSe,"STRONG",{});var zvt=s(kve);_5r=r(zvt,"pegasus"),zvt.forEach(t),b5r=r(iSe," \u2014 "),jH=n(iSe,"A",{href:!0});var Qvt=s(jH);v5r=r(Qvt,"FlaxPegasusModel"),Qvt.forEach(t),F5r=r(iSe," (Pegasus model)"),iSe.forEach(t),T5r=i(te),GE=n(te,"LI",{});var dSe=s(GE);Sve=n(dSe,"STRONG",{});var Wvt=s(Sve);M5r=r(Wvt,"roberta"),Wvt.forEach(t),E5r=r(dSe," \u2014 "),DH=n(dSe,"A",{href:!0});var Hvt=s(DH);C5r=r(Hvt,"FlaxRobertaModel"),Hvt.forEach(t),w5r=r(dSe," (RoBERTa model)"),dSe.forEach(t),A5r=i(te),OE=n(te,"LI",{});var cSe=s(OE);Rve=n(cSe,"STRONG",{});var Uvt=s(Rve);y5r=r(Uvt,"roformer"),Uvt.forEach(t),L5r=r(cSe," \u2014 "),GH=n(cSe,"A",{href:!0});var Jvt=s(GH);x5r=r(Jvt,"FlaxRoFormerModel"),Jvt.forEach(t),$5r=r(cSe," (RoFormer model)"),cSe.forEach(t),k5r=i(te),VE=n(te,"LI",{});var fSe=s(VE);Bve=n(fSe,"STRONG",{});var Yvt=s(Bve);S5r=r(Yvt,"t5"),Yvt.forEach(t),R5r=r(fSe," \u2014 "),OH=n(fSe,"A",{href:!0});var Kvt=s(OH);B5r=r(Kvt,"FlaxT5Model"),Kvt.forEach(t),P5r=r(fSe," (T5 model)"),fSe.forEach(t),I5r=i(te),XE=n(te,"LI",{});var mSe=s(XE);Pve=n(mSe,"STRONG",{});var Zvt=s(Pve);q5r=r(Zvt,"vision-text-dual-encoder"),Zvt.forEach(t),N5r=r(mSe," \u2014 "),VH=n(mSe,"A",{href:!0});var eFt=s(VH);j5r=r(eFt,"FlaxVisionTextDualEncoderModel"),eFt.forEach(t),D5r=r(mSe," (VisionTextDualEncoder model)"),mSe.forEach(t),G5r=i(te),zE=n(te,"LI",{});var gSe=s(zE);Ive=n(gSe,"STRONG",{});var oFt=s(Ive);O5r=r(oFt,"vit"),oFt.forEach(t),V5r=r(gSe," \u2014 "),XH=n(gSe,"A",{href:!0});var rFt=s(XH);X5r=r(rFt,"FlaxViTModel"),rFt.forEach(t),z5r=r(gSe," (ViT model)"),gSe.forEach(t),Q5r=i(te),QE=n(te,"LI",{});var hSe=s(QE);qve=n(hSe,"STRONG",{});var tFt=s(qve);W5r=r(tFt,"wav2vec2"),tFt.forEach(t),H5r=r(hSe," \u2014 "),zH=n(hSe,"A",{href:!0});var aFt=s(zH);U5r=r(aFt,"FlaxWav2Vec2Model"),aFt.forEach(t),J5r=r(hSe," (Wav2Vec2 model)"),hSe.forEach(t),Y5r=i(te),WE=n(te,"LI",{});var pSe=s(WE);Nve=n(pSe,"STRONG",{});var nFt=s(Nve);K5r=r(nFt,"xglm"),nFt.forEach(t),Z5r=r(pSe," \u2014 "),QH=n(pSe,"A",{href:!0});var sFt=s(QH);eCr=r(sFt,"FlaxXGLMModel"),sFt.forEach(t),oCr=r(pSe," (XGLM model)"),pSe.forEach(t),rCr=i(te),HE=n(te,"LI",{});var uSe=s(HE);jve=n(uSe,"STRONG",{});var lFt=s(jve);tCr=r(lFt,"xlm-roberta"),lFt.forEach(t),aCr=r(uSe," \u2014 "),WH=n(uSe,"A",{href:!0});var iFt=s(WH);nCr=r(iFt,"FlaxXLMRobertaModel"),iFt.forEach(t),sCr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),te.forEach(t),lCr=i(kl),T(UE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),bPe=i(f),vc=n(f,"H2",{class:!0});var Mqe=s(vc);JE=n(Mqe,"A",{id:!0,class:!0,href:!0});var dFt=s(JE);Dve=n(dFt,"SPAN",{});var cFt=s(Dve);T(g7.$$.fragment,cFt),cFt.forEach(t),dFt.forEach(t),iCr=i(Mqe),Gve=n(Mqe,"SPAN",{});var fFt=s(Gve);dCr=r(fFt,"FlaxAutoModelForCausalLM"),fFt.forEach(t),Mqe.forEach(t),vPe=i(f),dr=n(f,"DIV",{class:!0});var Sl=s(dr);T(h7.$$.fragment,Sl),cCr=i(Sl),Fc=n(Sl,"P",{});var _K=s(Fc);fCr=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),HH=n(_K,"A",{href:!0});var mFt=s(HH);mCr=r(mFt,"from_pretrained()"),mFt.forEach(t),gCr=r(_K," class method or the "),UH=n(_K,"A",{href:!0});var gFt=s(UH);hCr=r(gFt,"from_config()"),gFt.forEach(t),pCr=r(_K,` class
method.`),_K.forEach(t),uCr=i(Sl),p7=n(Sl,"P",{});var Eqe=s(p7);_Cr=r(Eqe,"This class cannot be instantiated directly using "),Ove=n(Eqe,"CODE",{});var hFt=s(Ove);bCr=r(hFt,"__init__()"),hFt.forEach(t),vCr=r(Eqe," (throws an error)."),Eqe.forEach(t),FCr=i(Sl),It=n(Sl,"DIV",{class:!0});var Xw=s(It);T(u7.$$.fragment,Xw),TCr=i(Xw),Vve=n(Xw,"P",{});var pFt=s(Vve);MCr=r(pFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pFt.forEach(t),ECr=i(Xw),Tc=n(Xw,"P",{});var bK=s(Tc);CCr=r(bK,`Note:
Loading a model from its configuration file does `),Xve=n(bK,"STRONG",{});var uFt=s(Xve);wCr=r(uFt,"not"),uFt.forEach(t),ACr=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(bK,"A",{href:!0});var _Ft=s(JH);yCr=r(_Ft,"from_pretrained()"),_Ft.forEach(t),LCr=r(bK," to load the model weights."),bK.forEach(t),xCr=i(Xw),T(YE.$$.fragment,Xw),Xw.forEach(t),$Cr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(_7.$$.fragment,Rl),kCr=i(Rl),zve=n(Rl,"P",{});var bFt=s(zve);SCr=r(bFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bFt.forEach(t),RCr=i(Rl),dn=n(Rl,"P",{});var zw=s(dn);BCr=r(zw,"The model class to instantiate is selected based on the "),Qve=n(zw,"CODE",{});var vFt=s(Qve);PCr=r(vFt,"model_type"),vFt.forEach(t),ICr=r(zw,` property of the config object (either
passed as an argument or loaded from `),Wve=n(zw,"CODE",{});var FFt=s(Wve);qCr=r(FFt,"pretrained_model_name_or_path"),FFt.forEach(t),NCr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(zw,"CODE",{});var TFt=s(Hve);jCr=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),DCr=r(zw,":"),zw.forEach(t),GCr=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);KE=n(Bl,"LI",{});var _Se=s(KE);Uve=n(_Se,"STRONG",{});var MFt=s(Uve);OCr=r(MFt,"bart"),MFt.forEach(t),VCr=r(_Se," \u2014 "),YH=n(_Se,"A",{href:!0});var EFt=s(YH);XCr=r(EFt,"FlaxBartForCausalLM"),EFt.forEach(t),zCr=r(_Se," (BART model)"),_Se.forEach(t),QCr=i(Bl),ZE=n(Bl,"LI",{});var bSe=s(ZE);Jve=n(bSe,"STRONG",{});var CFt=s(Jve);WCr=r(CFt,"gpt2"),CFt.forEach(t),HCr=r(bSe," \u2014 "),KH=n(bSe,"A",{href:!0});var wFt=s(KH);UCr=r(wFt,"FlaxGPT2LMHeadModel"),wFt.forEach(t),JCr=r(bSe," (OpenAI GPT-2 model)"),bSe.forEach(t),YCr=i(Bl),e5=n(Bl,"LI",{});var vSe=s(e5);Yve=n(vSe,"STRONG",{});var AFt=s(Yve);KCr=r(AFt,"gpt_neo"),AFt.forEach(t),ZCr=r(vSe," \u2014 "),ZH=n(vSe,"A",{href:!0});var yFt=s(ZH);e3r=r(yFt,"FlaxGPTNeoForCausalLM"),yFt.forEach(t),o3r=r(vSe," (GPT Neo model)"),vSe.forEach(t),r3r=i(Bl),o5=n(Bl,"LI",{});var FSe=s(o5);Kve=n(FSe,"STRONG",{});var LFt=s(Kve);t3r=r(LFt,"gptj"),LFt.forEach(t),a3r=r(FSe," \u2014 "),eU=n(FSe,"A",{href:!0});var xFt=s(eU);n3r=r(xFt,"FlaxGPTJForCausalLM"),xFt.forEach(t),s3r=r(FSe," (GPT-J model)"),FSe.forEach(t),l3r=i(Bl),r5=n(Bl,"LI",{});var TSe=s(r5);Zve=n(TSe,"STRONG",{});var $Ft=s(Zve);i3r=r($Ft,"xglm"),$Ft.forEach(t),d3r=r(TSe," \u2014 "),oU=n(TSe,"A",{href:!0});var kFt=s(oU);c3r=r(kFt,"FlaxXGLMForCausalLM"),kFt.forEach(t),f3r=r(TSe," (XGLM model)"),TSe.forEach(t),Bl.forEach(t),m3r=i(Rl),T(t5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),FPe=i(f),Mc=n(f,"H2",{class:!0});var Cqe=s(Mc);a5=n(Cqe,"A",{id:!0,class:!0,href:!0});var SFt=s(a5);eFe=n(SFt,"SPAN",{});var RFt=s(eFe);T(b7.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),g3r=i(Cqe),oFe=n(Cqe,"SPAN",{});var BFt=s(oFe);h3r=r(BFt,"FlaxAutoModelForPreTraining"),BFt.forEach(t),Cqe.forEach(t),TPe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(v7.$$.fragment,Pl),p3r=i(Pl),Ec=n(Pl,"P",{});var vK=s(Ec);u3r=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rU=n(vK,"A",{href:!0});var PFt=s(rU);_3r=r(PFt,"from_pretrained()"),PFt.forEach(t),b3r=r(vK," class method or the "),tU=n(vK,"A",{href:!0});var IFt=s(tU);v3r=r(IFt,"from_config()"),IFt.forEach(t),F3r=r(vK,` class
method.`),vK.forEach(t),T3r=i(Pl),F7=n(Pl,"P",{});var wqe=s(F7);M3r=r(wqe,"This class cannot be instantiated directly using "),rFe=n(wqe,"CODE",{});var qFt=s(rFe);E3r=r(qFt,"__init__()"),qFt.forEach(t),C3r=r(wqe," (throws an error)."),wqe.forEach(t),w3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Qw=s(qt);T(T7.$$.fragment,Qw),A3r=i(Qw),tFe=n(Qw,"P",{});var NFt=s(tFe);y3r=r(NFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NFt.forEach(t),L3r=i(Qw),Cc=n(Qw,"P",{});var FK=s(Cc);x3r=r(FK,`Note:
Loading a model from its configuration file does `),aFe=n(FK,"STRONG",{});var jFt=s(aFe);$3r=r(jFt,"not"),jFt.forEach(t),k3r=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(FK,"A",{href:!0});var DFt=s(aU);S3r=r(DFt,"from_pretrained()"),DFt.forEach(t),R3r=r(FK," to load the model weights."),FK.forEach(t),B3r=i(Qw),T(n5.$$.fragment,Qw),Qw.forEach(t),P3r=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(M7.$$.fragment,Il),I3r=i(Il),nFe=n(Il,"P",{});var GFt=s(nFe);q3r=r(GFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),GFt.forEach(t),N3r=i(Il),cn=n(Il,"P",{});var Ww=s(cn);j3r=r(Ww,"The model class to instantiate is selected based on the "),sFe=n(Ww,"CODE",{});var OFt=s(sFe);D3r=r(OFt,"model_type"),OFt.forEach(t),G3r=r(Ww,` property of the config object (either
passed as an argument or loaded from `),lFe=n(Ww,"CODE",{});var VFt=s(lFe);O3r=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),V3r=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(Ww,"CODE",{});var XFt=s(iFe);X3r=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),z3r=r(Ww,":"),Ww.forEach(t),Q3r=i(Il),Me=n(Il,"UL",{});var we=s(Me);s5=n(we,"LI",{});var MSe=s(s5);dFe=n(MSe,"STRONG",{});var zFt=s(dFe);W3r=r(zFt,"albert"),zFt.forEach(t),H3r=r(MSe," \u2014 "),nU=n(MSe,"A",{href:!0});var QFt=s(nU);U3r=r(QFt,"FlaxAlbertForPreTraining"),QFt.forEach(t),J3r=r(MSe," (ALBERT model)"),MSe.forEach(t),Y3r=i(we),l5=n(we,"LI",{});var ESe=s(l5);cFe=n(ESe,"STRONG",{});var WFt=s(cFe);K3r=r(WFt,"bart"),WFt.forEach(t),Z3r=r(ESe," \u2014 "),sU=n(ESe,"A",{href:!0});var HFt=s(sU);ewr=r(HFt,"FlaxBartForConditionalGeneration"),HFt.forEach(t),owr=r(ESe," (BART model)"),ESe.forEach(t),rwr=i(we),i5=n(we,"LI",{});var CSe=s(i5);fFe=n(CSe,"STRONG",{});var UFt=s(fFe);twr=r(UFt,"bert"),UFt.forEach(t),awr=r(CSe," \u2014 "),lU=n(CSe,"A",{href:!0});var JFt=s(lU);nwr=r(JFt,"FlaxBertForPreTraining"),JFt.forEach(t),swr=r(CSe," (BERT model)"),CSe.forEach(t),lwr=i(we),d5=n(we,"LI",{});var wSe=s(d5);mFe=n(wSe,"STRONG",{});var YFt=s(mFe);iwr=r(YFt,"big_bird"),YFt.forEach(t),dwr=r(wSe," \u2014 "),iU=n(wSe,"A",{href:!0});var KFt=s(iU);cwr=r(KFt,"FlaxBigBirdForPreTraining"),KFt.forEach(t),fwr=r(wSe," (BigBird model)"),wSe.forEach(t),mwr=i(we),c5=n(we,"LI",{});var ASe=s(c5);gFe=n(ASe,"STRONG",{});var ZFt=s(gFe);gwr=r(ZFt,"electra"),ZFt.forEach(t),hwr=r(ASe," \u2014 "),dU=n(ASe,"A",{href:!0});var e0t=s(dU);pwr=r(e0t,"FlaxElectraForPreTraining"),e0t.forEach(t),uwr=r(ASe," (ELECTRA model)"),ASe.forEach(t),_wr=i(we),f5=n(we,"LI",{});var ySe=s(f5);hFe=n(ySe,"STRONG",{});var o0t=s(hFe);bwr=r(o0t,"mbart"),o0t.forEach(t),vwr=r(ySe," \u2014 "),cU=n(ySe,"A",{href:!0});var r0t=s(cU);Fwr=r(r0t,"FlaxMBartForConditionalGeneration"),r0t.forEach(t),Twr=r(ySe," (mBART model)"),ySe.forEach(t),Mwr=i(we),m5=n(we,"LI",{});var LSe=s(m5);pFe=n(LSe,"STRONG",{});var t0t=s(pFe);Ewr=r(t0t,"mt5"),t0t.forEach(t),Cwr=r(LSe," \u2014 "),fU=n(LSe,"A",{href:!0});var a0t=s(fU);wwr=r(a0t,"FlaxMT5ForConditionalGeneration"),a0t.forEach(t),Awr=r(LSe," (mT5 model)"),LSe.forEach(t),ywr=i(we),g5=n(we,"LI",{});var xSe=s(g5);uFe=n(xSe,"STRONG",{});var n0t=s(uFe);Lwr=r(n0t,"roberta"),n0t.forEach(t),xwr=r(xSe," \u2014 "),mU=n(xSe,"A",{href:!0});var s0t=s(mU);$wr=r(s0t,"FlaxRobertaForMaskedLM"),s0t.forEach(t),kwr=r(xSe," (RoBERTa model)"),xSe.forEach(t),Swr=i(we),h5=n(we,"LI",{});var $Se=s(h5);_Fe=n($Se,"STRONG",{});var l0t=s(_Fe);Rwr=r(l0t,"roformer"),l0t.forEach(t),Bwr=r($Se," \u2014 "),gU=n($Se,"A",{href:!0});var i0t=s(gU);Pwr=r(i0t,"FlaxRoFormerForMaskedLM"),i0t.forEach(t),Iwr=r($Se," (RoFormer model)"),$Se.forEach(t),qwr=i(we),p5=n(we,"LI",{});var kSe=s(p5);bFe=n(kSe,"STRONG",{});var d0t=s(bFe);Nwr=r(d0t,"t5"),d0t.forEach(t),jwr=r(kSe," \u2014 "),hU=n(kSe,"A",{href:!0});var c0t=s(hU);Dwr=r(c0t,"FlaxT5ForConditionalGeneration"),c0t.forEach(t),Gwr=r(kSe," (T5 model)"),kSe.forEach(t),Owr=i(we),u5=n(we,"LI",{});var SSe=s(u5);vFe=n(SSe,"STRONG",{});var f0t=s(vFe);Vwr=r(f0t,"wav2vec2"),f0t.forEach(t),Xwr=r(SSe," \u2014 "),pU=n(SSe,"A",{href:!0});var m0t=s(pU);zwr=r(m0t,"FlaxWav2Vec2ForPreTraining"),m0t.forEach(t),Qwr=r(SSe," (Wav2Vec2 model)"),SSe.forEach(t),Wwr=i(we),_5=n(we,"LI",{});var RSe=s(_5);FFe=n(RSe,"STRONG",{});var g0t=s(FFe);Hwr=r(g0t,"xlm-roberta"),g0t.forEach(t),Uwr=r(RSe," \u2014 "),uU=n(RSe,"A",{href:!0});var h0t=s(uU);Jwr=r(h0t,"FlaxXLMRobertaForMaskedLM"),h0t.forEach(t),Ywr=r(RSe," (XLM-RoBERTa model)"),RSe.forEach(t),we.forEach(t),Kwr=i(Il),T(b5.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),MPe=i(f),wc=n(f,"H2",{class:!0});var Aqe=s(wc);v5=n(Aqe,"A",{id:!0,class:!0,href:!0});var p0t=s(v5);TFe=n(p0t,"SPAN",{});var u0t=s(TFe);T(E7.$$.fragment,u0t),u0t.forEach(t),p0t.forEach(t),Zwr=i(Aqe),MFe=n(Aqe,"SPAN",{});var _0t=s(MFe);eAr=r(_0t,"FlaxAutoModelForMaskedLM"),_0t.forEach(t),Aqe.forEach(t),EPe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(C7.$$.fragment,ql),oAr=i(ql),Ac=n(ql,"P",{});var TK=s(Ac);rAr=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_U=n(TK,"A",{href:!0});var b0t=s(_U);tAr=r(b0t,"from_pretrained()"),b0t.forEach(t),aAr=r(TK," class method or the "),bU=n(TK,"A",{href:!0});var v0t=s(bU);nAr=r(v0t,"from_config()"),v0t.forEach(t),sAr=r(TK,` class
method.`),TK.forEach(t),lAr=i(ql),w7=n(ql,"P",{});var yqe=s(w7);iAr=r(yqe,"This class cannot be instantiated directly using "),EFe=n(yqe,"CODE",{});var F0t=s(EFe);dAr=r(F0t,"__init__()"),F0t.forEach(t),cAr=r(yqe," (throws an error)."),yqe.forEach(t),fAr=i(ql),Nt=n(ql,"DIV",{class:!0});var Hw=s(Nt);T(A7.$$.fragment,Hw),mAr=i(Hw),CFe=n(Hw,"P",{});var T0t=s(CFe);gAr=r(T0t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T0t.forEach(t),hAr=i(Hw),yc=n(Hw,"P",{});var MK=s(yc);pAr=r(MK,`Note:
Loading a model from its configuration file does `),wFe=n(MK,"STRONG",{});var M0t=s(wFe);uAr=r(M0t,"not"),M0t.forEach(t),_Ar=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(MK,"A",{href:!0});var E0t=s(vU);bAr=r(E0t,"from_pretrained()"),E0t.forEach(t),vAr=r(MK," to load the model weights."),MK.forEach(t),FAr=i(Hw),T(F5.$$.fragment,Hw),Hw.forEach(t),TAr=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(y7.$$.fragment,Nl),MAr=i(Nl),AFe=n(Nl,"P",{});var C0t=s(AFe);EAr=r(C0t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),C0t.forEach(t),CAr=i(Nl),fn=n(Nl,"P",{});var Uw=s(fn);wAr=r(Uw,"The model class to instantiate is selected based on the "),yFe=n(Uw,"CODE",{});var w0t=s(yFe);AAr=r(w0t,"model_type"),w0t.forEach(t),yAr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),LFe=n(Uw,"CODE",{});var A0t=s(LFe);LAr=r(A0t,"pretrained_model_name_or_path"),A0t.forEach(t),xAr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xFe=n(Uw,"CODE",{});var y0t=s(xFe);$Ar=r(y0t,"pretrained_model_name_or_path"),y0t.forEach(t),kAr=r(Uw,":"),Uw.forEach(t),SAr=i(Nl),Le=n(Nl,"UL",{});var Be=s(Le);T5=n(Be,"LI",{});var BSe=s(T5);$Fe=n(BSe,"STRONG",{});var L0t=s($Fe);RAr=r(L0t,"albert"),L0t.forEach(t),BAr=r(BSe," \u2014 "),FU=n(BSe,"A",{href:!0});var x0t=s(FU);PAr=r(x0t,"FlaxAlbertForMaskedLM"),x0t.forEach(t),IAr=r(BSe," (ALBERT model)"),BSe.forEach(t),qAr=i(Be),M5=n(Be,"LI",{});var PSe=s(M5);kFe=n(PSe,"STRONG",{});var $0t=s(kFe);NAr=r($0t,"bart"),$0t.forEach(t),jAr=r(PSe," \u2014 "),TU=n(PSe,"A",{href:!0});var k0t=s(TU);DAr=r(k0t,"FlaxBartForConditionalGeneration"),k0t.forEach(t),GAr=r(PSe," (BART model)"),PSe.forEach(t),OAr=i(Be),E5=n(Be,"LI",{});var ISe=s(E5);SFe=n(ISe,"STRONG",{});var S0t=s(SFe);VAr=r(S0t,"bert"),S0t.forEach(t),XAr=r(ISe," \u2014 "),MU=n(ISe,"A",{href:!0});var R0t=s(MU);zAr=r(R0t,"FlaxBertForMaskedLM"),R0t.forEach(t),QAr=r(ISe," (BERT model)"),ISe.forEach(t),WAr=i(Be),C5=n(Be,"LI",{});var qSe=s(C5);RFe=n(qSe,"STRONG",{});var B0t=s(RFe);HAr=r(B0t,"big_bird"),B0t.forEach(t),UAr=r(qSe," \u2014 "),EU=n(qSe,"A",{href:!0});var P0t=s(EU);JAr=r(P0t,"FlaxBigBirdForMaskedLM"),P0t.forEach(t),YAr=r(qSe," (BigBird model)"),qSe.forEach(t),KAr=i(Be),w5=n(Be,"LI",{});var NSe=s(w5);BFe=n(NSe,"STRONG",{});var I0t=s(BFe);ZAr=r(I0t,"distilbert"),I0t.forEach(t),eyr=r(NSe," \u2014 "),CU=n(NSe,"A",{href:!0});var q0t=s(CU);oyr=r(q0t,"FlaxDistilBertForMaskedLM"),q0t.forEach(t),ryr=r(NSe," (DistilBERT model)"),NSe.forEach(t),tyr=i(Be),A5=n(Be,"LI",{});var jSe=s(A5);PFe=n(jSe,"STRONG",{});var N0t=s(PFe);ayr=r(N0t,"electra"),N0t.forEach(t),nyr=r(jSe," \u2014 "),wU=n(jSe,"A",{href:!0});var j0t=s(wU);syr=r(j0t,"FlaxElectraForMaskedLM"),j0t.forEach(t),lyr=r(jSe," (ELECTRA model)"),jSe.forEach(t),iyr=i(Be),y5=n(Be,"LI",{});var DSe=s(y5);IFe=n(DSe,"STRONG",{});var D0t=s(IFe);dyr=r(D0t,"mbart"),D0t.forEach(t),cyr=r(DSe," \u2014 "),AU=n(DSe,"A",{href:!0});var G0t=s(AU);fyr=r(G0t,"FlaxMBartForConditionalGeneration"),G0t.forEach(t),myr=r(DSe," (mBART model)"),DSe.forEach(t),gyr=i(Be),L5=n(Be,"LI",{});var GSe=s(L5);qFe=n(GSe,"STRONG",{});var O0t=s(qFe);hyr=r(O0t,"roberta"),O0t.forEach(t),pyr=r(GSe," \u2014 "),yU=n(GSe,"A",{href:!0});var V0t=s(yU);uyr=r(V0t,"FlaxRobertaForMaskedLM"),V0t.forEach(t),_yr=r(GSe," (RoBERTa model)"),GSe.forEach(t),byr=i(Be),x5=n(Be,"LI",{});var OSe=s(x5);NFe=n(OSe,"STRONG",{});var X0t=s(NFe);vyr=r(X0t,"roformer"),X0t.forEach(t),Fyr=r(OSe," \u2014 "),LU=n(OSe,"A",{href:!0});var z0t=s(LU);Tyr=r(z0t,"FlaxRoFormerForMaskedLM"),z0t.forEach(t),Myr=r(OSe," (RoFormer model)"),OSe.forEach(t),Eyr=i(Be),$5=n(Be,"LI",{});var VSe=s($5);jFe=n(VSe,"STRONG",{});var Q0t=s(jFe);Cyr=r(Q0t,"xlm-roberta"),Q0t.forEach(t),wyr=r(VSe," \u2014 "),xU=n(VSe,"A",{href:!0});var W0t=s(xU);Ayr=r(W0t,"FlaxXLMRobertaForMaskedLM"),W0t.forEach(t),yyr=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),Be.forEach(t),Lyr=i(Nl),T(k5.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),CPe=i(f),Lc=n(f,"H2",{class:!0});var Lqe=s(Lc);S5=n(Lqe,"A",{id:!0,class:!0,href:!0});var H0t=s(S5);DFe=n(H0t,"SPAN",{});var U0t=s(DFe);T(L7.$$.fragment,U0t),U0t.forEach(t),H0t.forEach(t),xyr=i(Lqe),GFe=n(Lqe,"SPAN",{});var J0t=s(GFe);$yr=r(J0t,"FlaxAutoModelForSeq2SeqLM"),J0t.forEach(t),Lqe.forEach(t),wPe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(x7.$$.fragment,jl),kyr=i(jl),xc=n(jl,"P",{});var EK=s(xc);Syr=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$U=n(EK,"A",{href:!0});var Y0t=s($U);Ryr=r(Y0t,"from_pretrained()"),Y0t.forEach(t),Byr=r(EK," class method or the "),kU=n(EK,"A",{href:!0});var K0t=s(kU);Pyr=r(K0t,"from_config()"),K0t.forEach(t),Iyr=r(EK,` class
method.`),EK.forEach(t),qyr=i(jl),$7=n(jl,"P",{});var xqe=s($7);Nyr=r(xqe,"This class cannot be instantiated directly using "),OFe=n(xqe,"CODE",{});var Z0t=s(OFe);jyr=r(Z0t,"__init__()"),Z0t.forEach(t),Dyr=r(xqe," (throws an error)."),xqe.forEach(t),Gyr=i(jl),jt=n(jl,"DIV",{class:!0});var Jw=s(jt);T(k7.$$.fragment,Jw),Oyr=i(Jw),VFe=n(Jw,"P",{});var e6t=s(VFe);Vyr=r(e6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e6t.forEach(t),Xyr=i(Jw),$c=n(Jw,"P",{});var CK=s($c);zyr=r(CK,`Note:
Loading a model from its configuration file does `),XFe=n(CK,"STRONG",{});var o6t=s(XFe);Qyr=r(o6t,"not"),o6t.forEach(t),Wyr=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(CK,"A",{href:!0});var r6t=s(SU);Hyr=r(r6t,"from_pretrained()"),r6t.forEach(t),Uyr=r(CK," to load the model weights."),CK.forEach(t),Jyr=i(Jw),T(R5.$$.fragment,Jw),Jw.forEach(t),Yyr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(S7.$$.fragment,Dl),Kyr=i(Dl),zFe=n(Dl,"P",{});var t6t=s(zFe);Zyr=r(t6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t6t.forEach(t),eLr=i(Dl),mn=n(Dl,"P",{});var Yw=s(mn);oLr=r(Yw,"The model class to instantiate is selected based on the "),QFe=n(Yw,"CODE",{});var a6t=s(QFe);rLr=r(a6t,"model_type"),a6t.forEach(t),tLr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),WFe=n(Yw,"CODE",{});var n6t=s(WFe);aLr=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),nLr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(Yw,"CODE",{});var s6t=s(HFe);sLr=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),lLr=r(Yw,":"),Yw.forEach(t),iLr=i(Dl),Se=n(Dl,"UL",{});var Oe=s(Se);B5=n(Oe,"LI",{});var XSe=s(B5);UFe=n(XSe,"STRONG",{});var l6t=s(UFe);dLr=r(l6t,"bart"),l6t.forEach(t),cLr=r(XSe," \u2014 "),RU=n(XSe,"A",{href:!0});var i6t=s(RU);fLr=r(i6t,"FlaxBartForConditionalGeneration"),i6t.forEach(t),mLr=r(XSe," (BART model)"),XSe.forEach(t),gLr=i(Oe),P5=n(Oe,"LI",{});var zSe=s(P5);JFe=n(zSe,"STRONG",{});var d6t=s(JFe);hLr=r(d6t,"blenderbot"),d6t.forEach(t),pLr=r(zSe," \u2014 "),BU=n(zSe,"A",{href:!0});var c6t=s(BU);uLr=r(c6t,"FlaxBlenderbotForConditionalGeneration"),c6t.forEach(t),_Lr=r(zSe," (Blenderbot model)"),zSe.forEach(t),bLr=i(Oe),I5=n(Oe,"LI",{});var QSe=s(I5);YFe=n(QSe,"STRONG",{});var f6t=s(YFe);vLr=r(f6t,"blenderbot-small"),f6t.forEach(t),FLr=r(QSe," \u2014 "),PU=n(QSe,"A",{href:!0});var m6t=s(PU);TLr=r(m6t,"FlaxBlenderbotSmallForConditionalGeneration"),m6t.forEach(t),MLr=r(QSe," (BlenderbotSmall model)"),QSe.forEach(t),ELr=i(Oe),q5=n(Oe,"LI",{});var WSe=s(q5);KFe=n(WSe,"STRONG",{});var g6t=s(KFe);CLr=r(g6t,"encoder-decoder"),g6t.forEach(t),wLr=r(WSe," \u2014 "),IU=n(WSe,"A",{href:!0});var h6t=s(IU);ALr=r(h6t,"FlaxEncoderDecoderModel"),h6t.forEach(t),yLr=r(WSe," (Encoder decoder model)"),WSe.forEach(t),LLr=i(Oe),N5=n(Oe,"LI",{});var HSe=s(N5);ZFe=n(HSe,"STRONG",{});var p6t=s(ZFe);xLr=r(p6t,"marian"),p6t.forEach(t),$Lr=r(HSe," \u2014 "),qU=n(HSe,"A",{href:!0});var u6t=s(qU);kLr=r(u6t,"FlaxMarianMTModel"),u6t.forEach(t),SLr=r(HSe," (Marian model)"),HSe.forEach(t),RLr=i(Oe),j5=n(Oe,"LI",{});var USe=s(j5);e0e=n(USe,"STRONG",{});var _6t=s(e0e);BLr=r(_6t,"mbart"),_6t.forEach(t),PLr=r(USe," \u2014 "),NU=n(USe,"A",{href:!0});var b6t=s(NU);ILr=r(b6t,"FlaxMBartForConditionalGeneration"),b6t.forEach(t),qLr=r(USe," (mBART model)"),USe.forEach(t),NLr=i(Oe),D5=n(Oe,"LI",{});var JSe=s(D5);o0e=n(JSe,"STRONG",{});var v6t=s(o0e);jLr=r(v6t,"mt5"),v6t.forEach(t),DLr=r(JSe," \u2014 "),jU=n(JSe,"A",{href:!0});var F6t=s(jU);GLr=r(F6t,"FlaxMT5ForConditionalGeneration"),F6t.forEach(t),OLr=r(JSe," (mT5 model)"),JSe.forEach(t),VLr=i(Oe),G5=n(Oe,"LI",{});var YSe=s(G5);r0e=n(YSe,"STRONG",{});var T6t=s(r0e);XLr=r(T6t,"pegasus"),T6t.forEach(t),zLr=r(YSe," \u2014 "),DU=n(YSe,"A",{href:!0});var M6t=s(DU);QLr=r(M6t,"FlaxPegasusForConditionalGeneration"),M6t.forEach(t),WLr=r(YSe," (Pegasus model)"),YSe.forEach(t),HLr=i(Oe),O5=n(Oe,"LI",{});var KSe=s(O5);t0e=n(KSe,"STRONG",{});var E6t=s(t0e);ULr=r(E6t,"t5"),E6t.forEach(t),JLr=r(KSe," \u2014 "),GU=n(KSe,"A",{href:!0});var C6t=s(GU);YLr=r(C6t,"FlaxT5ForConditionalGeneration"),C6t.forEach(t),KLr=r(KSe," (T5 model)"),KSe.forEach(t),Oe.forEach(t),ZLr=i(Dl),T(V5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),APe=i(f),kc=n(f,"H2",{class:!0});var $qe=s(kc);X5=n($qe,"A",{id:!0,class:!0,href:!0});var w6t=s(X5);a0e=n(w6t,"SPAN",{});var A6t=s(a0e);T(R7.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),e8r=i($qe),n0e=n($qe,"SPAN",{});var y6t=s(n0e);o8r=r(y6t,"FlaxAutoModelForSequenceClassification"),y6t.forEach(t),$qe.forEach(t),yPe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(B7.$$.fragment,Gl),r8r=i(Gl),Sc=n(Gl,"P",{});var wK=s(Sc);t8r=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),OU=n(wK,"A",{href:!0});var L6t=s(OU);a8r=r(L6t,"from_pretrained()"),L6t.forEach(t),n8r=r(wK," class method or the "),VU=n(wK,"A",{href:!0});var x6t=s(VU);s8r=r(x6t,"from_config()"),x6t.forEach(t),l8r=r(wK,` class
method.`),wK.forEach(t),i8r=i(Gl),P7=n(Gl,"P",{});var kqe=s(P7);d8r=r(kqe,"This class cannot be instantiated directly using "),s0e=n(kqe,"CODE",{});var $6t=s(s0e);c8r=r($6t,"__init__()"),$6t.forEach(t),f8r=r(kqe," (throws an error)."),kqe.forEach(t),m8r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Kw=s(Dt);T(I7.$$.fragment,Kw),g8r=i(Kw),l0e=n(Kw,"P",{});var k6t=s(l0e);h8r=r(k6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k6t.forEach(t),p8r=i(Kw),Rc=n(Kw,"P",{});var AK=s(Rc);u8r=r(AK,`Note:
Loading a model from its configuration file does `),i0e=n(AK,"STRONG",{});var S6t=s(i0e);_8r=r(S6t,"not"),S6t.forEach(t),b8r=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XU=n(AK,"A",{href:!0});var R6t=s(XU);v8r=r(R6t,"from_pretrained()"),R6t.forEach(t),F8r=r(AK," to load the model weights."),AK.forEach(t),T8r=i(Kw),T(z5.$$.fragment,Kw),Kw.forEach(t),M8r=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(q7.$$.fragment,Ol),E8r=i(Ol),d0e=n(Ol,"P",{});var B6t=s(d0e);C8r=r(B6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),B6t.forEach(t),w8r=i(Ol),gn=n(Ol,"P",{});var Zw=s(gn);A8r=r(Zw,"The model class to instantiate is selected based on the "),c0e=n(Zw,"CODE",{});var P6t=s(c0e);y8r=r(P6t,"model_type"),P6t.forEach(t),L8r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),f0e=n(Zw,"CODE",{});var I6t=s(f0e);x8r=r(I6t,"pretrained_model_name_or_path"),I6t.forEach(t),$8r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m0e=n(Zw,"CODE",{});var q6t=s(m0e);k8r=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),S8r=r(Zw,":"),Zw.forEach(t),R8r=i(Ol),xe=n(Ol,"UL",{});var Pe=s(xe);Q5=n(Pe,"LI",{});var ZSe=s(Q5);g0e=n(ZSe,"STRONG",{});var N6t=s(g0e);B8r=r(N6t,"albert"),N6t.forEach(t),P8r=r(ZSe," \u2014 "),zU=n(ZSe,"A",{href:!0});var j6t=s(zU);I8r=r(j6t,"FlaxAlbertForSequenceClassification"),j6t.forEach(t),q8r=r(ZSe," (ALBERT model)"),ZSe.forEach(t),N8r=i(Pe),W5=n(Pe,"LI",{});var eRe=s(W5);h0e=n(eRe,"STRONG",{});var D6t=s(h0e);j8r=r(D6t,"bart"),D6t.forEach(t),D8r=r(eRe," \u2014 "),QU=n(eRe,"A",{href:!0});var G6t=s(QU);G8r=r(G6t,"FlaxBartForSequenceClassification"),G6t.forEach(t),O8r=r(eRe," (BART model)"),eRe.forEach(t),V8r=i(Pe),H5=n(Pe,"LI",{});var oRe=s(H5);p0e=n(oRe,"STRONG",{});var O6t=s(p0e);X8r=r(O6t,"bert"),O6t.forEach(t),z8r=r(oRe," \u2014 "),WU=n(oRe,"A",{href:!0});var V6t=s(WU);Q8r=r(V6t,"FlaxBertForSequenceClassification"),V6t.forEach(t),W8r=r(oRe," (BERT model)"),oRe.forEach(t),H8r=i(Pe),U5=n(Pe,"LI",{});var rRe=s(U5);u0e=n(rRe,"STRONG",{});var X6t=s(u0e);U8r=r(X6t,"big_bird"),X6t.forEach(t),J8r=r(rRe," \u2014 "),HU=n(rRe,"A",{href:!0});var z6t=s(HU);Y8r=r(z6t,"FlaxBigBirdForSequenceClassification"),z6t.forEach(t),K8r=r(rRe," (BigBird model)"),rRe.forEach(t),Z8r=i(Pe),J5=n(Pe,"LI",{});var tRe=s(J5);_0e=n(tRe,"STRONG",{});var Q6t=s(_0e);e7r=r(Q6t,"distilbert"),Q6t.forEach(t),o7r=r(tRe," \u2014 "),UU=n(tRe,"A",{href:!0});var W6t=s(UU);r7r=r(W6t,"FlaxDistilBertForSequenceClassification"),W6t.forEach(t),t7r=r(tRe," (DistilBERT model)"),tRe.forEach(t),a7r=i(Pe),Y5=n(Pe,"LI",{});var aRe=s(Y5);b0e=n(aRe,"STRONG",{});var H6t=s(b0e);n7r=r(H6t,"electra"),H6t.forEach(t),s7r=r(aRe," \u2014 "),JU=n(aRe,"A",{href:!0});var U6t=s(JU);l7r=r(U6t,"FlaxElectraForSequenceClassification"),U6t.forEach(t),i7r=r(aRe," (ELECTRA model)"),aRe.forEach(t),d7r=i(Pe),K5=n(Pe,"LI",{});var nRe=s(K5);v0e=n(nRe,"STRONG",{});var J6t=s(v0e);c7r=r(J6t,"mbart"),J6t.forEach(t),f7r=r(nRe," \u2014 "),YU=n(nRe,"A",{href:!0});var Y6t=s(YU);m7r=r(Y6t,"FlaxMBartForSequenceClassification"),Y6t.forEach(t),g7r=r(nRe," (mBART model)"),nRe.forEach(t),h7r=i(Pe),Z5=n(Pe,"LI",{});var sRe=s(Z5);F0e=n(sRe,"STRONG",{});var K6t=s(F0e);p7r=r(K6t,"roberta"),K6t.forEach(t),u7r=r(sRe," \u2014 "),KU=n(sRe,"A",{href:!0});var Z6t=s(KU);_7r=r(Z6t,"FlaxRobertaForSequenceClassification"),Z6t.forEach(t),b7r=r(sRe," (RoBERTa model)"),sRe.forEach(t),v7r=i(Pe),eC=n(Pe,"LI",{});var lRe=s(eC);T0e=n(lRe,"STRONG",{});var eTt=s(T0e);F7r=r(eTt,"roformer"),eTt.forEach(t),T7r=r(lRe," \u2014 "),ZU=n(lRe,"A",{href:!0});var oTt=s(ZU);M7r=r(oTt,"FlaxRoFormerForSequenceClassification"),oTt.forEach(t),E7r=r(lRe," (RoFormer model)"),lRe.forEach(t),C7r=i(Pe),oC=n(Pe,"LI",{});var iRe=s(oC);M0e=n(iRe,"STRONG",{});var rTt=s(M0e);w7r=r(rTt,"xlm-roberta"),rTt.forEach(t),A7r=r(iRe," \u2014 "),eJ=n(iRe,"A",{href:!0});var tTt=s(eJ);y7r=r(tTt,"FlaxXLMRobertaForSequenceClassification"),tTt.forEach(t),L7r=r(iRe," (XLM-RoBERTa model)"),iRe.forEach(t),Pe.forEach(t),x7r=i(Ol),T(rC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),LPe=i(f),Bc=n(f,"H2",{class:!0});var Sqe=s(Bc);tC=n(Sqe,"A",{id:!0,class:!0,href:!0});var aTt=s(tC);E0e=n(aTt,"SPAN",{});var nTt=s(E0e);T(N7.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),$7r=i(Sqe),C0e=n(Sqe,"SPAN",{});var sTt=s(C0e);k7r=r(sTt,"FlaxAutoModelForQuestionAnswering"),sTt.forEach(t),Sqe.forEach(t),xPe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(j7.$$.fragment,Vl),S7r=i(Vl),Pc=n(Vl,"P",{});var yK=s(Pc);R7r=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),oJ=n(yK,"A",{href:!0});var lTt=s(oJ);B7r=r(lTt,"from_pretrained()"),lTt.forEach(t),P7r=r(yK," class method or the "),rJ=n(yK,"A",{href:!0});var iTt=s(rJ);I7r=r(iTt,"from_config()"),iTt.forEach(t),q7r=r(yK,` class
method.`),yK.forEach(t),N7r=i(Vl),D7=n(Vl,"P",{});var Rqe=s(D7);j7r=r(Rqe,"This class cannot be instantiated directly using "),w0e=n(Rqe,"CODE",{});var dTt=s(w0e);D7r=r(dTt,"__init__()"),dTt.forEach(t),G7r=r(Rqe," (throws an error)."),Rqe.forEach(t),O7r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var eA=s(Gt);T(G7.$$.fragment,eA),V7r=i(eA),A0e=n(eA,"P",{});var cTt=s(A0e);X7r=r(cTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cTt.forEach(t),z7r=i(eA),Ic=n(eA,"P",{});var LK=s(Ic);Q7r=r(LK,`Note:
Loading a model from its configuration file does `),y0e=n(LK,"STRONG",{});var fTt=s(y0e);W7r=r(fTt,"not"),fTt.forEach(t),H7r=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tJ=n(LK,"A",{href:!0});var mTt=s(tJ);U7r=r(mTt,"from_pretrained()"),mTt.forEach(t),J7r=r(LK," to load the model weights."),LK.forEach(t),Y7r=i(eA),T(aC.$$.fragment,eA),eA.forEach(t),K7r=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(O7.$$.fragment,Xl),Z7r=i(Xl),L0e=n(Xl,"P",{});var gTt=s(L0e);exr=r(gTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gTt.forEach(t),oxr=i(Xl),hn=n(Xl,"P",{});var oA=s(hn);rxr=r(oA,"The model class to instantiate is selected based on the "),x0e=n(oA,"CODE",{});var hTt=s(x0e);txr=r(hTt,"model_type"),hTt.forEach(t),axr=r(oA,` property of the config object (either
passed as an argument or loaded from `),$0e=n(oA,"CODE",{});var pTt=s($0e);nxr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),sxr=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k0e=n(oA,"CODE",{});var uTt=s(k0e);lxr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),ixr=r(oA,":"),oA.forEach(t),dxr=i(Xl),$e=n(Xl,"UL",{});var Ie=s($e);nC=n(Ie,"LI",{});var dRe=s(nC);S0e=n(dRe,"STRONG",{});var _Tt=s(S0e);cxr=r(_Tt,"albert"),_Tt.forEach(t),fxr=r(dRe," \u2014 "),aJ=n(dRe,"A",{href:!0});var bTt=s(aJ);mxr=r(bTt,"FlaxAlbertForQuestionAnswering"),bTt.forEach(t),gxr=r(dRe," (ALBERT model)"),dRe.forEach(t),hxr=i(Ie),sC=n(Ie,"LI",{});var cRe=s(sC);R0e=n(cRe,"STRONG",{});var vTt=s(R0e);pxr=r(vTt,"bart"),vTt.forEach(t),uxr=r(cRe," \u2014 "),nJ=n(cRe,"A",{href:!0});var FTt=s(nJ);_xr=r(FTt,"FlaxBartForQuestionAnswering"),FTt.forEach(t),bxr=r(cRe," (BART model)"),cRe.forEach(t),vxr=i(Ie),lC=n(Ie,"LI",{});var fRe=s(lC);B0e=n(fRe,"STRONG",{});var TTt=s(B0e);Fxr=r(TTt,"bert"),TTt.forEach(t),Txr=r(fRe," \u2014 "),sJ=n(fRe,"A",{href:!0});var MTt=s(sJ);Mxr=r(MTt,"FlaxBertForQuestionAnswering"),MTt.forEach(t),Exr=r(fRe," (BERT model)"),fRe.forEach(t),Cxr=i(Ie),iC=n(Ie,"LI",{});var mRe=s(iC);P0e=n(mRe,"STRONG",{});var ETt=s(P0e);wxr=r(ETt,"big_bird"),ETt.forEach(t),Axr=r(mRe," \u2014 "),lJ=n(mRe,"A",{href:!0});var CTt=s(lJ);yxr=r(CTt,"FlaxBigBirdForQuestionAnswering"),CTt.forEach(t),Lxr=r(mRe," (BigBird model)"),mRe.forEach(t),xxr=i(Ie),dC=n(Ie,"LI",{});var gRe=s(dC);I0e=n(gRe,"STRONG",{});var wTt=s(I0e);$xr=r(wTt,"distilbert"),wTt.forEach(t),kxr=r(gRe," \u2014 "),iJ=n(gRe,"A",{href:!0});var ATt=s(iJ);Sxr=r(ATt,"FlaxDistilBertForQuestionAnswering"),ATt.forEach(t),Rxr=r(gRe," (DistilBERT model)"),gRe.forEach(t),Bxr=i(Ie),cC=n(Ie,"LI",{});var hRe=s(cC);q0e=n(hRe,"STRONG",{});var yTt=s(q0e);Pxr=r(yTt,"electra"),yTt.forEach(t),Ixr=r(hRe," \u2014 "),dJ=n(hRe,"A",{href:!0});var LTt=s(dJ);qxr=r(LTt,"FlaxElectraForQuestionAnswering"),LTt.forEach(t),Nxr=r(hRe," (ELECTRA model)"),hRe.forEach(t),jxr=i(Ie),fC=n(Ie,"LI",{});var pRe=s(fC);N0e=n(pRe,"STRONG",{});var xTt=s(N0e);Dxr=r(xTt,"mbart"),xTt.forEach(t),Gxr=r(pRe," \u2014 "),cJ=n(pRe,"A",{href:!0});var $Tt=s(cJ);Oxr=r($Tt,"FlaxMBartForQuestionAnswering"),$Tt.forEach(t),Vxr=r(pRe," (mBART model)"),pRe.forEach(t),Xxr=i(Ie),mC=n(Ie,"LI",{});var uRe=s(mC);j0e=n(uRe,"STRONG",{});var kTt=s(j0e);zxr=r(kTt,"roberta"),kTt.forEach(t),Qxr=r(uRe," \u2014 "),fJ=n(uRe,"A",{href:!0});var STt=s(fJ);Wxr=r(STt,"FlaxRobertaForQuestionAnswering"),STt.forEach(t),Hxr=r(uRe," (RoBERTa model)"),uRe.forEach(t),Uxr=i(Ie),gC=n(Ie,"LI",{});var _Re=s(gC);D0e=n(_Re,"STRONG",{});var RTt=s(D0e);Jxr=r(RTt,"roformer"),RTt.forEach(t),Yxr=r(_Re," \u2014 "),mJ=n(_Re,"A",{href:!0});var BTt=s(mJ);Kxr=r(BTt,"FlaxRoFormerForQuestionAnswering"),BTt.forEach(t),Zxr=r(_Re," (RoFormer model)"),_Re.forEach(t),e9r=i(Ie),hC=n(Ie,"LI",{});var bRe=s(hC);G0e=n(bRe,"STRONG",{});var PTt=s(G0e);o9r=r(PTt,"xlm-roberta"),PTt.forEach(t),r9r=r(bRe," \u2014 "),gJ=n(bRe,"A",{href:!0});var ITt=s(gJ);t9r=r(ITt,"FlaxXLMRobertaForQuestionAnswering"),ITt.forEach(t),a9r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Ie.forEach(t),n9r=i(Xl),T(pC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),$Pe=i(f),qc=n(f,"H2",{class:!0});var Bqe=s(qc);uC=n(Bqe,"A",{id:!0,class:!0,href:!0});var qTt=s(uC);O0e=n(qTt,"SPAN",{});var NTt=s(O0e);T(V7.$$.fragment,NTt),NTt.forEach(t),qTt.forEach(t),s9r=i(Bqe),V0e=n(Bqe,"SPAN",{});var jTt=s(V0e);l9r=r(jTt,"FlaxAutoModelForTokenClassification"),jTt.forEach(t),Bqe.forEach(t),kPe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(X7.$$.fragment,zl),i9r=i(zl),Nc=n(zl,"P",{});var xK=s(Nc);d9r=r(xK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hJ=n(xK,"A",{href:!0});var DTt=s(hJ);c9r=r(DTt,"from_pretrained()"),DTt.forEach(t),f9r=r(xK," class method or the "),pJ=n(xK,"A",{href:!0});var GTt=s(pJ);m9r=r(GTt,"from_config()"),GTt.forEach(t),g9r=r(xK,` class
method.`),xK.forEach(t),h9r=i(zl),z7=n(zl,"P",{});var Pqe=s(z7);p9r=r(Pqe,"This class cannot be instantiated directly using "),X0e=n(Pqe,"CODE",{});var OTt=s(X0e);u9r=r(OTt,"__init__()"),OTt.forEach(t),_9r=r(Pqe," (throws an error)."),Pqe.forEach(t),b9r=i(zl),Ot=n(zl,"DIV",{class:!0});var rA=s(Ot);T(Q7.$$.fragment,rA),v9r=i(rA),z0e=n(rA,"P",{});var VTt=s(z0e);F9r=r(VTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),VTt.forEach(t),T9r=i(rA),jc=n(rA,"P",{});var $K=s(jc);M9r=r($K,`Note:
Loading a model from its configuration file does `),Q0e=n($K,"STRONG",{});var XTt=s(Q0e);E9r=r(XTt,"not"),XTt.forEach(t),C9r=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),uJ=n($K,"A",{href:!0});var zTt=s(uJ);w9r=r(zTt,"from_pretrained()"),zTt.forEach(t),A9r=r($K," to load the model weights."),$K.forEach(t),y9r=i(rA),T(_C.$$.fragment,rA),rA.forEach(t),L9r=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(W7.$$.fragment,Ql),x9r=i(Ql),W0e=n(Ql,"P",{});var QTt=s(W0e);$9r=r(QTt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),QTt.forEach(t),k9r=i(Ql),pn=n(Ql,"P",{});var tA=s(pn);S9r=r(tA,"The model class to instantiate is selected based on the "),H0e=n(tA,"CODE",{});var WTt=s(H0e);R9r=r(WTt,"model_type"),WTt.forEach(t),B9r=r(tA,` property of the config object (either
passed as an argument or loaded from `),U0e=n(tA,"CODE",{});var HTt=s(U0e);P9r=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),I9r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J0e=n(tA,"CODE",{});var UTt=s(J0e);q9r=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),N9r=r(tA,":"),tA.forEach(t),j9r=i(Ql),je=n(Ql,"UL",{});var bo=s(je);bC=n(bo,"LI",{});var vRe=s(bC);Y0e=n(vRe,"STRONG",{});var JTt=s(Y0e);D9r=r(JTt,"albert"),JTt.forEach(t),G9r=r(vRe," \u2014 "),_J=n(vRe,"A",{href:!0});var YTt=s(_J);O9r=r(YTt,"FlaxAlbertForTokenClassification"),YTt.forEach(t),V9r=r(vRe," (ALBERT model)"),vRe.forEach(t),X9r=i(bo),vC=n(bo,"LI",{});var FRe=s(vC);K0e=n(FRe,"STRONG",{});var KTt=s(K0e);z9r=r(KTt,"bert"),KTt.forEach(t),Q9r=r(FRe," \u2014 "),bJ=n(FRe,"A",{href:!0});var ZTt=s(bJ);W9r=r(ZTt,"FlaxBertForTokenClassification"),ZTt.forEach(t),H9r=r(FRe," (BERT model)"),FRe.forEach(t),U9r=i(bo),FC=n(bo,"LI",{});var TRe=s(FC);Z0e=n(TRe,"STRONG",{});var eMt=s(Z0e);J9r=r(eMt,"big_bird"),eMt.forEach(t),Y9r=r(TRe," \u2014 "),vJ=n(TRe,"A",{href:!0});var oMt=s(vJ);K9r=r(oMt,"FlaxBigBirdForTokenClassification"),oMt.forEach(t),Z9r=r(TRe," (BigBird model)"),TRe.forEach(t),e$r=i(bo),TC=n(bo,"LI",{});var MRe=s(TC);e6e=n(MRe,"STRONG",{});var rMt=s(e6e);o$r=r(rMt,"distilbert"),rMt.forEach(t),r$r=r(MRe," \u2014 "),FJ=n(MRe,"A",{href:!0});var tMt=s(FJ);t$r=r(tMt,"FlaxDistilBertForTokenClassification"),tMt.forEach(t),a$r=r(MRe," (DistilBERT model)"),MRe.forEach(t),n$r=i(bo),MC=n(bo,"LI",{});var ERe=s(MC);o6e=n(ERe,"STRONG",{});var aMt=s(o6e);s$r=r(aMt,"electra"),aMt.forEach(t),l$r=r(ERe," \u2014 "),TJ=n(ERe,"A",{href:!0});var nMt=s(TJ);i$r=r(nMt,"FlaxElectraForTokenClassification"),nMt.forEach(t),d$r=r(ERe," (ELECTRA model)"),ERe.forEach(t),c$r=i(bo),EC=n(bo,"LI",{});var CRe=s(EC);r6e=n(CRe,"STRONG",{});var sMt=s(r6e);f$r=r(sMt,"roberta"),sMt.forEach(t),m$r=r(CRe," \u2014 "),MJ=n(CRe,"A",{href:!0});var lMt=s(MJ);g$r=r(lMt,"FlaxRobertaForTokenClassification"),lMt.forEach(t),h$r=r(CRe," (RoBERTa model)"),CRe.forEach(t),p$r=i(bo),CC=n(bo,"LI",{});var wRe=s(CC);t6e=n(wRe,"STRONG",{});var iMt=s(t6e);u$r=r(iMt,"roformer"),iMt.forEach(t),_$r=r(wRe," \u2014 "),EJ=n(wRe,"A",{href:!0});var dMt=s(EJ);b$r=r(dMt,"FlaxRoFormerForTokenClassification"),dMt.forEach(t),v$r=r(wRe," (RoFormer model)"),wRe.forEach(t),F$r=i(bo),wC=n(bo,"LI",{});var ARe=s(wC);a6e=n(ARe,"STRONG",{});var cMt=s(a6e);T$r=r(cMt,"xlm-roberta"),cMt.forEach(t),M$r=r(ARe," \u2014 "),CJ=n(ARe,"A",{href:!0});var fMt=s(CJ);E$r=r(fMt,"FlaxXLMRobertaForTokenClassification"),fMt.forEach(t),C$r=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),bo.forEach(t),w$r=i(Ql),T(AC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),SPe=i(f),Dc=n(f,"H2",{class:!0});var Iqe=s(Dc);yC=n(Iqe,"A",{id:!0,class:!0,href:!0});var mMt=s(yC);n6e=n(mMt,"SPAN",{});var gMt=s(n6e);T(H7.$$.fragment,gMt),gMt.forEach(t),mMt.forEach(t),A$r=i(Iqe),s6e=n(Iqe,"SPAN",{});var hMt=s(s6e);y$r=r(hMt,"FlaxAutoModelForMultipleChoice"),hMt.forEach(t),Iqe.forEach(t),RPe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(U7.$$.fragment,Wl),L$r=i(Wl),Gc=n(Wl,"P",{});var kK=s(Gc);x$r=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wJ=n(kK,"A",{href:!0});var pMt=s(wJ);$$r=r(pMt,"from_pretrained()"),pMt.forEach(t),k$r=r(kK," class method or the "),AJ=n(kK,"A",{href:!0});var uMt=s(AJ);S$r=r(uMt,"from_config()"),uMt.forEach(t),R$r=r(kK,` class
method.`),kK.forEach(t),B$r=i(Wl),J7=n(Wl,"P",{});var qqe=s(J7);P$r=r(qqe,"This class cannot be instantiated directly using "),l6e=n(qqe,"CODE",{});var _Mt=s(l6e);I$r=r(_Mt,"__init__()"),_Mt.forEach(t),q$r=r(qqe," (throws an error)."),qqe.forEach(t),N$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var aA=s(Vt);T(Y7.$$.fragment,aA),j$r=i(aA),i6e=n(aA,"P",{});var bMt=s(i6e);D$r=r(bMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bMt.forEach(t),G$r=i(aA),Oc=n(aA,"P",{});var SK=s(Oc);O$r=r(SK,`Note:
Loading a model from its configuration file does `),d6e=n(SK,"STRONG",{});var vMt=s(d6e);V$r=r(vMt,"not"),vMt.forEach(t),X$r=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(SK,"A",{href:!0});var FMt=s(yJ);z$r=r(FMt,"from_pretrained()"),FMt.forEach(t),Q$r=r(SK," to load the model weights."),SK.forEach(t),W$r=i(aA),T(LC.$$.fragment,aA),aA.forEach(t),H$r=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(K7.$$.fragment,Hl),U$r=i(Hl),c6e=n(Hl,"P",{});var TMt=s(c6e);J$r=r(TMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),TMt.forEach(t),Y$r=i(Hl),un=n(Hl,"P",{});var nA=s(un);K$r=r(nA,"The model class to instantiate is selected based on the "),f6e=n(nA,"CODE",{});var MMt=s(f6e);Z$r=r(MMt,"model_type"),MMt.forEach(t),ekr=r(nA,` property of the config object (either
passed as an argument or loaded from `),m6e=n(nA,"CODE",{});var EMt=s(m6e);okr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),rkr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g6e=n(nA,"CODE",{});var CMt=s(g6e);tkr=r(CMt,"pretrained_model_name_or_path"),CMt.forEach(t),akr=r(nA,":"),nA.forEach(t),nkr=i(Hl),De=n(Hl,"UL",{});var vo=s(De);xC=n(vo,"LI",{});var yRe=s(xC);h6e=n(yRe,"STRONG",{});var wMt=s(h6e);skr=r(wMt,"albert"),wMt.forEach(t),lkr=r(yRe," \u2014 "),LJ=n(yRe,"A",{href:!0});var AMt=s(LJ);ikr=r(AMt,"FlaxAlbertForMultipleChoice"),AMt.forEach(t),dkr=r(yRe," (ALBERT model)"),yRe.forEach(t),ckr=i(vo),$C=n(vo,"LI",{});var LRe=s($C);p6e=n(LRe,"STRONG",{});var yMt=s(p6e);fkr=r(yMt,"bert"),yMt.forEach(t),mkr=r(LRe," \u2014 "),xJ=n(LRe,"A",{href:!0});var LMt=s(xJ);gkr=r(LMt,"FlaxBertForMultipleChoice"),LMt.forEach(t),hkr=r(LRe," (BERT model)"),LRe.forEach(t),pkr=i(vo),kC=n(vo,"LI",{});var xRe=s(kC);u6e=n(xRe,"STRONG",{});var xMt=s(u6e);ukr=r(xMt,"big_bird"),xMt.forEach(t),_kr=r(xRe," \u2014 "),$J=n(xRe,"A",{href:!0});var $Mt=s($J);bkr=r($Mt,"FlaxBigBirdForMultipleChoice"),$Mt.forEach(t),vkr=r(xRe," (BigBird model)"),xRe.forEach(t),Fkr=i(vo),SC=n(vo,"LI",{});var $Re=s(SC);_6e=n($Re,"STRONG",{});var kMt=s(_6e);Tkr=r(kMt,"distilbert"),kMt.forEach(t),Mkr=r($Re," \u2014 "),kJ=n($Re,"A",{href:!0});var SMt=s(kJ);Ekr=r(SMt,"FlaxDistilBertForMultipleChoice"),SMt.forEach(t),Ckr=r($Re," (DistilBERT model)"),$Re.forEach(t),wkr=i(vo),RC=n(vo,"LI",{});var kRe=s(RC);b6e=n(kRe,"STRONG",{});var RMt=s(b6e);Akr=r(RMt,"electra"),RMt.forEach(t),ykr=r(kRe," \u2014 "),SJ=n(kRe,"A",{href:!0});var BMt=s(SJ);Lkr=r(BMt,"FlaxElectraForMultipleChoice"),BMt.forEach(t),xkr=r(kRe," (ELECTRA model)"),kRe.forEach(t),$kr=i(vo),BC=n(vo,"LI",{});var SRe=s(BC);v6e=n(SRe,"STRONG",{});var PMt=s(v6e);kkr=r(PMt,"roberta"),PMt.forEach(t),Skr=r(SRe," \u2014 "),RJ=n(SRe,"A",{href:!0});var IMt=s(RJ);Rkr=r(IMt,"FlaxRobertaForMultipleChoice"),IMt.forEach(t),Bkr=r(SRe," (RoBERTa model)"),SRe.forEach(t),Pkr=i(vo),PC=n(vo,"LI",{});var RRe=s(PC);F6e=n(RRe,"STRONG",{});var qMt=s(F6e);Ikr=r(qMt,"roformer"),qMt.forEach(t),qkr=r(RRe," \u2014 "),BJ=n(RRe,"A",{href:!0});var NMt=s(BJ);Nkr=r(NMt,"FlaxRoFormerForMultipleChoice"),NMt.forEach(t),jkr=r(RRe," (RoFormer model)"),RRe.forEach(t),Dkr=i(vo),IC=n(vo,"LI",{});var BRe=s(IC);T6e=n(BRe,"STRONG",{});var jMt=s(T6e);Gkr=r(jMt,"xlm-roberta"),jMt.forEach(t),Okr=r(BRe," \u2014 "),PJ=n(BRe,"A",{href:!0});var DMt=s(PJ);Vkr=r(DMt,"FlaxXLMRobertaForMultipleChoice"),DMt.forEach(t),Xkr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),vo.forEach(t),zkr=i(Hl),T(qC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),BPe=i(f),Vc=n(f,"H2",{class:!0});var Nqe=s(Vc);NC=n(Nqe,"A",{id:!0,class:!0,href:!0});var GMt=s(NC);M6e=n(GMt,"SPAN",{});var OMt=s(M6e);T(Z7.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),Qkr=i(Nqe),E6e=n(Nqe,"SPAN",{});var VMt=s(E6e);Wkr=r(VMt,"FlaxAutoModelForNextSentencePrediction"),VMt.forEach(t),Nqe.forEach(t),PPe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(ex.$$.fragment,Ul),Hkr=i(Ul),Xc=n(Ul,"P",{});var RK=s(Xc);Ukr=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IJ=n(RK,"A",{href:!0});var XMt=s(IJ);Jkr=r(XMt,"from_pretrained()"),XMt.forEach(t),Ykr=r(RK," class method or the "),qJ=n(RK,"A",{href:!0});var zMt=s(qJ);Kkr=r(zMt,"from_config()"),zMt.forEach(t),Zkr=r(RK,` class
method.`),RK.forEach(t),eSr=i(Ul),ox=n(Ul,"P",{});var jqe=s(ox);oSr=r(jqe,"This class cannot be instantiated directly using "),C6e=n(jqe,"CODE",{});var QMt=s(C6e);rSr=r(QMt,"__init__()"),QMt.forEach(t),tSr=r(jqe," (throws an error)."),jqe.forEach(t),aSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var sA=s(Xt);T(rx.$$.fragment,sA),nSr=i(sA),w6e=n(sA,"P",{});var WMt=s(w6e);sSr=r(WMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),WMt.forEach(t),lSr=i(sA),zc=n(sA,"P",{});var BK=s(zc);iSr=r(BK,`Note:
Loading a model from its configuration file does `),A6e=n(BK,"STRONG",{});var HMt=s(A6e);dSr=r(HMt,"not"),HMt.forEach(t),cSr=r(BK,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(BK,"A",{href:!0});var UMt=s(NJ);fSr=r(UMt,"from_pretrained()"),UMt.forEach(t),mSr=r(BK," to load the model weights."),BK.forEach(t),gSr=i(sA),T(jC.$$.fragment,sA),sA.forEach(t),hSr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(tx.$$.fragment,Jl),pSr=i(Jl),y6e=n(Jl,"P",{});var JMt=s(y6e);uSr=r(JMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),JMt.forEach(t),_Sr=i(Jl),_n=n(Jl,"P",{});var lA=s(_n);bSr=r(lA,"The model class to instantiate is selected based on the "),L6e=n(lA,"CODE",{});var YMt=s(L6e);vSr=r(YMt,"model_type"),YMt.forEach(t),FSr=r(lA,` property of the config object (either
passed as an argument or loaded from `),x6e=n(lA,"CODE",{});var KMt=s(x6e);TSr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),MSr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$6e=n(lA,"CODE",{});var ZMt=s($6e);ESr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),CSr=r(lA,":"),lA.forEach(t),wSr=i(Jl),k6e=n(Jl,"UL",{});var eEt=s(k6e);DC=n(eEt,"LI",{});var PRe=s(DC);S6e=n(PRe,"STRONG",{});var oEt=s(S6e);ASr=r(oEt,"bert"),oEt.forEach(t),ySr=r(PRe," \u2014 "),jJ=n(PRe,"A",{href:!0});var rEt=s(jJ);LSr=r(rEt,"FlaxBertForNextSentencePrediction"),rEt.forEach(t),xSr=r(PRe," (BERT model)"),PRe.forEach(t),eEt.forEach(t),$Sr=i(Jl),T(GC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),IPe=i(f),Qc=n(f,"H2",{class:!0});var Dqe=s(Qc);OC=n(Dqe,"A",{id:!0,class:!0,href:!0});var tEt=s(OC);R6e=n(tEt,"SPAN",{});var aEt=s(R6e);T(ax.$$.fragment,aEt),aEt.forEach(t),tEt.forEach(t),kSr=i(Dqe),B6e=n(Dqe,"SPAN",{});var nEt=s(B6e);SSr=r(nEt,"FlaxAutoModelForImageClassification"),nEt.forEach(t),Dqe.forEach(t),qPe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(nx.$$.fragment,Yl),RSr=i(Yl),Wc=n(Yl,"P",{});var PK=s(Wc);BSr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DJ=n(PK,"A",{href:!0});var sEt=s(DJ);PSr=r(sEt,"from_pretrained()"),sEt.forEach(t),ISr=r(PK," class method or the "),GJ=n(PK,"A",{href:!0});var lEt=s(GJ);qSr=r(lEt,"from_config()"),lEt.forEach(t),NSr=r(PK,` class
method.`),PK.forEach(t),jSr=i(Yl),sx=n(Yl,"P",{});var Gqe=s(sx);DSr=r(Gqe,"This class cannot be instantiated directly using "),P6e=n(Gqe,"CODE",{});var iEt=s(P6e);GSr=r(iEt,"__init__()"),iEt.forEach(t),OSr=r(Gqe," (throws an error)."),Gqe.forEach(t),VSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var iA=s(zt);T(lx.$$.fragment,iA),XSr=i(iA),I6e=n(iA,"P",{});var dEt=s(I6e);zSr=r(dEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dEt.forEach(t),QSr=i(iA),Hc=n(iA,"P",{});var IK=s(Hc);WSr=r(IK,`Note:
Loading a model from its configuration file does `),q6e=n(IK,"STRONG",{});var cEt=s(q6e);HSr=r(cEt,"not"),cEt.forEach(t),USr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OJ=n(IK,"A",{href:!0});var fEt=s(OJ);JSr=r(fEt,"from_pretrained()"),fEt.forEach(t),YSr=r(IK," to load the model weights."),IK.forEach(t),KSr=i(iA),T(VC.$$.fragment,iA),iA.forEach(t),ZSr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(ix.$$.fragment,Kl),eRr=i(Kl),N6e=n(Kl,"P",{});var mEt=s(N6e);oRr=r(mEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mEt.forEach(t),rRr=i(Kl),bn=n(Kl,"P",{});var dA=s(bn);tRr=r(dA,"The model class to instantiate is selected based on the "),j6e=n(dA,"CODE",{});var gEt=s(j6e);aRr=r(gEt,"model_type"),gEt.forEach(t),nRr=r(dA,` property of the config object (either
passed as an argument or loaded from `),D6e=n(dA,"CODE",{});var hEt=s(D6e);sRr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),lRr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(dA,"CODE",{});var pEt=s(G6e);iRr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),dRr=r(dA,":"),dA.forEach(t),cRr=i(Kl),dx=n(Kl,"UL",{});var Oqe=s(dx);XC=n(Oqe,"LI",{});var IRe=s(XC);O6e=n(IRe,"STRONG",{});var uEt=s(O6e);fRr=r(uEt,"beit"),uEt.forEach(t),mRr=r(IRe," \u2014 "),VJ=n(IRe,"A",{href:!0});var _Et=s(VJ);gRr=r(_Et,"FlaxBeitForImageClassification"),_Et.forEach(t),hRr=r(IRe," (BEiT model)"),IRe.forEach(t),pRr=i(Oqe),zC=n(Oqe,"LI",{});var qRe=s(zC);V6e=n(qRe,"STRONG",{});var bEt=s(V6e);uRr=r(bEt,"vit"),bEt.forEach(t),_Rr=r(qRe," \u2014 "),XJ=n(qRe,"A",{href:!0});var vEt=s(XJ);bRr=r(vEt,"FlaxViTForImageClassification"),vEt.forEach(t),vRr=r(qRe," (ViT model)"),qRe.forEach(t),Oqe.forEach(t),FRr=i(Kl),T(QC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),NPe=i(f),Uc=n(f,"H2",{class:!0});var Vqe=s(Uc);WC=n(Vqe,"A",{id:!0,class:!0,href:!0});var FEt=s(WC);X6e=n(FEt,"SPAN",{});var TEt=s(X6e);T(cx.$$.fragment,TEt),TEt.forEach(t),FEt.forEach(t),TRr=i(Vqe),z6e=n(Vqe,"SPAN",{});var MEt=s(z6e);MRr=r(MEt,"FlaxAutoModelForVision2Seq"),MEt.forEach(t),Vqe.forEach(t),jPe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(fx.$$.fragment,Zl),ERr=i(Zl),Jc=n(Zl,"P",{});var qK=s(Jc);CRr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zJ=n(qK,"A",{href:!0});var EEt=s(zJ);wRr=r(EEt,"from_pretrained()"),EEt.forEach(t),ARr=r(qK," class method or the "),QJ=n(qK,"A",{href:!0});var CEt=s(QJ);yRr=r(CEt,"from_config()"),CEt.forEach(t),LRr=r(qK,` class
method.`),qK.forEach(t),xRr=i(Zl),mx=n(Zl,"P",{});var Xqe=s(mx);$Rr=r(Xqe,"This class cannot be instantiated directly using "),Q6e=n(Xqe,"CODE",{});var wEt=s(Q6e);kRr=r(wEt,"__init__()"),wEt.forEach(t),SRr=r(Xqe," (throws an error)."),Xqe.forEach(t),RRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var cA=s(Qt);T(gx.$$.fragment,cA),BRr=i(cA),W6e=n(cA,"P",{});var AEt=s(W6e);PRr=r(AEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AEt.forEach(t),IRr=i(cA),Yc=n(cA,"P",{});var NK=s(Yc);qRr=r(NK,`Note:
Loading a model from its configuration file does `),H6e=n(NK,"STRONG",{});var yEt=s(H6e);NRr=r(yEt,"not"),yEt.forEach(t),jRr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(NK,"A",{href:!0});var LEt=s(WJ);DRr=r(LEt,"from_pretrained()"),LEt.forEach(t),GRr=r(NK," to load the model weights."),NK.forEach(t),ORr=i(cA),T(HC.$$.fragment,cA),cA.forEach(t),VRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(hx.$$.fragment,ei),XRr=i(ei),U6e=n(ei,"P",{});var xEt=s(U6e);zRr=r(xEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),xEt.forEach(t),QRr=i(ei),vn=n(ei,"P",{});var fA=s(vn);WRr=r(fA,"The model class to instantiate is selected based on the "),J6e=n(fA,"CODE",{});var $Et=s(J6e);HRr=r($Et,"model_type"),$Et.forEach(t),URr=r(fA,` property of the config object (either
passed as an argument or loaded from `),Y6e=n(fA,"CODE",{});var kEt=s(Y6e);JRr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),YRr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K6e=n(fA,"CODE",{});var SEt=s(K6e);KRr=r(SEt,"pretrained_model_name_or_path"),SEt.forEach(t),ZRr=r(fA,":"),fA.forEach(t),eBr=i(ei),Z6e=n(ei,"UL",{});var REt=s(Z6e);UC=n(REt,"LI",{});var NRe=s(UC);eTe=n(NRe,"STRONG",{});var BEt=s(eTe);oBr=r(BEt,"vision-encoder-decoder"),BEt.forEach(t),rBr=r(NRe," \u2014 "),HJ=n(NRe,"A",{href:!0});var PEt=s(HJ);tBr=r(PEt,"FlaxVisionEncoderDecoderModel"),PEt.forEach(t),aBr=r(NRe," (Vision Encoder decoder model)"),NRe.forEach(t),REt.forEach(t),nBr=i(ei),T(JC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(qCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(R9,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(B9,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertConfig"),c(P9,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(I9,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitConfig"),c(q9,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertConfig"),c(N9,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(j9,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdConfig"),c(D9,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(G9,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(O9,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(V9,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertConfig"),c(X9,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineConfig"),c(z9,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPConfig"),c(Q9,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertConfig"),c(W9,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextConfig"),c(H9,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLConfig"),c(U9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(J9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Y9,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(K9,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaConfig"),c(Z9,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(e$,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(o$,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTConfig"),c(r$,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrConfig"),c(t$,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertConfig"),c(a$,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRConfig"),c(n$,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTConfig"),c(s$,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraConfig"),c(l$,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(i$,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertConfig"),c(d$,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetConfig"),c(c$,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTConfig"),c(f$,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelConfig"),c(m$,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNConfig"),c(g$,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Config"),c(h$,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(p$,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJConfig"),c(u$,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertConfig"),c(_$,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertConfig"),c(b$,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(v$,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(F$,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(T$,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDConfig"),c(M$,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerConfig"),c(E$,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeConfig"),c(C$,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertConfig"),c(w$,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Config"),c(A$,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianConfig"),c(y$,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(L$,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartConfig"),c(x$,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c($$,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(k$,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetConfig"),c(S$,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Config"),c(R$,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(B$,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(P$,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusConfig"),c(I$,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverConfig"),c(q$,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartConfig"),c(N$,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(j$,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(D$,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(G$,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagConfig"),c(O$,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmConfig"),c(V$,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerConfig"),c(X$,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetConfig"),c(z$,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertConfig"),c(Q$,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetConfig"),c(W$,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertConfig"),c(H$,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaConfig"),c(U$,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerConfig"),c(J$,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerConfig"),c(Y$,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWConfig"),c(K$,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDConfig"),c(Z$,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(ek,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ok,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rk,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterConfig"),c(tk,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ak,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinConfig"),c(nk,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Config"),c(sk,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasConfig"),c(lk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartConfig"),c(ik,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(dk,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRConfig"),c(ck,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(fk,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mk,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanConfig"),c(gk,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltConfig"),c(hk,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(pk,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(uk,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(_k,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTConfig"),c(bk,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vk,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Fk,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMConfig"),c(Tk,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMConfig"),c(Mk,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMConfig"),c(Ek,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ck,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(wk,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Ak,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetConfig"),c(yk,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(Lk,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xk,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c($k,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizer"),c(Sk,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartTokenizerFast"),c(Rk,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Bk,"href","/docs/transformers/pr_16402/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16402/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Ik,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(qk,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(Nk,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jk,"href","/docs/transformers/pr_16402/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Dk,"href","/docs/transformers/pr_16402/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Gk,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(Ok,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Vk,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Xk,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Qk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Wk,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Hk,"href","/docs/transformers/pr_16402/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Uk,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Jk,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineTokenizer"),c(Kk,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizer"),c(Zk,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(eS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(oS,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(rS,"href","/docs/transformers/pr_16402/en/model_doc/cpm#transformers.CpmTokenizer"),c(tS,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(aS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(nS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(sS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizer"),c(lS,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(iS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(dS,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(cS,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(fS,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(mS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(gS,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(hS,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizer"),c(pS,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(uS,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(_S,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizer"),c(bS,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(vS,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(FS,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizer"),c(TS,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(MS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ES,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(CS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yS,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LS,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizer"),c(xS,"href","/docs/transformers/pr_16402/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c($S,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SS,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(BS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(PS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(IS,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(qS,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(NS,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(jS,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizer"),c(DS,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDTokenizerFast"),c(GS,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizer"),c(OS,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(VS,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeTokenizer"),c(XS,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(zS,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(QS,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(WS,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianTokenizer"),c(HS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizer"),c(US,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(JS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(YS,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(KS,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(ZS,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(eR,"href","/docs/transformers/pr_16402/en/model_doc/mluke#transformers.MLukeTokenizer"),c(oR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(rR,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(tR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(aR,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(nR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(sR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(lR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(iR,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(cR,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(fR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(mR,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(gR,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(hR,"href","/docs/transformers/pr_16402/en/model_doc/phobert#transformers.PhobertTokenizer"),c(pR,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartTokenizer"),c(uR,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(_R,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(bR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(vR,"href","/docs/transformers/pr_16402/en/model_doc/rag#transformers.RagTokenizer"),c(FR,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizer"),c(TR,"href","/docs/transformers/pr_16402/en/model_doc/realm#transformers.RealmTokenizerFast"),c(MR,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizer"),c(ER,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(CR,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizer"),c(wR,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(AR,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(yR,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(LR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($R,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(kR,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(SR,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(RR,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(BR,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizer"),c(PR,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(IR,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(qR,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(NR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5Tokenizer"),c(jR,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DR,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasTokenizer"),c(GR,"href","/docs/transformers/pr_16402/en/model_doc/tapex#transformers.TapexTokenizer"),c(OR,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(VR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizer"),c(XR,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertTokenizerFast"),c(zR,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(QR,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(WR,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizer"),c(HR,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(UR,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMTokenizer"),c(JR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(YR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(KR,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizer"),c(eB,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(oB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(rB,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(tB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizer"),c(aB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(nB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(sB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(lB,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(cB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(gB,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(hB,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(uB,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(_B,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(yB,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(LB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"id","transformers.AutoProcessor"),c(fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(xB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c($B,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPProcessor"),c(kB,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(SB,"href","/docs/transformers/pr_16402/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(RB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(IB,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(qB,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRProcessor"),c(NB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltProcessor"),c(GB,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(OB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(VB,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoModel"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(XB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QB,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WB,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertModel"),c(HB,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartModel"),c(UB,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitModel"),c(JB,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertModel"),c(YB,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(KB,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdModel"),c(ZB,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(eP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oP,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rP,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertModel"),c(tP,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineModel"),c(aP,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.CLIPModel"),c(nP,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertModel"),c(sP,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextModel"),c(lP,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLModel"),c(iP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(dP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(cP,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(fP,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaModel"),c(mP,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(gP,"href","/docs/transformers/pr_16402/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(hP,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTModel"),c(pP,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrModel"),c(uP,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertModel"),c(_P,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(bP,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTModel"),c(vP,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraModel"),c(FP,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertModel"),c(TP,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetModel"),c(MP,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTModel"),c(EP,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelModel"),c(CP,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wP,"href","/docs/transformers/pr_16402/en/model_doc/glpn#transformers.GLPNModel"),c(AP,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2Model"),c(yP,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(LP,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJModel"),c(xP,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertModel"),c($P,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertModel"),c(kP,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(SP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(RP,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(BP,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDModel"),c(PP,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerModel"),c(IP,"href","/docs/transformers/pr_16402/en/model_doc/luke#transformers.LukeModel"),c(qP,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertModel"),c(NP,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100Model"),c(jP,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianModel"),c(DP,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerModel"),c(GP,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartModel"),c(OP,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(VP,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertModel"),c(XP,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetModel"),c(zP,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5Model"),c(QP,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerModel"),c(WP,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(HP,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusModel"),c(UP,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverModel"),c(JP,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartModel"),c(YP,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerModel"),c(KP,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(ZP,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertModel"),c(eI,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModel"),c(oI,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetModel"),c(rI,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertModel"),c(tI,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetModel"),c(aI,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(nI,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaModel"),c(sI,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerModel"),c(lI,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerModel"),c(iI,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWModel"),c(dI,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDModel"),c(cI,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(fI,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterModel"),c(mI,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(gI,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinModel"),c(hI,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5Model"),c(pI,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasModel"),c(uI,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(_I,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechModel"),c(bI,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(vI,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanModel"),c(FI,"href","/docs/transformers/pr_16402/en/model_doc/vilt#transformers.ViltModel"),c(TI,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(MI,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertModel"),c(EI,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTModel"),c(CI,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(wI,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(AI,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMModel"),c(yI,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMModel"),c(LI,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMModel"),c(xI,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c($I,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(kI,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(SI,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetModel"),c(RI,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vu,"id","transformers.AutoModelForPreTraining"),c(vu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(BI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PI,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(II,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qI,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForPreTraining"),c(NI,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jI,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForPreTraining"),c(DI,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(GI,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OI,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(VI,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XI,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zI,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QI,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WI,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForPreTraining"),c(HI,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UI,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForPreTraining"),c(JI,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(YI,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(KI,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ZI,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(eq,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(oq,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(rq,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(tq,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(aq,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(nq,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(sq,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(lq,"href","/docs/transformers/pr_16402/en/model_doc/retribert#transformers.RetriBertModel"),c(iq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(dq,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cq,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fq,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mq,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(hq,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(pq,"href","/docs/transformers/pr_16402/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(uq,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_q,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(bq,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(vq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Fq,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Tq,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i_,"id","transformers.AutoModelForCausalLM"),c(i_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Mq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cq,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wq,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForCausalLM"),c(Aq,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertLMHeadModel"),c(yq,"href","/docs/transformers/pr_16402/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Lq,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(xq,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c($q,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(kq,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Sq,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Rq,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Bq,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Pq,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Iq,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(qq,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Nq,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(jq,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianForCausalLM"),c(Dq,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Gq,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Oq,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vq,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Xq,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zq,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Qq,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Wq,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Hq,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Uq,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Jq,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Yq,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Kq,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Zq,"href","/docs/transformers/pr_16402/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eN,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nN,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W_,"id","transformers.AutoModelForMaskedLM"),c(W_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(sN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dN,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fN,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMaskedLM"),c(mN,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gN,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hN,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pN,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(uN,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_N,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bN,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vN,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FN,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TN,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MN,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EN,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CN,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wN,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AN,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yN,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(LN,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xN,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($N,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kN,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SN,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RN,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(BN,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(IN,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(qN,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(NN,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jN,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GN,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(ON,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForSeq2SeqLM"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(VN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zN,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QN,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JN,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YN,"href","/docs/transformers/pr_16402/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KN,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16402/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.MarianMTModel"),c(oj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16402/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_16402/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z2,"id","transformers.AutoModelForSequenceClassification"),c(Z2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z2,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(dj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fj,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mj,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c($j,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16402/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J1,"id","transformers.AutoModelForMultipleChoice"),c(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J1,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(nD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($D,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RD,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(BD,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(PD,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lb,"id","transformers.AutoModelForNextSentencePrediction"),c(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(ID,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ND,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DD,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GD,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OD,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VD,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qb,"id","transformers.AutoModelForTokenClassification"),c(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qb,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(XD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QD,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HD,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForTokenClassification"),c(UD,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JD,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YD,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KD,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lG,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(mG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(gG,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(pG,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uG,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(_G,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(vG,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(FG,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(TG,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(MG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(EG,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(CG,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(wG,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.AutoModelForQuestionAnswering"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(AG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LG,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xG,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c($G,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16402/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16402/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(VG,"href","/docs/transformers/pr_16402/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16402/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16402/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16402/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16402/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16402/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16402/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16402/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16402/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(cO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(gO,"href","/docs/transformers/pr_16402/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dv,"id","transformers.AutoModelForTableQuestionAnswering"),c(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(hO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_O,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hv,"id","transformers.AutoModelForImageClassification"),c(hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hv,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(bO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForImageClassification"),c(MO,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(EO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(CO,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassification"),c(wO,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(AO,"href","/docs/transformers/pr_16402/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(yO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(xO,"href","/docs/transformers/pr_16402/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c($O,"href","/docs/transformers/pr_16402/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(kO,"href","/docs/transformers/pr_16402/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(SO,"href","/docs/transformers/pr_16402/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(RO,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(BO,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForImageClassification"),c(PO,"href","/docs/transformers/pr_16402/en/model_doc/van#transformers.VanForImageClassification"),c(IO,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForImageClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForVision2Seq"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(qO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DO,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForAudioClassification"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(GO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(UO,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(JO,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(YO,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qv,"id","transformers.AutoModelForAudioFrameClassification"),c(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qv,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(KO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZO,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(rV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(tV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(aV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForCTC"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(nV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dV,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.HubertForCTC"),c(cV,"href","/docs/transformers/pr_16402/en/model_doc/sew#transformers.SEWForCTC"),c(fV,"href","/docs/transformers/pr_16402/en/model_doc/sew-d#transformers.SEWDForCTC"),c(mV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(gV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(hV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(pV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForCTC"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(uV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_V,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vV,"href","/docs/transformers/pr_16402/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(FV,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForAudioXVector"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(TV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(wV,"href","/docs/transformers/pr_16402/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(AV,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(yV,"href","/docs/transformers/pr_16402/en/model_doc/wavlm#transformers.WavLMForXVector"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForMaskedImageModeling"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(LV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($V,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kV,"href","/docs/transformers/pr_16402/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(SV,"href","/docs/transformers/pr_16402/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(RV,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForObjectDetection"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(BV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForObjectDetection"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jF,"id","transformers.AutoModelForImageSegmentation"),c(jF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jF,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(NV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GV,"href","/docs/transformers/pr_16402/en/model_doc/detr#transformers.DetrForSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForSemanticSegmentation"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(OV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(QV,"href","/docs/transformers/pr_16402/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(WV,"href","/docs/transformers/pr_16402/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(HV,"href","/docs/transformers/pr_16402/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KF,"id","transformers.AutoModelForInstanceSegmentation"),c(KF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(UV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_16402/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t0,"id","transformers.TFAutoModel"),c(t0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t0,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertModel"),c(tX,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartModel"),c(aX,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertModel"),c(nX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(sX,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(lX,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertModel"),c(iX,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.TFCLIPModel"),c(dX,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertModel"),c(cX,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextModel"),c(fX,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLModel"),c(mX,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaModel"),c(gX,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(hX,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(pX,"href","/docs/transformers/pr_16402/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(uX,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraModel"),c(_X,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(bX,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelModel"),c(vX,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(FX,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2Model"),c(TX,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJModel"),c(MX,"href","/docs/transformers/pr_16402/en/model_doc/hubert#transformers.TFHubertModel"),c(EX,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(CX,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDModel"),c(wX,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerModel"),c(AX,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertModel"),c(yX,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianModel"),c(LX,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartModel"),c(xX,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c($X,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetModel"),c(kX,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5Model"),c(SX,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(RX,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusModel"),c(BX,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertModel"),c(PX,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaModel"),c(IX,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerModel"),c(qX,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(NX,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5Model"),c(jX,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasModel"),c(DX,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(GX,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTModel"),c(OX,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(VX,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(XX,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMModel"),c(zX,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(QX,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.TFAutoModelForPreTraining"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(WX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(YX,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KX,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForPreTraining"),c(ZX,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(ez,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(oz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rz,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(tz,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(az,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(nz,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sz,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(lz,"href","/docs/transformers/pr_16402/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(iz,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(dz,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(cz,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fz,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(mz,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(gz,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(hz,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pz,"href","/docs/transformers/pr_16402/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(uz,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_z,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(bz,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T6,"id","transformers.TFAutoModelForCausalLM"),c(T6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T6,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(vz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Ez,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Cz,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wz,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Az,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(yz,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Lz,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(xz,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c($z,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(kz,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Sz,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I6,"id","transformers.TFAutoModelForImageClassification"),c(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I6,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Bz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_16402/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Nz,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G6,"id","transformers.TFAutoModelForMaskedLM"),c(G6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G6,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(jz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Gz,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oz,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(zz,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(Hz,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Yz,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(aQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(nQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(sQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(mQ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(hQ,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(pQ,"href","/docs/transformers/pr_16402/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.TFMarianMTModel"),c(_Q,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(bQ,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(FQ,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ET,"id","transformers.TFAutoModelForSequenceClassification"),c(ET,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ET,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(TQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16402/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16402/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16402/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KT,"id","transformers.TFAutoModelForMultipleChoice"),c(KT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(JQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KQ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZQ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(gW,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(hW,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(pW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(uW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_W,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vW,"href","/docs/transformers/pr_16402/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MM,"id","transformers.TFAutoModelForTokenClassification"),c(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(MM,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(FW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(CW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(wW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(AW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(yW,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(LW,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(xW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c($W,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(kW,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(SW,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(RW,"href","/docs/transformers/pr_16402/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(BW,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(PW,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(IW,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(qW,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(NW,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(jW,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(DW,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(GW,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(OW,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zM,"id","transformers.TFAutoModelForQuestionAnswering"),c(zM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(VW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zW,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QW,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16402/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16402/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16402/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16402/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(KW,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16402/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(oH,"href","/docs/transformers/pr_16402/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16402/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16402/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16402/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16402/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_16402/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(cH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_16402/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForVision2Seq"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(mH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(uH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_H,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vH,"href","/docs/transformers/pr_16402/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.FlaxAutoModel"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(FH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertModel"),c(CH,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartModel"),c(wH,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitModel"),c(AH,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertModel"),c(yH,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(LH,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(xH,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c($H,"href","/docs/transformers/pr_16402/en/model_doc/clip#transformers.FlaxCLIPModel"),c(kH,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(SH,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraModel"),c(RH,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(BH,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(PH,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(IH,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianModel"),c(qH,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartModel"),c(NH,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5Model"),c(jH,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(DH,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(GH,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(OH,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5Model"),c(VH,"href","/docs/transformers/pr_16402/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(XH,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTModel"),c(zH,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(QH,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(WH,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForCausalLM"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(HH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JH,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YH,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(KH,"href","/docs/transformers/pr_16402/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(ZH,"href","/docs/transformers/pr_16402/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(eU,"href","/docs/transformers/pr_16402/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(oU,"href","/docs/transformers/pr_16402/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.FlaxAutoModelForPreTraining"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(rU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(sU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(iU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(dU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(cU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fU,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hU,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pU,"href","/docs/transformers/pr_16402/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForMaskedLM"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(_U,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(LU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xU,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c($U,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(PU,"href","/docs/transformers/pr_16402/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_16402/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(qU,"href","/docs/transformers/pr_16402/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(NU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jU,"href","/docs/transformers/pr_16402/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_16402/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_16402/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(OU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XU,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zU,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(KU,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(oJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16402/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16402/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(fJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uC,"id","transformers.FlaxAutoModelForTokenClassification"),c(uC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(hJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_J,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(MJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(EJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(CJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(yC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16402/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c($J,"href","/docs/transformers/pr_16402/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_16402/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_16402/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_16402/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_16402/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_16402/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(IJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jJ,"href","/docs/transformers/pr_16402/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OC,"id","transformers.FlaxAutoModelForImageClassification"),c(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(DJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VJ,"href","/docs/transformers/pr_16402/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(XJ,"href","/docs/transformers/pr_16402/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.FlaxAutoModelForVision2Seq"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_16402/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_16402/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,mA),e(Yr,rf),b(f,qe,_),b(f,Ve,_),e(Ve,ai),e(Ve,Tn),e(Tn,gA),e(Ve,Mn),e(Ve,En),e(En,hA),e(Ve,ni),e(Ve,Cn),e(Cn,pA),e(Ve,si),b(f,tf,_),M(ba,f,_),b(f,Xe,_),b(f,Ae,_),e(Ae,y9),e(Ae,li),e(li,L9),e(Ae,x9),b(f,To,_),b(f,va,_),e(va,$9),e(va,af),e(af,k9),e(va,zqe),b(f,jRe,_),b(f,ii,_),e(ii,nf),e(nf,jK),M(uA,jK,null),e(ii,Qqe),e(ii,DK),e(DK,Wqe),b(f,DRe,_),b(f,wn,_),e(wn,Hqe),e(wn,GK),e(GK,Uqe),e(wn,Jqe),e(wn,OK),e(OK,Yqe),e(wn,Kqe),b(f,GRe,_),M(_A,f,_),b(f,ORe,_),b(f,S9,_),e(S9,Zqe),b(f,VRe,_),M(sf,f,_),b(f,XRe,_),b(f,di,_),e(di,lf),e(lf,VK),M(bA,VK,null),e(di,eNe),e(di,XK),e(XK,oNe),b(f,zRe,_),b(f,Mo,_),M(vA,Mo,null),e(Mo,rNe),e(Mo,FA),e(FA,tNe),e(FA,R9),e(R9,aNe),e(FA,nNe),e(Mo,sNe),e(Mo,TA),e(TA,lNe),e(TA,zK),e(zK,iNe),e(TA,dNe),e(Mo,cNe),e(Mo,Fr),M(MA,Fr,null),e(Fr,fNe),e(Fr,QK),e(QK,mNe),e(Fr,gNe),e(Fr,ci),e(ci,hNe),e(ci,WK),e(WK,pNe),e(ci,uNe),e(ci,HK),e(HK,_Ne),e(ci,bNe),e(Fr,vNe),e(Fr,A),e(A,df),e(df,UK),e(UK,FNe),e(df,TNe),e(df,B9),e(B9,MNe),e(df,ENe),e(A,CNe),e(A,cf),e(cf,JK),e(JK,wNe),e(cf,ANe),e(cf,P9),e(P9,yNe),e(cf,LNe),e(A,xNe),e(A,ff),e(ff,YK),e(YK,$Ne),e(ff,kNe),e(ff,I9),e(I9,SNe),e(ff,RNe),e(A,BNe),e(A,mf),e(mf,KK),e(KK,PNe),e(mf,INe),e(mf,q9),e(q9,qNe),e(mf,NNe),e(A,jNe),e(A,gf),e(gf,ZK),e(ZK,DNe),e(gf,GNe),e(gf,N9),e(N9,ONe),e(gf,VNe),e(A,XNe),e(A,hf),e(hf,eZ),e(eZ,zNe),e(hf,QNe),e(hf,j9),e(j9,WNe),e(hf,HNe),e(A,UNe),e(A,pf),e(pf,oZ),e(oZ,JNe),e(pf,YNe),e(pf,D9),e(D9,KNe),e(pf,ZNe),e(A,eje),e(A,uf),e(uf,rZ),e(rZ,oje),e(uf,rje),e(uf,G9),e(G9,tje),e(uf,aje),e(A,nje),e(A,_f),e(_f,tZ),e(tZ,sje),e(_f,lje),e(_f,O9),e(O9,ije),e(_f,dje),e(A,cje),e(A,bf),e(bf,aZ),e(aZ,fje),e(bf,mje),e(bf,V9),e(V9,gje),e(bf,hje),e(A,pje),e(A,vf),e(vf,nZ),e(nZ,uje),e(vf,_je),e(vf,X9),e(X9,bje),e(vf,vje),e(A,Fje),e(A,Ff),e(Ff,sZ),e(sZ,Tje),e(Ff,Mje),e(Ff,z9),e(z9,Eje),e(Ff,Cje),e(A,wje),e(A,Tf),e(Tf,lZ),e(lZ,Aje),e(Tf,yje),e(Tf,Q9),e(Q9,Lje),e(Tf,xje),e(A,$je),e(A,Mf),e(Mf,iZ),e(iZ,kje),e(Mf,Sje),e(Mf,W9),e(W9,Rje),e(Mf,Bje),e(A,Pje),e(A,Ef),e(Ef,dZ),e(dZ,Ije),e(Ef,qje),e(Ef,H9),e(H9,Nje),e(Ef,jje),e(A,Dje),e(A,Cf),e(Cf,cZ),e(cZ,Gje),e(Cf,Oje),e(Cf,U9),e(U9,Vje),e(Cf,Xje),e(A,zje),e(A,wf),e(wf,fZ),e(fZ,Qje),e(wf,Wje),e(wf,J9),e(J9,Hje),e(wf,Uje),e(A,Jje),e(A,Af),e(Af,mZ),e(mZ,Yje),e(Af,Kje),e(Af,Y9),e(Y9,Zje),e(Af,eDe),e(A,oDe),e(A,yf),e(yf,gZ),e(gZ,rDe),e(yf,tDe),e(yf,K9),e(K9,aDe),e(yf,nDe),e(A,sDe),e(A,Lf),e(Lf,hZ),e(hZ,lDe),e(Lf,iDe),e(Lf,Z9),e(Z9,dDe),e(Lf,cDe),e(A,fDe),e(A,xf),e(xf,pZ),e(pZ,mDe),e(xf,gDe),e(xf,e$),e(e$,hDe),e(xf,pDe),e(A,uDe),e(A,$f),e($f,uZ),e(uZ,_De),e($f,bDe),e($f,o$),e(o$,vDe),e($f,FDe),e(A,TDe),e(A,kf),e(kf,_Z),e(_Z,MDe),e(kf,EDe),e(kf,r$),e(r$,CDe),e(kf,wDe),e(A,ADe),e(A,Sf),e(Sf,bZ),e(bZ,yDe),e(Sf,LDe),e(Sf,t$),e(t$,xDe),e(Sf,$De),e(A,kDe),e(A,Rf),e(Rf,vZ),e(vZ,SDe),e(Rf,RDe),e(Rf,a$),e(a$,BDe),e(Rf,PDe),e(A,IDe),e(A,Bf),e(Bf,FZ),e(FZ,qDe),e(Bf,NDe),e(Bf,n$),e(n$,jDe),e(Bf,DDe),e(A,GDe),e(A,Pf),e(Pf,TZ),e(TZ,ODe),e(Pf,VDe),e(Pf,s$),e(s$,XDe),e(Pf,zDe),e(A,QDe),e(A,If),e(If,MZ),e(MZ,WDe),e(If,HDe),e(If,l$),e(l$,UDe),e(If,JDe),e(A,YDe),e(A,qf),e(qf,EZ),e(EZ,KDe),e(qf,ZDe),e(qf,i$),e(i$,eGe),e(qf,oGe),e(A,rGe),e(A,Nf),e(Nf,CZ),e(CZ,tGe),e(Nf,aGe),e(Nf,d$),e(d$,nGe),e(Nf,sGe),e(A,lGe),e(A,jf),e(jf,wZ),e(wZ,iGe),e(jf,dGe),e(jf,c$),e(c$,cGe),e(jf,fGe),e(A,mGe),e(A,Df),e(Df,AZ),e(AZ,gGe),e(Df,hGe),e(Df,f$),e(f$,pGe),e(Df,uGe),e(A,_Ge),e(A,Gf),e(Gf,yZ),e(yZ,bGe),e(Gf,vGe),e(Gf,m$),e(m$,FGe),e(Gf,TGe),e(A,MGe),e(A,Of),e(Of,LZ),e(LZ,EGe),e(Of,CGe),e(Of,g$),e(g$,wGe),e(Of,AGe),e(A,yGe),e(A,Vf),e(Vf,xZ),e(xZ,LGe),e(Vf,xGe),e(Vf,h$),e(h$,$Ge),e(Vf,kGe),e(A,SGe),e(A,Xf),e(Xf,$Z),e($Z,RGe),e(Xf,BGe),e(Xf,p$),e(p$,PGe),e(Xf,IGe),e(A,qGe),e(A,zf),e(zf,kZ),e(kZ,NGe),e(zf,jGe),e(zf,u$),e(u$,DGe),e(zf,GGe),e(A,OGe),e(A,Qf),e(Qf,SZ),e(SZ,VGe),e(Qf,XGe),e(Qf,_$),e(_$,zGe),e(Qf,QGe),e(A,WGe),e(A,Wf),e(Wf,RZ),e(RZ,HGe),e(Wf,UGe),e(Wf,b$),e(b$,JGe),e(Wf,YGe),e(A,KGe),e(A,Hf),e(Hf,BZ),e(BZ,ZGe),e(Hf,eOe),e(Hf,v$),e(v$,oOe),e(Hf,rOe),e(A,tOe),e(A,Uf),e(Uf,PZ),e(PZ,aOe),e(Uf,nOe),e(Uf,F$),e(F$,sOe),e(Uf,lOe),e(A,iOe),e(A,Jf),e(Jf,IZ),e(IZ,dOe),e(Jf,cOe),e(Jf,T$),e(T$,fOe),e(Jf,mOe),e(A,gOe),e(A,Yf),e(Yf,qZ),e(qZ,hOe),e(Yf,pOe),e(Yf,M$),e(M$,uOe),e(Yf,_Oe),e(A,bOe),e(A,Kf),e(Kf,NZ),e(NZ,vOe),e(Kf,FOe),e(Kf,E$),e(E$,TOe),e(Kf,MOe),e(A,EOe),e(A,Zf),e(Zf,jZ),e(jZ,COe),e(Zf,wOe),e(Zf,C$),e(C$,AOe),e(Zf,yOe),e(A,LOe),e(A,em),e(em,DZ),e(DZ,xOe),e(em,$Oe),e(em,w$),e(w$,kOe),e(em,SOe),e(A,ROe),e(A,om),e(om,GZ),e(GZ,BOe),e(om,POe),e(om,A$),e(A$,IOe),e(om,qOe),e(A,NOe),e(A,rm),e(rm,OZ),e(OZ,jOe),e(rm,DOe),e(rm,y$),e(y$,GOe),e(rm,OOe),e(A,VOe),e(A,tm),e(tm,VZ),e(VZ,XOe),e(tm,zOe),e(tm,L$),e(L$,QOe),e(tm,WOe),e(A,HOe),e(A,am),e(am,XZ),e(XZ,UOe),e(am,JOe),e(am,zZ),e(zZ,YOe),e(am,KOe),e(A,ZOe),e(A,nm),e(nm,QZ),e(QZ,eVe),e(nm,oVe),e(nm,x$),e(x$,rVe),e(nm,tVe),e(A,aVe),e(A,sm),e(sm,WZ),e(WZ,nVe),e(sm,sVe),e(sm,$$),e($$,lVe),e(sm,iVe),e(A,dVe),e(A,lm),e(lm,HZ),e(HZ,cVe),e(lm,fVe),e(lm,k$),e(k$,mVe),e(lm,gVe),e(A,hVe),e(A,im),e(im,UZ),e(UZ,pVe),e(im,uVe),e(im,S$),e(S$,_Ve),e(im,bVe),e(A,vVe),e(A,dm),e(dm,JZ),e(JZ,FVe),e(dm,TVe),e(dm,R$),e(R$,MVe),e(dm,EVe),e(A,CVe),e(A,cm),e(cm,YZ),e(YZ,wVe),e(cm,AVe),e(cm,B$),e(B$,yVe),e(cm,LVe),e(A,xVe),e(A,fm),e(fm,KZ),e(KZ,$Ve),e(fm,kVe),e(fm,P$),e(P$,SVe),e(fm,RVe),e(A,BVe),e(A,mm),e(mm,ZZ),e(ZZ,PVe),e(mm,IVe),e(mm,I$),e(I$,qVe),e(mm,NVe),e(A,jVe),e(A,gm),e(gm,eee),e(eee,DVe),e(gm,GVe),e(gm,q$),e(q$,OVe),e(gm,VVe),e(A,XVe),e(A,hm),e(hm,oee),e(oee,zVe),e(hm,QVe),e(hm,N$),e(N$,WVe),e(hm,HVe),e(A,UVe),e(A,pm),e(pm,ree),e(ree,JVe),e(pm,YVe),e(pm,j$),e(j$,KVe),e(pm,ZVe),e(A,eXe),e(A,um),e(um,tee),e(tee,oXe),e(um,rXe),e(um,D$),e(D$,tXe),e(um,aXe),e(A,nXe),e(A,_m),e(_m,aee),e(aee,sXe),e(_m,lXe),e(_m,G$),e(G$,iXe),e(_m,dXe),e(A,cXe),e(A,bm),e(bm,nee),e(nee,fXe),e(bm,mXe),e(bm,O$),e(O$,gXe),e(bm,hXe),e(A,pXe),e(A,vm),e(vm,see),e(see,uXe),e(vm,_Xe),e(vm,V$),e(V$,bXe),e(vm,vXe),e(A,FXe),e(A,Fm),e(Fm,lee),e(lee,TXe),e(Fm,MXe),e(Fm,X$),e(X$,EXe),e(Fm,CXe),e(A,wXe),e(A,Tm),e(Tm,iee),e(iee,AXe),e(Tm,yXe),e(Tm,z$),e(z$,LXe),e(Tm,xXe),e(A,$Xe),e(A,Mm),e(Mm,dee),e(dee,kXe),e(Mm,SXe),e(Mm,Q$),e(Q$,RXe),e(Mm,BXe),e(A,PXe),e(A,Em),e(Em,cee),e(cee,IXe),e(Em,qXe),e(Em,W$),e(W$,NXe),e(Em,jXe),e(A,DXe),e(A,Cm),e(Cm,fee),e(fee,GXe),e(Cm,OXe),e(Cm,H$),e(H$,VXe),e(Cm,XXe),e(A,zXe),e(A,wm),e(wm,mee),e(mee,QXe),e(wm,WXe),e(wm,U$),e(U$,HXe),e(wm,UXe),e(A,JXe),e(A,Am),e(Am,gee),e(gee,YXe),e(Am,KXe),e(Am,J$),e(J$,ZXe),e(Am,eze),e(A,oze),e(A,ym),e(ym,hee),e(hee,rze),e(ym,tze),e(ym,Y$),e(Y$,aze),e(ym,nze),e(A,sze),e(A,Lm),e(Lm,pee),e(pee,lze),e(Lm,ize),e(Lm,K$),e(K$,dze),e(Lm,cze),e(A,fze),e(A,xm),e(xm,uee),e(uee,mze),e(xm,gze),e(xm,Z$),e(Z$,hze),e(xm,pze),e(A,uze),e(A,$m),e($m,_ee),e(_ee,_ze),e($m,bze),e($m,ek),e(ek,vze),e($m,Fze),e(A,Tze),e(A,km),e(km,bee),e(bee,Mze),e(km,Eze),e(km,ok),e(ok,Cze),e(km,wze),e(A,Aze),e(A,Sm),e(Sm,vee),e(vee,yze),e(Sm,Lze),e(Sm,rk),e(rk,xze),e(Sm,$ze),e(A,kze),e(A,Rm),e(Rm,Fee),e(Fee,Sze),e(Rm,Rze),e(Rm,tk),e(tk,Bze),e(Rm,Pze),e(A,Ize),e(A,Bm),e(Bm,Tee),e(Tee,qze),e(Bm,Nze),e(Bm,ak),e(ak,jze),e(Bm,Dze),e(A,Gze),e(A,Pm),e(Pm,Mee),e(Mee,Oze),e(Pm,Vze),e(Pm,nk),e(nk,Xze),e(Pm,zze),e(A,Qze),e(A,Im),e(Im,Eee),e(Eee,Wze),e(Im,Hze),e(Im,sk),e(sk,Uze),e(Im,Jze),e(A,Yze),e(A,qm),e(qm,Cee),e(Cee,Kze),e(qm,Zze),e(qm,lk),e(lk,eQe),e(qm,oQe),e(A,rQe),e(A,Nm),e(Nm,wee),e(wee,tQe),e(Nm,aQe),e(Nm,ik),e(ik,nQe),e(Nm,sQe),e(A,lQe),e(A,jm),e(jm,Aee),e(Aee,iQe),e(jm,dQe),e(jm,dk),e(dk,cQe),e(jm,fQe),e(A,mQe),e(A,Dm),e(Dm,yee),e(yee,gQe),e(Dm,hQe),e(Dm,ck),e(ck,pQe),e(Dm,uQe),e(A,_Qe),e(A,Gm),e(Gm,Lee),e(Lee,bQe),e(Gm,vQe),e(Gm,fk),e(fk,FQe),e(Gm,TQe),e(A,MQe),e(A,Om),e(Om,xee),e(xee,EQe),e(Om,CQe),e(Om,mk),e(mk,wQe),e(Om,AQe),e(A,yQe),e(A,Vm),e(Vm,$ee),e($ee,LQe),e(Vm,xQe),e(Vm,gk),e(gk,$Qe),e(Vm,kQe),e(A,SQe),e(A,Xm),e(Xm,kee),e(kee,RQe),e(Xm,BQe),e(Xm,hk),e(hk,PQe),e(Xm,IQe),e(A,qQe),e(A,zm),e(zm,See),e(See,NQe),e(zm,jQe),e(zm,pk),e(pk,DQe),e(zm,GQe),e(A,OQe),e(A,Qm),e(Qm,Ree),e(Ree,VQe),e(Qm,XQe),e(Qm,uk),e(uk,zQe),e(Qm,QQe),e(A,WQe),e(A,Wm),e(Wm,Bee),e(Bee,HQe),e(Wm,UQe),e(Wm,_k),e(_k,JQe),e(Wm,YQe),e(A,KQe),e(A,Hm),e(Hm,Pee),e(Pee,ZQe),e(Hm,eWe),e(Hm,bk),e(bk,oWe),e(Hm,rWe),e(A,tWe),e(A,Um),e(Um,Iee),e(Iee,aWe),e(Um,nWe),e(Um,vk),e(vk,sWe),e(Um,lWe),e(A,iWe),e(A,Jm),e(Jm,qee),e(qee,dWe),e(Jm,cWe),e(Jm,Fk),e(Fk,fWe),e(Jm,mWe),e(A,gWe),e(A,Ym),e(Ym,Nee),e(Nee,hWe),e(Ym,pWe),e(Ym,Tk),e(Tk,uWe),e(Ym,_We),e(A,bWe),e(A,Km),e(Km,jee),e(jee,vWe),e(Km,FWe),e(Km,Mk),e(Mk,TWe),e(Km,MWe),e(A,EWe),e(A,Zm),e(Zm,Dee),e(Dee,CWe),e(Zm,wWe),e(Zm,Ek),e(Ek,AWe),e(Zm,yWe),e(A,LWe),e(A,eg),e(eg,Gee),e(Gee,xWe),e(eg,$We),e(eg,Ck),e(Ck,kWe),e(eg,SWe),e(A,RWe),e(A,og),e(og,Oee),e(Oee,BWe),e(og,PWe),e(og,wk),e(wk,IWe),e(og,qWe),e(A,NWe),e(A,rg),e(rg,Vee),e(Vee,jWe),e(rg,DWe),e(rg,Ak),e(Ak,GWe),e(rg,OWe),e(A,VWe),e(A,tg),e(tg,Xee),e(Xee,XWe),e(tg,zWe),e(tg,yk),e(yk,QWe),e(tg,WWe),e(Fr,HWe),M(ag,Fr,null),e(Mo,UWe),e(Mo,ng),M(EA,ng,null),e(ng,JWe),e(ng,zee),e(zee,YWe),b(f,QRe,_),b(f,fi,_),e(fi,sg),e(sg,Qee),M(CA,Qee,null),e(fi,KWe),e(fi,Wee),e(Wee,ZWe),b(f,WRe,_),b(f,Eo,_),M(wA,Eo,null),e(Eo,eHe),e(Eo,AA),e(AA,oHe),e(AA,Lk),e(Lk,rHe),e(AA,tHe),e(Eo,aHe),e(Eo,yA),e(yA,nHe),e(yA,Hee),e(Hee,sHe),e(yA,lHe),e(Eo,iHe),e(Eo,Tr),M(LA,Tr,null),e(Tr,dHe),e(Tr,Uee),e(Uee,cHe),e(Tr,fHe),e(Tr,Fa),e(Fa,mHe),e(Fa,Jee),e(Jee,gHe),e(Fa,hHe),e(Fa,Yee),e(Yee,pHe),e(Fa,uHe),e(Fa,Kee),e(Kee,_He),e(Fa,bHe),e(Tr,vHe),e(Tr,k),e(k,An),e(An,Zee),e(Zee,FHe),e(An,THe),e(An,xk),e(xk,MHe),e(An,EHe),e(An,$k),e($k,CHe),e(An,wHe),e(k,AHe),e(k,yn),e(yn,eoe),e(eoe,yHe),e(yn,LHe),e(yn,kk),e(kk,xHe),e(yn,$He),e(yn,Sk),e(Sk,kHe),e(yn,SHe),e(k,RHe),e(k,Ln),e(Ln,ooe),e(ooe,BHe),e(Ln,PHe),e(Ln,Rk),e(Rk,IHe),e(Ln,qHe),e(Ln,Bk),e(Bk,NHe),e(Ln,jHe),e(k,DHe),e(k,lg),e(lg,roe),e(roe,GHe),e(lg,OHe),e(lg,Pk),e(Pk,VHe),e(lg,XHe),e(k,zHe),e(k,xn),e(xn,toe),e(toe,QHe),e(xn,WHe),e(xn,Ik),e(Ik,HHe),e(xn,UHe),e(xn,qk),e(qk,JHe),e(xn,YHe),e(k,KHe),e(k,ig),e(ig,aoe),e(aoe,ZHe),e(ig,eUe),e(ig,Nk),e(Nk,oUe),e(ig,rUe),e(k,tUe),e(k,dg),e(dg,noe),e(noe,aUe),e(dg,nUe),e(dg,jk),e(jk,sUe),e(dg,lUe),e(k,iUe),e(k,cg),e(cg,soe),e(soe,dUe),e(cg,cUe),e(cg,Dk),e(Dk,fUe),e(cg,mUe),e(k,gUe),e(k,$n),e($n,loe),e(loe,hUe),e($n,pUe),e($n,Gk),e(Gk,uUe),e($n,_Ue),e($n,Ok),e(Ok,bUe),e($n,vUe),e(k,FUe),e(k,kn),e(kn,ioe),e(ioe,TUe),e(kn,MUe),e(kn,Vk),e(Vk,EUe),e(kn,CUe),e(kn,Xk),e(Xk,wUe),e(kn,AUe),e(k,yUe),e(k,Sn),e(Sn,doe),e(doe,LUe),e(Sn,xUe),e(Sn,zk),e(zk,$Ue),e(Sn,kUe),e(Sn,Qk),e(Qk,SUe),e(Sn,RUe),e(k,BUe),e(k,fg),e(fg,coe),e(coe,PUe),e(fg,IUe),e(fg,Wk),e(Wk,qUe),e(fg,NUe),e(k,jUe),e(k,mg),e(mg,foe),e(foe,DUe),e(mg,GUe),e(mg,Hk),e(Hk,OUe),e(mg,VUe),e(k,XUe),e(k,Rn),e(Rn,moe),e(moe,zUe),e(Rn,QUe),e(Rn,Uk),e(Uk,WUe),e(Rn,HUe),e(Rn,Jk),e(Jk,UUe),e(Rn,JUe),e(k,YUe),e(k,gg),e(gg,goe),e(goe,KUe),e(gg,ZUe),e(gg,Yk),e(Yk,eJe),e(gg,oJe),e(k,rJe),e(k,Bn),e(Bn,hoe),e(hoe,tJe),e(Bn,aJe),e(Bn,Kk),e(Kk,nJe),e(Bn,sJe),e(Bn,Zk),e(Zk,lJe),e(Bn,iJe),e(k,dJe),e(k,Pn),e(Pn,poe),e(poe,cJe),e(Pn,fJe),e(Pn,eS),e(eS,mJe),e(Pn,gJe),e(Pn,oS),e(oS,hJe),e(Pn,pJe),e(k,uJe),e(k,In),e(In,uoe),e(uoe,_Je),e(In,bJe),e(In,rS),e(rS,vJe),e(In,FJe),e(In,_oe),e(_oe,TJe),e(In,MJe),e(k,EJe),e(k,hg),e(hg,boe),e(boe,CJe),e(hg,wJe),e(hg,tS),e(tS,AJe),e(hg,yJe),e(k,LJe),e(k,qn),e(qn,voe),e(voe,xJe),e(qn,$Je),e(qn,aS),e(aS,kJe),e(qn,SJe),e(qn,nS),e(nS,RJe),e(qn,BJe),e(k,PJe),e(k,Nn),e(Nn,Foe),e(Foe,IJe),e(Nn,qJe),e(Nn,sS),e(sS,NJe),e(Nn,jJe),e(Nn,lS),e(lS,DJe),e(Nn,GJe),e(k,OJe),e(k,jn),e(jn,Toe),e(Toe,VJe),e(jn,XJe),e(jn,iS),e(iS,zJe),e(jn,QJe),e(jn,dS),e(dS,WJe),e(jn,HJe),e(k,UJe),e(k,Dn),e(Dn,Moe),e(Moe,JJe),e(Dn,YJe),e(Dn,cS),e(cS,KJe),e(Dn,ZJe),e(Dn,fS),e(fS,eYe),e(Dn,oYe),e(k,rYe),e(k,Gn),e(Gn,Eoe),e(Eoe,tYe),e(Gn,aYe),e(Gn,mS),e(mS,nYe),e(Gn,sYe),e(Gn,gS),e(gS,lYe),e(Gn,iYe),e(k,dYe),e(k,On),e(On,Coe),e(Coe,cYe),e(On,fYe),e(On,hS),e(hS,mYe),e(On,gYe),e(On,pS),e(pS,hYe),e(On,pYe),e(k,uYe),e(k,pg),e(pg,woe),e(woe,_Ye),e(pg,bYe),e(pg,uS),e(uS,vYe),e(pg,FYe),e(k,TYe),e(k,Vn),e(Vn,Aoe),e(Aoe,MYe),e(Vn,EYe),e(Vn,_S),e(_S,CYe),e(Vn,wYe),e(Vn,bS),e(bS,AYe),e(Vn,yYe),e(k,LYe),e(k,ug),e(ug,yoe),e(yoe,xYe),e(ug,$Ye),e(ug,vS),e(vS,kYe),e(ug,SYe),e(k,RYe),e(k,Xn),e(Xn,Loe),e(Loe,BYe),e(Xn,PYe),e(Xn,FS),e(FS,IYe),e(Xn,qYe),e(Xn,TS),e(TS,NYe),e(Xn,jYe),e(k,DYe),e(k,zn),e(zn,xoe),e(xoe,GYe),e(zn,OYe),e(zn,MS),e(MS,VYe),e(zn,XYe),e(zn,ES),e(ES,zYe),e(zn,QYe),e(k,WYe),e(k,Qn),e(Qn,$oe),e($oe,HYe),e(Qn,UYe),e(Qn,CS),e(CS,JYe),e(Qn,YYe),e(Qn,wS),e(wS,KYe),e(Qn,ZYe),e(k,eKe),e(k,Wn),e(Wn,koe),e(koe,oKe),e(Wn,rKe),e(Wn,AS),e(AS,tKe),e(Wn,aKe),e(Wn,yS),e(yS,nKe),e(Wn,sKe),e(k,lKe),e(k,Hn),e(Hn,Soe),e(Soe,iKe),e(Hn,dKe),e(Hn,LS),e(LS,cKe),e(Hn,fKe),e(Hn,xS),e(xS,mKe),e(Hn,gKe),e(k,hKe),e(k,_g),e(_g,Roe),e(Roe,pKe),e(_g,uKe),e(_g,$S),e($S,_Ke),e(_g,bKe),e(k,vKe),e(k,Un),e(Un,Boe),e(Boe,FKe),e(Un,TKe),e(Un,kS),e(kS,MKe),e(Un,EKe),e(Un,SS),e(SS,CKe),e(Un,wKe),e(k,AKe),e(k,Jn),e(Jn,Poe),e(Poe,yKe),e(Jn,LKe),e(Jn,RS),e(RS,xKe),e(Jn,$Ke),e(Jn,BS),e(BS,kKe),e(Jn,SKe),e(k,RKe),e(k,Yn),e(Yn,Ioe),e(Ioe,BKe),e(Yn,PKe),e(Yn,PS),e(PS,IKe),e(Yn,qKe),e(Yn,IS),e(IS,NKe),e(Yn,jKe),e(k,DKe),e(k,Kn),e(Kn,qoe),e(qoe,GKe),e(Kn,OKe),e(Kn,qS),e(qS,VKe),e(Kn,XKe),e(Kn,NS),e(NS,zKe),e(Kn,QKe),e(k,WKe),e(k,Zn),e(Zn,Noe),e(Noe,HKe),e(Zn,UKe),e(Zn,jS),e(jS,JKe),e(Zn,YKe),e(Zn,DS),e(DS,KKe),e(Zn,ZKe),e(k,eZe),e(k,es),e(es,joe),e(joe,oZe),e(es,rZe),e(es,GS),e(GS,tZe),e(es,aZe),e(es,OS),e(OS,nZe),e(es,sZe),e(k,lZe),e(k,bg),e(bg,Doe),e(Doe,iZe),e(bg,dZe),e(bg,VS),e(VS,cZe),e(bg,fZe),e(k,mZe),e(k,os),e(os,Goe),e(Goe,gZe),e(os,hZe),e(os,XS),e(XS,pZe),e(os,uZe),e(os,zS),e(zS,_Ze),e(os,bZe),e(k,vZe),e(k,vg),e(vg,Ooe),e(Ooe,FZe),e(vg,TZe),e(vg,QS),e(QS,MZe),e(vg,EZe),e(k,CZe),e(k,Fg),e(Fg,Voe),e(Voe,wZe),e(Fg,AZe),e(Fg,WS),e(WS,yZe),e(Fg,LZe),e(k,xZe),e(k,rs),e(rs,Xoe),e(Xoe,$Ze),e(rs,kZe),e(rs,HS),e(HS,SZe),e(rs,RZe),e(rs,US),e(US,BZe),e(rs,PZe),e(k,IZe),e(k,ts),e(ts,zoe),e(zoe,qZe),e(ts,NZe),e(ts,JS),e(JS,jZe),e(ts,DZe),e(ts,YS),e(YS,GZe),e(ts,OZe),e(k,VZe),e(k,as),e(as,Qoe),e(Qoe,XZe),e(as,zZe),e(as,KS),e(KS,QZe),e(as,WZe),e(as,ZS),e(ZS,HZe),e(as,UZe),e(k,JZe),e(k,Tg),e(Tg,Woe),e(Woe,YZe),e(Tg,KZe),e(Tg,eR),e(eR,ZZe),e(Tg,eeo),e(k,oeo),e(k,ns),e(ns,Hoe),e(Hoe,reo),e(ns,teo),e(ns,oR),e(oR,aeo),e(ns,neo),e(ns,rR),e(rR,seo),e(ns,leo),e(k,ieo),e(k,ss),e(ss,Uoe),e(Uoe,deo),e(ss,ceo),e(ss,tR),e(tR,feo),e(ss,meo),e(ss,aR),e(aR,geo),e(ss,heo),e(k,peo),e(k,ls),e(ls,Joe),e(Joe,ueo),e(ls,_eo),e(ls,nR),e(nR,beo),e(ls,veo),e(ls,sR),e(sR,Feo),e(ls,Teo),e(k,Meo),e(k,is),e(is,Yoe),e(Yoe,Eeo),e(is,Ceo),e(is,lR),e(lR,weo),e(is,Aeo),e(is,iR),e(iR,yeo),e(is,Leo),e(k,xeo),e(k,ds),e(ds,Koe),e(Koe,$eo),e(ds,keo),e(ds,dR),e(dR,Seo),e(ds,Reo),e(ds,cR),e(cR,Beo),e(ds,Peo),e(k,Ieo),e(k,cs),e(cs,Zoe),e(Zoe,qeo),e(cs,Neo),e(cs,fR),e(fR,jeo),e(cs,Deo),e(cs,mR),e(mR,Geo),e(cs,Oeo),e(k,Veo),e(k,Mg),e(Mg,ere),e(ere,Xeo),e(Mg,zeo),e(Mg,gR),e(gR,Qeo),e(Mg,Weo),e(k,Heo),e(k,Eg),e(Eg,ore),e(ore,Ueo),e(Eg,Jeo),e(Eg,hR),e(hR,Yeo),e(Eg,Keo),e(k,Zeo),e(k,Cg),e(Cg,rre),e(rre,eoo),e(Cg,ooo),e(Cg,pR),e(pR,roo),e(Cg,too),e(k,aoo),e(k,wg),e(wg,tre),e(tre,noo),e(wg,soo),e(wg,uR),e(uR,loo),e(wg,ioo),e(k,doo),e(k,fs),e(fs,are),e(are,coo),e(fs,foo),e(fs,_R),e(_R,moo),e(fs,goo),e(fs,bR),e(bR,hoo),e(fs,poo),e(k,uoo),e(k,Ag),e(Ag,nre),e(nre,_oo),e(Ag,boo),e(Ag,vR),e(vR,voo),e(Ag,Foo),e(k,Too),e(k,ms),e(ms,sre),e(sre,Moo),e(ms,Eoo),e(ms,FR),e(FR,Coo),e(ms,woo),e(ms,TR),e(TR,Aoo),e(ms,yoo),e(k,Loo),e(k,gs),e(gs,lre),e(lre,xoo),e(gs,$oo),e(gs,MR),e(MR,koo),e(gs,Soo),e(gs,ER),e(ER,Roo),e(gs,Boo),e(k,Poo),e(k,hs),e(hs,ire),e(ire,Ioo),e(hs,qoo),e(hs,CR),e(CR,Noo),e(hs,joo),e(hs,wR),e(wR,Doo),e(hs,Goo),e(k,Ooo),e(k,ps),e(ps,dre),e(dre,Voo),e(ps,Xoo),e(ps,AR),e(AR,zoo),e(ps,Qoo),e(ps,yR),e(yR,Woo),e(ps,Hoo),e(k,Uoo),e(k,us),e(us,cre),e(cre,Joo),e(us,Yoo),e(us,LR),e(LR,Koo),e(us,Zoo),e(us,xR),e(xR,ero),e(us,oro),e(k,rro),e(k,_s),e(_s,fre),e(fre,tro),e(_s,aro),e(_s,$R),e($R,nro),e(_s,sro),e(_s,kR),e(kR,lro),e(_s,iro),e(k,dro),e(k,yg),e(yg,mre),e(mre,cro),e(yg,fro),e(yg,SR),e(SR,mro),e(yg,gro),e(k,hro),e(k,Lg),e(Lg,gre),e(gre,pro),e(Lg,uro),e(Lg,RR),e(RR,_ro),e(Lg,bro),e(k,vro),e(k,bs),e(bs,hre),e(hre,Fro),e(bs,Tro),e(bs,BR),e(BR,Mro),e(bs,Ero),e(bs,PR),e(PR,Cro),e(bs,wro),e(k,Aro),e(k,vs),e(vs,pre),e(pre,yro),e(vs,Lro),e(vs,IR),e(IR,xro),e(vs,$ro),e(vs,qR),e(qR,kro),e(vs,Sro),e(k,Rro),e(k,Fs),e(Fs,ure),e(ure,Bro),e(Fs,Pro),e(Fs,NR),e(NR,Iro),e(Fs,qro),e(Fs,jR),e(jR,Nro),e(Fs,jro),e(k,Dro),e(k,xg),e(xg,_re),e(_re,Gro),e(xg,Oro),e(xg,DR),e(DR,Vro),e(xg,Xro),e(k,zro),e(k,$g),e($g,bre),e(bre,Qro),e($g,Wro),e($g,GR),e(GR,Hro),e($g,Uro),e(k,Jro),e(k,kg),e(kg,vre),e(vre,Yro),e(kg,Kro),e(kg,OR),e(OR,Zro),e(kg,eto),e(k,oto),e(k,Ts),e(Ts,Fre),e(Fre,rto),e(Ts,tto),e(Ts,VR),e(VR,ato),e(Ts,nto),e(Ts,XR),e(XR,sto),e(Ts,lto),e(k,ito),e(k,Sg),e(Sg,Tre),e(Tre,dto),e(Sg,cto),e(Sg,zR),e(zR,fto),e(Sg,mto),e(k,gto),e(k,Rg),e(Rg,Mre),e(Mre,hto),e(Rg,pto),e(Rg,QR),e(QR,uto),e(Rg,_to),e(k,bto),e(k,Ms),e(Ms,Ere),e(Ere,vto),e(Ms,Fto),e(Ms,WR),e(WR,Tto),e(Ms,Mto),e(Ms,HR),e(HR,Eto),e(Ms,Cto),e(k,wto),e(k,Bg),e(Bg,Cre),e(Cre,Ato),e(Bg,yto),e(Bg,UR),e(UR,Lto),e(Bg,xto),e(k,$to),e(k,Pg),e(Pg,wre),e(wre,kto),e(Pg,Sto),e(Pg,JR),e(JR,Rto),e(Pg,Bto),e(k,Pto),e(k,Es),e(Es,Are),e(Are,Ito),e(Es,qto),e(Es,YR),e(YR,Nto),e(Es,jto),e(Es,KR),e(KR,Dto),e(Es,Gto),e(k,Oto),e(k,Cs),e(Cs,yre),e(yre,Vto),e(Cs,Xto),e(Cs,ZR),e(ZR,zto),e(Cs,Qto),e(Cs,eB),e(eB,Wto),e(Cs,Hto),e(k,Uto),e(k,ws),e(ws,Lre),e(Lre,Jto),e(ws,Yto),e(ws,oB),e(oB,Kto),e(ws,Zto),e(ws,rB),e(rB,eao),e(ws,oao),e(k,rao),e(k,As),e(As,xre),e(xre,tao),e(As,aao),e(As,tB),e(tB,nao),e(As,sao),e(As,aB),e(aB,lao),e(As,iao),e(Tr,dao),M(Ig,Tr,null),e(Eo,cao),e(Eo,qg),M(xA,qg,null),e(qg,fao),e(qg,$re),e($re,mao),b(f,HRe,_),b(f,mi,_),e(mi,Ng),e(Ng,kre),M($A,kre,null),e(mi,gao),e(mi,Sre),e(Sre,hao),b(f,URe,_),b(f,Co,_),M(kA,Co,null),e(Co,pao),e(Co,SA),e(SA,uao),e(SA,nB),e(nB,_ao),e(SA,bao),e(Co,vao),e(Co,RA),e(RA,Fao),e(RA,Rre),e(Rre,Tao),e(RA,Mao),e(Co,Eao),e(Co,ze),M(BA,ze,null),e(ze,Cao),e(ze,Bre),e(Bre,wao),e(ze,Aao),e(ze,Ta),e(Ta,yao),e(Ta,Pre),e(Pre,Lao),e(Ta,xao),e(Ta,Ire),e(Ire,$ao),e(Ta,kao),e(Ta,qre),e(qre,Sao),e(Ta,Rao),e(ze,Bao),e(ze,ae),e(ae,jg),e(jg,Nre),e(Nre,Pao),e(jg,Iao),e(jg,sB),e(sB,qao),e(jg,Nao),e(ae,jao),e(ae,Dg),e(Dg,jre),e(jre,Dao),e(Dg,Gao),e(Dg,lB),e(lB,Oao),e(Dg,Vao),e(ae,Xao),e(ae,Gg),e(Gg,Dre),e(Dre,zao),e(Gg,Qao),e(Gg,iB),e(iB,Wao),e(Gg,Hao),e(ae,Uao),e(ae,Og),e(Og,Gre),e(Gre,Jao),e(Og,Yao),e(Og,dB),e(dB,Kao),e(Og,Zao),e(ae,eno),e(ae,Vg),e(Vg,Ore),e(Ore,ono),e(Vg,rno),e(Vg,cB),e(cB,tno),e(Vg,ano),e(ae,nno),e(ae,Xg),e(Xg,Vre),e(Vre,sno),e(Xg,lno),e(Xg,fB),e(fB,ino),e(Xg,dno),e(ae,cno),e(ae,zg),e(zg,Xre),e(Xre,fno),e(zg,mno),e(zg,mB),e(mB,gno),e(zg,hno),e(ae,pno),e(ae,Qg),e(Qg,zre),e(zre,uno),e(Qg,_no),e(Qg,gB),e(gB,bno),e(Qg,vno),e(ae,Fno),e(ae,Wg),e(Wg,Qre),e(Qre,Tno),e(Wg,Mno),e(Wg,hB),e(hB,Eno),e(Wg,Cno),e(ae,wno),e(ae,Hg),e(Hg,Wre),e(Wre,Ano),e(Hg,yno),e(Hg,pB),e(pB,Lno),e(Hg,xno),e(ae,$no),e(ae,Ug),e(Ug,Hre),e(Hre,kno),e(Ug,Sno),e(Ug,uB),e(uB,Rno),e(Ug,Bno),e(ae,Pno),e(ae,Jg),e(Jg,Ure),e(Ure,Ino),e(Jg,qno),e(Jg,_B),e(_B,Nno),e(Jg,jno),e(ae,Dno),e(ae,Yg),e(Yg,Jre),e(Jre,Gno),e(Yg,Ono),e(Yg,bB),e(bB,Vno),e(Yg,Xno),e(ae,zno),e(ae,Kg),e(Kg,Yre),e(Yre,Qno),e(Kg,Wno),e(Kg,vB),e(vB,Hno),e(Kg,Uno),e(ae,Jno),e(ae,Zg),e(Zg,Kre),e(Kre,Yno),e(Zg,Kno),e(Zg,FB),e(FB,Zno),e(Zg,eso),e(ae,oso),e(ae,eh),e(eh,Zre),e(Zre,rso),e(eh,tso),e(eh,TB),e(TB,aso),e(eh,nso),e(ae,sso),e(ae,oh),e(oh,ete),e(ete,lso),e(oh,iso),e(oh,MB),e(MB,dso),e(oh,cso),e(ae,fso),e(ae,rh),e(rh,ote),e(ote,mso),e(rh,gso),e(rh,EB),e(EB,hso),e(rh,pso),e(ae,uso),e(ae,th),e(th,rte),e(rte,_so),e(th,bso),e(th,CB),e(CB,vso),e(th,Fso),e(ae,Tso),e(ae,ah),e(ah,tte),e(tte,Mso),e(ah,Eso),e(ah,wB),e(wB,Cso),e(ah,wso),e(ae,Aso),e(ae,nh),e(nh,ate),e(ate,yso),e(nh,Lso),e(nh,AB),e(AB,xso),e(nh,$so),e(ae,kso),e(ae,sh),e(sh,nte),e(nte,Sso),e(sh,Rso),e(sh,yB),e(yB,Bso),e(sh,Pso),e(ae,Iso),e(ae,lh),e(lh,ste),e(ste,qso),e(lh,Nso),e(lh,LB),e(LB,jso),e(lh,Dso),e(ze,Gso),M(ih,ze,null),e(ze,Oso),M(dh,ze,null),e(Co,Vso),e(Co,ch),M(PA,ch,null),e(ch,Xso),e(ch,lte),e(lte,zso),b(f,JRe,_),b(f,gi,_),e(gi,fh),e(fh,ite),M(IA,ite,null),e(gi,Qso),e(gi,dte),e(dte,Wso),b(f,YRe,_),b(f,wo,_),M(qA,wo,null),e(wo,Hso),e(wo,NA),e(NA,Uso),e(NA,xB),e(xB,Jso),e(NA,Yso),e(wo,Kso),e(wo,jA),e(jA,Zso),e(jA,cte),e(cte,elo),e(jA,olo),e(wo,rlo),e(wo,Qe),M(DA,Qe,null),e(Qe,tlo),e(Qe,fte),e(fte,alo),e(Qe,nlo),e(Qe,hi),e(hi,slo),e(hi,mte),e(mte,llo),e(hi,ilo),e(hi,gte),e(gte,dlo),e(hi,clo),e(Qe,flo),e(Qe,be),e(be,mh),e(mh,hte),e(hte,mlo),e(mh,glo),e(mh,$B),e($B,hlo),e(mh,plo),e(be,ulo),e(be,gh),e(gh,pte),e(pte,_lo),e(gh,blo),e(gh,kB),e(kB,vlo),e(gh,Flo),e(be,Tlo),e(be,hh),e(hh,ute),e(ute,Mlo),e(hh,Elo),e(hh,SB),e(SB,Clo),e(hh,wlo),e(be,Alo),e(be,ph),e(ph,_te),e(_te,ylo),e(ph,Llo),e(ph,RB),e(RB,xlo),e(ph,$lo),e(be,klo),e(be,uh),e(uh,bte),e(bte,Slo),e(uh,Rlo),e(uh,BB),e(BB,Blo),e(uh,Plo),e(be,Ilo),e(be,_h),e(_h,vte),e(vte,qlo),e(_h,Nlo),e(_h,PB),e(PB,jlo),e(_h,Dlo),e(be,Glo),e(be,bh),e(bh,Fte),e(Fte,Olo),e(bh,Vlo),e(bh,IB),e(IB,Xlo),e(bh,zlo),e(be,Qlo),e(be,vh),e(vh,Tte),e(Tte,Wlo),e(vh,Hlo),e(vh,qB),e(qB,Ulo),e(vh,Jlo),e(be,Ylo),e(be,Fh),e(Fh,Mte),e(Mte,Klo),e(Fh,Zlo),e(Fh,NB),e(NB,eio),e(Fh,oio),e(be,rio),e(be,Th),e(Th,Ete),e(Ete,tio),e(Th,aio),e(Th,jB),e(jB,nio),e(Th,sio),e(be,lio),e(be,Mh),e(Mh,Cte),e(Cte,iio),e(Mh,dio),e(Mh,DB),e(DB,cio),e(Mh,fio),e(be,mio),e(be,Eh),e(Eh,wte),e(wte,gio),e(Eh,hio),e(Eh,GB),e(GB,pio),e(Eh,uio),e(be,_io),e(be,Ch),e(Ch,Ate),e(Ate,bio),e(Ch,vio),e(Ch,OB),e(OB,Fio),e(Ch,Tio),e(be,Mio),e(be,wh),e(wh,yte),e(yte,Eio),e(wh,Cio),e(wh,VB),e(VB,wio),e(wh,Aio),e(Qe,yio),M(Ah,Qe,null),e(Qe,Lio),M(yh,Qe,null),e(wo,xio),e(wo,Lh),M(GA,Lh,null),e(Lh,$io),e(Lh,Lte),e(Lte,kio),b(f,KRe,_),b(f,pi,_),e(pi,xh),e(xh,xte),M(OA,xte,null),e(pi,Sio),e(pi,$te),e($te,Rio),b(f,ZRe,_),b(f,Ao,_),M(VA,Ao,null),e(Ao,Bio),e(Ao,ui),e(ui,Pio),e(ui,XB),e(XB,Iio),e(ui,qio),e(ui,zB),e(zB,Nio),e(ui,jio),e(Ao,Dio),e(Ao,XA),e(XA,Gio),e(XA,kte),e(kte,Oio),e(XA,Vio),e(Ao,Xio),e(Ao,Kr),M(zA,Kr,null),e(Kr,zio),e(Kr,Ste),e(Ste,Qio),e(Kr,Wio),e(Kr,_i),e(_i,Hio),e(_i,Rte),e(Rte,Uio),e(_i,Jio),e(_i,QB),e(QB,Yio),e(_i,Kio),e(Kr,Zio),M($h,Kr,null),e(Ao,edo),e(Ao,We),M(QA,We,null),e(We,odo),e(We,Bte),e(Bte,rdo),e(We,tdo),e(We,Ma),e(Ma,ado),e(Ma,Pte),e(Pte,ndo),e(Ma,sdo),e(Ma,Ite),e(Ite,ldo),e(Ma,ido),e(Ma,qte),e(qte,ddo),e(Ma,cdo),e(We,fdo),e(We,x),e(x,kh),e(kh,Nte),e(Nte,mdo),e(kh,gdo),e(kh,WB),e(WB,hdo),e(kh,pdo),e(x,udo),e(x,Sh),e(Sh,jte),e(jte,_do),e(Sh,bdo),e(Sh,HB),e(HB,vdo),e(Sh,Fdo),e(x,Tdo),e(x,Rh),e(Rh,Dte),e(Dte,Mdo),e(Rh,Edo),e(Rh,UB),e(UB,Cdo),e(Rh,wdo),e(x,Ado),e(x,Bh),e(Bh,Gte),e(Gte,ydo),e(Bh,Ldo),e(Bh,JB),e(JB,xdo),e(Bh,$do),e(x,kdo),e(x,Ph),e(Ph,Ote),e(Ote,Sdo),e(Ph,Rdo),e(Ph,YB),e(YB,Bdo),e(Ph,Pdo),e(x,Ido),e(x,Ih),e(Ih,Vte),e(Vte,qdo),e(Ih,Ndo),e(Ih,KB),e(KB,jdo),e(Ih,Ddo),e(x,Gdo),e(x,qh),e(qh,Xte),e(Xte,Odo),e(qh,Vdo),e(qh,ZB),e(ZB,Xdo),e(qh,zdo),e(x,Qdo),e(x,Nh),e(Nh,zte),e(zte,Wdo),e(Nh,Hdo),e(Nh,eP),e(eP,Udo),e(Nh,Jdo),e(x,Ydo),e(x,jh),e(jh,Qte),e(Qte,Kdo),e(jh,Zdo),e(jh,oP),e(oP,eco),e(jh,oco),e(x,rco),e(x,Dh),e(Dh,Wte),e(Wte,tco),e(Dh,aco),e(Dh,rP),e(rP,nco),e(Dh,sco),e(x,lco),e(x,Gh),e(Gh,Hte),e(Hte,ico),e(Gh,dco),e(Gh,tP),e(tP,cco),e(Gh,fco),e(x,mco),e(x,Oh),e(Oh,Ute),e(Ute,gco),e(Oh,hco),e(Oh,aP),e(aP,pco),e(Oh,uco),e(x,_co),e(x,Vh),e(Vh,Jte),e(Jte,bco),e(Vh,vco),e(Vh,nP),e(nP,Fco),e(Vh,Tco),e(x,Mco),e(x,Xh),e(Xh,Yte),e(Yte,Eco),e(Xh,Cco),e(Xh,sP),e(sP,wco),e(Xh,Aco),e(x,yco),e(x,zh),e(zh,Kte),e(Kte,Lco),e(zh,xco),e(zh,lP),e(lP,$co),e(zh,kco),e(x,Sco),e(x,Qh),e(Qh,Zte),e(Zte,Rco),e(Qh,Bco),e(Qh,iP),e(iP,Pco),e(Qh,Ico),e(x,qco),e(x,Wh),e(Wh,eae),e(eae,Nco),e(Wh,jco),e(Wh,dP),e(dP,Dco),e(Wh,Gco),e(x,Oco),e(x,Hh),e(Hh,oae),e(oae,Vco),e(Hh,Xco),e(Hh,cP),e(cP,zco),e(Hh,Qco),e(x,Wco),e(x,Uh),e(Uh,rae),e(rae,Hco),e(Uh,Uco),e(Uh,fP),e(fP,Jco),e(Uh,Yco),e(x,Kco),e(x,Jh),e(Jh,tae),e(tae,Zco),e(Jh,efo),e(Jh,mP),e(mP,ofo),e(Jh,rfo),e(x,tfo),e(x,Yh),e(Yh,aae),e(aae,afo),e(Yh,nfo),e(Yh,gP),e(gP,sfo),e(Yh,lfo),e(x,ifo),e(x,Kh),e(Kh,nae),e(nae,dfo),e(Kh,cfo),e(Kh,hP),e(hP,ffo),e(Kh,mfo),e(x,gfo),e(x,Zh),e(Zh,sae),e(sae,hfo),e(Zh,pfo),e(Zh,pP),e(pP,ufo),e(Zh,_fo),e(x,bfo),e(x,ep),e(ep,lae),e(lae,vfo),e(ep,Ffo),e(ep,uP),e(uP,Tfo),e(ep,Mfo),e(x,Efo),e(x,op),e(op,iae),e(iae,Cfo),e(op,wfo),e(op,_P),e(_P,Afo),e(op,yfo),e(x,Lfo),e(x,rp),e(rp,dae),e(dae,xfo),e(rp,$fo),e(rp,bP),e(bP,kfo),e(rp,Sfo),e(x,Rfo),e(x,tp),e(tp,cae),e(cae,Bfo),e(tp,Pfo),e(tp,vP),e(vP,Ifo),e(tp,qfo),e(x,Nfo),e(x,ap),e(ap,fae),e(fae,jfo),e(ap,Dfo),e(ap,FP),e(FP,Gfo),e(ap,Ofo),e(x,Vfo),e(x,np),e(np,mae),e(mae,Xfo),e(np,zfo),e(np,TP),e(TP,Qfo),e(np,Wfo),e(x,Hfo),e(x,sp),e(sp,gae),e(gae,Ufo),e(sp,Jfo),e(sp,MP),e(MP,Yfo),e(sp,Kfo),e(x,Zfo),e(x,ys),e(ys,hae),e(hae,emo),e(ys,omo),e(ys,EP),e(EP,rmo),e(ys,tmo),e(ys,CP),e(CP,amo),e(ys,nmo),e(x,smo),e(x,lp),e(lp,pae),e(pae,lmo),e(lp,imo),e(lp,wP),e(wP,dmo),e(lp,cmo),e(x,fmo),e(x,ip),e(ip,uae),e(uae,mmo),e(ip,gmo),e(ip,AP),e(AP,hmo),e(ip,pmo),e(x,umo),e(x,dp),e(dp,_ae),e(_ae,_mo),e(dp,bmo),e(dp,yP),e(yP,vmo),e(dp,Fmo),e(x,Tmo),e(x,cp),e(cp,bae),e(bae,Mmo),e(cp,Emo),e(cp,LP),e(LP,Cmo),e(cp,wmo),e(x,Amo),e(x,fp),e(fp,vae),e(vae,ymo),e(fp,Lmo),e(fp,xP),e(xP,xmo),e(fp,$mo),e(x,kmo),e(x,mp),e(mp,Fae),e(Fae,Smo),e(mp,Rmo),e(mp,$P),e($P,Bmo),e(mp,Pmo),e(x,Imo),e(x,gp),e(gp,Tae),e(Tae,qmo),e(gp,Nmo),e(gp,kP),e(kP,jmo),e(gp,Dmo),e(x,Gmo),e(x,hp),e(hp,Mae),e(Mae,Omo),e(hp,Vmo),e(hp,SP),e(SP,Xmo),e(hp,zmo),e(x,Qmo),e(x,pp),e(pp,Eae),e(Eae,Wmo),e(pp,Hmo),e(pp,RP),e(RP,Umo),e(pp,Jmo),e(x,Ymo),e(x,up),e(up,Cae),e(Cae,Kmo),e(up,Zmo),e(up,BP),e(BP,ego),e(up,ogo),e(x,rgo),e(x,_p),e(_p,wae),e(wae,tgo),e(_p,ago),e(_p,PP),e(PP,ngo),e(_p,sgo),e(x,lgo),e(x,bp),e(bp,Aae),e(Aae,igo),e(bp,dgo),e(bp,IP),e(IP,cgo),e(bp,fgo),e(x,mgo),e(x,vp),e(vp,yae),e(yae,ggo),e(vp,hgo),e(vp,qP),e(qP,pgo),e(vp,ugo),e(x,_go),e(x,Fp),e(Fp,Lae),e(Lae,bgo),e(Fp,vgo),e(Fp,NP),e(NP,Fgo),e(Fp,Tgo),e(x,Mgo),e(x,Tp),e(Tp,xae),e(xae,Ego),e(Tp,Cgo),e(Tp,jP),e(jP,wgo),e(Tp,Ago),e(x,ygo),e(x,Mp),e(Mp,$ae),e($ae,Lgo),e(Mp,xgo),e(Mp,DP),e(DP,$go),e(Mp,kgo),e(x,Sgo),e(x,Ep),e(Ep,kae),e(kae,Rgo),e(Ep,Bgo),e(Ep,GP),e(GP,Pgo),e(Ep,Igo),e(x,qgo),e(x,Cp),e(Cp,Sae),e(Sae,Ngo),e(Cp,jgo),e(Cp,Rae),e(Rae,Dgo),e(Cp,Ggo),e(x,Ogo),e(x,wp),e(wp,Bae),e(Bae,Vgo),e(wp,Xgo),e(wp,OP),e(OP,zgo),e(wp,Qgo),e(x,Wgo),e(x,Ap),e(Ap,Pae),e(Pae,Hgo),e(Ap,Ugo),e(Ap,VP),e(VP,Jgo),e(Ap,Ygo),e(x,Kgo),e(x,yp),e(yp,Iae),e(Iae,Zgo),e(yp,eho),e(yp,XP),e(XP,oho),e(yp,rho),e(x,tho),e(x,Lp),e(Lp,qae),e(qae,aho),e(Lp,nho),e(Lp,zP),e(zP,sho),e(Lp,lho),e(x,iho),e(x,xp),e(xp,Nae),e(Nae,dho),e(xp,cho),e(xp,QP),e(QP,fho),e(xp,mho),e(x,gho),e(x,$p),e($p,jae),e(jae,hho),e($p,pho),e($p,WP),e(WP,uho),e($p,_ho),e(x,bho),e(x,kp),e(kp,Dae),e(Dae,vho),e(kp,Fho),e(kp,HP),e(HP,Tho),e(kp,Mho),e(x,Eho),e(x,Sp),e(Sp,Gae),e(Gae,Cho),e(Sp,who),e(Sp,UP),e(UP,Aho),e(Sp,yho),e(x,Lho),e(x,Rp),e(Rp,Oae),e(Oae,xho),e(Rp,$ho),e(Rp,JP),e(JP,kho),e(Rp,Sho),e(x,Rho),e(x,Bp),e(Bp,Vae),e(Vae,Bho),e(Bp,Pho),e(Bp,YP),e(YP,Iho),e(Bp,qho),e(x,Nho),e(x,Pp),e(Pp,Xae),e(Xae,jho),e(Pp,Dho),e(Pp,KP),e(KP,Gho),e(Pp,Oho),e(x,Vho),e(x,Ip),e(Ip,zae),e(zae,Xho),e(Ip,zho),e(Ip,ZP),e(ZP,Qho),e(Ip,Who),e(x,Hho),e(x,qp),e(qp,Qae),e(Qae,Uho),e(qp,Jho),e(qp,eI),e(eI,Yho),e(qp,Kho),e(x,Zho),e(x,Np),e(Np,Wae),e(Wae,epo),e(Np,opo),e(Np,oI),e(oI,rpo),e(Np,tpo),e(x,apo),e(x,jp),e(jp,Hae),e(Hae,npo),e(jp,spo),e(jp,rI),e(rI,lpo),e(jp,ipo),e(x,dpo),e(x,Dp),e(Dp,Uae),e(Uae,cpo),e(Dp,fpo),e(Dp,tI),e(tI,mpo),e(Dp,gpo),e(x,hpo),e(x,Gp),e(Gp,Jae),e(Jae,ppo),e(Gp,upo),e(Gp,aI),e(aI,_po),e(Gp,bpo),e(x,vpo),e(x,Op),e(Op,Yae),e(Yae,Fpo),e(Op,Tpo),e(Op,nI),e(nI,Mpo),e(Op,Epo),e(x,Cpo),e(x,Vp),e(Vp,Kae),e(Kae,wpo),e(Vp,Apo),e(Vp,sI),e(sI,ypo),e(Vp,Lpo),e(x,xpo),e(x,Xp),e(Xp,Zae),e(Zae,$po),e(Xp,kpo),e(Xp,lI),e(lI,Spo),e(Xp,Rpo),e(x,Bpo),e(x,zp),e(zp,ene),e(ene,Ppo),e(zp,Ipo),e(zp,iI),e(iI,qpo),e(zp,Npo),e(x,jpo),e(x,Qp),e(Qp,one),e(one,Dpo),e(Qp,Gpo),e(Qp,dI),e(dI,Opo),e(Qp,Vpo),e(x,Xpo),e(x,Wp),e(Wp,rne),e(rne,zpo),e(Wp,Qpo),e(Wp,cI),e(cI,Wpo),e(Wp,Hpo),e(x,Upo),e(x,Hp),e(Hp,tne),e(tne,Jpo),e(Hp,Ypo),e(Hp,fI),e(fI,Kpo),e(Hp,Zpo),e(x,euo),e(x,Up),e(Up,ane),e(ane,ouo),e(Up,ruo),e(Up,mI),e(mI,tuo),e(Up,auo),e(x,nuo),e(x,Jp),e(Jp,nne),e(nne,suo),e(Jp,luo),e(Jp,gI),e(gI,iuo),e(Jp,duo),e(x,cuo),e(x,Yp),e(Yp,sne),e(sne,fuo),e(Yp,muo),e(Yp,hI),e(hI,guo),e(Yp,huo),e(x,puo),e(x,Kp),e(Kp,lne),e(lne,uuo),e(Kp,_uo),e(Kp,pI),e(pI,buo),e(Kp,vuo),e(x,Fuo),e(x,Zp),e(Zp,ine),e(ine,Tuo),e(Zp,Muo),e(Zp,uI),e(uI,Euo),e(Zp,Cuo),e(x,wuo),e(x,eu),e(eu,dne),e(dne,Auo),e(eu,yuo),e(eu,_I),e(_I,Luo),e(eu,xuo),e(x,$uo),e(x,ou),e(ou,cne),e(cne,kuo),e(ou,Suo),e(ou,bI),e(bI,Ruo),e(ou,Buo),e(x,Puo),e(x,ru),e(ru,fne),e(fne,Iuo),e(ru,quo),e(ru,vI),e(vI,Nuo),e(ru,juo),e(x,Duo),e(x,tu),e(tu,mne),e(mne,Guo),e(tu,Ouo),e(tu,FI),e(FI,Vuo),e(tu,Xuo),e(x,zuo),e(x,au),e(au,gne),e(gne,Quo),e(au,Wuo),e(au,TI),e(TI,Huo),e(au,Uuo),e(x,Juo),e(x,nu),e(nu,hne),e(hne,Yuo),e(nu,Kuo),e(nu,MI),e(MI,Zuo),e(nu,e_o),e(x,o_o),e(x,su),e(su,pne),e(pne,r_o),e(su,t_o),e(su,EI),e(EI,a_o),e(su,n_o),e(x,s_o),e(x,lu),e(lu,une),e(une,l_o),e(lu,i_o),e(lu,CI),e(CI,d_o),e(lu,c_o),e(x,f_o),e(x,iu),e(iu,_ne),e(_ne,m_o),e(iu,g_o),e(iu,wI),e(wI,h_o),e(iu,p_o),e(x,u_o),e(x,du),e(du,bne),e(bne,__o),e(du,b_o),e(du,AI),e(AI,v_o),e(du,F_o),e(x,T_o),e(x,cu),e(cu,vne),e(vne,M_o),e(cu,E_o),e(cu,yI),e(yI,C_o),e(cu,w_o),e(x,A_o),e(x,fu),e(fu,Fne),e(Fne,y_o),e(fu,L_o),e(fu,LI),e(LI,x_o),e(fu,$_o),e(x,k_o),e(x,mu),e(mu,Tne),e(Tne,S_o),e(mu,R_o),e(mu,xI),e(xI,B_o),e(mu,P_o),e(x,I_o),e(x,gu),e(gu,Mne),e(Mne,q_o),e(gu,N_o),e(gu,$I),e($I,j_o),e(gu,D_o),e(x,G_o),e(x,hu),e(hu,Ene),e(Ene,O_o),e(hu,V_o),e(hu,kI),e(kI,X_o),e(hu,z_o),e(x,Q_o),e(x,pu),e(pu,Cne),e(Cne,W_o),e(pu,H_o),e(pu,SI),e(SI,U_o),e(pu,J_o),e(x,Y_o),e(x,uu),e(uu,wne),e(wne,K_o),e(uu,Z_o),e(uu,RI),e(RI,e2o),e(uu,o2o),e(We,r2o),e(We,_u),e(_u,t2o),e(_u,Ane),e(Ane,a2o),e(_u,n2o),e(_u,yne),e(yne,s2o),e(We,l2o),M(bu,We,null),b(f,eBe,_),b(f,bi,_),e(bi,vu),e(vu,Lne),M(WA,Lne,null),e(bi,i2o),e(bi,xne),e(xne,d2o),b(f,oBe,_),b(f,yo,_),M(HA,yo,null),e(yo,c2o),e(yo,vi),e(vi,f2o),e(vi,BI),e(BI,m2o),e(vi,g2o),e(vi,PI),e(PI,h2o),e(vi,p2o),e(yo,u2o),e(yo,UA),e(UA,_2o),e(UA,$ne),e($ne,b2o),e(UA,v2o),e(yo,F2o),e(yo,Zr),M(JA,Zr,null),e(Zr,T2o),e(Zr,kne),e(kne,M2o),e(Zr,E2o),e(Zr,Fi),e(Fi,C2o),e(Fi,Sne),e(Sne,w2o),e(Fi,A2o),e(Fi,II),e(II,y2o),e(Fi,L2o),e(Zr,x2o),M(Fu,Zr,null),e(yo,$2o),e(yo,He),M(YA,He,null),e(He,k2o),e(He,Rne),e(Rne,S2o),e(He,R2o),e(He,Ea),e(Ea,B2o),e(Ea,Bne),e(Bne,P2o),e(Ea,I2o),e(Ea,Pne),e(Pne,q2o),e(Ea,N2o),e(Ea,Ine),e(Ine,j2o),e(Ea,D2o),e(He,G2o),e(He,G),e(G,Tu),e(Tu,qne),e(qne,O2o),e(Tu,V2o),e(Tu,qI),e(qI,X2o),e(Tu,z2o),e(G,Q2o),e(G,Mu),e(Mu,Nne),e(Nne,W2o),e(Mu,H2o),e(Mu,NI),e(NI,U2o),e(Mu,J2o),e(G,Y2o),e(G,Eu),e(Eu,jne),e(jne,K2o),e(Eu,Z2o),e(Eu,jI),e(jI,e1o),e(Eu,o1o),e(G,r1o),e(G,Cu),e(Cu,Dne),e(Dne,t1o),e(Cu,a1o),e(Cu,DI),e(DI,n1o),e(Cu,s1o),e(G,l1o),e(G,wu),e(wu,Gne),e(Gne,i1o),e(wu,d1o),e(wu,GI),e(GI,c1o),e(wu,f1o),e(G,m1o),e(G,Au),e(Au,One),e(One,g1o),e(Au,h1o),e(Au,OI),e(OI,p1o),e(Au,u1o),e(G,_1o),e(G,yu),e(yu,Vne),e(Vne,b1o),e(yu,v1o),e(yu,VI),e(VI,F1o),e(yu,T1o),e(G,M1o),e(G,Lu),e(Lu,Xne),e(Xne,E1o),e(Lu,C1o),e(Lu,XI),e(XI,w1o),e(Lu,A1o),e(G,y1o),e(G,xu),e(xu,zne),e(zne,L1o),e(xu,x1o),e(xu,zI),e(zI,$1o),e(xu,k1o),e(G,S1o),e(G,$u),e($u,Qne),e(Qne,R1o),e($u,B1o),e($u,QI),e(QI,P1o),e($u,I1o),e(G,q1o),e(G,ku),e(ku,Wne),e(Wne,N1o),e(ku,j1o),e(ku,WI),e(WI,D1o),e(ku,G1o),e(G,O1o),e(G,Su),e(Su,Hne),e(Hne,V1o),e(Su,X1o),e(Su,HI),e(HI,z1o),e(Su,Q1o),e(G,W1o),e(G,Ru),e(Ru,Une),e(Une,H1o),e(Ru,U1o),e(Ru,UI),e(UI,J1o),e(Ru,Y1o),e(G,K1o),e(G,Bu),e(Bu,Jne),e(Jne,Z1o),e(Bu,ebo),e(Bu,JI),e(JI,obo),e(Bu,rbo),e(G,tbo),e(G,Pu),e(Pu,Yne),e(Yne,abo),e(Pu,nbo),e(Pu,YI),e(YI,sbo),e(Pu,lbo),e(G,ibo),e(G,Iu),e(Iu,Kne),e(Kne,dbo),e(Iu,cbo),e(Iu,KI),e(KI,fbo),e(Iu,mbo),e(G,gbo),e(G,qu),e(qu,Zne),e(Zne,hbo),e(qu,pbo),e(qu,ZI),e(ZI,ubo),e(qu,_bo),e(G,bbo),e(G,Nu),e(Nu,ese),e(ese,vbo),e(Nu,Fbo),e(Nu,eq),e(eq,Tbo),e(Nu,Mbo),e(G,Ebo),e(G,ju),e(ju,ose),e(ose,Cbo),e(ju,wbo),e(ju,oq),e(oq,Abo),e(ju,ybo),e(G,Lbo),e(G,Du),e(Du,rse),e(rse,xbo),e(Du,$bo),e(Du,rq),e(rq,kbo),e(Du,Sbo),e(G,Rbo),e(G,Gu),e(Gu,tse),e(tse,Bbo),e(Gu,Pbo),e(Gu,tq),e(tq,Ibo),e(Gu,qbo),e(G,Nbo),e(G,Ou),e(Ou,ase),e(ase,jbo),e(Ou,Dbo),e(Ou,aq),e(aq,Gbo),e(Ou,Obo),e(G,Vbo),e(G,Vu),e(Vu,nse),e(nse,Xbo),e(Vu,zbo),e(Vu,nq),e(nq,Qbo),e(Vu,Wbo),e(G,Hbo),e(G,Xu),e(Xu,sse),e(sse,Ubo),e(Xu,Jbo),e(Xu,sq),e(sq,Ybo),e(Xu,Kbo),e(G,Zbo),e(G,zu),e(zu,lse),e(lse,e4o),e(zu,o4o),e(zu,lq),e(lq,r4o),e(zu,t4o),e(G,a4o),e(G,Qu),e(Qu,ise),e(ise,n4o),e(Qu,s4o),e(Qu,iq),e(iq,l4o),e(Qu,i4o),e(G,d4o),e(G,Wu),e(Wu,dse),e(dse,c4o),e(Wu,f4o),e(Wu,dq),e(dq,m4o),e(Wu,g4o),e(G,h4o),e(G,Hu),e(Hu,cse),e(cse,p4o),e(Hu,u4o),e(Hu,cq),e(cq,_4o),e(Hu,b4o),e(G,v4o),e(G,Uu),e(Uu,fse),e(fse,F4o),e(Uu,T4o),e(Uu,fq),e(fq,M4o),e(Uu,E4o),e(G,C4o),e(G,Ju),e(Ju,mse),e(mse,w4o),e(Ju,A4o),e(Ju,mq),e(mq,y4o),e(Ju,L4o),e(G,x4o),e(G,Yu),e(Yu,gse),e(gse,$4o),e(Yu,k4o),e(Yu,gq),e(gq,S4o),e(Yu,R4o),e(G,B4o),e(G,Ku),e(Ku,hse),e(hse,P4o),e(Ku,I4o),e(Ku,hq),e(hq,q4o),e(Ku,N4o),e(G,j4o),e(G,Zu),e(Zu,pse),e(pse,D4o),e(Zu,G4o),e(Zu,pq),e(pq,O4o),e(Zu,V4o),e(G,X4o),e(G,e_),e(e_,use),e(use,z4o),e(e_,Q4o),e(e_,uq),e(uq,W4o),e(e_,H4o),e(G,U4o),e(G,o_),e(o_,_se),e(_se,J4o),e(o_,Y4o),e(o_,_q),e(_q,K4o),e(o_,Z4o),e(G,evo),e(G,r_),e(r_,bse),e(bse,ovo),e(r_,rvo),e(r_,bq),e(bq,tvo),e(r_,avo),e(G,nvo),e(G,t_),e(t_,vse),e(vse,svo),e(t_,lvo),e(t_,vq),e(vq,ivo),e(t_,dvo),e(G,cvo),e(G,a_),e(a_,Fse),e(Fse,fvo),e(a_,mvo),e(a_,Fq),e(Fq,gvo),e(a_,hvo),e(G,pvo),e(G,n_),e(n_,Tse),e(Tse,uvo),e(n_,_vo),e(n_,Tq),e(Tq,bvo),e(n_,vvo),e(He,Fvo),e(He,s_),e(s_,Tvo),e(s_,Mse),e(Mse,Mvo),e(s_,Evo),e(s_,Ese),e(Ese,Cvo),e(He,wvo),M(l_,He,null),b(f,rBe,_),b(f,Ti,_),e(Ti,i_),e(i_,Cse),M(KA,Cse,null),e(Ti,Avo),e(Ti,wse),e(wse,yvo),b(f,tBe,_),b(f,Lo,_),M(ZA,Lo,null),e(Lo,Lvo),e(Lo,Mi),e(Mi,xvo),e(Mi,Mq),e(Mq,$vo),e(Mi,kvo),e(Mi,Eq),e(Eq,Svo),e(Mi,Rvo),e(Lo,Bvo),e(Lo,ey),e(ey,Pvo),e(ey,Ase),e(Ase,Ivo),e(ey,qvo),e(Lo,Nvo),e(Lo,et),M(oy,et,null),e(et,jvo),e(et,yse),e(yse,Dvo),e(et,Gvo),e(et,Ei),e(Ei,Ovo),e(Ei,Lse),e(Lse,Vvo),e(Ei,Xvo),e(Ei,Cq),e(Cq,zvo),e(Ei,Qvo),e(et,Wvo),M(d_,et,null),e(Lo,Hvo),e(Lo,Ue),M(ry,Ue,null),e(Ue,Uvo),e(Ue,xse),e(xse,Jvo),e(Ue,Yvo),e(Ue,Ca),e(Ca,Kvo),e(Ca,$se),e($se,Zvo),e(Ca,eFo),e(Ca,kse),e(kse,oFo),e(Ca,rFo),e(Ca,Sse),e(Sse,tFo),e(Ca,aFo),e(Ue,nFo),e(Ue,z),e(z,c_),e(c_,Rse),e(Rse,sFo),e(c_,lFo),e(c_,wq),e(wq,iFo),e(c_,dFo),e(z,cFo),e(z,f_),e(f_,Bse),e(Bse,fFo),e(f_,mFo),e(f_,Aq),e(Aq,gFo),e(f_,hFo),e(z,pFo),e(z,m_),e(m_,Pse),e(Pse,uFo),e(m_,_Fo),e(m_,yq),e(yq,bFo),e(m_,vFo),e(z,FFo),e(z,g_),e(g_,Ise),e(Ise,TFo),e(g_,MFo),e(g_,Lq),e(Lq,EFo),e(g_,CFo),e(z,wFo),e(z,h_),e(h_,qse),e(qse,AFo),e(h_,yFo),e(h_,xq),e(xq,LFo),e(h_,xFo),e(z,$Fo),e(z,p_),e(p_,Nse),e(Nse,kFo),e(p_,SFo),e(p_,$q),e($q,RFo),e(p_,BFo),e(z,PFo),e(z,u_),e(u_,jse),e(jse,IFo),e(u_,qFo),e(u_,kq),e(kq,NFo),e(u_,jFo),e(z,DFo),e(z,__),e(__,Dse),e(Dse,GFo),e(__,OFo),e(__,Sq),e(Sq,VFo),e(__,XFo),e(z,zFo),e(z,b_),e(b_,Gse),e(Gse,QFo),e(b_,WFo),e(b_,Rq),e(Rq,HFo),e(b_,UFo),e(z,JFo),e(z,v_),e(v_,Ose),e(Ose,YFo),e(v_,KFo),e(v_,Bq),e(Bq,ZFo),e(v_,e0o),e(z,o0o),e(z,F_),e(F_,Vse),e(Vse,r0o),e(F_,t0o),e(F_,Pq),e(Pq,a0o),e(F_,n0o),e(z,s0o),e(z,T_),e(T_,Xse),e(Xse,l0o),e(T_,i0o),e(T_,Iq),e(Iq,d0o),e(T_,c0o),e(z,f0o),e(z,M_),e(M_,zse),e(zse,m0o),e(M_,g0o),e(M_,qq),e(qq,h0o),e(M_,p0o),e(z,u0o),e(z,E_),e(E_,Qse),e(Qse,_0o),e(E_,b0o),e(E_,Nq),e(Nq,v0o),e(E_,F0o),e(z,T0o),e(z,C_),e(C_,Wse),e(Wse,M0o),e(C_,E0o),e(C_,jq),e(jq,C0o),e(C_,w0o),e(z,A0o),e(z,w_),e(w_,Hse),e(Hse,y0o),e(w_,L0o),e(w_,Dq),e(Dq,x0o),e(w_,$0o),e(z,k0o),e(z,A_),e(A_,Use),e(Use,S0o),e(A_,R0o),e(A_,Gq),e(Gq,B0o),e(A_,P0o),e(z,I0o),e(z,y_),e(y_,Jse),e(Jse,q0o),e(y_,N0o),e(y_,Oq),e(Oq,j0o),e(y_,D0o),e(z,G0o),e(z,L_),e(L_,Yse),e(Yse,O0o),e(L_,V0o),e(L_,Vq),e(Vq,X0o),e(L_,z0o),e(z,Q0o),e(z,x_),e(x_,Kse),e(Kse,W0o),e(x_,H0o),e(x_,Xq),e(Xq,U0o),e(x_,J0o),e(z,Y0o),e(z,$_),e($_,Zse),e(Zse,K0o),e($_,Z0o),e($_,zq),e(zq,e6o),e($_,o6o),e(z,r6o),e(z,k_),e(k_,ele),e(ele,t6o),e(k_,a6o),e(k_,Qq),e(Qq,n6o),e(k_,s6o),e(z,l6o),e(z,S_),e(S_,ole),e(ole,i6o),e(S_,d6o),e(S_,Wq),e(Wq,c6o),e(S_,f6o),e(z,m6o),e(z,R_),e(R_,rle),e(rle,g6o),e(R_,h6o),e(R_,Hq),e(Hq,p6o),e(R_,u6o),e(z,_6o),e(z,B_),e(B_,tle),e(tle,b6o),e(B_,v6o),e(B_,Uq),e(Uq,F6o),e(B_,T6o),e(z,M6o),e(z,P_),e(P_,ale),e(ale,E6o),e(P_,C6o),e(P_,Jq),e(Jq,w6o),e(P_,A6o),e(z,y6o),e(z,I_),e(I_,nle),e(nle,L6o),e(I_,x6o),e(I_,Yq),e(Yq,$6o),e(I_,k6o),e(z,S6o),e(z,q_),e(q_,sle),e(sle,R6o),e(q_,B6o),e(q_,Kq),e(Kq,P6o),e(q_,I6o),e(z,q6o),e(z,N_),e(N_,lle),e(lle,N6o),e(N_,j6o),e(N_,Zq),e(Zq,D6o),e(N_,G6o),e(z,O6o),e(z,j_),e(j_,ile),e(ile,V6o),e(j_,X6o),e(j_,eN),e(eN,z6o),e(j_,Q6o),e(z,W6o),e(z,D_),e(D_,dle),e(dle,H6o),e(D_,U6o),e(D_,oN),e(oN,J6o),e(D_,Y6o),e(z,K6o),e(z,G_),e(G_,cle),e(cle,Z6o),e(G_,eTo),e(G_,rN),e(rN,oTo),e(G_,rTo),e(z,tTo),e(z,O_),e(O_,fle),e(fle,aTo),e(O_,nTo),e(O_,tN),e(tN,sTo),e(O_,lTo),e(z,iTo),e(z,V_),e(V_,mle),e(mle,dTo),e(V_,cTo),e(V_,aN),e(aN,fTo),e(V_,mTo),e(z,gTo),e(z,X_),e(X_,gle),e(gle,hTo),e(X_,pTo),e(X_,nN),e(nN,uTo),e(X_,_To),e(Ue,bTo),e(Ue,z_),e(z_,vTo),e(z_,hle),e(hle,FTo),e(z_,TTo),e(z_,ple),e(ple,MTo),e(Ue,ETo),M(Q_,Ue,null),b(f,aBe,_),b(f,Ci,_),e(Ci,W_),e(W_,ule),M(ty,ule,null),e(Ci,CTo),e(Ci,_le),e(_le,wTo),b(f,nBe,_),b(f,xo,_),M(ay,xo,null),e(xo,ATo),e(xo,wi),e(wi,yTo),e(wi,sN),e(sN,LTo),e(wi,xTo),e(wi,lN),e(lN,$To),e(wi,kTo),e(xo,STo),e(xo,ny),e(ny,RTo),e(ny,ble),e(ble,BTo),e(ny,PTo),e(xo,ITo),e(xo,ot),M(sy,ot,null),e(ot,qTo),e(ot,vle),e(vle,NTo),e(ot,jTo),e(ot,Ai),e(Ai,DTo),e(Ai,Fle),e(Fle,GTo),e(Ai,OTo),e(Ai,iN),e(iN,VTo),e(Ai,XTo),e(ot,zTo),M(H_,ot,null),e(xo,QTo),e(xo,Je),M(ly,Je,null),e(Je,WTo),e(Je,Tle),e(Tle,HTo),e(Je,UTo),e(Je,wa),e(wa,JTo),e(wa,Mle),e(Mle,YTo),e(wa,KTo),e(wa,Ele),e(Ele,ZTo),e(wa,eMo),e(wa,Cle),e(Cle,oMo),e(wa,rMo),e(Je,tMo),e(Je,Q),e(Q,U_),e(U_,wle),e(wle,aMo),e(U_,nMo),e(U_,dN),e(dN,sMo),e(U_,lMo),e(Q,iMo),e(Q,J_),e(J_,Ale),e(Ale,dMo),e(J_,cMo),e(J_,cN),e(cN,fMo),e(J_,mMo),e(Q,gMo),e(Q,Y_),e(Y_,yle),e(yle,hMo),e(Y_,pMo),e(Y_,fN),e(fN,uMo),e(Y_,_Mo),e(Q,bMo),e(Q,K_),e(K_,Lle),e(Lle,vMo),e(K_,FMo),e(K_,mN),e(mN,TMo),e(K_,MMo),e(Q,EMo),e(Q,Z_),e(Z_,xle),e(xle,CMo),e(Z_,wMo),e(Z_,gN),e(gN,AMo),e(Z_,yMo),e(Q,LMo),e(Q,e2),e(e2,$le),e($le,xMo),e(e2,$Mo),e(e2,hN),e(hN,kMo),e(e2,SMo),e(Q,RMo),e(Q,o2),e(o2,kle),e(kle,BMo),e(o2,PMo),e(o2,pN),e(pN,IMo),e(o2,qMo),e(Q,NMo),e(Q,r2),e(r2,Sle),e(Sle,jMo),e(r2,DMo),e(r2,uN),e(uN,GMo),e(r2,OMo),e(Q,VMo),e(Q,t2),e(t2,Rle),e(Rle,XMo),e(t2,zMo),e(t2,_N),e(_N,QMo),e(t2,WMo),e(Q,HMo),e(Q,a2),e(a2,Ble),e(Ble,UMo),e(a2,JMo),e(a2,bN),e(bN,YMo),e(a2,KMo),e(Q,ZMo),e(Q,n2),e(n2,Ple),e(Ple,eEo),e(n2,oEo),e(n2,vN),e(vN,rEo),e(n2,tEo),e(Q,aEo),e(Q,s2),e(s2,Ile),e(Ile,nEo),e(s2,sEo),e(s2,FN),e(FN,lEo),e(s2,iEo),e(Q,dEo),e(Q,l2),e(l2,qle),e(qle,cEo),e(l2,fEo),e(l2,TN),e(TN,mEo),e(l2,gEo),e(Q,hEo),e(Q,i2),e(i2,Nle),e(Nle,pEo),e(i2,uEo),e(i2,MN),e(MN,_Eo),e(i2,bEo),e(Q,vEo),e(Q,d2),e(d2,jle),e(jle,FEo),e(d2,TEo),e(d2,EN),e(EN,MEo),e(d2,EEo),e(Q,CEo),e(Q,c2),e(c2,Dle),e(Dle,wEo),e(c2,AEo),e(c2,CN),e(CN,yEo),e(c2,LEo),e(Q,xEo),e(Q,f2),e(f2,Gle),e(Gle,$Eo),e(f2,kEo),e(f2,wN),e(wN,SEo),e(f2,REo),e(Q,BEo),e(Q,m2),e(m2,Ole),e(Ole,PEo),e(m2,IEo),e(m2,AN),e(AN,qEo),e(m2,NEo),e(Q,jEo),e(Q,g2),e(g2,Vle),e(Vle,DEo),e(g2,GEo),e(g2,yN),e(yN,OEo),e(g2,VEo),e(Q,XEo),e(Q,h2),e(h2,Xle),e(Xle,zEo),e(h2,QEo),e(h2,LN),e(LN,WEo),e(h2,HEo),e(Q,UEo),e(Q,p2),e(p2,zle),e(zle,JEo),e(p2,YEo),e(p2,xN),e(xN,KEo),e(p2,ZEo),e(Q,e5o),e(Q,u2),e(u2,Qle),e(Qle,o5o),e(u2,r5o),e(u2,$N),e($N,t5o),e(u2,a5o),e(Q,n5o),e(Q,_2),e(_2,Wle),e(Wle,s5o),e(_2,l5o),e(_2,kN),e(kN,i5o),e(_2,d5o),e(Q,c5o),e(Q,b2),e(b2,Hle),e(Hle,f5o),e(b2,m5o),e(b2,SN),e(SN,g5o),e(b2,h5o),e(Q,p5o),e(Q,v2),e(v2,Ule),e(Ule,u5o),e(v2,_5o),e(v2,RN),e(RN,b5o),e(v2,v5o),e(Q,F5o),e(Q,F2),e(F2,Jle),e(Jle,T5o),e(F2,M5o),e(F2,BN),e(BN,E5o),e(F2,C5o),e(Q,w5o),e(Q,T2),e(T2,Yle),e(Yle,A5o),e(T2,y5o),e(T2,PN),e(PN,L5o),e(T2,x5o),e(Q,$5o),e(Q,M2),e(M2,Kle),e(Kle,k5o),e(M2,S5o),e(M2,IN),e(IN,R5o),e(M2,B5o),e(Q,P5o),e(Q,E2),e(E2,Zle),e(Zle,I5o),e(E2,q5o),e(E2,qN),e(qN,N5o),e(E2,j5o),e(Q,D5o),e(Q,C2),e(C2,eie),e(eie,G5o),e(C2,O5o),e(C2,NN),e(NN,V5o),e(C2,X5o),e(Q,z5o),e(Q,w2),e(w2,oie),e(oie,Q5o),e(w2,W5o),e(w2,rie),e(rie,H5o),e(w2,U5o),e(Q,J5o),e(Q,A2),e(A2,tie),e(tie,Y5o),e(A2,K5o),e(A2,jN),e(jN,Z5o),e(A2,eCo),e(Q,oCo),e(Q,y2),e(y2,aie),e(aie,rCo),e(y2,tCo),e(y2,DN),e(DN,aCo),e(y2,nCo),e(Q,sCo),e(Q,L2),e(L2,nie),e(nie,lCo),e(L2,iCo),e(L2,GN),e(GN,dCo),e(L2,cCo),e(Q,fCo),e(Q,x2),e(x2,sie),e(sie,mCo),e(x2,gCo),e(x2,ON),e(ON,hCo),e(x2,pCo),e(Je,uCo),e(Je,$2),e($2,_Co),e($2,lie),e(lie,bCo),e($2,vCo),e($2,iie),e(iie,FCo),e(Je,TCo),M(k2,Je,null),b(f,sBe,_),b(f,yi,_),e(yi,S2),e(S2,die),M(iy,die,null),e(yi,MCo),e(yi,cie),e(cie,ECo),b(f,lBe,_),b(f,$o,_),M(dy,$o,null),e($o,CCo),e($o,Li),e(Li,wCo),e(Li,VN),e(VN,ACo),e(Li,yCo),e(Li,XN),e(XN,LCo),e(Li,xCo),e($o,$Co),e($o,cy),e(cy,kCo),e(cy,fie),e(fie,SCo),e(cy,RCo),e($o,BCo),e($o,rt),M(fy,rt,null),e(rt,PCo),e(rt,mie),e(mie,ICo),e(rt,qCo),e(rt,xi),e(xi,NCo),e(xi,gie),e(gie,jCo),e(xi,DCo),e(xi,zN),e(zN,GCo),e(xi,OCo),e(rt,VCo),M(R2,rt,null),e($o,XCo),e($o,Ye),M(my,Ye,null),e(Ye,zCo),e(Ye,hie),e(hie,QCo),e(Ye,WCo),e(Ye,Aa),e(Aa,HCo),e(Aa,pie),e(pie,UCo),e(Aa,JCo),e(Aa,uie),e(uie,YCo),e(Aa,KCo),e(Aa,_ie),e(_ie,ZCo),e(Aa,e3o),e(Ye,o3o),e(Ye,he),e(he,B2),e(B2,bie),e(bie,r3o),e(B2,t3o),e(B2,QN),e(QN,a3o),e(B2,n3o),e(he,s3o),e(he,P2),e(P2,vie),e(vie,l3o),e(P2,i3o),e(P2,WN),e(WN,d3o),e(P2,c3o),e(he,f3o),e(he,I2),e(I2,Fie),e(Fie,m3o),e(I2,g3o),e(I2,HN),e(HN,h3o),e(I2,p3o),e(he,u3o),e(he,q2),e(q2,Tie),e(Tie,_3o),e(q2,b3o),e(q2,UN),e(UN,v3o),e(q2,F3o),e(he,T3o),e(he,N2),e(N2,Mie),e(Mie,M3o),e(N2,E3o),e(N2,JN),e(JN,C3o),e(N2,w3o),e(he,A3o),e(he,j2),e(j2,Eie),e(Eie,y3o),e(j2,L3o),e(j2,YN),e(YN,x3o),e(j2,$3o),e(he,k3o),e(he,D2),e(D2,Cie),e(Cie,S3o),e(D2,R3o),e(D2,KN),e(KN,B3o),e(D2,P3o),e(he,I3o),e(he,G2),e(G2,wie),e(wie,q3o),e(G2,N3o),e(G2,ZN),e(ZN,j3o),e(G2,D3o),e(he,G3o),e(he,O2),e(O2,Aie),e(Aie,O3o),e(O2,V3o),e(O2,ej),e(ej,X3o),e(O2,z3o),e(he,Q3o),e(he,V2),e(V2,yie),e(yie,W3o),e(V2,H3o),e(V2,oj),e(oj,U3o),e(V2,J3o),e(he,Y3o),e(he,X2),e(X2,Lie),e(Lie,K3o),e(X2,Z3o),e(X2,rj),e(rj,ewo),e(X2,owo),e(he,rwo),e(he,z2),e(z2,xie),e(xie,two),e(z2,awo),e(z2,tj),e(tj,nwo),e(z2,swo),e(he,lwo),e(he,Q2),e(Q2,$ie),e($ie,iwo),e(Q2,dwo),e(Q2,aj),e(aj,cwo),e(Q2,fwo),e(he,mwo),e(he,W2),e(W2,kie),e(kie,gwo),e(W2,hwo),e(W2,nj),e(nj,pwo),e(W2,uwo),e(he,_wo),e(he,H2),e(H2,Sie),e(Sie,bwo),e(H2,vwo),e(H2,sj),e(sj,Fwo),e(H2,Two),e(he,Mwo),e(he,U2),e(U2,Rie),e(Rie,Ewo),e(U2,Cwo),e(U2,lj),e(lj,wwo),e(U2,Awo),e(he,ywo),e(he,J2),e(J2,Bie),e(Bie,Lwo),e(J2,xwo),e(J2,ij),e(ij,$wo),e(J2,kwo),e(Ye,Swo),e(Ye,Y2),e(Y2,Rwo),e(Y2,Pie),e(Pie,Bwo),e(Y2,Pwo),e(Y2,Iie),e(Iie,Iwo),e(Ye,qwo),M(K2,Ye,null),b(f,iBe,_),b(f,$i,_),e($i,Z2),e(Z2,qie),M(gy,qie,null),e($i,Nwo),e($i,Nie),e(Nie,jwo),b(f,dBe,_),b(f,ko,_),M(hy,ko,null),e(ko,Dwo),e(ko,ki),e(ki,Gwo),e(ki,dj),e(dj,Owo),e(ki,Vwo),e(ki,cj),e(cj,Xwo),e(ki,zwo),e(ko,Qwo),e(ko,py),e(py,Wwo),e(py,jie),e(jie,Hwo),e(py,Uwo),e(ko,Jwo),e(ko,tt),M(uy,tt,null),e(tt,Ywo),e(tt,Die),e(Die,Kwo),e(tt,Zwo),e(tt,Si),e(Si,eAo),e(Si,Gie),e(Gie,oAo),e(Si,rAo),e(Si,fj),e(fj,tAo),e(Si,aAo),e(tt,nAo),M(e1,tt,null),e(ko,sAo),e(ko,Ke),M(_y,Ke,null),e(Ke,lAo),e(Ke,Oie),e(Oie,iAo),e(Ke,dAo),e(Ke,ya),e(ya,cAo),e(ya,Vie),e(Vie,fAo),e(ya,mAo),e(ya,Xie),e(Xie,gAo),e(ya,hAo),e(ya,zie),e(zie,pAo),e(ya,uAo),e(Ke,_Ao),e(Ke,q),e(q,o1),e(o1,Qie),e(Qie,bAo),e(o1,vAo),e(o1,mj),e(mj,FAo),e(o1,TAo),e(q,MAo),e(q,r1),e(r1,Wie),e(Wie,EAo),e(r1,CAo),e(r1,gj),e(gj,wAo),e(r1,AAo),e(q,yAo),e(q,t1),e(t1,Hie),e(Hie,LAo),e(t1,xAo),e(t1,hj),e(hj,$Ao),e(t1,kAo),e(q,SAo),e(q,a1),e(a1,Uie),e(Uie,RAo),e(a1,BAo),e(a1,pj),e(pj,PAo),e(a1,IAo),e(q,qAo),e(q,n1),e(n1,Jie),e(Jie,NAo),e(n1,jAo),e(n1,uj),e(uj,DAo),e(n1,GAo),e(q,OAo),e(q,s1),e(s1,Yie),e(Yie,VAo),e(s1,XAo),e(s1,_j),e(_j,zAo),e(s1,QAo),e(q,WAo),e(q,l1),e(l1,Kie),e(Kie,HAo),e(l1,UAo),e(l1,bj),e(bj,JAo),e(l1,YAo),e(q,KAo),e(q,i1),e(i1,Zie),e(Zie,ZAo),e(i1,eyo),e(i1,vj),e(vj,oyo),e(i1,ryo),e(q,tyo),e(q,d1),e(d1,ede),e(ede,ayo),e(d1,nyo),e(d1,Fj),e(Fj,syo),e(d1,lyo),e(q,iyo),e(q,c1),e(c1,ode),e(ode,dyo),e(c1,cyo),e(c1,Tj),e(Tj,fyo),e(c1,myo),e(q,gyo),e(q,f1),e(f1,rde),e(rde,hyo),e(f1,pyo),e(f1,Mj),e(Mj,uyo),e(f1,_yo),e(q,byo),e(q,m1),e(m1,tde),e(tde,vyo),e(m1,Fyo),e(m1,Ej),e(Ej,Tyo),e(m1,Myo),e(q,Eyo),e(q,g1),e(g1,ade),e(ade,Cyo),e(g1,wyo),e(g1,Cj),e(Cj,Ayo),e(g1,yyo),e(q,Lyo),e(q,h1),e(h1,nde),e(nde,xyo),e(h1,$yo),e(h1,wj),e(wj,kyo),e(h1,Syo),e(q,Ryo),e(q,p1),e(p1,sde),e(sde,Byo),e(p1,Pyo),e(p1,Aj),e(Aj,Iyo),e(p1,qyo),e(q,Nyo),e(q,u1),e(u1,lde),e(lde,jyo),e(u1,Dyo),e(u1,yj),e(yj,Gyo),e(u1,Oyo),e(q,Vyo),e(q,_1),e(_1,ide),e(ide,Xyo),e(_1,zyo),e(_1,Lj),e(Lj,Qyo),e(_1,Wyo),e(q,Hyo),e(q,b1),e(b1,dde),e(dde,Uyo),e(b1,Jyo),e(b1,xj),e(xj,Yyo),e(b1,Kyo),e(q,Zyo),e(q,v1),e(v1,cde),e(cde,eLo),e(v1,oLo),e(v1,$j),e($j,rLo),e(v1,tLo),e(q,aLo),e(q,F1),e(F1,fde),e(fde,nLo),e(F1,sLo),e(F1,kj),e(kj,lLo),e(F1,iLo),e(q,dLo),e(q,T1),e(T1,mde),e(mde,cLo),e(T1,fLo),e(T1,Sj),e(Sj,mLo),e(T1,gLo),e(q,hLo),e(q,M1),e(M1,gde),e(gde,pLo),e(M1,uLo),e(M1,Rj),e(Rj,_Lo),e(M1,bLo),e(q,vLo),e(q,E1),e(E1,hde),e(hde,FLo),e(E1,TLo),e(E1,Bj),e(Bj,MLo),e(E1,ELo),e(q,CLo),e(q,C1),e(C1,pde),e(pde,wLo),e(C1,ALo),e(C1,Pj),e(Pj,yLo),e(C1,LLo),e(q,xLo),e(q,w1),e(w1,ude),e(ude,$Lo),e(w1,kLo),e(w1,Ij),e(Ij,SLo),e(w1,RLo),e(q,BLo),e(q,A1),e(A1,_de),e(_de,PLo),e(A1,ILo),e(A1,qj),e(qj,qLo),e(A1,NLo),e(q,jLo),e(q,y1),e(y1,bde),e(bde,DLo),e(y1,GLo),e(y1,Nj),e(Nj,OLo),e(y1,VLo),e(q,XLo),e(q,L1),e(L1,vde),e(vde,zLo),e(L1,QLo),e(L1,jj),e(jj,WLo),e(L1,HLo),e(q,ULo),e(q,x1),e(x1,Fde),e(Fde,JLo),e(x1,YLo),e(x1,Dj),e(Dj,KLo),e(x1,ZLo),e(q,e8o),e(q,$1),e($1,Tde),e(Tde,o8o),e($1,r8o),e($1,Gj),e(Gj,t8o),e($1,a8o),e(q,n8o),e(q,k1),e(k1,Mde),e(Mde,s8o),e(k1,l8o),e(k1,Oj),e(Oj,i8o),e(k1,d8o),e(q,c8o),e(q,S1),e(S1,Ede),e(Ede,f8o),e(S1,m8o),e(S1,Vj),e(Vj,g8o),e(S1,h8o),e(q,p8o),e(q,R1),e(R1,Cde),e(Cde,u8o),e(R1,_8o),e(R1,Xj),e(Xj,b8o),e(R1,v8o),e(q,F8o),e(q,B1),e(B1,wde),e(wde,T8o),e(B1,M8o),e(B1,zj),e(zj,E8o),e(B1,C8o),e(q,w8o),e(q,P1),e(P1,Ade),e(Ade,A8o),e(P1,y8o),e(P1,Qj),e(Qj,L8o),e(P1,x8o),e(q,$8o),e(q,I1),e(I1,yde),e(yde,k8o),e(I1,S8o),e(I1,Wj),e(Wj,R8o),e(I1,B8o),e(q,P8o),e(q,q1),e(q1,Lde),e(Lde,I8o),e(q1,q8o),e(q1,Hj),e(Hj,N8o),e(q1,j8o),e(q,D8o),e(q,N1),e(N1,xde),e(xde,G8o),e(N1,O8o),e(N1,Uj),e(Uj,V8o),e(N1,X8o),e(q,z8o),e(q,j1),e(j1,$de),e($de,Q8o),e(j1,W8o),e(j1,Jj),e(Jj,H8o),e(j1,U8o),e(q,J8o),e(q,D1),e(D1,kde),e(kde,Y8o),e(D1,K8o),e(D1,Yj),e(Yj,Z8o),e(D1,e7o),e(q,o7o),e(q,G1),e(G1,Sde),e(Sde,r7o),e(G1,t7o),e(G1,Kj),e(Kj,a7o),e(G1,n7o),e(q,s7o),e(q,O1),e(O1,Rde),e(Rde,l7o),e(O1,i7o),e(O1,Zj),e(Zj,d7o),e(O1,c7o),e(q,f7o),e(q,V1),e(V1,Bde),e(Bde,m7o),e(V1,g7o),e(V1,eD),e(eD,h7o),e(V1,p7o),e(q,u7o),e(q,X1),e(X1,Pde),e(Pde,_7o),e(X1,b7o),e(X1,oD),e(oD,v7o),e(X1,F7o),e(q,T7o),e(q,z1),e(z1,Ide),e(Ide,M7o),e(z1,E7o),e(z1,rD),e(rD,C7o),e(z1,w7o),e(q,A7o),e(q,Q1),e(Q1,qde),e(qde,y7o),e(Q1,L7o),e(Q1,tD),e(tD,x7o),e(Q1,$7o),e(q,k7o),e(q,W1),e(W1,Nde),e(Nde,S7o),e(W1,R7o),e(W1,aD),e(aD,B7o),e(W1,P7o),e(Ke,I7o),e(Ke,H1),e(H1,q7o),e(H1,jde),e(jde,N7o),e(H1,j7o),e(H1,Dde),e(Dde,D7o),e(Ke,G7o),M(U1,Ke,null),b(f,cBe,_),b(f,Ri,_),e(Ri,J1),e(J1,Gde),M(by,Gde,null),e(Ri,O7o),e(Ri,Ode),e(Ode,V7o),b(f,fBe,_),b(f,So,_),M(vy,So,null),e(So,X7o),e(So,Bi),e(Bi,z7o),e(Bi,nD),e(nD,Q7o),e(Bi,W7o),e(Bi,sD),e(sD,H7o),e(Bi,U7o),e(So,J7o),e(So,Fy),e(Fy,Y7o),e(Fy,Vde),e(Vde,K7o),e(Fy,Z7o),e(So,exo),e(So,at),M(Ty,at,null),e(at,oxo),e(at,Xde),e(Xde,rxo),e(at,txo),e(at,Pi),e(Pi,axo),e(Pi,zde),e(zde,nxo),e(Pi,sxo),e(Pi,lD),e(lD,lxo),e(Pi,ixo),e(at,dxo),M(Y1,at,null),e(So,cxo),e(So,Ze),M(My,Ze,null),e(Ze,fxo),e(Ze,Qde),e(Qde,mxo),e(Ze,gxo),e(Ze,La),e(La,hxo),e(La,Wde),e(Wde,pxo),e(La,uxo),e(La,Hde),e(Hde,_xo),e(La,bxo),e(La,Ude),e(Ude,vxo),e(La,Fxo),e(Ze,Txo),e(Ze,Y),e(Y,K1),e(K1,Jde),e(Jde,Mxo),e(K1,Exo),e(K1,iD),e(iD,Cxo),e(K1,wxo),e(Y,Axo),e(Y,Z1),e(Z1,Yde),e(Yde,yxo),e(Z1,Lxo),e(Z1,dD),e(dD,xxo),e(Z1,$xo),e(Y,kxo),e(Y,eb),e(eb,Kde),e(Kde,Sxo),e(eb,Rxo),e(eb,cD),e(cD,Bxo),e(eb,Pxo),e(Y,Ixo),e(Y,ob),e(ob,Zde),e(Zde,qxo),e(ob,Nxo),e(ob,fD),e(fD,jxo),e(ob,Dxo),e(Y,Gxo),e(Y,rb),e(rb,ece),e(ece,Oxo),e(rb,Vxo),e(rb,mD),e(mD,Xxo),e(rb,zxo),e(Y,Qxo),e(Y,tb),e(tb,oce),e(oce,Wxo),e(tb,Hxo),e(tb,gD),e(gD,Uxo),e(tb,Jxo),e(Y,Yxo),e(Y,ab),e(ab,rce),e(rce,Kxo),e(ab,Zxo),e(ab,hD),e(hD,e9o),e(ab,o9o),e(Y,r9o),e(Y,nb),e(nb,tce),e(tce,t9o),e(nb,a9o),e(nb,pD),e(pD,n9o),e(nb,s9o),e(Y,l9o),e(Y,sb),e(sb,ace),e(ace,i9o),e(sb,d9o),e(sb,uD),e(uD,c9o),e(sb,f9o),e(Y,m9o),e(Y,lb),e(lb,nce),e(nce,g9o),e(lb,h9o),e(lb,_D),e(_D,p9o),e(lb,u9o),e(Y,_9o),e(Y,ib),e(ib,sce),e(sce,b9o),e(ib,v9o),e(ib,bD),e(bD,F9o),e(ib,T9o),e(Y,M9o),e(Y,db),e(db,lce),e(lce,E9o),e(db,C9o),e(db,vD),e(vD,w9o),e(db,A9o),e(Y,y9o),e(Y,cb),e(cb,ice),e(ice,L9o),e(cb,x9o),e(cb,FD),e(FD,$9o),e(cb,k9o),e(Y,S9o),e(Y,fb),e(fb,dce),e(dce,R9o),e(fb,B9o),e(fb,TD),e(TD,P9o),e(fb,I9o),e(Y,q9o),e(Y,mb),e(mb,cce),e(cce,N9o),e(mb,j9o),e(mb,MD),e(MD,D9o),e(mb,G9o),e(Y,O9o),e(Y,gb),e(gb,fce),e(fce,V9o),e(gb,X9o),e(gb,ED),e(ED,z9o),e(gb,Q9o),e(Y,W9o),e(Y,hb),e(hb,mce),e(mce,H9o),e(hb,U9o),e(hb,CD),e(CD,J9o),e(hb,Y9o),e(Y,K9o),e(Y,pb),e(pb,gce),e(gce,Z9o),e(pb,e$o),e(pb,wD),e(wD,o$o),e(pb,r$o),e(Y,t$o),e(Y,ub),e(ub,hce),e(hce,a$o),e(ub,n$o),e(ub,AD),e(AD,s$o),e(ub,l$o),e(Y,i$o),e(Y,_b),e(_b,pce),e(pce,d$o),e(_b,c$o),e(_b,yD),e(yD,f$o),e(_b,m$o),e(Y,g$o),e(Y,bb),e(bb,uce),e(uce,h$o),e(bb,p$o),e(bb,LD),e(LD,u$o),e(bb,_$o),e(Y,b$o),e(Y,vb),e(vb,_ce),e(_ce,v$o),e(vb,F$o),e(vb,xD),e(xD,T$o),e(vb,M$o),e(Y,E$o),e(Y,Fb),e(Fb,bce),e(bce,C$o),e(Fb,w$o),e(Fb,$D),e($D,A$o),e(Fb,y$o),e(Y,L$o),e(Y,Tb),e(Tb,vce),e(vce,x$o),e(Tb,$$o),e(Tb,kD),e(kD,k$o),e(Tb,S$o),e(Y,R$o),e(Y,Mb),e(Mb,Fce),e(Fce,B$o),e(Mb,P$o),e(Mb,SD),e(SD,I$o),e(Mb,q$o),e(Y,N$o),e(Y,Eb),e(Eb,Tce),e(Tce,j$o),e(Eb,D$o),e(Eb,RD),e(RD,G$o),e(Eb,O$o),e(Y,V$o),e(Y,Cb),e(Cb,Mce),e(Mce,X$o),e(Cb,z$o),e(Cb,BD),e(BD,Q$o),e(Cb,W$o),e(Y,H$o),e(Y,wb),e(wb,Ece),e(Ece,U$o),e(wb,J$o),e(wb,PD),e(PD,Y$o),e(wb,K$o),e(Ze,Z$o),e(Ze,Ab),e(Ab,eko),e(Ab,Cce),e(Cce,oko),e(Ab,rko),e(Ab,wce),e(wce,tko),e(Ze,ako),M(yb,Ze,null),b(f,mBe,_),b(f,Ii,_),e(Ii,Lb),e(Lb,Ace),M(Ey,Ace,null),e(Ii,nko),e(Ii,yce),e(yce,sko),b(f,gBe,_),b(f,Ro,_),M(Cy,Ro,null),e(Ro,lko),e(Ro,qi),e(qi,iko),e(qi,ID),e(ID,dko),e(qi,cko),e(qi,qD),e(qD,fko),e(qi,mko),e(Ro,gko),e(Ro,wy),e(wy,hko),e(wy,Lce),e(Lce,pko),e(wy,uko),e(Ro,_ko),e(Ro,nt),M(Ay,nt,null),e(nt,bko),e(nt,xce),e(xce,vko),e(nt,Fko),e(nt,Ni),e(Ni,Tko),e(Ni,$ce),e($ce,Mko),e(Ni,Eko),e(Ni,ND),e(ND,Cko),e(Ni,wko),e(nt,Ako),M(xb,nt,null),e(Ro,yko),e(Ro,eo),M(yy,eo,null),e(eo,Lko),e(eo,kce),e(kce,xko),e(eo,$ko),e(eo,xa),e(xa,kko),e(xa,Sce),e(Sce,Sko),e(xa,Rko),e(xa,Rce),e(Rce,Bko),e(xa,Pko),e(xa,Bce),e(Bce,Iko),e(xa,qko),e(eo,Nko),e(eo,Wr),e(Wr,$b),e($b,Pce),e(Pce,jko),e($b,Dko),e($b,jD),e(jD,Gko),e($b,Oko),e(Wr,Vko),e(Wr,kb),e(kb,Ice),e(Ice,Xko),e(kb,zko),e(kb,DD),e(DD,Qko),e(kb,Wko),e(Wr,Hko),e(Wr,Sb),e(Sb,qce),e(qce,Uko),e(Sb,Jko),e(Sb,GD),e(GD,Yko),e(Sb,Kko),e(Wr,Zko),e(Wr,Rb),e(Rb,Nce),e(Nce,eSo),e(Rb,oSo),e(Rb,OD),e(OD,rSo),e(Rb,tSo),e(Wr,aSo),e(Wr,Bb),e(Bb,jce),e(jce,nSo),e(Bb,sSo),e(Bb,VD),e(VD,lSo),e(Bb,iSo),e(eo,dSo),e(eo,Pb),e(Pb,cSo),e(Pb,Dce),e(Dce,fSo),e(Pb,mSo),e(Pb,Gce),e(Gce,gSo),e(eo,hSo),M(Ib,eo,null),b(f,hBe,_),b(f,ji,_),e(ji,qb),e(qb,Oce),M(Ly,Oce,null),e(ji,pSo),e(ji,Vce),e(Vce,uSo),b(f,pBe,_),b(f,Bo,_),M(xy,Bo,null),e(Bo,_So),e(Bo,Di),e(Di,bSo),e(Di,XD),e(XD,vSo),e(Di,FSo),e(Di,zD),e(zD,TSo),e(Di,MSo),e(Bo,ESo),e(Bo,$y),e($y,CSo),e($y,Xce),e(Xce,wSo),e($y,ASo),e(Bo,ySo),e(Bo,st),M(ky,st,null),e(st,LSo),e(st,zce),e(zce,xSo),e(st,$So),e(st,Gi),e(Gi,kSo),e(Gi,Qce),e(Qce,SSo),e(Gi,RSo),e(Gi,QD),e(QD,BSo),e(Gi,PSo),e(st,ISo),M(Nb,st,null),e(Bo,qSo),e(Bo,oo),M(Sy,oo,null),e(oo,NSo),e(oo,Wce),e(Wce,jSo),e(oo,DSo),e(oo,$a),e($a,GSo),e($a,Hce),e(Hce,OSo),e($a,VSo),e($a,Uce),e(Uce,XSo),e($a,zSo),e($a,Jce),e(Jce,QSo),e($a,WSo),e(oo,HSo),e(oo,U),e(U,jb),e(jb,Yce),e(Yce,USo),e(jb,JSo),e(jb,WD),e(WD,YSo),e(jb,KSo),e(U,ZSo),e(U,Db),e(Db,Kce),e(Kce,eRo),e(Db,oRo),e(Db,HD),e(HD,rRo),e(Db,tRo),e(U,aRo),e(U,Gb),e(Gb,Zce),e(Zce,nRo),e(Gb,sRo),e(Gb,UD),e(UD,lRo),e(Gb,iRo),e(U,dRo),e(U,Ob),e(Ob,efe),e(efe,cRo),e(Ob,fRo),e(Ob,JD),e(JD,mRo),e(Ob,gRo),e(U,hRo),e(U,Vb),e(Vb,ofe),e(ofe,pRo),e(Vb,uRo),e(Vb,YD),e(YD,_Ro),e(Vb,bRo),e(U,vRo),e(U,Xb),e(Xb,rfe),e(rfe,FRo),e(Xb,TRo),e(Xb,KD),e(KD,MRo),e(Xb,ERo),e(U,CRo),e(U,zb),e(zb,tfe),e(tfe,wRo),e(zb,ARo),e(zb,ZD),e(ZD,yRo),e(zb,LRo),e(U,xRo),e(U,Qb),e(Qb,afe),e(afe,$Ro),e(Qb,kRo),e(Qb,eG),e(eG,SRo),e(Qb,RRo),e(U,BRo),e(U,Wb),e(Wb,nfe),e(nfe,PRo),e(Wb,IRo),e(Wb,oG),e(oG,qRo),e(Wb,NRo),e(U,jRo),e(U,Hb),e(Hb,sfe),e(sfe,DRo),e(Hb,GRo),e(Hb,rG),e(rG,ORo),e(Hb,VRo),e(U,XRo),e(U,Ub),e(Ub,lfe),e(lfe,zRo),e(Ub,QRo),e(Ub,tG),e(tG,WRo),e(Ub,HRo),e(U,URo),e(U,Jb),e(Jb,ife),e(ife,JRo),e(Jb,YRo),e(Jb,aG),e(aG,KRo),e(Jb,ZRo),e(U,eBo),e(U,Yb),e(Yb,dfe),e(dfe,oBo),e(Yb,rBo),e(Yb,nG),e(nG,tBo),e(Yb,aBo),e(U,nBo),e(U,Kb),e(Kb,cfe),e(cfe,sBo),e(Kb,lBo),e(Kb,sG),e(sG,iBo),e(Kb,dBo),e(U,cBo),e(U,Zb),e(Zb,ffe),e(ffe,fBo),e(Zb,mBo),e(Zb,lG),e(lG,gBo),e(Zb,hBo),e(U,pBo),e(U,e4),e(e4,mfe),e(mfe,uBo),e(e4,_Bo),e(e4,iG),e(iG,bBo),e(e4,vBo),e(U,FBo),e(U,o4),e(o4,gfe),e(gfe,TBo),e(o4,MBo),e(o4,dG),e(dG,EBo),e(o4,CBo),e(U,wBo),e(U,r4),e(r4,hfe),e(hfe,ABo),e(r4,yBo),e(r4,cG),e(cG,LBo),e(r4,xBo),e(U,$Bo),e(U,t4),e(t4,pfe),e(pfe,kBo),e(t4,SBo),e(t4,fG),e(fG,RBo),e(t4,BBo),e(U,PBo),e(U,a4),e(a4,ufe),e(ufe,IBo),e(a4,qBo),e(a4,mG),e(mG,NBo),e(a4,jBo),e(U,DBo),e(U,n4),e(n4,_fe),e(_fe,GBo),e(n4,OBo),e(n4,gG),e(gG,VBo),e(n4,XBo),e(U,zBo),e(U,s4),e(s4,bfe),e(bfe,QBo),e(s4,WBo),e(s4,hG),e(hG,HBo),e(s4,UBo),e(U,JBo),e(U,l4),e(l4,vfe),e(vfe,YBo),e(l4,KBo),e(l4,pG),e(pG,ZBo),e(l4,ePo),e(U,oPo),e(U,i4),e(i4,Ffe),e(Ffe,rPo),e(i4,tPo),e(i4,uG),e(uG,aPo),e(i4,nPo),e(U,sPo),e(U,d4),e(d4,Tfe),e(Tfe,lPo),e(d4,iPo),e(d4,_G),e(_G,dPo),e(d4,cPo),e(U,fPo),e(U,c4),e(c4,Mfe),e(Mfe,mPo),e(c4,gPo),e(c4,bG),e(bG,hPo),e(c4,pPo),e(U,uPo),e(U,f4),e(f4,Efe),e(Efe,_Po),e(f4,bPo),e(f4,vG),e(vG,vPo),e(f4,FPo),e(U,TPo),e(U,m4),e(m4,Cfe),e(Cfe,MPo),e(m4,EPo),e(m4,FG),e(FG,CPo),e(m4,wPo),e(U,APo),e(U,g4),e(g4,wfe),e(wfe,yPo),e(g4,LPo),e(g4,TG),e(TG,xPo),e(g4,$Po),e(U,kPo),e(U,h4),e(h4,Afe),e(Afe,SPo),e(h4,RPo),e(h4,MG),e(MG,BPo),e(h4,PPo),e(U,IPo),e(U,p4),e(p4,yfe),e(yfe,qPo),e(p4,NPo),e(p4,EG),e(EG,jPo),e(p4,DPo),e(U,GPo),e(U,u4),e(u4,Lfe),e(Lfe,OPo),e(u4,VPo),e(u4,CG),e(CG,XPo),e(u4,zPo),e(U,QPo),e(U,_4),e(_4,xfe),e(xfe,WPo),e(_4,HPo),e(_4,wG),e(wG,UPo),e(_4,JPo),e(oo,YPo),e(oo,b4),e(b4,KPo),e(b4,$fe),e($fe,ZPo),e(b4,eIo),e(b4,kfe),e(kfe,oIo),e(oo,rIo),M(v4,oo,null),b(f,uBe,_),b(f,Oi,_),e(Oi,F4),e(F4,Sfe),M(Ry,Sfe,null),e(Oi,tIo),e(Oi,Rfe),e(Rfe,aIo),b(f,_Be,_),b(f,Po,_),M(By,Po,null),e(Po,nIo),e(Po,Vi),e(Vi,sIo),e(Vi,AG),e(AG,lIo),e(Vi,iIo),e(Vi,yG),e(yG,dIo),e(Vi,cIo),e(Po,fIo),e(Po,Py),e(Py,mIo),e(Py,Bfe),e(Bfe,gIo),e(Py,hIo),e(Po,pIo),e(Po,lt),M(Iy,lt,null),e(lt,uIo),e(lt,Pfe),e(Pfe,_Io),e(lt,bIo),e(lt,Xi),e(Xi,vIo),e(Xi,Ife),e(Ife,FIo),e(Xi,TIo),e(Xi,LG),e(LG,MIo),e(Xi,EIo),e(lt,CIo),M(T4,lt,null),e(Po,wIo),e(Po,ro),M(qy,ro,null),e(ro,AIo),e(ro,qfe),e(qfe,yIo),e(ro,LIo),e(ro,ka),e(ka,xIo),e(ka,Nfe),e(Nfe,$Io),e(ka,kIo),e(ka,jfe),e(jfe,SIo),e(ka,RIo),e(ka,Dfe),e(Dfe,BIo),e(ka,PIo),e(ro,IIo),e(ro,O),e(O,M4),e(M4,Gfe),e(Gfe,qIo),e(M4,NIo),e(M4,xG),e(xG,jIo),e(M4,DIo),e(O,GIo),e(O,E4),e(E4,Ofe),e(Ofe,OIo),e(E4,VIo),e(E4,$G),e($G,XIo),e(E4,zIo),e(O,QIo),e(O,C4),e(C4,Vfe),e(Vfe,WIo),e(C4,HIo),e(C4,kG),e(kG,UIo),e(C4,JIo),e(O,YIo),e(O,w4),e(w4,Xfe),e(Xfe,KIo),e(w4,ZIo),e(w4,SG),e(SG,eqo),e(w4,oqo),e(O,rqo),e(O,A4),e(A4,zfe),e(zfe,tqo),e(A4,aqo),e(A4,RG),e(RG,nqo),e(A4,sqo),e(O,lqo),e(O,y4),e(y4,Qfe),e(Qfe,iqo),e(y4,dqo),e(y4,BG),e(BG,cqo),e(y4,fqo),e(O,mqo),e(O,L4),e(L4,Wfe),e(Wfe,gqo),e(L4,hqo),e(L4,PG),e(PG,pqo),e(L4,uqo),e(O,_qo),e(O,x4),e(x4,Hfe),e(Hfe,bqo),e(x4,vqo),e(x4,IG),e(IG,Fqo),e(x4,Tqo),e(O,Mqo),e(O,$4),e($4,Ufe),e(Ufe,Eqo),e($4,Cqo),e($4,qG),e(qG,wqo),e($4,Aqo),e(O,yqo),e(O,k4),e(k4,Jfe),e(Jfe,Lqo),e(k4,xqo),e(k4,NG),e(NG,$qo),e(k4,kqo),e(O,Sqo),e(O,S4),e(S4,Yfe),e(Yfe,Rqo),e(S4,Bqo),e(S4,jG),e(jG,Pqo),e(S4,Iqo),e(O,qqo),e(O,R4),e(R4,Kfe),e(Kfe,Nqo),e(R4,jqo),e(R4,DG),e(DG,Dqo),e(R4,Gqo),e(O,Oqo),e(O,B4),e(B4,Zfe),e(Zfe,Vqo),e(B4,Xqo),e(B4,GG),e(GG,zqo),e(B4,Qqo),e(O,Wqo),e(O,P4),e(P4,eme),e(eme,Hqo),e(P4,Uqo),e(P4,OG),e(OG,Jqo),e(P4,Yqo),e(O,Kqo),e(O,I4),e(I4,ome),e(ome,Zqo),e(I4,eNo),e(I4,VG),e(VG,oNo),e(I4,rNo),e(O,tNo),e(O,q4),e(q4,rme),e(rme,aNo),e(q4,nNo),e(q4,XG),e(XG,sNo),e(q4,lNo),e(O,iNo),e(O,N4),e(N4,tme),e(tme,dNo),e(N4,cNo),e(N4,zG),e(zG,fNo),e(N4,mNo),e(O,gNo),e(O,j4),e(j4,ame),e(ame,hNo),e(j4,pNo),e(j4,QG),e(QG,uNo),e(j4,_No),e(O,bNo),e(O,D4),e(D4,nme),e(nme,vNo),e(D4,FNo),e(D4,WG),e(WG,TNo),e(D4,MNo),e(O,ENo),e(O,G4),e(G4,sme),e(sme,CNo),e(G4,wNo),e(G4,HG),e(HG,ANo),e(G4,yNo),e(O,LNo),e(O,O4),e(O4,lme),e(lme,xNo),e(O4,$No),e(O4,UG),e(UG,kNo),e(O4,SNo),e(O,RNo),e(O,V4),e(V4,ime),e(ime,BNo),e(V4,PNo),e(V4,JG),e(JG,INo),e(V4,qNo),e(O,NNo),e(O,X4),e(X4,dme),e(dme,jNo),e(X4,DNo),e(X4,YG),e(YG,GNo),e(X4,ONo),e(O,VNo),e(O,z4),e(z4,cme),e(cme,XNo),e(z4,zNo),e(z4,KG),e(KG,QNo),e(z4,WNo),e(O,HNo),e(O,Q4),e(Q4,fme),e(fme,UNo),e(Q4,JNo),e(Q4,ZG),e(ZG,YNo),e(Q4,KNo),e(O,ZNo),e(O,W4),e(W4,mme),e(mme,ejo),e(W4,ojo),e(W4,eO),e(eO,rjo),e(W4,tjo),e(O,ajo),e(O,H4),e(H4,gme),e(gme,njo),e(H4,sjo),e(H4,oO),e(oO,ljo),e(H4,ijo),e(O,djo),e(O,U4),e(U4,hme),e(hme,cjo),e(U4,fjo),e(U4,rO),e(rO,mjo),e(U4,gjo),e(O,hjo),e(O,J4),e(J4,pme),e(pme,pjo),e(J4,ujo),e(J4,tO),e(tO,_jo),e(J4,bjo),e(O,vjo),e(O,Y4),e(Y4,ume),e(ume,Fjo),e(Y4,Tjo),e(Y4,aO),e(aO,Mjo),e(Y4,Ejo),e(O,Cjo),e(O,K4),e(K4,_me),e(_me,wjo),e(K4,Ajo),e(K4,nO),e(nO,yjo),e(K4,Ljo),e(O,xjo),e(O,Z4),e(Z4,bme),e(bme,$jo),e(Z4,kjo),e(Z4,sO),e(sO,Sjo),e(Z4,Rjo),e(O,Bjo),e(O,ev),e(ev,vme),e(vme,Pjo),e(ev,Ijo),e(ev,lO),e(lO,qjo),e(ev,Njo),e(O,jjo),e(O,ov),e(ov,Fme),e(Fme,Djo),e(ov,Gjo),e(ov,iO),e(iO,Ojo),e(ov,Vjo),e(O,Xjo),e(O,rv),e(rv,Tme),e(Tme,zjo),e(rv,Qjo),e(rv,dO),e(dO,Wjo),e(rv,Hjo),e(O,Ujo),e(O,tv),e(tv,Mme),e(Mme,Jjo),e(tv,Yjo),e(tv,cO),e(cO,Kjo),e(tv,Zjo),e(O,eDo),e(O,av),e(av,Eme),e(Eme,oDo),e(av,rDo),e(av,fO),e(fO,tDo),e(av,aDo),e(O,nDo),e(O,nv),e(nv,Cme),e(Cme,sDo),e(nv,lDo),e(nv,mO),e(mO,iDo),e(nv,dDo),e(O,cDo),e(O,sv),e(sv,wme),e(wme,fDo),e(sv,mDo),e(sv,gO),e(gO,gDo),e(sv,hDo),e(ro,pDo),e(ro,lv),e(lv,uDo),e(lv,Ame),e(Ame,_Do),e(lv,bDo),e(lv,yme),e(yme,vDo),e(ro,FDo),M(iv,ro,null),b(f,bBe,_),b(f,zi,_),e(zi,dv),e(dv,Lme),M(Ny,Lme,null),e(zi,TDo),e(zi,xme),e(xme,MDo),b(f,vBe,_),b(f,Io,_),M(jy,Io,null),e(Io,EDo),e(Io,Qi),e(Qi,CDo),e(Qi,hO),e(hO,wDo),e(Qi,ADo),e(Qi,pO),e(pO,yDo),e(Qi,LDo),e(Io,xDo),e(Io,Dy),e(Dy,$Do),e(Dy,$me),e($me,kDo),e(Dy,SDo),e(Io,RDo),e(Io,it),M(Gy,it,null),e(it,BDo),e(it,kme),e(kme,PDo),e(it,IDo),e(it,Wi),e(Wi,qDo),e(Wi,Sme),e(Sme,NDo),e(Wi,jDo),e(Wi,uO),e(uO,DDo),e(Wi,GDo),e(it,ODo),M(cv,it,null),e(Io,VDo),e(Io,to),M(Oy,to,null),e(to,XDo),e(to,Rme),e(Rme,zDo),e(to,QDo),e(to,Sa),e(Sa,WDo),e(Sa,Bme),e(Bme,HDo),e(Sa,UDo),e(Sa,Pme),e(Pme,JDo),e(Sa,YDo),e(Sa,Ime),e(Ime,KDo),e(Sa,ZDo),e(to,eGo),e(to,qme),e(qme,fv),e(fv,Nme),e(Nme,oGo),e(fv,rGo),e(fv,_O),e(_O,tGo),e(fv,aGo),e(to,nGo),e(to,mv),e(mv,sGo),e(mv,jme),e(jme,lGo),e(mv,iGo),e(mv,Dme),e(Dme,dGo),e(to,cGo),M(gv,to,null),b(f,FBe,_),b(f,Hi,_),e(Hi,hv),e(hv,Gme),M(Vy,Gme,null),e(Hi,fGo),e(Hi,Ome),e(Ome,mGo),b(f,TBe,_),b(f,qo,_),M(Xy,qo,null),e(qo,gGo),e(qo,Ui),e(Ui,hGo),e(Ui,bO),e(bO,pGo),e(Ui,uGo),e(Ui,vO),e(vO,_Go),e(Ui,bGo),e(qo,vGo),e(qo,zy),e(zy,FGo),e(zy,Vme),e(Vme,TGo),e(zy,MGo),e(qo,EGo),e(qo,dt),M(Qy,dt,null),e(dt,CGo),e(dt,Xme),e(Xme,wGo),e(dt,AGo),e(dt,Ji),e(Ji,yGo),e(Ji,zme),e(zme,LGo),e(Ji,xGo),e(Ji,FO),e(FO,$Go),e(Ji,kGo),e(dt,SGo),M(pv,dt,null),e(qo,RGo),e(qo,ao),M(Wy,ao,null),e(ao,BGo),e(ao,Qme),e(Qme,PGo),e(ao,IGo),e(ao,Ra),e(Ra,qGo),e(Ra,Wme),e(Wme,NGo),e(Ra,jGo),e(Ra,Hme),e(Hme,DGo),e(Ra,GGo),e(Ra,Ume),e(Ume,OGo),e(Ra,VGo),e(ao,XGo),e(ao,ve),e(ve,uv),e(uv,Jme),e(Jme,zGo),e(uv,QGo),e(uv,TO),e(TO,WGo),e(uv,HGo),e(ve,UGo),e(ve,_v),e(_v,Yme),e(Yme,JGo),e(_v,YGo),e(_v,MO),e(MO,KGo),e(_v,ZGo),e(ve,eOo),e(ve,bv),e(bv,Kme),e(Kme,oOo),e(bv,rOo),e(bv,EO),e(EO,tOo),e(bv,aOo),e(ve,nOo),e(ve,Ls),e(Ls,Zme),e(Zme,sOo),e(Ls,lOo),e(Ls,CO),e(CO,iOo),e(Ls,dOo),e(Ls,wO),e(wO,cOo),e(Ls,fOo),e(ve,mOo),e(ve,vv),e(vv,ege),e(ege,gOo),e(vv,hOo),e(vv,AO),e(AO,pOo),e(vv,uOo),e(ve,_Oo),e(ve,ct),e(ct,oge),e(oge,bOo),e(ct,vOo),e(ct,yO),e(yO,FOo),e(ct,TOo),e(ct,LO),e(LO,MOo),e(ct,EOo),e(ct,xO),e(xO,COo),e(ct,wOo),e(ve,AOo),e(ve,Fv),e(Fv,rge),e(rge,yOo),e(Fv,LOo),e(Fv,$O),e($O,xOo),e(Fv,$Oo),e(ve,kOo),e(ve,Tv),e(Tv,tge),e(tge,SOo),e(Tv,ROo),e(Tv,kO),e(kO,BOo),e(Tv,POo),e(ve,IOo),e(ve,Mv),e(Mv,age),e(age,qOo),e(Mv,NOo),e(Mv,SO),e(SO,jOo),e(Mv,DOo),e(ve,GOo),e(ve,Ev),e(Ev,nge),e(nge,OOo),e(Ev,VOo),e(Ev,RO),e(RO,XOo),e(Ev,zOo),e(ve,QOo),e(ve,Cv),e(Cv,sge),e(sge,WOo),e(Cv,HOo),e(Cv,BO),e(BO,UOo),e(Cv,JOo),e(ve,YOo),e(ve,wv),e(wv,lge),e(lge,KOo),e(wv,ZOo),e(wv,PO),e(PO,eVo),e(wv,oVo),e(ve,rVo),e(ve,Av),e(Av,ige),e(ige,tVo),e(Av,aVo),e(Av,IO),e(IO,nVo),e(Av,sVo),e(ao,lVo),e(ao,yv),e(yv,iVo),e(yv,dge),e(dge,dVo),e(yv,cVo),e(yv,cge),e(cge,fVo),e(ao,mVo),M(Lv,ao,null),b(f,MBe,_),b(f,Yi,_),e(Yi,xv),e(xv,fge),M(Hy,fge,null),e(Yi,gVo),e(Yi,mge),e(mge,hVo),b(f,EBe,_),b(f,No,_),M(Uy,No,null),e(No,pVo),e(No,Ki),e(Ki,uVo),e(Ki,qO),e(qO,_Vo),e(Ki,bVo),e(Ki,NO),e(NO,vVo),e(Ki,FVo),e(No,TVo),e(No,Jy),e(Jy,MVo),e(Jy,gge),e(gge,EVo),e(Jy,CVo),e(No,wVo),e(No,ft),M(Yy,ft,null),e(ft,AVo),e(ft,hge),e(hge,yVo),e(ft,LVo),e(ft,Zi),e(Zi,xVo),e(Zi,pge),e(pge,$Vo),e(Zi,kVo),e(Zi,jO),e(jO,SVo),e(Zi,RVo),e(ft,BVo),M($v,ft,null),e(No,PVo),e(No,no),M(Ky,no,null),e(no,IVo),e(no,uge),e(uge,qVo),e(no,NVo),e(no,Ba),e(Ba,jVo),e(Ba,_ge),e(_ge,DVo),e(Ba,GVo),e(Ba,bge),e(bge,OVo),e(Ba,VVo),e(Ba,vge),e(vge,XVo),e(Ba,zVo),e(no,QVo),e(no,Fge),e(Fge,kv),e(kv,Tge),e(Tge,WVo),e(kv,HVo),e(kv,DO),e(DO,UVo),e(kv,JVo),e(no,YVo),e(no,Sv),e(Sv,KVo),e(Sv,Mge),e(Mge,ZVo),e(Sv,eXo),e(Sv,Ege),e(Ege,oXo),e(no,rXo),M(Rv,no,null),b(f,CBe,_),b(f,ed,_),e(ed,Bv),e(Bv,Cge),M(Zy,Cge,null),e(ed,tXo),e(ed,wge),e(wge,aXo),b(f,wBe,_),b(f,jo,_),M(eL,jo,null),e(jo,nXo),e(jo,od),e(od,sXo),e(od,GO),e(GO,lXo),e(od,iXo),e(od,OO),e(OO,dXo),e(od,cXo),e(jo,fXo),e(jo,oL),e(oL,mXo),e(oL,Age),e(Age,gXo),e(oL,hXo),e(jo,pXo),e(jo,mt),M(rL,mt,null),e(mt,uXo),e(mt,yge),e(yge,_Xo),e(mt,bXo),e(mt,rd),e(rd,vXo),e(rd,Lge),e(Lge,FXo),e(rd,TXo),e(rd,VO),e(VO,MXo),e(rd,EXo),e(mt,CXo),M(Pv,mt,null),e(jo,wXo),e(jo,so),M(tL,so,null),e(so,AXo),e(so,xge),e(xge,yXo),e(so,LXo),e(so,Pa),e(Pa,xXo),e(Pa,$ge),e($ge,$Xo),e(Pa,kXo),e(Pa,kge),e(kge,SXo),e(Pa,RXo),e(Pa,Sge),e(Sge,BXo),e(Pa,PXo),e(so,IXo),e(so,Ne),e(Ne,Iv),e(Iv,Rge),e(Rge,qXo),e(Iv,NXo),e(Iv,XO),e(XO,jXo),e(Iv,DXo),e(Ne,GXo),e(Ne,qv),e(qv,Bge),e(Bge,OXo),e(qv,VXo),e(qv,zO),e(zO,XXo),e(qv,zXo),e(Ne,QXo),e(Ne,Nv),e(Nv,Pge),e(Pge,WXo),e(Nv,HXo),e(Nv,QO),e(QO,UXo),e(Nv,JXo),e(Ne,YXo),e(Ne,jv),e(jv,Ige),e(Ige,KXo),e(jv,ZXo),e(jv,WO),e(WO,ezo),e(jv,ozo),e(Ne,rzo),e(Ne,Dv),e(Dv,qge),e(qge,tzo),e(Dv,azo),e(Dv,HO),e(HO,nzo),e(Dv,szo),e(Ne,lzo),e(Ne,Gv),e(Gv,Nge),e(Nge,izo),e(Gv,dzo),e(Gv,UO),e(UO,czo),e(Gv,fzo),e(Ne,mzo),e(Ne,Ov),e(Ov,jge),e(jge,gzo),e(Ov,hzo),e(Ov,JO),e(JO,pzo),e(Ov,uzo),e(Ne,_zo),e(Ne,Vv),e(Vv,Dge),e(Dge,bzo),e(Vv,vzo),e(Vv,YO),e(YO,Fzo),e(Vv,Tzo),e(so,Mzo),e(so,Xv),e(Xv,Ezo),e(Xv,Gge),e(Gge,Czo),e(Xv,wzo),e(Xv,Oge),e(Oge,Azo),e(so,yzo),M(zv,so,null),b(f,ABe,_),b(f,td,_),e(td,Qv),e(Qv,Vge),M(aL,Vge,null),e(td,Lzo),e(td,Xge),e(Xge,xzo),b(f,yBe,_),b(f,Do,_),M(nL,Do,null),e(Do,$zo),e(Do,ad),e(ad,kzo),e(ad,KO),e(KO,Szo),e(ad,Rzo),e(ad,ZO),e(ZO,Bzo),e(ad,Pzo),e(Do,Izo),e(Do,sL),e(sL,qzo),e(sL,zge),e(zge,Nzo),e(sL,jzo),e(Do,Dzo),e(Do,gt),M(lL,gt,null),e(gt,Gzo),e(gt,Qge),e(Qge,Ozo),e(gt,Vzo),e(gt,nd),e(nd,Xzo),e(nd,Wge),e(Wge,zzo),e(nd,Qzo),e(nd,eV),e(eV,Wzo),e(nd,Hzo),e(gt,Uzo),M(Wv,gt,null),e(Do,Jzo),e(Do,lo),M(iL,lo,null),e(lo,Yzo),e(lo,Hge),e(Hge,Kzo),e(lo,Zzo),e(lo,Ia),e(Ia,eQo),e(Ia,Uge),e(Uge,oQo),e(Ia,rQo),e(Ia,Jge),e(Jge,tQo),e(Ia,aQo),e(Ia,Yge),e(Yge,nQo),e(Ia,sQo),e(lo,lQo),e(lo,qa),e(qa,Hv),e(Hv,Kge),e(Kge,iQo),e(Hv,dQo),e(Hv,oV),e(oV,cQo),e(Hv,fQo),e(qa,mQo),e(qa,Uv),e(Uv,Zge),e(Zge,gQo),e(Uv,hQo),e(Uv,rV),e(rV,pQo),e(Uv,uQo),e(qa,_Qo),e(qa,Jv),e(Jv,ehe),e(ehe,bQo),e(Jv,vQo),e(Jv,tV),e(tV,FQo),e(Jv,TQo),e(qa,MQo),e(qa,Yv),e(Yv,ohe),e(ohe,EQo),e(Yv,CQo),e(Yv,aV),e(aV,wQo),e(Yv,AQo),e(lo,yQo),e(lo,Kv),e(Kv,LQo),e(Kv,rhe),e(rhe,xQo),e(Kv,$Qo),e(Kv,the),e(the,kQo),e(lo,SQo),M(Zv,lo,null),b(f,LBe,_),b(f,sd,_),e(sd,eF),e(eF,ahe),M(dL,ahe,null),e(sd,RQo),e(sd,nhe),e(nhe,BQo),b(f,xBe,_),b(f,Go,_),M(cL,Go,null),e(Go,PQo),e(Go,ld),e(ld,IQo),e(ld,nV),e(nV,qQo),e(ld,NQo),e(ld,sV),e(sV,jQo),e(ld,DQo),e(Go,GQo),e(Go,fL),e(fL,OQo),e(fL,she),e(she,VQo),e(fL,XQo),e(Go,zQo),e(Go,ht),M(mL,ht,null),e(ht,QQo),e(ht,lhe),e(lhe,WQo),e(ht,HQo),e(ht,id),e(id,UQo),e(id,ihe),e(ihe,JQo),e(id,YQo),e(id,lV),e(lV,KQo),e(id,ZQo),e(ht,eWo),M(oF,ht,null),e(Go,oWo),e(Go,io),M(gL,io,null),e(io,rWo),e(io,dhe),e(dhe,tWo),e(io,aWo),e(io,Na),e(Na,nWo),e(Na,che),e(che,sWo),e(Na,lWo),e(Na,fhe),e(fhe,iWo),e(Na,dWo),e(Na,mhe),e(mhe,cWo),e(Na,fWo),e(io,mWo),e(io,ke),e(ke,rF),e(rF,ghe),e(ghe,gWo),e(rF,hWo),e(rF,iV),e(iV,pWo),e(rF,uWo),e(ke,_Wo),e(ke,tF),e(tF,hhe),e(hhe,bWo),e(tF,vWo),e(tF,dV),e(dV,FWo),e(tF,TWo),e(ke,MWo),e(ke,aF),e(aF,phe),e(phe,EWo),e(aF,CWo),e(aF,uhe),e(uhe,wWo),e(aF,AWo),e(ke,yWo),e(ke,nF),e(nF,_he),e(_he,LWo),e(nF,xWo),e(nF,cV),e(cV,$Wo),e(nF,kWo),e(ke,SWo),e(ke,sF),e(sF,bhe),e(bhe,RWo),e(sF,BWo),e(sF,fV),e(fV,PWo),e(sF,IWo),e(ke,qWo),e(ke,lF),e(lF,vhe),e(vhe,NWo),e(lF,jWo),e(lF,mV),e(mV,DWo),e(lF,GWo),e(ke,OWo),e(ke,iF),e(iF,Fhe),e(Fhe,VWo),e(iF,XWo),e(iF,gV),e(gV,zWo),e(iF,QWo),e(ke,WWo),e(ke,dF),e(dF,The),e(The,HWo),e(dF,UWo),e(dF,hV),e(hV,JWo),e(dF,YWo),e(ke,KWo),e(ke,cF),e(cF,Mhe),e(Mhe,ZWo),e(cF,eHo),e(cF,pV),e(pV,oHo),e(cF,rHo),e(io,tHo),e(io,fF),e(fF,aHo),e(fF,Ehe),e(Ehe,nHo),e(fF,sHo),e(fF,Che),e(Che,lHo),e(io,iHo),M(mF,io,null),b(f,$Be,_),b(f,dd,_),e(dd,gF),e(gF,whe),M(hL,whe,null),e(dd,dHo),e(dd,Ahe),e(Ahe,cHo),b(f,kBe,_),b(f,Oo,_),M(pL,Oo,null),e(Oo,fHo),e(Oo,cd),e(cd,mHo),e(cd,uV),e(uV,gHo),e(cd,hHo),e(cd,_V),e(_V,pHo),e(cd,uHo),e(Oo,_Ho),e(Oo,uL),e(uL,bHo),e(uL,yhe),e(yhe,vHo),e(uL,FHo),e(Oo,THo),e(Oo,pt),M(_L,pt,null),e(pt,MHo),e(pt,Lhe),e(Lhe,EHo),e(pt,CHo),e(pt,fd),e(fd,wHo),e(fd,xhe),e(xhe,AHo),e(fd,yHo),e(fd,bV),e(bV,LHo),e(fd,xHo),e(pt,$Ho),M(hF,pt,null),e(Oo,kHo),e(Oo,co),M(bL,co,null),e(co,SHo),e(co,$he),e($he,RHo),e(co,BHo),e(co,ja),e(ja,PHo),e(ja,khe),e(khe,IHo),e(ja,qHo),e(ja,She),e(She,NHo),e(ja,jHo),e(ja,Rhe),e(Rhe,DHo),e(ja,GHo),e(co,OHo),e(co,vL),e(vL,pF),e(pF,Bhe),e(Bhe,VHo),e(pF,XHo),e(pF,vV),e(vV,zHo),e(pF,QHo),e(vL,WHo),e(vL,uF),e(uF,Phe),e(Phe,HHo),e(uF,UHo),e(uF,FV),e(FV,JHo),e(uF,YHo),e(co,KHo),e(co,_F),e(_F,ZHo),e(_F,Ihe),e(Ihe,eUo),e(_F,oUo),e(_F,qhe),e(qhe,rUo),e(co,tUo),M(bF,co,null),b(f,SBe,_),b(f,md,_),e(md,vF),e(vF,Nhe),M(FL,Nhe,null),e(md,aUo),e(md,jhe),e(jhe,nUo),b(f,RBe,_),b(f,Vo,_),M(TL,Vo,null),e(Vo,sUo),e(Vo,gd),e(gd,lUo),e(gd,TV),e(TV,iUo),e(gd,dUo),e(gd,MV),e(MV,cUo),e(gd,fUo),e(Vo,mUo),e(Vo,ML),e(ML,gUo),e(ML,Dhe),e(Dhe,hUo),e(ML,pUo),e(Vo,uUo),e(Vo,ut),M(EL,ut,null),e(ut,_Uo),e(ut,Ghe),e(Ghe,bUo),e(ut,vUo),e(ut,hd),e(hd,FUo),e(hd,Ohe),e(Ohe,TUo),e(hd,MUo),e(hd,EV),e(EV,EUo),e(hd,CUo),e(ut,wUo),M(FF,ut,null),e(Vo,AUo),e(Vo,fo),M(CL,fo,null),e(fo,yUo),e(fo,Vhe),e(Vhe,LUo),e(fo,xUo),e(fo,Da),e(Da,$Uo),e(Da,Xhe),e(Xhe,kUo),e(Da,SUo),e(Da,zhe),e(zhe,RUo),e(Da,BUo),e(Da,Qhe),e(Qhe,PUo),e(Da,IUo),e(fo,qUo),e(fo,Ga),e(Ga,TF),e(TF,Whe),e(Whe,NUo),e(TF,jUo),e(TF,CV),e(CV,DUo),e(TF,GUo),e(Ga,OUo),e(Ga,MF),e(MF,Hhe),e(Hhe,VUo),e(MF,XUo),e(MF,wV),e(wV,zUo),e(MF,QUo),e(Ga,WUo),e(Ga,EF),e(EF,Uhe),e(Uhe,HUo),e(EF,UUo),e(EF,AV),e(AV,JUo),e(EF,YUo),e(Ga,KUo),e(Ga,CF),e(CF,Jhe),e(Jhe,ZUo),e(CF,eJo),e(CF,yV),e(yV,oJo),e(CF,rJo),e(fo,tJo),e(fo,wF),e(wF,aJo),e(wF,Yhe),e(Yhe,nJo),e(wF,sJo),e(wF,Khe),e(Khe,lJo),e(fo,iJo),M(AF,fo,null),b(f,BBe,_),b(f,pd,_),e(pd,yF),e(yF,Zhe),M(wL,Zhe,null),e(pd,dJo),e(pd,epe),e(epe,cJo),b(f,PBe,_),b(f,Xo,_),M(AL,Xo,null),e(Xo,fJo),e(Xo,ud),e(ud,mJo),e(ud,LV),e(LV,gJo),e(ud,hJo),e(ud,xV),e(xV,pJo),e(ud,uJo),e(Xo,_Jo),e(Xo,yL),e(yL,bJo),e(yL,ope),e(ope,vJo),e(yL,FJo),e(Xo,TJo),e(Xo,_t),M(LL,_t,null),e(_t,MJo),e(_t,rpe),e(rpe,EJo),e(_t,CJo),e(_t,_d),e(_d,wJo),e(_d,tpe),e(tpe,AJo),e(_d,yJo),e(_d,$V),e($V,LJo),e(_d,xJo),e(_t,$Jo),M(LF,_t,null),e(Xo,kJo),e(Xo,mo),M(xL,mo,null),e(mo,SJo),e(mo,ape),e(ape,RJo),e(mo,BJo),e(mo,Oa),e(Oa,PJo),e(Oa,npe),e(npe,IJo),e(Oa,qJo),e(Oa,spe),e(spe,NJo),e(Oa,jJo),e(Oa,lpe),e(lpe,DJo),e(Oa,GJo),e(mo,OJo),e(mo,bd),e(bd,xF),e(xF,ipe),e(ipe,VJo),e(xF,XJo),e(xF,kV),e(kV,zJo),e(xF,QJo),e(bd,WJo),e(bd,$F),e($F,dpe),e(dpe,HJo),e($F,UJo),e($F,SV),e(SV,JJo),e($F,YJo),e(bd,KJo),e(bd,kF),e(kF,cpe),e(cpe,ZJo),e(kF,eYo),e(kF,RV),e(RV,oYo),e(kF,rYo),e(mo,tYo),e(mo,SF),e(SF,aYo),e(SF,fpe),e(fpe,nYo),e(SF,sYo),e(SF,mpe),e(mpe,lYo),e(mo,iYo),M(RF,mo,null),b(f,IBe,_),b(f,vd,_),e(vd,BF),e(BF,gpe),M($L,gpe,null),e(vd,dYo),e(vd,hpe),e(hpe,cYo),b(f,qBe,_),b(f,zo,_),M(kL,zo,null),e(zo,fYo),e(zo,Fd),e(Fd,mYo),e(Fd,BV),e(BV,gYo),e(Fd,hYo),e(Fd,PV),e(PV,pYo),e(Fd,uYo),e(zo,_Yo),e(zo,SL),e(SL,bYo),e(SL,ppe),e(ppe,vYo),e(SL,FYo),e(zo,TYo),e(zo,bt),M(RL,bt,null),e(bt,MYo),e(bt,upe),e(upe,EYo),e(bt,CYo),e(bt,Td),e(Td,wYo),e(Td,_pe),e(_pe,AYo),e(Td,yYo),e(Td,IV),e(IV,LYo),e(Td,xYo),e(bt,$Yo),M(PF,bt,null),e(zo,kYo),e(zo,go),M(BL,go,null),e(go,SYo),e(go,bpe),e(bpe,RYo),e(go,BYo),e(go,Va),e(Va,PYo),e(Va,vpe),e(vpe,IYo),e(Va,qYo),e(Va,Fpe),e(Fpe,NYo),e(Va,jYo),e(Va,Tpe),e(Tpe,DYo),e(Va,GYo),e(go,OYo),e(go,Mpe),e(Mpe,IF),e(IF,Epe),e(Epe,VYo),e(IF,XYo),e(IF,qV),e(qV,zYo),e(IF,QYo),e(go,WYo),e(go,qF),e(qF,HYo),e(qF,Cpe),e(Cpe,UYo),e(qF,JYo),e(qF,wpe),e(wpe,YYo),e(go,KYo),M(NF,go,null),b(f,NBe,_),b(f,Md,_),e(Md,jF),e(jF,Ape),M(PL,Ape,null),e(Md,ZYo),e(Md,ype),e(ype,eKo),b(f,jBe,_),b(f,Qo,_),M(IL,Qo,null),e(Qo,oKo),e(Qo,Ed),e(Ed,rKo),e(Ed,NV),e(NV,tKo),e(Ed,aKo),e(Ed,jV),e(jV,nKo),e(Ed,sKo),e(Qo,lKo),e(Qo,qL),e(qL,iKo),e(qL,Lpe),e(Lpe,dKo),e(qL,cKo),e(Qo,fKo),e(Qo,vt),M(NL,vt,null),e(vt,mKo),e(vt,xpe),e(xpe,gKo),e(vt,hKo),e(vt,Cd),e(Cd,pKo),e(Cd,$pe),e($pe,uKo),e(Cd,_Ko),e(Cd,DV),e(DV,bKo),e(Cd,vKo),e(vt,FKo),M(DF,vt,null),e(Qo,TKo),e(Qo,ho),M(jL,ho,null),e(ho,MKo),e(ho,kpe),e(kpe,EKo),e(ho,CKo),e(ho,Xa),e(Xa,wKo),e(Xa,Spe),e(Spe,AKo),e(Xa,yKo),e(Xa,Rpe),e(Rpe,LKo),e(Xa,xKo),e(Xa,Bpe),e(Bpe,$Ko),e(Xa,kKo),e(ho,SKo),e(ho,Ppe),e(Ppe,GF),e(GF,Ipe),e(Ipe,RKo),e(GF,BKo),e(GF,GV),e(GV,PKo),e(GF,IKo),e(ho,qKo),e(ho,OF),e(OF,NKo),e(OF,qpe),e(qpe,jKo),e(OF,DKo),e(OF,Npe),e(Npe,GKo),e(ho,OKo),M(VF,ho,null),b(f,DBe,_),b(f,wd,_),e(wd,XF),e(XF,jpe),M(DL,jpe,null),e(wd,VKo),e(wd,Dpe),e(Dpe,XKo),b(f,GBe,_),b(f,Wo,_),M(GL,Wo,null),e(Wo,zKo),e(Wo,Ad),e(Ad,QKo),e(Ad,OV),e(OV,WKo),e(Ad,HKo),e(Ad,VV),e(VV,UKo),e(Ad,JKo),e(Wo,YKo),e(Wo,OL),e(OL,KKo),e(OL,Gpe),e(Gpe,ZKo),e(OL,eZo),e(Wo,oZo),e(Wo,Ft),M(VL,Ft,null),e(Ft,rZo),e(Ft,Ope),e(Ope,tZo),e(Ft,aZo),e(Ft,yd),e(yd,nZo),e(yd,Vpe),e(Vpe,sZo),e(yd,lZo),e(yd,XV),e(XV,iZo),e(yd,dZo),e(Ft,cZo),M(zF,Ft,null),e(Wo,fZo),e(Wo,po),M(XL,po,null),e(po,mZo),e(po,Xpe),e(Xpe,gZo),e(po,hZo),e(po,za),e(za,pZo),e(za,zpe),e(zpe,uZo),e(za,_Zo),e(za,Qpe),e(Qpe,bZo),e(za,vZo),e(za,Wpe),e(Wpe,FZo),e(za,TZo),e(po,MZo),e(po,Qa),e(Qa,QF),e(QF,Hpe),e(Hpe,EZo),e(QF,CZo),e(QF,zV),e(zV,wZo),e(QF,AZo),e(Qa,yZo),e(Qa,WF),e(WF,Upe),e(Upe,LZo),e(WF,xZo),e(WF,QV),e(QV,$Zo),e(WF,kZo),e(Qa,SZo),e(Qa,HF),e(HF,Jpe),e(Jpe,RZo),e(HF,BZo),e(HF,WV),e(WV,PZo),e(HF,IZo),e(Qa,qZo),e(Qa,UF),e(UF,Ype),e(Ype,NZo),e(UF,jZo),e(UF,HV),e(HV,DZo),e(UF,GZo),e(po,OZo),e(po,JF),e(JF,VZo),e(JF,Kpe),e(Kpe,XZo),e(JF,zZo),e(JF,Zpe),e(Zpe,QZo),e(po,WZo),M(YF,po,null),b(f,OBe,_),b(f,Ld,_),e(Ld,KF),e(KF,eue),M(zL,eue,null),e(Ld,HZo),e(Ld,oue),e(oue,UZo),b(f,VBe,_),b(f,Ho,_),M(QL,Ho,null),e(Ho,JZo),e(Ho,xd),e(xd,YZo),e(xd,UV),e(UV,KZo),e(xd,ZZo),e(xd,JV),e(JV,eer),e(xd,oer),e(Ho,rer),e(Ho,WL),e(WL,ter),e(WL,rue),e(rue,aer),e(WL,ner),e(Ho,ser),e(Ho,Tt),M(HL,Tt,null),e(Tt,ler),e(Tt,tue),e(tue,ier),e(Tt,der),e(Tt,$d),e($d,cer),e($d,aue),e(aue,fer),e($d,mer),e($d,YV),e(YV,ger),e($d,her),e(Tt,per),M(ZF,Tt,null),e(Ho,uer),e(Ho,uo),M(UL,uo,null),e(uo,_er),e(uo,nue),e(nue,ber),e(uo,ver),e(uo,Wa),e(Wa,Fer),e(Wa,sue),e(sue,Ter),e(Wa,Mer),e(Wa,lue),e(lue,Eer),e(Wa,Cer),e(Wa,iue),e(iue,wer),e(Wa,Aer),e(uo,yer),e(uo,due),e(due,e0),e(e0,cue),e(cue,Ler),e(e0,xer),e(e0,KV),e(KV,$er),e(e0,ker),e(uo,Ser),e(uo,o0),e(o0,Rer),e(o0,fue),e(fue,Ber),e(o0,Per),e(o0,mue),e(mue,Ier),e(uo,qer),M(r0,uo,null),b(f,XBe,_),b(f,kd,_),e(kd,t0),e(t0,gue),M(JL,gue,null),e(kd,Ner),e(kd,hue),e(hue,jer),b(f,zBe,_),b(f,Uo,_),M(YL,Uo,null),e(Uo,Der),e(Uo,Sd),e(Sd,Ger),e(Sd,ZV),e(ZV,Oer),e(Sd,Ver),e(Sd,eX),e(eX,Xer),e(Sd,zer),e(Uo,Qer),e(Uo,KL),e(KL,Wer),e(KL,pue),e(pue,Her),e(KL,Uer),e(Uo,Jer),e(Uo,Mt),M(ZL,Mt,null),e(Mt,Yer),e(Mt,uue),e(uue,Ker),e(Mt,Zer),e(Mt,Rd),e(Rd,eor),e(Rd,_ue),e(_ue,oor),e(Rd,ror),e(Rd,oX),e(oX,tor),e(Rd,aor),e(Mt,nor),M(a0,Mt,null),e(Uo,sor),e(Uo,Mr),M(e8,Mr,null),e(Mr,lor),e(Mr,bue),e(bue,ior),e(Mr,dor),e(Mr,Ha),e(Ha,cor),e(Ha,vue),e(vue,mor),e(Ha,gor),e(Ha,Fue),e(Fue,hor),e(Ha,por),e(Ha,Tue),e(Tue,uor),e(Ha,_or),e(Mr,bor),e(Mr,j),e(j,n0),e(n0,Mue),e(Mue,vor),e(n0,For),e(n0,rX),e(rX,Tor),e(n0,Mor),e(j,Eor),e(j,s0),e(s0,Eue),e(Eue,Cor),e(s0,wor),e(s0,tX),e(tX,Aor),e(s0,yor),e(j,Lor),e(j,l0),e(l0,Cue),e(Cue,xor),e(l0,$or),e(l0,aX),e(aX,kor),e(l0,Sor),e(j,Ror),e(j,i0),e(i0,wue),e(wue,Bor),e(i0,Por),e(i0,nX),e(nX,Ior),e(i0,qor),e(j,Nor),e(j,d0),e(d0,Aue),e(Aue,jor),e(d0,Dor),e(d0,sX),e(sX,Gor),e(d0,Oor),e(j,Vor),e(j,c0),e(c0,yue),e(yue,Xor),e(c0,zor),e(c0,lX),e(lX,Qor),e(c0,Wor),e(j,Hor),e(j,f0),e(f0,Lue),e(Lue,Uor),e(f0,Jor),e(f0,iX),e(iX,Yor),e(f0,Kor),e(j,Zor),e(j,m0),e(m0,xue),e(xue,err),e(m0,orr),e(m0,dX),e(dX,rrr),e(m0,trr),e(j,arr),e(j,g0),e(g0,$ue),e($ue,nrr),e(g0,srr),e(g0,cX),e(cX,lrr),e(g0,irr),e(j,drr),e(j,h0),e(h0,kue),e(kue,crr),e(h0,frr),e(h0,fX),e(fX,mrr),e(h0,grr),e(j,hrr),e(j,p0),e(p0,Sue),e(Sue,prr),e(p0,urr),e(p0,mX),e(mX,_rr),e(p0,brr),e(j,vrr),e(j,u0),e(u0,Rue),e(Rue,Frr),e(u0,Trr),e(u0,gX),e(gX,Mrr),e(u0,Err),e(j,Crr),e(j,_0),e(_0,Bue),e(Bue,wrr),e(_0,Arr),e(_0,hX),e(hX,yrr),e(_0,Lrr),e(j,xrr),e(j,b0),e(b0,Pue),e(Pue,$rr),e(b0,krr),e(b0,pX),e(pX,Srr),e(b0,Rrr),e(j,Brr),e(j,v0),e(v0,Iue),e(Iue,Prr),e(v0,Irr),e(v0,uX),e(uX,qrr),e(v0,Nrr),e(j,jrr),e(j,F0),e(F0,que),e(que,Drr),e(F0,Grr),e(F0,_X),e(_X,Orr),e(F0,Vrr),e(j,Xrr),e(j,xs),e(xs,Nue),e(Nue,zrr),e(xs,Qrr),e(xs,bX),e(bX,Wrr),e(xs,Hrr),e(xs,vX),e(vX,Urr),e(xs,Jrr),e(j,Yrr),e(j,T0),e(T0,jue),e(jue,Krr),e(T0,Zrr),e(T0,FX),e(FX,etr),e(T0,otr),e(j,rtr),e(j,M0),e(M0,Due),e(Due,ttr),e(M0,atr),e(M0,TX),e(TX,ntr),e(M0,str),e(j,ltr),e(j,E0),e(E0,Gue),e(Gue,itr),e(E0,dtr),e(E0,MX),e(MX,ctr),e(E0,ftr),e(j,mtr),e(j,C0),e(C0,Oue),e(Oue,gtr),e(C0,htr),e(C0,EX),e(EX,ptr),e(C0,utr),e(j,_tr),e(j,w0),e(w0,Vue),e(Vue,btr),e(w0,vtr),e(w0,CX),e(CX,Ftr),e(w0,Ttr),e(j,Mtr),e(j,A0),e(A0,Xue),e(Xue,Etr),e(A0,Ctr),e(A0,wX),e(wX,wtr),e(A0,Atr),e(j,ytr),e(j,y0),e(y0,zue),e(zue,Ltr),e(y0,xtr),e(y0,AX),e(AX,$tr),e(y0,ktr),e(j,Str),e(j,L0),e(L0,Que),e(Que,Rtr),e(L0,Btr),e(L0,yX),e(yX,Ptr),e(L0,Itr),e(j,qtr),e(j,x0),e(x0,Wue),e(Wue,Ntr),e(x0,jtr),e(x0,LX),e(LX,Dtr),e(x0,Gtr),e(j,Otr),e(j,$0),e($0,Hue),e(Hue,Vtr),e($0,Xtr),e($0,xX),e(xX,ztr),e($0,Qtr),e(j,Wtr),e(j,k0),e(k0,Uue),e(Uue,Htr),e(k0,Utr),e(k0,$X),e($X,Jtr),e(k0,Ytr),e(j,Ktr),e(j,S0),e(S0,Jue),e(Jue,Ztr),e(S0,ear),e(S0,kX),e(kX,oar),e(S0,rar),e(j,tar),e(j,R0),e(R0,Yue),e(Yue,aar),e(R0,nar),e(R0,SX),e(SX,sar),e(R0,lar),e(j,iar),e(j,B0),e(B0,Kue),e(Kue,dar),e(B0,car),e(B0,RX),e(RX,far),e(B0,mar),e(j,gar),e(j,P0),e(P0,Zue),e(Zue,har),e(P0,par),e(P0,BX),e(BX,uar),e(P0,_ar),e(j,bar),e(j,I0),e(I0,e_e),e(e_e,Far),e(I0,Tar),e(I0,PX),e(PX,Mar),e(I0,Ear),e(j,Car),e(j,q0),e(q0,o_e),e(o_e,war),e(q0,Aar),e(q0,IX),e(IX,yar),e(q0,Lar),e(j,xar),e(j,N0),e(N0,r_e),e(r_e,$ar),e(N0,kar),e(N0,qX),e(qX,Sar),e(N0,Rar),e(j,Bar),e(j,j0),e(j0,t_e),e(t_e,Par),e(j0,Iar),e(j0,NX),e(NX,qar),e(j0,Nar),e(j,jar),e(j,D0),e(D0,a_e),e(a_e,Dar),e(D0,Gar),e(D0,jX),e(jX,Oar),e(D0,Var),e(j,Xar),e(j,G0),e(G0,n_e),e(n_e,zar),e(G0,Qar),e(G0,DX),e(DX,War),e(G0,Har),e(j,Uar),e(j,O0),e(O0,s_e),e(s_e,Jar),e(O0,Yar),e(O0,GX),e(GX,Kar),e(O0,Zar),e(j,enr),e(j,V0),e(V0,l_e),e(l_e,onr),e(V0,rnr),e(V0,OX),e(OX,tnr),e(V0,anr),e(j,nnr),e(j,X0),e(X0,i_e),e(i_e,snr),e(X0,lnr),e(X0,VX),e(VX,inr),e(X0,dnr),e(j,cnr),e(j,z0),e(z0,d_e),e(d_e,fnr),e(z0,mnr),e(z0,XX),e(XX,gnr),e(z0,hnr),e(j,pnr),e(j,Q0),e(Q0,c_e),e(c_e,unr),e(Q0,_nr),e(Q0,zX),e(zX,bnr),e(Q0,vnr),e(j,Fnr),e(j,W0),e(W0,f_e),e(f_e,Tnr),e(W0,Mnr),e(W0,QX),e(QX,Enr),e(W0,Cnr),e(Mr,wnr),M(H0,Mr,null),b(f,QBe,_),b(f,Bd,_),e(Bd,U0),e(U0,m_e),M(o8,m_e,null),e(Bd,Anr),e(Bd,g_e),e(g_e,ynr),b(f,WBe,_),b(f,Jo,_),M(r8,Jo,null),e(Jo,Lnr),e(Jo,Pd),e(Pd,xnr),e(Pd,WX),e(WX,$nr),e(Pd,knr),e(Pd,HX),e(HX,Snr),e(Pd,Rnr),e(Jo,Bnr),e(Jo,t8),e(t8,Pnr),e(t8,h_e),e(h_e,Inr),e(t8,qnr),e(Jo,Nnr),e(Jo,Et),M(a8,Et,null),e(Et,jnr),e(Et,p_e),e(p_e,Dnr),e(Et,Gnr),e(Et,Id),e(Id,Onr),e(Id,u_e),e(u_e,Vnr),e(Id,Xnr),e(Id,UX),e(UX,znr),e(Id,Qnr),e(Et,Wnr),M(J0,Et,null),e(Jo,Hnr),e(Jo,Er),M(n8,Er,null),e(Er,Unr),e(Er,__e),e(__e,Jnr),e(Er,Ynr),e(Er,Ua),e(Ua,Knr),e(Ua,b_e),e(b_e,Znr),e(Ua,esr),e(Ua,v_e),e(v_e,osr),e(Ua,rsr),e(Ua,F_e),e(F_e,tsr),e(Ua,asr),e(Er,nsr),e(Er,ne),e(ne,Y0),e(Y0,T_e),e(T_e,ssr),e(Y0,lsr),e(Y0,JX),e(JX,isr),e(Y0,dsr),e(ne,csr),e(ne,K0),e(K0,M_e),e(M_e,fsr),e(K0,msr),e(K0,YX),e(YX,gsr),e(K0,hsr),e(ne,psr),e(ne,Z0),e(Z0,E_e),e(E_e,usr),e(Z0,_sr),e(Z0,KX),e(KX,bsr),e(Z0,vsr),e(ne,Fsr),e(ne,e6),e(e6,C_e),e(C_e,Tsr),e(e6,Msr),e(e6,ZX),e(ZX,Esr),e(e6,Csr),e(ne,wsr),e(ne,o6),e(o6,w_e),e(w_e,Asr),e(o6,ysr),e(o6,ez),e(ez,Lsr),e(o6,xsr),e(ne,$sr),e(ne,r6),e(r6,A_e),e(A_e,ksr),e(r6,Ssr),e(r6,oz),e(oz,Rsr),e(r6,Bsr),e(ne,Psr),e(ne,t6),e(t6,y_e),e(y_e,Isr),e(t6,qsr),e(t6,rz),e(rz,Nsr),e(t6,jsr),e(ne,Dsr),e(ne,a6),e(a6,L_e),e(L_e,Gsr),e(a6,Osr),e(a6,tz),e(tz,Vsr),e(a6,Xsr),e(ne,zsr),e(ne,n6),e(n6,x_e),e(x_e,Qsr),e(n6,Wsr),e(n6,az),e(az,Hsr),e(n6,Usr),e(ne,Jsr),e(ne,s6),e(s6,$_e),e($_e,Ysr),e(s6,Ksr),e(s6,nz),e(nz,Zsr),e(s6,elr),e(ne,olr),e(ne,l6),e(l6,k_e),e(k_e,rlr),e(l6,tlr),e(l6,sz),e(sz,alr),e(l6,nlr),e(ne,slr),e(ne,i6),e(i6,S_e),e(S_e,llr),e(i6,ilr),e(i6,lz),e(lz,dlr),e(i6,clr),e(ne,flr),e(ne,d6),e(d6,R_e),e(R_e,mlr),e(d6,glr),e(d6,iz),e(iz,hlr),e(d6,plr),e(ne,ulr),e(ne,c6),e(c6,B_e),e(B_e,_lr),e(c6,blr),e(c6,dz),e(dz,vlr),e(c6,Flr),e(ne,Tlr),e(ne,f6),e(f6,P_e),e(P_e,Mlr),e(f6,Elr),e(f6,cz),e(cz,Clr),e(f6,wlr),e(ne,Alr),e(ne,m6),e(m6,I_e),e(I_e,ylr),e(m6,Llr),e(m6,fz),e(fz,xlr),e(m6,$lr),e(ne,klr),e(ne,g6),e(g6,q_e),e(q_e,Slr),e(g6,Rlr),e(g6,mz),e(mz,Blr),e(g6,Plr),e(ne,Ilr),e(ne,h6),e(h6,N_e),e(N_e,qlr),e(h6,Nlr),e(h6,gz),e(gz,jlr),e(h6,Dlr),e(ne,Glr),e(ne,p6),e(p6,j_e),e(j_e,Olr),e(p6,Vlr),e(p6,hz),e(hz,Xlr),e(p6,zlr),e(ne,Qlr),e(ne,u6),e(u6,D_e),e(D_e,Wlr),e(u6,Hlr),e(u6,pz),e(pz,Ulr),e(u6,Jlr),e(ne,Ylr),e(ne,_6),e(_6,G_e),e(G_e,Klr),e(_6,Zlr),e(_6,uz),e(uz,eir),e(_6,oir),e(ne,rir),e(ne,b6),e(b6,O_e),e(O_e,tir),e(b6,air),e(b6,_z),e(_z,nir),e(b6,sir),e(ne,lir),e(ne,v6),e(v6,V_e),e(V_e,iir),e(v6,dir),e(v6,bz),e(bz,cir),e(v6,fir),e(Er,mir),M(F6,Er,null),b(f,HBe,_),b(f,qd,_),e(qd,T6),e(T6,X_e),M(s8,X_e,null),e(qd,gir),e(qd,z_e),e(z_e,hir),b(f,UBe,_),b(f,Yo,_),M(l8,Yo,null),e(Yo,pir),e(Yo,Nd),e(Nd,uir),e(Nd,vz),e(vz,_ir),e(Nd,bir),e(Nd,Fz),e(Fz,vir),e(Nd,Fir),e(Yo,Tir),e(Yo,i8),e(i8,Mir),e(i8,Q_e),e(Q_e,Eir),e(i8,Cir),e(Yo,wir),e(Yo,Ct),M(d8,Ct,null),e(Ct,Air),e(Ct,W_e),e(W_e,yir),e(Ct,Lir),e(Ct,jd),e(jd,xir),e(jd,H_e),e(H_e,$ir),e(jd,kir),e(jd,Tz),e(Tz,Sir),e(jd,Rir),e(Ct,Bir),M(M6,Ct,null),e(Yo,Pir),e(Yo,Cr),M(c8,Cr,null),e(Cr,Iir),e(Cr,U_e),e(U_e,qir),e(Cr,Nir),e(Cr,Ja),e(Ja,jir),e(Ja,J_e),e(J_e,Dir),e(Ja,Gir),e(Ja,Y_e),e(Y_e,Oir),e(Ja,Vir),e(Ja,K_e),e(K_e,Xir),e(Ja,zir),e(Cr,Qir),e(Cr,Te),e(Te,E6),e(E6,Z_e),e(Z_e,Wir),e(E6,Hir),e(E6,Mz),e(Mz,Uir),e(E6,Jir),e(Te,Yir),e(Te,C6),e(C6,e2e),e(e2e,Kir),e(C6,Zir),e(C6,Ez),e(Ez,edr),e(C6,odr),e(Te,rdr),e(Te,w6),e(w6,o2e),e(o2e,tdr),e(w6,adr),e(w6,Cz),e(Cz,ndr),e(w6,sdr),e(Te,ldr),e(Te,A6),e(A6,r2e),e(r2e,idr),e(A6,ddr),e(A6,wz),e(wz,cdr),e(A6,fdr),e(Te,mdr),e(Te,y6),e(y6,t2e),e(t2e,gdr),e(y6,hdr),e(y6,Az),e(Az,pdr),e(y6,udr),e(Te,_dr),e(Te,L6),e(L6,a2e),e(a2e,bdr),e(L6,vdr),e(L6,yz),e(yz,Fdr),e(L6,Tdr),e(Te,Mdr),e(Te,x6),e(x6,n2e),e(n2e,Edr),e(x6,Cdr),e(x6,Lz),e(Lz,wdr),e(x6,Adr),e(Te,ydr),e(Te,$6),e($6,s2e),e(s2e,Ldr),e($6,xdr),e($6,xz),e(xz,$dr),e($6,kdr),e(Te,Sdr),e(Te,k6),e(k6,l2e),e(l2e,Rdr),e(k6,Bdr),e(k6,$z),e($z,Pdr),e(k6,Idr),e(Te,qdr),e(Te,S6),e(S6,i2e),e(i2e,Ndr),e(S6,jdr),e(S6,kz),e(kz,Ddr),e(S6,Gdr),e(Te,Odr),e(Te,R6),e(R6,d2e),e(d2e,Vdr),e(R6,Xdr),e(R6,Sz),e(Sz,zdr),e(R6,Qdr),e(Te,Wdr),e(Te,B6),e(B6,c2e),e(c2e,Hdr),e(B6,Udr),e(B6,Rz),e(Rz,Jdr),e(B6,Ydr),e(Cr,Kdr),M(P6,Cr,null),b(f,JBe,_),b(f,Dd,_),e(Dd,I6),e(I6,f2e),M(f8,f2e,null),e(Dd,Zdr),e(Dd,m2e),e(m2e,ecr),b(f,YBe,_),b(f,Ko,_),M(m8,Ko,null),e(Ko,ocr),e(Ko,Gd),e(Gd,rcr),e(Gd,Bz),e(Bz,tcr),e(Gd,acr),e(Gd,Pz),e(Pz,ncr),e(Gd,scr),e(Ko,lcr),e(Ko,g8),e(g8,icr),e(g8,g2e),e(g2e,dcr),e(g8,ccr),e(Ko,fcr),e(Ko,wt),M(h8,wt,null),e(wt,mcr),e(wt,h2e),e(h2e,gcr),e(wt,hcr),e(wt,Od),e(Od,pcr),e(Od,p2e),e(p2e,ucr),e(Od,_cr),e(Od,Iz),e(Iz,bcr),e(Od,vcr),e(wt,Fcr),M(q6,wt,null),e(Ko,Tcr),e(Ko,wr),M(p8,wr,null),e(wr,Mcr),e(wr,u2e),e(u2e,Ecr),e(wr,Ccr),e(wr,Ya),e(Ya,wcr),e(Ya,_2e),e(_2e,Acr),e(Ya,ycr),e(Ya,b2e),e(b2e,Lcr),e(Ya,xcr),e(Ya,v2e),e(v2e,$cr),e(Ya,kcr),e(wr,Scr),e(wr,u8),e(u8,N6),e(N6,F2e),e(F2e,Rcr),e(N6,Bcr),e(N6,qz),e(qz,Pcr),e(N6,Icr),e(u8,qcr),e(u8,j6),e(j6,T2e),e(T2e,Ncr),e(j6,jcr),e(j6,Nz),e(Nz,Dcr),e(j6,Gcr),e(wr,Ocr),M(D6,wr,null),b(f,KBe,_),b(f,Vd,_),e(Vd,G6),e(G6,M2e),M(_8,M2e,null),e(Vd,Vcr),e(Vd,E2e),e(E2e,Xcr),b(f,ZBe,_),b(f,Zo,_),M(b8,Zo,null),e(Zo,zcr),e(Zo,Xd),e(Xd,Qcr),e(Xd,jz),e(jz,Wcr),e(Xd,Hcr),e(Xd,Dz),e(Dz,Ucr),e(Xd,Jcr),e(Zo,Ycr),e(Zo,v8),e(v8,Kcr),e(v8,C2e),e(C2e,Zcr),e(v8,efr),e(Zo,ofr),e(Zo,At),M(F8,At,null),e(At,rfr),e(At,w2e),e(w2e,tfr),e(At,afr),e(At,zd),e(zd,nfr),e(zd,A2e),e(A2e,sfr),e(zd,lfr),e(zd,Gz),e(Gz,ifr),e(zd,dfr),e(At,cfr),M(O6,At,null),e(Zo,ffr),e(Zo,Ar),M(T8,Ar,null),e(Ar,mfr),e(Ar,y2e),e(y2e,gfr),e(Ar,hfr),e(Ar,Ka),e(Ka,pfr),e(Ka,L2e),e(L2e,ufr),e(Ka,_fr),e(Ka,x2e),e(x2e,bfr),e(Ka,vfr),e(Ka,$2e),e($2e,Ffr),e(Ka,Tfr),e(Ar,Mfr),e(Ar,ie),e(ie,V6),e(V6,k2e),e(k2e,Efr),e(V6,Cfr),e(V6,Oz),e(Oz,wfr),e(V6,Afr),e(ie,yfr),e(ie,X6),e(X6,S2e),e(S2e,Lfr),e(X6,xfr),e(X6,Vz),e(Vz,$fr),e(X6,kfr),e(ie,Sfr),e(ie,z6),e(z6,R2e),e(R2e,Rfr),e(z6,Bfr),e(z6,Xz),e(Xz,Pfr),e(z6,Ifr),e(ie,qfr),e(ie,Q6),e(Q6,B2e),e(B2e,Nfr),e(Q6,jfr),e(Q6,zz),e(zz,Dfr),e(Q6,Gfr),e(ie,Ofr),e(ie,W6),e(W6,P2e),e(P2e,Vfr),e(W6,Xfr),e(W6,Qz),e(Qz,zfr),e(W6,Qfr),e(ie,Wfr),e(ie,H6),e(H6,I2e),e(I2e,Hfr),e(H6,Ufr),e(H6,Wz),e(Wz,Jfr),e(H6,Yfr),e(ie,Kfr),e(ie,U6),e(U6,q2e),e(q2e,Zfr),e(U6,emr),e(U6,Hz),e(Hz,omr),e(U6,rmr),e(ie,tmr),e(ie,J6),e(J6,N2e),e(N2e,amr),e(J6,nmr),e(J6,Uz),e(Uz,smr),e(J6,lmr),e(ie,imr),e(ie,Y6),e(Y6,j2e),e(j2e,dmr),e(Y6,cmr),e(Y6,Jz),e(Jz,fmr),e(Y6,mmr),e(ie,gmr),e(ie,K6),e(K6,D2e),e(D2e,hmr),e(K6,pmr),e(K6,Yz),e(Yz,umr),e(K6,_mr),e(ie,bmr),e(ie,Z6),e(Z6,G2e),e(G2e,vmr),e(Z6,Fmr),e(Z6,Kz),e(Kz,Tmr),e(Z6,Mmr),e(ie,Emr),e(ie,eT),e(eT,O2e),e(O2e,Cmr),e(eT,wmr),e(eT,Zz),e(Zz,Amr),e(eT,ymr),e(ie,Lmr),e(ie,oT),e(oT,V2e),e(V2e,xmr),e(oT,$mr),e(oT,eQ),e(eQ,kmr),e(oT,Smr),e(ie,Rmr),e(ie,rT),e(rT,X2e),e(X2e,Bmr),e(rT,Pmr),e(rT,oQ),e(oQ,Imr),e(rT,qmr),e(ie,Nmr),e(ie,tT),e(tT,z2e),e(z2e,jmr),e(tT,Dmr),e(tT,rQ),e(rQ,Gmr),e(tT,Omr),e(ie,Vmr),e(ie,aT),e(aT,Q2e),e(Q2e,Xmr),e(aT,zmr),e(aT,tQ),e(tQ,Qmr),e(aT,Wmr),e(ie,Hmr),e(ie,nT),e(nT,W2e),e(W2e,Umr),e(nT,Jmr),e(nT,aQ),e(aQ,Ymr),e(nT,Kmr),e(ie,Zmr),e(ie,sT),e(sT,H2e),e(H2e,egr),e(sT,ogr),e(sT,nQ),e(nQ,rgr),e(sT,tgr),e(ie,agr),e(ie,lT),e(lT,U2e),e(U2e,ngr),e(lT,sgr),e(lT,sQ),e(sQ,lgr),e(lT,igr),e(ie,dgr),e(ie,iT),e(iT,J2e),e(J2e,cgr),e(iT,fgr),e(iT,lQ),e(lQ,mgr),e(iT,ggr),e(Ar,hgr),M(dT,Ar,null),b(f,ePe,_),b(f,Qd,_),e(Qd,cT),e(cT,Y2e),M(M8,Y2e,null),e(Qd,pgr),e(Qd,K2e),e(K2e,ugr),b(f,oPe,_),b(f,er,_),M(E8,er,null),e(er,_gr),e(er,Wd),e(Wd,bgr),e(Wd,iQ),e(iQ,vgr),e(Wd,Fgr),e(Wd,dQ),e(dQ,Tgr),e(Wd,Mgr),e(er,Egr),e(er,C8),e(C8,Cgr),e(C8,Z2e),e(Z2e,wgr),e(C8,Agr),e(er,ygr),e(er,yt),M(w8,yt,null),e(yt,Lgr),e(yt,e1e),e(e1e,xgr),e(yt,$gr),e(yt,Hd),e(Hd,kgr),e(Hd,o1e),e(o1e,Sgr),e(Hd,Rgr),e(Hd,cQ),e(cQ,Bgr),e(Hd,Pgr),e(yt,Igr),M(fT,yt,null),e(er,qgr),e(er,yr),M(A8,yr,null),e(yr,Ngr),e(yr,r1e),e(r1e,jgr),e(yr,Dgr),e(yr,Za),e(Za,Ggr),e(Za,t1e),e(t1e,Ogr),e(Za,Vgr),e(Za,a1e),e(a1e,Xgr),e(Za,zgr),e(Za,n1e),e(n1e,Qgr),e(Za,Wgr),e(yr,Hgr),e(yr,ye),e(ye,mT),e(mT,s1e),e(s1e,Ugr),e(mT,Jgr),e(mT,fQ),e(fQ,Ygr),e(mT,Kgr),e(ye,Zgr),e(ye,gT),e(gT,l1e),e(l1e,ehr),e(gT,ohr),e(gT,mQ),e(mQ,rhr),e(gT,thr),e(ye,ahr),e(ye,hT),e(hT,i1e),e(i1e,nhr),e(hT,shr),e(hT,gQ),e(gQ,lhr),e(hT,ihr),e(ye,dhr),e(ye,pT),e(pT,d1e),e(d1e,chr),e(pT,fhr),e(pT,hQ),e(hQ,mhr),e(pT,ghr),e(ye,hhr),e(ye,uT),e(uT,c1e),e(c1e,phr),e(uT,uhr),e(uT,pQ),e(pQ,_hr),e(uT,bhr),e(ye,vhr),e(ye,_T),e(_T,f1e),e(f1e,Fhr),e(_T,Thr),e(_T,uQ),e(uQ,Mhr),e(_T,Ehr),e(ye,Chr),e(ye,bT),e(bT,m1e),e(m1e,whr),e(bT,Ahr),e(bT,_Q),e(_Q,yhr),e(bT,Lhr),e(ye,xhr),e(ye,vT),e(vT,g1e),e(g1e,$hr),e(vT,khr),e(vT,bQ),e(bQ,Shr),e(vT,Rhr),e(ye,Bhr),e(ye,FT),e(FT,h1e),e(h1e,Phr),e(FT,Ihr),e(FT,vQ),e(vQ,qhr),e(FT,Nhr),e(ye,jhr),e(ye,TT),e(TT,p1e),e(p1e,Dhr),e(TT,Ghr),e(TT,FQ),e(FQ,Ohr),e(TT,Vhr),e(yr,Xhr),M(MT,yr,null),b(f,rPe,_),b(f,Ud,_),e(Ud,ET),e(ET,u1e),M(y8,u1e,null),e(Ud,zhr),e(Ud,_1e),e(_1e,Qhr),b(f,tPe,_),b(f,or,_),M(L8,or,null),e(or,Whr),e(or,Jd),e(Jd,Hhr),e(Jd,TQ),e(TQ,Uhr),e(Jd,Jhr),e(Jd,MQ),e(MQ,Yhr),e(Jd,Khr),e(or,Zhr),e(or,x8),e(x8,epr),e(x8,b1e),e(b1e,opr),e(x8,rpr),e(or,tpr),e(or,Lt),M($8,Lt,null),e(Lt,apr),e(Lt,v1e),e(v1e,npr),e(Lt,spr),e(Lt,Yd),e(Yd,lpr),e(Yd,F1e),e(F1e,ipr),e(Yd,dpr),e(Yd,EQ),e(EQ,cpr),e(Yd,fpr),e(Lt,mpr),M(CT,Lt,null),e(or,gpr),e(or,Lr),M(k8,Lr,null),e(Lr,hpr),e(Lr,T1e),e(T1e,ppr),e(Lr,upr),e(Lr,en),e(en,_pr),e(en,M1e),e(M1e,bpr),e(en,vpr),e(en,E1e),e(E1e,Fpr),e(en,Tpr),e(en,C1e),e(C1e,Mpr),e(en,Epr),e(Lr,Cpr),e(Lr,Z),e(Z,wT),e(wT,w1e),e(w1e,wpr),e(wT,Apr),e(wT,CQ),e(CQ,ypr),e(wT,Lpr),e(Z,xpr),e(Z,AT),e(AT,A1e),e(A1e,$pr),e(AT,kpr),e(AT,wQ),e(wQ,Spr),e(AT,Rpr),e(Z,Bpr),e(Z,yT),e(yT,y1e),e(y1e,Ppr),e(yT,Ipr),e(yT,AQ),e(AQ,qpr),e(yT,Npr),e(Z,jpr),e(Z,LT),e(LT,L1e),e(L1e,Dpr),e(LT,Gpr),e(LT,yQ),e(yQ,Opr),e(LT,Vpr),e(Z,Xpr),e(Z,xT),e(xT,x1e),e(x1e,zpr),e(xT,Qpr),e(xT,LQ),e(LQ,Wpr),e(xT,Hpr),e(Z,Upr),e(Z,$T),e($T,$1e),e($1e,Jpr),e($T,Ypr),e($T,xQ),e(xQ,Kpr),e($T,Zpr),e(Z,eur),e(Z,kT),e(kT,k1e),e(k1e,our),e(kT,rur),e(kT,$Q),e($Q,tur),e(kT,aur),e(Z,nur),e(Z,ST),e(ST,S1e),e(S1e,sur),e(ST,lur),e(ST,kQ),e(kQ,iur),e(ST,dur),e(Z,cur),e(Z,RT),e(RT,R1e),e(R1e,fur),e(RT,mur),e(RT,SQ),e(SQ,gur),e(RT,hur),e(Z,pur),e(Z,BT),e(BT,B1e),e(B1e,uur),e(BT,_ur),e(BT,RQ),e(RQ,bur),e(BT,vur),e(Z,Fur),e(Z,PT),e(PT,P1e),e(P1e,Tur),e(PT,Mur),e(PT,BQ),e(BQ,Eur),e(PT,Cur),e(Z,wur),e(Z,IT),e(IT,I1e),e(I1e,Aur),e(IT,yur),e(IT,PQ),e(PQ,Lur),e(IT,xur),e(Z,$ur),e(Z,qT),e(qT,q1e),e(q1e,kur),e(qT,Sur),e(qT,IQ),e(IQ,Rur),e(qT,Bur),e(Z,Pur),e(Z,NT),e(NT,N1e),e(N1e,Iur),e(NT,qur),e(NT,qQ),e(qQ,Nur),e(NT,jur),e(Z,Dur),e(Z,jT),e(jT,j1e),e(j1e,Gur),e(jT,Our),e(jT,NQ),e(NQ,Vur),e(jT,Xur),e(Z,zur),e(Z,DT),e(DT,D1e),e(D1e,Qur),e(DT,Wur),e(DT,jQ),e(jQ,Hur),e(DT,Uur),e(Z,Jur),e(Z,GT),e(GT,G1e),e(G1e,Yur),e(GT,Kur),e(GT,DQ),e(DQ,Zur),e(GT,e_r),e(Z,o_r),e(Z,OT),e(OT,O1e),e(O1e,r_r),e(OT,t_r),e(OT,GQ),e(GQ,a_r),e(OT,n_r),e(Z,s_r),e(Z,VT),e(VT,V1e),e(V1e,l_r),e(VT,i_r),e(VT,OQ),e(OQ,d_r),e(VT,c_r),e(Z,f_r),e(Z,XT),e(XT,X1e),e(X1e,m_r),e(XT,g_r),e(XT,VQ),e(VQ,h_r),e(XT,p_r),e(Z,u_r),e(Z,zT),e(zT,z1e),e(z1e,__r),e(zT,b_r),e(zT,XQ),e(XQ,v_r),e(zT,F_r),e(Z,T_r),e(Z,QT),e(QT,Q1e),e(Q1e,M_r),e(QT,E_r),e(QT,zQ),e(zQ,C_r),e(QT,w_r),e(Z,A_r),e(Z,WT),e(WT,W1e),e(W1e,y_r),e(WT,L_r),e(WT,QQ),e(QQ,x_r),e(WT,$_r),e(Z,k_r),e(Z,HT),e(HT,H1e),e(H1e,S_r),e(HT,R_r),e(HT,WQ),e(WQ,B_r),e(HT,P_r),e(Z,I_r),e(Z,UT),e(UT,U1e),e(U1e,q_r),e(UT,N_r),e(UT,HQ),e(HQ,j_r),e(UT,D_r),e(Z,G_r),e(Z,JT),e(JT,J1e),e(J1e,O_r),e(JT,V_r),e(JT,UQ),e(UQ,X_r),e(JT,z_r),e(Lr,Q_r),M(YT,Lr,null),b(f,aPe,_),b(f,Kd,_),e(Kd,KT),e(KT,Y1e),M(S8,Y1e,null),e(Kd,W_r),e(Kd,K1e),e(K1e,H_r),b(f,nPe,_),b(f,rr,_),M(R8,rr,null),e(rr,U_r),e(rr,Zd),e(Zd,J_r),e(Zd,JQ),e(JQ,Y_r),e(Zd,K_r),e(Zd,YQ),e(YQ,Z_r),e(Zd,e2r),e(rr,o2r),e(rr,B8),e(B8,r2r),e(B8,Z1e),e(Z1e,t2r),e(B8,a2r),e(rr,n2r),e(rr,xt),M(P8,xt,null),e(xt,s2r),e(xt,ebe),e(ebe,l2r),e(xt,i2r),e(xt,ec),e(ec,d2r),e(ec,obe),e(obe,c2r),e(ec,f2r),e(ec,KQ),e(KQ,m2r),e(ec,g2r),e(xt,h2r),M(ZT,xt,null),e(rr,p2r),e(rr,xr),M(I8,xr,null),e(xr,u2r),e(xr,rbe),e(rbe,_2r),e(xr,b2r),e(xr,on),e(on,v2r),e(on,tbe),e(tbe,F2r),e(on,T2r),e(on,abe),e(abe,M2r),e(on,E2r),e(on,nbe),e(nbe,C2r),e(on,w2r),e(xr,A2r),e(xr,pe),e(pe,eM),e(eM,sbe),e(sbe,y2r),e(eM,L2r),e(eM,ZQ),e(ZQ,x2r),e(eM,$2r),e(pe,k2r),e(pe,oM),e(oM,lbe),e(lbe,S2r),e(oM,R2r),e(oM,eW),e(eW,B2r),e(oM,P2r),e(pe,I2r),e(pe,rM),e(rM,ibe),e(ibe,q2r),e(rM,N2r),e(rM,oW),e(oW,j2r),e(rM,D2r),e(pe,G2r),e(pe,tM),e(tM,dbe),e(dbe,O2r),e(tM,V2r),e(tM,rW),e(rW,X2r),e(tM,z2r),e(pe,Q2r),e(pe,aM),e(aM,cbe),e(cbe,W2r),e(aM,H2r),e(aM,tW),e(tW,U2r),e(aM,J2r),e(pe,Y2r),e(pe,nM),e(nM,fbe),e(fbe,K2r),e(nM,Z2r),e(nM,aW),e(aW,e1r),e(nM,o1r),e(pe,r1r),e(pe,sM),e(sM,mbe),e(mbe,t1r),e(sM,a1r),e(sM,nW),e(nW,n1r),e(sM,s1r),e(pe,l1r),e(pe,lM),e(lM,gbe),e(gbe,i1r),e(lM,d1r),e(lM,sW),e(sW,c1r),e(lM,f1r),e(pe,m1r),e(pe,iM),e(iM,hbe),e(hbe,g1r),e(iM,h1r),e(iM,lW),e(lW,p1r),e(iM,u1r),e(pe,_1r),e(pe,dM),e(dM,pbe),e(pbe,b1r),e(dM,v1r),e(dM,iW),e(iW,F1r),e(dM,T1r),e(pe,M1r),e(pe,cM),e(cM,ube),e(ube,E1r),e(cM,C1r),e(cM,dW),e(dW,w1r),e(cM,A1r),e(pe,y1r),e(pe,fM),e(fM,_be),e(_be,L1r),e(fM,x1r),e(fM,cW),e(cW,$1r),e(fM,k1r),e(pe,S1r),e(pe,mM),e(mM,bbe),e(bbe,R1r),e(mM,B1r),e(mM,fW),e(fW,P1r),e(mM,I1r),e(pe,q1r),e(pe,gM),e(gM,vbe),e(vbe,N1r),e(gM,j1r),e(gM,mW),e(mW,D1r),e(gM,G1r),e(pe,O1r),e(pe,hM),e(hM,Fbe),e(Fbe,V1r),e(hM,X1r),e(hM,gW),e(gW,z1r),e(hM,Q1r),e(pe,W1r),e(pe,pM),e(pM,Tbe),e(Tbe,H1r),e(pM,U1r),e(pM,hW),e(hW,J1r),e(pM,Y1r),e(pe,K1r),e(pe,uM),e(uM,Mbe),e(Mbe,Z1r),e(uM,ebr),e(uM,pW),e(pW,obr),e(uM,rbr),e(xr,tbr),M(_M,xr,null),b(f,sPe,_),b(f,oc,_),e(oc,bM),e(bM,Ebe),M(q8,Ebe,null),e(oc,abr),e(oc,Cbe),e(Cbe,nbr),b(f,lPe,_),b(f,tr,_),M(N8,tr,null),e(tr,sbr),e(tr,rc),e(rc,lbr),e(rc,uW),e(uW,ibr),e(rc,dbr),e(rc,_W),e(_W,cbr),e(rc,fbr),e(tr,mbr),e(tr,j8),e(j8,gbr),e(j8,wbe),e(wbe,hbr),e(j8,pbr),e(tr,ubr),e(tr,$t),M(D8,$t,null),e($t,_br),e($t,Abe),e(Abe,bbr),e($t,vbr),e($t,tc),e(tc,Fbr),e(tc,ybe),e(ybe,Tbr),e(tc,Mbr),e(tc,bW),e(bW,Ebr),e(tc,Cbr),e($t,wbr),M(vM,$t,null),e(tr,Abr),e(tr,$r),M(G8,$r,null),e($r,ybr),e($r,Lbe),e(Lbe,Lbr),e($r,xbr),e($r,rn),e(rn,$br),e(rn,xbe),e(xbe,kbr),e(rn,Sbr),e(rn,$be),e($be,Rbr),e(rn,Bbr),e(rn,kbe),e(kbe,Pbr),e(rn,Ibr),e($r,qbr),e($r,Sbe),e(Sbe,FM),e(FM,Rbe),e(Rbe,Nbr),e(FM,jbr),e(FM,vW),e(vW,Dbr),e(FM,Gbr),e($r,Obr),M(TM,$r,null),b(f,iPe,_),b(f,ac,_),e(ac,MM),e(MM,Bbe),M(O8,Bbe,null),e(ac,Vbr),e(ac,Pbe),e(Pbe,Xbr),b(f,dPe,_),b(f,ar,_),M(V8,ar,null),e(ar,zbr),e(ar,nc),e(nc,Qbr),e(nc,FW),e(FW,Wbr),e(nc,Hbr),e(nc,TW),e(TW,Ubr),e(nc,Jbr),e(ar,Ybr),e(ar,X8),e(X8,Kbr),e(X8,Ibe),e(Ibe,Zbr),e(X8,e4r),e(ar,o4r),e(ar,kt),M(z8,kt,null),e(kt,r4r),e(kt,qbe),e(qbe,t4r),e(kt,a4r),e(kt,sc),e(sc,n4r),e(sc,Nbe),e(Nbe,s4r),e(sc,l4r),e(sc,MW),e(MW,i4r),e(sc,d4r),e(kt,c4r),M(EM,kt,null),e(ar,f4r),e(ar,kr),M(Q8,kr,null),e(kr,m4r),e(kr,jbe),e(jbe,g4r),e(kr,h4r),e(kr,tn),e(tn,p4r),e(tn,Dbe),e(Dbe,u4r),e(tn,_4r),e(tn,Gbe),e(Gbe,b4r),e(tn,v4r),e(tn,Obe),e(Obe,F4r),e(tn,T4r),e(kr,M4r),e(kr,de),e(de,CM),e(CM,Vbe),e(Vbe,E4r),e(CM,C4r),e(CM,EW),e(EW,w4r),e(CM,A4r),e(de,y4r),e(de,wM),e(wM,Xbe),e(Xbe,L4r),e(wM,x4r),e(wM,CW),e(CW,$4r),e(wM,k4r),e(de,S4r),e(de,AM),e(AM,zbe),e(zbe,R4r),e(AM,B4r),e(AM,wW),e(wW,P4r),e(AM,I4r),e(de,q4r),e(de,yM),e(yM,Qbe),e(Qbe,N4r),e(yM,j4r),e(yM,AW),e(AW,D4r),e(yM,G4r),e(de,O4r),e(de,LM),e(LM,Wbe),e(Wbe,V4r),e(LM,X4r),e(LM,yW),e(yW,z4r),e(LM,Q4r),e(de,W4r),e(de,xM),e(xM,Hbe),e(Hbe,H4r),e(xM,U4r),e(xM,LW),e(LW,J4r),e(xM,Y4r),e(de,K4r),e(de,$M),e($M,Ube),e(Ube,Z4r),e($M,evr),e($M,xW),e(xW,ovr),e($M,rvr),e(de,tvr),e(de,kM),e(kM,Jbe),e(Jbe,avr),e(kM,nvr),e(kM,$W),e($W,svr),e(kM,lvr),e(de,ivr),e(de,SM),e(SM,Ybe),e(Ybe,dvr),e(SM,cvr),e(SM,kW),e(kW,fvr),e(SM,mvr),e(de,gvr),e(de,RM),e(RM,Kbe),e(Kbe,hvr),e(RM,pvr),e(RM,SW),e(SW,uvr),e(RM,_vr),e(de,bvr),e(de,BM),e(BM,Zbe),e(Zbe,vvr),e(BM,Fvr),e(BM,RW),e(RW,Tvr),e(BM,Mvr),e(de,Evr),e(de,PM),e(PM,e4e),e(e4e,Cvr),e(PM,wvr),e(PM,BW),e(BW,Avr),e(PM,yvr),e(de,Lvr),e(de,IM),e(IM,o4e),e(o4e,xvr),e(IM,$vr),e(IM,PW),e(PW,kvr),e(IM,Svr),e(de,Rvr),e(de,qM),e(qM,r4e),e(r4e,Bvr),e(qM,Pvr),e(qM,IW),e(IW,Ivr),e(qM,qvr),e(de,Nvr),e(de,NM),e(NM,t4e),e(t4e,jvr),e(NM,Dvr),e(NM,qW),e(qW,Gvr),e(NM,Ovr),e(de,Vvr),e(de,jM),e(jM,a4e),e(a4e,Xvr),e(jM,zvr),e(jM,NW),e(NW,Qvr),e(jM,Wvr),e(de,Hvr),e(de,DM),e(DM,n4e),e(n4e,Uvr),e(DM,Jvr),e(DM,jW),e(jW,Yvr),e(DM,Kvr),e(de,Zvr),e(de,GM),e(GM,s4e),e(s4e,eFr),e(GM,oFr),e(GM,DW),e(DW,rFr),e(GM,tFr),e(de,aFr),e(de,OM),e(OM,l4e),e(l4e,nFr),e(OM,sFr),e(OM,GW),e(GW,lFr),e(OM,iFr),e(de,dFr),e(de,VM),e(VM,i4e),e(i4e,cFr),e(VM,fFr),e(VM,OW),e(OW,mFr),e(VM,gFr),e(kr,hFr),M(XM,kr,null),b(f,cPe,_),b(f,lc,_),e(lc,zM),e(zM,d4e),M(W8,d4e,null),e(lc,pFr),e(lc,c4e),e(c4e,uFr),b(f,fPe,_),b(f,nr,_),M(H8,nr,null),e(nr,_Fr),e(nr,ic),e(ic,bFr),e(ic,VW),e(VW,vFr),e(ic,FFr),e(ic,XW),e(XW,TFr),e(ic,MFr),e(nr,EFr),e(nr,U8),e(U8,CFr),e(U8,f4e),e(f4e,wFr),e(U8,AFr),e(nr,yFr),e(nr,St),M(J8,St,null),e(St,LFr),e(St,m4e),e(m4e,xFr),e(St,$Fr),e(St,dc),e(dc,kFr),e(dc,g4e),e(g4e,SFr),e(dc,RFr),e(dc,zW),e(zW,BFr),e(dc,PFr),e(St,IFr),M(QM,St,null),e(nr,qFr),e(nr,Sr),M(Y8,Sr,null),e(Sr,NFr),e(Sr,h4e),e(h4e,jFr),e(Sr,DFr),e(Sr,an),e(an,GFr),e(an,p4e),e(p4e,OFr),e(an,VFr),e(an,u4e),e(u4e,XFr),e(an,zFr),e(an,_4e),e(_4e,QFr),e(an,WFr),e(Sr,HFr),e(Sr,ce),e(ce,WM),e(WM,b4e),e(b4e,UFr),e(WM,JFr),e(WM,QW),e(QW,YFr),e(WM,KFr),e(ce,ZFr),e(ce,HM),e(HM,v4e),e(v4e,e0r),e(HM,o0r),e(HM,WW),e(WW,r0r),e(HM,t0r),e(ce,a0r),e(ce,UM),e(UM,F4e),e(F4e,n0r),e(UM,s0r),e(UM,HW),e(HW,l0r),e(UM,i0r),e(ce,d0r),e(ce,JM),e(JM,T4e),e(T4e,c0r),e(JM,f0r),e(JM,UW),e(UW,m0r),e(JM,g0r),e(ce,h0r),e(ce,YM),e(YM,M4e),e(M4e,p0r),e(YM,u0r),e(YM,JW),e(JW,_0r),e(YM,b0r),e(ce,v0r),e(ce,KM),e(KM,E4e),e(E4e,F0r),e(KM,T0r),e(KM,YW),e(YW,M0r),e(KM,E0r),e(ce,C0r),e(ce,ZM),e(ZM,C4e),e(C4e,w0r),e(ZM,A0r),e(ZM,KW),e(KW,y0r),e(ZM,L0r),e(ce,x0r),e(ce,eE),e(eE,w4e),e(w4e,$0r),e(eE,k0r),e(eE,ZW),e(ZW,S0r),e(eE,R0r),e(ce,B0r),e(ce,oE),e(oE,A4e),e(A4e,P0r),e(oE,I0r),e(oE,eH),e(eH,q0r),e(oE,N0r),e(ce,j0r),e(ce,rE),e(rE,y4e),e(y4e,D0r),e(rE,G0r),e(rE,oH),e(oH,O0r),e(rE,V0r),e(ce,X0r),e(ce,tE),e(tE,L4e),e(L4e,z0r),e(tE,Q0r),e(tE,rH),e(rH,W0r),e(tE,H0r),e(ce,U0r),e(ce,aE),e(aE,x4e),e(x4e,J0r),e(aE,Y0r),e(aE,tH),e(tH,K0r),e(aE,Z0r),e(ce,e6r),e(ce,nE),e(nE,$4e),e($4e,o6r),e(nE,r6r),e(nE,aH),e(aH,t6r),e(nE,a6r),e(ce,n6r),e(ce,sE),e(sE,k4e),e(k4e,s6r),e(sE,l6r),e(sE,nH),e(nH,i6r),e(sE,d6r),e(ce,c6r),e(ce,lE),e(lE,S4e),e(S4e,f6r),e(lE,m6r),e(lE,sH),e(sH,g6r),e(lE,h6r),e(ce,p6r),e(ce,iE),e(iE,R4e),e(R4e,u6r),e(iE,_6r),e(iE,lH),e(lH,b6r),e(iE,v6r),e(ce,F6r),e(ce,dE),e(dE,B4e),e(B4e,T6r),e(dE,M6r),e(dE,iH),e(iH,E6r),e(dE,C6r),e(ce,w6r),e(ce,cE),e(cE,P4e),e(P4e,A6r),e(cE,y6r),e(cE,dH),e(dH,L6r),e(cE,x6r),e(ce,$6r),e(ce,fE),e(fE,I4e),e(I4e,k6r),e(fE,S6r),e(fE,cH),e(cH,R6r),e(fE,B6r),e(ce,P6r),e(ce,mE),e(mE,q4e),e(q4e,I6r),e(mE,q6r),e(mE,fH),e(fH,N6r),e(mE,j6r),e(Sr,D6r),M(gE,Sr,null),b(f,mPe,_),b(f,cc,_),e(cc,hE),e(hE,N4e),M(K8,N4e,null),e(cc,G6r),e(cc,j4e),e(j4e,O6r),b(f,gPe,_),b(f,sr,_),M(Z8,sr,null),e(sr,V6r),e(sr,fc),e(fc,X6r),e(fc,mH),e(mH,z6r),e(fc,Q6r),e(fc,gH),e(gH,W6r),e(fc,H6r),e(sr,U6r),e(sr,e7),e(e7,J6r),e(e7,D4e),e(D4e,Y6r),e(e7,K6r),e(sr,Z6r),e(sr,Rt),M(o7,Rt,null),e(Rt,eTr),e(Rt,G4e),e(G4e,oTr),e(Rt,rTr),e(Rt,mc),e(mc,tTr),e(mc,O4e),e(O4e,aTr),e(mc,nTr),e(mc,hH),e(hH,sTr),e(mc,lTr),e(Rt,iTr),M(pE,Rt,null),e(sr,dTr),e(sr,Rr),M(r7,Rr,null),e(Rr,cTr),e(Rr,V4e),e(V4e,fTr),e(Rr,mTr),e(Rr,nn),e(nn,gTr),e(nn,X4e),e(X4e,hTr),e(nn,pTr),e(nn,z4e),e(z4e,uTr),e(nn,_Tr),e(nn,Q4e),e(Q4e,bTr),e(nn,vTr),e(Rr,FTr),e(Rr,W4e),e(W4e,uE),e(uE,H4e),e(H4e,TTr),e(uE,MTr),e(uE,pH),e(pH,ETr),e(uE,CTr),e(Rr,wTr),M(_E,Rr,null),b(f,hPe,_),b(f,gc,_),e(gc,bE),e(bE,U4e),M(t7,U4e,null),e(gc,ATr),e(gc,J4e),e(J4e,yTr),b(f,pPe,_),b(f,lr,_),M(a7,lr,null),e(lr,LTr),e(lr,hc),e(hc,xTr),e(hc,uH),e(uH,$Tr),e(hc,kTr),e(hc,_H),e(_H,STr),e(hc,RTr),e(lr,BTr),e(lr,n7),e(n7,PTr),e(n7,Y4e),e(Y4e,ITr),e(n7,qTr),e(lr,NTr),e(lr,Bt),M(s7,Bt,null),e(Bt,jTr),e(Bt,K4e),e(K4e,DTr),e(Bt,GTr),e(Bt,pc),e(pc,OTr),e(pc,Z4e),e(Z4e,VTr),e(pc,XTr),e(pc,bH),e(bH,zTr),e(pc,QTr),e(Bt,WTr),M(vE,Bt,null),e(lr,HTr),e(lr,Br),M(l7,Br,null),e(Br,UTr),e(Br,eve),e(eve,JTr),e(Br,YTr),e(Br,sn),e(sn,KTr),e(sn,ove),e(ove,ZTr),e(sn,eMr),e(sn,rve),e(rve,oMr),e(sn,rMr),e(sn,tve),e(tve,tMr),e(sn,aMr),e(Br,nMr),e(Br,ave),e(ave,FE),e(FE,nve),e(nve,sMr),e(FE,lMr),e(FE,vH),e(vH,iMr),e(FE,dMr),e(Br,cMr),M(TE,Br,null),b(f,uPe,_),b(f,uc,_),e(uc,ME),e(ME,sve),M(i7,sve,null),e(uc,fMr),e(uc,lve),e(lve,mMr),b(f,_Pe,_),b(f,ir,_),M(d7,ir,null),e(ir,gMr),e(ir,_c),e(_c,hMr),e(_c,FH),e(FH,pMr),e(_c,uMr),e(_c,TH),e(TH,_Mr),e(_c,bMr),e(ir,vMr),e(ir,c7),e(c7,FMr),e(c7,ive),e(ive,TMr),e(c7,MMr),e(ir,EMr),e(ir,Pt),M(f7,Pt,null),e(Pt,CMr),e(Pt,dve),e(dve,wMr),e(Pt,AMr),e(Pt,bc),e(bc,yMr),e(bc,cve),e(cve,LMr),e(bc,xMr),e(bc,MH),e(MH,$Mr),e(bc,kMr),e(Pt,SMr),M(EE,Pt,null),e(ir,RMr),e(ir,Pr),M(m7,Pr,null),e(Pr,BMr),e(Pr,fve),e(fve,PMr),e(Pr,IMr),e(Pr,ln),e(ln,qMr),e(ln,mve),e(mve,NMr),e(ln,jMr),e(ln,gve),e(gve,DMr),e(ln,GMr),e(ln,hve),e(hve,OMr),e(ln,VMr),e(Pr,XMr),e(Pr,oe),e(oe,CE),e(CE,pve),e(pve,zMr),e(CE,QMr),e(CE,EH),e(EH,WMr),e(CE,HMr),e(oe,UMr),e(oe,wE),e(wE,uve),e(uve,JMr),e(wE,YMr),e(wE,CH),e(CH,KMr),e(wE,ZMr),e(oe,eEr),e(oe,AE),e(AE,_ve),e(_ve,oEr),e(AE,rEr),e(AE,wH),e(wH,tEr),e(AE,aEr),e(oe,nEr),e(oe,yE),e(yE,bve),e(bve,sEr),e(yE,lEr),e(yE,AH),e(AH,iEr),e(yE,dEr),e(oe,cEr),e(oe,LE),e(LE,vve),e(vve,fEr),e(LE,mEr),e(LE,yH),e(yH,gEr),e(LE,hEr),e(oe,pEr),e(oe,xE),e(xE,Fve),e(Fve,uEr),e(xE,_Er),e(xE,LH),e(LH,bEr),e(xE,vEr),e(oe,FEr),e(oe,$E),e($E,Tve),e(Tve,TEr),e($E,MEr),e($E,xH),e(xH,EEr),e($E,CEr),e(oe,wEr),e(oe,kE),e(kE,Mve),e(Mve,AEr),e(kE,yEr),e(kE,$H),e($H,LEr),e(kE,xEr),e(oe,$Er),e(oe,SE),e(SE,Eve),e(Eve,kEr),e(SE,SEr),e(SE,kH),e(kH,REr),e(SE,BEr),e(oe,PEr),e(oe,RE),e(RE,Cve),e(Cve,IEr),e(RE,qEr),e(RE,SH),e(SH,NEr),e(RE,jEr),e(oe,DEr),e(oe,BE),e(BE,wve),e(wve,GEr),e(BE,OEr),e(BE,RH),e(RH,VEr),e(BE,XEr),e(oe,zEr),e(oe,PE),e(PE,Ave),e(Ave,QEr),e(PE,WEr),e(PE,BH),e(BH,HEr),e(PE,UEr),e(oe,JEr),e(oe,IE),e(IE,yve),e(yve,YEr),e(IE,KEr),e(IE,PH),e(PH,ZEr),e(IE,e5r),e(oe,o5r),e(oe,qE),e(qE,Lve),e(Lve,r5r),e(qE,t5r),e(qE,IH),e(IH,a5r),e(qE,n5r),e(oe,s5r),e(oe,NE),e(NE,xve),e(xve,l5r),e(NE,i5r),e(NE,qH),e(qH,d5r),e(NE,c5r),e(oe,f5r),e(oe,jE),e(jE,$ve),e($ve,m5r),e(jE,g5r),e(jE,NH),e(NH,h5r),e(jE,p5r),e(oe,u5r),e(oe,DE),e(DE,kve),e(kve,_5r),e(DE,b5r),e(DE,jH),e(jH,v5r),e(DE,F5r),e(oe,T5r),e(oe,GE),e(GE,Sve),e(Sve,M5r),e(GE,E5r),e(GE,DH),e(DH,C5r),e(GE,w5r),e(oe,A5r),e(oe,OE),e(OE,Rve),e(Rve,y5r),e(OE,L5r),e(OE,GH),e(GH,x5r),e(OE,$5r),e(oe,k5r),e(oe,VE),e(VE,Bve),e(Bve,S5r),e(VE,R5r),e(VE,OH),e(OH,B5r),e(VE,P5r),e(oe,I5r),e(oe,XE),e(XE,Pve),e(Pve,q5r),e(XE,N5r),e(XE,VH),e(VH,j5r),e(XE,D5r),e(oe,G5r),e(oe,zE),e(zE,Ive),e(Ive,O5r),e(zE,V5r),e(zE,XH),e(XH,X5r),e(zE,z5r),e(oe,Q5r),e(oe,QE),e(QE,qve),e(qve,W5r),e(QE,H5r),e(QE,zH),e(zH,U5r),e(QE,J5r),e(oe,Y5r),e(oe,WE),e(WE,Nve),e(Nve,K5r),e(WE,Z5r),e(WE,QH),e(QH,eCr),e(WE,oCr),e(oe,rCr),e(oe,HE),e(HE,jve),e(jve,tCr),e(HE,aCr),e(HE,WH),e(WH,nCr),e(HE,sCr),e(Pr,lCr),M(UE,Pr,null),b(f,bPe,_),b(f,vc,_),e(vc,JE),e(JE,Dve),M(g7,Dve,null),e(vc,iCr),e(vc,Gve),e(Gve,dCr),b(f,vPe,_),b(f,dr,_),M(h7,dr,null),e(dr,cCr),e(dr,Fc),e(Fc,fCr),e(Fc,HH),e(HH,mCr),e(Fc,gCr),e(Fc,UH),e(UH,hCr),e(Fc,pCr),e(dr,uCr),e(dr,p7),e(p7,_Cr),e(p7,Ove),e(Ove,bCr),e(p7,vCr),e(dr,FCr),e(dr,It),M(u7,It,null),e(It,TCr),e(It,Vve),e(Vve,MCr),e(It,ECr),e(It,Tc),e(Tc,CCr),e(Tc,Xve),e(Xve,wCr),e(Tc,ACr),e(Tc,JH),e(JH,yCr),e(Tc,LCr),e(It,xCr),M(YE,It,null),e(dr,$Cr),e(dr,Ir),M(_7,Ir,null),e(Ir,kCr),e(Ir,zve),e(zve,SCr),e(Ir,RCr),e(Ir,dn),e(dn,BCr),e(dn,Qve),e(Qve,PCr),e(dn,ICr),e(dn,Wve),e(Wve,qCr),e(dn,NCr),e(dn,Hve),e(Hve,jCr),e(dn,DCr),e(Ir,GCr),e(Ir,Hr),e(Hr,KE),e(KE,Uve),e(Uve,OCr),e(KE,VCr),e(KE,YH),e(YH,XCr),e(KE,zCr),e(Hr,QCr),e(Hr,ZE),e(ZE,Jve),e(Jve,WCr),e(ZE,HCr),e(ZE,KH),e(KH,UCr),e(ZE,JCr),e(Hr,YCr),e(Hr,e5),e(e5,Yve),e(Yve,KCr),e(e5,ZCr),e(e5,ZH),e(ZH,e3r),e(e5,o3r),e(Hr,r3r),e(Hr,o5),e(o5,Kve),e(Kve,t3r),e(o5,a3r),e(o5,eU),e(eU,n3r),e(o5,s3r),e(Hr,l3r),e(Hr,r5),e(r5,Zve),e(Zve,i3r),e(r5,d3r),e(r5,oU),e(oU,c3r),e(r5,f3r),e(Ir,m3r),M(t5,Ir,null),b(f,FPe,_),b(f,Mc,_),e(Mc,a5),e(a5,eFe),M(b7,eFe,null),e(Mc,g3r),e(Mc,oFe),e(oFe,h3r),b(f,TPe,_),b(f,cr,_),M(v7,cr,null),e(cr,p3r),e(cr,Ec),e(Ec,u3r),e(Ec,rU),e(rU,_3r),e(Ec,b3r),e(Ec,tU),e(tU,v3r),e(Ec,F3r),e(cr,T3r),e(cr,F7),e(F7,M3r),e(F7,rFe),e(rFe,E3r),e(F7,C3r),e(cr,w3r),e(cr,qt),M(T7,qt,null),e(qt,A3r),e(qt,tFe),e(tFe,y3r),e(qt,L3r),e(qt,Cc),e(Cc,x3r),e(Cc,aFe),e(aFe,$3r),e(Cc,k3r),e(Cc,aU),e(aU,S3r),e(Cc,R3r),e(qt,B3r),M(n5,qt,null),e(cr,P3r),e(cr,qr),M(M7,qr,null),e(qr,I3r),e(qr,nFe),e(nFe,q3r),e(qr,N3r),e(qr,cn),e(cn,j3r),e(cn,sFe),e(sFe,D3r),e(cn,G3r),e(cn,lFe),e(lFe,O3r),e(cn,V3r),e(cn,iFe),e(iFe,X3r),e(cn,z3r),e(qr,Q3r),e(qr,Me),e(Me,s5),e(s5,dFe),e(dFe,W3r),e(s5,H3r),e(s5,nU),e(nU,U3r),e(s5,J3r),e(Me,Y3r),e(Me,l5),e(l5,cFe),e(cFe,K3r),e(l5,Z3r),e(l5,sU),e(sU,ewr),e(l5,owr),e(Me,rwr),e(Me,i5),e(i5,fFe),e(fFe,twr),e(i5,awr),e(i5,lU),e(lU,nwr),e(i5,swr),e(Me,lwr),e(Me,d5),e(d5,mFe),e(mFe,iwr),e(d5,dwr),e(d5,iU),e(iU,cwr),e(d5,fwr),e(Me,mwr),e(Me,c5),e(c5,gFe),e(gFe,gwr),e(c5,hwr),e(c5,dU),e(dU,pwr),e(c5,uwr),e(Me,_wr),e(Me,f5),e(f5,hFe),e(hFe,bwr),e(f5,vwr),e(f5,cU),e(cU,Fwr),e(f5,Twr),e(Me,Mwr),e(Me,m5),e(m5,pFe),e(pFe,Ewr),e(m5,Cwr),e(m5,fU),e(fU,wwr),e(m5,Awr),e(Me,ywr),e(Me,g5),e(g5,uFe),e(uFe,Lwr),e(g5,xwr),e(g5,mU),e(mU,$wr),e(g5,kwr),e(Me,Swr),e(Me,h5),e(h5,_Fe),e(_Fe,Rwr),e(h5,Bwr),e(h5,gU),e(gU,Pwr),e(h5,Iwr),e(Me,qwr),e(Me,p5),e(p5,bFe),e(bFe,Nwr),e(p5,jwr),e(p5,hU),e(hU,Dwr),e(p5,Gwr),e(Me,Owr),e(Me,u5),e(u5,vFe),e(vFe,Vwr),e(u5,Xwr),e(u5,pU),e(pU,zwr),e(u5,Qwr),e(Me,Wwr),e(Me,_5),e(_5,FFe),e(FFe,Hwr),e(_5,Uwr),e(_5,uU),e(uU,Jwr),e(_5,Ywr),e(qr,Kwr),M(b5,qr,null),b(f,MPe,_),b(f,wc,_),e(wc,v5),e(v5,TFe),M(E7,TFe,null),e(wc,Zwr),e(wc,MFe),e(MFe,eAr),b(f,EPe,_),b(f,fr,_),M(C7,fr,null),e(fr,oAr),e(fr,Ac),e(Ac,rAr),e(Ac,_U),e(_U,tAr),e(Ac,aAr),e(Ac,bU),e(bU,nAr),e(Ac,sAr),e(fr,lAr),e(fr,w7),e(w7,iAr),e(w7,EFe),e(EFe,dAr),e(w7,cAr),e(fr,fAr),e(fr,Nt),M(A7,Nt,null),e(Nt,mAr),e(Nt,CFe),e(CFe,gAr),e(Nt,hAr),e(Nt,yc),e(yc,pAr),e(yc,wFe),e(wFe,uAr),e(yc,_Ar),e(yc,vU),e(vU,bAr),e(yc,vAr),e(Nt,FAr),M(F5,Nt,null),e(fr,TAr),e(fr,Nr),M(y7,Nr,null),e(Nr,MAr),e(Nr,AFe),e(AFe,EAr),e(Nr,CAr),e(Nr,fn),e(fn,wAr),e(fn,yFe),e(yFe,AAr),e(fn,yAr),e(fn,LFe),e(LFe,LAr),e(fn,xAr),e(fn,xFe),e(xFe,$Ar),e(fn,kAr),e(Nr,SAr),e(Nr,Le),e(Le,T5),e(T5,$Fe),e($Fe,RAr),e(T5,BAr),e(T5,FU),e(FU,PAr),e(T5,IAr),e(Le,qAr),e(Le,M5),e(M5,kFe),e(kFe,NAr),e(M5,jAr),e(M5,TU),e(TU,DAr),e(M5,GAr),e(Le,OAr),e(Le,E5),e(E5,SFe),e(SFe,VAr),e(E5,XAr),e(E5,MU),e(MU,zAr),e(E5,QAr),e(Le,WAr),e(Le,C5),e(C5,RFe),e(RFe,HAr),e(C5,UAr),e(C5,EU),e(EU,JAr),e(C5,YAr),e(Le,KAr),e(Le,w5),e(w5,BFe),e(BFe,ZAr),e(w5,eyr),e(w5,CU),e(CU,oyr),e(w5,ryr),e(Le,tyr),e(Le,A5),e(A5,PFe),e(PFe,ayr),e(A5,nyr),e(A5,wU),e(wU,syr),e(A5,lyr),e(Le,iyr),e(Le,y5),e(y5,IFe),e(IFe,dyr),e(y5,cyr),e(y5,AU),e(AU,fyr),e(y5,myr),e(Le,gyr),e(Le,L5),e(L5,qFe),e(qFe,hyr),e(L5,pyr),e(L5,yU),e(yU,uyr),e(L5,_yr),e(Le,byr),e(Le,x5),e(x5,NFe),e(NFe,vyr),e(x5,Fyr),e(x5,LU),e(LU,Tyr),e(x5,Myr),e(Le,Eyr),e(Le,$5),e($5,jFe),e(jFe,Cyr),e($5,wyr),e($5,xU),e(xU,Ayr),e($5,yyr),e(Nr,Lyr),M(k5,Nr,null),b(f,CPe,_),b(f,Lc,_),e(Lc,S5),e(S5,DFe),M(L7,DFe,null),e(Lc,xyr),e(Lc,GFe),e(GFe,$yr),b(f,wPe,_),b(f,mr,_),M(x7,mr,null),e(mr,kyr),e(mr,xc),e(xc,Syr),e(xc,$U),e($U,Ryr),e(xc,Byr),e(xc,kU),e(kU,Pyr),e(xc,Iyr),e(mr,qyr),e(mr,$7),e($7,Nyr),e($7,OFe),e(OFe,jyr),e($7,Dyr),e(mr,Gyr),e(mr,jt),M(k7,jt,null),e(jt,Oyr),e(jt,VFe),e(VFe,Vyr),e(jt,Xyr),e(jt,$c),e($c,zyr),e($c,XFe),e(XFe,Qyr),e($c,Wyr),e($c,SU),e(SU,Hyr),e($c,Uyr),e(jt,Jyr),M(R5,jt,null),e(mr,Yyr),e(mr,jr),M(S7,jr,null),e(jr,Kyr),e(jr,zFe),e(zFe,Zyr),e(jr,eLr),e(jr,mn),e(mn,oLr),e(mn,QFe),e(QFe,rLr),e(mn,tLr),e(mn,WFe),e(WFe,aLr),e(mn,nLr),e(mn,HFe),e(HFe,sLr),e(mn,lLr),e(jr,iLr),e(jr,Se),e(Se,B5),e(B5,UFe),e(UFe,dLr),e(B5,cLr),e(B5,RU),e(RU,fLr),e(B5,mLr),e(Se,gLr),e(Se,P5),e(P5,JFe),e(JFe,hLr),e(P5,pLr),e(P5,BU),e(BU,uLr),e(P5,_Lr),e(Se,bLr),e(Se,I5),e(I5,YFe),e(YFe,vLr),e(I5,FLr),e(I5,PU),e(PU,TLr),e(I5,MLr),e(Se,ELr),e(Se,q5),e(q5,KFe),e(KFe,CLr),e(q5,wLr),e(q5,IU),e(IU,ALr),e(q5,yLr),e(Se,LLr),e(Se,N5),e(N5,ZFe),e(ZFe,xLr),e(N5,$Lr),e(N5,qU),e(qU,kLr),e(N5,SLr),e(Se,RLr),e(Se,j5),e(j5,e0e),e(e0e,BLr),e(j5,PLr),e(j5,NU),e(NU,ILr),e(j5,qLr),e(Se,NLr),e(Se,D5),e(D5,o0e),e(o0e,jLr),e(D5,DLr),e(D5,jU),e(jU,GLr),e(D5,OLr),e(Se,VLr),e(Se,G5),e(G5,r0e),e(r0e,XLr),e(G5,zLr),e(G5,DU),e(DU,QLr),e(G5,WLr),e(Se,HLr),e(Se,O5),e(O5,t0e),e(t0e,ULr),e(O5,JLr),e(O5,GU),e(GU,YLr),e(O5,KLr),e(jr,ZLr),M(V5,jr,null),b(f,APe,_),b(f,kc,_),e(kc,X5),e(X5,a0e),M(R7,a0e,null),e(kc,e8r),e(kc,n0e),e(n0e,o8r),b(f,yPe,_),b(f,gr,_),M(B7,gr,null),e(gr,r8r),e(gr,Sc),e(Sc,t8r),e(Sc,OU),e(OU,a8r),e(Sc,n8r),e(Sc,VU),e(VU,s8r),e(Sc,l8r),e(gr,i8r),e(gr,P7),e(P7,d8r),e(P7,s0e),e(s0e,c8r),e(P7,f8r),e(gr,m8r),e(gr,Dt),M(I7,Dt,null),e(Dt,g8r),e(Dt,l0e),e(l0e,h8r),e(Dt,p8r),e(Dt,Rc),e(Rc,u8r),e(Rc,i0e),e(i0e,_8r),e(Rc,b8r),e(Rc,XU),e(XU,v8r),e(Rc,F8r),e(Dt,T8r),M(z5,Dt,null),e(gr,M8r),e(gr,Dr),M(q7,Dr,null),e(Dr,E8r),e(Dr,d0e),e(d0e,C8r),e(Dr,w8r),e(Dr,gn),e(gn,A8r),e(gn,c0e),e(c0e,y8r),e(gn,L8r),e(gn,f0e),e(f0e,x8r),e(gn,$8r),e(gn,m0e),e(m0e,k8r),e(gn,S8r),e(Dr,R8r),e(Dr,xe),e(xe,Q5),e(Q5,g0e),e(g0e,B8r),e(Q5,P8r),e(Q5,zU),e(zU,I8r),e(Q5,q8r),e(xe,N8r),e(xe,W5),e(W5,h0e),e(h0e,j8r),e(W5,D8r),e(W5,QU),e(QU,G8r),e(W5,O8r),e(xe,V8r),e(xe,H5),e(H5,p0e),e(p0e,X8r),e(H5,z8r),e(H5,WU),e(WU,Q8r),e(H5,W8r),e(xe,H8r),e(xe,U5),e(U5,u0e),e(u0e,U8r),e(U5,J8r),e(U5,HU),e(HU,Y8r),e(U5,K8r),e(xe,Z8r),e(xe,J5),e(J5,_0e),e(_0e,e7r),e(J5,o7r),e(J5,UU),e(UU,r7r),e(J5,t7r),e(xe,a7r),e(xe,Y5),e(Y5,b0e),e(b0e,n7r),e(Y5,s7r),e(Y5,JU),e(JU,l7r),e(Y5,i7r),e(xe,d7r),e(xe,K5),e(K5,v0e),e(v0e,c7r),e(K5,f7r),e(K5,YU),e(YU,m7r),e(K5,g7r),e(xe,h7r),e(xe,Z5),e(Z5,F0e),e(F0e,p7r),e(Z5,u7r),e(Z5,KU),e(KU,_7r),e(Z5,b7r),e(xe,v7r),e(xe,eC),e(eC,T0e),e(T0e,F7r),e(eC,T7r),e(eC,ZU),e(ZU,M7r),e(eC,E7r),e(xe,C7r),e(xe,oC),e(oC,M0e),e(M0e,w7r),e(oC,A7r),e(oC,eJ),e(eJ,y7r),e(oC,L7r),e(Dr,x7r),M(rC,Dr,null),b(f,LPe,_),b(f,Bc,_),e(Bc,tC),e(tC,E0e),M(N7,E0e,null),e(Bc,$7r),e(Bc,C0e),e(C0e,k7r),b(f,xPe,_),b(f,hr,_),M(j7,hr,null),e(hr,S7r),e(hr,Pc),e(Pc,R7r),e(Pc,oJ),e(oJ,B7r),e(Pc,P7r),e(Pc,rJ),e(rJ,I7r),e(Pc,q7r),e(hr,N7r),e(hr,D7),e(D7,j7r),e(D7,w0e),e(w0e,D7r),e(D7,G7r),e(hr,O7r),e(hr,Gt),M(G7,Gt,null),e(Gt,V7r),e(Gt,A0e),e(A0e,X7r),e(Gt,z7r),e(Gt,Ic),e(Ic,Q7r),e(Ic,y0e),e(y0e,W7r),e(Ic,H7r),e(Ic,tJ),e(tJ,U7r),e(Ic,J7r),e(Gt,Y7r),M(aC,Gt,null),e(hr,K7r),e(hr,Gr),M(O7,Gr,null),e(Gr,Z7r),e(Gr,L0e),e(L0e,exr),e(Gr,oxr),e(Gr,hn),e(hn,rxr),e(hn,x0e),e(x0e,txr),e(hn,axr),e(hn,$0e),e($0e,nxr),e(hn,sxr),e(hn,k0e),e(k0e,lxr),e(hn,ixr),e(Gr,dxr),e(Gr,$e),e($e,nC),e(nC,S0e),e(S0e,cxr),e(nC,fxr),e(nC,aJ),e(aJ,mxr),e(nC,gxr),e($e,hxr),e($e,sC),e(sC,R0e),e(R0e,pxr),e(sC,uxr),e(sC,nJ),e(nJ,_xr),e(sC,bxr),e($e,vxr),e($e,lC),e(lC,B0e),e(B0e,Fxr),e(lC,Txr),e(lC,sJ),e(sJ,Mxr),e(lC,Exr),e($e,Cxr),e($e,iC),e(iC,P0e),e(P0e,wxr),e(iC,Axr),e(iC,lJ),e(lJ,yxr),e(iC,Lxr),e($e,xxr),e($e,dC),e(dC,I0e),e(I0e,$xr),e(dC,kxr),e(dC,iJ),e(iJ,Sxr),e(dC,Rxr),e($e,Bxr),e($e,cC),e(cC,q0e),e(q0e,Pxr),e(cC,Ixr),e(cC,dJ),e(dJ,qxr),e(cC,Nxr),e($e,jxr),e($e,fC),e(fC,N0e),e(N0e,Dxr),e(fC,Gxr),e(fC,cJ),e(cJ,Oxr),e(fC,Vxr),e($e,Xxr),e($e,mC),e(mC,j0e),e(j0e,zxr),e(mC,Qxr),e(mC,fJ),e(fJ,Wxr),e(mC,Hxr),e($e,Uxr),e($e,gC),e(gC,D0e),e(D0e,Jxr),e(gC,Yxr),e(gC,mJ),e(mJ,Kxr),e(gC,Zxr),e($e,e9r),e($e,hC),e(hC,G0e),e(G0e,o9r),e(hC,r9r),e(hC,gJ),e(gJ,t9r),e(hC,a9r),e(Gr,n9r),M(pC,Gr,null),b(f,$Pe,_),b(f,qc,_),e(qc,uC),e(uC,O0e),M(V7,O0e,null),e(qc,s9r),e(qc,V0e),e(V0e,l9r),b(f,kPe,_),b(f,pr,_),M(X7,pr,null),e(pr,i9r),e(pr,Nc),e(Nc,d9r),e(Nc,hJ),e(hJ,c9r),e(Nc,f9r),e(Nc,pJ),e(pJ,m9r),e(Nc,g9r),e(pr,h9r),e(pr,z7),e(z7,p9r),e(z7,X0e),e(X0e,u9r),e(z7,_9r),e(pr,b9r),e(pr,Ot),M(Q7,Ot,null),e(Ot,v9r),e(Ot,z0e),e(z0e,F9r),e(Ot,T9r),e(Ot,jc),e(jc,M9r),e(jc,Q0e),e(Q0e,E9r),e(jc,C9r),e(jc,uJ),e(uJ,w9r),e(jc,A9r),e(Ot,y9r),M(_C,Ot,null),e(pr,L9r),e(pr,Or),M(W7,Or,null),e(Or,x9r),e(Or,W0e),e(W0e,$9r),e(Or,k9r),e(Or,pn),e(pn,S9r),e(pn,H0e),e(H0e,R9r),e(pn,B9r),e(pn,U0e),e(U0e,P9r),e(pn,I9r),e(pn,J0e),e(J0e,q9r),e(pn,N9r),e(Or,j9r),e(Or,je),e(je,bC),e(bC,Y0e),e(Y0e,D9r),e(bC,G9r),e(bC,_J),e(_J,O9r),e(bC,V9r),e(je,X9r),e(je,vC),e(vC,K0e),e(K0e,z9r),e(vC,Q9r),e(vC,bJ),e(bJ,W9r),e(vC,H9r),e(je,U9r),e(je,FC),e(FC,Z0e),e(Z0e,J9r),e(FC,Y9r),e(FC,vJ),e(vJ,K9r),e(FC,Z9r),e(je,e$r),e(je,TC),e(TC,e6e),e(e6e,o$r),e(TC,r$r),e(TC,FJ),e(FJ,t$r),e(TC,a$r),e(je,n$r),e(je,MC),e(MC,o6e),e(o6e,s$r),e(MC,l$r),e(MC,TJ),e(TJ,i$r),e(MC,d$r),e(je,c$r),e(je,EC),e(EC,r6e),e(r6e,f$r),e(EC,m$r),e(EC,MJ),e(MJ,g$r),e(EC,h$r),e(je,p$r),e(je,CC),e(CC,t6e),e(t6e,u$r),e(CC,_$r),e(CC,EJ),e(EJ,b$r),e(CC,v$r),e(je,F$r),e(je,wC),e(wC,a6e),e(a6e,T$r),e(wC,M$r),e(wC,CJ),e(CJ,E$r),e(wC,C$r),e(Or,w$r),M(AC,Or,null),b(f,SPe,_),b(f,Dc,_),e(Dc,yC),e(yC,n6e),M(H7,n6e,null),e(Dc,A$r),e(Dc,s6e),e(s6e,y$r),b(f,RPe,_),b(f,ur,_),M(U7,ur,null),e(ur,L$r),e(ur,Gc),e(Gc,x$r),e(Gc,wJ),e(wJ,$$r),e(Gc,k$r),e(Gc,AJ),e(AJ,S$r),e(Gc,R$r),e(ur,B$r),e(ur,J7),e(J7,P$r),e(J7,l6e),e(l6e,I$r),e(J7,q$r),e(ur,N$r),e(ur,Vt),M(Y7,Vt,null),e(Vt,j$r),e(Vt,i6e),e(i6e,D$r),e(Vt,G$r),e(Vt,Oc),e(Oc,O$r),e(Oc,d6e),e(d6e,V$r),e(Oc,X$r),e(Oc,yJ),e(yJ,z$r),e(Oc,Q$r),e(Vt,W$r),M(LC,Vt,null),e(ur,H$r),e(ur,Vr),M(K7,Vr,null),e(Vr,U$r),e(Vr,c6e),e(c6e,J$r),e(Vr,Y$r),e(Vr,un),e(un,K$r),e(un,f6e),e(f6e,Z$r),e(un,ekr),e(un,m6e),e(m6e,okr),e(un,rkr),e(un,g6e),e(g6e,tkr),e(un,akr),e(Vr,nkr),e(Vr,De),e(De,xC),e(xC,h6e),e(h6e,skr),e(xC,lkr),e(xC,LJ),e(LJ,ikr),e(xC,dkr),e(De,ckr),e(De,$C),e($C,p6e),e(p6e,fkr),e($C,mkr),e($C,xJ),e(xJ,gkr),e($C,hkr),e(De,pkr),e(De,kC),e(kC,u6e),e(u6e,ukr),e(kC,_kr),e(kC,$J),e($J,bkr),e(kC,vkr),e(De,Fkr),e(De,SC),e(SC,_6e),e(_6e,Tkr),e(SC,Mkr),e(SC,kJ),e(kJ,Ekr),e(SC,Ckr),e(De,wkr),e(De,RC),e(RC,b6e),e(b6e,Akr),e(RC,ykr),e(RC,SJ),e(SJ,Lkr),e(RC,xkr),e(De,$kr),e(De,BC),e(BC,v6e),e(v6e,kkr),e(BC,Skr),e(BC,RJ),e(RJ,Rkr),e(BC,Bkr),e(De,Pkr),e(De,PC),e(PC,F6e),e(F6e,Ikr),e(PC,qkr),e(PC,BJ),e(BJ,Nkr),e(PC,jkr),e(De,Dkr),e(De,IC),e(IC,T6e),e(T6e,Gkr),e(IC,Okr),e(IC,PJ),e(PJ,Vkr),e(IC,Xkr),e(Vr,zkr),M(qC,Vr,null),b(f,BPe,_),b(f,Vc,_),e(Vc,NC),e(NC,M6e),M(Z7,M6e,null),e(Vc,Qkr),e(Vc,E6e),e(E6e,Wkr),b(f,PPe,_),b(f,_r,_),M(ex,_r,null),e(_r,Hkr),e(_r,Xc),e(Xc,Ukr),e(Xc,IJ),e(IJ,Jkr),e(Xc,Ykr),e(Xc,qJ),e(qJ,Kkr),e(Xc,Zkr),e(_r,eSr),e(_r,ox),e(ox,oSr),e(ox,C6e),e(C6e,rSr),e(ox,tSr),e(_r,aSr),e(_r,Xt),M(rx,Xt,null),e(Xt,nSr),e(Xt,w6e),e(w6e,sSr),e(Xt,lSr),e(Xt,zc),e(zc,iSr),e(zc,A6e),e(A6e,dSr),e(zc,cSr),e(zc,NJ),e(NJ,fSr),e(zc,mSr),e(Xt,gSr),M(jC,Xt,null),e(_r,hSr),e(_r,Xr),M(tx,Xr,null),e(Xr,pSr),e(Xr,y6e),e(y6e,uSr),e(Xr,_Sr),e(Xr,_n),e(_n,bSr),e(_n,L6e),e(L6e,vSr),e(_n,FSr),e(_n,x6e),e(x6e,TSr),e(_n,MSr),e(_n,$6e),e($6e,ESr),e(_n,CSr),e(Xr,wSr),e(Xr,k6e),e(k6e,DC),e(DC,S6e),e(S6e,ASr),e(DC,ySr),e(DC,jJ),e(jJ,LSr),e(DC,xSr),e(Xr,$Sr),M(GC,Xr,null),b(f,IPe,_),b(f,Qc,_),e(Qc,OC),e(OC,R6e),M(ax,R6e,null),e(Qc,kSr),e(Qc,B6e),e(B6e,SSr),b(f,qPe,_),b(f,br,_),M(nx,br,null),e(br,RSr),e(br,Wc),e(Wc,BSr),e(Wc,DJ),e(DJ,PSr),e(Wc,ISr),e(Wc,GJ),e(GJ,qSr),e(Wc,NSr),e(br,jSr),e(br,sx),e(sx,DSr),e(sx,P6e),e(P6e,GSr),e(sx,OSr),e(br,VSr),e(br,zt),M(lx,zt,null),e(zt,XSr),e(zt,I6e),e(I6e,zSr),e(zt,QSr),e(zt,Hc),e(Hc,WSr),e(Hc,q6e),e(q6e,HSr),e(Hc,USr),e(Hc,OJ),e(OJ,JSr),e(Hc,YSr),e(zt,KSr),M(VC,zt,null),e(br,ZSr),e(br,zr),M(ix,zr,null),e(zr,eRr),e(zr,N6e),e(N6e,oRr),e(zr,rRr),e(zr,bn),e(bn,tRr),e(bn,j6e),e(j6e,aRr),e(bn,nRr),e(bn,D6e),e(D6e,sRr),e(bn,lRr),e(bn,G6e),e(G6e,iRr),e(bn,dRr),e(zr,cRr),e(zr,dx),e(dx,XC),e(XC,O6e),e(O6e,fRr),e(XC,mRr),e(XC,VJ),e(VJ,gRr),e(XC,hRr),e(dx,pRr),e(dx,zC),e(zC,V6e),e(V6e,uRr),e(zC,_Rr),e(zC,XJ),e(XJ,bRr),e(zC,vRr),e(zr,FRr),M(QC,zr,null),b(f,NPe,_),b(f,Uc,_),e(Uc,WC),e(WC,X6e),M(cx,X6e,null),e(Uc,TRr),e(Uc,z6e),e(z6e,MRr),b(f,jPe,_),b(f,vr,_),M(fx,vr,null),e(vr,ERr),e(vr,Jc),e(Jc,CRr),e(Jc,zJ),e(zJ,wRr),e(Jc,ARr),e(Jc,QJ),e(QJ,yRr),e(Jc,LRr),e(vr,xRr),e(vr,mx),e(mx,$Rr),e(mx,Q6e),e(Q6e,kRr),e(mx,SRr),e(vr,RRr),e(vr,Qt),M(gx,Qt,null),e(Qt,BRr),e(Qt,W6e),e(W6e,PRr),e(Qt,IRr),e(Qt,Yc),e(Yc,qRr),e(Yc,H6e),e(H6e,NRr),e(Yc,jRr),e(Yc,WJ),e(WJ,DRr),e(Yc,GRr),e(Qt,ORr),M(HC,Qt,null),e(vr,VRr),e(vr,Qr),M(hx,Qr,null),e(Qr,XRr),e(Qr,U6e),e(U6e,zRr),e(Qr,QRr),e(Qr,vn),e(vn,WRr),e(vn,J6e),e(J6e,HRr),e(vn,URr),e(vn,Y6e),e(Y6e,JRr),e(vn,YRr),e(vn,K6e),e(K6e,KRr),e(vn,ZRr),e(Qr,eBr),e(Qr,Z6e),e(Z6e,UC),e(UC,eTe),e(eTe,oBr),e(UC,rBr),e(UC,HJ),e(HJ,tBr),e(UC,aBr),e(Qr,nBr),M(JC,Qr,null),DPe=!0},p(f,[_]){const px={};_&2&&(px.$$scope={dirty:_,ctx:f}),sf.$set(px);const oTe={};_&2&&(oTe.$$scope={dirty:_,ctx:f}),ag.$set(oTe);const rTe={};_&2&&(rTe.$$scope={dirty:_,ctx:f}),Ig.$set(rTe);const tTe={};_&2&&(tTe.$$scope={dirty:_,ctx:f}),ih.$set(tTe);const ux={};_&2&&(ux.$$scope={dirty:_,ctx:f}),dh.$set(ux);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),Ah.$set(aTe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),yh.$set(Fn);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),$h.$set(nTe);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),bu.$set(sTe);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),Fu.$set(lTe);const _x={};_&2&&(_x.$$scope={dirty:_,ctx:f}),l_.$set(_x);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),d_.$set(iTe);const bx={};_&2&&(bx.$$scope={dirty:_,ctx:f}),Q_.$set(bx);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),H_.$set(dTe);const vx={};_&2&&(vx.$$scope={dirty:_,ctx:f}),k2.$set(vx);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),R2.$set(cTe);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),K2.$set(fTe);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),e1.$set(mTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),U1.$set(Kc);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),Y1.$set(gTe);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),yb.$set(hTe);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),xb.$set(pTe);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:f}),Ib.$set(Fx);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),Nb.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),v4.$set(_Te);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),T4.$set(bTe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),iv.$set(Ur);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),cv.$set(Tx);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),gv.$set(vTe);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),pv.$set(Mx);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),Lv.$set(FTe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),$v.$set(Jr);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),Rv.$set(TTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Pv.$set(Zc);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),zv.$set(MTe);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),Wv.$set(ETe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),Zv.$set(y);const YC={};_&2&&(YC.$$scope={dirty:_,ctx:f}),oF.$set(YC);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),mF.$set(CTe);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),hF.$set(wTe);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),bF.$set(KC);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),FF.$set(ATe);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),AF.$set(yTe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),LF.$set(ZC);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),RF.$set(LTe);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),PF.$set(xTe);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),NF.$set(e3);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),DF.$set($Te);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),VF.$set(kTe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),zF.$set(o3);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),YF.$set(STe);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),ZF.$set(RTe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),r0.$set(r3);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),a0.$set(BTe);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),H0.$set(PTe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),J0.$set(t3);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),F6.$set(ITe);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),M6.$set(qTe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),P6.$set(a3);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),q6.$set(NTe);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),D6.$set(jTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),O6.$set(n3);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),dT.$set(DTe);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),fT.$set(GTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),MT.$set(s3);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),CT.$set(OTe);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),YT.$set(VTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),ZT.$set(l3);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),_M.$set(XTe);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),vM.$set(zTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),TM.$set(i3);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),EM.$set(QTe);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),XM.$set(WTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),QM.$set(d3);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),gE.$set(HTe);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),pE.$set(UTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),_E.$set(c3);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),vE.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),TE.$set(YTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),EE.$set(f3);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),UE.$set(KTe);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),YE.$set(ZTe);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),t5.$set(m3);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),n5.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),b5.$set(oMe);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),F5.$set(g3);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),k5.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),R5.$set(tMe);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),V5.$set(h3);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),z5.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),rC.$set(nMe);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),aC.$set(p3);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),pC.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),_C.$set(lMe);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),AC.$set(u3);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),LC.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),qC.$set(dMe);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),jC.$set(_3);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),GC.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),VC.$set(fMe);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),QC.$set(b3);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),HC.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),JC.$set(gMe)},i(f){DPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(uA.$$.fragment,f),E(_A.$$.fragment,f),E(sf.$$.fragment,f),E(bA.$$.fragment,f),E(vA.$$.fragment,f),E(MA.$$.fragment,f),E(ag.$$.fragment,f),E(EA.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(LA.$$.fragment,f),E(Ig.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(BA.$$.fragment,f),E(ih.$$.fragment,f),E(dh.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(DA.$$.fragment,f),E(Ah.$$.fragment,f),E(yh.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(zA.$$.fragment,f),E($h.$$.fragment,f),E(QA.$$.fragment,f),E(bu.$$.fragment,f),E(WA.$$.fragment,f),E(HA.$$.fragment,f),E(JA.$$.fragment,f),E(Fu.$$.fragment,f),E(YA.$$.fragment,f),E(l_.$$.fragment,f),E(KA.$$.fragment,f),E(ZA.$$.fragment,f),E(oy.$$.fragment,f),E(d_.$$.fragment,f),E(ry.$$.fragment,f),E(Q_.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(H_.$$.fragment,f),E(ly.$$.fragment,f),E(k2.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(R2.$$.fragment,f),E(my.$$.fragment,f),E(K2.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(e1.$$.fragment,f),E(_y.$$.fragment,f),E(U1.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(Y1.$$.fragment,f),E(My.$$.fragment,f),E(yb.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(xb.$$.fragment,f),E(yy.$$.fragment,f),E(Ib.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(Nb.$$.fragment,f),E(Sy.$$.fragment,f),E(v4.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(T4.$$.fragment,f),E(qy.$$.fragment,f),E(iv.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(cv.$$.fragment,f),E(Oy.$$.fragment,f),E(gv.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(pv.$$.fragment,f),E(Wy.$$.fragment,f),E(Lv.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E($v.$$.fragment,f),E(Ky.$$.fragment,f),E(Rv.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(Pv.$$.fragment,f),E(tL.$$.fragment,f),E(zv.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Wv.$$.fragment,f),E(iL.$$.fragment,f),E(Zv.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(oF.$$.fragment,f),E(gL.$$.fragment,f),E(mF.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(hF.$$.fragment,f),E(bL.$$.fragment,f),E(bF.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(FF.$$.fragment,f),E(CL.$$.fragment,f),E(AF.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(LF.$$.fragment,f),E(xL.$$.fragment,f),E(RF.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(PF.$$.fragment,f),E(BL.$$.fragment,f),E(NF.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(DF.$$.fragment,f),E(jL.$$.fragment,f),E(VF.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(zF.$$.fragment,f),E(XL.$$.fragment,f),E(YF.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(ZF.$$.fragment,f),E(UL.$$.fragment,f),E(r0.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(a0.$$.fragment,f),E(e8.$$.fragment,f),E(H0.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(J0.$$.fragment,f),E(n8.$$.fragment,f),E(F6.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(M6.$$.fragment,f),E(c8.$$.fragment,f),E(P6.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(q6.$$.fragment,f),E(p8.$$.fragment,f),E(D6.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(O6.$$.fragment,f),E(T8.$$.fragment,f),E(dT.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(fT.$$.fragment,f),E(A8.$$.fragment,f),E(MT.$$.fragment,f),E(y8.$$.fragment,f),E(L8.$$.fragment,f),E($8.$$.fragment,f),E(CT.$$.fragment,f),E(k8.$$.fragment,f),E(YT.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(ZT.$$.fragment,f),E(I8.$$.fragment,f),E(_M.$$.fragment,f),E(q8.$$.fragment,f),E(N8.$$.fragment,f),E(D8.$$.fragment,f),E(vM.$$.fragment,f),E(G8.$$.fragment,f),E(TM.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(EM.$$.fragment,f),E(Q8.$$.fragment,f),E(XM.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(QM.$$.fragment,f),E(Y8.$$.fragment,f),E(gE.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o7.$$.fragment,f),E(pE.$$.fragment,f),E(r7.$$.fragment,f),E(_E.$$.fragment,f),E(t7.$$.fragment,f),E(a7.$$.fragment,f),E(s7.$$.fragment,f),E(vE.$$.fragment,f),E(l7.$$.fragment,f),E(TE.$$.fragment,f),E(i7.$$.fragment,f),E(d7.$$.fragment,f),E(f7.$$.fragment,f),E(EE.$$.fragment,f),E(m7.$$.fragment,f),E(UE.$$.fragment,f),E(g7.$$.fragment,f),E(h7.$$.fragment,f),E(u7.$$.fragment,f),E(YE.$$.fragment,f),E(_7.$$.fragment,f),E(t5.$$.fragment,f),E(b7.$$.fragment,f),E(v7.$$.fragment,f),E(T7.$$.fragment,f),E(n5.$$.fragment,f),E(M7.$$.fragment,f),E(b5.$$.fragment,f),E(E7.$$.fragment,f),E(C7.$$.fragment,f),E(A7.$$.fragment,f),E(F5.$$.fragment,f),E(y7.$$.fragment,f),E(k5.$$.fragment,f),E(L7.$$.fragment,f),E(x7.$$.fragment,f),E(k7.$$.fragment,f),E(R5.$$.fragment,f),E(S7.$$.fragment,f),E(V5.$$.fragment,f),E(R7.$$.fragment,f),E(B7.$$.fragment,f),E(I7.$$.fragment,f),E(z5.$$.fragment,f),E(q7.$$.fragment,f),E(rC.$$.fragment,f),E(N7.$$.fragment,f),E(j7.$$.fragment,f),E(G7.$$.fragment,f),E(aC.$$.fragment,f),E(O7.$$.fragment,f),E(pC.$$.fragment,f),E(V7.$$.fragment,f),E(X7.$$.fragment,f),E(Q7.$$.fragment,f),E(_C.$$.fragment,f),E(W7.$$.fragment,f),E(AC.$$.fragment,f),E(H7.$$.fragment,f),E(U7.$$.fragment,f),E(Y7.$$.fragment,f),E(LC.$$.fragment,f),E(K7.$$.fragment,f),E(qC.$$.fragment,f),E(Z7.$$.fragment,f),E(ex.$$.fragment,f),E(rx.$$.fragment,f),E(jC.$$.fragment,f),E(tx.$$.fragment,f),E(GC.$$.fragment,f),E(ax.$$.fragment,f),E(nx.$$.fragment,f),E(lx.$$.fragment,f),E(VC.$$.fragment,f),E(ix.$$.fragment,f),E(QC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(HC.$$.fragment,f),E(hx.$$.fragment,f),E(JC.$$.fragment,f),DPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(uA.$$.fragment,f),C(_A.$$.fragment,f),C(sf.$$.fragment,f),C(bA.$$.fragment,f),C(vA.$$.fragment,f),C(MA.$$.fragment,f),C(ag.$$.fragment,f),C(EA.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(LA.$$.fragment,f),C(Ig.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(BA.$$.fragment,f),C(ih.$$.fragment,f),C(dh.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(DA.$$.fragment,f),C(Ah.$$.fragment,f),C(yh.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(zA.$$.fragment,f),C($h.$$.fragment,f),C(QA.$$.fragment,f),C(bu.$$.fragment,f),C(WA.$$.fragment,f),C(HA.$$.fragment,f),C(JA.$$.fragment,f),C(Fu.$$.fragment,f),C(YA.$$.fragment,f),C(l_.$$.fragment,f),C(KA.$$.fragment,f),C(ZA.$$.fragment,f),C(oy.$$.fragment,f),C(d_.$$.fragment,f),C(ry.$$.fragment,f),C(Q_.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(H_.$$.fragment,f),C(ly.$$.fragment,f),C(k2.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(R2.$$.fragment,f),C(my.$$.fragment,f),C(K2.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(e1.$$.fragment,f),C(_y.$$.fragment,f),C(U1.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(Y1.$$.fragment,f),C(My.$$.fragment,f),C(yb.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(xb.$$.fragment,f),C(yy.$$.fragment,f),C(Ib.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(Nb.$$.fragment,f),C(Sy.$$.fragment,f),C(v4.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(T4.$$.fragment,f),C(qy.$$.fragment,f),C(iv.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(cv.$$.fragment,f),C(Oy.$$.fragment,f),C(gv.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(pv.$$.fragment,f),C(Wy.$$.fragment,f),C(Lv.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C($v.$$.fragment,f),C(Ky.$$.fragment,f),C(Rv.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(Pv.$$.fragment,f),C(tL.$$.fragment,f),C(zv.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Wv.$$.fragment,f),C(iL.$$.fragment,f),C(Zv.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(oF.$$.fragment,f),C(gL.$$.fragment,f),C(mF.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(hF.$$.fragment,f),C(bL.$$.fragment,f),C(bF.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(FF.$$.fragment,f),C(CL.$$.fragment,f),C(AF.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(LF.$$.fragment,f),C(xL.$$.fragment,f),C(RF.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(PF.$$.fragment,f),C(BL.$$.fragment,f),C(NF.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(DF.$$.fragment,f),C(jL.$$.fragment,f),C(VF.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(zF.$$.fragment,f),C(XL.$$.fragment,f),C(YF.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(ZF.$$.fragment,f),C(UL.$$.fragment,f),C(r0.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(a0.$$.fragment,f),C(e8.$$.fragment,f),C(H0.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(J0.$$.fragment,f),C(n8.$$.fragment,f),C(F6.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(M6.$$.fragment,f),C(c8.$$.fragment,f),C(P6.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(q6.$$.fragment,f),C(p8.$$.fragment,f),C(D6.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(O6.$$.fragment,f),C(T8.$$.fragment,f),C(dT.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(fT.$$.fragment,f),C(A8.$$.fragment,f),C(MT.$$.fragment,f),C(y8.$$.fragment,f),C(L8.$$.fragment,f),C($8.$$.fragment,f),C(CT.$$.fragment,f),C(k8.$$.fragment,f),C(YT.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(ZT.$$.fragment,f),C(I8.$$.fragment,f),C(_M.$$.fragment,f),C(q8.$$.fragment,f),C(N8.$$.fragment,f),C(D8.$$.fragment,f),C(vM.$$.fragment,f),C(G8.$$.fragment,f),C(TM.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(EM.$$.fragment,f),C(Q8.$$.fragment,f),C(XM.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(QM.$$.fragment,f),C(Y8.$$.fragment,f),C(gE.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o7.$$.fragment,f),C(pE.$$.fragment,f),C(r7.$$.fragment,f),C(_E.$$.fragment,f),C(t7.$$.fragment,f),C(a7.$$.fragment,f),C(s7.$$.fragment,f),C(vE.$$.fragment,f),C(l7.$$.fragment,f),C(TE.$$.fragment,f),C(i7.$$.fragment,f),C(d7.$$.fragment,f),C(f7.$$.fragment,f),C(EE.$$.fragment,f),C(m7.$$.fragment,f),C(UE.$$.fragment,f),C(g7.$$.fragment,f),C(h7.$$.fragment,f),C(u7.$$.fragment,f),C(YE.$$.fragment,f),C(_7.$$.fragment,f),C(t5.$$.fragment,f),C(b7.$$.fragment,f),C(v7.$$.fragment,f),C(T7.$$.fragment,f),C(n5.$$.fragment,f),C(M7.$$.fragment,f),C(b5.$$.fragment,f),C(E7.$$.fragment,f),C(C7.$$.fragment,f),C(A7.$$.fragment,f),C(F5.$$.fragment,f),C(y7.$$.fragment,f),C(k5.$$.fragment,f),C(L7.$$.fragment,f),C(x7.$$.fragment,f),C(k7.$$.fragment,f),C(R5.$$.fragment,f),C(S7.$$.fragment,f),C(V5.$$.fragment,f),C(R7.$$.fragment,f),C(B7.$$.fragment,f),C(I7.$$.fragment,f),C(z5.$$.fragment,f),C(q7.$$.fragment,f),C(rC.$$.fragment,f),C(N7.$$.fragment,f),C(j7.$$.fragment,f),C(G7.$$.fragment,f),C(aC.$$.fragment,f),C(O7.$$.fragment,f),C(pC.$$.fragment,f),C(V7.$$.fragment,f),C(X7.$$.fragment,f),C(Q7.$$.fragment,f),C(_C.$$.fragment,f),C(W7.$$.fragment,f),C(AC.$$.fragment,f),C(H7.$$.fragment,f),C(U7.$$.fragment,f),C(Y7.$$.fragment,f),C(LC.$$.fragment,f),C(K7.$$.fragment,f),C(qC.$$.fragment,f),C(Z7.$$.fragment,f),C(ex.$$.fragment,f),C(rx.$$.fragment,f),C(jC.$$.fragment,f),C(tx.$$.fragment,f),C(GC.$$.fragment,f),C(ax.$$.fragment,f),C(nx.$$.fragment,f),C(lx.$$.fragment,f),C(VC.$$.fragment,f),C(ix.$$.fragment,f),C(QC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(HC.$$.fragment,f),C(hx.$$.fragment,f),C(JC.$$.fragment,f),DPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(qe),f&&t(Ve),f&&t(tf),w(ba,f),f&&t(Xe),f&&t(Ae),f&&t(To),f&&t(va),f&&t(jRe),f&&t(ii),w(uA),f&&t(DRe),f&&t(wn),f&&t(GRe),w(_A,f),f&&t(ORe),f&&t(S9),f&&t(VRe),w(sf,f),f&&t(XRe),f&&t(di),w(bA),f&&t(zRe),f&&t(Mo),w(vA),w(MA),w(ag),w(EA),f&&t(QRe),f&&t(fi),w(CA),f&&t(WRe),f&&t(Eo),w(wA),w(LA),w(Ig),w(xA),f&&t(HRe),f&&t(mi),w($A),f&&t(URe),f&&t(Co),w(kA),w(BA),w(ih),w(dh),w(PA),f&&t(JRe),f&&t(gi),w(IA),f&&t(YRe),f&&t(wo),w(qA),w(DA),w(Ah),w(yh),w(GA),f&&t(KRe),f&&t(pi),w(OA),f&&t(ZRe),f&&t(Ao),w(VA),w(zA),w($h),w(QA),w(bu),f&&t(eBe),f&&t(bi),w(WA),f&&t(oBe),f&&t(yo),w(HA),w(JA),w(Fu),w(YA),w(l_),f&&t(rBe),f&&t(Ti),w(KA),f&&t(tBe),f&&t(Lo),w(ZA),w(oy),w(d_),w(ry),w(Q_),f&&t(aBe),f&&t(Ci),w(ty),f&&t(nBe),f&&t(xo),w(ay),w(sy),w(H_),w(ly),w(k2),f&&t(sBe),f&&t(yi),w(iy),f&&t(lBe),f&&t($o),w(dy),w(fy),w(R2),w(my),w(K2),f&&t(iBe),f&&t($i),w(gy),f&&t(dBe),f&&t(ko),w(hy),w(uy),w(e1),w(_y),w(U1),f&&t(cBe),f&&t(Ri),w(by),f&&t(fBe),f&&t(So),w(vy),w(Ty),w(Y1),w(My),w(yb),f&&t(mBe),f&&t(Ii),w(Ey),f&&t(gBe),f&&t(Ro),w(Cy),w(Ay),w(xb),w(yy),w(Ib),f&&t(hBe),f&&t(ji),w(Ly),f&&t(pBe),f&&t(Bo),w(xy),w(ky),w(Nb),w(Sy),w(v4),f&&t(uBe),f&&t(Oi),w(Ry),f&&t(_Be),f&&t(Po),w(By),w(Iy),w(T4),w(qy),w(iv),f&&t(bBe),f&&t(zi),w(Ny),f&&t(vBe),f&&t(Io),w(jy),w(Gy),w(cv),w(Oy),w(gv),f&&t(FBe),f&&t(Hi),w(Vy),f&&t(TBe),f&&t(qo),w(Xy),w(Qy),w(pv),w(Wy),w(Lv),f&&t(MBe),f&&t(Yi),w(Hy),f&&t(EBe),f&&t(No),w(Uy),w(Yy),w($v),w(Ky),w(Rv),f&&t(CBe),f&&t(ed),w(Zy),f&&t(wBe),f&&t(jo),w(eL),w(rL),w(Pv),w(tL),w(zv),f&&t(ABe),f&&t(td),w(aL),f&&t(yBe),f&&t(Do),w(nL),w(lL),w(Wv),w(iL),w(Zv),f&&t(LBe),f&&t(sd),w(dL),f&&t(xBe),f&&t(Go),w(cL),w(mL),w(oF),w(gL),w(mF),f&&t($Be),f&&t(dd),w(hL),f&&t(kBe),f&&t(Oo),w(pL),w(_L),w(hF),w(bL),w(bF),f&&t(SBe),f&&t(md),w(FL),f&&t(RBe),f&&t(Vo),w(TL),w(EL),w(FF),w(CL),w(AF),f&&t(BBe),f&&t(pd),w(wL),f&&t(PBe),f&&t(Xo),w(AL),w(LL),w(LF),w(xL),w(RF),f&&t(IBe),f&&t(vd),w($L),f&&t(qBe),f&&t(zo),w(kL),w(RL),w(PF),w(BL),w(NF),f&&t(NBe),f&&t(Md),w(PL),f&&t(jBe),f&&t(Qo),w(IL),w(NL),w(DF),w(jL),w(VF),f&&t(DBe),f&&t(wd),w(DL),f&&t(GBe),f&&t(Wo),w(GL),w(VL),w(zF),w(XL),w(YF),f&&t(OBe),f&&t(Ld),w(zL),f&&t(VBe),f&&t(Ho),w(QL),w(HL),w(ZF),w(UL),w(r0),f&&t(XBe),f&&t(kd),w(JL),f&&t(zBe),f&&t(Uo),w(YL),w(ZL),w(a0),w(e8),w(H0),f&&t(QBe),f&&t(Bd),w(o8),f&&t(WBe),f&&t(Jo),w(r8),w(a8),w(J0),w(n8),w(F6),f&&t(HBe),f&&t(qd),w(s8),f&&t(UBe),f&&t(Yo),w(l8),w(d8),w(M6),w(c8),w(P6),f&&t(JBe),f&&t(Dd),w(f8),f&&t(YBe),f&&t(Ko),w(m8),w(h8),w(q6),w(p8),w(D6),f&&t(KBe),f&&t(Vd),w(_8),f&&t(ZBe),f&&t(Zo),w(b8),w(F8),w(O6),w(T8),w(dT),f&&t(ePe),f&&t(Qd),w(M8),f&&t(oPe),f&&t(er),w(E8),w(w8),w(fT),w(A8),w(MT),f&&t(rPe),f&&t(Ud),w(y8),f&&t(tPe),f&&t(or),w(L8),w($8),w(CT),w(k8),w(YT),f&&t(aPe),f&&t(Kd),w(S8),f&&t(nPe),f&&t(rr),w(R8),w(P8),w(ZT),w(I8),w(_M),f&&t(sPe),f&&t(oc),w(q8),f&&t(lPe),f&&t(tr),w(N8),w(D8),w(vM),w(G8),w(TM),f&&t(iPe),f&&t(ac),w(O8),f&&t(dPe),f&&t(ar),w(V8),w(z8),w(EM),w(Q8),w(XM),f&&t(cPe),f&&t(lc),w(W8),f&&t(fPe),f&&t(nr),w(H8),w(J8),w(QM),w(Y8),w(gE),f&&t(mPe),f&&t(cc),w(K8),f&&t(gPe),f&&t(sr),w(Z8),w(o7),w(pE),w(r7),w(_E),f&&t(hPe),f&&t(gc),w(t7),f&&t(pPe),f&&t(lr),w(a7),w(s7),w(vE),w(l7),w(TE),f&&t(uPe),f&&t(uc),w(i7),f&&t(_Pe),f&&t(ir),w(d7),w(f7),w(EE),w(m7),w(UE),f&&t(bPe),f&&t(vc),w(g7),f&&t(vPe),f&&t(dr),w(h7),w(u7),w(YE),w(_7),w(t5),f&&t(FPe),f&&t(Mc),w(b7),f&&t(TPe),f&&t(cr),w(v7),w(T7),w(n5),w(M7),w(b5),f&&t(MPe),f&&t(wc),w(E7),f&&t(EPe),f&&t(fr),w(C7),w(A7),w(F5),w(y7),w(k5),f&&t(CPe),f&&t(Lc),w(L7),f&&t(wPe),f&&t(mr),w(x7),w(k7),w(R5),w(S7),w(V5),f&&t(APe),f&&t(kc),w(R7),f&&t(yPe),f&&t(gr),w(B7),w(I7),w(z5),w(q7),w(rC),f&&t(LPe),f&&t(Bc),w(N7),f&&t(xPe),f&&t(hr),w(j7),w(G7),w(aC),w(O7),w(pC),f&&t($Pe),f&&t(qc),w(V7),f&&t(kPe),f&&t(pr),w(X7),w(Q7),w(_C),w(W7),w(AC),f&&t(SPe),f&&t(Dc),w(H7),f&&t(RPe),f&&t(ur),w(U7),w(Y7),w(LC),w(K7),w(qC),f&&t(BPe),f&&t(Vc),w(Z7),f&&t(PPe),f&&t(_r),w(ex),w(rx),w(jC),w(tx),w(GC),f&&t(IPe),f&&t(Qc),w(ax),f&&t(qPe),f&&t(br),w(nx),w(lx),w(VC),w(ix),w(QC),f&&t(NPe),f&&t(Uc),w(cx),f&&t(jPe),f&&t(vr),w(fx),w(gx),w(HC),w(hx),w(JC)}}}const qCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function NCt(L){return DEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zCt extends IEt{constructor(g){super();qEt(this,g,NCt,ICt,NEt,{})}}export{zCt as default,qCt as metadata};
